

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sun Sep 04 19:34:37 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    43                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    44  0000                     
    45                           	psect	idataCOMRAM
    46  001EC4                     __pidataCOMRAM:
    47                           	opt stack 0
    48                           
    49                           ;initializer for _anio
    50  001EC4  000F               	dw	15
    51                           
    52                           ;initializer for _dia
    53  001EC6  0008               	dw	8
    54                           
    55                           ;initializer for _diasem
    56  001EC8  0003               	dw	3
    57                           
    58                           ;initializer for _hora
    59  001ECA  0012               	dw	18
    60                           
    61                           ;initializer for _mes
    62  001ECC  0009               	dw	9
    63                           
    64                           ;initializer for _minuto
    65  001ECE  001E               	dw	30
    66                           
    67                           ;initializer for _state_alarm
    68  001ED0  02                 	db	2
    69                           
    70                           	psect	smallconst
    71  000F00                     __psmallconst:
    72                           	opt stack 0
    73  000F00  00                 	db	0
    74  000F01                     _dpowers:
    75                           	opt stack 0
    76  000F01  0001               	dw	1
    77  000F03  000A               	dw	10
    78  000F05  0064               	dw	100
    79  000F07  03E8               	dw	1000
    80  000F09  2710               	dw	10000
    81  000F0B                     __end_of_dpowers:
    82                           	opt stack 0
    83  000F0B                     _LCD_INIT_STRING:
    84                           	opt stack 0
    85  000F0B  28                 	db	40
    86  000F0C  0C                 	db	12
    87  000F0D  01                 	db	1
    88  000F0E  06                 	db	6
    89  000F0F                     __end_of_LCD_INIT_STRING:
    90                           	opt stack 0
    91  000F0F                     STR_1:
    92                           
    93                           ; BSR set to: 15
    94  000F0F  20                 	db	32
    95  000F10  20                 	db	32
    96  000F11  20                 	db	32
    97  000F12  20                 	db	32
    98  000F13  20                 	db	32
    99  000F14  20                 	db	32
   100  000F15  20                 	db	32
   101  000F16  20                 	db	32
   102  000F17  20                 	db	32
   103  000F18  20                 	db	32
   104  000F19  20                 	db	32
   105  000F1A  20                 	db	32
   106  000F1B  20                 	db	32
   107  000F1C  20                 	db	32
   108  000F1D  20                 	db	32
   109  000F1E  20                 	db	32
   110  000F1F  20                 	db	32
   111  000F20  20                 	db	32
   112  000F21  20                 	db	32
   113  000F22  20                 	db	32
   114  000F23  20                 	db	32
   115  000F24  20                 	db	32
   116  000F25  20                 	db	32
   117  000F26  20                 	db	32
   118  000F27  20                 	db	32
   119  000F28  20                 	db	32
   120  000F29  20                 	db	32
   121  000F2A  20                 	db	32
   122  000F2B  20                 	db	32
   123  000F2C  20                 	db	32
   124  000F2D  20                 	db	32
   125  000F2E  20                 	db	32
   126  000F2F  00                 	db	0
   127  000F30                     STR_20:
   128                           
   129                           ; BSR set to: 15
   130  000F30  25                 	db	37
   131  000F31  30                 	db	48	;'0'
   132  000F32  32                 	db	50	;'2'
   133  000F33  75                 	db	117	;'u'
   134  000F34  2F                 	db	47
   135  000F35  25                 	db	37
   136  000F36  30                 	db	48	;'0'
   137  000F37  32                 	db	50	;'2'
   138  000F38  75                 	db	117	;'u'
   139  000F39  2F                 	db	47
   140  000F3A  25                 	db	37
   141  000F3B  30                 	db	48	;'0'
   142  000F3C  32                 	db	50	;'2'
   143  000F3D  75                 	db	117	;'u'
   144  000F3E  00                 	db	0
   145  000F3F                     STR_2:
   146                           
   147                           ; BSR set to: 15
   148  000F3F  6E                 	db	110	;'n'
   149  000F40  75                 	db	117	;'u'
   150  000F41  6C                 	db	108	;'l'
   151  000F42  6C                 	db	108	;'l'
   152  000F43  20                 	db	32
   153  000F44  70                 	db	112	;'p'
   154  000F45  6F                 	db	111	;'o'
   155  000F46  69                 	db	105	;'i'
   156  000F47  6E                 	db	110	;'n'
   157  000F48  74                 	db	116	;'t'
   158  000F49  65                 	db	101	;'e'
   159  000F4A  72                 	db	114	;'r'
   160  000F4B  00                 	db	0
   161  000F4C                     STR_22:
   162                           
   163                           ; BSR set to: 15
   164  000F4C  57                 	db	87	;'W'
   165  000F4D  41                 	db	65	;'A'
   166  000F4E  52                 	db	82	;'R'
   167  000F4F  4E                 	db	78	;'N'
   168  000F50  49                 	db	73	;'I'
   169  000F51  4E                 	db	78	;'N'
   170  000F52  47                 	db	71	;'G'
   171  000F53  21                 	db	33
   172  000F54  21                 	db	33
   173  000F55  21                 	db	33
   174  000F56  00                 	db	0
   175  000F57                     STR_21:
   176                           
   177                           ; BSR set to: 15
   178  000F57  25                 	db	37
   179  000F58  30                 	db	48	;'0'
   180  000F59  32                 	db	50	;'2'
   181  000F5A  75                 	db	117	;'u'
   182  000F5B  3A                 	db	58	;':'
   183  000F5C  25                 	db	37
   184  000F5D  30                 	db	48	;'0'
   185  000F5E  32                 	db	50	;'2'
   186  000F5F  75                 	db	117	;'u'
   187  000F60  00                 	db	0
   188  000F61                     STR_3:
   189                           
   190                           ; BSR set to: 15
   191  000F61  65                 	db	101	;'e'
   192  000F62  78                 	db	120	;'x'
   193  000F63  63                 	db	99	;'c'
   194  000F64  65                 	db	101	;'e'
   195  000F65  70                 	db	112	;'p'
   196  000F66  74                 	db	116	;'t'
   197  000F67  69                 	db	105	;'i'
   198  000F68  6F                 	db	111	;'o'
   199  000F69  6E                 	db	110	;'n'
   200  000F6A  00                 	db	0
   201  000F6B                     STR_26:
   202                           
   203                           ; BSR set to: 15
   204  000F6B  54                 	db	84	;'T'
   205  000F6C  52                 	db	82	;'R'
   206  000F6D  49                 	db	73	;'I'
   207  000F6E  47                 	db	71	;'G'
   208  000F6F  47                 	db	71	;'G'
   209  000F70  45                 	db	69	;'E'
   210  000F71  44                 	db	68	;'D'
   211  000F72  00                 	db	0
   212  000F73                     STR_4:
   213                           
   214                           ; BSR set to: 15
   215  000F73  25                 	db	37
   216  000F74  30                 	db	48	;'0'
   217  000F75  31                 	db	49	;'1'
   218  000F76  75                 	db	117	;'u'
   219  000F77  00                 	db	0
   220  000F78                     STR_25:
   221                           
   222                           ; BSR set to: 15
   223  000F78  4F                 	db	79	;'O'
   224  000F79  46                 	db	70	;'F'
   225  000F7A  46                 	db	70	;'F'
   226  000F7B  00                 	db	0
   227  000F7C                     STR_24:
   228                           
   229                           ; BSR set to: 15
   230  000F7C  4F                 	db	79	;'O'
   231  000F7D  4E                 	db	78	;'N'
   232  000F7E  00                 	db	0
   233  000F7F                     STR_18:
   234                           
   235                           ; BSR set to: 15
   236  000F7F  23                 	db	35
   237  000F80  00                 	db	0
   238  000F81                     STR_16:
   239                           
   240                           ; BSR set to: 15
   241  000F81  2A                 	db	42
   242  000F82  00                 	db	0
   243  000F83                     STR_7:
   244                           
   245                           ; BSR set to: 15
   246  000F83  41                 	db	65	;'A'
   247  000F84  00                 	db	0
   248  000F85                     STR_11:
   249                           
   250                           ; BSR set to: 15
   251  000F85  42                 	db	66	;'B'
   252  000F86  00                 	db	0
   253  000F87                     STR_15:
   254                           
   255                           ; BSR set to: 15
   256  000F87  43                 	db	67	;'C'
   257  000F88  00                 	db	0
   258  0000                     
   259                           ; #config settings
   260  000F89  00                 	db	0	; dummy byte at the end
   261  0000                     
   262                           	psect	nvCOMRAM
   263  000043                     __pnvCOMRAM:
   264                           	opt stack 0
   265  000043                     _anio_d:
   266                           	opt stack 0
   267  000043                     	ds	1
   268  000044                     _anio_u:
   269                           	opt stack 0
   270  000044                     	ds	1
   271  000045                     _dia_semana:
   272                           	opt stack 0
   273  000045                     	ds	1
   274  000046                     _fecha_d:
   275                           	opt stack 0
   276  000046                     	ds	1
   277  000047                     _fecha_u:
   278                           	opt stack 0
   279  000047                     	ds	1
   280  000048                     _hora_d:
   281                           	opt stack 0
   282  000048                     	ds	1
   283  000049                     _hora_u:
   284                           	opt stack 0
   285  000049                     	ds	1
   286  00004A                     _mes_d:
   287                           	opt stack 0
   288  00004A                     	ds	1
   289  00004B                     _mes_u:
   290                           	opt stack 0
   291  00004B                     	ds	1
   292  00004C                     _minuto_d:
   293                           	opt stack 0
   294  00004C                     	ds	1
   295  00004D                     _minuto_u:
   296                           	opt stack 0
   297  00004D                     	ds	1
   298  00004E                     _segundo_d:
   299                           	opt stack 0
   300  00004E                     	ds	1
   301  00004F                     _segundo_u:
   302                           	opt stack 0
   303  00004F                     	ds	1
   304  0000                     _ANCON0	set	3912
   305  0000                     _ANCON1	set	3913
   306  0000                     _RTCCFG	set	3903
   307  0000                     _RTCCFGbits	set	3903
   308  0000                     _ADCON0	set	4034
   309  0000                     _ADCON1	set	4033
   310  0000                     _ALRMCFGbits	set	3985
   311  0000                     _EECON2	set	4007
   312  0000                     _INTCONbits	set	4082
   313  0000                     _LATAbits	set	3977
   314  0000                     _LATBbits	set	3978
   315  0000                     _OSCCONbits	set	4051
   316  0000                     _OSCTUNEbits	set	3995
   317  0000                     _PIE3bits	set	4003
   318  0000                     _PORTAbits	set	3968
   319  0000                     _PORTCbits	set	3970
   320  0000                     _RTCVALH	set	3993
   321  0000                     _RTCVALL	set	3992
   322  0000                     _T1CONbits	set	4045
   323  0000                     _TRISA	set	3986
   324  0000                     _TRISB	set	3987
   325  0000                     _TRISBbits	set	3987
   326  0000                     _TRISC	set	3988
   327                           
   328                           	psect	cinit
   329  001D86                     __pcinit:
   330                           	opt stack 0
   331  001D86                     start_initialization:
   332                           	opt stack 0
   333  001D86                     __initialization:
   334                           	opt stack 0
   335                           
   336                           ; Clear objects allocated to BANK0 (44 bytes)
   337  001D86  EE00  F060         	lfsr	0,__pbssBANK0
   338  001D8A  0E2C               	movlw	44
   339  001D8C                     clear_0:
   340  001D8C  6AEE               	clrf	postinc0,c
   341  001D8E  06E8               	decf	wreg,f,c
   342  001D90  E1FD               	bnz	clear_0
   343                           
   344                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   345  001D92  6A5D               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   346                           
   347                           ; Clear objects allocated to COMRAM (27 bytes)
   348  001D94  EE00  F028         	lfsr	0,__pbssCOMRAM
   349  001D98  0E1B               	movlw	27
   350  001D9A                     clear_1:
   351  001D9A  6AEE               	clrf	postinc0,c
   352  001D9C  06E8               	decf	wreg,f,c
   353  001D9E  E1FD               	bnz	clear_1
   354                           
   355                           ; Initialize objects allocated to COMRAM (13 bytes)
   356                           ; load TBLPTR registers with __pidataCOMRAM
   357  001DA0  0EC4               	movlw	low __pidataCOMRAM
   358  001DA2  6EF6               	movwf	tblptrl,c
   359  001DA4  0E1E               	movlw	high __pidataCOMRAM
   360  001DA6  6EF7               	movwf	tblptrh,c
   361  001DA8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   362  001DAA  6EF8               	movwf	tblptru,c
   363  001DAC  EE00  F050         	lfsr	0,__pdataCOMRAM
   364  001DB0  EE10 F00D          	lfsr	1,13
   365  001DB4                     copy_data0:
   366  001DB4  0009               	tblrd		*+
   367  001DB6  CFF5 FFEE          	movff	tablat,postinc0
   368  001DBA  50E5               	movf	postdec1,w,c
   369  001DBC  50E1               	movf	fsr1l,w,c
   370  001DBE  E1FA               	bnz	copy_data0
   371  001DC0                     end_of_initialization:
   372                           	opt stack 0
   373  001DC0                     __end_of__initialization:
   374                           	opt stack 0
   375  001DC0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   376  001DC2  6EF8               	movwf	tblptru,c
   377  001DC4  0100               	movlb	0
   378  001DC6  EFFD  F00C         	goto	_main	;jump to C main() function
   379                           tblptru	equ	0xFF8
   380                           tblptrh	equ	0xFF7
   381                           tblptrl	equ	0xFF6
   382                           tablat	equ	0xFF5
   383                           postinc0	equ	0xFEE
   384                           wreg	equ	0xFE8
   385                           postdec1	equ	0xFE5
   386                           fsr1l	equ	0xFE1
   387                           
   388                           	psect	bitbssCOMRAM
   389  0002E8                     __pbitbssCOMRAM:
   390                           	opt stack 0
   391  0002E8                     _flag:
   392                           	opt stack 0
   393  0002E8                     	ds	1
   394                           tblptru	equ	0xFF8
   395                           tblptrh	equ	0xFF7
   396                           tblptrl	equ	0xFF6
   397                           tablat	equ	0xFF5
   398                           postinc0	equ	0xFEE
   399                           wreg	equ	0xFE8
   400                           postdec1	equ	0xFE5
   401                           fsr1l	equ	0xFE1
   402                           
   403                           	psect	bssCOMRAM
   404  000028                     __pbssCOMRAM:
   405                           	opt stack 0
   406  000028                     _RtccTimeVal:
   407                           	opt stack 0
   408  000028                     	ds	4
   409  00002C                     _a:
   410                           	opt stack 0
   411  00002C                     	ds	2
   412  00002E                     _b:
   413                           	opt stack 0
   414  00002E                     	ds	2
   415  000030                     _c:
   416                           	opt stack 0
   417  000030                     	ds	2
   418  000032                     _i:
   419                           	opt stack 0
   420  000032                     	ds	2
   421  000034                     _j:
   422                           	opt stack 0
   423  000034                     	ds	2
   424  000036                     _k:
   425                           	opt stack 0
   426  000036                     	ds	2
   427  000038                     _segundo:
   428                           	opt stack 0
   429  000038                     	ds	2
   430  00003A                     _key:
   431                           	opt stack 0
   432  00003A                     	ds	1
   433  00003B                     _RtccDate:
   434                           	opt stack 0
   435  00003B                     	ds	4
   436  00003F                     _RtccTime:
   437                           	opt stack 0
   438  00003F                     	ds	4
   439                           tblptru	equ	0xFF8
   440                           tblptrh	equ	0xFF7
   441                           tblptrl	equ	0xFF6
   442                           tablat	equ	0xFF5
   443                           postinc0	equ	0xFEE
   444                           wreg	equ	0xFE8
   445                           postdec1	equ	0xFE5
   446                           fsr1l	equ	0xFE1
   447                           
   448                           	psect	dataCOMRAM
   449  000050                     __pdataCOMRAM:
   450                           	opt stack 0
   451  000050                     _anio:
   452                           	opt stack 0
   453  000050                     	ds	2
   454  000052                     _dia:
   455                           	opt stack 0
   456  000052                     	ds	2
   457  000054                     _diasem:
   458                           	opt stack 0
   459  000054                     	ds	2
   460  000056                     _hora:
   461                           	opt stack 0
   462  000056                     	ds	2
   463  000058                     _mes:
   464                           	opt stack 0
   465  000058                     	ds	2
   466  00005A                     _minuto:
   467                           	opt stack 0
   468  00005A                     	ds	2
   469  00005C                     _state_alarm:
   470                           	opt stack 0
   471  00005C                     	ds	1
   472                           tblptru	equ	0xFF8
   473                           tblptrh	equ	0xFF7
   474                           tblptrl	equ	0xFF6
   475                           tablat	equ	0xFF5
   476                           postinc0	equ	0xFEE
   477                           wreg	equ	0xFE8
   478                           postdec1	equ	0xFE5
   479                           fsr1l	equ	0xFE1
   480                           
   481                           	psect	bssBANK0
   482  000060                     __pbssBANK0:
   483                           	opt stack 0
   484  000060                     _RtccAlrmTimeDate:
   485                           	opt stack 0
   486  000060                     	ds	8
   487  000068                     _RtccTimeDate:
   488                           	opt stack 0
   489  000068                     	ds	8
   490  000070                     _Rtcc_read_TimeDate:
   491                           	opt stack 0
   492  000070                     	ds	8
   493  000078                     _buffer2:
   494                           	opt stack 0
   495  000078                     	ds	20
   496                           tblptru	equ	0xFF8
   497                           tblptrh	equ	0xFF7
   498                           tblptrl	equ	0xFF6
   499                           tablat	equ	0xFF5
   500                           postinc0	equ	0xFEE
   501                           wreg	equ	0xFE8
   502                           postdec1	equ	0xFE5
   503                           fsr1l	equ	0xFE1
   504                           
   505                           	psect	cstackCOMRAM
   506  000001                     __pcstackCOMRAM:
   507                           	opt stack 0
   508  000001                     ??_isdigit:
   509  000001                     ??_lcd_send_nibble:
   510  000001                     ?___wmul:
   511                           	opt stack 0
   512  000001                     ?___awdiv:
   513                           	opt stack 0
   514  000001                     ?___lwdiv:
   515                           	opt stack 0
   516  000001                     Delay100TCYx@unit:
   517                           	opt stack 0
   518  000001                     Delay1KTCYx@unit:
   519                           	opt stack 0
   520  000001                     RtccWriteDate@pDt:
   521                           	opt stack 0
   522  000001                     RtccWriteTime@pTm:
   523                           	opt stack 0
   524  000001                     ___wmul@multiplier:
   525                           	opt stack 0
   526  000001                     ___awdiv@dividend:
   527                           	opt stack 0
   528  000001                     ___lwdiv@dividend:
   529                           	opt stack 0
   530                           
   531                           ; 2 bytes @ 0x0
   532  000001                     	ds	1
   533  000002                     lcd_send_nibble@nibble:
   534                           	opt stack 0
   535  000002                     _isdigit$2329:
   536                           	opt stack 0
   537                           
   538                           ; 1 bytes @ 0x1
   539  000002                     	ds	1
   540  000003                     lcd_send_byte@n:
   541                           	opt stack 0
   542  000003                     RtccWriteDate@di:
   543                           	opt stack 0
   544  000003                     RtccWriteTime@di:
   545                           	opt stack 0
   546  000003                     isdigit@c:
   547                           	opt stack 0
   548  000003                     ___wmul@multiplicand:
   549                           	opt stack 0
   550  000003                     ___awdiv@divisor:
   551                           	opt stack 0
   552  000003                     ___lwdiv@divisor:
   553                           	opt stack 0
   554                           
   555                           ; 2 bytes @ 0x2
   556  000003                     	ds	1
   557  000004                     lcd_send_byte@address:
   558                           	opt stack 0
   559                           
   560                           ; 1 bytes @ 0x3
   561  000004                     	ds	1
   562  000005                     lcd_init@i:
   563                           	opt stack 0
   564  000005                     lcd_gotoxy@y:
   565                           	opt stack 0
   566  000005                     lcd_comand@d:
   567                           	opt stack 0
   568  000005                     RtccWriteDate@wasOn:
   569                           	opt stack 0
   570  000005                     RtccWriteTime@wasOn:
   571                           	opt stack 0
   572  000005                     ___awdiv@counter:
   573                           	opt stack 0
   574  000005                     ___wmul@product:
   575                           	opt stack 0
   576  000005                     ___lwdiv@quotient:
   577                           	opt stack 0
   578                           
   579                           ; 2 bytes @ 0x4
   580  000005                     	ds	1
   581  000006                     ??_clear:
   582  000006                     lcd_gotoxy@x:
   583                           	opt stack 0
   584  000006                     RtccWriteDate@wasAlrm:
   585                           	opt stack 0
   586  000006                     RtccWriteTime@wasAlrm:
   587                           	opt stack 0
   588  000006                     ___awdiv@sign:
   589                           	opt stack 0
   590                           
   591                           ; 1 bytes @ 0x5
   592  000006                     	ds	1
   593  000007                     lcd_gotoxy@address:
   594                           	opt stack 0
   595  000007                     RtccWriteTime@wasWrEn:
   596                           	opt stack 0
   597  000007                     ___lwdiv@counter:
   598                           	opt stack 0
   599  000007                     RtccWriteDate@tempYear:
   600                           	opt stack 0
   601  000007                     ___awdiv@quotient:
   602                           	opt stack 0
   603                           
   604                           ; 2 bytes @ 0x6
   605  000007                     	ds	1
   606  000008                     ?___lwmod:
   607                           	opt stack 0
   608  000008                     lcd_putc@c:
   609                           	opt stack 0
   610  000008                     RtccWriteTime@tempMinSec:
   611                           	opt stack 0
   612  000008                     ___lwmod@dividend:
   613                           	opt stack 0
   614                           
   615                           ; 2 bytes @ 0x7
   616  000008                     	ds	1
   617  000009                     RtccWriteDate@wasWrEn:
   618                           	opt stack 0
   619  000009                     lcd_putrs@ptr:
   620                           	opt stack 0
   621  000009                     __delay_s@millis:
   622                           	opt stack 0
   623                           
   624                           ; 2 bytes @ 0x8
   625  000009                     	ds	1
   626  00000A                     RtccWriteDate@tempDayMonth:
   627                           	opt stack 0
   628  00000A                     RtccWriteTime@tempHourWDay:
   629                           	opt stack 0
   630  00000A                     ___lwmod@divisor:
   631                           	opt stack 0
   632                           
   633                           ; 2 bytes @ 0x9
   634  00000A                     	ds	1
   635  00000B                     ??__delay_s:
   636                           
   637                           ; 0 bytes @ 0xA
   638  00000B                     	ds	1
   639  00000C                     ___lwmod@counter:
   640                           	opt stack 0
   641  00000C                     __delay_s@it:
   642                           	opt stack 0
   643  00000C                     RtccWriteDate@tempHourWDay:
   644                           	opt stack 0
   645                           
   646                           ; 2 bytes @ 0xB
   647  00000C                     	ds	1
   648  00000D                     ?_sprintf:
   649                           	opt stack 0
   650  00000D                     sprintf@sp:
   651                           	opt stack 0
   652                           
   653                           ; 2 bytes @ 0xC
   654  00000D                     	ds	1
   655  00000E                     __delay_s@index:
   656                           	opt stack 0
   657                           
   658                           ; 2 bytes @ 0xD
   659  00000E                     	ds	1
   660  00000F                     sprintf@f:
   661                           	opt stack 0
   662                           
   663                           ; 2 bytes @ 0xE
   664  00000F                     	ds	8
   665  000017                     ??_sprintf:
   666                           
   667                           ; 0 bytes @ 0x16
   668  000017                     	ds	4
   669  00001B                     sprintf@ap:
   670                           	opt stack 0
   671                           
   672                           ; 2 bytes @ 0x1A
   673  00001B                     	ds	2
   674  00001D                     sprintf@flag:
   675                           	opt stack 0
   676                           
   677                           ; 1 bytes @ 0x1C
   678  00001D                     	ds	1
   679  00001E                     sprintf@val:
   680                           	opt stack 0
   681                           
   682                           ; 2 bytes @ 0x1D
   683  00001E                     	ds	2
   684  000020                     sprintf@prec:
   685                           	opt stack 0
   686                           
   687                           ; 1 bytes @ 0x1F
   688  000020                     	ds	1
   689  000021                     sprintf@width:
   690                           	opt stack 0
   691                           
   692                           ; 2 bytes @ 0x20
   693  000021                     	ds	2
   694  000023                     sprintf@c:
   695                           	opt stack 0
   696                           
   697                           ; 1 bytes @ 0x22
   698  000023                     	ds	1
   699  000024                     ??_read_keyboard:
   700  000024                     
   701                           ; 0 bytes @ 0x23
   702  000024                     	ds	1
   703  000025                     twinkle@input:
   704                           	opt stack 0
   705                           
   706                           ; 1 bytes @ 0x24
   707  000025                     	ds	1
   708  000026                     ??_main:
   709                           
   710                           ; 0 bytes @ 0x25
   711  000026                     	ds	1
   712  000027                     main@input:
   713                           	opt stack 0
   714                           
   715                           ; 1 bytes @ 0x26
   716  000027                     	ds	1
   717                           tblptru	equ	0xFF8
   718                           tblptrh	equ	0xFF7
   719                           tblptrl	equ	0xFF6
   720                           tablat	equ	0xFF5
   721                           postinc0	equ	0xFEE
   722                           wreg	equ	0xFE8
   723                           postdec1	equ	0xFE5
   724                           fsr1l	equ	0xFE1
   725                           
   726 ;;
   727 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   728 ;;
   729 ;; *************** function _main *****************
   730 ;; Defined at:
   731 ;;		line 87 in file "main.c"
   732 ;; Parameters:    Size  Location     Type
   733 ;;		None
   734 ;; Auto vars:     Size  Location     Type
   735 ;;  input           1   38[COMRAM] unsigned char 
   736 ;; Return value:  Size  Location     Type
   737 ;;                  2   52[None  ] int 
   738 ;; Registers used:
   739 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   740 ;; Tracked objects:
   741 ;;		On entry : 0/0
   742 ;;		On exit  : 0/0
   743 ;;		Unchanged: 0/0
   744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   746 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   747 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   748 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   749 ;;Total ram usage:        2 bytes
   750 ;; Hardware stack levels required when called:    8
   751 ;; This function calls:
   752 ;;		_Setup
   753 ;;		_caratula
   754 ;;		_lcd_gotoxy
   755 ;;		_lcd_putrs
   756 ;;		_read_keyboard
   757 ;;		_set_vision
   758 ;; This function is called by:
   759 ;;		Startup code after reset
   760 ;; This function uses a non-reentrant model
   761 ;;
   762                           
   763                           	psect	text0
   764  0019FA                     __ptext0:
   765                           	opt stack 0
   766  0019FA                     _main:
   767                           	opt stack 23
   768                           
   769                           ;main.c: 88: Setup();
   770                           
   771                           ; BSR set to: 15
   772                           ;incstack = 0
   773  0019FA  EC9F  F00E         	call	_Setup	;wreg free
   774                           
   775                           ;main.c: 89: caratula();
   776  0019FE  EC69  F00F         	call	_caratula	;wreg free
   777  001A02  D000               	goto	l2807
   778  001A04                     l2807:
   779                           
   780                           ;main.c: 94: set_vision();
   781  001A04  ECFF  F00D         	call	_set_vision	;wreg free
   782                           
   783                           ;main.c: 96: char input = read_keyboard();
   784  001A08  ECC5  F007         	call	_read_keyboard	;wreg free
   785  001A0C  6E27               	movwf	main@input,c
   786                           
   787                           ;main.c: 98: if (input == 16){
   788  001A0E  0E10               	movlw	16
   789  001A10  1827               	xorwf	main@input,w,c
   790  001A12  A4D8               	btfss	status,2,c
   791  001A14  D7F7               	goto	l2807
   792                           
   793                           ;main.c: 99: lcd_gotoxy(1,1);
   794  001A16  0E01               	movlw	1
   795  001A18  6E05               	movwf	lcd_gotoxy@y,c
   796  001A1A  0E01               	movlw	1
   797  001A1C  EC12  F00F         	call	_lcd_gotoxy
   798                           
   799                           ;main.c: 100: lcd_putrs("                                ");
   800  001A20  0E0F               	movlw	low STR_1
   801  001A22  6E09               	movwf	lcd_putrs@ptr,c
   802  001A24  0E0F               	movlw	high STR_1
   803  001A26  6E0A               	movwf	lcd_putrs@ptr+1,c
   804  001A28  EC29  F00E         	call	_lcd_putrs	;wreg free
   805                           
   806                           ;main.c: 101: lcd_gotoxy(1,1);
   807  001A2C  0E01               	movlw	1
   808  001A2E  6E05               	movwf	lcd_gotoxy@y,c
   809  001A30  0E01               	movlw	1
   810  001A32  EC12  F00F         	call	_lcd_gotoxy
   811                           
   812                           ;main.c: 102: lcd_putrs("null pointer");
   813  001A36  0E3F               	movlw	low STR_2
   814  001A38  6E09               	movwf	lcd_putrs@ptr,c
   815  001A3A  0E0F               	movlw	high STR_2
   816  001A3C  6E0A               	movwf	lcd_putrs@ptr+1,c
   817  001A3E  EC29  F00E         	call	_lcd_putrs	;wreg free
   818                           
   819                           ;main.c: 103: lcd_gotoxy(1,2);
   820  001A42  0E02               	movlw	2
   821  001A44  6E05               	movwf	lcd_gotoxy@y,c
   822  001A46  0E01               	movlw	1
   823  001A48  EC12  F00F         	call	_lcd_gotoxy
   824                           
   825                           ;main.c: 104: lcd_putrs("exception");
   826  001A4C  0E61               	movlw	low STR_3
   827  001A4E  6E09               	movwf	lcd_putrs@ptr,c
   828  001A50  0E0F               	movlw	high STR_3
   829  001A52  6E0A               	movwf	lcd_putrs@ptr+1,c
   830  001A54  EC29  F00E         	call	_lcd_putrs	;wreg free
   831                           
   832                           ;main.c: 105: input = 0;
   833  001A58  0E00               	movlw	0
   834  001A5A  6E27               	movwf	main@input,c
   835                           
   836                           ;main.c: 106: key = 0;
   837  001A5C  0E00               	movlw	0
   838  001A5E  6E3A               	movwf	_key,c
   839                           
   840                           ;main.c: 107: _delay((unsigned long)((98)*(8000000/4000.0)));
   841  001A60  0EFF               	movlw	255
   842  001A62  6E26               	movwf	??_main& (0+255),c
   843  001A64  0E8A               	movlw	138
   844  001A66                     u2357:
   845  001A66  2EE8               	decfsz	wreg,f,c
   846  001A68  D7FE               	goto	u2357
   847  001A6A  2E26               	decfsz	??_main& (0+255),f,c
   848  001A6C  D7FC               	goto	u2357
   849  001A6E  D000               	nop2	
   850  001A70  D7C9               	goto	l2807
   851                           
   852                           ;main.c: 108: }
   853                           ;main.c: 109: }
   854                           ;main.c: 111: return 0;
   855                           ;	Return value of _main is never used
   856  001A72  EF00  F000         	goto	start
   857  001A76                     __end_of_main:
   858                           	opt stack 0
   859                           tblptru	equ	0xFF8
   860                           tblptrh	equ	0xFF7
   861                           tblptrl	equ	0xFF6
   862                           tablat	equ	0xFF5
   863                           postinc0	equ	0xFEE
   864                           wreg	equ	0xFE8
   865                           postdec1	equ	0xFE5
   866                           fsr1l	equ	0xFE1
   867                           status	equ	0xFD8
   868                           
   869 ;; *************** function _set_vision *****************
   870 ;; Defined at:
   871 ;;		line 45 in file "lcd_vision.c"
   872 ;; Parameters:    Size  Location     Type
   873 ;;		None
   874 ;; Auto vars:     Size  Location     Type
   875 ;;		None
   876 ;; Return value:  Size  Location     Type
   877 ;;		None               void
   878 ;; Registers used:
   879 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   880 ;; Tracked objects:
   881 ;;		On entry : 0/0
   882 ;;		On exit  : 0/0
   883 ;;		Unchanged: 0/0
   884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   886 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   888 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   889 ;;Total ram usage:        0 bytes
   890 ;; Hardware stack levels used:    1
   891 ;; Hardware stack levels required when called:    7
   892 ;; This function calls:
   893 ;;		_clear
   894 ;;		_lcd_gotoxy
   895 ;;		_lcd_putrs
   896 ;;		_twinkle
   897 ;;		_write_Date
   898 ;; This function is called by:
   899 ;;		_main
   900 ;; This function uses a non-reentrant model
   901 ;;
   902                           
   903                           	psect	text1
   904  001BFE                     __ptext1:
   905                           	opt stack 0
   906  001BFE                     _set_vision:
   907                           	opt stack 23
   908                           
   909                           ;lcd_vision.c: 46: clear();
   910                           
   911                           ;incstack = 0
   912  001BFE  EC35  F00F         	call	_clear	;wreg free
   913                           
   914                           ;lcd_vision.c: 47: write_Date();
   915  001C02  ECBE  F00C         	call	_write_Date	;wreg free
   916                           
   917                           ;lcd_vision.c: 48: lcd_gotoxy(1,1);
   918  001C06  0E01               	movlw	1
   919  001C08  6E05               	movwf	lcd_gotoxy@y,c
   920  001C0A  0E01               	movlw	1
   921  001C0C  EC12  F00F         	call	_lcd_gotoxy
   922                           
   923                           ;lcd_vision.c: 50: switch (state_alarm){
   924  001C10  D017               	goto	l2799
   925  001C12                     l2791:
   926  001C12  0E7C               	movlw	low STR_24
   927  001C14  6E09               	movwf	lcd_putrs@ptr,c
   928  001C16  0E0F               	movlw	high STR_24
   929  001C18  6E0A               	movwf	lcd_putrs@ptr+1,c
   930  001C1A  EC29  F00E         	call	_lcd_putrs	;wreg free
   931                           
   932                           ;lcd_vision.c: 52: break;
   933  001C1E  0012               	return	
   934  001C20                     l2793:
   935  001C20  0E78               	movlw	low STR_25
   936  001C22  6E09               	movwf	lcd_putrs@ptr,c
   937  001C24  0E0F               	movlw	high STR_25
   938  001C26  6E0A               	movwf	lcd_putrs@ptr+1,c
   939  001C28  EC29  F00E         	call	_lcd_putrs	;wreg free
   940                           
   941                           ;lcd_vision.c: 54: break;
   942  001C2C  0012               	return	
   943  001C2E                     l2795:
   944  001C2E  0E6B               	movlw	low STR_26
   945  001C30  6E09               	movwf	lcd_putrs@ptr,c
   946  001C32  0E0F               	movlw	high STR_26
   947  001C34  6E0A               	movwf	lcd_putrs@ptr+1,c
   948  001C36  EC29  F00E         	call	_lcd_putrs	;wreg free
   949                           
   950                           ;lcd_vision.c: 56: twinkle();
   951  001C3A  EC76  F00D         	call	_twinkle	;wreg free
   952                           
   953                           ;lcd_vision.c: 57: }
   954  001C3E  0012               	return	
   955  001C40                     l2799:
   956  001C40  505C               	movf	_state_alarm,w,c
   957                           
   958                           ; Switch size 1, requested type "space"
   959                           ; Number of cases is 2, Range of values is 0 to 1
   960                           ; switch strategies available:
   961                           ; Name         Instructions Cycles
   962                           ; simple_byte            7     4 (average)
   963                           ;	Chosen strategy is simple_byte
   964  001C42  0A00               	xorlw	0	; case 0
   965  001C44  B4D8               	btfsc	status,2,c
   966  001C46  D7E5               	goto	l2791
   967  001C48  0A01               	xorlw	1	; case 1
   968  001C4A  B4D8               	btfsc	status,2,c
   969  001C4C  D7E9               	goto	l2793
   970  001C4E  D7EF               	goto	l2795
   971  001C50  0012               	return		;funcret
   972  001C52                     __end_of_set_vision:
   973                           	opt stack 0
   974                           tblptru	equ	0xFF8
   975                           tblptrh	equ	0xFF7
   976                           tblptrl	equ	0xFF6
   977                           tablat	equ	0xFF5
   978                           postinc0	equ	0xFEE
   979                           wreg	equ	0xFE8
   980                           postdec1	equ	0xFE5
   981                           fsr1l	equ	0xFE1
   982                           status	equ	0xFD8
   983                           
   984 ;; *************** function _write_Date *****************
   985 ;; Defined at:
   986 ;;		line 10 in file "lcd_vision.c"
   987 ;; Parameters:    Size  Location     Type
   988 ;;		None
   989 ;; Auto vars:     Size  Location     Type
   990 ;;		None
   991 ;; Return value:  Size  Location     Type
   992 ;;		None               void
   993 ;; Registers used:
   994 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   995 ;; Tracked objects:
   996 ;;		On entry : 0/0
   997 ;;		On exit  : 0/0
   998 ;;		Unchanged: 0/0
   999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1003 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1004 ;;Total ram usage:        0 bytes
  1005 ;; Hardware stack levels used:    1
  1006 ;; Hardware stack levels required when called:    5
  1007 ;; This function calls:
  1008 ;;		_lcd_gotoxy
  1009 ;;		_lcd_putrs
  1010 ;;		_sprintf
  1011 ;; This function is called by:
  1012 ;;		_set_vision
  1013 ;; This function uses a non-reentrant model
  1014 ;;
  1015                           
  1016                           	psect	text2
  1017  00197C                     __ptext2:
  1018                           	opt stack 0
  1019  00197C                     _write_Date:
  1020                           	opt stack 24
  1021                           
  1022                           ;lcd_vision.c: 11: lcd_gotoxy(9,1);
  1023                           
  1024                           ;incstack = 0
  1025  00197C  0E01               	movlw	1
  1026  00197E  6E05               	movwf	lcd_gotoxy@y,c
  1027  001980  0E09               	movlw	9
  1028  001982  EC12  F00F         	call	_lcd_gotoxy
  1029                           
  1030                           ;lcd_vision.c: 12: sprintf(buffer2,"%02u/%02u/%02u",dia,mes,anio);
  1031  001986  0E78               	movlw	low _buffer2
  1032  001988  6E0D               	movwf	sprintf@sp,c
  1033  00198A  0E00               	movlw	high _buffer2
  1034  00198C  6E0E               	movwf	sprintf@sp+1,c
  1035  00198E  0E30               	movlw	low STR_20
  1036  001990  6E0F               	movwf	sprintf@f,c
  1037  001992  0E0F               	movlw	high STR_20
  1038  001994  6E10               	movwf	sprintf@f+1,c
  1039  001996  C052  F011         	movff	_dia,?_sprintf+4
  1040  00199A  C053  F012         	movff	_dia+1,?_sprintf+5
  1041  00199E  C058  F013         	movff	_mes,?_sprintf+6
  1042  0019A2  C059  F014         	movff	_mes+1,?_sprintf+7
  1043  0019A6  C050  F015         	movff	_anio,?_sprintf+8
  1044  0019AA  C051  F016         	movff	_anio+1,?_sprintf+9
  1045  0019AE  EC34  F009         	call	_sprintf	;wreg free
  1046                           
  1047                           ;lcd_vision.c: 13: lcd_putrs(buffer2);
  1048  0019B2  0E78               	movlw	low _buffer2
  1049  0019B4  6E09               	movwf	lcd_putrs@ptr,c
  1050  0019B6  0E00               	movlw	high _buffer2
  1051  0019B8  6E0A               	movwf	lcd_putrs@ptr+1,c
  1052  0019BA  EC29  F00E         	call	_lcd_putrs	;wreg free
  1053                           
  1054                           ;lcd_vision.c: 14: sprintf(buffer2,"%02u:%02u",hora,minuto);
  1055  0019BE  0E78               	movlw	low _buffer2
  1056  0019C0  6E0D               	movwf	sprintf@sp,c
  1057  0019C2  0E00               	movlw	high _buffer2
  1058  0019C4  6E0E               	movwf	sprintf@sp+1,c
  1059  0019C6  0E57               	movlw	low STR_21
  1060  0019C8  6E0F               	movwf	sprintf@f,c
  1061  0019CA  0E0F               	movlw	high STR_21
  1062  0019CC  6E10               	movwf	sprintf@f+1,c
  1063  0019CE  C056  F011         	movff	_hora,?_sprintf+4
  1064  0019D2  C057  F012         	movff	_hora+1,?_sprintf+5
  1065  0019D6  C05A  F013         	movff	_minuto,?_sprintf+6
  1066  0019DA  C05B  F014         	movff	_minuto+1,?_sprintf+7
  1067  0019DE  EC34  F009         	call	_sprintf	;wreg free
  1068                           
  1069                           ;lcd_vision.c: 15: lcd_gotoxy(1,2);
  1070  0019E2  0E02               	movlw	2
  1071  0019E4  6E05               	movwf	lcd_gotoxy@y,c
  1072  0019E6  0E01               	movlw	1
  1073  0019E8  EC12  F00F         	call	_lcd_gotoxy
  1074                           
  1075                           ;lcd_vision.c: 16: lcd_putrs(buffer2);
  1076  0019EC  0E78               	movlw	low _buffer2
  1077  0019EE  6E09               	movwf	lcd_putrs@ptr,c
  1078  0019F0  0E00               	movlw	high _buffer2
  1079  0019F2  6E0A               	movwf	lcd_putrs@ptr+1,c
  1080  0019F4  EC29  F00E         	call	_lcd_putrs	;wreg free
  1081  0019F8  0012               	return		;funcret
  1082  0019FA                     __end_of_write_Date:
  1083                           	opt stack 0
  1084                           tblptru	equ	0xFF8
  1085                           tblptrh	equ	0xFF7
  1086                           tblptrl	equ	0xFF6
  1087                           tablat	equ	0xFF5
  1088                           postinc0	equ	0xFEE
  1089                           wreg	equ	0xFE8
  1090                           postdec1	equ	0xFE5
  1091                           fsr1l	equ	0xFE1
  1092                           status	equ	0xFD8
  1093                           
  1094 ;; *************** function _twinkle *****************
  1095 ;; Defined at:
  1096 ;;		line 28 in file "lcd_vision.c"
  1097 ;; Parameters:    Size  Location     Type
  1098 ;;		None
  1099 ;; Auto vars:     Size  Location     Type
  1100 ;;  input           1   36[COMRAM] unsigned char 
  1101 ;; Return value:  Size  Location     Type
  1102 ;;		None               void
  1103 ;; Registers used:
  1104 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1105 ;; Tracked objects:
  1106 ;;		On entry : 0/0
  1107 ;;		On exit  : 0/0
  1108 ;;		Unchanged: 0/0
  1109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1111 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1113 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1114 ;;Total ram usage:        1 bytes
  1115 ;; Hardware stack levels used:    1
  1116 ;; Hardware stack levels required when called:    6
  1117 ;; This function calls:
  1118 ;;		__delay_s
  1119 ;;		_lcd_gotoxy
  1120 ;;		_lcd_putrs
  1121 ;;		_read_keyboard
  1122 ;; This function is called by:
  1123 ;;		_set_vision
  1124 ;; This function uses a non-reentrant model
  1125 ;;
  1126                           
  1127                           	psect	text3
  1128  001AEC                     __ptext3:
  1129                           	opt stack 0
  1130  001AEC                     _twinkle:
  1131                           	opt stack 23
  1132                           
  1133                           ;lcd_vision.c: 29: char input = 1;
  1134                           
  1135                           ;incstack = 0
  1136  001AEC  0E01               	movlw	1
  1137  001AEE  D024               	goto	L1
  1138  001AF0                     l2743:
  1139                           
  1140                           ;lcd_vision.c: 32: _delay_s(500);
  1141  001AF0  0E01               	movlw	1
  1142  001AF2  6E0A               	movwf	__delay_s@millis+1,c
  1143  001AF4  0EF4               	movlw	244
  1144  001AF6  6E09               	movwf	__delay_s@millis,c
  1145  001AF8  ECD3  F00D         	call	__delay_s	;wreg free
  1146                           
  1147                           ;lcd_vision.c: 33: lcd_gotoxy(7,2);
  1148  001AFC  0E02               	movlw	2
  1149  001AFE  6E05               	movwf	lcd_gotoxy@y,c
  1150  001B00  0E07               	movlw	7
  1151  001B02  EC12  F00F         	call	_lcd_gotoxy
  1152                           
  1153                           ;lcd_vision.c: 34: lcd_putrs("WARNING!!!");
  1154  001B06  0E4C               	movlw	low STR_22
  1155  001B08  6E09               	movwf	lcd_putrs@ptr,c
  1156  001B0A  0E0F               	movlw	high STR_22
  1157  001B0C  6E0A               	movwf	lcd_putrs@ptr+1,c
  1158  001B0E  EC29  F00E         	call	_lcd_putrs	;wreg free
  1159                           
  1160                           ;lcd_vision.c: 35: _delay_s(500);
  1161  001B12  0E01               	movlw	1
  1162  001B14  6E0A               	movwf	__delay_s@millis+1,c
  1163  001B16  0EF4               	movlw	244
  1164  001B18  6E09               	movwf	__delay_s@millis,c
  1165  001B1A  ECD3  F00D         	call	__delay_s	;wreg free
  1166                           
  1167                           ;lcd_vision.c: 36: lcd_gotoxy(7,2);
  1168  001B1E  0E02               	movlw	2
  1169  001B20  6E05               	movwf	lcd_gotoxy@y,c
  1170  001B22  0E07               	movlw	7
  1171  001B24  EC12  F00F         	call	_lcd_gotoxy
  1172                           
  1173                           ;lcd_vision.c: 37: lcd_putrs("          ");
  1174  001B28  0E25               	movlw	low (STR_1+22)
  1175  001B2A  6E09               	movwf	lcd_putrs@ptr,c
  1176  001B2C  0E0F               	movlw	high (STR_1+22)
  1177  001B2E  6E0A               	movwf	lcd_putrs@ptr+1,c
  1178  001B30  EC29  F00E         	call	_lcd_putrs	;wreg free
  1179                           
  1180                           ;lcd_vision.c: 38: input = read_keyboard();
  1181  001B34  ECC5  F007         	call	_read_keyboard	;wreg free
  1182  001B38                     L1:
  1183  001B38  6E25               	movwf	twinkle@input,c
  1184  001B3A  D000               	goto	l2755
  1185  001B3C                     l2755:
  1186  001B3C  0E10               	movlw	16
  1187  001B3E  1825               	xorwf	twinkle@input,w,c
  1188  001B40  A4D8               	btfss	status,2,c
  1189  001B42  D7D6               	goto	l2743
  1190                           
  1191                           ;lcd_vision.c: 39: }
  1192                           ;lcd_vision.c: 42: state_alarm = ACTIVE;
  1193  001B44  0E00               	movlw	0
  1194  001B46  6E5C               	movwf	_state_alarm,c
  1195  001B48  0012               	return		;funcret
  1196  001B4A                     __end_of_twinkle:
  1197                           	opt stack 0
  1198                           tblptru	equ	0xFF8
  1199                           tblptrh	equ	0xFF7
  1200                           tblptrl	equ	0xFF6
  1201                           tablat	equ	0xFF5
  1202                           postinc0	equ	0xFEE
  1203                           wreg	equ	0xFE8
  1204                           postdec1	equ	0xFE5
  1205                           fsr1l	equ	0xFE1
  1206                           status	equ	0xFD8
  1207                           
  1208 ;; *************** function _read_keyboard *****************
  1209 ;; Defined at:
  1210 ;;		line 4 in file "keyboard.c"
  1211 ;; Parameters:    Size  Location     Type
  1212 ;;		None
  1213 ;; Auto vars:     Size  Location     Type
  1214 ;;		None
  1215 ;; Return value:  Size  Location     Type
  1216 ;;                  1    wreg      unsigned char 
  1217 ;; Registers used:
  1218 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1219 ;; Tracked objects:
  1220 ;;		On entry : 0/0
  1221 ;;		On exit  : 0/0
  1222 ;;		Unchanged: 0/0
  1223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1226 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1227 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1228 ;;Total ram usage:        1 bytes
  1229 ;; Hardware stack levels used:    1
  1230 ;; Hardware stack levels required when called:    5
  1231 ;; This function calls:
  1232 ;;		_lcd_putrs
  1233 ;;		_sprintf
  1234 ;; This function is called by:
  1235 ;;		_main
  1236 ;;		_twinkle
  1237 ;; This function uses a non-reentrant model
  1238 ;;
  1239                           
  1240                           	psect	text4
  1241  000F8A                     __ptext4:
  1242                           	opt stack 0
  1243  000F8A                     _read_keyboard:
  1244                           	opt stack 23
  1245                           
  1246                           ;keyboard.c: 5: LATAbits.LATA0=1;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=0;
  1247                           
  1248                           ;incstack = 0
  1249  000F8A  8089               	bsf	3977,0,c	;volatile
  1250  000F8C  9289               	bcf	3977,1,c	;volatile
  1251  000F8E  9489               	bcf	3977,2,c	;volatile
  1252  000F90  9689               	bcf	3977,3,c	;volatile
  1253                           
  1254                           ;keyboard.c: 6: {
  1255                           ;keyboard.c: 7: if (PORTAbits.RA5==1){key=1;sprintf(buffer2,"%01u",key);lcd_putrs(buffer
      +                          2);while(PORTAbits.RA5==1){};}
  1256  000F92  AA80               	btfss	3968,5,c	;volatile
  1257  000F94  D018               	goto	l201
  1258  000F96  0E01               	movlw	1
  1259  000F98  6E3A               	movwf	_key,c
  1260  000F9A  0E78               	movlw	low _buffer2
  1261  000F9C  6E0D               	movwf	sprintf@sp,c
  1262  000F9E  0E00               	movlw	high _buffer2
  1263  000FA0  6E0E               	movwf	sprintf@sp+1,c
  1264  000FA2  0E73               	movlw	low STR_4
  1265  000FA4  6E0F               	movwf	sprintf@f,c
  1266  000FA6  0E0F               	movlw	high STR_4
  1267  000FA8  6E10               	movwf	sprintf@f+1,c
  1268  000FAA  C03A  F011         	movff	_key,?_sprintf+4
  1269  000FAE  6A12               	clrf	?_sprintf+5,c
  1270  000FB0  EC34  F009         	call	_sprintf	;wreg free
  1271  000FB4  0E78               	movlw	low _buffer2
  1272  000FB6  6E09               	movwf	lcd_putrs@ptr,c
  1273  000FB8  0E00               	movlw	high _buffer2
  1274  000FBA  6E0A               	movwf	lcd_putrs@ptr+1,c
  1275  000FBC  EC29  F00E         	call	_lcd_putrs	;wreg free
  1276  000FC0  D000               	goto	l202
  1277  000FC2                     l202:
  1278  000FC2  BA80               	btfsc	3968,5,c	;volatile
  1279  000FC4  D7FE               	goto	l202
  1280  000FC6                     l201:
  1281                           
  1282                           ;keyboard.c: 8: if (PORTAbits.RA7==1){key=2;sprintf(buffer2,"%01u",key);lcd_putrs(buffer
      +                          2);while(PORTAbits.RA7==1){};}
  1283  000FC6  AE80               	btfss	3968,7,c	;volatile
  1284  000FC8  D018               	goto	l205
  1285  000FCA  0E02               	movlw	2
  1286  000FCC  6E3A               	movwf	_key,c
  1287  000FCE  0E78               	movlw	low _buffer2
  1288  000FD0  6E0D               	movwf	sprintf@sp,c
  1289  000FD2  0E00               	movlw	high _buffer2
  1290  000FD4  6E0E               	movwf	sprintf@sp+1,c
  1291  000FD6  0E73               	movlw	low STR_4
  1292  000FD8  6E0F               	movwf	sprintf@f,c
  1293  000FDA  0E0F               	movlw	high STR_4
  1294  000FDC  6E10               	movwf	sprintf@f+1,c
  1295  000FDE  C03A  F011         	movff	_key,?_sprintf+4
  1296  000FE2  6A12               	clrf	?_sprintf+5,c
  1297  000FE4  EC34  F009         	call	_sprintf	;wreg free
  1298  000FE8  0E78               	movlw	low _buffer2
  1299  000FEA  6E09               	movwf	lcd_putrs@ptr,c
  1300  000FEC  0E00               	movlw	high _buffer2
  1301  000FEE  6E0A               	movwf	lcd_putrs@ptr+1,c
  1302  000FF0  EC29  F00E         	call	_lcd_putrs	;wreg free
  1303  000FF4  D000               	goto	l206
  1304  000FF6                     l206:
  1305  000FF6  BE80               	btfsc	3968,7,c	;volatile
  1306  000FF8  D7FE               	goto	l206
  1307  000FFA                     l205:
  1308                           
  1309                           ;keyboard.c: 9: if (PORTAbits.RA6==1){key=3;sprintf(buffer2,"%01u",key);lcd_putrs(buffer
      +                          2);while(PORTAbits.RA6==1){};}
  1310  000FFA  AC80               	btfss	3968,6,c	;volatile
  1311  000FFC  D018               	goto	l209
  1312  000FFE  0E03               	movlw	3
  1313  001000  6E3A               	movwf	_key,c
  1314  001002  0E78               	movlw	low _buffer2
  1315  001004  6E0D               	movwf	sprintf@sp,c
  1316  001006  0E00               	movlw	high _buffer2
  1317  001008  6E0E               	movwf	sprintf@sp+1,c
  1318  00100A  0E73               	movlw	low STR_4
  1319  00100C  6E0F               	movwf	sprintf@f,c
  1320  00100E  0E0F               	movlw	high STR_4
  1321  001010  6E10               	movwf	sprintf@f+1,c
  1322  001012  C03A  F011         	movff	_key,?_sprintf+4
  1323  001016  6A12               	clrf	?_sprintf+5,c
  1324  001018  EC34  F009         	call	_sprintf	;wreg free
  1325  00101C  0E78               	movlw	low _buffer2
  1326  00101E  6E09               	movwf	lcd_putrs@ptr,c
  1327  001020  0E00               	movlw	high _buffer2
  1328  001022  6E0A               	movwf	lcd_putrs@ptr+1,c
  1329  001024  EC29  F00E         	call	_lcd_putrs	;wreg free
  1330  001028  D000               	goto	l210
  1331  00102A                     l210:
  1332  00102A  BC80               	btfsc	3968,6,c	;volatile
  1333  00102C  D7FE               	goto	l210
  1334  00102E                     l209:
  1335                           
  1336                           ;keyboard.c: 10: if (PORTCbits.RC2==1){key=11;lcd_putrs("A");while(PORTCbits.RC2==1){};}
  1337  00102E  A482               	btfss	3970,2,c	;volatile
  1338  001030  D00B               	goto	l213
  1339  001032  0E0B               	movlw	11
  1340  001034  6E3A               	movwf	_key,c
  1341  001036  0E83               	movlw	low STR_7
  1342  001038  6E09               	movwf	lcd_putrs@ptr,c
  1343  00103A  0E0F               	movlw	high STR_7
  1344  00103C  6E0A               	movwf	lcd_putrs@ptr+1,c
  1345  00103E  EC29  F00E         	call	_lcd_putrs	;wreg free
  1346  001042  D000               	goto	l214
  1347  001044                     l214:
  1348  001044  B482               	btfsc	3970,2,c	;volatile
  1349  001046  D7FE               	goto	l214
  1350  001048                     l213:
  1351                           
  1352                           ;keyboard.c: 11: }
  1353                           ;keyboard.c: 12: LATAbits.LATA0=0;LATAbits.LATA1=1;LATAbits.LATA2=0;LATAbits.LATA3=0;
  1354  001048  9089               	bcf	3977,0,c	;volatile
  1355  00104A  8289               	bsf	3977,1,c	;volatile
  1356  00104C  9489               	bcf	3977,2,c	;volatile
  1357  00104E  9689               	bcf	3977,3,c	;volatile
  1358                           
  1359                           ;keyboard.c: 13: {
  1360                           ;keyboard.c: 14: if (PORTAbits.RA5==1){key=4;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA5==1){};}
  1361  001050  AA80               	btfss	3968,5,c	;volatile
  1362  001052  D018               	goto	l217
  1363  001054  0E04               	movlw	4
  1364  001056  6E3A               	movwf	_key,c
  1365  001058  0E78               	movlw	low _buffer2
  1366  00105A  6E0D               	movwf	sprintf@sp,c
  1367  00105C  0E00               	movlw	high _buffer2
  1368  00105E  6E0E               	movwf	sprintf@sp+1,c
  1369  001060  0E73               	movlw	low STR_4
  1370  001062  6E0F               	movwf	sprintf@f,c
  1371  001064  0E0F               	movlw	high STR_4
  1372  001066  6E10               	movwf	sprintf@f+1,c
  1373  001068  C03A  F011         	movff	_key,?_sprintf+4
  1374  00106C  6A12               	clrf	?_sprintf+5,c
  1375  00106E  EC34  F009         	call	_sprintf	;wreg free
  1376  001072  0E78               	movlw	low _buffer2
  1377  001074  6E09               	movwf	lcd_putrs@ptr,c
  1378  001076  0E00               	movlw	high _buffer2
  1379  001078  6E0A               	movwf	lcd_putrs@ptr+1,c
  1380  00107A  EC29  F00E         	call	_lcd_putrs	;wreg free
  1381  00107E  D000               	goto	l218
  1382  001080                     l218:
  1383  001080  BA80               	btfsc	3968,5,c	;volatile
  1384  001082  D7FE               	goto	l218
  1385  001084                     l217:
  1386                           
  1387                           ;keyboard.c: 15: if (PORTAbits.RA7==1){key=5;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  1388  001084  AE80               	btfss	3968,7,c	;volatile
  1389  001086  D018               	goto	l221
  1390  001088  0E05               	movlw	5
  1391  00108A  6E3A               	movwf	_key,c
  1392  00108C  0E78               	movlw	low _buffer2
  1393  00108E  6E0D               	movwf	sprintf@sp,c
  1394  001090  0E00               	movlw	high _buffer2
  1395  001092  6E0E               	movwf	sprintf@sp+1,c
  1396  001094  0E73               	movlw	low STR_4
  1397  001096  6E0F               	movwf	sprintf@f,c
  1398  001098  0E0F               	movlw	high STR_4
  1399  00109A  6E10               	movwf	sprintf@f+1,c
  1400  00109C  C03A  F011         	movff	_key,?_sprintf+4
  1401  0010A0  6A12               	clrf	?_sprintf+5,c
  1402  0010A2  EC34  F009         	call	_sprintf	;wreg free
  1403  0010A6  0E78               	movlw	low _buffer2
  1404  0010A8  6E09               	movwf	lcd_putrs@ptr,c
  1405  0010AA  0E00               	movlw	high _buffer2
  1406  0010AC  6E0A               	movwf	lcd_putrs@ptr+1,c
  1407  0010AE  EC29  F00E         	call	_lcd_putrs	;wreg free
  1408  0010B2  D000               	goto	l222
  1409  0010B4                     l222:
  1410  0010B4  BE80               	btfsc	3968,7,c	;volatile
  1411  0010B6  D7FE               	goto	l222
  1412  0010B8                     l221:
  1413                           
  1414                           ;keyboard.c: 16: if (PORTAbits.RA6==1){key=6;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA6==1){};}
  1415  0010B8  AC80               	btfss	3968,6,c	;volatile
  1416  0010BA  D018               	goto	l225
  1417  0010BC  0E06               	movlw	6
  1418  0010BE  6E3A               	movwf	_key,c
  1419  0010C0  0E78               	movlw	low _buffer2
  1420  0010C2  6E0D               	movwf	sprintf@sp,c
  1421  0010C4  0E00               	movlw	high _buffer2
  1422  0010C6  6E0E               	movwf	sprintf@sp+1,c
  1423  0010C8  0E73               	movlw	low STR_4
  1424  0010CA  6E0F               	movwf	sprintf@f,c
  1425  0010CC  0E0F               	movlw	high STR_4
  1426  0010CE  6E10               	movwf	sprintf@f+1,c
  1427  0010D0  C03A  F011         	movff	_key,?_sprintf+4
  1428  0010D4  6A12               	clrf	?_sprintf+5,c
  1429  0010D6  EC34  F009         	call	_sprintf	;wreg free
  1430  0010DA  0E78               	movlw	low _buffer2
  1431  0010DC  6E09               	movwf	lcd_putrs@ptr,c
  1432  0010DE  0E00               	movlw	high _buffer2
  1433  0010E0  6E0A               	movwf	lcd_putrs@ptr+1,c
  1434  0010E2  EC29  F00E         	call	_lcd_putrs	;wreg free
  1435  0010E6  D000               	goto	l226
  1436  0010E8                     l226:
  1437  0010E8  BC80               	btfsc	3968,6,c	;volatile
  1438  0010EA  D7FE               	goto	l226
  1439  0010EC                     l225:
  1440                           
  1441                           ;keyboard.c: 17: if (PORTCbits.RC2==1){key=12;lcd_putrs("B");while(PORTCbits.RC2==1){};}
  1442  0010EC  A482               	btfss	3970,2,c	;volatile
  1443  0010EE  D00B               	goto	l229
  1444  0010F0  0E0C               	movlw	12
  1445  0010F2  6E3A               	movwf	_key,c
  1446  0010F4  0E85               	movlw	low STR_11
  1447  0010F6  6E09               	movwf	lcd_putrs@ptr,c
  1448  0010F8  0E0F               	movlw	high STR_11
  1449  0010FA  6E0A               	movwf	lcd_putrs@ptr+1,c
  1450  0010FC  EC29  F00E         	call	_lcd_putrs	;wreg free
  1451  001100  D000               	goto	l230
  1452  001102                     l230:
  1453  001102  B482               	btfsc	3970,2,c	;volatile
  1454  001104  D7FE               	goto	l230
  1455  001106                     l229:
  1456                           
  1457                           ;keyboard.c: 18: }
  1458                           ;keyboard.c: 19: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=1;LATAbits.LATA3=0;
  1459  001106  9089               	bcf	3977,0,c	;volatile
  1460  001108  9289               	bcf	3977,1,c	;volatile
  1461  00110A  8489               	bsf	3977,2,c	;volatile
  1462  00110C  9689               	bcf	3977,3,c	;volatile
  1463                           
  1464                           ;keyboard.c: 20: {
  1465                           ;keyboard.c: 21: if (PORTAbits.RA5==1){key=7;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA5==1){};}
  1466  00110E  AA80               	btfss	3968,5,c	;volatile
  1467  001110  D018               	goto	l233
  1468  001112  0E07               	movlw	7
  1469  001114  6E3A               	movwf	_key,c
  1470  001116  0E78               	movlw	low _buffer2
  1471  001118  6E0D               	movwf	sprintf@sp,c
  1472  00111A  0E00               	movlw	high _buffer2
  1473  00111C  6E0E               	movwf	sprintf@sp+1,c
  1474  00111E  0E73               	movlw	low STR_4
  1475  001120  6E0F               	movwf	sprintf@f,c
  1476  001122  0E0F               	movlw	high STR_4
  1477  001124  6E10               	movwf	sprintf@f+1,c
  1478  001126  C03A  F011         	movff	_key,?_sprintf+4
  1479  00112A  6A12               	clrf	?_sprintf+5,c
  1480  00112C  EC34  F009         	call	_sprintf	;wreg free
  1481  001130  0E78               	movlw	low _buffer2
  1482  001132  6E09               	movwf	lcd_putrs@ptr,c
  1483  001134  0E00               	movlw	high _buffer2
  1484  001136  6E0A               	movwf	lcd_putrs@ptr+1,c
  1485  001138  EC29  F00E         	call	_lcd_putrs	;wreg free
  1486  00113C  D000               	goto	l234
  1487  00113E                     l234:
  1488  00113E  BA80               	btfsc	3968,5,c	;volatile
  1489  001140  D7FE               	goto	l234
  1490  001142                     l233:
  1491                           
  1492                           ;keyboard.c: 22: if (PORTAbits.RA7==1){key=8;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  1493  001142  AE80               	btfss	3968,7,c	;volatile
  1494  001144  D018               	goto	l237
  1495  001146  0E08               	movlw	8
  1496  001148  6E3A               	movwf	_key,c
  1497  00114A  0E78               	movlw	low _buffer2
  1498  00114C  6E0D               	movwf	sprintf@sp,c
  1499  00114E  0E00               	movlw	high _buffer2
  1500  001150  6E0E               	movwf	sprintf@sp+1,c
  1501  001152  0E73               	movlw	low STR_4
  1502  001154  6E0F               	movwf	sprintf@f,c
  1503  001156  0E0F               	movlw	high STR_4
  1504  001158  6E10               	movwf	sprintf@f+1,c
  1505  00115A  C03A  F011         	movff	_key,?_sprintf+4
  1506  00115E  6A12               	clrf	?_sprintf+5,c
  1507  001160  EC34  F009         	call	_sprintf	;wreg free
  1508  001164  0E78               	movlw	low _buffer2
  1509  001166  6E09               	movwf	lcd_putrs@ptr,c
  1510  001168  0E00               	movlw	high _buffer2
  1511  00116A  6E0A               	movwf	lcd_putrs@ptr+1,c
  1512  00116C  EC29  F00E         	call	_lcd_putrs	;wreg free
  1513  001170  D000               	goto	l238
  1514  001172                     l238:
  1515  001172  BE80               	btfsc	3968,7,c	;volatile
  1516  001174  D7FE               	goto	l238
  1517  001176                     l237:
  1518                           
  1519                           ;keyboard.c: 23: if (PORTAbits.RA6==1){key=9;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA6==1){};}
  1520  001176  AC80               	btfss	3968,6,c	;volatile
  1521  001178  D018               	goto	l241
  1522  00117A  0E09               	movlw	9
  1523  00117C  6E3A               	movwf	_key,c
  1524  00117E  0E78               	movlw	low _buffer2
  1525  001180  6E0D               	movwf	sprintf@sp,c
  1526  001182  0E00               	movlw	high _buffer2
  1527  001184  6E0E               	movwf	sprintf@sp+1,c
  1528  001186  0E73               	movlw	low STR_4
  1529  001188  6E0F               	movwf	sprintf@f,c
  1530  00118A  0E0F               	movlw	high STR_4
  1531  00118C  6E10               	movwf	sprintf@f+1,c
  1532  00118E  C03A  F011         	movff	_key,?_sprintf+4
  1533  001192  6A12               	clrf	?_sprintf+5,c
  1534  001194  EC34  F009         	call	_sprintf	;wreg free
  1535  001198  0E78               	movlw	low _buffer2
  1536  00119A  6E09               	movwf	lcd_putrs@ptr,c
  1537  00119C  0E00               	movlw	high _buffer2
  1538  00119E  6E0A               	movwf	lcd_putrs@ptr+1,c
  1539  0011A0  EC29  F00E         	call	_lcd_putrs	;wreg free
  1540  0011A4  D000               	goto	l242
  1541  0011A6                     l242:
  1542  0011A6  BC80               	btfsc	3968,6,c	;volatile
  1543  0011A8  D7FE               	goto	l242
  1544  0011AA                     l241:
  1545                           
  1546                           ;keyboard.c: 24: if (PORTCbits.RC2==1){key=13;lcd_putrs("C");while(PORTCbits.RC2==1){};}
  1547  0011AA  A482               	btfss	3970,2,c	;volatile
  1548  0011AC  D00B               	goto	l245
  1549  0011AE  0E0D               	movlw	13
  1550  0011B0  6E3A               	movwf	_key,c
  1551  0011B2  0E87               	movlw	low STR_15
  1552  0011B4  6E09               	movwf	lcd_putrs@ptr,c
  1553  0011B6  0E0F               	movlw	high STR_15
  1554  0011B8  6E0A               	movwf	lcd_putrs@ptr+1,c
  1555  0011BA  EC29  F00E         	call	_lcd_putrs	;wreg free
  1556  0011BE  D000               	goto	l246
  1557  0011C0                     l246:
  1558  0011C0  B482               	btfsc	3970,2,c	;volatile
  1559  0011C2  D7FE               	goto	l246
  1560  0011C4                     l245:
  1561                           
  1562                           ;keyboard.c: 25: }
  1563                           ;keyboard.c: 26: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=1;
  1564  0011C4  9089               	bcf	3977,0,c	;volatile
  1565  0011C6  9289               	bcf	3977,1,c	;volatile
  1566  0011C8  9489               	bcf	3977,2,c	;volatile
  1567  0011CA  8689               	bsf	3977,3,c	;volatile
  1568                           
  1569                           ;keyboard.c: 27: {
  1570                           ;keyboard.c: 28: if (PORTAbits.RA5==1){key=14;lcd_putrs("*");while(PORTAbits.RA5==1){};}
  1571  0011CC  AA80               	btfss	3968,5,c	;volatile
  1572  0011CE  D00B               	goto	l249
  1573  0011D0  0E0E               	movlw	14
  1574  0011D2  6E3A               	movwf	_key,c
  1575  0011D4  0E81               	movlw	low STR_16
  1576  0011D6  6E09               	movwf	lcd_putrs@ptr,c
  1577  0011D8  0E0F               	movlw	high STR_16
  1578  0011DA  6E0A               	movwf	lcd_putrs@ptr+1,c
  1579  0011DC  EC29  F00E         	call	_lcd_putrs	;wreg free
  1580  0011E0  D000               	goto	l250
  1581  0011E2                     l250:
  1582  0011E2  BA80               	btfsc	3968,5,c	;volatile
  1583  0011E4  D7FE               	goto	l250
  1584  0011E6                     l249:
  1585                           
  1586                           ;keyboard.c: 29: if (PORTAbits.RA7==1){key=0;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  1587  0011E6  AE80               	btfss	3968,7,c	;volatile
  1588  0011E8  D018               	goto	l253
  1589  0011EA  0E00               	movlw	0
  1590  0011EC  6E3A               	movwf	_key,c
  1591  0011EE  0E78               	movlw	low _buffer2
  1592  0011F0  6E0D               	movwf	sprintf@sp,c
  1593  0011F2  0E00               	movlw	high _buffer2
  1594  0011F4  6E0E               	movwf	sprintf@sp+1,c
  1595  0011F6  0E73               	movlw	low STR_4
  1596  0011F8  6E0F               	movwf	sprintf@f,c
  1597  0011FA  0E0F               	movlw	high STR_4
  1598  0011FC  6E10               	movwf	sprintf@f+1,c
  1599  0011FE  C03A  F011         	movff	_key,?_sprintf+4
  1600  001202  6A12               	clrf	?_sprintf+5,c
  1601  001204  EC34  F009         	call	_sprintf	;wreg free
  1602  001208  0E78               	movlw	low _buffer2
  1603  00120A  6E09               	movwf	lcd_putrs@ptr,c
  1604  00120C  0E00               	movlw	high _buffer2
  1605  00120E  6E0A               	movwf	lcd_putrs@ptr+1,c
  1606  001210  EC29  F00E         	call	_lcd_putrs	;wreg free
  1607  001214  D000               	goto	l254
  1608  001216                     l254:
  1609  001216  BE80               	btfsc	3968,7,c	;volatile
  1610  001218  D7FE               	goto	l254
  1611  00121A                     l253:
  1612                           
  1613                           ;keyboard.c: 30: if (PORTAbits.RA6==1){key=15;lcd_putrs("#");while(PORTAbits.RA6==1){};}
  1614  00121A  AC80               	btfss	3968,6,c	;volatile
  1615  00121C  D00B               	goto	l257
  1616  00121E  0E0F               	movlw	15
  1617  001220  6E3A               	movwf	_key,c
  1618  001222  0E7F               	movlw	low STR_18
  1619  001224  6E09               	movwf	lcd_putrs@ptr,c
  1620  001226  0E0F               	movlw	high STR_18
  1621  001228  6E0A               	movwf	lcd_putrs@ptr+1,c
  1622  00122A  EC29  F00E         	call	_lcd_putrs	;wreg free
  1623  00122E  D000               	goto	l258
  1624  001230                     l258:
  1625  001230  BC80               	btfsc	3968,6,c	;volatile
  1626  001232  D7FE               	goto	l258
  1627  001234                     l257:
  1628                           
  1629                           ;keyboard.c: 31: if (PORTCbits.RC2==1){key=16;lcd_putrs("D");while(PORTCbits.RC2==1){};}
  1630  001234  A482               	btfss	3970,2,c	;volatile
  1631  001236  D00D               	goto	l2493
  1632  001238  0E10               	movlw	16
  1633  00123A  6E3A               	movwf	_key,c
  1634  00123C  0E71               	movlw	low (STR_26+6)
  1635  00123E  6E09               	movwf	lcd_putrs@ptr,c
  1636  001240  0E0F               	movlw	high (STR_26+6)
  1637  001242  6E0A               	movwf	lcd_putrs@ptr+1,c
  1638  001244  EC29  F00E         	call	_lcd_putrs	;wreg free
  1639  001248  D000               	goto	l262
  1640  00124A                     l262:
  1641  00124A  A482               	btfss	3970,2,c	;volatile
  1642  00124C  D002               	goto	l2493
  1643  00124E  D7FD               	goto	l262
  1644  001250  D000               	goto	l2493
  1645  001252                     l2493:
  1646                           
  1647                           ;keyboard.c: 32: }
  1648                           ;keyboard.c: 33: _delay((unsigned long)((98)*(8000000/4000.0)));
  1649  001252  0EFF               	movlw	255
  1650  001254  6E24               	movwf	??_read_keyboard& (0+255),c
  1651  001256  0E8A               	movlw	138
  1652  001258                     u2367:
  1653  001258  2EE8               	decfsz	wreg,f,c
  1654  00125A  D7FE               	goto	u2367
  1655  00125C  2E24               	decfsz	??_read_keyboard& (0+255),f,c
  1656  00125E  D7FC               	goto	u2367
  1657  001260  D000               	nop2	
  1658                           
  1659                           ;keyboard.c: 36: return key;
  1660  001262  503A               	movf	_key,w,c
  1661  001264  0012               	return	
  1662  001266  0012               	return		;funcret
  1663  001268                     __end_of_read_keyboard:
  1664                           	opt stack 0
  1665                           tblptru	equ	0xFF8
  1666                           tblptrh	equ	0xFF7
  1667                           tblptrl	equ	0xFF6
  1668                           tablat	equ	0xFF5
  1669                           postinc0	equ	0xFEE
  1670                           wreg	equ	0xFE8
  1671                           postdec1	equ	0xFE5
  1672                           fsr1l	equ	0xFE1
  1673                           status	equ	0xFD8
  1674                           
  1675 ;; *************** function _sprintf *****************
  1676 ;; Defined at:
  1677 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\doprnt.c"
  1678 ;; Parameters:    Size  Location     Type
  1679 ;;  sp              2   12[COMRAM] PTR unsigned char 
  1680 ;;		 -> buffer2(20), 
  1681 ;;  f               2   14[COMRAM] PTR const unsigned char 
  1682 ;;		 -> STR_21(10), STR_20(15), STR_17(5), STR_14(5), 
  1683 ;;		 -> STR_13(5), STR_12(5), STR_10(5), STR_9(5), 
  1684 ;;		 -> STR_8(5), STR_6(5), STR_5(5), STR_4(5), 
  1685 ;; Auto vars:     Size  Location     Type
  1686 ;;  tmpval          4    0        struct .
  1687 ;;  cp              3    0        PTR const unsigned char 
  1688 ;;  width           2   32[COMRAM] int 
  1689 ;;  val             2   29[COMRAM] unsigned int 
  1690 ;;  ap              2   26[COMRAM] PTR void [1]
  1691 ;;		 -> ?_sprintf(2), 
  1692 ;;  len             2    0        unsigned int 
  1693 ;;  c               1   34[COMRAM] char 
  1694 ;;  prec            1   31[COMRAM] char 
  1695 ;;  flag            1   28[COMRAM] unsigned char 
  1696 ;; Return value:  Size  Location     Type
  1697 ;;                  2   12[COMRAM] int 
  1698 ;; Registers used:
  1699 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1700 ;; Tracked objects:
  1701 ;;		On entry : 0/0
  1702 ;;		On exit  : 0/0
  1703 ;;		Unchanged: 0/0
  1704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1705 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1706 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1707 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1708 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1709 ;;Total ram usage:       23 bytes
  1710 ;; Hardware stack levels used:    1
  1711 ;; Hardware stack levels required when called:    1
  1712 ;; This function calls:
  1713 ;;		___lwdiv
  1714 ;;		___lwmod
  1715 ;;		___wmul
  1716 ;;		_isdigit
  1717 ;; This function is called by:
  1718 ;;		_read_keyboard
  1719 ;;		_write_Date
  1720 ;; This function uses a non-reentrant model
  1721 ;;
  1722                           
  1723                           	psect	text5
  1724  001268                     __ptext5:
  1725                           	opt stack 0
  1726  001268                     _sprintf:
  1727                           	opt stack 27
  1728                           
  1729                           ;doprnt.c: 494: va_list ap;
  1730                           ;doprnt.c: 499: signed char c;
  1731                           ;doprnt.c: 501: int width;
  1732                           ;doprnt.c: 506: signed char prec;
  1733                           ;doprnt.c: 508: unsigned char flag;
  1734                           ;doprnt.c: 523: union {
  1735                           ;doprnt.c: 524: unsigned long vd;
  1736                           ;doprnt.c: 525: double integ;
  1737                           ;doprnt.c: 526: } tmpval;
  1738                           ;doprnt.c: 528: unsigned int val;
  1739                           ;doprnt.c: 529: unsigned len;
  1740                           ;doprnt.c: 530: const char * cp;
  1741                           ;doprnt.c: 533: *ap = __va_start();
  1742                           
  1743                           ;incstack = 0
  1744  001268  0E11               	movlw	low (?_sprintf+4)
  1745  00126A  6E1B               	movwf	sprintf@ap,c
  1746  00126C  0E00               	movlw	high (?_sprintf+4)
  1747  00126E  6E1C               	movwf	sprintf@ap+1,c
  1748                           
  1749                           ;doprnt.c: 536: while(c = *f++) {
  1750  001270  D117               	goto	l2355
  1751  001272                     l2273:
  1752                           
  1753                           ;doprnt.c: 538: if(c != '%')
  1754  001272  0E25               	movlw	37
  1755  001274  1823               	xorwf	sprintf@c,w,c
  1756  001276  B4D8               	btfsc	status,2,c
  1757  001278  D009               	goto	l2279
  1758                           
  1759                           ;doprnt.c: 540: {
  1760                           ;doprnt.c: 541: ((*sp++ = (c)));
  1761  00127A  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1762  00127E  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1763  001282  C023  FFDF         	movff	sprintf@c,indf2
  1764  001286  4A0D               	infsnz	sprintf@sp,f,c
  1765  001288  2A0E               	incf	sprintf@sp+1,f,c
  1766                           
  1767                           ;doprnt.c: 542: continue;
  1768  00128A  D10A               	goto	l2355
  1769  00128C                     l2279:
  1770                           
  1771                           ;doprnt.c: 543: }
  1772                           ;doprnt.c: 546: width = 0;
  1773  00128C  0E00               	movlw	0
  1774  00128E  6E22               	movwf	sprintf@width+1,c
  1775  001290  0E00               	movlw	0
  1776  001292  6E21               	movwf	sprintf@width,c
  1777                           
  1778                           ;doprnt.c: 548: flag = 0;
  1779  001294  0E00               	movlw	0
  1780  001296  6E1D               	movwf	sprintf@flag,c
  1781                           
  1782                           ;doprnt.c: 551: switch(*f) {
  1783                           
  1784                           ;doprnt.c: 550: for(;;) {
  1785  001298  D005               	goto	l2285
  1786  00129A                     l2281:
  1787                           
  1788                           ;doprnt.c: 580: flag |= 0x04;
  1789  00129A  841D               	bsf	sprintf@flag,2,c
  1790                           
  1791                           ;doprnt.c: 581: f++;
  1792  00129C  4A0F               	infsnz	sprintf@f,f,c
  1793  00129E  2A10               	incf	sprintf@f+1,f,c
  1794                           
  1795                           ;doprnt.c: 582: continue;
  1796  0012A0  D001               	goto	l2285
  1797                           
  1798                           ;doprnt.c: 584: }
  1799  0012A2  D00B               	goto	l2287
  1800  0012A4                     l2285:
  1801  0012A4  C00F  FFF6         	movff	sprintf@f,tblptrl
  1802  0012A8  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1803  0012AC                     	if	0	;tblptru may be non-zero
  1804  0012AC                     	endif
  1805  0012AC                     	if	0	;tblptru may be non-zero
  1806  0012AC                     	endif
  1807  0012AC  0008               	tblrd		*
  1808  0012AE  50F5               	movf	tablat,w,c
  1809                           
  1810                           ; Switch size 1, requested type "space"
  1811                           ; Number of cases is 1, Range of values is 48 to 48
  1812                           ; switch strategies available:
  1813                           ; Name         Instructions Cycles
  1814                           ; simple_byte            4     3 (average)
  1815                           ;	Chosen strategy is simple_byte
  1816  0012B0  0A30               	xorlw	48	; case 48
  1817  0012B2  B4D8               	btfsc	status,2,c
  1818  0012B4  D7F2               	goto	l2281
  1819                           
  1820                           ;doprnt.c: 585: break;
  1821  0012B6  D001               	goto	l2287
  1822                           
  1823                           ;doprnt.c: 586: }
  1824  0012B8  D7F5               	goto	l2285
  1825  0012BA                     l2287:
  1826                           
  1827                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1828  0012BA  C00F  FFF6         	movff	sprintf@f,tblptrl
  1829  0012BE  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1830  0012C2                     	if	0	;tblptru may be non-zero
  1831  0012C2                     	endif
  1832  0012C2                     	if	0	;tblptru may be non-zero
  1833  0012C2                     	endif
  1834  0012C2  0008               	tblrd		*
  1835  0012C4  50F5               	movf	tablat,w,c
  1836  0012C6  EC24  F00F         	call	_isdigit
  1837  0012CA  A0D8               	btfss	status,0,c
  1838  0012CC  D03A               	goto	l2303
  1839                           
  1840                           ;doprnt.c: 598: width = 0;
  1841  0012CE  0E00               	movlw	0
  1842  0012D0  6E22               	movwf	sprintf@width+1,c
  1843  0012D2  0E00               	movlw	0
  1844  0012D4  6E21               	movwf	sprintf@width,c
  1845  0012D6  D000               	goto	l2291
  1846  0012D8                     l2291:
  1847                           
  1848                           ;doprnt.c: 600: width *= 10;
  1849  0012D8  C021  F001         	movff	sprintf@width,___wmul@multiplier
  1850  0012DC  C022  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  1851  0012E0  0E00               	movlw	0
  1852  0012E2  6E04               	movwf	___wmul@multiplicand+1,c
  1853  0012E4  0E0A               	movlw	10
  1854  0012E6  6E03               	movwf	___wmul@multiplicand,c
  1855  0012E8  ECFE  F00E         	call	___wmul	;wreg free
  1856  0012EC  C001  F021         	movff	?___wmul,sprintf@width
  1857  0012F0  C002  F022         	movff	?___wmul+1,sprintf@width+1
  1858                           
  1859                           ;doprnt.c: 601: width += *f++ - '0';
  1860  0012F4  0ED0               	movlw	208
  1861  0012F6  6E17               	movwf	??_sprintf& (0+255),c
  1862  0012F8  0EFF               	movlw	255
  1863  0012FA  6E18               	movwf	(??_sprintf+1)& (0+255),c
  1864  0012FC  C00F  FFF6         	movff	sprintf@f,tblptrl
  1865  001300  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1866  001304                     	if	0	;tblptru may be non-zero
  1867  001304                     	endif
  1868  001304                     	if	0	;tblptru may be non-zero
  1869  001304                     	endif
  1870  001304  0008               	tblrd		*
  1871  001306  50F5               	movf	tablat,w,c
  1872  001308  6E19               	movwf	(??_sprintf+2)& (0+255),c
  1873  00130A  6A1A               	clrf	(??_sprintf+3)& (0+255),c
  1874  00130C  5017               	movf	??_sprintf,w,c
  1875  00130E  2619               	addwf	??_sprintf+2,f,c
  1876  001310  5018               	movf	??_sprintf+1,w,c
  1877  001312  221A               	addwfc	??_sprintf+3,f,c
  1878  001314  5019               	movf	??_sprintf+2,w,c
  1879  001316  2621               	addwf	sprintf@width,f,c
  1880  001318  501A               	movf	??_sprintf+3,w,c
  1881  00131A  2222               	addwfc	sprintf@width+1,f,c
  1882  00131C  4A0F               	infsnz	sprintf@f,f,c
  1883  00131E  2A10               	incf	sprintf@f+1,f,c
  1884                           
  1885                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1886  001320  C00F  FFF6         	movff	sprintf@f,tblptrl
  1887  001324  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1888  001328                     	if	0	;tblptru may be non-zero
  1889  001328                     	endif
  1890  001328                     	if	0	;tblptru may be non-zero
  1891  001328                     	endif
  1892  001328  0008               	tblrd		*
  1893  00132A  50F5               	movf	tablat,w,c
  1894  00132C  EC24  F00F         	call	_isdigit
  1895  001330  A0D8               	btfss	status,0,c
  1896  001332  D007               	goto	l2303
  1897  001334  D7D1               	goto	l2291
  1898                           
  1899                           ;doprnt.c: 608: }
  1900                           ;doprnt.c: 635: switch(c = *f++) {
  1901  001336  D005               	goto	l2303
  1902                           
  1903                           ;doprnt.c: 638: goto alldone;
  1904                           
  1905                           ;doprnt.c: 637: case 0:
  1906  001338  D0C1               	goto	l2357
  1907                           
  1908                           ;doprnt.c: 813: continue;
  1909                           
  1910                           ;doprnt.c: 802: default:
  1911  00133A  D0B2               	goto	l2355
  1912  00133C                     l2299:
  1913                           
  1914                           ;doprnt.c: 818: flag |= 0xC0;
  1915  00133C  0EC0               	movlw	192
  1916  00133E  121D               	iorwf	sprintf@flag,f,c
  1917                           
  1918                           ;doprnt.c: 822: }
  1919                           
  1920                           ;doprnt.c: 819: break;
  1921  001340  D011               	goto	l2305
  1922  001342                     l2303:
  1923  001342  C00F  FFF6         	movff	sprintf@f,tblptrl
  1924  001346  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1925  00134A  4A0F               	infsnz	sprintf@f,f,c
  1926  00134C  2A10               	incf	sprintf@f+1,f,c
  1927  00134E                     	if	0	;tblptru may be non-zero
  1928  00134E                     	endif
  1929  00134E                     	if	0	;tblptru may be non-zero
  1930  00134E                     	endif
  1931  00134E  0008               	tblrd		*
  1932  001350  CFF5 F023          	movff	tablat,sprintf@c
  1933  001354  5023               	movf	sprintf@c,w,c
  1934                           
  1935                           ; Switch size 1, requested type "space"
  1936                           ; Number of cases is 2, Range of values is 0 to 117
  1937                           ; switch strategies available:
  1938                           ; Name         Instructions Cycles
  1939                           ; simple_byte            7     4 (average)
  1940                           ;	Chosen strategy is simple_byte
  1941  001356  0A00               	xorlw	0	; case 0
  1942  001358  B4D8               	btfsc	status,2,c
  1943  00135A  D0B0               	goto	l2357
  1944  00135C  0A75               	xorlw	117	; case 117
  1945  00135E  B4D8               	btfsc	status,2,c
  1946  001360  D7ED               	goto	l2299
  1947  001362  D09E               	goto	l2355
  1948  001364                     l2305:
  1949                           
  1950                           ;doprnt.c: 1273: {
  1951                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1952  001364  C01B  FFD9         	movff	sprintf@ap,fsr2l
  1953  001368  C01C  FFDA         	movff	sprintf@ap+1,fsr2h
  1954  00136C  CFDE F01E          	movff	postinc2,sprintf@val
  1955  001370  CFDD F01F          	movff	postdec2,sprintf@val+1
  1956  001374  0E02               	movlw	2
  1957  001376  261B               	addwf	sprintf@ap,f,c
  1958  001378  0E00               	movlw	0
  1959  00137A  221C               	addwfc	sprintf@ap+1,f,c
  1960                           
  1961                           ;doprnt.c: 1287: }
  1962                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1963  00137C  0E01               	movlw	1
  1964  00137E  6E23               	movwf	sprintf@c,c
  1965  001380                     l2311:
  1966  001380  0E05               	movlw	5
  1967  001382  1823               	xorwf	sprintf@c,w,c
  1968  001384  B4D8               	btfsc	status,2,c
  1969  001386  D016               	goto	l2323
  1970  001388  D001               	goto	l2315
  1971  00138A  D014               	goto	l2323
  1972  00138C                     l2315:
  1973                           
  1974                           ;doprnt.c: 1306: if(val < dpowers[c])
  1975  00138C  5023               	movf	sprintf@c,w,c
  1976  00138E  0D02               	mullw	2
  1977  001390  0E01               	movlw	low _dpowers
  1978  001392  24F3               	addwf	prodl,w,c
  1979  001394  6EF6               	movwf	tblptrl,c
  1980  001396  0E0F               	movlw	high _dpowers
  1981  001398  20F4               	addwfc	prodh,w,c
  1982  00139A  6EF7               	movwf	tblptrh,c
  1983  00139C                     	if	0	;There are less than 3 active tblptr bytes
  1984  00139C                     	endif
  1985  00139C  0009               	tblrd		*+
  1986  00139E  50F5               	movf	tablat,w,c
  1987  0013A0  5C1E               	subwf	sprintf@val,w,c
  1988  0013A2  0009               	tblrd		*+
  1989  0013A4  50F5               	movf	tablat,w,c
  1990  0013A6  581F               	subwfb	sprintf@val+1,w,c
  1991  0013A8  A0D8               	btfss	status,0,c
  1992  0013AA  D004               	goto	l2323
  1993  0013AC  D001               	goto	l2319
  1994                           
  1995                           ;doprnt.c: 1307: break;
  1996  0013AE  D002               	goto	l2323
  1997  0013B0                     l2319:
  1998  0013B0  2A23               	incf	sprintf@c,f,c
  1999  0013B2  D7E6               	goto	l2311
  2000  0013B4                     l2323:
  2001                           
  2002                           ;doprnt.c: 1381: if(width > c)
  2003  0013B4  0E80               	movlw	128
  2004  0013B6  BE23               	btfsc	sprintf@c,7,c
  2005  0013B8  0E7F               	movlw	127
  2006  0013BA  6E17               	movwf	??_sprintf& (0+255),c
  2007  0013BC  5021               	movf	sprintf@width,w,c
  2008  0013BE  5C23               	subwf	sprintf@c,w,c
  2009  0013C0  5022               	movf	sprintf@width+1,w,c
  2010  0013C2  0A80               	xorlw	128
  2011  0013C4  5817               	subwfb	??_sprintf& (0+255),w,c
  2012  0013C6  B0D8               	btfsc	status,0,c
  2013  0013C8  D007               	goto	l2327
  2014                           
  2015                           ;doprnt.c: 1382: width -= c;
  2016  0013CA  5023               	movf	sprintf@c,w,c
  2017  0013CC  5E21               	subwf	sprintf@width,f,c
  2018  0013CE  0E00               	movlw	0
  2019  0013D0  BE23               	btfsc	sprintf@c,7,c
  2020  0013D2  0EFF               	movlw	255
  2021  0013D4  5A22               	subwfb	sprintf@width+1,f,c
  2022  0013D6  D005               	goto	l2329
  2023  0013D8                     l2327:
  2024                           
  2025                           ;doprnt.c: 1383: else
  2026                           ;doprnt.c: 1384: width = 0;
  2027  0013D8  0E00               	movlw	0
  2028  0013DA  6E22               	movwf	sprintf@width+1,c
  2029  0013DC  0E00               	movlw	0
  2030  0013DE  6E21               	movwf	sprintf@width,c
  2031  0013E0  D000               	goto	l2329
  2032  0013E2                     l2329:
  2033                           
  2034                           ;doprnt.c: 1387: if(flag & 0x04) {
  2035  0013E2  A41D               	btfss	sprintf@flag,2,c
  2036  0013E4  D015               	goto	l2339
  2037                           
  2038                           ;doprnt.c: 1415: if(width)
  2039  0013E6  5021               	movf	sprintf@width,w,c
  2040  0013E8  1022               	iorwf	sprintf@width+1,w,c
  2041  0013EA  B4D8               	btfsc	status,2,c
  2042  0013EC  D026               	goto	l622
  2043  0013EE                     l2333:
  2044                           
  2045                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  2046  0013EE  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2047  0013F2  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2048  0013F6  0E30               	movlw	48
  2049  0013F8  6EDF               	movwf	indf2,c
  2050  0013FA  4A0D               	infsnz	sprintf@sp,f,c
  2051  0013FC  2A0E               	incf	sprintf@sp+1,f,c
  2052                           
  2053                           ;doprnt.c: 1418: while(--width);
  2054  0013FE  0621               	decf	sprintf@width,f,c
  2055  001400  A0D8               	btfss	status,0,c
  2056  001402  0622               	decf	sprintf@width+1,f,c
  2057  001404  5021               	movf	sprintf@width,w,c
  2058  001406  1022               	iorwf	sprintf@width+1,w,c
  2059  001408  B4D8               	btfsc	status,2,c
  2060  00140A  D017               	goto	l622
  2061  00140C  D7F0               	goto	l2333
  2062                           
  2063                           ;doprnt.c: 1420: } else
  2064  00140E  D015               	goto	l622
  2065  001410                     l2339:
  2066                           
  2067                           ;doprnt.c: 1422: {
  2068                           ;doprnt.c: 1424: if(width
  2069                           ;doprnt.c: 1428: )
  2070  001410  5021               	movf	sprintf@width,w,c
  2071  001412  1022               	iorwf	sprintf@width+1,w,c
  2072  001414  B4D8               	btfsc	status,2,c
  2073  001416  D011               	goto	l622
  2074  001418                     l2341:
  2075                           
  2076                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  2077  001418  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2078  00141C  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2079  001420  0E20               	movlw	32
  2080  001422  6EDF               	movwf	indf2,c
  2081  001424  4A0D               	infsnz	sprintf@sp,f,c
  2082  001426  2A0E               	incf	sprintf@sp+1,f,c
  2083                           
  2084                           ;doprnt.c: 1431: while(--width);
  2085  001428  0621               	decf	sprintf@width,f,c
  2086  00142A  A0D8               	btfss	status,0,c
  2087  00142C  0622               	decf	sprintf@width+1,f,c
  2088  00142E  5021               	movf	sprintf@width,w,c
  2089  001430  1022               	iorwf	sprintf@width+1,w,c
  2090  001432  B4D8               	btfsc	status,2,c
  2091  001434  D002               	goto	l622
  2092  001436  D7F0               	goto	l2341
  2093  001438  D000               	goto	l622
  2094  00143A                     l622:
  2095                           
  2096                           ;doprnt.c: 1469: }
  2097                           ;doprnt.c: 1472: prec = c;
  2098  00143A  C023  F020         	movff	sprintf@c,sprintf@prec
  2099                           
  2100                           ;doprnt.c: 1474: while(prec--) {
  2101  00143E  D02A               	goto	l2353
  2102  001440                     l2347:
  2103                           
  2104                           ;doprnt.c: 1478: {
  2105                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2106  001440  5020               	movf	sprintf@prec,w,c
  2107  001442  0D02               	mullw	2
  2108  001444  0E01               	movlw	low _dpowers
  2109  001446  24F3               	addwf	prodl,w,c
  2110  001448  6EF6               	movwf	tblptrl,c
  2111  00144A  0E0F               	movlw	high _dpowers
  2112  00144C  20F4               	addwfc	prodh,w,c
  2113  00144E  6EF7               	movwf	tblptrh,c
  2114  001450                     	if	0	;There are less than 3 active tblptr bytes
  2115  001450                     	endif
  2116  001450  0009               	tblrd		*+
  2117  001452  CFF5 F003          	movff	tablat,___lwdiv@divisor
  2118  001456  000A               	tblrd		*-
  2119  001458  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  2120  00145C  C01E  F001         	movff	sprintf@val,___lwdiv@dividend
  2121  001460  C01F  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  2122  001464  ECA5  F00D         	call	___lwdiv	;wreg free
  2123  001468  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  2124  00146C  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  2125  001470  0E00               	movlw	0
  2126  001472  6E0B               	movwf	___lwmod@divisor+1,c
  2127  001474  0E0A               	movlw	10
  2128  001476  6E0A               	movwf	___lwmod@divisor,c
  2129  001478  EC53  F00E         	call	___lwmod	;wreg free
  2130  00147C  5008               	movf	?___lwmod,w,c
  2131  00147E  0F30               	addlw	48
  2132  001480  6E23               	movwf	sprintf@c,c
  2133                           
  2134                           ;doprnt.c: 1523: }
  2135                           ;doprnt.c: 1524: ((*sp++ = (c)));
  2136  001482  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2137  001486  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2138  00148A  C023  FFDF         	movff	sprintf@c,indf2
  2139  00148E  4A0D               	infsnz	sprintf@sp,f,c
  2140  001490  2A0E               	incf	sprintf@sp+1,f,c
  2141  001492  D000               	goto	l2353
  2142  001494                     l2353:
  2143  001494  0620               	decf	sprintf@prec,f,c
  2144  001496  2820               	incf	sprintf@prec,w,c
  2145  001498  B4D8               	btfsc	status,2,c
  2146  00149A  D002               	goto	l2355
  2147  00149C  D7D1               	goto	l2347
  2148  00149E  D000               	goto	l2355
  2149  0014A0                     l2355:
  2150  0014A0  C00F  FFF6         	movff	sprintf@f,tblptrl
  2151  0014A4  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2152  0014A8  4A0F               	infsnz	sprintf@f,f,c
  2153  0014AA  2A10               	incf	sprintf@f+1,f,c
  2154  0014AC                     	if	0	;tblptru may be non-zero
  2155  0014AC                     	endif
  2156  0014AC                     	if	0	;tblptru may be non-zero
  2157  0014AC                     	endif
  2158  0014AC  0008               	tblrd		*
  2159  0014AE  CFF5 F023          	movff	tablat,sprintf@c
  2160  0014B2  5023               	movf	sprintf@c,w,c
  2161  0014B4  B4D8               	btfsc	status,2,c
  2162  0014B6  D002               	goto	l2357
  2163  0014B8  D6DC               	goto	l2273
  2164  0014BA  D000               	goto	l2357
  2165  0014BC                     l2357:
  2166                           
  2167                           ;doprnt.c: 1538: *sp = 0;
  2168  0014BC  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2169  0014C0  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2170  0014C4  0E00               	movlw	0
  2171  0014C6  6EDF               	movwf	indf2,c
  2172  0014C8  0012               	return	
  2173                           
  2174                           ;doprnt.c: 1540: return 0;
  2175                           ;	Return value of _sprintf is never used
  2176  0014CA  0012               	return		;funcret
  2177  0014CC                     __end_of_sprintf:
  2178                           	opt stack 0
  2179                           tblptru	equ	0xFF8
  2180                           tblptrh	equ	0xFF7
  2181                           tblptrl	equ	0xFF6
  2182                           tablat	equ	0xFF5
  2183                           prodh	equ	0xFF4
  2184                           prodl	equ	0xFF3
  2185                           postinc0	equ	0xFEE
  2186                           wreg	equ	0xFE8
  2187                           postdec1	equ	0xFE5
  2188                           fsr1l	equ	0xFE1
  2189                           indf2	equ	0xFDF
  2190                           postinc2	equ	0xFDE
  2191                           postdec2	equ	0xFDD
  2192                           fsr2h	equ	0xFDA
  2193                           fsr2l	equ	0xFD9
  2194                           status	equ	0xFD8
  2195                           
  2196 ;; *************** function _isdigit *****************
  2197 ;; Defined at:
  2198 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\isdigit.c"
  2199 ;; Parameters:    Size  Location     Type
  2200 ;;  c               1    wreg     unsigned char 
  2201 ;; Auto vars:     Size  Location     Type
  2202 ;;  c               1    2[COMRAM] unsigned char 
  2203 ;; Return value:  Size  Location     Type
  2204 ;;		None               void
  2205 ;; Registers used:
  2206 ;;		wreg, status,2, status,0
  2207 ;; Tracked objects:
  2208 ;;		On entry : 0/0
  2209 ;;		On exit  : 0/0
  2210 ;;		Unchanged: 0/0
  2211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2213 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2214 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2215 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2216 ;;Total ram usage:        3 bytes
  2217 ;; Hardware stack levels used:    1
  2218 ;; This function calls:
  2219 ;;		Nothing
  2220 ;; This function is called by:
  2221 ;;		_sprintf
  2222 ;; This function uses a non-reentrant model
  2223 ;;
  2224                           
  2225                           	psect	text6
  2226  001E48                     __ptext6:
  2227                           	opt stack 0
  2228  001E48                     _isdigit:
  2229                           	opt stack 27
  2230                           
  2231                           ;incstack = 0
  2232                           ;isdigit@c stored from wreg
  2233  001E48  6E03               	movwf	isdigit@c,c
  2234  001E4A  0E00               	movlw	0
  2235  001E4C  6E02               	movwf	_isdigit$2329,c
  2236  001E4E  0E3A               	movlw	58
  2237  001E50  6003               	cpfslt	isdigit@c,c
  2238  001E52  D006               	goto	l2215
  2239  001E54  0E2F               	movlw	47
  2240  001E56  6403               	cpfsgt	isdigit@c,c
  2241  001E58  D003               	goto	l2215
  2242  001E5A  0E01               	movlw	1
  2243  001E5C  6E02               	movwf	_isdigit$2329,c
  2244  001E5E  D000               	goto	l2215
  2245  001E60                     l2215:
  2246  001E60  C002  F001         	movff	_isdigit$2329,??_isdigit
  2247  001E64  3001               	rrcf	??_isdigit,w,c
  2248  001E66  0012               	return	
  2249  001E68  0012               	return		;funcret
  2250  001E6A                     __end_of_isdigit:
  2251                           	opt stack 0
  2252                           tblptru	equ	0xFF8
  2253                           tblptrh	equ	0xFF7
  2254                           tblptrl	equ	0xFF6
  2255                           tablat	equ	0xFF5
  2256                           prodh	equ	0xFF4
  2257                           prodl	equ	0xFF3
  2258                           postinc0	equ	0xFEE
  2259                           wreg	equ	0xFE8
  2260                           postdec1	equ	0xFE5
  2261                           fsr1l	equ	0xFE1
  2262                           indf2	equ	0xFDF
  2263                           postinc2	equ	0xFDE
  2264                           postdec2	equ	0xFDD
  2265                           fsr2h	equ	0xFDA
  2266                           fsr2l	equ	0xFD9
  2267                           status	equ	0xFD8
  2268                           
  2269 ;; *************** function ___wmul *****************
  2270 ;; Defined at:
  2271 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\Umul16.c"
  2272 ;; Parameters:    Size  Location     Type
  2273 ;;  multiplier      2    0[COMRAM] unsigned int 
  2274 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2275 ;; Auto vars:     Size  Location     Type
  2276 ;;  product         2    4[COMRAM] unsigned int 
  2277 ;; Return value:  Size  Location     Type
  2278 ;;                  2    0[COMRAM] unsigned int 
  2279 ;; Registers used:
  2280 ;;		wreg, status,2, status,0, prodl, prodh
  2281 ;; Tracked objects:
  2282 ;;		On entry : 0/0
  2283 ;;		On exit  : 0/0
  2284 ;;		Unchanged: 0/0
  2285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2286 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2287 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2289 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2290 ;;Total ram usage:        6 bytes
  2291 ;; Hardware stack levels used:    1
  2292 ;; This function calls:
  2293 ;;		Nothing
  2294 ;; This function is called by:
  2295 ;;		_sprintf
  2296 ;; This function uses a non-reentrant model
  2297 ;;
  2298                           
  2299                           	psect	text7
  2300  001DFC                     __ptext7:
  2301                           	opt stack 0
  2302  001DFC                     ___wmul:
  2303                           	opt stack 27
  2304                           
  2305                           ;incstack = 0
  2306  001DFC  5001               	movf	___wmul@multiplier,w,c
  2307  001DFE  0203               	mulwf	___wmul@multiplicand,c
  2308  001E00  CFF3 F005          	movff	prodl,___wmul@product
  2309  001E04  CFF4 F006          	movff	prodh,___wmul@product+1
  2310  001E08  5001               	movf	___wmul@multiplier,w,c
  2311  001E0A  0204               	mulwf	___wmul@multiplicand+1,c
  2312  001E0C  50F3               	movf	prodl,w,c
  2313  001E0E  2606               	addwf	___wmul@product+1,f,c
  2314  001E10  5002               	movf	___wmul@multiplier+1,w,c
  2315  001E12  0203               	mulwf	___wmul@multiplicand,c
  2316  001E14  50F3               	movf	prodl,w,c
  2317  001E16  2606               	addwf	___wmul@product+1,f,c
  2318  001E18  C005  F001         	movff	___wmul@product,?___wmul
  2319  001E1C  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2320  001E20  0012               	return	
  2321  001E22  0012               	return		;funcret
  2322  001E24                     __end_of___wmul:
  2323                           	opt stack 0
  2324                           tblptru	equ	0xFF8
  2325                           tblptrh	equ	0xFF7
  2326                           tblptrl	equ	0xFF6
  2327                           tablat	equ	0xFF5
  2328                           prodh	equ	0xFF4
  2329                           prodl	equ	0xFF3
  2330                           postinc0	equ	0xFEE
  2331                           wreg	equ	0xFE8
  2332                           postdec1	equ	0xFE5
  2333                           fsr1l	equ	0xFE1
  2334                           indf2	equ	0xFDF
  2335                           postinc2	equ	0xFDE
  2336                           postdec2	equ	0xFDD
  2337                           fsr2h	equ	0xFDA
  2338                           fsr2l	equ	0xFD9
  2339                           status	equ	0xFD8
  2340                           
  2341 ;; *************** function ___lwmod *****************
  2342 ;; Defined at:
  2343 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lwmod.c"
  2344 ;; Parameters:    Size  Location     Type
  2345 ;;  dividend        2    7[COMRAM] unsigned int 
  2346 ;;  divisor         2    9[COMRAM] unsigned int 
  2347 ;; Auto vars:     Size  Location     Type
  2348 ;;  counter         1   11[COMRAM] unsigned char 
  2349 ;; Return value:  Size  Location     Type
  2350 ;;                  2    7[COMRAM] unsigned int 
  2351 ;; Registers used:
  2352 ;;		wreg, status,2, status,0
  2353 ;; Tracked objects:
  2354 ;;		On entry : 0/0
  2355 ;;		On exit  : 0/0
  2356 ;;		Unchanged: 0/0
  2357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2358 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2359 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2361 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2362 ;;Total ram usage:        5 bytes
  2363 ;; Hardware stack levels used:    1
  2364 ;; This function calls:
  2365 ;;		Nothing
  2366 ;; This function is called by:
  2367 ;;		_sprintf
  2368 ;; This function uses a non-reentrant model
  2369 ;;
  2370                           
  2371                           	psect	text8
  2372  001CA6                     __ptext8:
  2373                           	opt stack 0
  2374  001CA6                     ___lwmod:
  2375                           	opt stack 27
  2376                           
  2377                           ;incstack = 0
  2378  001CA6  500A               	movf	___lwmod@divisor,w,c
  2379  001CA8  100B               	iorwf	___lwmod@divisor+1,w,c
  2380  001CAA  B4D8               	btfsc	status,2,c
  2381  001CAC  D01D               	goto	l1276
  2382  001CAE  0E01               	movlw	1
  2383  001CB0  6E0C               	movwf	___lwmod@counter,c
  2384  001CB2  D005               	goto	l2253
  2385  001CB4                     l2251:
  2386  001CB4  90D8               	bcf	status,0,c
  2387  001CB6  360A               	rlcf	___lwmod@divisor,f,c
  2388  001CB8  360B               	rlcf	___lwmod@divisor+1,f,c
  2389  001CBA  2A0C               	incf	___lwmod@counter,f,c
  2390  001CBC  D000               	goto	l2253
  2391  001CBE                     l2253:
  2392  001CBE  BE0B               	btfsc	___lwmod@divisor+1,7,c
  2393  001CC0  D002               	goto	l2255
  2394  001CC2  D7F8               	goto	l2251
  2395  001CC4  D000               	goto	l2255
  2396  001CC6                     l2255:
  2397  001CC6  500A               	movf	___lwmod@divisor,w,c
  2398  001CC8  5C08               	subwf	___lwmod@dividend,w,c
  2399  001CCA  500B               	movf	___lwmod@divisor+1,w,c
  2400  001CCC  5809               	subwfb	___lwmod@dividend+1,w,c
  2401  001CCE  A0D8               	btfss	status,0,c
  2402  001CD0  D005               	goto	l2259
  2403  001CD2  500A               	movf	___lwmod@divisor,w,c
  2404  001CD4  5E08               	subwf	___lwmod@dividend,f,c
  2405  001CD6  500B               	movf	___lwmod@divisor+1,w,c
  2406  001CD8  5A09               	subwfb	___lwmod@dividend+1,f,c
  2407  001CDA  D000               	goto	l2259
  2408  001CDC                     l2259:
  2409  001CDC  90D8               	bcf	status,0,c
  2410  001CDE  320B               	rrcf	___lwmod@divisor+1,f,c
  2411  001CE0  320A               	rrcf	___lwmod@divisor,f,c
  2412  001CE2  2E0C               	decfsz	___lwmod@counter,f,c
  2413  001CE4  D7F0               	goto	l2255
  2414  001CE6  D000               	goto	l1276
  2415  001CE8                     l1276:
  2416  001CE8  C008  F008         	movff	___lwmod@dividend,?___lwmod
  2417  001CEC  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  2418  001CF0  0012               	return		;funcret
  2419  001CF2                     __end_of___lwmod:
  2420                           	opt stack 0
  2421                           tblptru	equ	0xFF8
  2422                           tblptrh	equ	0xFF7
  2423                           tblptrl	equ	0xFF6
  2424                           tablat	equ	0xFF5
  2425                           prodh	equ	0xFF4
  2426                           prodl	equ	0xFF3
  2427                           postinc0	equ	0xFEE
  2428                           wreg	equ	0xFE8
  2429                           postdec1	equ	0xFE5
  2430                           fsr1l	equ	0xFE1
  2431                           indf2	equ	0xFDF
  2432                           postinc2	equ	0xFDE
  2433                           postdec2	equ	0xFDD
  2434                           fsr2h	equ	0xFDA
  2435                           fsr2l	equ	0xFD9
  2436                           status	equ	0xFD8
  2437                           
  2438 ;; *************** function ___lwdiv *****************
  2439 ;; Defined at:
  2440 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  2441 ;; Parameters:    Size  Location     Type
  2442 ;;  dividend        2    0[COMRAM] unsigned int 
  2443 ;;  divisor         2    2[COMRAM] unsigned int 
  2444 ;; Auto vars:     Size  Location     Type
  2445 ;;  quotient        2    4[COMRAM] unsigned int 
  2446 ;;  counter         1    6[COMRAM] unsigned char 
  2447 ;; Return value:  Size  Location     Type
  2448 ;;                  2    0[COMRAM] unsigned int 
  2449 ;; Registers used:
  2450 ;;		wreg, status,2, status,0
  2451 ;; Tracked objects:
  2452 ;;		On entry : 0/0
  2453 ;;		On exit  : 0/0
  2454 ;;		Unchanged: 0/0
  2455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2456 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2457 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2459 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2460 ;;Total ram usage:        7 bytes
  2461 ;; Hardware stack levels used:    1
  2462 ;; This function calls:
  2463 ;;		Nothing
  2464 ;; This function is called by:
  2465 ;;		_sprintf
  2466 ;; This function uses a non-reentrant model
  2467 ;;
  2468                           
  2469                           	psect	text9
  2470  001B4A                     __ptext9:
  2471                           	opt stack 0
  2472  001B4A                     ___lwdiv:
  2473                           	opt stack 27
  2474                           
  2475                           ;incstack = 0
  2476  001B4A  0E00               	movlw	0
  2477  001B4C  6E06               	movwf	___lwdiv@quotient+1,c
  2478  001B4E  0E00               	movlw	0
  2479  001B50  6E05               	movwf	___lwdiv@quotient,c
  2480  001B52  5003               	movf	___lwdiv@divisor,w,c
  2481  001B54  1004               	iorwf	___lwdiv@divisor+1,w,c
  2482  001B56  B4D8               	btfsc	status,2,c
  2483  001B58  D021               	goto	l1266
  2484  001B5A  0E01               	movlw	1
  2485  001B5C  6E07               	movwf	___lwdiv@counter,c
  2486  001B5E  D005               	goto	l2233
  2487  001B60                     l2231:
  2488  001B60  90D8               	bcf	status,0,c
  2489  001B62  3603               	rlcf	___lwdiv@divisor,f,c
  2490  001B64  3604               	rlcf	___lwdiv@divisor+1,f,c
  2491  001B66  2A07               	incf	___lwdiv@counter,f,c
  2492  001B68  D000               	goto	l2233
  2493  001B6A                     l2233:
  2494  001B6A  BE04               	btfsc	___lwdiv@divisor+1,7,c
  2495  001B6C  D002               	goto	l2235
  2496  001B6E  D7F8               	goto	l2231
  2497  001B70  D000               	goto	l2235
  2498  001B72                     l2235:
  2499  001B72  90D8               	bcf	status,0,c
  2500  001B74  3605               	rlcf	___lwdiv@quotient,f,c
  2501  001B76  3606               	rlcf	___lwdiv@quotient+1,f,c
  2502  001B78  5003               	movf	___lwdiv@divisor,w,c
  2503  001B7A  5C01               	subwf	___lwdiv@dividend,w,c
  2504  001B7C  5004               	movf	___lwdiv@divisor+1,w,c
  2505  001B7E  5802               	subwfb	___lwdiv@dividend+1,w,c
  2506  001B80  A0D8               	btfss	status,0,c
  2507  001B82  D006               	goto	l2243
  2508  001B84  5003               	movf	___lwdiv@divisor,w,c
  2509  001B86  5E01               	subwf	___lwdiv@dividend,f,c
  2510  001B88  5004               	movf	___lwdiv@divisor+1,w,c
  2511  001B8A  5A02               	subwfb	___lwdiv@dividend+1,f,c
  2512  001B8C  8005               	bsf	___lwdiv@quotient,0,c
  2513  001B8E  D000               	goto	l2243
  2514  001B90                     l2243:
  2515  001B90  90D8               	bcf	status,0,c
  2516  001B92  3204               	rrcf	___lwdiv@divisor+1,f,c
  2517  001B94  3203               	rrcf	___lwdiv@divisor,f,c
  2518  001B96  2E07               	decfsz	___lwdiv@counter,f,c
  2519  001B98  D7EC               	goto	l2235
  2520  001B9A  D000               	goto	l1266
  2521  001B9C                     l1266:
  2522  001B9C  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  2523  001BA0  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2524  001BA4  0012               	return		;funcret
  2525  001BA6                     __end_of___lwdiv:
  2526                           	opt stack 0
  2527                           tblptru	equ	0xFF8
  2528                           tblptrh	equ	0xFF7
  2529                           tblptrl	equ	0xFF6
  2530                           tablat	equ	0xFF5
  2531                           prodh	equ	0xFF4
  2532                           prodl	equ	0xFF3
  2533                           postinc0	equ	0xFEE
  2534                           wreg	equ	0xFE8
  2535                           postdec1	equ	0xFE5
  2536                           fsr1l	equ	0xFE1
  2537                           indf2	equ	0xFDF
  2538                           postinc2	equ	0xFDE
  2539                           postdec2	equ	0xFDD
  2540                           fsr2h	equ	0xFDA
  2541                           fsr2l	equ	0xFD9
  2542                           status	equ	0xFD8
  2543                           
  2544 ;; *************** function _lcd_putrs *****************
  2545 ;; Defined at:
  2546 ;;		line 221 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2547 ;; Parameters:    Size  Location     Type
  2548 ;;  ptr             2    8[COMRAM] PTR const unsigned char 
  2549 ;;		 -> STR_26(8), STR_25(4), STR_24(3), STR_23(11), 
  2550 ;;		 -> STR_22(11), STR_19(2), STR_18(2), STR_16(2), 
  2551 ;;		 -> STR_15(2), STR_11(2), STR_7(2), buffer2(20), 
  2552 ;;		 -> STR_3(10), STR_2(13), STR_1(33), 
  2553 ;; Auto vars:     Size  Location     Type
  2554 ;;		None
  2555 ;; Return value:  Size  Location     Type
  2556 ;;		None               void
  2557 ;; Registers used:
  2558 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2559 ;; Tracked objects:
  2560 ;;		On entry : 0/0
  2561 ;;		On exit  : 0/0
  2562 ;;		Unchanged: 0/0
  2563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2564 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2567 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2568 ;;Total ram usage:        2 bytes
  2569 ;; Hardware stack levels used:    1
  2570 ;; Hardware stack levels required when called:    4
  2571 ;; This function calls:
  2572 ;;		_lcd_putc
  2573 ;; This function is called by:
  2574 ;;		_main
  2575 ;;		_read_keyboard
  2576 ;;		_write_Date
  2577 ;;		_twinkle
  2578 ;;		_set_vision
  2579 ;; This function uses a non-reentrant model
  2580 ;;
  2581                           
  2582                           	psect	text10
  2583  001C52                     __ptext10:
  2584                           	opt stack 0
  2585  001C52                     _lcd_putrs:
  2586                           	opt stack 24
  2587                           
  2588                           ;unmc_lcd_216.c: 223: while(*ptr){
  2589                           
  2590                           ;incstack = 0
  2591  001C52  D015               	goto	l2269
  2592  001C54                     l2265:
  2593                           
  2594                           ;unmc_lcd_216.c: 224: lcd_putc(*ptr++);
  2595  001C54  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  2596  001C58  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  2597  001C5C  6AF8               	clrf	tblptru,c
  2598  001C5E  0E0E               	movlw	(high __ramtop+-1)
  2599  001C60  64F7               	cpfsgt	tblptrh,c
  2600  001C62  D003               	bra	u1367
  2601  001C64  0008               	tblrd		*
  2602  001C66  50F5               	movf	tablat,w,c
  2603  001C68  D005               	bra	u1360
  2604  001C6A                     u1367:
  2605  001C6A  CFF6 FFE9          	movff	tblptrl,fsr0l
  2606  001C6E  CFF7 FFEA          	movff	tblptrh,fsr0h
  2607  001C72  50EF               	movf	indf0,w,c
  2608  001C74                     u1360:
  2609  001C74  EC79  F00E         	call	_lcd_putc
  2610  001C78  4A09               	infsnz	lcd_putrs@ptr,f,c
  2611  001C7A  2A0A               	incf	lcd_putrs@ptr+1,f,c
  2612  001C7C  D000               	goto	l2269
  2613  001C7E                     l2269:
  2614  001C7E  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  2615  001C82  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  2616  001C86  6AF8               	clrf	tblptru,c
  2617  001C88  0E0E               	movlw	(high __ramtop+-1)
  2618  001C8A  64F7               	cpfsgt	tblptrh,c
  2619  001C8C  D003               	bra	u1377
  2620  001C8E  0008               	tblrd		*
  2621  001C90  50F5               	movf	tablat,w,c
  2622  001C92  D005               	bra	u1370
  2623  001C94                     u1377:
  2624  001C94  CFF6 FFE9          	movff	tblptrl,fsr0l
  2625  001C98  CFF7 FFEA          	movff	tblptrh,fsr0h
  2626  001C9C  50EF               	movf	indf0,w,c
  2627  001C9E                     u1370:
  2628  001C9E  0900               	iorlw	0
  2629  001CA0  A4D8               	btfss	status,2,c
  2630  001CA2  D7D8               	goto	l2265
  2631  001CA4  0012               	return		;funcret
  2632  001CA6                     __end_of_lcd_putrs:
  2633                           	opt stack 0
  2634                           tblptru	equ	0xFF8
  2635                           tblptrh	equ	0xFF7
  2636                           tblptrl	equ	0xFF6
  2637                           tablat	equ	0xFF5
  2638                           prodh	equ	0xFF4
  2639                           prodl	equ	0xFF3
  2640                           indf0	equ	0xFEF
  2641                           postinc0	equ	0xFEE
  2642                           fsr0h	equ	0xFEA
  2643                           fsr0l	equ	0xFE9
  2644                           wreg	equ	0xFE8
  2645                           postdec1	equ	0xFE5
  2646                           fsr1l	equ	0xFE1
  2647                           indf2	equ	0xFDF
  2648                           postinc2	equ	0xFDE
  2649                           postdec2	equ	0xFDD
  2650                           fsr2h	equ	0xFDA
  2651                           fsr2l	equ	0xFD9
  2652                           status	equ	0xFD8
  2653                           
  2654 ;; *************** function _lcd_putc *****************
  2655 ;; Defined at:
  2656 ;;		line 172 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2657 ;; Parameters:    Size  Location     Type
  2658 ;;  c               1    wreg     unsigned char 
  2659 ;; Auto vars:     Size  Location     Type
  2660 ;;  c               1    7[COMRAM] unsigned char 
  2661 ;; Return value:  Size  Location     Type
  2662 ;;		None               void
  2663 ;; Registers used:
  2664 ;;		wreg, status,2, status,0, cstack
  2665 ;; Tracked objects:
  2666 ;;		On entry : 0/0
  2667 ;;		On exit  : 0/0
  2668 ;;		Unchanged: 0/0
  2669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2671 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2673 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2674 ;;Total ram usage:        1 bytes
  2675 ;; Hardware stack levels used:    1
  2676 ;; Hardware stack levels required when called:    3
  2677 ;; This function calls:
  2678 ;;		_lcd_gotoxy
  2679 ;;		_lcd_send_byte
  2680 ;; This function is called by:
  2681 ;;		_lcd_putrs
  2682 ;;		_lcd_puts
  2683 ;; This function uses a non-reentrant model
  2684 ;;
  2685                           
  2686                           	psect	text11
  2687  001CF2                     __ptext11:
  2688                           	opt stack 0
  2689  001CF2                     _lcd_putc:
  2690                           	opt stack 24
  2691                           
  2692                           ;incstack = 0
  2693                           ;lcd_putc@c stored from wreg
  2694  001CF2  6E08               	movwf	lcd_putc@c,c
  2695                           
  2696                           ;unmc_lcd_216.c: 173: switch(c){
  2697  001CF4  D018               	goto	l2205
  2698  001CF6                     l2195:
  2699                           
  2700                           ;unmc_lcd_216.c: 175: lcd_send_byte(0,1);
  2701  001CF6  0E01               	movlw	1
  2702  001CF8  6E03               	movwf	lcd_send_byte@n,c
  2703  001CFA  0E00               	movlw	0
  2704  001CFC  ECE5  F00E         	call	_lcd_send_byte
  2705                           
  2706                           ;unmc_lcd_216.c: 176: break;
  2707  001D00  0012               	return	
  2708  001D02                     l2197:
  2709                           
  2710                           ;unmc_lcd_216.c: 178: lcd_gotoxy(1,2);
  2711  001D02  0E02               	movlw	2
  2712  001D04  6E05               	movwf	lcd_gotoxy@y,c
  2713  001D06  0E01               	movlw	1
  2714  001D08  EC12  F00F         	call	_lcd_gotoxy
  2715                           
  2716                           ;unmc_lcd_216.c: 179: break;
  2717  001D0C  0012               	return	
  2718  001D0E                     l2199:
  2719                           
  2720                           ;unmc_lcd_216.c: 181: lcd_send_byte(0,0x10);
  2721  001D0E  0E10               	movlw	16
  2722  001D10  6E03               	movwf	lcd_send_byte@n,c
  2723  001D12  0E00               	movlw	0
  2724  001D14  ECE5  F00E         	call	_lcd_send_byte
  2725                           
  2726                           ;unmc_lcd_216.c: 182: break;
  2727  001D18  0012               	return	
  2728  001D1A                     l2201:
  2729                           
  2730                           ;unmc_lcd_216.c: 184: lcd_send_byte(1,c);
  2731  001D1A  C008  F003         	movff	lcd_putc@c,lcd_send_byte@n
  2732  001D1E  0E01               	movlw	1
  2733  001D20  ECE5  F00E         	call	_lcd_send_byte
  2734                           
  2735                           ;unmc_lcd_216.c: 186: }
  2736                           
  2737                           ;unmc_lcd_216.c: 185: break;
  2738  001D24  0012               	return	
  2739  001D26                     l2205:
  2740  001D26  5008               	movf	lcd_putc@c,w,c
  2741                           
  2742                           ; Switch size 1, requested type "space"
  2743                           ; Number of cases is 3, Range of values is 8 to 12
  2744                           ; switch strategies available:
  2745                           ; Name         Instructions Cycles
  2746                           ; simple_byte           10     6 (average)
  2747                           ;	Chosen strategy is simple_byte
  2748  001D28  0A08               	xorlw	8	; case 8
  2749  001D2A  B4D8               	btfsc	status,2,c
  2750  001D2C  D7F0               	goto	l2199
  2751  001D2E  0A02               	xorlw	2	; case 10
  2752  001D30  B4D8               	btfsc	status,2,c
  2753  001D32  D7E7               	goto	l2197
  2754  001D34  0A06               	xorlw	6	; case 12
  2755  001D36  B4D8               	btfsc	status,2,c
  2756  001D38  D7DE               	goto	l2195
  2757  001D3A  D7EF               	goto	l2201
  2758  001D3C  0012               	return		;funcret
  2759  001D3E                     __end_of_lcd_putc:
  2760                           	opt stack 0
  2761                           tblptru	equ	0xFF8
  2762                           tblptrh	equ	0xFF7
  2763                           tblptrl	equ	0xFF6
  2764                           tablat	equ	0xFF5
  2765                           prodh	equ	0xFF4
  2766                           prodl	equ	0xFF3
  2767                           indf0	equ	0xFEF
  2768                           postinc0	equ	0xFEE
  2769                           fsr0h	equ	0xFEA
  2770                           fsr0l	equ	0xFE9
  2771                           wreg	equ	0xFE8
  2772                           postdec1	equ	0xFE5
  2773                           fsr1l	equ	0xFE1
  2774                           indf2	equ	0xFDF
  2775                           postinc2	equ	0xFDE
  2776                           postdec2	equ	0xFDD
  2777                           fsr2h	equ	0xFDA
  2778                           fsr2l	equ	0xFD9
  2779                           status	equ	0xFD8
  2780                           
  2781 ;; *************** function _lcd_gotoxy *****************
  2782 ;; Defined at:
  2783 ;;		line 158 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2784 ;; Parameters:    Size  Location     Type
  2785 ;;  x               1    wreg     unsigned char 
  2786 ;;  y               1    4[COMRAM] unsigned char 
  2787 ;; Auto vars:     Size  Location     Type
  2788 ;;  x               1    5[COMRAM] unsigned char 
  2789 ;;  address         1    6[COMRAM] unsigned char 
  2790 ;; Return value:  Size  Location     Type
  2791 ;;		None               void
  2792 ;; Registers used:
  2793 ;;		wreg, status,2, status,0, cstack
  2794 ;; Tracked objects:
  2795 ;;		On entry : 0/0
  2796 ;;		On exit  : 0/0
  2797 ;;		Unchanged: 0/0
  2798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2799 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2800 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2802 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2803 ;;Total ram usage:        3 bytes
  2804 ;; Hardware stack levels used:    1
  2805 ;; Hardware stack levels required when called:    2
  2806 ;; This function calls:
  2807 ;;		_lcd_send_byte
  2808 ;; This function is called by:
  2809 ;;		_main
  2810 ;;		_lcd_putc
  2811 ;;		_write_Date
  2812 ;;		_twinkle
  2813 ;;		_set_vision
  2814 ;; This function uses a non-reentrant model
  2815 ;;
  2816                           
  2817                           	psect	text12
  2818  001E24                     __ptext12:
  2819                           	opt stack 0
  2820  001E24                     _lcd_gotoxy:
  2821                           	opt stack 24
  2822                           
  2823                           ;incstack = 0
  2824                           ;lcd_gotoxy@x stored from wreg
  2825  001E24  6E06               	movwf	lcd_gotoxy@x,c
  2826                           
  2827                           ;unmc_lcd_216.c: 159: int8 address;
  2828                           ;unmc_lcd_216.c: 161: if(y != 1)
  2829  001E26  0405               	decf	lcd_gotoxy@y,w,c
  2830  001E28  B4D8               	btfsc	status,2,c
  2831  001E2A  D002               	goto	l2187
  2832                           
  2833                           ;unmc_lcd_216.c: 162: address = 0x40;
  2834  001E2C  0E40               	movlw	64
  2835  001E2E  D001               	goto	L2
  2836  001E30                     l2187:
  2837                           
  2838                           ;unmc_lcd_216.c: 163: else
  2839                           ;unmc_lcd_216.c: 164: address=0;
  2840  001E30  0E00               	movlw	0
  2841  001E32                     L2:
  2842  001E32  6E07               	movwf	lcd_gotoxy@address,c
  2843  001E34  D000               	goto	l2189
  2844  001E36                     l2189:
  2845                           
  2846                           ;unmc_lcd_216.c: 166: address += x-1;
  2847  001E36  0406               	decf	lcd_gotoxy@x,w,c
  2848  001E38  2607               	addwf	lcd_gotoxy@address,f,c
  2849                           
  2850                           ;unmc_lcd_216.c: 167: lcd_send_byte(0, 0x80 | address);
  2851  001E3A  5007               	movf	lcd_gotoxy@address,w,c
  2852  001E3C  0980               	iorlw	128
  2853  001E3E  6E03               	movwf	lcd_send_byte@n,c
  2854  001E40  0E00               	movlw	0
  2855  001E42  ECE5  F00E         	call	_lcd_send_byte
  2856  001E46  0012               	return		;funcret
  2857  001E48                     __end_of_lcd_gotoxy:
  2858                           	opt stack 0
  2859                           tblptru	equ	0xFF8
  2860                           tblptrh	equ	0xFF7
  2861                           tblptrl	equ	0xFF6
  2862                           tablat	equ	0xFF5
  2863                           prodh	equ	0xFF4
  2864                           prodl	equ	0xFF3
  2865                           indf0	equ	0xFEF
  2866                           postinc0	equ	0xFEE
  2867                           fsr0h	equ	0xFEA
  2868                           fsr0l	equ	0xFE9
  2869                           wreg	equ	0xFE8
  2870                           postdec1	equ	0xFE5
  2871                           fsr1l	equ	0xFE1
  2872                           indf2	equ	0xFDF
  2873                           postinc2	equ	0xFDE
  2874                           postdec2	equ	0xFDD
  2875                           fsr2h	equ	0xFDA
  2876                           fsr2l	equ	0xFD9
  2877                           status	equ	0xFD8
  2878                           
  2879 ;; *************** function __delay_s *****************
  2880 ;; Defined at:
  2881 ;;		line 19 in file "lcd_vision.c"
  2882 ;; Parameters:    Size  Location     Type
  2883 ;;  millis          2    8[COMRAM] int 
  2884 ;; Auto vars:     Size  Location     Type
  2885 ;;  index           2   13[COMRAM] short 
  2886 ;;  it              2   11[COMRAM] short 
  2887 ;; Return value:  Size  Location     Type
  2888 ;;		None               void
  2889 ;; Registers used:
  2890 ;;		wreg, status,2, status,0, cstack
  2891 ;; Tracked objects:
  2892 ;;		On entry : 0/0
  2893 ;;		On exit  : 0/0
  2894 ;;		Unchanged: 0/0
  2895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2896 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2897 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2898 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2899 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2900 ;;Total ram usage:        7 bytes
  2901 ;; Hardware stack levels used:    1
  2902 ;; Hardware stack levels required when called:    1
  2903 ;; This function calls:
  2904 ;;		___awdiv
  2905 ;; This function is called by:
  2906 ;;		_twinkle
  2907 ;; This function uses a non-reentrant model
  2908 ;;
  2909                           
  2910                           	psect	text13
  2911  001BA6                     __ptext13:
  2912                           	opt stack 0
  2913  001BA6                     __delay_s:
  2914                           	opt stack 27
  2915                           
  2916                           ;lcd_vision.c: 20: short it = millis/100;
  2917                           
  2918                           ;incstack = 0
  2919  001BA6  C009  F001         	movff	__delay_s@millis,___awdiv@dividend
  2920  001BAA  C00A  F002         	movff	__delay_s@millis+1,___awdiv@dividend+1
  2921  001BAE  0E00               	movlw	0
  2922  001BB0  6E04               	movwf	___awdiv@divisor+1,c
  2923  001BB2  0E64               	movlw	100
  2924  001BB4  6E03               	movwf	___awdiv@divisor,c
  2925  001BB6  EC33  F00C         	call	___awdiv	;wreg free
  2926  001BBA  C001  F00C         	movff	?___awdiv,__delay_s@it
  2927  001BBE  C002  F00D         	movff	?___awdiv+1,__delay_s@it+1
  2928                           
  2929                           ;lcd_vision.c: 21: short index = 1;
  2930  001BC2  0E00               	movlw	0
  2931  001BC4  6E0F               	movwf	__delay_s@index+1,c
  2932  001BC6  0E01               	movlw	1
  2933  001BC8  6E0E               	movwf	__delay_s@index,c
  2934                           
  2935                           ;lcd_vision.c: 23: for(index = 1; index <= it; index++){
  2936  001BCA  0E00               	movlw	0
  2937  001BCC  6E0F               	movwf	__delay_s@index+1,c
  2938  001BCE  0E01               	movlw	1
  2939  001BD0  6E0E               	movwf	__delay_s@index,c
  2940  001BD2  D00A               	goto	l567
  2941  001BD4                     l2641:
  2942                           
  2943                           ;lcd_vision.c: 24: _delay((unsigned long)((98)*(8000000/4000.0)));
  2944  001BD4  0EFF               	movlw	255
  2945  001BD6  6E0B               	movwf	??__delay_s& (0+255),c
  2946  001BD8  0E8A               	movlw	138
  2947  001BDA                     u2377:
  2948  001BDA  2EE8               	decfsz	wreg,f,c
  2949  001BDC  D7FE               	goto	u2377
  2950  001BDE  2E0B               	decfsz	??__delay_s& (0+255),f,c
  2951  001BE0  D7FC               	goto	u2377
  2952  001BE2  D000               	nop2	
  2953  001BE4  4A0E               	infsnz	__delay_s@index,f,c
  2954  001BE6  2A0F               	incf	__delay_s@index+1,f,c
  2955  001BE8                     l567:
  2956  001BE8  500E               	movf	__delay_s@index,w,c
  2957  001BEA  5C0C               	subwf	__delay_s@it,w,c
  2958  001BEC  500D               	movf	__delay_s@it+1,w,c
  2959  001BEE  0A80               	xorlw	128
  2960  001BF0  6E0B               	movwf	??__delay_s& (0+255),c
  2961  001BF2  500F               	movf	__delay_s@index+1,w,c
  2962  001BF4  0A80               	xorlw	128
  2963  001BF6  580B               	subwfb	??__delay_s& (0+255),w,c
  2964  001BF8  B0D8               	btfsc	status,0,c
  2965  001BFA  D7EC               	goto	l2641
  2966  001BFC  0012               	return		;funcret
  2967  001BFE                     __end_of__delay_s:
  2968                           	opt stack 0
  2969                           tblptru	equ	0xFF8
  2970                           tblptrh	equ	0xFF7
  2971                           tblptrl	equ	0xFF6
  2972                           tablat	equ	0xFF5
  2973                           prodh	equ	0xFF4
  2974                           prodl	equ	0xFF3
  2975                           indf0	equ	0xFEF
  2976                           postinc0	equ	0xFEE
  2977                           fsr0h	equ	0xFEA
  2978                           fsr0l	equ	0xFE9
  2979                           wreg	equ	0xFE8
  2980                           postdec1	equ	0xFE5
  2981                           fsr1l	equ	0xFE1
  2982                           indf2	equ	0xFDF
  2983                           postinc2	equ	0xFDE
  2984                           postdec2	equ	0xFDD
  2985                           fsr2h	equ	0xFDA
  2986                           fsr2l	equ	0xFD9
  2987                           status	equ	0xFD8
  2988                           
  2989 ;; *************** function _clear *****************
  2990 ;; Defined at:
  2991 ;;		line 5 in file "lcd_vision.c"
  2992 ;; Parameters:    Size  Location     Type
  2993 ;;		None
  2994 ;; Auto vars:     Size  Location     Type
  2995 ;;		None
  2996 ;; Return value:  Size  Location     Type
  2997 ;;		None               void
  2998 ;; Registers used:
  2999 ;;		wreg, status,2, status,0, cstack
  3000 ;; Tracked objects:
  3001 ;;		On entry : 0/0
  3002 ;;		On exit  : 0/0
  3003 ;;		Unchanged: 0/0
  3004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3007 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3008 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3009 ;;Total ram usage:        1 bytes
  3010 ;; Hardware stack levels used:    1
  3011 ;; Hardware stack levels required when called:    3
  3012 ;; This function calls:
  3013 ;;		_lcd_comand
  3014 ;; This function is called by:
  3015 ;;		_set_vision
  3016 ;; This function uses a non-reentrant model
  3017 ;;
  3018                           
  3019                           	psect	text14
  3020  001E6A                     __ptext14:
  3021                           	opt stack 0
  3022  001E6A                     _clear:
  3023                           	opt stack 26
  3024                           
  3025                           ;lcd_vision.c: 6: lcd_comand(0b00000001);
  3026                           
  3027                           ;incstack = 0
  3028  001E6A  0E01               	movlw	1
  3029  001E6C  EC5B  F00F         	call	_lcd_comand
  3030                           
  3031                           ;lcd_vision.c: 7: _delay((unsigned long)((5)*(8000000/4000.0)));
  3032  001E70  0E0D               	movlw	13
  3033  001E72  6E06               	movwf	??_clear& (0+255),c
  3034  001E74  0EFC               	movlw	252
  3035  001E76                     u2387:
  3036  001E76  2EE8               	decfsz	wreg,f,c
  3037  001E78  D7FE               	goto	u2387
  3038  001E7A  2E06               	decfsz	??_clear& (0+255),f,c
  3039  001E7C  D7FC               	goto	u2387
  3040  001E7E  0012               	return		;funcret
  3041  001E80                     __end_of_clear:
  3042                           	opt stack 0
  3043                           tblptru	equ	0xFF8
  3044                           tblptrh	equ	0xFF7
  3045                           tblptrl	equ	0xFF6
  3046                           tablat	equ	0xFF5
  3047                           prodh	equ	0xFF4
  3048                           prodl	equ	0xFF3
  3049                           indf0	equ	0xFEF
  3050                           postinc0	equ	0xFEE
  3051                           fsr0h	equ	0xFEA
  3052                           fsr0l	equ	0xFE9
  3053                           wreg	equ	0xFE8
  3054                           postdec1	equ	0xFE5
  3055                           fsr1l	equ	0xFE1
  3056                           indf2	equ	0xFDF
  3057                           postinc2	equ	0xFDE
  3058                           postdec2	equ	0xFDD
  3059                           fsr2h	equ	0xFDA
  3060                           fsr2l	equ	0xFD9
  3061                           status	equ	0xFD8
  3062                           
  3063 ;; *************** function _caratula *****************
  3064 ;; Defined at:
  3065 ;;		line 31 in file "main.c"
  3066 ;; Parameters:    Size  Location     Type
  3067 ;;		None
  3068 ;; Auto vars:     Size  Location     Type
  3069 ;;		None
  3070 ;; Return value:  Size  Location     Type
  3071 ;;		None               void
  3072 ;; Registers used:
  3073 ;;		wreg, status,2, status,0, cstack
  3074 ;; Tracked objects:
  3075 ;;		On entry : 0/0
  3076 ;;		On exit  : 0/0
  3077 ;;		Unchanged: 0/0
  3078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3082 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3083 ;;Total ram usage:        0 bytes
  3084 ;; Hardware stack levels used:    1
  3085 ;; Hardware stack levels required when called:    3
  3086 ;; This function calls:
  3087 ;;		_lcd_comand
  3088 ;; This function is called by:
  3089 ;;		_main
  3090 ;; This function uses a non-reentrant model
  3091 ;;
  3092                           
  3093                           	psect	text15
  3094  001ED2                     __ptext15:
  3095                           	opt stack 0
  3096  001ED2                     _caratula:
  3097                           	opt stack 27
  3098                           
  3099                           ;main.c: 33: lcd_comand(0b00001100);
  3100                           
  3101                           ;incstack = 0
  3102  001ED2  0E0C               	movlw	12
  3103  001ED4  EC5B  F00F         	call	_lcd_comand
  3104  001ED8  0012               	return		;funcret
  3105  001EDA                     __end_of_caratula:
  3106                           	opt stack 0
  3107                           tblptru	equ	0xFF8
  3108                           tblptrh	equ	0xFF7
  3109                           tblptrl	equ	0xFF6
  3110                           tablat	equ	0xFF5
  3111                           prodh	equ	0xFF4
  3112                           prodl	equ	0xFF3
  3113                           indf0	equ	0xFEF
  3114                           postinc0	equ	0xFEE
  3115                           fsr0h	equ	0xFEA
  3116                           fsr0l	equ	0xFE9
  3117                           wreg	equ	0xFE8
  3118                           postdec1	equ	0xFE5
  3119                           fsr1l	equ	0xFE1
  3120                           indf2	equ	0xFDF
  3121                           postinc2	equ	0xFDE
  3122                           postdec2	equ	0xFDD
  3123                           fsr2h	equ	0xFDA
  3124                           fsr2l	equ	0xFD9
  3125                           status	equ	0xFD8
  3126                           
  3127 ;; *************** function _Setup *****************
  3128 ;; Defined at:
  3129 ;;		line 51 in file "main.c"
  3130 ;; Parameters:    Size  Location     Type
  3131 ;;		None
  3132 ;; Auto vars:     Size  Location     Type
  3133 ;;		None
  3134 ;; Return value:  Size  Location     Type
  3135 ;;		None               void
  3136 ;; Registers used:
  3137 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3138 ;; Tracked objects:
  3139 ;;		On entry : 0/0
  3140 ;;		On exit  : 0/0
  3141 ;;		Unchanged: 0/0
  3142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3146 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3147 ;;Total ram usage:        0 bytes
  3148 ;; Hardware stack levels used:    1
  3149 ;; Hardware stack levels required when called:    3
  3150 ;; This function calls:
  3151 ;;		_Write_RTC
  3152 ;;		_lcd_comand
  3153 ;;		_lcd_init
  3154 ;; This function is called by:
  3155 ;;		_main
  3156 ;; This function uses a non-reentrant model
  3157 ;;
  3158                           
  3159                           	psect	text16
  3160  001D3E                     __ptext16:
  3161                           	opt stack 0
  3162  001D3E                     _Setup:
  3163                           	opt stack 27
  3164                           
  3165                           ;main.c: 53: OSCTUNEbits.INTSRC=1;
  3166                           
  3167                           ;incstack = 0
  3168  001D3E  8E9B               	bsf	3995,7,c	;volatile
  3169                           
  3170                           ;main.c: 54: OSCTUNEbits.PLLEN=0;
  3171  001D40  9C9B               	bcf	3995,6,c	;volatile
  3172                           
  3173                           ;main.c: 55: OSCCONbits.IRCF0=1;
  3174  001D42  88D3               	bsf	4051,4,c	;volatile
  3175                           
  3176                           ;main.c: 56: OSCCONbits.IRCF1=1;
  3177  001D44  8AD3               	bsf	4051,5,c	;volatile
  3178                           
  3179                           ;main.c: 57: OSCCONbits.IRCF2=1;
  3180  001D46  8CD3               	bsf	4051,6,c	;volatile
  3181                           
  3182                           ;main.c: 58: OSCCONbits.SCS0=0;
  3183  001D48  90D3               	bcf	4051,0,c	;volatile
  3184                           
  3185                           ;main.c: 59: OSCCONbits.SCS1=0;
  3186  001D4A  92D3               	bcf	4051,1,c	;volatile
  3187                           
  3188                           ;main.c: 60: TRISA = 0b11110000;
  3189  001D4C  0EF0               	movlw	240
  3190  001D4E  6E92               	movwf	3986,c	;volatile
  3191                           
  3192                           ;main.c: 61: TRISB = 0;
  3193  001D50  0E00               	movlw	0
  3194  001D52  6E93               	movwf	3987,c	;volatile
  3195                           
  3196                           ;main.c: 62: TRISC = 0b00000111;
  3197  001D54  0E07               	movlw	7
  3198  001D56  6E94               	movwf	3988,c	;volatile
  3199                           
  3200                           ;main.c: 66: ANCON0=0b11111111;
  3201  001D58  010F               	movlb	15	; () banked
  3202  001D5A  6948               	setf	72,b	;volatile
  3203                           
  3204                           ; BSR set to: 15
  3205                           ;main.c: 68: ANCON1=0b11111111;
  3206  001D5C  010F               	movlb	15	; () banked
  3207  001D5E  6949               	setf	73,b	;volatile
  3208                           
  3209                           ;main.c: 69: ADCON0=0b00101101;
  3210  001D60  0E2D               	movlw	45
  3211  001D62  6EC2               	movwf	4034,c	;volatile
  3212                           
  3213                           ;main.c: 70: ADCON1=0b00010000;
  3214  001D64  0E10               	movlw	16
  3215  001D66  6EC1               	movwf	4033,c	;volatile
  3216                           
  3217                           ; BSR set to: 15
  3218                           ;main.c: 71: RTCCFGbits.RTCEN=1;
  3219  001D68  010F               	movlb	15	; () banked
  3220  001D6A  8F3F               	bsf	63,7,b	;volatile
  3221                           
  3222                           ; BSR set to: 15
  3223                           ;main.c: 72: RTCCFGbits.RTCWREN=1;
  3224  001D6C  010F               	movlb	15	; () banked
  3225  001D6E  8B3F               	bsf	63,5,b	;volatile
  3226                           
  3227                           ; BSR set to: 15
  3228                           ;main.c: 73: T1CONbits.T1OSCEN=1;
  3229  001D70  86CD               	bsf	4045,3,c	;volatile
  3230                           
  3231                           ; BSR set to: 15
  3232                           ;main.c: 74: Write_RTC();
  3233  001D72  EC66  F00A         	call	_Write_RTC	;wreg free
  3234                           
  3235                           ;main.c: 75: lcd_init();
  3236  001D76  EC7E  F00C         	call	_lcd_init	;wreg free
  3237                           
  3238                           ;main.c: 76: lcd_comand(0b00001100);
  3239  001D7A  0E0C               	movlw	12
  3240  001D7C  EC5B  F00F         	call	_lcd_comand
  3241                           
  3242                           ;main.c: 77: LATBbits.LATB1 = 1;;
  3243  001D80  828A               	bsf	3978,1,c	;volatile
  3244                           
  3245                           ;main.c: 78: LATBbits.LATB0 = 1;;
  3246  001D82  808A               	bsf	3978,0,c	;volatile
  3247  001D84  0012               	return		;funcret
  3248  001D86                     __end_of_Setup:
  3249                           	opt stack 0
  3250                           tblptru	equ	0xFF8
  3251                           tblptrh	equ	0xFF7
  3252                           tblptrl	equ	0xFF6
  3253                           tablat	equ	0xFF5
  3254                           prodh	equ	0xFF4
  3255                           prodl	equ	0xFF3
  3256                           indf0	equ	0xFEF
  3257                           postinc0	equ	0xFEE
  3258                           fsr0h	equ	0xFEA
  3259                           fsr0l	equ	0xFE9
  3260                           wreg	equ	0xFE8
  3261                           postdec1	equ	0xFE5
  3262                           fsr1l	equ	0xFE1
  3263                           indf2	equ	0xFDF
  3264                           postinc2	equ	0xFDE
  3265                           postdec2	equ	0xFDD
  3266                           fsr2h	equ	0xFDA
  3267                           fsr2l	equ	0xFD9
  3268                           status	equ	0xFD8
  3269                           
  3270 ;; *************** function _lcd_init *****************
  3271 ;; Defined at:
  3272 ;;		line 119 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3273 ;; Parameters:    Size  Location     Type
  3274 ;;		None
  3275 ;; Auto vars:     Size  Location     Type
  3276 ;;  i               1    4[COMRAM] unsigned char 
  3277 ;; Return value:  Size  Location     Type
  3278 ;;		None               void
  3279 ;; Registers used:
  3280 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3281 ;; Tracked objects:
  3282 ;;		On entry : 0/0
  3283 ;;		On exit  : 0/0
  3284 ;;		Unchanged: 0/0
  3285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3287 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3289 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3290 ;;Total ram usage:        1 bytes
  3291 ;; Hardware stack levels used:    1
  3292 ;; Hardware stack levels required when called:    2
  3293 ;; This function calls:
  3294 ;;		_Delay1KTCYx
  3295 ;;		_lcd_send_byte
  3296 ;;		_lcd_send_nibble
  3297 ;; This function is called by:
  3298 ;;		_Setup
  3299 ;; This function uses a non-reentrant model
  3300 ;;
  3301                           
  3302                           	psect	text17
  3303  0018FC                     __ptext17:
  3304                           	opt stack 0
  3305  0018FC                     _lcd_init:
  3306                           	opt stack 27
  3307                           
  3308                           ;unmc_lcd_216.c: 120: int8 i;
  3309                           ;unmc_lcd_216.c: 122: TRISBbits.TRISB3=0;
  3310                           
  3311                           ;incstack = 0
  3312  0018FC  9693               	bcf	3987,3,c	;volatile
  3313                           
  3314                           ;unmc_lcd_216.c: 123: TRISBbits.TRISB2=0;
  3315  0018FE  9493               	bcf	3987,2,c	;volatile
  3316                           
  3317                           ;unmc_lcd_216.c: 128: LATBbits.LATB3=0;
  3318  001900  968A               	bcf	3978,3,c	;volatile
  3319                           
  3320                           ;unmc_lcd_216.c: 129: LATBbits.LATB2=0;
  3321  001902  948A               	bcf	3978,2,c	;volatile
  3322                           
  3323                           ;unmc_lcd_216.c: 134: TRISBbits.TRISB4=0;
  3324  001904  9893               	bcf	3987,4,c	;volatile
  3325                           
  3326                           ;unmc_lcd_216.c: 135: TRISBbits.TRISB5=0;
  3327  001906  9A93               	bcf	3987,5,c	;volatile
  3328                           
  3329                           ;unmc_lcd_216.c: 136: TRISBbits.TRISB6=0;
  3330  001908  9C93               	bcf	3987,6,c	;volatile
  3331                           
  3332                           ;unmc_lcd_216.c: 137: TRISBbits.TRISB7=0;
  3333  00190A  9E93               	bcf	3987,7,c	;volatile
  3334                           
  3335                           ;unmc_lcd_216.c: 139: Delay1KTCYx(8000000UL/800000UL);
  3336  00190C  0E0A               	movlw	10
  3337  00190E  EC40  F00F         	call	_Delay1KTCYx
  3338                           
  3339                           ;unmc_lcd_216.c: 140: Delay1KTCYx(8000000UL/800000UL);
  3340  001912  0E0A               	movlw	10
  3341  001914  EC40  F00F         	call	_Delay1KTCYx
  3342                           
  3343                           ;unmc_lcd_216.c: 141: Delay1KTCYx(8000000UL/800000UL);
  3344  001918  0E0A               	movlw	10
  3345  00191A  EC40  F00F         	call	_Delay1KTCYx
  3346                           
  3347                           ;unmc_lcd_216.c: 143: for(i=0 ;i < 3; i++){
  3348  00191E  0E00               	movlw	0
  3349  001920  6E05               	movwf	lcd_init@i,c
  3350  001922                     l2701:
  3351  001922  0E02               	movlw	2
  3352  001924  6405               	cpfsgt	lcd_init@i,c
  3353  001926  D001               	goto	l2705
  3354  001928  D008               	goto	l2711
  3355  00192A                     l2705:
  3356                           
  3357                           ;unmc_lcd_216.c: 144: lcd_send_nibble(0x03);
  3358  00192A  0E03               	movlw	3
  3359  00192C  EC3B  F00D         	call	_lcd_send_nibble
  3360                           
  3361                           ;unmc_lcd_216.c: 145: Delay1KTCYx(8000000UL/800000UL);
  3362  001930  0E0A               	movlw	10
  3363  001932  EC40  F00F         	call	_Delay1KTCYx
  3364  001936  2A05               	incf	lcd_init@i,f,c
  3365  001938  D7F4               	goto	l2701
  3366  00193A                     l2711:
  3367                           
  3368                           ;unmc_lcd_216.c: 146: }
  3369                           ;unmc_lcd_216.c: 148: lcd_send_nibble(0x02);
  3370  00193A  0E02               	movlw	2
  3371  00193C  EC3B  F00D         	call	_lcd_send_nibble
  3372                           
  3373                           ;unmc_lcd_216.c: 150: for(i=0; i < sizeof(LCD_INIT_STRING); i++){
  3374  001940  0E00               	movlw	0
  3375  001942  6E05               	movwf	lcd_init@i,c
  3376  001944  0E03               	movlw	3
  3377  001946  6405               	cpfsgt	lcd_init@i,c
  3378  001948  D002               	goto	l2719
  3379  00194A  0012               	return	
  3380  00194C  0012               	return	
  3381  00194E                     l2719:
  3382                           
  3383                           ;unmc_lcd_216.c: 151: lcd_send_byte(0, LCD_INIT_STRING[i]);
  3384  00194E  5005               	movf	lcd_init@i,w,c
  3385  001950  0D01               	mullw	1
  3386  001952  0E0B               	movlw	low _LCD_INIT_STRING
  3387  001954  24F3               	addwf	prodl,w,c
  3388  001956  6EF6               	movwf	tblptrl,c
  3389  001958  0E0F               	movlw	high _LCD_INIT_STRING
  3390  00195A  20F4               	addwfc	prodh,w,c
  3391  00195C  6EF7               	movwf	tblptrh,c
  3392  00195E                     	if	0	;There are less than 3 active tblptr bytes
  3393  00195E                     	endif
  3394  00195E  0008               	tblrd		*
  3395  001960  CFF5 F003          	movff	tablat,lcd_send_byte@n
  3396  001964  0E00               	movlw	0
  3397  001966  ECE5  F00E         	call	_lcd_send_byte
  3398                           
  3399                           ;unmc_lcd_216.c: 153: Delay1KTCYx(8000000UL/800000UL);
  3400  00196A  0E0A               	movlw	10
  3401  00196C  EC40  F00F         	call	_Delay1KTCYx
  3402  001970  2A05               	incf	lcd_init@i,f,c
  3403  001972  0E03               	movlw	3
  3404  001974  6405               	cpfsgt	lcd_init@i,c
  3405  001976  D7EB               	goto	l2719
  3406  001978  0012               	return	
  3407  00197A  0012               	return		;funcret
  3408  00197C                     __end_of_lcd_init:
  3409                           	opt stack 0
  3410                           tblptru	equ	0xFF8
  3411                           tblptrh	equ	0xFF7
  3412                           tblptrl	equ	0xFF6
  3413                           tablat	equ	0xFF5
  3414                           prodh	equ	0xFF4
  3415                           prodl	equ	0xFF3
  3416                           indf0	equ	0xFEF
  3417                           postinc0	equ	0xFEE
  3418                           fsr0h	equ	0xFEA
  3419                           fsr0l	equ	0xFE9
  3420                           wreg	equ	0xFE8
  3421                           postdec1	equ	0xFE5
  3422                           fsr1l	equ	0xFE1
  3423                           indf2	equ	0xFDF
  3424                           postinc2	equ	0xFDE
  3425                           postdec2	equ	0xFDD
  3426                           fsr2h	equ	0xFDA
  3427                           fsr2l	equ	0xFD9
  3428                           status	equ	0xFD8
  3429                           
  3430 ;; *************** function _Delay1KTCYx *****************
  3431 ;; Defined at:
  3432 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\d1ktcyx.c"
  3433 ;; Parameters:    Size  Location     Type
  3434 ;;  unit            1    wreg     unsigned char 
  3435 ;; Auto vars:     Size  Location     Type
  3436 ;;  unit            1    0[COMRAM] unsigned char 
  3437 ;; Return value:  Size  Location     Type
  3438 ;;		None               void
  3439 ;; Registers used:
  3440 ;;		wreg
  3441 ;; Tracked objects:
  3442 ;;		On entry : 0/0
  3443 ;;		On exit  : 0/0
  3444 ;;		Unchanged: 0/0
  3445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3447 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3449 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3450 ;;Total ram usage:        1 bytes
  3451 ;; Hardware stack levels used:    1
  3452 ;; This function calls:
  3453 ;;		Nothing
  3454 ;; This function is called by:
  3455 ;;		_lcd_init
  3456 ;;		_DelayPORXLCD
  3457 ;; This function uses a non-reentrant model
  3458 ;;
  3459                           
  3460                           	psect	text18
  3461  001E80                     __ptext18:
  3462                           	opt stack 0
  3463  001E80                     _Delay1KTCYx:
  3464                           	opt stack 28
  3465                           
  3466                           ;incstack = 0
  3467                           ;Delay1KTCYx@unit stored from wreg
  3468  001E80  6E01               	movwf	Delay1KTCYx@unit,c
  3469  001E82  0EFA               	movlw	250
  3470  001E84                     u2397:
  3471  001E84  F000               	nop	
  3472  001E86  2EE8               	decfsz	wreg,f,c
  3473  001E88  D7FD               	goto	u2397
  3474  001E8A  2E01               	decfsz	Delay1KTCYx@unit,f,c
  3475  001E8C  D7FA               	goto	l1701
  3476  001E8E  0012               	return	
  3477  001E90  0012               	return		;funcret
  3478  001E92                     __end_of_Delay1KTCYx:
  3479                           	opt stack 0
  3480                           tblptru	equ	0xFF8
  3481                           tblptrh	equ	0xFF7
  3482                           tblptrl	equ	0xFF6
  3483                           tablat	equ	0xFF5
  3484                           prodh	equ	0xFF4
  3485                           prodl	equ	0xFF3
  3486                           indf0	equ	0xFEF
  3487                           postinc0	equ	0xFEE
  3488                           fsr0h	equ	0xFEA
  3489                           fsr0l	equ	0xFE9
  3490                           wreg	equ	0xFE8
  3491                           postdec1	equ	0xFE5
  3492                           fsr1l	equ	0xFE1
  3493                           indf2	equ	0xFDF
  3494                           postinc2	equ	0xFDE
  3495                           postdec2	equ	0xFDD
  3496                           fsr2h	equ	0xFDA
  3497                           fsr2l	equ	0xFD9
  3498                           status	equ	0xFD8
  3499                           
  3500 ;; *************** function _lcd_comand *****************
  3501 ;; Defined at:
  3502 ;;		line 189 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3503 ;; Parameters:    Size  Location     Type
  3504 ;;  d               1    wreg     unsigned char 
  3505 ;; Auto vars:     Size  Location     Type
  3506 ;;  d               1    4[COMRAM] unsigned char 
  3507 ;; Return value:  Size  Location     Type
  3508 ;;		None               void
  3509 ;; Registers used:
  3510 ;;		wreg, status,2, status,0, cstack
  3511 ;; Tracked objects:
  3512 ;;		On entry : 0/0
  3513 ;;		On exit  : 0/0
  3514 ;;		Unchanged: 0/0
  3515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3517 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3519 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3520 ;;Total ram usage:        1 bytes
  3521 ;; Hardware stack levels used:    1
  3522 ;; Hardware stack levels required when called:    2
  3523 ;; This function calls:
  3524 ;;		_lcd_send_byte
  3525 ;; This function is called by:
  3526 ;;		_caratula
  3527 ;;		_Setup
  3528 ;;		_clear
  3529 ;; This function uses a non-reentrant model
  3530 ;;
  3531                           
  3532                           	psect	text19
  3533  001EB6                     __ptext19:
  3534                           	opt stack 0
  3535  001EB6                     _lcd_comand:
  3536                           	opt stack 26
  3537                           
  3538                           ;incstack = 0
  3539                           ;lcd_comand@d stored from wreg
  3540  001EB6  6E05               	movwf	lcd_comand@d,c
  3541                           
  3542                           ;unmc_lcd_216.c: 190: lcd_send_byte(0,d);
  3543  001EB8  C005  F003         	movff	lcd_comand@d,lcd_send_byte@n
  3544  001EBC  0E00               	movlw	0
  3545  001EBE  ECE5  F00E         	call	_lcd_send_byte
  3546  001EC2  0012               	return		;funcret
  3547  001EC4                     __end_of_lcd_comand:
  3548                           	opt stack 0
  3549                           tblptru	equ	0xFF8
  3550                           tblptrh	equ	0xFF7
  3551                           tblptrl	equ	0xFF6
  3552                           tablat	equ	0xFF5
  3553                           prodh	equ	0xFF4
  3554                           prodl	equ	0xFF3
  3555                           indf0	equ	0xFEF
  3556                           postinc0	equ	0xFEE
  3557                           fsr0h	equ	0xFEA
  3558                           fsr0l	equ	0xFE9
  3559                           wreg	equ	0xFE8
  3560                           postdec1	equ	0xFE5
  3561                           fsr1l	equ	0xFE1
  3562                           indf2	equ	0xFDF
  3563                           postinc2	equ	0xFDE
  3564                           postdec2	equ	0xFDD
  3565                           fsr2h	equ	0xFDA
  3566                           fsr2l	equ	0xFD9
  3567                           status	equ	0xFD8
  3568                           
  3569 ;; *************** function _lcd_send_byte *****************
  3570 ;; Defined at:
  3571 ;;		line 86 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3572 ;; Parameters:    Size  Location     Type
  3573 ;;  address         1    wreg     unsigned char 
  3574 ;;  n               1    2[COMRAM] unsigned char 
  3575 ;; Auto vars:     Size  Location     Type
  3576 ;;  address         1    3[COMRAM] unsigned char 
  3577 ;; Return value:  Size  Location     Type
  3578 ;;		None               void
  3579 ;; Registers used:
  3580 ;;		wreg, status,2, status,0, cstack
  3581 ;; Tracked objects:
  3582 ;;		On entry : 0/0
  3583 ;;		On exit  : 0/0
  3584 ;;		Unchanged: 0/0
  3585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3586 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3587 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3589 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3590 ;;Total ram usage:        2 bytes
  3591 ;; Hardware stack levels used:    1
  3592 ;; Hardware stack levels required when called:    1
  3593 ;; This function calls:
  3594 ;;		_Delay100TCYx
  3595 ;;		_lcd_send_nibble
  3596 ;; This function is called by:
  3597 ;;		_lcd_init
  3598 ;;		_lcd_gotoxy
  3599 ;;		_lcd_putc
  3600 ;;		_lcd_comand
  3601 ;;		_lcd_setcursor_vb
  3602 ;; This function uses a non-reentrant model
  3603 ;;
  3604                           
  3605                           	psect	text20
  3606  001DCA                     __ptext20:
  3607                           	opt stack 0
  3608  001DCA                     _lcd_send_byte:
  3609                           	opt stack 25
  3610                           
  3611                           ;incstack = 0
  3612                           ;lcd_send_byte@address stored from wreg
  3613  001DCA  6E04               	movwf	lcd_send_byte@address,c
  3614                           
  3615                           ;unmc_lcd_216.c: 88: LATBbits.LATB3=0;
  3616  001DCC  968A               	bcf	3978,3,c	;volatile
  3617                           
  3618                           ;unmc_lcd_216.c: 93: Delay100TCYx(8000000UL/4000000UL);
  3619  001DCE  0E02               	movlw	2
  3620  001DD0  EC49  F00F         	call	_Delay100TCYx
  3621                           
  3622                           ;unmc_lcd_216.c: 96: TRISBbits.TRISB4=0;
  3623  001DD4  9893               	bcf	3987,4,c	;volatile
  3624                           
  3625                           ;unmc_lcd_216.c: 97: TRISBbits.TRISB5=0;
  3626  001DD6  9A93               	bcf	3987,5,c	;volatile
  3627                           
  3628                           ;unmc_lcd_216.c: 98: TRISBbits.TRISB6=0;
  3629  001DD8  9C93               	bcf	3987,6,c	;volatile
  3630                           
  3631                           ;unmc_lcd_216.c: 99: TRISBbits.TRISB7=0;
  3632  001DDA  9E93               	bcf	3987,7,c	;volatile
  3633                           
  3634                           ;unmc_lcd_216.c: 101: if(address)
  3635  001DDC  5004               	movf	lcd_send_byte@address,w,c
  3636  001DDE  B4D8               	btfsc	status,2,c
  3637  001DE0  D002               	goto	l75
  3638                           
  3639                           ;unmc_lcd_216.c: 102: LATBbits.LATB3=1;
  3640  001DE2  868A               	bsf	3978,3,c	;volatile
  3641  001DE4  D001               	goto	l76
  3642  001DE6                     l75:
  3643                           
  3644                           ;unmc_lcd_216.c: 103: else
  3645                           ;unmc_lcd_216.c: 104: LATBbits.LATB3=0;
  3646  001DE6  968A               	bcf	3978,3,c	;volatile
  3647  001DE8                     l76:
  3648                           
  3649                           ;unmc_lcd_216.c: 106: __nop();
  3650  001DE8  F000               	nop	
  3651                           
  3652                           ;unmc_lcd_216.c: 113: lcd_send_nibble(n >> 4);
  3653  001DEA  3803               	swapf	lcd_send_byte@n,w,c
  3654  001DEC  0B0F               	andlw	15
  3655  001DEE  EC3B  F00D         	call	_lcd_send_nibble
  3656                           
  3657                           ;unmc_lcd_216.c: 114: lcd_send_nibble(n & 0xf);
  3658  001DF2  5003               	movf	lcd_send_byte@n,w,c
  3659  001DF4  0B0F               	andlw	15
  3660  001DF6  EC3B  F00D         	call	_lcd_send_nibble
  3661  001DFA  0012               	return		;funcret
  3662  001DFC                     __end_of_lcd_send_byte:
  3663                           	opt stack 0
  3664                           tblptru	equ	0xFF8
  3665                           tblptrh	equ	0xFF7
  3666                           tblptrl	equ	0xFF6
  3667                           tablat	equ	0xFF5
  3668                           prodh	equ	0xFF4
  3669                           prodl	equ	0xFF3
  3670                           indf0	equ	0xFEF
  3671                           postinc0	equ	0xFEE
  3672                           fsr0h	equ	0xFEA
  3673                           fsr0l	equ	0xFE9
  3674                           wreg	equ	0xFE8
  3675                           postdec1	equ	0xFE5
  3676                           fsr1l	equ	0xFE1
  3677                           indf2	equ	0xFDF
  3678                           postinc2	equ	0xFDE
  3679                           postdec2	equ	0xFDD
  3680                           fsr2h	equ	0xFDA
  3681                           fsr2l	equ	0xFD9
  3682                           status	equ	0xFD8
  3683                           
  3684 ;; *************** function _lcd_send_nibble *****************
  3685 ;; Defined at:
  3686 ;;		line 25 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3687 ;; Parameters:    Size  Location     Type
  3688 ;;  nibble          1    wreg     unsigned char 
  3689 ;; Auto vars:     Size  Location     Type
  3690 ;;  nibble          1    1[COMRAM] unsigned char 
  3691 ;; Return value:  Size  Location     Type
  3692 ;;		None               void
  3693 ;; Registers used:
  3694 ;;		wreg, status,2, status,0
  3695 ;; Tracked objects:
  3696 ;;		On entry : 0/0
  3697 ;;		On exit  : 0/0
  3698 ;;		Unchanged: 0/0
  3699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3701 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3702 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3703 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3704 ;;Total ram usage:        2 bytes
  3705 ;; Hardware stack levels used:    1
  3706 ;; This function calls:
  3707 ;;		Nothing
  3708 ;; This function is called by:
  3709 ;;		_lcd_send_byte
  3710 ;;		_lcd_init
  3711 ;; This function uses a non-reentrant model
  3712 ;;
  3713                           
  3714                           	psect	text21
  3715  001A76                     __ptext21:
  3716                           	opt stack 0
  3717  001A76                     _lcd_send_nibble:
  3718                           	opt stack 25
  3719                           
  3720                           ;incstack = 0
  3721                           ;lcd_send_nibble@nibble stored from wreg
  3722  001A76  6E02               	movwf	lcd_send_nibble@nibble,c
  3723                           
  3724                           ;unmc_lcd_216.c: 27: LATBbits.LATB4=!!(nibble & 0x01);
  3725  001A78  A002               	btfss	lcd_send_nibble@nibble,0,c
  3726  001A7A  D003               	goto	u1180
  3727  001A7C  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3728  001A7E  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  3729  001A80  D001               	goto	u1198
  3730  001A82                     u1180:
  3731  001A82  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3732  001A84                     u1198:
  3733  001A84  3A01               	swapf	??_lcd_send_nibble,f,c
  3734  001A86  508A               	movf	3978,w,c	;volatile
  3735  001A88  1801               	xorwf	??_lcd_send_nibble,w,c
  3736  001A8A  0BEF               	andlw	-17
  3737  001A8C  1801               	xorwf	??_lcd_send_nibble,w,c
  3738  001A8E  6E8A               	movwf	3978,c	;volatile
  3739                           
  3740                           ;unmc_lcd_216.c: 28: LATBbits.LATB5=!!(nibble & 0x02);
  3741  001A90  A202               	btfss	lcd_send_nibble@nibble,1,c
  3742  001A92  D003               	goto	u1200
  3743  001A94  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3744  001A96  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  3745  001A98  D001               	goto	u1218
  3746  001A9A                     u1200:
  3747  001A9A  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3748  001A9C                     u1218:
  3749  001A9C  3A01               	swapf	??_lcd_send_nibble,f,c
  3750  001A9E  4601               	rlncf	??_lcd_send_nibble,f,c
  3751  001AA0  508A               	movf	3978,w,c	;volatile
  3752  001AA2  1801               	xorwf	??_lcd_send_nibble,w,c
  3753  001AA4  0BDF               	andlw	-33
  3754  001AA6  1801               	xorwf	??_lcd_send_nibble,w,c
  3755  001AA8  6E8A               	movwf	3978,c	;volatile
  3756                           
  3757                           ;unmc_lcd_216.c: 29: LATBbits.LATB6=!!(nibble & 0x04);
  3758  001AAA  A402               	btfss	lcd_send_nibble@nibble,2,c
  3759  001AAC  D003               	goto	u1220
  3760  001AAE  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3761  001AB0  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  3762  001AB2  D001               	goto	u1238
  3763  001AB4                     u1220:
  3764  001AB4  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3765  001AB6                     u1238:
  3766  001AB6  3A01               	swapf	??_lcd_send_nibble,f,c
  3767  001AB8  4601               	rlncf	??_lcd_send_nibble,f,c
  3768  001ABA  4601               	rlncf	??_lcd_send_nibble,f,c
  3769  001ABC  508A               	movf	3978,w,c	;volatile
  3770  001ABE  1801               	xorwf	??_lcd_send_nibble,w,c
  3771  001AC0  0BBF               	andlw	-65
  3772  001AC2  1801               	xorwf	??_lcd_send_nibble,w,c
  3773  001AC4  6E8A               	movwf	3978,c	;volatile
  3774                           
  3775                           ;unmc_lcd_216.c: 30: LATBbits.LATB7=!!(nibble & 0x08);
  3776  001AC6  A602               	btfss	lcd_send_nibble@nibble,3,c
  3777  001AC8  D003               	goto	u1240
  3778  001ACA  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3779  001ACC  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  3780  001ACE  D001               	goto	u1258
  3781  001AD0                     u1240:
  3782  001AD0  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3783  001AD2                     u1258:
  3784  001AD2  3201               	rrcf	??_lcd_send_nibble,f,c
  3785  001AD4  3201               	rrcf	??_lcd_send_nibble,f,c
  3786  001AD6  508A               	movf	3978,w,c	;volatile
  3787  001AD8  1801               	xorwf	??_lcd_send_nibble,w,c
  3788  001ADA  0B7F               	andlw	-129
  3789  001ADC  1801               	xorwf	??_lcd_send_nibble,w,c
  3790  001ADE  6E8A               	movwf	3978,c	;volatile
  3791                           
  3792                           ;unmc_lcd_216.c: 32: __nop();
  3793  001AE0  F000               	nop	
  3794                           
  3795                           ;unmc_lcd_216.c: 33: LATBbits.LATB2=1;
  3796  001AE2  848A               	bsf	3978,2,c	;volatile
  3797                           
  3798                           ;unmc_lcd_216.c: 34: __nop();__nop();
  3799  001AE4  F000               	nop	
  3800  001AE6  F000               	nop	
  3801                           
  3802                           ;unmc_lcd_216.c: 35: LATBbits.LATB2=0;
  3803  001AE8  948A               	bcf	3978,2,c	;volatile
  3804  001AEA  0012               	return		;funcret
  3805  001AEC                     __end_of_lcd_send_nibble:
  3806                           	opt stack 0
  3807                           tblptru	equ	0xFF8
  3808                           tblptrh	equ	0xFF7
  3809                           tblptrl	equ	0xFF6
  3810                           tablat	equ	0xFF5
  3811                           prodh	equ	0xFF4
  3812                           prodl	equ	0xFF3
  3813                           indf0	equ	0xFEF
  3814                           postinc0	equ	0xFEE
  3815                           fsr0h	equ	0xFEA
  3816                           fsr0l	equ	0xFE9
  3817                           wreg	equ	0xFE8
  3818                           postdec1	equ	0xFE5
  3819                           fsr1l	equ	0xFE1
  3820                           indf2	equ	0xFDF
  3821                           postinc2	equ	0xFDE
  3822                           postdec2	equ	0xFDD
  3823                           fsr2h	equ	0xFDA
  3824                           fsr2l	equ	0xFD9
  3825                           status	equ	0xFD8
  3826                           
  3827 ;; *************** function _Delay100TCYx *****************
  3828 ;; Defined at:
  3829 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\d100tcyx.c"
  3830 ;; Parameters:    Size  Location     Type
  3831 ;;  unit            1    wreg     unsigned char 
  3832 ;; Auto vars:     Size  Location     Type
  3833 ;;  unit            1    0[COMRAM] unsigned char 
  3834 ;; Return value:  Size  Location     Type
  3835 ;;		None               void
  3836 ;; Registers used:
  3837 ;;		wreg
  3838 ;; Tracked objects:
  3839 ;;		On entry : 0/0
  3840 ;;		On exit  : 0/0
  3841 ;;		Unchanged: 0/0
  3842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3844 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3846 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3847 ;;Total ram usage:        1 bytes
  3848 ;; Hardware stack levels used:    1
  3849 ;; This function calls:
  3850 ;;		Nothing
  3851 ;; This function is called by:
  3852 ;;		_lcd_send_byte
  3853 ;; This function uses a non-reentrant model
  3854 ;;
  3855                           
  3856                           	psect	text22
  3857  001E92                     __ptext22:
  3858                           	opt stack 0
  3859  001E92                     _Delay100TCYx:
  3860                           	opt stack 25
  3861                           
  3862                           ;incstack = 0
  3863                           ;Delay100TCYx@unit stored from wreg
  3864  001E92  6E01               	movwf	Delay100TCYx@unit,c
  3865  001E94  0E21               	movlw	33
  3866  001E96                     u2407:
  3867  001E96  2EE8               	decfsz	wreg,f,c
  3868  001E98  D7FE               	goto	u2407
  3869  001E9A  F000               	nop	
  3870  001E9C  2E01               	decfsz	Delay100TCYx@unit,f,c
  3871  001E9E  D7FA               	goto	l2161
  3872  001EA0  0012               	return	
  3873  001EA2  0012               	return		;funcret
  3874  001EA4                     __end_of_Delay100TCYx:
  3875                           	opt stack 0
  3876                           tblptru	equ	0xFF8
  3877                           tblptrh	equ	0xFF7
  3878                           tblptrl	equ	0xFF6
  3879                           tablat	equ	0xFF5
  3880                           prodh	equ	0xFF4
  3881                           prodl	equ	0xFF3
  3882                           indf0	equ	0xFEF
  3883                           postinc0	equ	0xFEE
  3884                           fsr0h	equ	0xFEA
  3885                           fsr0l	equ	0xFE9
  3886                           wreg	equ	0xFE8
  3887                           postdec1	equ	0xFE5
  3888                           fsr1l	equ	0xFE1
  3889                           indf2	equ	0xFDF
  3890                           postinc2	equ	0xFDE
  3891                           postdec2	equ	0xFDD
  3892                           fsr2h	equ	0xFDA
  3893                           fsr2l	equ	0xFD9
  3894                           status	equ	0xFD8
  3895                           
  3896 ;; *************** function _Write_RTC *****************
  3897 ;; Defined at:
  3898 ;;		line 22 in file "../../Program Files/Unimic/unmc_01/sources/unmc_rtcc_01.c"
  3899 ;; Parameters:    Size  Location     Type
  3900 ;;		None
  3901 ;; Auto vars:     Size  Location     Type
  3902 ;;		None
  3903 ;; Return value:  Size  Location     Type
  3904 ;;                  2   26[None  ] int 
  3905 ;; Registers used:
  3906 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3907 ;; Tracked objects:
  3908 ;;		On entry : 0/0
  3909 ;;		On exit  : 0/0
  3910 ;;		Unchanged: 0/0
  3911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3915 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3916 ;;Total ram usage:        0 bytes
  3917 ;; Hardware stack levels used:    1
  3918 ;; Hardware stack levels required when called:    2
  3919 ;; This function calls:
  3920 ;;		_RtccWrOn
  3921 ;;		_RtccWriteDate
  3922 ;;		_RtccWriteTime
  3923 ;;		___awdiv
  3924 ;; This function is called by:
  3925 ;;		_Setup
  3926 ;;		_setClock
  3927 ;; This function uses a non-reentrant model
  3928 ;;
  3929                           
  3930                           	psect	text23
  3931  0014CC                     __ptext23:
  3932                           	opt stack 0
  3933  0014CC                     _Write_RTC:
  3934                           	opt stack 27
  3935                           
  3936                           ;unmc_rtcc_01.c: 24: RtccWrOn();
  3937                           
  3938                           ;incstack = 0
  3939  0014CC  EC52  F00F         	call	_RtccWrOn	;wreg free
  3940                           
  3941                           ;unmc_rtcc_01.c: 26: PIE3bits.RTCCIE=1;
  3942  0014D0  80A3               	bsf	4003,0,c	;volatile
  3943                           
  3944                           ;unmc_rtcc_01.c: 27: segundo_d=segundo/10;
  3945  0014D2  C038  F001         	movff	_segundo,___awdiv@dividend
  3946  0014D6  C039  F002         	movff	_segundo+1,___awdiv@dividend+1
  3947  0014DA  0E00               	movlw	0
  3948  0014DC  6E04               	movwf	___awdiv@divisor+1,c
  3949  0014DE  0E0A               	movlw	10
  3950  0014E0  6E03               	movwf	___awdiv@divisor,c
  3951  0014E2  EC33  F00C         	call	___awdiv	;wreg free
  3952  0014E6  5001               	movf	?___awdiv,w,c
  3953  0014E8  6E4E               	movwf	_segundo_d,c
  3954                           
  3955                           ;unmc_rtcc_01.c: 28: segundo_u=segundo-segundo_d*10;
  3956  0014EA  504E               	movf	_segundo_d,w,c
  3957  0014EC  0D0A               	mullw	10
  3958  0014EE  50F3               	movf	prodl,w,c
  3959  0014F0  0800               	sublw	0
  3960  0014F2  2438               	addwf	_segundo,w,c
  3961  0014F4  6E4F               	movwf	_segundo_u,c
  3962                           
  3963                           ;unmc_rtcc_01.c: 29: RtccTime.f.sec =segundo_d*16+segundo_u;
  3964  0014F6  504E               	movf	_segundo_d,w,c
  3965  0014F8  0D10               	mullw	16
  3966  0014FA  50F3               	movf	prodl,w,c
  3967  0014FC  244F               	addwf	_segundo_u,w,c
  3968  0014FE  6E40               	movwf	_RtccTime+1,c
  3969                           
  3970                           ;unmc_rtcc_01.c: 30: minuto_d=minuto/10;
  3971  001500  C05A  F001         	movff	_minuto,___awdiv@dividend
  3972  001504  C05B  F002         	movff	_minuto+1,___awdiv@dividend+1
  3973  001508  0E00               	movlw	0
  3974  00150A  6E04               	movwf	___awdiv@divisor+1,c
  3975  00150C  0E0A               	movlw	10
  3976  00150E  6E03               	movwf	___awdiv@divisor,c
  3977  001510  EC33  F00C         	call	___awdiv	;wreg free
  3978  001514  5001               	movf	?___awdiv,w,c
  3979  001516  6E4C               	movwf	_minuto_d,c
  3980                           
  3981                           ;unmc_rtcc_01.c: 31: minuto_u=minuto-minuto_d*10;
  3982  001518  504C               	movf	_minuto_d,w,c
  3983  00151A  0D0A               	mullw	10
  3984  00151C  50F3               	movf	prodl,w,c
  3985  00151E  0800               	sublw	0
  3986  001520  245A               	addwf	_minuto,w,c
  3987  001522  6E4D               	movwf	_minuto_u,c
  3988                           
  3989                           ;unmc_rtcc_01.c: 32: RtccTime.f.min =minuto_d*16+minuto_u;
  3990  001524  504C               	movf	_minuto_d,w,c
  3991  001526  0D10               	mullw	16
  3992  001528  50F3               	movf	prodl,w,c
  3993  00152A  244D               	addwf	_minuto_u,w,c
  3994  00152C  6E41               	movwf	_RtccTime+2,c
  3995                           
  3996                           ;unmc_rtcc_01.c: 33: hora_d=hora/10;
  3997  00152E  C056  F001         	movff	_hora,___awdiv@dividend
  3998  001532  C057  F002         	movff	_hora+1,___awdiv@dividend+1
  3999  001536  0E00               	movlw	0
  4000  001538  6E04               	movwf	___awdiv@divisor+1,c
  4001  00153A  0E0A               	movlw	10
  4002  00153C  6E03               	movwf	___awdiv@divisor,c
  4003  00153E  EC33  F00C         	call	___awdiv	;wreg free
  4004  001542  5001               	movf	?___awdiv,w,c
  4005  001544  6E48               	movwf	_hora_d,c
  4006                           
  4007                           ;unmc_rtcc_01.c: 34: hora_u=hora-hora_d*10;
  4008  001546  5048               	movf	_hora_d,w,c
  4009  001548  0D0A               	mullw	10
  4010  00154A  50F3               	movf	prodl,w,c
  4011  00154C  0800               	sublw	0
  4012  00154E  2456               	addwf	_hora,w,c
  4013  001550  6E49               	movwf	_hora_u,c
  4014                           
  4015                           ;unmc_rtcc_01.c: 35: RtccTime.f.hour=hora_d*16+hora_u;
  4016  001552  5048               	movf	_hora_d,w,c
  4017  001554  0D10               	mullw	16
  4018  001556  50F3               	movf	prodl,w,c
  4019  001558  2449               	addwf	_hora_u,w,c
  4020  00155A  6E42               	movwf	_RtccTime+3,c
  4021                           
  4022                           ;unmc_rtcc_01.c: 36: anio_d=anio/10;
  4023  00155C  C050  F001         	movff	_anio,___awdiv@dividend
  4024  001560  C051  F002         	movff	_anio+1,___awdiv@dividend+1
  4025  001564  0E00               	movlw	0
  4026  001566  6E04               	movwf	___awdiv@divisor+1,c
  4027  001568  0E0A               	movlw	10
  4028  00156A  6E03               	movwf	___awdiv@divisor,c
  4029  00156C  EC33  F00C         	call	___awdiv	;wreg free
  4030  001570  5001               	movf	?___awdiv,w,c
  4031  001572  6E43               	movwf	_anio_d,c
  4032                           
  4033                           ;unmc_rtcc_01.c: 37: anio_u=anio-anio_d*10;
  4034  001574  5043               	movf	_anio_d,w,c
  4035  001576  0D0A               	mullw	10
  4036  001578  50F3               	movf	prodl,w,c
  4037  00157A  0800               	sublw	0
  4038  00157C  2450               	addwf	_anio,w,c
  4039  00157E  6E44               	movwf	_anio_u,c
  4040                           
  4041                           ;unmc_rtcc_01.c: 38: RtccDate.f.year=anio_d*16+anio_u;
  4042  001580  5043               	movf	_anio_d,w,c
  4043  001582  0D10               	mullw	16
  4044  001584  50F3               	movf	prodl,w,c
  4045  001586  2444               	addwf	_anio_u,w,c
  4046  001588  6E3E               	movwf	_RtccDate+3,c
  4047                           
  4048                           ;unmc_rtcc_01.c: 39: mes_d=mes/10;
  4049  00158A  C058  F001         	movff	_mes,___awdiv@dividend
  4050  00158E  C059  F002         	movff	_mes+1,___awdiv@dividend+1
  4051  001592  0E00               	movlw	0
  4052  001594  6E04               	movwf	___awdiv@divisor+1,c
  4053  001596  0E0A               	movlw	10
  4054  001598  6E03               	movwf	___awdiv@divisor,c
  4055  00159A  EC33  F00C         	call	___awdiv	;wreg free
  4056  00159E  5001               	movf	?___awdiv,w,c
  4057  0015A0  6E4A               	movwf	_mes_d,c
  4058                           
  4059                           ;unmc_rtcc_01.c: 40: mes_u=mes-mes_d*10;
  4060  0015A2  504A               	movf	_mes_d,w,c
  4061  0015A4  0D0A               	mullw	10
  4062  0015A6  50F3               	movf	prodl,w,c
  4063  0015A8  0800               	sublw	0
  4064  0015AA  2458               	addwf	_mes,w,c
  4065  0015AC  6E4B               	movwf	_mes_u,c
  4066                           
  4067                           ;unmc_rtcc_01.c: 41: RtccDate.f.mon=mes_d*16+mes_u;
  4068  0015AE  504A               	movf	_mes_d,w,c
  4069  0015B0  0D10               	mullw	16
  4070  0015B2  50F3               	movf	prodl,w,c
  4071  0015B4  244B               	addwf	_mes_u,w,c
  4072  0015B6  6E3D               	movwf	_RtccDate+2,c
  4073                           
  4074                           ;unmc_rtcc_01.c: 42: fecha_d=dia/10;
  4075  0015B8  C052  F001         	movff	_dia,___awdiv@dividend
  4076  0015BC  C053  F002         	movff	_dia+1,___awdiv@dividend+1
  4077  0015C0  0E00               	movlw	0
  4078  0015C2  6E04               	movwf	___awdiv@divisor+1,c
  4079  0015C4  0E0A               	movlw	10
  4080  0015C6  6E03               	movwf	___awdiv@divisor,c
  4081  0015C8  EC33  F00C         	call	___awdiv	;wreg free
  4082  0015CC  5001               	movf	?___awdiv,w,c
  4083  0015CE  6E46               	movwf	_fecha_d,c
  4084                           
  4085                           ;unmc_rtcc_01.c: 43: fecha_u=dia-fecha_d*10;
  4086  0015D0  5046               	movf	_fecha_d,w,c
  4087  0015D2  0D0A               	mullw	10
  4088  0015D4  50F3               	movf	prodl,w,c
  4089  0015D6  0800               	sublw	0
  4090  0015D8  2452               	addwf	_dia,w,c
  4091  0015DA  6E47               	movwf	_fecha_u,c
  4092                           
  4093                           ;unmc_rtcc_01.c: 44: RtccDate.f.mday=fecha_d*16+fecha_u;
  4094  0015DC  5046               	movf	_fecha_d,w,c
  4095  0015DE  0D10               	mullw	16
  4096  0015E0  50F3               	movf	prodl,w,c
  4097  0015E2  2447               	addwf	_fecha_u,w,c
  4098  0015E4  6E3C               	movwf	_RtccDate+1,c
  4099                           
  4100                           ;unmc_rtcc_01.c: 45: dia_semana=diasem;
  4101  0015E6  C054  F045         	movff	_diasem,_dia_semana
  4102                           
  4103                           ;unmc_rtcc_01.c: 46: RtccDate.f.wday =diasem;
  4104  0015EA  C054  F03B         	movff	_diasem,_RtccDate
  4105                           
  4106                           ;unmc_rtcc_01.c: 47: RtccWriteTime(&RtccTime,1);
  4107  0015EE  0E3F               	movlw	low _RtccTime
  4108  0015F0  6E01               	movwf	RtccWriteTime@pTm,c
  4109  0015F2  0E00               	movlw	high _RtccTime
  4110  0015F4  6E02               	movwf	RtccWriteTime@pTm+1,c
  4111  0015F6  0E01               	movlw	1
  4112  0015F8  6E03               	movwf	RtccWriteTime@di,c
  4113  0015FA  ECAD  F00B         	call	_RtccWriteTime	;wreg free
  4114                           
  4115                           ;unmc_rtcc_01.c: 48: RtccWriteDate(&RtccDate,1);
  4116  0015FE  0E3B               	movlw	low _RtccDate
  4117  001600  6E01               	movwf	RtccWriteDate@pDt,c
  4118  001602  0E00               	movlw	high _RtccDate
  4119  001604  6E02               	movwf	RtccWriteDate@pDt+1,c
  4120  001606  0E01               	movlw	1
  4121  001608  6E03               	movwf	RtccWriteDate@di,c
  4122  00160A  EC0A  F00B         	call	_RtccWriteDate	;wreg free
  4123                           
  4124                           ;unmc_rtcc_01.c: 49: (RTCCFGbits.RTCEN=1);
  4125  00160E  010F               	movlb	15	; () banked
  4126  001610  8F3F               	bsf	63,7,b	;volatile
  4127                           
  4128                           ; BSR set to: 15
  4129  001612  0012               	return		;funcret
  4130  001614                     __end_of_Write_RTC:
  4131                           	opt stack 0
  4132                           tblptru	equ	0xFF8
  4133                           tblptrh	equ	0xFF7
  4134                           tblptrl	equ	0xFF6
  4135                           tablat	equ	0xFF5
  4136                           prodh	equ	0xFF4
  4137                           prodl	equ	0xFF3
  4138                           indf0	equ	0xFEF
  4139                           postinc0	equ	0xFEE
  4140                           fsr0h	equ	0xFEA
  4141                           fsr0l	equ	0xFE9
  4142                           wreg	equ	0xFE8
  4143                           postdec1	equ	0xFE5
  4144                           fsr1l	equ	0xFE1
  4145                           indf2	equ	0xFDF
  4146                           postinc2	equ	0xFDE
  4147                           postdec2	equ	0xFDD
  4148                           fsr2h	equ	0xFDA
  4149                           fsr2l	equ	0xFD9
  4150                           status	equ	0xFD8
  4151                           
  4152 ;; *************** function ___awdiv *****************
  4153 ;; Defined at:
  4154 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\awdiv.c"
  4155 ;; Parameters:    Size  Location     Type
  4156 ;;  dividend        2    0[COMRAM] int 
  4157 ;;  divisor         2    2[COMRAM] int 
  4158 ;; Auto vars:     Size  Location     Type
  4159 ;;  quotient        2    6[COMRAM] int 
  4160 ;;  sign            1    5[COMRAM] unsigned char 
  4161 ;;  counter         1    4[COMRAM] unsigned char 
  4162 ;; Return value:  Size  Location     Type
  4163 ;;                  2    0[COMRAM] int 
  4164 ;; Registers used:
  4165 ;;		wreg, status,2, status,0
  4166 ;; Tracked objects:
  4167 ;;		On entry : 0/0
  4168 ;;		On exit  : 0/0
  4169 ;;		Unchanged: 0/0
  4170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4171 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4172 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4174 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4175 ;;Total ram usage:        8 bytes
  4176 ;; Hardware stack levels used:    1
  4177 ;; This function calls:
  4178 ;;		Nothing
  4179 ;; This function is called by:
  4180 ;;		_Write_RTC
  4181 ;;		__delay_s
  4182 ;; This function uses a non-reentrant model
  4183 ;;
  4184                           
  4185                           	psect	text24
  4186  001866                     __ptext24:
  4187                           	opt stack 0
  4188  001866                     ___awdiv:
  4189                           	opt stack 27
  4190                           
  4191                           ; BSR set to: 15
  4192                           ;incstack = 0
  4193  001866  0E00               	movlw	0
  4194  001868  6E06               	movwf	___awdiv@sign,c
  4195  00186A  AE04               	btfss	___awdiv@divisor+1,7,c
  4196  00186C  D007               	goto	l2369
  4197  00186E  6C03               	negf	___awdiv@divisor,c
  4198  001870  1E04               	comf	___awdiv@divisor+1,f,c
  4199  001872  B0D8               	btfsc	status,0,c
  4200  001874  2A04               	incf	___awdiv@divisor+1,f,c
  4201  001876  0E01               	movlw	1
  4202  001878  6E06               	movwf	___awdiv@sign,c
  4203  00187A  D000               	goto	l2369
  4204  00187C                     l2369:
  4205  00187C  AE02               	btfss	___awdiv@dividend+1,7,c
  4206  00187E  D007               	goto	l2375
  4207  001880  6C01               	negf	___awdiv@dividend,c
  4208  001882  1E02               	comf	___awdiv@dividend+1,f,c
  4209  001884  B0D8               	btfsc	status,0,c
  4210  001886  2A02               	incf	___awdiv@dividend+1,f,c
  4211  001888  0E01               	movlw	1
  4212  00188A  1A06               	xorwf	___awdiv@sign,f,c
  4213  00188C  D000               	goto	l2375
  4214  00188E                     l2375:
  4215  00188E  0E00               	movlw	0
  4216  001890  6E08               	movwf	___awdiv@quotient+1,c
  4217  001892  0E00               	movlw	0
  4218  001894  6E07               	movwf	___awdiv@quotient,c
  4219  001896  5003               	movf	___awdiv@divisor,w,c
  4220  001898  1004               	iorwf	___awdiv@divisor+1,w,c
  4221  00189A  B4D8               	btfsc	status,2,c
  4222  00189C  D021               	goto	l2397
  4223  00189E  0E01               	movlw	1
  4224  0018A0  6E05               	movwf	___awdiv@counter,c
  4225  0018A2  D005               	goto	l2383
  4226  0018A4                     l2381:
  4227  0018A4  90D8               	bcf	status,0,c
  4228  0018A6  3603               	rlcf	___awdiv@divisor,f,c
  4229  0018A8  3604               	rlcf	___awdiv@divisor+1,f,c
  4230  0018AA  2A05               	incf	___awdiv@counter,f,c
  4231  0018AC  D000               	goto	l2383
  4232  0018AE                     l2383:
  4233  0018AE  BE04               	btfsc	___awdiv@divisor+1,7,c
  4234  0018B0  D002               	goto	l2385
  4235  0018B2  D7F8               	goto	l2381
  4236  0018B4  D000               	goto	l2385
  4237  0018B6                     l2385:
  4238  0018B6  90D8               	bcf	status,0,c
  4239  0018B8  3607               	rlcf	___awdiv@quotient,f,c
  4240  0018BA  3608               	rlcf	___awdiv@quotient+1,f,c
  4241  0018BC  5003               	movf	___awdiv@divisor,w,c
  4242  0018BE  5C01               	subwf	___awdiv@dividend,w,c
  4243  0018C0  5004               	movf	___awdiv@divisor+1,w,c
  4244  0018C2  5802               	subwfb	___awdiv@dividend+1,w,c
  4245  0018C4  A0D8               	btfss	status,0,c
  4246  0018C6  D006               	goto	l2393
  4247  0018C8  5003               	movf	___awdiv@divisor,w,c
  4248  0018CA  5E01               	subwf	___awdiv@dividend,f,c
  4249  0018CC  5004               	movf	___awdiv@divisor+1,w,c
  4250  0018CE  5A02               	subwfb	___awdiv@dividend+1,f,c
  4251  0018D0  8007               	bsf	___awdiv@quotient,0,c
  4252  0018D2  D000               	goto	l2393
  4253  0018D4                     l2393:
  4254  0018D4  90D8               	bcf	status,0,c
  4255  0018D6  3204               	rrcf	___awdiv@divisor+1,f,c
  4256  0018D8  3203               	rrcf	___awdiv@divisor,f,c
  4257  0018DA  2E05               	decfsz	___awdiv@counter,f,c
  4258  0018DC  D7EC               	goto	l2385
  4259  0018DE  D000               	goto	l2397
  4260  0018E0                     l2397:
  4261  0018E0  5006               	movf	___awdiv@sign,w,c
  4262  0018E2  B4D8               	btfsc	status,2,c
  4263  0018E4  D005               	goto	l2401
  4264  0018E6  6C07               	negf	___awdiv@quotient,c
  4265  0018E8  1E08               	comf	___awdiv@quotient+1,f,c
  4266  0018EA  B0D8               	btfsc	status,0,c
  4267  0018EC  2A08               	incf	___awdiv@quotient+1,f,c
  4268  0018EE  D000               	goto	l2401
  4269  0018F0                     l2401:
  4270  0018F0  C007  F001         	movff	___awdiv@quotient,?___awdiv
  4271  0018F4  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  4272  0018F8  0012               	return	
  4273  0018FA  0012               	return		;funcret
  4274  0018FC                     __end_of___awdiv:
  4275                           	opt stack 0
  4276                           tblptru	equ	0xFF8
  4277                           tblptrh	equ	0xFF7
  4278                           tblptrl	equ	0xFF6
  4279                           tablat	equ	0xFF5
  4280                           prodh	equ	0xFF4
  4281                           prodl	equ	0xFF3
  4282                           indf0	equ	0xFEF
  4283                           postinc0	equ	0xFEE
  4284                           fsr0h	equ	0xFEA
  4285                           fsr0l	equ	0xFE9
  4286                           wreg	equ	0xFE8
  4287                           postdec1	equ	0xFE5
  4288                           fsr1l	equ	0xFE1
  4289                           indf2	equ	0xFDF
  4290                           postinc2	equ	0xFDE
  4291                           postdec2	equ	0xFDD
  4292                           fsr2h	equ	0xFDA
  4293                           fsr2l	equ	0xFD9
  4294                           status	equ	0xFD8
  4295                           
  4296 ;; *************** function _RtccWriteTime *****************
  4297 ;; Defined at:
  4298 ;;		line 34 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteTime.c"
  4299 ;; Parameters:    Size  Location     Type
  4300 ;;  pTm             2    0[COMRAM] PTR const struct .
  4301 ;;		 -> RtccTime(4), 
  4302 ;;  di              1    2[COMRAM] enum E7121
  4303 ;; Auto vars:     Size  Location     Type
  4304 ;;  tempHourWDay    2    9[COMRAM] struct .
  4305 ;;  tempMinSec      2    7[COMRAM] struct .
  4306 ;;  wasWrEn         1    6[COMRAM] enum E7121
  4307 ;;  wasAlrm         1    5[COMRAM] enum E7121
  4308 ;;  wasOn           1    4[COMRAM] enum E7121
  4309 ;; Return value:  Size  Location     Type
  4310 ;;                  1    wreg      enum E7121
  4311 ;; Registers used:
  4312 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4313 ;; Tracked objects:
  4314 ;;		On entry : 0/0
  4315 ;;		On exit  : 0/0
  4316 ;;		Unchanged: 0/0
  4317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4318 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4319 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4320 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4321 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4322 ;;Total ram usage:       11 bytes
  4323 ;; Hardware stack levels used:    1
  4324 ;; Hardware stack levels required when called:    1
  4325 ;; This function calls:
  4326 ;;		_RtccWrOn
  4327 ;; This function is called by:
  4328 ;;		_Write_RTC
  4329 ;; This function uses a non-reentrant model
  4330 ;;
  4331                           
  4332                           	psect	text25
  4333  00175A                     __ptext25:
  4334                           	opt stack 0
  4335  00175A                     _RtccWriteTime:
  4336                           	opt stack 27
  4337                           
  4338                           ;incstack = 0
  4339  00175A  0E00               	movlw	0
  4340  00175C  6E06               	movwf	RtccWriteTime@wasAlrm,c
  4341  00175E  EE20 F002          	lfsr	2,2
  4342  001762  5001               	movf	RtccWriteTime@pTm,w,c
  4343  001764  26D9               	addwf	fsr2l,f,c
  4344  001766  5002               	movf	RtccWriteTime@pTm+1,w,c
  4345  001768  22DA               	addwfc	fsr2h,f,c
  4346  00176A  0E5A               	movlw	90
  4347  00176C  60DF               	cpfslt	indf2,c
  4348  00176E  0012               	return	
  4349  001770  EE20 F001          	lfsr	2,1
  4350  001774  5001               	movf	RtccWriteTime@pTm,w,c
  4351  001776  26D9               	addwf	fsr2l,f,c
  4352  001778  5002               	movf	RtccWriteTime@pTm+1,w,c
  4353  00177A  22DA               	addwfc	fsr2h,f,c
  4354  00177C  0E5A               	movlw	90
  4355  00177E  60DF               	cpfslt	indf2,c
  4356  001780  0012               	return	
  4357  001782  EE20 F003          	lfsr	2,3
  4358  001786  5001               	movf	RtccWriteTime@pTm,w,c
  4359  001788  26D9               	addwf	fsr2l,f,c
  4360  00178A  5002               	movf	RtccWriteTime@pTm+1,w,c
  4361  00178C  22DA               	addwfc	fsr2h,f,c
  4362  00178E  0E24               	movlw	36
  4363  001790  64DF               	cpfsgt	indf2,c
  4364  001792  D002               	goto	l2507
  4365  001794  0012               	return	
  4366                           
  4367                           ;	Return value of _RtccWriteTime is never used
  4368  001796  0012               	return	
  4369  001798                     l2507:
  4370  001798  EE20 F002          	lfsr	2,2
  4371  00179C  5001               	movf	RtccWriteTime@pTm,w,c
  4372  00179E  26D9               	addwf	fsr2l,f,c
  4373  0017A0  5002               	movf	RtccWriteTime@pTm+1,w,c
  4374  0017A2  22DA               	addwfc	fsr2h,f,c
  4375  0017A4  50DF               	movf	indf2,w,c
  4376  0017A6  6E09               	movwf	RtccWriteTime@tempMinSec+1,c
  4377  0017A8  EE20 F001          	lfsr	2,1
  4378  0017AC  5001               	movf	RtccWriteTime@pTm,w,c
  4379  0017AE  26D9               	addwf	fsr2l,f,c
  4380  0017B0  5002               	movf	RtccWriteTime@pTm+1,w,c
  4381  0017B2  22DA               	addwfc	fsr2h,f,c
  4382  0017B4  50DF               	movf	indf2,w,c
  4383  0017B6  6E08               	movwf	RtccWriteTime@tempMinSec,c
  4384  0017B8  5003               	movf	RtccWriteTime@di,w,c
  4385  0017BA  B4D8               	btfsc	status,2,c
  4386  0017BC  D002               	goto	l2513
  4387  0017BE  9CF2               	bcf	intcon,6,c	;volatile
  4388  0017C0  D000               	goto	l2513
  4389  0017C2                     l2513:
  4390  0017C2  0E00               	movlw	0
  4391  0017C4  BB3F               	btfsc	63,5,b	;volatile
  4392  0017C6  0E01               	movlw	1
  4393  0017C8  6E07               	movwf	RtccWriteTime@wasWrEn,c
  4394  0017CA  5007               	movf	RtccWriteTime@wasWrEn,w,c
  4395  0017CC  A4D8               	btfss	status,2,c
  4396  0017CE  D003               	goto	l2517
  4397  0017D0  EC52  F00F         	call	_RtccWrOn	;wreg free
  4398  0017D4  D000               	goto	l2517
  4399  0017D6                     l2517:
  4400  0017D6  0E00               	movlw	0
  4401  0017D8  BF3F               	btfsc	63,7,b	;volatile
  4402  0017DA  0E01               	movlw	1
  4403  0017DC  6E05               	movwf	RtccWriteTime@wasOn,c
  4404  0017DE  5005               	movf	RtccWriteTime@wasOn,w,c
  4405  0017E0  B4D8               	btfsc	status,2,c
  4406  0017E2  D007               	goto	l2523
  4407  0017E4  0E00               	movlw	0
  4408  0017E6  BE91               	btfsc	3985,7,c	;volatile
  4409  0017E8  0E01               	movlw	1
  4410  0017EA  6E06               	movwf	RtccWriteTime@wasAlrm,c
  4411  0017EC  010F               	movlb	15	; () banked
  4412  0017EE  9F3F               	bcf	63,7,b	;volatile
  4413  0017F0  D000               	goto	l2523
  4414  0017F2                     l2523:
  4415  0017F2  0EFC               	movlw	252
  4416  0017F4  010F               	movlb	15	; () banked
  4417  0017F6  173F               	andwf	63,f,b	;volatile
  4418  0017F8  010F               	movlb	15	; () banked
  4419  0017FA  813F               	bsf	63,0,b	;volatile
  4420                           
  4421                           ; BSR set to: 15
  4422  0017FC  CF98 F00A          	movff	3992,RtccWriteTime@tempHourWDay	;volatile
  4423                           
  4424                           ; BSR set to: 15
  4425  001800  CF99 F00B          	movff	3993,RtccWriteTime@tempHourWDay+1	;volatile
  4426                           
  4427                           ; BSR set to: 15
  4428  001804  EE20 F003          	lfsr	2,3
  4429  001808  5001               	movf	RtccWriteTime@pTm,w,c
  4430  00180A  26D9               	addwf	fsr2l,f,c
  4431  00180C  5002               	movf	RtccWriteTime@pTm+1,w,c
  4432  00180E  22DA               	addwfc	fsr2h,f,c
  4433  001810  50DF               	movf	indf2,w,c
  4434  001812  6E0A               	movwf	RtccWriteTime@tempHourWDay,c
  4435                           
  4436                           ; BSR set to: 15
  4437  001814  0EFC               	movlw	252
  4438  001816  010F               	movlb	15	; () banked
  4439  001818  173F               	andwf	63,f,b	;volatile
  4440                           
  4441                           ; BSR set to: 15
  4442  00181A  010F               	movlb	15	; () banked
  4443  00181C  813F               	bsf	63,0,b	;volatile
  4444                           
  4445                           ; BSR set to: 15
  4446  00181E  C00A  FF98         	movff	RtccWriteTime@tempHourWDay,3992	;volatile
  4447                           
  4448                           ; BSR set to: 15
  4449  001822  C00B  FF99         	movff	RtccWriteTime@tempHourWDay+1,3993	;volatile
  4450                           
  4451                           ; BSR set to: 15
  4452  001826  C008  FF98         	movff	RtccWriteTime@tempMinSec,3992	;volatile
  4453                           
  4454                           ; BSR set to: 15
  4455  00182A  C009  FF99         	movff	RtccWriteTime@tempMinSec+1,3993	;volatile
  4456                           
  4457                           ; BSR set to: 15
  4458  00182E  5005               	movf	RtccWriteTime@wasOn,w,c
  4459  001830  B4D8               	btfsc	status,2,c
  4460  001832  D00D               	goto	l2555
  4461                           
  4462                           ; BSR set to: 15
  4463  001834  010F               	movlb	15	; () banked
  4464  001836  8F3F               	bsf	63,7,b	;volatile
  4465                           
  4466                           ; BSR set to: 15
  4467  001838  5006               	movf	RtccWriteTime@wasAlrm,w,c
  4468  00183A  B4D8               	btfsc	status,2,c
  4469  00183C  D002               	goto	l2551
  4470                           
  4471                           ; BSR set to: 15
  4472  00183E  8E91               	bsf	3985,7,c	;volatile
  4473  001840  D000               	goto	l2551
  4474  001842                     l2551:
  4475                           
  4476                           ; BSR set to: 15
  4477  001842  5007               	movf	RtccWriteTime@wasWrEn,w,c
  4478  001844  B4D8               	btfsc	status,2,c
  4479  001846  D009               	goto	l2559
  4480                           
  4481                           ; BSR set to: 15
  4482  001848  EC52  F00F         	call	_RtccWrOn	;wreg free
  4483  00184C  D006               	goto	l2559
  4484  00184E                     l2555:
  4485  00184E  5007               	movf	RtccWriteTime@wasWrEn,w,c
  4486  001850  A4D8               	btfss	status,2,c
  4487  001852  D003               	goto	l2559
  4488  001854  010F               	movlb	15	; () banked
  4489  001856  9B3F               	bcf	63,5,b	;volatile
  4490                           
  4491                           ; BSR set to: 15
  4492  001858  D000               	goto	l2559
  4493  00185A                     l2559:
  4494  00185A  5003               	movf	RtccWriteTime@di,w,c
  4495  00185C  B4D8               	btfsc	status,2,c
  4496  00185E  0012               	return	
  4497  001860  8CF2               	bsf	intcon,6,c	;volatile
  4498  001862  0012               	return	
  4499                           
  4500                           ;	Return value of _RtccWriteTime is never used
  4501  001864  0012               	return		;funcret
  4502  001866                     __end_of_RtccWriteTime:
  4503                           	opt stack 0
  4504                           tblptru	equ	0xFF8
  4505                           tblptrh	equ	0xFF7
  4506                           tblptrl	equ	0xFF6
  4507                           tablat	equ	0xFF5
  4508                           prodh	equ	0xFF4
  4509                           prodl	equ	0xFF3
  4510                           intcon	equ	0xFF2
  4511                           indf0	equ	0xFEF
  4512                           postinc0	equ	0xFEE
  4513                           fsr0h	equ	0xFEA
  4514                           fsr0l	equ	0xFE9
  4515                           wreg	equ	0xFE8
  4516                           postdec1	equ	0xFE5
  4517                           fsr1l	equ	0xFE1
  4518                           indf2	equ	0xFDF
  4519                           postinc2	equ	0xFDE
  4520                           postdec2	equ	0xFDD
  4521                           fsr2h	equ	0xFDA
  4522                           fsr2l	equ	0xFD9
  4523                           status	equ	0xFD8
  4524                           
  4525 ;; *************** function _RtccWriteDate *****************
  4526 ;; Defined at:
  4527 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteDate.c"
  4528 ;; Parameters:    Size  Location     Type
  4529 ;;  pDt             2    0[COMRAM] PTR const struct .
  4530 ;;		 -> RtccDate(4), 
  4531 ;;  di              1    2[COMRAM] enum E7121
  4532 ;; Auto vars:     Size  Location     Type
  4533 ;;  tempHourWDay    2   11[COMRAM] struct .
  4534 ;;  tempDayMonth    2    9[COMRAM] struct .
  4535 ;;  tempYear        2    6[COMRAM] struct .
  4536 ;;  wasWrEn         1    8[COMRAM] enum E7121
  4537 ;;  wasAlrm         1    5[COMRAM] enum E7121
  4538 ;;  wasOn           1    4[COMRAM] enum E7121
  4539 ;; Return value:  Size  Location     Type
  4540 ;;                  1    wreg      enum E7121
  4541 ;; Registers used:
  4542 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4543 ;; Tracked objects:
  4544 ;;		On entry : 0/0
  4545 ;;		On exit  : 0/0
  4546 ;;		Unchanged: 0/0
  4547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4548 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4549 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4550 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4551 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4552 ;;Total ram usage:       13 bytes
  4553 ;; Hardware stack levels used:    1
  4554 ;; Hardware stack levels required when called:    1
  4555 ;; This function calls:
  4556 ;;		_RtccWrOn
  4557 ;; This function is called by:
  4558 ;;		_Write_RTC
  4559 ;; This function uses a non-reentrant model
  4560 ;;
  4561                           
  4562                           	psect	text26
  4563  001614                     __ptext26:
  4564                           	opt stack 0
  4565  001614                     _RtccWriteDate:
  4566                           	opt stack 27
  4567                           
  4568                           ;incstack = 0
  4569  001614  0E00               	movlw	0
  4570  001616  6E06               	movwf	RtccWriteDate@wasAlrm,c
  4571  001618  EE20 F002          	lfsr	2,2
  4572  00161C  5001               	movf	RtccWriteDate@pDt,w,c
  4573  00161E  26D9               	addwf	fsr2l,f,c
  4574  001620  5002               	movf	RtccWriteDate@pDt+1,w,c
  4575  001622  22DA               	addwfc	fsr2h,f,c
  4576  001624  0E13               	movlw	19
  4577  001626  60DF               	cpfslt	indf2,c
  4578  001628  0012               	return	
  4579  00162A  EE20 F002          	lfsr	2,2
  4580  00162E  5001               	movf	RtccWriteDate@pDt,w,c
  4581  001630  26D9               	addwf	fsr2l,f,c
  4582  001632  5002               	movf	RtccWriteDate@pDt+1,w,c
  4583  001634  22DA               	addwfc	fsr2h,f,c
  4584  001636  50DF               	movf	indf2,w,c
  4585  001638  B4D8               	btfsc	status,2,c
  4586  00163A  0012               	return	
  4587  00163C  EE20 F001          	lfsr	2,1
  4588  001640  5001               	movf	RtccWriteDate@pDt,w,c
  4589  001642  26D9               	addwf	fsr2l,f,c
  4590  001644  5002               	movf	RtccWriteDate@pDt+1,w,c
  4591  001646  22DA               	addwfc	fsr2h,f,c
  4592  001648  0E32               	movlw	50
  4593  00164A  60DF               	cpfslt	indf2,c
  4594  00164C  0012               	return	
  4595  00164E  EE20 F001          	lfsr	2,1
  4596  001652  5001               	movf	RtccWriteDate@pDt,w,c
  4597  001654  26D9               	addwf	fsr2l,f,c
  4598  001656  5002               	movf	RtccWriteDate@pDt+1,w,c
  4599  001658  22DA               	addwfc	fsr2h,f,c
  4600  00165A  50DF               	movf	indf2,w,c
  4601  00165C  B4D8               	btfsc	status,2,c
  4602  00165E  0012               	return	
  4603  001660  EE20 F003          	lfsr	2,3
  4604  001664  5001               	movf	RtccWriteDate@pDt,w,c
  4605  001666  26D9               	addwf	fsr2l,f,c
  4606  001668  5002               	movf	RtccWriteDate@pDt+1,w,c
  4607  00166A  22DA               	addwfc	fsr2h,f,c
  4608  00166C  0E99               	movlw	153
  4609  00166E  64DF               	cpfsgt	indf2,c
  4610  001670  D002               	goto	l2575
  4611  001672  0012               	return	
  4612                           
  4613                           ;	Return value of _RtccWriteDate is never used
  4614  001674  0012               	return	
  4615  001676                     l2575:
  4616  001676  EE20 F003          	lfsr	2,3
  4617  00167A  5001               	movf	RtccWriteDate@pDt,w,c
  4618  00167C  26D9               	addwf	fsr2l,f,c
  4619  00167E  5002               	movf	RtccWriteDate@pDt+1,w,c
  4620  001680  22DA               	addwfc	fsr2h,f,c
  4621  001682  50DF               	movf	indf2,w,c
  4622  001684  6E07               	movwf	RtccWriteDate@tempYear,c
  4623  001686  EE20 F001          	lfsr	2,1
  4624  00168A  5001               	movf	RtccWriteDate@pDt,w,c
  4625  00168C  26D9               	addwf	fsr2l,f,c
  4626  00168E  5002               	movf	RtccWriteDate@pDt+1,w,c
  4627  001690  22DA               	addwfc	fsr2h,f,c
  4628  001692  50DF               	movf	indf2,w,c
  4629  001694  6E0A               	movwf	RtccWriteDate@tempDayMonth,c
  4630  001696  EE20 F002          	lfsr	2,2
  4631  00169A  5001               	movf	RtccWriteDate@pDt,w,c
  4632  00169C  26D9               	addwf	fsr2l,f,c
  4633  00169E  5002               	movf	RtccWriteDate@pDt+1,w,c
  4634  0016A0  22DA               	addwfc	fsr2h,f,c
  4635  0016A2  50DF               	movf	indf2,w,c
  4636  0016A4  6E0B               	movwf	RtccWriteDate@tempDayMonth+1,c
  4637  0016A6  5003               	movf	RtccWriteDate@di,w,c
  4638  0016A8  B4D8               	btfsc	status,2,c
  4639  0016AA  D002               	goto	l2581
  4640  0016AC  9CF2               	bcf	intcon,6,c	;volatile
  4641  0016AE  D000               	goto	l2581
  4642  0016B0                     l2581:
  4643  0016B0  0E00               	movlw	0
  4644  0016B2  BB3F               	btfsc	63,5,b	;volatile
  4645  0016B4  0E01               	movlw	1
  4646  0016B6  6E09               	movwf	RtccWriteDate@wasWrEn,c
  4647  0016B8  5009               	movf	RtccWriteDate@wasWrEn,w,c
  4648  0016BA  A4D8               	btfss	status,2,c
  4649  0016BC  D003               	goto	l2585
  4650  0016BE  EC52  F00F         	call	_RtccWrOn	;wreg free
  4651  0016C2  D000               	goto	l2585
  4652  0016C4                     l2585:
  4653  0016C4  0E00               	movlw	0
  4654  0016C6  BF3F               	btfsc	63,7,b	;volatile
  4655  0016C8  0E01               	movlw	1
  4656  0016CA  6E05               	movwf	RtccWriteDate@wasOn,c
  4657  0016CC  5005               	movf	RtccWriteDate@wasOn,w,c
  4658  0016CE  B4D8               	btfsc	status,2,c
  4659  0016D0  D007               	goto	l2591
  4660  0016D2  0E00               	movlw	0
  4661  0016D4  BE91               	btfsc	3985,7,c	;volatile
  4662  0016D6  0E01               	movlw	1
  4663  0016D8  6E06               	movwf	RtccWriteDate@wasAlrm,c
  4664  0016DA  010F               	movlb	15	; () banked
  4665  0016DC  9F3F               	bcf	63,7,b	;volatile
  4666  0016DE  D000               	goto	l2591
  4667  0016E0                     l2591:
  4668  0016E0  0EFC               	movlw	252
  4669  0016E2  010F               	movlb	15	; () banked
  4670  0016E4  173F               	andwf	63,f,b	;volatile
  4671  0016E6  010F               	movlb	15	; () banked
  4672  0016E8  813F               	bsf	63,0,b	;volatile
  4673                           
  4674                           ; BSR set to: 15
  4675  0016EA  CF98 F00C          	movff	3992,RtccWriteDate@tempHourWDay	;volatile
  4676                           
  4677                           ; BSR set to: 15
  4678  0016EE  CF99 F00D          	movff	3993,RtccWriteDate@tempHourWDay+1	;volatile
  4679                           
  4680                           ; BSR set to: 15
  4681  0016F2  C001  FFD9         	movff	RtccWriteDate@pDt,fsr2l
  4682  0016F6  C002  FFDA         	movff	RtccWriteDate@pDt+1,fsr2h
  4683  0016FA  50DF               	movf	indf2,w,c
  4684  0016FC  6E0D               	movwf	RtccWriteDate@tempHourWDay+1,c
  4685                           
  4686                           ; BSR set to: 15
  4687  0016FE  0EFC               	movlw	252
  4688  001700  010F               	movlb	15	; () banked
  4689  001702  173F               	andwf	63,f,b	;volatile
  4690                           
  4691                           ; BSR set to: 15
  4692  001704  0E03               	movlw	3
  4693  001706  010F               	movlb	15	; () banked
  4694  001708  133F               	iorwf	63,f,b	;volatile
  4695                           
  4696                           ; BSR set to: 15
  4697  00170A  C007  FF98         	movff	RtccWriteDate@tempYear,3992	;volatile
  4698                           
  4699                           ; BSR set to: 15
  4700  00170E  C008  FF99         	movff	RtccWriteDate@tempYear+1,3993	;volatile
  4701                           
  4702                           ; BSR set to: 15
  4703  001712  C00A  FF98         	movff	RtccWriteDate@tempDayMonth,3992	;volatile
  4704                           
  4705                           ; BSR set to: 15
  4706  001716  C00B  FF99         	movff	RtccWriteDate@tempDayMonth+1,3993	;volatile
  4707                           
  4708                           ; BSR set to: 15
  4709  00171A  C00C  FF98         	movff	RtccWriteDate@tempHourWDay,3992	;volatile
  4710                           
  4711                           ; BSR set to: 15
  4712  00171E  C00D  FF99         	movff	RtccWriteDate@tempHourWDay+1,3993	;volatile
  4713                           
  4714                           ; BSR set to: 15
  4715  001722  5005               	movf	RtccWriteDate@wasOn,w,c
  4716  001724  B4D8               	btfsc	status,2,c
  4717  001726  D00D               	goto	l2627
  4718                           
  4719                           ; BSR set to: 15
  4720  001728  010F               	movlb	15	; () banked
  4721  00172A  8F3F               	bsf	63,7,b	;volatile
  4722                           
  4723                           ; BSR set to: 15
  4724  00172C  5006               	movf	RtccWriteDate@wasAlrm,w,c
  4725  00172E  B4D8               	btfsc	status,2,c
  4726  001730  D002               	goto	l2623
  4727                           
  4728                           ; BSR set to: 15
  4729  001732  8E91               	bsf	3985,7,c	;volatile
  4730  001734  D000               	goto	l2623
  4731  001736                     l2623:
  4732                           
  4733                           ; BSR set to: 15
  4734  001736  5009               	movf	RtccWriteDate@wasWrEn,w,c
  4735  001738  B4D8               	btfsc	status,2,c
  4736  00173A  D009               	goto	l2631
  4737                           
  4738                           ; BSR set to: 15
  4739  00173C  EC52  F00F         	call	_RtccWrOn	;wreg free
  4740  001740  D006               	goto	l2631
  4741  001742                     l2627:
  4742  001742  5009               	movf	RtccWriteDate@wasWrEn,w,c
  4743  001744  A4D8               	btfss	status,2,c
  4744  001746  D003               	goto	l2631
  4745  001748  010F               	movlb	15	; () banked
  4746  00174A  9B3F               	bcf	63,5,b	;volatile
  4747                           
  4748                           ; BSR set to: 15
  4749  00174C  D000               	goto	l2631
  4750  00174E                     l2631:
  4751  00174E  5003               	movf	RtccWriteDate@di,w,c
  4752  001750  B4D8               	btfsc	status,2,c
  4753  001752  0012               	return	
  4754  001754  9CF2               	bcf	intcon,6,c	;volatile
  4755  001756  0012               	return	
  4756                           
  4757                           ;	Return value of _RtccWriteDate is never used
  4758  001758  0012               	return		;funcret
  4759  00175A                     __end_of_RtccWriteDate:
  4760                           	opt stack 0
  4761                           tblptru	equ	0xFF8
  4762                           tblptrh	equ	0xFF7
  4763                           tblptrl	equ	0xFF6
  4764                           tablat	equ	0xFF5
  4765                           prodh	equ	0xFF4
  4766                           prodl	equ	0xFF3
  4767                           intcon	equ	0xFF2
  4768                           indf0	equ	0xFEF
  4769                           postinc0	equ	0xFEE
  4770                           fsr0h	equ	0xFEA
  4771                           fsr0l	equ	0xFE9
  4772                           wreg	equ	0xFE8
  4773                           postdec1	equ	0xFE5
  4774                           fsr1l	equ	0xFE1
  4775                           indf2	equ	0xFDF
  4776                           postinc2	equ	0xFDE
  4777                           postdec2	equ	0xFDD
  4778                           fsr2h	equ	0xFDA
  4779                           fsr2l	equ	0xFD9
  4780                           status	equ	0xFD8
  4781                           
  4782 ;; *************** function _RtccWrOn *****************
  4783 ;; Defined at:
  4784 ;;		line 21 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWrOn.c"
  4785 ;; Parameters:    Size  Location     Type
  4786 ;;		None
  4787 ;; Auto vars:     Size  Location     Type
  4788 ;;  data            2    0        unsigned int 
  4789 ;; Return value:  Size  Location     Type
  4790 ;;		None               void
  4791 ;; Registers used:
  4792 ;;		wreg, status,2
  4793 ;; Tracked objects:
  4794 ;;		On entry : 0/0
  4795 ;;		On exit  : 0/0
  4796 ;;		Unchanged: 0/0
  4797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4801 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4802 ;;Total ram usage:        0 bytes
  4803 ;; Hardware stack levels used:    1
  4804 ;; This function calls:
  4805 ;;		Nothing
  4806 ;; This function is called by:
  4807 ;;		_Write_RTC
  4808 ;;		_RtccWriteDate
  4809 ;;		_RtccWriteTime
  4810 ;; This function uses a non-reentrant model
  4811 ;;
  4812                           
  4813                           	psect	text27
  4814  001EA4                     __ptext27:
  4815                           	opt stack 0
  4816  001EA4                     _RtccWrOn:
  4817                           	opt stack 27
  4818                           
  4819                           ;incstack = 0
  4820  001EA4  9CF2               	bcf	intcon,6,c	;volatile
  4821  001EA6  0E55               	movlw	85
  4822  001EA8  6EA7               	movwf	4007,c	;volatile
  4823  001EAA  0EAA               	movlw	170
  4824  001EAC  6EA7               	movwf	4007,c	;volatile
  4825  001EAE  010F               	movlb	15	; () banked
  4826  001EB0  8B3F               	bsf	63,5,b	;volatile
  4827                           
  4828                           ; BSR set to: 15
  4829  001EB2  8CF2               	bsf	intcon,6,c	;volatile
  4830                           
  4831                           ; BSR set to: 15
  4832  001EB4  0012               	return		;funcret
  4833  001EB6                     __end_of_RtccWrOn:
  4834                           	opt stack 0
  4835                           tblptru	equ	0xFF8
  4836                           tblptrh	equ	0xFF7
  4837                           tblptrl	equ	0xFF6
  4838                           tablat	equ	0xFF5
  4839                           prodh	equ	0xFF4
  4840                           prodl	equ	0xFF3
  4841                           intcon	equ	0xFF2
  4842                           indf0	equ	0xFEF
  4843                           postinc0	equ	0xFEE
  4844                           fsr0h	equ	0xFEA
  4845                           fsr0l	equ	0xFE9
  4846                           wreg	equ	0xFE8
  4847                           postdec1	equ	0xFE5
  4848                           fsr1l	equ	0xFE1
  4849                           indf2	equ	0xFDF
  4850                           postinc2	equ	0xFDE
  4851                           postdec2	equ	0xFDD
  4852                           fsr2h	equ	0xFDA
  4853                           fsr2l	equ	0xFD9
  4854                           status	equ	0xFD8
  4855                           tblptru	equ	0xFF8
  4856                           tblptrh	equ	0xFF7
  4857                           tblptrl	equ	0xFF6
  4858                           tablat	equ	0xFF5
  4859                           prodh	equ	0xFF4
  4860                           prodl	equ	0xFF3
  4861                           intcon	equ	0xFF2
  4862                           indf0	equ	0xFEF
  4863                           postinc0	equ	0xFEE
  4864                           fsr0h	equ	0xFEA
  4865                           fsr0l	equ	0xFE9
  4866                           wreg	equ	0xFE8
  4867                           postdec1	equ	0xFE5
  4868                           fsr1l	equ	0xFE1
  4869                           indf2	equ	0xFDF
  4870                           postinc2	equ	0xFDE
  4871                           postdec2	equ	0xFDD
  4872                           fsr2h	equ	0xFDA
  4873                           fsr2l	equ	0xFD9
  4874                           status	equ	0xFD8
  4875                           
  4876                           	psect	rparam
  4877  0000                     tblptru	equ	0xFF8
  4878                           tblptrh	equ	0xFF7
  4879                           tblptrl	equ	0xFF6
  4880                           tablat	equ	0xFF5
  4881                           prodh	equ	0xFF4
  4882                           prodl	equ	0xFF3
  4883                           intcon	equ	0xFF2
  4884                           indf0	equ	0xFEF
  4885                           postinc0	equ	0xFEE
  4886                           fsr0h	equ	0xFEA
  4887                           fsr0l	equ	0xFE9
  4888                           wreg	equ	0xFE8
  4889                           postdec1	equ	0xFE5
  4890                           fsr1l	equ	0xFE1
  4891                           indf2	equ	0xFDF
  4892                           postinc2	equ	0xFDE
  4893                           postdec2	equ	0xFDD
  4894                           fsr2h	equ	0xFDA
  4895                           fsr2l	equ	0xFD9
  4896                           status	equ	0xFD8


Data Sizes:
    Strings     122
    Constant    14
    Data        13
    BSS         71
    Persistent  13
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     39      93
    BANK0           160      0      44
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    RtccWriteTime@pTm	PTR const struct . size(2) Largest target is 4
		 -> RtccTime(COMRAM[4]), 

    RtccWriteDate@pDt	PTR const struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_21(CODE[10]), STR_20(CODE[15]), STR_17(CODE[5]), STR_14(CODE[5]), 
		 -> STR_13(CODE[5]), STR_12(CODE[5]), STR_10(CODE[5]), STR_9(CODE[5]), 
		 -> STR_8(CODE[5]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> buffer2(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    lcd_putrs@ptr	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_26(CODE[8]), STR_25(CODE[4]), STR_24(CODE[3]), STR_23(CODE[11]), 
		 -> STR_22(CODE[11]), STR_19(CODE[2]), STR_18(CODE[2]), STR_16(CODE[2]), 
		 -> STR_15(CODE[2]), STR_11(CODE[2]), STR_7(CODE[2]), buffer2(BANK0[20]), 
		 -> STR_3(CODE[10]), STR_2(CODE[13]), STR_1(CODE[33]), 


Critical Paths under _main in COMRAM

    _set_vision->_twinkle
    _write_Date->_sprintf
    _twinkle->_read_keyboard
    _read_keyboard->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcd_putrs->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    __delay_s->___awdiv
    _clear->_lcd_comand
    _caratula->_lcd_comand
    _lcd_init->_lcd_send_byte
    _lcd_comand->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _Write_RTC->_RtccWriteDate

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   43166
                                             37 COMRAM     2     2      0
                              _Setup
                           _caratula
                         _lcd_gotoxy
                          _lcd_putrs
                      _read_keyboard
                         _set_vision
 ---------------------------------------------------------------------------------
 (1) _set_vision                                           0     0      0   26847
                              _clear
                         _lcd_gotoxy
                          _lcd_putrs
                            _twinkle
                         _write_Date
 ---------------------------------------------------------------------------------
 (2) _write_Date                                           0     0      0    8111
                         _lcd_gotoxy
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _twinkle                                              1     1      0   13175
                                             36 COMRAM     1     1      0
                           __delay_s
                         _lcd_gotoxy
                          _lcd_putrs
                      _read_keyboard
 ---------------------------------------------------------------------------------
 (3) _read_keyboard                                        1     1      0    6842
                                             35 COMRAM     1     1      0
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             32    22     10    3196
                                             12 COMRAM    23    13     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     287
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcd_putrs                                            2     0      2    3646
                                              8 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (4) _lcd_putc                                             1     1      0    1937
                                              7 COMRAM     1     1      0
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (5) _lcd_gotoxy                                           3     2      1    1269
                                              4 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (3) __delay_s                                             7     5      2    1394
                                              8 COMRAM     7     5      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _clear                                                1     1      0     646
                                              5 COMRAM     1     1      0
                         _lcd_comand
 ---------------------------------------------------------------------------------
 (1) _caratula                                             0     0      0     646
                         _lcd_comand
 ---------------------------------------------------------------------------------
 (1) _Setup                                                0     0      0    3892
                          _Write_RTC
                         _lcd_comand
                           _lcd_init
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             1     1      0     841
                                              4 COMRAM     1     1      0
                        _Delay1KTCYx
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _lcd_comand                                           1     1      0     646
                                              4 COMRAM     1     1      0
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (5) _lcd_send_byte                                        2     1      1     624
                                              2 COMRAM     2     1      1
                       _Delay100TCYx
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (6) _lcd_send_nibble                                      2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _Delay100TCYx                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Write_RTC                                            0     0      0    2405
                           _RtccWrOn
                      _RtccWriteDate
                      _RtccWriteTime
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1196
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _RtccWriteTime                                       11     8      3     537
                                              0 COMRAM    11     8      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (3) _RtccWriteDate                                       13    10      3     672
                                              0 COMRAM    13    10      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (4) _RtccWrOn                                             2     2      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Setup
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_init
       _Delay1KTCYx
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
       _lcd_send_nibble
   _caratula
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
   _lcd_gotoxy
     _lcd_send_byte
       _Delay100TCYx
       _lcd_send_nibble
   _lcd_putrs
     _lcd_putc
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
   _read_keyboard
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _set_vision
     _clear
       _lcd_comand
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _twinkle
       __delay_s
         ___awdiv
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _read_keyboard
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _write_Date
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      2C       5       27.5%
BITCOMRAM           5F      0       1       0        1.1%
COMRAM              5F     27      5D       1       97.9%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      89       6        0.0%
DATA                 0      0      89       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sun Sep 04 19:34:37 2016

                        _a 002C                          _b 002E                          _c 0030  
                        _i 0032                          _j 0034                          _k 0036  
              _state_alarm 005C                         l75 1DE6                         l76 1DE8  
           ?_lcd_send_byte 0003               ___awdiv@sign 0006        ___wmul@multiplicand 0003  
              lcd_comand@d 0005               __CFG_CP0$OFF 000000                        l201 0FC6  
                      l210 102A                        l202 0FC2                        l221 10B8  
                      l213 1048                        l205 0FFA                        l230 1102  
                      l222 10B4                        l214 1044                        l206 0FF6  
                      l241 11AA                        l233 1142                        l225 10EC  
                      l217 1084                        l209 102E                        l250 11E2  
                      l242 11A6                        l234 113E                        l226 10E8  
                      l218 1080                        l253 121A                        l245 11C4  
                      l237 1176                        l229 1106                        l262 124A  
                      l254 1216                        l246 11C0                        l238 1172  
                      l257 1234                        l249 11E6                        l258 1230  
                      l622 143A                        l567 1BE8                        _dia 0052  
                      _key 003A                        _mes 0058                        wreg 000FE8  
              lcd_gotoxy@x 0006                lcd_gotoxy@y 0005                       l2201 1D1A  
                     l2205 1D26                       l2231 1B60                       l2215 1E60  
                     l2311 1380                       l2303 1342                       l2401 18F0  
                     l2161 1E94                       l2233 1B6A                       l2305 1364  
                     l1266 1B9C                       l2243 1B90                       l2235 1B72  
                     l2251 1CB4                       l2323 13B4                       l2315 138C  
                     l1276 1CE8                       l1701 1E82                       l2253 1CBE  
                     l2341 1418                       l2333 13EE                       l2255 1CC6  
                     l2327 13D8                       l2319 13B0                       l2513 17C2  
                     l2265 1C54                       l2353 1494                       l2329 13E2  
                     l2281 129A                       l2273 1272                       l2523 17F2  
                     l2507 1798                       l2187 1E30                       l2195 1CF6  
                     l2259 1CDC                       l2347 1440                       l2339 1410  
                     l2291 12D8                       l2355 14A0                       l2517 17D6  
                     l2381 18A4                       l2701 1922                       l2189 1E36  
                     l2197 1D02                       l2269 1C7E                       l2357 14BC  
                     l2285 12A4                       l2631 174E                       l2623 1736  
                     l2551 1842                       l2383 18AE                       l2375 188E  
                     l2711 193A                       l2199 1D0E                       l2287 12BA  
                     l2279 128C                       l2393 18D4                       l2385 18B6  
                     l2369 187C                       l2705 192A                       l2641 1BD4  
                     l2627 1742                       l2555 184E                       l2299 133C  
                     l2581 16B0                       l2397 18E0                       l2493 1252  
                     l2591 16E0                       l2575 1676                       l2559 185A  
                     l2719 194E                       l2743 1AF0                       l2807 1A04  
                     l2585 16C4                       l2755 1B3C                       l2791 1C12  
                     l2793 1C20                       l2795 1C2E                       l2799 1C40  
                     STR_1 0F0F                       STR_2 0F3F                       STR_3 0F61  
                     STR_4 0F73                       STR_5 0F73                       STR_6 0F73  
                     STR_7 0F83                       STR_8 0F73                       STR_9 0F73  
                     u1200 1A9A                       u1220 1AB4                       u1240 1AD0  
                     u1218 1A9C                       u1180 1A82                       u1238 1AB6  
                     u1360 1C74                       u1258 1AD2                       u1370 1C9E  
                     u1198 1A84                       u2407 1E96                       u1367 1C6A  
                     u1377 1C94                       u2357 1A66                       u2367 1258  
                     u2377 1BDA                       u2387 1E76                       u2397 1E84  
         ?_lcd_send_nibble 0001                       _anio 0050                       _flag 02E8  
                     _main 19FA                       _hora 0056                       fsr0h 000FEA  
                     indf0 000FEF                       fsr0l 000FE9                       fsr2h 000FDA  
                     fsr1l 000FE1                       indf2 000FDF                       fsr2l 000FD9  
            __CFG_T1DIG$ON 000000                       prodh 000FF4                       prodl 000FF3  
                     start 0000              __CFG_IESO$OFF 000000               ___param_bank 000010  
              _Delay1KTCYx 1E80              __CFG_PLLDIV$1 000000                      ?_main 0001  
          __end_of___awdiv 18FC                      STR_10 0F73                      STR_11 0F85  
                    STR_12 0F73                      STR_20 0F30                      STR_13 0F73  
                    STR_21 0F57                      STR_14 0F73                      STR_22 0F4C  
                    STR_23 0F25                      STR_15 0F87                      STR_16 0F81  
                    STR_24 0F7C                      STR_17 0F73                      STR_25 0F78  
                    STR_18 0F7F                      STR_26 0F6B                      STR_19 0F71  
    __size_of_Delay100TCYx 0012            ___awdiv@divisor 0003            __end_of___lwdiv 1BA6  
          __end_of___lwmod 1CF2            ___awdiv@counter 0005                      _TRISA 000F92  
                    _TRISB 000F93                      _TRISC 000F94             __CFG_FCMEN$OFF 000000  
                    _Setup 1D3E                      _clear 1E6A            __end_of_dpowers 0F0B  
                    _mes_d 004A                      _mes_u 004B            __end_of_isdigit 1E6A  
           __pbitbssCOMRAM 02E8                      tablat 000FF5               lcd_putrs@ptr 0009  
                    status 000FD8            __end_of_sprintf 14CC            __end_of_twinkle 1B4A  
  __CFG_DSWDTOSC$INTOSCREF 000000            __initialization 1D86               _Delay100TCYx 1E92  
             __end_of_main 1A76            ??_lcd_send_byte 0004                     ??_main 0026  
            __activetblptr 000002           __end_of_RtccWrOn 1EB6                     ?_Setup 0001  
                   ?_clear 0001                     _ADCON0 000FC2                     _ADCON1 000FC1  
                   _EECON2 000FA7                     _ANCON0 000F48                     _ANCON1 000F49  
         ___awdiv@dividend 0001           __end_of__delay_s 1BFE             __CFG_WDTEN$OFF 000000  
         RtccWriteDate@pDt 0001                     _RTCCFG 000F3F             __CFG_WPCFG$OFF 000000  
         __end_of_caratula 1EDA             __CFG_WPDIS$OFF 000000             __CFG_XINST$OFF 000000  
         __end_of_lcd_init 197C           __end_of_lcd_putc 1D3E                     ___wmul 1DFC  
                ??___awdiv 0005             __CFG_STVREN$ON 000000                     _diasem 0054  
                   _anio_d 0043                     _anio_u 0044                  ??___lwdiv 0005  
                ??___lwmod 000C                     _hora_d 0048                     _hora_u 0049  
                   clear_0 1D8C                     clear_1 1D9A           ___awdiv@quotient 0007  
                   _minuto 005A      __end_of_RtccWriteDate 175A      __end_of_RtccWriteTime 1866  
         RtccWriteTime@pTm 0001               __pdataCOMRAM 0050                  ??_isdigit 0001  
             __mediumconst 0000                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8                  ??_sprintf 0017                  ??_twinkle 0025  
   __size_of_read_keyboard 02DE                 __accesstop 0060    __end_of__initialization 1DC0  
       __size_of_Write_RTC 0148              ___rparam_used 000001             __pcstackCOMRAM 0001  
            __end_of_Setup 1D86              __end_of_clear 1E80            __CFG_DSWDTPS$G2 000000  
          __CFG_OSC$INTOSC 000000                    ??_Setup 000E          lcd_gotoxy@address 0007  
                  ??_clear 0006         __size_of_lcd_putrs 0054               sprintf@width 0021  
               __pbssBANK0 0060                 _dia_semana 0045  RtccWriteTime@tempHourWDay 000A  
               __pnvCOMRAM 0043                  ?_RtccWrOn 0001             lcd_send_byte@n 0003  
                  ?___wmul 0001              _read_keyboard 0F8A               ?_Delay1KTCYx 0001  
                ?__delay_s 0009          __end_of_Write_RTC 1614             __delay_s@index 000E  
               _lcd_comand 1EB6                  ?_caratula 0001                 _lcd_gotoxy 1E24  
                  _RTCVALH 000F99                    _RTCVALL 000F98                  ?_lcd_init 0001  
                ?_lcd_putc 0001                    __Hparam 0000                    __Lparam 0000  
 __size_of_lcd_send_nibble 0076                 ??_RtccWrOn 0001                    ___awdiv 1866  
        __end_of_lcd_putrs 1CA6             ?_read_keyboard 0001            __size_of___wmul 0028  
                  ___lwdiv 1B4A                    ___lwmod 1CA6               __psmallconst 0F00  
              _RtccTimeVal 0028                    __pcinit 1D86                    _fecha_d 0046  
                  _fecha_u 0047                    __ramtop 0F00                 ??__delay_s 000B  
                  __ptext0 19FA                    __ptext1 1BFE                    __ptext2 197C  
                  __ptext3 1AEC                    __ptext4 0F8A                    __ptext5 1268  
                  __ptext6 1E48                    __ptext7 1DFC                    __ptext8 1CA6  
                  __ptext9 1B4A                    _buffer2 0078                  _T1CONbits 000FCD  
                  _dpowers 0F01                    _isdigit 1E48                 ??_caratula 0006  
                  _segundo 0038                    _sprintf 1268                 ??_lcd_init 0005  
               ??_lcd_putc 0008                    _twinkle 1AEC       end_of_initialization 1DC0  
     lcd_send_byte@address 0004              __Lmediumconst 0000               twinkle@input 0025  
                  postdec1 000FE5                    postdec2 000FDD                    postinc0 000FEE  
                  postinc2 000FDE                 _set_vision 1BFE      __end_of_lcd_send_byte 1DFC  
                _PORTAbits 000F80                  _PORTCbits 000F82           __CFG_DSBOREN$OFF 000000  
              ?_lcd_comand 0001           __CFG_CPUDIV$OSC1 000000                  _TRISBbits 000F93  
              ?_lcd_gotoxy 0005            _LCD_INIT_STRING 0F0B           __CFG_IOL1WAY$OFF 000000  
RtccWriteDate@tempDayMonth 000A        __CFG_MSSP7B_EN$MSK7 000000            ??_read_keyboard 0024  
         Delay100TCYx@unit 0001                 _write_Date 197C                __delay_s@it 000C  
           __end_of___wmul 1E24              __pidataCOMRAM 1EC4  RtccWriteDate@tempHourWDay 000C  
        ??_lcd_send_nibble 0001       __size_of_Delay1KTCYx 0012           __CFG_DSWDTEN$OFF 000000  
      start_initialization 1D86       RtccWriteTime@wasAlrm 0006       RtccWriteTime@wasWrEn 0007  
   __size_of_RtccWriteDate 0146            RtccWriteDate@di 0003     __size_of_RtccWriteTime 010C  
      __size_of_lcd_comand 000E        __size_of_lcd_gotoxy 0024                   ??___wmul 0005  
              ?_set_vision 0001          __size_of_RtccWrOn 0012            RtccWriteTime@di 0003  
         __CFG_LPT1OSC$OFF 000000                _ALRMCFGbits 000F91    __end_of_LCD_INIT_STRING 0F0F  
        __size_of__delay_s 0058                __pbssCOMRAM 0028                  _Write_RTC 14CC  
             _isdigit$2329 0002          __size_of_caratula 0008            Delay1KTCYx@unit 0001  
        __size_of_lcd_init 0080                sprintf@flag 001D          __size_of_lcd_putc 004C  
              sprintf@prec 0020           ___lwdiv@dividend 0001              ?_Delay100TCYx 0001  
                 ?___awdiv 0001                   ?___lwdiv 0001                ?_write_Date 0001  
                 ?___lwmod 0008    RtccWriteTime@tempMinSec 0008                  _lcd_putrs 1C52  
            _RtccWriteDate 1614                __smallconst 0F00              _RtccWriteTime 175A  
                 ?_isdigit 0001       __CFG_RTCOSC$T1OSCREF 000000             __size_of_Setup 0048  
               ?_Write_RTC 0001           ___lwdiv@quotient 0005             __size_of_clear 0016  
                 ?_sprintf 000D                   ?_twinkle 0001        __size_of_set_vision 0054  
         _RtccAlrmTimeDate 0060             ___wmul@product 0005            __delay_s@millis 0009  
                 _LATAbits 000F89                   _LATBbits 000F8A                   _PIE3bits 000FA3  
                _segundo_d 004E             ??_Delay100TCYx 0001                  _segundo_u 004F  
         __CFG_WDTPS$32768 000000         RtccWriteDate@wasOn 0005         _Rtcc_read_TimeDate 0070  
           ?_RtccWriteDate 0001                 ?_lcd_putrs 0009          ___wmul@multiplier 0001  
           ?_RtccWriteTime 0001                  lcd_init@i 0005               ??_lcd_comand 0005  
                main@input 0027                  lcd_putc@c 0008               ??_lcd_gotoxy 0006  
                copy_data0 1DB4        __size_of_write_Date 007E            _lcd_send_nibble 1A76  
                 __Hrparam 0000                   _RtccDate 003B                   __Lrparam 0000  
                 _RtccTime 003F                   _RtccWrOn 1EA4         __end_of_lcd_comand 1EC4  
       __end_of_lcd_gotoxy 1E48           __size_of___awdiv 0096           __size_of___lwdiv 005C  
         __size_of___lwmod 004C                   __delay_s 1BA6               _RtccTimeDate 0068  
               sprintf@val 001E                   _caratula 1ED2           __size_of_isdigit 0022  
          ___lwdiv@divisor 0003                ??_Write_RTC 000E            ___lwdiv@counter 0007  
                 __ptext10 1C52                   __ptext11 1CF2                   __ptext20 1DCA  
                 __ptext12 1E24                   __ptext21 1A76                   __ptext13 1BA6  
                 __ptext22 1E92                   __ptext14 1E6A                   __ptext23 14CC  
                 __ptext15 1ED2                   __ptext24 1866                   __ptext16 1D3E  
                 __ptext25 175A                   __ptext17 18FC                   __ptext26 1614  
                 __ptext18 1E80                   __ptext27 1EA4                   __ptext19 1EB6  
                 _lcd_init 18FC                   _lcd_putc 1CF2           __size_of_sprintf 0264  
         __size_of_twinkle 005E     __size_of_lcd_send_byte 0032              __size_of_main 007C  
                 _minuto_d 004C                   _minuto_u 004D               ??_set_vision 0026  
    __end_of_read_keyboard 1268              ??_Delay1KTCYx 0001            ??_RtccWriteDate 0004  
          ??_RtccWriteTime 0004                ??_lcd_putrs 000B                _OSCTUNEbits 000F9B  
               _INTCONbits 000FF2         RtccWriteTime@wasOn 0005       __end_of_Delay100TCYx 1EA4  
                 isdigit@c 0003                  sprintf@ap 001B    __end_of_lcd_send_nibble 1AEC  
                sprintf@sp 000D         __end_of_set_vision 1C52           ___lwmod@dividend 0008  
               _OSCCONbits 000FD3      RtccWriteDate@tempYear 0007               ??_write_Date 0024  
            _lcd_send_byte 1DCA                 _RTCCFGbits 000F3F                   sprintf@c 0023  
                 sprintf@f 000F            ___lwmod@divisor 000A        __end_of_Delay1KTCYx 1E92  
          ___lwmod@counter 000C       RtccWriteDate@wasAlrm 0006       RtccWriteDate@wasWrEn 0009  
       __end_of_write_Date 19FA      lcd_send_nibble@nibble 0002  
