

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Sep 01 22:49:29 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    39                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    40  0000                     
    41                           	psect	idataCOMRAM
    42  001D86                     __pidataCOMRAM:
    43                           	opt stack 0
    44                           
    45                           ;initializer for _anio
    46  001D86  000F               	dw	15
    47                           
    48                           ;initializer for _dia
    49  001D88  0008               	dw	8
    50                           
    51                           ;initializer for _diasem
    52  001D8A  0003               	dw	3
    53                           
    54                           ;initializer for _hora
    55  001D8C  0012               	dw	18
    56                           
    57                           ;initializer for _mes
    58  001D8E  0009               	dw	9
    59                           
    60                           ;initializer for _minuto
    61  001D90  001E               	dw	30
    62                           
    63                           	psect	smallconst
    64  000F00                     __psmallconst:
    65                           	opt stack 0
    66  000F00  00                 	db	0
    67  000F01                     _dpowers:
    68                           	opt stack 0
    69  000F01  0001               	dw	1
    70  000F03  000A               	dw	10
    71  000F05  0064               	dw	100
    72  000F07  03E8               	dw	1000
    73  000F09  2710               	dw	10000
    74  000F0B                     __end_of_dpowers:
    75                           	opt stack 0
    76  000F0B                     _LCD_INIT_STRING:
    77                           	opt stack 0
    78  000F0B  28                 	db	40
    79  000F0C  0C                 	db	12
    80  000F0D  01                 	db	1
    81  000F0E  06                 	db	6
    82  000F0F                     __end_of_LCD_INIT_STRING:
    83                           	opt stack 0
    84  000F0F                     STR_1:
    85                           
    86                           ; BSR set to: 15
    87  000F0F  20                 	db	32
    88  000F10  20                 	db	32
    89  000F11  20                 	db	32
    90  000F12  20                 	db	32
    91  000F13  20                 	db	32
    92  000F14  20                 	db	32
    93  000F15  20                 	db	32
    94  000F16  20                 	db	32
    95  000F17  20                 	db	32
    96  000F18  20                 	db	32
    97  000F19  20                 	db	32
    98  000F1A  20                 	db	32
    99  000F1B  20                 	db	32
   100  000F1C  20                 	db	32
   101  000F1D  20                 	db	32
   102  000F1E  20                 	db	32
   103  000F1F  20                 	db	32
   104  000F20  20                 	db	32
   105  000F21  20                 	db	32
   106  000F22  20                 	db	32
   107  000F23  20                 	db	32
   108  000F24  20                 	db	32
   109  000F25  20                 	db	32
   110  000F26  20                 	db	32
   111  000F27  20                 	db	32
   112  000F28  20                 	db	32
   113  000F29  20                 	db	32
   114  000F2A  20                 	db	32
   115  000F2B  20                 	db	32
   116  000F2C  20                 	db	32
   117  000F2D  20                 	db	32
   118  000F2E  20                 	db	32
   119  000F2F  00                 	db	0
   120  000F30                     STR_22:
   121                           
   122                           ; BSR set to: 15
   123  000F30  41                 	db	65	;'A'
   124  000F31  6C                 	db	108	;'l'
   125  000F32  61                 	db	97	;'a'
   126  000F33  72                 	db	114	;'r'
   127  000F34  6D                 	db	109	;'m'
   128  000F35  20                 	db	32
   129  000F36  74                 	db	116	;'t'
   130  000F37  72                 	db	114	;'r'
   131  000F38  69                 	db	105	;'i'
   132  000F39  67                 	db	103	;'g'
   133  000F3A  67                 	db	103	;'g'
   134  000F3B  65                 	db	101	;'e'
   135  000F3C  64                 	db	100	;'d'
   136  000F3D  00                 	db	0
   137  000F3E                     STR_2:
   138                           
   139                           ; BSR set to: 15
   140  000F3E  6E                 	db	110	;'n'
   141  000F3F  75                 	db	117	;'u'
   142  000F40  6C                 	db	108	;'l'
   143  000F41  6C                 	db	108	;'l'
   144  000F42  20                 	db	32
   145  000F43  70                 	db	112	;'p'
   146  000F44  6F                 	db	111	;'o'
   147  000F45  69                 	db	105	;'i'
   148  000F46  6E                 	db	110	;'n'
   149  000F47  74                 	db	116	;'t'
   150  000F48  65                 	db	101	;'e'
   151  000F49  72                 	db	114	;'r'
   152  000F4A  00                 	db	0
   153  000F4B                     STR_21:
   154                           
   155                           ; BSR set to: 15
   156  000F4B  41                 	db	65	;'A'
   157  000F4C  6C                 	db	108	;'l'
   158  000F4D  61                 	db	97	;'a'
   159  000F4E  72                 	db	114	;'r'
   160  000F4F  6D                 	db	109	;'m'
   161  000F50  20                 	db	32
   162  000F51  6F                 	db	111	;'o'
   163  000F52  66                 	db	102	;'f'
   164  000F53  66                 	db	102	;'f'
   165  000F54  00                 	db	0
   166  000F55                     STR_3:
   167                           
   168                           ; BSR set to: 15
   169  000F55  65                 	db	101	;'e'
   170  000F56  78                 	db	120	;'x'
   171  000F57  63                 	db	99	;'c'
   172  000F58  65                 	db	101	;'e'
   173  000F59  70                 	db	112	;'p'
   174  000F5A  74                 	db	116	;'t'
   175  000F5B  69                 	db	105	;'i'
   176  000F5C  6F                 	db	111	;'o'
   177  000F5D  6E                 	db	110	;'n'
   178  000F5E  00                 	db	0
   179  000F5F                     STR_20:
   180                           
   181                           ; BSR set to: 15
   182  000F5F  41                 	db	65	;'A'
   183  000F60  6C                 	db	108	;'l'
   184  000F61  61                 	db	97	;'a'
   185  000F62  72                 	db	114	;'r'
   186  000F63  6D                 	db	109	;'m'
   187  000F64  20                 	db	32
   188  000F65  6F                 	db	111	;'o'
   189  000F66  6E                 	db	110	;'n'
   190  000F67  00                 	db	0
   191  000F68                     STR_4:
   192                           
   193                           ; BSR set to: 15
   194  000F68  25                 	db	37
   195  000F69  30                 	db	48	;'0'
   196  000F6A  31                 	db	49	;'1'
   197  000F6B  75                 	db	117	;'u'
   198  000F6C  00                 	db	0
   199  000F6D                     STR_18:
   200                           
   201                           ; BSR set to: 15
   202  000F6D  23                 	db	35
   203  000F6E  00                 	db	0
   204  000F6F                     STR_16:
   205                           
   206                           ; BSR set to: 15
   207  000F6F  2A                 	db	42
   208  000F70  00                 	db	0
   209  000F71                     STR_7:
   210                           
   211                           ; BSR set to: 15
   212  000F71  41                 	db	65	;'A'
   213  000F72  00                 	db	0
   214  000F73                     STR_11:
   215                           
   216                           ; BSR set to: 15
   217  000F73  42                 	db	66	;'B'
   218  000F74  00                 	db	0
   219  000F75                     STR_15:
   220                           
   221                           ; BSR set to: 15
   222  000F75  43                 	db	67	;'C'
   223  000F76  00                 	db	0
   224  000F77                     STR_19:
   225                           
   226                           ; BSR set to: 15
   227  000F77  44                 	db	68	;'D'
   228  000F78  00                 	db	0
   229  0000                     
   230                           ; #config settings
   231  000F79  00                 	db	0	; dummy byte at the end
   232  0000                     
   233                           	psect	nvCOMRAM
   234  00003F                     __pnvCOMRAM:
   235                           	opt stack 0
   236  00003F                     _anio_d:
   237                           	opt stack 0
   238  00003F                     	ds	1
   239  000040                     _anio_u:
   240                           	opt stack 0
   241  000040                     	ds	1
   242  000041                     _dia_semana:
   243                           	opt stack 0
   244  000041                     	ds	1
   245  000042                     _fecha_d:
   246                           	opt stack 0
   247  000042                     	ds	1
   248  000043                     _fecha_u:
   249                           	opt stack 0
   250  000043                     	ds	1
   251  000044                     _hora_d:
   252                           	opt stack 0
   253  000044                     	ds	1
   254  000045                     _hora_u:
   255                           	opt stack 0
   256  000045                     	ds	1
   257  000046                     _mes_d:
   258                           	opt stack 0
   259  000046                     	ds	1
   260  000047                     _mes_u:
   261                           	opt stack 0
   262  000047                     	ds	1
   263  000048                     _minuto_d:
   264                           	opt stack 0
   265  000048                     	ds	1
   266  000049                     _minuto_u:
   267                           	opt stack 0
   268  000049                     	ds	1
   269  00004A                     _segundo_d:
   270                           	opt stack 0
   271  00004A                     	ds	1
   272  00004B                     _segundo_u:
   273                           	opt stack 0
   274  00004B                     	ds	1
   275  0000                     _ANCON0	set	3912
   276  0000                     _ANCON1	set	3913
   277  0000                     _RTCCFG	set	3903
   278  0000                     _RTCCFGbits	set	3903
   279  0000                     _ADCON0	set	4034
   280  0000                     _ADCON1	set	4033
   281  0000                     _ALRMCFGbits	set	3985
   282  0000                     _EECON2	set	4007
   283  0000                     _INTCONbits	set	4082
   284  0000                     _LATAbits	set	3977
   285  0000                     _LATBbits	set	3978
   286  0000                     _OSCCONbits	set	4051
   287  0000                     _OSCTUNEbits	set	3995
   288  0000                     _PIE3bits	set	4003
   289  0000                     _PORTAbits	set	3968
   290  0000                     _PORTCbits	set	3970
   291  0000                     _RTCVALH	set	3993
   292  0000                     _RTCVALL	set	3992
   293  0000                     _T1CONbits	set	4045
   294  0000                     _TRISA	set	3986
   295  0000                     _TRISB	set	3987
   296  0000                     _TRISBbits	set	3987
   297  0000                     _TRISC	set	3988
   298                           
   299                           	psect	cinit
   300  001C4C                     __pcinit:
   301                           	opt stack 0
   302  001C4C                     start_initialization:
   303                           	opt stack 0
   304  001C4C                     __initialization:
   305                           	opt stack 0
   306                           
   307                           ; Clear objects allocated to BANK0 (44 bytes)
   308  001C4C  EE00  F060         	lfsr	0,__pbssBANK0
   309  001C50  0E2C               	movlw	44
   310  001C52                     clear_0:
   311  001C52  6AEE               	clrf	postinc0,c
   312  001C54  06E8               	decf	wreg,f,c
   313  001C56  E1FD               	bnz	clear_0
   314                           
   315                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   316  001C58  6A58               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   317                           
   318                           ; Clear objects allocated to COMRAM (28 bytes)
   319  001C5A  EE00  F023         	lfsr	0,__pbssCOMRAM
   320  001C5E  0E1C               	movlw	28
   321  001C60                     clear_1:
   322  001C60  6AEE               	clrf	postinc0,c
   323  001C62  06E8               	decf	wreg,f,c
   324  001C64  E1FD               	bnz	clear_1
   325                           
   326                           ; Initialize objects allocated to COMRAM (12 bytes)
   327                           ; load TBLPTR registers with __pidataCOMRAM
   328  001C66  0E86               	movlw	low __pidataCOMRAM
   329  001C68  6EF6               	movwf	tblptrl,c
   330  001C6A  0E1D               	movlw	high __pidataCOMRAM
   331  001C6C  6EF7               	movwf	tblptrh,c
   332  001C6E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   333  001C70  6EF8               	movwf	tblptru,c
   334  001C72  EE00  F04C         	lfsr	0,__pdataCOMRAM
   335  001C76  EE10 F00C          	lfsr	1,12
   336  001C7A                     copy_data0:
   337  001C7A  0009               	tblrd		*+
   338  001C7C  CFF5 FFEE          	movff	tablat,postinc0
   339  001C80  50E5               	movf	postdec1,w,c
   340  001C82  50E1               	movf	fsr1l,w,c
   341  001C84  E1FA               	bnz	copy_data0
   342  001C86                     end_of_initialization:
   343                           	opt stack 0
   344  001C86                     __end_of__initialization:
   345                           	opt stack 0
   346  001C86  0E00               	movlw	low (__Lmediumconst shr (0+16))
   347  001C88  6EF8               	movwf	tblptru,c
   348  001C8A  0100               	movlb	0
   349  001C8C  EFB6  F00C         	goto	_main	;jump to C main() function
   350                           tblptru	equ	0xFF8
   351                           tblptrh	equ	0xFF7
   352                           tblptrl	equ	0xFF6
   353                           tablat	equ	0xFF5
   354                           postinc0	equ	0xFEE
   355                           wreg	equ	0xFE8
   356                           postdec1	equ	0xFE5
   357                           fsr1l	equ	0xFE1
   358                           
   359                           	psect	bitbssCOMRAM
   360  0002C0                     __pbitbssCOMRAM:
   361                           	opt stack 0
   362  0002C0                     _flag:
   363                           	opt stack 0
   364  0002C0                     	ds	1
   365                           tblptru	equ	0xFF8
   366                           tblptrh	equ	0xFF7
   367                           tblptrl	equ	0xFF6
   368                           tablat	equ	0xFF5
   369                           postinc0	equ	0xFEE
   370                           wreg	equ	0xFE8
   371                           postdec1	equ	0xFE5
   372                           fsr1l	equ	0xFE1
   373                           
   374                           	psect	bssCOMRAM
   375  000023                     __pbssCOMRAM:
   376                           	opt stack 0
   377  000023                     _RtccTimeVal:
   378                           	opt stack 0
   379  000023                     	ds	4
   380  000027                     _a:
   381                           	opt stack 0
   382  000027                     	ds	2
   383  000029                     _b:
   384                           	opt stack 0
   385  000029                     	ds	2
   386  00002B                     _c:
   387                           	opt stack 0
   388  00002B                     	ds	2
   389  00002D                     _i:
   390                           	opt stack 0
   391  00002D                     	ds	2
   392  00002F                     _j:
   393                           	opt stack 0
   394  00002F                     	ds	2
   395  000031                     _k:
   396                           	opt stack 0
   397  000031                     	ds	2
   398  000033                     _segundo:
   399                           	opt stack 0
   400  000033                     	ds	2
   401  000035                     _key:
   402                           	opt stack 0
   403  000035                     	ds	1
   404  000036                     _state_alarm:
   405                           	opt stack 0
   406  000036                     	ds	1
   407  000037                     _RtccDate:
   408                           	opt stack 0
   409  000037                     	ds	4
   410  00003B                     _RtccTime:
   411                           	opt stack 0
   412  00003B                     	ds	4
   413                           tblptru	equ	0xFF8
   414                           tblptrh	equ	0xFF7
   415                           tblptrl	equ	0xFF6
   416                           tablat	equ	0xFF5
   417                           postinc0	equ	0xFEE
   418                           wreg	equ	0xFE8
   419                           postdec1	equ	0xFE5
   420                           fsr1l	equ	0xFE1
   421                           
   422                           	psect	dataCOMRAM
   423  00004C                     __pdataCOMRAM:
   424                           	opt stack 0
   425  00004C                     _anio:
   426                           	opt stack 0
   427  00004C                     	ds	2
   428  00004E                     _dia:
   429                           	opt stack 0
   430  00004E                     	ds	2
   431  000050                     _diasem:
   432                           	opt stack 0
   433  000050                     	ds	2
   434  000052                     _hora:
   435                           	opt stack 0
   436  000052                     	ds	2
   437  000054                     _mes:
   438                           	opt stack 0
   439  000054                     	ds	2
   440  000056                     _minuto:
   441                           	opt stack 0
   442  000056                     	ds	2
   443                           tblptru	equ	0xFF8
   444                           tblptrh	equ	0xFF7
   445                           tblptrl	equ	0xFF6
   446                           tablat	equ	0xFF5
   447                           postinc0	equ	0xFEE
   448                           wreg	equ	0xFE8
   449                           postdec1	equ	0xFE5
   450                           fsr1l	equ	0xFE1
   451                           
   452                           	psect	bssBANK0
   453  000060                     __pbssBANK0:
   454                           	opt stack 0
   455  000060                     _RtccAlrmTimeDate:
   456                           	opt stack 0
   457  000060                     	ds	8
   458  000068                     _RtccTimeDate:
   459                           	opt stack 0
   460  000068                     	ds	8
   461  000070                     _Rtcc_read_TimeDate:
   462                           	opt stack 0
   463  000070                     	ds	8
   464  000078                     _buffer2:
   465                           	opt stack 0
   466  000078                     	ds	20
   467                           tblptru	equ	0xFF8
   468                           tblptrh	equ	0xFF7
   469                           tblptrl	equ	0xFF6
   470                           tablat	equ	0xFF5
   471                           postinc0	equ	0xFEE
   472                           wreg	equ	0xFE8
   473                           postdec1	equ	0xFE5
   474                           fsr1l	equ	0xFE1
   475                           
   476                           	psect	cstackCOMRAM
   477  000001                     __pcstackCOMRAM:
   478                           	opt stack 0
   479  000001                     ??_isdigit:
   480  000001                     ??_lcd_send_nibble:
   481  000001                     ?___wmul:
   482                           	opt stack 0
   483  000001                     ?___awdiv:
   484                           	opt stack 0
   485  000001                     ?___lwdiv:
   486                           	opt stack 0
   487  000001                     Delay100TCYx@unit:
   488                           	opt stack 0
   489  000001                     Delay1KTCYx@unit:
   490                           	opt stack 0
   491  000001                     RtccWriteDate@pDt:
   492                           	opt stack 0
   493  000001                     RtccWriteTime@pTm:
   494                           	opt stack 0
   495  000001                     ___wmul@multiplier:
   496                           	opt stack 0
   497  000001                     ___awdiv@dividend:
   498                           	opt stack 0
   499  000001                     ___lwdiv@dividend:
   500                           	opt stack 0
   501                           
   502                           ; 2 bytes @ 0x0
   503  000001                     	ds	1
   504  000002                     lcd_send_nibble@nibble:
   505                           	opt stack 0
   506  000002                     _isdigit$2240:
   507                           	opt stack 0
   508                           
   509                           ; 1 bytes @ 0x1
   510  000002                     	ds	1
   511  000003                     lcd_send_byte@n:
   512                           	opt stack 0
   513  000003                     RtccWriteDate@di:
   514                           	opt stack 0
   515  000003                     RtccWriteTime@di:
   516                           	opt stack 0
   517  000003                     isdigit@c:
   518                           	opt stack 0
   519  000003                     ___wmul@multiplicand:
   520                           	opt stack 0
   521  000003                     ___awdiv@divisor:
   522                           	opt stack 0
   523  000003                     ___lwdiv@divisor:
   524                           	opt stack 0
   525                           
   526                           ; 2 bytes @ 0x2
   527  000003                     	ds	1
   528  000004                     lcd_send_byte@address:
   529                           	opt stack 0
   530                           
   531                           ; 1 bytes @ 0x3
   532  000004                     	ds	1
   533  000005                     lcd_init@i:
   534                           	opt stack 0
   535  000005                     lcd_gotoxy@y:
   536                           	opt stack 0
   537  000005                     lcd_comand@d:
   538                           	opt stack 0
   539  000005                     RtccWriteDate@wasOn:
   540                           	opt stack 0
   541  000005                     RtccWriteTime@wasOn:
   542                           	opt stack 0
   543  000005                     ___awdiv@counter:
   544                           	opt stack 0
   545  000005                     ___wmul@product:
   546                           	opt stack 0
   547  000005                     ___lwdiv@quotient:
   548                           	opt stack 0
   549                           
   550                           ; 2 bytes @ 0x4
   551  000005                     	ds	1
   552  000006                     lcd_gotoxy@x:
   553                           	opt stack 0
   554  000006                     RtccWriteDate@wasAlrm:
   555                           	opt stack 0
   556  000006                     RtccWriteTime@wasAlrm:
   557                           	opt stack 0
   558  000006                     ___awdiv@sign:
   559                           	opt stack 0
   560                           
   561                           ; 1 bytes @ 0x5
   562  000006                     	ds	1
   563  000007                     lcd_gotoxy@address:
   564                           	opt stack 0
   565  000007                     RtccWriteTime@wasWrEn:
   566                           	opt stack 0
   567  000007                     ___lwdiv@counter:
   568                           	opt stack 0
   569  000007                     RtccWriteDate@tempYear:
   570                           	opt stack 0
   571  000007                     ___awdiv@quotient:
   572                           	opt stack 0
   573                           
   574                           ; 2 bytes @ 0x6
   575  000007                     	ds	1
   576  000008                     ?___lwmod:
   577                           	opt stack 0
   578  000008                     lcd_putc@c:
   579                           	opt stack 0
   580  000008                     RtccWriteTime@tempMinSec:
   581                           	opt stack 0
   582  000008                     ___lwmod@dividend:
   583                           	opt stack 0
   584                           
   585                           ; 2 bytes @ 0x7
   586  000008                     	ds	1
   587  000009                     RtccWriteDate@wasWrEn:
   588                           	opt stack 0
   589  000009                     lcd_putrs@ptr:
   590                           	opt stack 0
   591                           
   592                           ; 2 bytes @ 0x8
   593  000009                     	ds	1
   594  00000A                     RtccWriteDate@tempDayMonth:
   595                           	opt stack 0
   596  00000A                     RtccWriteTime@tempHourWDay:
   597                           	opt stack 0
   598  00000A                     ___lwmod@divisor:
   599                           	opt stack 0
   600                           
   601                           ; 2 bytes @ 0x9
   602  00000A                     	ds	1
   603  00000B                     
   604                           ; 0 bytes @ 0xA
   605  00000B                     	ds	1
   606  00000C                     ___lwmod@counter:
   607                           	opt stack 0
   608  00000C                     RtccWriteDate@tempHourWDay:
   609                           	opt stack 0
   610                           
   611                           ; 2 bytes @ 0xB
   612  00000C                     	ds	1
   613  00000D                     ?_sprintf:
   614                           	opt stack 0
   615  00000D                     sprintf@sp:
   616                           	opt stack 0
   617                           
   618                           ; 2 bytes @ 0xC
   619  00000D                     	ds	1
   620  00000E                     
   621                           ; 0 bytes @ 0xD
   622  00000E                     	ds	1
   623  00000F                     sprintf@f:
   624                           	opt stack 0
   625                           
   626                           ; 2 bytes @ 0xE
   627  00000F                     	ds	4
   628  000013                     ??_sprintf:
   629                           
   630                           ; 0 bytes @ 0x12
   631  000013                     	ds	4
   632  000017                     sprintf@ap:
   633                           	opt stack 0
   634                           
   635                           ; 2 bytes @ 0x16
   636  000017                     	ds	2
   637  000019                     sprintf@flag:
   638                           	opt stack 0
   639                           
   640                           ; 1 bytes @ 0x18
   641  000019                     	ds	1
   642  00001A                     sprintf@val:
   643                           	opt stack 0
   644                           
   645                           ; 2 bytes @ 0x19
   646  00001A                     	ds	2
   647  00001C                     sprintf@prec:
   648                           	opt stack 0
   649                           
   650                           ; 1 bytes @ 0x1B
   651  00001C                     	ds	1
   652  00001D                     sprintf@width:
   653                           	opt stack 0
   654                           
   655                           ; 2 bytes @ 0x1C
   656  00001D                     	ds	2
   657  00001F                     sprintf@c:
   658                           	opt stack 0
   659                           
   660                           ; 1 bytes @ 0x1E
   661  00001F                     	ds	1
   662  000020                     ??_read_keyboard:
   663                           
   664                           ; 0 bytes @ 0x1F
   665  000020                     	ds	1
   666  000021                     ??_main:
   667                           
   668                           ; 0 bytes @ 0x20
   669  000021                     	ds	1
   670  000022                     main@input:
   671                           	opt stack 0
   672                           
   673                           ; 1 bytes @ 0x21
   674  000022                     	ds	1
   675                           tblptru	equ	0xFF8
   676                           tblptrh	equ	0xFF7
   677                           tblptrl	equ	0xFF6
   678                           tablat	equ	0xFF5
   679                           postinc0	equ	0xFEE
   680                           wreg	equ	0xFE8
   681                           postdec1	equ	0xFE5
   682                           fsr1l	equ	0xFE1
   683                           
   684 ;;
   685 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   686 ;;
   687 ;; *************** function _main *****************
   688 ;; Defined at:
   689 ;;		line 87 in file "main.c"
   690 ;; Parameters:    Size  Location     Type
   691 ;;		None
   692 ;; Auto vars:     Size  Location     Type
   693 ;;  input           1   33[COMRAM] unsigned char 
   694 ;; Return value:  Size  Location     Type
   695 ;;                  2   52[None  ] int 
   696 ;; Registers used:
   697 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   698 ;; Tracked objects:
   699 ;;		On entry : 0/0
   700 ;;		On exit  : 0/0
   701 ;;		Unchanged: 0/0
   702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   704 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   705 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   706 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   707 ;;Total ram usage:        2 bytes
   708 ;; Hardware stack levels required when called:    6
   709 ;; This function calls:
   710 ;;		_Setup
   711 ;;		_caratula
   712 ;;		_lcd_gotoxy
   713 ;;		_lcd_putrs
   714 ;;		_read_keyboard
   715 ;;		_set_vision
   716 ;; This function is called by:
   717 ;;		Startup code after reset
   718 ;; This function uses a non-reentrant model
   719 ;;
   720                           
   721                           	psect	text0
   722  00196C                     __ptext0:
   723                           	opt stack 0
   724  00196C                     _main:
   725                           	opt stack 25
   726                           
   727                           ;main.c: 88: Setup();
   728                           
   729                           ; BSR set to: 15
   730                           ;incstack = 0
   731  00196C  EC02  F00E         	call	_Setup	;wreg free
   732                           
   733                           ;main.c: 89: caratula();
   734  001970  EC98  F00E         	call	_caratula	;wreg free
   735  001974  D000               	goto	l2631
   736  001976                     l2631:
   737                           
   738                           ;main.c: 94: set_vision();
   739  001976  EC2F  F00D         	call	_set_vision	;wreg free
   740                           
   741                           ;main.c: 96: char input = read_keyboard();
   742  00197A  ECBD  F007         	call	_read_keyboard	;wreg free
   743  00197E  6E22               	movwf	main@input,c
   744                           
   745                           ;main.c: 98: if (input == 16){
   746  001980  0E10               	movlw	16
   747  001982  1822               	xorwf	main@input,w,c
   748  001984  A4D8               	btfss	status,2,c
   749  001986  D7F7               	goto	l2631
   750                           
   751                           ;main.c: 99: lcd_gotoxy(1,1);
   752  001988  0E01               	movlw	1
   753  00198A  6E05               	movwf	lcd_gotoxy@y,c
   754  00198C  0E01               	movlw	1
   755  00198E  EC75  F00E         	call	_lcd_gotoxy
   756                           
   757                           ;main.c: 100: lcd_putrs("                                ");
   758  001992  0E0F               	movlw	low STR_1
   759  001994  6E09               	movwf	lcd_putrs@ptr,c
   760  001996  0E0F               	movlw	high STR_1
   761  001998  6E0A               	movwf	lcd_putrs@ptr+1,c
   762  00199A  EC8C  F00D         	call	_lcd_putrs	;wreg free
   763                           
   764                           ;main.c: 101: lcd_gotoxy(1,1);
   765  00199E  0E01               	movlw	1
   766  0019A0  6E05               	movwf	lcd_gotoxy@y,c
   767  0019A2  0E01               	movlw	1
   768  0019A4  EC75  F00E         	call	_lcd_gotoxy
   769                           
   770                           ;main.c: 102: lcd_putrs("null pointer");
   771  0019A8  0E3E               	movlw	low STR_2
   772  0019AA  6E09               	movwf	lcd_putrs@ptr,c
   773  0019AC  0E0F               	movlw	high STR_2
   774  0019AE  6E0A               	movwf	lcd_putrs@ptr+1,c
   775  0019B0  EC8C  F00D         	call	_lcd_putrs	;wreg free
   776                           
   777                           ;main.c: 103: lcd_gotoxy(1,2);
   778  0019B4  0E02               	movlw	2
   779  0019B6  6E05               	movwf	lcd_gotoxy@y,c
   780  0019B8  0E01               	movlw	1
   781  0019BA  EC75  F00E         	call	_lcd_gotoxy
   782                           
   783                           ;main.c: 104: lcd_putrs("exception");
   784  0019BE  0E55               	movlw	low STR_3
   785  0019C0  6E09               	movwf	lcd_putrs@ptr,c
   786  0019C2  0E0F               	movlw	high STR_3
   787  0019C4  6E0A               	movwf	lcd_putrs@ptr+1,c
   788  0019C6  EC8C  F00D         	call	_lcd_putrs	;wreg free
   789                           
   790                           ;main.c: 105: input = 0;
   791  0019CA  0E00               	movlw	0
   792  0019CC  6E22               	movwf	main@input,c
   793                           
   794                           ;main.c: 106: key = 0;
   795  0019CE  0E00               	movlw	0
   796  0019D0  6E35               	movwf	_key,c
   797                           
   798                           ;main.c: 107: _delay((unsigned long)((98)*(8000000/4000.0)));
   799  0019D2  0EFF               	movlw	255
   800  0019D4  6E21               	movwf	??_main& (0+255),c
   801  0019D6  0E8A               	movlw	138
   802  0019D8                     u2377:
   803  0019D8  2EE8               	decfsz	wreg,f,c
   804  0019DA  D7FE               	goto	u2377
   805  0019DC  2E21               	decfsz	??_main& (0+255),f,c
   806  0019DE  D7FC               	goto	u2377
   807  0019E0  D000               	nop2	
   808  0019E2  D7C9               	goto	l2631
   809                           
   810                           ;main.c: 108: }
   811                           ;main.c: 109: }
   812                           ;main.c: 111: return 0;
   813                           ;	Return value of _main is never used
   814  0019E4  EF00  F000         	goto	start
   815  0019E8                     __end_of_main:
   816                           	opt stack 0
   817                           tblptru	equ	0xFF8
   818                           tblptrh	equ	0xFF7
   819                           tblptrl	equ	0xFF6
   820                           tablat	equ	0xFF5
   821                           postinc0	equ	0xFEE
   822                           wreg	equ	0xFE8
   823                           postdec1	equ	0xFE5
   824                           fsr1l	equ	0xFE1
   825                           status	equ	0xFD8
   826                           
   827 ;; *************** function _set_vision *****************
   828 ;; Defined at:
   829 ;;		line 4 in file "lcd_vision.c"
   830 ;; Parameters:    Size  Location     Type
   831 ;;		None
   832 ;; Auto vars:     Size  Location     Type
   833 ;;		None
   834 ;; Return value:  Size  Location     Type
   835 ;;		None               void
   836 ;; Registers used:
   837 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   838 ;; Tracked objects:
   839 ;;		On entry : 0/0
   840 ;;		On exit  : 0/0
   841 ;;		Unchanged: 0/0
   842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   846 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   847 ;;Total ram usage:        0 bytes
   848 ;; Hardware stack levels used:    1
   849 ;; Hardware stack levels required when called:    5
   850 ;; This function calls:
   851 ;;		_lcd_gotoxy
   852 ;;		_lcd_putrs
   853 ;; This function is called by:
   854 ;;		_main
   855 ;; This function uses a non-reentrant model
   856 ;;
   857                           
   858                           	psect	text1
   859  001A5E                     __ptext1:
   860                           	opt stack 0
   861  001A5E                     _set_vision:
   862                           	opt stack 25
   863                           
   864                           ;lcd_vision.c: 6: if (state_alarm == ACTIVE){
   865                           
   866                           ;incstack = 0
   867  001A5E  5036               	movf	_state_alarm,w,c
   868  001A60  A4D8               	btfss	status,2,c
   869  001A62  D00C               	goto	l2521
   870                           
   871                           ;lcd_vision.c: 7: lcd_gotoxy(1,1);
   872  001A64  0E01               	movlw	1
   873  001A66  6E05               	movwf	lcd_gotoxy@y,c
   874  001A68  0E01               	movlw	1
   875  001A6A  EC75  F00E         	call	_lcd_gotoxy
   876                           
   877                           ;lcd_vision.c: 8: lcd_putrs("Alarm on");
   878  001A6E  0E5F               	movlw	low STR_20
   879  001A70  6E09               	movwf	lcd_putrs@ptr,c
   880  001A72  0E0F               	movlw	high STR_20
   881  001A74  6E0A               	movwf	lcd_putrs@ptr+1,c
   882  001A76  EC8C  F00D         	call	_lcd_putrs	;wreg free
   883  001A7A  D000               	goto	l2521
   884  001A7C                     l2521:
   885                           
   886                           ;lcd_vision.c: 9: }
   887                           ;lcd_vision.c: 11: if (state_alarm == DESACTIVE){
   888  001A7C  0436               	decf	_state_alarm,w,c
   889  001A7E  A4D8               	btfss	status,2,c
   890  001A80  D00C               	goto	l2527
   891                           
   892                           ;lcd_vision.c: 12: lcd_gotoxy(1,1);
   893  001A82  0E01               	movlw	1
   894  001A84  6E05               	movwf	lcd_gotoxy@y,c
   895  001A86  0E01               	movlw	1
   896  001A88  EC75  F00E         	call	_lcd_gotoxy
   897                           
   898                           ;lcd_vision.c: 13: lcd_putrs("Alarm off");
   899  001A8C  0E4B               	movlw	low STR_21
   900  001A8E  6E09               	movwf	lcd_putrs@ptr,c
   901  001A90  0E0F               	movlw	high STR_21
   902  001A92  6E0A               	movwf	lcd_putrs@ptr+1,c
   903  001A94  EC8C  F00D         	call	_lcd_putrs	;wreg free
   904  001A98  D000               	goto	l2527
   905  001A9A                     l2527:
   906                           
   907                           ;lcd_vision.c: 14: }
   908                           ;lcd_vision.c: 16: if (state_alarm == TRIGGED){
   909  001A9A  0E02               	movlw	2
   910  001A9C  1836               	xorwf	_state_alarm,w,c
   911  001A9E  A4D8               	btfss	status,2,c
   912  001AA0  0012               	return	
   913                           
   914                           ;lcd_vision.c: 17: lcd_gotoxy(1,1);
   915  001AA2  0E01               	movlw	1
   916  001AA4  6E05               	movwf	lcd_gotoxy@y,c
   917  001AA6  0E01               	movlw	1
   918  001AA8  EC75  F00E         	call	_lcd_gotoxy
   919                           
   920                           ;lcd_vision.c: 18: lcd_putrs("Alarm trigged");
   921  001AAC  0E30               	movlw	low STR_22
   922  001AAE  6E09               	movwf	lcd_putrs@ptr,c
   923  001AB0  0E0F               	movlw	high STR_22
   924  001AB2  6E0A               	movwf	lcd_putrs@ptr+1,c
   925  001AB4  EC8C  F00D         	call	_lcd_putrs	;wreg free
   926  001AB8  0012               	return	
   927  001ABA  0012               	return		;funcret
   928  001ABC                     __end_of_set_vision:
   929                           	opt stack 0
   930                           tblptru	equ	0xFF8
   931                           tblptrh	equ	0xFF7
   932                           tblptrl	equ	0xFF6
   933                           tablat	equ	0xFF5
   934                           postinc0	equ	0xFEE
   935                           wreg	equ	0xFE8
   936                           postdec1	equ	0xFE5
   937                           fsr1l	equ	0xFE1
   938                           status	equ	0xFD8
   939                           
   940 ;; *************** function _read_keyboard *****************
   941 ;; Defined at:
   942 ;;		line 4 in file "keyboard.c"
   943 ;; Parameters:    Size  Location     Type
   944 ;;		None
   945 ;; Auto vars:     Size  Location     Type
   946 ;;		None
   947 ;; Return value:  Size  Location     Type
   948 ;;                  1    wreg      unsigned char 
   949 ;; Registers used:
   950 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   951 ;; Tracked objects:
   952 ;;		On entry : 0/0
   953 ;;		On exit  : 0/0
   954 ;;		Unchanged: 0/0
   955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   958 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   959 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   960 ;;Total ram usage:        1 bytes
   961 ;; Hardware stack levels used:    1
   962 ;; Hardware stack levels required when called:    5
   963 ;; This function calls:
   964 ;;		_lcd_putrs
   965 ;;		_sprintf
   966 ;; This function is called by:
   967 ;;		_main
   968 ;; This function uses a non-reentrant model
   969 ;;
   970                           
   971                           	psect	text2
   972  000F7A                     __ptext2:
   973                           	opt stack 0
   974  000F7A                     _read_keyboard:
   975                           	opt stack 25
   976                           
   977                           ;keyboard.c: 5: LATAbits.LATA0=1;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=0;
   978                           
   979                           ;incstack = 0
   980  000F7A  8089               	bsf	3977,0,c	;volatile
   981  000F7C  9289               	bcf	3977,1,c	;volatile
   982  000F7E  9489               	bcf	3977,2,c	;volatile
   983  000F80  9689               	bcf	3977,3,c	;volatile
   984                           
   985                           ;keyboard.c: 6: {
   986                           ;keyboard.c: 7: if (PORTAbits.RA5==1){key=1;sprintf(buffer2,"%01u",key);lcd_putrs(buffer
      +                          2);while(PORTAbits.RA5==1){};}
   987  000F82  AA80               	btfss	3968,5,c	;volatile
   988  000F84  D018               	goto	l201
   989  000F86  0E01               	movlw	1
   990  000F88  6E35               	movwf	_key,c
   991  000F8A  0E78               	movlw	low _buffer2
   992  000F8C  6E0D               	movwf	sprintf@sp,c
   993  000F8E  0E00               	movlw	high _buffer2
   994  000F90  6E0E               	movwf	sprintf@sp+1,c
   995  000F92  0E68               	movlw	low STR_4
   996  000F94  6E0F               	movwf	sprintf@f,c
   997  000F96  0E0F               	movlw	high STR_4
   998  000F98  6E10               	movwf	sprintf@f+1,c
   999  000F9A  C035  F011         	movff	_key,?_sprintf+4
  1000  000F9E  6A12               	clrf	?_sprintf+5,c
  1001  000FA0  EC2C  F009         	call	_sprintf	;wreg free
  1002  000FA4  0E78               	movlw	low _buffer2
  1003  000FA6  6E09               	movwf	lcd_putrs@ptr,c
  1004  000FA8  0E00               	movlw	high _buffer2
  1005  000FAA  6E0A               	movwf	lcd_putrs@ptr+1,c
  1006  000FAC  EC8C  F00D         	call	_lcd_putrs	;wreg free
  1007  000FB0  D000               	goto	l202
  1008  000FB2                     l202:
  1009  000FB2  BA80               	btfsc	3968,5,c	;volatile
  1010  000FB4  D7FE               	goto	l202
  1011  000FB6                     l201:
  1012                           
  1013                           ;keyboard.c: 8: if (PORTAbits.RA7==1){key=2;sprintf(buffer2,"%01u",key);lcd_putrs(buffer
      +                          2);while(PORTAbits.RA7==1){};}
  1014  000FB6  AE80               	btfss	3968,7,c	;volatile
  1015  000FB8  D018               	goto	l205
  1016  000FBA  0E02               	movlw	2
  1017  000FBC  6E35               	movwf	_key,c
  1018  000FBE  0E78               	movlw	low _buffer2
  1019  000FC0  6E0D               	movwf	sprintf@sp,c
  1020  000FC2  0E00               	movlw	high _buffer2
  1021  000FC4  6E0E               	movwf	sprintf@sp+1,c
  1022  000FC6  0E68               	movlw	low STR_4
  1023  000FC8  6E0F               	movwf	sprintf@f,c
  1024  000FCA  0E0F               	movlw	high STR_4
  1025  000FCC  6E10               	movwf	sprintf@f+1,c
  1026  000FCE  C035  F011         	movff	_key,?_sprintf+4
  1027  000FD2  6A12               	clrf	?_sprintf+5,c
  1028  000FD4  EC2C  F009         	call	_sprintf	;wreg free
  1029  000FD8  0E78               	movlw	low _buffer2
  1030  000FDA  6E09               	movwf	lcd_putrs@ptr,c
  1031  000FDC  0E00               	movlw	high _buffer2
  1032  000FDE  6E0A               	movwf	lcd_putrs@ptr+1,c
  1033  000FE0  EC8C  F00D         	call	_lcd_putrs	;wreg free
  1034  000FE4  D000               	goto	l206
  1035  000FE6                     l206:
  1036  000FE6  BE80               	btfsc	3968,7,c	;volatile
  1037  000FE8  D7FE               	goto	l206
  1038  000FEA                     l205:
  1039                           
  1040                           ;keyboard.c: 9: if (PORTAbits.RA6==1){key=3;sprintf(buffer2,"%01u",key);lcd_putrs(buffer
      +                          2);while(PORTAbits.RA6==1){};}
  1041  000FEA  AC80               	btfss	3968,6,c	;volatile
  1042  000FEC  D018               	goto	l209
  1043  000FEE  0E03               	movlw	3
  1044  000FF0  6E35               	movwf	_key,c
  1045  000FF2  0E78               	movlw	low _buffer2
  1046  000FF4  6E0D               	movwf	sprintf@sp,c
  1047  000FF6  0E00               	movlw	high _buffer2
  1048  000FF8  6E0E               	movwf	sprintf@sp+1,c
  1049  000FFA  0E68               	movlw	low STR_4
  1050  000FFC  6E0F               	movwf	sprintf@f,c
  1051  000FFE  0E0F               	movlw	high STR_4
  1052  001000  6E10               	movwf	sprintf@f+1,c
  1053  001002  C035  F011         	movff	_key,?_sprintf+4
  1054  001006  6A12               	clrf	?_sprintf+5,c
  1055  001008  EC2C  F009         	call	_sprintf	;wreg free
  1056  00100C  0E78               	movlw	low _buffer2
  1057  00100E  6E09               	movwf	lcd_putrs@ptr,c
  1058  001010  0E00               	movlw	high _buffer2
  1059  001012  6E0A               	movwf	lcd_putrs@ptr+1,c
  1060  001014  EC8C  F00D         	call	_lcd_putrs	;wreg free
  1061  001018  D000               	goto	l210
  1062  00101A                     l210:
  1063  00101A  BC80               	btfsc	3968,6,c	;volatile
  1064  00101C  D7FE               	goto	l210
  1065  00101E                     l209:
  1066                           
  1067                           ;keyboard.c: 10: if (PORTCbits.RC2==1){key=11;lcd_putrs("A");while(PORTCbits.RC2==1){};}
  1068  00101E  A482               	btfss	3970,2,c	;volatile
  1069  001020  D00B               	goto	l213
  1070  001022  0E0B               	movlw	11
  1071  001024  6E35               	movwf	_key,c
  1072  001026  0E71               	movlw	low STR_7
  1073  001028  6E09               	movwf	lcd_putrs@ptr,c
  1074  00102A  0E0F               	movlw	high STR_7
  1075  00102C  6E0A               	movwf	lcd_putrs@ptr+1,c
  1076  00102E  EC8C  F00D         	call	_lcd_putrs	;wreg free
  1077  001032  D000               	goto	l214
  1078  001034                     l214:
  1079  001034  B482               	btfsc	3970,2,c	;volatile
  1080  001036  D7FE               	goto	l214
  1081  001038                     l213:
  1082                           
  1083                           ;keyboard.c: 11: }
  1084                           ;keyboard.c: 12: LATAbits.LATA0=0;LATAbits.LATA1=1;LATAbits.LATA2=0;LATAbits.LATA3=0;
  1085  001038  9089               	bcf	3977,0,c	;volatile
  1086  00103A  8289               	bsf	3977,1,c	;volatile
  1087  00103C  9489               	bcf	3977,2,c	;volatile
  1088  00103E  9689               	bcf	3977,3,c	;volatile
  1089                           
  1090                           ;keyboard.c: 13: {
  1091                           ;keyboard.c: 14: if (PORTAbits.RA5==1){key=4;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA5==1){};}
  1092  001040  AA80               	btfss	3968,5,c	;volatile
  1093  001042  D018               	goto	l217
  1094  001044  0E04               	movlw	4
  1095  001046  6E35               	movwf	_key,c
  1096  001048  0E78               	movlw	low _buffer2
  1097  00104A  6E0D               	movwf	sprintf@sp,c
  1098  00104C  0E00               	movlw	high _buffer2
  1099  00104E  6E0E               	movwf	sprintf@sp+1,c
  1100  001050  0E68               	movlw	low STR_4
  1101  001052  6E0F               	movwf	sprintf@f,c
  1102  001054  0E0F               	movlw	high STR_4
  1103  001056  6E10               	movwf	sprintf@f+1,c
  1104  001058  C035  F011         	movff	_key,?_sprintf+4
  1105  00105C  6A12               	clrf	?_sprintf+5,c
  1106  00105E  EC2C  F009         	call	_sprintf	;wreg free
  1107  001062  0E78               	movlw	low _buffer2
  1108  001064  6E09               	movwf	lcd_putrs@ptr,c
  1109  001066  0E00               	movlw	high _buffer2
  1110  001068  6E0A               	movwf	lcd_putrs@ptr+1,c
  1111  00106A  EC8C  F00D         	call	_lcd_putrs	;wreg free
  1112  00106E  D000               	goto	l218
  1113  001070                     l218:
  1114  001070  BA80               	btfsc	3968,5,c	;volatile
  1115  001072  D7FE               	goto	l218
  1116  001074                     l217:
  1117                           
  1118                           ;keyboard.c: 15: if (PORTAbits.RA7==1){key=5;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  1119  001074  AE80               	btfss	3968,7,c	;volatile
  1120  001076  D018               	goto	l221
  1121  001078  0E05               	movlw	5
  1122  00107A  6E35               	movwf	_key,c
  1123  00107C  0E78               	movlw	low _buffer2
  1124  00107E  6E0D               	movwf	sprintf@sp,c
  1125  001080  0E00               	movlw	high _buffer2
  1126  001082  6E0E               	movwf	sprintf@sp+1,c
  1127  001084  0E68               	movlw	low STR_4
  1128  001086  6E0F               	movwf	sprintf@f,c
  1129  001088  0E0F               	movlw	high STR_4
  1130  00108A  6E10               	movwf	sprintf@f+1,c
  1131  00108C  C035  F011         	movff	_key,?_sprintf+4
  1132  001090  6A12               	clrf	?_sprintf+5,c
  1133  001092  EC2C  F009         	call	_sprintf	;wreg free
  1134  001096  0E78               	movlw	low _buffer2
  1135  001098  6E09               	movwf	lcd_putrs@ptr,c
  1136  00109A  0E00               	movlw	high _buffer2
  1137  00109C  6E0A               	movwf	lcd_putrs@ptr+1,c
  1138  00109E  EC8C  F00D         	call	_lcd_putrs	;wreg free
  1139  0010A2  D000               	goto	l222
  1140  0010A4                     l222:
  1141  0010A4  BE80               	btfsc	3968,7,c	;volatile
  1142  0010A6  D7FE               	goto	l222
  1143  0010A8                     l221:
  1144                           
  1145                           ;keyboard.c: 16: if (PORTAbits.RA6==1){key=6;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA6==1){};}
  1146  0010A8  AC80               	btfss	3968,6,c	;volatile
  1147  0010AA  D018               	goto	l225
  1148  0010AC  0E06               	movlw	6
  1149  0010AE  6E35               	movwf	_key,c
  1150  0010B0  0E78               	movlw	low _buffer2
  1151  0010B2  6E0D               	movwf	sprintf@sp,c
  1152  0010B4  0E00               	movlw	high _buffer2
  1153  0010B6  6E0E               	movwf	sprintf@sp+1,c
  1154  0010B8  0E68               	movlw	low STR_4
  1155  0010BA  6E0F               	movwf	sprintf@f,c
  1156  0010BC  0E0F               	movlw	high STR_4
  1157  0010BE  6E10               	movwf	sprintf@f+1,c
  1158  0010C0  C035  F011         	movff	_key,?_sprintf+4
  1159  0010C4  6A12               	clrf	?_sprintf+5,c
  1160  0010C6  EC2C  F009         	call	_sprintf	;wreg free
  1161  0010CA  0E78               	movlw	low _buffer2
  1162  0010CC  6E09               	movwf	lcd_putrs@ptr,c
  1163  0010CE  0E00               	movlw	high _buffer2
  1164  0010D0  6E0A               	movwf	lcd_putrs@ptr+1,c
  1165  0010D2  EC8C  F00D         	call	_lcd_putrs	;wreg free
  1166  0010D6  D000               	goto	l226
  1167  0010D8                     l226:
  1168  0010D8  BC80               	btfsc	3968,6,c	;volatile
  1169  0010DA  D7FE               	goto	l226
  1170  0010DC                     l225:
  1171                           
  1172                           ;keyboard.c: 17: if (PORTCbits.RC2==1){key=12;lcd_putrs("B");while(PORTCbits.RC2==1){};}
  1173  0010DC  A482               	btfss	3970,2,c	;volatile
  1174  0010DE  D00B               	goto	l229
  1175  0010E0  0E0C               	movlw	12
  1176  0010E2  6E35               	movwf	_key,c
  1177  0010E4  0E73               	movlw	low STR_11
  1178  0010E6  6E09               	movwf	lcd_putrs@ptr,c
  1179  0010E8  0E0F               	movlw	high STR_11
  1180  0010EA  6E0A               	movwf	lcd_putrs@ptr+1,c
  1181  0010EC  EC8C  F00D         	call	_lcd_putrs	;wreg free
  1182  0010F0  D000               	goto	l230
  1183  0010F2                     l230:
  1184  0010F2  B482               	btfsc	3970,2,c	;volatile
  1185  0010F4  D7FE               	goto	l230
  1186  0010F6                     l229:
  1187                           
  1188                           ;keyboard.c: 18: }
  1189                           ;keyboard.c: 19: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=1;LATAbits.LATA3=0;
  1190  0010F6  9089               	bcf	3977,0,c	;volatile
  1191  0010F8  9289               	bcf	3977,1,c	;volatile
  1192  0010FA  8489               	bsf	3977,2,c	;volatile
  1193  0010FC  9689               	bcf	3977,3,c	;volatile
  1194                           
  1195                           ;keyboard.c: 20: {
  1196                           ;keyboard.c: 21: if (PORTAbits.RA5==1){key=7;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA5==1){};}
  1197  0010FE  AA80               	btfss	3968,5,c	;volatile
  1198  001100  D018               	goto	l233
  1199  001102  0E07               	movlw	7
  1200  001104  6E35               	movwf	_key,c
  1201  001106  0E78               	movlw	low _buffer2
  1202  001108  6E0D               	movwf	sprintf@sp,c
  1203  00110A  0E00               	movlw	high _buffer2
  1204  00110C  6E0E               	movwf	sprintf@sp+1,c
  1205  00110E  0E68               	movlw	low STR_4
  1206  001110  6E0F               	movwf	sprintf@f,c
  1207  001112  0E0F               	movlw	high STR_4
  1208  001114  6E10               	movwf	sprintf@f+1,c
  1209  001116  C035  F011         	movff	_key,?_sprintf+4
  1210  00111A  6A12               	clrf	?_sprintf+5,c
  1211  00111C  EC2C  F009         	call	_sprintf	;wreg free
  1212  001120  0E78               	movlw	low _buffer2
  1213  001122  6E09               	movwf	lcd_putrs@ptr,c
  1214  001124  0E00               	movlw	high _buffer2
  1215  001126  6E0A               	movwf	lcd_putrs@ptr+1,c
  1216  001128  EC8C  F00D         	call	_lcd_putrs	;wreg free
  1217  00112C  D000               	goto	l234
  1218  00112E                     l234:
  1219  00112E  BA80               	btfsc	3968,5,c	;volatile
  1220  001130  D7FE               	goto	l234
  1221  001132                     l233:
  1222                           
  1223                           ;keyboard.c: 22: if (PORTAbits.RA7==1){key=8;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  1224  001132  AE80               	btfss	3968,7,c	;volatile
  1225  001134  D018               	goto	l237
  1226  001136  0E08               	movlw	8
  1227  001138  6E35               	movwf	_key,c
  1228  00113A  0E78               	movlw	low _buffer2
  1229  00113C  6E0D               	movwf	sprintf@sp,c
  1230  00113E  0E00               	movlw	high _buffer2
  1231  001140  6E0E               	movwf	sprintf@sp+1,c
  1232  001142  0E68               	movlw	low STR_4
  1233  001144  6E0F               	movwf	sprintf@f,c
  1234  001146  0E0F               	movlw	high STR_4
  1235  001148  6E10               	movwf	sprintf@f+1,c
  1236  00114A  C035  F011         	movff	_key,?_sprintf+4
  1237  00114E  6A12               	clrf	?_sprintf+5,c
  1238  001150  EC2C  F009         	call	_sprintf	;wreg free
  1239  001154  0E78               	movlw	low _buffer2
  1240  001156  6E09               	movwf	lcd_putrs@ptr,c
  1241  001158  0E00               	movlw	high _buffer2
  1242  00115A  6E0A               	movwf	lcd_putrs@ptr+1,c
  1243  00115C  EC8C  F00D         	call	_lcd_putrs	;wreg free
  1244  001160  D000               	goto	l238
  1245  001162                     l238:
  1246  001162  BE80               	btfsc	3968,7,c	;volatile
  1247  001164  D7FE               	goto	l238
  1248  001166                     l237:
  1249                           
  1250                           ;keyboard.c: 23: if (PORTAbits.RA6==1){key=9;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA6==1){};}
  1251  001166  AC80               	btfss	3968,6,c	;volatile
  1252  001168  D018               	goto	l241
  1253  00116A  0E09               	movlw	9
  1254  00116C  6E35               	movwf	_key,c
  1255  00116E  0E78               	movlw	low _buffer2
  1256  001170  6E0D               	movwf	sprintf@sp,c
  1257  001172  0E00               	movlw	high _buffer2
  1258  001174  6E0E               	movwf	sprintf@sp+1,c
  1259  001176  0E68               	movlw	low STR_4
  1260  001178  6E0F               	movwf	sprintf@f,c
  1261  00117A  0E0F               	movlw	high STR_4
  1262  00117C  6E10               	movwf	sprintf@f+1,c
  1263  00117E  C035  F011         	movff	_key,?_sprintf+4
  1264  001182  6A12               	clrf	?_sprintf+5,c
  1265  001184  EC2C  F009         	call	_sprintf	;wreg free
  1266  001188  0E78               	movlw	low _buffer2
  1267  00118A  6E09               	movwf	lcd_putrs@ptr,c
  1268  00118C  0E00               	movlw	high _buffer2
  1269  00118E  6E0A               	movwf	lcd_putrs@ptr+1,c
  1270  001190  EC8C  F00D         	call	_lcd_putrs	;wreg free
  1271  001194  D000               	goto	l242
  1272  001196                     l242:
  1273  001196  BC80               	btfsc	3968,6,c	;volatile
  1274  001198  D7FE               	goto	l242
  1275  00119A                     l241:
  1276                           
  1277                           ;keyboard.c: 24: if (PORTCbits.RC2==1){key=13;lcd_putrs("C");while(PORTCbits.RC2==1){};}
  1278  00119A  A482               	btfss	3970,2,c	;volatile
  1279  00119C  D00B               	goto	l245
  1280  00119E  0E0D               	movlw	13
  1281  0011A0  6E35               	movwf	_key,c
  1282  0011A2  0E75               	movlw	low STR_15
  1283  0011A4  6E09               	movwf	lcd_putrs@ptr,c
  1284  0011A6  0E0F               	movlw	high STR_15
  1285  0011A8  6E0A               	movwf	lcd_putrs@ptr+1,c
  1286  0011AA  EC8C  F00D         	call	_lcd_putrs	;wreg free
  1287  0011AE  D000               	goto	l246
  1288  0011B0                     l246:
  1289  0011B0  B482               	btfsc	3970,2,c	;volatile
  1290  0011B2  D7FE               	goto	l246
  1291  0011B4                     l245:
  1292                           
  1293                           ;keyboard.c: 25: }
  1294                           ;keyboard.c: 26: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=1;
  1295  0011B4  9089               	bcf	3977,0,c	;volatile
  1296  0011B6  9289               	bcf	3977,1,c	;volatile
  1297  0011B8  9489               	bcf	3977,2,c	;volatile
  1298  0011BA  8689               	bsf	3977,3,c	;volatile
  1299                           
  1300                           ;keyboard.c: 27: {
  1301                           ;keyboard.c: 28: if (PORTAbits.RA5==1){key=14;lcd_putrs("*");while(PORTAbits.RA5==1){};}
  1302  0011BC  AA80               	btfss	3968,5,c	;volatile
  1303  0011BE  D00B               	goto	l249
  1304  0011C0  0E0E               	movlw	14
  1305  0011C2  6E35               	movwf	_key,c
  1306  0011C4  0E6F               	movlw	low STR_16
  1307  0011C6  6E09               	movwf	lcd_putrs@ptr,c
  1308  0011C8  0E0F               	movlw	high STR_16
  1309  0011CA  6E0A               	movwf	lcd_putrs@ptr+1,c
  1310  0011CC  EC8C  F00D         	call	_lcd_putrs	;wreg free
  1311  0011D0  D000               	goto	l250
  1312  0011D2                     l250:
  1313  0011D2  BA80               	btfsc	3968,5,c	;volatile
  1314  0011D4  D7FE               	goto	l250
  1315  0011D6                     l249:
  1316                           
  1317                           ;keyboard.c: 29: if (PORTAbits.RA7==1){key=0;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  1318  0011D6  AE80               	btfss	3968,7,c	;volatile
  1319  0011D8  D018               	goto	l253
  1320  0011DA  0E00               	movlw	0
  1321  0011DC  6E35               	movwf	_key,c
  1322  0011DE  0E78               	movlw	low _buffer2
  1323  0011E0  6E0D               	movwf	sprintf@sp,c
  1324  0011E2  0E00               	movlw	high _buffer2
  1325  0011E4  6E0E               	movwf	sprintf@sp+1,c
  1326  0011E6  0E68               	movlw	low STR_4
  1327  0011E8  6E0F               	movwf	sprintf@f,c
  1328  0011EA  0E0F               	movlw	high STR_4
  1329  0011EC  6E10               	movwf	sprintf@f+1,c
  1330  0011EE  C035  F011         	movff	_key,?_sprintf+4
  1331  0011F2  6A12               	clrf	?_sprintf+5,c
  1332  0011F4  EC2C  F009         	call	_sprintf	;wreg free
  1333  0011F8  0E78               	movlw	low _buffer2
  1334  0011FA  6E09               	movwf	lcd_putrs@ptr,c
  1335  0011FC  0E00               	movlw	high _buffer2
  1336  0011FE  6E0A               	movwf	lcd_putrs@ptr+1,c
  1337  001200  EC8C  F00D         	call	_lcd_putrs	;wreg free
  1338  001204  D000               	goto	l254
  1339  001206                     l254:
  1340  001206  BE80               	btfsc	3968,7,c	;volatile
  1341  001208  D7FE               	goto	l254
  1342  00120A                     l253:
  1343                           
  1344                           ;keyboard.c: 30: if (PORTAbits.RA6==1){key=15;lcd_putrs("#");while(PORTAbits.RA6==1){};}
  1345  00120A  AC80               	btfss	3968,6,c	;volatile
  1346  00120C  D00B               	goto	l257
  1347  00120E  0E0F               	movlw	15
  1348  001210  6E35               	movwf	_key,c
  1349  001212  0E6D               	movlw	low STR_18
  1350  001214  6E09               	movwf	lcd_putrs@ptr,c
  1351  001216  0E0F               	movlw	high STR_18
  1352  001218  6E0A               	movwf	lcd_putrs@ptr+1,c
  1353  00121A  EC8C  F00D         	call	_lcd_putrs	;wreg free
  1354  00121E  D000               	goto	l258
  1355  001220                     l258:
  1356  001220  BC80               	btfsc	3968,6,c	;volatile
  1357  001222  D7FE               	goto	l258
  1358  001224                     l257:
  1359                           
  1360                           ;keyboard.c: 31: if (PORTCbits.RC2==1){key=16;lcd_putrs("D");while(PORTCbits.RC2==1){};}
  1361  001224  A482               	btfss	3970,2,c	;volatile
  1362  001226  D00D               	goto	l2619
  1363  001228  0E10               	movlw	16
  1364  00122A  6E35               	movwf	_key,c
  1365  00122C  0E77               	movlw	low STR_19
  1366  00122E  6E09               	movwf	lcd_putrs@ptr,c
  1367  001230  0E0F               	movlw	high STR_19
  1368  001232  6E0A               	movwf	lcd_putrs@ptr+1,c
  1369  001234  EC8C  F00D         	call	_lcd_putrs	;wreg free
  1370  001238  D000               	goto	l262
  1371  00123A                     l262:
  1372  00123A  A482               	btfss	3970,2,c	;volatile
  1373  00123C  D002               	goto	l2619
  1374  00123E  D7FD               	goto	l262
  1375  001240  D000               	goto	l2619
  1376  001242                     l2619:
  1377                           
  1378                           ;keyboard.c: 32: }
  1379                           ;keyboard.c: 33: _delay((unsigned long)((98)*(8000000/4000.0)));
  1380  001242  0EFF               	movlw	255
  1381  001244  6E20               	movwf	??_read_keyboard& (0+255),c
  1382  001246  0E8A               	movlw	138
  1383  001248                     u2387:
  1384  001248  2EE8               	decfsz	wreg,f,c
  1385  00124A  D7FE               	goto	u2387
  1386  00124C  2E20               	decfsz	??_read_keyboard& (0+255),f,c
  1387  00124E  D7FC               	goto	u2387
  1388  001250  D000               	nop2	
  1389                           
  1390                           ;keyboard.c: 36: return key;
  1391  001252  5035               	movf	_key,w,c
  1392  001254  0012               	return	
  1393  001256  0012               	return		;funcret
  1394  001258                     __end_of_read_keyboard:
  1395                           	opt stack 0
  1396                           tblptru	equ	0xFF8
  1397                           tblptrh	equ	0xFF7
  1398                           tblptrl	equ	0xFF6
  1399                           tablat	equ	0xFF5
  1400                           postinc0	equ	0xFEE
  1401                           wreg	equ	0xFE8
  1402                           postdec1	equ	0xFE5
  1403                           fsr1l	equ	0xFE1
  1404                           status	equ	0xFD8
  1405                           
  1406 ;; *************** function _sprintf *****************
  1407 ;; Defined at:
  1408 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\doprnt.c"
  1409 ;; Parameters:    Size  Location     Type
  1410 ;;  sp              2   12[COMRAM] PTR unsigned char 
  1411 ;;		 -> buffer2(20), 
  1412 ;;  f               2   14[COMRAM] PTR const unsigned char 
  1413 ;;		 -> STR_17(5), STR_14(5), STR_13(5), STR_12(5), 
  1414 ;;		 -> STR_10(5), STR_9(5), STR_8(5), STR_6(5), 
  1415 ;;		 -> STR_5(5), STR_4(5), 
  1416 ;; Auto vars:     Size  Location     Type
  1417 ;;  tmpval          4    0        struct .
  1418 ;;  cp              3    0        PTR const unsigned char 
  1419 ;;  width           2   28[COMRAM] int 
  1420 ;;  val             2   25[COMRAM] unsigned int 
  1421 ;;  ap              2   22[COMRAM] PTR void [1]
  1422 ;;		 -> ?_sprintf(2), 
  1423 ;;  len             2    0        unsigned int 
  1424 ;;  c               1   30[COMRAM] char 
  1425 ;;  prec            1   27[COMRAM] char 
  1426 ;;  flag            1   24[COMRAM] unsigned char 
  1427 ;; Return value:  Size  Location     Type
  1428 ;;                  2   12[COMRAM] int 
  1429 ;; Registers used:
  1430 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1431 ;; Tracked objects:
  1432 ;;		On entry : 0/0
  1433 ;;		On exit  : 0/0
  1434 ;;		Unchanged: 0/0
  1435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1436 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1437 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1438 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1439 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1440 ;;Total ram usage:       19 bytes
  1441 ;; Hardware stack levels used:    1
  1442 ;; Hardware stack levels required when called:    1
  1443 ;; This function calls:
  1444 ;;		___lwdiv
  1445 ;;		___lwmod
  1446 ;;		___wmul
  1447 ;;		_isdigit
  1448 ;; This function is called by:
  1449 ;;		_read_keyboard
  1450 ;; This function uses a non-reentrant model
  1451 ;;
  1452                           
  1453                           	psect	text3
  1454  001258                     __ptext3:
  1455                           	opt stack 0
  1456  001258                     _sprintf:
  1457                           	opt stack 28
  1458                           
  1459                           ;doprnt.c: 494: va_list ap;
  1460                           ;doprnt.c: 499: signed char c;
  1461                           ;doprnt.c: 501: int width;
  1462                           ;doprnt.c: 506: signed char prec;
  1463                           ;doprnt.c: 508: unsigned char flag;
  1464                           ;doprnt.c: 523: union {
  1465                           ;doprnt.c: 524: unsigned long vd;
  1466                           ;doprnt.c: 525: double integ;
  1467                           ;doprnt.c: 526: } tmpval;
  1468                           ;doprnt.c: 528: unsigned int val;
  1469                           ;doprnt.c: 529: unsigned len;
  1470                           ;doprnt.c: 530: const char * cp;
  1471                           ;doprnt.c: 533: *ap = __va_start();
  1472                           
  1473                           ;incstack = 0
  1474  001258  0E11               	movlw	low (?_sprintf+4)
  1475  00125A  6E17               	movwf	sprintf@ap,c
  1476  00125C  0E00               	movlw	high (?_sprintf+4)
  1477  00125E  6E18               	movwf	sprintf@ap+1,c
  1478                           
  1479                           ;doprnt.c: 536: while(c = *f++) {
  1480  001260  D117               	goto	l2483
  1481  001262                     l2401:
  1482                           
  1483                           ;doprnt.c: 538: if(c != '%')
  1484  001262  0E25               	movlw	37
  1485  001264  181F               	xorwf	sprintf@c,w,c
  1486  001266  B4D8               	btfsc	status,2,c
  1487  001268  D009               	goto	l2407
  1488                           
  1489                           ;doprnt.c: 540: {
  1490                           ;doprnt.c: 541: ((*sp++ = (c)));
  1491  00126A  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1492  00126E  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1493  001272  C01F  FFDF         	movff	sprintf@c,indf2
  1494  001276  4A0D               	infsnz	sprintf@sp,f,c
  1495  001278  2A0E               	incf	sprintf@sp+1,f,c
  1496                           
  1497                           ;doprnt.c: 542: continue;
  1498  00127A  D10A               	goto	l2483
  1499  00127C                     l2407:
  1500                           
  1501                           ;doprnt.c: 543: }
  1502                           ;doprnt.c: 546: width = 0;
  1503  00127C  0E00               	movlw	0
  1504  00127E  6E1E               	movwf	sprintf@width+1,c
  1505  001280  0E00               	movlw	0
  1506  001282  6E1D               	movwf	sprintf@width,c
  1507                           
  1508                           ;doprnt.c: 548: flag = 0;
  1509  001284  0E00               	movlw	0
  1510  001286  6E19               	movwf	sprintf@flag,c
  1511                           
  1512                           ;doprnt.c: 551: switch(*f) {
  1513                           
  1514                           ;doprnt.c: 550: for(;;) {
  1515  001288  D005               	goto	l2413
  1516  00128A                     l2409:
  1517                           
  1518                           ;doprnt.c: 580: flag |= 0x04;
  1519  00128A  8419               	bsf	sprintf@flag,2,c
  1520                           
  1521                           ;doprnt.c: 581: f++;
  1522  00128C  4A0F               	infsnz	sprintf@f,f,c
  1523  00128E  2A10               	incf	sprintf@f+1,f,c
  1524                           
  1525                           ;doprnt.c: 582: continue;
  1526  001290  D001               	goto	l2413
  1527                           
  1528                           ;doprnt.c: 584: }
  1529  001292  D00B               	goto	l2415
  1530  001294                     l2413:
  1531  001294  C00F  FFF6         	movff	sprintf@f,tblptrl
  1532  001298  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1533  00129C                     	if	0	;tblptru may be non-zero
  1534  00129C                     	endif
  1535  00129C                     	if	0	;tblptru may be non-zero
  1536  00129C                     	endif
  1537  00129C  0008               	tblrd		*
  1538  00129E  50F5               	movf	tablat,w,c
  1539                           
  1540                           ; Switch size 1, requested type "space"
  1541                           ; Number of cases is 1, Range of values is 48 to 48
  1542                           ; switch strategies available:
  1543                           ; Name         Instructions Cycles
  1544                           ; simple_byte            4     3 (average)
  1545                           ;	Chosen strategy is simple_byte
  1546  0012A0  0A30               	xorlw	48	; case 48
  1547  0012A2  B4D8               	btfsc	status,2,c
  1548  0012A4  D7F2               	goto	l2409
  1549                           
  1550                           ;doprnt.c: 585: break;
  1551  0012A6  D001               	goto	l2415
  1552                           
  1553                           ;doprnt.c: 586: }
  1554  0012A8  D7F5               	goto	l2413
  1555  0012AA                     l2415:
  1556                           
  1557                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1558  0012AA  C00F  FFF6         	movff	sprintf@f,tblptrl
  1559  0012AE  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1560  0012B2                     	if	0	;tblptru may be non-zero
  1561  0012B2                     	endif
  1562  0012B2                     	if	0	;tblptru may be non-zero
  1563  0012B2                     	endif
  1564  0012B2  0008               	tblrd		*
  1565  0012B4  50F5               	movf	tablat,w,c
  1566  0012B6  EC87  F00E         	call	_isdigit
  1567  0012BA  A0D8               	btfss	status,0,c
  1568  0012BC  D03A               	goto	l2431
  1569                           
  1570                           ;doprnt.c: 598: width = 0;
  1571  0012BE  0E00               	movlw	0
  1572  0012C0  6E1E               	movwf	sprintf@width+1,c
  1573  0012C2  0E00               	movlw	0
  1574  0012C4  6E1D               	movwf	sprintf@width,c
  1575  0012C6  D000               	goto	l2419
  1576  0012C8                     l2419:
  1577                           
  1578                           ;doprnt.c: 600: width *= 10;
  1579  0012C8  C01D  F001         	movff	sprintf@width,___wmul@multiplier
  1580  0012CC  C01E  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  1581  0012D0  0E00               	movlw	0
  1582  0012D2  6E04               	movwf	___wmul@multiplicand+1,c
  1583  0012D4  0E0A               	movlw	10
  1584  0012D6  6E03               	movwf	___wmul@multiplicand,c
  1585  0012D8  EC61  F00E         	call	___wmul	;wreg free
  1586  0012DC  C001  F01D         	movff	?___wmul,sprintf@width
  1587  0012E0  C002  F01E         	movff	?___wmul+1,sprintf@width+1
  1588                           
  1589                           ;doprnt.c: 601: width += *f++ - '0';
  1590  0012E4  0ED0               	movlw	208
  1591  0012E6  6E13               	movwf	??_sprintf& (0+255),c
  1592  0012E8  0EFF               	movlw	255
  1593  0012EA  6E14               	movwf	(??_sprintf+1)& (0+255),c
  1594  0012EC  C00F  FFF6         	movff	sprintf@f,tblptrl
  1595  0012F0  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1596  0012F4                     	if	0	;tblptru may be non-zero
  1597  0012F4                     	endif
  1598  0012F4                     	if	0	;tblptru may be non-zero
  1599  0012F4                     	endif
  1600  0012F4  0008               	tblrd		*
  1601  0012F6  50F5               	movf	tablat,w,c
  1602  0012F8  6E15               	movwf	(??_sprintf+2)& (0+255),c
  1603  0012FA  6A16               	clrf	(??_sprintf+3)& (0+255),c
  1604  0012FC  5013               	movf	??_sprintf,w,c
  1605  0012FE  2615               	addwf	??_sprintf+2,f,c
  1606  001300  5014               	movf	??_sprintf+1,w,c
  1607  001302  2216               	addwfc	??_sprintf+3,f,c
  1608  001304  5015               	movf	??_sprintf+2,w,c
  1609  001306  261D               	addwf	sprintf@width,f,c
  1610  001308  5016               	movf	??_sprintf+3,w,c
  1611  00130A  221E               	addwfc	sprintf@width+1,f,c
  1612  00130C  4A0F               	infsnz	sprintf@f,f,c
  1613  00130E  2A10               	incf	sprintf@f+1,f,c
  1614                           
  1615                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1616  001310  C00F  FFF6         	movff	sprintf@f,tblptrl
  1617  001314  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1618  001318                     	if	0	;tblptru may be non-zero
  1619  001318                     	endif
  1620  001318                     	if	0	;tblptru may be non-zero
  1621  001318                     	endif
  1622  001318  0008               	tblrd		*
  1623  00131A  50F5               	movf	tablat,w,c
  1624  00131C  EC87  F00E         	call	_isdigit
  1625  001320  A0D8               	btfss	status,0,c
  1626  001322  D007               	goto	l2431
  1627  001324  D7D1               	goto	l2419
  1628                           
  1629                           ;doprnt.c: 608: }
  1630                           ;doprnt.c: 635: switch(c = *f++) {
  1631  001326  D005               	goto	l2431
  1632                           
  1633                           ;doprnt.c: 638: goto alldone;
  1634                           
  1635                           ;doprnt.c: 637: case 0:
  1636  001328  D0C1               	goto	l2485
  1637                           
  1638                           ;doprnt.c: 813: continue;
  1639                           
  1640                           ;doprnt.c: 802: default:
  1641  00132A  D0B2               	goto	l2483
  1642  00132C                     l2427:
  1643                           
  1644                           ;doprnt.c: 818: flag |= 0xC0;
  1645  00132C  0EC0               	movlw	192
  1646  00132E  1219               	iorwf	sprintf@flag,f,c
  1647                           
  1648                           ;doprnt.c: 822: }
  1649                           
  1650                           ;doprnt.c: 819: break;
  1651  001330  D011               	goto	l2433
  1652  001332                     l2431:
  1653  001332  C00F  FFF6         	movff	sprintf@f,tblptrl
  1654  001336  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1655  00133A  4A0F               	infsnz	sprintf@f,f,c
  1656  00133C  2A10               	incf	sprintf@f+1,f,c
  1657  00133E                     	if	0	;tblptru may be non-zero
  1658  00133E                     	endif
  1659  00133E                     	if	0	;tblptru may be non-zero
  1660  00133E                     	endif
  1661  00133E  0008               	tblrd		*
  1662  001340  CFF5 F01F          	movff	tablat,sprintf@c
  1663  001344  501F               	movf	sprintf@c,w,c
  1664                           
  1665                           ; Switch size 1, requested type "space"
  1666                           ; Number of cases is 2, Range of values is 0 to 117
  1667                           ; switch strategies available:
  1668                           ; Name         Instructions Cycles
  1669                           ; simple_byte            7     4 (average)
  1670                           ;	Chosen strategy is simple_byte
  1671  001346  0A00               	xorlw	0	; case 0
  1672  001348  B4D8               	btfsc	status,2,c
  1673  00134A  D0B0               	goto	l2485
  1674  00134C  0A75               	xorlw	117	; case 117
  1675  00134E  B4D8               	btfsc	status,2,c
  1676  001350  D7ED               	goto	l2427
  1677  001352  D09E               	goto	l2483
  1678  001354                     l2433:
  1679                           
  1680                           ;doprnt.c: 1273: {
  1681                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1682  001354  C017  FFD9         	movff	sprintf@ap,fsr2l
  1683  001358  C018  FFDA         	movff	sprintf@ap+1,fsr2h
  1684  00135C  CFDE F01A          	movff	postinc2,sprintf@val
  1685  001360  CFDD F01B          	movff	postdec2,sprintf@val+1
  1686  001364  0E02               	movlw	2
  1687  001366  2617               	addwf	sprintf@ap,f,c
  1688  001368  0E00               	movlw	0
  1689  00136A  2218               	addwfc	sprintf@ap+1,f,c
  1690                           
  1691                           ;doprnt.c: 1287: }
  1692                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1693  00136C  0E01               	movlw	1
  1694  00136E  6E1F               	movwf	sprintf@c,c
  1695  001370                     l2439:
  1696  001370  0E05               	movlw	5
  1697  001372  181F               	xorwf	sprintf@c,w,c
  1698  001374  B4D8               	btfsc	status,2,c
  1699  001376  D016               	goto	l2451
  1700  001378  D001               	goto	l2443
  1701  00137A  D014               	goto	l2451
  1702  00137C                     l2443:
  1703                           
  1704                           ;doprnt.c: 1306: if(val < dpowers[c])
  1705  00137C  501F               	movf	sprintf@c,w,c
  1706  00137E  0D02               	mullw	2
  1707  001380  0E01               	movlw	low _dpowers
  1708  001382  24F3               	addwf	prodl,w,c
  1709  001384  6EF6               	movwf	tblptrl,c
  1710  001386  0E0F               	movlw	high _dpowers
  1711  001388  20F4               	addwfc	prodh,w,c
  1712  00138A  6EF7               	movwf	tblptrh,c
  1713  00138C                     	if	0	;There are less than 3 active tblptr bytes
  1714  00138C                     	endif
  1715  00138C  0009               	tblrd		*+
  1716  00138E  50F5               	movf	tablat,w,c
  1717  001390  5C1A               	subwf	sprintf@val,w,c
  1718  001392  0009               	tblrd		*+
  1719  001394  50F5               	movf	tablat,w,c
  1720  001396  581B               	subwfb	sprintf@val+1,w,c
  1721  001398  A0D8               	btfss	status,0,c
  1722  00139A  D004               	goto	l2451
  1723  00139C  D001               	goto	l2447
  1724                           
  1725                           ;doprnt.c: 1307: break;
  1726  00139E  D002               	goto	l2451
  1727  0013A0                     l2447:
  1728  0013A0  2A1F               	incf	sprintf@c,f,c
  1729  0013A2  D7E6               	goto	l2439
  1730  0013A4                     l2451:
  1731                           
  1732                           ;doprnt.c: 1381: if(width > c)
  1733  0013A4  0E80               	movlw	128
  1734  0013A6  BE1F               	btfsc	sprintf@c,7,c
  1735  0013A8  0E7F               	movlw	127
  1736  0013AA  6E13               	movwf	??_sprintf& (0+255),c
  1737  0013AC  501D               	movf	sprintf@width,w,c
  1738  0013AE  5C1F               	subwf	sprintf@c,w,c
  1739  0013B0  501E               	movf	sprintf@width+1,w,c
  1740  0013B2  0A80               	xorlw	128
  1741  0013B4  5813               	subwfb	??_sprintf& (0+255),w,c
  1742  0013B6  B0D8               	btfsc	status,0,c
  1743  0013B8  D007               	goto	l2455
  1744                           
  1745                           ;doprnt.c: 1382: width -= c;
  1746  0013BA  501F               	movf	sprintf@c,w,c
  1747  0013BC  5E1D               	subwf	sprintf@width,f,c
  1748  0013BE  0E00               	movlw	0
  1749  0013C0  BE1F               	btfsc	sprintf@c,7,c
  1750  0013C2  0EFF               	movlw	255
  1751  0013C4  5A1E               	subwfb	sprintf@width+1,f,c
  1752  0013C6  D005               	goto	l2457
  1753  0013C8                     l2455:
  1754                           
  1755                           ;doprnt.c: 1383: else
  1756                           ;doprnt.c: 1384: width = 0;
  1757  0013C8  0E00               	movlw	0
  1758  0013CA  6E1E               	movwf	sprintf@width+1,c
  1759  0013CC  0E00               	movlw	0
  1760  0013CE  6E1D               	movwf	sprintf@width,c
  1761  0013D0  D000               	goto	l2457
  1762  0013D2                     l2457:
  1763                           
  1764                           ;doprnt.c: 1387: if(flag & 0x04) {
  1765  0013D2  A419               	btfss	sprintf@flag,2,c
  1766  0013D4  D015               	goto	l2467
  1767                           
  1768                           ;doprnt.c: 1415: if(width)
  1769  0013D6  501D               	movf	sprintf@width,w,c
  1770  0013D8  101E               	iorwf	sprintf@width+1,w,c
  1771  0013DA  B4D8               	btfsc	status,2,c
  1772  0013DC  D026               	goto	l526
  1773  0013DE                     l2461:
  1774                           
  1775                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  1776  0013DE  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1777  0013E2  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1778  0013E6  0E30               	movlw	48
  1779  0013E8  6EDF               	movwf	indf2,c
  1780  0013EA  4A0D               	infsnz	sprintf@sp,f,c
  1781  0013EC  2A0E               	incf	sprintf@sp+1,f,c
  1782                           
  1783                           ;doprnt.c: 1418: while(--width);
  1784  0013EE  061D               	decf	sprintf@width,f,c
  1785  0013F0  A0D8               	btfss	status,0,c
  1786  0013F2  061E               	decf	sprintf@width+1,f,c
  1787  0013F4  501D               	movf	sprintf@width,w,c
  1788  0013F6  101E               	iorwf	sprintf@width+1,w,c
  1789  0013F8  B4D8               	btfsc	status,2,c
  1790  0013FA  D017               	goto	l526
  1791  0013FC  D7F0               	goto	l2461
  1792                           
  1793                           ;doprnt.c: 1420: } else
  1794  0013FE  D015               	goto	l526
  1795  001400                     l2467:
  1796                           
  1797                           ;doprnt.c: 1422: {
  1798                           ;doprnt.c: 1424: if(width
  1799                           ;doprnt.c: 1428: )
  1800  001400  501D               	movf	sprintf@width,w,c
  1801  001402  101E               	iorwf	sprintf@width+1,w,c
  1802  001404  B4D8               	btfsc	status,2,c
  1803  001406  D011               	goto	l526
  1804  001408                     l2469:
  1805                           
  1806                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  1807  001408  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1808  00140C  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1809  001410  0E20               	movlw	32
  1810  001412  6EDF               	movwf	indf2,c
  1811  001414  4A0D               	infsnz	sprintf@sp,f,c
  1812  001416  2A0E               	incf	sprintf@sp+1,f,c
  1813                           
  1814                           ;doprnt.c: 1431: while(--width);
  1815  001418  061D               	decf	sprintf@width,f,c
  1816  00141A  A0D8               	btfss	status,0,c
  1817  00141C  061E               	decf	sprintf@width+1,f,c
  1818  00141E  501D               	movf	sprintf@width,w,c
  1819  001420  101E               	iorwf	sprintf@width+1,w,c
  1820  001422  B4D8               	btfsc	status,2,c
  1821  001424  D002               	goto	l526
  1822  001426  D7F0               	goto	l2469
  1823  001428  D000               	goto	l526
  1824  00142A                     l526:
  1825                           
  1826                           ;doprnt.c: 1469: }
  1827                           ;doprnt.c: 1472: prec = c;
  1828  00142A  C01F  F01C         	movff	sprintf@c,sprintf@prec
  1829                           
  1830                           ;doprnt.c: 1474: while(prec--) {
  1831  00142E  D02A               	goto	l2481
  1832  001430                     l2475:
  1833                           
  1834                           ;doprnt.c: 1478: {
  1835                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1836  001430  501C               	movf	sprintf@prec,w,c
  1837  001432  0D02               	mullw	2
  1838  001434  0E01               	movlw	low _dpowers
  1839  001436  24F3               	addwf	prodl,w,c
  1840  001438  6EF6               	movwf	tblptrl,c
  1841  00143A  0E0F               	movlw	high _dpowers
  1842  00143C  20F4               	addwfc	prodh,w,c
  1843  00143E  6EF7               	movwf	tblptrh,c
  1844  001440                     	if	0	;There are less than 3 active tblptr bytes
  1845  001440                     	endif
  1846  001440  0009               	tblrd		*+
  1847  001442  CFF5 F003          	movff	tablat,___lwdiv@divisor
  1848  001446  000A               	tblrd		*-
  1849  001448  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  1850  00144C  C01A  F001         	movff	sprintf@val,___lwdiv@dividend
  1851  001450  C01B  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  1852  001454  EC5E  F00D         	call	___lwdiv	;wreg free
  1853  001458  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  1854  00145C  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  1855  001460  0E00               	movlw	0
  1856  001462  6E0B               	movwf	___lwmod@divisor+1,c
  1857  001464  0E0A               	movlw	10
  1858  001466  6E0A               	movwf	___lwmod@divisor,c
  1859  001468  ECB6  F00D         	call	___lwmod	;wreg free
  1860  00146C  5008               	movf	?___lwmod,w,c
  1861  00146E  0F30               	addlw	48
  1862  001470  6E1F               	movwf	sprintf@c,c
  1863                           
  1864                           ;doprnt.c: 1523: }
  1865                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1866  001472  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1867  001476  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1868  00147A  C01F  FFDF         	movff	sprintf@c,indf2
  1869  00147E  4A0D               	infsnz	sprintf@sp,f,c
  1870  001480  2A0E               	incf	sprintf@sp+1,f,c
  1871  001482  D000               	goto	l2481
  1872  001484                     l2481:
  1873  001484  061C               	decf	sprintf@prec,f,c
  1874  001486  281C               	incf	sprintf@prec,w,c
  1875  001488  B4D8               	btfsc	status,2,c
  1876  00148A  D002               	goto	l2483
  1877  00148C  D7D1               	goto	l2475
  1878  00148E  D000               	goto	l2483
  1879  001490                     l2483:
  1880  001490  C00F  FFF6         	movff	sprintf@f,tblptrl
  1881  001494  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1882  001498  4A0F               	infsnz	sprintf@f,f,c
  1883  00149A  2A10               	incf	sprintf@f+1,f,c
  1884  00149C                     	if	0	;tblptru may be non-zero
  1885  00149C                     	endif
  1886  00149C                     	if	0	;tblptru may be non-zero
  1887  00149C                     	endif
  1888  00149C  0008               	tblrd		*
  1889  00149E  CFF5 F01F          	movff	tablat,sprintf@c
  1890  0014A2  501F               	movf	sprintf@c,w,c
  1891  0014A4  B4D8               	btfsc	status,2,c
  1892  0014A6  D002               	goto	l2485
  1893  0014A8  D6DC               	goto	l2401
  1894  0014AA  D000               	goto	l2485
  1895  0014AC                     l2485:
  1896                           
  1897                           ;doprnt.c: 1538: *sp = 0;
  1898  0014AC  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1899  0014B0  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1900  0014B4  0E00               	movlw	0
  1901  0014B6  6EDF               	movwf	indf2,c
  1902  0014B8  0012               	return	
  1903                           
  1904                           ;doprnt.c: 1540: return 0;
  1905                           ;	Return value of _sprintf is never used
  1906  0014BA  0012               	return		;funcret
  1907  0014BC                     __end_of_sprintf:
  1908                           	opt stack 0
  1909                           tblptru	equ	0xFF8
  1910                           tblptrh	equ	0xFF7
  1911                           tblptrl	equ	0xFF6
  1912                           tablat	equ	0xFF5
  1913                           prodh	equ	0xFF4
  1914                           prodl	equ	0xFF3
  1915                           postinc0	equ	0xFEE
  1916                           wreg	equ	0xFE8
  1917                           postdec1	equ	0xFE5
  1918                           fsr1l	equ	0xFE1
  1919                           indf2	equ	0xFDF
  1920                           postinc2	equ	0xFDE
  1921                           postdec2	equ	0xFDD
  1922                           fsr2h	equ	0xFDA
  1923                           fsr2l	equ	0xFD9
  1924                           status	equ	0xFD8
  1925                           
  1926 ;; *************** function _isdigit *****************
  1927 ;; Defined at:
  1928 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\isdigit.c"
  1929 ;; Parameters:    Size  Location     Type
  1930 ;;  c               1    wreg     unsigned char 
  1931 ;; Auto vars:     Size  Location     Type
  1932 ;;  c               1    2[COMRAM] unsigned char 
  1933 ;; Return value:  Size  Location     Type
  1934 ;;		None               void
  1935 ;; Registers used:
  1936 ;;		wreg, status,2, status,0
  1937 ;; Tracked objects:
  1938 ;;		On entry : 0/0
  1939 ;;		On exit  : 0/0
  1940 ;;		Unchanged: 0/0
  1941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1943 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1944 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1945 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1946 ;;Total ram usage:        3 bytes
  1947 ;; Hardware stack levels used:    1
  1948 ;; This function calls:
  1949 ;;		Nothing
  1950 ;; This function is called by:
  1951 ;;		_sprintf
  1952 ;; This function uses a non-reentrant model
  1953 ;;
  1954                           
  1955                           	psect	text4
  1956  001D0E                     __ptext4:
  1957                           	opt stack 0
  1958  001D0E                     _isdigit:
  1959                           	opt stack 28
  1960                           
  1961                           ;incstack = 0
  1962                           ;isdigit@c stored from wreg
  1963  001D0E  6E03               	movwf	isdigit@c,c
  1964  001D10  0E00               	movlw	0
  1965  001D12  6E02               	movwf	_isdigit$2240,c
  1966  001D14  0E3A               	movlw	58
  1967  001D16  6003               	cpfslt	isdigit@c,c
  1968  001D18  D006               	goto	l2215
  1969  001D1A  0E2F               	movlw	47
  1970  001D1C  6403               	cpfsgt	isdigit@c,c
  1971  001D1E  D003               	goto	l2215
  1972  001D20  0E01               	movlw	1
  1973  001D22  6E02               	movwf	_isdigit$2240,c
  1974  001D24  D000               	goto	l2215
  1975  001D26                     l2215:
  1976  001D26  C002  F001         	movff	_isdigit$2240,??_isdigit
  1977  001D2A  3001               	rrcf	??_isdigit,w,c
  1978  001D2C  0012               	return	
  1979  001D2E  0012               	return		;funcret
  1980  001D30                     __end_of_isdigit:
  1981                           	opt stack 0
  1982                           tblptru	equ	0xFF8
  1983                           tblptrh	equ	0xFF7
  1984                           tblptrl	equ	0xFF6
  1985                           tablat	equ	0xFF5
  1986                           prodh	equ	0xFF4
  1987                           prodl	equ	0xFF3
  1988                           postinc0	equ	0xFEE
  1989                           wreg	equ	0xFE8
  1990                           postdec1	equ	0xFE5
  1991                           fsr1l	equ	0xFE1
  1992                           indf2	equ	0xFDF
  1993                           postinc2	equ	0xFDE
  1994                           postdec2	equ	0xFDD
  1995                           fsr2h	equ	0xFDA
  1996                           fsr2l	equ	0xFD9
  1997                           status	equ	0xFD8
  1998                           
  1999 ;; *************** function ___wmul *****************
  2000 ;; Defined at:
  2001 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\Umul16.c"
  2002 ;; Parameters:    Size  Location     Type
  2003 ;;  multiplier      2    0[COMRAM] unsigned int 
  2004 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2005 ;; Auto vars:     Size  Location     Type
  2006 ;;  product         2    4[COMRAM] unsigned int 
  2007 ;; Return value:  Size  Location     Type
  2008 ;;                  2    0[COMRAM] unsigned int 
  2009 ;; Registers used:
  2010 ;;		wreg, status,2, status,0, prodl, prodh
  2011 ;; Tracked objects:
  2012 ;;		On entry : 0/0
  2013 ;;		On exit  : 0/0
  2014 ;;		Unchanged: 0/0
  2015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2016 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2017 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2019 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2020 ;;Total ram usage:        6 bytes
  2021 ;; Hardware stack levels used:    1
  2022 ;; This function calls:
  2023 ;;		Nothing
  2024 ;; This function is called by:
  2025 ;;		_sprintf
  2026 ;; This function uses a non-reentrant model
  2027 ;;
  2028                           
  2029                           	psect	text5
  2030  001CC2                     __ptext5:
  2031                           	opt stack 0
  2032  001CC2                     ___wmul:
  2033                           	opt stack 28
  2034                           
  2035                           ;incstack = 0
  2036  001CC2  5001               	movf	___wmul@multiplier,w,c
  2037  001CC4  0203               	mulwf	___wmul@multiplicand,c
  2038  001CC6  CFF3 F005          	movff	prodl,___wmul@product
  2039  001CCA  CFF4 F006          	movff	prodh,___wmul@product+1
  2040  001CCE  5001               	movf	___wmul@multiplier,w,c
  2041  001CD0  0204               	mulwf	___wmul@multiplicand+1,c
  2042  001CD2  50F3               	movf	prodl,w,c
  2043  001CD4  2606               	addwf	___wmul@product+1,f,c
  2044  001CD6  5002               	movf	___wmul@multiplier+1,w,c
  2045  001CD8  0203               	mulwf	___wmul@multiplicand,c
  2046  001CDA  50F3               	movf	prodl,w,c
  2047  001CDC  2606               	addwf	___wmul@product+1,f,c
  2048  001CDE  C005  F001         	movff	___wmul@product,?___wmul
  2049  001CE2  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2050  001CE6  0012               	return	
  2051  001CE8  0012               	return		;funcret
  2052  001CEA                     __end_of___wmul:
  2053                           	opt stack 0
  2054                           tblptru	equ	0xFF8
  2055                           tblptrh	equ	0xFF7
  2056                           tblptrl	equ	0xFF6
  2057                           tablat	equ	0xFF5
  2058                           prodh	equ	0xFF4
  2059                           prodl	equ	0xFF3
  2060                           postinc0	equ	0xFEE
  2061                           wreg	equ	0xFE8
  2062                           postdec1	equ	0xFE5
  2063                           fsr1l	equ	0xFE1
  2064                           indf2	equ	0xFDF
  2065                           postinc2	equ	0xFDE
  2066                           postdec2	equ	0xFDD
  2067                           fsr2h	equ	0xFDA
  2068                           fsr2l	equ	0xFD9
  2069                           status	equ	0xFD8
  2070                           
  2071 ;; *************** function ___lwmod *****************
  2072 ;; Defined at:
  2073 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lwmod.c"
  2074 ;; Parameters:    Size  Location     Type
  2075 ;;  dividend        2    7[COMRAM] unsigned int 
  2076 ;;  divisor         2    9[COMRAM] unsigned int 
  2077 ;; Auto vars:     Size  Location     Type
  2078 ;;  counter         1   11[COMRAM] unsigned char 
  2079 ;; Return value:  Size  Location     Type
  2080 ;;                  2    7[COMRAM] unsigned int 
  2081 ;; Registers used:
  2082 ;;		wreg, status,2, status,0
  2083 ;; Tracked objects:
  2084 ;;		On entry : 0/0
  2085 ;;		On exit  : 0/0
  2086 ;;		Unchanged: 0/0
  2087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2088 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2089 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2091 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2092 ;;Total ram usage:        5 bytes
  2093 ;; Hardware stack levels used:    1
  2094 ;; This function calls:
  2095 ;;		Nothing
  2096 ;; This function is called by:
  2097 ;;		_sprintf
  2098 ;; This function uses a non-reentrant model
  2099 ;;
  2100                           
  2101                           	psect	text6
  2102  001B6C                     __ptext6:
  2103                           	opt stack 0
  2104  001B6C                     ___lwmod:
  2105                           	opt stack 28
  2106                           
  2107                           ;incstack = 0
  2108  001B6C  500A               	movf	___lwmod@divisor,w,c
  2109  001B6E  100B               	iorwf	___lwmod@divisor+1,w,c
  2110  001B70  B4D8               	btfsc	status,2,c
  2111  001B72  D01D               	goto	l1180
  2112  001B74  0E01               	movlw	1
  2113  001B76  6E0C               	movwf	___lwmod@counter,c
  2114  001B78  D005               	goto	l2297
  2115  001B7A                     l2295:
  2116  001B7A  90D8               	bcf	status,0,c
  2117  001B7C  360A               	rlcf	___lwmod@divisor,f,c
  2118  001B7E  360B               	rlcf	___lwmod@divisor+1,f,c
  2119  001B80  2A0C               	incf	___lwmod@counter,f,c
  2120  001B82  D000               	goto	l2297
  2121  001B84                     l2297:
  2122  001B84  BE0B               	btfsc	___lwmod@divisor+1,7,c
  2123  001B86  D002               	goto	l2299
  2124  001B88  D7F8               	goto	l2295
  2125  001B8A  D000               	goto	l2299
  2126  001B8C                     l2299:
  2127  001B8C  500A               	movf	___lwmod@divisor,w,c
  2128  001B8E  5C08               	subwf	___lwmod@dividend,w,c
  2129  001B90  500B               	movf	___lwmod@divisor+1,w,c
  2130  001B92  5809               	subwfb	___lwmod@dividend+1,w,c
  2131  001B94  A0D8               	btfss	status,0,c
  2132  001B96  D005               	goto	l2303
  2133  001B98  500A               	movf	___lwmod@divisor,w,c
  2134  001B9A  5E08               	subwf	___lwmod@dividend,f,c
  2135  001B9C  500B               	movf	___lwmod@divisor+1,w,c
  2136  001B9E  5A09               	subwfb	___lwmod@dividend+1,f,c
  2137  001BA0  D000               	goto	l2303
  2138  001BA2                     l2303:
  2139  001BA2  90D8               	bcf	status,0,c
  2140  001BA4  320B               	rrcf	___lwmod@divisor+1,f,c
  2141  001BA6  320A               	rrcf	___lwmod@divisor,f,c
  2142  001BA8  2E0C               	decfsz	___lwmod@counter,f,c
  2143  001BAA  D7F0               	goto	l2299
  2144  001BAC  D000               	goto	l1180
  2145  001BAE                     l1180:
  2146  001BAE  C008  F008         	movff	___lwmod@dividend,?___lwmod
  2147  001BB2  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  2148  001BB6  0012               	return		;funcret
  2149  001BB8                     __end_of___lwmod:
  2150                           	opt stack 0
  2151                           tblptru	equ	0xFF8
  2152                           tblptrh	equ	0xFF7
  2153                           tblptrl	equ	0xFF6
  2154                           tablat	equ	0xFF5
  2155                           prodh	equ	0xFF4
  2156                           prodl	equ	0xFF3
  2157                           postinc0	equ	0xFEE
  2158                           wreg	equ	0xFE8
  2159                           postdec1	equ	0xFE5
  2160                           fsr1l	equ	0xFE1
  2161                           indf2	equ	0xFDF
  2162                           postinc2	equ	0xFDE
  2163                           postdec2	equ	0xFDD
  2164                           fsr2h	equ	0xFDA
  2165                           fsr2l	equ	0xFD9
  2166                           status	equ	0xFD8
  2167                           
  2168 ;; *************** function ___lwdiv *****************
  2169 ;; Defined at:
  2170 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  2171 ;; Parameters:    Size  Location     Type
  2172 ;;  dividend        2    0[COMRAM] unsigned int 
  2173 ;;  divisor         2    2[COMRAM] unsigned int 
  2174 ;; Auto vars:     Size  Location     Type
  2175 ;;  quotient        2    4[COMRAM] unsigned int 
  2176 ;;  counter         1    6[COMRAM] unsigned char 
  2177 ;; Return value:  Size  Location     Type
  2178 ;;                  2    0[COMRAM] unsigned int 
  2179 ;; Registers used:
  2180 ;;		wreg, status,2, status,0
  2181 ;; Tracked objects:
  2182 ;;		On entry : 0/0
  2183 ;;		On exit  : 0/0
  2184 ;;		Unchanged: 0/0
  2185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2186 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2187 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2189 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2190 ;;Total ram usage:        7 bytes
  2191 ;; Hardware stack levels used:    1
  2192 ;; This function calls:
  2193 ;;		Nothing
  2194 ;; This function is called by:
  2195 ;;		_sprintf
  2196 ;; This function uses a non-reentrant model
  2197 ;;
  2198                           
  2199                           	psect	text7
  2200  001ABC                     __ptext7:
  2201                           	opt stack 0
  2202  001ABC                     ___lwdiv:
  2203                           	opt stack 28
  2204                           
  2205                           ;incstack = 0
  2206  001ABC  0E00               	movlw	0
  2207  001ABE  6E06               	movwf	___lwdiv@quotient+1,c
  2208  001AC0  0E00               	movlw	0
  2209  001AC2  6E05               	movwf	___lwdiv@quotient,c
  2210  001AC4  5003               	movf	___lwdiv@divisor,w,c
  2211  001AC6  1004               	iorwf	___lwdiv@divisor+1,w,c
  2212  001AC8  B4D8               	btfsc	status,2,c
  2213  001ACA  D021               	goto	l1170
  2214  001ACC  0E01               	movlw	1
  2215  001ACE  6E07               	movwf	___lwdiv@counter,c
  2216  001AD0  D005               	goto	l2277
  2217  001AD2                     l2275:
  2218  001AD2  90D8               	bcf	status,0,c
  2219  001AD4  3603               	rlcf	___lwdiv@divisor,f,c
  2220  001AD6  3604               	rlcf	___lwdiv@divisor+1,f,c
  2221  001AD8  2A07               	incf	___lwdiv@counter,f,c
  2222  001ADA  D000               	goto	l2277
  2223  001ADC                     l2277:
  2224  001ADC  BE04               	btfsc	___lwdiv@divisor+1,7,c
  2225  001ADE  D002               	goto	l2279
  2226  001AE0  D7F8               	goto	l2275
  2227  001AE2  D000               	goto	l2279
  2228  001AE4                     l2279:
  2229  001AE4  90D8               	bcf	status,0,c
  2230  001AE6  3605               	rlcf	___lwdiv@quotient,f,c
  2231  001AE8  3606               	rlcf	___lwdiv@quotient+1,f,c
  2232  001AEA  5003               	movf	___lwdiv@divisor,w,c
  2233  001AEC  5C01               	subwf	___lwdiv@dividend,w,c
  2234  001AEE  5004               	movf	___lwdiv@divisor+1,w,c
  2235  001AF0  5802               	subwfb	___lwdiv@dividend+1,w,c
  2236  001AF2  A0D8               	btfss	status,0,c
  2237  001AF4  D006               	goto	l2287
  2238  001AF6  5003               	movf	___lwdiv@divisor,w,c
  2239  001AF8  5E01               	subwf	___lwdiv@dividend,f,c
  2240  001AFA  5004               	movf	___lwdiv@divisor+1,w,c
  2241  001AFC  5A02               	subwfb	___lwdiv@dividend+1,f,c
  2242  001AFE  8005               	bsf	___lwdiv@quotient,0,c
  2243  001B00  D000               	goto	l2287
  2244  001B02                     l2287:
  2245  001B02  90D8               	bcf	status,0,c
  2246  001B04  3204               	rrcf	___lwdiv@divisor+1,f,c
  2247  001B06  3203               	rrcf	___lwdiv@divisor,f,c
  2248  001B08  2E07               	decfsz	___lwdiv@counter,f,c
  2249  001B0A  D7EC               	goto	l2279
  2250  001B0C  D000               	goto	l1170
  2251  001B0E                     l1170:
  2252  001B0E  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  2253  001B12  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2254  001B16  0012               	return		;funcret
  2255  001B18                     __end_of___lwdiv:
  2256                           	opt stack 0
  2257                           tblptru	equ	0xFF8
  2258                           tblptrh	equ	0xFF7
  2259                           tblptrl	equ	0xFF6
  2260                           tablat	equ	0xFF5
  2261                           prodh	equ	0xFF4
  2262                           prodl	equ	0xFF3
  2263                           postinc0	equ	0xFEE
  2264                           wreg	equ	0xFE8
  2265                           postdec1	equ	0xFE5
  2266                           fsr1l	equ	0xFE1
  2267                           indf2	equ	0xFDF
  2268                           postinc2	equ	0xFDE
  2269                           postdec2	equ	0xFDD
  2270                           fsr2h	equ	0xFDA
  2271                           fsr2l	equ	0xFD9
  2272                           status	equ	0xFD8
  2273                           
  2274 ;; *************** function _lcd_putrs *****************
  2275 ;; Defined at:
  2276 ;;		line 221 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2277 ;; Parameters:    Size  Location     Type
  2278 ;;  ptr             2    8[COMRAM] PTR const unsigned char 
  2279 ;;		 -> STR_22(14), STR_21(10), STR_20(9), STR_19(2), 
  2280 ;;		 -> STR_18(2), STR_16(2), STR_15(2), STR_11(2), 
  2281 ;;		 -> STR_7(2), buffer2(20), STR_3(10), STR_2(13), 
  2282 ;;		 -> STR_1(33), 
  2283 ;; Auto vars:     Size  Location     Type
  2284 ;;		None
  2285 ;; Return value:  Size  Location     Type
  2286 ;;		None               void
  2287 ;; Registers used:
  2288 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2289 ;; Tracked objects:
  2290 ;;		On entry : 0/0
  2291 ;;		On exit  : 0/0
  2292 ;;		Unchanged: 0/0
  2293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2294 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2297 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2298 ;;Total ram usage:        2 bytes
  2299 ;; Hardware stack levels used:    1
  2300 ;; Hardware stack levels required when called:    4
  2301 ;; This function calls:
  2302 ;;		_lcd_putc
  2303 ;; This function is called by:
  2304 ;;		_main
  2305 ;;		_read_keyboard
  2306 ;;		_set_vision
  2307 ;; This function uses a non-reentrant model
  2308 ;;
  2309                           
  2310                           	psect	text8
  2311  001B18                     __ptext8:
  2312                           	opt stack 0
  2313  001B18                     _lcd_putrs:
  2314                           	opt stack 25
  2315                           
  2316                           ;unmc_lcd_216.c: 223: while(*ptr){
  2317                           
  2318                           ;incstack = 0
  2319  001B18  D015               	goto	l2397
  2320  001B1A                     l2393:
  2321                           
  2322                           ;unmc_lcd_216.c: 224: lcd_putc(*ptr++);
  2323  001B1A  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  2324  001B1E  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  2325  001B22  6AF8               	clrf	tblptru,c
  2326  001B24  0E0E               	movlw	(high __ramtop+-1)
  2327  001B26  64F7               	cpfsgt	tblptrh,c
  2328  001B28  D003               	bra	u1717
  2329  001B2A  0008               	tblrd		*
  2330  001B2C  50F5               	movf	tablat,w,c
  2331  001B2E  D005               	bra	u1710
  2332  001B30                     u1717:
  2333  001B30  CFF6 FFE9          	movff	tblptrl,fsr0l
  2334  001B34  CFF7 FFEA          	movff	tblptrh,fsr0h
  2335  001B38  50EF               	movf	indf0,w,c
  2336  001B3A                     u1710:
  2337  001B3A  ECDC  F00D         	call	_lcd_putc
  2338  001B3E  4A09               	infsnz	lcd_putrs@ptr,f,c
  2339  001B40  2A0A               	incf	lcd_putrs@ptr+1,f,c
  2340  001B42  D000               	goto	l2397
  2341  001B44                     l2397:
  2342  001B44  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  2343  001B48  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  2344  001B4C  6AF8               	clrf	tblptru,c
  2345  001B4E  0E0E               	movlw	(high __ramtop+-1)
  2346  001B50  64F7               	cpfsgt	tblptrh,c
  2347  001B52  D003               	bra	u1727
  2348  001B54  0008               	tblrd		*
  2349  001B56  50F5               	movf	tablat,w,c
  2350  001B58  D005               	bra	u1720
  2351  001B5A                     u1727:
  2352  001B5A  CFF6 FFE9          	movff	tblptrl,fsr0l
  2353  001B5E  CFF7 FFEA          	movff	tblptrh,fsr0h
  2354  001B62  50EF               	movf	indf0,w,c
  2355  001B64                     u1720:
  2356  001B64  0900               	iorlw	0
  2357  001B66  A4D8               	btfss	status,2,c
  2358  001B68  D7D8               	goto	l2393
  2359  001B6A  0012               	return		;funcret
  2360  001B6C                     __end_of_lcd_putrs:
  2361                           	opt stack 0
  2362                           tblptru	equ	0xFF8
  2363                           tblptrh	equ	0xFF7
  2364                           tblptrl	equ	0xFF6
  2365                           tablat	equ	0xFF5
  2366                           prodh	equ	0xFF4
  2367                           prodl	equ	0xFF3
  2368                           indf0	equ	0xFEF
  2369                           postinc0	equ	0xFEE
  2370                           fsr0h	equ	0xFEA
  2371                           fsr0l	equ	0xFE9
  2372                           wreg	equ	0xFE8
  2373                           postdec1	equ	0xFE5
  2374                           fsr1l	equ	0xFE1
  2375                           indf2	equ	0xFDF
  2376                           postinc2	equ	0xFDE
  2377                           postdec2	equ	0xFDD
  2378                           fsr2h	equ	0xFDA
  2379                           fsr2l	equ	0xFD9
  2380                           status	equ	0xFD8
  2381                           
  2382 ;; *************** function _lcd_putc *****************
  2383 ;; Defined at:
  2384 ;;		line 172 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2385 ;; Parameters:    Size  Location     Type
  2386 ;;  c               1    wreg     unsigned char 
  2387 ;; Auto vars:     Size  Location     Type
  2388 ;;  c               1    7[COMRAM] unsigned char 
  2389 ;; Return value:  Size  Location     Type
  2390 ;;		None               void
  2391 ;; Registers used:
  2392 ;;		wreg, status,2, status,0, cstack
  2393 ;; Tracked objects:
  2394 ;;		On entry : 0/0
  2395 ;;		On exit  : 0/0
  2396 ;;		Unchanged: 0/0
  2397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2399 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2401 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2402 ;;Total ram usage:        1 bytes
  2403 ;; Hardware stack levels used:    1
  2404 ;; Hardware stack levels required when called:    3
  2405 ;; This function calls:
  2406 ;;		_lcd_gotoxy
  2407 ;;		_lcd_send_byte
  2408 ;; This function is called by:
  2409 ;;		_lcd_putrs
  2410 ;;		_lcd_puts
  2411 ;; This function uses a non-reentrant model
  2412 ;;
  2413                           
  2414                           	psect	text9
  2415  001BB8                     __ptext9:
  2416                           	opt stack 0
  2417  001BB8                     _lcd_putc:
  2418                           	opt stack 25
  2419                           
  2420                           ;incstack = 0
  2421                           ;lcd_putc@c stored from wreg
  2422  001BB8  6E08               	movwf	lcd_putc@c,c
  2423                           
  2424                           ;unmc_lcd_216.c: 173: switch(c){
  2425  001BBA  D018               	goto	l2069
  2426  001BBC                     l2059:
  2427                           
  2428                           ;unmc_lcd_216.c: 175: lcd_send_byte(0,1);
  2429  001BBC  0E01               	movlw	1
  2430  001BBE  6E03               	movwf	lcd_send_byte@n,c
  2431  001BC0  0E00               	movlw	0
  2432  001BC2  EC48  F00E         	call	_lcd_send_byte
  2433                           
  2434                           ;unmc_lcd_216.c: 176: break;
  2435  001BC6  0012               	return	
  2436  001BC8                     l2061:
  2437                           
  2438                           ;unmc_lcd_216.c: 178: lcd_gotoxy(1,2);
  2439  001BC8  0E02               	movlw	2
  2440  001BCA  6E05               	movwf	lcd_gotoxy@y,c
  2441  001BCC  0E01               	movlw	1
  2442  001BCE  EC75  F00E         	call	_lcd_gotoxy
  2443                           
  2444                           ;unmc_lcd_216.c: 179: break;
  2445  001BD2  0012               	return	
  2446  001BD4                     l2063:
  2447                           
  2448                           ;unmc_lcd_216.c: 181: lcd_send_byte(0,0x10);
  2449  001BD4  0E10               	movlw	16
  2450  001BD6  6E03               	movwf	lcd_send_byte@n,c
  2451  001BD8  0E00               	movlw	0
  2452  001BDA  EC48  F00E         	call	_lcd_send_byte
  2453                           
  2454                           ;unmc_lcd_216.c: 182: break;
  2455  001BDE  0012               	return	
  2456  001BE0                     l2065:
  2457                           
  2458                           ;unmc_lcd_216.c: 184: lcd_send_byte(1,c);
  2459  001BE0  C008  F003         	movff	lcd_putc@c,lcd_send_byte@n
  2460  001BE4  0E01               	movlw	1
  2461  001BE6  EC48  F00E         	call	_lcd_send_byte
  2462                           
  2463                           ;unmc_lcd_216.c: 186: }
  2464                           
  2465                           ;unmc_lcd_216.c: 185: break;
  2466  001BEA  0012               	return	
  2467  001BEC                     l2069:
  2468  001BEC  5008               	movf	lcd_putc@c,w,c
  2469                           
  2470                           ; Switch size 1, requested type "space"
  2471                           ; Number of cases is 3, Range of values is 8 to 12
  2472                           ; switch strategies available:
  2473                           ; Name         Instructions Cycles
  2474                           ; simple_byte           10     6 (average)
  2475                           ;	Chosen strategy is simple_byte
  2476  001BEE  0A08               	xorlw	8	; case 8
  2477  001BF0  B4D8               	btfsc	status,2,c
  2478  001BF2  D7F0               	goto	l2063
  2479  001BF4  0A02               	xorlw	2	; case 10
  2480  001BF6  B4D8               	btfsc	status,2,c
  2481  001BF8  D7E7               	goto	l2061
  2482  001BFA  0A06               	xorlw	6	; case 12
  2483  001BFC  B4D8               	btfsc	status,2,c
  2484  001BFE  D7DE               	goto	l2059
  2485  001C00  D7EF               	goto	l2065
  2486  001C02  0012               	return		;funcret
  2487  001C04                     __end_of_lcd_putc:
  2488                           	opt stack 0
  2489                           tblptru	equ	0xFF8
  2490                           tblptrh	equ	0xFF7
  2491                           tblptrl	equ	0xFF6
  2492                           tablat	equ	0xFF5
  2493                           prodh	equ	0xFF4
  2494                           prodl	equ	0xFF3
  2495                           indf0	equ	0xFEF
  2496                           postinc0	equ	0xFEE
  2497                           fsr0h	equ	0xFEA
  2498                           fsr0l	equ	0xFE9
  2499                           wreg	equ	0xFE8
  2500                           postdec1	equ	0xFE5
  2501                           fsr1l	equ	0xFE1
  2502                           indf2	equ	0xFDF
  2503                           postinc2	equ	0xFDE
  2504                           postdec2	equ	0xFDD
  2505                           fsr2h	equ	0xFDA
  2506                           fsr2l	equ	0xFD9
  2507                           status	equ	0xFD8
  2508                           
  2509 ;; *************** function _caratula *****************
  2510 ;; Defined at:
  2511 ;;		line 31 in file "main.c"
  2512 ;; Parameters:    Size  Location     Type
  2513 ;;		None
  2514 ;; Auto vars:     Size  Location     Type
  2515 ;;		None
  2516 ;; Return value:  Size  Location     Type
  2517 ;;		None               void
  2518 ;; Registers used:
  2519 ;;		wreg, status,2, status,0, cstack
  2520 ;; Tracked objects:
  2521 ;;		On entry : 0/0
  2522 ;;		On exit  : 0/0
  2523 ;;		Unchanged: 0/0
  2524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2528 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2529 ;;Total ram usage:        0 bytes
  2530 ;; Hardware stack levels used:    1
  2531 ;; Hardware stack levels required when called:    3
  2532 ;; This function calls:
  2533 ;;		_lcd_comand
  2534 ;;		_lcd_gotoxy
  2535 ;; This function is called by:
  2536 ;;		_main
  2537 ;; This function uses a non-reentrant model
  2538 ;;
  2539                           
  2540                           	psect	text10
  2541  001D30                     __ptext10:
  2542                           	opt stack 0
  2543  001D30                     _caratula:
  2544                           	opt stack 27
  2545                           
  2546                           ;main.c: 33: lcd_comand(0b00001100);
  2547                           
  2548                           ;incstack = 0
  2549  001D30  0E0C               	movlw	12
  2550  001D32  ECBC  F00E         	call	_lcd_comand
  2551                           
  2552                           ;main.c: 40: lcd_gotoxy(1,2);
  2553  001D36  0E02               	movlw	2
  2554  001D38  6E05               	movwf	lcd_gotoxy@y,c
  2555  001D3A  0E01               	movlw	1
  2556  001D3C  EC75  F00E         	call	_lcd_gotoxy
  2557  001D40  0012               	return		;funcret
  2558  001D42                     __end_of_caratula:
  2559                           	opt stack 0
  2560                           tblptru	equ	0xFF8
  2561                           tblptrh	equ	0xFF7
  2562                           tblptrl	equ	0xFF6
  2563                           tablat	equ	0xFF5
  2564                           prodh	equ	0xFF4
  2565                           prodl	equ	0xFF3
  2566                           indf0	equ	0xFEF
  2567                           postinc0	equ	0xFEE
  2568                           fsr0h	equ	0xFEA
  2569                           fsr0l	equ	0xFE9
  2570                           wreg	equ	0xFE8
  2571                           postdec1	equ	0xFE5
  2572                           fsr1l	equ	0xFE1
  2573                           indf2	equ	0xFDF
  2574                           postinc2	equ	0xFDE
  2575                           postdec2	equ	0xFDD
  2576                           fsr2h	equ	0xFDA
  2577                           fsr2l	equ	0xFD9
  2578                           status	equ	0xFD8
  2579                           
  2580 ;; *************** function _lcd_gotoxy *****************
  2581 ;; Defined at:
  2582 ;;		line 158 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2583 ;; Parameters:    Size  Location     Type
  2584 ;;  x               1    wreg     unsigned char 
  2585 ;;  y               1    4[COMRAM] unsigned char 
  2586 ;; Auto vars:     Size  Location     Type
  2587 ;;  x               1    5[COMRAM] unsigned char 
  2588 ;;  address         1    6[COMRAM] unsigned char 
  2589 ;; Return value:  Size  Location     Type
  2590 ;;		None               void
  2591 ;; Registers used:
  2592 ;;		wreg, status,2, status,0, cstack
  2593 ;; Tracked objects:
  2594 ;;		On entry : 0/0
  2595 ;;		On exit  : 0/0
  2596 ;;		Unchanged: 0/0
  2597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2598 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2599 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2601 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2602 ;;Total ram usage:        3 bytes
  2603 ;; Hardware stack levels used:    1
  2604 ;; Hardware stack levels required when called:    2
  2605 ;; This function calls:
  2606 ;;		_lcd_send_byte
  2607 ;; This function is called by:
  2608 ;;		_caratula
  2609 ;;		_main
  2610 ;;		_lcd_putc
  2611 ;;		_set_vision
  2612 ;; This function uses a non-reentrant model
  2613 ;;
  2614                           
  2615                           	psect	text11
  2616  001CEA                     __ptext11:
  2617                           	opt stack 0
  2618  001CEA                     _lcd_gotoxy:
  2619                           	opt stack 25
  2620                           
  2621                           ;incstack = 0
  2622                           ;lcd_gotoxy@x stored from wreg
  2623  001CEA  6E06               	movwf	lcd_gotoxy@x,c
  2624                           
  2625                           ;unmc_lcd_216.c: 159: int8 address;
  2626                           ;unmc_lcd_216.c: 161: if(y != 1)
  2627  001CEC  0405               	decf	lcd_gotoxy@y,w,c
  2628  001CEE  B4D8               	btfsc	status,2,c
  2629  001CF0  D002               	goto	l2051
  2630                           
  2631                           ;unmc_lcd_216.c: 162: address = 0x40;
  2632  001CF2  0E40               	movlw	64
  2633  001CF4  D001               	goto	L1
  2634  001CF6                     l2051:
  2635                           
  2636                           ;unmc_lcd_216.c: 163: else
  2637                           ;unmc_lcd_216.c: 164: address=0;
  2638  001CF6  0E00               	movlw	0
  2639  001CF8                     L1:
  2640  001CF8  6E07               	movwf	lcd_gotoxy@address,c
  2641  001CFA  D000               	goto	l2053
  2642  001CFC                     l2053:
  2643                           
  2644                           ;unmc_lcd_216.c: 166: address += x-1;
  2645  001CFC  0406               	decf	lcd_gotoxy@x,w,c
  2646  001CFE  2607               	addwf	lcd_gotoxy@address,f,c
  2647                           
  2648                           ;unmc_lcd_216.c: 167: lcd_send_byte(0, 0x80 | address);
  2649  001D00  5007               	movf	lcd_gotoxy@address,w,c
  2650  001D02  0980               	iorlw	128
  2651  001D04  6E03               	movwf	lcd_send_byte@n,c
  2652  001D06  0E00               	movlw	0
  2653  001D08  EC48  F00E         	call	_lcd_send_byte
  2654  001D0C  0012               	return		;funcret
  2655  001D0E                     __end_of_lcd_gotoxy:
  2656                           	opt stack 0
  2657                           tblptru	equ	0xFF8
  2658                           tblptrh	equ	0xFF7
  2659                           tblptrl	equ	0xFF6
  2660                           tablat	equ	0xFF5
  2661                           prodh	equ	0xFF4
  2662                           prodl	equ	0xFF3
  2663                           indf0	equ	0xFEF
  2664                           postinc0	equ	0xFEE
  2665                           fsr0h	equ	0xFEA
  2666                           fsr0l	equ	0xFE9
  2667                           wreg	equ	0xFE8
  2668                           postdec1	equ	0xFE5
  2669                           fsr1l	equ	0xFE1
  2670                           indf2	equ	0xFDF
  2671                           postinc2	equ	0xFDE
  2672                           postdec2	equ	0xFDD
  2673                           fsr2h	equ	0xFDA
  2674                           fsr2l	equ	0xFD9
  2675                           status	equ	0xFD8
  2676                           
  2677 ;; *************** function _Setup *****************
  2678 ;; Defined at:
  2679 ;;		line 51 in file "main.c"
  2680 ;; Parameters:    Size  Location     Type
  2681 ;;		None
  2682 ;; Auto vars:     Size  Location     Type
  2683 ;;		None
  2684 ;; Return value:  Size  Location     Type
  2685 ;;		None               void
  2686 ;; Registers used:
  2687 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2688 ;; Tracked objects:
  2689 ;;		On entry : 0/0
  2690 ;;		On exit  : 0/0
  2691 ;;		Unchanged: 0/0
  2692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2694 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2696 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2697 ;;Total ram usage:        0 bytes
  2698 ;; Hardware stack levels used:    1
  2699 ;; Hardware stack levels required when called:    3
  2700 ;; This function calls:
  2701 ;;		_Write_RTC
  2702 ;;		_lcd_comand
  2703 ;;		_lcd_init
  2704 ;; This function is called by:
  2705 ;;		_main
  2706 ;; This function uses a non-reentrant model
  2707 ;;
  2708                           
  2709                           	psect	text12
  2710  001C04                     __ptext12:
  2711                           	opt stack 0
  2712  001C04                     _Setup:
  2713                           	opt stack 27
  2714                           
  2715                           ;main.c: 53: OSCTUNEbits.INTSRC=1;
  2716                           
  2717                           ;incstack = 0
  2718  001C04  8E9B               	bsf	3995,7,c	;volatile
  2719                           
  2720                           ;main.c: 54: OSCTUNEbits.PLLEN=0;
  2721  001C06  9C9B               	bcf	3995,6,c	;volatile
  2722                           
  2723                           ;main.c: 55: OSCCONbits.IRCF0=1;
  2724  001C08  88D3               	bsf	4051,4,c	;volatile
  2725                           
  2726                           ;main.c: 56: OSCCONbits.IRCF1=1;
  2727  001C0A  8AD3               	bsf	4051,5,c	;volatile
  2728                           
  2729                           ;main.c: 57: OSCCONbits.IRCF2=1;
  2730  001C0C  8CD3               	bsf	4051,6,c	;volatile
  2731                           
  2732                           ;main.c: 58: OSCCONbits.SCS0=0;
  2733  001C0E  90D3               	bcf	4051,0,c	;volatile
  2734                           
  2735                           ;main.c: 59: OSCCONbits.SCS1=0;
  2736  001C10  92D3               	bcf	4051,1,c	;volatile
  2737                           
  2738                           ;main.c: 60: TRISA = 0b11110000;
  2739  001C12  0EF0               	movlw	240
  2740  001C14  6E92               	movwf	3986,c	;volatile
  2741                           
  2742                           ;main.c: 61: TRISB = 0;
  2743  001C16  0E00               	movlw	0
  2744  001C18  6E93               	movwf	3987,c	;volatile
  2745                           
  2746                           ;main.c: 62: TRISC = 0b00000111;
  2747  001C1A  0E07               	movlw	7
  2748  001C1C  6E94               	movwf	3988,c	;volatile
  2749                           
  2750                           ;main.c: 66: ANCON0=0b11111111;
  2751  001C1E  010F               	movlb	15	; () banked
  2752  001C20  6948               	setf	72,b	;volatile
  2753                           
  2754                           ; BSR set to: 15
  2755                           ;main.c: 68: ANCON1=0b11111111;
  2756  001C22  010F               	movlb	15	; () banked
  2757  001C24  6949               	setf	73,b	;volatile
  2758                           
  2759                           ;main.c: 69: ADCON0=0b00101101;
  2760  001C26  0E2D               	movlw	45
  2761  001C28  6EC2               	movwf	4034,c	;volatile
  2762                           
  2763                           ;main.c: 70: ADCON1=0b00010000;
  2764  001C2A  0E10               	movlw	16
  2765  001C2C  6EC1               	movwf	4033,c	;volatile
  2766                           
  2767                           ; BSR set to: 15
  2768                           ;main.c: 71: RTCCFGbits.RTCEN=1;
  2769  001C2E  010F               	movlb	15	; () banked
  2770  001C30  8F3F               	bsf	63,7,b	;volatile
  2771                           
  2772                           ; BSR set to: 15
  2773                           ;main.c: 72: RTCCFGbits.RTCWREN=1;
  2774  001C32  010F               	movlb	15	; () banked
  2775  001C34  8B3F               	bsf	63,5,b	;volatile
  2776                           
  2777                           ; BSR set to: 15
  2778                           ;main.c: 73: T1CONbits.T1OSCEN=1;
  2779  001C36  86CD               	bsf	4045,3,c	;volatile
  2780                           
  2781                           ; BSR set to: 15
  2782                           ;main.c: 74: Write_RTC();
  2783  001C38  EC5E  F00A         	call	_Write_RTC	;wreg free
  2784                           
  2785                           ;main.c: 75: lcd_init();
  2786  001C3C  EC76  F00C         	call	_lcd_init	;wreg free
  2787                           
  2788                           ;main.c: 76: lcd_comand(0b00001100);
  2789  001C40  0E0C               	movlw	12
  2790  001C42  ECBC  F00E         	call	_lcd_comand
  2791                           
  2792                           ;main.c: 77: LATBbits.LATB1 = 1;;
  2793  001C46  828A               	bsf	3978,1,c	;volatile
  2794                           
  2795                           ;main.c: 78: LATBbits.LATB0 = 1;;
  2796  001C48  808A               	bsf	3978,0,c	;volatile
  2797  001C4A  0012               	return		;funcret
  2798  001C4C                     __end_of_Setup:
  2799                           	opt stack 0
  2800                           tblptru	equ	0xFF8
  2801                           tblptrh	equ	0xFF7
  2802                           tblptrl	equ	0xFF6
  2803                           tablat	equ	0xFF5
  2804                           prodh	equ	0xFF4
  2805                           prodl	equ	0xFF3
  2806                           indf0	equ	0xFEF
  2807                           postinc0	equ	0xFEE
  2808                           fsr0h	equ	0xFEA
  2809                           fsr0l	equ	0xFE9
  2810                           wreg	equ	0xFE8
  2811                           postdec1	equ	0xFE5
  2812                           fsr1l	equ	0xFE1
  2813                           indf2	equ	0xFDF
  2814                           postinc2	equ	0xFDE
  2815                           postdec2	equ	0xFDD
  2816                           fsr2h	equ	0xFDA
  2817                           fsr2l	equ	0xFD9
  2818                           status	equ	0xFD8
  2819                           
  2820 ;; *************** function _lcd_init *****************
  2821 ;; Defined at:
  2822 ;;		line 119 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2823 ;; Parameters:    Size  Location     Type
  2824 ;;		None
  2825 ;; Auto vars:     Size  Location     Type
  2826 ;;  i               1    4[COMRAM] unsigned char 
  2827 ;; Return value:  Size  Location     Type
  2828 ;;		None               void
  2829 ;; Registers used:
  2830 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2831 ;; Tracked objects:
  2832 ;;		On entry : 0/0
  2833 ;;		On exit  : 0/0
  2834 ;;		Unchanged: 0/0
  2835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2837 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2839 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2840 ;;Total ram usage:        1 bytes
  2841 ;; Hardware stack levels used:    1
  2842 ;; Hardware stack levels required when called:    2
  2843 ;; This function calls:
  2844 ;;		_Delay1KTCYx
  2845 ;;		_lcd_send_byte
  2846 ;;		_lcd_send_nibble
  2847 ;; This function is called by:
  2848 ;;		_Setup
  2849 ;; This function uses a non-reentrant model
  2850 ;;
  2851                           
  2852                           	psect	text13
  2853  0018EC                     __ptext13:
  2854                           	opt stack 0
  2855  0018EC                     _lcd_init:
  2856                           	opt stack 27
  2857                           
  2858                           ;unmc_lcd_216.c: 120: int8 i;
  2859                           ;unmc_lcd_216.c: 122: TRISBbits.TRISB3=0;
  2860                           
  2861                           ;incstack = 0
  2862  0018EC  9693               	bcf	3987,3,c	;volatile
  2863                           
  2864                           ;unmc_lcd_216.c: 123: TRISBbits.TRISB2=0;
  2865  0018EE  9493               	bcf	3987,2,c	;volatile
  2866                           
  2867                           ;unmc_lcd_216.c: 128: LATBbits.LATB3=0;
  2868  0018F0  968A               	bcf	3978,3,c	;volatile
  2869                           
  2870                           ;unmc_lcd_216.c: 129: LATBbits.LATB2=0;
  2871  0018F2  948A               	bcf	3978,2,c	;volatile
  2872                           
  2873                           ;unmc_lcd_216.c: 134: TRISBbits.TRISB4=0;
  2874  0018F4  9893               	bcf	3987,4,c	;volatile
  2875                           
  2876                           ;unmc_lcd_216.c: 135: TRISBbits.TRISB5=0;
  2877  0018F6  9A93               	bcf	3987,5,c	;volatile
  2878                           
  2879                           ;unmc_lcd_216.c: 136: TRISBbits.TRISB6=0;
  2880  0018F8  9C93               	bcf	3987,6,c	;volatile
  2881                           
  2882                           ;unmc_lcd_216.c: 137: TRISBbits.TRISB7=0;
  2883  0018FA  9E93               	bcf	3987,7,c	;volatile
  2884                           
  2885                           ;unmc_lcd_216.c: 139: Delay1KTCYx(8000000UL/800000UL);
  2886  0018FC  0E0A               	movlw	10
  2887  0018FE  ECA1  F00E         	call	_Delay1KTCYx
  2888                           
  2889                           ;unmc_lcd_216.c: 140: Delay1KTCYx(8000000UL/800000UL);
  2890  001902  0E0A               	movlw	10
  2891  001904  ECA1  F00E         	call	_Delay1KTCYx
  2892                           
  2893                           ;unmc_lcd_216.c: 141: Delay1KTCYx(8000000UL/800000UL);
  2894  001908  0E0A               	movlw	10
  2895  00190A  ECA1  F00E         	call	_Delay1KTCYx
  2896                           
  2897                           ;unmc_lcd_216.c: 143: for(i=0 ;i < 3; i++){
  2898  00190E  0E00               	movlw	0
  2899  001910  6E05               	movwf	lcd_init@i,c
  2900  001912                     l2365:
  2901  001912  0E02               	movlw	2
  2902  001914  6405               	cpfsgt	lcd_init@i,c
  2903  001916  D001               	goto	l2369
  2904  001918  D008               	goto	l2375
  2905  00191A                     l2369:
  2906                           
  2907                           ;unmc_lcd_216.c: 144: lcd_send_nibble(0x03);
  2908  00191A  0E03               	movlw	3
  2909  00191C  ECF4  F00C         	call	_lcd_send_nibble
  2910                           
  2911                           ;unmc_lcd_216.c: 145: Delay1KTCYx(8000000UL/800000UL);
  2912  001920  0E0A               	movlw	10
  2913  001922  ECA1  F00E         	call	_Delay1KTCYx
  2914  001926  2A05               	incf	lcd_init@i,f,c
  2915  001928  D7F4               	goto	l2365
  2916  00192A                     l2375:
  2917                           
  2918                           ;unmc_lcd_216.c: 146: }
  2919                           ;unmc_lcd_216.c: 148: lcd_send_nibble(0x02);
  2920  00192A  0E02               	movlw	2
  2921  00192C  ECF4  F00C         	call	_lcd_send_nibble
  2922                           
  2923                           ;unmc_lcd_216.c: 150: for(i=0; i < sizeof(LCD_INIT_STRING); i++){
  2924  001930  0E00               	movlw	0
  2925  001932  6E05               	movwf	lcd_init@i,c
  2926  001934  0E03               	movlw	3
  2927  001936  6405               	cpfsgt	lcd_init@i,c
  2928  001938  D002               	goto	l2383
  2929  00193A  0012               	return	
  2930  00193C  0012               	return	
  2931  00193E                     l2383:
  2932                           
  2933                           ;unmc_lcd_216.c: 151: lcd_send_byte(0, LCD_INIT_STRING[i]);
  2934  00193E  5005               	movf	lcd_init@i,w,c
  2935  001940  0D01               	mullw	1
  2936  001942  0E0B               	movlw	low _LCD_INIT_STRING
  2937  001944  24F3               	addwf	prodl,w,c
  2938  001946  6EF6               	movwf	tblptrl,c
  2939  001948  0E0F               	movlw	high _LCD_INIT_STRING
  2940  00194A  20F4               	addwfc	prodh,w,c
  2941  00194C  6EF7               	movwf	tblptrh,c
  2942  00194E                     	if	0	;There are less than 3 active tblptr bytes
  2943  00194E                     	endif
  2944  00194E  0008               	tblrd		*
  2945  001950  CFF5 F003          	movff	tablat,lcd_send_byte@n
  2946  001954  0E00               	movlw	0
  2947  001956  EC48  F00E         	call	_lcd_send_byte
  2948                           
  2949                           ;unmc_lcd_216.c: 153: Delay1KTCYx(8000000UL/800000UL);
  2950  00195A  0E0A               	movlw	10
  2951  00195C  ECA1  F00E         	call	_Delay1KTCYx
  2952  001960  2A05               	incf	lcd_init@i,f,c
  2953  001962  0E03               	movlw	3
  2954  001964  6405               	cpfsgt	lcd_init@i,c
  2955  001966  D7EB               	goto	l2383
  2956  001968  0012               	return	
  2957  00196A  0012               	return		;funcret
  2958  00196C                     __end_of_lcd_init:
  2959                           	opt stack 0
  2960                           tblptru	equ	0xFF8
  2961                           tblptrh	equ	0xFF7
  2962                           tblptrl	equ	0xFF6
  2963                           tablat	equ	0xFF5
  2964                           prodh	equ	0xFF4
  2965                           prodl	equ	0xFF3
  2966                           indf0	equ	0xFEF
  2967                           postinc0	equ	0xFEE
  2968                           fsr0h	equ	0xFEA
  2969                           fsr0l	equ	0xFE9
  2970                           wreg	equ	0xFE8
  2971                           postdec1	equ	0xFE5
  2972                           fsr1l	equ	0xFE1
  2973                           indf2	equ	0xFDF
  2974                           postinc2	equ	0xFDE
  2975                           postdec2	equ	0xFDD
  2976                           fsr2h	equ	0xFDA
  2977                           fsr2l	equ	0xFD9
  2978                           status	equ	0xFD8
  2979                           
  2980 ;; *************** function _Delay1KTCYx *****************
  2981 ;; Defined at:
  2982 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\d1ktcyx.c"
  2983 ;; Parameters:    Size  Location     Type
  2984 ;;  unit            1    wreg     unsigned char 
  2985 ;; Auto vars:     Size  Location     Type
  2986 ;;  unit            1    0[COMRAM] unsigned char 
  2987 ;; Return value:  Size  Location     Type
  2988 ;;		None               void
  2989 ;; Registers used:
  2990 ;;		wreg
  2991 ;; Tracked objects:
  2992 ;;		On entry : 0/0
  2993 ;;		On exit  : 0/0
  2994 ;;		Unchanged: 0/0
  2995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2997 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2999 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3000 ;;Total ram usage:        1 bytes
  3001 ;; Hardware stack levels used:    1
  3002 ;; This function calls:
  3003 ;;		Nothing
  3004 ;; This function is called by:
  3005 ;;		_lcd_init
  3006 ;;		_DelayPORXLCD
  3007 ;; This function uses a non-reentrant model
  3008 ;;
  3009                           
  3010                           	psect	text14
  3011  001D42                     __ptext14:
  3012                           	opt stack 0
  3013  001D42                     _Delay1KTCYx:
  3014                           	opt stack 28
  3015                           
  3016                           ;incstack = 0
  3017                           ;Delay1KTCYx@unit stored from wreg
  3018  001D42  6E01               	movwf	Delay1KTCYx@unit,c
  3019  001D44  0EFA               	movlw	250
  3020  001D46                     u2397:
  3021  001D46  F000               	nop	
  3022  001D48  2EE8               	decfsz	wreg,f,c
  3023  001D4A  D7FD               	goto	u2397
  3024  001D4C  2E01               	decfsz	Delay1KTCYx@unit,f,c
  3025  001D4E  D7FA               	goto	l1299
  3026  001D50  0012               	return	
  3027  001D52  0012               	return		;funcret
  3028  001D54                     __end_of_Delay1KTCYx:
  3029                           	opt stack 0
  3030                           tblptru	equ	0xFF8
  3031                           tblptrh	equ	0xFF7
  3032                           tblptrl	equ	0xFF6
  3033                           tablat	equ	0xFF5
  3034                           prodh	equ	0xFF4
  3035                           prodl	equ	0xFF3
  3036                           indf0	equ	0xFEF
  3037                           postinc0	equ	0xFEE
  3038                           fsr0h	equ	0xFEA
  3039                           fsr0l	equ	0xFE9
  3040                           wreg	equ	0xFE8
  3041                           postdec1	equ	0xFE5
  3042                           fsr1l	equ	0xFE1
  3043                           indf2	equ	0xFDF
  3044                           postinc2	equ	0xFDE
  3045                           postdec2	equ	0xFDD
  3046                           fsr2h	equ	0xFDA
  3047                           fsr2l	equ	0xFD9
  3048                           status	equ	0xFD8
  3049                           
  3050 ;; *************** function _lcd_comand *****************
  3051 ;; Defined at:
  3052 ;;		line 189 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3053 ;; Parameters:    Size  Location     Type
  3054 ;;  d               1    wreg     unsigned char 
  3055 ;; Auto vars:     Size  Location     Type
  3056 ;;  d               1    4[COMRAM] unsigned char 
  3057 ;; Return value:  Size  Location     Type
  3058 ;;		None               void
  3059 ;; Registers used:
  3060 ;;		wreg, status,2, status,0, cstack
  3061 ;; Tracked objects:
  3062 ;;		On entry : 0/0
  3063 ;;		On exit  : 0/0
  3064 ;;		Unchanged: 0/0
  3065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3067 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3069 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3070 ;;Total ram usage:        1 bytes
  3071 ;; Hardware stack levels used:    1
  3072 ;; Hardware stack levels required when called:    2
  3073 ;; This function calls:
  3074 ;;		_lcd_send_byte
  3075 ;; This function is called by:
  3076 ;;		_caratula
  3077 ;;		_Setup
  3078 ;; This function uses a non-reentrant model
  3079 ;;
  3080                           
  3081                           	psect	text15
  3082  001D78                     __ptext15:
  3083                           	opt stack 0
  3084  001D78                     _lcd_comand:
  3085                           	opt stack 27
  3086                           
  3087                           ;incstack = 0
  3088                           ;lcd_comand@d stored from wreg
  3089  001D78  6E05               	movwf	lcd_comand@d,c
  3090                           
  3091                           ;unmc_lcd_216.c: 190: lcd_send_byte(0,d);
  3092  001D7A  C005  F003         	movff	lcd_comand@d,lcd_send_byte@n
  3093  001D7E  0E00               	movlw	0
  3094  001D80  EC48  F00E         	call	_lcd_send_byte
  3095  001D84  0012               	return		;funcret
  3096  001D86                     __end_of_lcd_comand:
  3097                           	opt stack 0
  3098                           tblptru	equ	0xFF8
  3099                           tblptrh	equ	0xFF7
  3100                           tblptrl	equ	0xFF6
  3101                           tablat	equ	0xFF5
  3102                           prodh	equ	0xFF4
  3103                           prodl	equ	0xFF3
  3104                           indf0	equ	0xFEF
  3105                           postinc0	equ	0xFEE
  3106                           fsr0h	equ	0xFEA
  3107                           fsr0l	equ	0xFE9
  3108                           wreg	equ	0xFE8
  3109                           postdec1	equ	0xFE5
  3110                           fsr1l	equ	0xFE1
  3111                           indf2	equ	0xFDF
  3112                           postinc2	equ	0xFDE
  3113                           postdec2	equ	0xFDD
  3114                           fsr2h	equ	0xFDA
  3115                           fsr2l	equ	0xFD9
  3116                           status	equ	0xFD8
  3117                           
  3118 ;; *************** function _lcd_send_byte *****************
  3119 ;; Defined at:
  3120 ;;		line 86 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3121 ;; Parameters:    Size  Location     Type
  3122 ;;  address         1    wreg     unsigned char 
  3123 ;;  n               1    2[COMRAM] unsigned char 
  3124 ;; Auto vars:     Size  Location     Type
  3125 ;;  address         1    3[COMRAM] unsigned char 
  3126 ;; Return value:  Size  Location     Type
  3127 ;;		None               void
  3128 ;; Registers used:
  3129 ;;		wreg, status,2, status,0, cstack
  3130 ;; Tracked objects:
  3131 ;;		On entry : 0/0
  3132 ;;		On exit  : 0/0
  3133 ;;		Unchanged: 0/0
  3134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3135 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3136 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3138 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3139 ;;Total ram usage:        2 bytes
  3140 ;; Hardware stack levels used:    1
  3141 ;; Hardware stack levels required when called:    1
  3142 ;; This function calls:
  3143 ;;		_Delay100TCYx
  3144 ;;		_lcd_send_nibble
  3145 ;; This function is called by:
  3146 ;;		_lcd_init
  3147 ;;		_lcd_gotoxy
  3148 ;;		_lcd_putc
  3149 ;;		_lcd_comand
  3150 ;;		_lcd_setcursor_vb
  3151 ;; This function uses a non-reentrant model
  3152 ;;
  3153                           
  3154                           	psect	text16
  3155  001C90                     __ptext16:
  3156                           	opt stack 0
  3157  001C90                     _lcd_send_byte:
  3158                           	opt stack 26
  3159                           
  3160                           ;incstack = 0
  3161                           ;lcd_send_byte@address stored from wreg
  3162  001C90  6E04               	movwf	lcd_send_byte@address,c
  3163                           
  3164                           ;unmc_lcd_216.c: 88: LATBbits.LATB3=0;
  3165  001C92  968A               	bcf	3978,3,c	;volatile
  3166                           
  3167                           ;unmc_lcd_216.c: 93: Delay100TCYx(8000000UL/4000000UL);
  3168  001C94  0E02               	movlw	2
  3169  001C96  ECAA  F00E         	call	_Delay100TCYx
  3170                           
  3171                           ;unmc_lcd_216.c: 96: TRISBbits.TRISB4=0;
  3172  001C9A  9893               	bcf	3987,4,c	;volatile
  3173                           
  3174                           ;unmc_lcd_216.c: 97: TRISBbits.TRISB5=0;
  3175  001C9C  9A93               	bcf	3987,5,c	;volatile
  3176                           
  3177                           ;unmc_lcd_216.c: 98: TRISBbits.TRISB6=0;
  3178  001C9E  9C93               	bcf	3987,6,c	;volatile
  3179                           
  3180                           ;unmc_lcd_216.c: 99: TRISBbits.TRISB7=0;
  3181  001CA0  9E93               	bcf	3987,7,c	;volatile
  3182                           
  3183                           ;unmc_lcd_216.c: 101: if(address)
  3184  001CA2  5004               	movf	lcd_send_byte@address,w,c
  3185  001CA4  B4D8               	btfsc	status,2,c
  3186  001CA6  D002               	goto	l75
  3187                           
  3188                           ;unmc_lcd_216.c: 102: LATBbits.LATB3=1;
  3189  001CA8  868A               	bsf	3978,3,c	;volatile
  3190  001CAA  D001               	goto	l76
  3191  001CAC                     l75:
  3192                           
  3193                           ;unmc_lcd_216.c: 103: else
  3194                           ;unmc_lcd_216.c: 104: LATBbits.LATB3=0;
  3195  001CAC  968A               	bcf	3978,3,c	;volatile
  3196  001CAE                     l76:
  3197                           
  3198                           ;unmc_lcd_216.c: 106: __nop();
  3199  001CAE  F000               	nop	
  3200                           
  3201                           ;unmc_lcd_216.c: 113: lcd_send_nibble(n >> 4);
  3202  001CB0  3803               	swapf	lcd_send_byte@n,w,c
  3203  001CB2  0B0F               	andlw	15
  3204  001CB4  ECF4  F00C         	call	_lcd_send_nibble
  3205                           
  3206                           ;unmc_lcd_216.c: 114: lcd_send_nibble(n & 0xf);
  3207  001CB8  5003               	movf	lcd_send_byte@n,w,c
  3208  001CBA  0B0F               	andlw	15
  3209  001CBC  ECF4  F00C         	call	_lcd_send_nibble
  3210  001CC0  0012               	return		;funcret
  3211  001CC2                     __end_of_lcd_send_byte:
  3212                           	opt stack 0
  3213                           tblptru	equ	0xFF8
  3214                           tblptrh	equ	0xFF7
  3215                           tblptrl	equ	0xFF6
  3216                           tablat	equ	0xFF5
  3217                           prodh	equ	0xFF4
  3218                           prodl	equ	0xFF3
  3219                           indf0	equ	0xFEF
  3220                           postinc0	equ	0xFEE
  3221                           fsr0h	equ	0xFEA
  3222                           fsr0l	equ	0xFE9
  3223                           wreg	equ	0xFE8
  3224                           postdec1	equ	0xFE5
  3225                           fsr1l	equ	0xFE1
  3226                           indf2	equ	0xFDF
  3227                           postinc2	equ	0xFDE
  3228                           postdec2	equ	0xFDD
  3229                           fsr2h	equ	0xFDA
  3230                           fsr2l	equ	0xFD9
  3231                           status	equ	0xFD8
  3232                           
  3233 ;; *************** function _lcd_send_nibble *****************
  3234 ;; Defined at:
  3235 ;;		line 25 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3236 ;; Parameters:    Size  Location     Type
  3237 ;;  nibble          1    wreg     unsigned char 
  3238 ;; Auto vars:     Size  Location     Type
  3239 ;;  nibble          1    1[COMRAM] unsigned char 
  3240 ;; Return value:  Size  Location     Type
  3241 ;;		None               void
  3242 ;; Registers used:
  3243 ;;		wreg, status,2, status,0
  3244 ;; Tracked objects:
  3245 ;;		On entry : 0/0
  3246 ;;		On exit  : 0/0
  3247 ;;		Unchanged: 0/0
  3248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3250 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3251 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3252 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3253 ;;Total ram usage:        2 bytes
  3254 ;; Hardware stack levels used:    1
  3255 ;; This function calls:
  3256 ;;		Nothing
  3257 ;; This function is called by:
  3258 ;;		_lcd_send_byte
  3259 ;;		_lcd_init
  3260 ;; This function uses a non-reentrant model
  3261 ;;
  3262                           
  3263                           	psect	text17
  3264  0019E8                     __ptext17:
  3265                           	opt stack 0
  3266  0019E8                     _lcd_send_nibble:
  3267                           	opt stack 26
  3268                           
  3269                           ;incstack = 0
  3270                           ;lcd_send_nibble@nibble stored from wreg
  3271  0019E8  6E02               	movwf	lcd_send_nibble@nibble,c
  3272                           
  3273                           ;unmc_lcd_216.c: 27: LATBbits.LATB4=!!(nibble & 0x01);
  3274  0019EA  A002               	btfss	lcd_send_nibble@nibble,0,c
  3275  0019EC  D003               	goto	u1190
  3276  0019EE  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3277  0019F0  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  3278  0019F2  D001               	goto	u1208
  3279  0019F4                     u1190:
  3280  0019F4  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3281  0019F6                     u1208:
  3282  0019F6  3A01               	swapf	??_lcd_send_nibble,f,c
  3283  0019F8  508A               	movf	3978,w,c	;volatile
  3284  0019FA  1801               	xorwf	??_lcd_send_nibble,w,c
  3285  0019FC  0BEF               	andlw	-17
  3286  0019FE  1801               	xorwf	??_lcd_send_nibble,w,c
  3287  001A00  6E8A               	movwf	3978,c	;volatile
  3288                           
  3289                           ;unmc_lcd_216.c: 28: LATBbits.LATB5=!!(nibble & 0x02);
  3290  001A02  A202               	btfss	lcd_send_nibble@nibble,1,c
  3291  001A04  D003               	goto	u1210
  3292  001A06  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3293  001A08  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  3294  001A0A  D001               	goto	u1228
  3295  001A0C                     u1210:
  3296  001A0C  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3297  001A0E                     u1228:
  3298  001A0E  3A01               	swapf	??_lcd_send_nibble,f,c
  3299  001A10  4601               	rlncf	??_lcd_send_nibble,f,c
  3300  001A12  508A               	movf	3978,w,c	;volatile
  3301  001A14  1801               	xorwf	??_lcd_send_nibble,w,c
  3302  001A16  0BDF               	andlw	-33
  3303  001A18  1801               	xorwf	??_lcd_send_nibble,w,c
  3304  001A1A  6E8A               	movwf	3978,c	;volatile
  3305                           
  3306                           ;unmc_lcd_216.c: 29: LATBbits.LATB6=!!(nibble & 0x04);
  3307  001A1C  A402               	btfss	lcd_send_nibble@nibble,2,c
  3308  001A1E  D003               	goto	u1230
  3309  001A20  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3310  001A22  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  3311  001A24  D001               	goto	u1248
  3312  001A26                     u1230:
  3313  001A26  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3314  001A28                     u1248:
  3315  001A28  3A01               	swapf	??_lcd_send_nibble,f,c
  3316  001A2A  4601               	rlncf	??_lcd_send_nibble,f,c
  3317  001A2C  4601               	rlncf	??_lcd_send_nibble,f,c
  3318  001A2E  508A               	movf	3978,w,c	;volatile
  3319  001A30  1801               	xorwf	??_lcd_send_nibble,w,c
  3320  001A32  0BBF               	andlw	-65
  3321  001A34  1801               	xorwf	??_lcd_send_nibble,w,c
  3322  001A36  6E8A               	movwf	3978,c	;volatile
  3323                           
  3324                           ;unmc_lcd_216.c: 30: LATBbits.LATB7=!!(nibble & 0x08);
  3325  001A38  A602               	btfss	lcd_send_nibble@nibble,3,c
  3326  001A3A  D003               	goto	u1250
  3327  001A3C  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3328  001A3E  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  3329  001A40  D001               	goto	u1268
  3330  001A42                     u1250:
  3331  001A42  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3332  001A44                     u1268:
  3333  001A44  3201               	rrcf	??_lcd_send_nibble,f,c
  3334  001A46  3201               	rrcf	??_lcd_send_nibble,f,c
  3335  001A48  508A               	movf	3978,w,c	;volatile
  3336  001A4A  1801               	xorwf	??_lcd_send_nibble,w,c
  3337  001A4C  0B7F               	andlw	-129
  3338  001A4E  1801               	xorwf	??_lcd_send_nibble,w,c
  3339  001A50  6E8A               	movwf	3978,c	;volatile
  3340                           
  3341                           ;unmc_lcd_216.c: 32: __nop();
  3342  001A52  F000               	nop	
  3343                           
  3344                           ;unmc_lcd_216.c: 33: LATBbits.LATB2=1;
  3345  001A54  848A               	bsf	3978,2,c	;volatile
  3346                           
  3347                           ;unmc_lcd_216.c: 34: __nop();__nop();
  3348  001A56  F000               	nop	
  3349  001A58  F000               	nop	
  3350                           
  3351                           ;unmc_lcd_216.c: 35: LATBbits.LATB2=0;
  3352  001A5A  948A               	bcf	3978,2,c	;volatile
  3353  001A5C  0012               	return		;funcret
  3354  001A5E                     __end_of_lcd_send_nibble:
  3355                           	opt stack 0
  3356                           tblptru	equ	0xFF8
  3357                           tblptrh	equ	0xFF7
  3358                           tblptrl	equ	0xFF6
  3359                           tablat	equ	0xFF5
  3360                           prodh	equ	0xFF4
  3361                           prodl	equ	0xFF3
  3362                           indf0	equ	0xFEF
  3363                           postinc0	equ	0xFEE
  3364                           fsr0h	equ	0xFEA
  3365                           fsr0l	equ	0xFE9
  3366                           wreg	equ	0xFE8
  3367                           postdec1	equ	0xFE5
  3368                           fsr1l	equ	0xFE1
  3369                           indf2	equ	0xFDF
  3370                           postinc2	equ	0xFDE
  3371                           postdec2	equ	0xFDD
  3372                           fsr2h	equ	0xFDA
  3373                           fsr2l	equ	0xFD9
  3374                           status	equ	0xFD8
  3375                           
  3376 ;; *************** function _Delay100TCYx *****************
  3377 ;; Defined at:
  3378 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\d100tcyx.c"
  3379 ;; Parameters:    Size  Location     Type
  3380 ;;  unit            1    wreg     unsigned char 
  3381 ;; Auto vars:     Size  Location     Type
  3382 ;;  unit            1    0[COMRAM] unsigned char 
  3383 ;; Return value:  Size  Location     Type
  3384 ;;		None               void
  3385 ;; Registers used:
  3386 ;;		wreg
  3387 ;; Tracked objects:
  3388 ;;		On entry : 0/0
  3389 ;;		On exit  : 0/0
  3390 ;;		Unchanged: 0/0
  3391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3393 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3395 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3396 ;;Total ram usage:        1 bytes
  3397 ;; Hardware stack levels used:    1
  3398 ;; This function calls:
  3399 ;;		Nothing
  3400 ;; This function is called by:
  3401 ;;		_lcd_send_byte
  3402 ;; This function uses a non-reentrant model
  3403 ;;
  3404                           
  3405                           	psect	text18
  3406  001D54                     __ptext18:
  3407                           	opt stack 0
  3408  001D54                     _Delay100TCYx:
  3409                           	opt stack 26
  3410                           
  3411                           ;incstack = 0
  3412                           ;Delay100TCYx@unit stored from wreg
  3413  001D54  6E01               	movwf	Delay100TCYx@unit,c
  3414  001D56  0E21               	movlw	33
  3415  001D58                     u2407:
  3416  001D58  2EE8               	decfsz	wreg,f,c
  3417  001D5A  D7FE               	goto	u2407
  3418  001D5C  F000               	nop	
  3419  001D5E  2E01               	decfsz	Delay100TCYx@unit,f,c
  3420  001D60  D7FA               	goto	l2025
  3421  001D62  0012               	return	
  3422  001D64  0012               	return		;funcret
  3423  001D66                     __end_of_Delay100TCYx:
  3424                           	opt stack 0
  3425                           tblptru	equ	0xFF8
  3426                           tblptrh	equ	0xFF7
  3427                           tblptrl	equ	0xFF6
  3428                           tablat	equ	0xFF5
  3429                           prodh	equ	0xFF4
  3430                           prodl	equ	0xFF3
  3431                           indf0	equ	0xFEF
  3432                           postinc0	equ	0xFEE
  3433                           fsr0h	equ	0xFEA
  3434                           fsr0l	equ	0xFE9
  3435                           wreg	equ	0xFE8
  3436                           postdec1	equ	0xFE5
  3437                           fsr1l	equ	0xFE1
  3438                           indf2	equ	0xFDF
  3439                           postinc2	equ	0xFDE
  3440                           postdec2	equ	0xFDD
  3441                           fsr2h	equ	0xFDA
  3442                           fsr2l	equ	0xFD9
  3443                           status	equ	0xFD8
  3444                           
  3445 ;; *************** function _Write_RTC *****************
  3446 ;; Defined at:
  3447 ;;		line 22 in file "../../Program Files/Unimic/unmc_01/sources/unmc_rtcc_01.c"
  3448 ;; Parameters:    Size  Location     Type
  3449 ;;		None
  3450 ;; Auto vars:     Size  Location     Type
  3451 ;;		None
  3452 ;; Return value:  Size  Location     Type
  3453 ;;                  2   28[None  ] int 
  3454 ;; Registers used:
  3455 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3456 ;; Tracked objects:
  3457 ;;		On entry : 0/0
  3458 ;;		On exit  : 0/0
  3459 ;;		Unchanged: 0/0
  3460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3464 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3465 ;;Total ram usage:        0 bytes
  3466 ;; Hardware stack levels used:    1
  3467 ;; Hardware stack levels required when called:    2
  3468 ;; This function calls:
  3469 ;;		_RtccWrOn
  3470 ;;		_RtccWriteDate
  3471 ;;		_RtccWriteTime
  3472 ;;		___awdiv
  3473 ;; This function is called by:
  3474 ;;		_Setup
  3475 ;;		_setClock
  3476 ;; This function uses a non-reentrant model
  3477 ;;
  3478                           
  3479                           	psect	text19
  3480  0014BC                     __ptext19:
  3481                           	opt stack 0
  3482  0014BC                     _Write_RTC:
  3483                           	opt stack 27
  3484                           
  3485                           ;unmc_rtcc_01.c: 24: RtccWrOn();
  3486                           
  3487                           ;incstack = 0
  3488  0014BC  ECB3  F00E         	call	_RtccWrOn	;wreg free
  3489                           
  3490                           ;unmc_rtcc_01.c: 26: PIE3bits.RTCCIE=1;
  3491  0014C0  80A3               	bsf	4003,0,c	;volatile
  3492                           
  3493                           ;unmc_rtcc_01.c: 27: segundo_d=segundo/10;
  3494  0014C2  C033  F001         	movff	_segundo,___awdiv@dividend
  3495  0014C6  C034  F002         	movff	_segundo+1,___awdiv@dividend+1
  3496  0014CA  0E00               	movlw	0
  3497  0014CC  6E04               	movwf	___awdiv@divisor+1,c
  3498  0014CE  0E0A               	movlw	10
  3499  0014D0  6E03               	movwf	___awdiv@divisor,c
  3500  0014D2  EC2B  F00C         	call	___awdiv	;wreg free
  3501  0014D6  5001               	movf	?___awdiv,w,c
  3502  0014D8  6E4A               	movwf	_segundo_d,c
  3503                           
  3504                           ;unmc_rtcc_01.c: 28: segundo_u=segundo-segundo_d*10;
  3505  0014DA  504A               	movf	_segundo_d,w,c
  3506  0014DC  0D0A               	mullw	10
  3507  0014DE  50F3               	movf	prodl,w,c
  3508  0014E0  0800               	sublw	0
  3509  0014E2  2433               	addwf	_segundo,w,c
  3510  0014E4  6E4B               	movwf	_segundo_u,c
  3511                           
  3512                           ;unmc_rtcc_01.c: 29: RtccTime.f.sec =segundo_d*16+segundo_u;
  3513  0014E6  504A               	movf	_segundo_d,w,c
  3514  0014E8  0D10               	mullw	16
  3515  0014EA  50F3               	movf	prodl,w,c
  3516  0014EC  244B               	addwf	_segundo_u,w,c
  3517  0014EE  6E3C               	movwf	_RtccTime+1,c
  3518                           
  3519                           ;unmc_rtcc_01.c: 30: minuto_d=minuto/10;
  3520  0014F0  C056  F001         	movff	_minuto,___awdiv@dividend
  3521  0014F4  C057  F002         	movff	_minuto+1,___awdiv@dividend+1
  3522  0014F8  0E00               	movlw	0
  3523  0014FA  6E04               	movwf	___awdiv@divisor+1,c
  3524  0014FC  0E0A               	movlw	10
  3525  0014FE  6E03               	movwf	___awdiv@divisor,c
  3526  001500  EC2B  F00C         	call	___awdiv	;wreg free
  3527  001504  5001               	movf	?___awdiv,w,c
  3528  001506  6E48               	movwf	_minuto_d,c
  3529                           
  3530                           ;unmc_rtcc_01.c: 31: minuto_u=minuto-minuto_d*10;
  3531  001508  5048               	movf	_minuto_d,w,c
  3532  00150A  0D0A               	mullw	10
  3533  00150C  50F3               	movf	prodl,w,c
  3534  00150E  0800               	sublw	0
  3535  001510  2456               	addwf	_minuto,w,c
  3536  001512  6E49               	movwf	_minuto_u,c
  3537                           
  3538                           ;unmc_rtcc_01.c: 32: RtccTime.f.min =minuto_d*16+minuto_u;
  3539  001514  5048               	movf	_minuto_d,w,c
  3540  001516  0D10               	mullw	16
  3541  001518  50F3               	movf	prodl,w,c
  3542  00151A  2449               	addwf	_minuto_u,w,c
  3543  00151C  6E3D               	movwf	_RtccTime+2,c
  3544                           
  3545                           ;unmc_rtcc_01.c: 33: hora_d=hora/10;
  3546  00151E  C052  F001         	movff	_hora,___awdiv@dividend
  3547  001522  C053  F002         	movff	_hora+1,___awdiv@dividend+1
  3548  001526  0E00               	movlw	0
  3549  001528  6E04               	movwf	___awdiv@divisor+1,c
  3550  00152A  0E0A               	movlw	10
  3551  00152C  6E03               	movwf	___awdiv@divisor,c
  3552  00152E  EC2B  F00C         	call	___awdiv	;wreg free
  3553  001532  5001               	movf	?___awdiv,w,c
  3554  001534  6E44               	movwf	_hora_d,c
  3555                           
  3556                           ;unmc_rtcc_01.c: 34: hora_u=hora-hora_d*10;
  3557  001536  5044               	movf	_hora_d,w,c
  3558  001538  0D0A               	mullw	10
  3559  00153A  50F3               	movf	prodl,w,c
  3560  00153C  0800               	sublw	0
  3561  00153E  2452               	addwf	_hora,w,c
  3562  001540  6E45               	movwf	_hora_u,c
  3563                           
  3564                           ;unmc_rtcc_01.c: 35: RtccTime.f.hour=hora_d*16+hora_u;
  3565  001542  5044               	movf	_hora_d,w,c
  3566  001544  0D10               	mullw	16
  3567  001546  50F3               	movf	prodl,w,c
  3568  001548  2445               	addwf	_hora_u,w,c
  3569  00154A  6E3E               	movwf	_RtccTime+3,c
  3570                           
  3571                           ;unmc_rtcc_01.c: 36: anio_d=anio/10;
  3572  00154C  C04C  F001         	movff	_anio,___awdiv@dividend
  3573  001550  C04D  F002         	movff	_anio+1,___awdiv@dividend+1
  3574  001554  0E00               	movlw	0
  3575  001556  6E04               	movwf	___awdiv@divisor+1,c
  3576  001558  0E0A               	movlw	10
  3577  00155A  6E03               	movwf	___awdiv@divisor,c
  3578  00155C  EC2B  F00C         	call	___awdiv	;wreg free
  3579  001560  5001               	movf	?___awdiv,w,c
  3580  001562  6E3F               	movwf	_anio_d,c
  3581                           
  3582                           ;unmc_rtcc_01.c: 37: anio_u=anio-anio_d*10;
  3583  001564  503F               	movf	_anio_d,w,c
  3584  001566  0D0A               	mullw	10
  3585  001568  50F3               	movf	prodl,w,c
  3586  00156A  0800               	sublw	0
  3587  00156C  244C               	addwf	_anio,w,c
  3588  00156E  6E40               	movwf	_anio_u,c
  3589                           
  3590                           ;unmc_rtcc_01.c: 38: RtccDate.f.year=anio_d*16+anio_u;
  3591  001570  503F               	movf	_anio_d,w,c
  3592  001572  0D10               	mullw	16
  3593  001574  50F3               	movf	prodl,w,c
  3594  001576  2440               	addwf	_anio_u,w,c
  3595  001578  6E3A               	movwf	_RtccDate+3,c
  3596                           
  3597                           ;unmc_rtcc_01.c: 39: mes_d=mes/10;
  3598  00157A  C054  F001         	movff	_mes,___awdiv@dividend
  3599  00157E  C055  F002         	movff	_mes+1,___awdiv@dividend+1
  3600  001582  0E00               	movlw	0
  3601  001584  6E04               	movwf	___awdiv@divisor+1,c
  3602  001586  0E0A               	movlw	10
  3603  001588  6E03               	movwf	___awdiv@divisor,c
  3604  00158A  EC2B  F00C         	call	___awdiv	;wreg free
  3605  00158E  5001               	movf	?___awdiv,w,c
  3606  001590  6E46               	movwf	_mes_d,c
  3607                           
  3608                           ;unmc_rtcc_01.c: 40: mes_u=mes-mes_d*10;
  3609  001592  5046               	movf	_mes_d,w,c
  3610  001594  0D0A               	mullw	10
  3611  001596  50F3               	movf	prodl,w,c
  3612  001598  0800               	sublw	0
  3613  00159A  2454               	addwf	_mes,w,c
  3614  00159C  6E47               	movwf	_mes_u,c
  3615                           
  3616                           ;unmc_rtcc_01.c: 41: RtccDate.f.mon=mes_d*16+mes_u;
  3617  00159E  5046               	movf	_mes_d,w,c
  3618  0015A0  0D10               	mullw	16
  3619  0015A2  50F3               	movf	prodl,w,c
  3620  0015A4  2447               	addwf	_mes_u,w,c
  3621  0015A6  6E39               	movwf	_RtccDate+2,c
  3622                           
  3623                           ;unmc_rtcc_01.c: 42: fecha_d=dia/10;
  3624  0015A8  C04E  F001         	movff	_dia,___awdiv@dividend
  3625  0015AC  C04F  F002         	movff	_dia+1,___awdiv@dividend+1
  3626  0015B0  0E00               	movlw	0
  3627  0015B2  6E04               	movwf	___awdiv@divisor+1,c
  3628  0015B4  0E0A               	movlw	10
  3629  0015B6  6E03               	movwf	___awdiv@divisor,c
  3630  0015B8  EC2B  F00C         	call	___awdiv	;wreg free
  3631  0015BC  5001               	movf	?___awdiv,w,c
  3632  0015BE  6E42               	movwf	_fecha_d,c
  3633                           
  3634                           ;unmc_rtcc_01.c: 43: fecha_u=dia-fecha_d*10;
  3635  0015C0  5042               	movf	_fecha_d,w,c
  3636  0015C2  0D0A               	mullw	10
  3637  0015C4  50F3               	movf	prodl,w,c
  3638  0015C6  0800               	sublw	0
  3639  0015C8  244E               	addwf	_dia,w,c
  3640  0015CA  6E43               	movwf	_fecha_u,c
  3641                           
  3642                           ;unmc_rtcc_01.c: 44: RtccDate.f.mday=fecha_d*16+fecha_u;
  3643  0015CC  5042               	movf	_fecha_d,w,c
  3644  0015CE  0D10               	mullw	16
  3645  0015D0  50F3               	movf	prodl,w,c
  3646  0015D2  2443               	addwf	_fecha_u,w,c
  3647  0015D4  6E38               	movwf	_RtccDate+1,c
  3648                           
  3649                           ;unmc_rtcc_01.c: 45: dia_semana=diasem;
  3650  0015D6  C050  F041         	movff	_diasem,_dia_semana
  3651                           
  3652                           ;unmc_rtcc_01.c: 46: RtccDate.f.wday =diasem;
  3653  0015DA  C050  F037         	movff	_diasem,_RtccDate
  3654                           
  3655                           ;unmc_rtcc_01.c: 47: RtccWriteTime(&RtccTime,1);
  3656  0015DE  0E3B               	movlw	low _RtccTime
  3657  0015E0  6E01               	movwf	RtccWriteTime@pTm,c
  3658  0015E2  0E00               	movlw	high _RtccTime
  3659  0015E4  6E02               	movwf	RtccWriteTime@pTm+1,c
  3660  0015E6  0E01               	movlw	1
  3661  0015E8  6E03               	movwf	RtccWriteTime@di,c
  3662  0015EA  ECA5  F00B         	call	_RtccWriteTime	;wreg free
  3663                           
  3664                           ;unmc_rtcc_01.c: 48: RtccWriteDate(&RtccDate,1);
  3665  0015EE  0E37               	movlw	low _RtccDate
  3666  0015F0  6E01               	movwf	RtccWriteDate@pDt,c
  3667  0015F2  0E00               	movlw	high _RtccDate
  3668  0015F4  6E02               	movwf	RtccWriteDate@pDt+1,c
  3669  0015F6  0E01               	movlw	1
  3670  0015F8  6E03               	movwf	RtccWriteDate@di,c
  3671  0015FA  EC02  F00B         	call	_RtccWriteDate	;wreg free
  3672                           
  3673                           ;unmc_rtcc_01.c: 49: (RTCCFGbits.RTCEN=1);
  3674  0015FE  010F               	movlb	15	; () banked
  3675  001600  8F3F               	bsf	63,7,b	;volatile
  3676                           
  3677                           ; BSR set to: 15
  3678  001602  0012               	return		;funcret
  3679  001604                     __end_of_Write_RTC:
  3680                           	opt stack 0
  3681                           tblptru	equ	0xFF8
  3682                           tblptrh	equ	0xFF7
  3683                           tblptrl	equ	0xFF6
  3684                           tablat	equ	0xFF5
  3685                           prodh	equ	0xFF4
  3686                           prodl	equ	0xFF3
  3687                           indf0	equ	0xFEF
  3688                           postinc0	equ	0xFEE
  3689                           fsr0h	equ	0xFEA
  3690                           fsr0l	equ	0xFE9
  3691                           wreg	equ	0xFE8
  3692                           postdec1	equ	0xFE5
  3693                           fsr1l	equ	0xFE1
  3694                           indf2	equ	0xFDF
  3695                           postinc2	equ	0xFDE
  3696                           postdec2	equ	0xFDD
  3697                           fsr2h	equ	0xFDA
  3698                           fsr2l	equ	0xFD9
  3699                           status	equ	0xFD8
  3700                           
  3701 ;; *************** function ___awdiv *****************
  3702 ;; Defined at:
  3703 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\awdiv.c"
  3704 ;; Parameters:    Size  Location     Type
  3705 ;;  dividend        2    0[COMRAM] int 
  3706 ;;  divisor         2    2[COMRAM] int 
  3707 ;; Auto vars:     Size  Location     Type
  3708 ;;  quotient        2    6[COMRAM] int 
  3709 ;;  sign            1    5[COMRAM] unsigned char 
  3710 ;;  counter         1    4[COMRAM] unsigned char 
  3711 ;; Return value:  Size  Location     Type
  3712 ;;                  2    0[COMRAM] int 
  3713 ;; Registers used:
  3714 ;;		wreg, status,2, status,0
  3715 ;; Tracked objects:
  3716 ;;		On entry : 0/0
  3717 ;;		On exit  : 0/0
  3718 ;;		Unchanged: 0/0
  3719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3720 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3721 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3723 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3724 ;;Total ram usage:        8 bytes
  3725 ;; Hardware stack levels used:    1
  3726 ;; This function calls:
  3727 ;;		Nothing
  3728 ;; This function is called by:
  3729 ;;		_Write_RTC
  3730 ;; This function uses a non-reentrant model
  3731 ;;
  3732                           
  3733                           	psect	text20
  3734  001856                     __ptext20:
  3735                           	opt stack 0
  3736  001856                     ___awdiv:
  3737                           	opt stack 28
  3738                           
  3739                           ; BSR set to: 15
  3740                           ;incstack = 0
  3741  001856  0E00               	movlw	0
  3742  001858  6E06               	movwf	___awdiv@sign,c
  3743  00185A  AE04               	btfss	___awdiv@divisor+1,7,c
  3744  00185C  D007               	goto	l2233
  3745  00185E  6C03               	negf	___awdiv@divisor,c
  3746  001860  1E04               	comf	___awdiv@divisor+1,f,c
  3747  001862  B0D8               	btfsc	status,0,c
  3748  001864  2A04               	incf	___awdiv@divisor+1,f,c
  3749  001866  0E01               	movlw	1
  3750  001868  6E06               	movwf	___awdiv@sign,c
  3751  00186A  D000               	goto	l2233
  3752  00186C                     l2233:
  3753  00186C  AE02               	btfss	___awdiv@dividend+1,7,c
  3754  00186E  D007               	goto	l2239
  3755  001870  6C01               	negf	___awdiv@dividend,c
  3756  001872  1E02               	comf	___awdiv@dividend+1,f,c
  3757  001874  B0D8               	btfsc	status,0,c
  3758  001876  2A02               	incf	___awdiv@dividend+1,f,c
  3759  001878  0E01               	movlw	1
  3760  00187A  1A06               	xorwf	___awdiv@sign,f,c
  3761  00187C  D000               	goto	l2239
  3762  00187E                     l2239:
  3763  00187E  0E00               	movlw	0
  3764  001880  6E08               	movwf	___awdiv@quotient+1,c
  3765  001882  0E00               	movlw	0
  3766  001884  6E07               	movwf	___awdiv@quotient,c
  3767  001886  5003               	movf	___awdiv@divisor,w,c
  3768  001888  1004               	iorwf	___awdiv@divisor+1,w,c
  3769  00188A  B4D8               	btfsc	status,2,c
  3770  00188C  D021               	goto	l2261
  3771  00188E  0E01               	movlw	1
  3772  001890  6E05               	movwf	___awdiv@counter,c
  3773  001892  D005               	goto	l2247
  3774  001894                     l2245:
  3775  001894  90D8               	bcf	status,0,c
  3776  001896  3603               	rlcf	___awdiv@divisor,f,c
  3777  001898  3604               	rlcf	___awdiv@divisor+1,f,c
  3778  00189A  2A05               	incf	___awdiv@counter,f,c
  3779  00189C  D000               	goto	l2247
  3780  00189E                     l2247:
  3781  00189E  BE04               	btfsc	___awdiv@divisor+1,7,c
  3782  0018A0  D002               	goto	l2249
  3783  0018A2  D7F8               	goto	l2245
  3784  0018A4  D000               	goto	l2249
  3785  0018A6                     l2249:
  3786  0018A6  90D8               	bcf	status,0,c
  3787  0018A8  3607               	rlcf	___awdiv@quotient,f,c
  3788  0018AA  3608               	rlcf	___awdiv@quotient+1,f,c
  3789  0018AC  5003               	movf	___awdiv@divisor,w,c
  3790  0018AE  5C01               	subwf	___awdiv@dividend,w,c
  3791  0018B0  5004               	movf	___awdiv@divisor+1,w,c
  3792  0018B2  5802               	subwfb	___awdiv@dividend+1,w,c
  3793  0018B4  A0D8               	btfss	status,0,c
  3794  0018B6  D006               	goto	l2257
  3795  0018B8  5003               	movf	___awdiv@divisor,w,c
  3796  0018BA  5E01               	subwf	___awdiv@dividend,f,c
  3797  0018BC  5004               	movf	___awdiv@divisor+1,w,c
  3798  0018BE  5A02               	subwfb	___awdiv@dividend+1,f,c
  3799  0018C0  8007               	bsf	___awdiv@quotient,0,c
  3800  0018C2  D000               	goto	l2257
  3801  0018C4                     l2257:
  3802  0018C4  90D8               	bcf	status,0,c
  3803  0018C6  3204               	rrcf	___awdiv@divisor+1,f,c
  3804  0018C8  3203               	rrcf	___awdiv@divisor,f,c
  3805  0018CA  2E05               	decfsz	___awdiv@counter,f,c
  3806  0018CC  D7EC               	goto	l2249
  3807  0018CE  D000               	goto	l2261
  3808  0018D0                     l2261:
  3809  0018D0  5006               	movf	___awdiv@sign,w,c
  3810  0018D2  B4D8               	btfsc	status,2,c
  3811  0018D4  D005               	goto	l2265
  3812  0018D6  6C07               	negf	___awdiv@quotient,c
  3813  0018D8  1E08               	comf	___awdiv@quotient+1,f,c
  3814  0018DA  B0D8               	btfsc	status,0,c
  3815  0018DC  2A08               	incf	___awdiv@quotient+1,f,c
  3816  0018DE  D000               	goto	l2265
  3817  0018E0                     l2265:
  3818  0018E0  C007  F001         	movff	___awdiv@quotient,?___awdiv
  3819  0018E4  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  3820  0018E8  0012               	return	
  3821  0018EA  0012               	return		;funcret
  3822  0018EC                     __end_of___awdiv:
  3823                           	opt stack 0
  3824                           tblptru	equ	0xFF8
  3825                           tblptrh	equ	0xFF7
  3826                           tblptrl	equ	0xFF6
  3827                           tablat	equ	0xFF5
  3828                           prodh	equ	0xFF4
  3829                           prodl	equ	0xFF3
  3830                           indf0	equ	0xFEF
  3831                           postinc0	equ	0xFEE
  3832                           fsr0h	equ	0xFEA
  3833                           fsr0l	equ	0xFE9
  3834                           wreg	equ	0xFE8
  3835                           postdec1	equ	0xFE5
  3836                           fsr1l	equ	0xFE1
  3837                           indf2	equ	0xFDF
  3838                           postinc2	equ	0xFDE
  3839                           postdec2	equ	0xFDD
  3840                           fsr2h	equ	0xFDA
  3841                           fsr2l	equ	0xFD9
  3842                           status	equ	0xFD8
  3843                           
  3844 ;; *************** function _RtccWriteTime *****************
  3845 ;; Defined at:
  3846 ;;		line 34 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteTime.c"
  3847 ;; Parameters:    Size  Location     Type
  3848 ;;  pTm             2    0[COMRAM] PTR const struct .
  3849 ;;		 -> RtccTime(4), 
  3850 ;;  di              1    2[COMRAM] enum E7121
  3851 ;; Auto vars:     Size  Location     Type
  3852 ;;  tempHourWDay    2    9[COMRAM] struct .
  3853 ;;  tempMinSec      2    7[COMRAM] struct .
  3854 ;;  wasWrEn         1    6[COMRAM] enum E7121
  3855 ;;  wasAlrm         1    5[COMRAM] enum E7121
  3856 ;;  wasOn           1    4[COMRAM] enum E7121
  3857 ;; Return value:  Size  Location     Type
  3858 ;;                  1    wreg      enum E7121
  3859 ;; Registers used:
  3860 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3861 ;; Tracked objects:
  3862 ;;		On entry : 0/0
  3863 ;;		On exit  : 0/0
  3864 ;;		Unchanged: 0/0
  3865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3866 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3867 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3868 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3869 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3870 ;;Total ram usage:       11 bytes
  3871 ;; Hardware stack levels used:    1
  3872 ;; Hardware stack levels required when called:    1
  3873 ;; This function calls:
  3874 ;;		_RtccWrOn
  3875 ;; This function is called by:
  3876 ;;		_Write_RTC
  3877 ;; This function uses a non-reentrant model
  3878 ;;
  3879                           
  3880                           	psect	text21
  3881  00174A                     __ptext21:
  3882                           	opt stack 0
  3883  00174A                     _RtccWriteTime:
  3884                           	opt stack 27
  3885                           
  3886                           ;incstack = 0
  3887  00174A  0E00               	movlw	0
  3888  00174C  6E06               	movwf	RtccWriteTime@wasAlrm,c
  3889  00174E  EE20 F002          	lfsr	2,2
  3890  001752  5001               	movf	RtccWriteTime@pTm,w,c
  3891  001754  26D9               	addwf	fsr2l,f,c
  3892  001756  5002               	movf	RtccWriteTime@pTm+1,w,c
  3893  001758  22DA               	addwfc	fsr2h,f,c
  3894  00175A  0E5A               	movlw	90
  3895  00175C  60DF               	cpfslt	indf2,c
  3896  00175E  0012               	return	
  3897  001760  EE20 F001          	lfsr	2,1
  3898  001764  5001               	movf	RtccWriteTime@pTm,w,c
  3899  001766  26D9               	addwf	fsr2l,f,c
  3900  001768  5002               	movf	RtccWriteTime@pTm+1,w,c
  3901  00176A  22DA               	addwfc	fsr2h,f,c
  3902  00176C  0E5A               	movlw	90
  3903  00176E  60DF               	cpfslt	indf2,c
  3904  001770  0012               	return	
  3905  001772  EE20 F003          	lfsr	2,3
  3906  001776  5001               	movf	RtccWriteTime@pTm,w,c
  3907  001778  26D9               	addwf	fsr2l,f,c
  3908  00177A  5002               	movf	RtccWriteTime@pTm+1,w,c
  3909  00177C  22DA               	addwfc	fsr2h,f,c
  3910  00177E  0E24               	movlw	36
  3911  001780  64DF               	cpfsgt	indf2,c
  3912  001782  D002               	goto	l2079
  3913  001784  0012               	return	
  3914                           
  3915                           ;	Return value of _RtccWriteTime is never used
  3916  001786  0012               	return	
  3917  001788                     l2079:
  3918  001788  EE20 F002          	lfsr	2,2
  3919  00178C  5001               	movf	RtccWriteTime@pTm,w,c
  3920  00178E  26D9               	addwf	fsr2l,f,c
  3921  001790  5002               	movf	RtccWriteTime@pTm+1,w,c
  3922  001792  22DA               	addwfc	fsr2h,f,c
  3923  001794  50DF               	movf	indf2,w,c
  3924  001796  6E09               	movwf	RtccWriteTime@tempMinSec+1,c
  3925  001798  EE20 F001          	lfsr	2,1
  3926  00179C  5001               	movf	RtccWriteTime@pTm,w,c
  3927  00179E  26D9               	addwf	fsr2l,f,c
  3928  0017A0  5002               	movf	RtccWriteTime@pTm+1,w,c
  3929  0017A2  22DA               	addwfc	fsr2h,f,c
  3930  0017A4  50DF               	movf	indf2,w,c
  3931  0017A6  6E08               	movwf	RtccWriteTime@tempMinSec,c
  3932  0017A8  5003               	movf	RtccWriteTime@di,w,c
  3933  0017AA  B4D8               	btfsc	status,2,c
  3934  0017AC  D002               	goto	l2085
  3935  0017AE  9CF2               	bcf	intcon,6,c	;volatile
  3936  0017B0  D000               	goto	l2085
  3937  0017B2                     l2085:
  3938  0017B2  0E00               	movlw	0
  3939  0017B4  BB3F               	btfsc	63,5,b	;volatile
  3940  0017B6  0E01               	movlw	1
  3941  0017B8  6E07               	movwf	RtccWriteTime@wasWrEn,c
  3942  0017BA  5007               	movf	RtccWriteTime@wasWrEn,w,c
  3943  0017BC  A4D8               	btfss	status,2,c
  3944  0017BE  D003               	goto	l2089
  3945  0017C0  ECB3  F00E         	call	_RtccWrOn	;wreg free
  3946  0017C4  D000               	goto	l2089
  3947  0017C6                     l2089:
  3948  0017C6  0E00               	movlw	0
  3949  0017C8  BF3F               	btfsc	63,7,b	;volatile
  3950  0017CA  0E01               	movlw	1
  3951  0017CC  6E05               	movwf	RtccWriteTime@wasOn,c
  3952  0017CE  5005               	movf	RtccWriteTime@wasOn,w,c
  3953  0017D0  B4D8               	btfsc	status,2,c
  3954  0017D2  D007               	goto	l2095
  3955  0017D4  0E00               	movlw	0
  3956  0017D6  BE91               	btfsc	3985,7,c	;volatile
  3957  0017D8  0E01               	movlw	1
  3958  0017DA  6E06               	movwf	RtccWriteTime@wasAlrm,c
  3959  0017DC  010F               	movlb	15	; () banked
  3960  0017DE  9F3F               	bcf	63,7,b	;volatile
  3961  0017E0  D000               	goto	l2095
  3962  0017E2                     l2095:
  3963  0017E2  0EFC               	movlw	252
  3964  0017E4  010F               	movlb	15	; () banked
  3965  0017E6  173F               	andwf	63,f,b	;volatile
  3966  0017E8  010F               	movlb	15	; () banked
  3967  0017EA  813F               	bsf	63,0,b	;volatile
  3968                           
  3969                           ; BSR set to: 15
  3970  0017EC  CF98 F00A          	movff	3992,RtccWriteTime@tempHourWDay	;volatile
  3971                           
  3972                           ; BSR set to: 15
  3973  0017F0  CF99 F00B          	movff	3993,RtccWriteTime@tempHourWDay+1	;volatile
  3974                           
  3975                           ; BSR set to: 15
  3976  0017F4  EE20 F003          	lfsr	2,3
  3977  0017F8  5001               	movf	RtccWriteTime@pTm,w,c
  3978  0017FA  26D9               	addwf	fsr2l,f,c
  3979  0017FC  5002               	movf	RtccWriteTime@pTm+1,w,c
  3980  0017FE  22DA               	addwfc	fsr2h,f,c
  3981  001800  50DF               	movf	indf2,w,c
  3982  001802  6E0A               	movwf	RtccWriteTime@tempHourWDay,c
  3983                           
  3984                           ; BSR set to: 15
  3985  001804  0EFC               	movlw	252
  3986  001806  010F               	movlb	15	; () banked
  3987  001808  173F               	andwf	63,f,b	;volatile
  3988                           
  3989                           ; BSR set to: 15
  3990  00180A  010F               	movlb	15	; () banked
  3991  00180C  813F               	bsf	63,0,b	;volatile
  3992                           
  3993                           ; BSR set to: 15
  3994  00180E  C00A  FF98         	movff	RtccWriteTime@tempHourWDay,3992	;volatile
  3995                           
  3996                           ; BSR set to: 15
  3997  001812  C00B  FF99         	movff	RtccWriteTime@tempHourWDay+1,3993	;volatile
  3998                           
  3999                           ; BSR set to: 15
  4000  001816  C008  FF98         	movff	RtccWriteTime@tempMinSec,3992	;volatile
  4001                           
  4002                           ; BSR set to: 15
  4003  00181A  C009  FF99         	movff	RtccWriteTime@tempMinSec+1,3993	;volatile
  4004                           
  4005                           ; BSR set to: 15
  4006  00181E  5005               	movf	RtccWriteTime@wasOn,w,c
  4007  001820  B4D8               	btfsc	status,2,c
  4008  001822  D00D               	goto	l2127
  4009                           
  4010                           ; BSR set to: 15
  4011  001824  010F               	movlb	15	; () banked
  4012  001826  8F3F               	bsf	63,7,b	;volatile
  4013                           
  4014                           ; BSR set to: 15
  4015  001828  5006               	movf	RtccWriteTime@wasAlrm,w,c
  4016  00182A  B4D8               	btfsc	status,2,c
  4017  00182C  D002               	goto	l2123
  4018                           
  4019                           ; BSR set to: 15
  4020  00182E  8E91               	bsf	3985,7,c	;volatile
  4021  001830  D000               	goto	l2123
  4022  001832                     l2123:
  4023                           
  4024                           ; BSR set to: 15
  4025  001832  5007               	movf	RtccWriteTime@wasWrEn,w,c
  4026  001834  B4D8               	btfsc	status,2,c
  4027  001836  D009               	goto	l2131
  4028                           
  4029                           ; BSR set to: 15
  4030  001838  ECB3  F00E         	call	_RtccWrOn	;wreg free
  4031  00183C  D006               	goto	l2131
  4032  00183E                     l2127:
  4033  00183E  5007               	movf	RtccWriteTime@wasWrEn,w,c
  4034  001840  A4D8               	btfss	status,2,c
  4035  001842  D003               	goto	l2131
  4036  001844  010F               	movlb	15	; () banked
  4037  001846  9B3F               	bcf	63,5,b	;volatile
  4038                           
  4039                           ; BSR set to: 15
  4040  001848  D000               	goto	l2131
  4041  00184A                     l2131:
  4042  00184A  5003               	movf	RtccWriteTime@di,w,c
  4043  00184C  B4D8               	btfsc	status,2,c
  4044  00184E  0012               	return	
  4045  001850  8CF2               	bsf	intcon,6,c	;volatile
  4046  001852  0012               	return	
  4047                           
  4048                           ;	Return value of _RtccWriteTime is never used
  4049  001854  0012               	return		;funcret
  4050  001856                     __end_of_RtccWriteTime:
  4051                           	opt stack 0
  4052                           tblptru	equ	0xFF8
  4053                           tblptrh	equ	0xFF7
  4054                           tblptrl	equ	0xFF6
  4055                           tablat	equ	0xFF5
  4056                           prodh	equ	0xFF4
  4057                           prodl	equ	0xFF3
  4058                           intcon	equ	0xFF2
  4059                           indf0	equ	0xFEF
  4060                           postinc0	equ	0xFEE
  4061                           fsr0h	equ	0xFEA
  4062                           fsr0l	equ	0xFE9
  4063                           wreg	equ	0xFE8
  4064                           postdec1	equ	0xFE5
  4065                           fsr1l	equ	0xFE1
  4066                           indf2	equ	0xFDF
  4067                           postinc2	equ	0xFDE
  4068                           postdec2	equ	0xFDD
  4069                           fsr2h	equ	0xFDA
  4070                           fsr2l	equ	0xFD9
  4071                           status	equ	0xFD8
  4072                           
  4073 ;; *************** function _RtccWriteDate *****************
  4074 ;; Defined at:
  4075 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteDate.c"
  4076 ;; Parameters:    Size  Location     Type
  4077 ;;  pDt             2    0[COMRAM] PTR const struct .
  4078 ;;		 -> RtccDate(4), 
  4079 ;;  di              1    2[COMRAM] enum E7121
  4080 ;; Auto vars:     Size  Location     Type
  4081 ;;  tempHourWDay    2   11[COMRAM] struct .
  4082 ;;  tempDayMonth    2    9[COMRAM] struct .
  4083 ;;  tempYear        2    6[COMRAM] struct .
  4084 ;;  wasWrEn         1    8[COMRAM] enum E7121
  4085 ;;  wasAlrm         1    5[COMRAM] enum E7121
  4086 ;;  wasOn           1    4[COMRAM] enum E7121
  4087 ;; Return value:  Size  Location     Type
  4088 ;;                  1    wreg      enum E7121
  4089 ;; Registers used:
  4090 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4091 ;; Tracked objects:
  4092 ;;		On entry : 0/0
  4093 ;;		On exit  : 0/0
  4094 ;;		Unchanged: 0/0
  4095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4096 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4097 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4098 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4099 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4100 ;;Total ram usage:       13 bytes
  4101 ;; Hardware stack levels used:    1
  4102 ;; Hardware stack levels required when called:    1
  4103 ;; This function calls:
  4104 ;;		_RtccWrOn
  4105 ;; This function is called by:
  4106 ;;		_Write_RTC
  4107 ;; This function uses a non-reentrant model
  4108 ;;
  4109                           
  4110                           	psect	text22
  4111  001604                     __ptext22:
  4112                           	opt stack 0
  4113  001604                     _RtccWriteDate:
  4114                           	opt stack 27
  4115                           
  4116                           ;incstack = 0
  4117  001604  0E00               	movlw	0
  4118  001606  6E06               	movwf	RtccWriteDate@wasAlrm,c
  4119  001608  EE20 F002          	lfsr	2,2
  4120  00160C  5001               	movf	RtccWriteDate@pDt,w,c
  4121  00160E  26D9               	addwf	fsr2l,f,c
  4122  001610  5002               	movf	RtccWriteDate@pDt+1,w,c
  4123  001612  22DA               	addwfc	fsr2h,f,c
  4124  001614  0E13               	movlw	19
  4125  001616  60DF               	cpfslt	indf2,c
  4126  001618  0012               	return	
  4127  00161A  EE20 F002          	lfsr	2,2
  4128  00161E  5001               	movf	RtccWriteDate@pDt,w,c
  4129  001620  26D9               	addwf	fsr2l,f,c
  4130  001622  5002               	movf	RtccWriteDate@pDt+1,w,c
  4131  001624  22DA               	addwfc	fsr2h,f,c
  4132  001626  50DF               	movf	indf2,w,c
  4133  001628  B4D8               	btfsc	status,2,c
  4134  00162A  0012               	return	
  4135  00162C  EE20 F001          	lfsr	2,1
  4136  001630  5001               	movf	RtccWriteDate@pDt,w,c
  4137  001632  26D9               	addwf	fsr2l,f,c
  4138  001634  5002               	movf	RtccWriteDate@pDt+1,w,c
  4139  001636  22DA               	addwfc	fsr2h,f,c
  4140  001638  0E32               	movlw	50
  4141  00163A  60DF               	cpfslt	indf2,c
  4142  00163C  0012               	return	
  4143  00163E  EE20 F001          	lfsr	2,1
  4144  001642  5001               	movf	RtccWriteDate@pDt,w,c
  4145  001644  26D9               	addwf	fsr2l,f,c
  4146  001646  5002               	movf	RtccWriteDate@pDt+1,w,c
  4147  001648  22DA               	addwfc	fsr2h,f,c
  4148  00164A  50DF               	movf	indf2,w,c
  4149  00164C  B4D8               	btfsc	status,2,c
  4150  00164E  0012               	return	
  4151  001650  EE20 F003          	lfsr	2,3
  4152  001654  5001               	movf	RtccWriteDate@pDt,w,c
  4153  001656  26D9               	addwf	fsr2l,f,c
  4154  001658  5002               	movf	RtccWriteDate@pDt+1,w,c
  4155  00165A  22DA               	addwfc	fsr2h,f,c
  4156  00165C  0E99               	movlw	153
  4157  00165E  64DF               	cpfsgt	indf2,c
  4158  001660  D002               	goto	l2147
  4159  001662  0012               	return	
  4160                           
  4161                           ;	Return value of _RtccWriteDate is never used
  4162  001664  0012               	return	
  4163  001666                     l2147:
  4164  001666  EE20 F003          	lfsr	2,3
  4165  00166A  5001               	movf	RtccWriteDate@pDt,w,c
  4166  00166C  26D9               	addwf	fsr2l,f,c
  4167  00166E  5002               	movf	RtccWriteDate@pDt+1,w,c
  4168  001670  22DA               	addwfc	fsr2h,f,c
  4169  001672  50DF               	movf	indf2,w,c
  4170  001674  6E07               	movwf	RtccWriteDate@tempYear,c
  4171  001676  EE20 F001          	lfsr	2,1
  4172  00167A  5001               	movf	RtccWriteDate@pDt,w,c
  4173  00167C  26D9               	addwf	fsr2l,f,c
  4174  00167E  5002               	movf	RtccWriteDate@pDt+1,w,c
  4175  001680  22DA               	addwfc	fsr2h,f,c
  4176  001682  50DF               	movf	indf2,w,c
  4177  001684  6E0A               	movwf	RtccWriteDate@tempDayMonth,c
  4178  001686  EE20 F002          	lfsr	2,2
  4179  00168A  5001               	movf	RtccWriteDate@pDt,w,c
  4180  00168C  26D9               	addwf	fsr2l,f,c
  4181  00168E  5002               	movf	RtccWriteDate@pDt+1,w,c
  4182  001690  22DA               	addwfc	fsr2h,f,c
  4183  001692  50DF               	movf	indf2,w,c
  4184  001694  6E0B               	movwf	RtccWriteDate@tempDayMonth+1,c
  4185  001696  5003               	movf	RtccWriteDate@di,w,c
  4186  001698  B4D8               	btfsc	status,2,c
  4187  00169A  D002               	goto	l2153
  4188  00169C  9CF2               	bcf	intcon,6,c	;volatile
  4189  00169E  D000               	goto	l2153
  4190  0016A0                     l2153:
  4191  0016A0  0E00               	movlw	0
  4192  0016A2  BB3F               	btfsc	63,5,b	;volatile
  4193  0016A4  0E01               	movlw	1
  4194  0016A6  6E09               	movwf	RtccWriteDate@wasWrEn,c
  4195  0016A8  5009               	movf	RtccWriteDate@wasWrEn,w,c
  4196  0016AA  A4D8               	btfss	status,2,c
  4197  0016AC  D003               	goto	l2157
  4198  0016AE  ECB3  F00E         	call	_RtccWrOn	;wreg free
  4199  0016B2  D000               	goto	l2157
  4200  0016B4                     l2157:
  4201  0016B4  0E00               	movlw	0
  4202  0016B6  BF3F               	btfsc	63,7,b	;volatile
  4203  0016B8  0E01               	movlw	1
  4204  0016BA  6E05               	movwf	RtccWriteDate@wasOn,c
  4205  0016BC  5005               	movf	RtccWriteDate@wasOn,w,c
  4206  0016BE  B4D8               	btfsc	status,2,c
  4207  0016C0  D007               	goto	l2163
  4208  0016C2  0E00               	movlw	0
  4209  0016C4  BE91               	btfsc	3985,7,c	;volatile
  4210  0016C6  0E01               	movlw	1
  4211  0016C8  6E06               	movwf	RtccWriteDate@wasAlrm,c
  4212  0016CA  010F               	movlb	15	; () banked
  4213  0016CC  9F3F               	bcf	63,7,b	;volatile
  4214  0016CE  D000               	goto	l2163
  4215  0016D0                     l2163:
  4216  0016D0  0EFC               	movlw	252
  4217  0016D2  010F               	movlb	15	; () banked
  4218  0016D4  173F               	andwf	63,f,b	;volatile
  4219  0016D6  010F               	movlb	15	; () banked
  4220  0016D8  813F               	bsf	63,0,b	;volatile
  4221                           
  4222                           ; BSR set to: 15
  4223  0016DA  CF98 F00C          	movff	3992,RtccWriteDate@tempHourWDay	;volatile
  4224                           
  4225                           ; BSR set to: 15
  4226  0016DE  CF99 F00D          	movff	3993,RtccWriteDate@tempHourWDay+1	;volatile
  4227                           
  4228                           ; BSR set to: 15
  4229  0016E2  C001  FFD9         	movff	RtccWriteDate@pDt,fsr2l
  4230  0016E6  C002  FFDA         	movff	RtccWriteDate@pDt+1,fsr2h
  4231  0016EA  50DF               	movf	indf2,w,c
  4232  0016EC  6E0D               	movwf	RtccWriteDate@tempHourWDay+1,c
  4233                           
  4234                           ; BSR set to: 15
  4235  0016EE  0EFC               	movlw	252
  4236  0016F0  010F               	movlb	15	; () banked
  4237  0016F2  173F               	andwf	63,f,b	;volatile
  4238                           
  4239                           ; BSR set to: 15
  4240  0016F4  0E03               	movlw	3
  4241  0016F6  010F               	movlb	15	; () banked
  4242  0016F8  133F               	iorwf	63,f,b	;volatile
  4243                           
  4244                           ; BSR set to: 15
  4245  0016FA  C007  FF98         	movff	RtccWriteDate@tempYear,3992	;volatile
  4246                           
  4247                           ; BSR set to: 15
  4248  0016FE  C008  FF99         	movff	RtccWriteDate@tempYear+1,3993	;volatile
  4249                           
  4250                           ; BSR set to: 15
  4251  001702  C00A  FF98         	movff	RtccWriteDate@tempDayMonth,3992	;volatile
  4252                           
  4253                           ; BSR set to: 15
  4254  001706  C00B  FF99         	movff	RtccWriteDate@tempDayMonth+1,3993	;volatile
  4255                           
  4256                           ; BSR set to: 15
  4257  00170A  C00C  FF98         	movff	RtccWriteDate@tempHourWDay,3992	;volatile
  4258                           
  4259                           ; BSR set to: 15
  4260  00170E  C00D  FF99         	movff	RtccWriteDate@tempHourWDay+1,3993	;volatile
  4261                           
  4262                           ; BSR set to: 15
  4263  001712  5005               	movf	RtccWriteDate@wasOn,w,c
  4264  001714  B4D8               	btfsc	status,2,c
  4265  001716  D00D               	goto	l2199
  4266                           
  4267                           ; BSR set to: 15
  4268  001718  010F               	movlb	15	; () banked
  4269  00171A  8F3F               	bsf	63,7,b	;volatile
  4270                           
  4271                           ; BSR set to: 15
  4272  00171C  5006               	movf	RtccWriteDate@wasAlrm,w,c
  4273  00171E  B4D8               	btfsc	status,2,c
  4274  001720  D002               	goto	l2195
  4275                           
  4276                           ; BSR set to: 15
  4277  001722  8E91               	bsf	3985,7,c	;volatile
  4278  001724  D000               	goto	l2195
  4279  001726                     l2195:
  4280                           
  4281                           ; BSR set to: 15
  4282  001726  5009               	movf	RtccWriteDate@wasWrEn,w,c
  4283  001728  B4D8               	btfsc	status,2,c
  4284  00172A  D009               	goto	l2203
  4285                           
  4286                           ; BSR set to: 15
  4287  00172C  ECB3  F00E         	call	_RtccWrOn	;wreg free
  4288  001730  D006               	goto	l2203
  4289  001732                     l2199:
  4290  001732  5009               	movf	RtccWriteDate@wasWrEn,w,c
  4291  001734  A4D8               	btfss	status,2,c
  4292  001736  D003               	goto	l2203
  4293  001738  010F               	movlb	15	; () banked
  4294  00173A  9B3F               	bcf	63,5,b	;volatile
  4295                           
  4296                           ; BSR set to: 15
  4297  00173C  D000               	goto	l2203
  4298  00173E                     l2203:
  4299  00173E  5003               	movf	RtccWriteDate@di,w,c
  4300  001740  B4D8               	btfsc	status,2,c
  4301  001742  0012               	return	
  4302  001744  9CF2               	bcf	intcon,6,c	;volatile
  4303  001746  0012               	return	
  4304                           
  4305                           ;	Return value of _RtccWriteDate is never used
  4306  001748  0012               	return		;funcret
  4307  00174A                     __end_of_RtccWriteDate:
  4308                           	opt stack 0
  4309                           tblptru	equ	0xFF8
  4310                           tblptrh	equ	0xFF7
  4311                           tblptrl	equ	0xFF6
  4312                           tablat	equ	0xFF5
  4313                           prodh	equ	0xFF4
  4314                           prodl	equ	0xFF3
  4315                           intcon	equ	0xFF2
  4316                           indf0	equ	0xFEF
  4317                           postinc0	equ	0xFEE
  4318                           fsr0h	equ	0xFEA
  4319                           fsr0l	equ	0xFE9
  4320                           wreg	equ	0xFE8
  4321                           postdec1	equ	0xFE5
  4322                           fsr1l	equ	0xFE1
  4323                           indf2	equ	0xFDF
  4324                           postinc2	equ	0xFDE
  4325                           postdec2	equ	0xFDD
  4326                           fsr2h	equ	0xFDA
  4327                           fsr2l	equ	0xFD9
  4328                           status	equ	0xFD8
  4329                           
  4330 ;; *************** function _RtccWrOn *****************
  4331 ;; Defined at:
  4332 ;;		line 21 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWrOn.c"
  4333 ;; Parameters:    Size  Location     Type
  4334 ;;		None
  4335 ;; Auto vars:     Size  Location     Type
  4336 ;;  data            2    0        unsigned int 
  4337 ;; Return value:  Size  Location     Type
  4338 ;;		None               void
  4339 ;; Registers used:
  4340 ;;		wreg, status,2
  4341 ;; Tracked objects:
  4342 ;;		On entry : 0/0
  4343 ;;		On exit  : 0/0
  4344 ;;		Unchanged: 0/0
  4345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4349 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4350 ;;Total ram usage:        0 bytes
  4351 ;; Hardware stack levels used:    1
  4352 ;; This function calls:
  4353 ;;		Nothing
  4354 ;; This function is called by:
  4355 ;;		_Write_RTC
  4356 ;;		_RtccWriteDate
  4357 ;;		_RtccWriteTime
  4358 ;; This function uses a non-reentrant model
  4359 ;;
  4360                           
  4361                           	psect	text23
  4362  001D66                     __ptext23:
  4363                           	opt stack 0
  4364  001D66                     _RtccWrOn:
  4365                           	opt stack 27
  4366                           
  4367                           ;incstack = 0
  4368  001D66  9CF2               	bcf	intcon,6,c	;volatile
  4369  001D68  0E55               	movlw	85
  4370  001D6A  6EA7               	movwf	4007,c	;volatile
  4371  001D6C  0EAA               	movlw	170
  4372  001D6E  6EA7               	movwf	4007,c	;volatile
  4373  001D70  010F               	movlb	15	; () banked
  4374  001D72  8B3F               	bsf	63,5,b	;volatile
  4375                           
  4376                           ; BSR set to: 15
  4377  001D74  8CF2               	bsf	intcon,6,c	;volatile
  4378                           
  4379                           ; BSR set to: 15
  4380  001D76  0012               	return		;funcret
  4381  001D78                     __end_of_RtccWrOn:
  4382                           	opt stack 0
  4383                           tblptru	equ	0xFF8
  4384                           tblptrh	equ	0xFF7
  4385                           tblptrl	equ	0xFF6
  4386                           tablat	equ	0xFF5
  4387                           prodh	equ	0xFF4
  4388                           prodl	equ	0xFF3
  4389                           intcon	equ	0xFF2
  4390                           indf0	equ	0xFEF
  4391                           postinc0	equ	0xFEE
  4392                           fsr0h	equ	0xFEA
  4393                           fsr0l	equ	0xFE9
  4394                           wreg	equ	0xFE8
  4395                           postdec1	equ	0xFE5
  4396                           fsr1l	equ	0xFE1
  4397                           indf2	equ	0xFDF
  4398                           postinc2	equ	0xFDE
  4399                           postdec2	equ	0xFDD
  4400                           fsr2h	equ	0xFDA
  4401                           fsr2l	equ	0xFD9
  4402                           status	equ	0xFD8
  4403                           tblptru	equ	0xFF8
  4404                           tblptrh	equ	0xFF7
  4405                           tblptrl	equ	0xFF6
  4406                           tablat	equ	0xFF5
  4407                           prodh	equ	0xFF4
  4408                           prodl	equ	0xFF3
  4409                           intcon	equ	0xFF2
  4410                           indf0	equ	0xFEF
  4411                           postinc0	equ	0xFEE
  4412                           fsr0h	equ	0xFEA
  4413                           fsr0l	equ	0xFE9
  4414                           wreg	equ	0xFE8
  4415                           postdec1	equ	0xFE5
  4416                           fsr1l	equ	0xFE1
  4417                           indf2	equ	0xFDF
  4418                           postinc2	equ	0xFDE
  4419                           postdec2	equ	0xFDD
  4420                           fsr2h	equ	0xFDA
  4421                           fsr2l	equ	0xFD9
  4422                           status	equ	0xFD8
  4423                           
  4424                           	psect	rparam
  4425  0000                     tblptru	equ	0xFF8
  4426                           tblptrh	equ	0xFF7
  4427                           tblptrl	equ	0xFF6
  4428                           tablat	equ	0xFF5
  4429                           prodh	equ	0xFF4
  4430                           prodl	equ	0xFF3
  4431                           intcon	equ	0xFF2
  4432                           indf0	equ	0xFEF
  4433                           postinc0	equ	0xFEE
  4434                           fsr0h	equ	0xFEA
  4435                           fsr0l	equ	0xFE9
  4436                           wreg	equ	0xFE8
  4437                           postdec1	equ	0xFE5
  4438                           fsr1l	equ	0xFE1
  4439                           indf2	equ	0xFDF
  4440                           postinc2	equ	0xFDE
  4441                           postdec2	equ	0xFDD
  4442                           fsr2h	equ	0xFDA
  4443                           fsr2l	equ	0xFD9
  4444                           status	equ	0xFD8


Data Sizes:
    Strings     106
    Constant    14
    Data        12
    BSS         72
    Persistent  13
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     34      88
    BANK0           160      0      44
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    RtccWriteTime@pTm	PTR const struct . size(2) Largest target is 4
		 -> RtccTime(COMRAM[4]), 

    RtccWriteDate@pDt	PTR const struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_17(CODE[5]), STR_14(CODE[5]), STR_13(CODE[5]), STR_12(CODE[5]), 
		 -> STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), STR_6(CODE[5]), 
		 -> STR_5(CODE[5]), STR_4(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> buffer2(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    lcd_putrs@ptr	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_22(CODE[14]), STR_21(CODE[10]), STR_20(CODE[9]), STR_19(CODE[2]), 
		 -> STR_18(CODE[2]), STR_16(CODE[2]), STR_15(CODE[2]), STR_11(CODE[2]), 
		 -> STR_7(CODE[2]), buffer2(BANK0[20]), STR_3(CODE[10]), STR_2(CODE[13]), 
		 -> STR_1(CODE[33]), 


Critical Paths under _main in COMRAM

    _main->_read_keyboard
    _set_vision->_lcd_putrs
    _read_keyboard->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcd_putrs->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _caratula->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_init->_lcd_send_byte
    _lcd_comand->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _Write_RTC->_RtccWriteDate

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   20967
                                             32 COMRAM     2     2      0
                              _Setup
                           _caratula
                         _lcd_gotoxy
                          _lcd_putrs
                      _read_keyboard
                         _set_vision
 ---------------------------------------------------------------------------------
 (1) _set_vision                                           0     0      0    4531
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (1) _read_keyboard                                        1     1      0    6266
                                             31 COMRAM     1     1      0
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             28    22      6    2940
                                             12 COMRAM    19    13      6
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     287
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcd_putrs                                            2     0      2    3326
                                              8 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (3) _lcd_putc                                             1     1      0    1873
                                              7 COMRAM     1     1      0
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) _caratula                                             0     0      0    1851
                         _lcd_comand
                         _lcd_gotoxy
 ---------------------------------------------------------------------------------
 (4) _lcd_gotoxy                                           3     2      1    1205
                                              4 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) _Setup                                                0     0      0    3764
                          _Write_RTC
                         _lcd_comand
                           _lcd_init
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             1     1      0     841
                                              4 COMRAM     1     1      0
                        _Delay1KTCYx
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _lcd_comand                                           1     1      0     646
                                              4 COMRAM     1     1      0
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (4) _lcd_send_byte                                        2     1      1     624
                                              2 COMRAM     2     1      1
                       _Delay100TCYx
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (5) _lcd_send_nibble                                      2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _Delay100TCYx                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Write_RTC                                            0     0      0    2277
                           _RtccWrOn
                      _RtccWriteDate
                      _RtccWriteTime
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1068
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _RtccWriteTime                                       11     8      3     537
                                              0 COMRAM    11     8      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (3) _RtccWriteDate                                       13    10      3     672
                                              0 COMRAM    13    10      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (4) _RtccWrOn                                             2     2      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Setup
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_init
       _Delay1KTCYx
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
       _lcd_send_nibble
   _caratula
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
   _lcd_gotoxy
     _lcd_send_byte
       _Delay100TCYx
       _lcd_send_nibble
   _lcd_putrs
     _lcd_putc
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
   _read_keyboard
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _set_vision
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      2C       5       27.5%
BITCOMRAM           5F      0       1       0        1.1%
COMRAM              5F     22      58       1       92.6%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      84       6        0.0%
DATA                 0      0      84       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Sep 01 22:49:29 2016

                        _a 0027                          _b 0029                          _c 002B  
                        _i 002D                          _j 002F                          _k 0031  
              _state_alarm 0036                         l75 1CAC                         l76 1CAE  
           ?_lcd_send_byte 0003               ___awdiv@sign 0006        ___wmul@multiplicand 0003  
              lcd_comand@d 0005               __CFG_CP0$OFF 000000                        l201 0FB6  
                      l210 101A                        l202 0FB2                        l221 10A8  
                      l213 1038                        l205 0FEA                        l230 10F2  
                      l222 10A4                        l214 1034                        l206 0FE6  
                      l241 119A                        l233 1132                        l225 10DC  
                      l217 1074                        l209 101E                        l250 11D2  
                      l242 1196                        l234 112E                        l226 10D8  
                      l218 1070                        l253 120A                        l245 11B4  
                      l237 1166                        l229 10F6                        l262 123A  
                      l254 1206                        l246 11B0                        l238 1162  
                      l257 1224                        l249 11D6                        l258 1220  
                      l526 142A                        _dia 004E                        _key 0035  
                      _mes 0054                        wreg 000FE8                lcd_gotoxy@x 0006  
              lcd_gotoxy@y 0005                       l2025 1D56                       l1170 1B0E  
                     l2203 173E                       l2131 184A                       l2123 1832  
                     l2051 1CF6                       l1180 1BAE                       l2053 1CFC  
                     l2061 1BC8                       l2127 183E                       l2063 1BD4  
                     l2303 1BA2                       l2215 1D26                       l2153 16A0  
                     l2233 186C                       l2065 1BE0                       l2401 1262  
                     l2163 16D0                       l2147 1666                       l2059 1BBC  
                     l2157 16B4                       l2085 17B2                       l2245 1894  
                     l2261 18D0                       l2069 1BEC                       l2413 1294  
                     l2095 17E2                       l2079 1788                       l2247 189E  
                     l2239 187E                       l2431 1332                       l2415 12AA  
                     l2407 127C                       l2089 17C6                       l2265 18E0  
                     l2257 18C4                       l2249 18A6                       l2433 1354  
                     l2409 128A                       l2521 1A7C                       l2195 1726  
                     l1299 1D44                       l2275 1AD2                       l2451 13A4  
                     l2443 137C                       l2427 132C                       l2419 12C8  
                     l2365 1912                       l2277 1ADC                       l2461 13DE  
                     l2199 1732                       l2383 193E                       l2375 192A  
                     l2287 1B02                       l2279 1AE4                       l2295 1B7A  
                     l2455 13C8                       l2447 13A0                       l2439 1370  
                     l2527 1A9A                       l2631 1976                       l2369 191A  
                     l2393 1B1A                       l2297 1B84                       l2481 1484  
                     l2457 13D2                       l2299 1B8C                       l2475 1430  
                     l2467 1400                       l2483 1490                       l2619 1242  
                     l2397 1B44                       l2469 1408                       l2485 14AC  
                     STR_1 0F0F                       STR_2 0F3E                       STR_3 0F55  
                     STR_4 0F68                       STR_5 0F68                       STR_6 0F68  
                     STR_7 0F71                       STR_8 0F68                       STR_9 0F68  
                     u1210 1A0C                       u1230 1A26                       u1208 19F6  
                     u1250 1A42                       u1228 1A0E                       u1190 19F4  
                     u1248 1A28                       u1268 1A44                       u1710 1B3A  
                     u2407 1D58                       u1720 1B64                       u1717 1B30  
                     u1727 1B5A                       u2377 19D8                       u2387 1248  
                     u2397 1D46           ?_lcd_send_nibble 0001                       _anio 004C  
                     _flag 02C0                       _main 196C                       _hora 0052  
                     fsr0h 000FEA                       indf0 000FEF                       fsr0l 000FE9  
                     fsr2h 000FDA                       fsr1l 000FE1                       indf2 000FDF  
                     fsr2l 000FD9              __CFG_T1DIG$ON 000000                       prodh 000FF4  
                     prodl 000FF3                       start 0000              __CFG_IESO$OFF 000000  
             ___param_bank 000010                _Delay1KTCYx 1D42              __CFG_PLLDIV$1 000000  
                    ?_main 0001            __end_of___awdiv 18EC                      STR_10 0F68  
                    STR_11 0F73                      STR_12 0F68                      STR_20 0F5F  
                    STR_13 0F68                      STR_21 0F4B                      STR_14 0F68  
                    STR_22 0F30                      STR_15 0F75                      STR_16 0F6F  
                    STR_17 0F68                      STR_18 0F6D                      STR_19 0F77  
    __size_of_Delay100TCYx 0012            ___awdiv@divisor 0003            __end_of___lwdiv 1B18  
          __end_of___lwmod 1BB8            ___awdiv@counter 0005                      _TRISA 000F92  
                    _TRISB 000F93                      _TRISC 000F94             __CFG_FCMEN$OFF 000000  
                    _Setup 1C04            __end_of_dpowers 0F0B                      _mes_d 0046  
                    _mes_u 0047            __end_of_isdigit 1D30             __pbitbssCOMRAM 02C0  
                    tablat 000FF5               lcd_putrs@ptr 0009                      status 000FD8  
          __end_of_sprintf 14BC    __CFG_DSWDTOSC$INTOSCREF 000000            __initialization 1C4C  
             _Delay100TCYx 1D54               __end_of_main 19E8            ??_lcd_send_byte 0004  
                   ??_main 0021              __activetblptr 000002           __end_of_RtccWrOn 1D78  
                   ?_Setup 0001                     _ADCON0 000FC2                     _ADCON1 000FC1  
                   _EECON2 000FA7                     _ANCON0 000F48                     _ANCON1 000F49  
         ___awdiv@dividend 0001             __CFG_WDTEN$OFF 000000           RtccWriteDate@pDt 0001  
                   _RTCCFG 000F3F             __CFG_WPCFG$OFF 000000           __end_of_caratula 1D42  
           __CFG_WPDIS$OFF 000000             __CFG_XINST$OFF 000000           __end_of_lcd_init 196C  
         __end_of_lcd_putc 1C04                     ___wmul 1CC2                  ??___awdiv 0005  
           __CFG_STVREN$ON 000000                     _diasem 0050                     _anio_d 003F  
                   _anio_u 0040                  ??___lwdiv 0005                  ??___lwmod 000C  
                   _hora_d 0044                     _hora_u 0045                     clear_0 1C52  
                   clear_1 1C60           ___awdiv@quotient 0007                     _minuto 0056  
    __end_of_RtccWriteDate 174A      __end_of_RtccWriteTime 1856           RtccWriteTime@pTm 0001  
             __pdataCOMRAM 004C                  ??_isdigit 0001               __mediumconst 0000  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
                ??_sprintf 0013     __size_of_read_keyboard 02DE                 __accesstop 0060  
  __end_of__initialization 1C86         __size_of_Write_RTC 0148              ___rparam_used 000001  
           __pcstackCOMRAM 0001              __end_of_Setup 1C4C            __CFG_DSWDTPS$G2 000000  
          __CFG_OSC$INTOSC 000000                    ??_Setup 000E          lcd_gotoxy@address 0007  
       __size_of_lcd_putrs 0054               sprintf@width 001D                 __pbssBANK0 0060  
               _dia_semana 0041  RtccWriteTime@tempHourWDay 000A                 __pnvCOMRAM 003F  
                ?_RtccWrOn 0001             lcd_send_byte@n 0003                    ?___wmul 0001  
            _read_keyboard 0F7A               ?_Delay1KTCYx 0001          __end_of_Write_RTC 1604  
               _lcd_comand 1D78                  ?_caratula 0001                 _lcd_gotoxy 1CEA  
                  _RTCVALH 000F99                    _RTCVALL 000F98                  ?_lcd_init 0001  
                ?_lcd_putc 0001                    __Hparam 0000                    __Lparam 0000  
 __size_of_lcd_send_nibble 0076                 ??_RtccWrOn 0001                    ___awdiv 1856  
        __end_of_lcd_putrs 1B6C             ?_read_keyboard 0001            __size_of___wmul 0028  
                  ___lwdiv 1ABC                    ___lwmod 1B6C               __psmallconst 0F00  
              _RtccTimeVal 0023                    __pcinit 1C4C                    _fecha_d 0042  
                  _fecha_u 0043                    __ramtop 0F00                    __ptext0 196C  
                  __ptext1 1A5E                    __ptext2 0F7A                    __ptext3 1258  
                  __ptext4 1D0E                    __ptext5 1CC2                    __ptext6 1B6C  
                  __ptext7 1ABC                    __ptext8 1B18                    __ptext9 1BB8  
                  _buffer2 0078                  _T1CONbits 000FCD                    _dpowers 0F01  
                  _isdigit 1D0E                 ??_caratula 0008                    _segundo 0033  
                  _sprintf 1258                 ??_lcd_init 0005                 ??_lcd_putc 0008  
     end_of_initialization 1C86       lcd_send_byte@address 0004              __Lmediumconst 0000  
                  postdec1 000FE5                    postdec2 000FDD                    postinc0 000FEE  
                  postinc2 000FDE                 _set_vision 1A5E      __end_of_lcd_send_byte 1CC2  
                _PORTAbits 000F80                  _PORTCbits 000F82           __CFG_DSBOREN$OFF 000000  
              ?_lcd_comand 0001           __CFG_CPUDIV$OSC1 000000                  _TRISBbits 000F93  
              ?_lcd_gotoxy 0005            _LCD_INIT_STRING 0F0B           __CFG_IOL1WAY$OFF 000000  
RtccWriteDate@tempDayMonth 000A        __CFG_MSSP7B_EN$MSK7 000000            ??_read_keyboard 0020  
         Delay100TCYx@unit 0001             __end_of___wmul 1CEA              __pidataCOMRAM 1D86  
RtccWriteDate@tempHourWDay 000C          ??_lcd_send_nibble 0001       __size_of_Delay1KTCYx 0012  
         __CFG_DSWDTEN$OFF 000000        start_initialization 1C4C       RtccWriteTime@wasAlrm 0006  
     RtccWriteTime@wasWrEn 0007     __size_of_RtccWriteDate 0146            RtccWriteDate@di 0003  
   __size_of_RtccWriteTime 010C        __size_of_lcd_comand 000E        __size_of_lcd_gotoxy 0024  
                 ??___wmul 0005                ?_set_vision 0001          __size_of_RtccWrOn 0012  
          RtccWriteTime@di 0003           __CFG_LPT1OSC$OFF 000000                _ALRMCFGbits 000F91  
  __end_of_LCD_INIT_STRING 0F0F                __pbssCOMRAM 0023                  _Write_RTC 14BC  
             _isdigit$2240 0002          __size_of_caratula 0012            Delay1KTCYx@unit 0001  
        __size_of_lcd_init 0080                sprintf@flag 0019          __size_of_lcd_putc 004C  
              sprintf@prec 001C           ___lwdiv@dividend 0001              ?_Delay100TCYx 0001  
                 ?___awdiv 0001                   ?___lwdiv 0001                   ?___lwmod 0008  
  RtccWriteTime@tempMinSec 0008                  _lcd_putrs 1B18              _RtccWriteDate 1604  
              __smallconst 0F00              _RtccWriteTime 174A                   ?_isdigit 0001  
     __CFG_RTCOSC$T1OSCREF 000000             __size_of_Setup 0048                 ?_Write_RTC 0001  
         ___lwdiv@quotient 0005                   ?_sprintf 000D        __size_of_set_vision 005E  
         _RtccAlrmTimeDate 0060             ___wmul@product 0005                   _LATAbits 000F89  
                 _LATBbits 000F8A                   _PIE3bits 000FA3                  _segundo_d 004A  
           ??_Delay100TCYx 0001                  _segundo_u 004B           __CFG_WDTPS$32768 000000  
       RtccWriteDate@wasOn 0005         _Rtcc_read_TimeDate 0070             ?_RtccWriteDate 0001  
               ?_lcd_putrs 0009          ___wmul@multiplier 0001             ?_RtccWriteTime 0001  
                lcd_init@i 0005               ??_lcd_comand 0005                  main@input 0022  
                lcd_putc@c 0008               ??_lcd_gotoxy 0006                  copy_data0 1C7A  
          _lcd_send_nibble 19E8                   __Hrparam 0000                   _RtccDate 0037  
                 __Lrparam 0000                   _RtccTime 003B                   _RtccWrOn 1D66  
       __end_of_lcd_comand 1D86         __end_of_lcd_gotoxy 1D0E           __size_of___awdiv 0096  
         __size_of___lwdiv 005C           __size_of___lwmod 004C               _RtccTimeDate 0068  
               sprintf@val 001A                   _caratula 1D30           __size_of_isdigit 0022  
          ___lwdiv@divisor 0003                ??_Write_RTC 000E            ___lwdiv@counter 0007  
                 __ptext10 1D30                   __ptext11 1CEA                   __ptext20 1856  
                 __ptext12 1C04                   __ptext21 174A                   __ptext13 18EC  
                 __ptext22 1604                   __ptext14 1D42                   __ptext23 1D66  
                 __ptext15 1D78                   __ptext16 1C90                   __ptext17 19E8  
                 __ptext18 1D54                   __ptext19 14BC                   _lcd_init 18EC  
                 _lcd_putc 1BB8           __size_of_sprintf 0264     __size_of_lcd_send_byte 0032  
            __size_of_main 007C                   _minuto_d 0048                   _minuto_u 0049  
             ??_set_vision 000B      __end_of_read_keyboard 1258              ??_Delay1KTCYx 0001  
          ??_RtccWriteDate 0004            ??_RtccWriteTime 0004                ??_lcd_putrs 000B  
              _OSCTUNEbits 000F9B                 _INTCONbits 000FF2         RtccWriteTime@wasOn 0005  
     __end_of_Delay100TCYx 1D66                   isdigit@c 0003                  sprintf@ap 0017  
  __end_of_lcd_send_nibble 1A5E                  sprintf@sp 000D         __end_of_set_vision 1ABC  
         ___lwmod@dividend 0008                 _OSCCONbits 000FD3      RtccWriteDate@tempYear 0007  
            _lcd_send_byte 1C90                 _RTCCFGbits 000F3F                   sprintf@c 001F  
                 sprintf@f 000F            ___lwmod@divisor 000A        __end_of_Delay1KTCYx 1D54  
          ___lwmod@counter 000C       RtccWriteDate@wasAlrm 0006       RtccWriteDate@wasWrEn 0009  
    lcd_send_nibble@nibble 0002  
