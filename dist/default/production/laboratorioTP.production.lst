

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sun Sep 04 15:44:21 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    41                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    42  0000                     
    43                           	psect	idataCOMRAM
    44  001E02                     __pidataCOMRAM:
    45                           	opt stack 0
    46                           
    47                           ;initializer for _anio
    48  001E02  000F               	dw	15
    49                           
    50                           ;initializer for _dia
    51  001E04  0008               	dw	8
    52                           
    53                           ;initializer for _diasem
    54  001E06  0003               	dw	3
    55                           
    56                           ;initializer for _hora
    57  001E08  0012               	dw	18
    58                           
    59                           ;initializer for _mes
    60  001E0A  0009               	dw	9
    61                           
    62                           ;initializer for _minuto
    63  001E0C  001E               	dw	30
    64                           
    65                           ;initializer for _state_alarm
    66  001E0E  01                 	db	1
    67                           
    68                           	psect	smallconst
    69  000F00                     __psmallconst:
    70                           	opt stack 0
    71  000F00  00                 	db	0
    72  000F01                     _dpowers:
    73                           	opt stack 0
    74  000F01  0001               	dw	1
    75  000F03  000A               	dw	10
    76  000F05  0064               	dw	100
    77  000F07  03E8               	dw	1000
    78  000F09  2710               	dw	10000
    79  000F0B                     __end_of_dpowers:
    80                           	opt stack 0
    81  000F0B                     _LCD_INIT_STRING:
    82                           	opt stack 0
    83  000F0B  28                 	db	40
    84  000F0C  0C                 	db	12
    85  000F0D  01                 	db	1
    86  000F0E  06                 	db	6
    87  000F0F                     __end_of_LCD_INIT_STRING:
    88                           	opt stack 0
    89  000F0F                     STR_1:
    90                           
    91                           ; BSR set to: 15
    92  000F0F  20                 	db	32
    93  000F10  20                 	db	32
    94  000F11  20                 	db	32
    95  000F12  20                 	db	32
    96  000F13  20                 	db	32
    97  000F14  20                 	db	32
    98  000F15  20                 	db	32
    99  000F16  20                 	db	32
   100  000F17  20                 	db	32
   101  000F18  20                 	db	32
   102  000F19  20                 	db	32
   103  000F1A  20                 	db	32
   104  000F1B  20                 	db	32
   105  000F1C  20                 	db	32
   106  000F1D  20                 	db	32
   107  000F1E  20                 	db	32
   108  000F1F  20                 	db	32
   109  000F20  20                 	db	32
   110  000F21  20                 	db	32
   111  000F22  20                 	db	32
   112  000F23  20                 	db	32
   113  000F24  20                 	db	32
   114  000F25  20                 	db	32
   115  000F26  20                 	db	32
   116  000F27  20                 	db	32
   117  000F28  20                 	db	32
   118  000F29  20                 	db	32
   119  000F2A  20                 	db	32
   120  000F2B  20                 	db	32
   121  000F2C  20                 	db	32
   122  000F2D  20                 	db	32
   123  000F2E  20                 	db	32
   124  000F2F  00                 	db	0
   125  000F30                     STR_20:
   126                           
   127                           ; BSR set to: 15
   128  000F30  25                 	db	37
   129  000F31  30                 	db	48	;'0'
   130  000F32  32                 	db	50	;'2'
   131  000F33  75                 	db	117	;'u'
   132  000F34  2F                 	db	47
   133  000F35  25                 	db	37
   134  000F36  30                 	db	48	;'0'
   135  000F37  32                 	db	50	;'2'
   136  000F38  75                 	db	117	;'u'
   137  000F39  2F                 	db	47
   138  000F3A  25                 	db	37
   139  000F3B  30                 	db	48	;'0'
   140  000F3C  32                 	db	50	;'2'
   141  000F3D  75                 	db	117	;'u'
   142  000F3E  00                 	db	0
   143  000F3F                     STR_2:
   144                           
   145                           ; BSR set to: 15
   146  000F3F  6E                 	db	110	;'n'
   147  000F40  75                 	db	117	;'u'
   148  000F41  6C                 	db	108	;'l'
   149  000F42  6C                 	db	108	;'l'
   150  000F43  20                 	db	32
   151  000F44  70                 	db	112	;'p'
   152  000F45  6F                 	db	111	;'o'
   153  000F46  69                 	db	105	;'i'
   154  000F47  6E                 	db	110	;'n'
   155  000F48  74                 	db	116	;'t'
   156  000F49  65                 	db	101	;'e'
   157  000F4A  72                 	db	114	;'r'
   158  000F4B  00                 	db	0
   159  000F4C                     STR_21:
   160                           
   161                           ; BSR set to: 15
   162  000F4C  25                 	db	37
   163  000F4D  30                 	db	48	;'0'
   164  000F4E  32                 	db	50	;'2'
   165  000F4F  75                 	db	117	;'u'
   166  000F50  3A                 	db	58	;':'
   167  000F51  25                 	db	37
   168  000F52  30                 	db	48	;'0'
   169  000F53  32                 	db	50	;'2'
   170  000F54  75                 	db	117	;'u'
   171  000F55  00                 	db	0
   172  000F56                     STR_3:
   173                           
   174                           ; BSR set to: 15
   175  000F56  65                 	db	101	;'e'
   176  000F57  78                 	db	120	;'x'
   177  000F58  63                 	db	99	;'c'
   178  000F59  65                 	db	101	;'e'
   179  000F5A  70                 	db	112	;'p'
   180  000F5B  74                 	db	116	;'t'
   181  000F5C  69                 	db	105	;'i'
   182  000F5D  6F                 	db	111	;'o'
   183  000F5E  6E                 	db	110	;'n'
   184  000F5F  00                 	db	0
   185  000F60                     STR_23:
   186                           
   187                           ; BSR set to: 15
   188  000F60  49                 	db	73	;'I'
   189  000F61  4E                 	db	78	;'N'
   190  000F62  41                 	db	65	;'A'
   191  000F63  43                 	db	67	;'C'
   192  000F64  54                 	db	84	;'T'
   193  000F65  49                 	db	73	;'I'
   194  000F66  56                 	db	86	;'V'
   195  000F67  45                 	db	69	;'E'
   196  000F68  00                 	db	0
   197  000F69                     STR_24:
   198                           
   199                           ; BSR set to: 15
   200  000F69  54                 	db	84	;'T'
   201  000F6A  52                 	db	82	;'R'
   202  000F6B  49                 	db	73	;'I'
   203  000F6C  47                 	db	71	;'G'
   204  000F6D  47                 	db	71	;'G'
   205  000F6E  45                 	db	69	;'E'
   206  000F6F  44                 	db	68	;'D'
   207  000F70  00                 	db	0
   208  000F71                     STR_4:
   209                           
   210                           ; BSR set to: 15
   211  000F71  25                 	db	37
   212  000F72  30                 	db	48	;'0'
   213  000F73  31                 	db	49	;'1'
   214  000F74  75                 	db	117	;'u'
   215  000F75  00                 	db	0
   216  000F76                     STR_18:
   217                           
   218                           ; BSR set to: 15
   219  000F76  23                 	db	35
   220  000F77  00                 	db	0
   221  000F78                     STR_16:
   222                           
   223                           ; BSR set to: 15
   224  000F78  2A                 	db	42
   225  000F79  00                 	db	0
   226  000F7A                     STR_7:
   227                           
   228                           ; BSR set to: 15
   229  000F7A  41                 	db	65	;'A'
   230  000F7B  00                 	db	0
   231  000F7C                     STR_11:
   232                           
   233                           ; BSR set to: 15
   234  000F7C  42                 	db	66	;'B'
   235  000F7D  00                 	db	0
   236  000F7E                     STR_15:
   237                           
   238                           ; BSR set to: 15
   239  000F7E  43                 	db	67	;'C'
   240  000F7F  00                 	db	0
   241  0000                     
   242                           ; #config settings
   243  000F80  00                 	db	0	; dummy byte at the end
   244  0000                     
   245                           	psect	nvCOMRAM
   246  000042                     __pnvCOMRAM:
   247                           	opt stack 0
   248  000042                     _anio_d:
   249                           	opt stack 0
   250  000042                     	ds	1
   251  000043                     _anio_u:
   252                           	opt stack 0
   253  000043                     	ds	1
   254  000044                     _dia_semana:
   255                           	opt stack 0
   256  000044                     	ds	1
   257  000045                     _fecha_d:
   258                           	opt stack 0
   259  000045                     	ds	1
   260  000046                     _fecha_u:
   261                           	opt stack 0
   262  000046                     	ds	1
   263  000047                     _hora_d:
   264                           	opt stack 0
   265  000047                     	ds	1
   266  000048                     _hora_u:
   267                           	opt stack 0
   268  000048                     	ds	1
   269  000049                     _mes_d:
   270                           	opt stack 0
   271  000049                     	ds	1
   272  00004A                     _mes_u:
   273                           	opt stack 0
   274  00004A                     	ds	1
   275  00004B                     _minuto_d:
   276                           	opt stack 0
   277  00004B                     	ds	1
   278  00004C                     _minuto_u:
   279                           	opt stack 0
   280  00004C                     	ds	1
   281  00004D                     _segundo_d:
   282                           	opt stack 0
   283  00004D                     	ds	1
   284  00004E                     _segundo_u:
   285                           	opt stack 0
   286  00004E                     	ds	1
   287  0000                     _ANCON0	set	3912
   288  0000                     _ANCON1	set	3913
   289  0000                     _RTCCFG	set	3903
   290  0000                     _RTCCFGbits	set	3903
   291  0000                     _ADCON0	set	4034
   292  0000                     _ADCON1	set	4033
   293  0000                     _ALRMCFGbits	set	3985
   294  0000                     _EECON2	set	4007
   295  0000                     _INTCONbits	set	4082
   296  0000                     _LATAbits	set	3977
   297  0000                     _LATBbits	set	3978
   298  0000                     _OSCCONbits	set	4051
   299  0000                     _OSCTUNEbits	set	3995
   300  0000                     _PIE3bits	set	4003
   301  0000                     _PORTAbits	set	3968
   302  0000                     _PORTCbits	set	3970
   303  0000                     _RTCVALH	set	3993
   304  0000                     _RTCVALL	set	3992
   305  0000                     _T1CONbits	set	4045
   306  0000                     _TRISA	set	3986
   307  0000                     _TRISB	set	3987
   308  0000                     _TRISBbits	set	3987
   309  0000                     _TRISC	set	3988
   310                           
   311                           	psect	cinit
   312  001CC4                     __pcinit:
   313                           	opt stack 0
   314  001CC4                     start_initialization:
   315                           	opt stack 0
   316  001CC4                     __initialization:
   317                           	opt stack 0
   318                           
   319                           ; Clear objects allocated to BANK0 (44 bytes)
   320  001CC4  EE00  F060         	lfsr	0,__pbssBANK0
   321  001CC8  0E2C               	movlw	44
   322  001CCA                     clear_0:
   323  001CCA  6AEE               	clrf	postinc0,c
   324  001CCC  06E8               	decf	wreg,f,c
   325  001CCE  E1FD               	bnz	clear_0
   326                           
   327                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   328  001CD0  6A5C               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   329                           
   330                           ; Clear objects allocated to COMRAM (27 bytes)
   331  001CD2  EE00  F027         	lfsr	0,__pbssCOMRAM
   332  001CD6  0E1B               	movlw	27
   333  001CD8                     clear_1:
   334  001CD8  6AEE               	clrf	postinc0,c
   335  001CDA  06E8               	decf	wreg,f,c
   336  001CDC  E1FD               	bnz	clear_1
   337                           
   338                           ; Initialize objects allocated to COMRAM (13 bytes)
   339                           ; load TBLPTR registers with __pidataCOMRAM
   340  001CDE  0E02               	movlw	low __pidataCOMRAM
   341  001CE0  6EF6               	movwf	tblptrl,c
   342  001CE2  0E1E               	movlw	high __pidataCOMRAM
   343  001CE4  6EF7               	movwf	tblptrh,c
   344  001CE6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   345  001CE8  6EF8               	movwf	tblptru,c
   346  001CEA  EE00  F04F         	lfsr	0,__pdataCOMRAM
   347  001CEE  EE10 F00D          	lfsr	1,13
   348  001CF2                     copy_data0:
   349  001CF2  0009               	tblrd		*+
   350  001CF4  CFF5 FFEE          	movff	tablat,postinc0
   351  001CF8  50E5               	movf	postdec1,w,c
   352  001CFA  50E1               	movf	fsr1l,w,c
   353  001CFC  E1FA               	bnz	copy_data0
   354  001CFE                     end_of_initialization:
   355                           	opt stack 0
   356  001CFE                     __end_of__initialization:
   357                           	opt stack 0
   358  001CFE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   359  001D00  6EF8               	movwf	tblptru,c
   360  001D02  0100               	movlb	0
   361  001D04  EFF9  F00C         	goto	_main	;jump to C main() function
   362                           tblptru	equ	0xFF8
   363                           tblptrh	equ	0xFF7
   364                           tblptrl	equ	0xFF6
   365                           tablat	equ	0xFF5
   366                           postinc0	equ	0xFEE
   367                           wreg	equ	0xFE8
   368                           postdec1	equ	0xFE5
   369                           fsr1l	equ	0xFE1
   370                           
   371                           	psect	bitbssCOMRAM
   372  0002E0                     __pbitbssCOMRAM:
   373                           	opt stack 0
   374  0002E0                     _flag:
   375                           	opt stack 0
   376  0002E0                     	ds	1
   377                           tblptru	equ	0xFF8
   378                           tblptrh	equ	0xFF7
   379                           tblptrl	equ	0xFF6
   380                           tablat	equ	0xFF5
   381                           postinc0	equ	0xFEE
   382                           wreg	equ	0xFE8
   383                           postdec1	equ	0xFE5
   384                           fsr1l	equ	0xFE1
   385                           
   386                           	psect	bssCOMRAM
   387  000027                     __pbssCOMRAM:
   388                           	opt stack 0
   389  000027                     _RtccTimeVal:
   390                           	opt stack 0
   391  000027                     	ds	4
   392  00002B                     _a:
   393                           	opt stack 0
   394  00002B                     	ds	2
   395  00002D                     _b:
   396                           	opt stack 0
   397  00002D                     	ds	2
   398  00002F                     _c:
   399                           	opt stack 0
   400  00002F                     	ds	2
   401  000031                     _i:
   402                           	opt stack 0
   403  000031                     	ds	2
   404  000033                     _j:
   405                           	opt stack 0
   406  000033                     	ds	2
   407  000035                     _k:
   408                           	opt stack 0
   409  000035                     	ds	2
   410  000037                     _segundo:
   411                           	opt stack 0
   412  000037                     	ds	2
   413  000039                     _key:
   414                           	opt stack 0
   415  000039                     	ds	1
   416  00003A                     _RtccDate:
   417                           	opt stack 0
   418  00003A                     	ds	4
   419  00003E                     _RtccTime:
   420                           	opt stack 0
   421  00003E                     	ds	4
   422                           tblptru	equ	0xFF8
   423                           tblptrh	equ	0xFF7
   424                           tblptrl	equ	0xFF6
   425                           tablat	equ	0xFF5
   426                           postinc0	equ	0xFEE
   427                           wreg	equ	0xFE8
   428                           postdec1	equ	0xFE5
   429                           fsr1l	equ	0xFE1
   430                           
   431                           	psect	dataCOMRAM
   432  00004F                     __pdataCOMRAM:
   433                           	opt stack 0
   434  00004F                     _anio:
   435                           	opt stack 0
   436  00004F                     	ds	2
   437  000051                     _dia:
   438                           	opt stack 0
   439  000051                     	ds	2
   440  000053                     _diasem:
   441                           	opt stack 0
   442  000053                     	ds	2
   443  000055                     _hora:
   444                           	opt stack 0
   445  000055                     	ds	2
   446  000057                     _mes:
   447                           	opt stack 0
   448  000057                     	ds	2
   449  000059                     _minuto:
   450                           	opt stack 0
   451  000059                     	ds	2
   452  00005B                     _state_alarm:
   453                           	opt stack 0
   454  00005B                     	ds	1
   455                           tblptru	equ	0xFF8
   456                           tblptrh	equ	0xFF7
   457                           tblptrl	equ	0xFF6
   458                           tablat	equ	0xFF5
   459                           postinc0	equ	0xFEE
   460                           wreg	equ	0xFE8
   461                           postdec1	equ	0xFE5
   462                           fsr1l	equ	0xFE1
   463                           
   464                           	psect	bssBANK0
   465  000060                     __pbssBANK0:
   466                           	opt stack 0
   467  000060                     _RtccAlrmTimeDate:
   468                           	opt stack 0
   469  000060                     	ds	8
   470  000068                     _RtccTimeDate:
   471                           	opt stack 0
   472  000068                     	ds	8
   473  000070                     _Rtcc_read_TimeDate:
   474                           	opt stack 0
   475  000070                     	ds	8
   476  000078                     _buffer2:
   477                           	opt stack 0
   478  000078                     	ds	20
   479                           tblptru	equ	0xFF8
   480                           tblptrh	equ	0xFF7
   481                           tblptrl	equ	0xFF6
   482                           tablat	equ	0xFF5
   483                           postinc0	equ	0xFEE
   484                           wreg	equ	0xFE8
   485                           postdec1	equ	0xFE5
   486                           fsr1l	equ	0xFE1
   487                           
   488                           	psect	cstackCOMRAM
   489  000001                     __pcstackCOMRAM:
   490                           	opt stack 0
   491  000001                     ??_isdigit:
   492  000001                     ??_lcd_send_nibble:
   493  000001                     ?___wmul:
   494                           	opt stack 0
   495  000001                     ?___awdiv:
   496                           	opt stack 0
   497  000001                     ?___lwdiv:
   498                           	opt stack 0
   499  000001                     Delay100TCYx@unit:
   500                           	opt stack 0
   501  000001                     Delay1KTCYx@unit:
   502                           	opt stack 0
   503  000001                     RtccWriteDate@pDt:
   504                           	opt stack 0
   505  000001                     RtccWriteTime@pTm:
   506                           	opt stack 0
   507  000001                     ___wmul@multiplier:
   508                           	opt stack 0
   509  000001                     ___awdiv@dividend:
   510                           	opt stack 0
   511  000001                     ___lwdiv@dividend:
   512                           	opt stack 0
   513                           
   514                           ; 2 bytes @ 0x0
   515  000001                     	ds	1
   516  000002                     lcd_send_nibble@nibble:
   517                           	opt stack 0
   518  000002                     _isdigit$2318:
   519                           	opt stack 0
   520                           
   521                           ; 1 bytes @ 0x1
   522  000002                     	ds	1
   523  000003                     lcd_send_byte@n:
   524                           	opt stack 0
   525  000003                     RtccWriteDate@di:
   526                           	opt stack 0
   527  000003                     RtccWriteTime@di:
   528                           	opt stack 0
   529  000003                     isdigit@c:
   530                           	opt stack 0
   531  000003                     ___wmul@multiplicand:
   532                           	opt stack 0
   533  000003                     ___awdiv@divisor:
   534                           	opt stack 0
   535  000003                     ___lwdiv@divisor:
   536                           	opt stack 0
   537                           
   538                           ; 2 bytes @ 0x2
   539  000003                     	ds	1
   540  000004                     lcd_send_byte@address:
   541                           	opt stack 0
   542                           
   543                           ; 1 bytes @ 0x3
   544  000004                     	ds	1
   545  000005                     lcd_init@i:
   546                           	opt stack 0
   547  000005                     lcd_gotoxy@y:
   548                           	opt stack 0
   549  000005                     lcd_comand@d:
   550                           	opt stack 0
   551  000005                     RtccWriteDate@wasOn:
   552                           	opt stack 0
   553  000005                     RtccWriteTime@wasOn:
   554                           	opt stack 0
   555  000005                     ___awdiv@counter:
   556                           	opt stack 0
   557  000005                     ___wmul@product:
   558                           	opt stack 0
   559  000005                     ___lwdiv@quotient:
   560                           	opt stack 0
   561                           
   562                           ; 2 bytes @ 0x4
   563  000005                     	ds	1
   564  000006                     ??_clear:
   565  000006                     lcd_gotoxy@x:
   566                           	opt stack 0
   567  000006                     RtccWriteDate@wasAlrm:
   568                           	opt stack 0
   569  000006                     RtccWriteTime@wasAlrm:
   570                           	opt stack 0
   571  000006                     ___awdiv@sign:
   572                           	opt stack 0
   573                           
   574                           ; 1 bytes @ 0x5
   575  000006                     	ds	1
   576  000007                     lcd_gotoxy@address:
   577                           	opt stack 0
   578  000007                     RtccWriteTime@wasWrEn:
   579                           	opt stack 0
   580  000007                     ___lwdiv@counter:
   581                           	opt stack 0
   582  000007                     RtccWriteDate@tempYear:
   583                           	opt stack 0
   584  000007                     ___awdiv@quotient:
   585                           	opt stack 0
   586                           
   587                           ; 2 bytes @ 0x6
   588  000007                     	ds	1
   589  000008                     ?___lwmod:
   590                           	opt stack 0
   591  000008                     lcd_putc@c:
   592                           	opt stack 0
   593  000008                     RtccWriteTime@tempMinSec:
   594                           	opt stack 0
   595  000008                     ___lwmod@dividend:
   596                           	opt stack 0
   597                           
   598                           ; 2 bytes @ 0x7
   599  000008                     	ds	1
   600  000009                     RtccWriteDate@wasWrEn:
   601                           	opt stack 0
   602  000009                     lcd_putrs@ptr:
   603                           	opt stack 0
   604                           
   605                           ; 2 bytes @ 0x8
   606  000009                     	ds	1
   607  00000A                     RtccWriteDate@tempDayMonth:
   608                           	opt stack 0
   609  00000A                     RtccWriteTime@tempHourWDay:
   610                           	opt stack 0
   611  00000A                     ___lwmod@divisor:
   612                           	opt stack 0
   613                           
   614                           ; 2 bytes @ 0x9
   615  00000A                     	ds	1
   616  00000B                     
   617                           ; 0 bytes @ 0xA
   618  00000B                     	ds	1
   619  00000C                     ___lwmod@counter:
   620                           	opt stack 0
   621  00000C                     RtccWriteDate@tempHourWDay:
   622                           	opt stack 0
   623                           
   624                           ; 2 bytes @ 0xB
   625  00000C                     	ds	1
   626  00000D                     ?_sprintf:
   627                           	opt stack 0
   628  00000D                     sprintf@sp:
   629                           	opt stack 0
   630                           
   631                           ; 2 bytes @ 0xC
   632  00000D                     	ds	1
   633  00000E                     
   634                           ; 0 bytes @ 0xD
   635  00000E                     	ds	1
   636  00000F                     sprintf@f:
   637                           	opt stack 0
   638                           
   639                           ; 2 bytes @ 0xE
   640  00000F                     	ds	8
   641  000017                     ??_sprintf:
   642                           
   643                           ; 0 bytes @ 0x16
   644  000017                     	ds	4
   645  00001B                     sprintf@ap:
   646                           	opt stack 0
   647                           
   648                           ; 2 bytes @ 0x1A
   649  00001B                     	ds	2
   650  00001D                     sprintf@flag:
   651                           	opt stack 0
   652                           
   653                           ; 1 bytes @ 0x1C
   654  00001D                     	ds	1
   655  00001E                     sprintf@val:
   656                           	opt stack 0
   657                           
   658                           ; 2 bytes @ 0x1D
   659  00001E                     	ds	2
   660  000020                     sprintf@prec:
   661                           	opt stack 0
   662                           
   663                           ; 1 bytes @ 0x1F
   664  000020                     	ds	1
   665  000021                     sprintf@width:
   666                           	opt stack 0
   667                           
   668                           ; 2 bytes @ 0x20
   669  000021                     	ds	2
   670  000023                     sprintf@c:
   671                           	opt stack 0
   672                           
   673                           ; 1 bytes @ 0x22
   674  000023                     	ds	1
   675  000024                     ??_read_keyboard:
   676  000024                     
   677                           ; 0 bytes @ 0x23
   678  000024                     	ds	1
   679  000025                     ??_main:
   680                           
   681                           ; 0 bytes @ 0x24
   682  000025                     	ds	1
   683  000026                     main@input:
   684                           	opt stack 0
   685                           
   686                           ; 1 bytes @ 0x25
   687  000026                     	ds	1
   688                           tblptru	equ	0xFF8
   689                           tblptrh	equ	0xFF7
   690                           tblptrl	equ	0xFF6
   691                           tablat	equ	0xFF5
   692                           postinc0	equ	0xFEE
   693                           wreg	equ	0xFE8
   694                           postdec1	equ	0xFE5
   695                           fsr1l	equ	0xFE1
   696                           
   697 ;;
   698 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   699 ;;
   700 ;; *************** function _main *****************
   701 ;; Defined at:
   702 ;;		line 87 in file "main.c"
   703 ;; Parameters:    Size  Location     Type
   704 ;;		None
   705 ;; Auto vars:     Size  Location     Type
   706 ;;  input           1   37[COMRAM] unsigned char 
   707 ;; Return value:  Size  Location     Type
   708 ;;                  2   52[None  ] int 
   709 ;; Registers used:
   710 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   711 ;; Tracked objects:
   712 ;;		On entry : 0/0
   713 ;;		On exit  : 0/0
   714 ;;		Unchanged: 0/0
   715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   717 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   718 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   719 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   720 ;;Total ram usage:        2 bytes
   721 ;; Hardware stack levels required when called:    7
   722 ;; This function calls:
   723 ;;		_Setup
   724 ;;		_caratula
   725 ;;		_lcd_gotoxy
   726 ;;		_lcd_putrs
   727 ;;		_read_keyboard
   728 ;;		_set_vision
   729 ;; This function is called by:
   730 ;;		Startup code after reset
   731 ;; This function uses a non-reentrant model
   732 ;;
   733                           
   734                           	psect	text0
   735  0019F2                     __ptext0:
   736                           	opt stack 0
   737  0019F2                     _main:
   738                           	opt stack 24
   739                           
   740                           ;main.c: 88: Setup();
   741                           
   742                           ; BSR set to: 15
   743                           ;incstack = 0
   744  0019F2  EC3E  F00E         	call	_Setup	;wreg free
   745                           
   746                           ;main.c: 89: caratula();
   747  0019F6  EC08  F00F         	call	_caratula	;wreg free
   748  0019FA  D000               	goto	l2729
   749  0019FC                     l2729:
   750                           
   751                           ;main.c: 94: set_vision();
   752  0019FC  ECCA  F00D         	call	_set_vision	;wreg free
   753                           
   754                           ;main.c: 96: char input = read_keyboard();
   755  001A00  ECC1  F007         	call	_read_keyboard	;wreg free
   756  001A04  6E26               	movwf	main@input,c
   757                           
   758                           ;main.c: 98: if (input == 16){
   759  001A06  0E10               	movlw	16
   760  001A08  1826               	xorwf	main@input,w,c
   761  001A0A  A4D8               	btfss	status,2,c
   762  001A0C  D7F7               	goto	l2729
   763                           
   764                           ;main.c: 99: lcd_gotoxy(1,1);
   765  001A0E  0E01               	movlw	1
   766  001A10  6E05               	movwf	lcd_gotoxy@y,c
   767  001A12  0E01               	movlw	1
   768  001A14  ECB1  F00E         	call	_lcd_gotoxy
   769                           
   770                           ;main.c: 100: lcd_putrs("                                ");
   771  001A18  0E0F               	movlw	low STR_1
   772  001A1A  6E09               	movwf	lcd_putrs@ptr,c
   773  001A1C  0E0F               	movlw	high STR_1
   774  001A1E  6E0A               	movwf	lcd_putrs@ptr+1,c
   775  001A20  ECA0  F00D         	call	_lcd_putrs	;wreg free
   776                           
   777                           ;main.c: 101: lcd_gotoxy(1,1);
   778  001A24  0E01               	movlw	1
   779  001A26  6E05               	movwf	lcd_gotoxy@y,c
   780  001A28  0E01               	movlw	1
   781  001A2A  ECB1  F00E         	call	_lcd_gotoxy
   782                           
   783                           ;main.c: 102: lcd_putrs("null pointer");
   784  001A2E  0E3F               	movlw	low STR_2
   785  001A30  6E09               	movwf	lcd_putrs@ptr,c
   786  001A32  0E0F               	movlw	high STR_2
   787  001A34  6E0A               	movwf	lcd_putrs@ptr+1,c
   788  001A36  ECA0  F00D         	call	_lcd_putrs	;wreg free
   789                           
   790                           ;main.c: 103: lcd_gotoxy(1,2);
   791  001A3A  0E02               	movlw	2
   792  001A3C  6E05               	movwf	lcd_gotoxy@y,c
   793  001A3E  0E01               	movlw	1
   794  001A40  ECB1  F00E         	call	_lcd_gotoxy
   795                           
   796                           ;main.c: 104: lcd_putrs("exception");
   797  001A44  0E56               	movlw	low STR_3
   798  001A46  6E09               	movwf	lcd_putrs@ptr,c
   799  001A48  0E0F               	movlw	high STR_3
   800  001A4A  6E0A               	movwf	lcd_putrs@ptr+1,c
   801  001A4C  ECA0  F00D         	call	_lcd_putrs	;wreg free
   802                           
   803                           ;main.c: 105: input = 0;
   804  001A50  0E00               	movlw	0
   805  001A52  6E26               	movwf	main@input,c
   806                           
   807                           ;main.c: 106: key = 0;
   808  001A54  0E00               	movlw	0
   809  001A56  6E39               	movwf	_key,c
   810                           
   811                           ;main.c: 107: _delay((unsigned long)((98)*(8000000/4000.0)));
   812  001A58  0EFF               	movlw	255
   813  001A5A  6E25               	movwf	??_main& (0+255),c
   814  001A5C  0E8A               	movlw	138
   815  001A5E                     u2317:
   816  001A5E  2EE8               	decfsz	wreg,f,c
   817  001A60  D7FE               	goto	u2317
   818  001A62  2E25               	decfsz	??_main& (0+255),f,c
   819  001A64  D7FC               	goto	u2317
   820  001A66  D000               	nop2	
   821  001A68  D7C9               	goto	l2729
   822                           
   823                           ;main.c: 108: }
   824                           ;main.c: 109: }
   825                           ;main.c: 111: return 0;
   826                           ;	Return value of _main is never used
   827  001A6A  EF00  F000         	goto	start
   828  001A6E                     __end_of_main:
   829                           	opt stack 0
   830                           tblptru	equ	0xFF8
   831                           tblptrh	equ	0xFF7
   832                           tblptrl	equ	0xFF6
   833                           tablat	equ	0xFF5
   834                           postinc0	equ	0xFEE
   835                           wreg	equ	0xFE8
   836                           postdec1	equ	0xFE5
   837                           fsr1l	equ	0xFE1
   838                           status	equ	0xFD8
   839                           
   840 ;; *************** function _set_vision *****************
   841 ;; Defined at:
   842 ;;		line 19 in file "lcd_vision.c"
   843 ;; Parameters:    Size  Location     Type
   844 ;;		None
   845 ;; Auto vars:     Size  Location     Type
   846 ;;		None
   847 ;; Return value:  Size  Location     Type
   848 ;;		None               void
   849 ;; Registers used:
   850 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   851 ;; Tracked objects:
   852 ;;		On entry : 0/0
   853 ;;		On exit  : 0/0
   854 ;;		Unchanged: 0/0
   855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   857 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   859 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   860 ;;Total ram usage:        0 bytes
   861 ;; Hardware stack levels used:    1
   862 ;; Hardware stack levels required when called:    6
   863 ;; This function calls:
   864 ;;		_clear
   865 ;;		_lcd_gotoxy
   866 ;;		_lcd_putrs
   867 ;;		_write_Date
   868 ;; This function is called by:
   869 ;;		_main
   870 ;; This function uses a non-reentrant model
   871 ;;
   872                           
   873                           	psect	text1
   874  001B94                     __ptext1:
   875                           	opt stack 0
   876  001B94                     _set_vision:
   877                           	opt stack 24
   878                           
   879                           ;lcd_vision.c: 20: clear();
   880                           
   881                           ;incstack = 0
   882  001B94  ECD4  F00E         	call	_clear	;wreg free
   883                           
   884                           ;lcd_vision.c: 21: lcd_gotoxy(1,1);
   885  001B98  0E01               	movlw	1
   886  001B9A  6E05               	movwf	lcd_gotoxy@y,c
   887  001B9C  0E01               	movlw	1
   888  001B9E  ECB1  F00E         	call	_lcd_gotoxy
   889                           
   890                           ;lcd_vision.c: 23: switch (state_alarm){
   891  001BA2  D015               	goto	l2627
   892  001BA4                     l2621:
   893  001BA4  0E62               	movlw	low (STR_23+2)
   894  001BA6  6E09               	movwf	lcd_putrs@ptr,c
   895  001BA8  0E0F               	movlw	high (STR_23+2)
   896  001BAA  6E0A               	movwf	lcd_putrs@ptr+1,c
   897  001BAC  ECA0  F00D         	call	_lcd_putrs	;wreg free
   898                           
   899                           ;lcd_vision.c: 25: break;
   900  001BB0  D016               	goto	l2629
   901  001BB2                     l2623:
   902  001BB2  0E60               	movlw	low STR_23
   903  001BB4  6E09               	movwf	lcd_putrs@ptr,c
   904  001BB6  0E0F               	movlw	high STR_23
   905  001BB8  6E0A               	movwf	lcd_putrs@ptr+1,c
   906  001BBA  ECA0  F00D         	call	_lcd_putrs	;wreg free
   907                           
   908                           ;lcd_vision.c: 27: break;
   909  001BBE  D00F               	goto	l2629
   910  001BC0                     l2625:
   911  001BC0  0E69               	movlw	low STR_24
   912  001BC2  6E09               	movwf	lcd_putrs@ptr,c
   913  001BC4  0E0F               	movlw	high STR_24
   914  001BC6  6E0A               	movwf	lcd_putrs@ptr+1,c
   915  001BC8  ECA0  F00D         	call	_lcd_putrs	;wreg free
   916                           
   917                           ;lcd_vision.c: 29: }
   918  001BCC  D008               	goto	l2629
   919  001BCE                     l2627:
   920  001BCE  505B               	movf	_state_alarm,w,c
   921                           
   922                           ; Switch size 1, requested type "space"
   923                           ; Number of cases is 2, Range of values is 0 to 1
   924                           ; switch strategies available:
   925                           ; Name         Instructions Cycles
   926                           ; simple_byte            7     4 (average)
   927                           ;	Chosen strategy is simple_byte
   928  001BD0  0A00               	xorlw	0	; case 0
   929  001BD2  B4D8               	btfsc	status,2,c
   930  001BD4  D7E7               	goto	l2621
   931  001BD6  0A01               	xorlw	1	; case 1
   932  001BD8  B4D8               	btfsc	status,2,c
   933  001BDA  D7EB               	goto	l2623
   934  001BDC  D7F1               	goto	l2625
   935  001BDE                     l2629:
   936                           
   937                           ;lcd_vision.c: 31: write_Date();
   938  001BDE  ECBA  F00C         	call	_write_Date	;wreg free
   939  001BE2  0012               	return		;funcret
   940  001BE4                     __end_of_set_vision:
   941                           	opt stack 0
   942                           tblptru	equ	0xFF8
   943                           tblptrh	equ	0xFF7
   944                           tblptrl	equ	0xFF6
   945                           tablat	equ	0xFF5
   946                           postinc0	equ	0xFEE
   947                           wreg	equ	0xFE8
   948                           postdec1	equ	0xFE5
   949                           fsr1l	equ	0xFE1
   950                           status	equ	0xFD8
   951                           
   952 ;; *************** function _write_Date *****************
   953 ;; Defined at:
   954 ;;		line 9 in file "lcd_vision.c"
   955 ;; Parameters:    Size  Location     Type
   956 ;;		None
   957 ;; Auto vars:     Size  Location     Type
   958 ;;		None
   959 ;; Return value:  Size  Location     Type
   960 ;;		None               void
   961 ;; Registers used:
   962 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   963 ;; Tracked objects:
   964 ;;		On entry : 0/0
   965 ;;		On exit  : 0/0
   966 ;;		Unchanged: 0/0
   967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   971 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   972 ;;Total ram usage:        0 bytes
   973 ;; Hardware stack levels used:    1
   974 ;; Hardware stack levels required when called:    5
   975 ;; This function calls:
   976 ;;		_lcd_gotoxy
   977 ;;		_lcd_putrs
   978 ;;		_sprintf
   979 ;; This function is called by:
   980 ;;		_set_vision
   981 ;; This function uses a non-reentrant model
   982 ;;
   983                           
   984                           	psect	text2
   985  001974                     __ptext2:
   986                           	opt stack 0
   987  001974                     _write_Date:
   988                           	opt stack 24
   989                           
   990                           ;lcd_vision.c: 10: lcd_gotoxy(9,1);
   991                           
   992                           ;incstack = 0
   993  001974  0E01               	movlw	1
   994  001976  6E05               	movwf	lcd_gotoxy@y,c
   995  001978  0E09               	movlw	9
   996  00197A  ECB1  F00E         	call	_lcd_gotoxy
   997                           
   998                           ;lcd_vision.c: 11: sprintf(buffer2,"%02u/%02u/%02u",dia,mes,anio);
   999  00197E  0E78               	movlw	low _buffer2
  1000  001980  6E0D               	movwf	sprintf@sp,c
  1001  001982  0E00               	movlw	high _buffer2
  1002  001984  6E0E               	movwf	sprintf@sp+1,c
  1003  001986  0E30               	movlw	low STR_20
  1004  001988  6E0F               	movwf	sprintf@f,c
  1005  00198A  0E0F               	movlw	high STR_20
  1006  00198C  6E10               	movwf	sprintf@f+1,c
  1007  00198E  C051  F011         	movff	_dia,?_sprintf+4
  1008  001992  C052  F012         	movff	_dia+1,?_sprintf+5
  1009  001996  C057  F013         	movff	_mes,?_sprintf+6
  1010  00199A  C058  F014         	movff	_mes+1,?_sprintf+7
  1011  00199E  C04F  F015         	movff	_anio,?_sprintf+8
  1012  0019A2  C050  F016         	movff	_anio+1,?_sprintf+9
  1013  0019A6  EC30  F009         	call	_sprintf	;wreg free
  1014                           
  1015                           ;lcd_vision.c: 12: lcd_putrs(buffer2);
  1016  0019AA  0E78               	movlw	low _buffer2
  1017  0019AC  6E09               	movwf	lcd_putrs@ptr,c
  1018  0019AE  0E00               	movlw	high _buffer2
  1019  0019B0  6E0A               	movwf	lcd_putrs@ptr+1,c
  1020  0019B2  ECA0  F00D         	call	_lcd_putrs	;wreg free
  1021                           
  1022                           ;lcd_vision.c: 13: sprintf(buffer2,"%02u:%02u",hora,minuto);
  1023  0019B6  0E78               	movlw	low _buffer2
  1024  0019B8  6E0D               	movwf	sprintf@sp,c
  1025  0019BA  0E00               	movlw	high _buffer2
  1026  0019BC  6E0E               	movwf	sprintf@sp+1,c
  1027  0019BE  0E4C               	movlw	low STR_21
  1028  0019C0  6E0F               	movwf	sprintf@f,c
  1029  0019C2  0E0F               	movlw	high STR_21
  1030  0019C4  6E10               	movwf	sprintf@f+1,c
  1031  0019C6  C055  F011         	movff	_hora,?_sprintf+4
  1032  0019CA  C056  F012         	movff	_hora+1,?_sprintf+5
  1033  0019CE  C059  F013         	movff	_minuto,?_sprintf+6
  1034  0019D2  C05A  F014         	movff	_minuto+1,?_sprintf+7
  1035  0019D6  EC30  F009         	call	_sprintf	;wreg free
  1036                           
  1037                           ;lcd_vision.c: 14: lcd_gotoxy(1,2);
  1038  0019DA  0E02               	movlw	2
  1039  0019DC  6E05               	movwf	lcd_gotoxy@y,c
  1040  0019DE  0E01               	movlw	1
  1041  0019E0  ECB1  F00E         	call	_lcd_gotoxy
  1042                           
  1043                           ;lcd_vision.c: 15: lcd_putrs(buffer2);
  1044  0019E4  0E78               	movlw	low _buffer2
  1045  0019E6  6E09               	movwf	lcd_putrs@ptr,c
  1046  0019E8  0E00               	movlw	high _buffer2
  1047  0019EA  6E0A               	movwf	lcd_putrs@ptr+1,c
  1048  0019EC  ECA0  F00D         	call	_lcd_putrs	;wreg free
  1049  0019F0  0012               	return		;funcret
  1050  0019F2                     __end_of_write_Date:
  1051                           	opt stack 0
  1052                           tblptru	equ	0xFF8
  1053                           tblptrh	equ	0xFF7
  1054                           tblptrl	equ	0xFF6
  1055                           tablat	equ	0xFF5
  1056                           postinc0	equ	0xFEE
  1057                           wreg	equ	0xFE8
  1058                           postdec1	equ	0xFE5
  1059                           fsr1l	equ	0xFE1
  1060                           status	equ	0xFD8
  1061                           
  1062 ;; *************** function _clear *****************
  1063 ;; Defined at:
  1064 ;;		line 4 in file "lcd_vision.c"
  1065 ;; Parameters:    Size  Location     Type
  1066 ;;		None
  1067 ;; Auto vars:     Size  Location     Type
  1068 ;;		None
  1069 ;; Return value:  Size  Location     Type
  1070 ;;		None               void
  1071 ;; Registers used:
  1072 ;;		wreg, status,2, status,0, cstack
  1073 ;; Tracked objects:
  1074 ;;		On entry : 0/0
  1075 ;;		On exit  : 0/0
  1076 ;;		Unchanged: 0/0
  1077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1080 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1081 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1082 ;;Total ram usage:        1 bytes
  1083 ;; Hardware stack levels used:    1
  1084 ;; Hardware stack levels required when called:    3
  1085 ;; This function calls:
  1086 ;;		_lcd_comand
  1087 ;; This function is called by:
  1088 ;;		_set_vision
  1089 ;; This function uses a non-reentrant model
  1090 ;;
  1091                           
  1092                           	psect	text3
  1093  001DA8                     __ptext3:
  1094                           	opt stack 0
  1095  001DA8                     _clear:
  1096                           	opt stack 26
  1097                           
  1098                           ;lcd_vision.c: 5: lcd_comand(0b00000001);
  1099                           
  1100                           ;incstack = 0
  1101  001DA8  0E01               	movlw	1
  1102  001DAA  ECFA  F00E         	call	_lcd_comand
  1103                           
  1104                           ;lcd_vision.c: 6: _delay((unsigned long)((5)*(8000000/4000.0)));
  1105  001DAE  0E0D               	movlw	13
  1106  001DB0  6E06               	movwf	??_clear& (0+255),c
  1107  001DB2  0EFC               	movlw	252
  1108  001DB4                     u2327:
  1109  001DB4  2EE8               	decfsz	wreg,f,c
  1110  001DB6  D7FE               	goto	u2327
  1111  001DB8  2E06               	decfsz	??_clear& (0+255),f,c
  1112  001DBA  D7FC               	goto	u2327
  1113  001DBC  0012               	return		;funcret
  1114  001DBE                     __end_of_clear:
  1115                           	opt stack 0
  1116                           tblptru	equ	0xFF8
  1117                           tblptrh	equ	0xFF7
  1118                           tblptrl	equ	0xFF6
  1119                           tablat	equ	0xFF5
  1120                           postinc0	equ	0xFEE
  1121                           wreg	equ	0xFE8
  1122                           postdec1	equ	0xFE5
  1123                           fsr1l	equ	0xFE1
  1124                           status	equ	0xFD8
  1125                           
  1126 ;; *************** function _read_keyboard *****************
  1127 ;; Defined at:
  1128 ;;		line 4 in file "keyboard.c"
  1129 ;; Parameters:    Size  Location     Type
  1130 ;;		None
  1131 ;; Auto vars:     Size  Location     Type
  1132 ;;		None
  1133 ;; Return value:  Size  Location     Type
  1134 ;;                  1    wreg      unsigned char 
  1135 ;; Registers used:
  1136 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1137 ;; Tracked objects:
  1138 ;;		On entry : 0/0
  1139 ;;		On exit  : 0/0
  1140 ;;		Unchanged: 0/0
  1141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1144 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1145 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1146 ;;Total ram usage:        1 bytes
  1147 ;; Hardware stack levels used:    1
  1148 ;; Hardware stack levels required when called:    5
  1149 ;; This function calls:
  1150 ;;		_lcd_putrs
  1151 ;;		_sprintf
  1152 ;; This function is called by:
  1153 ;;		_main
  1154 ;; This function uses a non-reentrant model
  1155 ;;
  1156                           
  1157                           	psect	text4
  1158  000F82                     __ptext4:
  1159                           	opt stack 0
  1160  000F82                     _read_keyboard:
  1161                           	opt stack 25
  1162                           
  1163                           ;keyboard.c: 5: LATAbits.LATA0=1;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=0;
  1164                           
  1165                           ;incstack = 0
  1166  000F82  8089               	bsf	3977,0,c	;volatile
  1167  000F84  9289               	bcf	3977,1,c	;volatile
  1168  000F86  9489               	bcf	3977,2,c	;volatile
  1169  000F88  9689               	bcf	3977,3,c	;volatile
  1170                           
  1171                           ;keyboard.c: 6: {
  1172                           ;keyboard.c: 7: if (PORTAbits.RA5==1){key=1;sprintf(buffer2,"%01u",key);lcd_putrs(buffer
      +                          2);while(PORTAbits.RA5==1){};}
  1173  000F8A  AA80               	btfss	3968,5,c	;volatile
  1174  000F8C  D018               	goto	l201
  1175  000F8E  0E01               	movlw	1
  1176  000F90  6E39               	movwf	_key,c
  1177  000F92  0E78               	movlw	low _buffer2
  1178  000F94  6E0D               	movwf	sprintf@sp,c
  1179  000F96  0E00               	movlw	high _buffer2
  1180  000F98  6E0E               	movwf	sprintf@sp+1,c
  1181  000F9A  0E71               	movlw	low STR_4
  1182  000F9C  6E0F               	movwf	sprintf@f,c
  1183  000F9E  0E0F               	movlw	high STR_4
  1184  000FA0  6E10               	movwf	sprintf@f+1,c
  1185  000FA2  C039  F011         	movff	_key,?_sprintf+4
  1186  000FA6  6A12               	clrf	?_sprintf+5,c
  1187  000FA8  EC30  F009         	call	_sprintf	;wreg free
  1188  000FAC  0E78               	movlw	low _buffer2
  1189  000FAE  6E09               	movwf	lcd_putrs@ptr,c
  1190  000FB0  0E00               	movlw	high _buffer2
  1191  000FB2  6E0A               	movwf	lcd_putrs@ptr+1,c
  1192  000FB4  ECA0  F00D         	call	_lcd_putrs	;wreg free
  1193  000FB8  D000               	goto	l202
  1194  000FBA                     l202:
  1195  000FBA  BA80               	btfsc	3968,5,c	;volatile
  1196  000FBC  D7FE               	goto	l202
  1197  000FBE                     l201:
  1198                           
  1199                           ;keyboard.c: 8: if (PORTAbits.RA7==1){key=2;sprintf(buffer2,"%01u",key);lcd_putrs(buffer
      +                          2);while(PORTAbits.RA7==1){};}
  1200  000FBE  AE80               	btfss	3968,7,c	;volatile
  1201  000FC0  D018               	goto	l205
  1202  000FC2  0E02               	movlw	2
  1203  000FC4  6E39               	movwf	_key,c
  1204  000FC6  0E78               	movlw	low _buffer2
  1205  000FC8  6E0D               	movwf	sprintf@sp,c
  1206  000FCA  0E00               	movlw	high _buffer2
  1207  000FCC  6E0E               	movwf	sprintf@sp+1,c
  1208  000FCE  0E71               	movlw	low STR_4
  1209  000FD0  6E0F               	movwf	sprintf@f,c
  1210  000FD2  0E0F               	movlw	high STR_4
  1211  000FD4  6E10               	movwf	sprintf@f+1,c
  1212  000FD6  C039  F011         	movff	_key,?_sprintf+4
  1213  000FDA  6A12               	clrf	?_sprintf+5,c
  1214  000FDC  EC30  F009         	call	_sprintf	;wreg free
  1215  000FE0  0E78               	movlw	low _buffer2
  1216  000FE2  6E09               	movwf	lcd_putrs@ptr,c
  1217  000FE4  0E00               	movlw	high _buffer2
  1218  000FE6  6E0A               	movwf	lcd_putrs@ptr+1,c
  1219  000FE8  ECA0  F00D         	call	_lcd_putrs	;wreg free
  1220  000FEC  D000               	goto	l206
  1221  000FEE                     l206:
  1222  000FEE  BE80               	btfsc	3968,7,c	;volatile
  1223  000FF0  D7FE               	goto	l206
  1224  000FF2                     l205:
  1225                           
  1226                           ;keyboard.c: 9: if (PORTAbits.RA6==1){key=3;sprintf(buffer2,"%01u",key);lcd_putrs(buffer
      +                          2);while(PORTAbits.RA6==1){};}
  1227  000FF2  AC80               	btfss	3968,6,c	;volatile
  1228  000FF4  D018               	goto	l209
  1229  000FF6  0E03               	movlw	3
  1230  000FF8  6E39               	movwf	_key,c
  1231  000FFA  0E78               	movlw	low _buffer2
  1232  000FFC  6E0D               	movwf	sprintf@sp,c
  1233  000FFE  0E00               	movlw	high _buffer2
  1234  001000  6E0E               	movwf	sprintf@sp+1,c
  1235  001002  0E71               	movlw	low STR_4
  1236  001004  6E0F               	movwf	sprintf@f,c
  1237  001006  0E0F               	movlw	high STR_4
  1238  001008  6E10               	movwf	sprintf@f+1,c
  1239  00100A  C039  F011         	movff	_key,?_sprintf+4
  1240  00100E  6A12               	clrf	?_sprintf+5,c
  1241  001010  EC30  F009         	call	_sprintf	;wreg free
  1242  001014  0E78               	movlw	low _buffer2
  1243  001016  6E09               	movwf	lcd_putrs@ptr,c
  1244  001018  0E00               	movlw	high _buffer2
  1245  00101A  6E0A               	movwf	lcd_putrs@ptr+1,c
  1246  00101C  ECA0  F00D         	call	_lcd_putrs	;wreg free
  1247  001020  D000               	goto	l210
  1248  001022                     l210:
  1249  001022  BC80               	btfsc	3968,6,c	;volatile
  1250  001024  D7FE               	goto	l210
  1251  001026                     l209:
  1252                           
  1253                           ;keyboard.c: 10: if (PORTCbits.RC2==1){key=11;lcd_putrs("A");while(PORTCbits.RC2==1){};}
  1254  001026  A482               	btfss	3970,2,c	;volatile
  1255  001028  D00B               	goto	l213
  1256  00102A  0E0B               	movlw	11
  1257  00102C  6E39               	movwf	_key,c
  1258  00102E  0E7A               	movlw	low STR_7
  1259  001030  6E09               	movwf	lcd_putrs@ptr,c
  1260  001032  0E0F               	movlw	high STR_7
  1261  001034  6E0A               	movwf	lcd_putrs@ptr+1,c
  1262  001036  ECA0  F00D         	call	_lcd_putrs	;wreg free
  1263  00103A  D000               	goto	l214
  1264  00103C                     l214:
  1265  00103C  B482               	btfsc	3970,2,c	;volatile
  1266  00103E  D7FE               	goto	l214
  1267  001040                     l213:
  1268                           
  1269                           ;keyboard.c: 11: }
  1270                           ;keyboard.c: 12: LATAbits.LATA0=0;LATAbits.LATA1=1;LATAbits.LATA2=0;LATAbits.LATA3=0;
  1271  001040  9089               	bcf	3977,0,c	;volatile
  1272  001042  8289               	bsf	3977,1,c	;volatile
  1273  001044  9489               	bcf	3977,2,c	;volatile
  1274  001046  9689               	bcf	3977,3,c	;volatile
  1275                           
  1276                           ;keyboard.c: 13: {
  1277                           ;keyboard.c: 14: if (PORTAbits.RA5==1){key=4;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA5==1){};}
  1278  001048  AA80               	btfss	3968,5,c	;volatile
  1279  00104A  D018               	goto	l217
  1280  00104C  0E04               	movlw	4
  1281  00104E  6E39               	movwf	_key,c
  1282  001050  0E78               	movlw	low _buffer2
  1283  001052  6E0D               	movwf	sprintf@sp,c
  1284  001054  0E00               	movlw	high _buffer2
  1285  001056  6E0E               	movwf	sprintf@sp+1,c
  1286  001058  0E71               	movlw	low STR_4
  1287  00105A  6E0F               	movwf	sprintf@f,c
  1288  00105C  0E0F               	movlw	high STR_4
  1289  00105E  6E10               	movwf	sprintf@f+1,c
  1290  001060  C039  F011         	movff	_key,?_sprintf+4
  1291  001064  6A12               	clrf	?_sprintf+5,c
  1292  001066  EC30  F009         	call	_sprintf	;wreg free
  1293  00106A  0E78               	movlw	low _buffer2
  1294  00106C  6E09               	movwf	lcd_putrs@ptr,c
  1295  00106E  0E00               	movlw	high _buffer2
  1296  001070  6E0A               	movwf	lcd_putrs@ptr+1,c
  1297  001072  ECA0  F00D         	call	_lcd_putrs	;wreg free
  1298  001076  D000               	goto	l218
  1299  001078                     l218:
  1300  001078  BA80               	btfsc	3968,5,c	;volatile
  1301  00107A  D7FE               	goto	l218
  1302  00107C                     l217:
  1303                           
  1304                           ;keyboard.c: 15: if (PORTAbits.RA7==1){key=5;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  1305  00107C  AE80               	btfss	3968,7,c	;volatile
  1306  00107E  D018               	goto	l221
  1307  001080  0E05               	movlw	5
  1308  001082  6E39               	movwf	_key,c
  1309  001084  0E78               	movlw	low _buffer2
  1310  001086  6E0D               	movwf	sprintf@sp,c
  1311  001088  0E00               	movlw	high _buffer2
  1312  00108A  6E0E               	movwf	sprintf@sp+1,c
  1313  00108C  0E71               	movlw	low STR_4
  1314  00108E  6E0F               	movwf	sprintf@f,c
  1315  001090  0E0F               	movlw	high STR_4
  1316  001092  6E10               	movwf	sprintf@f+1,c
  1317  001094  C039  F011         	movff	_key,?_sprintf+4
  1318  001098  6A12               	clrf	?_sprintf+5,c
  1319  00109A  EC30  F009         	call	_sprintf	;wreg free
  1320  00109E  0E78               	movlw	low _buffer2
  1321  0010A0  6E09               	movwf	lcd_putrs@ptr,c
  1322  0010A2  0E00               	movlw	high _buffer2
  1323  0010A4  6E0A               	movwf	lcd_putrs@ptr+1,c
  1324  0010A6  ECA0  F00D         	call	_lcd_putrs	;wreg free
  1325  0010AA  D000               	goto	l222
  1326  0010AC                     l222:
  1327  0010AC  BE80               	btfsc	3968,7,c	;volatile
  1328  0010AE  D7FE               	goto	l222
  1329  0010B0                     l221:
  1330                           
  1331                           ;keyboard.c: 16: if (PORTAbits.RA6==1){key=6;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA6==1){};}
  1332  0010B0  AC80               	btfss	3968,6,c	;volatile
  1333  0010B2  D018               	goto	l225
  1334  0010B4  0E06               	movlw	6
  1335  0010B6  6E39               	movwf	_key,c
  1336  0010B8  0E78               	movlw	low _buffer2
  1337  0010BA  6E0D               	movwf	sprintf@sp,c
  1338  0010BC  0E00               	movlw	high _buffer2
  1339  0010BE  6E0E               	movwf	sprintf@sp+1,c
  1340  0010C0  0E71               	movlw	low STR_4
  1341  0010C2  6E0F               	movwf	sprintf@f,c
  1342  0010C4  0E0F               	movlw	high STR_4
  1343  0010C6  6E10               	movwf	sprintf@f+1,c
  1344  0010C8  C039  F011         	movff	_key,?_sprintf+4
  1345  0010CC  6A12               	clrf	?_sprintf+5,c
  1346  0010CE  EC30  F009         	call	_sprintf	;wreg free
  1347  0010D2  0E78               	movlw	low _buffer2
  1348  0010D4  6E09               	movwf	lcd_putrs@ptr,c
  1349  0010D6  0E00               	movlw	high _buffer2
  1350  0010D8  6E0A               	movwf	lcd_putrs@ptr+1,c
  1351  0010DA  ECA0  F00D         	call	_lcd_putrs	;wreg free
  1352  0010DE  D000               	goto	l226
  1353  0010E0                     l226:
  1354  0010E0  BC80               	btfsc	3968,6,c	;volatile
  1355  0010E2  D7FE               	goto	l226
  1356  0010E4                     l225:
  1357                           
  1358                           ;keyboard.c: 17: if (PORTCbits.RC2==1){key=12;lcd_putrs("B");while(PORTCbits.RC2==1){};}
  1359  0010E4  A482               	btfss	3970,2,c	;volatile
  1360  0010E6  D00B               	goto	l229
  1361  0010E8  0E0C               	movlw	12
  1362  0010EA  6E39               	movwf	_key,c
  1363  0010EC  0E7C               	movlw	low STR_11
  1364  0010EE  6E09               	movwf	lcd_putrs@ptr,c
  1365  0010F0  0E0F               	movlw	high STR_11
  1366  0010F2  6E0A               	movwf	lcd_putrs@ptr+1,c
  1367  0010F4  ECA0  F00D         	call	_lcd_putrs	;wreg free
  1368  0010F8  D000               	goto	l230
  1369  0010FA                     l230:
  1370  0010FA  B482               	btfsc	3970,2,c	;volatile
  1371  0010FC  D7FE               	goto	l230
  1372  0010FE                     l229:
  1373                           
  1374                           ;keyboard.c: 18: }
  1375                           ;keyboard.c: 19: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=1;LATAbits.LATA3=0;
  1376  0010FE  9089               	bcf	3977,0,c	;volatile
  1377  001100  9289               	bcf	3977,1,c	;volatile
  1378  001102  8489               	bsf	3977,2,c	;volatile
  1379  001104  9689               	bcf	3977,3,c	;volatile
  1380                           
  1381                           ;keyboard.c: 20: {
  1382                           ;keyboard.c: 21: if (PORTAbits.RA5==1){key=7;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA5==1){};}
  1383  001106  AA80               	btfss	3968,5,c	;volatile
  1384  001108  D018               	goto	l233
  1385  00110A  0E07               	movlw	7
  1386  00110C  6E39               	movwf	_key,c
  1387  00110E  0E78               	movlw	low _buffer2
  1388  001110  6E0D               	movwf	sprintf@sp,c
  1389  001112  0E00               	movlw	high _buffer2
  1390  001114  6E0E               	movwf	sprintf@sp+1,c
  1391  001116  0E71               	movlw	low STR_4
  1392  001118  6E0F               	movwf	sprintf@f,c
  1393  00111A  0E0F               	movlw	high STR_4
  1394  00111C  6E10               	movwf	sprintf@f+1,c
  1395  00111E  C039  F011         	movff	_key,?_sprintf+4
  1396  001122  6A12               	clrf	?_sprintf+5,c
  1397  001124  EC30  F009         	call	_sprintf	;wreg free
  1398  001128  0E78               	movlw	low _buffer2
  1399  00112A  6E09               	movwf	lcd_putrs@ptr,c
  1400  00112C  0E00               	movlw	high _buffer2
  1401  00112E  6E0A               	movwf	lcd_putrs@ptr+1,c
  1402  001130  ECA0  F00D         	call	_lcd_putrs	;wreg free
  1403  001134  D000               	goto	l234
  1404  001136                     l234:
  1405  001136  BA80               	btfsc	3968,5,c	;volatile
  1406  001138  D7FE               	goto	l234
  1407  00113A                     l233:
  1408                           
  1409                           ;keyboard.c: 22: if (PORTAbits.RA7==1){key=8;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  1410  00113A  AE80               	btfss	3968,7,c	;volatile
  1411  00113C  D018               	goto	l237
  1412  00113E  0E08               	movlw	8
  1413  001140  6E39               	movwf	_key,c
  1414  001142  0E78               	movlw	low _buffer2
  1415  001144  6E0D               	movwf	sprintf@sp,c
  1416  001146  0E00               	movlw	high _buffer2
  1417  001148  6E0E               	movwf	sprintf@sp+1,c
  1418  00114A  0E71               	movlw	low STR_4
  1419  00114C  6E0F               	movwf	sprintf@f,c
  1420  00114E  0E0F               	movlw	high STR_4
  1421  001150  6E10               	movwf	sprintf@f+1,c
  1422  001152  C039  F011         	movff	_key,?_sprintf+4
  1423  001156  6A12               	clrf	?_sprintf+5,c
  1424  001158  EC30  F009         	call	_sprintf	;wreg free
  1425  00115C  0E78               	movlw	low _buffer2
  1426  00115E  6E09               	movwf	lcd_putrs@ptr,c
  1427  001160  0E00               	movlw	high _buffer2
  1428  001162  6E0A               	movwf	lcd_putrs@ptr+1,c
  1429  001164  ECA0  F00D         	call	_lcd_putrs	;wreg free
  1430  001168  D000               	goto	l238
  1431  00116A                     l238:
  1432  00116A  BE80               	btfsc	3968,7,c	;volatile
  1433  00116C  D7FE               	goto	l238
  1434  00116E                     l237:
  1435                           
  1436                           ;keyboard.c: 23: if (PORTAbits.RA6==1){key=9;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA6==1){};}
  1437  00116E  AC80               	btfss	3968,6,c	;volatile
  1438  001170  D018               	goto	l241
  1439  001172  0E09               	movlw	9
  1440  001174  6E39               	movwf	_key,c
  1441  001176  0E78               	movlw	low _buffer2
  1442  001178  6E0D               	movwf	sprintf@sp,c
  1443  00117A  0E00               	movlw	high _buffer2
  1444  00117C  6E0E               	movwf	sprintf@sp+1,c
  1445  00117E  0E71               	movlw	low STR_4
  1446  001180  6E0F               	movwf	sprintf@f,c
  1447  001182  0E0F               	movlw	high STR_4
  1448  001184  6E10               	movwf	sprintf@f+1,c
  1449  001186  C039  F011         	movff	_key,?_sprintf+4
  1450  00118A  6A12               	clrf	?_sprintf+5,c
  1451  00118C  EC30  F009         	call	_sprintf	;wreg free
  1452  001190  0E78               	movlw	low _buffer2
  1453  001192  6E09               	movwf	lcd_putrs@ptr,c
  1454  001194  0E00               	movlw	high _buffer2
  1455  001196  6E0A               	movwf	lcd_putrs@ptr+1,c
  1456  001198  ECA0  F00D         	call	_lcd_putrs	;wreg free
  1457  00119C  D000               	goto	l242
  1458  00119E                     l242:
  1459  00119E  BC80               	btfsc	3968,6,c	;volatile
  1460  0011A0  D7FE               	goto	l242
  1461  0011A2                     l241:
  1462                           
  1463                           ;keyboard.c: 24: if (PORTCbits.RC2==1){key=13;lcd_putrs("C");while(PORTCbits.RC2==1){};}
  1464  0011A2  A482               	btfss	3970,2,c	;volatile
  1465  0011A4  D00B               	goto	l245
  1466  0011A6  0E0D               	movlw	13
  1467  0011A8  6E39               	movwf	_key,c
  1468  0011AA  0E7E               	movlw	low STR_15
  1469  0011AC  6E09               	movwf	lcd_putrs@ptr,c
  1470  0011AE  0E0F               	movlw	high STR_15
  1471  0011B0  6E0A               	movwf	lcd_putrs@ptr+1,c
  1472  0011B2  ECA0  F00D         	call	_lcd_putrs	;wreg free
  1473  0011B6  D000               	goto	l246
  1474  0011B8                     l246:
  1475  0011B8  B482               	btfsc	3970,2,c	;volatile
  1476  0011BA  D7FE               	goto	l246
  1477  0011BC                     l245:
  1478                           
  1479                           ;keyboard.c: 25: }
  1480                           ;keyboard.c: 26: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=1;
  1481  0011BC  9089               	bcf	3977,0,c	;volatile
  1482  0011BE  9289               	bcf	3977,1,c	;volatile
  1483  0011C0  9489               	bcf	3977,2,c	;volatile
  1484  0011C2  8689               	bsf	3977,3,c	;volatile
  1485                           
  1486                           ;keyboard.c: 27: {
  1487                           ;keyboard.c: 28: if (PORTAbits.RA5==1){key=14;lcd_putrs("*");while(PORTAbits.RA5==1){};}
  1488  0011C4  AA80               	btfss	3968,5,c	;volatile
  1489  0011C6  D00B               	goto	l249
  1490  0011C8  0E0E               	movlw	14
  1491  0011CA  6E39               	movwf	_key,c
  1492  0011CC  0E78               	movlw	low STR_16
  1493  0011CE  6E09               	movwf	lcd_putrs@ptr,c
  1494  0011D0  0E0F               	movlw	high STR_16
  1495  0011D2  6E0A               	movwf	lcd_putrs@ptr+1,c
  1496  0011D4  ECA0  F00D         	call	_lcd_putrs	;wreg free
  1497  0011D8  D000               	goto	l250
  1498  0011DA                     l250:
  1499  0011DA  BA80               	btfsc	3968,5,c	;volatile
  1500  0011DC  D7FE               	goto	l250
  1501  0011DE                     l249:
  1502                           
  1503                           ;keyboard.c: 29: if (PORTAbits.RA7==1){key=0;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  1504  0011DE  AE80               	btfss	3968,7,c	;volatile
  1505  0011E0  D018               	goto	l253
  1506  0011E2  0E00               	movlw	0
  1507  0011E4  6E39               	movwf	_key,c
  1508  0011E6  0E78               	movlw	low _buffer2
  1509  0011E8  6E0D               	movwf	sprintf@sp,c
  1510  0011EA  0E00               	movlw	high _buffer2
  1511  0011EC  6E0E               	movwf	sprintf@sp+1,c
  1512  0011EE  0E71               	movlw	low STR_4
  1513  0011F0  6E0F               	movwf	sprintf@f,c
  1514  0011F2  0E0F               	movlw	high STR_4
  1515  0011F4  6E10               	movwf	sprintf@f+1,c
  1516  0011F6  C039  F011         	movff	_key,?_sprintf+4
  1517  0011FA  6A12               	clrf	?_sprintf+5,c
  1518  0011FC  EC30  F009         	call	_sprintf	;wreg free
  1519  001200  0E78               	movlw	low _buffer2
  1520  001202  6E09               	movwf	lcd_putrs@ptr,c
  1521  001204  0E00               	movlw	high _buffer2
  1522  001206  6E0A               	movwf	lcd_putrs@ptr+1,c
  1523  001208  ECA0  F00D         	call	_lcd_putrs	;wreg free
  1524  00120C  D000               	goto	l254
  1525  00120E                     l254:
  1526  00120E  BE80               	btfsc	3968,7,c	;volatile
  1527  001210  D7FE               	goto	l254
  1528  001212                     l253:
  1529                           
  1530                           ;keyboard.c: 30: if (PORTAbits.RA6==1){key=15;lcd_putrs("#");while(PORTAbits.RA6==1){};}
  1531  001212  AC80               	btfss	3968,6,c	;volatile
  1532  001214  D00B               	goto	l257
  1533  001216  0E0F               	movlw	15
  1534  001218  6E39               	movwf	_key,c
  1535  00121A  0E76               	movlw	low STR_18
  1536  00121C  6E09               	movwf	lcd_putrs@ptr,c
  1537  00121E  0E0F               	movlw	high STR_18
  1538  001220  6E0A               	movwf	lcd_putrs@ptr+1,c
  1539  001222  ECA0  F00D         	call	_lcd_putrs	;wreg free
  1540  001226  D000               	goto	l258
  1541  001228                     l258:
  1542  001228  BC80               	btfsc	3968,6,c	;volatile
  1543  00122A  D7FE               	goto	l258
  1544  00122C                     l257:
  1545                           
  1546                           ;keyboard.c: 31: if (PORTCbits.RC2==1){key=16;lcd_putrs("D");while(PORTCbits.RC2==1){};}
  1547  00122C  A482               	btfss	3970,2,c	;volatile
  1548  00122E  D00D               	goto	l2717
  1549  001230  0E10               	movlw	16
  1550  001232  6E39               	movwf	_key,c
  1551  001234  0E6F               	movlw	low (STR_24+6)
  1552  001236  6E09               	movwf	lcd_putrs@ptr,c
  1553  001238  0E0F               	movlw	high (STR_24+6)
  1554  00123A  6E0A               	movwf	lcd_putrs@ptr+1,c
  1555  00123C  ECA0  F00D         	call	_lcd_putrs	;wreg free
  1556  001240  D000               	goto	l262
  1557  001242                     l262:
  1558  001242  A482               	btfss	3970,2,c	;volatile
  1559  001244  D002               	goto	l2717
  1560  001246  D7FD               	goto	l262
  1561  001248  D000               	goto	l2717
  1562  00124A                     l2717:
  1563                           
  1564                           ;keyboard.c: 32: }
  1565                           ;keyboard.c: 33: _delay((unsigned long)((98)*(8000000/4000.0)));
  1566  00124A  0EFF               	movlw	255
  1567  00124C  6E24               	movwf	??_read_keyboard& (0+255),c
  1568  00124E  0E8A               	movlw	138
  1569  001250                     u2337:
  1570  001250  2EE8               	decfsz	wreg,f,c
  1571  001252  D7FE               	goto	u2337
  1572  001254  2E24               	decfsz	??_read_keyboard& (0+255),f,c
  1573  001256  D7FC               	goto	u2337
  1574  001258  D000               	nop2	
  1575                           
  1576                           ;keyboard.c: 36: return key;
  1577  00125A  5039               	movf	_key,w,c
  1578  00125C  0012               	return	
  1579  00125E  0012               	return		;funcret
  1580  001260                     __end_of_read_keyboard:
  1581                           	opt stack 0
  1582                           tblptru	equ	0xFF8
  1583                           tblptrh	equ	0xFF7
  1584                           tblptrl	equ	0xFF6
  1585                           tablat	equ	0xFF5
  1586                           postinc0	equ	0xFEE
  1587                           wreg	equ	0xFE8
  1588                           postdec1	equ	0xFE5
  1589                           fsr1l	equ	0xFE1
  1590                           status	equ	0xFD8
  1591                           
  1592 ;; *************** function _sprintf *****************
  1593 ;; Defined at:
  1594 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\doprnt.c"
  1595 ;; Parameters:    Size  Location     Type
  1596 ;;  sp              2   12[COMRAM] PTR unsigned char 
  1597 ;;		 -> buffer2(20), 
  1598 ;;  f               2   14[COMRAM] PTR const unsigned char 
  1599 ;;		 -> STR_21(10), STR_20(15), STR_17(5), STR_14(5), 
  1600 ;;		 -> STR_13(5), STR_12(5), STR_10(5), STR_9(5), 
  1601 ;;		 -> STR_8(5), STR_6(5), STR_5(5), STR_4(5), 
  1602 ;; Auto vars:     Size  Location     Type
  1603 ;;  tmpval          4    0        struct .
  1604 ;;  cp              3    0        PTR const unsigned char 
  1605 ;;  width           2   32[COMRAM] int 
  1606 ;;  val             2   29[COMRAM] unsigned int 
  1607 ;;  ap              2   26[COMRAM] PTR void [1]
  1608 ;;		 -> ?_sprintf(2), 
  1609 ;;  len             2    0        unsigned int 
  1610 ;;  c               1   34[COMRAM] char 
  1611 ;;  prec            1   31[COMRAM] char 
  1612 ;;  flag            1   28[COMRAM] unsigned char 
  1613 ;; Return value:  Size  Location     Type
  1614 ;;                  2   12[COMRAM] int 
  1615 ;; Registers used:
  1616 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1617 ;; Tracked objects:
  1618 ;;		On entry : 0/0
  1619 ;;		On exit  : 0/0
  1620 ;;		Unchanged: 0/0
  1621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1622 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1623 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1624 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1625 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1626 ;;Total ram usage:       23 bytes
  1627 ;; Hardware stack levels used:    1
  1628 ;; Hardware stack levels required when called:    1
  1629 ;; This function calls:
  1630 ;;		___lwdiv
  1631 ;;		___lwmod
  1632 ;;		___wmul
  1633 ;;		_isdigit
  1634 ;; This function is called by:
  1635 ;;		_read_keyboard
  1636 ;;		_write_Date
  1637 ;; This function uses a non-reentrant model
  1638 ;;
  1639                           
  1640                           	psect	text5
  1641  001260                     __ptext5:
  1642                           	opt stack 0
  1643  001260                     _sprintf:
  1644                           	opt stack 27
  1645                           
  1646                           ;doprnt.c: 494: va_list ap;
  1647                           ;doprnt.c: 499: signed char c;
  1648                           ;doprnt.c: 501: int width;
  1649                           ;doprnt.c: 506: signed char prec;
  1650                           ;doprnt.c: 508: unsigned char flag;
  1651                           ;doprnt.c: 523: union {
  1652                           ;doprnt.c: 524: unsigned long vd;
  1653                           ;doprnt.c: 525: double integ;
  1654                           ;doprnt.c: 526: } tmpval;
  1655                           ;doprnt.c: 528: unsigned int val;
  1656                           ;doprnt.c: 529: unsigned len;
  1657                           ;doprnt.c: 530: const char * cp;
  1658                           ;doprnt.c: 533: *ap = __va_start();
  1659                           
  1660                           ;incstack = 0
  1661  001260  0E11               	movlw	low (?_sprintf+4)
  1662  001262  6E1B               	movwf	sprintf@ap,c
  1663  001264  0E00               	movlw	high (?_sprintf+4)
  1664  001266  6E1C               	movwf	sprintf@ap+1,c
  1665                           
  1666                           ;doprnt.c: 536: while(c = *f++) {
  1667  001268  D117               	goto	l2311
  1668  00126A                     l2229:
  1669                           
  1670                           ;doprnt.c: 538: if(c != '%')
  1671  00126A  0E25               	movlw	37
  1672  00126C  1823               	xorwf	sprintf@c,w,c
  1673  00126E  B4D8               	btfsc	status,2,c
  1674  001270  D009               	goto	l2235
  1675                           
  1676                           ;doprnt.c: 540: {
  1677                           ;doprnt.c: 541: ((*sp++ = (c)));
  1678  001272  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1679  001276  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1680  00127A  C023  FFDF         	movff	sprintf@c,indf2
  1681  00127E  4A0D               	infsnz	sprintf@sp,f,c
  1682  001280  2A0E               	incf	sprintf@sp+1,f,c
  1683                           
  1684                           ;doprnt.c: 542: continue;
  1685  001282  D10A               	goto	l2311
  1686  001284                     l2235:
  1687                           
  1688                           ;doprnt.c: 543: }
  1689                           ;doprnt.c: 546: width = 0;
  1690  001284  0E00               	movlw	0
  1691  001286  6E22               	movwf	sprintf@width+1,c
  1692  001288  0E00               	movlw	0
  1693  00128A  6E21               	movwf	sprintf@width,c
  1694                           
  1695                           ;doprnt.c: 548: flag = 0;
  1696  00128C  0E00               	movlw	0
  1697  00128E  6E1D               	movwf	sprintf@flag,c
  1698                           
  1699                           ;doprnt.c: 551: switch(*f) {
  1700                           
  1701                           ;doprnt.c: 550: for(;;) {
  1702  001290  D005               	goto	l2241
  1703  001292                     l2237:
  1704                           
  1705                           ;doprnt.c: 580: flag |= 0x04;
  1706  001292  841D               	bsf	sprintf@flag,2,c
  1707                           
  1708                           ;doprnt.c: 581: f++;
  1709  001294  4A0F               	infsnz	sprintf@f,f,c
  1710  001296  2A10               	incf	sprintf@f+1,f,c
  1711                           
  1712                           ;doprnt.c: 582: continue;
  1713  001298  D001               	goto	l2241
  1714                           
  1715                           ;doprnt.c: 584: }
  1716  00129A  D00B               	goto	l2243
  1717  00129C                     l2241:
  1718  00129C  C00F  FFF6         	movff	sprintf@f,tblptrl
  1719  0012A0  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1720  0012A4                     	if	0	;tblptru may be non-zero
  1721  0012A4                     	endif
  1722  0012A4                     	if	0	;tblptru may be non-zero
  1723  0012A4                     	endif
  1724  0012A4  0008               	tblrd		*
  1725  0012A6  50F5               	movf	tablat,w,c
  1726                           
  1727                           ; Switch size 1, requested type "space"
  1728                           ; Number of cases is 1, Range of values is 48 to 48
  1729                           ; switch strategies available:
  1730                           ; Name         Instructions Cycles
  1731                           ; simple_byte            4     3 (average)
  1732                           ;	Chosen strategy is simple_byte
  1733  0012A8  0A30               	xorlw	48	; case 48
  1734  0012AA  B4D8               	btfsc	status,2,c
  1735  0012AC  D7F2               	goto	l2237
  1736                           
  1737                           ;doprnt.c: 585: break;
  1738  0012AE  D001               	goto	l2243
  1739                           
  1740                           ;doprnt.c: 586: }
  1741  0012B0  D7F5               	goto	l2241
  1742  0012B2                     l2243:
  1743                           
  1744                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1745  0012B2  C00F  FFF6         	movff	sprintf@f,tblptrl
  1746  0012B6  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1747  0012BA                     	if	0	;tblptru may be non-zero
  1748  0012BA                     	endif
  1749  0012BA                     	if	0	;tblptru may be non-zero
  1750  0012BA                     	endif
  1751  0012BA  0008               	tblrd		*
  1752  0012BC  50F5               	movf	tablat,w,c
  1753  0012BE  ECC3  F00E         	call	_isdigit
  1754  0012C2  A0D8               	btfss	status,0,c
  1755  0012C4  D03A               	goto	l2259
  1756                           
  1757                           ;doprnt.c: 598: width = 0;
  1758  0012C6  0E00               	movlw	0
  1759  0012C8  6E22               	movwf	sprintf@width+1,c
  1760  0012CA  0E00               	movlw	0
  1761  0012CC  6E21               	movwf	sprintf@width,c
  1762  0012CE  D000               	goto	l2247
  1763  0012D0                     l2247:
  1764                           
  1765                           ;doprnt.c: 600: width *= 10;
  1766  0012D0  C021  F001         	movff	sprintf@width,___wmul@multiplier
  1767  0012D4  C022  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  1768  0012D8  0E00               	movlw	0
  1769  0012DA  6E04               	movwf	___wmul@multiplicand+1,c
  1770  0012DC  0E0A               	movlw	10
  1771  0012DE  6E03               	movwf	___wmul@multiplicand,c
  1772  0012E0  EC9D  F00E         	call	___wmul	;wreg free
  1773  0012E4  C001  F021         	movff	?___wmul,sprintf@width
  1774  0012E8  C002  F022         	movff	?___wmul+1,sprintf@width+1
  1775                           
  1776                           ;doprnt.c: 601: width += *f++ - '0';
  1777  0012EC  0ED0               	movlw	208
  1778  0012EE  6E17               	movwf	??_sprintf& (0+255),c
  1779  0012F0  0EFF               	movlw	255
  1780  0012F2  6E18               	movwf	(??_sprintf+1)& (0+255),c
  1781  0012F4  C00F  FFF6         	movff	sprintf@f,tblptrl
  1782  0012F8  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1783  0012FC                     	if	0	;tblptru may be non-zero
  1784  0012FC                     	endif
  1785  0012FC                     	if	0	;tblptru may be non-zero
  1786  0012FC                     	endif
  1787  0012FC  0008               	tblrd		*
  1788  0012FE  50F5               	movf	tablat,w,c
  1789  001300  6E19               	movwf	(??_sprintf+2)& (0+255),c
  1790  001302  6A1A               	clrf	(??_sprintf+3)& (0+255),c
  1791  001304  5017               	movf	??_sprintf,w,c
  1792  001306  2619               	addwf	??_sprintf+2,f,c
  1793  001308  5018               	movf	??_sprintf+1,w,c
  1794  00130A  221A               	addwfc	??_sprintf+3,f,c
  1795  00130C  5019               	movf	??_sprintf+2,w,c
  1796  00130E  2621               	addwf	sprintf@width,f,c
  1797  001310  501A               	movf	??_sprintf+3,w,c
  1798  001312  2222               	addwfc	sprintf@width+1,f,c
  1799  001314  4A0F               	infsnz	sprintf@f,f,c
  1800  001316  2A10               	incf	sprintf@f+1,f,c
  1801                           
  1802                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1803  001318  C00F  FFF6         	movff	sprintf@f,tblptrl
  1804  00131C  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1805  001320                     	if	0	;tblptru may be non-zero
  1806  001320                     	endif
  1807  001320                     	if	0	;tblptru may be non-zero
  1808  001320                     	endif
  1809  001320  0008               	tblrd		*
  1810  001322  50F5               	movf	tablat,w,c
  1811  001324  ECC3  F00E         	call	_isdigit
  1812  001328  A0D8               	btfss	status,0,c
  1813  00132A  D007               	goto	l2259
  1814  00132C  D7D1               	goto	l2247
  1815                           
  1816                           ;doprnt.c: 608: }
  1817                           ;doprnt.c: 635: switch(c = *f++) {
  1818  00132E  D005               	goto	l2259
  1819                           
  1820                           ;doprnt.c: 638: goto alldone;
  1821                           
  1822                           ;doprnt.c: 637: case 0:
  1823  001330  D0C1               	goto	l2313
  1824                           
  1825                           ;doprnt.c: 813: continue;
  1826                           
  1827                           ;doprnt.c: 802: default:
  1828  001332  D0B2               	goto	l2311
  1829  001334                     l2255:
  1830                           
  1831                           ;doprnt.c: 818: flag |= 0xC0;
  1832  001334  0EC0               	movlw	192
  1833  001336  121D               	iorwf	sprintf@flag,f,c
  1834                           
  1835                           ;doprnt.c: 822: }
  1836                           
  1837                           ;doprnt.c: 819: break;
  1838  001338  D011               	goto	l2261
  1839  00133A                     l2259:
  1840  00133A  C00F  FFF6         	movff	sprintf@f,tblptrl
  1841  00133E  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1842  001342  4A0F               	infsnz	sprintf@f,f,c
  1843  001344  2A10               	incf	sprintf@f+1,f,c
  1844  001346                     	if	0	;tblptru may be non-zero
  1845  001346                     	endif
  1846  001346                     	if	0	;tblptru may be non-zero
  1847  001346                     	endif
  1848  001346  0008               	tblrd		*
  1849  001348  CFF5 F023          	movff	tablat,sprintf@c
  1850  00134C  5023               	movf	sprintf@c,w,c
  1851                           
  1852                           ; Switch size 1, requested type "space"
  1853                           ; Number of cases is 2, Range of values is 0 to 117
  1854                           ; switch strategies available:
  1855                           ; Name         Instructions Cycles
  1856                           ; simple_byte            7     4 (average)
  1857                           ;	Chosen strategy is simple_byte
  1858  00134E  0A00               	xorlw	0	; case 0
  1859  001350  B4D8               	btfsc	status,2,c
  1860  001352  D0B0               	goto	l2313
  1861  001354  0A75               	xorlw	117	; case 117
  1862  001356  B4D8               	btfsc	status,2,c
  1863  001358  D7ED               	goto	l2255
  1864  00135A  D09E               	goto	l2311
  1865  00135C                     l2261:
  1866                           
  1867                           ;doprnt.c: 1273: {
  1868                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1869  00135C  C01B  FFD9         	movff	sprintf@ap,fsr2l
  1870  001360  C01C  FFDA         	movff	sprintf@ap+1,fsr2h
  1871  001364  CFDE F01E          	movff	postinc2,sprintf@val
  1872  001368  CFDD F01F          	movff	postdec2,sprintf@val+1
  1873  00136C  0E02               	movlw	2
  1874  00136E  261B               	addwf	sprintf@ap,f,c
  1875  001370  0E00               	movlw	0
  1876  001372  221C               	addwfc	sprintf@ap+1,f,c
  1877                           
  1878                           ;doprnt.c: 1287: }
  1879                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1880  001374  0E01               	movlw	1
  1881  001376  6E23               	movwf	sprintf@c,c
  1882  001378                     l2267:
  1883  001378  0E05               	movlw	5
  1884  00137A  1823               	xorwf	sprintf@c,w,c
  1885  00137C  B4D8               	btfsc	status,2,c
  1886  00137E  D016               	goto	l2279
  1887  001380  D001               	goto	l2271
  1888  001382  D014               	goto	l2279
  1889  001384                     l2271:
  1890                           
  1891                           ;doprnt.c: 1306: if(val < dpowers[c])
  1892  001384  5023               	movf	sprintf@c,w,c
  1893  001386  0D02               	mullw	2
  1894  001388  0E01               	movlw	low _dpowers
  1895  00138A  24F3               	addwf	prodl,w,c
  1896  00138C  6EF6               	movwf	tblptrl,c
  1897  00138E  0E0F               	movlw	high _dpowers
  1898  001390  20F4               	addwfc	prodh,w,c
  1899  001392  6EF7               	movwf	tblptrh,c
  1900  001394                     	if	0	;There are less than 3 active tblptr bytes
  1901  001394                     	endif
  1902  001394  0009               	tblrd		*+
  1903  001396  50F5               	movf	tablat,w,c
  1904  001398  5C1E               	subwf	sprintf@val,w,c
  1905  00139A  0009               	tblrd		*+
  1906  00139C  50F5               	movf	tablat,w,c
  1907  00139E  581F               	subwfb	sprintf@val+1,w,c
  1908  0013A0  A0D8               	btfss	status,0,c
  1909  0013A2  D004               	goto	l2279
  1910  0013A4  D001               	goto	l2275
  1911                           
  1912                           ;doprnt.c: 1307: break;
  1913  0013A6  D002               	goto	l2279
  1914  0013A8                     l2275:
  1915  0013A8  2A23               	incf	sprintf@c,f,c
  1916  0013AA  D7E6               	goto	l2267
  1917  0013AC                     l2279:
  1918                           
  1919                           ;doprnt.c: 1381: if(width > c)
  1920  0013AC  0E80               	movlw	128
  1921  0013AE  BE23               	btfsc	sprintf@c,7,c
  1922  0013B0  0E7F               	movlw	127
  1923  0013B2  6E17               	movwf	??_sprintf& (0+255),c
  1924  0013B4  5021               	movf	sprintf@width,w,c
  1925  0013B6  5C23               	subwf	sprintf@c,w,c
  1926  0013B8  5022               	movf	sprintf@width+1,w,c
  1927  0013BA  0A80               	xorlw	128
  1928  0013BC  5817               	subwfb	??_sprintf& (0+255),w,c
  1929  0013BE  B0D8               	btfsc	status,0,c
  1930  0013C0  D007               	goto	l2283
  1931                           
  1932                           ;doprnt.c: 1382: width -= c;
  1933  0013C2  5023               	movf	sprintf@c,w,c
  1934  0013C4  5E21               	subwf	sprintf@width,f,c
  1935  0013C6  0E00               	movlw	0
  1936  0013C8  BE23               	btfsc	sprintf@c,7,c
  1937  0013CA  0EFF               	movlw	255
  1938  0013CC  5A22               	subwfb	sprintf@width+1,f,c
  1939  0013CE  D005               	goto	l2285
  1940  0013D0                     l2283:
  1941                           
  1942                           ;doprnt.c: 1383: else
  1943                           ;doprnt.c: 1384: width = 0;
  1944  0013D0  0E00               	movlw	0
  1945  0013D2  6E22               	movwf	sprintf@width+1,c
  1946  0013D4  0E00               	movlw	0
  1947  0013D6  6E21               	movwf	sprintf@width,c
  1948  0013D8  D000               	goto	l2285
  1949  0013DA                     l2285:
  1950                           
  1951                           ;doprnt.c: 1387: if(flag & 0x04) {
  1952  0013DA  A41D               	btfss	sprintf@flag,2,c
  1953  0013DC  D015               	goto	l2295
  1954                           
  1955                           ;doprnt.c: 1415: if(width)
  1956  0013DE  5021               	movf	sprintf@width,w,c
  1957  0013E0  1022               	iorwf	sprintf@width+1,w,c
  1958  0013E2  B4D8               	btfsc	status,2,c
  1959  0013E4  D026               	goto	l608
  1960  0013E6                     l2289:
  1961                           
  1962                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  1963  0013E6  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1964  0013EA  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1965  0013EE  0E30               	movlw	48
  1966  0013F0  6EDF               	movwf	indf2,c
  1967  0013F2  4A0D               	infsnz	sprintf@sp,f,c
  1968  0013F4  2A0E               	incf	sprintf@sp+1,f,c
  1969                           
  1970                           ;doprnt.c: 1418: while(--width);
  1971  0013F6  0621               	decf	sprintf@width,f,c
  1972  0013F8  A0D8               	btfss	status,0,c
  1973  0013FA  0622               	decf	sprintf@width+1,f,c
  1974  0013FC  5021               	movf	sprintf@width,w,c
  1975  0013FE  1022               	iorwf	sprintf@width+1,w,c
  1976  001400  B4D8               	btfsc	status,2,c
  1977  001402  D017               	goto	l608
  1978  001404  D7F0               	goto	l2289
  1979                           
  1980                           ;doprnt.c: 1420: } else
  1981  001406  D015               	goto	l608
  1982  001408                     l2295:
  1983                           
  1984                           ;doprnt.c: 1422: {
  1985                           ;doprnt.c: 1424: if(width
  1986                           ;doprnt.c: 1428: )
  1987  001408  5021               	movf	sprintf@width,w,c
  1988  00140A  1022               	iorwf	sprintf@width+1,w,c
  1989  00140C  B4D8               	btfsc	status,2,c
  1990  00140E  D011               	goto	l608
  1991  001410                     l2297:
  1992                           
  1993                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  1994  001410  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1995  001414  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1996  001418  0E20               	movlw	32
  1997  00141A  6EDF               	movwf	indf2,c
  1998  00141C  4A0D               	infsnz	sprintf@sp,f,c
  1999  00141E  2A0E               	incf	sprintf@sp+1,f,c
  2000                           
  2001                           ;doprnt.c: 1431: while(--width);
  2002  001420  0621               	decf	sprintf@width,f,c
  2003  001422  A0D8               	btfss	status,0,c
  2004  001424  0622               	decf	sprintf@width+1,f,c
  2005  001426  5021               	movf	sprintf@width,w,c
  2006  001428  1022               	iorwf	sprintf@width+1,w,c
  2007  00142A  B4D8               	btfsc	status,2,c
  2008  00142C  D002               	goto	l608
  2009  00142E  D7F0               	goto	l2297
  2010  001430  D000               	goto	l608
  2011  001432                     l608:
  2012                           
  2013                           ;doprnt.c: 1469: }
  2014                           ;doprnt.c: 1472: prec = c;
  2015  001432  C023  F020         	movff	sprintf@c,sprintf@prec
  2016                           
  2017                           ;doprnt.c: 1474: while(prec--) {
  2018  001436  D02A               	goto	l2309
  2019  001438                     l2303:
  2020                           
  2021                           ;doprnt.c: 1478: {
  2022                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2023  001438  5020               	movf	sprintf@prec,w,c
  2024  00143A  0D02               	mullw	2
  2025  00143C  0E01               	movlw	low _dpowers
  2026  00143E  24F3               	addwf	prodl,w,c
  2027  001440  6EF6               	movwf	tblptrl,c
  2028  001442  0E0F               	movlw	high _dpowers
  2029  001444  20F4               	addwfc	prodh,w,c
  2030  001446  6EF7               	movwf	tblptrh,c
  2031  001448                     	if	0	;There are less than 3 active tblptr bytes
  2032  001448                     	endif
  2033  001448  0009               	tblrd		*+
  2034  00144A  CFF5 F003          	movff	tablat,___lwdiv@divisor
  2035  00144E  000A               	tblrd		*-
  2036  001450  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  2037  001454  C01E  F001         	movff	sprintf@val,___lwdiv@dividend
  2038  001458  C01F  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  2039  00145C  EC72  F00D         	call	___lwdiv	;wreg free
  2040  001460  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  2041  001464  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  2042  001468  0E00               	movlw	0
  2043  00146A  6E0B               	movwf	___lwmod@divisor+1,c
  2044  00146C  0E0A               	movlw	10
  2045  00146E  6E0A               	movwf	___lwmod@divisor,c
  2046  001470  ECF2  F00D         	call	___lwmod	;wreg free
  2047  001474  5008               	movf	?___lwmod,w,c
  2048  001476  0F30               	addlw	48
  2049  001478  6E23               	movwf	sprintf@c,c
  2050                           
  2051                           ;doprnt.c: 1523: }
  2052                           ;doprnt.c: 1524: ((*sp++ = (c)));
  2053  00147A  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2054  00147E  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2055  001482  C023  FFDF         	movff	sprintf@c,indf2
  2056  001486  4A0D               	infsnz	sprintf@sp,f,c
  2057  001488  2A0E               	incf	sprintf@sp+1,f,c
  2058  00148A  D000               	goto	l2309
  2059  00148C                     l2309:
  2060  00148C  0620               	decf	sprintf@prec,f,c
  2061  00148E  2820               	incf	sprintf@prec,w,c
  2062  001490  B4D8               	btfsc	status,2,c
  2063  001492  D002               	goto	l2311
  2064  001494  D7D1               	goto	l2303
  2065  001496  D000               	goto	l2311
  2066  001498                     l2311:
  2067  001498  C00F  FFF6         	movff	sprintf@f,tblptrl
  2068  00149C  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2069  0014A0  4A0F               	infsnz	sprintf@f,f,c
  2070  0014A2  2A10               	incf	sprintf@f+1,f,c
  2071  0014A4                     	if	0	;tblptru may be non-zero
  2072  0014A4                     	endif
  2073  0014A4                     	if	0	;tblptru may be non-zero
  2074  0014A4                     	endif
  2075  0014A4  0008               	tblrd		*
  2076  0014A6  CFF5 F023          	movff	tablat,sprintf@c
  2077  0014AA  5023               	movf	sprintf@c,w,c
  2078  0014AC  B4D8               	btfsc	status,2,c
  2079  0014AE  D002               	goto	l2313
  2080  0014B0  D6DC               	goto	l2229
  2081  0014B2  D000               	goto	l2313
  2082  0014B4                     l2313:
  2083                           
  2084                           ;doprnt.c: 1538: *sp = 0;
  2085  0014B4  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2086  0014B8  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2087  0014BC  0E00               	movlw	0
  2088  0014BE  6EDF               	movwf	indf2,c
  2089  0014C0  0012               	return	
  2090                           
  2091                           ;doprnt.c: 1540: return 0;
  2092                           ;	Return value of _sprintf is never used
  2093  0014C2  0012               	return		;funcret
  2094  0014C4                     __end_of_sprintf:
  2095                           	opt stack 0
  2096                           tblptru	equ	0xFF8
  2097                           tblptrh	equ	0xFF7
  2098                           tblptrl	equ	0xFF6
  2099                           tablat	equ	0xFF5
  2100                           prodh	equ	0xFF4
  2101                           prodl	equ	0xFF3
  2102                           postinc0	equ	0xFEE
  2103                           wreg	equ	0xFE8
  2104                           postdec1	equ	0xFE5
  2105                           fsr1l	equ	0xFE1
  2106                           indf2	equ	0xFDF
  2107                           postinc2	equ	0xFDE
  2108                           postdec2	equ	0xFDD
  2109                           fsr2h	equ	0xFDA
  2110                           fsr2l	equ	0xFD9
  2111                           status	equ	0xFD8
  2112                           
  2113 ;; *************** function _isdigit *****************
  2114 ;; Defined at:
  2115 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\isdigit.c"
  2116 ;; Parameters:    Size  Location     Type
  2117 ;;  c               1    wreg     unsigned char 
  2118 ;; Auto vars:     Size  Location     Type
  2119 ;;  c               1    2[COMRAM] unsigned char 
  2120 ;; Return value:  Size  Location     Type
  2121 ;;		None               void
  2122 ;; Registers used:
  2123 ;;		wreg, status,2, status,0
  2124 ;; Tracked objects:
  2125 ;;		On entry : 0/0
  2126 ;;		On exit  : 0/0
  2127 ;;		Unchanged: 0/0
  2128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2130 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2131 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2132 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2133 ;;Total ram usage:        3 bytes
  2134 ;; Hardware stack levels used:    1
  2135 ;; This function calls:
  2136 ;;		Nothing
  2137 ;; This function is called by:
  2138 ;;		_sprintf
  2139 ;; This function uses a non-reentrant model
  2140 ;;
  2141                           
  2142                           	psect	text6
  2143  001D86                     __ptext6:
  2144                           	opt stack 0
  2145  001D86                     _isdigit:
  2146                           	opt stack 27
  2147                           
  2148                           ;incstack = 0
  2149                           ;isdigit@c stored from wreg
  2150  001D86  6E03               	movwf	isdigit@c,c
  2151  001D88  0E00               	movlw	0
  2152  001D8A  6E02               	movwf	_isdigit$2318,c
  2153  001D8C  0E3A               	movlw	58
  2154  001D8E  6003               	cpfslt	isdigit@c,c
  2155  001D90  D006               	goto	l2169
  2156  001D92  0E2F               	movlw	47
  2157  001D94  6403               	cpfsgt	isdigit@c,c
  2158  001D96  D003               	goto	l2169
  2159  001D98  0E01               	movlw	1
  2160  001D9A  6E02               	movwf	_isdigit$2318,c
  2161  001D9C  D000               	goto	l2169
  2162  001D9E                     l2169:
  2163  001D9E  C002  F001         	movff	_isdigit$2318,??_isdigit
  2164  001DA2  3001               	rrcf	??_isdigit,w,c
  2165  001DA4  0012               	return	
  2166  001DA6  0012               	return		;funcret
  2167  001DA8                     __end_of_isdigit:
  2168                           	opt stack 0
  2169                           tblptru	equ	0xFF8
  2170                           tblptrh	equ	0xFF7
  2171                           tblptrl	equ	0xFF6
  2172                           tablat	equ	0xFF5
  2173                           prodh	equ	0xFF4
  2174                           prodl	equ	0xFF3
  2175                           postinc0	equ	0xFEE
  2176                           wreg	equ	0xFE8
  2177                           postdec1	equ	0xFE5
  2178                           fsr1l	equ	0xFE1
  2179                           indf2	equ	0xFDF
  2180                           postinc2	equ	0xFDE
  2181                           postdec2	equ	0xFDD
  2182                           fsr2h	equ	0xFDA
  2183                           fsr2l	equ	0xFD9
  2184                           status	equ	0xFD8
  2185                           
  2186 ;; *************** function ___wmul *****************
  2187 ;; Defined at:
  2188 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\Umul16.c"
  2189 ;; Parameters:    Size  Location     Type
  2190 ;;  multiplier      2    0[COMRAM] unsigned int 
  2191 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2192 ;; Auto vars:     Size  Location     Type
  2193 ;;  product         2    4[COMRAM] unsigned int 
  2194 ;; Return value:  Size  Location     Type
  2195 ;;                  2    0[COMRAM] unsigned int 
  2196 ;; Registers used:
  2197 ;;		wreg, status,2, status,0, prodl, prodh
  2198 ;; Tracked objects:
  2199 ;;		On entry : 0/0
  2200 ;;		On exit  : 0/0
  2201 ;;		Unchanged: 0/0
  2202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2203 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2204 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2206 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2207 ;;Total ram usage:        6 bytes
  2208 ;; Hardware stack levels used:    1
  2209 ;; This function calls:
  2210 ;;		Nothing
  2211 ;; This function is called by:
  2212 ;;		_sprintf
  2213 ;; This function uses a non-reentrant model
  2214 ;;
  2215                           
  2216                           	psect	text7
  2217  001D3A                     __ptext7:
  2218                           	opt stack 0
  2219  001D3A                     ___wmul:
  2220                           	opt stack 27
  2221                           
  2222                           ;incstack = 0
  2223  001D3A  5001               	movf	___wmul@multiplier,w,c
  2224  001D3C  0203               	mulwf	___wmul@multiplicand,c
  2225  001D3E  CFF3 F005          	movff	prodl,___wmul@product
  2226  001D42  CFF4 F006          	movff	prodh,___wmul@product+1
  2227  001D46  5001               	movf	___wmul@multiplier,w,c
  2228  001D48  0204               	mulwf	___wmul@multiplicand+1,c
  2229  001D4A  50F3               	movf	prodl,w,c
  2230  001D4C  2606               	addwf	___wmul@product+1,f,c
  2231  001D4E  5002               	movf	___wmul@multiplier+1,w,c
  2232  001D50  0203               	mulwf	___wmul@multiplicand,c
  2233  001D52  50F3               	movf	prodl,w,c
  2234  001D54  2606               	addwf	___wmul@product+1,f,c
  2235  001D56  C005  F001         	movff	___wmul@product,?___wmul
  2236  001D5A  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2237  001D5E  0012               	return	
  2238  001D60  0012               	return		;funcret
  2239  001D62                     __end_of___wmul:
  2240                           	opt stack 0
  2241                           tblptru	equ	0xFF8
  2242                           tblptrh	equ	0xFF7
  2243                           tblptrl	equ	0xFF6
  2244                           tablat	equ	0xFF5
  2245                           prodh	equ	0xFF4
  2246                           prodl	equ	0xFF3
  2247                           postinc0	equ	0xFEE
  2248                           wreg	equ	0xFE8
  2249                           postdec1	equ	0xFE5
  2250                           fsr1l	equ	0xFE1
  2251                           indf2	equ	0xFDF
  2252                           postinc2	equ	0xFDE
  2253                           postdec2	equ	0xFDD
  2254                           fsr2h	equ	0xFDA
  2255                           fsr2l	equ	0xFD9
  2256                           status	equ	0xFD8
  2257                           
  2258 ;; *************** function ___lwmod *****************
  2259 ;; Defined at:
  2260 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lwmod.c"
  2261 ;; Parameters:    Size  Location     Type
  2262 ;;  dividend        2    7[COMRAM] unsigned int 
  2263 ;;  divisor         2    9[COMRAM] unsigned int 
  2264 ;; Auto vars:     Size  Location     Type
  2265 ;;  counter         1   11[COMRAM] unsigned char 
  2266 ;; Return value:  Size  Location     Type
  2267 ;;                  2    7[COMRAM] unsigned int 
  2268 ;; Registers used:
  2269 ;;		wreg, status,2, status,0
  2270 ;; Tracked objects:
  2271 ;;		On entry : 0/0
  2272 ;;		On exit  : 0/0
  2273 ;;		Unchanged: 0/0
  2274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2275 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2276 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2278 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2279 ;;Total ram usage:        5 bytes
  2280 ;; Hardware stack levels used:    1
  2281 ;; This function calls:
  2282 ;;		Nothing
  2283 ;; This function is called by:
  2284 ;;		_sprintf
  2285 ;; This function uses a non-reentrant model
  2286 ;;
  2287                           
  2288                           	psect	text8
  2289  001BE4                     __ptext8:
  2290                           	opt stack 0
  2291  001BE4                     ___lwmod:
  2292                           	opt stack 27
  2293                           
  2294                           ;incstack = 0
  2295  001BE4  500A               	movf	___lwmod@divisor,w,c
  2296  001BE6  100B               	iorwf	___lwmod@divisor+1,w,c
  2297  001BE8  B4D8               	btfsc	status,2,c
  2298  001BEA  D01D               	goto	l1262
  2299  001BEC  0E01               	movlw	1
  2300  001BEE  6E0C               	movwf	___lwmod@counter,c
  2301  001BF0  D005               	goto	l2207
  2302  001BF2                     l2205:
  2303  001BF2  90D8               	bcf	status,0,c
  2304  001BF4  360A               	rlcf	___lwmod@divisor,f,c
  2305  001BF6  360B               	rlcf	___lwmod@divisor+1,f,c
  2306  001BF8  2A0C               	incf	___lwmod@counter,f,c
  2307  001BFA  D000               	goto	l2207
  2308  001BFC                     l2207:
  2309  001BFC  BE0B               	btfsc	___lwmod@divisor+1,7,c
  2310  001BFE  D002               	goto	l2209
  2311  001C00  D7F8               	goto	l2205
  2312  001C02  D000               	goto	l2209
  2313  001C04                     l2209:
  2314  001C04  500A               	movf	___lwmod@divisor,w,c
  2315  001C06  5C08               	subwf	___lwmod@dividend,w,c
  2316  001C08  500B               	movf	___lwmod@divisor+1,w,c
  2317  001C0A  5809               	subwfb	___lwmod@dividend+1,w,c
  2318  001C0C  A0D8               	btfss	status,0,c
  2319  001C0E  D005               	goto	l2213
  2320  001C10  500A               	movf	___lwmod@divisor,w,c
  2321  001C12  5E08               	subwf	___lwmod@dividend,f,c
  2322  001C14  500B               	movf	___lwmod@divisor+1,w,c
  2323  001C16  5A09               	subwfb	___lwmod@dividend+1,f,c
  2324  001C18  D000               	goto	l2213
  2325  001C1A                     l2213:
  2326  001C1A  90D8               	bcf	status,0,c
  2327  001C1C  320B               	rrcf	___lwmod@divisor+1,f,c
  2328  001C1E  320A               	rrcf	___lwmod@divisor,f,c
  2329  001C20  2E0C               	decfsz	___lwmod@counter,f,c
  2330  001C22  D7F0               	goto	l2209
  2331  001C24  D000               	goto	l1262
  2332  001C26                     l1262:
  2333  001C26  C008  F008         	movff	___lwmod@dividend,?___lwmod
  2334  001C2A  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  2335  001C2E  0012               	return		;funcret
  2336  001C30                     __end_of___lwmod:
  2337                           	opt stack 0
  2338                           tblptru	equ	0xFF8
  2339                           tblptrh	equ	0xFF7
  2340                           tblptrl	equ	0xFF6
  2341                           tablat	equ	0xFF5
  2342                           prodh	equ	0xFF4
  2343                           prodl	equ	0xFF3
  2344                           postinc0	equ	0xFEE
  2345                           wreg	equ	0xFE8
  2346                           postdec1	equ	0xFE5
  2347                           fsr1l	equ	0xFE1
  2348                           indf2	equ	0xFDF
  2349                           postinc2	equ	0xFDE
  2350                           postdec2	equ	0xFDD
  2351                           fsr2h	equ	0xFDA
  2352                           fsr2l	equ	0xFD9
  2353                           status	equ	0xFD8
  2354                           
  2355 ;; *************** function ___lwdiv *****************
  2356 ;; Defined at:
  2357 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  2358 ;; Parameters:    Size  Location     Type
  2359 ;;  dividend        2    0[COMRAM] unsigned int 
  2360 ;;  divisor         2    2[COMRAM] unsigned int 
  2361 ;; Auto vars:     Size  Location     Type
  2362 ;;  quotient        2    4[COMRAM] unsigned int 
  2363 ;;  counter         1    6[COMRAM] unsigned char 
  2364 ;; Return value:  Size  Location     Type
  2365 ;;                  2    0[COMRAM] unsigned int 
  2366 ;; Registers used:
  2367 ;;		wreg, status,2, status,0
  2368 ;; Tracked objects:
  2369 ;;		On entry : 0/0
  2370 ;;		On exit  : 0/0
  2371 ;;		Unchanged: 0/0
  2372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2373 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2374 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2376 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2377 ;;Total ram usage:        7 bytes
  2378 ;; Hardware stack levels used:    1
  2379 ;; This function calls:
  2380 ;;		Nothing
  2381 ;; This function is called by:
  2382 ;;		_sprintf
  2383 ;; This function uses a non-reentrant model
  2384 ;;
  2385                           
  2386                           	psect	text9
  2387  001AE4                     __ptext9:
  2388                           	opt stack 0
  2389  001AE4                     ___lwdiv:
  2390                           	opt stack 27
  2391                           
  2392                           ;incstack = 0
  2393  001AE4  0E00               	movlw	0
  2394  001AE6  6E06               	movwf	___lwdiv@quotient+1,c
  2395  001AE8  0E00               	movlw	0
  2396  001AEA  6E05               	movwf	___lwdiv@quotient,c
  2397  001AEC  5003               	movf	___lwdiv@divisor,w,c
  2398  001AEE  1004               	iorwf	___lwdiv@divisor+1,w,c
  2399  001AF0  B4D8               	btfsc	status,2,c
  2400  001AF2  D021               	goto	l1252
  2401  001AF4  0E01               	movlw	1
  2402  001AF6  6E07               	movwf	___lwdiv@counter,c
  2403  001AF8  D005               	goto	l2187
  2404  001AFA                     l2185:
  2405  001AFA  90D8               	bcf	status,0,c
  2406  001AFC  3603               	rlcf	___lwdiv@divisor,f,c
  2407  001AFE  3604               	rlcf	___lwdiv@divisor+1,f,c
  2408  001B00  2A07               	incf	___lwdiv@counter,f,c
  2409  001B02  D000               	goto	l2187
  2410  001B04                     l2187:
  2411  001B04  BE04               	btfsc	___lwdiv@divisor+1,7,c
  2412  001B06  D002               	goto	l2189
  2413  001B08  D7F8               	goto	l2185
  2414  001B0A  D000               	goto	l2189
  2415  001B0C                     l2189:
  2416  001B0C  90D8               	bcf	status,0,c
  2417  001B0E  3605               	rlcf	___lwdiv@quotient,f,c
  2418  001B10  3606               	rlcf	___lwdiv@quotient+1,f,c
  2419  001B12  5003               	movf	___lwdiv@divisor,w,c
  2420  001B14  5C01               	subwf	___lwdiv@dividend,w,c
  2421  001B16  5004               	movf	___lwdiv@divisor+1,w,c
  2422  001B18  5802               	subwfb	___lwdiv@dividend+1,w,c
  2423  001B1A  A0D8               	btfss	status,0,c
  2424  001B1C  D006               	goto	l2197
  2425  001B1E  5003               	movf	___lwdiv@divisor,w,c
  2426  001B20  5E01               	subwf	___lwdiv@dividend,f,c
  2427  001B22  5004               	movf	___lwdiv@divisor+1,w,c
  2428  001B24  5A02               	subwfb	___lwdiv@dividend+1,f,c
  2429  001B26  8005               	bsf	___lwdiv@quotient,0,c
  2430  001B28  D000               	goto	l2197
  2431  001B2A                     l2197:
  2432  001B2A  90D8               	bcf	status,0,c
  2433  001B2C  3204               	rrcf	___lwdiv@divisor+1,f,c
  2434  001B2E  3203               	rrcf	___lwdiv@divisor,f,c
  2435  001B30  2E07               	decfsz	___lwdiv@counter,f,c
  2436  001B32  D7EC               	goto	l2189
  2437  001B34  D000               	goto	l1252
  2438  001B36                     l1252:
  2439  001B36  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  2440  001B3A  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2441  001B3E  0012               	return		;funcret
  2442  001B40                     __end_of___lwdiv:
  2443                           	opt stack 0
  2444                           tblptru	equ	0xFF8
  2445                           tblptrh	equ	0xFF7
  2446                           tblptrl	equ	0xFF6
  2447                           tablat	equ	0xFF5
  2448                           prodh	equ	0xFF4
  2449                           prodl	equ	0xFF3
  2450                           postinc0	equ	0xFEE
  2451                           wreg	equ	0xFE8
  2452                           postdec1	equ	0xFE5
  2453                           fsr1l	equ	0xFE1
  2454                           indf2	equ	0xFDF
  2455                           postinc2	equ	0xFDE
  2456                           postdec2	equ	0xFDD
  2457                           fsr2h	equ	0xFDA
  2458                           fsr2l	equ	0xFD9
  2459                           status	equ	0xFD8
  2460                           
  2461 ;; *************** function _lcd_putrs *****************
  2462 ;; Defined at:
  2463 ;;		line 221 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2464 ;; Parameters:    Size  Location     Type
  2465 ;;  ptr             2    8[COMRAM] PTR const unsigned char 
  2466 ;;		 -> STR_24(8), STR_23(9), STR_22(7), STR_19(2), 
  2467 ;;		 -> STR_18(2), STR_16(2), STR_15(2), STR_11(2), 
  2468 ;;		 -> STR_7(2), buffer2(20), STR_3(10), STR_2(13), 
  2469 ;;		 -> STR_1(33), 
  2470 ;; Auto vars:     Size  Location     Type
  2471 ;;		None
  2472 ;; Return value:  Size  Location     Type
  2473 ;;		None               void
  2474 ;; Registers used:
  2475 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2476 ;; Tracked objects:
  2477 ;;		On entry : 0/0
  2478 ;;		On exit  : 0/0
  2479 ;;		Unchanged: 0/0
  2480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2481 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2484 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2485 ;;Total ram usage:        2 bytes
  2486 ;; Hardware stack levels used:    1
  2487 ;; Hardware stack levels required when called:    4
  2488 ;; This function calls:
  2489 ;;		_lcd_putc
  2490 ;; This function is called by:
  2491 ;;		_main
  2492 ;;		_read_keyboard
  2493 ;;		_write_Date
  2494 ;;		_set_vision
  2495 ;; This function uses a non-reentrant model
  2496 ;;
  2497                           
  2498                           	psect	text10
  2499  001B40                     __ptext10:
  2500                           	opt stack 0
  2501  001B40                     _lcd_putrs:
  2502                           	opt stack 24
  2503                           
  2504                           ;unmc_lcd_216.c: 223: while(*ptr){
  2505                           
  2506                           ;incstack = 0
  2507  001B40  D015               	goto	l2225
  2508  001B42                     l2221:
  2509                           
  2510                           ;unmc_lcd_216.c: 224: lcd_putc(*ptr++);
  2511  001B42  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  2512  001B46  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  2513  001B4A  6AF8               	clrf	tblptru,c
  2514  001B4C  0E0E               	movlw	(high __ramtop+-1)
  2515  001B4E  64F7               	cpfsgt	tblptrh,c
  2516  001B50  D003               	bra	u1347
  2517  001B52  0008               	tblrd		*
  2518  001B54  50F5               	movf	tablat,w,c
  2519  001B56  D005               	bra	u1340
  2520  001B58                     u1347:
  2521  001B58  CFF6 FFE9          	movff	tblptrl,fsr0l
  2522  001B5C  CFF7 FFEA          	movff	tblptrh,fsr0h
  2523  001B60  50EF               	movf	indf0,w,c
  2524  001B62                     u1340:
  2525  001B62  EC18  F00E         	call	_lcd_putc
  2526  001B66  4A09               	infsnz	lcd_putrs@ptr,f,c
  2527  001B68  2A0A               	incf	lcd_putrs@ptr+1,f,c
  2528  001B6A  D000               	goto	l2225
  2529  001B6C                     l2225:
  2530  001B6C  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  2531  001B70  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  2532  001B74  6AF8               	clrf	tblptru,c
  2533  001B76  0E0E               	movlw	(high __ramtop+-1)
  2534  001B78  64F7               	cpfsgt	tblptrh,c
  2535  001B7A  D003               	bra	u1357
  2536  001B7C  0008               	tblrd		*
  2537  001B7E  50F5               	movf	tablat,w,c
  2538  001B80  D005               	bra	u1350
  2539  001B82                     u1357:
  2540  001B82  CFF6 FFE9          	movff	tblptrl,fsr0l
  2541  001B86  CFF7 FFEA          	movff	tblptrh,fsr0h
  2542  001B8A  50EF               	movf	indf0,w,c
  2543  001B8C                     u1350:
  2544  001B8C  0900               	iorlw	0
  2545  001B8E  A4D8               	btfss	status,2,c
  2546  001B90  D7D8               	goto	l2221
  2547  001B92  0012               	return		;funcret
  2548  001B94                     __end_of_lcd_putrs:
  2549                           	opt stack 0
  2550                           tblptru	equ	0xFF8
  2551                           tblptrh	equ	0xFF7
  2552                           tblptrl	equ	0xFF6
  2553                           tablat	equ	0xFF5
  2554                           prodh	equ	0xFF4
  2555                           prodl	equ	0xFF3
  2556                           indf0	equ	0xFEF
  2557                           postinc0	equ	0xFEE
  2558                           fsr0h	equ	0xFEA
  2559                           fsr0l	equ	0xFE9
  2560                           wreg	equ	0xFE8
  2561                           postdec1	equ	0xFE5
  2562                           fsr1l	equ	0xFE1
  2563                           indf2	equ	0xFDF
  2564                           postinc2	equ	0xFDE
  2565                           postdec2	equ	0xFDD
  2566                           fsr2h	equ	0xFDA
  2567                           fsr2l	equ	0xFD9
  2568                           status	equ	0xFD8
  2569                           
  2570 ;; *************** function _lcd_putc *****************
  2571 ;; Defined at:
  2572 ;;		line 172 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2573 ;; Parameters:    Size  Location     Type
  2574 ;;  c               1    wreg     unsigned char 
  2575 ;; Auto vars:     Size  Location     Type
  2576 ;;  c               1    7[COMRAM] unsigned char 
  2577 ;; Return value:  Size  Location     Type
  2578 ;;		None               void
  2579 ;; Registers used:
  2580 ;;		wreg, status,2, status,0, cstack
  2581 ;; Tracked objects:
  2582 ;;		On entry : 0/0
  2583 ;;		On exit  : 0/0
  2584 ;;		Unchanged: 0/0
  2585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2587 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2589 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2590 ;;Total ram usage:        1 bytes
  2591 ;; Hardware stack levels used:    1
  2592 ;; Hardware stack levels required when called:    3
  2593 ;; This function calls:
  2594 ;;		_lcd_gotoxy
  2595 ;;		_lcd_send_byte
  2596 ;; This function is called by:
  2597 ;;		_lcd_putrs
  2598 ;;		_lcd_puts
  2599 ;; This function uses a non-reentrant model
  2600 ;;
  2601                           
  2602                           	psect	text11
  2603  001C30                     __ptext11:
  2604                           	opt stack 0
  2605  001C30                     _lcd_putc:
  2606                           	opt stack 24
  2607                           
  2608                           ;incstack = 0
  2609                           ;lcd_putc@c stored from wreg
  2610  001C30  6E08               	movwf	lcd_putc@c,c
  2611                           
  2612                           ;unmc_lcd_216.c: 173: switch(c){
  2613  001C32  D018               	goto	l2159
  2614  001C34                     l2149:
  2615                           
  2616                           ;unmc_lcd_216.c: 175: lcd_send_byte(0,1);
  2617  001C34  0E01               	movlw	1
  2618  001C36  6E03               	movwf	lcd_send_byte@n,c
  2619  001C38  0E00               	movlw	0
  2620  001C3A  EC84  F00E         	call	_lcd_send_byte
  2621                           
  2622                           ;unmc_lcd_216.c: 176: break;
  2623  001C3E  0012               	return	
  2624  001C40                     l2151:
  2625                           
  2626                           ;unmc_lcd_216.c: 178: lcd_gotoxy(1,2);
  2627  001C40  0E02               	movlw	2
  2628  001C42  6E05               	movwf	lcd_gotoxy@y,c
  2629  001C44  0E01               	movlw	1
  2630  001C46  ECB1  F00E         	call	_lcd_gotoxy
  2631                           
  2632                           ;unmc_lcd_216.c: 179: break;
  2633  001C4A  0012               	return	
  2634  001C4C                     l2153:
  2635                           
  2636                           ;unmc_lcd_216.c: 181: lcd_send_byte(0,0x10);
  2637  001C4C  0E10               	movlw	16
  2638  001C4E  6E03               	movwf	lcd_send_byte@n,c
  2639  001C50  0E00               	movlw	0
  2640  001C52  EC84  F00E         	call	_lcd_send_byte
  2641                           
  2642                           ;unmc_lcd_216.c: 182: break;
  2643  001C56  0012               	return	
  2644  001C58                     l2155:
  2645                           
  2646                           ;unmc_lcd_216.c: 184: lcd_send_byte(1,c);
  2647  001C58  C008  F003         	movff	lcd_putc@c,lcd_send_byte@n
  2648  001C5C  0E01               	movlw	1
  2649  001C5E  EC84  F00E         	call	_lcd_send_byte
  2650                           
  2651                           ;unmc_lcd_216.c: 186: }
  2652                           
  2653                           ;unmc_lcd_216.c: 185: break;
  2654  001C62  0012               	return	
  2655  001C64                     l2159:
  2656  001C64  5008               	movf	lcd_putc@c,w,c
  2657                           
  2658                           ; Switch size 1, requested type "space"
  2659                           ; Number of cases is 3, Range of values is 8 to 12
  2660                           ; switch strategies available:
  2661                           ; Name         Instructions Cycles
  2662                           ; simple_byte           10     6 (average)
  2663                           ;	Chosen strategy is simple_byte
  2664  001C66  0A08               	xorlw	8	; case 8
  2665  001C68  B4D8               	btfsc	status,2,c
  2666  001C6A  D7F0               	goto	l2153
  2667  001C6C  0A02               	xorlw	2	; case 10
  2668  001C6E  B4D8               	btfsc	status,2,c
  2669  001C70  D7E7               	goto	l2151
  2670  001C72  0A06               	xorlw	6	; case 12
  2671  001C74  B4D8               	btfsc	status,2,c
  2672  001C76  D7DE               	goto	l2149
  2673  001C78  D7EF               	goto	l2155
  2674  001C7A  0012               	return		;funcret
  2675  001C7C                     __end_of_lcd_putc:
  2676                           	opt stack 0
  2677                           tblptru	equ	0xFF8
  2678                           tblptrh	equ	0xFF7
  2679                           tblptrl	equ	0xFF6
  2680                           tablat	equ	0xFF5
  2681                           prodh	equ	0xFF4
  2682                           prodl	equ	0xFF3
  2683                           indf0	equ	0xFEF
  2684                           postinc0	equ	0xFEE
  2685                           fsr0h	equ	0xFEA
  2686                           fsr0l	equ	0xFE9
  2687                           wreg	equ	0xFE8
  2688                           postdec1	equ	0xFE5
  2689                           fsr1l	equ	0xFE1
  2690                           indf2	equ	0xFDF
  2691                           postinc2	equ	0xFDE
  2692                           postdec2	equ	0xFDD
  2693                           fsr2h	equ	0xFDA
  2694                           fsr2l	equ	0xFD9
  2695                           status	equ	0xFD8
  2696                           
  2697 ;; *************** function _lcd_gotoxy *****************
  2698 ;; Defined at:
  2699 ;;		line 158 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2700 ;; Parameters:    Size  Location     Type
  2701 ;;  x               1    wreg     unsigned char 
  2702 ;;  y               1    4[COMRAM] unsigned char 
  2703 ;; Auto vars:     Size  Location     Type
  2704 ;;  x               1    5[COMRAM] unsigned char 
  2705 ;;  address         1    6[COMRAM] unsigned char 
  2706 ;; Return value:  Size  Location     Type
  2707 ;;		None               void
  2708 ;; Registers used:
  2709 ;;		wreg, status,2, status,0, cstack
  2710 ;; Tracked objects:
  2711 ;;		On entry : 0/0
  2712 ;;		On exit  : 0/0
  2713 ;;		Unchanged: 0/0
  2714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2715 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2716 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2718 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2719 ;;Total ram usage:        3 bytes
  2720 ;; Hardware stack levels used:    1
  2721 ;; Hardware stack levels required when called:    2
  2722 ;; This function calls:
  2723 ;;		_lcd_send_byte
  2724 ;; This function is called by:
  2725 ;;		_main
  2726 ;;		_lcd_putc
  2727 ;;		_write_Date
  2728 ;;		_set_vision
  2729 ;; This function uses a non-reentrant model
  2730 ;;
  2731                           
  2732                           	psect	text12
  2733  001D62                     __ptext12:
  2734                           	opt stack 0
  2735  001D62                     _lcd_gotoxy:
  2736                           	opt stack 24
  2737                           
  2738                           ;incstack = 0
  2739                           ;lcd_gotoxy@x stored from wreg
  2740  001D62  6E06               	movwf	lcd_gotoxy@x,c
  2741                           
  2742                           ;unmc_lcd_216.c: 159: int8 address;
  2743                           ;unmc_lcd_216.c: 161: if(y != 1)
  2744  001D64  0405               	decf	lcd_gotoxy@y,w,c
  2745  001D66  B4D8               	btfsc	status,2,c
  2746  001D68  D002               	goto	l2141
  2747                           
  2748                           ;unmc_lcd_216.c: 162: address = 0x40;
  2749  001D6A  0E40               	movlw	64
  2750  001D6C  D001               	goto	L1
  2751  001D6E                     l2141:
  2752                           
  2753                           ;unmc_lcd_216.c: 163: else
  2754                           ;unmc_lcd_216.c: 164: address=0;
  2755  001D6E  0E00               	movlw	0
  2756  001D70                     L1:
  2757  001D70  6E07               	movwf	lcd_gotoxy@address,c
  2758  001D72  D000               	goto	l2143
  2759  001D74                     l2143:
  2760                           
  2761                           ;unmc_lcd_216.c: 166: address += x-1;
  2762  001D74  0406               	decf	lcd_gotoxy@x,w,c
  2763  001D76  2607               	addwf	lcd_gotoxy@address,f,c
  2764                           
  2765                           ;unmc_lcd_216.c: 167: lcd_send_byte(0, 0x80 | address);
  2766  001D78  5007               	movf	lcd_gotoxy@address,w,c
  2767  001D7A  0980               	iorlw	128
  2768  001D7C  6E03               	movwf	lcd_send_byte@n,c
  2769  001D7E  0E00               	movlw	0
  2770  001D80  EC84  F00E         	call	_lcd_send_byte
  2771  001D84  0012               	return		;funcret
  2772  001D86                     __end_of_lcd_gotoxy:
  2773                           	opt stack 0
  2774                           tblptru	equ	0xFF8
  2775                           tblptrh	equ	0xFF7
  2776                           tblptrl	equ	0xFF6
  2777                           tablat	equ	0xFF5
  2778                           prodh	equ	0xFF4
  2779                           prodl	equ	0xFF3
  2780                           indf0	equ	0xFEF
  2781                           postinc0	equ	0xFEE
  2782                           fsr0h	equ	0xFEA
  2783                           fsr0l	equ	0xFE9
  2784                           wreg	equ	0xFE8
  2785                           postdec1	equ	0xFE5
  2786                           fsr1l	equ	0xFE1
  2787                           indf2	equ	0xFDF
  2788                           postinc2	equ	0xFDE
  2789                           postdec2	equ	0xFDD
  2790                           fsr2h	equ	0xFDA
  2791                           fsr2l	equ	0xFD9
  2792                           status	equ	0xFD8
  2793                           
  2794 ;; *************** function _caratula *****************
  2795 ;; Defined at:
  2796 ;;		line 31 in file "main.c"
  2797 ;; Parameters:    Size  Location     Type
  2798 ;;		None
  2799 ;; Auto vars:     Size  Location     Type
  2800 ;;		None
  2801 ;; Return value:  Size  Location     Type
  2802 ;;		None               void
  2803 ;; Registers used:
  2804 ;;		wreg, status,2, status,0, cstack
  2805 ;; Tracked objects:
  2806 ;;		On entry : 0/0
  2807 ;;		On exit  : 0/0
  2808 ;;		Unchanged: 0/0
  2809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2813 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2814 ;;Total ram usage:        0 bytes
  2815 ;; Hardware stack levels used:    1
  2816 ;; Hardware stack levels required when called:    3
  2817 ;; This function calls:
  2818 ;;		_lcd_comand
  2819 ;; This function is called by:
  2820 ;;		_main
  2821 ;; This function uses a non-reentrant model
  2822 ;;
  2823                           
  2824                           	psect	text13
  2825  001E10                     __ptext13:
  2826                           	opt stack 0
  2827  001E10                     _caratula:
  2828                           	opt stack 27
  2829                           
  2830                           ;main.c: 33: lcd_comand(0b00001100);
  2831                           
  2832                           ;incstack = 0
  2833  001E10  0E0C               	movlw	12
  2834  001E12  ECFA  F00E         	call	_lcd_comand
  2835  001E16  0012               	return		;funcret
  2836  001E18                     __end_of_caratula:
  2837                           	opt stack 0
  2838                           tblptru	equ	0xFF8
  2839                           tblptrh	equ	0xFF7
  2840                           tblptrl	equ	0xFF6
  2841                           tablat	equ	0xFF5
  2842                           prodh	equ	0xFF4
  2843                           prodl	equ	0xFF3
  2844                           indf0	equ	0xFEF
  2845                           postinc0	equ	0xFEE
  2846                           fsr0h	equ	0xFEA
  2847                           fsr0l	equ	0xFE9
  2848                           wreg	equ	0xFE8
  2849                           postdec1	equ	0xFE5
  2850                           fsr1l	equ	0xFE1
  2851                           indf2	equ	0xFDF
  2852                           postinc2	equ	0xFDE
  2853                           postdec2	equ	0xFDD
  2854                           fsr2h	equ	0xFDA
  2855                           fsr2l	equ	0xFD9
  2856                           status	equ	0xFD8
  2857                           
  2858 ;; *************** function _Setup *****************
  2859 ;; Defined at:
  2860 ;;		line 51 in file "main.c"
  2861 ;; Parameters:    Size  Location     Type
  2862 ;;		None
  2863 ;; Auto vars:     Size  Location     Type
  2864 ;;		None
  2865 ;; Return value:  Size  Location     Type
  2866 ;;		None               void
  2867 ;; Registers used:
  2868 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2869 ;; Tracked objects:
  2870 ;;		On entry : 0/0
  2871 ;;		On exit  : 0/0
  2872 ;;		Unchanged: 0/0
  2873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2877 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2878 ;;Total ram usage:        0 bytes
  2879 ;; Hardware stack levels used:    1
  2880 ;; Hardware stack levels required when called:    3
  2881 ;; This function calls:
  2882 ;;		_Write_RTC
  2883 ;;		_lcd_comand
  2884 ;;		_lcd_init
  2885 ;; This function is called by:
  2886 ;;		_main
  2887 ;; This function uses a non-reentrant model
  2888 ;;
  2889                           
  2890                           	psect	text14
  2891  001C7C                     __ptext14:
  2892                           	opt stack 0
  2893  001C7C                     _Setup:
  2894                           	opt stack 27
  2895                           
  2896                           ;main.c: 53: OSCTUNEbits.INTSRC=1;
  2897                           
  2898                           ;incstack = 0
  2899  001C7C  8E9B               	bsf	3995,7,c	;volatile
  2900                           
  2901                           ;main.c: 54: OSCTUNEbits.PLLEN=0;
  2902  001C7E  9C9B               	bcf	3995,6,c	;volatile
  2903                           
  2904                           ;main.c: 55: OSCCONbits.IRCF0=1;
  2905  001C80  88D3               	bsf	4051,4,c	;volatile
  2906                           
  2907                           ;main.c: 56: OSCCONbits.IRCF1=1;
  2908  001C82  8AD3               	bsf	4051,5,c	;volatile
  2909                           
  2910                           ;main.c: 57: OSCCONbits.IRCF2=1;
  2911  001C84  8CD3               	bsf	4051,6,c	;volatile
  2912                           
  2913                           ;main.c: 58: OSCCONbits.SCS0=0;
  2914  001C86  90D3               	bcf	4051,0,c	;volatile
  2915                           
  2916                           ;main.c: 59: OSCCONbits.SCS1=0;
  2917  001C88  92D3               	bcf	4051,1,c	;volatile
  2918                           
  2919                           ;main.c: 60: TRISA = 0b11110000;
  2920  001C8A  0EF0               	movlw	240
  2921  001C8C  6E92               	movwf	3986,c	;volatile
  2922                           
  2923                           ;main.c: 61: TRISB = 0;
  2924  001C8E  0E00               	movlw	0
  2925  001C90  6E93               	movwf	3987,c	;volatile
  2926                           
  2927                           ;main.c: 62: TRISC = 0b00000111;
  2928  001C92  0E07               	movlw	7
  2929  001C94  6E94               	movwf	3988,c	;volatile
  2930                           
  2931                           ;main.c: 66: ANCON0=0b11111111;
  2932  001C96  010F               	movlb	15	; () banked
  2933  001C98  6948               	setf	72,b	;volatile
  2934                           
  2935                           ; BSR set to: 15
  2936                           ;main.c: 68: ANCON1=0b11111111;
  2937  001C9A  010F               	movlb	15	; () banked
  2938  001C9C  6949               	setf	73,b	;volatile
  2939                           
  2940                           ;main.c: 69: ADCON0=0b00101101;
  2941  001C9E  0E2D               	movlw	45
  2942  001CA0  6EC2               	movwf	4034,c	;volatile
  2943                           
  2944                           ;main.c: 70: ADCON1=0b00010000;
  2945  001CA2  0E10               	movlw	16
  2946  001CA4  6EC1               	movwf	4033,c	;volatile
  2947                           
  2948                           ; BSR set to: 15
  2949                           ;main.c: 71: RTCCFGbits.RTCEN=1;
  2950  001CA6  010F               	movlb	15	; () banked
  2951  001CA8  8F3F               	bsf	63,7,b	;volatile
  2952                           
  2953                           ; BSR set to: 15
  2954                           ;main.c: 72: RTCCFGbits.RTCWREN=1;
  2955  001CAA  010F               	movlb	15	; () banked
  2956  001CAC  8B3F               	bsf	63,5,b	;volatile
  2957                           
  2958                           ; BSR set to: 15
  2959                           ;main.c: 73: T1CONbits.T1OSCEN=1;
  2960  001CAE  86CD               	bsf	4045,3,c	;volatile
  2961                           
  2962                           ; BSR set to: 15
  2963                           ;main.c: 74: Write_RTC();
  2964  001CB0  EC62  F00A         	call	_Write_RTC	;wreg free
  2965                           
  2966                           ;main.c: 75: lcd_init();
  2967  001CB4  EC7A  F00C         	call	_lcd_init	;wreg free
  2968                           
  2969                           ;main.c: 76: lcd_comand(0b00001100);
  2970  001CB8  0E0C               	movlw	12
  2971  001CBA  ECFA  F00E         	call	_lcd_comand
  2972                           
  2973                           ;main.c: 77: LATBbits.LATB1 = 1;;
  2974  001CBE  828A               	bsf	3978,1,c	;volatile
  2975                           
  2976                           ;main.c: 78: LATBbits.LATB0 = 1;;
  2977  001CC0  808A               	bsf	3978,0,c	;volatile
  2978  001CC2  0012               	return		;funcret
  2979  001CC4                     __end_of_Setup:
  2980                           	opt stack 0
  2981                           tblptru	equ	0xFF8
  2982                           tblptrh	equ	0xFF7
  2983                           tblptrl	equ	0xFF6
  2984                           tablat	equ	0xFF5
  2985                           prodh	equ	0xFF4
  2986                           prodl	equ	0xFF3
  2987                           indf0	equ	0xFEF
  2988                           postinc0	equ	0xFEE
  2989                           fsr0h	equ	0xFEA
  2990                           fsr0l	equ	0xFE9
  2991                           wreg	equ	0xFE8
  2992                           postdec1	equ	0xFE5
  2993                           fsr1l	equ	0xFE1
  2994                           indf2	equ	0xFDF
  2995                           postinc2	equ	0xFDE
  2996                           postdec2	equ	0xFDD
  2997                           fsr2h	equ	0xFDA
  2998                           fsr2l	equ	0xFD9
  2999                           status	equ	0xFD8
  3000                           
  3001 ;; *************** function _lcd_init *****************
  3002 ;; Defined at:
  3003 ;;		line 119 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3004 ;; Parameters:    Size  Location     Type
  3005 ;;		None
  3006 ;; Auto vars:     Size  Location     Type
  3007 ;;  i               1    4[COMRAM] unsigned char 
  3008 ;; Return value:  Size  Location     Type
  3009 ;;		None               void
  3010 ;; Registers used:
  3011 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3012 ;; Tracked objects:
  3013 ;;		On entry : 0/0
  3014 ;;		On exit  : 0/0
  3015 ;;		Unchanged: 0/0
  3016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3018 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3020 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3021 ;;Total ram usage:        1 bytes
  3022 ;; Hardware stack levels used:    1
  3023 ;; Hardware stack levels required when called:    2
  3024 ;; This function calls:
  3025 ;;		_Delay1KTCYx
  3026 ;;		_lcd_send_byte
  3027 ;;		_lcd_send_nibble
  3028 ;; This function is called by:
  3029 ;;		_Setup
  3030 ;; This function uses a non-reentrant model
  3031 ;;
  3032                           
  3033                           	psect	text15
  3034  0018F4                     __ptext15:
  3035                           	opt stack 0
  3036  0018F4                     _lcd_init:
  3037                           	opt stack 27
  3038                           
  3039                           ;unmc_lcd_216.c: 120: int8 i;
  3040                           ;unmc_lcd_216.c: 122: TRISBbits.TRISB3=0;
  3041                           
  3042                           ;incstack = 0
  3043  0018F4  9693               	bcf	3987,3,c	;volatile
  3044                           
  3045                           ;unmc_lcd_216.c: 123: TRISBbits.TRISB2=0;
  3046  0018F6  9493               	bcf	3987,2,c	;volatile
  3047                           
  3048                           ;unmc_lcd_216.c: 128: LATBbits.LATB3=0;
  3049  0018F8  968A               	bcf	3978,3,c	;volatile
  3050                           
  3051                           ;unmc_lcd_216.c: 129: LATBbits.LATB2=0;
  3052  0018FA  948A               	bcf	3978,2,c	;volatile
  3053                           
  3054                           ;unmc_lcd_216.c: 134: TRISBbits.TRISB4=0;
  3055  0018FC  9893               	bcf	3987,4,c	;volatile
  3056                           
  3057                           ;unmc_lcd_216.c: 135: TRISBbits.TRISB5=0;
  3058  0018FE  9A93               	bcf	3987,5,c	;volatile
  3059                           
  3060                           ;unmc_lcd_216.c: 136: TRISBbits.TRISB6=0;
  3061  001900  9C93               	bcf	3987,6,c	;volatile
  3062                           
  3063                           ;unmc_lcd_216.c: 137: TRISBbits.TRISB7=0;
  3064  001902  9E93               	bcf	3987,7,c	;volatile
  3065                           
  3066                           ;unmc_lcd_216.c: 139: Delay1KTCYx(8000000UL/800000UL);
  3067  001904  0E0A               	movlw	10
  3068  001906  ECDF  F00E         	call	_Delay1KTCYx
  3069                           
  3070                           ;unmc_lcd_216.c: 140: Delay1KTCYx(8000000UL/800000UL);
  3071  00190A  0E0A               	movlw	10
  3072  00190C  ECDF  F00E         	call	_Delay1KTCYx
  3073                           
  3074                           ;unmc_lcd_216.c: 141: Delay1KTCYx(8000000UL/800000UL);
  3075  001910  0E0A               	movlw	10
  3076  001912  ECDF  F00E         	call	_Delay1KTCYx
  3077                           
  3078                           ;unmc_lcd_216.c: 143: for(i=0 ;i < 3; i++){
  3079  001916  0E00               	movlw	0
  3080  001918  6E05               	movwf	lcd_init@i,c
  3081  00191A                     l2553:
  3082  00191A  0E02               	movlw	2
  3083  00191C  6405               	cpfsgt	lcd_init@i,c
  3084  00191E  D001               	goto	l2557
  3085  001920  D008               	goto	l2563
  3086  001922                     l2557:
  3087                           
  3088                           ;unmc_lcd_216.c: 144: lcd_send_nibble(0x03);
  3089  001922  0E03               	movlw	3
  3090  001924  EC37  F00D         	call	_lcd_send_nibble
  3091                           
  3092                           ;unmc_lcd_216.c: 145: Delay1KTCYx(8000000UL/800000UL);
  3093  001928  0E0A               	movlw	10
  3094  00192A  ECDF  F00E         	call	_Delay1KTCYx
  3095  00192E  2A05               	incf	lcd_init@i,f,c
  3096  001930  D7F4               	goto	l2553
  3097  001932                     l2563:
  3098                           
  3099                           ;unmc_lcd_216.c: 146: }
  3100                           ;unmc_lcd_216.c: 148: lcd_send_nibble(0x02);
  3101  001932  0E02               	movlw	2
  3102  001934  EC37  F00D         	call	_lcd_send_nibble
  3103                           
  3104                           ;unmc_lcd_216.c: 150: for(i=0; i < sizeof(LCD_INIT_STRING); i++){
  3105  001938  0E00               	movlw	0
  3106  00193A  6E05               	movwf	lcd_init@i,c
  3107  00193C  0E03               	movlw	3
  3108  00193E  6405               	cpfsgt	lcd_init@i,c
  3109  001940  D002               	goto	l2571
  3110  001942  0012               	return	
  3111  001944  0012               	return	
  3112  001946                     l2571:
  3113                           
  3114                           ;unmc_lcd_216.c: 151: lcd_send_byte(0, LCD_INIT_STRING[i]);
  3115  001946  5005               	movf	lcd_init@i,w,c
  3116  001948  0D01               	mullw	1
  3117  00194A  0E0B               	movlw	low _LCD_INIT_STRING
  3118  00194C  24F3               	addwf	prodl,w,c
  3119  00194E  6EF6               	movwf	tblptrl,c
  3120  001950  0E0F               	movlw	high _LCD_INIT_STRING
  3121  001952  20F4               	addwfc	prodh,w,c
  3122  001954  6EF7               	movwf	tblptrh,c
  3123  001956                     	if	0	;There are less than 3 active tblptr bytes
  3124  001956                     	endif
  3125  001956  0008               	tblrd		*
  3126  001958  CFF5 F003          	movff	tablat,lcd_send_byte@n
  3127  00195C  0E00               	movlw	0
  3128  00195E  EC84  F00E         	call	_lcd_send_byte
  3129                           
  3130                           ;unmc_lcd_216.c: 153: Delay1KTCYx(8000000UL/800000UL);
  3131  001962  0E0A               	movlw	10
  3132  001964  ECDF  F00E         	call	_Delay1KTCYx
  3133  001968  2A05               	incf	lcd_init@i,f,c
  3134  00196A  0E03               	movlw	3
  3135  00196C  6405               	cpfsgt	lcd_init@i,c
  3136  00196E  D7EB               	goto	l2571
  3137  001970  0012               	return	
  3138  001972  0012               	return		;funcret
  3139  001974                     __end_of_lcd_init:
  3140                           	opt stack 0
  3141                           tblptru	equ	0xFF8
  3142                           tblptrh	equ	0xFF7
  3143                           tblptrl	equ	0xFF6
  3144                           tablat	equ	0xFF5
  3145                           prodh	equ	0xFF4
  3146                           prodl	equ	0xFF3
  3147                           indf0	equ	0xFEF
  3148                           postinc0	equ	0xFEE
  3149                           fsr0h	equ	0xFEA
  3150                           fsr0l	equ	0xFE9
  3151                           wreg	equ	0xFE8
  3152                           postdec1	equ	0xFE5
  3153                           fsr1l	equ	0xFE1
  3154                           indf2	equ	0xFDF
  3155                           postinc2	equ	0xFDE
  3156                           postdec2	equ	0xFDD
  3157                           fsr2h	equ	0xFDA
  3158                           fsr2l	equ	0xFD9
  3159                           status	equ	0xFD8
  3160                           
  3161 ;; *************** function _Delay1KTCYx *****************
  3162 ;; Defined at:
  3163 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\d1ktcyx.c"
  3164 ;; Parameters:    Size  Location     Type
  3165 ;;  unit            1    wreg     unsigned char 
  3166 ;; Auto vars:     Size  Location     Type
  3167 ;;  unit            1    0[COMRAM] unsigned char 
  3168 ;; Return value:  Size  Location     Type
  3169 ;;		None               void
  3170 ;; Registers used:
  3171 ;;		wreg
  3172 ;; Tracked objects:
  3173 ;;		On entry : 0/0
  3174 ;;		On exit  : 0/0
  3175 ;;		Unchanged: 0/0
  3176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3178 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3180 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3181 ;;Total ram usage:        1 bytes
  3182 ;; Hardware stack levels used:    1
  3183 ;; This function calls:
  3184 ;;		Nothing
  3185 ;; This function is called by:
  3186 ;;		_lcd_init
  3187 ;;		_DelayPORXLCD
  3188 ;; This function uses a non-reentrant model
  3189 ;;
  3190                           
  3191                           	psect	text16
  3192  001DBE                     __ptext16:
  3193                           	opt stack 0
  3194  001DBE                     _Delay1KTCYx:
  3195                           	opt stack 28
  3196                           
  3197                           ;incstack = 0
  3198                           ;Delay1KTCYx@unit stored from wreg
  3199  001DBE  6E01               	movwf	Delay1KTCYx@unit,c
  3200  001DC0  0EFA               	movlw	250
  3201  001DC2                     u2347:
  3202  001DC2  F000               	nop	
  3203  001DC4  2EE8               	decfsz	wreg,f,c
  3204  001DC6  D7FD               	goto	u2347
  3205  001DC8  2E01               	decfsz	Delay1KTCYx@unit,f,c
  3206  001DCA  D7FA               	goto	l1461
  3207  001DCC  0012               	return	
  3208  001DCE  0012               	return		;funcret
  3209  001DD0                     __end_of_Delay1KTCYx:
  3210                           	opt stack 0
  3211                           tblptru	equ	0xFF8
  3212                           tblptrh	equ	0xFF7
  3213                           tblptrl	equ	0xFF6
  3214                           tablat	equ	0xFF5
  3215                           prodh	equ	0xFF4
  3216                           prodl	equ	0xFF3
  3217                           indf0	equ	0xFEF
  3218                           postinc0	equ	0xFEE
  3219                           fsr0h	equ	0xFEA
  3220                           fsr0l	equ	0xFE9
  3221                           wreg	equ	0xFE8
  3222                           postdec1	equ	0xFE5
  3223                           fsr1l	equ	0xFE1
  3224                           indf2	equ	0xFDF
  3225                           postinc2	equ	0xFDE
  3226                           postdec2	equ	0xFDD
  3227                           fsr2h	equ	0xFDA
  3228                           fsr2l	equ	0xFD9
  3229                           status	equ	0xFD8
  3230                           
  3231 ;; *************** function _lcd_comand *****************
  3232 ;; Defined at:
  3233 ;;		line 189 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3234 ;; Parameters:    Size  Location     Type
  3235 ;;  d               1    wreg     unsigned char 
  3236 ;; Auto vars:     Size  Location     Type
  3237 ;;  d               1    4[COMRAM] unsigned char 
  3238 ;; Return value:  Size  Location     Type
  3239 ;;		None               void
  3240 ;; Registers used:
  3241 ;;		wreg, status,2, status,0, cstack
  3242 ;; Tracked objects:
  3243 ;;		On entry : 0/0
  3244 ;;		On exit  : 0/0
  3245 ;;		Unchanged: 0/0
  3246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3248 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3250 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3251 ;;Total ram usage:        1 bytes
  3252 ;; Hardware stack levels used:    1
  3253 ;; Hardware stack levels required when called:    2
  3254 ;; This function calls:
  3255 ;;		_lcd_send_byte
  3256 ;; This function is called by:
  3257 ;;		_caratula
  3258 ;;		_Setup
  3259 ;;		_clear
  3260 ;; This function uses a non-reentrant model
  3261 ;;
  3262                           
  3263                           	psect	text17
  3264  001DF4                     __ptext17:
  3265                           	opt stack 0
  3266  001DF4                     _lcd_comand:
  3267                           	opt stack 26
  3268                           
  3269                           ;incstack = 0
  3270                           ;lcd_comand@d stored from wreg
  3271  001DF4  6E05               	movwf	lcd_comand@d,c
  3272                           
  3273                           ;unmc_lcd_216.c: 190: lcd_send_byte(0,d);
  3274  001DF6  C005  F003         	movff	lcd_comand@d,lcd_send_byte@n
  3275  001DFA  0E00               	movlw	0
  3276  001DFC  EC84  F00E         	call	_lcd_send_byte
  3277  001E00  0012               	return		;funcret
  3278  001E02                     __end_of_lcd_comand:
  3279                           	opt stack 0
  3280                           tblptru	equ	0xFF8
  3281                           tblptrh	equ	0xFF7
  3282                           tblptrl	equ	0xFF6
  3283                           tablat	equ	0xFF5
  3284                           prodh	equ	0xFF4
  3285                           prodl	equ	0xFF3
  3286                           indf0	equ	0xFEF
  3287                           postinc0	equ	0xFEE
  3288                           fsr0h	equ	0xFEA
  3289                           fsr0l	equ	0xFE9
  3290                           wreg	equ	0xFE8
  3291                           postdec1	equ	0xFE5
  3292                           fsr1l	equ	0xFE1
  3293                           indf2	equ	0xFDF
  3294                           postinc2	equ	0xFDE
  3295                           postdec2	equ	0xFDD
  3296                           fsr2h	equ	0xFDA
  3297                           fsr2l	equ	0xFD9
  3298                           status	equ	0xFD8
  3299                           
  3300 ;; *************** function _lcd_send_byte *****************
  3301 ;; Defined at:
  3302 ;;		line 86 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3303 ;; Parameters:    Size  Location     Type
  3304 ;;  address         1    wreg     unsigned char 
  3305 ;;  n               1    2[COMRAM] unsigned char 
  3306 ;; Auto vars:     Size  Location     Type
  3307 ;;  address         1    3[COMRAM] unsigned char 
  3308 ;; Return value:  Size  Location     Type
  3309 ;;		None               void
  3310 ;; Registers used:
  3311 ;;		wreg, status,2, status,0, cstack
  3312 ;; Tracked objects:
  3313 ;;		On entry : 0/0
  3314 ;;		On exit  : 0/0
  3315 ;;		Unchanged: 0/0
  3316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3317 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3318 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3320 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3321 ;;Total ram usage:        2 bytes
  3322 ;; Hardware stack levels used:    1
  3323 ;; Hardware stack levels required when called:    1
  3324 ;; This function calls:
  3325 ;;		_Delay100TCYx
  3326 ;;		_lcd_send_nibble
  3327 ;; This function is called by:
  3328 ;;		_lcd_init
  3329 ;;		_lcd_gotoxy
  3330 ;;		_lcd_putc
  3331 ;;		_lcd_comand
  3332 ;;		_lcd_setcursor_vb
  3333 ;; This function uses a non-reentrant model
  3334 ;;
  3335                           
  3336                           	psect	text18
  3337  001D08                     __ptext18:
  3338                           	opt stack 0
  3339  001D08                     _lcd_send_byte:
  3340                           	opt stack 25
  3341                           
  3342                           ;incstack = 0
  3343                           ;lcd_send_byte@address stored from wreg
  3344  001D08  6E04               	movwf	lcd_send_byte@address,c
  3345                           
  3346                           ;unmc_lcd_216.c: 88: LATBbits.LATB3=0;
  3347  001D0A  968A               	bcf	3978,3,c	;volatile
  3348                           
  3349                           ;unmc_lcd_216.c: 93: Delay100TCYx(8000000UL/4000000UL);
  3350  001D0C  0E02               	movlw	2
  3351  001D0E  ECE8  F00E         	call	_Delay100TCYx
  3352                           
  3353                           ;unmc_lcd_216.c: 96: TRISBbits.TRISB4=0;
  3354  001D12  9893               	bcf	3987,4,c	;volatile
  3355                           
  3356                           ;unmc_lcd_216.c: 97: TRISBbits.TRISB5=0;
  3357  001D14  9A93               	bcf	3987,5,c	;volatile
  3358                           
  3359                           ;unmc_lcd_216.c: 98: TRISBbits.TRISB6=0;
  3360  001D16  9C93               	bcf	3987,6,c	;volatile
  3361                           
  3362                           ;unmc_lcd_216.c: 99: TRISBbits.TRISB7=0;
  3363  001D18  9E93               	bcf	3987,7,c	;volatile
  3364                           
  3365                           ;unmc_lcd_216.c: 101: if(address)
  3366  001D1A  5004               	movf	lcd_send_byte@address,w,c
  3367  001D1C  B4D8               	btfsc	status,2,c
  3368  001D1E  D002               	goto	l75
  3369                           
  3370                           ;unmc_lcd_216.c: 102: LATBbits.LATB3=1;
  3371  001D20  868A               	bsf	3978,3,c	;volatile
  3372  001D22  D001               	goto	l76
  3373  001D24                     l75:
  3374                           
  3375                           ;unmc_lcd_216.c: 103: else
  3376                           ;unmc_lcd_216.c: 104: LATBbits.LATB3=0;
  3377  001D24  968A               	bcf	3978,3,c	;volatile
  3378  001D26                     l76:
  3379                           
  3380                           ;unmc_lcd_216.c: 106: __nop();
  3381  001D26  F000               	nop	
  3382                           
  3383                           ;unmc_lcd_216.c: 113: lcd_send_nibble(n >> 4);
  3384  001D28  3803               	swapf	lcd_send_byte@n,w,c
  3385  001D2A  0B0F               	andlw	15
  3386  001D2C  EC37  F00D         	call	_lcd_send_nibble
  3387                           
  3388                           ;unmc_lcd_216.c: 114: lcd_send_nibble(n & 0xf);
  3389  001D30  5003               	movf	lcd_send_byte@n,w,c
  3390  001D32  0B0F               	andlw	15
  3391  001D34  EC37  F00D         	call	_lcd_send_nibble
  3392  001D38  0012               	return		;funcret
  3393  001D3A                     __end_of_lcd_send_byte:
  3394                           	opt stack 0
  3395                           tblptru	equ	0xFF8
  3396                           tblptrh	equ	0xFF7
  3397                           tblptrl	equ	0xFF6
  3398                           tablat	equ	0xFF5
  3399                           prodh	equ	0xFF4
  3400                           prodl	equ	0xFF3
  3401                           indf0	equ	0xFEF
  3402                           postinc0	equ	0xFEE
  3403                           fsr0h	equ	0xFEA
  3404                           fsr0l	equ	0xFE9
  3405                           wreg	equ	0xFE8
  3406                           postdec1	equ	0xFE5
  3407                           fsr1l	equ	0xFE1
  3408                           indf2	equ	0xFDF
  3409                           postinc2	equ	0xFDE
  3410                           postdec2	equ	0xFDD
  3411                           fsr2h	equ	0xFDA
  3412                           fsr2l	equ	0xFD9
  3413                           status	equ	0xFD8
  3414                           
  3415 ;; *************** function _lcd_send_nibble *****************
  3416 ;; Defined at:
  3417 ;;		line 25 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3418 ;; Parameters:    Size  Location     Type
  3419 ;;  nibble          1    wreg     unsigned char 
  3420 ;; Auto vars:     Size  Location     Type
  3421 ;;  nibble          1    1[COMRAM] unsigned char 
  3422 ;; Return value:  Size  Location     Type
  3423 ;;		None               void
  3424 ;; Registers used:
  3425 ;;		wreg, status,2, status,0
  3426 ;; Tracked objects:
  3427 ;;		On entry : 0/0
  3428 ;;		On exit  : 0/0
  3429 ;;		Unchanged: 0/0
  3430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3432 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3433 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3434 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3435 ;;Total ram usage:        2 bytes
  3436 ;; Hardware stack levels used:    1
  3437 ;; This function calls:
  3438 ;;		Nothing
  3439 ;; This function is called by:
  3440 ;;		_lcd_send_byte
  3441 ;;		_lcd_init
  3442 ;; This function uses a non-reentrant model
  3443 ;;
  3444                           
  3445                           	psect	text19
  3446  001A6E                     __ptext19:
  3447                           	opt stack 0
  3448  001A6E                     _lcd_send_nibble:
  3449                           	opt stack 25
  3450                           
  3451                           ;incstack = 0
  3452                           ;lcd_send_nibble@nibble stored from wreg
  3453  001A6E  6E02               	movwf	lcd_send_nibble@nibble,c
  3454                           
  3455                           ;unmc_lcd_216.c: 27: LATBbits.LATB4=!!(nibble & 0x01);
  3456  001A70  A002               	btfss	lcd_send_nibble@nibble,0,c
  3457  001A72  D003               	goto	u1160
  3458  001A74  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3459  001A76  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  3460  001A78  D001               	goto	u1178
  3461  001A7A                     u1160:
  3462  001A7A  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3463  001A7C                     u1178:
  3464  001A7C  3A01               	swapf	??_lcd_send_nibble,f,c
  3465  001A7E  508A               	movf	3978,w,c	;volatile
  3466  001A80  1801               	xorwf	??_lcd_send_nibble,w,c
  3467  001A82  0BEF               	andlw	-17
  3468  001A84  1801               	xorwf	??_lcd_send_nibble,w,c
  3469  001A86  6E8A               	movwf	3978,c	;volatile
  3470                           
  3471                           ;unmc_lcd_216.c: 28: LATBbits.LATB5=!!(nibble & 0x02);
  3472  001A88  A202               	btfss	lcd_send_nibble@nibble,1,c
  3473  001A8A  D003               	goto	u1180
  3474  001A8C  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3475  001A8E  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  3476  001A90  D001               	goto	u1198
  3477  001A92                     u1180:
  3478  001A92  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3479  001A94                     u1198:
  3480  001A94  3A01               	swapf	??_lcd_send_nibble,f,c
  3481  001A96  4601               	rlncf	??_lcd_send_nibble,f,c
  3482  001A98  508A               	movf	3978,w,c	;volatile
  3483  001A9A  1801               	xorwf	??_lcd_send_nibble,w,c
  3484  001A9C  0BDF               	andlw	-33
  3485  001A9E  1801               	xorwf	??_lcd_send_nibble,w,c
  3486  001AA0  6E8A               	movwf	3978,c	;volatile
  3487                           
  3488                           ;unmc_lcd_216.c: 29: LATBbits.LATB6=!!(nibble & 0x04);
  3489  001AA2  A402               	btfss	lcd_send_nibble@nibble,2,c
  3490  001AA4  D003               	goto	u1200
  3491  001AA6  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3492  001AA8  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  3493  001AAA  D001               	goto	u1218
  3494  001AAC                     u1200:
  3495  001AAC  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3496  001AAE                     u1218:
  3497  001AAE  3A01               	swapf	??_lcd_send_nibble,f,c
  3498  001AB0  4601               	rlncf	??_lcd_send_nibble,f,c
  3499  001AB2  4601               	rlncf	??_lcd_send_nibble,f,c
  3500  001AB4  508A               	movf	3978,w,c	;volatile
  3501  001AB6  1801               	xorwf	??_lcd_send_nibble,w,c
  3502  001AB8  0BBF               	andlw	-65
  3503  001ABA  1801               	xorwf	??_lcd_send_nibble,w,c
  3504  001ABC  6E8A               	movwf	3978,c	;volatile
  3505                           
  3506                           ;unmc_lcd_216.c: 30: LATBbits.LATB7=!!(nibble & 0x08);
  3507  001ABE  A602               	btfss	lcd_send_nibble@nibble,3,c
  3508  001AC0  D003               	goto	u1220
  3509  001AC2  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3510  001AC4  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  3511  001AC6  D001               	goto	u1238
  3512  001AC8                     u1220:
  3513  001AC8  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3514  001ACA                     u1238:
  3515  001ACA  3201               	rrcf	??_lcd_send_nibble,f,c
  3516  001ACC  3201               	rrcf	??_lcd_send_nibble,f,c
  3517  001ACE  508A               	movf	3978,w,c	;volatile
  3518  001AD0  1801               	xorwf	??_lcd_send_nibble,w,c
  3519  001AD2  0B7F               	andlw	-129
  3520  001AD4  1801               	xorwf	??_lcd_send_nibble,w,c
  3521  001AD6  6E8A               	movwf	3978,c	;volatile
  3522                           
  3523                           ;unmc_lcd_216.c: 32: __nop();
  3524  001AD8  F000               	nop	
  3525                           
  3526                           ;unmc_lcd_216.c: 33: LATBbits.LATB2=1;
  3527  001ADA  848A               	bsf	3978,2,c	;volatile
  3528                           
  3529                           ;unmc_lcd_216.c: 34: __nop();__nop();
  3530  001ADC  F000               	nop	
  3531  001ADE  F000               	nop	
  3532                           
  3533                           ;unmc_lcd_216.c: 35: LATBbits.LATB2=0;
  3534  001AE0  948A               	bcf	3978,2,c	;volatile
  3535  001AE2  0012               	return		;funcret
  3536  001AE4                     __end_of_lcd_send_nibble:
  3537                           	opt stack 0
  3538                           tblptru	equ	0xFF8
  3539                           tblptrh	equ	0xFF7
  3540                           tblptrl	equ	0xFF6
  3541                           tablat	equ	0xFF5
  3542                           prodh	equ	0xFF4
  3543                           prodl	equ	0xFF3
  3544                           indf0	equ	0xFEF
  3545                           postinc0	equ	0xFEE
  3546                           fsr0h	equ	0xFEA
  3547                           fsr0l	equ	0xFE9
  3548                           wreg	equ	0xFE8
  3549                           postdec1	equ	0xFE5
  3550                           fsr1l	equ	0xFE1
  3551                           indf2	equ	0xFDF
  3552                           postinc2	equ	0xFDE
  3553                           postdec2	equ	0xFDD
  3554                           fsr2h	equ	0xFDA
  3555                           fsr2l	equ	0xFD9
  3556                           status	equ	0xFD8
  3557                           
  3558 ;; *************** function _Delay100TCYx *****************
  3559 ;; Defined at:
  3560 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\d100tcyx.c"
  3561 ;; Parameters:    Size  Location     Type
  3562 ;;  unit            1    wreg     unsigned char 
  3563 ;; Auto vars:     Size  Location     Type
  3564 ;;  unit            1    0[COMRAM] unsigned char 
  3565 ;; Return value:  Size  Location     Type
  3566 ;;		None               void
  3567 ;; Registers used:
  3568 ;;		wreg
  3569 ;; Tracked objects:
  3570 ;;		On entry : 0/0
  3571 ;;		On exit  : 0/0
  3572 ;;		Unchanged: 0/0
  3573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3575 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3577 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3578 ;;Total ram usage:        1 bytes
  3579 ;; Hardware stack levels used:    1
  3580 ;; This function calls:
  3581 ;;		Nothing
  3582 ;; This function is called by:
  3583 ;;		_lcd_send_byte
  3584 ;; This function uses a non-reentrant model
  3585 ;;
  3586                           
  3587                           	psect	text20
  3588  001DD0                     __ptext20:
  3589                           	opt stack 0
  3590  001DD0                     _Delay100TCYx:
  3591                           	opt stack 25
  3592                           
  3593                           ;incstack = 0
  3594                           ;Delay100TCYx@unit stored from wreg
  3595  001DD0  6E01               	movwf	Delay100TCYx@unit,c
  3596  001DD2  0E21               	movlw	33
  3597  001DD4                     u2357:
  3598  001DD4  2EE8               	decfsz	wreg,f,c
  3599  001DD6  D7FE               	goto	u2357
  3600  001DD8  F000               	nop	
  3601  001DDA  2E01               	decfsz	Delay100TCYx@unit,f,c
  3602  001DDC  D7FA               	goto	l2115
  3603  001DDE  0012               	return	
  3604  001DE0  0012               	return		;funcret
  3605  001DE2                     __end_of_Delay100TCYx:
  3606                           	opt stack 0
  3607                           tblptru	equ	0xFF8
  3608                           tblptrh	equ	0xFF7
  3609                           tblptrl	equ	0xFF6
  3610                           tablat	equ	0xFF5
  3611                           prodh	equ	0xFF4
  3612                           prodl	equ	0xFF3
  3613                           indf0	equ	0xFEF
  3614                           postinc0	equ	0xFEE
  3615                           fsr0h	equ	0xFEA
  3616                           fsr0l	equ	0xFE9
  3617                           wreg	equ	0xFE8
  3618                           postdec1	equ	0xFE5
  3619                           fsr1l	equ	0xFE1
  3620                           indf2	equ	0xFDF
  3621                           postinc2	equ	0xFDE
  3622                           postdec2	equ	0xFDD
  3623                           fsr2h	equ	0xFDA
  3624                           fsr2l	equ	0xFD9
  3625                           status	equ	0xFD8
  3626                           
  3627 ;; *************** function _Write_RTC *****************
  3628 ;; Defined at:
  3629 ;;		line 22 in file "../../Program Files/Unimic/unmc_01/sources/unmc_rtcc_01.c"
  3630 ;; Parameters:    Size  Location     Type
  3631 ;;		None
  3632 ;; Auto vars:     Size  Location     Type
  3633 ;;		None
  3634 ;; Return value:  Size  Location     Type
  3635 ;;                  2   26[None  ] int 
  3636 ;; Registers used:
  3637 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3638 ;; Tracked objects:
  3639 ;;		On entry : 0/0
  3640 ;;		On exit  : 0/0
  3641 ;;		Unchanged: 0/0
  3642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3646 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3647 ;;Total ram usage:        0 bytes
  3648 ;; Hardware stack levels used:    1
  3649 ;; Hardware stack levels required when called:    2
  3650 ;; This function calls:
  3651 ;;		_RtccWrOn
  3652 ;;		_RtccWriteDate
  3653 ;;		_RtccWriteTime
  3654 ;;		___awdiv
  3655 ;; This function is called by:
  3656 ;;		_Setup
  3657 ;;		_setClock
  3658 ;; This function uses a non-reentrant model
  3659 ;;
  3660                           
  3661                           	psect	text21
  3662  0014C4                     __ptext21:
  3663                           	opt stack 0
  3664  0014C4                     _Write_RTC:
  3665                           	opt stack 27
  3666                           
  3667                           ;unmc_rtcc_01.c: 24: RtccWrOn();
  3668                           
  3669                           ;incstack = 0
  3670  0014C4  ECF1  F00E         	call	_RtccWrOn	;wreg free
  3671                           
  3672                           ;unmc_rtcc_01.c: 26: PIE3bits.RTCCIE=1;
  3673  0014C8  80A3               	bsf	4003,0,c	;volatile
  3674                           
  3675                           ;unmc_rtcc_01.c: 27: segundo_d=segundo/10;
  3676  0014CA  C037  F001         	movff	_segundo,___awdiv@dividend
  3677  0014CE  C038  F002         	movff	_segundo+1,___awdiv@dividend+1
  3678  0014D2  0E00               	movlw	0
  3679  0014D4  6E04               	movwf	___awdiv@divisor+1,c
  3680  0014D6  0E0A               	movlw	10
  3681  0014D8  6E03               	movwf	___awdiv@divisor,c
  3682  0014DA  EC2F  F00C         	call	___awdiv	;wreg free
  3683  0014DE  5001               	movf	?___awdiv,w,c
  3684  0014E0  6E4D               	movwf	_segundo_d,c
  3685                           
  3686                           ;unmc_rtcc_01.c: 28: segundo_u=segundo-segundo_d*10;
  3687  0014E2  504D               	movf	_segundo_d,w,c
  3688  0014E4  0D0A               	mullw	10
  3689  0014E6  50F3               	movf	prodl,w,c
  3690  0014E8  0800               	sublw	0
  3691  0014EA  2437               	addwf	_segundo,w,c
  3692  0014EC  6E4E               	movwf	_segundo_u,c
  3693                           
  3694                           ;unmc_rtcc_01.c: 29: RtccTime.f.sec =segundo_d*16+segundo_u;
  3695  0014EE  504D               	movf	_segundo_d,w,c
  3696  0014F0  0D10               	mullw	16
  3697  0014F2  50F3               	movf	prodl,w,c
  3698  0014F4  244E               	addwf	_segundo_u,w,c
  3699  0014F6  6E3F               	movwf	_RtccTime+1,c
  3700                           
  3701                           ;unmc_rtcc_01.c: 30: minuto_d=minuto/10;
  3702  0014F8  C059  F001         	movff	_minuto,___awdiv@dividend
  3703  0014FC  C05A  F002         	movff	_minuto+1,___awdiv@dividend+1
  3704  001500  0E00               	movlw	0
  3705  001502  6E04               	movwf	___awdiv@divisor+1,c
  3706  001504  0E0A               	movlw	10
  3707  001506  6E03               	movwf	___awdiv@divisor,c
  3708  001508  EC2F  F00C         	call	___awdiv	;wreg free
  3709  00150C  5001               	movf	?___awdiv,w,c
  3710  00150E  6E4B               	movwf	_minuto_d,c
  3711                           
  3712                           ;unmc_rtcc_01.c: 31: minuto_u=minuto-minuto_d*10;
  3713  001510  504B               	movf	_minuto_d,w,c
  3714  001512  0D0A               	mullw	10
  3715  001514  50F3               	movf	prodl,w,c
  3716  001516  0800               	sublw	0
  3717  001518  2459               	addwf	_minuto,w,c
  3718  00151A  6E4C               	movwf	_minuto_u,c
  3719                           
  3720                           ;unmc_rtcc_01.c: 32: RtccTime.f.min =minuto_d*16+minuto_u;
  3721  00151C  504B               	movf	_minuto_d,w,c
  3722  00151E  0D10               	mullw	16
  3723  001520  50F3               	movf	prodl,w,c
  3724  001522  244C               	addwf	_minuto_u,w,c
  3725  001524  6E40               	movwf	_RtccTime+2,c
  3726                           
  3727                           ;unmc_rtcc_01.c: 33: hora_d=hora/10;
  3728  001526  C055  F001         	movff	_hora,___awdiv@dividend
  3729  00152A  C056  F002         	movff	_hora+1,___awdiv@dividend+1
  3730  00152E  0E00               	movlw	0
  3731  001530  6E04               	movwf	___awdiv@divisor+1,c
  3732  001532  0E0A               	movlw	10
  3733  001534  6E03               	movwf	___awdiv@divisor,c
  3734  001536  EC2F  F00C         	call	___awdiv	;wreg free
  3735  00153A  5001               	movf	?___awdiv,w,c
  3736  00153C  6E47               	movwf	_hora_d,c
  3737                           
  3738                           ;unmc_rtcc_01.c: 34: hora_u=hora-hora_d*10;
  3739  00153E  5047               	movf	_hora_d,w,c
  3740  001540  0D0A               	mullw	10
  3741  001542  50F3               	movf	prodl,w,c
  3742  001544  0800               	sublw	0
  3743  001546  2455               	addwf	_hora,w,c
  3744  001548  6E48               	movwf	_hora_u,c
  3745                           
  3746                           ;unmc_rtcc_01.c: 35: RtccTime.f.hour=hora_d*16+hora_u;
  3747  00154A  5047               	movf	_hora_d,w,c
  3748  00154C  0D10               	mullw	16
  3749  00154E  50F3               	movf	prodl,w,c
  3750  001550  2448               	addwf	_hora_u,w,c
  3751  001552  6E41               	movwf	_RtccTime+3,c
  3752                           
  3753                           ;unmc_rtcc_01.c: 36: anio_d=anio/10;
  3754  001554  C04F  F001         	movff	_anio,___awdiv@dividend
  3755  001558  C050  F002         	movff	_anio+1,___awdiv@dividend+1
  3756  00155C  0E00               	movlw	0
  3757  00155E  6E04               	movwf	___awdiv@divisor+1,c
  3758  001560  0E0A               	movlw	10
  3759  001562  6E03               	movwf	___awdiv@divisor,c
  3760  001564  EC2F  F00C         	call	___awdiv	;wreg free
  3761  001568  5001               	movf	?___awdiv,w,c
  3762  00156A  6E42               	movwf	_anio_d,c
  3763                           
  3764                           ;unmc_rtcc_01.c: 37: anio_u=anio-anio_d*10;
  3765  00156C  5042               	movf	_anio_d,w,c
  3766  00156E  0D0A               	mullw	10
  3767  001570  50F3               	movf	prodl,w,c
  3768  001572  0800               	sublw	0
  3769  001574  244F               	addwf	_anio,w,c
  3770  001576  6E43               	movwf	_anio_u,c
  3771                           
  3772                           ;unmc_rtcc_01.c: 38: RtccDate.f.year=anio_d*16+anio_u;
  3773  001578  5042               	movf	_anio_d,w,c
  3774  00157A  0D10               	mullw	16
  3775  00157C  50F3               	movf	prodl,w,c
  3776  00157E  2443               	addwf	_anio_u,w,c
  3777  001580  6E3D               	movwf	_RtccDate+3,c
  3778                           
  3779                           ;unmc_rtcc_01.c: 39: mes_d=mes/10;
  3780  001582  C057  F001         	movff	_mes,___awdiv@dividend
  3781  001586  C058  F002         	movff	_mes+1,___awdiv@dividend+1
  3782  00158A  0E00               	movlw	0
  3783  00158C  6E04               	movwf	___awdiv@divisor+1,c
  3784  00158E  0E0A               	movlw	10
  3785  001590  6E03               	movwf	___awdiv@divisor,c
  3786  001592  EC2F  F00C         	call	___awdiv	;wreg free
  3787  001596  5001               	movf	?___awdiv,w,c
  3788  001598  6E49               	movwf	_mes_d,c
  3789                           
  3790                           ;unmc_rtcc_01.c: 40: mes_u=mes-mes_d*10;
  3791  00159A  5049               	movf	_mes_d,w,c
  3792  00159C  0D0A               	mullw	10
  3793  00159E  50F3               	movf	prodl,w,c
  3794  0015A0  0800               	sublw	0
  3795  0015A2  2457               	addwf	_mes,w,c
  3796  0015A4  6E4A               	movwf	_mes_u,c
  3797                           
  3798                           ;unmc_rtcc_01.c: 41: RtccDate.f.mon=mes_d*16+mes_u;
  3799  0015A6  5049               	movf	_mes_d,w,c
  3800  0015A8  0D10               	mullw	16
  3801  0015AA  50F3               	movf	prodl,w,c
  3802  0015AC  244A               	addwf	_mes_u,w,c
  3803  0015AE  6E3C               	movwf	_RtccDate+2,c
  3804                           
  3805                           ;unmc_rtcc_01.c: 42: fecha_d=dia/10;
  3806  0015B0  C051  F001         	movff	_dia,___awdiv@dividend
  3807  0015B4  C052  F002         	movff	_dia+1,___awdiv@dividend+1
  3808  0015B8  0E00               	movlw	0
  3809  0015BA  6E04               	movwf	___awdiv@divisor+1,c
  3810  0015BC  0E0A               	movlw	10
  3811  0015BE  6E03               	movwf	___awdiv@divisor,c
  3812  0015C0  EC2F  F00C         	call	___awdiv	;wreg free
  3813  0015C4  5001               	movf	?___awdiv,w,c
  3814  0015C6  6E45               	movwf	_fecha_d,c
  3815                           
  3816                           ;unmc_rtcc_01.c: 43: fecha_u=dia-fecha_d*10;
  3817  0015C8  5045               	movf	_fecha_d,w,c
  3818  0015CA  0D0A               	mullw	10
  3819  0015CC  50F3               	movf	prodl,w,c
  3820  0015CE  0800               	sublw	0
  3821  0015D0  2451               	addwf	_dia,w,c
  3822  0015D2  6E46               	movwf	_fecha_u,c
  3823                           
  3824                           ;unmc_rtcc_01.c: 44: RtccDate.f.mday=fecha_d*16+fecha_u;
  3825  0015D4  5045               	movf	_fecha_d,w,c
  3826  0015D6  0D10               	mullw	16
  3827  0015D8  50F3               	movf	prodl,w,c
  3828  0015DA  2446               	addwf	_fecha_u,w,c
  3829  0015DC  6E3B               	movwf	_RtccDate+1,c
  3830                           
  3831                           ;unmc_rtcc_01.c: 45: dia_semana=diasem;
  3832  0015DE  C053  F044         	movff	_diasem,_dia_semana
  3833                           
  3834                           ;unmc_rtcc_01.c: 46: RtccDate.f.wday =diasem;
  3835  0015E2  C053  F03A         	movff	_diasem,_RtccDate
  3836                           
  3837                           ;unmc_rtcc_01.c: 47: RtccWriteTime(&RtccTime,1);
  3838  0015E6  0E3E               	movlw	low _RtccTime
  3839  0015E8  6E01               	movwf	RtccWriteTime@pTm,c
  3840  0015EA  0E00               	movlw	high _RtccTime
  3841  0015EC  6E02               	movwf	RtccWriteTime@pTm+1,c
  3842  0015EE  0E01               	movlw	1
  3843  0015F0  6E03               	movwf	RtccWriteTime@di,c
  3844  0015F2  ECA9  F00B         	call	_RtccWriteTime	;wreg free
  3845                           
  3846                           ;unmc_rtcc_01.c: 48: RtccWriteDate(&RtccDate,1);
  3847  0015F6  0E3A               	movlw	low _RtccDate
  3848  0015F8  6E01               	movwf	RtccWriteDate@pDt,c
  3849  0015FA  0E00               	movlw	high _RtccDate
  3850  0015FC  6E02               	movwf	RtccWriteDate@pDt+1,c
  3851  0015FE  0E01               	movlw	1
  3852  001600  6E03               	movwf	RtccWriteDate@di,c
  3853  001602  EC06  F00B         	call	_RtccWriteDate	;wreg free
  3854                           
  3855                           ;unmc_rtcc_01.c: 49: (RTCCFGbits.RTCEN=1);
  3856  001606  010F               	movlb	15	; () banked
  3857  001608  8F3F               	bsf	63,7,b	;volatile
  3858                           
  3859                           ; BSR set to: 15
  3860  00160A  0012               	return		;funcret
  3861  00160C                     __end_of_Write_RTC:
  3862                           	opt stack 0
  3863                           tblptru	equ	0xFF8
  3864                           tblptrh	equ	0xFF7
  3865                           tblptrl	equ	0xFF6
  3866                           tablat	equ	0xFF5
  3867                           prodh	equ	0xFF4
  3868                           prodl	equ	0xFF3
  3869                           indf0	equ	0xFEF
  3870                           postinc0	equ	0xFEE
  3871                           fsr0h	equ	0xFEA
  3872                           fsr0l	equ	0xFE9
  3873                           wreg	equ	0xFE8
  3874                           postdec1	equ	0xFE5
  3875                           fsr1l	equ	0xFE1
  3876                           indf2	equ	0xFDF
  3877                           postinc2	equ	0xFDE
  3878                           postdec2	equ	0xFDD
  3879                           fsr2h	equ	0xFDA
  3880                           fsr2l	equ	0xFD9
  3881                           status	equ	0xFD8
  3882                           
  3883 ;; *************** function ___awdiv *****************
  3884 ;; Defined at:
  3885 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\awdiv.c"
  3886 ;; Parameters:    Size  Location     Type
  3887 ;;  dividend        2    0[COMRAM] int 
  3888 ;;  divisor         2    2[COMRAM] int 
  3889 ;; Auto vars:     Size  Location     Type
  3890 ;;  quotient        2    6[COMRAM] int 
  3891 ;;  sign            1    5[COMRAM] unsigned char 
  3892 ;;  counter         1    4[COMRAM] unsigned char 
  3893 ;; Return value:  Size  Location     Type
  3894 ;;                  2    0[COMRAM] int 
  3895 ;; Registers used:
  3896 ;;		wreg, status,2, status,0
  3897 ;; Tracked objects:
  3898 ;;		On entry : 0/0
  3899 ;;		On exit  : 0/0
  3900 ;;		Unchanged: 0/0
  3901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3902 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3903 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3905 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3906 ;;Total ram usage:        8 bytes
  3907 ;; Hardware stack levels used:    1
  3908 ;; This function calls:
  3909 ;;		Nothing
  3910 ;; This function is called by:
  3911 ;;		_Write_RTC
  3912 ;; This function uses a non-reentrant model
  3913 ;;
  3914                           
  3915                           	psect	text22
  3916  00185E                     __ptext22:
  3917                           	opt stack 0
  3918  00185E                     ___awdiv:
  3919                           	opt stack 28
  3920                           
  3921                           ; BSR set to: 15
  3922                           ;incstack = 0
  3923  00185E  0E00               	movlw	0
  3924  001860  6E06               	movwf	___awdiv@sign,c
  3925  001862  AE04               	btfss	___awdiv@divisor+1,7,c
  3926  001864  D007               	goto	l2461
  3927  001866  6C03               	negf	___awdiv@divisor,c
  3928  001868  1E04               	comf	___awdiv@divisor+1,f,c
  3929  00186A  B0D8               	btfsc	status,0,c
  3930  00186C  2A04               	incf	___awdiv@divisor+1,f,c
  3931  00186E  0E01               	movlw	1
  3932  001870  6E06               	movwf	___awdiv@sign,c
  3933  001872  D000               	goto	l2461
  3934  001874                     l2461:
  3935  001874  AE02               	btfss	___awdiv@dividend+1,7,c
  3936  001876  D007               	goto	l2467
  3937  001878  6C01               	negf	___awdiv@dividend,c
  3938  00187A  1E02               	comf	___awdiv@dividend+1,f,c
  3939  00187C  B0D8               	btfsc	status,0,c
  3940  00187E  2A02               	incf	___awdiv@dividend+1,f,c
  3941  001880  0E01               	movlw	1
  3942  001882  1A06               	xorwf	___awdiv@sign,f,c
  3943  001884  D000               	goto	l2467
  3944  001886                     l2467:
  3945  001886  0E00               	movlw	0
  3946  001888  6E08               	movwf	___awdiv@quotient+1,c
  3947  00188A  0E00               	movlw	0
  3948  00188C  6E07               	movwf	___awdiv@quotient,c
  3949  00188E  5003               	movf	___awdiv@divisor,w,c
  3950  001890  1004               	iorwf	___awdiv@divisor+1,w,c
  3951  001892  B4D8               	btfsc	status,2,c
  3952  001894  D021               	goto	l2489
  3953  001896  0E01               	movlw	1
  3954  001898  6E05               	movwf	___awdiv@counter,c
  3955  00189A  D005               	goto	l2475
  3956  00189C                     l2473:
  3957  00189C  90D8               	bcf	status,0,c
  3958  00189E  3603               	rlcf	___awdiv@divisor,f,c
  3959  0018A0  3604               	rlcf	___awdiv@divisor+1,f,c
  3960  0018A2  2A05               	incf	___awdiv@counter,f,c
  3961  0018A4  D000               	goto	l2475
  3962  0018A6                     l2475:
  3963  0018A6  BE04               	btfsc	___awdiv@divisor+1,7,c
  3964  0018A8  D002               	goto	l2477
  3965  0018AA  D7F8               	goto	l2473
  3966  0018AC  D000               	goto	l2477
  3967  0018AE                     l2477:
  3968  0018AE  90D8               	bcf	status,0,c
  3969  0018B0  3607               	rlcf	___awdiv@quotient,f,c
  3970  0018B2  3608               	rlcf	___awdiv@quotient+1,f,c
  3971  0018B4  5003               	movf	___awdiv@divisor,w,c
  3972  0018B6  5C01               	subwf	___awdiv@dividend,w,c
  3973  0018B8  5004               	movf	___awdiv@divisor+1,w,c
  3974  0018BA  5802               	subwfb	___awdiv@dividend+1,w,c
  3975  0018BC  A0D8               	btfss	status,0,c
  3976  0018BE  D006               	goto	l2485
  3977  0018C0  5003               	movf	___awdiv@divisor,w,c
  3978  0018C2  5E01               	subwf	___awdiv@dividend,f,c
  3979  0018C4  5004               	movf	___awdiv@divisor+1,w,c
  3980  0018C6  5A02               	subwfb	___awdiv@dividend+1,f,c
  3981  0018C8  8007               	bsf	___awdiv@quotient,0,c
  3982  0018CA  D000               	goto	l2485
  3983  0018CC                     l2485:
  3984  0018CC  90D8               	bcf	status,0,c
  3985  0018CE  3204               	rrcf	___awdiv@divisor+1,f,c
  3986  0018D0  3203               	rrcf	___awdiv@divisor,f,c
  3987  0018D2  2E05               	decfsz	___awdiv@counter,f,c
  3988  0018D4  D7EC               	goto	l2477
  3989  0018D6  D000               	goto	l2489
  3990  0018D8                     l2489:
  3991  0018D8  5006               	movf	___awdiv@sign,w,c
  3992  0018DA  B4D8               	btfsc	status,2,c
  3993  0018DC  D005               	goto	l2493
  3994  0018DE  6C07               	negf	___awdiv@quotient,c
  3995  0018E0  1E08               	comf	___awdiv@quotient+1,f,c
  3996  0018E2  B0D8               	btfsc	status,0,c
  3997  0018E4  2A08               	incf	___awdiv@quotient+1,f,c
  3998  0018E6  D000               	goto	l2493
  3999  0018E8                     l2493:
  4000  0018E8  C007  F001         	movff	___awdiv@quotient,?___awdiv
  4001  0018EC  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  4002  0018F0  0012               	return	
  4003  0018F2  0012               	return		;funcret
  4004  0018F4                     __end_of___awdiv:
  4005                           	opt stack 0
  4006                           tblptru	equ	0xFF8
  4007                           tblptrh	equ	0xFF7
  4008                           tblptrl	equ	0xFF6
  4009                           tablat	equ	0xFF5
  4010                           prodh	equ	0xFF4
  4011                           prodl	equ	0xFF3
  4012                           indf0	equ	0xFEF
  4013                           postinc0	equ	0xFEE
  4014                           fsr0h	equ	0xFEA
  4015                           fsr0l	equ	0xFE9
  4016                           wreg	equ	0xFE8
  4017                           postdec1	equ	0xFE5
  4018                           fsr1l	equ	0xFE1
  4019                           indf2	equ	0xFDF
  4020                           postinc2	equ	0xFDE
  4021                           postdec2	equ	0xFDD
  4022                           fsr2h	equ	0xFDA
  4023                           fsr2l	equ	0xFD9
  4024                           status	equ	0xFD8
  4025                           
  4026 ;; *************** function _RtccWriteTime *****************
  4027 ;; Defined at:
  4028 ;;		line 34 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteTime.c"
  4029 ;; Parameters:    Size  Location     Type
  4030 ;;  pTm             2    0[COMRAM] PTR const struct .
  4031 ;;		 -> RtccTime(4), 
  4032 ;;  di              1    2[COMRAM] enum E7121
  4033 ;; Auto vars:     Size  Location     Type
  4034 ;;  tempHourWDay    2    9[COMRAM] struct .
  4035 ;;  tempMinSec      2    7[COMRAM] struct .
  4036 ;;  wasWrEn         1    6[COMRAM] enum E7121
  4037 ;;  wasAlrm         1    5[COMRAM] enum E7121
  4038 ;;  wasOn           1    4[COMRAM] enum E7121
  4039 ;; Return value:  Size  Location     Type
  4040 ;;                  1    wreg      enum E7121
  4041 ;; Registers used:
  4042 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4043 ;; Tracked objects:
  4044 ;;		On entry : 0/0
  4045 ;;		On exit  : 0/0
  4046 ;;		Unchanged: 0/0
  4047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4048 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4049 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4050 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4051 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4052 ;;Total ram usage:       11 bytes
  4053 ;; Hardware stack levels used:    1
  4054 ;; Hardware stack levels required when called:    1
  4055 ;; This function calls:
  4056 ;;		_RtccWrOn
  4057 ;; This function is called by:
  4058 ;;		_Write_RTC
  4059 ;; This function uses a non-reentrant model
  4060 ;;
  4061                           
  4062                           	psect	text23
  4063  001752                     __ptext23:
  4064                           	opt stack 0
  4065  001752                     _RtccWriteTime:
  4066                           	opt stack 27
  4067                           
  4068                           ;incstack = 0
  4069  001752  0E00               	movlw	0
  4070  001754  6E06               	movwf	RtccWriteTime@wasAlrm,c
  4071  001756  EE20 F002          	lfsr	2,2
  4072  00175A  5001               	movf	RtccWriteTime@pTm,w,c
  4073  00175C  26D9               	addwf	fsr2l,f,c
  4074  00175E  5002               	movf	RtccWriteTime@pTm+1,w,c
  4075  001760  22DA               	addwfc	fsr2h,f,c
  4076  001762  0E5A               	movlw	90
  4077  001764  60DF               	cpfslt	indf2,c
  4078  001766  0012               	return	
  4079  001768  EE20 F001          	lfsr	2,1
  4080  00176C  5001               	movf	RtccWriteTime@pTm,w,c
  4081  00176E  26D9               	addwf	fsr2l,f,c
  4082  001770  5002               	movf	RtccWriteTime@pTm+1,w,c
  4083  001772  22DA               	addwfc	fsr2h,f,c
  4084  001774  0E5A               	movlw	90
  4085  001776  60DF               	cpfslt	indf2,c
  4086  001778  0012               	return	
  4087  00177A  EE20 F003          	lfsr	2,3
  4088  00177E  5001               	movf	RtccWriteTime@pTm,w,c
  4089  001780  26D9               	addwf	fsr2l,f,c
  4090  001782  5002               	movf	RtccWriteTime@pTm+1,w,c
  4091  001784  22DA               	addwfc	fsr2h,f,c
  4092  001786  0E24               	movlw	36
  4093  001788  64DF               	cpfsgt	indf2,c
  4094  00178A  D002               	goto	l2325
  4095  00178C  0012               	return	
  4096                           
  4097                           ;	Return value of _RtccWriteTime is never used
  4098  00178E  0012               	return	
  4099  001790                     l2325:
  4100  001790  EE20 F002          	lfsr	2,2
  4101  001794  5001               	movf	RtccWriteTime@pTm,w,c
  4102  001796  26D9               	addwf	fsr2l,f,c
  4103  001798  5002               	movf	RtccWriteTime@pTm+1,w,c
  4104  00179A  22DA               	addwfc	fsr2h,f,c
  4105  00179C  50DF               	movf	indf2,w,c
  4106  00179E  6E09               	movwf	RtccWriteTime@tempMinSec+1,c
  4107  0017A0  EE20 F001          	lfsr	2,1
  4108  0017A4  5001               	movf	RtccWriteTime@pTm,w,c
  4109  0017A6  26D9               	addwf	fsr2l,f,c
  4110  0017A8  5002               	movf	RtccWriteTime@pTm+1,w,c
  4111  0017AA  22DA               	addwfc	fsr2h,f,c
  4112  0017AC  50DF               	movf	indf2,w,c
  4113  0017AE  6E08               	movwf	RtccWriteTime@tempMinSec,c
  4114  0017B0  5003               	movf	RtccWriteTime@di,w,c
  4115  0017B2  B4D8               	btfsc	status,2,c
  4116  0017B4  D002               	goto	l2331
  4117  0017B6  9CF2               	bcf	intcon,6,c	;volatile
  4118  0017B8  D000               	goto	l2331
  4119  0017BA                     l2331:
  4120  0017BA  0E00               	movlw	0
  4121  0017BC  BB3F               	btfsc	63,5,b	;volatile
  4122  0017BE  0E01               	movlw	1
  4123  0017C0  6E07               	movwf	RtccWriteTime@wasWrEn,c
  4124  0017C2  5007               	movf	RtccWriteTime@wasWrEn,w,c
  4125  0017C4  A4D8               	btfss	status,2,c
  4126  0017C6  D003               	goto	l2335
  4127  0017C8  ECF1  F00E         	call	_RtccWrOn	;wreg free
  4128  0017CC  D000               	goto	l2335
  4129  0017CE                     l2335:
  4130  0017CE  0E00               	movlw	0
  4131  0017D0  BF3F               	btfsc	63,7,b	;volatile
  4132  0017D2  0E01               	movlw	1
  4133  0017D4  6E05               	movwf	RtccWriteTime@wasOn,c
  4134  0017D6  5005               	movf	RtccWriteTime@wasOn,w,c
  4135  0017D8  B4D8               	btfsc	status,2,c
  4136  0017DA  D007               	goto	l2341
  4137  0017DC  0E00               	movlw	0
  4138  0017DE  BE91               	btfsc	3985,7,c	;volatile
  4139  0017E0  0E01               	movlw	1
  4140  0017E2  6E06               	movwf	RtccWriteTime@wasAlrm,c
  4141  0017E4  010F               	movlb	15	; () banked
  4142  0017E6  9F3F               	bcf	63,7,b	;volatile
  4143  0017E8  D000               	goto	l2341
  4144  0017EA                     l2341:
  4145  0017EA  0EFC               	movlw	252
  4146  0017EC  010F               	movlb	15	; () banked
  4147  0017EE  173F               	andwf	63,f,b	;volatile
  4148  0017F0  010F               	movlb	15	; () banked
  4149  0017F2  813F               	bsf	63,0,b	;volatile
  4150                           
  4151                           ; BSR set to: 15
  4152  0017F4  CF98 F00A          	movff	3992,RtccWriteTime@tempHourWDay	;volatile
  4153                           
  4154                           ; BSR set to: 15
  4155  0017F8  CF99 F00B          	movff	3993,RtccWriteTime@tempHourWDay+1	;volatile
  4156                           
  4157                           ; BSR set to: 15
  4158  0017FC  EE20 F003          	lfsr	2,3
  4159  001800  5001               	movf	RtccWriteTime@pTm,w,c
  4160  001802  26D9               	addwf	fsr2l,f,c
  4161  001804  5002               	movf	RtccWriteTime@pTm+1,w,c
  4162  001806  22DA               	addwfc	fsr2h,f,c
  4163  001808  50DF               	movf	indf2,w,c
  4164  00180A  6E0A               	movwf	RtccWriteTime@tempHourWDay,c
  4165                           
  4166                           ; BSR set to: 15
  4167  00180C  0EFC               	movlw	252
  4168  00180E  010F               	movlb	15	; () banked
  4169  001810  173F               	andwf	63,f,b	;volatile
  4170                           
  4171                           ; BSR set to: 15
  4172  001812  010F               	movlb	15	; () banked
  4173  001814  813F               	bsf	63,0,b	;volatile
  4174                           
  4175                           ; BSR set to: 15
  4176  001816  C00A  FF98         	movff	RtccWriteTime@tempHourWDay,3992	;volatile
  4177                           
  4178                           ; BSR set to: 15
  4179  00181A  C00B  FF99         	movff	RtccWriteTime@tempHourWDay+1,3993	;volatile
  4180                           
  4181                           ; BSR set to: 15
  4182  00181E  C008  FF98         	movff	RtccWriteTime@tempMinSec,3992	;volatile
  4183                           
  4184                           ; BSR set to: 15
  4185  001822  C009  FF99         	movff	RtccWriteTime@tempMinSec+1,3993	;volatile
  4186                           
  4187                           ; BSR set to: 15
  4188  001826  5005               	movf	RtccWriteTime@wasOn,w,c
  4189  001828  B4D8               	btfsc	status,2,c
  4190  00182A  D00D               	goto	l2373
  4191                           
  4192                           ; BSR set to: 15
  4193  00182C  010F               	movlb	15	; () banked
  4194  00182E  8F3F               	bsf	63,7,b	;volatile
  4195                           
  4196                           ; BSR set to: 15
  4197  001830  5006               	movf	RtccWriteTime@wasAlrm,w,c
  4198  001832  B4D8               	btfsc	status,2,c
  4199  001834  D002               	goto	l2369
  4200                           
  4201                           ; BSR set to: 15
  4202  001836  8E91               	bsf	3985,7,c	;volatile
  4203  001838  D000               	goto	l2369
  4204  00183A                     l2369:
  4205                           
  4206                           ; BSR set to: 15
  4207  00183A  5007               	movf	RtccWriteTime@wasWrEn,w,c
  4208  00183C  B4D8               	btfsc	status,2,c
  4209  00183E  D009               	goto	l2377
  4210                           
  4211                           ; BSR set to: 15
  4212  001840  ECF1  F00E         	call	_RtccWrOn	;wreg free
  4213  001844  D006               	goto	l2377
  4214  001846                     l2373:
  4215  001846  5007               	movf	RtccWriteTime@wasWrEn,w,c
  4216  001848  A4D8               	btfss	status,2,c
  4217  00184A  D003               	goto	l2377
  4218  00184C  010F               	movlb	15	; () banked
  4219  00184E  9B3F               	bcf	63,5,b	;volatile
  4220                           
  4221                           ; BSR set to: 15
  4222  001850  D000               	goto	l2377
  4223  001852                     l2377:
  4224  001852  5003               	movf	RtccWriteTime@di,w,c
  4225  001854  B4D8               	btfsc	status,2,c
  4226  001856  0012               	return	
  4227  001858  8CF2               	bsf	intcon,6,c	;volatile
  4228  00185A  0012               	return	
  4229                           
  4230                           ;	Return value of _RtccWriteTime is never used
  4231  00185C  0012               	return		;funcret
  4232  00185E                     __end_of_RtccWriteTime:
  4233                           	opt stack 0
  4234                           tblptru	equ	0xFF8
  4235                           tblptrh	equ	0xFF7
  4236                           tblptrl	equ	0xFF6
  4237                           tablat	equ	0xFF5
  4238                           prodh	equ	0xFF4
  4239                           prodl	equ	0xFF3
  4240                           intcon	equ	0xFF2
  4241                           indf0	equ	0xFEF
  4242                           postinc0	equ	0xFEE
  4243                           fsr0h	equ	0xFEA
  4244                           fsr0l	equ	0xFE9
  4245                           wreg	equ	0xFE8
  4246                           postdec1	equ	0xFE5
  4247                           fsr1l	equ	0xFE1
  4248                           indf2	equ	0xFDF
  4249                           postinc2	equ	0xFDE
  4250                           postdec2	equ	0xFDD
  4251                           fsr2h	equ	0xFDA
  4252                           fsr2l	equ	0xFD9
  4253                           status	equ	0xFD8
  4254                           
  4255 ;; *************** function _RtccWriteDate *****************
  4256 ;; Defined at:
  4257 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteDate.c"
  4258 ;; Parameters:    Size  Location     Type
  4259 ;;  pDt             2    0[COMRAM] PTR const struct .
  4260 ;;		 -> RtccDate(4), 
  4261 ;;  di              1    2[COMRAM] enum E7121
  4262 ;; Auto vars:     Size  Location     Type
  4263 ;;  tempHourWDay    2   11[COMRAM] struct .
  4264 ;;  tempDayMonth    2    9[COMRAM] struct .
  4265 ;;  tempYear        2    6[COMRAM] struct .
  4266 ;;  wasWrEn         1    8[COMRAM] enum E7121
  4267 ;;  wasAlrm         1    5[COMRAM] enum E7121
  4268 ;;  wasOn           1    4[COMRAM] enum E7121
  4269 ;; Return value:  Size  Location     Type
  4270 ;;                  1    wreg      enum E7121
  4271 ;; Registers used:
  4272 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4273 ;; Tracked objects:
  4274 ;;		On entry : 0/0
  4275 ;;		On exit  : 0/0
  4276 ;;		Unchanged: 0/0
  4277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4278 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4279 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4280 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4281 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4282 ;;Total ram usage:       13 bytes
  4283 ;; Hardware stack levels used:    1
  4284 ;; Hardware stack levels required when called:    1
  4285 ;; This function calls:
  4286 ;;		_RtccWrOn
  4287 ;; This function is called by:
  4288 ;;		_Write_RTC
  4289 ;; This function uses a non-reentrant model
  4290 ;;
  4291                           
  4292                           	psect	text24
  4293  00160C                     __ptext24:
  4294                           	opt stack 0
  4295  00160C                     _RtccWriteDate:
  4296                           	opt stack 27
  4297                           
  4298                           ;incstack = 0
  4299  00160C  0E00               	movlw	0
  4300  00160E  6E06               	movwf	RtccWriteDate@wasAlrm,c
  4301  001610  EE20 F002          	lfsr	2,2
  4302  001614  5001               	movf	RtccWriteDate@pDt,w,c
  4303  001616  26D9               	addwf	fsr2l,f,c
  4304  001618  5002               	movf	RtccWriteDate@pDt+1,w,c
  4305  00161A  22DA               	addwfc	fsr2h,f,c
  4306  00161C  0E13               	movlw	19
  4307  00161E  60DF               	cpfslt	indf2,c
  4308  001620  0012               	return	
  4309  001622  EE20 F002          	lfsr	2,2
  4310  001626  5001               	movf	RtccWriteDate@pDt,w,c
  4311  001628  26D9               	addwf	fsr2l,f,c
  4312  00162A  5002               	movf	RtccWriteDate@pDt+1,w,c
  4313  00162C  22DA               	addwfc	fsr2h,f,c
  4314  00162E  50DF               	movf	indf2,w,c
  4315  001630  B4D8               	btfsc	status,2,c
  4316  001632  0012               	return	
  4317  001634  EE20 F001          	lfsr	2,1
  4318  001638  5001               	movf	RtccWriteDate@pDt,w,c
  4319  00163A  26D9               	addwf	fsr2l,f,c
  4320  00163C  5002               	movf	RtccWriteDate@pDt+1,w,c
  4321  00163E  22DA               	addwfc	fsr2h,f,c
  4322  001640  0E32               	movlw	50
  4323  001642  60DF               	cpfslt	indf2,c
  4324  001644  0012               	return	
  4325  001646  EE20 F001          	lfsr	2,1
  4326  00164A  5001               	movf	RtccWriteDate@pDt,w,c
  4327  00164C  26D9               	addwf	fsr2l,f,c
  4328  00164E  5002               	movf	RtccWriteDate@pDt+1,w,c
  4329  001650  22DA               	addwfc	fsr2h,f,c
  4330  001652  50DF               	movf	indf2,w,c
  4331  001654  B4D8               	btfsc	status,2,c
  4332  001656  0012               	return	
  4333  001658  EE20 F003          	lfsr	2,3
  4334  00165C  5001               	movf	RtccWriteDate@pDt,w,c
  4335  00165E  26D9               	addwf	fsr2l,f,c
  4336  001660  5002               	movf	RtccWriteDate@pDt+1,w,c
  4337  001662  22DA               	addwfc	fsr2h,f,c
  4338  001664  0E99               	movlw	153
  4339  001666  64DF               	cpfsgt	indf2,c
  4340  001668  D002               	goto	l2393
  4341  00166A  0012               	return	
  4342                           
  4343                           ;	Return value of _RtccWriteDate is never used
  4344  00166C  0012               	return	
  4345  00166E                     l2393:
  4346  00166E  EE20 F003          	lfsr	2,3
  4347  001672  5001               	movf	RtccWriteDate@pDt,w,c
  4348  001674  26D9               	addwf	fsr2l,f,c
  4349  001676  5002               	movf	RtccWriteDate@pDt+1,w,c
  4350  001678  22DA               	addwfc	fsr2h,f,c
  4351  00167A  50DF               	movf	indf2,w,c
  4352  00167C  6E07               	movwf	RtccWriteDate@tempYear,c
  4353  00167E  EE20 F001          	lfsr	2,1
  4354  001682  5001               	movf	RtccWriteDate@pDt,w,c
  4355  001684  26D9               	addwf	fsr2l,f,c
  4356  001686  5002               	movf	RtccWriteDate@pDt+1,w,c
  4357  001688  22DA               	addwfc	fsr2h,f,c
  4358  00168A  50DF               	movf	indf2,w,c
  4359  00168C  6E0A               	movwf	RtccWriteDate@tempDayMonth,c
  4360  00168E  EE20 F002          	lfsr	2,2
  4361  001692  5001               	movf	RtccWriteDate@pDt,w,c
  4362  001694  26D9               	addwf	fsr2l,f,c
  4363  001696  5002               	movf	RtccWriteDate@pDt+1,w,c
  4364  001698  22DA               	addwfc	fsr2h,f,c
  4365  00169A  50DF               	movf	indf2,w,c
  4366  00169C  6E0B               	movwf	RtccWriteDate@tempDayMonth+1,c
  4367  00169E  5003               	movf	RtccWriteDate@di,w,c
  4368  0016A0  B4D8               	btfsc	status,2,c
  4369  0016A2  D002               	goto	l2399
  4370  0016A4  9CF2               	bcf	intcon,6,c	;volatile
  4371  0016A6  D000               	goto	l2399
  4372  0016A8                     l2399:
  4373  0016A8  0E00               	movlw	0
  4374  0016AA  BB3F               	btfsc	63,5,b	;volatile
  4375  0016AC  0E01               	movlw	1
  4376  0016AE  6E09               	movwf	RtccWriteDate@wasWrEn,c
  4377  0016B0  5009               	movf	RtccWriteDate@wasWrEn,w,c
  4378  0016B2  A4D8               	btfss	status,2,c
  4379  0016B4  D003               	goto	l2403
  4380  0016B6  ECF1  F00E         	call	_RtccWrOn	;wreg free
  4381  0016BA  D000               	goto	l2403
  4382  0016BC                     l2403:
  4383  0016BC  0E00               	movlw	0
  4384  0016BE  BF3F               	btfsc	63,7,b	;volatile
  4385  0016C0  0E01               	movlw	1
  4386  0016C2  6E05               	movwf	RtccWriteDate@wasOn,c
  4387  0016C4  5005               	movf	RtccWriteDate@wasOn,w,c
  4388  0016C6  B4D8               	btfsc	status,2,c
  4389  0016C8  D007               	goto	l2409
  4390  0016CA  0E00               	movlw	0
  4391  0016CC  BE91               	btfsc	3985,7,c	;volatile
  4392  0016CE  0E01               	movlw	1
  4393  0016D0  6E06               	movwf	RtccWriteDate@wasAlrm,c
  4394  0016D2  010F               	movlb	15	; () banked
  4395  0016D4  9F3F               	bcf	63,7,b	;volatile
  4396  0016D6  D000               	goto	l2409
  4397  0016D8                     l2409:
  4398  0016D8  0EFC               	movlw	252
  4399  0016DA  010F               	movlb	15	; () banked
  4400  0016DC  173F               	andwf	63,f,b	;volatile
  4401  0016DE  010F               	movlb	15	; () banked
  4402  0016E0  813F               	bsf	63,0,b	;volatile
  4403                           
  4404                           ; BSR set to: 15
  4405  0016E2  CF98 F00C          	movff	3992,RtccWriteDate@tempHourWDay	;volatile
  4406                           
  4407                           ; BSR set to: 15
  4408  0016E6  CF99 F00D          	movff	3993,RtccWriteDate@tempHourWDay+1	;volatile
  4409                           
  4410                           ; BSR set to: 15
  4411  0016EA  C001  FFD9         	movff	RtccWriteDate@pDt,fsr2l
  4412  0016EE  C002  FFDA         	movff	RtccWriteDate@pDt+1,fsr2h
  4413  0016F2  50DF               	movf	indf2,w,c
  4414  0016F4  6E0D               	movwf	RtccWriteDate@tempHourWDay+1,c
  4415                           
  4416                           ; BSR set to: 15
  4417  0016F6  0EFC               	movlw	252
  4418  0016F8  010F               	movlb	15	; () banked
  4419  0016FA  173F               	andwf	63,f,b	;volatile
  4420                           
  4421                           ; BSR set to: 15
  4422  0016FC  0E03               	movlw	3
  4423  0016FE  010F               	movlb	15	; () banked
  4424  001700  133F               	iorwf	63,f,b	;volatile
  4425                           
  4426                           ; BSR set to: 15
  4427  001702  C007  FF98         	movff	RtccWriteDate@tempYear,3992	;volatile
  4428                           
  4429                           ; BSR set to: 15
  4430  001706  C008  FF99         	movff	RtccWriteDate@tempYear+1,3993	;volatile
  4431                           
  4432                           ; BSR set to: 15
  4433  00170A  C00A  FF98         	movff	RtccWriteDate@tempDayMonth,3992	;volatile
  4434                           
  4435                           ; BSR set to: 15
  4436  00170E  C00B  FF99         	movff	RtccWriteDate@tempDayMonth+1,3993	;volatile
  4437                           
  4438                           ; BSR set to: 15
  4439  001712  C00C  FF98         	movff	RtccWriteDate@tempHourWDay,3992	;volatile
  4440                           
  4441                           ; BSR set to: 15
  4442  001716  C00D  FF99         	movff	RtccWriteDate@tempHourWDay+1,3993	;volatile
  4443                           
  4444                           ; BSR set to: 15
  4445  00171A  5005               	movf	RtccWriteDate@wasOn,w,c
  4446  00171C  B4D8               	btfsc	status,2,c
  4447  00171E  D00D               	goto	l2445
  4448                           
  4449                           ; BSR set to: 15
  4450  001720  010F               	movlb	15	; () banked
  4451  001722  8F3F               	bsf	63,7,b	;volatile
  4452                           
  4453                           ; BSR set to: 15
  4454  001724  5006               	movf	RtccWriteDate@wasAlrm,w,c
  4455  001726  B4D8               	btfsc	status,2,c
  4456  001728  D002               	goto	l2441
  4457                           
  4458                           ; BSR set to: 15
  4459  00172A  8E91               	bsf	3985,7,c	;volatile
  4460  00172C  D000               	goto	l2441
  4461  00172E                     l2441:
  4462                           
  4463                           ; BSR set to: 15
  4464  00172E  5009               	movf	RtccWriteDate@wasWrEn,w,c
  4465  001730  B4D8               	btfsc	status,2,c
  4466  001732  D009               	goto	l2449
  4467                           
  4468                           ; BSR set to: 15
  4469  001734  ECF1  F00E         	call	_RtccWrOn	;wreg free
  4470  001738  D006               	goto	l2449
  4471  00173A                     l2445:
  4472  00173A  5009               	movf	RtccWriteDate@wasWrEn,w,c
  4473  00173C  A4D8               	btfss	status,2,c
  4474  00173E  D003               	goto	l2449
  4475  001740  010F               	movlb	15	; () banked
  4476  001742  9B3F               	bcf	63,5,b	;volatile
  4477                           
  4478                           ; BSR set to: 15
  4479  001744  D000               	goto	l2449
  4480  001746                     l2449:
  4481  001746  5003               	movf	RtccWriteDate@di,w,c
  4482  001748  B4D8               	btfsc	status,2,c
  4483  00174A  0012               	return	
  4484  00174C  9CF2               	bcf	intcon,6,c	;volatile
  4485  00174E  0012               	return	
  4486                           
  4487                           ;	Return value of _RtccWriteDate is never used
  4488  001750  0012               	return		;funcret
  4489  001752                     __end_of_RtccWriteDate:
  4490                           	opt stack 0
  4491                           tblptru	equ	0xFF8
  4492                           tblptrh	equ	0xFF7
  4493                           tblptrl	equ	0xFF6
  4494                           tablat	equ	0xFF5
  4495                           prodh	equ	0xFF4
  4496                           prodl	equ	0xFF3
  4497                           intcon	equ	0xFF2
  4498                           indf0	equ	0xFEF
  4499                           postinc0	equ	0xFEE
  4500                           fsr0h	equ	0xFEA
  4501                           fsr0l	equ	0xFE9
  4502                           wreg	equ	0xFE8
  4503                           postdec1	equ	0xFE5
  4504                           fsr1l	equ	0xFE1
  4505                           indf2	equ	0xFDF
  4506                           postinc2	equ	0xFDE
  4507                           postdec2	equ	0xFDD
  4508                           fsr2h	equ	0xFDA
  4509                           fsr2l	equ	0xFD9
  4510                           status	equ	0xFD8
  4511                           
  4512 ;; *************** function _RtccWrOn *****************
  4513 ;; Defined at:
  4514 ;;		line 21 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWrOn.c"
  4515 ;; Parameters:    Size  Location     Type
  4516 ;;		None
  4517 ;; Auto vars:     Size  Location     Type
  4518 ;;  data            2    0        unsigned int 
  4519 ;; Return value:  Size  Location     Type
  4520 ;;		None               void
  4521 ;; Registers used:
  4522 ;;		wreg, status,2
  4523 ;; Tracked objects:
  4524 ;;		On entry : 0/0
  4525 ;;		On exit  : 0/0
  4526 ;;		Unchanged: 0/0
  4527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4529 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4531 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4532 ;;Total ram usage:        0 bytes
  4533 ;; Hardware stack levels used:    1
  4534 ;; This function calls:
  4535 ;;		Nothing
  4536 ;; This function is called by:
  4537 ;;		_Write_RTC
  4538 ;;		_RtccWriteDate
  4539 ;;		_RtccWriteTime
  4540 ;; This function uses a non-reentrant model
  4541 ;;
  4542                           
  4543                           	psect	text25
  4544  001DE2                     __ptext25:
  4545                           	opt stack 0
  4546  001DE2                     _RtccWrOn:
  4547                           	opt stack 27
  4548                           
  4549                           ;incstack = 0
  4550  001DE2  9CF2               	bcf	intcon,6,c	;volatile
  4551  001DE4  0E55               	movlw	85
  4552  001DE6  6EA7               	movwf	4007,c	;volatile
  4553  001DE8  0EAA               	movlw	170
  4554  001DEA  6EA7               	movwf	4007,c	;volatile
  4555  001DEC  010F               	movlb	15	; () banked
  4556  001DEE  8B3F               	bsf	63,5,b	;volatile
  4557                           
  4558                           ; BSR set to: 15
  4559  001DF0  8CF2               	bsf	intcon,6,c	;volatile
  4560                           
  4561                           ; BSR set to: 15
  4562  001DF2  0012               	return		;funcret
  4563  001DF4                     __end_of_RtccWrOn:
  4564                           	opt stack 0
  4565                           tblptru	equ	0xFF8
  4566                           tblptrh	equ	0xFF7
  4567                           tblptrl	equ	0xFF6
  4568                           tablat	equ	0xFF5
  4569                           prodh	equ	0xFF4
  4570                           prodl	equ	0xFF3
  4571                           intcon	equ	0xFF2
  4572                           indf0	equ	0xFEF
  4573                           postinc0	equ	0xFEE
  4574                           fsr0h	equ	0xFEA
  4575                           fsr0l	equ	0xFE9
  4576                           wreg	equ	0xFE8
  4577                           postdec1	equ	0xFE5
  4578                           fsr1l	equ	0xFE1
  4579                           indf2	equ	0xFDF
  4580                           postinc2	equ	0xFDE
  4581                           postdec2	equ	0xFDD
  4582                           fsr2h	equ	0xFDA
  4583                           fsr2l	equ	0xFD9
  4584                           status	equ	0xFD8
  4585                           tblptru	equ	0xFF8
  4586                           tblptrh	equ	0xFF7
  4587                           tblptrl	equ	0xFF6
  4588                           tablat	equ	0xFF5
  4589                           prodh	equ	0xFF4
  4590                           prodl	equ	0xFF3
  4591                           intcon	equ	0xFF2
  4592                           indf0	equ	0xFEF
  4593                           postinc0	equ	0xFEE
  4594                           fsr0h	equ	0xFEA
  4595                           fsr0l	equ	0xFE9
  4596                           wreg	equ	0xFE8
  4597                           postdec1	equ	0xFE5
  4598                           fsr1l	equ	0xFE1
  4599                           indf2	equ	0xFDF
  4600                           postinc2	equ	0xFDE
  4601                           postdec2	equ	0xFDD
  4602                           fsr2h	equ	0xFDA
  4603                           fsr2l	equ	0xFD9
  4604                           status	equ	0xFD8
  4605                           
  4606                           	psect	rparam
  4607  0000                     tblptru	equ	0xFF8
  4608                           tblptrh	equ	0xFF7
  4609                           tblptrl	equ	0xFF6
  4610                           tablat	equ	0xFF5
  4611                           prodh	equ	0xFF4
  4612                           prodl	equ	0xFF3
  4613                           intcon	equ	0xFF2
  4614                           indf0	equ	0xFEF
  4615                           postinc0	equ	0xFEE
  4616                           fsr0h	equ	0xFEA
  4617                           fsr0l	equ	0xFE9
  4618                           wreg	equ	0xFE8
  4619                           postdec1	equ	0xFE5
  4620                           fsr1l	equ	0xFE1
  4621                           indf2	equ	0xFDF
  4622                           postinc2	equ	0xFDE
  4623                           postdec2	equ	0xFDD
  4624                           fsr2h	equ	0xFDA
  4625                           fsr2l	equ	0xFD9
  4626                           status	equ	0xFD8


Data Sizes:
    Strings     113
    Constant    14
    Data        13
    BSS         71
    Persistent  13
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     38      92
    BANK0           160      0      44
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    RtccWriteTime@pTm	PTR const struct . size(2) Largest target is 4
		 -> RtccTime(COMRAM[4]), 

    RtccWriteDate@pDt	PTR const struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_21(CODE[10]), STR_20(CODE[15]), STR_17(CODE[5]), STR_14(CODE[5]), 
		 -> STR_13(CODE[5]), STR_12(CODE[5]), STR_10(CODE[5]), STR_9(CODE[5]), 
		 -> STR_8(CODE[5]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> buffer2(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    lcd_putrs@ptr	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_24(CODE[8]), STR_23(CODE[9]), STR_22(CODE[7]), STR_19(CODE[2]), 
		 -> STR_18(CODE[2]), STR_16(CODE[2]), STR_15(CODE[2]), STR_11(CODE[2]), 
		 -> STR_7(CODE[2]), buffer2(BANK0[20]), STR_3(CODE[10]), STR_2(CODE[13]), 
		 -> STR_1(CODE[33]), 


Critical Paths under _main in COMRAM

    _main->_read_keyboard
    _write_Date->_sprintf
    _clear->_lcd_comand
    _read_keyboard->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcd_putrs->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _caratula->_lcd_comand
    _lcd_init->_lcd_send_byte
    _lcd_comand->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _Write_RTC->_RtccWriteDate

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   28455
                                             36 COMRAM     2     2      0
                              _Setup
                           _caratula
                         _lcd_gotoxy
                          _lcd_putrs
                      _read_keyboard
                         _set_vision
 ---------------------------------------------------------------------------------
 (1) _set_vision                                           0     0      0   12904
                              _clear
                         _lcd_gotoxy
                          _lcd_putrs
                         _write_Date
 ---------------------------------------------------------------------------------
 (2) _write_Date                                           0     0      0    7727
                         _lcd_gotoxy
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _clear                                                1     1      0     646
                                              5 COMRAM     1     1      0
                         _lcd_comand
 ---------------------------------------------------------------------------------
 (1) _read_keyboard                                        1     1      0    6586
                                             35 COMRAM     1     1      0
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             32    22     10    3196
                                             12 COMRAM    23    13     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     287
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcd_putrs                                            2     0      2    3390
                                              8 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (4) _lcd_putc                                             1     1      0    1809
                                              7 COMRAM     1     1      0
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (5) _lcd_gotoxy                                           3     2      1    1141
                                              4 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) _caratula                                             0     0      0     646
                         _lcd_comand
 ---------------------------------------------------------------------------------
 (1) _Setup                                                0     0      0    3764
                          _Write_RTC
                         _lcd_comand
                           _lcd_init
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             1     1      0     841
                                              4 COMRAM     1     1      0
                        _Delay1KTCYx
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _lcd_comand                                           1     1      0     646
                                              4 COMRAM     1     1      0
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (5) _lcd_send_byte                                        2     1      1     624
                                              2 COMRAM     2     1      1
                       _Delay100TCYx
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (6) _lcd_send_nibble                                      2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _Delay100TCYx                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Write_RTC                                            0     0      0    2277
                           _RtccWrOn
                      _RtccWriteDate
                      _RtccWriteTime
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1068
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _RtccWriteTime                                       11     8      3     537
                                              0 COMRAM    11     8      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (3) _RtccWriteDate                                       13    10      3     672
                                              0 COMRAM    13    10      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (4) _RtccWrOn                                             2     2      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Setup
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_init
       _Delay1KTCYx
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
       _lcd_send_nibble
   _caratula
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
   _lcd_gotoxy
     _lcd_send_byte
       _Delay100TCYx
       _lcd_send_nibble
   _lcd_putrs
     _lcd_putc
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
   _read_keyboard
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _set_vision
     _clear
       _lcd_comand
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _write_Date
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      2C       5       27.5%
BITCOMRAM           5F      0       1       0        1.1%
COMRAM              5F     26      5C       1       96.8%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      88       6        0.0%
DATA                 0      0      88       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sun Sep 04 15:44:21 2016

                        _a 002B                          _b 002D                          _c 002F  
                        _i 0031                          _j 0033                          _k 0035  
              _state_alarm 005B                         l75 1D24                         l76 1D26  
           ?_lcd_send_byte 0003               ___awdiv@sign 0006        ___wmul@multiplicand 0003  
              lcd_comand@d 0005               __CFG_CP0$OFF 000000                        l201 0FBE  
                      l210 1022                        l202 0FBA                        l221 10B0  
                      l213 1040                        l205 0FF2                        l230 10FA  
                      l222 10AC                        l214 103C                        l206 0FEE  
                      l241 11A2                        l233 113A                        l225 10E4  
                      l217 107C                        l209 1026                        l250 11DA  
                      l242 119E                        l234 1136                        l226 10E0  
                      l218 1078                        l253 1212                        l245 11BC  
                      l237 116E                        l229 10FE                        l262 1242  
                      l254 120E                        l246 11B8                        l238 116A  
                      l257 122C                        l249 11DE                        l258 1228  
                      l608 1432                        _dia 0051                        _key 0039  
                      _mes 0057                        wreg 000FE8                lcd_gotoxy@x 0006  
              lcd_gotoxy@y 0005                       l2115 1DD2                       l1252 1B36  
                     l2141 1D6E                       l2221 1B42                       l2213 1C1A  
                     l2205 1BF2                       l1262 1C26                       l2143 1D74  
                     l2151 1C40                       l2207 1BFC                       l2303 1438  
                     l2311 1498                       l2153 1C4C                       l2225 1B6C  
                     l2209 1C04                       l2313 14B4                       l2241 129C  
                     l2403 16BC                       l2331 17BA                       l2155 1C58  
                     l2243 12B2                       l2235 1284                       l2341 17EA  
                     l2325 1790                       l1461 1DC0                       l2149 1C34  
                     l2309 148C                       l2261 135C                       l2237 1292  
                     l2229 126A                       l2335 17CE                       l2159 1C64  
                     l2271 1384                       l2255 1334                       l2247 12D0  
                     l2441 172E                       l2409 16D8                       l2185 1AFA  
                     l2169 1D9E                       l2187 1B04                       l2283 13D0  
                     l2275 13A8                       l2267 1378                       l2259 133A  
                     l2445 173A                       l2373 1846                       l2461 1874  
                     l2197 1B2A                       l2189 1B0C                       l2285 13DA  
                     l2621 1BA4                       l2295 1408                       l2279 13AC  
                     l2623 1BB2                       l2449 1746                       l2393 166E  
                     l2377 1852                       l2369 183A                       l2473 189C  
                     l2553 191A                       l2297 1410                       l2289 13E6  
                     l2625 1BC0                       l2475 18A6                       l2467 1886  
                     l2571 1946                       l2563 1932                       l2627 1BCE  
                     l2493 18E8                       l2485 18CC                       l2477 18AE  
                     l2557 1922                       l2717 124A                       l2629 1BDE  
                     l2399 16A8                       l2489 18D8                       l2729 19FC  
                     STR_1 0F0F                       STR_2 0F3F                       STR_3 0F56  
                     STR_4 0F71                       STR_5 0F71                       STR_6 0F71  
                     STR_7 0F7A                       STR_8 0F71                       STR_9 0F71  
                     u1200 1AAC                       u1220 1AC8                       u1160 1A7A  
                     u1218 1AAE                       u1180 1A92                       u1340 1B62  
                     u1238 1ACA                       u1350 1B8C                       u1178 1A7C  
                     u1347 1B58                       u1357 1B82                       u2317 1A5E  
                     u1198 1A94                       u2327 1DB4                       u2337 1250  
                     u2347 1DC2                       u2357 1DD4           ?_lcd_send_nibble 0001  
                     _anio 004F                       _flag 02E0                       _main 19F2  
                     _hora 0055                       fsr0h 000FEA                       indf0 000FEF  
                     fsr0l 000FE9                       fsr2h 000FDA                       fsr1l 000FE1  
                     indf2 000FDF                       fsr2l 000FD9              __CFG_T1DIG$ON 000000  
                     prodh 000FF4                       prodl 000FF3                       start 0000  
            __CFG_IESO$OFF 000000               ___param_bank 000010                _Delay1KTCYx 1DBE  
            __CFG_PLLDIV$1 000000                      ?_main 0001            __end_of___awdiv 18F4  
                    STR_10 0F71                      STR_11 0F7C                      STR_12 0F71  
                    STR_20 0F30                      STR_13 0F71                      STR_21 0F4C  
                    STR_22 0F62                      STR_14 0F71                      STR_15 0F7E  
                    STR_23 0F60                      STR_16 0F78                      STR_24 0F69  
                    STR_17 0F71                      STR_18 0F76                      STR_19 0F6F  
    __size_of_Delay100TCYx 0012            ___awdiv@divisor 0003            __end_of___lwdiv 1B40  
          __end_of___lwmod 1C30            ___awdiv@counter 0005                      _TRISA 000F92  
                    _TRISB 000F93                      _TRISC 000F94             __CFG_FCMEN$OFF 000000  
                    _Setup 1C7C                      _clear 1DA8            __end_of_dpowers 0F0B  
                    _mes_d 0049                      _mes_u 004A            __end_of_isdigit 1DA8  
           __pbitbssCOMRAM 02E0                      tablat 000FF5               lcd_putrs@ptr 0009  
                    status 000FD8            __end_of_sprintf 14C4    __CFG_DSWDTOSC$INTOSCREF 000000  
          __initialization 1CC4               _Delay100TCYx 1DD0               __end_of_main 1A6E  
          ??_lcd_send_byte 0004                     ??_main 0025              __activetblptr 000002  
         __end_of_RtccWrOn 1DF4                     ?_Setup 0001                     ?_clear 0001  
                   _ADCON0 000FC2                     _ADCON1 000FC1                     _EECON2 000FA7  
                   _ANCON0 000F48                     _ANCON1 000F49           ___awdiv@dividend 0001  
           __CFG_WDTEN$OFF 000000           RtccWriteDate@pDt 0001                     _RTCCFG 000F3F  
           __CFG_WPCFG$OFF 000000           __end_of_caratula 1E18             __CFG_WPDIS$OFF 000000  
           __CFG_XINST$OFF 000000           __end_of_lcd_init 1974           __end_of_lcd_putc 1C7C  
                   ___wmul 1D3A                  ??___awdiv 0005             __CFG_STVREN$ON 000000  
                   _diasem 0053                     _anio_d 0042                     _anio_u 0043  
                ??___lwdiv 0005                  ??___lwmod 000C                     _hora_d 0047  
                   _hora_u 0048                     clear_0 1CCA                     clear_1 1CD8  
         ___awdiv@quotient 0007                     _minuto 0059      __end_of_RtccWriteDate 1752  
    __end_of_RtccWriteTime 185E           RtccWriteTime@pTm 0001               __pdataCOMRAM 004F  
                ??_isdigit 0001               __mediumconst 0000                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8                  ??_sprintf 0017  
   __size_of_read_keyboard 02DE                 __accesstop 0060    __end_of__initialization 1CFE  
       __size_of_Write_RTC 0148              ___rparam_used 000001             __pcstackCOMRAM 0001  
            __end_of_Setup 1CC4              __end_of_clear 1DBE            __CFG_DSWDTPS$G2 000000  
          __CFG_OSC$INTOSC 000000                    ??_Setup 000E          lcd_gotoxy@address 0007  
                  ??_clear 0006         __size_of_lcd_putrs 0054               sprintf@width 0021  
               __pbssBANK0 0060                 _dia_semana 0044  RtccWriteTime@tempHourWDay 000A  
               __pnvCOMRAM 0042                  ?_RtccWrOn 0001             lcd_send_byte@n 0003  
                  ?___wmul 0001              _read_keyboard 0F82               ?_Delay1KTCYx 0001  
        __end_of_Write_RTC 160C                 _lcd_comand 1DF4                  ?_caratula 0001  
               _lcd_gotoxy 1D62                    _RTCVALH 000F99                    _RTCVALL 000F98  
                ?_lcd_init 0001                  ?_lcd_putc 0001                    __Hparam 0000  
                  __Lparam 0000   __size_of_lcd_send_nibble 0076                 ??_RtccWrOn 0001  
                  ___awdiv 185E          __end_of_lcd_putrs 1B94             ?_read_keyboard 0001  
          __size_of___wmul 0028                    ___lwdiv 1AE4                    ___lwmod 1BE4  
             __psmallconst 0F00                _RtccTimeVal 0027                    __pcinit 1CC4  
                  _fecha_d 0045                    _fecha_u 0046                    __ramtop 0F00  
                  __ptext0 19F2                    __ptext1 1B94                    __ptext2 1974  
                  __ptext3 1DA8                    __ptext4 0F82                    __ptext5 1260  
                  __ptext6 1D86                    __ptext7 1D3A                    __ptext8 1BE4  
                  __ptext9 1AE4                    _buffer2 0078                  _T1CONbits 000FCD  
                  _dpowers 0F01                    _isdigit 1D86                 ??_caratula 0006  
                  _segundo 0037                    _sprintf 1260                 ??_lcd_init 0005  
               ??_lcd_putc 0008       end_of_initialization 1CFE       lcd_send_byte@address 0004  
            __Lmediumconst 0000                    postdec1 000FE5                    postdec2 000FDD  
                  postinc0 000FEE                    postinc2 000FDE                 _set_vision 1B94  
    __end_of_lcd_send_byte 1D3A                  _PORTAbits 000F80                  _PORTCbits 000F82  
         __CFG_DSBOREN$OFF 000000                ?_lcd_comand 0001           __CFG_CPUDIV$OSC1 000000  
                _TRISBbits 000F93                ?_lcd_gotoxy 0005            _LCD_INIT_STRING 0F0B  
         __CFG_IOL1WAY$OFF 000000  RtccWriteDate@tempDayMonth 000A        __CFG_MSSP7B_EN$MSK7 000000  
          ??_read_keyboard 0024           Delay100TCYx@unit 0001                 _write_Date 1974  
           __end_of___wmul 1D62              __pidataCOMRAM 1E02  RtccWriteDate@tempHourWDay 000C  
        ??_lcd_send_nibble 0001       __size_of_Delay1KTCYx 0012           __CFG_DSWDTEN$OFF 000000  
      start_initialization 1CC4       RtccWriteTime@wasAlrm 0006       RtccWriteTime@wasWrEn 0007  
   __size_of_RtccWriteDate 0146            RtccWriteDate@di 0003     __size_of_RtccWriteTime 010C  
      __size_of_lcd_comand 000E        __size_of_lcd_gotoxy 0024                   ??___wmul 0005  
              ?_set_vision 0001          __size_of_RtccWrOn 0012            RtccWriteTime@di 0003  
         __CFG_LPT1OSC$OFF 000000                _ALRMCFGbits 000F91    __end_of_LCD_INIT_STRING 0F0F  
              __pbssCOMRAM 0027                  _Write_RTC 14C4               _isdigit$2318 0002  
        __size_of_caratula 0008            Delay1KTCYx@unit 0001          __size_of_lcd_init 0080  
              sprintf@flag 001D          __size_of_lcd_putc 004C                sprintf@prec 0020  
         ___lwdiv@dividend 0001              ?_Delay100TCYx 0001                   ?___awdiv 0001  
                 ?___lwdiv 0001                ?_write_Date 0001                   ?___lwmod 0008  
  RtccWriteTime@tempMinSec 0008                  _lcd_putrs 1B40              _RtccWriteDate 160C  
              __smallconst 0F00              _RtccWriteTime 1752                   ?_isdigit 0001  
     __CFG_RTCOSC$T1OSCREF 000000             __size_of_Setup 0048                 ?_Write_RTC 0001  
         ___lwdiv@quotient 0005             __size_of_clear 0016                   ?_sprintf 000D  
      __size_of_set_vision 0050           _RtccAlrmTimeDate 0060             ___wmul@product 0005  
                 _LATAbits 000F89                   _LATBbits 000F8A                   _PIE3bits 000FA3  
                _segundo_d 004D             ??_Delay100TCYx 0001                  _segundo_u 004E  
         __CFG_WDTPS$32768 000000         RtccWriteDate@wasOn 0005         _Rtcc_read_TimeDate 0070  
           ?_RtccWriteDate 0001                 ?_lcd_putrs 0009          ___wmul@multiplier 0001  
           ?_RtccWriteTime 0001                  lcd_init@i 0005               ??_lcd_comand 0005  
                main@input 0026                  lcd_putc@c 0008               ??_lcd_gotoxy 0006  
                copy_data0 1CF2        __size_of_write_Date 007E            _lcd_send_nibble 1A6E  
                 __Hrparam 0000                   _RtccDate 003A                   __Lrparam 0000  
                 _RtccTime 003E                   _RtccWrOn 1DE2         __end_of_lcd_comand 1E02  
       __end_of_lcd_gotoxy 1D86           __size_of___awdiv 0096           __size_of___lwdiv 005C  
         __size_of___lwmod 004C               _RtccTimeDate 0068                 sprintf@val 001E  
                 _caratula 1E10           __size_of_isdigit 0022            ___lwdiv@divisor 0003  
              ??_Write_RTC 000E            ___lwdiv@counter 0007                   __ptext10 1B40  
                 __ptext11 1C30                   __ptext20 1DD0                   __ptext12 1D62  
                 __ptext21 14C4                   __ptext13 1E10                   __ptext22 185E  
                 __ptext14 1C7C                   __ptext23 1752                   __ptext15 18F4  
                 __ptext24 160C                   __ptext16 1DBE                   __ptext25 1DE2  
                 __ptext17 1DF4                   __ptext18 1D08                   __ptext19 1A6E  
                 _lcd_init 18F4                   _lcd_putc 1C30           __size_of_sprintf 0264  
   __size_of_lcd_send_byte 0032              __size_of_main 007C                   _minuto_d 004B  
                 _minuto_u 004C               ??_set_vision 0024      __end_of_read_keyboard 1260  
            ??_Delay1KTCYx 0001            ??_RtccWriteDate 0004            ??_RtccWriteTime 0004  
              ??_lcd_putrs 000B                _OSCTUNEbits 000F9B                 _INTCONbits 000FF2  
       RtccWriteTime@wasOn 0005       __end_of_Delay100TCYx 1DE2                   isdigit@c 0003  
                sprintf@ap 001B    __end_of_lcd_send_nibble 1AE4                  sprintf@sp 000D  
       __end_of_set_vision 1BE4           ___lwmod@dividend 0008                 _OSCCONbits 000FD3  
    RtccWriteDate@tempYear 0007               ??_write_Date 0024              _lcd_send_byte 1D08  
               _RTCCFGbits 000F3F                   sprintf@c 0023                   sprintf@f 000F  
          ___lwmod@divisor 000A        __end_of_Delay1KTCYx 1DD0            ___lwmod@counter 000C  
     RtccWriteDate@wasAlrm 0006       RtccWriteDate@wasWrEn 0009         __end_of_write_Date 19F2  
    lcd_send_nibble@nibble 0002  
