

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Sep 08 19:58:52 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    71                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    72  0000                     
    73                           	psect	idataBANK0
    74  003186                     __pidataBANK0:
    75                           	opt stack 0
    76                           
    77                           ;initializer for _anio
    78  003186  000F               	dw	15
    79                           
    80                           ;initializer for _dia
    81  003188  0008               	dw	8
    82                           
    83                           ;initializer for _diasem
    84  00318A  0003               	dw	3
    85                           
    86                           ;initializer for _hora
    87  00318C  0012               	dw	18
    88                           
    89                           ;initializer for _mes
    90  00318E  0009               	dw	9
    91                           
    92                           ;initializer for _minuto
    93  003190  001E               	dw	30
    94                           
    95                           ;initializer for _password
    96  003192  04D2               	dw	1234
    97                           
    98                           ;initializer for _key
    99  003194  12                 	db	18
   100                           
   101                           ;initializer for _state_alarm
   102  003195  02                 	db	2
   103                           
   104                           	psect	smallconst
   105  000F00                     __psmallconst:
   106                           	opt stack 0
   107  000F00  00                 	db	0
   108  000F01                     _dpowers:
   109                           	opt stack 0
   110  000F01  0001               	dw	1
   111  000F03  000A               	dw	10
   112  000F05  0064               	dw	100
   113  000F07  03E8               	dw	1000
   114  000F09  2710               	dw	10000
   115  000F0B                     __end_of_dpowers:
   116                           	opt stack 0
   117  000F0B                     _LCD_INIT_STRING:
   118                           	opt stack 0
   119  000F0B  28                 	db	40
   120  000F0C  0C                 	db	12
   121  000F0D  01                 	db	1
   122  000F0E  06                 	db	6
   123  000F0F                     __end_of_LCD_INIT_STRING:
   124                           	opt stack 0
   125  000F0F                     exp@coeff:
   126                           	opt stack 0
   127  000F0F  00                 	db	0
   128  000F10  80                 	db	128
   129  000F11  3F                 	db	63
   130  000F12  72                 	db	114
   131  000F13  31                 	db	49
   132  000F14  3F                 	db	63
   133  000F15  FE                 	db	254
   134  000F16  75                 	db	117
   135  000F17  3E                 	db	62
   136  000F18  58                 	db	88
   137  000F19  63                 	db	99
   138  000F1A  3D                 	db	61
   139  000F1B  95                 	db	149
   140  000F1C  1D                 	db	29
   141  000F1D  3C                 	db	60
   142  000F1E  C5                 	db	197
   143  000F1F  AE                 	db	174
   144  000F20  3A                 	db	58
   145  000F21  79                 	db	121
   146  000F22  21                 	db	33
   147  000F23  39                 	db	57
   148  000F24  94                 	db	148
   149  000F25  80                 	db	128
   150  000F26  37                 	db	55
   151  000F27  93                 	db	147
   152  000F28  A7                 	db	167
   153  000F29  35                 	db	53
   154  000F2A  56                 	db	86
   155  000F2B  15                 	db	21
   156  000F2C  34                 	db	52
   157  000F2D                     __end_ofexp@coeff:
   158                           	opt stack 0
   159  000F2D                     log@coeff:
   160                           	opt stack 0
   161  000F2D  00                 	db	0
   162  000F2E  00                 	db	0
   163  000F2F  00                 	db	0
   164  000F30  00                 	db	0
   165  000F31  80                 	db	128
   166  000F32  3F                 	db	63
   167  000F33  F0                 	db	240
   168  000F34  FF                 	db	255
   169  000F35  BE                 	db	190
   170  000F36  E2                 	db	226
   171  000F37  A9                 	db	169
   172  000F38  3E                 	db	62
   173  000F39  83                 	db	131
   174  000F3A  76                 	db	118
   175  000F3B  BE                 	db	190
   176  000F3C  AE                 	db	174
   177  000F3D  2B                 	db	43
   178  000F3E  3E                 	db	62
   179  000F3F  3C                 	db	60
   180  000F40  C3                 	db	195
   181  000F41  BD                 	db	189
   182  000F42  D2                 	db	210
   183  000F43  13                 	db	19
   184  000F44  3D                 	db	61
   185  000F45  78                 	db	120
   186  000F46  D3                 	db	211
   187  000F47  BB                 	db	187
   188  000F48                     __end_oflog@coeff:
   189                           	opt stack 0
   190  000F48                     STR_1:
   191                           
   192                           ; BSR set to: 15
   193  000F48  20                 	db	32
   194  000F49  20                 	db	32
   195  000F4A  20                 	db	32
   196  000F4B  20                 	db	32
   197  000F4C  20                 	db	32
   198  000F4D  20                 	db	32
   199  000F4E  20                 	db	32
   200  000F4F  20                 	db	32
   201  000F50  20                 	db	32
   202  000F51  20                 	db	32
   203  000F52  20                 	db	32
   204  000F53  20                 	db	32
   205  000F54  20                 	db	32
   206  000F55  20                 	db	32
   207  000F56  20                 	db	32
   208  000F57  20                 	db	32
   209  000F58  20                 	db	32
   210  000F59  20                 	db	32
   211  000F5A  20                 	db	32
   212  000F5B  20                 	db	32
   213  000F5C  20                 	db	32
   214  000F5D  20                 	db	32
   215  000F5E  20                 	db	32
   216  000F5F  20                 	db	32
   217  000F60  20                 	db	32
   218  000F61  20                 	db	32
   219  000F62  20                 	db	32
   220  000F63  20                 	db	32
   221  000F64  20                 	db	32
   222  000F65  20                 	db	32
   223  000F66  20                 	db	32
   224  000F67  20                 	db	32
   225  000F68  00                 	db	0
   226  000F69                     STR_14:
   227                           
   228                           ; BSR set to: 15
   229  000F69  25                 	db	37
   230  000F6A  30                 	db	48	;'0'
   231  000F6B  32                 	db	50	;'2'
   232  000F6C  75                 	db	117	;'u'
   233  000F6D  2F                 	db	47
   234  000F6E  25                 	db	37
   235  000F6F  30                 	db	48	;'0'
   236  000F70  32                 	db	50	;'2'
   237  000F71  75                 	db	117	;'u'
   238  000F72  2F                 	db	47
   239  000F73  25                 	db	37
   240  000F74  30                 	db	48	;'0'
   241  000F75  32                 	db	50	;'2'
   242  000F76  75                 	db	117	;'u'
   243  000F77  00                 	db	0
   244  000F78                     STR_2:
   245                           
   246                           ; BSR set to: 15
   247  000F78  6E                 	db	110	;'n'
   248  000F79  75                 	db	117	;'u'
   249  000F7A  6C                 	db	108	;'l'
   250  000F7B  6C                 	db	108	;'l'
   251  000F7C  20                 	db	32
   252  000F7D  70                 	db	112	;'p'
   253  000F7E  6F                 	db	111	;'o'
   254  000F7F  69                 	db	105	;'i'
   255  000F80  6E                 	db	110	;'n'
   256  000F81  74                 	db	116	;'t'
   257  000F82  65                 	db	101	;'e'
   258  000F83  72                 	db	114	;'r'
   259  000F84  00                 	db	0
   260  000F85                     STR_16:
   261                           
   262                           ; BSR set to: 15
   263  000F85  57                 	db	87	;'W'
   264  000F86  41                 	db	65	;'A'
   265  000F87  52                 	db	82	;'R'
   266  000F88  4E                 	db	78	;'N'
   267  000F89  49                 	db	73	;'I'
   268  000F8A  4E                 	db	78	;'N'
   269  000F8B  47                 	db	71	;'G'
   270  000F8C  21                 	db	33
   271  000F8D  21                 	db	33
   272  000F8E  21                 	db	33
   273  000F8F  00                 	db	0
   274  000F90                     STR_18:
   275                           
   276                           ; BSR set to: 15
   277  000F90  70                 	db	112	;'p'
   278  000F91  61                 	db	97	;'a'
   279  000F92  73                 	db	115	;'s'
   280  000F93  73                 	db	115	;'s'
   281  000F94  3A                 	db	58	;':'
   282  000F95  5F                 	db	95	;'_'
   283  000F96  5F                 	db	95	;'_'
   284  000F97  5F                 	db	95	;'_'
   285  000F98  5F                 	db	95	;'_'
   286  000F99  00                 	db	0
   287  000F9A                     STR_15:
   288                           
   289                           ; BSR set to: 15
   290  000F9A  25                 	db	37
   291  000F9B  30                 	db	48	;'0'
   292  000F9C  32                 	db	50	;'2'
   293  000F9D  75                 	db	117	;'u'
   294  000F9E  3A                 	db	58	;':'
   295  000F9F  25                 	db	37
   296  000FA0  30                 	db	48	;'0'
   297  000FA1  32                 	db	50	;'2'
   298  000FA2  75                 	db	117	;'u'
   299  000FA3  00                 	db	0
   300  000FA4                     STR_3:
   301                           
   302                           ; BSR set to: 15
   303  000FA4  65                 	db	101	;'e'
   304  000FA5  78                 	db	120	;'x'
   305  000FA6  63                 	db	99	;'c'
   306  000FA7  65                 	db	101	;'e'
   307  000FA8  70                 	db	112	;'p'
   308  000FA9  74                 	db	116	;'t'
   309  000FAA  69                 	db	105	;'i'
   310  000FAB  6F                 	db	111	;'o'
   311  000FAC  6E                 	db	110	;'n'
   312  000FAD  00                 	db	0
   313  000FAE                     STR_21:
   314                           
   315                           ; BSR set to: 15
   316  000FAE  54                 	db	84	;'T'
   317  000FAF  52                 	db	82	;'R'
   318  000FB0  49                 	db	73	;'I'
   319  000FB1  47                 	db	71	;'G'
   320  000FB2  47                 	db	71	;'G'
   321  000FB3  45                 	db	69	;'E'
   322  000FB4  44                 	db	68	;'D'
   323  000FB5  00                 	db	0
   324  000FB6                     STR_4:
   325                           
   326                           ; BSR set to: 15
   327  000FB6  25                 	db	37
   328  000FB7  30                 	db	48	;'0'
   329  000FB8  31                 	db	49	;'1'
   330  000FB9  75                 	db	117	;'u'
   331  000FBA  00                 	db	0
   332  000FBB                     STR_20:
   333                           
   334                           ; BSR set to: 15
   335  000FBB  4F                 	db	79	;'O'
   336  000FBC  46                 	db	70	;'F'
   337  000FBD  46                 	db	70	;'F'
   338  000FBE  00                 	db	0
   339  000FBF                     STR_19:
   340                           
   341                           ; BSR set to: 15
   342  000FBF  4F                 	db	79	;'O'
   343  000FC0  4E                 	db	78	;'N'
   344  000FC1  00                 	db	0
   345  0000                     
   346                           ; #config settings
   347  000FC2  00                 	db	0	; dummy byte at the end
   348  0000                     
   349                           	psect	nvBANK0
   350  0000CF                     __pnvBANK0:
   351                           	opt stack 0
   352  0000CF                     _anio_d:
   353                           	opt stack 0
   354  0000CF                     	ds	1
   355  0000D0                     _anio_u:
   356                           	opt stack 0
   357  0000D0                     	ds	1
   358  0000D1                     _dia_semana:
   359                           	opt stack 0
   360  0000D1                     	ds	1
   361  0000D2                     _fecha_d:
   362                           	opt stack 0
   363  0000D2                     	ds	1
   364  0000D3                     _fecha_u:
   365                           	opt stack 0
   366  0000D3                     	ds	1
   367  0000D4                     _hora_d:
   368                           	opt stack 0
   369  0000D4                     	ds	1
   370  0000D5                     _hora_u:
   371                           	opt stack 0
   372  0000D5                     	ds	1
   373  0000D6                     _mes_d:
   374                           	opt stack 0
   375  0000D6                     	ds	1
   376  0000D7                     _mes_u:
   377                           	opt stack 0
   378  0000D7                     	ds	1
   379  0000D8                     _minuto_d:
   380                           	opt stack 0
   381  0000D8                     	ds	1
   382  0000D9                     _minuto_u:
   383                           	opt stack 0
   384  0000D9                     	ds	1
   385  0000DA                     _segundo_d:
   386                           	opt stack 0
   387  0000DA                     	ds	1
   388  0000DB                     _segundo_u:
   389                           	opt stack 0
   390  0000DB                     	ds	1
   391  0000                     _ANCON0	set	3912
   392  0000                     _ANCON1	set	3913
   393  0000                     _RTCCFG	set	3903
   394  0000                     _RTCCFGbits	set	3903
   395  0000                     _ADCON0	set	4034
   396  0000                     _ADCON1	set	4033
   397  0000                     _ALRMCFGbits	set	3985
   398  0000                     _EECON2	set	4007
   399  0000                     _INTCONbits	set	4082
   400  0000                     _LATAbits	set	3977
   401  0000                     _LATBbits	set	3978
   402  0000                     _OSCCONbits	set	4051
   403  0000                     _OSCTUNEbits	set	3995
   404  0000                     _PIE3bits	set	4003
   405  0000                     _PORTAbits	set	3968
   406  0000                     _PORTCbits	set	3970
   407  0000                     _RTCVALH	set	3993
   408  0000                     _RTCVALL	set	3992
   409  0000                     _T1CONbits	set	4045
   410  0000                     _TRISA	set	3986
   411  0000                     _TRISB	set	3987
   412  0000                     _TRISBbits	set	3987
   413  0000                     _TRISC	set	3988
   414                           
   415                           	psect	cinit
   416  002F50                     __pcinit:
   417                           	opt stack 0
   418  002F50                     start_initialization:
   419                           	opt stack 0
   420  002F50                     __initialization:
   421                           	opt stack 0
   422                           
   423                           ; Clear objects allocated to BITBANK0 (1 bytes)
   424  002F50  0100               	movlb	0
   425  002F52  6BDC               	clrf	(__pbitbssBANK0/(0+8))& (0+255),b
   426                           
   427                           ; Clear objects allocated to BANK0 (72 bytes)
   428  002F54  EE00  F060         	lfsr	0,__pbssBANK0
   429  002F58  0E48               	movlw	72
   430  002F5A                     clear_0:
   431  002F5A  6AEE               	clrf	postinc0,c
   432  002F5C  06E8               	decf	wreg,f,c
   433  002F5E  E1FD               	bnz	clear_0
   434                           
   435                           ; Initialize objects allocated to BANK0 (16 bytes)
   436                           ; load TBLPTR registers with __pidataBANK0
   437  002F60  0E86               	movlw	low __pidataBANK0
   438  002F62  6EF6               	movwf	tblptrl,c
   439  002F64  0E31               	movlw	high __pidataBANK0
   440  002F66  6EF7               	movwf	tblptrh,c
   441  002F68  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   442  002F6A  6EF8               	movwf	tblptru,c
   443  002F6C  EE00  F0BF         	lfsr	0,__pdataBANK0
   444  002F70  EE10 F010          	lfsr	1,16
   445  002F74                     copy_data0:
   446  002F74  0009               	tblrd		*+
   447  002F76  CFF5 FFEE          	movff	tablat,postinc0
   448  002F7A  50E5               	movf	postdec1,w,c
   449  002F7C  50E1               	movf	fsr1l,w,c
   450  002F7E  E1FA               	bnz	copy_data0
   451  002F80                     end_of_initialization:
   452                           	opt stack 0
   453  002F80                     __end_of__initialization:
   454                           	opt stack 0
   455  002F80  0E00               	movlw	low (__Lmediumconst shr (0+16))
   456  002F82  6EF8               	movwf	tblptru,c
   457  002F84  0100               	movlb	0
   458  002F86  EFB5  F014         	goto	_main	;jump to C main() function
   459                           tblptru	equ	0xFF8
   460                           tblptrh	equ	0xFF7
   461                           tblptrl	equ	0xFF6
   462                           tablat	equ	0xFF5
   463                           postinc0	equ	0xFEE
   464                           wreg	equ	0xFE8
   465                           postdec1	equ	0xFE5
   466                           fsr1l	equ	0xFE1
   467                           
   468                           	psect	bitbssBANK0
   469  0006E0                     __pbitbssBANK0:
   470                           	opt stack 0
   471  0006E0                     _flag:
   472                           	opt stack 0
   473  0006E0                     	ds	1
   474                           tblptru	equ	0xFF8
   475                           tblptrh	equ	0xFF7
   476                           tblptrl	equ	0xFF6
   477                           tablat	equ	0xFF5
   478                           postinc0	equ	0xFEE
   479                           wreg	equ	0xFE8
   480                           postdec1	equ	0xFE5
   481                           fsr1l	equ	0xFE1
   482                           
   483                           	psect	bssBANK0
   484  000060                     __pbssBANK0:
   485                           	opt stack 0
   486  000060                     _RtccAlrmTimeDate:
   487                           	opt stack 0
   488  000060                     	ds	8
   489  000068                     _RtccTimeDate:
   490                           	opt stack 0
   491  000068                     	ds	8
   492  000070                     _Rtcc_read_TimeDate:
   493                           	opt stack 0
   494  000070                     	ds	8
   495  000078                     _RtccTimeVal:
   496                           	opt stack 0
   497  000078                     	ds	4
   498  00007C                     _a:
   499                           	opt stack 0
   500  00007C                     	ds	2
   501  00007E                     _b:
   502                           	opt stack 0
   503  00007E                     	ds	2
   504  000080                     _c:
   505                           	opt stack 0
   506  000080                     	ds	2
   507  000082                     _errno:
   508                           	opt stack 0
   509  000082                     	ds	2
   510  000084                     _i:
   511                           	opt stack 0
   512  000084                     	ds	2
   513  000086                     _j:
   514                           	opt stack 0
   515  000086                     	ds	2
   516  000088                     _k:
   517                           	opt stack 0
   518  000088                     	ds	2
   519  00008A                     _segundo:
   520                           	opt stack 0
   521  00008A                     	ds	2
   522  00008C                     _buffer2:
   523                           	opt stack 0
   524  00008C                     	ds	20
   525  0000A0                     _RtccDate:
   526                           	opt stack 0
   527  0000A0                     	ds	4
   528  0000A4                     _RtccTime:
   529                           	opt stack 0
   530  0000A4                     	ds	4
   531                           tblptru	equ	0xFF8
   532                           tblptrh	equ	0xFF7
   533                           tblptrl	equ	0xFF6
   534                           tablat	equ	0xFF5
   535                           postinc0	equ	0xFEE
   536                           wreg	equ	0xFE8
   537                           postdec1	equ	0xFE5
   538                           fsr1l	equ	0xFE1
   539                           
   540                           	psect	dataBANK0
   541  0000BF                     __pdataBANK0:
   542                           	opt stack 0
   543  0000BF                     _anio:
   544                           	opt stack 0
   545  0000BF                     	ds	2
   546  0000C1                     _dia:
   547                           	opt stack 0
   548  0000C1                     	ds	2
   549  0000C3                     _diasem:
   550                           	opt stack 0
   551  0000C3                     	ds	2
   552  0000C5                     _hora:
   553                           	opt stack 0
   554  0000C5                     	ds	2
   555  0000C7                     _mes:
   556                           	opt stack 0
   557  0000C7                     	ds	2
   558  0000C9                     _minuto:
   559                           	opt stack 0
   560  0000C9                     	ds	2
   561  0000CB                     _password:
   562                           	opt stack 0
   563  0000CB                     	ds	2
   564  0000CD                     _key:
   565                           	opt stack 0
   566  0000CD                     	ds	1
   567  0000CE                     _state_alarm:
   568                           	opt stack 0
   569  0000CE                     	ds	1
   570                           tblptru	equ	0xFF8
   571                           tblptrh	equ	0xFF7
   572                           tblptrl	equ	0xFF6
   573                           tablat	equ	0xFF5
   574                           postinc0	equ	0xFEE
   575                           wreg	equ	0xFE8
   576                           postdec1	equ	0xFE5
   577                           fsr1l	equ	0xFE1
   578                           
   579                           	psect	cstackBANK0
   580  0000A8                     __pcstackBANK0:
   581                           	opt stack 0
   582  0000A8                     _pow$2746:
   583                           	opt stack 0
   584                           
   585                           ; 3 bytes @ 0x0
   586  0000A8                     	ds	3
   587  0000AB                     _pow$2747:
   588                           	opt stack 0
   589                           
   590                           ; 3 bytes @ 0x3
   591  0000AB                     	ds	3
   592  0000AE                     pow@sign:
   593                           	opt stack 0
   594                           
   595                           ; 1 bytes @ 0x6
   596  0000AE                     	ds	1
   597  0000AF                     pow@yi:
   598                           	opt stack 0
   599                           
   600                           ; 4 bytes @ 0x7
   601  0000AF                     	ds	4
   602  0000B3                     _obtain_pass$2744:
   603                           	opt stack 0
   604                           
   605                           ; 3 bytes @ 0xB
   606  0000B3                     	ds	3
   607  0000B6                     _obtain_pass$2745:
   608                           	opt stack 0
   609                           
   610                           ; 3 bytes @ 0xE
   611  0000B6                     	ds	3
   612  0000B9                     set_vision@pass:
   613                           	opt stack 0
   614                           
   615                           ; 2 bytes @ 0x11
   616  0000B9                     	ds	2
   617  0000BB                     set_vision@input:
   618                           	opt stack 0
   619                           
   620                           ; 1 bytes @ 0x13
   621  0000BB                     	ds	1
   622  0000BC                     set_vision@digit:
   623                           	opt stack 0
   624                           
   625                           ; 2 bytes @ 0x14
   626  0000BC                     	ds	2
   627  0000BE                     main@input:
   628                           	opt stack 0
   629                           
   630                           ; 1 bytes @ 0x16
   631  0000BE                     	ds	1
   632                           tblptru	equ	0xFF8
   633                           tblptrh	equ	0xFF7
   634                           tblptrl	equ	0xFF6
   635                           tablat	equ	0xFF5
   636                           postinc0	equ	0xFEE
   637                           wreg	equ	0xFE8
   638                           postdec1	equ	0xFE5
   639                           fsr1l	equ	0xFE1
   640                           
   641                           	psect	cstackCOMRAM
   642  000001                     __pcstackCOMRAM:
   643                           	opt stack 0
   644  000001                     ??_isdigit:
   645  000001                     ??_lcd_send_nibble:
   646  000001                     ?___wmul:
   647                           	opt stack 0
   648  000001                     ?___awdiv:
   649                           	opt stack 0
   650  000001                     ?___lwdiv:
   651                           	opt stack 0
   652  000001                     ?___ftpack:
   653                           	opt stack 0
   654  000001                     ?_frexp:
   655                           	opt stack 0
   656  000001                     ?___ftneg:
   657                           	opt stack 0
   658  000001                     _is_not_letter$1329:
   659                           	opt stack 0
   660  000001                     Delay100TCYx@unit:
   661                           	opt stack 0
   662  000001                     Delay1KTCYx@unit:
   663                           	opt stack 0
   664  000001                     not_fill_pass@digit:
   665                           	opt stack 0
   666  000001                     checkPass@pass:
   667                           	opt stack 0
   668  000001                     RtccWriteDate@pDt:
   669                           	opt stack 0
   670  000001                     RtccWriteTime@pTm:
   671                           	opt stack 0
   672  000001                     ___wmul@multiplier:
   673                           	opt stack 0
   674  000001                     ___awdiv@dividend:
   675                           	opt stack 0
   676  000001                     ___lwdiv@dividend:
   677                           	opt stack 0
   678  000001                     ___ftpack@arg:
   679                           	opt stack 0
   680  000001                     ___ftge@ff1:
   681                           	opt stack 0
   682  000001                     ___ftneg@f1:
   683                           	opt stack 0
   684  000001                     frexp@value:
   685                           	opt stack 0
   686                           
   687                           ; 3 bytes @ 0x0
   688  000001                     	ds	1
   689  000002                     lcd_send_nibble@nibble:
   690                           	opt stack 0
   691  000002                     is_not_letter@input:
   692                           	opt stack 0
   693  000002                     _isdigit$2371:
   694                           	opt stack 0
   695                           
   696                           ; 1 bytes @ 0x1
   697  000002                     	ds	1
   698  000003                     lcd_send_byte@n:
   699                           	opt stack 0
   700  000003                     RtccWriteDate@di:
   701                           	opt stack 0
   702  000003                     RtccWriteTime@di:
   703                           	opt stack 0
   704  000003                     isdigit@c:
   705                           	opt stack 0
   706  000003                     review_code@digit:
   707                           	opt stack 0
   708  000003                     ___wmul@multiplicand:
   709                           	opt stack 0
   710  000003                     ___awdiv@divisor:
   711                           	opt stack 0
   712  000003                     ___lwdiv@divisor:
   713                           	opt stack 0
   714                           
   715                           ; 2 bytes @ 0x2
   716  000003                     	ds	1
   717  000004                     lcd_send_byte@address:
   718                           	opt stack 0
   719  000004                     ___ftpack@exp:
   720                           	opt stack 0
   721  000004                     frexp@eptr:
   722                           	opt stack 0
   723  000004                     ___ftge@ff2:
   724                           	opt stack 0
   725                           
   726                           ; 3 bytes @ 0x3
   727  000004                     	ds	1
   728  000005                     lcd_init@i:
   729                           	opt stack 0
   730  000005                     lcd_gotoxy@y:
   731                           	opt stack 0
   732  000005                     lcd_comand@d:
   733                           	opt stack 0
   734  000005                     lcd_setcursor_vb@blink:
   735                           	opt stack 0
   736  000005                     RtccWriteDate@wasOn:
   737                           	opt stack 0
   738  000005                     RtccWriteTime@wasOn:
   739                           	opt stack 0
   740  000005                     ___awdiv@counter:
   741                           	opt stack 0
   742  000005                     ___ftpack@sign:
   743                           	opt stack 0
   744  000005                     review_code@pass:
   745                           	opt stack 0
   746  000005                     ___wmul@product:
   747                           	opt stack 0
   748  000005                     ___lwdiv@quotient:
   749                           	opt stack 0
   750                           
   751                           ; 2 bytes @ 0x4
   752  000005                     	ds	1
   753  000006                     ??___ftpack:
   754  000006                     ??_frexp:
   755  000006                     ??_clear:
   756  000006                     lcd_gotoxy@x:
   757                           	opt stack 0
   758  000006                     lcd_setcursor_vb@visible:
   759                           	opt stack 0
   760  000006                     RtccWriteDate@wasAlrm:
   761                           	opt stack 0
   762  000006                     RtccWriteTime@wasAlrm:
   763                           	opt stack 0
   764  000006                     ___awdiv@sign:
   765                           	opt stack 0
   766                           
   767                           ; 1 bytes @ 0x5
   768  000006                     	ds	1
   769  000007                     ??___ftge:
   770  000007                     lcd_gotoxy@address:
   771                           	opt stack 0
   772  000007                     RtccWriteTime@wasWrEn:
   773                           	opt stack 0
   774  000007                     ___lwdiv@counter:
   775                           	opt stack 0
   776  000007                     RtccWriteDate@tempYear:
   777                           	opt stack 0
   778  000007                     ___awdiv@quotient:
   779                           	opt stack 0
   780                           
   781                           ; 2 bytes @ 0x6
   782  000007                     	ds	1
   783  000008                     ?___lwmod:
   784                           	opt stack 0
   785  000008                     lcd_putc@c:
   786                           	opt stack 0
   787  000008                     next_code@digit:
   788                           	opt stack 0
   789  000008                     RtccWriteTime@tempMinSec:
   790                           	opt stack 0
   791  000008                     ___lwmod@dividend:
   792                           	opt stack 0
   793                           
   794                           ; 2 bytes @ 0x7
   795  000008                     	ds	1
   796  000009                     ?___ftdiv:
   797                           	opt stack 0
   798  000009                     ?___awtoft:
   799                           	opt stack 0
   800  000009                     ?___lbtoft:
   801                           	opt stack 0
   802  000009                     ?___lltoft:
   803                           	opt stack 0
   804  000009                     RtccWriteDate@wasWrEn:
   805                           	opt stack 0
   806  000009                     lcd_putrs@ptr:
   807                           	opt stack 0
   808  000009                     __delay_s@millis:
   809                           	opt stack 0
   810  000009                     ___awtoft@c:
   811                           	opt stack 0
   812  000009                     ___ftdiv@f1:
   813                           	opt stack 0
   814  000009                     ___lltoft@c:
   815                           	opt stack 0
   816                           
   817                           ; 4 bytes @ 0x8
   818  000009                     	ds	1
   819  00000A                     next_code@input:
   820                           	opt stack 0
   821  00000A                     RtccWriteDate@tempDayMonth:
   822                           	opt stack 0
   823  00000A                     RtccWriteTime@tempHourWDay:
   824                           	opt stack 0
   825  00000A                     ___lwmod@divisor:
   826                           	opt stack 0
   827                           
   828                           ; 2 bytes @ 0x9
   829  00000A                     	ds	1
   830  00000B                     ??__delay_s:
   831  00000B                     set_desactive_vision@digit:
   832                           	opt stack 0
   833                           
   834                           ; 2 bytes @ 0xA
   835  00000B                     	ds	1
   836  00000C                     ??_next_code:
   837  00000C                     ___awtoft@sign:
   838                           	opt stack 0
   839  00000C                     ___lbtoft@c:
   840                           	opt stack 0
   841  00000C                     ___lwmod@counter:
   842                           	opt stack 0
   843  00000C                     __delay_s@it:
   844                           	opt stack 0
   845  00000C                     RtccWriteDate@tempHourWDay:
   846                           	opt stack 0
   847  00000C                     ___ftdiv@f2:
   848                           	opt stack 0
   849                           
   850                           ; 3 bytes @ 0xB
   851  00000C                     	ds	1
   852  00000D                     ??___lltoft:
   853  00000D                     ?_sprintf:
   854                           	opt stack 0
   855  00000D                     ?___ftmul:
   856                           	opt stack 0
   857  00000D                     sprintf@sp:
   858                           	opt stack 0
   859  00000D                     ___ftmul@f1:
   860                           	opt stack 0
   861                           
   862                           ; 3 bytes @ 0xC
   863  00000D                     	ds	1
   864  00000E                     __delay_s@index:
   865                           	opt stack 0
   866                           
   867                           ; 2 bytes @ 0xD
   868  00000E                     	ds	1
   869  00000F                     ??___ftdiv:
   870  00000F                     sprintf@f:
   871                           	opt stack 0
   872                           
   873                           ; 2 bytes @ 0xE
   874  00000F                     	ds	1
   875  000010                     ___ftmul@f2:
   876                           	opt stack 0
   877                           
   878                           ; 3 bytes @ 0xF
   879  000010                     	ds	1
   880  000011                     ___lltoft@exp:
   881                           	opt stack 0
   882                           
   883                           ; 1 bytes @ 0x10
   884  000011                     	ds	1
   885  000012                     ___ftdiv@cntr:
   886                           	opt stack 0
   887                           
   888                           ; 1 bytes @ 0x11
   889  000012                     	ds	1
   890  000013                     ??___ftmul:
   891  000013                     ___ftdiv@f3:
   892                           	opt stack 0
   893                           
   894                           ; 3 bytes @ 0x12
   895  000013                     	ds	3
   896  000016                     ___ftdiv@exp:
   897                           	opt stack 0
   898  000016                     ___ftmul@exp:
   899                           	opt stack 0
   900                           
   901                           ; 1 bytes @ 0x15
   902  000016                     	ds	1
   903  000017                     ??_sprintf:
   904  000017                     ___ftdiv@sign:
   905                           	opt stack 0
   906  000017                     ___ftmul@f3_as_product:
   907                           	opt stack 0
   908                           
   909                           ; 3 bytes @ 0x16
   910  000017                     	ds	3
   911  00001A                     ___ftmul@cntr:
   912                           	opt stack 0
   913                           
   914                           ; 1 bytes @ 0x19
   915  00001A                     	ds	1
   916  00001B                     ___ftmul@sign:
   917                           	opt stack 0
   918  00001B                     sprintf@ap:
   919                           	opt stack 0
   920                           
   921                           ; 2 bytes @ 0x1A
   922  00001B                     	ds	1
   923  00001C                     ?___ftadd:
   924                           	opt stack 0
   925  00001C                     ___ftadd@f1:
   926                           	opt stack 0
   927                           
   928                           ; 3 bytes @ 0x1B
   929  00001C                     	ds	1
   930  00001D                     sprintf@flag:
   931                           	opt stack 0
   932                           
   933                           ; 1 bytes @ 0x1C
   934  00001D                     	ds	1
   935  00001E                     sprintf@val:
   936                           	opt stack 0
   937                           
   938                           ; 2 bytes @ 0x1D
   939  00001E                     	ds	1
   940  00001F                     ___ftadd@f2:
   941                           	opt stack 0
   942                           
   943                           ; 3 bytes @ 0x1E
   944  00001F                     	ds	1
   945  000020                     sprintf@prec:
   946                           	opt stack 0
   947                           
   948                           ; 1 bytes @ 0x1F
   949  000020                     	ds	1
   950  000021                     sprintf@width:
   951                           	opt stack 0
   952                           
   953                           ; 2 bytes @ 0x20
   954  000021                     	ds	1
   955  000022                     ??___ftadd:
   956                           
   957                           ; 0 bytes @ 0x21
   958  000022                     	ds	1
   959  000023                     sprintf@c:
   960                           	opt stack 0
   961                           
   962                           ; 1 bytes @ 0x22
   963  000023                     	ds	1
   964  000024                     ??_read_keyboard:
   965  000024                     
   966                           ; 0 bytes @ 0x23
   967  000024                     	ds	1
   968  000025                     twinkle@input:
   969                           	opt stack 0
   970  000025                     ___ftadd@sign:
   971                           	opt stack 0
   972                           
   973                           ; 1 bytes @ 0x24
   974  000025                     	ds	1
   975  000026                     ___ftadd@exp2:
   976                           	opt stack 0
   977                           
   978                           ; 1 bytes @ 0x25
   979  000026                     	ds	1
   980  000027                     ___ftadd@exp1:
   981                           	opt stack 0
   982                           
   983                           ; 1 bytes @ 0x26
   984  000027                     	ds	1
   985  000028                     ?___ftsub:
   986                           	opt stack 0
   987  000028                     ?_eval_poly:
   988                           	opt stack 0
   989  000028                     ?___fttol:
   990                           	opt stack 0
   991  000028                     ___ftsub@f1:
   992                           	opt stack 0
   993  000028                     ___fttol@f1:
   994                           	opt stack 0
   995  000028                     eval_poly@x:
   996                           	opt stack 0
   997                           
   998                           ; 3 bytes @ 0x27
   999  000028                     	ds	3
  1000  00002B                     eval_poly@d:
  1001                           	opt stack 0
  1002  00002B                     ___ftsub@f2:
  1003                           	opt stack 0
  1004                           
  1005                           ; 3 bytes @ 0x2A
  1006  00002B                     	ds	1
  1007  00002C                     ??___fttol:
  1008                           
  1009                           ; 0 bytes @ 0x2B
  1010  00002C                     	ds	1
  1011  00002D                     eval_poly@n:
  1012                           	opt stack 0
  1013                           
  1014                           ; 2 bytes @ 0x2C
  1015  00002D                     	ds	1
  1016  00002E                     
  1017                           ; 0 bytes @ 0x2D
  1018  00002E                     	ds	1
  1019  00002F                     ??_eval_poly:
  1020                           
  1021                           ; 0 bytes @ 0x2E
  1022  00002F                     	ds	2
  1023  000031                     ___fttol@sign1:
  1024                           	opt stack 0
  1025  000031                     eval_poly@res:
  1026                           	opt stack 0
  1027                           
  1028                           ; 3 bytes @ 0x30
  1029  000031                     	ds	1
  1030  000032                     ___fttol@lval:
  1031                           	opt stack 0
  1032                           
  1033                           ; 4 bytes @ 0x31
  1034  000032                     	ds	2
  1035  000034                     ?_log:
  1036                           	opt stack 0
  1037  000034                     ?_ldexp:
  1038                           	opt stack 0
  1039  000034                     ldexp@value:
  1040                           	opt stack 0
  1041  000034                     log@x:
  1042                           	opt stack 0
  1043                           
  1044                           ; 3 bytes @ 0x33
  1045  000034                     	ds	2
  1046  000036                     ___fttol@exp1:
  1047                           	opt stack 0
  1048                           
  1049                           ; 1 bytes @ 0x35
  1050  000036                     	ds	1
  1051  000037                     ?___altoft:
  1052                           	opt stack 0
  1053  000037                     ldexp@newexp:
  1054                           	opt stack 0
  1055  000037                     log@exponent:
  1056                           	opt stack 0
  1057  000037                     ___altoft@c:
  1058                           	opt stack 0
  1059                           
  1060                           ; 4 bytes @ 0x36
  1061  000037                     	ds	2
  1062  000039                     ??_ldexp:
  1063                           
  1064                           ; 0 bytes @ 0x38
  1065  000039                     	ds	2
  1066  00003B                     ??___altoft:
  1067                           
  1068                           ; 0 bytes @ 0x3A
  1069  00003B                     	ds	4
  1070  00003F                     ___altoft@exp:
  1071                           	opt stack 0
  1072                           
  1073                           ; 1 bytes @ 0x3E
  1074  00003F                     	ds	1
  1075  000040                     ___altoft@sign:
  1076                           	opt stack 0
  1077                           
  1078                           ; 1 bytes @ 0x3F
  1079  000040                     	ds	1
  1080  000041                     ?_floor:
  1081                           	opt stack 0
  1082  000041                     floor@x:
  1083                           	opt stack 0
  1084                           
  1085                           ; 3 bytes @ 0x40
  1086  000041                     	ds	3
  1087  000044                     floor@i:
  1088                           	opt stack 0
  1089                           
  1090                           ; 3 bytes @ 0x43
  1091  000044                     	ds	3
  1092  000047                     floor@expon:
  1093                           	opt stack 0
  1094                           
  1095                           ; 2 bytes @ 0x46
  1096  000047                     	ds	2
  1097  000049                     ?_exp:
  1098                           	opt stack 0
  1099  000049                     exp@x:
  1100                           	opt stack 0
  1101                           
  1102                           ; 3 bytes @ 0x48
  1103  000049                     	ds	3
  1104  00004C                     _exp$2748:
  1105                           	opt stack 0
  1106                           
  1107                           ; 3 bytes @ 0x4B
  1108  00004C                     	ds	3
  1109  00004F                     exp@exponent:
  1110                           	opt stack 0
  1111                           
  1112                           ; 2 bytes @ 0x4E
  1113  00004F                     	ds	2
  1114  000051                     exp@sign:
  1115                           	opt stack 0
  1116                           
  1117                           ; 1 bytes @ 0x50
  1118  000051                     	ds	1
  1119  000052                     ?_pow:
  1120                           	opt stack 0
  1121  000052                     pow@x:
  1122                           	opt stack 0
  1123                           
  1124                           ; 3 bytes @ 0x51
  1125  000052                     	ds	3
  1126  000055                     pow@y:
  1127                           	opt stack 0
  1128                           
  1129                           ; 3 bytes @ 0x54
  1130  000055                     	ds	3
  1131  000058                     ?_obtain_pass:
  1132                           	opt stack 0
  1133  000058                     obtain_pass@pass:
  1134                           	opt stack 0
  1135                           
  1136                           ; 2 bytes @ 0x57
  1137  000058                     	ds	2
  1138  00005A                     obtain_pass@input:
  1139                           	opt stack 0
  1140                           
  1141                           ; 1 bytes @ 0x59
  1142  00005A                     	ds	1
  1143  00005B                     obtain_pass@digit:
  1144                           	opt stack 0
  1145                           
  1146                           ; 2 bytes @ 0x5A
  1147  00005B                     	ds	2
  1148  00005D                     ??_obtain_pass:
  1149                           
  1150                           ; 0 bytes @ 0x5C
  1151  00005D                     	ds	2
  1152  00005F                     ??_main:
  1153                           
  1154                           ; 0 bytes @ 0x5E
  1155  00005F                     	ds	1
  1156                           tblptru	equ	0xFF8
  1157                           tblptrh	equ	0xFF7
  1158                           tblptrl	equ	0xFF6
  1159                           tablat	equ	0xFF5
  1160                           postinc0	equ	0xFEE
  1161                           wreg	equ	0xFE8
  1162                           postdec1	equ	0xFE5
  1163                           fsr1l	equ	0xFE1
  1164                           
  1165 ;;
  1166 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1167 ;;
  1168 ;; *************** function _main *****************
  1169 ;; Defined at:
  1170 ;;		line 87 in file "main.c"
  1171 ;; Parameters:    Size  Location     Type
  1172 ;;		None
  1173 ;; Auto vars:     Size  Location     Type
  1174 ;;  input           1   22[BANK0 ] unsigned char 
  1175 ;; Return value:  Size  Location     Type
  1176 ;;                  2   52[None  ] int 
  1177 ;; Registers used:
  1178 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1179 ;; Tracked objects:
  1180 ;;		On entry : 0/0
  1181 ;;		On exit  : 0/0
  1182 ;;		Unchanged: 0/0
  1183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1185 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1186 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1187 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1188 ;;Total ram usage:        2 bytes
  1189 ;; Hardware stack levels required when called:    8
  1190 ;; This function calls:
  1191 ;;		_Setup
  1192 ;;		_caratula
  1193 ;;		_lcd_gotoxy
  1194 ;;		_lcd_putrs
  1195 ;;		_read_keyboard
  1196 ;;		_set_vision
  1197 ;; This function is called by:
  1198 ;;		Startup code after reset
  1199 ;; This function uses a non-reentrant model
  1200 ;;
  1201                           
  1202                           	psect	text0
  1203  00296A                     __ptext0:
  1204                           	opt stack 0
  1205  00296A                     _main:
  1206                           	opt stack 23
  1207                           
  1208                           ;main.c: 88: Setup();
  1209                           
  1210                           ; BSR set to: 15
  1211                           ;incstack = 0
  1212  00296A  EC44  F017         	call	_Setup	;wreg free
  1213                           
  1214                           ;main.c: 89: caratula();
  1215  00296E  ECD6  F018         	call	_caratula	;wreg free
  1216  002972  D000               	goto	l4158
  1217  002974                     l4158:
  1218                           
  1219                           ;main.c: 94: set_vision();
  1220  002974  ECD5  F00D         	call	_set_vision	;wreg free
  1221                           
  1222                           ;main.c: 96: char input = read_keyboard();
  1223  002978  ECE2  F007         	call	_read_keyboard	;wreg free
  1224  00297C  0100               	movlb	0	; () banked
  1225  00297E  6FBE               	movwf	main@input& (0+255),b
  1226                           
  1227                           ; BSR set to: 0
  1228                           ;main.c: 98: if (input == 16){
  1229  002980  0E10               	movlw	16
  1230  002982  0100               	movlb	0	; () banked
  1231  002984  19BE               	xorwf	main@input& (0+255),w,b
  1232  002986  A4D8               	btfss	status,2,c
  1233  002988  D7F5               	goto	l4158
  1234                           
  1235                           ; BSR set to: 0
  1236                           ;main.c: 99: lcd_gotoxy(1,1);
  1237  00298A  0E01               	movlw	1
  1238  00298C  6E05               	movwf	lcd_gotoxy@y,c
  1239  00298E  0E01               	movlw	1
  1240  002990  EC58  F018         	call	_lcd_gotoxy
  1241                           
  1242                           ;main.c: 100: lcd_putrs("                                ");
  1243  002994  0E48               	movlw	low STR_1
  1244  002996  6E09               	movwf	lcd_putrs@ptr,c
  1245  002998  0E0F               	movlw	high STR_1
  1246  00299A  6E0A               	movwf	lcd_putrs@ptr+1,c
  1247  00299C  ECA8  F016         	call	_lcd_putrs	;wreg free
  1248                           
  1249                           ;main.c: 101: lcd_gotoxy(1,1);
  1250  0029A0  0E01               	movlw	1
  1251  0029A2  6E05               	movwf	lcd_gotoxy@y,c
  1252  0029A4  0E01               	movlw	1
  1253  0029A6  EC58  F018         	call	_lcd_gotoxy
  1254                           
  1255                           ;main.c: 102: lcd_putrs("null pointer");
  1256  0029AA  0E78               	movlw	low STR_2
  1257  0029AC  6E09               	movwf	lcd_putrs@ptr,c
  1258  0029AE  0E0F               	movlw	high STR_2
  1259  0029B0  6E0A               	movwf	lcd_putrs@ptr+1,c
  1260  0029B2  ECA8  F016         	call	_lcd_putrs	;wreg free
  1261                           
  1262                           ;main.c: 103: lcd_gotoxy(1,2);
  1263  0029B6  0E02               	movlw	2
  1264  0029B8  6E05               	movwf	lcd_gotoxy@y,c
  1265  0029BA  0E01               	movlw	1
  1266  0029BC  EC58  F018         	call	_lcd_gotoxy
  1267                           
  1268                           ;main.c: 104: lcd_putrs("exception");
  1269  0029C0  0EA4               	movlw	low STR_3
  1270  0029C2  6E09               	movwf	lcd_putrs@ptr,c
  1271  0029C4  0E0F               	movlw	high STR_3
  1272  0029C6  6E0A               	movwf	lcd_putrs@ptr+1,c
  1273  0029C8  ECA8  F016         	call	_lcd_putrs	;wreg free
  1274                           
  1275                           ;main.c: 105: input = 0;
  1276  0029CC  0E00               	movlw	0
  1277  0029CE  0100               	movlb	0	; () banked
  1278  0029D0  6FBE               	movwf	main@input& (0+255),b
  1279                           
  1280                           ; BSR set to: 0
  1281                           ;main.c: 106: key = 0;
  1282  0029D2  0E00               	movlw	0
  1283  0029D4  0100               	movlb	0	; () banked
  1284  0029D6  6FCD               	movwf	_key& (0+255),b
  1285                           
  1286                           ; BSR set to: 0
  1287                           ;main.c: 107: _delay((unsigned long)((98)*(8000000/4000.0)));
  1288  0029D8  0EFF               	movlw	255
  1289  0029DA  6E5F               	movwf	??_main& (0+255),c
  1290  0029DC  0E8A               	movlw	138
  1291  0029DE                     u4397:
  1292  0029DE  2EE8               	decfsz	wreg,f,c
  1293  0029E0  D7FE               	goto	u4397
  1294  0029E2  2E5F               	decfsz	??_main& (0+255),f,c
  1295  0029E4  D7FC               	goto	u4397
  1296  0029E6  D000               	nop2	
  1297  0029E8  D7C5               	goto	l4158
  1298                           
  1299                           ;main.c: 108: }
  1300                           ;main.c: 109: }
  1301                           ;main.c: 111: return 0;
  1302                           ;	Return value of _main is never used
  1303  0029EA  EF00  F000         	goto	start
  1304  0029EE                     __end_of_main:
  1305                           	opt stack 0
  1306                           tblptru	equ	0xFF8
  1307                           tblptrh	equ	0xFF7
  1308                           tblptrl	equ	0xFF6
  1309                           tablat	equ	0xFF5
  1310                           postinc0	equ	0xFEE
  1311                           wreg	equ	0xFE8
  1312                           postdec1	equ	0xFE5
  1313                           fsr1l	equ	0xFE1
  1314                           status	equ	0xFD8
  1315                           
  1316 ;; *************** function _set_vision *****************
  1317 ;; Defined at:
  1318 ;;		line 86 in file "lcd_vision.c"
  1319 ;; Parameters:    Size  Location     Type
  1320 ;;		None
  1321 ;; Auto vars:     Size  Location     Type
  1322 ;;  digit           2   20[BANK0 ] short 
  1323 ;;  pass            2   17[BANK0 ] int 
  1324 ;;  input           1   19[BANK0 ] unsigned char 
  1325 ;; Return value:  Size  Location     Type
  1326 ;;		None               void
  1327 ;; Registers used:
  1328 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1329 ;; Tracked objects:
  1330 ;;		On entry : 0/0
  1331 ;;		On exit  : 0/0
  1332 ;;		Unchanged: 0/0
  1333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1335 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1337 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1338 ;;Total ram usage:        5 bytes
  1339 ;; Hardware stack levels used:    1
  1340 ;; Hardware stack levels required when called:    7
  1341 ;; This function calls:
  1342 ;;		_clear
  1343 ;;		_is_not_letter
  1344 ;;		_lcd_gotoxy
  1345 ;;		_lcd_putrs
  1346 ;;		_not_fill_pass
  1347 ;;		_obtain_pass
  1348 ;;		_read_keyboard
  1349 ;;		_review_code
  1350 ;;		_set_desactive_vision
  1351 ;;		_twinkle
  1352 ;;		_write_Date
  1353 ;; This function is called by:
  1354 ;;		_main
  1355 ;; This function uses a non-reentrant model
  1356 ;;
  1357                           
  1358                           	psect	text1
  1359  001BAA                     __ptext1:
  1360                           	opt stack 0
  1361  001BAA                     _set_vision:
  1362                           	opt stack 23
  1363                           
  1364                           ;lcd_vision.c: 87: clear();
  1365                           
  1366                           ;incstack = 0
  1367  001BAA  EC89  F018         	call	_clear	;wreg free
  1368                           
  1369                           ;lcd_vision.c: 88: write_Date();
  1370  001BAE  EC37  F015         	call	_write_Date	;wreg free
  1371                           
  1372                           ;lcd_vision.c: 89: lcd_gotoxy(1,1);
  1373  001BB2  0E01               	movlw	1
  1374  001BB4  6E05               	movwf	lcd_gotoxy@y,c
  1375  001BB6  0E01               	movlw	1
  1376  001BB8  EC58  F018         	call	_lcd_gotoxy
  1377                           
  1378                           ;lcd_vision.c: 91: switch (state_alarm){
  1379  001BBC  D0A0               	goto	l4152
  1380  001BBE                     l4110:
  1381  001BBE  0EBF               	movlw	low STR_19
  1382  001BC0  6E09               	movwf	lcd_putrs@ptr,c
  1383  001BC2  0E0F               	movlw	high STR_19
  1384  001BC4  6E0A               	movwf	lcd_putrs@ptr+1,c
  1385  001BC6  ECA8  F016         	call	_lcd_putrs	;wreg free
  1386                           
  1387                           ;lcd_vision.c: 93: break;
  1388  001BCA  0012               	return	
  1389  001BCC                     l4112:
  1390  001BCC  0EBB               	movlw	low STR_20
  1391  001BCE  6E09               	movwf	lcd_putrs@ptr,c
  1392  001BD0  0E0F               	movlw	high STR_20
  1393  001BD2  6E0A               	movwf	lcd_putrs@ptr+1,c
  1394  001BD4  ECA8  F016         	call	_lcd_putrs	;wreg free
  1395                           
  1396                           ;lcd_vision.c: 96: short digit = 12;
  1397  001BD8  0E00               	movlw	0
  1398  001BDA  0100               	movlb	0	; () banked
  1399  001BDC  6FBD               	movwf	(set_vision@digit+1)& (0+255),b
  1400  001BDE  0E0C               	movlw	12
  1401  001BE0  6FBC               	movwf	set_vision@digit& (0+255),b
  1402                           
  1403                           ; BSR set to: 0
  1404                           ;lcd_vision.c: 97: int pass = 0;
  1405  001BE2  0E00               	movlw	0
  1406  001BE4  0100               	movlb	0	; () banked
  1407  001BE6  6FBA               	movwf	(set_vision@pass+1)& (0+255),b
  1408  001BE8  0E00               	movlw	0
  1409  001BEA  6FB9               	movwf	set_vision@pass& (0+255),b
  1410                           
  1411                           ;lcd_vision.c: 98: set_desactive_vision(digit);
  1412  001BEC  C0BC  F00B         	movff	set_vision@digit,set_desactive_vision@digit
  1413  001BF0  C0BD  F00C         	movff	set_vision@digit+1,set_desactive_vision@digit+1
  1414  001BF4  ECF6  F017         	call	_set_desactive_vision	;wreg free
  1415                           
  1416                           ;lcd_vision.c: 100: char input = read_keyboard();
  1417  001BF8  ECE2  F007         	call	_read_keyboard	;wreg free
  1418  001BFC  0100               	movlb	0	; () banked
  1419  001BFE  6FBB               	movwf	set_vision@input& (0+255),b
  1420                           
  1421                           ;lcd_vision.c: 102: while(is_not_letter(input) && not_fill_pass(digit)){
  1422  001C00  D01F               	goto	l4126
  1423  001C02                     l4120:
  1424                           
  1425                           ;lcd_vision.c: 103: pass = obtain_pass(pass,input,&digit);
  1426  001C02  C0B9  F058         	movff	set_vision@pass,obtain_pass@pass
  1427  001C06  C0BA  F059         	movff	set_vision@pass+1,obtain_pass@pass+1
  1428  001C0A  C0BB  F05A         	movff	set_vision@input,obtain_pass@input
  1429  001C0E  0EBC               	movlw	low set_vision@digit
  1430  001C10  6E5B               	movwf	obtain_pass@digit,c
  1431  001C12  0E00               	movlw	high set_vision@digit
  1432  001C14  6E5C               	movwf	obtain_pass@digit+1,c
  1433  001C16  EC44  F011         	call	_obtain_pass	;wreg free
  1434  001C1A  C058  F0B9         	movff	?_obtain_pass,set_vision@pass
  1435  001C1E  C059  F0BA         	movff	?_obtain_pass+1,set_vision@pass+1
  1436                           
  1437                           ;lcd_vision.c: 104: input = read_keyboard();
  1438  001C22  ECE2  F007         	call	_read_keyboard	;wreg free
  1439  001C26  0100               	movlb	0	; () banked
  1440  001C28  6FBB               	movwf	set_vision@input& (0+255),b
  1441                           
  1442                           ; BSR set to: 0
  1443                           ;lcd_vision.c: 105: review_code(digit, pass);
  1444  001C2A  C0BC  F003         	movff	set_vision@digit,review_code@digit
  1445  001C2E  C0BD  F004         	movff	set_vision@digit+1,review_code@digit+1
  1446  001C32  C0B9  F005         	movff	set_vision@pass,review_code@pass
  1447  001C36  C0BA  F006         	movff	set_vision@pass+1,review_code@pass+1
  1448  001C3A  EC20  F018         	call	_review_code	;wreg free
  1449  001C3E  D000               	goto	l4126
  1450  001C40                     l4126:
  1451  001C40  0100               	movlb	0	; () banked
  1452  001C42  51BB               	movf	set_vision@input& (0+255),w,b
  1453  001C44  ECDE  F017         	call	_is_not_letter
  1454  001C48  0900               	iorlw	0
  1455  001C4A  B4D8               	btfsc	status,2,c
  1456  001C4C  0012               	return	
  1457  001C4E  C0BC  F001         	movff	set_vision@digit,not_fill_pass@digit
  1458  001C52  C0BD  F002         	movff	set_vision@digit+1,not_fill_pass@digit+1
  1459  001C56  EC9E  F018         	call	_not_fill_pass	;wreg free
  1460  001C5A  0900               	iorlw	0
  1461  001C5C  B4D8               	btfsc	status,2,c
  1462  001C5E  0012               	return	
  1463  001C60  D7D0               	goto	l4120
  1464                           
  1465                           ;lcd_vision.c: 106: }
  1466                           ;lcd_vision.c: 108: break;
  1467  001C62  0012               	return	
  1468  001C64                     l4130:
  1469  001C64  0EAE               	movlw	low STR_21
  1470  001C66  6E09               	movwf	lcd_putrs@ptr,c
  1471  001C68  0E0F               	movlw	high STR_21
  1472  001C6A  6E0A               	movwf	lcd_putrs@ptr+1,c
  1473  001C6C  ECA8  F016         	call	_lcd_putrs	;wreg free
  1474                           
  1475                           ;lcd_vision.c: 110: twinkle();
  1476  001C70  EC1F  F016         	call	_twinkle	;wreg free
  1477                           
  1478                           ;lcd_vision.c: 112: short digit = 12;
  1479  001C74  0E00               	movlw	0
  1480  001C76  0100               	movlb	0	; () banked
  1481  001C78  6FBD               	movwf	(set_vision@digit+1)& (0+255),b
  1482  001C7A  0E0C               	movlw	12
  1483  001C7C  6FBC               	movwf	set_vision@digit& (0+255),b
  1484                           
  1485                           ; BSR set to: 0
  1486                           ;lcd_vision.c: 113: int pass = 0;
  1487  001C7E  0E00               	movlw	0
  1488  001C80  0100               	movlb	0	; () banked
  1489  001C82  6FBA               	movwf	(set_vision@pass+1)& (0+255),b
  1490  001C84  0E00               	movlw	0
  1491  001C86  6FB9               	movwf	set_vision@pass& (0+255),b
  1492                           
  1493                           ; BSR set to: 0
  1494                           ;lcd_vision.c: 114: set_desactive_vision(digit);
  1495  001C88  C0BC  F00B         	movff	set_vision@digit,set_desactive_vision@digit
  1496  001C8C  C0BD  F00C         	movff	set_vision@digit+1,set_desactive_vision@digit+1
  1497  001C90  ECF6  F017         	call	_set_desactive_vision	;wreg free
  1498                           
  1499                           ;lcd_vision.c: 116: char input = 18;
  1500  001C94  0E12               	movlw	18
  1501  001C96  0100               	movlb	0	; () banked
  1502  001C98  6FBB               	movwf	set_vision@input& (0+255),b
  1503                           
  1504                           ;lcd_vision.c: 118: while(is_not_letter(input) && not_fill_pass(digit)){
  1505  001C9A  D01F               	goto	l4148
  1506  001C9C                     l4142:
  1507                           
  1508                           ;lcd_vision.c: 119: pass = obtain_pass(pass,input,&digit);
  1509  001C9C  C0B9  F058         	movff	set_vision@pass,obtain_pass@pass
  1510  001CA0  C0BA  F059         	movff	set_vision@pass+1,obtain_pass@pass+1
  1511  001CA4  C0BB  F05A         	movff	set_vision@input,obtain_pass@input
  1512  001CA8  0EBC               	movlw	low set_vision@digit
  1513  001CAA  6E5B               	movwf	obtain_pass@digit,c
  1514  001CAC  0E00               	movlw	high set_vision@digit
  1515  001CAE  6E5C               	movwf	obtain_pass@digit+1,c
  1516  001CB0  EC44  F011         	call	_obtain_pass	;wreg free
  1517  001CB4  C058  F0B9         	movff	?_obtain_pass,set_vision@pass
  1518  001CB8  C059  F0BA         	movff	?_obtain_pass+1,set_vision@pass+1
  1519                           
  1520                           ;lcd_vision.c: 120: input = read_keyboard();
  1521  001CBC  ECE2  F007         	call	_read_keyboard	;wreg free
  1522  001CC0  0100               	movlb	0	; () banked
  1523  001CC2  6FBB               	movwf	set_vision@input& (0+255),b
  1524                           
  1525                           ; BSR set to: 0
  1526                           ;lcd_vision.c: 121: review_code(digit, pass);
  1527  001CC4  C0BC  F003         	movff	set_vision@digit,review_code@digit
  1528  001CC8  C0BD  F004         	movff	set_vision@digit+1,review_code@digit+1
  1529  001CCC  C0B9  F005         	movff	set_vision@pass,review_code@pass
  1530  001CD0  C0BA  F006         	movff	set_vision@pass+1,review_code@pass+1
  1531  001CD4  EC20  F018         	call	_review_code	;wreg free
  1532  001CD8  D000               	goto	l4148
  1533  001CDA                     l4148:
  1534  001CDA  0100               	movlb	0	; () banked
  1535  001CDC  51BB               	movf	set_vision@input& (0+255),w,b
  1536  001CDE  ECDE  F017         	call	_is_not_letter
  1537  001CE2  0900               	iorlw	0
  1538  001CE4  B4D8               	btfsc	status,2,c
  1539  001CE6  0012               	return	
  1540  001CE8  C0BC  F001         	movff	set_vision@digit,not_fill_pass@digit
  1541  001CEC  C0BD  F002         	movff	set_vision@digit+1,not_fill_pass@digit+1
  1542  001CF0  EC9E  F018         	call	_not_fill_pass	;wreg free
  1543  001CF4  0900               	iorlw	0
  1544  001CF6  B4D8               	btfsc	status,2,c
  1545  001CF8  0012               	return	
  1546  001CFA  D7D0               	goto	l4142
  1547                           
  1548                           ;lcd_vision.c: 122: }
  1549                           ;lcd_vision.c: 123: }
  1550  001CFC  0012               	return	
  1551  001CFE                     l4152:
  1552  001CFE  0100               	movlb	0	; () banked
  1553  001D00  51CE               	movf	_state_alarm& (0+255),w,b
  1554                           
  1555                           ; Switch size 1, requested type "space"
  1556                           ; Number of cases is 2, Range of values is 0 to 1
  1557                           ; switch strategies available:
  1558                           ; Name         Instructions Cycles
  1559                           ; simple_byte            7     4 (average)
  1560                           ;	Chosen strategy is simple_byte
  1561  001D02  0A00               	xorlw	0	; case 0
  1562  001D04  B4D8               	btfsc	status,2,c
  1563  001D06  D75B               	goto	l4110
  1564  001D08  0A01               	xorlw	1	; case 1
  1565  001D0A  B4D8               	btfsc	status,2,c
  1566  001D0C  D75F               	goto	l4112
  1567  001D0E  D7AA               	goto	l4130
  1568                           
  1569                           ; BSR set to: 0
  1570  001D10  0012               	return		;funcret
  1571  001D12                     __end_of_set_vision:
  1572                           	opt stack 0
  1573                           tblptru	equ	0xFF8
  1574                           tblptrh	equ	0xFF7
  1575                           tblptrl	equ	0xFF6
  1576                           tablat	equ	0xFF5
  1577                           postinc0	equ	0xFEE
  1578                           wreg	equ	0xFE8
  1579                           postdec1	equ	0xFE5
  1580                           fsr1l	equ	0xFE1
  1581                           status	equ	0xFD8
  1582                           
  1583 ;; *************** function _write_Date *****************
  1584 ;; Defined at:
  1585 ;;		line 12 in file "lcd_vision.c"
  1586 ;; Parameters:    Size  Location     Type
  1587 ;;		None
  1588 ;; Auto vars:     Size  Location     Type
  1589 ;;		None
  1590 ;; Return value:  Size  Location     Type
  1591 ;;		None               void
  1592 ;; Registers used:
  1593 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1594 ;; Tracked objects:
  1595 ;;		On entry : 0/0
  1596 ;;		On exit  : 0/0
  1597 ;;		Unchanged: 0/0
  1598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1602 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1603 ;;Total ram usage:        0 bytes
  1604 ;; Hardware stack levels used:    1
  1605 ;; Hardware stack levels required when called:    5
  1606 ;; This function calls:
  1607 ;;		_lcd_gotoxy
  1608 ;;		_lcd_putrs
  1609 ;;		_sprintf
  1610 ;; This function is called by:
  1611 ;;		_set_vision
  1612 ;; This function uses a non-reentrant model
  1613 ;;
  1614                           
  1615                           	psect	text2
  1616  002A6E                     __ptext2:
  1617                           	opt stack 0
  1618  002A6E                     _write_Date:
  1619                           	opt stack 24
  1620                           
  1621                           ;lcd_vision.c: 13: lcd_gotoxy(9,1);
  1622                           
  1623                           ;incstack = 0
  1624  002A6E  0E01               	movlw	1
  1625  002A70  6E05               	movwf	lcd_gotoxy@y,c
  1626  002A72  0E09               	movlw	9
  1627  002A74  EC58  F018         	call	_lcd_gotoxy
  1628                           
  1629                           ;lcd_vision.c: 14: sprintf(buffer2,"%02u/%02u/%02u",dia,mes,anio);
  1630  002A78  0E8C               	movlw	low _buffer2
  1631  002A7A  6E0D               	movwf	sprintf@sp,c
  1632  002A7C  0E00               	movlw	high _buffer2
  1633  002A7E  6E0E               	movwf	sprintf@sp+1,c
  1634  002A80  0E69               	movlw	low STR_14
  1635  002A82  6E0F               	movwf	sprintf@f,c
  1636  002A84  0E0F               	movlw	high STR_14
  1637  002A86  6E10               	movwf	sprintf@f+1,c
  1638  002A88  C0C1  F011         	movff	_dia,?_sprintf+4
  1639  002A8C  C0C2  F012         	movff	_dia+1,?_sprintf+5
  1640  002A90  C0C7  F013         	movff	_mes,?_sprintf+6
  1641  002A94  C0C8  F014         	movff	_mes+1,?_sprintf+7
  1642  002A98  C0BF  F015         	movff	_anio,?_sprintf+8
  1643  002A9C  C0C0  F016         	movff	_anio+1,?_sprintf+9
  1644  002AA0  EC3E  F009         	call	_sprintf	;wreg free
  1645                           
  1646                           ;lcd_vision.c: 15: lcd_putrs(buffer2);
  1647  002AA4  0E8C               	movlw	low _buffer2
  1648  002AA6  6E09               	movwf	lcd_putrs@ptr,c
  1649  002AA8  0E00               	movlw	high _buffer2
  1650  002AAA  6E0A               	movwf	lcd_putrs@ptr+1,c
  1651  002AAC  ECA8  F016         	call	_lcd_putrs	;wreg free
  1652                           
  1653                           ;lcd_vision.c: 16: sprintf(buffer2,"%02u:%02u",hora,minuto);
  1654  002AB0  0E8C               	movlw	low _buffer2
  1655  002AB2  6E0D               	movwf	sprintf@sp,c
  1656  002AB4  0E00               	movlw	high _buffer2
  1657  002AB6  6E0E               	movwf	sprintf@sp+1,c
  1658  002AB8  0E9A               	movlw	low STR_15
  1659  002ABA  6E0F               	movwf	sprintf@f,c
  1660  002ABC  0E0F               	movlw	high STR_15
  1661  002ABE  6E10               	movwf	sprintf@f+1,c
  1662  002AC0  C0C5  F011         	movff	_hora,?_sprintf+4
  1663  002AC4  C0C6  F012         	movff	_hora+1,?_sprintf+5
  1664  002AC8  C0C9  F013         	movff	_minuto,?_sprintf+6
  1665  002ACC  C0CA  F014         	movff	_minuto+1,?_sprintf+7
  1666  002AD0  EC3E  F009         	call	_sprintf	;wreg free
  1667                           
  1668                           ;lcd_vision.c: 17: lcd_gotoxy(1,2);
  1669  002AD4  0E02               	movlw	2
  1670  002AD6  6E05               	movwf	lcd_gotoxy@y,c
  1671  002AD8  0E01               	movlw	1
  1672  002ADA  EC58  F018         	call	_lcd_gotoxy
  1673                           
  1674                           ;lcd_vision.c: 18: lcd_putrs(buffer2);
  1675  002ADE  0E8C               	movlw	low _buffer2
  1676  002AE0  6E09               	movwf	lcd_putrs@ptr,c
  1677  002AE2  0E00               	movlw	high _buffer2
  1678  002AE4  6E0A               	movwf	lcd_putrs@ptr+1,c
  1679  002AE6  ECA8  F016         	call	_lcd_putrs	;wreg free
  1680  002AEA  0012               	return		;funcret
  1681  002AEC                     __end_of_write_Date:
  1682                           	opt stack 0
  1683                           tblptru	equ	0xFF8
  1684                           tblptrh	equ	0xFF7
  1685                           tblptrl	equ	0xFF6
  1686                           tablat	equ	0xFF5
  1687                           postinc0	equ	0xFEE
  1688                           wreg	equ	0xFE8
  1689                           postdec1	equ	0xFE5
  1690                           fsr1l	equ	0xFE1
  1691                           status	equ	0xFD8
  1692                           
  1693 ;; *************** function _twinkle *****************
  1694 ;; Defined at:
  1695 ;;		line 64 in file "lcd_vision.c"
  1696 ;; Parameters:    Size  Location     Type
  1697 ;;		None
  1698 ;; Auto vars:     Size  Location     Type
  1699 ;;  input           1   36[COMRAM] unsigned char 
  1700 ;; Return value:  Size  Location     Type
  1701 ;;		None               void
  1702 ;; Registers used:
  1703 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1704 ;; Tracked objects:
  1705 ;;		On entry : 0/0
  1706 ;;		On exit  : 0/0
  1707 ;;		Unchanged: 0/0
  1708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1710 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1712 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1713 ;;Total ram usage:        1 bytes
  1714 ;; Hardware stack levels used:    1
  1715 ;; Hardware stack levels required when called:    6
  1716 ;; This function calls:
  1717 ;;		__delay_s
  1718 ;;		_clear_keyboard
  1719 ;;		_lcd_gotoxy
  1720 ;;		_lcd_putrs
  1721 ;;		_read_keyboard
  1722 ;; This function is called by:
  1723 ;;		_set_vision
  1724 ;; This function uses a non-reentrant model
  1725 ;;
  1726                           
  1727                           	psect	text3
  1728  002C3E                     __ptext3:
  1729                           	opt stack 0
  1730  002C3E                     _twinkle:
  1731                           	opt stack 23
  1732                           
  1733                           ;lcd_vision.c: 65: char input = 1;
  1734                           
  1735                           ;incstack = 0
  1736  002C3E  0E01               	movlw	1
  1737  002C40  D024               	goto	L1
  1738  002C42                     l4054:
  1739                           
  1740                           ;lcd_vision.c: 68: _delay_s(500);
  1741  002C42  0E01               	movlw	1
  1742  002C44  6E0A               	movwf	__delay_s@millis+1,c
  1743  002C46  0EF4               	movlw	244
  1744  002C48  6E09               	movwf	__delay_s@millis,c
  1745  002C4A  EC7C  F016         	call	__delay_s	;wreg free
  1746                           
  1747                           ;lcd_vision.c: 69: lcd_gotoxy(7,2);
  1748  002C4E  0E02               	movlw	2
  1749  002C50  6E05               	movwf	lcd_gotoxy@y,c
  1750  002C52  0E07               	movlw	7
  1751  002C54  EC58  F018         	call	_lcd_gotoxy
  1752                           
  1753                           ;lcd_vision.c: 70: lcd_putrs("WARNING!!!");
  1754  002C58  0E85               	movlw	low STR_16
  1755  002C5A  6E09               	movwf	lcd_putrs@ptr,c
  1756  002C5C  0E0F               	movlw	high STR_16
  1757  002C5E  6E0A               	movwf	lcd_putrs@ptr+1,c
  1758  002C60  ECA8  F016         	call	_lcd_putrs	;wreg free
  1759                           
  1760                           ;lcd_vision.c: 71: _delay_s(500);
  1761  002C64  0E01               	movlw	1
  1762  002C66  6E0A               	movwf	__delay_s@millis+1,c
  1763  002C68  0EF4               	movlw	244
  1764  002C6A  6E09               	movwf	__delay_s@millis,c
  1765  002C6C  EC7C  F016         	call	__delay_s	;wreg free
  1766                           
  1767                           ;lcd_vision.c: 72: lcd_gotoxy(7,2);
  1768  002C70  0E02               	movlw	2
  1769  002C72  6E05               	movwf	lcd_gotoxy@y,c
  1770  002C74  0E07               	movlw	7
  1771  002C76  EC58  F018         	call	_lcd_gotoxy
  1772                           
  1773                           ;lcd_vision.c: 73: lcd_putrs("          ");
  1774  002C7A  0E5E               	movlw	low (STR_1+22)
  1775  002C7C  6E09               	movwf	lcd_putrs@ptr,c
  1776  002C7E  0E0F               	movlw	high (STR_1+22)
  1777  002C80  6E0A               	movwf	lcd_putrs@ptr+1,c
  1778  002C82  ECA8  F016         	call	_lcd_putrs	;wreg free
  1779                           
  1780                           ;lcd_vision.c: 74: input = read_keyboard();
  1781  002C86  ECE2  F007         	call	_read_keyboard	;wreg free
  1782  002C8A                     L1:
  1783  002C8A  6E25               	movwf	twinkle@input,c
  1784  002C8C  D000               	goto	l4066
  1785  002C8E                     l4066:
  1786  002C8E  0E10               	movlw	16
  1787  002C90  1825               	xorwf	twinkle@input,w,c
  1788  002C92  A4D8               	btfss	status,2,c
  1789  002C94  D7D6               	goto	l4054
  1790                           
  1791                           ;lcd_vision.c: 75: }
  1792                           ;lcd_vision.c: 76: clear_keyboard();
  1793  002C96  ECD2  F018         	call	_clear_keyboard	;wreg free
  1794  002C9A  0012               	return		;funcret
  1795  002C9C                     __end_of_twinkle:
  1796                           	opt stack 0
  1797                           tblptru	equ	0xFF8
  1798                           tblptrh	equ	0xFF7
  1799                           tblptrl	equ	0xFF6
  1800                           tablat	equ	0xFF5
  1801                           postinc0	equ	0xFEE
  1802                           wreg	equ	0xFE8
  1803                           postdec1	equ	0xFE5
  1804                           fsr1l	equ	0xFE1
  1805                           status	equ	0xFD8
  1806                           
  1807 ;; *************** function _read_keyboard *****************
  1808 ;; Defined at:
  1809 ;;		line 8 in file "keyboard.c"
  1810 ;; Parameters:    Size  Location     Type
  1811 ;;		None
  1812 ;; Auto vars:     Size  Location     Type
  1813 ;;		None
  1814 ;; Return value:  Size  Location     Type
  1815 ;;                  1    wreg      unsigned char 
  1816 ;; Registers used:
  1817 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1818 ;; Tracked objects:
  1819 ;;		On entry : 0/0
  1820 ;;		On exit  : 0/0
  1821 ;;		Unchanged: 0/0
  1822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1825 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1826 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1827 ;;Total ram usage:        1 bytes
  1828 ;; Hardware stack levels used:    1
  1829 ;; Hardware stack levels required when called:    5
  1830 ;; This function calls:
  1831 ;;		_lcd_putrs
  1832 ;;		_sprintf
  1833 ;; This function is called by:
  1834 ;;		_main
  1835 ;;		_twinkle
  1836 ;;		_set_vision
  1837 ;; This function uses a non-reentrant model
  1838 ;;
  1839                           
  1840                           	psect	text4
  1841  000FC4                     __ptext4:
  1842                           	opt stack 0
  1843  000FC4                     _read_keyboard:
  1844                           	opt stack 23
  1845                           
  1846                           ;keyboard.c: 9: LATAbits.LATA0=1;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=0;
  1847                           
  1848                           ;incstack = 0
  1849  000FC4  8089               	bsf	3977,0,c	;volatile
  1850  000FC6  9289               	bcf	3977,1,c	;volatile
  1851  000FC8  9489               	bcf	3977,2,c	;volatile
  1852  000FCA  9689               	bcf	3977,3,c	;volatile
  1853                           
  1854                           ;keyboard.c: 10: {
  1855                           ;keyboard.c: 11: if (PORTAbits.RA5==1){key=1;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA5==1){};}
  1856  000FCC  AA80               	btfss	3968,5,c	;volatile
  1857  000FCE  D019               	goto	l204
  1858  000FD0  0E01               	movlw	1
  1859  000FD2  0100               	movlb	0	; () banked
  1860  000FD4  6FCD               	movwf	_key& (0+255),b
  1861                           
  1862                           ; BSR set to: 0
  1863  000FD6  0E8C               	movlw	low _buffer2
  1864  000FD8  6E0D               	movwf	sprintf@sp,c
  1865  000FDA  0E00               	movlw	high _buffer2
  1866  000FDC  6E0E               	movwf	sprintf@sp+1,c
  1867  000FDE  0EB6               	movlw	low STR_4
  1868  000FE0  6E0F               	movwf	sprintf@f,c
  1869  000FE2  0E0F               	movlw	high STR_4
  1870  000FE4  6E10               	movwf	sprintf@f+1,c
  1871  000FE6  C0CD  F011         	movff	_key,?_sprintf+4
  1872  000FEA  6A12               	clrf	?_sprintf+5,c
  1873  000FEC  EC3E  F009         	call	_sprintf	;wreg free
  1874  000FF0  0E8C               	movlw	low _buffer2
  1875  000FF2  6E09               	movwf	lcd_putrs@ptr,c
  1876  000FF4  0E00               	movlw	high _buffer2
  1877  000FF6  6E0A               	movwf	lcd_putrs@ptr+1,c
  1878  000FF8  ECA8  F016         	call	_lcd_putrs	;wreg free
  1879  000FFC  D000               	goto	l205
  1880  000FFE                     l205:
  1881  000FFE  BA80               	btfsc	3968,5,c	;volatile
  1882  001000  D7FE               	goto	l205
  1883  001002                     l204:
  1884                           
  1885                           ;keyboard.c: 12: if (PORTAbits.RA7==1){key=2;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  1886  001002  AE80               	btfss	3968,7,c	;volatile
  1887  001004  D019               	goto	l208
  1888  001006  0E02               	movlw	2
  1889  001008  0100               	movlb	0	; () banked
  1890  00100A  6FCD               	movwf	_key& (0+255),b
  1891                           
  1892                           ; BSR set to: 0
  1893  00100C  0E8C               	movlw	low _buffer2
  1894  00100E  6E0D               	movwf	sprintf@sp,c
  1895  001010  0E00               	movlw	high _buffer2
  1896  001012  6E0E               	movwf	sprintf@sp+1,c
  1897  001014  0EB6               	movlw	low STR_4
  1898  001016  6E0F               	movwf	sprintf@f,c
  1899  001018  0E0F               	movlw	high STR_4
  1900  00101A  6E10               	movwf	sprintf@f+1,c
  1901  00101C  C0CD  F011         	movff	_key,?_sprintf+4
  1902  001020  6A12               	clrf	?_sprintf+5,c
  1903  001022  EC3E  F009         	call	_sprintf	;wreg free
  1904  001026  0E8C               	movlw	low _buffer2
  1905  001028  6E09               	movwf	lcd_putrs@ptr,c
  1906  00102A  0E00               	movlw	high _buffer2
  1907  00102C  6E0A               	movwf	lcd_putrs@ptr+1,c
  1908  00102E  ECA8  F016         	call	_lcd_putrs	;wreg free
  1909  001032  D000               	goto	l209
  1910  001034                     l209:
  1911  001034  BE80               	btfsc	3968,7,c	;volatile
  1912  001036  D7FE               	goto	l209
  1913  001038                     l208:
  1914                           
  1915                           ;keyboard.c: 13: if (PORTAbits.RA6==1){key=3;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA6==1){};}
  1916  001038  AC80               	btfss	3968,6,c	;volatile
  1917  00103A  D019               	goto	l212
  1918  00103C  0E03               	movlw	3
  1919  00103E  0100               	movlb	0	; () banked
  1920  001040  6FCD               	movwf	_key& (0+255),b
  1921                           
  1922                           ; BSR set to: 0
  1923  001042  0E8C               	movlw	low _buffer2
  1924  001044  6E0D               	movwf	sprintf@sp,c
  1925  001046  0E00               	movlw	high _buffer2
  1926  001048  6E0E               	movwf	sprintf@sp+1,c
  1927  00104A  0EB6               	movlw	low STR_4
  1928  00104C  6E0F               	movwf	sprintf@f,c
  1929  00104E  0E0F               	movlw	high STR_4
  1930  001050  6E10               	movwf	sprintf@f+1,c
  1931  001052  C0CD  F011         	movff	_key,?_sprintf+4
  1932  001056  6A12               	clrf	?_sprintf+5,c
  1933  001058  EC3E  F009         	call	_sprintf	;wreg free
  1934  00105C  0E8C               	movlw	low _buffer2
  1935  00105E  6E09               	movwf	lcd_putrs@ptr,c
  1936  001060  0E00               	movlw	high _buffer2
  1937  001062  6E0A               	movwf	lcd_putrs@ptr+1,c
  1938  001064  ECA8  F016         	call	_lcd_putrs	;wreg free
  1939  001068  D000               	goto	l213
  1940  00106A                     l213:
  1941  00106A  BC80               	btfsc	3968,6,c	;volatile
  1942  00106C  D7FE               	goto	l213
  1943  00106E                     l212:
  1944                           
  1945                           ;keyboard.c: 14: if (PORTCbits.RC2==1){key=11; while(PORTCbits.RC2==1){};}
  1946  00106E  A482               	btfss	3970,2,c	;volatile
  1947  001070  D006               	goto	l216
  1948  001072  0E0B               	movlw	11
  1949  001074  0100               	movlb	0	; () banked
  1950  001076  6FCD               	movwf	_key& (0+255),b
  1951  001078  D000               	goto	l217
  1952  00107A                     l217:
  1953  00107A  B482               	btfsc	3970,2,c	;volatile
  1954  00107C  D7FE               	goto	l217
  1955  00107E                     l216:
  1956                           
  1957                           ;keyboard.c: 15: }
  1958                           ;keyboard.c: 16: LATAbits.LATA0=0;LATAbits.LATA1=1;LATAbits.LATA2=0;LATAbits.LATA3=0;
  1959  00107E  9089               	bcf	3977,0,c	;volatile
  1960  001080  8289               	bsf	3977,1,c	;volatile
  1961  001082  9489               	bcf	3977,2,c	;volatile
  1962  001084  9689               	bcf	3977,3,c	;volatile
  1963                           
  1964                           ;keyboard.c: 17: {
  1965                           ;keyboard.c: 18: if (PORTAbits.RA5==1){key=4;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA5==1){};}
  1966  001086  AA80               	btfss	3968,5,c	;volatile
  1967  001088  D019               	goto	l220
  1968  00108A  0E04               	movlw	4
  1969  00108C  0100               	movlb	0	; () banked
  1970  00108E  6FCD               	movwf	_key& (0+255),b
  1971                           
  1972                           ; BSR set to: 0
  1973  001090  0E8C               	movlw	low _buffer2
  1974  001092  6E0D               	movwf	sprintf@sp,c
  1975  001094  0E00               	movlw	high _buffer2
  1976  001096  6E0E               	movwf	sprintf@sp+1,c
  1977  001098  0EB6               	movlw	low STR_4
  1978  00109A  6E0F               	movwf	sprintf@f,c
  1979  00109C  0E0F               	movlw	high STR_4
  1980  00109E  6E10               	movwf	sprintf@f+1,c
  1981  0010A0  C0CD  F011         	movff	_key,?_sprintf+4
  1982  0010A4  6A12               	clrf	?_sprintf+5,c
  1983  0010A6  EC3E  F009         	call	_sprintf	;wreg free
  1984  0010AA  0E8C               	movlw	low _buffer2
  1985  0010AC  6E09               	movwf	lcd_putrs@ptr,c
  1986  0010AE  0E00               	movlw	high _buffer2
  1987  0010B0  6E0A               	movwf	lcd_putrs@ptr+1,c
  1988  0010B2  ECA8  F016         	call	_lcd_putrs	;wreg free
  1989  0010B6  D000               	goto	l221
  1990  0010B8                     l221:
  1991  0010B8  BA80               	btfsc	3968,5,c	;volatile
  1992  0010BA  D7FE               	goto	l221
  1993  0010BC                     l220:
  1994                           
  1995                           ;keyboard.c: 19: if (PORTAbits.RA7==1){key=5;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  1996  0010BC  AE80               	btfss	3968,7,c	;volatile
  1997  0010BE  D019               	goto	l224
  1998  0010C0  0E05               	movlw	5
  1999  0010C2  0100               	movlb	0	; () banked
  2000  0010C4  6FCD               	movwf	_key& (0+255),b
  2001                           
  2002                           ; BSR set to: 0
  2003  0010C6  0E8C               	movlw	low _buffer2
  2004  0010C8  6E0D               	movwf	sprintf@sp,c
  2005  0010CA  0E00               	movlw	high _buffer2
  2006  0010CC  6E0E               	movwf	sprintf@sp+1,c
  2007  0010CE  0EB6               	movlw	low STR_4
  2008  0010D0  6E0F               	movwf	sprintf@f,c
  2009  0010D2  0E0F               	movlw	high STR_4
  2010  0010D4  6E10               	movwf	sprintf@f+1,c
  2011  0010D6  C0CD  F011         	movff	_key,?_sprintf+4
  2012  0010DA  6A12               	clrf	?_sprintf+5,c
  2013  0010DC  EC3E  F009         	call	_sprintf	;wreg free
  2014  0010E0  0E8C               	movlw	low _buffer2
  2015  0010E2  6E09               	movwf	lcd_putrs@ptr,c
  2016  0010E4  0E00               	movlw	high _buffer2
  2017  0010E6  6E0A               	movwf	lcd_putrs@ptr+1,c
  2018  0010E8  ECA8  F016         	call	_lcd_putrs	;wreg free
  2019  0010EC  D000               	goto	l225
  2020  0010EE                     l225:
  2021  0010EE  BE80               	btfsc	3968,7,c	;volatile
  2022  0010F0  D7FE               	goto	l225
  2023  0010F2                     l224:
  2024                           
  2025                           ;keyboard.c: 20: if (PORTAbits.RA6==1){key=6;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA6==1){};}
  2026  0010F2  AC80               	btfss	3968,6,c	;volatile
  2027  0010F4  D019               	goto	l228
  2028  0010F6  0E06               	movlw	6
  2029  0010F8  0100               	movlb	0	; () banked
  2030  0010FA  6FCD               	movwf	_key& (0+255),b
  2031                           
  2032                           ; BSR set to: 0
  2033  0010FC  0E8C               	movlw	low _buffer2
  2034  0010FE  6E0D               	movwf	sprintf@sp,c
  2035  001100  0E00               	movlw	high _buffer2
  2036  001102  6E0E               	movwf	sprintf@sp+1,c
  2037  001104  0EB6               	movlw	low STR_4
  2038  001106  6E0F               	movwf	sprintf@f,c
  2039  001108  0E0F               	movlw	high STR_4
  2040  00110A  6E10               	movwf	sprintf@f+1,c
  2041  00110C  C0CD  F011         	movff	_key,?_sprintf+4
  2042  001110  6A12               	clrf	?_sprintf+5,c
  2043  001112  EC3E  F009         	call	_sprintf	;wreg free
  2044  001116  0E8C               	movlw	low _buffer2
  2045  001118  6E09               	movwf	lcd_putrs@ptr,c
  2046  00111A  0E00               	movlw	high _buffer2
  2047  00111C  6E0A               	movwf	lcd_putrs@ptr+1,c
  2048  00111E  ECA8  F016         	call	_lcd_putrs	;wreg free
  2049  001122  D000               	goto	l229
  2050  001124                     l229:
  2051  001124  BC80               	btfsc	3968,6,c	;volatile
  2052  001126  D7FE               	goto	l229
  2053  001128                     l228:
  2054                           
  2055                           ;keyboard.c: 21: if (PORTCbits.RC2==1){key=12; while(PORTCbits.RC2==1){};}
  2056  001128  A482               	btfss	3970,2,c	;volatile
  2057  00112A  D006               	goto	l232
  2058  00112C  0E0C               	movlw	12
  2059  00112E  0100               	movlb	0	; () banked
  2060  001130  6FCD               	movwf	_key& (0+255),b
  2061  001132  D000               	goto	l233
  2062  001134                     l233:
  2063  001134  B482               	btfsc	3970,2,c	;volatile
  2064  001136  D7FE               	goto	l233
  2065  001138                     l232:
  2066                           
  2067                           ;keyboard.c: 22: }
  2068                           ;keyboard.c: 23: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=1;LATAbits.LATA3=0;
  2069  001138  9089               	bcf	3977,0,c	;volatile
  2070  00113A  9289               	bcf	3977,1,c	;volatile
  2071  00113C  8489               	bsf	3977,2,c	;volatile
  2072  00113E  9689               	bcf	3977,3,c	;volatile
  2073                           
  2074                           ;keyboard.c: 24: {
  2075                           ;keyboard.c: 25: if (PORTAbits.RA5==1){key=7;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA5==1){};}
  2076  001140  AA80               	btfss	3968,5,c	;volatile
  2077  001142  D019               	goto	l236
  2078  001144  0E07               	movlw	7
  2079  001146  0100               	movlb	0	; () banked
  2080  001148  6FCD               	movwf	_key& (0+255),b
  2081                           
  2082                           ; BSR set to: 0
  2083  00114A  0E8C               	movlw	low _buffer2
  2084  00114C  6E0D               	movwf	sprintf@sp,c
  2085  00114E  0E00               	movlw	high _buffer2
  2086  001150  6E0E               	movwf	sprintf@sp+1,c
  2087  001152  0EB6               	movlw	low STR_4
  2088  001154  6E0F               	movwf	sprintf@f,c
  2089  001156  0E0F               	movlw	high STR_4
  2090  001158  6E10               	movwf	sprintf@f+1,c
  2091  00115A  C0CD  F011         	movff	_key,?_sprintf+4
  2092  00115E  6A12               	clrf	?_sprintf+5,c
  2093  001160  EC3E  F009         	call	_sprintf	;wreg free
  2094  001164  0E8C               	movlw	low _buffer2
  2095  001166  6E09               	movwf	lcd_putrs@ptr,c
  2096  001168  0E00               	movlw	high _buffer2
  2097  00116A  6E0A               	movwf	lcd_putrs@ptr+1,c
  2098  00116C  ECA8  F016         	call	_lcd_putrs	;wreg free
  2099  001170  D000               	goto	l237
  2100  001172                     l237:
  2101  001172  BA80               	btfsc	3968,5,c	;volatile
  2102  001174  D7FE               	goto	l237
  2103  001176                     l236:
  2104                           
  2105                           ;keyboard.c: 26: if (PORTAbits.RA7==1){key=8;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  2106  001176  AE80               	btfss	3968,7,c	;volatile
  2107  001178  D019               	goto	l240
  2108  00117A  0E08               	movlw	8
  2109  00117C  0100               	movlb	0	; () banked
  2110  00117E  6FCD               	movwf	_key& (0+255),b
  2111                           
  2112                           ; BSR set to: 0
  2113  001180  0E8C               	movlw	low _buffer2
  2114  001182  6E0D               	movwf	sprintf@sp,c
  2115  001184  0E00               	movlw	high _buffer2
  2116  001186  6E0E               	movwf	sprintf@sp+1,c
  2117  001188  0EB6               	movlw	low STR_4
  2118  00118A  6E0F               	movwf	sprintf@f,c
  2119  00118C  0E0F               	movlw	high STR_4
  2120  00118E  6E10               	movwf	sprintf@f+1,c
  2121  001190  C0CD  F011         	movff	_key,?_sprintf+4
  2122  001194  6A12               	clrf	?_sprintf+5,c
  2123  001196  EC3E  F009         	call	_sprintf	;wreg free
  2124  00119A  0E8C               	movlw	low _buffer2
  2125  00119C  6E09               	movwf	lcd_putrs@ptr,c
  2126  00119E  0E00               	movlw	high _buffer2
  2127  0011A0  6E0A               	movwf	lcd_putrs@ptr+1,c
  2128  0011A2  ECA8  F016         	call	_lcd_putrs	;wreg free
  2129  0011A6  D000               	goto	l241
  2130  0011A8                     l241:
  2131  0011A8  BE80               	btfsc	3968,7,c	;volatile
  2132  0011AA  D7FE               	goto	l241
  2133  0011AC                     l240:
  2134                           
  2135                           ;keyboard.c: 27: if (PORTAbits.RA6==1){key=9;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA6==1){};}
  2136  0011AC  AC80               	btfss	3968,6,c	;volatile
  2137  0011AE  D019               	goto	l244
  2138  0011B0  0E09               	movlw	9
  2139  0011B2  0100               	movlb	0	; () banked
  2140  0011B4  6FCD               	movwf	_key& (0+255),b
  2141                           
  2142                           ; BSR set to: 0
  2143  0011B6  0E8C               	movlw	low _buffer2
  2144  0011B8  6E0D               	movwf	sprintf@sp,c
  2145  0011BA  0E00               	movlw	high _buffer2
  2146  0011BC  6E0E               	movwf	sprintf@sp+1,c
  2147  0011BE  0EB6               	movlw	low STR_4
  2148  0011C0  6E0F               	movwf	sprintf@f,c
  2149  0011C2  0E0F               	movlw	high STR_4
  2150  0011C4  6E10               	movwf	sprintf@f+1,c
  2151  0011C6  C0CD  F011         	movff	_key,?_sprintf+4
  2152  0011CA  6A12               	clrf	?_sprintf+5,c
  2153  0011CC  EC3E  F009         	call	_sprintf	;wreg free
  2154  0011D0  0E8C               	movlw	low _buffer2
  2155  0011D2  6E09               	movwf	lcd_putrs@ptr,c
  2156  0011D4  0E00               	movlw	high _buffer2
  2157  0011D6  6E0A               	movwf	lcd_putrs@ptr+1,c
  2158  0011D8  ECA8  F016         	call	_lcd_putrs	;wreg free
  2159  0011DC  D000               	goto	l245
  2160  0011DE                     l245:
  2161  0011DE  BC80               	btfsc	3968,6,c	;volatile
  2162  0011E0  D7FE               	goto	l245
  2163  0011E2                     l244:
  2164                           
  2165                           ;keyboard.c: 28: if (PORTCbits.RC2==1){key=13; while(PORTCbits.RC2==1){};}
  2166  0011E2  A482               	btfss	3970,2,c	;volatile
  2167  0011E4  D006               	goto	l248
  2168  0011E6  0E0D               	movlw	13
  2169  0011E8  0100               	movlb	0	; () banked
  2170  0011EA  6FCD               	movwf	_key& (0+255),b
  2171  0011EC  D000               	goto	l249
  2172  0011EE                     l249:
  2173  0011EE  B482               	btfsc	3970,2,c	;volatile
  2174  0011F0  D7FE               	goto	l249
  2175  0011F2                     l248:
  2176                           
  2177                           ;keyboard.c: 29: }
  2178                           ;keyboard.c: 30: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=1;
  2179  0011F2  9089               	bcf	3977,0,c	;volatile
  2180  0011F4  9289               	bcf	3977,1,c	;volatile
  2181  0011F6  9489               	bcf	3977,2,c	;volatile
  2182  0011F8  8689               	bsf	3977,3,c	;volatile
  2183                           
  2184                           ;keyboard.c: 31: {
  2185                           ;keyboard.c: 32: if (PORTAbits.RA5==1){key=14; while(PORTAbits.RA5==1){};}
  2186  0011FA  AA80               	btfss	3968,5,c	;volatile
  2187  0011FC  D006               	goto	l252
  2188  0011FE  0E0E               	movlw	14
  2189  001200  0100               	movlb	0	; () banked
  2190  001202  6FCD               	movwf	_key& (0+255),b
  2191  001204  D000               	goto	l253
  2192  001206                     l253:
  2193  001206  BA80               	btfsc	3968,5,c	;volatile
  2194  001208  D7FE               	goto	l253
  2195  00120A                     l252:
  2196                           
  2197                           ;keyboard.c: 33: if (PORTAbits.RA7==1){key=0;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  2198  00120A  AE80               	btfss	3968,7,c	;volatile
  2199  00120C  D019               	goto	l256
  2200  00120E  0E00               	movlw	0
  2201  001210  0100               	movlb	0	; () banked
  2202  001212  6FCD               	movwf	_key& (0+255),b
  2203                           
  2204                           ; BSR set to: 0
  2205  001214  0E8C               	movlw	low _buffer2
  2206  001216  6E0D               	movwf	sprintf@sp,c
  2207  001218  0E00               	movlw	high _buffer2
  2208  00121A  6E0E               	movwf	sprintf@sp+1,c
  2209  00121C  0EB6               	movlw	low STR_4
  2210  00121E  6E0F               	movwf	sprintf@f,c
  2211  001220  0E0F               	movlw	high STR_4
  2212  001222  6E10               	movwf	sprintf@f+1,c
  2213  001224  C0CD  F011         	movff	_key,?_sprintf+4
  2214  001228  6A12               	clrf	?_sprintf+5,c
  2215  00122A  EC3E  F009         	call	_sprintf	;wreg free
  2216  00122E  0E8C               	movlw	low _buffer2
  2217  001230  6E09               	movwf	lcd_putrs@ptr,c
  2218  001232  0E00               	movlw	high _buffer2
  2219  001234  6E0A               	movwf	lcd_putrs@ptr+1,c
  2220  001236  ECA8  F016         	call	_lcd_putrs	;wreg free
  2221  00123A  D000               	goto	l257
  2222  00123C                     l257:
  2223  00123C  BE80               	btfsc	3968,7,c	;volatile
  2224  00123E  D7FE               	goto	l257
  2225  001240                     l256:
  2226                           
  2227                           ;keyboard.c: 34: if (PORTAbits.RA6==1){key=15; while(PORTAbits.RA6==1){};}
  2228  001240  AC80               	btfss	3968,6,c	;volatile
  2229  001242  D006               	goto	l260
  2230  001244  0E0F               	movlw	15
  2231  001246  0100               	movlb	0	; () banked
  2232  001248  6FCD               	movwf	_key& (0+255),b
  2233  00124A  D000               	goto	l261
  2234  00124C                     l261:
  2235  00124C  BC80               	btfsc	3968,6,c	;volatile
  2236  00124E  D7FE               	goto	l261
  2237  001250                     l260:
  2238                           
  2239                           ;keyboard.c: 35: if (PORTCbits.RC2==1){key=16; while(PORTCbits.RC2==1){};}
  2240  001250  A482               	btfss	3970,2,c	;volatile
  2241  001252  D008               	goto	l3702
  2242  001254  0E10               	movlw	16
  2243  001256  0100               	movlb	0	; () banked
  2244  001258  6FCD               	movwf	_key& (0+255),b
  2245  00125A  D000               	goto	l265
  2246  00125C                     l265:
  2247  00125C  A482               	btfss	3970,2,c	;volatile
  2248  00125E  D002               	goto	l3702
  2249  001260  D7FD               	goto	l265
  2250  001262  D000               	goto	l3702
  2251  001264                     l3702:
  2252                           
  2253                           ;keyboard.c: 36: }
  2254                           ;keyboard.c: 37: _delay((unsigned long)((98)*(8000000/4000.0)));
  2255  001264  0EFF               	movlw	255
  2256  001266  6E24               	movwf	??_read_keyboard& (0+255),c
  2257  001268  0E8A               	movlw	138
  2258  00126A                     u4407:
  2259  00126A  2EE8               	decfsz	wreg,f,c
  2260  00126C  D7FE               	goto	u4407
  2261  00126E  2E24               	decfsz	??_read_keyboard& (0+255),f,c
  2262  001270  D7FC               	goto	u4407
  2263  001272  D000               	nop2	
  2264                           
  2265                           ;keyboard.c: 40: return key;
  2266  001274  0100               	movlb	0	; () banked
  2267  001276  51CD               	movf	_key& (0+255),w,b
  2268  001278  0012               	return	
  2269                           
  2270                           ; BSR set to: 0
  2271                           
  2272                           ; BSR set to: 0
  2273  00127A  0012               	return		;funcret
  2274  00127C                     __end_of_read_keyboard:
  2275                           	opt stack 0
  2276                           tblptru	equ	0xFF8
  2277                           tblptrh	equ	0xFF7
  2278                           tblptrl	equ	0xFF6
  2279                           tablat	equ	0xFF5
  2280                           postinc0	equ	0xFEE
  2281                           wreg	equ	0xFE8
  2282                           postdec1	equ	0xFE5
  2283                           fsr1l	equ	0xFE1
  2284                           status	equ	0xFD8
  2285                           
  2286 ;; *************** function _sprintf *****************
  2287 ;; Defined at:
  2288 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2289 ;; Parameters:    Size  Location     Type
  2290 ;;  sp              2   12[COMRAM] PTR unsigned char 
  2291 ;;		 -> buffer2(20), 
  2292 ;;  f               2   14[COMRAM] PTR const unsigned char 
  2293 ;;		 -> STR_15(10), STR_14(15), STR_13(5), STR_12(5), 
  2294 ;;		 -> STR_11(5), STR_10(5), STR_9(5), STR_8(5), 
  2295 ;;		 -> STR_7(5), STR_6(5), STR_5(5), STR_4(5), 
  2296 ;; Auto vars:     Size  Location     Type
  2297 ;;  tmpval          4    0        struct .
  2298 ;;  cp              3    0        PTR const unsigned char 
  2299 ;;  width           2   32[COMRAM] int 
  2300 ;;  val             2   29[COMRAM] unsigned int 
  2301 ;;  ap              2   26[COMRAM] PTR void [1]
  2302 ;;		 -> ?_sprintf(2), 
  2303 ;;  len             2    0        unsigned int 
  2304 ;;  c               1   34[COMRAM] char 
  2305 ;;  prec            1   31[COMRAM] char 
  2306 ;;  flag            1   28[COMRAM] unsigned char 
  2307 ;; Return value:  Size  Location     Type
  2308 ;;                  2   12[COMRAM] int 
  2309 ;; Registers used:
  2310 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2311 ;; Tracked objects:
  2312 ;;		On entry : 0/0
  2313 ;;		On exit  : 0/0
  2314 ;;		Unchanged: 0/0
  2315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2316 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2317 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2318 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2319 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2320 ;;Total ram usage:       23 bytes
  2321 ;; Hardware stack levels used:    1
  2322 ;; Hardware stack levels required when called:    1
  2323 ;; This function calls:
  2324 ;;		___lwdiv
  2325 ;;		___lwmod
  2326 ;;		___wmul
  2327 ;;		_isdigit
  2328 ;; This function is called by:
  2329 ;;		_read_keyboard
  2330 ;;		_write_Date
  2331 ;; This function uses a non-reentrant model
  2332 ;;
  2333                           
  2334                           	psect	text5
  2335  00127C                     __ptext5:
  2336                           	opt stack 0
  2337  00127C                     _sprintf:
  2338                           	opt stack 27
  2339                           
  2340                           ;doprnt.c: 494: va_list ap;
  2341                           ;doprnt.c: 499: signed char c;
  2342                           ;doprnt.c: 501: int width;
  2343                           ;doprnt.c: 506: signed char prec;
  2344                           ;doprnt.c: 508: unsigned char flag;
  2345                           ;doprnt.c: 523: union {
  2346                           ;doprnt.c: 524: unsigned long vd;
  2347                           ;doprnt.c: 525: double integ;
  2348                           ;doprnt.c: 526: } tmpval;
  2349                           ;doprnt.c: 528: unsigned int val;
  2350                           ;doprnt.c: 529: unsigned len;
  2351                           ;doprnt.c: 530: const char * cp;
  2352                           ;doprnt.c: 533: *ap = __va_start();
  2353                           
  2354                           ; BSR set to: 0
  2355                           ;incstack = 0
  2356  00127C  0E11               	movlw	low (?_sprintf+4)
  2357  00127E  6E1B               	movwf	sprintf@ap,c
  2358  001280  0E00               	movlw	high (?_sprintf+4)
  2359  001282  6E1C               	movwf	sprintf@ap+1,c
  2360                           
  2361                           ;doprnt.c: 536: while(c = *f++) {
  2362  001284  D117               	goto	l3492
  2363  001286                     l3410:
  2364                           
  2365                           ;doprnt.c: 538: if(c != '%')
  2366  001286  0E25               	movlw	37
  2367  001288  1823               	xorwf	sprintf@c,w,c
  2368  00128A  B4D8               	btfsc	status,2,c
  2369  00128C  D009               	goto	l3416
  2370                           
  2371                           ;doprnt.c: 540: {
  2372                           ;doprnt.c: 541: ((*sp++ = (c)));
  2373  00128E  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2374  001292  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2375  001296  C023  FFDF         	movff	sprintf@c,indf2
  2376  00129A  4A0D               	infsnz	sprintf@sp,f,c
  2377  00129C  2A0E               	incf	sprintf@sp+1,f,c
  2378                           
  2379                           ;doprnt.c: 542: continue;
  2380  00129E  D10A               	goto	l3492
  2381  0012A0                     l3416:
  2382                           
  2383                           ;doprnt.c: 543: }
  2384                           ;doprnt.c: 546: width = 0;
  2385  0012A0  0E00               	movlw	0
  2386  0012A2  6E22               	movwf	sprintf@width+1,c
  2387  0012A4  0E00               	movlw	0
  2388  0012A6  6E21               	movwf	sprintf@width,c
  2389                           
  2390                           ;doprnt.c: 548: flag = 0;
  2391  0012A8  0E00               	movlw	0
  2392  0012AA  6E1D               	movwf	sprintf@flag,c
  2393                           
  2394                           ;doprnt.c: 551: switch(*f) {
  2395                           
  2396                           ;doprnt.c: 550: for(;;) {
  2397  0012AC  D005               	goto	l3422
  2398  0012AE                     l3418:
  2399                           
  2400                           ;doprnt.c: 580: flag |= 0x04;
  2401  0012AE  841D               	bsf	sprintf@flag,2,c
  2402                           
  2403                           ;doprnt.c: 581: f++;
  2404  0012B0  4A0F               	infsnz	sprintf@f,f,c
  2405  0012B2  2A10               	incf	sprintf@f+1,f,c
  2406                           
  2407                           ;doprnt.c: 582: continue;
  2408  0012B4  D001               	goto	l3422
  2409                           
  2410                           ;doprnt.c: 584: }
  2411  0012B6  D00B               	goto	l3424
  2412  0012B8                     l3422:
  2413  0012B8  C00F  FFF6         	movff	sprintf@f,tblptrl
  2414  0012BC  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2415  0012C0                     	if	0	;tblptru may be non-zero
  2416  0012C0                     	endif
  2417  0012C0                     	if	0	;tblptru may be non-zero
  2418  0012C0                     	endif
  2419  0012C0  0008               	tblrd		*
  2420  0012C2  50F5               	movf	tablat,w,c
  2421                           
  2422                           ; Switch size 1, requested type "space"
  2423                           ; Number of cases is 1, Range of values is 48 to 48
  2424                           ; switch strategies available:
  2425                           ; Name         Instructions Cycles
  2426                           ; simple_byte            4     3 (average)
  2427                           ;	Chosen strategy is simple_byte
  2428  0012C4  0A30               	xorlw	48	; case 48
  2429  0012C6  B4D8               	btfsc	status,2,c
  2430  0012C8  D7F2               	goto	l3418
  2431                           
  2432                           ;doprnt.c: 585: break;
  2433  0012CA  D001               	goto	l3424
  2434                           
  2435                           ;doprnt.c: 586: }
  2436  0012CC  D7F5               	goto	l3422
  2437  0012CE                     l3424:
  2438                           
  2439                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2440  0012CE  C00F  FFF6         	movff	sprintf@f,tblptrl
  2441  0012D2  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2442  0012D6                     	if	0	;tblptru may be non-zero
  2443  0012D6                     	endif
  2444  0012D6                     	if	0	;tblptru may be non-zero
  2445  0012D6                     	endif
  2446  0012D6  0008               	tblrd		*
  2447  0012D8  50F5               	movf	tablat,w,c
  2448  0012DA  EC6A  F018         	call	_isdigit
  2449  0012DE  A0D8               	btfss	status,0,c
  2450  0012E0  D03A               	goto	l3440
  2451                           
  2452                           ;doprnt.c: 598: width = 0;
  2453  0012E2  0E00               	movlw	0
  2454  0012E4  6E22               	movwf	sprintf@width+1,c
  2455  0012E6  0E00               	movlw	0
  2456  0012E8  6E21               	movwf	sprintf@width,c
  2457  0012EA  D000               	goto	l3428
  2458  0012EC                     l3428:
  2459                           
  2460                           ;doprnt.c: 600: width *= 10;
  2461  0012EC  C021  F001         	movff	sprintf@width,___wmul@multiplier
  2462  0012F0  C022  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  2463  0012F4  0E00               	movlw	0
  2464  0012F6  6E04               	movwf	___wmul@multiplicand+1,c
  2465  0012F8  0E0A               	movlw	10
  2466  0012FA  6E03               	movwf	___wmul@multiplicand,c
  2467  0012FC  EC0C  F018         	call	___wmul	;wreg free
  2468  001300  C001  F021         	movff	?___wmul,sprintf@width
  2469  001304  C002  F022         	movff	?___wmul+1,sprintf@width+1
  2470                           
  2471                           ;doprnt.c: 601: width += *f++ - '0';
  2472  001308  0ED0               	movlw	208
  2473  00130A  6E17               	movwf	??_sprintf& (0+255),c
  2474  00130C  0EFF               	movlw	255
  2475  00130E  6E18               	movwf	(??_sprintf+1)& (0+255),c
  2476  001310  C00F  FFF6         	movff	sprintf@f,tblptrl
  2477  001314  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2478  001318                     	if	0	;tblptru may be non-zero
  2479  001318                     	endif
  2480  001318                     	if	0	;tblptru may be non-zero
  2481  001318                     	endif
  2482  001318  0008               	tblrd		*
  2483  00131A  50F5               	movf	tablat,w,c
  2484  00131C  6E19               	movwf	(??_sprintf+2)& (0+255),c
  2485  00131E  6A1A               	clrf	(??_sprintf+3)& (0+255),c
  2486  001320  5017               	movf	??_sprintf,w,c
  2487  001322  2619               	addwf	??_sprintf+2,f,c
  2488  001324  5018               	movf	??_sprintf+1,w,c
  2489  001326  221A               	addwfc	??_sprintf+3,f,c
  2490  001328  5019               	movf	??_sprintf+2,w,c
  2491  00132A  2621               	addwf	sprintf@width,f,c
  2492  00132C  501A               	movf	??_sprintf+3,w,c
  2493  00132E  2222               	addwfc	sprintf@width+1,f,c
  2494  001330  4A0F               	infsnz	sprintf@f,f,c
  2495  001332  2A10               	incf	sprintf@f+1,f,c
  2496                           
  2497                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2498  001334  C00F  FFF6         	movff	sprintf@f,tblptrl
  2499  001338  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2500  00133C                     	if	0	;tblptru may be non-zero
  2501  00133C                     	endif
  2502  00133C                     	if	0	;tblptru may be non-zero
  2503  00133C                     	endif
  2504  00133C  0008               	tblrd		*
  2505  00133E  50F5               	movf	tablat,w,c
  2506  001340  EC6A  F018         	call	_isdigit
  2507  001344  A0D8               	btfss	status,0,c
  2508  001346  D007               	goto	l3440
  2509  001348  D7D1               	goto	l3428
  2510                           
  2511                           ;doprnt.c: 608: }
  2512                           ;doprnt.c: 635: switch(c = *f++) {
  2513  00134A  D005               	goto	l3440
  2514                           
  2515                           ;doprnt.c: 638: goto alldone;
  2516                           
  2517                           ;doprnt.c: 637: case 0:
  2518  00134C  D0C1               	goto	l3494
  2519                           
  2520                           ;doprnt.c: 813: continue;
  2521                           
  2522                           ;doprnt.c: 802: default:
  2523  00134E  D0B2               	goto	l3492
  2524  001350                     l3436:
  2525                           
  2526                           ;doprnt.c: 818: flag |= 0xC0;
  2527  001350  0EC0               	movlw	192
  2528  001352  121D               	iorwf	sprintf@flag,f,c
  2529                           
  2530                           ;doprnt.c: 822: }
  2531                           
  2532                           ;doprnt.c: 819: break;
  2533  001354  D011               	goto	l3442
  2534  001356                     l3440:
  2535  001356  C00F  FFF6         	movff	sprintf@f,tblptrl
  2536  00135A  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2537  00135E  4A0F               	infsnz	sprintf@f,f,c
  2538  001360  2A10               	incf	sprintf@f+1,f,c
  2539  001362                     	if	0	;tblptru may be non-zero
  2540  001362                     	endif
  2541  001362                     	if	0	;tblptru may be non-zero
  2542  001362                     	endif
  2543  001362  0008               	tblrd		*
  2544  001364  CFF5 F023          	movff	tablat,sprintf@c
  2545  001368  5023               	movf	sprintf@c,w,c
  2546                           
  2547                           ; Switch size 1, requested type "space"
  2548                           ; Number of cases is 2, Range of values is 0 to 117
  2549                           ; switch strategies available:
  2550                           ; Name         Instructions Cycles
  2551                           ; simple_byte            7     4 (average)
  2552                           ;	Chosen strategy is simple_byte
  2553  00136A  0A00               	xorlw	0	; case 0
  2554  00136C  B4D8               	btfsc	status,2,c
  2555  00136E  D0B0               	goto	l3494
  2556  001370  0A75               	xorlw	117	; case 117
  2557  001372  B4D8               	btfsc	status,2,c
  2558  001374  D7ED               	goto	l3436
  2559  001376  D09E               	goto	l3492
  2560  001378                     l3442:
  2561                           
  2562                           ;doprnt.c: 1273: {
  2563                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2564  001378  C01B  FFD9         	movff	sprintf@ap,fsr2l
  2565  00137C  C01C  FFDA         	movff	sprintf@ap+1,fsr2h
  2566  001380  CFDE F01E          	movff	postinc2,sprintf@val
  2567  001384  CFDD F01F          	movff	postdec2,sprintf@val+1
  2568  001388  0E02               	movlw	2
  2569  00138A  261B               	addwf	sprintf@ap,f,c
  2570  00138C  0E00               	movlw	0
  2571  00138E  221C               	addwfc	sprintf@ap+1,f,c
  2572                           
  2573                           ;doprnt.c: 1287: }
  2574                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2575  001390  0E01               	movlw	1
  2576  001392  6E23               	movwf	sprintf@c,c
  2577  001394                     l3448:
  2578  001394  0E05               	movlw	5
  2579  001396  1823               	xorwf	sprintf@c,w,c
  2580  001398  B4D8               	btfsc	status,2,c
  2581  00139A  D016               	goto	l3460
  2582  00139C  D001               	goto	l3452
  2583  00139E  D014               	goto	l3460
  2584  0013A0                     l3452:
  2585                           
  2586                           ;doprnt.c: 1306: if(val < dpowers[c])
  2587  0013A0  5023               	movf	sprintf@c,w,c
  2588  0013A2  0D02               	mullw	2
  2589  0013A4  0E01               	movlw	low _dpowers
  2590  0013A6  24F3               	addwf	prodl,w,c
  2591  0013A8  6EF6               	movwf	tblptrl,c
  2592  0013AA  0E0F               	movlw	high _dpowers
  2593  0013AC  20F4               	addwfc	prodh,w,c
  2594  0013AE  6EF7               	movwf	tblptrh,c
  2595  0013B0                     	if	0	;There are less than 3 active tblptr bytes
  2596  0013B0                     	endif
  2597  0013B0  0009               	tblrd		*+
  2598  0013B2  50F5               	movf	tablat,w,c
  2599  0013B4  5C1E               	subwf	sprintf@val,w,c
  2600  0013B6  0009               	tblrd		*+
  2601  0013B8  50F5               	movf	tablat,w,c
  2602  0013BA  581F               	subwfb	sprintf@val+1,w,c
  2603  0013BC  A0D8               	btfss	status,0,c
  2604  0013BE  D004               	goto	l3460
  2605  0013C0  D001               	goto	l3456
  2606                           
  2607                           ;doprnt.c: 1307: break;
  2608  0013C2  D002               	goto	l3460
  2609  0013C4                     l3456:
  2610  0013C4  2A23               	incf	sprintf@c,f,c
  2611  0013C6  D7E6               	goto	l3448
  2612  0013C8                     l3460:
  2613                           
  2614                           ;doprnt.c: 1381: if(width > c)
  2615  0013C8  0E80               	movlw	128
  2616  0013CA  BE23               	btfsc	sprintf@c,7,c
  2617  0013CC  0E7F               	movlw	127
  2618  0013CE  6E17               	movwf	??_sprintf& (0+255),c
  2619  0013D0  5021               	movf	sprintf@width,w,c
  2620  0013D2  5C23               	subwf	sprintf@c,w,c
  2621  0013D4  5022               	movf	sprintf@width+1,w,c
  2622  0013D6  0A80               	xorlw	128
  2623  0013D8  5817               	subwfb	??_sprintf& (0+255),w,c
  2624  0013DA  B0D8               	btfsc	status,0,c
  2625  0013DC  D007               	goto	l3464
  2626                           
  2627                           ;doprnt.c: 1382: width -= c;
  2628  0013DE  5023               	movf	sprintf@c,w,c
  2629  0013E0  5E21               	subwf	sprintf@width,f,c
  2630  0013E2  0E00               	movlw	0
  2631  0013E4  BE23               	btfsc	sprintf@c,7,c
  2632  0013E6  0EFF               	movlw	255
  2633  0013E8  5A22               	subwfb	sprintf@width+1,f,c
  2634  0013EA  D005               	goto	l3466
  2635  0013EC                     l3464:
  2636                           
  2637                           ;doprnt.c: 1383: else
  2638                           ;doprnt.c: 1384: width = 0;
  2639  0013EC  0E00               	movlw	0
  2640  0013EE  6E22               	movwf	sprintf@width+1,c
  2641  0013F0  0E00               	movlw	0
  2642  0013F2  6E21               	movwf	sprintf@width,c
  2643  0013F4  D000               	goto	l3466
  2644  0013F6                     l3466:
  2645                           
  2646                           ;doprnt.c: 1387: if(flag & 0x04) {
  2647  0013F6  A41D               	btfss	sprintf@flag,2,c
  2648  0013F8  D015               	goto	l3476
  2649                           
  2650                           ;doprnt.c: 1415: if(width)
  2651  0013FA  5021               	movf	sprintf@width,w,c
  2652  0013FC  1022               	iorwf	sprintf@width+1,w,c
  2653  0013FE  B4D8               	btfsc	status,2,c
  2654  001400  D026               	goto	l676
  2655  001402                     l3470:
  2656                           
  2657                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  2658  001402  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2659  001406  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2660  00140A  0E30               	movlw	48
  2661  00140C  6EDF               	movwf	indf2,c
  2662  00140E  4A0D               	infsnz	sprintf@sp,f,c
  2663  001410  2A0E               	incf	sprintf@sp+1,f,c
  2664                           
  2665                           ;doprnt.c: 1418: while(--width);
  2666  001412  0621               	decf	sprintf@width,f,c
  2667  001414  A0D8               	btfss	status,0,c
  2668  001416  0622               	decf	sprintf@width+1,f,c
  2669  001418  5021               	movf	sprintf@width,w,c
  2670  00141A  1022               	iorwf	sprintf@width+1,w,c
  2671  00141C  B4D8               	btfsc	status,2,c
  2672  00141E  D017               	goto	l676
  2673  001420  D7F0               	goto	l3470
  2674                           
  2675                           ;doprnt.c: 1420: } else
  2676  001422  D015               	goto	l676
  2677  001424                     l3476:
  2678                           
  2679                           ;doprnt.c: 1422: {
  2680                           ;doprnt.c: 1424: if(width
  2681                           ;doprnt.c: 1428: )
  2682  001424  5021               	movf	sprintf@width,w,c
  2683  001426  1022               	iorwf	sprintf@width+1,w,c
  2684  001428  B4D8               	btfsc	status,2,c
  2685  00142A  D011               	goto	l676
  2686  00142C                     l3478:
  2687                           
  2688                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  2689  00142C  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2690  001430  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2691  001434  0E20               	movlw	32
  2692  001436  6EDF               	movwf	indf2,c
  2693  001438  4A0D               	infsnz	sprintf@sp,f,c
  2694  00143A  2A0E               	incf	sprintf@sp+1,f,c
  2695                           
  2696                           ;doprnt.c: 1431: while(--width);
  2697  00143C  0621               	decf	sprintf@width,f,c
  2698  00143E  A0D8               	btfss	status,0,c
  2699  001440  0622               	decf	sprintf@width+1,f,c
  2700  001442  5021               	movf	sprintf@width,w,c
  2701  001444  1022               	iorwf	sprintf@width+1,w,c
  2702  001446  B4D8               	btfsc	status,2,c
  2703  001448  D002               	goto	l676
  2704  00144A  D7F0               	goto	l3478
  2705  00144C  D000               	goto	l676
  2706  00144E                     l676:
  2707                           
  2708                           ;doprnt.c: 1469: }
  2709                           ;doprnt.c: 1472: prec = c;
  2710  00144E  C023  F020         	movff	sprintf@c,sprintf@prec
  2711                           
  2712                           ;doprnt.c: 1474: while(prec--) {
  2713  001452  D02A               	goto	l3490
  2714  001454                     l3484:
  2715                           
  2716                           ;doprnt.c: 1478: {
  2717                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2718  001454  5020               	movf	sprintf@prec,w,c
  2719  001456  0D02               	mullw	2
  2720  001458  0E01               	movlw	low _dpowers
  2721  00145A  24F3               	addwf	prodl,w,c
  2722  00145C  6EF6               	movwf	tblptrl,c
  2723  00145E  0E0F               	movlw	high _dpowers
  2724  001460  20F4               	addwfc	prodh,w,c
  2725  001462  6EF7               	movwf	tblptrh,c
  2726  001464                     	if	0	;There are less than 3 active tblptr bytes
  2727  001464                     	endif
  2728  001464  0009               	tblrd		*+
  2729  001466  CFF5 F003          	movff	tablat,___lwdiv@divisor
  2730  00146A  000A               	tblrd		*-
  2731  00146C  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  2732  001470  C01E  F001         	movff	sprintf@val,___lwdiv@dividend
  2733  001474  C01F  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  2734  001478  EC4E  F016         	call	___lwdiv	;wreg free
  2735  00147C  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  2736  001480  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  2737  001484  0E00               	movlw	0
  2738  001486  6E0B               	movwf	___lwmod@divisor+1,c
  2739  001488  0E0A               	movlw	10
  2740  00148A  6E0A               	movwf	___lwmod@divisor,c
  2741  00148C  ECD2  F016         	call	___lwmod	;wreg free
  2742  001490  5008               	movf	?___lwmod,w,c
  2743  001492  0F30               	addlw	48
  2744  001494  6E23               	movwf	sprintf@c,c
  2745                           
  2746                           ;doprnt.c: 1523: }
  2747                           ;doprnt.c: 1524: ((*sp++ = (c)));
  2748  001496  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2749  00149A  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2750  00149E  C023  FFDF         	movff	sprintf@c,indf2
  2751  0014A2  4A0D               	infsnz	sprintf@sp,f,c
  2752  0014A4  2A0E               	incf	sprintf@sp+1,f,c
  2753  0014A6  D000               	goto	l3490
  2754  0014A8                     l3490:
  2755  0014A8  0620               	decf	sprintf@prec,f,c
  2756  0014AA  2820               	incf	sprintf@prec,w,c
  2757  0014AC  B4D8               	btfsc	status,2,c
  2758  0014AE  D002               	goto	l3492
  2759  0014B0  D7D1               	goto	l3484
  2760  0014B2  D000               	goto	l3492
  2761  0014B4                     l3492:
  2762  0014B4  C00F  FFF6         	movff	sprintf@f,tblptrl
  2763  0014B8  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2764  0014BC  4A0F               	infsnz	sprintf@f,f,c
  2765  0014BE  2A10               	incf	sprintf@f+1,f,c
  2766  0014C0                     	if	0	;tblptru may be non-zero
  2767  0014C0                     	endif
  2768  0014C0                     	if	0	;tblptru may be non-zero
  2769  0014C0                     	endif
  2770  0014C0  0008               	tblrd		*
  2771  0014C2  CFF5 F023          	movff	tablat,sprintf@c
  2772  0014C6  5023               	movf	sprintf@c,w,c
  2773  0014C8  B4D8               	btfsc	status,2,c
  2774  0014CA  D002               	goto	l3494
  2775  0014CC  D6DC               	goto	l3410
  2776  0014CE  D000               	goto	l3494
  2777  0014D0                     l3494:
  2778                           
  2779                           ;doprnt.c: 1538: *sp = 0;
  2780  0014D0  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2781  0014D4  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2782  0014D8  0E00               	movlw	0
  2783  0014DA  6EDF               	movwf	indf2,c
  2784  0014DC  0012               	return	
  2785                           
  2786                           ;doprnt.c: 1540: return 0;
  2787                           ;	Return value of _sprintf is never used
  2788  0014DE  0012               	return		;funcret
  2789  0014E0                     __end_of_sprintf:
  2790                           	opt stack 0
  2791                           tblptru	equ	0xFF8
  2792                           tblptrh	equ	0xFF7
  2793                           tblptrl	equ	0xFF6
  2794                           tablat	equ	0xFF5
  2795                           prodh	equ	0xFF4
  2796                           prodl	equ	0xFF3
  2797                           postinc0	equ	0xFEE
  2798                           wreg	equ	0xFE8
  2799                           postdec1	equ	0xFE5
  2800                           fsr1l	equ	0xFE1
  2801                           indf2	equ	0xFDF
  2802                           postinc2	equ	0xFDE
  2803                           postdec2	equ	0xFDD
  2804                           fsr2h	equ	0xFDA
  2805                           fsr2l	equ	0xFD9
  2806                           status	equ	0xFD8
  2807                           
  2808 ;; *************** function _isdigit *****************
  2809 ;; Defined at:
  2810 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\isdigit.c"
  2811 ;; Parameters:    Size  Location     Type
  2812 ;;  c               1    wreg     unsigned char 
  2813 ;; Auto vars:     Size  Location     Type
  2814 ;;  c               1    2[COMRAM] unsigned char 
  2815 ;; Return value:  Size  Location     Type
  2816 ;;		None               void
  2817 ;; Registers used:
  2818 ;;		wreg, status,2, status,0
  2819 ;; Tracked objects:
  2820 ;;		On entry : 0/0
  2821 ;;		On exit  : 0/0
  2822 ;;		Unchanged: 0/0
  2823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2825 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2826 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2827 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2828 ;;Total ram usage:        3 bytes
  2829 ;; Hardware stack levels used:    1
  2830 ;; This function calls:
  2831 ;;		Nothing
  2832 ;; This function is called by:
  2833 ;;		_sprintf
  2834 ;; This function uses a non-reentrant model
  2835 ;;
  2836                           
  2837                           	psect	text6
  2838  0030D4                     __ptext6:
  2839                           	opt stack 0
  2840  0030D4                     _isdigit:
  2841                           	opt stack 27
  2842                           
  2843                           ;incstack = 0
  2844                           ;isdigit@c stored from wreg
  2845  0030D4  6E03               	movwf	isdigit@c,c
  2846  0030D6  0E00               	movlw	0
  2847  0030D8  6E02               	movwf	_isdigit$2371,c
  2848  0030DA  0E3A               	movlw	58
  2849  0030DC  6003               	cpfslt	isdigit@c,c
  2850  0030DE  D006               	goto	l3220
  2851  0030E0  0E2F               	movlw	47
  2852  0030E2  6403               	cpfsgt	isdigit@c,c
  2853  0030E4  D003               	goto	l3220
  2854  0030E6  0E01               	movlw	1
  2855  0030E8  6E02               	movwf	_isdigit$2371,c
  2856  0030EA  D000               	goto	l3220
  2857  0030EC                     l3220:
  2858  0030EC  C002  F001         	movff	_isdigit$2371,??_isdigit
  2859  0030F0  3001               	rrcf	??_isdigit,w,c
  2860  0030F2  0012               	return	
  2861  0030F4  0012               	return		;funcret
  2862  0030F6                     __end_of_isdigit:
  2863                           	opt stack 0
  2864                           tblptru	equ	0xFF8
  2865                           tblptrh	equ	0xFF7
  2866                           tblptrl	equ	0xFF6
  2867                           tablat	equ	0xFF5
  2868                           prodh	equ	0xFF4
  2869                           prodl	equ	0xFF3
  2870                           postinc0	equ	0xFEE
  2871                           wreg	equ	0xFE8
  2872                           postdec1	equ	0xFE5
  2873                           fsr1l	equ	0xFE1
  2874                           indf2	equ	0xFDF
  2875                           postinc2	equ	0xFDE
  2876                           postdec2	equ	0xFDD
  2877                           fsr2h	equ	0xFDA
  2878                           fsr2l	equ	0xFD9
  2879                           status	equ	0xFD8
  2880                           
  2881 ;; *************** function ___lwmod *****************
  2882 ;; Defined at:
  2883 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lwmod.c"
  2884 ;; Parameters:    Size  Location     Type
  2885 ;;  dividend        2    7[COMRAM] unsigned int 
  2886 ;;  divisor         2    9[COMRAM] unsigned int 
  2887 ;; Auto vars:     Size  Location     Type
  2888 ;;  counter         1   11[COMRAM] unsigned char 
  2889 ;; Return value:  Size  Location     Type
  2890 ;;                  2    7[COMRAM] unsigned int 
  2891 ;; Registers used:
  2892 ;;		wreg, status,2, status,0
  2893 ;; Tracked objects:
  2894 ;;		On entry : 0/0
  2895 ;;		On exit  : 0/0
  2896 ;;		Unchanged: 0/0
  2897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2898 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2899 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2901 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2902 ;;Total ram usage:        5 bytes
  2903 ;; Hardware stack levels used:    1
  2904 ;; This function calls:
  2905 ;;		Nothing
  2906 ;; This function is called by:
  2907 ;;		_sprintf
  2908 ;; This function uses a non-reentrant model
  2909 ;;
  2910                           
  2911                           	psect	text7
  2912  002DA4                     __ptext7:
  2913                           	opt stack 0
  2914  002DA4                     ___lwmod:
  2915                           	opt stack 27
  2916                           
  2917                           ;incstack = 0
  2918  002DA4  500A               	movf	___lwmod@divisor,w,c
  2919  002DA6  100B               	iorwf	___lwmod@divisor+1,w,c
  2920  002DA8  B4D8               	btfsc	status,2,c
  2921  002DAA  D01D               	goto	l1330
  2922  002DAC  0E01               	movlw	1
  2923  002DAE  6E0C               	movwf	___lwmod@counter,c
  2924  002DB0  D005               	goto	l3322
  2925  002DB2                     l3320:
  2926  002DB2  90D8               	bcf	status,0,c
  2927  002DB4  360A               	rlcf	___lwmod@divisor,f,c
  2928  002DB6  360B               	rlcf	___lwmod@divisor+1,f,c
  2929  002DB8  2A0C               	incf	___lwmod@counter,f,c
  2930  002DBA  D000               	goto	l3322
  2931  002DBC                     l3322:
  2932  002DBC  BE0B               	btfsc	___lwmod@divisor+1,7,c
  2933  002DBE  D002               	goto	l3324
  2934  002DC0  D7F8               	goto	l3320
  2935  002DC2  D000               	goto	l3324
  2936  002DC4                     l3324:
  2937  002DC4  500A               	movf	___lwmod@divisor,w,c
  2938  002DC6  5C08               	subwf	___lwmod@dividend,w,c
  2939  002DC8  500B               	movf	___lwmod@divisor+1,w,c
  2940  002DCA  5809               	subwfb	___lwmod@dividend+1,w,c
  2941  002DCC  A0D8               	btfss	status,0,c
  2942  002DCE  D005               	goto	l3328
  2943  002DD0  500A               	movf	___lwmod@divisor,w,c
  2944  002DD2  5E08               	subwf	___lwmod@dividend,f,c
  2945  002DD4  500B               	movf	___lwmod@divisor+1,w,c
  2946  002DD6  5A09               	subwfb	___lwmod@dividend+1,f,c
  2947  002DD8  D000               	goto	l3328
  2948  002DDA                     l3328:
  2949  002DDA  90D8               	bcf	status,0,c
  2950  002DDC  320B               	rrcf	___lwmod@divisor+1,f,c
  2951  002DDE  320A               	rrcf	___lwmod@divisor,f,c
  2952  002DE0  2E0C               	decfsz	___lwmod@counter,f,c
  2953  002DE2  D7F0               	goto	l3324
  2954  002DE4  D000               	goto	l1330
  2955  002DE6                     l1330:
  2956  002DE6  C008  F008         	movff	___lwmod@dividend,?___lwmod
  2957  002DEA  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  2958  002DEE  0012               	return		;funcret
  2959  002DF0                     __end_of___lwmod:
  2960                           	opt stack 0
  2961                           tblptru	equ	0xFF8
  2962                           tblptrh	equ	0xFF7
  2963                           tblptrl	equ	0xFF6
  2964                           tablat	equ	0xFF5
  2965                           prodh	equ	0xFF4
  2966                           prodl	equ	0xFF3
  2967                           postinc0	equ	0xFEE
  2968                           wreg	equ	0xFE8
  2969                           postdec1	equ	0xFE5
  2970                           fsr1l	equ	0xFE1
  2971                           indf2	equ	0xFDF
  2972                           postinc2	equ	0xFDE
  2973                           postdec2	equ	0xFDD
  2974                           fsr2h	equ	0xFDA
  2975                           fsr2l	equ	0xFD9
  2976                           status	equ	0xFD8
  2977                           
  2978 ;; *************** function ___lwdiv *****************
  2979 ;; Defined at:
  2980 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  2981 ;; Parameters:    Size  Location     Type
  2982 ;;  dividend        2    0[COMRAM] unsigned int 
  2983 ;;  divisor         2    2[COMRAM] unsigned int 
  2984 ;; Auto vars:     Size  Location     Type
  2985 ;;  quotient        2    4[COMRAM] unsigned int 
  2986 ;;  counter         1    6[COMRAM] unsigned char 
  2987 ;; Return value:  Size  Location     Type
  2988 ;;                  2    0[COMRAM] unsigned int 
  2989 ;; Registers used:
  2990 ;;		wreg, status,2, status,0
  2991 ;; Tracked objects:
  2992 ;;		On entry : 0/0
  2993 ;;		On exit  : 0/0
  2994 ;;		Unchanged: 0/0
  2995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2996 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2997 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2999 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3000 ;;Total ram usage:        7 bytes
  3001 ;; Hardware stack levels used:    1
  3002 ;; This function calls:
  3003 ;;		Nothing
  3004 ;; This function is called by:
  3005 ;;		_sprintf
  3006 ;; This function uses a non-reentrant model
  3007 ;;
  3008                           
  3009                           	psect	text8
  3010  002C9C                     __ptext8:
  3011                           	opt stack 0
  3012  002C9C                     ___lwdiv:
  3013                           	opt stack 27
  3014                           
  3015                           ;incstack = 0
  3016  002C9C  0E00               	movlw	0
  3017  002C9E  6E06               	movwf	___lwdiv@quotient+1,c
  3018  002CA0  0E00               	movlw	0
  3019  002CA2  6E05               	movwf	___lwdiv@quotient,c
  3020  002CA4  5003               	movf	___lwdiv@divisor,w,c
  3021  002CA6  1004               	iorwf	___lwdiv@divisor+1,w,c
  3022  002CA8  B4D8               	btfsc	status,2,c
  3023  002CAA  D021               	goto	l1320
  3024  002CAC  0E01               	movlw	1
  3025  002CAE  6E07               	movwf	___lwdiv@counter,c
  3026  002CB0  D005               	goto	l3302
  3027  002CB2                     l3300:
  3028  002CB2  90D8               	bcf	status,0,c
  3029  002CB4  3603               	rlcf	___lwdiv@divisor,f,c
  3030  002CB6  3604               	rlcf	___lwdiv@divisor+1,f,c
  3031  002CB8  2A07               	incf	___lwdiv@counter,f,c
  3032  002CBA  D000               	goto	l3302
  3033  002CBC                     l3302:
  3034  002CBC  BE04               	btfsc	___lwdiv@divisor+1,7,c
  3035  002CBE  D002               	goto	l3304
  3036  002CC0  D7F8               	goto	l3300
  3037  002CC2  D000               	goto	l3304
  3038  002CC4                     l3304:
  3039  002CC4  90D8               	bcf	status,0,c
  3040  002CC6  3605               	rlcf	___lwdiv@quotient,f,c
  3041  002CC8  3606               	rlcf	___lwdiv@quotient+1,f,c
  3042  002CCA  5003               	movf	___lwdiv@divisor,w,c
  3043  002CCC  5C01               	subwf	___lwdiv@dividend,w,c
  3044  002CCE  5004               	movf	___lwdiv@divisor+1,w,c
  3045  002CD0  5802               	subwfb	___lwdiv@dividend+1,w,c
  3046  002CD2  A0D8               	btfss	status,0,c
  3047  002CD4  D006               	goto	l3312
  3048  002CD6  5003               	movf	___lwdiv@divisor,w,c
  3049  002CD8  5E01               	subwf	___lwdiv@dividend,f,c
  3050  002CDA  5004               	movf	___lwdiv@divisor+1,w,c
  3051  002CDC  5A02               	subwfb	___lwdiv@dividend+1,f,c
  3052  002CDE  8005               	bsf	___lwdiv@quotient,0,c
  3053  002CE0  D000               	goto	l3312
  3054  002CE2                     l3312:
  3055  002CE2  90D8               	bcf	status,0,c
  3056  002CE4  3204               	rrcf	___lwdiv@divisor+1,f,c
  3057  002CE6  3203               	rrcf	___lwdiv@divisor,f,c
  3058  002CE8  2E07               	decfsz	___lwdiv@counter,f,c
  3059  002CEA  D7EC               	goto	l3304
  3060  002CEC  D000               	goto	l1320
  3061  002CEE                     l1320:
  3062  002CEE  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  3063  002CF2  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3064  002CF6  0012               	return		;funcret
  3065  002CF8                     __end_of___lwdiv:
  3066                           	opt stack 0
  3067                           tblptru	equ	0xFF8
  3068                           tblptrh	equ	0xFF7
  3069                           tblptrl	equ	0xFF6
  3070                           tablat	equ	0xFF5
  3071                           prodh	equ	0xFF4
  3072                           prodl	equ	0xFF3
  3073                           postinc0	equ	0xFEE
  3074                           wreg	equ	0xFE8
  3075                           postdec1	equ	0xFE5
  3076                           fsr1l	equ	0xFE1
  3077                           indf2	equ	0xFDF
  3078                           postinc2	equ	0xFDE
  3079                           postdec2	equ	0xFDD
  3080                           fsr2h	equ	0xFDA
  3081                           fsr2l	equ	0xFD9
  3082                           status	equ	0xFD8
  3083                           
  3084 ;; *************** function __delay_s *****************
  3085 ;; Defined at:
  3086 ;;		line 21 in file "lcd_vision.c"
  3087 ;; Parameters:    Size  Location     Type
  3088 ;;  millis          2    8[COMRAM] int 
  3089 ;; Auto vars:     Size  Location     Type
  3090 ;;  index           2   13[COMRAM] short 
  3091 ;;  it              2   11[COMRAM] short 
  3092 ;; Return value:  Size  Location     Type
  3093 ;;		None               void
  3094 ;; Registers used:
  3095 ;;		wreg, status,2, status,0, cstack
  3096 ;; Tracked objects:
  3097 ;;		On entry : 0/0
  3098 ;;		On exit  : 0/0
  3099 ;;		Unchanged: 0/0
  3100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3101 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3102 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3103 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3104 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3105 ;;Total ram usage:        7 bytes
  3106 ;; Hardware stack levels used:    1
  3107 ;; Hardware stack levels required when called:    1
  3108 ;; This function calls:
  3109 ;;		___awdiv
  3110 ;; This function is called by:
  3111 ;;		_twinkle
  3112 ;; This function uses a non-reentrant model
  3113 ;;
  3114                           
  3115                           	psect	text9
  3116  002CF8                     __ptext9:
  3117                           	opt stack 0
  3118  002CF8                     __delay_s:
  3119                           	opt stack 27
  3120                           
  3121                           ;lcd_vision.c: 22: short it = millis/100;
  3122                           
  3123                           ;incstack = 0
  3124  002CF8  C009  F001         	movff	__delay_s@millis,___awdiv@dividend
  3125  002CFC  C00A  F002         	movff	__delay_s@millis+1,___awdiv@dividend+1
  3126  002D00  0E00               	movlw	0
  3127  002D02  6E04               	movwf	___awdiv@divisor+1,c
  3128  002D04  0E64               	movlw	100
  3129  002D06  6E03               	movwf	___awdiv@divisor,c
  3130  002D08  EC21  F014         	call	___awdiv	;wreg free
  3131  002D0C  C001  F00C         	movff	?___awdiv,__delay_s@it
  3132  002D10  C002  F00D         	movff	?___awdiv+1,__delay_s@it+1
  3133                           
  3134                           ;lcd_vision.c: 23: short index = 1;
  3135  002D14  0E00               	movlw	0
  3136  002D16  6E0F               	movwf	__delay_s@index+1,c
  3137  002D18  0E01               	movlw	1
  3138  002D1A  6E0E               	movwf	__delay_s@index,c
  3139                           
  3140                           ;lcd_vision.c: 25: for(index = 1; index <= it; index++){
  3141  002D1C  0E00               	movlw	0
  3142  002D1E  6E0F               	movwf	__delay_s@index+1,c
  3143  002D20  0E01               	movlw	1
  3144  002D22  6E0E               	movwf	__delay_s@index,c
  3145  002D24  D00A               	goto	l580
  3146  002D26                     l3856:
  3147                           
  3148                           ;lcd_vision.c: 26: _delay((unsigned long)((98)*(8000000/4000.0)));
  3149  002D26  0EFF               	movlw	255
  3150  002D28  6E0B               	movwf	??__delay_s& (0+255),c
  3151  002D2A  0E8A               	movlw	138
  3152  002D2C                     u4417:
  3153  002D2C  2EE8               	decfsz	wreg,f,c
  3154  002D2E  D7FE               	goto	u4417
  3155  002D30  2E0B               	decfsz	??__delay_s& (0+255),f,c
  3156  002D32  D7FC               	goto	u4417
  3157  002D34  D000               	nop2	
  3158  002D36  4A0E               	infsnz	__delay_s@index,f,c
  3159  002D38  2A0F               	incf	__delay_s@index+1,f,c
  3160  002D3A                     l580:
  3161  002D3A  500E               	movf	__delay_s@index,w,c
  3162  002D3C  5C0C               	subwf	__delay_s@it,w,c
  3163  002D3E  500D               	movf	__delay_s@it+1,w,c
  3164  002D40  0A80               	xorlw	128
  3165  002D42  6E0B               	movwf	??__delay_s& (0+255),c
  3166  002D44  500F               	movf	__delay_s@index+1,w,c
  3167  002D46  0A80               	xorlw	128
  3168  002D48  580B               	subwfb	??__delay_s& (0+255),w,c
  3169  002D4A  B0D8               	btfsc	status,0,c
  3170  002D4C  D7EC               	goto	l3856
  3171  002D4E  0012               	return		;funcret
  3172  002D50                     __end_of__delay_s:
  3173                           	opt stack 0
  3174                           tblptru	equ	0xFF8
  3175                           tblptrh	equ	0xFF7
  3176                           tblptrl	equ	0xFF6
  3177                           tablat	equ	0xFF5
  3178                           prodh	equ	0xFF4
  3179                           prodl	equ	0xFF3
  3180                           postinc0	equ	0xFEE
  3181                           wreg	equ	0xFE8
  3182                           postdec1	equ	0xFE5
  3183                           fsr1l	equ	0xFE1
  3184                           indf2	equ	0xFDF
  3185                           postinc2	equ	0xFDE
  3186                           postdec2	equ	0xFDD
  3187                           fsr2h	equ	0xFDA
  3188                           fsr2l	equ	0xFD9
  3189                           status	equ	0xFD8
  3190                           
  3191 ;; *************** function _set_desactive_vision *****************
  3192 ;; Defined at:
  3193 ;;		line 79 in file "lcd_vision.c"
  3194 ;; Parameters:    Size  Location     Type
  3195 ;;  digit           2   10[COMRAM] short 
  3196 ;; Auto vars:     Size  Location     Type
  3197 ;;		None
  3198 ;; Return value:  Size  Location     Type
  3199 ;;		None               void
  3200 ;; Registers used:
  3201 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3202 ;; Tracked objects:
  3203 ;;		On entry : 0/0
  3204 ;;		On exit  : 0/0
  3205 ;;		Unchanged: 0/0
  3206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3207 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3210 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3211 ;;Total ram usage:        2 bytes
  3212 ;; Hardware stack levels used:    1
  3213 ;; Hardware stack levels required when called:    5
  3214 ;; This function calls:
  3215 ;;		_lcd_gotoxy
  3216 ;;		_lcd_putrs
  3217 ;;		_lcd_setcursor_vb
  3218 ;; This function is called by:
  3219 ;;		_set_vision
  3220 ;; This function uses a non-reentrant model
  3221 ;;
  3222                           
  3223                           	psect	text10
  3224  002FEC                     __ptext10:
  3225                           	opt stack 0
  3226  002FEC                     _set_desactive_vision:
  3227                           	opt stack 24
  3228                           
  3229                           ;lcd_vision.c: 80: lcd_gotoxy(7,2);
  3230                           
  3231                           ;incstack = 0
  3232  002FEC  0E02               	movlw	2
  3233  002FEE  6E05               	movwf	lcd_gotoxy@y,c
  3234  002FF0  0E07               	movlw	7
  3235  002FF2  EC58  F018         	call	_lcd_gotoxy
  3236                           
  3237                           ;lcd_vision.c: 81: lcd_putrs("pass:____");
  3238  002FF6  0E90               	movlw	low STR_18
  3239  002FF8  6E09               	movwf	lcd_putrs@ptr,c
  3240  002FFA  0E0F               	movlw	high STR_18
  3241  002FFC  6E0A               	movwf	lcd_putrs@ptr+1,c
  3242  002FFE  ECA8  F016         	call	_lcd_putrs	;wreg free
  3243                           
  3244                           ;lcd_vision.c: 82: lcd_gotoxy(digit,2);
  3245  003002  0E02               	movlw	2
  3246  003004  6E05               	movwf	lcd_gotoxy@y,c
  3247  003006  500B               	movf	set_desactive_vision@digit,w,c
  3248  003008  EC58  F018         	call	_lcd_gotoxy
  3249                           
  3250                           ;lcd_vision.c: 83: lcd_setcursor_vb(1,1);
  3251  00300C  0E01               	movlw	1
  3252  00300E  6E05               	movwf	lcd_setcursor_vb@blink,c
  3253  003010  0E01               	movlw	1
  3254  003012  EC94  F018         	call	_lcd_setcursor_vb
  3255  003016  0012               	return		;funcret
  3256  003018                     __end_of_set_desactive_vision:
  3257                           	opt stack 0
  3258                           tblptru	equ	0xFF8
  3259                           tblptrh	equ	0xFF7
  3260                           tblptrl	equ	0xFF6
  3261                           tablat	equ	0xFF5
  3262                           prodh	equ	0xFF4
  3263                           prodl	equ	0xFF3
  3264                           postinc0	equ	0xFEE
  3265                           wreg	equ	0xFE8
  3266                           postdec1	equ	0xFE5
  3267                           fsr1l	equ	0xFE1
  3268                           indf2	equ	0xFDF
  3269                           postinc2	equ	0xFDE
  3270                           postdec2	equ	0xFDD
  3271                           fsr2h	equ	0xFDA
  3272                           fsr2l	equ	0xFD9
  3273                           status	equ	0xFD8
  3274                           
  3275 ;; *************** function _lcd_setcursor_vb *****************
  3276 ;; Defined at:
  3277 ;;		line 210 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3278 ;; Parameters:    Size  Location     Type
  3279 ;;  visible         1    wreg     unsigned char 
  3280 ;;  blink           1    4[COMRAM] unsigned char 
  3281 ;; Auto vars:     Size  Location     Type
  3282 ;;  visible         1    5[COMRAM] unsigned char 
  3283 ;; Return value:  Size  Location     Type
  3284 ;;		None               void
  3285 ;; Registers used:
  3286 ;;		wreg, status,2, status,0, cstack
  3287 ;; Tracked objects:
  3288 ;;		On entry : 0/0
  3289 ;;		On exit  : 0/0
  3290 ;;		Unchanged: 0/0
  3291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3292 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3293 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3295 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3296 ;;Total ram usage:        2 bytes
  3297 ;; Hardware stack levels used:    1
  3298 ;; Hardware stack levels required when called:    2
  3299 ;; This function calls:
  3300 ;;		_lcd_send_byte
  3301 ;; This function is called by:
  3302 ;;		_set_desactive_vision
  3303 ;;		_jumpIfNotNumber
  3304 ;; This function uses a non-reentrant model
  3305 ;;
  3306                           
  3307                           	psect	text11
  3308  003128                     __ptext11:
  3309                           	opt stack 0
  3310  003128                     _lcd_setcursor_vb:
  3311                           	opt stack 26
  3312                           
  3313                           ;incstack = 0
  3314                           ;lcd_setcursor_vb@visible stored from wreg
  3315  003128  6E06               	movwf	lcd_setcursor_vb@visible,c
  3316                           
  3317                           ;unmc_lcd_216.c: 211: lcd_send_byte(0, 0xC|(visible<<1)|blink);
  3318  00312A  5006               	movf	lcd_setcursor_vb@visible,w,c
  3319  00312C  2406               	addwf	lcd_setcursor_vb@visible,w,c
  3320  00312E  1005               	iorwf	lcd_setcursor_vb@blink,w,c
  3321  003130  090C               	iorlw	12
  3322  003132  6E03               	movwf	lcd_send_byte@n,c
  3323  003134  0E00               	movlw	0
  3324  003136  ECC5  F017         	call	_lcd_send_byte
  3325  00313A  0012               	return		;funcret
  3326  00313C                     __end_of_lcd_setcursor_vb:
  3327                           	opt stack 0
  3328                           tblptru	equ	0xFF8
  3329                           tblptrh	equ	0xFF7
  3330                           tblptrl	equ	0xFF6
  3331                           tablat	equ	0xFF5
  3332                           prodh	equ	0xFF4
  3333                           prodl	equ	0xFF3
  3334                           postinc0	equ	0xFEE
  3335                           wreg	equ	0xFE8
  3336                           postdec1	equ	0xFE5
  3337                           fsr1l	equ	0xFE1
  3338                           indf2	equ	0xFDF
  3339                           postinc2	equ	0xFDE
  3340                           postdec2	equ	0xFDD
  3341                           fsr2h	equ	0xFDA
  3342                           fsr2l	equ	0xFD9
  3343                           status	equ	0xFD8
  3344                           
  3345 ;; *************** function _lcd_putrs *****************
  3346 ;; Defined at:
  3347 ;;		line 221 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3348 ;; Parameters:    Size  Location     Type
  3349 ;;  ptr             2    8[COMRAM] PTR const unsigned char 
  3350 ;;		 -> STR_21(8), STR_20(4), STR_19(3), STR_18(10), 
  3351 ;;		 -> STR_17(11), STR_16(11), buffer2(20), STR_3(10), 
  3352 ;;		 -> STR_2(13), STR_1(33), 
  3353 ;; Auto vars:     Size  Location     Type
  3354 ;;		None
  3355 ;; Return value:  Size  Location     Type
  3356 ;;		None               void
  3357 ;; Registers used:
  3358 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3359 ;; Tracked objects:
  3360 ;;		On entry : 0/0
  3361 ;;		On exit  : 0/0
  3362 ;;		Unchanged: 0/0
  3363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3364 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3367 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3368 ;;Total ram usage:        2 bytes
  3369 ;; Hardware stack levels used:    1
  3370 ;; Hardware stack levels required when called:    4
  3371 ;; This function calls:
  3372 ;;		_lcd_putc
  3373 ;; This function is called by:
  3374 ;;		_main
  3375 ;;		_read_keyboard
  3376 ;;		_write_Date
  3377 ;;		_twinkle
  3378 ;;		_set_desactive_vision
  3379 ;;		_set_vision
  3380 ;; This function uses a non-reentrant model
  3381 ;;
  3382                           
  3383                           	psect	text12
  3384  002D50                     __ptext12:
  3385                           	opt stack 0
  3386  002D50                     _lcd_putrs:
  3387                           	opt stack 24
  3388                           
  3389                           ;unmc_lcd_216.c: 223: while(*ptr){
  3390                           
  3391                           ;incstack = 0
  3392  002D50  D015               	goto	l3404
  3393  002D52                     l3400:
  3394                           
  3395                           ;unmc_lcd_216.c: 224: lcd_putc(*ptr++);
  3396  002D52  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  3397  002D56  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  3398  002D5A  6AF8               	clrf	tblptru,c
  3399  002D5C  0E0E               	movlw	(high __ramtop+-1)
  3400  002D5E  64F7               	cpfsgt	tblptrh,c
  3401  002D60  D003               	bra	u3057
  3402  002D62  0008               	tblrd		*
  3403  002D64  50F5               	movf	tablat,w,c
  3404  002D66  D005               	bra	u3050
  3405  002D68                     u3057:
  3406  002D68  CFF6 FFE9          	movff	tblptrl,fsr0l
  3407  002D6C  CFF7 FFEA          	movff	tblptrh,fsr0h
  3408  002D70  50EF               	movf	indf0,w,c
  3409  002D72                     u3050:
  3410  002D72  ECF8  F016         	call	_lcd_putc
  3411  002D76  4A09               	infsnz	lcd_putrs@ptr,f,c
  3412  002D78  2A0A               	incf	lcd_putrs@ptr+1,f,c
  3413  002D7A  D000               	goto	l3404
  3414  002D7C                     l3404:
  3415  002D7C  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  3416  002D80  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  3417  002D84  6AF8               	clrf	tblptru,c
  3418  002D86  0E0E               	movlw	(high __ramtop+-1)
  3419  002D88  64F7               	cpfsgt	tblptrh,c
  3420  002D8A  D003               	bra	u3067
  3421  002D8C  0008               	tblrd		*
  3422  002D8E  50F5               	movf	tablat,w,c
  3423  002D90  D005               	bra	u3060
  3424  002D92                     u3067:
  3425  002D92  CFF6 FFE9          	movff	tblptrl,fsr0l
  3426  002D96  CFF7 FFEA          	movff	tblptrh,fsr0h
  3427  002D9A  50EF               	movf	indf0,w,c
  3428  002D9C                     u3060:
  3429  002D9C  0900               	iorlw	0
  3430  002D9E  A4D8               	btfss	status,2,c
  3431  002DA0  D7D8               	goto	l3400
  3432  002DA2  0012               	return		;funcret
  3433  002DA4                     __end_of_lcd_putrs:
  3434                           	opt stack 0
  3435                           tblptru	equ	0xFF8
  3436                           tblptrh	equ	0xFF7
  3437                           tblptrl	equ	0xFF6
  3438                           tablat	equ	0xFF5
  3439                           prodh	equ	0xFF4
  3440                           prodl	equ	0xFF3
  3441                           indf0	equ	0xFEF
  3442                           postinc0	equ	0xFEE
  3443                           fsr0h	equ	0xFEA
  3444                           fsr0l	equ	0xFE9
  3445                           wreg	equ	0xFE8
  3446                           postdec1	equ	0xFE5
  3447                           fsr1l	equ	0xFE1
  3448                           indf2	equ	0xFDF
  3449                           postinc2	equ	0xFDE
  3450                           postdec2	equ	0xFDD
  3451                           fsr2h	equ	0xFDA
  3452                           fsr2l	equ	0xFD9
  3453                           status	equ	0xFD8
  3454                           
  3455 ;; *************** function _lcd_putc *****************
  3456 ;; Defined at:
  3457 ;;		line 172 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3458 ;; Parameters:    Size  Location     Type
  3459 ;;  c               1    wreg     unsigned char 
  3460 ;; Auto vars:     Size  Location     Type
  3461 ;;  c               1    7[COMRAM] unsigned char 
  3462 ;; Return value:  Size  Location     Type
  3463 ;;		None               void
  3464 ;; Registers used:
  3465 ;;		wreg, status,2, status,0, cstack
  3466 ;; Tracked objects:
  3467 ;;		On entry : 0/0
  3468 ;;		On exit  : 0/0
  3469 ;;		Unchanged: 0/0
  3470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3472 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3474 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3475 ;;Total ram usage:        1 bytes
  3476 ;; Hardware stack levels used:    1
  3477 ;; Hardware stack levels required when called:    3
  3478 ;; This function calls:
  3479 ;;		_lcd_gotoxy
  3480 ;;		_lcd_send_byte
  3481 ;; This function is called by:
  3482 ;;		_lcd_putrs
  3483 ;;		_lcd_puts
  3484 ;; This function uses a non-reentrant model
  3485 ;;
  3486                           
  3487                           	psect	text13
  3488  002DF0                     __ptext13:
  3489                           	opt stack 0
  3490  002DF0                     _lcd_putc:
  3491                           	opt stack 24
  3492                           
  3493                           ;incstack = 0
  3494                           ;lcd_putc@c stored from wreg
  3495  002DF0  6E08               	movwf	lcd_putc@c,c
  3496                           
  3497                           ;unmc_lcd_216.c: 173: switch(c){
  3498  002DF2  D018               	goto	l3210
  3499  002DF4                     l3200:
  3500                           
  3501                           ;unmc_lcd_216.c: 175: lcd_send_byte(0,1);
  3502  002DF4  0E01               	movlw	1
  3503  002DF6  6E03               	movwf	lcd_send_byte@n,c
  3504  002DF8  0E00               	movlw	0
  3505  002DFA  ECC5  F017         	call	_lcd_send_byte
  3506                           
  3507                           ;unmc_lcd_216.c: 176: break;
  3508  002DFE  0012               	return	
  3509  002E00                     l3202:
  3510                           
  3511                           ;unmc_lcd_216.c: 178: lcd_gotoxy(1,2);
  3512  002E00  0E02               	movlw	2
  3513  002E02  6E05               	movwf	lcd_gotoxy@y,c
  3514  002E04  0E01               	movlw	1
  3515  002E06  EC58  F018         	call	_lcd_gotoxy
  3516                           
  3517                           ;unmc_lcd_216.c: 179: break;
  3518  002E0A  0012               	return	
  3519  002E0C                     l3204:
  3520                           
  3521                           ;unmc_lcd_216.c: 181: lcd_send_byte(0,0x10);
  3522  002E0C  0E10               	movlw	16
  3523  002E0E  6E03               	movwf	lcd_send_byte@n,c
  3524  002E10  0E00               	movlw	0
  3525  002E12  ECC5  F017         	call	_lcd_send_byte
  3526                           
  3527                           ;unmc_lcd_216.c: 182: break;
  3528  002E16  0012               	return	
  3529  002E18                     l3206:
  3530                           
  3531                           ;unmc_lcd_216.c: 184: lcd_send_byte(1,c);
  3532  002E18  C008  F003         	movff	lcd_putc@c,lcd_send_byte@n
  3533  002E1C  0E01               	movlw	1
  3534  002E1E  ECC5  F017         	call	_lcd_send_byte
  3535                           
  3536                           ;unmc_lcd_216.c: 186: }
  3537                           
  3538                           ;unmc_lcd_216.c: 185: break;
  3539  002E22  0012               	return	
  3540  002E24                     l3210:
  3541  002E24  5008               	movf	lcd_putc@c,w,c
  3542                           
  3543                           ; Switch size 1, requested type "space"
  3544                           ; Number of cases is 3, Range of values is 8 to 12
  3545                           ; switch strategies available:
  3546                           ; Name         Instructions Cycles
  3547                           ; simple_byte           10     6 (average)
  3548                           ;	Chosen strategy is simple_byte
  3549  002E26  0A08               	xorlw	8	; case 8
  3550  002E28  B4D8               	btfsc	status,2,c
  3551  002E2A  D7F0               	goto	l3204
  3552  002E2C  0A02               	xorlw	2	; case 10
  3553  002E2E  B4D8               	btfsc	status,2,c
  3554  002E30  D7E7               	goto	l3202
  3555  002E32  0A06               	xorlw	6	; case 12
  3556  002E34  B4D8               	btfsc	status,2,c
  3557  002E36  D7DE               	goto	l3200
  3558  002E38  D7EF               	goto	l3206
  3559  002E3A  0012               	return		;funcret
  3560  002E3C                     __end_of_lcd_putc:
  3561                           	opt stack 0
  3562                           tblptru	equ	0xFF8
  3563                           tblptrh	equ	0xFF7
  3564                           tblptrl	equ	0xFF6
  3565                           tablat	equ	0xFF5
  3566                           prodh	equ	0xFF4
  3567                           prodl	equ	0xFF3
  3568                           indf0	equ	0xFEF
  3569                           postinc0	equ	0xFEE
  3570                           fsr0h	equ	0xFEA
  3571                           fsr0l	equ	0xFE9
  3572                           wreg	equ	0xFE8
  3573                           postdec1	equ	0xFE5
  3574                           fsr1l	equ	0xFE1
  3575                           indf2	equ	0xFDF
  3576                           postinc2	equ	0xFDE
  3577                           postdec2	equ	0xFDD
  3578                           fsr2h	equ	0xFDA
  3579                           fsr2l	equ	0xFD9
  3580                           status	equ	0xFD8
  3581                           
  3582 ;; *************** function _review_code *****************
  3583 ;; Defined at:
  3584 ;;		line 46 in file "lcd_vision.c"
  3585 ;; Parameters:    Size  Location     Type
  3586 ;;  digit           2    2[COMRAM] short 
  3587 ;;  pass            2    4[COMRAM] int 
  3588 ;; Auto vars:     Size  Location     Type
  3589 ;;		None
  3590 ;; Return value:  Size  Location     Type
  3591 ;;		None               void
  3592 ;; Registers used:
  3593 ;;		wreg, status,2, status,0, cstack
  3594 ;; Tracked objects:
  3595 ;;		On entry : 0/0
  3596 ;;		On exit  : 0/0
  3597 ;;		Unchanged: 0/0
  3598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3599 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3602 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3603 ;;Total ram usage:        4 bytes
  3604 ;; Hardware stack levels used:    1
  3605 ;; Hardware stack levels required when called:    1
  3606 ;; This function calls:
  3607 ;;		_checkPass
  3608 ;; This function is called by:
  3609 ;;		_set_vision
  3610 ;; This function uses a non-reentrant model
  3611 ;;
  3612                           
  3613                           	psect	text14
  3614  003040                     __ptext14:
  3615                           	opt stack 0
  3616  003040                     _review_code:
  3617                           	opt stack 28
  3618                           
  3619                           ;lcd_vision.c: 47: if(digit == 16){
  3620                           
  3621                           ;incstack = 0
  3622  003040  0E10               	movlw	16
  3623  003042  1803               	xorwf	review_code@digit,w,c
  3624  003044  1004               	iorwf	review_code@digit+1,w,c
  3625  003046  A4D8               	btfss	status,2,c
  3626  003048  0012               	return	
  3627                           
  3628                           ;lcd_vision.c: 48: if(checkPass(pass)){
  3629  00304A  C005  F001         	movff	review_code@pass,checkPass@pass
  3630  00304E  C006  F002         	movff	review_code@pass+1,checkPass@pass+1
  3631  003052  EC7B  F018         	call	_checkPass	;wreg free
  3632  003056  0900               	iorlw	0
  3633  003058  B4D8               	btfsc	status,2,c
  3634  00305A  0012               	return	
  3635                           
  3636                           ;lcd_vision.c: 49: state_alarm = ACTIVE;
  3637  00305C  0E00               	movlw	0
  3638  00305E  0100               	movlb	0	; () banked
  3639  003060  6FCE               	movwf	_state_alarm& (0+255),b
  3640                           
  3641                           ; BSR set to: 0
  3642  003062  0012               	return	
  3643                           
  3644                           ; BSR set to: 0
  3645  003064  0012               	return		;funcret
  3646  003066                     __end_of_review_code:
  3647                           	opt stack 0
  3648                           tblptru	equ	0xFF8
  3649                           tblptrh	equ	0xFF7
  3650                           tblptrl	equ	0xFF6
  3651                           tablat	equ	0xFF5
  3652                           prodh	equ	0xFF4
  3653                           prodl	equ	0xFF3
  3654                           indf0	equ	0xFEF
  3655                           postinc0	equ	0xFEE
  3656                           fsr0h	equ	0xFEA
  3657                           fsr0l	equ	0xFE9
  3658                           wreg	equ	0xFE8
  3659                           postdec1	equ	0xFE5
  3660                           fsr1l	equ	0xFE1
  3661                           indf2	equ	0xFDF
  3662                           postinc2	equ	0xFDE
  3663                           postdec2	equ	0xFDD
  3664                           fsr2h	equ	0xFDA
  3665                           fsr2l	equ	0xFD9
  3666                           status	equ	0xFD8
  3667                           
  3668 ;; *************** function _checkPass *****************
  3669 ;; Defined at:
  3670 ;;		line 3 in file "config.c"
  3671 ;; Parameters:    Size  Location     Type
  3672 ;;  pass            2    0[COMRAM] int 
  3673 ;; Auto vars:     Size  Location     Type
  3674 ;;		None
  3675 ;; Return value:  Size  Location     Type
  3676 ;;                  1    wreg      unsigned char 
  3677 ;; Registers used:
  3678 ;;		wreg, status,2, status,0
  3679 ;; Tracked objects:
  3680 ;;		On entry : 0/0
  3681 ;;		On exit  : 0/0
  3682 ;;		Unchanged: 0/0
  3683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3684 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3685 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3687 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3688 ;;Total ram usage:        2 bytes
  3689 ;; Hardware stack levels used:    1
  3690 ;; This function calls:
  3691 ;;		Nothing
  3692 ;; This function is called by:
  3693 ;;		_review_code
  3694 ;; This function uses a non-reentrant model
  3695 ;;
  3696                           
  3697                           	psect	text15
  3698  0030F6                     __ptext15:
  3699                           	opt stack 0
  3700  0030F6                     _checkPass:
  3701                           	opt stack 28
  3702                           
  3703                           ;config.c: 4: return password == pass;
  3704                           
  3705                           ;incstack = 0
  3706  0030F6  5001               	movf	checkPass@pass,w,c
  3707  0030F8  0100               	movlb	0	; () banked
  3708  0030FA  19CB               	xorwf	_password& (0+255),w,b
  3709  0030FC  E107               	bnz	u3960
  3710  0030FE  5002               	movf	checkPass@pass+1,w,c
  3711  003100  0100               	movlb	0	; () banked
  3712  003102  19CC               	xorwf	(_password+1)& (0+255),w,b
  3713  003104  A4D8               	btfss	status,2,c
  3714  003106  D002               	goto	u3960
  3715  003108  0E01               	movlw	1
  3716  00310A  0012               	return	
  3717  00310C                     u3960:
  3718  00310C  0E00               	movlw	0
  3719  00310E  0012               	return	
  3720                           
  3721                           ; BSR set to: 0
  3722                           
  3723                           ; BSR set to: 0
  3724  003110  0012               	return		;funcret
  3725  003112                     __end_of_checkPass:
  3726                           	opt stack 0
  3727                           tblptru	equ	0xFF8
  3728                           tblptrh	equ	0xFF7
  3729                           tblptrl	equ	0xFF6
  3730                           tablat	equ	0xFF5
  3731                           prodh	equ	0xFF4
  3732                           prodl	equ	0xFF3
  3733                           indf0	equ	0xFEF
  3734                           postinc0	equ	0xFEE
  3735                           fsr0h	equ	0xFEA
  3736                           fsr0l	equ	0xFE9
  3737                           wreg	equ	0xFE8
  3738                           postdec1	equ	0xFE5
  3739                           fsr1l	equ	0xFE1
  3740                           indf2	equ	0xFDF
  3741                           postinc2	equ	0xFDE
  3742                           postdec2	equ	0xFDD
  3743                           fsr2h	equ	0xFDA
  3744                           fsr2l	equ	0xFD9
  3745                           status	equ	0xFD8
  3746                           
  3747 ;; *************** function _obtain_pass *****************
  3748 ;; Defined at:
  3749 ;;		line 54 in file "lcd_vision.c"
  3750 ;; Parameters:    Size  Location     Type
  3751 ;;  pass            2   87[COMRAM] int 
  3752 ;;  input           1   89[COMRAM] unsigned char 
  3753 ;;  digit           2   90[COMRAM] PTR short 
  3754 ;;		 -> set_vision@digit(2), 
  3755 ;; Auto vars:     Size  Location     Type
  3756 ;;		None
  3757 ;; Return value:  Size  Location     Type
  3758 ;;                  2   87[COMRAM] int 
  3759 ;; Registers used:
  3760 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3761 ;; Tracked objects:
  3762 ;;		On entry : 0/0
  3763 ;;		On exit  : 0/0
  3764 ;;		Unchanged: 0/0
  3765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3766 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3767 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3768 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3769 ;;      Totals:         7       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3770 ;;Total ram usage:       13 bytes
  3771 ;; Hardware stack levels used:    1
  3772 ;; Hardware stack levels required when called:    5
  3773 ;; This function calls:
  3774 ;;		___awtoft
  3775 ;;		___ftadd
  3776 ;;		___ftmul
  3777 ;;		___fttol
  3778 ;;		___lbtoft
  3779 ;;		_next_code
  3780 ;;		_pow
  3781 ;; This function is called by:
  3782 ;;		_set_vision
  3783 ;; This function uses a non-reentrant model
  3784 ;;
  3785                           
  3786                           	psect	text16
  3787  002288                     __ptext16:
  3788                           	opt stack 0
  3789  002288                     _obtain_pass:
  3790                           	opt stack 24
  3791                           
  3792                           ;lcd_vision.c: 56: if(0<input && input<10){
  3793                           
  3794                           ; BSR set to: 0
  3795                           ;incstack = 0
  3796  002288  505A               	movf	obtain_pass@input,w,c
  3797  00228A  B4D8               	btfsc	status,2,c
  3798  00228C  D06D               	goto	l4048
  3799  00228E  0E0A               	movlw	10
  3800  002290  605A               	cpfslt	obtain_pass@input,c
  3801  002292  D06A               	goto	l4048
  3802                           
  3803                           ;lcd_vision.c: 57: pass = pass + input * pow(10, 15 - *digit);
  3804  002294  C05B  FFD9         	movff	obtain_pass@digit,fsr2l
  3805  002298  C05C  FFDA         	movff	obtain_pass@digit+1,fsr2h
  3806  00229C  CFDE F05D          	movff	postinc2,??_obtain_pass
  3807  0022A0  CFDD F05E          	movff	postdec2,??_obtain_pass+1
  3808  0022A4  1E5D               	comf	??_obtain_pass,f,c
  3809  0022A6  1E5E               	comf	??_obtain_pass+1,f,c
  3810  0022A8  4A5D               	infsnz	??_obtain_pass,f,c
  3811  0022AA  2A5E               	incf	??_obtain_pass+1,f,c
  3812  0022AC  0E0F               	movlw	15
  3813  0022AE  245D               	addwf	??_obtain_pass,w,c
  3814  0022B0  6E09               	movwf	___awtoft@c,c
  3815  0022B2  0E00               	movlw	0
  3816  0022B4  205E               	addwfc	??_obtain_pass+1,w,c
  3817  0022B6  6E0A               	movwf	___awtoft@c+1,c
  3818  0022B8  EC8A  F017         	call	___awtoft	;wreg free
  3819  0022BC  C009  F0B3         	movff	?___awtoft,_obtain_pass$2744
  3820  0022C0  C00A  F0B4         	movff	?___awtoft+1,_obtain_pass$2744+1
  3821  0022C4  C00B  F0B5         	movff	?___awtoft+2,_obtain_pass$2744+2
  3822                           
  3823                           ;lcd_vision.c: 57: pass = pass + input * pow(10, 15 - *digit);
  3824  0022C8  C0B3  F055         	movff	_obtain_pass$2744,pow@y
  3825  0022CC  C0B4  F056         	movff	_obtain_pass$2744+1,pow@y+1
  3826  0022D0  C0B5  F057         	movff	_obtain_pass$2744+2,pow@y+2
  3827  0022D4  0E00               	movlw	0
  3828  0022D6  6E52               	movwf	pow@x,c
  3829  0022D8  0E20               	movlw	32
  3830  0022DA  6E53               	movwf	pow@x+1,c
  3831  0022DC  0E41               	movlw	65
  3832  0022DE  6E54               	movwf	pow@x+2,c
  3833  0022E0  EC14  F00D         	call	_pow	;wreg free
  3834  0022E4  C052  F0B6         	movff	?_pow,_obtain_pass$2745
  3835  0022E8  C053  F0B7         	movff	?_pow+1,_obtain_pass$2745+1
  3836  0022EC  C054  F0B8         	movff	?_pow+2,_obtain_pass$2745+2
  3837                           
  3838                           ;lcd_vision.c: 57: pass = pass + input * pow(10, 15 - *digit);
  3839  0022F0  C0B6  F010         	movff	_obtain_pass$2745,___ftmul@f2
  3840  0022F4  C0B7  F011         	movff	_obtain_pass$2745+1,___ftmul@f2+1
  3841  0022F8  C0B8  F012         	movff	_obtain_pass$2745+2,___ftmul@f2+2
  3842  0022FC  505A               	movf	obtain_pass@input,w,c
  3843  0022FE  EC33  F018         	call	___lbtoft
  3844  002302  C009  F00D         	movff	?___lbtoft,___ftmul@f1
  3845  002306  C00A  F00E         	movff	?___lbtoft+1,___ftmul@f1+1
  3846  00230A  C00B  F00F         	movff	?___lbtoft+2,___ftmul@f1+2
  3847  00230E  ECC3  F010         	call	___ftmul	;wreg free
  3848  002312  C00D  F01F         	movff	?___ftmul,___ftadd@f2
  3849  002316  C00E  F020         	movff	?___ftmul+1,___ftadd@f2+1
  3850  00231A  C00F  F021         	movff	?___ftmul+2,___ftadd@f2+2
  3851  00231E  C058  F009         	movff	obtain_pass@pass,___awtoft@c
  3852  002322  C059  F00A         	movff	obtain_pass@pass+1,___awtoft@c+1
  3853  002326  EC8A  F017         	call	___awtoft	;wreg free
  3854  00232A  C009  F01C         	movff	?___awtoft,___ftadd@f1
  3855  00232E  C00A  F01D         	movff	?___awtoft+1,___ftadd@f1+1
  3856  002332  C00B  F01E         	movff	?___awtoft+2,___ftadd@f1+2
  3857  002336  EC64  F00B         	call	___ftadd	;wreg free
  3858  00233A  C01C  F028         	movff	?___ftadd,___fttol@f1
  3859  00233E  C01D  F029         	movff	?___ftadd+1,___fttol@f1+1
  3860  002342  C01E  F02A         	movff	?___ftadd+2,___fttol@f1+2
  3861  002346  EC42  F010         	call	___fttol	;wreg free
  3862  00234A  C028  F058         	movff	?___fttol,obtain_pass@pass
  3863  00234E  C029  F059         	movff	?___fttol+1,obtain_pass@pass+1
  3864                           
  3865                           ;lcd_vision.c: 58: next_code(digit, &input);
  3866  002352  C05B  F008         	movff	obtain_pass@digit,next_code@digit
  3867  002356  C05C  F009         	movff	obtain_pass@digit+1,next_code@digit+1
  3868  00235A  0E5A               	movlw	low obtain_pass@input
  3869  00235C  6E0A               	movwf	next_code@input,c
  3870  00235E  0E00               	movlw	high obtain_pass@input
  3871  002360  6E0B               	movwf	next_code@input+1,c
  3872  002362  EC1E  F017         	call	_next_code	;wreg free
  3873  002366  D000               	goto	l4048
  3874  002368                     l4048:
  3875                           
  3876                           ;lcd_vision.c: 59: }
  3877                           ;lcd_vision.c: 60: return pass;
  3878  002368  C058  F058         	movff	obtain_pass@pass,?_obtain_pass
  3879  00236C  C059  F059         	movff	obtain_pass@pass+1,?_obtain_pass+1
  3880  002370  0012               	return	
  3881  002372  0012               	return		;funcret
  3882  002374                     __end_of_obtain_pass:
  3883                           	opt stack 0
  3884                           tblptru	equ	0xFF8
  3885                           tblptrh	equ	0xFF7
  3886                           tblptrl	equ	0xFF6
  3887                           tablat	equ	0xFF5
  3888                           prodh	equ	0xFF4
  3889                           prodl	equ	0xFF3
  3890                           indf0	equ	0xFEF
  3891                           postinc0	equ	0xFEE
  3892                           fsr0h	equ	0xFEA
  3893                           fsr0l	equ	0xFE9
  3894                           wreg	equ	0xFE8
  3895                           postdec1	equ	0xFE5
  3896                           fsr1l	equ	0xFE1
  3897                           indf2	equ	0xFDF
  3898                           postinc2	equ	0xFDE
  3899                           postdec2	equ	0xFDD
  3900                           fsr2h	equ	0xFDA
  3901                           fsr2l	equ	0xFD9
  3902                           status	equ	0xFD8
  3903                           
  3904 ;; *************** function _pow *****************
  3905 ;; Defined at:
  3906 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\pow.c"
  3907 ;; Parameters:    Size  Location     Type
  3908 ;;  x               3   81[COMRAM] int 
  3909 ;;  y               3   84[COMRAM] int 
  3910 ;; Auto vars:     Size  Location     Type
  3911 ;;  yi              4    7[BANK0 ] unsigned long 
  3912 ;;  sign            1    6[BANK0 ] unsigned char 
  3913 ;; Return value:  Size  Location     Type
  3914 ;;                  3   81[COMRAM] unsigned char 
  3915 ;; Registers used:
  3916 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3917 ;; Tracked objects:
  3918 ;;		On entry : 0/0
  3919 ;;		On exit  : 0/0
  3920 ;;		Unchanged: 0/0
  3921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3922 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3923 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3925 ;;      Totals:         6      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3926 ;;Total ram usage:       17 bytes
  3927 ;; Hardware stack levels used:    1
  3928 ;; Hardware stack levels required when called:    4
  3929 ;; This function calls:
  3930 ;;		___ftge
  3931 ;;		___ftmul
  3932 ;;		___ftneg
  3933 ;;		___fttol
  3934 ;;		___lltoft
  3935 ;;		_exp
  3936 ;;		_log
  3937 ;; This function is called by:
  3938 ;;		_obtain_pass
  3939 ;; This function uses a non-reentrant model
  3940 ;;
  3941                           
  3942                           	psect	text17
  3943  001A28                     __ptext17:
  3944                           	opt stack 0
  3945  001A28                     _pow:
  3946                           	opt stack 24
  3947                           
  3948                           ;incstack = 0
  3949  001A28  0E00               	movlw	0
  3950  001A2A  0100               	movlb	0	; () banked
  3951  001A2C  6FAE               	movwf	pow@sign& (0+255),b
  3952                           
  3953                           ; BSR set to: 0
  3954  001A2E  5052               	movf	pow@x,w,c
  3955  001A30  1053               	iorwf	pow@x+1,w,c
  3956  001A32  1054               	iorwf	pow@x+2,w,c
  3957  001A34  A4D8               	btfss	status,2,c
  3958  001A36  D01C               	goto	l3882
  3959                           
  3960                           ; BSR set to: 0
  3961  001A38  0E00               	movlw	0
  3962  001A3A  6E01               	movwf	___ftge@ff1,c
  3963  001A3C  0E00               	movlw	0
  3964  001A3E  6E02               	movwf	___ftge@ff1+1,c
  3965  001A40  0E00               	movlw	0
  3966  001A42  6E03               	movwf	___ftge@ff1+2,c
  3967  001A44  C055  F004         	movff	pow@y,___ftge@ff2
  3968  001A48  C056  F005         	movff	pow@y+1,___ftge@ff2+1
  3969  001A4C  C057  F006         	movff	pow@y+2,___ftge@ff2+2
  3970  001A50  ECD6  F013         	call	___ftge	;wreg free
  3971  001A54  A0D8               	btfss	status,0,c
  3972  001A56  D005               	goto	l1357
  3973  001A58  0E00               	movlw	0
  3974  001A5A  0100               	movlb	0	; () banked
  3975  001A5C  6F83               	movwf	(_errno+1)& (0+255),b
  3976  001A5E  0E21               	movlw	33
  3977  001A60  6F82               	movwf	_errno& (0+255),b
  3978  001A62                     l1357:
  3979  001A62  0E00               	movlw	0
  3980  001A64  6E52               	movwf	?_pow,c
  3981  001A66  0E00               	movlw	0
  3982  001A68  6E53               	movwf	?_pow+1,c
  3983  001A6A  0E00               	movlw	0
  3984  001A6C  6E54               	movwf	?_pow+2,c
  3985  001A6E  0012               	return	
  3986  001A70                     l3882:
  3987  001A70  5055               	movf	pow@y,w,c
  3988  001A72  1056               	iorwf	pow@y+1,w,c
  3989  001A74  1057               	iorwf	pow@y+2,w,c
  3990  001A76  A4D8               	btfss	status,2,c
  3991  001A78  D007               	goto	l3888
  3992  001A7A  0E00               	movlw	0
  3993  001A7C  6E52               	movwf	?_pow,c
  3994  001A7E  0E80               	movlw	128
  3995  001A80  6E53               	movwf	?_pow+1,c
  3996  001A82  0E3F               	movlw	63
  3997  001A84  6E54               	movwf	?_pow+2,c
  3998  001A86  0012               	return	
  3999  001A88                     l3888:
  4000  001A88  AE54               	btfss	pow@x+2,7,c
  4001  001A8A  D044               	goto	l3900
  4002  001A8C  C055  F028         	movff	pow@y,___fttol@f1
  4003  001A90  C056  F029         	movff	pow@y+1,___fttol@f1+1
  4004  001A94  C057  F02A         	movff	pow@y+2,___fttol@f1+2
  4005  001A98  EC42  F010         	call	___fttol	;wreg free
  4006  001A9C  C028  F0AF         	movff	?___fttol,pow@yi
  4007  001AA0  C029  F0B0         	movff	?___fttol+1,pow@yi+1
  4008  001AA4  C02A  F0B1         	movff	?___fttol+2,pow@yi+2
  4009  001AA8  C02B  F0B2         	movff	?___fttol+3,pow@yi+3
  4010  001AAC  C0AF  F009         	movff	pow@yi,___lltoft@c
  4011  001AB0  C0B0  F00A         	movff	pow@yi+1,___lltoft@c+1
  4012  001AB4  C0B1  F00B         	movff	pow@yi+2,___lltoft@c+2
  4013  001AB8  C0B2  F00C         	movff	pow@yi+3,___lltoft@c+3
  4014  001ABC  ECEF  F015         	call	___lltoft	;wreg free
  4015  001AC0  5055               	movf	pow@y,w,c
  4016  001AC2  1809               	xorwf	?___lltoft,w,c
  4017  001AC4  E107               	bnz	u4020
  4018  001AC6  5056               	movf	pow@y+1,w,c
  4019  001AC8  180A               	xorwf	?___lltoft+1,w,c
  4020  001ACA  E104               	bnz	u4020
  4021  001ACC  5057               	movf	pow@y+2,w,c
  4022  001ACE  180B               	xorwf	?___lltoft+2,w,c
  4023  001AD0  B4D8               	btfsc	status,2,c
  4024  001AD2  D00C               	goto	l3896
  4025  001AD4                     u4020:
  4026  001AD4  0E00               	movlw	0
  4027  001AD6  0100               	movlb	0	; () banked
  4028  001AD8  6F83               	movwf	(_errno+1)& (0+255),b
  4029  001ADA  0E21               	movlw	33
  4030  001ADC  6F82               	movwf	_errno& (0+255),b
  4031  001ADE  0E00               	movlw	0
  4032  001AE0  6E52               	movwf	?_pow,c
  4033  001AE2  0E00               	movlw	0
  4034  001AE4  6E53               	movwf	?_pow+1,c
  4035  001AE6  0E00               	movlw	0
  4036  001AE8  6E54               	movwf	?_pow+2,c
  4037                           
  4038                           ; BSR set to: 0
  4039  001AEA  0012               	return	
  4040  001AEC                     l3896:
  4041  001AEC  0100               	movlb	0	; () banked
  4042  001AEE  51AF               	movf	pow@yi& (0+255),w,b
  4043  001AF0  0B01               	andlw	1
  4044  001AF2  0100               	movlb	0	; () banked
  4045  001AF4  6FAE               	movwf	pow@sign& (0+255),b
  4046                           
  4047                           ; BSR set to: 0
  4048  001AF6  C052  F001         	movff	pow@x,___ftneg@f1
  4049  001AFA  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  4050  001AFE  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  4051  001B02  EC46  F018         	call	___ftneg	;wreg free
  4052  001B06  C001  F052         	movff	?___ftneg,pow@x
  4053  001B0A  C002  F053         	movff	?___ftneg+1,pow@x+1
  4054  001B0E  C003  F054         	movff	?___ftneg+2,pow@x+2
  4055  001B12  D000               	goto	l3900
  4056  001B14                     l3900:
  4057  001B14  C052  F034         	movff	pow@x,log@x
  4058  001B18  C053  F035         	movff	pow@x+1,log@x+1
  4059  001B1C  C054  F036         	movff	pow@x+2,log@x+2
  4060  001B20  EC2C  F00F         	call	_log	;wreg free
  4061  001B24  C034  F0A8         	movff	?_log,_pow$2746
  4062  001B28  C035  F0A9         	movff	?_log+1,_pow$2746+1
  4063  001B2C  C036  F0AA         	movff	?_log+2,_pow$2746+2
  4064  001B30  C0A8  F00D         	movff	_pow$2746,___ftmul@f1
  4065  001B34  C0A9  F00E         	movff	_pow$2746+1,___ftmul@f1+1
  4066  001B38  C0AA  F00F         	movff	_pow$2746+2,___ftmul@f1+2
  4067  001B3C  C055  F010         	movff	pow@y,___ftmul@f2
  4068  001B40  C056  F011         	movff	pow@y+1,___ftmul@f2+1
  4069  001B44  C057  F012         	movff	pow@y+2,___ftmul@f2+2
  4070  001B48  ECC3  F010         	call	___ftmul	;wreg free
  4071  001B4C  C00D  F0AB         	movff	?___ftmul,_pow$2747
  4072  001B50  C00E  F0AC         	movff	?___ftmul+1,_pow$2747+1
  4073  001B54  C00F  F0AD         	movff	?___ftmul+2,_pow$2747+2
  4074  001B58  C0AB  F049         	movff	_pow$2747,exp@x
  4075  001B5C  C0AC  F04A         	movff	_pow$2747+1,exp@x+1
  4076  001B60  C0AD  F04B         	movff	_pow$2747+2,exp@x+2
  4077  001B64  EC70  F00A         	call	_exp	;wreg free
  4078  001B68  C049  F052         	movff	?_exp,pow@x
  4079  001B6C  C04A  F053         	movff	?_exp+1,pow@x+1
  4080  001B70  C04B  F054         	movff	?_exp+2,pow@x+2
  4081  001B74  0100               	movlb	0	; () banked
  4082  001B76  51AE               	movf	pow@sign& (0+255),w,b
  4083  001B78  0100               	movlb	0	; () banked
  4084  001B7A  B4D8               	btfsc	status,2,c
  4085  001B7C  D00F               	goto	l1362
  4086                           
  4087                           ; BSR set to: 0
  4088  001B7E  C052  F001         	movff	pow@x,___ftneg@f1
  4089  001B82  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  4090  001B86  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  4091  001B8A  EC46  F018         	call	___ftneg	;wreg free
  4092  001B8E  C001  F052         	movff	?___ftneg,?_pow
  4093  001B92  C002  F053         	movff	?___ftneg+1,?_pow+1
  4094  001B96  C003  F054         	movff	?___ftneg+2,?_pow+2
  4095  001B9A  0012               	return	
  4096  001B9C                     l1362:
  4097                           
  4098                           ; BSR set to: 0
  4099  001B9C  C052  F052         	movff	pow@x,?_pow
  4100  001BA0  C053  F053         	movff	pow@x+1,?_pow+1
  4101  001BA4  C054  F054         	movff	pow@x+2,?_pow+2
  4102  001BA8  0012               	return		;funcret
  4103  001BAA                     __end_of_pow:
  4104                           	opt stack 0
  4105                           tblptru	equ	0xFF8
  4106                           tblptrh	equ	0xFF7
  4107                           tblptrl	equ	0xFF6
  4108                           tablat	equ	0xFF5
  4109                           prodh	equ	0xFF4
  4110                           prodl	equ	0xFF3
  4111                           indf0	equ	0xFEF
  4112                           postinc0	equ	0xFEE
  4113                           fsr0h	equ	0xFEA
  4114                           fsr0l	equ	0xFE9
  4115                           wreg	equ	0xFE8
  4116                           postdec1	equ	0xFE5
  4117                           fsr1l	equ	0xFE1
  4118                           indf2	equ	0xFDF
  4119                           postinc2	equ	0xFDE
  4120                           postdec2	equ	0xFDD
  4121                           fsr2h	equ	0xFDA
  4122                           fsr2l	equ	0xFD9
  4123                           status	equ	0xFD8
  4124                           
  4125 ;; *************** function _log *****************
  4126 ;; Defined at:
  4127 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\log.c"
  4128 ;; Parameters:    Size  Location     Type
  4129 ;;  x               3   51[COMRAM] unsigned char 
  4130 ;; Auto vars:     Size  Location     Type
  4131 ;;  exponent        2   54[COMRAM] int 
  4132 ;; Return value:  Size  Location     Type
  4133 ;;                  3   51[COMRAM] int 
  4134 ;; Registers used:
  4135 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4136 ;; Tracked objects:
  4137 ;;		On entry : 0/0
  4138 ;;		On exit  : 0/0
  4139 ;;		Unchanged: 0/0
  4140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4141 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4142 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4144 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4145 ;;Total ram usage:        5 bytes
  4146 ;; Hardware stack levels used:    1
  4147 ;; Hardware stack levels required when called:    3
  4148 ;; This function calls:
  4149 ;;		___awtoft
  4150 ;;		___ftadd
  4151 ;;		___ftmul
  4152 ;;		_eval_poly
  4153 ;;		_frexp
  4154 ;; This function is called by:
  4155 ;;		_pow
  4156 ;; This function uses a non-reentrant model
  4157 ;;
  4158                           
  4159                           	psect	text18
  4160  001E58                     __ptext18:
  4161                           	opt stack 0
  4162  001E58                     _log:
  4163                           	opt stack 24
  4164                           
  4165                           ;incstack = 0
  4166  001E58  AE36               	btfss	log@x+2,7,c
  4167  001E5A  D00C               	goto	l3566
  4168  001E5C  0E00               	movlw	0
  4169  001E5E  0100               	movlb	0	; () banked
  4170  001E60  6F83               	movwf	(_errno+1)& (0+255),b
  4171  001E62  0E21               	movlw	33
  4172  001E64  6F82               	movwf	_errno& (0+255),b
  4173  001E66  0E00               	movlw	0
  4174  001E68  6E34               	movwf	?_log,c
  4175  001E6A  0E00               	movlw	0
  4176  001E6C  6E35               	movwf	?_log+1,c
  4177  001E6E  0E00               	movlw	0
  4178  001E70  6E36               	movwf	?_log+2,c
  4179                           
  4180                           ; BSR set to: 0
  4181  001E72  0012               	return	
  4182  001E74                     l3566:
  4183  001E74  5034               	movf	log@x,w,c
  4184  001E76  1035               	iorwf	log@x+1,w,c
  4185  001E78  1036               	iorwf	log@x+2,w,c
  4186  001E7A  A4D8               	btfss	status,2,c
  4187  001E7C  D00C               	goto	l3572
  4188  001E7E  0E00               	movlw	0
  4189  001E80  0100               	movlb	0	; () banked
  4190  001E82  6F83               	movwf	(_errno+1)& (0+255),b
  4191  001E84  0E22               	movlw	34
  4192  001E86  6F82               	movwf	_errno& (0+255),b
  4193  001E88  0E00               	movlw	0
  4194  001E8A  6E34               	movwf	?_log,c
  4195  001E8C  0E00               	movlw	0
  4196  001E8E  6E35               	movwf	?_log+1,c
  4197  001E90  0E00               	movlw	0
  4198  001E92  6E36               	movwf	?_log+2,c
  4199                           
  4200                           ; BSR set to: 0
  4201  001E94  0012               	return	
  4202  001E96                     l3572:
  4203  001E96  0E00               	movlw	0
  4204  001E98  6E10               	movwf	___ftmul@f2,c
  4205  001E9A  0E00               	movlw	0
  4206  001E9C  6E11               	movwf	___ftmul@f2+1,c
  4207  001E9E  0E40               	movlw	64
  4208  001EA0  6E12               	movwf	___ftmul@f2+2,c
  4209  001EA2  0E37               	movlw	low log@exponent
  4210  001EA4  6E04               	movwf	frexp@eptr,c
  4211  001EA6  0E00               	movlw	high log@exponent
  4212  001EA8  6E05               	movwf	frexp@eptr+1,c
  4213  001EAA  C034  F001         	movff	log@x,frexp@value
  4214  001EAE  C035  F002         	movff	log@x+1,frexp@value+1
  4215  001EB2  C036  F003         	movff	log@x+2,frexp@value+2
  4216  001EB6  EC6C  F014         	call	_frexp	;wreg free
  4217  001EBA  C001  F00D         	movff	?_frexp,___ftmul@f1
  4218  001EBE  C002  F00E         	movff	?_frexp+1,___ftmul@f1+1
  4219  001EC2  C003  F00F         	movff	?_frexp+2,___ftmul@f1+2
  4220  001EC6  ECC3  F010         	call	___ftmul	;wreg free
  4221  001ECA  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  4222  001ECE  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  4223  001ED2  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  4224  001ED6  0E00               	movlw	0
  4225  001ED8  6E1F               	movwf	___ftadd@f2,c
  4226  001EDA  0E80               	movlw	128
  4227  001EDC  6E20               	movwf	___ftadd@f2+1,c
  4228  001EDE  0EBF               	movlw	191
  4229  001EE0  6E21               	movwf	___ftadd@f2+2,c
  4230  001EE2  EC64  F00B         	call	___ftadd	;wreg free
  4231  001EE6  C01C  F034         	movff	?___ftadd,log@x
  4232  001EEA  C01D  F035         	movff	?___ftadd+1,log@x+1
  4233  001EEE  C01E  F036         	movff	?___ftadd+2,log@x+2
  4234  001EF2  0637               	decf	log@exponent,f,c
  4235  001EF4  A0D8               	btfss	status,0,c
  4236  001EF6  0638               	decf	log@exponent+1,f,c
  4237  001EF8  C034  F028         	movff	log@x,eval_poly@x
  4238  001EFC  C035  F029         	movff	log@x+1,eval_poly@x+1
  4239  001F00  C036  F02A         	movff	log@x+2,eval_poly@x+2
  4240  001F04  0E2D               	movlw	low log@coeff
  4241  001F06  6E2B               	movwf	eval_poly@d,c
  4242  001F08  0E0F               	movlw	high log@coeff
  4243  001F0A  6E2C               	movwf	eval_poly@d+1,c
  4244  001F0C  0E00               	movlw	0
  4245  001F0E  6E2E               	movwf	eval_poly@n+1,c
  4246  001F10  0E08               	movlw	8
  4247  001F12  6E2D               	movwf	eval_poly@n,c
  4248  001F14  EC09  F013         	call	_eval_poly	;wreg free
  4249  001F18  C028  F034         	movff	?_eval_poly,log@x
  4250  001F1C  C029  F035         	movff	?_eval_poly+1,log@x+1
  4251  001F20  C02A  F036         	movff	?_eval_poly+2,log@x+2
  4252  001F24  0E72               	movlw	114
  4253  001F26  6E10               	movwf	___ftmul@f2,c
  4254  001F28  0E31               	movlw	49
  4255  001F2A  6E11               	movwf	___ftmul@f2+1,c
  4256  001F2C  0E3F               	movlw	63
  4257  001F2E  6E12               	movwf	___ftmul@f2+2,c
  4258  001F30  C037  F009         	movff	log@exponent,___awtoft@c
  4259  001F34  C038  F00A         	movff	log@exponent+1,___awtoft@c+1
  4260  001F38  EC8A  F017         	call	___awtoft	;wreg free
  4261  001F3C  C009  F00D         	movff	?___awtoft,___ftmul@f1
  4262  001F40  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  4263  001F44  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  4264  001F48  ECC3  F010         	call	___ftmul	;wreg free
  4265  001F4C  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  4266  001F50  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  4267  001F54  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  4268  001F58  C034  F01F         	movff	log@x,___ftadd@f2
  4269  001F5C  C035  F020         	movff	log@x+1,___ftadd@f2+1
  4270  001F60  C036  F021         	movff	log@x+2,___ftadd@f2+2
  4271  001F64  EC64  F00B         	call	___ftadd	;wreg free
  4272  001F68  C01C  F034         	movff	?___ftadd,?_log
  4273  001F6C  C01D  F035         	movff	?___ftadd+1,?_log+1
  4274  001F70  C01E  F036         	movff	?___ftadd+2,?_log+2
  4275  001F74  0012               	return	
  4276  001F76  0012               	return		;funcret
  4277  001F78                     __end_of_log:
  4278                           	opt stack 0
  4279                           tblptru	equ	0xFF8
  4280                           tblptrh	equ	0xFF7
  4281                           tblptrl	equ	0xFF6
  4282                           tablat	equ	0xFF5
  4283                           prodh	equ	0xFF4
  4284                           prodl	equ	0xFF3
  4285                           indf0	equ	0xFEF
  4286                           postinc0	equ	0xFEE
  4287                           fsr0h	equ	0xFEA
  4288                           fsr0l	equ	0xFE9
  4289                           wreg	equ	0xFE8
  4290                           postdec1	equ	0xFE5
  4291                           fsr1l	equ	0xFE1
  4292                           indf2	equ	0xFDF
  4293                           postinc2	equ	0xFDE
  4294                           postdec2	equ	0xFDD
  4295                           fsr2h	equ	0xFDA
  4296                           fsr2l	equ	0xFD9
  4297                           status	equ	0xFD8
  4298                           
  4299 ;; *************** function _exp *****************
  4300 ;; Defined at:
  4301 ;;		line 12 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\exp.c"
  4302 ;; Parameters:    Size  Location     Type
  4303 ;;  x               3   72[COMRAM] int 
  4304 ;; Auto vars:     Size  Location     Type
  4305 ;;  exponent        2   78[COMRAM] int 
  4306 ;;  sign            1   80[COMRAM] unsigned char 
  4307 ;; Return value:  Size  Location     Type
  4308 ;;                  3   72[COMRAM] unsigned char 
  4309 ;; Registers used:
  4310 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4311 ;; Tracked objects:
  4312 ;;		On entry : 0/0
  4313 ;;		On exit  : 0/0
  4314 ;;		Unchanged: 0/0
  4315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4316 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4317 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4319 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4320 ;;Total ram usage:        9 bytes
  4321 ;; Hardware stack levels used:    1
  4322 ;; Hardware stack levels required when called:    3
  4323 ;; This function calls:
  4324 ;;		___awtoft
  4325 ;;		___ftdiv
  4326 ;;		___ftge
  4327 ;;		___ftmul
  4328 ;;		___ftneg
  4329 ;;		___ftsub
  4330 ;;		___fttol
  4331 ;;		_eval_poly
  4332 ;;		_floor
  4333 ;;		_ldexp
  4334 ;; This function is called by:
  4335 ;;		_pow
  4336 ;; This function uses a non-reentrant model
  4337 ;;
  4338                           
  4339                           	psect	text19
  4340  0014E0                     __ptext19:
  4341                           	opt stack 0
  4342  0014E0                     _exp:
  4343                           	opt stack 24
  4344                           
  4345                           ;incstack = 0
  4346  0014E0  5049               	movf	exp@x,w,c
  4347  0014E2  104A               	iorwf	exp@x+1,w,c
  4348  0014E4  104B               	iorwf	exp@x+2,w,c
  4349  0014E6  A4D8               	btfss	status,2,c
  4350  0014E8  D007               	goto	l3588
  4351  0014EA  0E00               	movlw	0
  4352  0014EC  6E49               	movwf	?_exp,c
  4353  0014EE  0E80               	movlw	128
  4354  0014F0  6E4A               	movwf	?_exp+1,c
  4355  0014F2  0E3F               	movlw	63
  4356  0014F4  6E4B               	movwf	?_exp+2,c
  4357  0014F6  0012               	return	
  4358  0014F8                     l3588:
  4359  0014F8  0E72               	movlw	114
  4360  0014FA  6E01               	movwf	___ftge@ff1,c
  4361  0014FC  0E31               	movlw	49
  4362  0014FE  6E02               	movwf	___ftge@ff1+1,c
  4363  001500  0E44               	movlw	68
  4364  001502  6E03               	movwf	___ftge@ff1+2,c
  4365  001504  C049  F004         	movff	exp@x,___ftge@ff2
  4366  001508  C04A  F005         	movff	exp@x+1,___ftge@ff2+1
  4367  00150C  C04B  F006         	movff	exp@x+2,___ftge@ff2+2
  4368  001510  ECD6  F013         	call	___ftge	;wreg free
  4369  001514  B0D8               	btfsc	status,0,c
  4370  001516  D00C               	goto	l3594
  4371  001518  0E00               	movlw	0
  4372  00151A  0100               	movlb	0	; () banked
  4373  00151C  6F83               	movwf	(_errno+1)& (0+255),b
  4374  00151E  0E22               	movlw	34
  4375  001520  6F82               	movwf	_errno& (0+255),b
  4376  001522  0EFF               	movlw	255
  4377  001524  6E49               	movwf	?_exp,c
  4378  001526  0E7F               	movlw	127
  4379  001528  6E4A               	movwf	?_exp+1,c
  4380  00152A  0E7F               	movlw	127
  4381  00152C  6E4B               	movwf	?_exp+2,c
  4382                           
  4383                           ; BSR set to: 0
  4384  00152E  0012               	return	
  4385  001530                     l3594:
  4386  001530  C049  F001         	movff	exp@x,___ftge@ff1
  4387  001534  C04A  F002         	movff	exp@x+1,___ftge@ff1+1
  4388  001538  C04B  F003         	movff	exp@x+2,___ftge@ff1+2
  4389  00153C  0E49               	movlw	73
  4390  00153E  6E04               	movwf	___ftge@ff2,c
  4391  001540  0E3A               	movlw	58
  4392  001542  6E05               	movwf	___ftge@ff2+1,c
  4393  001544  0EC4               	movlw	196
  4394  001546  6E06               	movwf	___ftge@ff2+2,c
  4395  001548  ECD6  F013         	call	___ftge	;wreg free
  4396  00154C  B0D8               	btfsc	status,0,c
  4397  00154E  D00C               	goto	l3600
  4398  001550  0E00               	movlw	0
  4399  001552  0100               	movlb	0	; () banked
  4400  001554  6F83               	movwf	(_errno+1)& (0+255),b
  4401  001556  0E22               	movlw	34
  4402  001558  6F82               	movwf	_errno& (0+255),b
  4403  00155A  0E00               	movlw	0
  4404  00155C  6E49               	movwf	?_exp,c
  4405  00155E  0E00               	movlw	0
  4406  001560  6E4A               	movwf	?_exp+1,c
  4407  001562  0E00               	movlw	0
  4408  001564  6E4B               	movwf	?_exp+2,c
  4409                           
  4410                           ; BSR set to: 0
  4411  001566  0012               	return	
  4412  001568                     l3600:
  4413  001568  AE4B               	btfss	exp@x+2,7,c
  4414  00156A  D002               	goto	u3340
  4415  00156C  0E01               	movlw	1
  4416  00156E  D001               	goto	u3350
  4417  001570                     u3340:
  4418  001570  0E00               	movlw	0
  4419  001572                     u3350:
  4420  001572  6E51               	movwf	exp@sign,c
  4421  001574  5051               	movf	exp@sign,w,c
  4422  001576  B4D8               	btfsc	status,2,c
  4423  001578  D00E               	goto	l1381
  4424  00157A  C049  F001         	movff	exp@x,___ftneg@f1
  4425  00157E  C04A  F002         	movff	exp@x+1,___ftneg@f1+1
  4426  001582  C04B  F003         	movff	exp@x+2,___ftneg@f1+2
  4427  001586  EC46  F018         	call	___ftneg	;wreg free
  4428  00158A  C001  F049         	movff	?___ftneg,exp@x
  4429  00158E  C002  F04A         	movff	?___ftneg+1,exp@x+1
  4430  001592  C003  F04B         	movff	?___ftneg+2,exp@x+2
  4431  001596                     l1381:
  4432  001596  C049  F00D         	movff	exp@x,___ftmul@f1
  4433  00159A  C04A  F00E         	movff	exp@x+1,___ftmul@f1+1
  4434  00159E  C04B  F00F         	movff	exp@x+2,___ftmul@f1+2
  4435  0015A2  0EAA               	movlw	170
  4436  0015A4  6E10               	movwf	___ftmul@f2,c
  4437  0015A6  0EB8               	movlw	184
  4438  0015A8  6E11               	movwf	___ftmul@f2+1,c
  4439  0015AA  0E3F               	movlw	63
  4440  0015AC  6E12               	movwf	___ftmul@f2+2,c
  4441  0015AE  ECC3  F010         	call	___ftmul	;wreg free
  4442  0015B2  C00D  F049         	movff	?___ftmul,exp@x
  4443  0015B6  C00E  F04A         	movff	?___ftmul+1,exp@x+1
  4444  0015BA  C00F  F04B         	movff	?___ftmul+2,exp@x+2
  4445  0015BE  C049  F041         	movff	exp@x,floor@x
  4446  0015C2  C04A  F042         	movff	exp@x+1,floor@x+1
  4447  0015C6  C04B  F043         	movff	exp@x+2,floor@x+2
  4448  0015CA  EC30  F012         	call	_floor	;wreg free
  4449  0015CE  C041  F04C         	movff	?_floor,_exp$2748
  4450  0015D2  C042  F04D         	movff	?_floor+1,_exp$2748+1
  4451  0015D6  C043  F04E         	movff	?_floor+2,_exp$2748+2
  4452  0015DA  C04C  F028         	movff	_exp$2748,___fttol@f1
  4453  0015DE  C04D  F029         	movff	_exp$2748+1,___fttol@f1+1
  4454  0015E2  C04E  F02A         	movff	_exp$2748+2,___fttol@f1+2
  4455  0015E6  EC42  F010         	call	___fttol	;wreg free
  4456  0015EA  C028  F04F         	movff	?___fttol,exp@exponent
  4457  0015EE  C029  F050         	movff	?___fttol+1,exp@exponent+1
  4458  0015F2  C049  F028         	movff	exp@x,___ftsub@f1
  4459  0015F6  C04A  F029         	movff	exp@x+1,___ftsub@f1+1
  4460  0015FA  C04B  F02A         	movff	exp@x+2,___ftsub@f1+2
  4461  0015FE  C04F  F009         	movff	exp@exponent,___awtoft@c
  4462  001602  C050  F00A         	movff	exp@exponent+1,___awtoft@c+1
  4463  001606  EC8A  F017         	call	___awtoft	;wreg free
  4464  00160A  C009  F02B         	movff	?___awtoft,___ftsub@f2
  4465  00160E  C00A  F02C         	movff	?___awtoft+1,___ftsub@f2+1
  4466  001612  C00B  F02D         	movff	?___awtoft+2,___ftsub@f2+2
  4467  001616  EC68  F017         	call	___ftsub	;wreg free
  4468  00161A  C028  F049         	movff	?___ftsub,exp@x
  4469  00161E  C029  F04A         	movff	?___ftsub+1,exp@x+1
  4470  001622  C02A  F04B         	movff	?___ftsub+2,exp@x+2
  4471  001626  C049  F028         	movff	exp@x,eval_poly@x
  4472  00162A  C04A  F029         	movff	exp@x+1,eval_poly@x+1
  4473  00162E  C04B  F02A         	movff	exp@x+2,eval_poly@x+2
  4474  001632  0E0F               	movlw	low exp@coeff
  4475  001634  6E2B               	movwf	eval_poly@d,c
  4476  001636  0E0F               	movlw	high exp@coeff
  4477  001638  6E2C               	movwf	eval_poly@d+1,c
  4478  00163A  0E00               	movlw	0
  4479  00163C  6E2E               	movwf	eval_poly@n+1,c
  4480  00163E  0E09               	movlw	9
  4481  001640  6E2D               	movwf	eval_poly@n,c
  4482  001642  EC09  F013         	call	_eval_poly	;wreg free
  4483  001646  C028  F034         	movff	?_eval_poly,ldexp@value
  4484  00164A  C029  F035         	movff	?_eval_poly+1,ldexp@value+1
  4485  00164E  C02A  F036         	movff	?_eval_poly+2,ldexp@value+2
  4486  001652  C04F  F037         	movff	exp@exponent,ldexp@newexp
  4487  001656  C050  F038         	movff	exp@exponent+1,ldexp@newexp+1
  4488  00165A  EC9F  F012         	call	_ldexp	;wreg free
  4489  00165E  C034  F049         	movff	?_ldexp,exp@x
  4490  001662  C035  F04A         	movff	?_ldexp+1,exp@x+1
  4491  001666  C036  F04B         	movff	?_ldexp+2,exp@x+2
  4492  00166A  5051               	movf	exp@sign,w,c
  4493  00166C  B4D8               	btfsc	status,2,c
  4494  00166E  D025               	goto	l1382
  4495  001670  2849               	incf	exp@x,w,c
  4496  001672  E10E               	bnz	l3622
  4497  001674  0E7F               	movlw	127
  4498  001676  184A               	xorwf	exp@x+1,w,c
  4499  001678  E10B               	bnz	l3622
  4500  00167A  0E7F               	movlw	127
  4501  00167C  184B               	xorwf	exp@x+2,w,c
  4502  00167E  A4D8               	btfss	status,2,c
  4503  001680  D007               	goto	l3622
  4504  001682  0E00               	movlw	0
  4505  001684  6E49               	movwf	?_exp,c
  4506  001686  0E00               	movlw	0
  4507  001688  6E4A               	movwf	?_exp+1,c
  4508  00168A  0E00               	movlw	0
  4509  00168C  6E4B               	movwf	?_exp+2,c
  4510  00168E  0012               	return	
  4511  001690                     l3622:
  4512  001690  0E00               	movlw	0
  4513  001692  6E09               	movwf	___ftdiv@f1,c
  4514  001694  0E80               	movlw	128
  4515  001696  6E0A               	movwf	___ftdiv@f1+1,c
  4516  001698  0E3F               	movlw	63
  4517  00169A  6E0B               	movwf	___ftdiv@f1+2,c
  4518  00169C  C049  F00C         	movff	exp@x,___ftdiv@f2
  4519  0016A0  C04A  F00D         	movff	exp@x+1,___ftdiv@f2+1
  4520  0016A4  C04B  F00E         	movff	exp@x+2,___ftdiv@f2+2
  4521  0016A8  ECBA  F011         	call	___ftdiv	;wreg free
  4522  0016AC  C009  F049         	movff	?___ftdiv,?_exp
  4523  0016B0  C00A  F04A         	movff	?___ftdiv+1,?_exp+1
  4524  0016B4  C00B  F04B         	movff	?___ftdiv+2,?_exp+2
  4525  0016B8  0012               	return	
  4526  0016BA                     l1382:
  4527  0016BA  C049  F049         	movff	exp@x,?_exp
  4528  0016BE  C04A  F04A         	movff	exp@x+1,?_exp+1
  4529  0016C2  C04B  F04B         	movff	exp@x+2,?_exp+2
  4530  0016C6  0012               	return		;funcret
  4531  0016C8                     __end_of_exp:
  4532                           	opt stack 0
  4533                           tblptru	equ	0xFF8
  4534                           tblptrh	equ	0xFF7
  4535                           tblptrl	equ	0xFF6
  4536                           tablat	equ	0xFF5
  4537                           prodh	equ	0xFF4
  4538                           prodl	equ	0xFF3
  4539                           indf0	equ	0xFEF
  4540                           postinc0	equ	0xFEE
  4541                           fsr0h	equ	0xFEA
  4542                           fsr0l	equ	0xFE9
  4543                           wreg	equ	0xFE8
  4544                           postdec1	equ	0xFE5
  4545                           fsr1l	equ	0xFE1
  4546                           indf2	equ	0xFDF
  4547                           postinc2	equ	0xFDE
  4548                           postdec2	equ	0xFDD
  4549                           fsr2h	equ	0xFDA
  4550                           fsr2l	equ	0xFD9
  4551                           status	equ	0xFD8
  4552                           
  4553 ;; *************** function _ldexp *****************
  4554 ;; Defined at:
  4555 ;;		line 277 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\frexp.c"
  4556 ;; Parameters:    Size  Location     Type
  4557 ;;  value           3   51[COMRAM] unsigned char 
  4558 ;;  newexp          2   54[COMRAM] int 
  4559 ;; Auto vars:     Size  Location     Type
  4560 ;;		None
  4561 ;; Return value:  Size  Location     Type
  4562 ;;                  3   51[COMRAM] int 
  4563 ;; Registers used:
  4564 ;;		wreg, status,2, status,0
  4565 ;; Tracked objects:
  4566 ;;		On entry : 0/0
  4567 ;;		On exit  : 0/0
  4568 ;;		Unchanged: 0/0
  4569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4570 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4572 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4573 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4574 ;;Total ram usage:        7 bytes
  4575 ;; Hardware stack levels used:    1
  4576 ;; This function calls:
  4577 ;;		Nothing
  4578 ;; This function is called by:
  4579 ;;		_exp
  4580 ;; This function uses a non-reentrant model
  4581 ;;
  4582                           
  4583                           	psect	text20
  4584  00253E                     __ptext20:
  4585                           	opt stack 0
  4586  00253E                     _ldexp:
  4587                           	opt stack 26
  4588                           
  4589                           ;incstack = 0
  4590  00253E  5034               	movf	ldexp@value,w,c
  4591  002540  1035               	iorwf	ldexp@value+1,w,c
  4592  002542  1036               	iorwf	ldexp@value+2,w,c
  4593  002544  A4D8               	btfss	status,2,c
  4594  002546  D007               	goto	l3368
  4595  002548  0E00               	movlw	0
  4596  00254A  6E34               	movwf	?_ldexp,c
  4597  00254C  0E00               	movlw	0
  4598  00254E  6E35               	movwf	?_ldexp+1,c
  4599  002550  0E00               	movlw	0
  4600  002552  6E36               	movwf	?_ldexp+2,c
  4601  002554  0012               	return	
  4602  002556                     l3368:
  4603  002556  5036               	movf	ldexp@value+2,w,c
  4604  002558  0B7F               	andlw	127
  4605  00255A  6E39               	movwf	??_ldexp& (0+255),c
  4606  00255C  6A3A               	clrf	(??_ldexp+1)& (0+255),c
  4607  00255E  90D8               	bcf	status,0,c
  4608  002560  3639               	rlcf	??_ldexp,f,c
  4609  002562  363A               	rlcf	??_ldexp+1,f,c
  4610  002564  5039               	movf	??_ldexp,w,c
  4611  002566  2637               	addwf	ldexp@newexp,f,c
  4612  002568  503A               	movf	??_ldexp+1,w,c
  4613  00256A  2238               	addwfc	ldexp@newexp+1,f,c
  4614  00256C  AE35               	btfss	ldexp@value+1,7,c
  4615  00256E  D003               	goto	u3010
  4616  002570  6A39               	clrf	??_ldexp& (0+255),c
  4617  002572  2A39               	incf	??_ldexp& (0+255),f,c
  4618  002574  D001               	goto	u3018
  4619  002576                     u3010:
  4620  002576  6A39               	clrf	??_ldexp& (0+255),c
  4621  002578                     u3018:
  4622  002578  5039               	movf	??_ldexp,w,c
  4623  00257A  2637               	addwf	ldexp@newexp,f,c
  4624  00257C  0E00               	movlw	0
  4625  00257E  2238               	addwfc	ldexp@newexp+1,f,c
  4626  002580  AE38               	btfss	ldexp@newexp+1,7,c
  4627  002582  D00D               	goto	l3376
  4628  002584  0E00               	movlw	0
  4629  002586  0100               	movlb	0	; () banked
  4630  002588  6F83               	movwf	(_errno+1)& (0+255),b
  4631  00258A  0E22               	movlw	34
  4632  00258C  6F82               	movwf	_errno& (0+255),b
  4633  00258E  0E00               	movlw	0
  4634  002590  6E34               	movwf	?_ldexp,c
  4635  002592  0E00               	movlw	0
  4636  002594  6E35               	movwf	?_ldexp+1,c
  4637  002596  0E00               	movlw	0
  4638  002598                     L2:
  4639  002598  6E36               	movwf	?_ldexp+2,c
  4640                           
  4641                           ; BSR set to: 0
  4642  00259A  0012               	return	
  4643                           
  4644                           ; BSR set to: 0
  4645  00259C  D032               	goto	l3394
  4646  00259E                     l3376:
  4647  00259E  BE38               	btfsc	ldexp@newexp+1,7,c
  4648  0025A0  D01A               	goto	l3392
  4649  0025A2  0438               	decf	ldexp@newexp+1,w,c
  4650  0025A4  A0D8               	btfss	status,0,c
  4651  0025A6  D017               	goto	l3392
  4652  0025A8  0E00               	movlw	0
  4653  0025AA  0100               	movlb	0	; () banked
  4654  0025AC  6F83               	movwf	(_errno+1)& (0+255),b
  4655  0025AE  0E22               	movlw	34
  4656  0025B0  6F82               	movwf	_errno& (0+255),b
  4657                           
  4658                           ; BSR set to: 0
  4659  0025B2  AE36               	btfss	ldexp@value+2,7,c
  4660  0025B4  D008               	goto	l3388
  4661                           
  4662                           ; BSR set to: 0
  4663  0025B6  0EFF               	movlw	255
  4664  0025B8  6E34               	movwf	?_ldexp,c
  4665  0025BA  0E7F               	movlw	127
  4666  0025BC  6E35               	movwf	?_ldexp+1,c
  4667  0025BE  0EFF               	movlw	255
  4668  0025C0  D7EB               	goto	L2
  4669                           
  4670                           ; BSR set to: 0
  4671  0025C2  0012               	return	
  4672                           
  4673                           ; BSR set to: 0
  4674  0025C4  D01E               	goto	l3394
  4675  0025C6                     l3388:
  4676                           
  4677                           ; BSR set to: 0
  4678  0025C6  0EFF               	movlw	255
  4679  0025C8  6E34               	movwf	?_ldexp,c
  4680  0025CA  0E7F               	movlw	127
  4681  0025CC  6E35               	movwf	?_ldexp+1,c
  4682  0025CE  0E7F               	movlw	127
  4683  0025D0  D7E3               	goto	L2
  4684                           
  4685                           ; BSR set to: 0
  4686  0025D2  0012               	return	
  4687                           
  4688                           ; BSR set to: 0
  4689  0025D4  D016               	goto	l3394
  4690  0025D6                     l3392:
  4691  0025D6  3438               	rlcf	ldexp@newexp+1,w,c
  4692  0025D8  3038               	rrcf	ldexp@newexp+1,w,c
  4693  0025DA  6E3A               	movwf	(??_ldexp+1)& (0+255),c
  4694  0025DC  3037               	rrcf	ldexp@newexp,w,c
  4695  0025DE  6E39               	movwf	??_ldexp& (0+255),c
  4696  0025E0  5036               	movf	ldexp@value+2,w,c
  4697  0025E2  1839               	xorwf	??_ldexp,w,c
  4698  0025E4  0B80               	andlw	-128
  4699  0025E6  1839               	xorwf	??_ldexp,w,c
  4700  0025E8  6E36               	movwf	ldexp@value+2,c
  4701  0025EA  C037  F039         	movff	ldexp@newexp,??_ldexp
  4702  0025EE  0E01               	movlw	1
  4703  0025F0  1639               	andwf	??_ldexp,f,c
  4704  0025F2  3239               	rrcf	??_ldexp,f,c
  4705  0025F4  3239               	rrcf	??_ldexp,f,c
  4706  0025F6  5035               	movf	ldexp@value+1,w,c
  4707  0025F8  1839               	xorwf	??_ldexp,w,c
  4708  0025FA  0B7F               	andlw	-129
  4709  0025FC  1839               	xorwf	??_ldexp,w,c
  4710  0025FE  6E35               	movwf	ldexp@value+1,c
  4711  002600  D000               	goto	l3394
  4712  002602                     l3394:
  4713  002602  C034  F034         	movff	ldexp@value,?_ldexp
  4714  002606  C035  F035         	movff	ldexp@value+1,?_ldexp+1
  4715  00260A  C036  F036         	movff	ldexp@value+2,?_ldexp+2
  4716  00260E  0012               	return	
  4717  002610  0012               	return		;funcret
  4718  002612                     __end_of_ldexp:
  4719                           	opt stack 0
  4720                           tblptru	equ	0xFF8
  4721                           tblptrh	equ	0xFF7
  4722                           tblptrl	equ	0xFF6
  4723                           tablat	equ	0xFF5
  4724                           prodh	equ	0xFF4
  4725                           prodl	equ	0xFF3
  4726                           indf0	equ	0xFEF
  4727                           postinc0	equ	0xFEE
  4728                           fsr0h	equ	0xFEA
  4729                           fsr0l	equ	0xFE9
  4730                           wreg	equ	0xFE8
  4731                           postdec1	equ	0xFE5
  4732                           fsr1l	equ	0xFE1
  4733                           indf2	equ	0xFDF
  4734                           postinc2	equ	0xFDE
  4735                           postdec2	equ	0xFDD
  4736                           fsr2h	equ	0xFDA
  4737                           fsr2l	equ	0xFD9
  4738                           status	equ	0xFD8
  4739                           
  4740 ;; *************** function _floor *****************
  4741 ;; Defined at:
  4742 ;;		line 13 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\floor.c"
  4743 ;; Parameters:    Size  Location     Type
  4744 ;;  x               3   64[COMRAM] int 
  4745 ;; Auto vars:     Size  Location     Type
  4746 ;;  i               3   67[COMRAM] int 
  4747 ;;  expon           2   70[COMRAM] int 
  4748 ;; Return value:  Size  Location     Type
  4749 ;;                  3   64[COMRAM] int 
  4750 ;; Registers used:
  4751 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4752 ;; Tracked objects:
  4753 ;;		On entry : 0/0
  4754 ;;		On exit  : 0/0
  4755 ;;		Unchanged: 0/0
  4756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4757 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4758 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4760 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4761 ;;Total ram usage:        8 bytes
  4762 ;; Hardware stack levels used:    1
  4763 ;; Hardware stack levels required when called:    2
  4764 ;; This function calls:
  4765 ;;		___altoft
  4766 ;;		___ftadd
  4767 ;;		___ftge
  4768 ;;		___fttol
  4769 ;;		_frexp
  4770 ;; This function is called by:
  4771 ;;		_exp
  4772 ;; This function uses a non-reentrant model
  4773 ;;
  4774                           
  4775                           	psect	text21
  4776  002460                     __ptext21:
  4777                           	opt stack 0
  4778  002460                     _floor:
  4779                           	opt stack 24
  4780                           
  4781                           ;incstack = 0
  4782  002460  C041  F001         	movff	floor@x,frexp@value
  4783  002464  C042  F002         	movff	floor@x+1,frexp@value+1
  4784  002468  C043  F003         	movff	floor@x+2,frexp@value+2
  4785  00246C  0E47               	movlw	low floor@expon
  4786  00246E  6E04               	movwf	frexp@eptr,c
  4787  002470  0E00               	movlw	high floor@expon
  4788  002472  6E05               	movwf	frexp@eptr+1,c
  4789  002474  EC6C  F014         	call	_frexp	;wreg free
  4790  002478  AE48               	btfss	floor@expon+1,7,c
  4791  00247A  D010               	goto	l3346
  4792  00247C  AE43               	btfss	floor@x+2,7,c
  4793  00247E  D007               	goto	l3342
  4794  002480  0E00               	movlw	0
  4795  002482  6E41               	movwf	?_floor,c
  4796  002484  0E80               	movlw	128
  4797  002486  6E42               	movwf	?_floor+1,c
  4798  002488  0EBF               	movlw	191
  4799  00248A  6E43               	movwf	?_floor+2,c
  4800  00248C  0012               	return	
  4801  00248E                     l3342:
  4802  00248E  0E00               	movlw	0
  4803  002490  6E41               	movwf	?_floor,c
  4804  002492  0E00               	movlw	0
  4805  002494  6E42               	movwf	?_floor+1,c
  4806  002496  0E00               	movlw	0
  4807  002498  6E43               	movwf	?_floor+2,c
  4808  00249A  0012               	return	
  4809  00249C                     l3346:
  4810  00249C  5048               	movf	floor@expon+1,w,c
  4811  00249E  E104               	bnz	u2970
  4812  0024A0  0E15               	movlw	21
  4813  0024A2  5C47               	subwf	floor@expon,w,c
  4814  0024A4  A0D8               	btfss	status,0,c
  4815  0024A6  D007               	goto	l3350
  4816  0024A8                     u2970:
  4817  0024A8  C041  F041         	movff	floor@x,?_floor
  4818  0024AC  C042  F042         	movff	floor@x+1,?_floor+1
  4819  0024B0  C043  F043         	movff	floor@x+2,?_floor+2
  4820  0024B4  0012               	return	
  4821  0024B6                     l3350:
  4822  0024B6  C041  F028         	movff	floor@x,___fttol@f1
  4823  0024BA  C042  F029         	movff	floor@x+1,___fttol@f1+1
  4824  0024BE  C043  F02A         	movff	floor@x+2,___fttol@f1+2
  4825  0024C2  EC42  F010         	call	___fttol	;wreg free
  4826  0024C6  C028  F037         	movff	?___fttol,___altoft@c
  4827  0024CA  C029  F038         	movff	?___fttol+1,___altoft@c+1
  4828  0024CE  C02A  F039         	movff	?___fttol+2,___altoft@c+2
  4829  0024D2  C02B  F03A         	movff	?___fttol+3,___altoft@c+3
  4830  0024D6  EC76  F015         	call	___altoft	;wreg free
  4831  0024DA  C037  F044         	movff	?___altoft,floor@i
  4832  0024DE  C038  F045         	movff	?___altoft+1,floor@i+1
  4833  0024E2  C039  F046         	movff	?___altoft+2,floor@i+2
  4834  0024E6  C041  F001         	movff	floor@x,___ftge@ff1
  4835  0024EA  C042  F002         	movff	floor@x+1,___ftge@ff1+1
  4836  0024EE  C043  F003         	movff	floor@x+2,___ftge@ff1+2
  4837  0024F2  C044  F004         	movff	floor@i,___ftge@ff2
  4838  0024F6  C045  F005         	movff	floor@i+1,___ftge@ff2+1
  4839  0024FA  C046  F006         	movff	floor@i+2,___ftge@ff2+2
  4840  0024FE  ECD6  F013         	call	___ftge	;wreg free
  4841  002502  B0D8               	btfsc	status,0,c
  4842  002504  D015               	goto	l1392
  4843  002506  C044  F01C         	movff	floor@i,___ftadd@f1
  4844  00250A  C045  F01D         	movff	floor@i+1,___ftadd@f1+1
  4845  00250E  C046  F01E         	movff	floor@i+2,___ftadd@f1+2
  4846  002512  0E00               	movlw	0
  4847  002514  6E1F               	movwf	___ftadd@f2,c
  4848  002516  0E80               	movlw	128
  4849  002518  6E20               	movwf	___ftadd@f2+1,c
  4850  00251A  0EBF               	movlw	191
  4851  00251C  6E21               	movwf	___ftadd@f2+2,c
  4852  00251E  EC64  F00B         	call	___ftadd	;wreg free
  4853  002522  C01C  F041         	movff	?___ftadd,?_floor
  4854  002526  C01D  F042         	movff	?___ftadd+1,?_floor+1
  4855  00252A  C01E  F043         	movff	?___ftadd+2,?_floor+2
  4856  00252E  0012               	return	
  4857  002530                     l1392:
  4858  002530  C044  F041         	movff	floor@i,?_floor
  4859  002534  C045  F042         	movff	floor@i+1,?_floor+1
  4860  002538  C046  F043         	movff	floor@i+2,?_floor+2
  4861  00253C  0012               	return		;funcret
  4862  00253E                     __end_of_floor:
  4863                           	opt stack 0
  4864                           tblptru	equ	0xFF8
  4865                           tblptrh	equ	0xFF7
  4866                           tblptrl	equ	0xFF6
  4867                           tablat	equ	0xFF5
  4868                           prodh	equ	0xFF4
  4869                           prodl	equ	0xFF3
  4870                           indf0	equ	0xFEF
  4871                           postinc0	equ	0xFEE
  4872                           fsr0h	equ	0xFEA
  4873                           fsr0l	equ	0xFE9
  4874                           wreg	equ	0xFE8
  4875                           postdec1	equ	0xFE5
  4876                           fsr1l	equ	0xFE1
  4877                           indf2	equ	0xFDF
  4878                           postinc2	equ	0xFDE
  4879                           postdec2	equ	0xFDD
  4880                           fsr2h	equ	0xFDA
  4881                           fsr2l	equ	0xFD9
  4882                           status	equ	0xFD8
  4883                           
  4884 ;; *************** function _frexp *****************
  4885 ;; Defined at:
  4886 ;;		line 254 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\frexp.c"
  4887 ;; Parameters:    Size  Location     Type
  4888 ;;  value           3    0[COMRAM] int 
  4889 ;;  eptr            2    3[COMRAM] PTR int 
  4890 ;;		 -> log@exponent(2), floor@expon(2), 
  4891 ;; Auto vars:     Size  Location     Type
  4892 ;;		None
  4893 ;; Return value:  Size  Location     Type
  4894 ;;                  3    0[COMRAM] PTR int 
  4895 ;; Registers used:
  4896 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4897 ;; Tracked objects:
  4898 ;;		On entry : 0/0
  4899 ;;		On exit  : 0/0
  4900 ;;		Unchanged: 0/0
  4901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4902 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4903 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4904 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4905 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4906 ;;Total ram usage:        7 bytes
  4907 ;; Hardware stack levels used:    1
  4908 ;; This function calls:
  4909 ;;		Nothing
  4910 ;; This function is called by:
  4911 ;;		_floor
  4912 ;;		_log
  4913 ;; This function uses a non-reentrant model
  4914 ;;
  4915                           
  4916                           	psect	text22
  4917  0028D8                     __ptext22:
  4918                           	opt stack 0
  4919  0028D8                     _frexp:
  4920                           	opt stack 26
  4921                           
  4922                           ;incstack = 0
  4923  0028D8  5001               	movf	frexp@value,w,c
  4924  0028DA  1002               	iorwf	frexp@value+1,w,c
  4925  0028DC  1003               	iorwf	frexp@value+2,w,c
  4926  0028DE  A4D8               	btfss	status,2,c
  4927  0028E0  D00F               	goto	l3186
  4928  0028E2  C004  FFD9         	movff	frexp@eptr,fsr2l
  4929  0028E6  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  4930  0028EA  0E00               	movlw	0
  4931  0028EC  6EDE               	movwf	postinc2,c
  4932  0028EE  0E00               	movlw	0
  4933  0028F0  6EDD               	movwf	postdec2,c
  4934  0028F2  0E00               	movlw	0
  4935  0028F4  6E01               	movwf	?_frexp,c
  4936  0028F6  0E00               	movlw	0
  4937  0028F8  6E02               	movwf	?_frexp+1,c
  4938  0028FA  0E00               	movlw	0
  4939  0028FC  6E03               	movwf	?_frexp+2,c
  4940  0028FE  0012               	return	
  4941  002900                     l3186:
  4942  002900  5003               	movf	frexp@value+2,w,c
  4943  002902  0B7F               	andlw	127
  4944  002904  6E06               	movwf	??_frexp& (0+255),c
  4945  002906  6A07               	clrf	(??_frexp+1)& (0+255),c
  4946  002908  90D8               	bcf	status,0,c
  4947  00290A  3606               	rlcf	??_frexp,f,c
  4948  00290C  3607               	rlcf	??_frexp+1,f,c
  4949  00290E  C004  FFD9         	movff	frexp@eptr,fsr2l
  4950  002912  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  4951  002916  C006  FFDE         	movff	??_frexp,postinc2
  4952  00291A  C007  FFDD         	movff	??_frexp+1,postdec2
  4953  00291E  AE02               	btfss	frexp@value+1,7,c
  4954  002920  D003               	goto	u2780
  4955  002922  6A06               	clrf	??_frexp& (0+255),c
  4956  002924  2A06               	incf	??_frexp& (0+255),f,c
  4957  002926  D001               	goto	u2788
  4958  002928                     u2780:
  4959  002928  6A06               	clrf	??_frexp& (0+255),c
  4960  00292A                     u2788:
  4961  00292A  5006               	movf	??_frexp,w,c
  4962  00292C  C004  FFD9         	movff	frexp@eptr,fsr2l
  4963  002930  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  4964  002934  12DE               	iorwf	postinc2,f,c
  4965  002936  0E00               	movlw	0
  4966  002938  12DD               	iorwf	postdec2,f,c
  4967  00293A  C004  FFD9         	movff	frexp@eptr,fsr2l
  4968  00293E  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  4969  002942  0E82               	movlw	130
  4970  002944  26DE               	addwf	postinc2,f,c
  4971  002946  0EFF               	movlw	255
  4972  002948  22DD               	addwfc	postdec2,f,c
  4973  00294A  8003               	bsf	frexp@value+2,0,c
  4974  00294C  8203               	bsf	frexp@value+2,1,c
  4975  00294E  8403               	bsf	frexp@value+2,2,c
  4976  002950  8603               	bsf	frexp@value+2,3,c
  4977  002952  8803               	bsf	frexp@value+2,4,c
  4978  002954  8A03               	bsf	frexp@value+2,5,c
  4979  002956  9C03               	bcf	frexp@value+2,6,c
  4980  002958  9E02               	bcf	frexp@value+1,7,c
  4981  00295A  C001  F001         	movff	frexp@value,?_frexp
  4982  00295E  C002  F002         	movff	frexp@value+1,?_frexp+1
  4983  002962  C003  F003         	movff	frexp@value+2,?_frexp+2
  4984  002966  0012               	return	
  4985  002968  0012               	return		;funcret
  4986  00296A                     __end_of_frexp:
  4987                           	opt stack 0
  4988                           tblptru	equ	0xFF8
  4989                           tblptrh	equ	0xFF7
  4990                           tblptrl	equ	0xFF6
  4991                           tablat	equ	0xFF5
  4992                           prodh	equ	0xFF4
  4993                           prodl	equ	0xFF3
  4994                           indf0	equ	0xFEF
  4995                           postinc0	equ	0xFEE
  4996                           fsr0h	equ	0xFEA
  4997                           fsr0l	equ	0xFE9
  4998                           wreg	equ	0xFE8
  4999                           postdec1	equ	0xFE5
  5000                           fsr1l	equ	0xFE1
  5001                           indf2	equ	0xFDF
  5002                           postinc2	equ	0xFDE
  5003                           postdec2	equ	0xFDD
  5004                           fsr2h	equ	0xFDA
  5005                           fsr2l	equ	0xFD9
  5006                           status	equ	0xFD8
  5007                           
  5008 ;; *************** function ___fttol *****************
  5009 ;; Defined at:
  5010 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\fttol.c"
  5011 ;; Parameters:    Size  Location     Type
  5012 ;;  f1              3   39[COMRAM] float 
  5013 ;; Auto vars:     Size  Location     Type
  5014 ;;  lval            4   49[COMRAM] unsigned long 
  5015 ;;  exp1            1   53[COMRAM] unsigned char 
  5016 ;;  sign1           1   48[COMRAM] unsigned char 
  5017 ;; Return value:  Size  Location     Type
  5018 ;;                  4   39[COMRAM] long 
  5019 ;; Registers used:
  5020 ;;		wreg, status,2, status,0
  5021 ;; Tracked objects:
  5022 ;;		On entry : 0/0
  5023 ;;		On exit  : 0/0
  5024 ;;		Unchanged: 0/0
  5025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5026 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5027 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5028 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5029 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5030 ;;Total ram usage:       15 bytes
  5031 ;; Hardware stack levels used:    1
  5032 ;; This function calls:
  5033 ;;		Nothing
  5034 ;; This function is called by:
  5035 ;;		_obtain_pass
  5036 ;;		_pow
  5037 ;;		_exp
  5038 ;;		_floor
  5039 ;; This function uses a non-reentrant model
  5040 ;;
  5041                           
  5042                           	psect	text23
  5043  002084                     __ptext23:
  5044                           	opt stack 0
  5045  002084                     ___fttol:
  5046                           	opt stack 25
  5047                           
  5048                           ;incstack = 0
  5049  002084  C02A  F02C         	movff	___fttol@f1+2,??___fttol
  5050  002088  6A2D               	clrf	(??___fttol+1)& (0+255),c
  5051  00208A  6A2E               	clrf	(??___fttol+2)& (0+255),c
  5052  00208C  3429               	rlcf	___fttol@f1+1,w,c
  5053  00208E  362C               	rlcf	??___fttol& (0+255),f,c
  5054  002090  E301               	bnc	u2691
  5055  002092  802D               	bsf	(??___fttol+1)& (0+255),0,c
  5056  002094                     u2691:
  5057  002094  502C               	movf	??___fttol,w,c
  5058  002096  6E36               	movwf	___fttol@exp1,c
  5059  002098  5036               	movf	___fttol@exp1,w,c
  5060  00209A  A4D8               	btfss	status,2,c
  5061  00209C  D009               	goto	l3138
  5062  00209E  0E00               	movlw	0
  5063  0020A0  6E28               	movwf	?___fttol,c
  5064  0020A2  0E00               	movlw	0
  5065  0020A4  6E29               	movwf	?___fttol+1,c
  5066  0020A6  0E00               	movlw	0
  5067  0020A8  6E2A               	movwf	?___fttol+2,c
  5068  0020AA  0E00               	movlw	0
  5069  0020AC  6E2B               	movwf	?___fttol+3,c
  5070  0020AE  0012               	return	
  5071  0020B0                     l3138:
  5072  0020B0  0E17               	movlw	23
  5073  0020B2  6E2C               	movwf	??___fttol& (0+255),c
  5074  0020B4  C028  F02D         	movff	___fttol@f1,??___fttol+1
  5075  0020B8  C029  F02E         	movff	___fttol@f1+1,??___fttol+2
  5076  0020BC  C02A  F02F         	movff	___fttol@f1+2,??___fttol+3
  5077  0020C0  282C               	incf	??___fttol,w,c
  5078  0020C2  6E30               	movwf	(??___fttol+4)& (0+255),c
  5079  0020C4  D004               	goto	u2710
  5080  0020C6                     u2715:
  5081  0020C6  90D8               	bcf	status,0,c
  5082  0020C8  322F               	rrcf	??___fttol+3,f,c
  5083  0020CA  322E               	rrcf	??___fttol+2,f,c
  5084  0020CC  322D               	rrcf	??___fttol+1,f,c
  5085  0020CE                     u2710:
  5086  0020CE  2E30               	decfsz	(??___fttol+4)& (0+255),f,c
  5087  0020D0  D7FA               	goto	u2715
  5088  0020D2  502D               	movf	??___fttol+1,w,c
  5089  0020D4  6E31               	movwf	___fttol@sign1,c
  5090  0020D6  8E29               	bsf	___fttol@f1+1,7,c
  5091  0020D8  0EFF               	movlw	255
  5092  0020DA  1628               	andwf	___fttol@f1,f,c
  5093  0020DC  0EFF               	movlw	255
  5094  0020DE  1629               	andwf	___fttol@f1+1,f,c
  5095  0020E0  0E00               	movlw	0
  5096  0020E2  162A               	andwf	___fttol@f1+2,f,c
  5097  0020E4  5028               	movf	___fttol@f1,w,c
  5098  0020E6  6E32               	movwf	___fttol@lval,c
  5099  0020E8  5029               	movf	___fttol@f1+1,w,c
  5100  0020EA  6E33               	movwf	___fttol@lval+1,c
  5101  0020EC  502A               	movf	___fttol@f1+2,w,c
  5102  0020EE  6E34               	movwf	___fttol@lval+2,c
  5103  0020F0  6A35               	clrf	___fttol@lval+3,c
  5104  0020F2  0E8E               	movlw	142
  5105  0020F4  5E36               	subwf	___fttol@exp1,f,c
  5106  0020F6  AE36               	btfss	___fttol@exp1,7,c
  5107  0020F8  D017               	goto	l3160
  5108  0020FA  5036               	movf	___fttol@exp1,w,c
  5109  0020FC  0A80               	xorlw	128
  5110  0020FE  0F8F               	addlw	143
  5111  002100  B0D8               	btfsc	status,0,c
  5112  002102  D00A               	goto	l3156
  5113  002104  0E00               	movlw	0
  5114  002106  6E28               	movwf	?___fttol,c
  5115  002108  0E00               	movlw	0
  5116  00210A  6E29               	movwf	?___fttol+1,c
  5117  00210C  0E00               	movlw	0
  5118  00210E  6E2A               	movwf	?___fttol+2,c
  5119  002110  0E00               	movlw	0
  5120  002112  6E2B               	movwf	?___fttol+3,c
  5121  002114  0012               	return	
  5122  002116  D000               	goto	l3156
  5123  002118                     l3156:
  5124  002118  90D8               	bcf	status,0,c
  5125  00211A  3235               	rrcf	___fttol@lval+3,f,c
  5126  00211C  3234               	rrcf	___fttol@lval+2,f,c
  5127  00211E  3233               	rrcf	___fttol@lval+1,f,c
  5128  002120  3232               	rrcf	___fttol@lval,f,c
  5129  002122  3E36               	incfsz	___fttol@exp1,f,c
  5130  002124  D7F9               	goto	l3156
  5131  002126  D019               	goto	l3170
  5132  002128                     l3160:
  5133  002128  0E17               	movlw	23
  5134  00212A  6436               	cpfsgt	___fttol@exp1,c
  5135  00212C  D011               	goto	l3168
  5136  00212E  0E00               	movlw	0
  5137  002130  6E28               	movwf	?___fttol,c
  5138  002132  0E00               	movlw	0
  5139  002134  6E29               	movwf	?___fttol+1,c
  5140  002136  0E00               	movlw	0
  5141  002138  6E2A               	movwf	?___fttol+2,c
  5142  00213A  0E00               	movlw	0
  5143  00213C  6E2B               	movwf	?___fttol+3,c
  5144  00213E  0012               	return	
  5145  002140  D007               	goto	l3168
  5146  002142                     l3166:
  5147  002142  90D8               	bcf	status,0,c
  5148  002144  3632               	rlcf	___fttol@lval,f,c
  5149  002146  3633               	rlcf	___fttol@lval+1,f,c
  5150  002148  3634               	rlcf	___fttol@lval+2,f,c
  5151  00214A  3635               	rlcf	___fttol@lval+3,f,c
  5152  00214C  0636               	decf	___fttol@exp1,f,c
  5153  00214E  D000               	goto	l3168
  5154  002150                     l3168:
  5155  002150  5036               	movf	___fttol@exp1,w,c
  5156  002152  B4D8               	btfsc	status,2,c
  5157  002154  D002               	goto	l3170
  5158  002156  D7F5               	goto	l3166
  5159  002158  D000               	goto	l3170
  5160  00215A                     l3170:
  5161  00215A  5031               	movf	___fttol@sign1,w,c
  5162  00215C  B4D8               	btfsc	status,2,c
  5163  00215E  D009               	goto	l3174
  5164  002160  1E35               	comf	___fttol@lval+3,f,c
  5165  002162  1E34               	comf	___fttol@lval+2,f,c
  5166  002164  1E33               	comf	___fttol@lval+1,f,c
  5167  002166  6C32               	negf	___fttol@lval,c
  5168  002168  0E00               	movlw	0
  5169  00216A  2233               	addwfc	___fttol@lval+1,f,c
  5170  00216C  2234               	addwfc	___fttol@lval+2,f,c
  5171  00216E  2235               	addwfc	___fttol@lval+3,f,c
  5172  002170  D000               	goto	l3174
  5173  002172                     l3174:
  5174  002172  C032  F028         	movff	___fttol@lval,?___fttol
  5175  002176  C033  F029         	movff	___fttol@lval+1,?___fttol+1
  5176  00217A  C034  F02A         	movff	___fttol@lval+2,?___fttol+2
  5177  00217E  C035  F02B         	movff	___fttol@lval+3,?___fttol+3
  5178  002182  0012               	return	
  5179  002184  0012               	return		;funcret
  5180  002186                     __end_of___fttol:
  5181                           	opt stack 0
  5182                           tblptru	equ	0xFF8
  5183                           tblptrh	equ	0xFF7
  5184                           tblptrl	equ	0xFF6
  5185                           tablat	equ	0xFF5
  5186                           prodh	equ	0xFF4
  5187                           prodl	equ	0xFF3
  5188                           indf0	equ	0xFEF
  5189                           postinc0	equ	0xFEE
  5190                           fsr0h	equ	0xFEA
  5191                           fsr0l	equ	0xFE9
  5192                           wreg	equ	0xFE8
  5193                           postdec1	equ	0xFE5
  5194                           fsr1l	equ	0xFE1
  5195                           indf2	equ	0xFDF
  5196                           postinc2	equ	0xFDE
  5197                           postdec2	equ	0xFDD
  5198                           fsr2h	equ	0xFDA
  5199                           fsr2l	equ	0xFD9
  5200                           status	equ	0xFD8
  5201                           
  5202 ;; *************** function ___ftge *****************
  5203 ;; Defined at:
  5204 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\ftge.c"
  5205 ;; Parameters:    Size  Location     Type
  5206 ;;  ff1             3    0[COMRAM] float 
  5207 ;;  ff2             3    3[COMRAM] float 
  5208 ;; Auto vars:     Size  Location     Type
  5209 ;;		None
  5210 ;; Return value:  Size  Location     Type
  5211 ;;		None               void
  5212 ;; Registers used:
  5213 ;;		wreg, status,2, status,0
  5214 ;; Tracked objects:
  5215 ;;		On entry : 0/0
  5216 ;;		On exit  : 0/0
  5217 ;;		Unchanged: 0/0
  5218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5219 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5221 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5222 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5223 ;;Total ram usage:        9 bytes
  5224 ;; Hardware stack levels used:    1
  5225 ;; This function calls:
  5226 ;;		Nothing
  5227 ;; This function is called by:
  5228 ;;		_pow
  5229 ;;		_exp
  5230 ;;		_floor
  5231 ;; This function uses a non-reentrant model
  5232 ;;
  5233                           
  5234                           	psect	text24
  5235  0027AC                     __ptext24:
  5236                           	opt stack 0
  5237  0027AC                     ___ftge:
  5238                           	opt stack 25
  5239                           
  5240                           ;incstack = 0
  5241  0027AC  AE03               	btfss	___ftge@ff1+2,7,c
  5242  0027AE  D017               	goto	l3118
  5243  0027B0  C001  F007         	movff	___ftge@ff1,??___ftge
  5244  0027B4  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  5245  0027B8  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  5246  0027BC  1E07               	comf	??___ftge,f,c
  5247  0027BE  1E08               	comf	??___ftge+1,f,c
  5248  0027C0  1E09               	comf	??___ftge+2,f,c
  5249  0027C2  2A07               	incf	??___ftge,f,c
  5250  0027C4  0E00               	movlw	0
  5251  0027C6  2208               	addwfc	??___ftge+1,f,c
  5252  0027C8  2209               	addwfc	??___ftge+2,f,c
  5253  0027CA  0E00               	movlw	0
  5254  0027CC  2407               	addwf	??___ftge,w,c
  5255  0027CE  6E01               	movwf	___ftge@ff1,c
  5256  0027D0  0E00               	movlw	0
  5257  0027D2  2008               	addwfc	??___ftge+1,w,c
  5258  0027D4  6E02               	movwf	___ftge@ff1+1,c
  5259  0027D6  0E80               	movlw	128
  5260  0027D8  2009               	addwfc	??___ftge+2,w,c
  5261  0027DA  6E03               	movwf	___ftge@ff1+2,c
  5262  0027DC  D000               	goto	l3118
  5263  0027DE                     l3118:
  5264  0027DE  AE06               	btfss	___ftge@ff2+2,7,c
  5265  0027E0  D017               	goto	l3122
  5266  0027E2  C004  F007         	movff	___ftge@ff2,??___ftge
  5267  0027E6  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  5268  0027EA  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  5269  0027EE  1E07               	comf	??___ftge,f,c
  5270  0027F0  1E08               	comf	??___ftge+1,f,c
  5271  0027F2  1E09               	comf	??___ftge+2,f,c
  5272  0027F4  2A07               	incf	??___ftge,f,c
  5273  0027F6  0E00               	movlw	0
  5274  0027F8  2208               	addwfc	??___ftge+1,f,c
  5275  0027FA  2209               	addwfc	??___ftge+2,f,c
  5276  0027FC  0E00               	movlw	0
  5277  0027FE  2407               	addwf	??___ftge,w,c
  5278  002800  6E04               	movwf	___ftge@ff2,c
  5279  002802  0E00               	movlw	0
  5280  002804  2008               	addwfc	??___ftge+1,w,c
  5281  002806  6E05               	movwf	___ftge@ff2+1,c
  5282  002808  0E80               	movlw	128
  5283  00280A  2009               	addwfc	??___ftge+2,w,c
  5284  00280C  6E06               	movwf	___ftge@ff2+2,c
  5285  00280E  D000               	goto	l3122
  5286  002810                     l3122:
  5287  002810  0E00               	movlw	0
  5288  002812  1A01               	xorwf	___ftge@ff1,f,c
  5289  002814  0E00               	movlw	0
  5290  002816  1A02               	xorwf	___ftge@ff1+1,f,c
  5291  002818  0E80               	movlw	128
  5292  00281A  1A03               	xorwf	___ftge@ff1+2,f,c
  5293  00281C  0E00               	movlw	0
  5294  00281E  1A04               	xorwf	___ftge@ff2,f,c
  5295  002820  0E00               	movlw	0
  5296  002822  1A05               	xorwf	___ftge@ff2+1,f,c
  5297  002824  0E80               	movlw	128
  5298  002826  1A06               	xorwf	___ftge@ff2+2,f,c
  5299  002828  5004               	movf	___ftge@ff2,w,c
  5300  00282A  5C01               	subwf	___ftge@ff1,w,c
  5301  00282C  5005               	movf	___ftge@ff2+1,w,c
  5302  00282E  5802               	subwfb	___ftge@ff1+1,w,c
  5303  002830  5006               	movf	___ftge@ff2+2,w,c
  5304  002832  5803               	subwfb	___ftge@ff1+2,w,c
  5305  002834  B0D8               	btfsc	status,0,c
  5306  002836  D002               	goto	l3128
  5307  002838  90D8               	bcf	status,0,c
  5308  00283A  0012               	return	
  5309  00283C                     l3128:
  5310  00283C  80D8               	bsf	status,0,c
  5311  00283E  0012               	return	
  5312  002840  0012               	return		;funcret
  5313  002842                     __end_of___ftge:
  5314                           	opt stack 0
  5315                           tblptru	equ	0xFF8
  5316                           tblptrh	equ	0xFF7
  5317                           tblptrl	equ	0xFF6
  5318                           tablat	equ	0xFF5
  5319                           prodh	equ	0xFF4
  5320                           prodl	equ	0xFF3
  5321                           indf0	equ	0xFEF
  5322                           postinc0	equ	0xFEE
  5323                           fsr0h	equ	0xFEA
  5324                           fsr0l	equ	0xFE9
  5325                           wreg	equ	0xFE8
  5326                           postdec1	equ	0xFE5
  5327                           fsr1l	equ	0xFE1
  5328                           indf2	equ	0xFDF
  5329                           postinc2	equ	0xFDE
  5330                           postdec2	equ	0xFDD
  5331                           fsr2h	equ	0xFDA
  5332                           fsr2l	equ	0xFD9
  5333                           status	equ	0xFD8
  5334                           
  5335 ;; *************** function ___altoft *****************
  5336 ;; Defined at:
  5337 ;;		line 42 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\altoft.c"
  5338 ;; Parameters:    Size  Location     Type
  5339 ;;  c               4   54[COMRAM] long 
  5340 ;; Auto vars:     Size  Location     Type
  5341 ;;  sign            1   63[COMRAM] unsigned char 
  5342 ;;  exp             1   62[COMRAM] unsigned char 
  5343 ;; Return value:  Size  Location     Type
  5344 ;;                  3   54[COMRAM] float 
  5345 ;; Registers used:
  5346 ;;		wreg, status,2, status,0, cstack
  5347 ;; Tracked objects:
  5348 ;;		On entry : 0/0
  5349 ;;		On exit  : 0/0
  5350 ;;		Unchanged: 0/0
  5351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5352 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5353 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5354 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5355 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5356 ;;Total ram usage:       10 bytes
  5357 ;; Hardware stack levels used:    1
  5358 ;; Hardware stack levels required when called:    1
  5359 ;; This function calls:
  5360 ;;		___ftpack
  5361 ;; This function is called by:
  5362 ;;		_floor
  5363 ;; This function uses a non-reentrant model
  5364 ;;
  5365                           
  5366                           	psect	text25
  5367  002AEC                     __ptext25:
  5368                           	opt stack 0
  5369  002AEC                     ___altoft:
  5370                           	opt stack 24
  5371                           
  5372                           ;incstack = 0
  5373  002AEC  0E00               	movlw	0
  5374  002AEE  6E40               	movwf	___altoft@sign,c
  5375  002AF0  0E8E               	movlw	142
  5376  002AF2  6E3F               	movwf	___altoft@exp,c
  5377  002AF4  AE3A               	btfss	___altoft@c+3,7,c
  5378  002AF6  D012               	goto	l2990
  5379  002AF8  1E3A               	comf	___altoft@c+3,f,c
  5380  002AFA  1E39               	comf	___altoft@c+2,f,c
  5381  002AFC  1E38               	comf	___altoft@c+1,f,c
  5382  002AFE  6C37               	negf	___altoft@c,c
  5383  002B00  0E00               	movlw	0
  5384  002B02  2238               	addwfc	___altoft@c+1,f,c
  5385  002B04  2239               	addwfc	___altoft@c+2,f,c
  5386  002B06  223A               	addwfc	___altoft@c+3,f,c
  5387  002B08  0E01               	movlw	1
  5388  002B0A  6E40               	movwf	___altoft@sign,c
  5389  002B0C  D007               	goto	l2990
  5390  002B0E                     l2988:
  5391  002B0E  90D8               	bcf	status,0,c
  5392  002B10  323A               	rrcf	___altoft@c+3,f,c
  5393  002B12  3239               	rrcf	___altoft@c+2,f,c
  5394  002B14  3238               	rrcf	___altoft@c+1,f,c
  5395  002B16  3237               	rrcf	___altoft@c,f,c
  5396  002B18  2A3F               	incf	___altoft@exp,f,c
  5397  002B1A  D000               	goto	l2990
  5398  002B1C                     l2990:
  5399  002B1C  0E00               	movlw	0
  5400  002B1E  1437               	andwf	___altoft@c,w,c
  5401  002B20  6E3B               	movwf	??___altoft& (0+255),c
  5402  002B22  0E00               	movlw	0
  5403  002B24  1438               	andwf	___altoft@c+1,w,c
  5404  002B26  6E3C               	movwf	(??___altoft+1)& (0+255),c
  5405  002B28  0E00               	movlw	0
  5406  002B2A  1439               	andwf	___altoft@c+2,w,c
  5407  002B2C  6E3D               	movwf	(??___altoft+2)& (0+255),c
  5408  002B2E  0EFF               	movlw	255
  5409  002B30  143A               	andwf	___altoft@c+3,w,c
  5410  002B32  6E3E               	movwf	(??___altoft+3)& (0+255),c
  5411  002B34  503B               	movf	??___altoft,w,c
  5412  002B36  103C               	iorwf	??___altoft+1,w,c
  5413  002B38  103D               	iorwf	??___altoft+2,w,c
  5414  002B3A  103E               	iorwf	??___altoft+3,w,c
  5415  002B3C  A4D8               	btfss	status,2,c
  5416  002B3E  D7E7               	goto	l2988
  5417  002B40  C037  F001         	movff	___altoft@c,___ftpack@arg
  5418  002B44  C038  F002         	movff	___altoft@c+1,___ftpack@arg+1
  5419  002B48  C039  F003         	movff	___altoft@c+2,___ftpack@arg+2
  5420  002B4C  C03F  F004         	movff	___altoft@exp,___ftpack@exp
  5421  002B50  C040  F005         	movff	___altoft@sign,___ftpack@sign
  5422  002B54  EC73  F013         	call	___ftpack	;wreg free
  5423  002B58  C001  F037         	movff	?___ftpack,?___altoft
  5424  002B5C  C002  F038         	movff	?___ftpack+1,?___altoft+1
  5425  002B60  C003  F039         	movff	?___ftpack+2,?___altoft+2
  5426  002B64  0012               	return	
  5427  002B66  0012               	return		;funcret
  5428  002B68                     __end_of___altoft:
  5429                           	opt stack 0
  5430                           tblptru	equ	0xFF8
  5431                           tblptrh	equ	0xFF7
  5432                           tblptrl	equ	0xFF6
  5433                           tablat	equ	0xFF5
  5434                           prodh	equ	0xFF4
  5435                           prodl	equ	0xFF3
  5436                           indf0	equ	0xFEF
  5437                           postinc0	equ	0xFEE
  5438                           fsr0h	equ	0xFEA
  5439                           fsr0l	equ	0xFE9
  5440                           wreg	equ	0xFE8
  5441                           postdec1	equ	0xFE5
  5442                           fsr1l	equ	0xFE1
  5443                           indf2	equ	0xFDF
  5444                           postinc2	equ	0xFDE
  5445                           postdec2	equ	0xFDD
  5446                           fsr2h	equ	0xFDA
  5447                           fsr2l	equ	0xFD9
  5448                           status	equ	0xFD8
  5449                           
  5450 ;; *************** function _eval_poly *****************
  5451 ;; Defined at:
  5452 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\evalpoly.c"
  5453 ;; Parameters:    Size  Location     Type
  5454 ;;  x               3   39[COMRAM] float 
  5455 ;;  d               2   42[COMRAM] PTR const 
  5456 ;;		 -> log@coeff(27), exp@coeff(30), 
  5457 ;;  n               2   44[COMRAM] int 
  5458 ;; Auto vars:     Size  Location     Type
  5459 ;;  res             3   48[COMRAM] int 
  5460 ;; Return value:  Size  Location     Type
  5461 ;;                  3   39[COMRAM] int 
  5462 ;; Registers used:
  5463 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5464 ;; Tracked objects:
  5465 ;;		On entry : 0/0
  5466 ;;		On exit  : 0/0
  5467 ;;		Unchanged: 0/0
  5468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5469 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5470 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5471 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5472 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5473 ;;Total ram usage:       12 bytes
  5474 ;; Hardware stack levels used:    1
  5475 ;; Hardware stack levels required when called:    2
  5476 ;; This function calls:
  5477 ;;		___ftadd
  5478 ;;		___ftmul
  5479 ;;		___wmul
  5480 ;; This function is called by:
  5481 ;;		_exp
  5482 ;;		_log
  5483 ;; This function uses a non-reentrant model
  5484 ;;
  5485                           
  5486                           	psect	text26
  5487  002612                     __ptext26:
  5488                           	opt stack 0
  5489  002612                     _eval_poly:
  5490                           	opt stack 24
  5491                           
  5492                           ;incstack = 0
  5493  002612  C02D  F001         	movff	eval_poly@n,___wmul@multiplier
  5494  002616  C02E  F002         	movff	eval_poly@n+1,___wmul@multiplier+1
  5495  00261A  0E00               	movlw	0
  5496  00261C  6E04               	movwf	___wmul@multiplicand+1,c
  5497  00261E  0E03               	movlw	3
  5498  002620  6E03               	movwf	___wmul@multiplicand,c
  5499  002622  EC0C  F018         	call	___wmul	;wreg free
  5500  002626  C02B  F02F         	movff	eval_poly@d,??_eval_poly
  5501  00262A  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
  5502  00262E  5001               	movf	?___wmul,w,c
  5503  002630  262F               	addwf	??_eval_poly,f,c
  5504  002632  5002               	movf	?___wmul+1,w,c
  5505  002634  2230               	addwfc	??_eval_poly+1,f,c
  5506  002636  C02F  FFF6         	movff	??_eval_poly,tblptrl
  5507  00263A  C030  FFF7         	movff	??_eval_poly+1,tblptrh
  5508  00263E                     	if	0	;tblptru may be non-zero
  5509  00263E                     	endif
  5510  00263E                     	if	0	;tblptru may be non-zero
  5511  00263E                     	endif
  5512  00263E  0009               	tblrd		*+
  5513  002640  CFF5 F031          	movff	tablat,eval_poly@res
  5514  002644  0009               	tblrd		*+
  5515  002646  CFF5 F032          	movff	tablat,eval_poly@res+1
  5516  00264A  000A               	tblrd		*-
  5517  00264C  CFF5 F033          	movff	tablat,eval_poly@res+2
  5518  002650  D03F               	goto	l3360
  5519  002652                     l3358:
  5520  002652  C031  F010         	movff	eval_poly@res,___ftmul@f2
  5521  002656  C032  F011         	movff	eval_poly@res+1,___ftmul@f2+1
  5522  00265A  C033  F012         	movff	eval_poly@res+2,___ftmul@f2+2
  5523  00265E  C028  F00D         	movff	eval_poly@x,___ftmul@f1
  5524  002662  C029  F00E         	movff	eval_poly@x+1,___ftmul@f1+1
  5525  002666  C02A  F00F         	movff	eval_poly@x+2,___ftmul@f1+2
  5526  00266A  ECC3  F010         	call	___ftmul	;wreg free
  5527  00266E  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  5528  002672  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  5529  002676  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  5530  00267A  0E00               	movlw	0
  5531  00267C  6E04               	movwf	___wmul@multiplicand+1,c
  5532  00267E  0E03               	movlw	3
  5533  002680  6E03               	movwf	___wmul@multiplicand,c
  5534  002682  062D               	decf	eval_poly@n,f,c
  5535  002684  A0D8               	btfss	status,0,c
  5536  002686  062E               	decf	eval_poly@n+1,f,c
  5537  002688  C02D  F001         	movff	eval_poly@n,___wmul@multiplier
  5538  00268C  C02E  F002         	movff	eval_poly@n+1,___wmul@multiplier+1
  5539  002690  EC0C  F018         	call	___wmul	;wreg free
  5540  002694  C02B  F02F         	movff	eval_poly@d,??_eval_poly
  5541  002698  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
  5542  00269C  5001               	movf	?___wmul,w,c
  5543  00269E  262F               	addwf	??_eval_poly,f,c
  5544  0026A0  5002               	movf	?___wmul+1,w,c
  5545  0026A2  2230               	addwfc	??_eval_poly+1,f,c
  5546  0026A4  C02F  FFF6         	movff	??_eval_poly,tblptrl
  5547  0026A8  C030  FFF7         	movff	??_eval_poly+1,tblptrh
  5548  0026AC                     	if	0	;tblptru may be non-zero
  5549  0026AC                     	endif
  5550  0026AC                     	if	0	;tblptru may be non-zero
  5551  0026AC                     	endif
  5552  0026AC  0009               	tblrd		*+
  5553  0026AE  CFF5 F01F          	movff	tablat,___ftadd@f2
  5554  0026B2  0009               	tblrd		*+
  5555  0026B4  CFF5 F020          	movff	tablat,___ftadd@f2+1
  5556  0026B8  000A               	tblrd		*-
  5557  0026BA  CFF5 F021          	movff	tablat,___ftadd@f2+2
  5558  0026BE  EC64  F00B         	call	___ftadd	;wreg free
  5559  0026C2  C01C  F031         	movff	?___ftadd,eval_poly@res
  5560  0026C6  C01D  F032         	movff	?___ftadd+1,eval_poly@res+1
  5561  0026CA  C01E  F033         	movff	?___ftadd+2,eval_poly@res+2
  5562  0026CE  D000               	goto	l3360
  5563  0026D0                     l3360:
  5564  0026D0  502D               	movf	eval_poly@n,w,c
  5565  0026D2  102E               	iorwf	eval_poly@n+1,w,c
  5566  0026D4  A4D8               	btfss	status,2,c
  5567  0026D6  D7BD               	goto	l3358
  5568  0026D8  C031  F028         	movff	eval_poly@res,?_eval_poly
  5569  0026DC  C032  F029         	movff	eval_poly@res+1,?_eval_poly+1
  5570  0026E0  C033  F02A         	movff	eval_poly@res+2,?_eval_poly+2
  5571  0026E4  0012               	return		;funcret
  5572  0026E6                     __end_of_eval_poly:
  5573                           	opt stack 0
  5574                           tblptru	equ	0xFF8
  5575                           tblptrh	equ	0xFF7
  5576                           tblptrl	equ	0xFF6
  5577                           tablat	equ	0xFF5
  5578                           prodh	equ	0xFF4
  5579                           prodl	equ	0xFF3
  5580                           indf0	equ	0xFEF
  5581                           postinc0	equ	0xFEE
  5582                           fsr0h	equ	0xFEA
  5583                           fsr0l	equ	0xFE9
  5584                           wreg	equ	0xFE8
  5585                           postdec1	equ	0xFE5
  5586                           fsr1l	equ	0xFE1
  5587                           indf2	equ	0xFDF
  5588                           postinc2	equ	0xFDE
  5589                           postdec2	equ	0xFDD
  5590                           fsr2h	equ	0xFDA
  5591                           fsr2l	equ	0xFD9
  5592                           status	equ	0xFD8
  5593                           
  5594 ;; *************** function ___wmul *****************
  5595 ;; Defined at:
  5596 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\Umul16.c"
  5597 ;; Parameters:    Size  Location     Type
  5598 ;;  multiplier      2    0[COMRAM] unsigned int 
  5599 ;;  multiplicand    2    2[COMRAM] unsigned int 
  5600 ;; Auto vars:     Size  Location     Type
  5601 ;;  product         2    4[COMRAM] unsigned int 
  5602 ;; Return value:  Size  Location     Type
  5603 ;;                  2    0[COMRAM] unsigned int 
  5604 ;; Registers used:
  5605 ;;		wreg, status,2, status,0, prodl, prodh
  5606 ;; Tracked objects:
  5607 ;;		On entry : 0/0
  5608 ;;		On exit  : 0/0
  5609 ;;		Unchanged: 0/0
  5610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5611 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5612 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5614 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5615 ;;Total ram usage:        6 bytes
  5616 ;; Hardware stack levels used:    1
  5617 ;; This function calls:
  5618 ;;		Nothing
  5619 ;; This function is called by:
  5620 ;;		_sprintf
  5621 ;;		_eval_poly
  5622 ;; This function uses a non-reentrant model
  5623 ;;
  5624                           
  5625                           	psect	text27
  5626  003018                     __ptext27:
  5627                           	opt stack 0
  5628  003018                     ___wmul:
  5629                           	opt stack 27
  5630                           
  5631                           ;incstack = 0
  5632  003018  5001               	movf	___wmul@multiplier,w,c
  5633  00301A  0203               	mulwf	___wmul@multiplicand,c
  5634  00301C  CFF3 F005          	movff	prodl,___wmul@product
  5635  003020  CFF4 F006          	movff	prodh,___wmul@product+1
  5636  003024  5001               	movf	___wmul@multiplier,w,c
  5637  003026  0204               	mulwf	___wmul@multiplicand+1,c
  5638  003028  50F3               	movf	prodl,w,c
  5639  00302A  2606               	addwf	___wmul@product+1,f,c
  5640  00302C  5002               	movf	___wmul@multiplier+1,w,c
  5641  00302E  0203               	mulwf	___wmul@multiplicand,c
  5642  003030  50F3               	movf	prodl,w,c
  5643  003032  2606               	addwf	___wmul@product+1,f,c
  5644  003034  C005  F001         	movff	___wmul@product,?___wmul
  5645  003038  C006  F002         	movff	___wmul@product+1,?___wmul+1
  5646  00303C  0012               	return	
  5647  00303E  0012               	return		;funcret
  5648  003040                     __end_of___wmul:
  5649                           	opt stack 0
  5650                           tblptru	equ	0xFF8
  5651                           tblptrh	equ	0xFF7
  5652                           tblptrl	equ	0xFF6
  5653                           tablat	equ	0xFF5
  5654                           prodh	equ	0xFF4
  5655                           prodl	equ	0xFF3
  5656                           indf0	equ	0xFEF
  5657                           postinc0	equ	0xFEE
  5658                           fsr0h	equ	0xFEA
  5659                           fsr0l	equ	0xFE9
  5660                           wreg	equ	0xFE8
  5661                           postdec1	equ	0xFE5
  5662                           fsr1l	equ	0xFE1
  5663                           indf2	equ	0xFDF
  5664                           postinc2	equ	0xFDE
  5665                           postdec2	equ	0xFDD
  5666                           fsr2h	equ	0xFDA
  5667                           fsr2l	equ	0xFD9
  5668                           status	equ	0xFD8
  5669                           
  5670 ;; *************** function ___ftmul *****************
  5671 ;; Defined at:
  5672 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\ftmul.c"
  5673 ;; Parameters:    Size  Location     Type
  5674 ;;  f1              3   12[COMRAM] float 
  5675 ;;  f2              3   15[COMRAM] float 
  5676 ;; Auto vars:     Size  Location     Type
  5677 ;;  f3_as_produc    3   22[COMRAM] unsigned um
  5678 ;;  sign            1   26[COMRAM] unsigned char 
  5679 ;;  cntr            1   25[COMRAM] unsigned char 
  5680 ;;  exp             1   21[COMRAM] unsigned char 
  5681 ;; Return value:  Size  Location     Type
  5682 ;;                  3   12[COMRAM] float 
  5683 ;; Registers used:
  5684 ;;		wreg, status,2, status,0, cstack
  5685 ;; Tracked objects:
  5686 ;;		On entry : 0/0
  5687 ;;		On exit  : 0/0
  5688 ;;		Unchanged: 0/0
  5689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5690 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5691 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5692 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5693 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5694 ;;Total ram usage:       15 bytes
  5695 ;; Hardware stack levels used:    1
  5696 ;; Hardware stack levels required when called:    1
  5697 ;; This function calls:
  5698 ;;		___ftpack
  5699 ;; This function is called by:
  5700 ;;		_obtain_pass
  5701 ;;		_pow
  5702 ;;		_exp
  5703 ;;		_log
  5704 ;;		_eval_poly
  5705 ;; This function uses a non-reentrant model
  5706 ;;
  5707                           
  5708                           	psect	text28
  5709  002186                     __ptext28:
  5710                           	opt stack 0
  5711  002186                     ___ftmul:
  5712                           	opt stack 24
  5713                           
  5714                           ;incstack = 0
  5715  002186  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
  5716  00218A  6A14               	clrf	(??___ftmul+1)& (0+255),c
  5717  00218C  6A15               	clrf	(??___ftmul+2)& (0+255),c
  5718  00218E  340E               	rlcf	___ftmul@f1+1,w,c
  5719  002190  3613               	rlcf	??___ftmul& (0+255),f,c
  5720  002192  E301               	bnc	u2601
  5721  002194  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  5722  002196                     u2601:
  5723  002196  5013               	movf	??___ftmul,w,c
  5724  002198  6E16               	movwf	___ftmul@exp,c
  5725  00219A  5016               	movf	___ftmul@exp,w,c
  5726  00219C  A4D8               	btfss	status,2,c
  5727  00219E  D007               	goto	l3072
  5728  0021A0  0E00               	movlw	0
  5729  0021A2  6E0D               	movwf	?___ftmul,c
  5730  0021A4  0E00               	movlw	0
  5731  0021A6  6E0E               	movwf	?___ftmul+1,c
  5732  0021A8  0E00               	movlw	0
  5733  0021AA  6E0F               	movwf	?___ftmul+2,c
  5734  0021AC  0012               	return	
  5735  0021AE                     l3072:
  5736  0021AE  C012  F013         	movff	___ftmul@f2+2,??___ftmul
  5737  0021B2  6A14               	clrf	(??___ftmul+1)& (0+255),c
  5738  0021B4  6A15               	clrf	(??___ftmul+2)& (0+255),c
  5739  0021B6  3411               	rlcf	___ftmul@f2+1,w,c
  5740  0021B8  3613               	rlcf	??___ftmul& (0+255),f,c
  5741  0021BA  E301               	bnc	u2621
  5742  0021BC  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  5743  0021BE                     u2621:
  5744  0021BE  5013               	movf	??___ftmul,w,c
  5745  0021C0  6E1B               	movwf	___ftmul@sign,c
  5746  0021C2  501B               	movf	___ftmul@sign,w,c
  5747  0021C4  A4D8               	btfss	status,2,c
  5748  0021C6  D007               	goto	l3078
  5749  0021C8  0E00               	movlw	0
  5750  0021CA  6E0D               	movwf	?___ftmul,c
  5751  0021CC  0E00               	movlw	0
  5752  0021CE  6E0E               	movwf	?___ftmul+1,c
  5753  0021D0  0E00               	movlw	0
  5754  0021D2  6E0F               	movwf	?___ftmul+2,c
  5755  0021D4  0012               	return	
  5756  0021D6                     l3078:
  5757  0021D6  501B               	movf	___ftmul@sign,w,c
  5758  0021D8  0F7B               	addlw	123
  5759  0021DA  2616               	addwf	___ftmul@exp,f,c
  5760  0021DC  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
  5761  0021E0  5012               	movf	___ftmul@f2+2,w,c
  5762  0021E2  1A1B               	xorwf	___ftmul@sign,f,c
  5763  0021E4  0E80               	movlw	128
  5764  0021E6  161B               	andwf	___ftmul@sign,f,c
  5765  0021E8  8E0E               	bsf	___ftmul@f1+1,7,c
  5766  0021EA  8E11               	bsf	___ftmul@f2+1,7,c
  5767  0021EC  0EFF               	movlw	255
  5768  0021EE  1610               	andwf	___ftmul@f2,f,c
  5769  0021F0  0EFF               	movlw	255
  5770  0021F2  1611               	andwf	___ftmul@f2+1,f,c
  5771  0021F4  0E00               	movlw	0
  5772  0021F6  1612               	andwf	___ftmul@f2+2,f,c
  5773  0021F8  0E00               	movlw	0
  5774  0021FA  6E17               	movwf	___ftmul@f3_as_product,c
  5775  0021FC  0E00               	movlw	0
  5776  0021FE  6E18               	movwf	___ftmul@f3_as_product+1,c
  5777  002200  0E00               	movlw	0
  5778  002202  6E19               	movwf	___ftmul@f3_as_product+2,c
  5779  002204  0E07               	movlw	7
  5780  002206  6E1A               	movwf	___ftmul@cntr,c
  5781  002208  D000               	goto	l3092
  5782  00220A                     l3092:
  5783  00220A  A00D               	btfss	___ftmul@f1,0,c
  5784  00220C  D007               	goto	l3096
  5785  00220E  5010               	movf	___ftmul@f2,w,c
  5786  002210  2617               	addwf	___ftmul@f3_as_product,f,c
  5787  002212  5011               	movf	___ftmul@f2+1,w,c
  5788  002214  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  5789  002216  5012               	movf	___ftmul@f2+2,w,c
  5790  002218  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  5791  00221A  D000               	goto	l3096
  5792  00221C                     l3096:
  5793  00221C  90D8               	bcf	status,0,c
  5794  00221E  320F               	rrcf	___ftmul@f1+2,f,c
  5795  002220  320E               	rrcf	___ftmul@f1+1,f,c
  5796  002222  320D               	rrcf	___ftmul@f1,f,c
  5797  002224  90D8               	bcf	status,0,c
  5798  002226  3610               	rlcf	___ftmul@f2,f,c
  5799  002228  3611               	rlcf	___ftmul@f2+1,f,c
  5800  00222A  3612               	rlcf	___ftmul@f2+2,f,c
  5801  00222C  2E1A               	decfsz	___ftmul@cntr,f,c
  5802  00222E  D7ED               	goto	l3092
  5803  002230  D000               	goto	l3100
  5804  002232                     l3100:
  5805  002232  0E09               	movlw	9
  5806  002234  6E1A               	movwf	___ftmul@cntr,c
  5807  002236  D000               	goto	l3102
  5808  002238                     l3102:
  5809  002238  A00D               	btfss	___ftmul@f1,0,c
  5810  00223A  D007               	goto	l3106
  5811  00223C  5010               	movf	___ftmul@f2,w,c
  5812  00223E  2617               	addwf	___ftmul@f3_as_product,f,c
  5813  002240  5011               	movf	___ftmul@f2+1,w,c
  5814  002242  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  5815  002244  5012               	movf	___ftmul@f2+2,w,c
  5816  002246  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  5817  002248  D000               	goto	l3106
  5818  00224A                     l3106:
  5819  00224A  90D8               	bcf	status,0,c
  5820  00224C  320F               	rrcf	___ftmul@f1+2,f,c
  5821  00224E  320E               	rrcf	___ftmul@f1+1,f,c
  5822  002250  320D               	rrcf	___ftmul@f1,f,c
  5823  002252  90D8               	bcf	status,0,c
  5824  002254  3219               	rrcf	___ftmul@f3_as_product+2,f,c
  5825  002256  3218               	rrcf	___ftmul@f3_as_product+1,f,c
  5826  002258  3217               	rrcf	___ftmul@f3_as_product,f,c
  5827  00225A  2E1A               	decfsz	___ftmul@cntr,f,c
  5828  00225C  D7ED               	goto	l3102
  5829  00225E  D000               	goto	l3110
  5830  002260                     l3110:
  5831  002260  C017  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  5832  002264  C018  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5833  002268  C019  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5834  00226C  C016  F004         	movff	___ftmul@exp,___ftpack@exp
  5835  002270  C01B  F005         	movff	___ftmul@sign,___ftpack@sign
  5836  002274  EC73  F013         	call	___ftpack	;wreg free
  5837  002278  C001  F00D         	movff	?___ftpack,?___ftmul
  5838  00227C  C002  F00E         	movff	?___ftpack+1,?___ftmul+1
  5839  002280  C003  F00F         	movff	?___ftpack+2,?___ftmul+2
  5840  002284  0012               	return	
  5841  002286  0012               	return		;funcret
  5842  002288                     __end_of___ftmul:
  5843                           	opt stack 0
  5844                           tblptru	equ	0xFF8
  5845                           tblptrh	equ	0xFF7
  5846                           tblptrl	equ	0xFF6
  5847                           tablat	equ	0xFF5
  5848                           prodh	equ	0xFF4
  5849                           prodl	equ	0xFF3
  5850                           indf0	equ	0xFEF
  5851                           postinc0	equ	0xFEE
  5852                           fsr0h	equ	0xFEA
  5853                           fsr0l	equ	0xFE9
  5854                           wreg	equ	0xFE8
  5855                           postdec1	equ	0xFE5
  5856                           fsr1l	equ	0xFE1
  5857                           indf2	equ	0xFDF
  5858                           postinc2	equ	0xFDE
  5859                           postdec2	equ	0xFDD
  5860                           fsr2h	equ	0xFDA
  5861                           fsr2l	equ	0xFD9
  5862                           status	equ	0xFD8
  5863                           
  5864 ;; *************** function ___ftsub *****************
  5865 ;; Defined at:
  5866 ;;		line 20 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\ftsub.c"
  5867 ;; Parameters:    Size  Location     Type
  5868 ;;  f1              3   39[COMRAM] float 
  5869 ;;  f2              3   42[COMRAM] float 
  5870 ;; Auto vars:     Size  Location     Type
  5871 ;;		None
  5872 ;; Return value:  Size  Location     Type
  5873 ;;                  3   39[COMRAM] float 
  5874 ;; Registers used:
  5875 ;;		wreg, status,2, status,0, cstack
  5876 ;; Tracked objects:
  5877 ;;		On entry : 0/0
  5878 ;;		On exit  : 0/0
  5879 ;;		Unchanged: 0/0
  5880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5881 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5884 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5885 ;;Total ram usage:        6 bytes
  5886 ;; Hardware stack levels used:    1
  5887 ;; Hardware stack levels required when called:    2
  5888 ;; This function calls:
  5889 ;;		___ftadd
  5890 ;; This function is called by:
  5891 ;;		_exp
  5892 ;; This function uses a non-reentrant model
  5893 ;;
  5894                           
  5895                           	psect	text29
  5896  002ED0                     __ptext29:
  5897                           	opt stack 0
  5898  002ED0                     ___ftsub:
  5899                           	opt stack 24
  5900                           
  5901                           ;incstack = 0
  5902  002ED0  502B               	movf	___ftsub@f2,w,c
  5903  002ED2  102C               	iorwf	___ftsub@f2+1,w,c
  5904  002ED4  102D               	iorwf	___ftsub@f2+2,w,c
  5905  002ED6  B4D8               	btfsc	status,2,c
  5906  002ED8  D007               	goto	l3274
  5907  002EDA  0E00               	movlw	0
  5908  002EDC  1A2B               	xorwf	___ftsub@f2,f,c
  5909  002EDE  0E00               	movlw	0
  5910  002EE0  1A2C               	xorwf	___ftsub@f2+1,f,c
  5911  002EE2  0E80               	movlw	128
  5912  002EE4  1A2D               	xorwf	___ftsub@f2+2,f,c
  5913  002EE6  D000               	goto	l3274
  5914  002EE8                     l3274:
  5915  002EE8  C028  F01C         	movff	___ftsub@f1,___ftadd@f1
  5916  002EEC  C029  F01D         	movff	___ftsub@f1+1,___ftadd@f1+1
  5917  002EF0  C02A  F01E         	movff	___ftsub@f1+2,___ftadd@f1+2
  5918  002EF4  C02B  F01F         	movff	___ftsub@f2,___ftadd@f2
  5919  002EF8  C02C  F020         	movff	___ftsub@f2+1,___ftadd@f2+1
  5920  002EFC  C02D  F021         	movff	___ftsub@f2+2,___ftadd@f2+2
  5921  002F00  EC64  F00B         	call	___ftadd	;wreg free
  5922  002F04  C01C  F028         	movff	?___ftadd,?___ftsub
  5923  002F08  C01D  F029         	movff	?___ftadd+1,?___ftsub+1
  5924  002F0C  C01E  F02A         	movff	?___ftadd+2,?___ftsub+2
  5925  002F10  0012               	return	
  5926  002F12  0012               	return		;funcret
  5927  002F14                     __end_of___ftsub:
  5928                           	opt stack 0
  5929                           tblptru	equ	0xFF8
  5930                           tblptrh	equ	0xFF7
  5931                           tblptrl	equ	0xFF6
  5932                           tablat	equ	0xFF5
  5933                           prodh	equ	0xFF4
  5934                           prodl	equ	0xFF3
  5935                           indf0	equ	0xFEF
  5936                           postinc0	equ	0xFEE
  5937                           fsr0h	equ	0xFEA
  5938                           fsr0l	equ	0xFE9
  5939                           wreg	equ	0xFE8
  5940                           postdec1	equ	0xFE5
  5941                           fsr1l	equ	0xFE1
  5942                           indf2	equ	0xFDF
  5943                           postinc2	equ	0xFDE
  5944                           postdec2	equ	0xFDD
  5945                           fsr2h	equ	0xFDA
  5946                           fsr2l	equ	0xFD9
  5947                           status	equ	0xFD8
  5948                           
  5949 ;; *************** function ___ftadd *****************
  5950 ;; Defined at:
  5951 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\ftadd.c"
  5952 ;; Parameters:    Size  Location     Type
  5953 ;;  f1              3   27[COMRAM] float 
  5954 ;;  f2              3   30[COMRAM] float 
  5955 ;; Auto vars:     Size  Location     Type
  5956 ;;  exp1            1   38[COMRAM] unsigned char 
  5957 ;;  exp2            1   37[COMRAM] unsigned char 
  5958 ;;  sign            1   36[COMRAM] unsigned char 
  5959 ;; Return value:  Size  Location     Type
  5960 ;;                  3   27[COMRAM] float 
  5961 ;; Registers used:
  5962 ;;		wreg, status,2, status,0, cstack
  5963 ;; Tracked objects:
  5964 ;;		On entry : 0/0
  5965 ;;		On exit  : 0/0
  5966 ;;		Unchanged: 0/0
  5967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5968 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5969 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5970 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5971 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5972 ;;Total ram usage:       12 bytes
  5973 ;; Hardware stack levels used:    1
  5974 ;; Hardware stack levels required when called:    1
  5975 ;; This function calls:
  5976 ;;		___ftpack
  5977 ;; This function is called by:
  5978 ;;		_obtain_pass
  5979 ;;		___ftsub
  5980 ;;		_floor
  5981 ;;		_log
  5982 ;;		_eval_poly
  5983 ;; This function uses a non-reentrant model
  5984 ;;
  5985                           
  5986                           	psect	text30
  5987  0016C8                     __ptext30:
  5988                           	opt stack 0
  5989  0016C8                     ___ftadd:
  5990                           	opt stack 24
  5991                           
  5992                           ;incstack = 0
  5993  0016C8  C01E  F022         	movff	___ftadd@f1+2,??___ftadd
  5994  0016CC  6A23               	clrf	(??___ftadd+1)& (0+255),c
  5995  0016CE  6A24               	clrf	(??___ftadd+2)& (0+255),c
  5996  0016D0  341D               	rlcf	___ftadd@f1+1,w,c
  5997  0016D2  3622               	rlcf	??___ftadd& (0+255),f,c
  5998  0016D4  E301               	bnc	u2391
  5999  0016D6  8023               	bsf	(??___ftadd+1)& (0+255),0,c
  6000  0016D8                     u2391:
  6001  0016D8  5022               	movf	??___ftadd,w,c
  6002  0016DA  6E27               	movwf	___ftadd@exp1,c
  6003  0016DC  C021  F022         	movff	___ftadd@f2+2,??___ftadd
  6004  0016E0  6A23               	clrf	(??___ftadd+1)& (0+255),c
  6005  0016E2  6A24               	clrf	(??___ftadd+2)& (0+255),c
  6006  0016E4  3420               	rlcf	___ftadd@f2+1,w,c
  6007  0016E6  3622               	rlcf	??___ftadd& (0+255),f,c
  6008  0016E8  E301               	bnc	u2401
  6009  0016EA  8023               	bsf	(??___ftadd+1)& (0+255),0,c
  6010  0016EC                     u2401:
  6011  0016EC  5022               	movf	??___ftadd,w,c
  6012  0016EE  6E26               	movwf	___ftadd@exp2,c
  6013  0016F0  5027               	movf	___ftadd@exp1,w,c
  6014  0016F2  B4D8               	btfsc	status,2,c
  6015  0016F4  D00B               	goto	l1145
  6016  0016F6  5026               	movf	___ftadd@exp2,w,c
  6017  0016F8  5C27               	subwf	___ftadd@exp1,w,c
  6018  0016FA  B0D8               	btfsc	status,0,c
  6019  0016FC  D00E               	goto	l3004
  6020  0016FE  5027               	movf	___ftadd@exp1,w,c
  6021  001700  0800               	sublw	0
  6022  001702  2426               	addwf	___ftadd@exp2,w,c
  6023  001704  6E22               	movwf	??___ftadd& (0+255),c
  6024  001706  0E18               	movlw	24
  6025  001708  6422               	cpfsgt	??___ftadd,c
  6026  00170A  D007               	goto	l3004
  6027  00170C                     l1145:
  6028  00170C  C01F  F01C         	movff	___ftadd@f2,?___ftadd
  6029  001710  C020  F01D         	movff	___ftadd@f2+1,?___ftadd+1
  6030  001714  C021  F01E         	movff	___ftadd@f2+2,?___ftadd+2
  6031  001718  0012               	return	
  6032  00171A                     l3004:
  6033  00171A  5026               	movf	___ftadd@exp2,w,c
  6034  00171C  B4D8               	btfsc	status,2,c
  6035  00171E  D00B               	goto	l1149
  6036  001720  5027               	movf	___ftadd@exp1,w,c
  6037  001722  5C26               	subwf	___ftadd@exp2,w,c
  6038  001724  B0D8               	btfsc	status,0,c
  6039  001726  D00E               	goto	l3010
  6040  001728  5026               	movf	___ftadd@exp2,w,c
  6041  00172A  0800               	sublw	0
  6042  00172C  2427               	addwf	___ftadd@exp1,w,c
  6043  00172E  6E22               	movwf	??___ftadd& (0+255),c
  6044  001730  0E18               	movlw	24
  6045  001732  6422               	cpfsgt	??___ftadd,c
  6046  001734  D007               	goto	l3010
  6047  001736                     l1149:
  6048  001736  C01C  F01C         	movff	___ftadd@f1,?___ftadd
  6049  00173A  C01D  F01D         	movff	___ftadd@f1+1,?___ftadd+1
  6050  00173E  C01E  F01E         	movff	___ftadd@f1+2,?___ftadd+2
  6051  001742  0012               	return	
  6052  001744                     l3010:
  6053  001744  0E06               	movlw	6
  6054  001746  6E25               	movwf	___ftadd@sign,c
  6055  001748  AE1E               	btfss	___ftadd@f1+2,7,c
  6056  00174A  D002               	goto	l3016
  6057  00174C  8E25               	bsf	___ftadd@sign,7,c
  6058  00174E  D000               	goto	l3016
  6059  001750                     l3016:
  6060  001750  BE21               	btfsc	___ftadd@f2+2,7,c
  6061  001752  8C25               	bsf	___ftadd@sign,6,c
  6062  001754  8E1D               	bsf	___ftadd@f1+1,7,c
  6063  001756  0EFF               	movlw	255
  6064  001758  161C               	andwf	___ftadd@f1,f,c
  6065  00175A  0EFF               	movlw	255
  6066  00175C  161D               	andwf	___ftadd@f1+1,f,c
  6067  00175E  0E00               	movlw	0
  6068  001760  161E               	andwf	___ftadd@f1+2,f,c
  6069  001762  8E20               	bsf	___ftadd@f2+1,7,c
  6070  001764  0EFF               	movlw	255
  6071  001766  161F               	andwf	___ftadd@f2,f,c
  6072  001768  0EFF               	movlw	255
  6073  00176A  1620               	andwf	___ftadd@f2+1,f,c
  6074  00176C  0E00               	movlw	0
  6075  00176E  1621               	andwf	___ftadd@f2+2,f,c
  6076  001770  5026               	movf	___ftadd@exp2,w,c
  6077  001772  5C27               	subwf	___ftadd@exp1,w,c
  6078  001774  B0D8               	btfsc	status,0,c
  6079  001776  D01E               	goto	l3036
  6080  001778                     l3026:
  6081  001778  90D8               	bcf	status,0,c
  6082  00177A  361F               	rlcf	___ftadd@f2,f,c
  6083  00177C  3620               	rlcf	___ftadd@f2+1,f,c
  6084  00177E  3621               	rlcf	___ftadd@f2+2,f,c
  6085  001780  0626               	decf	___ftadd@exp2,f,c
  6086  001782  5027               	movf	___ftadd@exp1,w,c
  6087  001784  1826               	xorwf	___ftadd@exp2,w,c
  6088  001786  B4D8               	btfsc	status,2,c
  6089  001788  D00F               	goto	l3034
  6090  00178A  0625               	decf	___ftadd@sign,f,c
  6091  00178C  C025  F022         	movff	___ftadd@sign,??___ftadd
  6092  001790  0E07               	movlw	7
  6093  001792  1622               	andwf	??___ftadd,f,c
  6094  001794  B4D8               	btfsc	status,2,c
  6095  001796  D008               	goto	l3034
  6096  001798  D7EF               	goto	l3026
  6097  00179A  D006               	goto	l3034
  6098  00179C                     l3032:
  6099  00179C  90D8               	bcf	status,0,c
  6100  00179E  321E               	rrcf	___ftadd@f1+2,f,c
  6101  0017A0  321D               	rrcf	___ftadd@f1+1,f,c
  6102  0017A2  321C               	rrcf	___ftadd@f1,f,c
  6103  0017A4  2A27               	incf	___ftadd@exp1,f,c
  6104  0017A6  D000               	goto	l3034
  6105  0017A8                     l3034:
  6106  0017A8  5026               	movf	___ftadd@exp2,w,c
  6107  0017AA  1827               	xorwf	___ftadd@exp1,w,c
  6108  0017AC  B4D8               	btfsc	status,2,c
  6109  0017AE  D024               	goto	l1160
  6110  0017B0  D7F5               	goto	l3032
  6111  0017B2  D022               	goto	l1160
  6112  0017B4                     l3036:
  6113  0017B4  5027               	movf	___ftadd@exp1,w,c
  6114  0017B6  5C26               	subwf	___ftadd@exp2,w,c
  6115  0017B8  B0D8               	btfsc	status,0,c
  6116  0017BA  D01E               	goto	l1160
  6117  0017BC                     l3038:
  6118  0017BC  90D8               	bcf	status,0,c
  6119  0017BE  361C               	rlcf	___ftadd@f1,f,c
  6120  0017C0  361D               	rlcf	___ftadd@f1+1,f,c
  6121  0017C2  361E               	rlcf	___ftadd@f1+2,f,c
  6122  0017C4  0627               	decf	___ftadd@exp1,f,c
  6123  0017C6  5027               	movf	___ftadd@exp1,w,c
  6124  0017C8  1826               	xorwf	___ftadd@exp2,w,c
  6125  0017CA  B4D8               	btfsc	status,2,c
  6126  0017CC  D00F               	goto	l3046
  6127  0017CE  0625               	decf	___ftadd@sign,f,c
  6128  0017D0  C025  F022         	movff	___ftadd@sign,??___ftadd
  6129  0017D4  0E07               	movlw	7
  6130  0017D6  1622               	andwf	??___ftadd,f,c
  6131  0017D8  B4D8               	btfsc	status,2,c
  6132  0017DA  D008               	goto	l3046
  6133  0017DC  D7EF               	goto	l3038
  6134  0017DE  D006               	goto	l3046
  6135  0017E0                     l3044:
  6136  0017E0  90D8               	bcf	status,0,c
  6137  0017E2  3221               	rrcf	___ftadd@f2+2,f,c
  6138  0017E4  3220               	rrcf	___ftadd@f2+1,f,c
  6139  0017E6  321F               	rrcf	___ftadd@f2,f,c
  6140  0017E8  2A26               	incf	___ftadd@exp2,f,c
  6141  0017EA  D000               	goto	l3046
  6142  0017EC                     l3046:
  6143  0017EC  5026               	movf	___ftadd@exp2,w,c
  6144  0017EE  1827               	xorwf	___ftadd@exp1,w,c
  6145  0017F0  B4D8               	btfsc	status,2,c
  6146  0017F2  D002               	goto	l1160
  6147  0017F4  D7F5               	goto	l3044
  6148  0017F6  D000               	goto	l1160
  6149  0017F8                     l1160:
  6150  0017F8  AE25               	btfss	___ftadd@sign,7,c
  6151  0017FA  D00C               	goto	l1169
  6152  0017FC  0EFF               	movlw	255
  6153  0017FE  1A1C               	xorwf	___ftadd@f1,f,c
  6154  001800  0EFF               	movlw	255
  6155  001802  1A1D               	xorwf	___ftadd@f1+1,f,c
  6156  001804  0EFF               	movlw	255
  6157  001806  1A1E               	xorwf	___ftadd@f1+2,f,c
  6158  001808  0E01               	movlw	1
  6159  00180A  261C               	addwf	___ftadd@f1,f,c
  6160  00180C  0E00               	movlw	0
  6161  00180E  221D               	addwfc	___ftadd@f1+1,f,c
  6162  001810  0E00               	movlw	0
  6163  001812  221E               	addwfc	___ftadd@f1+2,f,c
  6164  001814                     l1169:
  6165  001814  AC25               	btfss	___ftadd@sign,6,c
  6166  001816  D00D               	goto	l3052
  6167  001818  0EFF               	movlw	255
  6168  00181A  1A1F               	xorwf	___ftadd@f2,f,c
  6169  00181C  0EFF               	movlw	255
  6170  00181E  1A20               	xorwf	___ftadd@f2+1,f,c
  6171  001820  0EFF               	movlw	255
  6172  001822  1A21               	xorwf	___ftadd@f2+2,f,c
  6173  001824  0E01               	movlw	1
  6174  001826  261F               	addwf	___ftadd@f2,f,c
  6175  001828  0E00               	movlw	0
  6176  00182A  2220               	addwfc	___ftadd@f2+1,f,c
  6177  00182C  0E00               	movlw	0
  6178  00182E  2221               	addwfc	___ftadd@f2+2,f,c
  6179  001830  D000               	goto	l3052
  6180  001832                     l3052:
  6181  001832  0E00               	movlw	0
  6182  001834  6E25               	movwf	___ftadd@sign,c
  6183  001836  501C               	movf	___ftadd@f1,w,c
  6184  001838  261F               	addwf	___ftadd@f2,f,c
  6185  00183A  501D               	movf	___ftadd@f1+1,w,c
  6186  00183C  2220               	addwfc	___ftadd@f2+1,f,c
  6187  00183E  501E               	movf	___ftadd@f1+2,w,c
  6188  001840  2221               	addwfc	___ftadd@f2+2,f,c
  6189  001842  AE21               	btfss	___ftadd@f2+2,7,c
  6190  001844  D00F               	goto	l3062
  6191  001846  0EFF               	movlw	255
  6192  001848  1A1F               	xorwf	___ftadd@f2,f,c
  6193  00184A  0EFF               	movlw	255
  6194  00184C  1A20               	xorwf	___ftadd@f2+1,f,c
  6195  00184E  0EFF               	movlw	255
  6196  001850  1A21               	xorwf	___ftadd@f2+2,f,c
  6197  001852  0E01               	movlw	1
  6198  001854  261F               	addwf	___ftadd@f2,f,c
  6199  001856  0E00               	movlw	0
  6200  001858  2220               	addwfc	___ftadd@f2+1,f,c
  6201  00185A  0E00               	movlw	0
  6202  00185C  2221               	addwfc	___ftadd@f2+2,f,c
  6203  00185E  0E01               	movlw	1
  6204  001860  6E25               	movwf	___ftadd@sign,c
  6205  001862  D000               	goto	l3062
  6206  001864                     l3062:
  6207  001864  C01F  F001         	movff	___ftadd@f2,___ftpack@arg
  6208  001868  C020  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  6209  00186C  C021  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  6210  001870  C027  F004         	movff	___ftadd@exp1,___ftpack@exp
  6211  001874  C025  F005         	movff	___ftadd@sign,___ftpack@sign
  6212  001878  EC73  F013         	call	___ftpack	;wreg free
  6213  00187C  C001  F01C         	movff	?___ftpack,?___ftadd
  6214  001880  C002  F01D         	movff	?___ftpack+1,?___ftadd+1
  6215  001884  C003  F01E         	movff	?___ftpack+2,?___ftadd+2
  6216  001888  0012               	return	
  6217  00188A  0012               	return		;funcret
  6218  00188C                     __end_of___ftadd:
  6219                           	opt stack 0
  6220                           tblptru	equ	0xFF8
  6221                           tblptrh	equ	0xFF7
  6222                           tblptrl	equ	0xFF6
  6223                           tablat	equ	0xFF5
  6224                           prodh	equ	0xFF4
  6225                           prodl	equ	0xFF3
  6226                           indf0	equ	0xFEF
  6227                           postinc0	equ	0xFEE
  6228                           fsr0h	equ	0xFEA
  6229                           fsr0l	equ	0xFE9
  6230                           wreg	equ	0xFE8
  6231                           postdec1	equ	0xFE5
  6232                           fsr1l	equ	0xFE1
  6233                           indf2	equ	0xFDF
  6234                           postinc2	equ	0xFDE
  6235                           postdec2	equ	0xFDD
  6236                           fsr2h	equ	0xFDA
  6237                           fsr2l	equ	0xFD9
  6238                           status	equ	0xFD8
  6239                           
  6240 ;; *************** function ___ftneg *****************
  6241 ;; Defined at:
  6242 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\ftneg.c"
  6243 ;; Parameters:    Size  Location     Type
  6244 ;;  f1              3    0[COMRAM] float 
  6245 ;; Auto vars:     Size  Location     Type
  6246 ;;		None
  6247 ;; Return value:  Size  Location     Type
  6248 ;;                  3    0[COMRAM] float 
  6249 ;; Registers used:
  6250 ;;		wreg, status,2, status,0
  6251 ;; Tracked objects:
  6252 ;;		On entry : 0/0
  6253 ;;		On exit  : 0/0
  6254 ;;		Unchanged: 0/0
  6255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6256 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6259 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6260 ;;Total ram usage:        3 bytes
  6261 ;; Hardware stack levels used:    1
  6262 ;; This function calls:
  6263 ;;		Nothing
  6264 ;; This function is called by:
  6265 ;;		_pow
  6266 ;;		_exp
  6267 ;; This function uses a non-reentrant model
  6268 ;;
  6269                           
  6270                           	psect	text31
  6271  00308C                     __ptext31:
  6272                           	opt stack 0
  6273  00308C                     ___ftneg:
  6274                           	opt stack 26
  6275                           
  6276                           ;incstack = 0
  6277  00308C  5001               	movf	___ftneg@f1,w,c
  6278  00308E  1002               	iorwf	___ftneg@f1+1,w,c
  6279  003090  1003               	iorwf	___ftneg@f1+2,w,c
  6280  003092  B4D8               	btfsc	status,2,c
  6281  003094  D006               	goto	l1202
  6282  003096  0E00               	movlw	0
  6283  003098  1A01               	xorwf	___ftneg@f1,f,c
  6284  00309A  0E00               	movlw	0
  6285  00309C  1A02               	xorwf	___ftneg@f1+1,f,c
  6286  00309E  0E80               	movlw	128
  6287  0030A0  1A03               	xorwf	___ftneg@f1+2,f,c
  6288  0030A2                     l1202:
  6289  0030A2  C001  F001         	movff	___ftneg@f1,?___ftneg
  6290  0030A6  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  6291  0030AA  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  6292  0030AE  0012               	return		;funcret
  6293  0030B0                     __end_of___ftneg:
  6294                           	opt stack 0
  6295                           tblptru	equ	0xFF8
  6296                           tblptrh	equ	0xFF7
  6297                           tblptrl	equ	0xFF6
  6298                           tablat	equ	0xFF5
  6299                           prodh	equ	0xFF4
  6300                           prodl	equ	0xFF3
  6301                           indf0	equ	0xFEF
  6302                           postinc0	equ	0xFEE
  6303                           fsr0h	equ	0xFEA
  6304                           fsr0l	equ	0xFE9
  6305                           wreg	equ	0xFE8
  6306                           postdec1	equ	0xFE5
  6307                           fsr1l	equ	0xFE1
  6308                           indf2	equ	0xFDF
  6309                           postinc2	equ	0xFDE
  6310                           postdec2	equ	0xFDD
  6311                           fsr2h	equ	0xFDA
  6312                           fsr2l	equ	0xFD9
  6313                           status	equ	0xFD8
  6314                           
  6315 ;; *************** function ___ftdiv *****************
  6316 ;; Defined at:
  6317 ;;		line 54 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  6318 ;; Parameters:    Size  Location     Type
  6319 ;;  f1              3    8[COMRAM] float 
  6320 ;;  f2              3   11[COMRAM] float 
  6321 ;; Auto vars:     Size  Location     Type
  6322 ;;  f3              3   18[COMRAM] float 
  6323 ;;  sign            1   22[COMRAM] unsigned char 
  6324 ;;  exp             1   21[COMRAM] unsigned char 
  6325 ;;  cntr            1   17[COMRAM] unsigned char 
  6326 ;; Return value:  Size  Location     Type
  6327 ;;                  3    8[COMRAM] float 
  6328 ;; Registers used:
  6329 ;;		wreg, status,2, status,0, cstack
  6330 ;; Tracked objects:
  6331 ;;		On entry : 0/0
  6332 ;;		On exit  : 0/0
  6333 ;;		Unchanged: 0/0
  6334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6335 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6336 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6337 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6338 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6339 ;;Total ram usage:       15 bytes
  6340 ;; Hardware stack levels used:    1
  6341 ;; Hardware stack levels required when called:    1
  6342 ;; This function calls:
  6343 ;;		___ftpack
  6344 ;; This function is called by:
  6345 ;;		_exp
  6346 ;; This function uses a non-reentrant model
  6347 ;;
  6348                           
  6349                           	psect	text32
  6350  002374                     __ptext32:
  6351                           	opt stack 0
  6352  002374                     ___ftdiv:
  6353                           	opt stack 25
  6354                           
  6355                           ;incstack = 0
  6356  002374  C00B  F00F         	movff	___ftdiv@f1+2,??___ftdiv
  6357  002378  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  6358  00237A  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  6359  00237C  340A               	rlcf	___ftdiv@f1+1,w,c
  6360  00237E  360F               	rlcf	??___ftdiv& (0+255),f,c
  6361  002380  E301               	bnc	u2811
  6362  002382  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  6363  002384                     u2811:
  6364  002384  500F               	movf	??___ftdiv,w,c
  6365  002386  6E16               	movwf	___ftdiv@exp,c
  6366  002388  5016               	movf	___ftdiv@exp,w,c
  6367  00238A  A4D8               	btfss	status,2,c
  6368  00238C  D007               	goto	l3230
  6369  00238E  0E00               	movlw	0
  6370  002390  6E09               	movwf	?___ftdiv,c
  6371  002392  0E00               	movlw	0
  6372  002394  6E0A               	movwf	?___ftdiv+1,c
  6373  002396  0E00               	movlw	0
  6374  002398  6E0B               	movwf	?___ftdiv+2,c
  6375  00239A  0012               	return	
  6376  00239C                     l3230:
  6377  00239C  C00E  F00F         	movff	___ftdiv@f2+2,??___ftdiv
  6378  0023A0  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  6379  0023A2  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  6380  0023A4  340D               	rlcf	___ftdiv@f2+1,w,c
  6381  0023A6  360F               	rlcf	??___ftdiv& (0+255),f,c
  6382  0023A8  E301               	bnc	u2831
  6383  0023AA  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  6384  0023AC                     u2831:
  6385  0023AC  500F               	movf	??___ftdiv,w,c
  6386  0023AE  6E17               	movwf	___ftdiv@sign,c
  6387  0023B0  5017               	movf	___ftdiv@sign,w,c
  6388  0023B2  A4D8               	btfss	status,2,c
  6389  0023B4  D007               	goto	l3236
  6390  0023B6  0E00               	movlw	0
  6391  0023B8  6E09               	movwf	?___ftdiv,c
  6392  0023BA  0E00               	movlw	0
  6393  0023BC  6E0A               	movwf	?___ftdiv+1,c
  6394  0023BE  0E00               	movlw	0
  6395  0023C0  6E0B               	movwf	?___ftdiv+2,c
  6396  0023C2  0012               	return	
  6397  0023C4                     l3236:
  6398  0023C4  0E00               	movlw	0
  6399  0023C6  6E13               	movwf	___ftdiv@f3,c
  6400  0023C8  0E00               	movlw	0
  6401  0023CA  6E14               	movwf	___ftdiv@f3+1,c
  6402  0023CC  0E00               	movlw	0
  6403  0023CE  6E15               	movwf	___ftdiv@f3+2,c
  6404  0023D0  5017               	movf	___ftdiv@sign,w,c
  6405  0023D2  0F89               	addlw	137
  6406  0023D4  5E16               	subwf	___ftdiv@exp,f,c
  6407  0023D6  C00B  F017         	movff	___ftdiv@f1+2,___ftdiv@sign
  6408  0023DA  500E               	movf	___ftdiv@f2+2,w,c
  6409  0023DC  1A17               	xorwf	___ftdiv@sign,f,c
  6410  0023DE  0E80               	movlw	128
  6411  0023E0  1617               	andwf	___ftdiv@sign,f,c
  6412  0023E2  8E0A               	bsf	___ftdiv@f1+1,7,c
  6413  0023E4  0EFF               	movlw	255
  6414  0023E6  1609               	andwf	___ftdiv@f1,f,c
  6415  0023E8  0EFF               	movlw	255
  6416  0023EA  160A               	andwf	___ftdiv@f1+1,f,c
  6417  0023EC  0E00               	movlw	0
  6418  0023EE  160B               	andwf	___ftdiv@f1+2,f,c
  6419  0023F0  8E0D               	bsf	___ftdiv@f2+1,7,c
  6420  0023F2  0EFF               	movlw	255
  6421  0023F4  160C               	andwf	___ftdiv@f2,f,c
  6422  0023F6  0EFF               	movlw	255
  6423  0023F8  160D               	andwf	___ftdiv@f2+1,f,c
  6424  0023FA  0E00               	movlw	0
  6425  0023FC  160E               	andwf	___ftdiv@f2+2,f,c
  6426  0023FE  0E18               	movlw	24
  6427  002400  6E12               	movwf	___ftdiv@cntr,c
  6428  002402  D000               	goto	l3256
  6429  002404                     l3256:
  6430  002404  90D8               	bcf	status,0,c
  6431  002406  3613               	rlcf	___ftdiv@f3,f,c
  6432  002408  3614               	rlcf	___ftdiv@f3+1,f,c
  6433  00240A  3615               	rlcf	___ftdiv@f3+2,f,c
  6434  00240C  500C               	movf	___ftdiv@f2,w,c
  6435  00240E  5C09               	subwf	___ftdiv@f1,w,c
  6436  002410  500D               	movf	___ftdiv@f2+1,w,c
  6437  002412  580A               	subwfb	___ftdiv@f1+1,w,c
  6438  002414  500E               	movf	___ftdiv@f2+2,w,c
  6439  002416  580B               	subwfb	___ftdiv@f1+2,w,c
  6440  002418  A0D8               	btfss	status,0,c
  6441  00241A  D007               	goto	l1180
  6442  00241C  500C               	movf	___ftdiv@f2,w,c
  6443  00241E  5E09               	subwf	___ftdiv@f1,f,c
  6444  002420  500D               	movf	___ftdiv@f2+1,w,c
  6445  002422  5A0A               	subwfb	___ftdiv@f1+1,f,c
  6446  002424  500E               	movf	___ftdiv@f2+2,w,c
  6447  002426  5A0B               	subwfb	___ftdiv@f1+2,f,c
  6448  002428  8013               	bsf	___ftdiv@f3,0,c
  6449  00242A                     l1180:
  6450  00242A  90D8               	bcf	status,0,c
  6451  00242C  3609               	rlcf	___ftdiv@f1,f,c
  6452  00242E  360A               	rlcf	___ftdiv@f1+1,f,c
  6453  002430  360B               	rlcf	___ftdiv@f1+2,f,c
  6454  002432  2E12               	decfsz	___ftdiv@cntr,f,c
  6455  002434  D7E7               	goto	l3256
  6456  002436  D000               	goto	l3266
  6457  002438                     l3266:
  6458  002438  C013  F001         	movff	___ftdiv@f3,___ftpack@arg
  6459  00243C  C014  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6460  002440  C015  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6461  002444  C016  F004         	movff	___ftdiv@exp,___ftpack@exp
  6462  002448  C017  F005         	movff	___ftdiv@sign,___ftpack@sign
  6463  00244C  EC73  F013         	call	___ftpack	;wreg free
  6464  002450  C001  F009         	movff	?___ftpack,?___ftdiv
  6465  002454  C002  F00A         	movff	?___ftpack+1,?___ftdiv+1
  6466  002458  C003  F00B         	movff	?___ftpack+2,?___ftdiv+2
  6467  00245C  0012               	return	
  6468  00245E  0012               	return		;funcret
  6469  002460                     __end_of___ftdiv:
  6470                           	opt stack 0
  6471                           tblptru	equ	0xFF8
  6472                           tblptrh	equ	0xFF7
  6473                           tblptrl	equ	0xFF6
  6474                           tablat	equ	0xFF5
  6475                           prodh	equ	0xFF4
  6476                           prodl	equ	0xFF3
  6477                           indf0	equ	0xFEF
  6478                           postinc0	equ	0xFEE
  6479                           fsr0h	equ	0xFEA
  6480                           fsr0l	equ	0xFE9
  6481                           wreg	equ	0xFE8
  6482                           postdec1	equ	0xFE5
  6483                           fsr1l	equ	0xFE1
  6484                           indf2	equ	0xFDF
  6485                           postinc2	equ	0xFDE
  6486                           postdec2	equ	0xFDD
  6487                           fsr2h	equ	0xFDA
  6488                           fsr2l	equ	0xFD9
  6489                           status	equ	0xFD8
  6490                           
  6491 ;; *************** function ___awtoft *****************
  6492 ;; Defined at:
  6493 ;;		line 32 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\awtoft.c"
  6494 ;; Parameters:    Size  Location     Type
  6495 ;;  c               2    8[COMRAM] int 
  6496 ;; Auto vars:     Size  Location     Type
  6497 ;;  sign            1   11[COMRAM] unsigned char 
  6498 ;; Return value:  Size  Location     Type
  6499 ;;                  3    8[COMRAM] float 
  6500 ;; Registers used:
  6501 ;;		wreg, status,2, status,0, cstack
  6502 ;; Tracked objects:
  6503 ;;		On entry : 0/0
  6504 ;;		On exit  : 0/0
  6505 ;;		Unchanged: 0/0
  6506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6507 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6508 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6510 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6511 ;;Total ram usage:        4 bytes
  6512 ;; Hardware stack levels used:    1
  6513 ;; Hardware stack levels required when called:    1
  6514 ;; This function calls:
  6515 ;;		___ftpack
  6516 ;; This function is called by:
  6517 ;;		_obtain_pass
  6518 ;;		_exp
  6519 ;;		_log
  6520 ;; This function uses a non-reentrant model
  6521 ;;
  6522                           
  6523                           	psect	text33
  6524  002F14                     __ptext33:
  6525                           	opt stack 0
  6526  002F14                     ___awtoft:
  6527                           	opt stack 25
  6528                           
  6529                           ;incstack = 0
  6530  002F14  0E00               	movlw	0
  6531  002F16  6E0C               	movwf	___awtoft@sign,c
  6532  002F18  AE0A               	btfss	___awtoft@c+1,7,c
  6533  002F1A  D007               	goto	l3286
  6534  002F1C  6C09               	negf	___awtoft@c,c
  6535  002F1E  1E0A               	comf	___awtoft@c+1,f,c
  6536  002F20  B0D8               	btfsc	status,0,c
  6537  002F22  2A0A               	incf	___awtoft@c+1,f,c
  6538  002F24  0E01               	movlw	1
  6539  002F26  6E0C               	movwf	___awtoft@sign,c
  6540  002F28  D000               	goto	l3286
  6541  002F2A                     l3286:
  6542  002F2A  C009  F001         	movff	___awtoft@c,___ftpack@arg
  6543  002F2E  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  6544  002F32  6A03               	clrf	___ftpack@arg+2,c
  6545  002F34  0E8E               	movlw	142
  6546  002F36  6E04               	movwf	___ftpack@exp,c
  6547  002F38  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  6548  002F3C  EC73  F013         	call	___ftpack	;wreg free
  6549  002F40  C001  F009         	movff	?___ftpack,?___awtoft
  6550  002F44  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  6551  002F48  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  6552  002F4C  0012               	return	
  6553  002F4E  0012               	return		;funcret
  6554  002F50                     __end_of___awtoft:
  6555                           	opt stack 0
  6556                           tblptru	equ	0xFF8
  6557                           tblptrh	equ	0xFF7
  6558                           tblptrl	equ	0xFF6
  6559                           tablat	equ	0xFF5
  6560                           prodh	equ	0xFF4
  6561                           prodl	equ	0xFF3
  6562                           indf0	equ	0xFEF
  6563                           postinc0	equ	0xFEE
  6564                           fsr0h	equ	0xFEA
  6565                           fsr0l	equ	0xFE9
  6566                           wreg	equ	0xFE8
  6567                           postdec1	equ	0xFE5
  6568                           fsr1l	equ	0xFE1
  6569                           indf2	equ	0xFDF
  6570                           postinc2	equ	0xFDE
  6571                           postdec2	equ	0xFDD
  6572                           fsr2h	equ	0xFDA
  6573                           fsr2l	equ	0xFD9
  6574                           status	equ	0xFD8
  6575                           
  6576 ;; *************** function ___lltoft *****************
  6577 ;; Defined at:
  6578 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lltoft.c"
  6579 ;; Parameters:    Size  Location     Type
  6580 ;;  c               4    8[COMRAM] unsigned long 
  6581 ;; Auto vars:     Size  Location     Type
  6582 ;;  exp             1   16[COMRAM] unsigned char 
  6583 ;; Return value:  Size  Location     Type
  6584 ;;                  3    8[COMRAM] float 
  6585 ;; Registers used:
  6586 ;;		wreg, status,2, status,0, cstack
  6587 ;; Tracked objects:
  6588 ;;		On entry : 0/0
  6589 ;;		On exit  : 0/0
  6590 ;;		Unchanged: 0/0
  6591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6592 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6593 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6594 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6595 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6596 ;;Total ram usage:        9 bytes
  6597 ;; Hardware stack levels used:    1
  6598 ;; Hardware stack levels required when called:    1
  6599 ;; This function calls:
  6600 ;;		___ftpack
  6601 ;; This function is called by:
  6602 ;;		_pow
  6603 ;; This function uses a non-reentrant model
  6604 ;;
  6605                           
  6606                           	psect	text34
  6607  002BDE                     __ptext34:
  6608                           	opt stack 0
  6609  002BDE                     ___lltoft:
  6610                           	opt stack 26
  6611                           
  6612                           ;incstack = 0
  6613  002BDE  0E8E               	movlw	142
  6614  002BE0  6E11               	movwf	___lltoft@exp,c
  6615  002BE2  D007               	goto	l3554
  6616  002BE4                     l3552:
  6617  002BE4  90D8               	bcf	status,0,c
  6618  002BE6  320C               	rrcf	___lltoft@c+3,f,c
  6619  002BE8  320B               	rrcf	___lltoft@c+2,f,c
  6620  002BEA  320A               	rrcf	___lltoft@c+1,f,c
  6621  002BEC  3209               	rrcf	___lltoft@c,f,c
  6622  002BEE  2A11               	incf	___lltoft@exp,f,c
  6623  002BF0  D000               	goto	l3554
  6624  002BF2                     l3554:
  6625  002BF2  0E00               	movlw	0
  6626  002BF4  1409               	andwf	___lltoft@c,w,c
  6627  002BF6  6E0D               	movwf	??___lltoft& (0+255),c
  6628  002BF8  0E00               	movlw	0
  6629  002BFA  140A               	andwf	___lltoft@c+1,w,c
  6630  002BFC  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  6631  002BFE  0E00               	movlw	0
  6632  002C00  140B               	andwf	___lltoft@c+2,w,c
  6633  002C02  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  6634  002C04  0EFF               	movlw	255
  6635  002C06  140C               	andwf	___lltoft@c+3,w,c
  6636  002C08  6E10               	movwf	(??___lltoft+3)& (0+255),c
  6637  002C0A  500D               	movf	??___lltoft,w,c
  6638  002C0C  100E               	iorwf	??___lltoft+1,w,c
  6639  002C0E  100F               	iorwf	??___lltoft+2,w,c
  6640  002C10  1010               	iorwf	??___lltoft+3,w,c
  6641  002C12  A4D8               	btfss	status,2,c
  6642  002C14  D7E7               	goto	l3552
  6643  002C16  C009  F001         	movff	___lltoft@c,___ftpack@arg
  6644  002C1A  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  6645  002C1E  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  6646  002C22  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  6647  002C26  0E00               	movlw	0
  6648  002C28  6E05               	movwf	___ftpack@sign,c
  6649  002C2A  EC73  F013         	call	___ftpack	;wreg free
  6650  002C2E  C001  F009         	movff	?___ftpack,?___lltoft
  6651  002C32  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  6652  002C36  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  6653  002C3A  0012               	return	
  6654  002C3C  0012               	return		;funcret
  6655  002C3E                     __end_of___lltoft:
  6656                           	opt stack 0
  6657                           tblptru	equ	0xFF8
  6658                           tblptrh	equ	0xFF7
  6659                           tblptrl	equ	0xFF6
  6660                           tablat	equ	0xFF5
  6661                           prodh	equ	0xFF4
  6662                           prodl	equ	0xFF3
  6663                           indf0	equ	0xFEF
  6664                           postinc0	equ	0xFEE
  6665                           fsr0h	equ	0xFEA
  6666                           fsr0l	equ	0xFE9
  6667                           wreg	equ	0xFE8
  6668                           postdec1	equ	0xFE5
  6669                           fsr1l	equ	0xFE1
  6670                           indf2	equ	0xFDF
  6671                           postinc2	equ	0xFDE
  6672                           postdec2	equ	0xFDD
  6673                           fsr2h	equ	0xFDA
  6674                           fsr2l	equ	0xFD9
  6675                           status	equ	0xFD8
  6676                           
  6677 ;; *************** function _next_code *****************
  6678 ;; Defined at:
  6679 ;;		line 39 in file "lcd_vision.c"
  6680 ;; Parameters:    Size  Location     Type
  6681 ;;  digit           2    7[COMRAM] PTR short 
  6682 ;;		 -> set_vision@digit(2), 
  6683 ;;  input           2    9[COMRAM] PTR unsigned char 
  6684 ;;		 -> obtain_pass@input(1), 
  6685 ;; Auto vars:     Size  Location     Type
  6686 ;;		None
  6687 ;; Return value:  Size  Location     Type
  6688 ;;		None               void
  6689 ;; Registers used:
  6690 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6691 ;; Tracked objects:
  6692 ;;		On entry : 0/0
  6693 ;;		On exit  : 0/0
  6694 ;;		Unchanged: 0/0
  6695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6696 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6698 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6699 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6700 ;;Total ram usage:        6 bytes
  6701 ;; Hardware stack levels used:    1
  6702 ;; Hardware stack levels required when called:    3
  6703 ;; This function calls:
  6704 ;;		_clear_keyboard
  6705 ;;		_lcd_gotoxy
  6706 ;; This function is called by:
  6707 ;;		_obtain_pass
  6708 ;; This function uses a non-reentrant model
  6709 ;;
  6710                           
  6711                           	psect	text35
  6712  002E3C                     __ptext35:
  6713                           	opt stack 0
  6714  002E3C                     _next_code:
  6715                           	opt stack 25
  6716                           
  6717                           ;lcd_vision.c: 40: clear_keyboard();
  6718                           
  6719                           ;incstack = 0
  6720  002E3C  ECD2  F018         	call	_clear_keyboard	;wreg free
  6721                           
  6722                           ;lcd_vision.c: 41: *digit = *digit + 1;
  6723  002E40  C008  FFD9         	movff	next_code@digit,fsr2l
  6724  002E44  C009  FFDA         	movff	next_code@digit+1,fsr2h
  6725  002E48  CFDE F00C          	movff	postinc2,??_next_code
  6726  002E4C  CFDD F00D          	movff	postdec2,??_next_code+1
  6727  002E50  0E01               	movlw	1
  6728  002E52  260C               	addwf	??_next_code,f,c
  6729  002E54  0E00               	movlw	0
  6730  002E56  220D               	addwfc	??_next_code+1,f,c
  6731  002E58  C008  FFD9         	movff	next_code@digit,fsr2l
  6732  002E5C  C009  FFDA         	movff	next_code@digit+1,fsr2h
  6733  002E60  C00C  FFDE         	movff	??_next_code,postinc2
  6734  002E64  C00D  FFDD         	movff	??_next_code+1,postdec2
  6735                           
  6736                           ;lcd_vision.c: 42: lcd_gotoxy(*digit, 2);
  6737  002E68  0E02               	movlw	2
  6738  002E6A  6E05               	movwf	lcd_gotoxy@y,c
  6739  002E6C  C008  FFD9         	movff	next_code@digit,fsr2l
  6740  002E70  C009  FFDA         	movff	next_code@digit+1,fsr2h
  6741  002E74  50DF               	movf	indf2,w,c
  6742  002E76  EC58  F018         	call	_lcd_gotoxy
  6743                           
  6744                           ;lcd_vision.c: 43: *input = 18;
  6745  002E7A  C00A  FFD9         	movff	next_code@input,fsr2l
  6746  002E7E  C00B  FFDA         	movff	next_code@input+1,fsr2h
  6747  002E82  0E12               	movlw	18
  6748  002E84  6EDF               	movwf	indf2,c
  6749  002E86  0012               	return		;funcret
  6750  002E88                     __end_of_next_code:
  6751                           	opt stack 0
  6752                           tblptru	equ	0xFF8
  6753                           tblptrh	equ	0xFF7
  6754                           tblptrl	equ	0xFF6
  6755                           tablat	equ	0xFF5
  6756                           prodh	equ	0xFF4
  6757                           prodl	equ	0xFF3
  6758                           indf0	equ	0xFEF
  6759                           postinc0	equ	0xFEE
  6760                           fsr0h	equ	0xFEA
  6761                           fsr0l	equ	0xFE9
  6762                           wreg	equ	0xFE8
  6763                           postdec1	equ	0xFE5
  6764                           fsr1l	equ	0xFE1
  6765                           indf2	equ	0xFDF
  6766                           postinc2	equ	0xFDE
  6767                           postdec2	equ	0xFDD
  6768                           fsr2h	equ	0xFDA
  6769                           fsr2l	equ	0xFD9
  6770                           status	equ	0xFD8
  6771                           
  6772 ;; *************** function _lcd_gotoxy *****************
  6773 ;; Defined at:
  6774 ;;		line 158 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  6775 ;; Parameters:    Size  Location     Type
  6776 ;;  x               1    wreg     unsigned char 
  6777 ;;  y               1    4[COMRAM] unsigned char 
  6778 ;; Auto vars:     Size  Location     Type
  6779 ;;  x               1    5[COMRAM] unsigned char 
  6780 ;;  address         1    6[COMRAM] unsigned char 
  6781 ;; Return value:  Size  Location     Type
  6782 ;;		None               void
  6783 ;; Registers used:
  6784 ;;		wreg, status,2, status,0, cstack
  6785 ;; Tracked objects:
  6786 ;;		On entry : 0/0
  6787 ;;		On exit  : 0/0
  6788 ;;		Unchanged: 0/0
  6789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6790 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6791 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6793 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6794 ;;Total ram usage:        3 bytes
  6795 ;; Hardware stack levels used:    1
  6796 ;; Hardware stack levels required when called:    2
  6797 ;; This function calls:
  6798 ;;		_lcd_send_byte
  6799 ;; This function is called by:
  6800 ;;		_main
  6801 ;;		_lcd_putc
  6802 ;;		_write_Date
  6803 ;;		_next_code
  6804 ;;		_twinkle
  6805 ;;		_set_desactive_vision
  6806 ;;		_set_vision
  6807 ;; This function uses a non-reentrant model
  6808 ;;
  6809                           
  6810                           	psect	text36
  6811  0030B0                     __ptext36:
  6812                           	opt stack 0
  6813  0030B0                     _lcd_gotoxy:
  6814                           	opt stack 24
  6815                           
  6816                           ;incstack = 0
  6817                           ;lcd_gotoxy@x stored from wreg
  6818  0030B0  6E06               	movwf	lcd_gotoxy@x,c
  6819                           
  6820                           ;unmc_lcd_216.c: 159: int8 address;
  6821                           ;unmc_lcd_216.c: 161: if(y != 1)
  6822  0030B2  0405               	decf	lcd_gotoxy@y,w,c
  6823  0030B4  B4D8               	btfsc	status,2,c
  6824  0030B6  D002               	goto	l2968
  6825                           
  6826                           ;unmc_lcd_216.c: 162: address = 0x40;
  6827  0030B8  0E40               	movlw	64
  6828  0030BA  D001               	goto	L3
  6829  0030BC                     l2968:
  6830                           
  6831                           ;unmc_lcd_216.c: 163: else
  6832                           ;unmc_lcd_216.c: 164: address=0;
  6833  0030BC  0E00               	movlw	0
  6834  0030BE                     L3:
  6835  0030BE  6E07               	movwf	lcd_gotoxy@address,c
  6836  0030C0  D000               	goto	l2970
  6837  0030C2                     l2970:
  6838                           
  6839                           ;unmc_lcd_216.c: 166: address += x-1;
  6840  0030C2  0406               	decf	lcd_gotoxy@x,w,c
  6841  0030C4  2607               	addwf	lcd_gotoxy@address,f,c
  6842                           
  6843                           ;unmc_lcd_216.c: 167: lcd_send_byte(0, 0x80 | address);
  6844  0030C6  5007               	movf	lcd_gotoxy@address,w,c
  6845  0030C8  0980               	iorlw	128
  6846  0030CA  6E03               	movwf	lcd_send_byte@n,c
  6847  0030CC  0E00               	movlw	0
  6848  0030CE  ECC5  F017         	call	_lcd_send_byte
  6849  0030D2  0012               	return		;funcret
  6850  0030D4                     __end_of_lcd_gotoxy:
  6851                           	opt stack 0
  6852                           tblptru	equ	0xFF8
  6853                           tblptrh	equ	0xFF7
  6854                           tblptrl	equ	0xFF6
  6855                           tablat	equ	0xFF5
  6856                           prodh	equ	0xFF4
  6857                           prodl	equ	0xFF3
  6858                           indf0	equ	0xFEF
  6859                           postinc0	equ	0xFEE
  6860                           fsr0h	equ	0xFEA
  6861                           fsr0l	equ	0xFE9
  6862                           wreg	equ	0xFE8
  6863                           postdec1	equ	0xFE5
  6864                           fsr1l	equ	0xFE1
  6865                           indf2	equ	0xFDF
  6866                           postinc2	equ	0xFDE
  6867                           postdec2	equ	0xFDD
  6868                           fsr2h	equ	0xFDA
  6869                           fsr2l	equ	0xFD9
  6870                           status	equ	0xFD8
  6871                           
  6872 ;; *************** function _clear_keyboard *****************
  6873 ;; Defined at:
  6874 ;;		line 4 in file "keyboard.c"
  6875 ;; Parameters:    Size  Location     Type
  6876 ;;		None
  6877 ;; Auto vars:     Size  Location     Type
  6878 ;;		None
  6879 ;; Return value:  Size  Location     Type
  6880 ;;		None               void
  6881 ;; Registers used:
  6882 ;;		wreg, status,2
  6883 ;; Tracked objects:
  6884 ;;		On entry : 0/0
  6885 ;;		On exit  : 0/0
  6886 ;;		Unchanged: 0/0
  6887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6891 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6892 ;;Total ram usage:        0 bytes
  6893 ;; Hardware stack levels used:    1
  6894 ;; This function calls:
  6895 ;;		Nothing
  6896 ;; This function is called by:
  6897 ;;		_next_code
  6898 ;;		_twinkle
  6899 ;; This function uses a non-reentrant model
  6900 ;;
  6901                           
  6902                           	psect	text37
  6903  0031A4                     __ptext37:
  6904                           	opt stack 0
  6905  0031A4                     _clear_keyboard:
  6906                           	opt stack 28
  6907                           
  6908                           ;keyboard.c: 5: key = 18;
  6909                           
  6910                           ;incstack = 0
  6911  0031A4  0E12               	movlw	18
  6912  0031A6  0100               	movlb	0	; () banked
  6913  0031A8  6FCD               	movwf	_key& (0+255),b
  6914                           
  6915                           ; BSR set to: 0
  6916  0031AA  0012               	return		;funcret
  6917  0031AC                     __end_of_clear_keyboard:
  6918                           	opt stack 0
  6919                           tblptru	equ	0xFF8
  6920                           tblptrh	equ	0xFF7
  6921                           tblptrl	equ	0xFF6
  6922                           tablat	equ	0xFF5
  6923                           prodh	equ	0xFF4
  6924                           prodl	equ	0xFF3
  6925                           indf0	equ	0xFEF
  6926                           postinc0	equ	0xFEE
  6927                           fsr0h	equ	0xFEA
  6928                           fsr0l	equ	0xFE9
  6929                           wreg	equ	0xFE8
  6930                           postdec1	equ	0xFE5
  6931                           fsr1l	equ	0xFE1
  6932                           indf2	equ	0xFDF
  6933                           postinc2	equ	0xFDE
  6934                           postdec2	equ	0xFDD
  6935                           fsr2h	equ	0xFDA
  6936                           fsr2l	equ	0xFD9
  6937                           status	equ	0xFD8
  6938                           
  6939 ;; *************** function ___lbtoft *****************
  6940 ;; Defined at:
  6941 ;;		line 27 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lbtoft.c"
  6942 ;; Parameters:    Size  Location     Type
  6943 ;;  c               1    wreg     unsigned char 
  6944 ;; Auto vars:     Size  Location     Type
  6945 ;;  c               1   11[COMRAM] unsigned char 
  6946 ;; Return value:  Size  Location     Type
  6947 ;;                  3    8[COMRAM] float 
  6948 ;; Registers used:
  6949 ;;		wreg, status,2, status,0, cstack
  6950 ;; Tracked objects:
  6951 ;;		On entry : 0/0
  6952 ;;		On exit  : 0/0
  6953 ;;		Unchanged: 0/0
  6954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6955 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6956 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6958 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6959 ;;Total ram usage:        4 bytes
  6960 ;; Hardware stack levels used:    1
  6961 ;; Hardware stack levels required when called:    1
  6962 ;; This function calls:
  6963 ;;		___ftpack
  6964 ;; This function is called by:
  6965 ;;		_obtain_pass
  6966 ;; This function uses a non-reentrant model
  6967 ;;
  6968                           
  6969                           	psect	text38
  6970  003066                     __ptext38:
  6971                           	opt stack 0
  6972  003066                     ___lbtoft:
  6973                           	opt stack 27
  6974                           
  6975                           ; BSR set to: 0
  6976                           ;incstack = 0
  6977                           ;___lbtoft@c stored from wreg
  6978  003066  6E0C               	movwf	___lbtoft@c,c
  6979  003068  500C               	movf	___lbtoft@c,w,c
  6980  00306A  6E01               	movwf	___ftpack@arg,c
  6981  00306C  6A02               	clrf	___ftpack@arg+1,c
  6982  00306E  6A03               	clrf	___ftpack@arg+2,c
  6983  003070  0E8E               	movlw	142
  6984  003072  6E04               	movwf	___ftpack@exp,c
  6985  003074  0E00               	movlw	0
  6986  003076  6E05               	movwf	___ftpack@sign,c
  6987  003078  EC73  F013         	call	___ftpack	;wreg free
  6988  00307C  C001  F009         	movff	?___ftpack,?___lbtoft
  6989  003080  C002  F00A         	movff	?___ftpack+1,?___lbtoft+1
  6990  003084  C003  F00B         	movff	?___ftpack+2,?___lbtoft+2
  6991  003088  0012               	return	
  6992  00308A  0012               	return		;funcret
  6993  00308C                     __end_of___lbtoft:
  6994                           	opt stack 0
  6995                           tblptru	equ	0xFF8
  6996                           tblptrh	equ	0xFF7
  6997                           tblptrl	equ	0xFF6
  6998                           tablat	equ	0xFF5
  6999                           prodh	equ	0xFF4
  7000                           prodl	equ	0xFF3
  7001                           indf0	equ	0xFEF
  7002                           postinc0	equ	0xFEE
  7003                           fsr0h	equ	0xFEA
  7004                           fsr0l	equ	0xFE9
  7005                           wreg	equ	0xFE8
  7006                           postdec1	equ	0xFE5
  7007                           fsr1l	equ	0xFE1
  7008                           indf2	equ	0xFDF
  7009                           postinc2	equ	0xFDE
  7010                           postdec2	equ	0xFDD
  7011                           fsr2h	equ	0xFDA
  7012                           fsr2l	equ	0xFD9
  7013                           status	equ	0xFD8
  7014                           
  7015 ;; *************** function ___ftpack *****************
  7016 ;; Defined at:
  7017 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\float.c"
  7018 ;; Parameters:    Size  Location     Type
  7019 ;;  arg             3    0[COMRAM] unsigned um
  7020 ;;  exp             1    3[COMRAM] unsigned char 
  7021 ;;  sign            1    4[COMRAM] unsigned char 
  7022 ;; Auto vars:     Size  Location     Type
  7023 ;;		None
  7024 ;; Return value:  Size  Location     Type
  7025 ;;                  3    0[COMRAM] float 
  7026 ;; Registers used:
  7027 ;;		wreg, status,2, status,0
  7028 ;; Tracked objects:
  7029 ;;		On entry : 0/0
  7030 ;;		On exit  : 0/0
  7031 ;;		Unchanged: 0/0
  7032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7033 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7035 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7036 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7037 ;;Total ram usage:        8 bytes
  7038 ;; Hardware stack levels used:    1
  7039 ;; This function calls:
  7040 ;;		Nothing
  7041 ;; This function is called by:
  7042 ;;		___altoft
  7043 ;;		___awtoft
  7044 ;;		___ftadd
  7045 ;;		___ftdiv
  7046 ;;		___ftmul
  7047 ;;		___lbtoft
  7048 ;;		___lltoft
  7049 ;; This function uses a non-reentrant model
  7050 ;;
  7051                           
  7052                           	psect	text39
  7053  0026E6                     __ptext39:
  7054                           	opt stack 0
  7055  0026E6                     ___ftpack:
  7056                           	opt stack 24
  7057                           
  7058                           ;incstack = 0
  7059  0026E6  5004               	movf	___ftpack@exp,w,c
  7060  0026E8  B4D8               	btfsc	status,2,c
  7061  0026EA  D005               	goto	l2932
  7062  0026EC  5001               	movf	___ftpack@arg,w,c
  7063  0026EE  1002               	iorwf	___ftpack@arg+1,w,c
  7064  0026F0  1003               	iorwf	___ftpack@arg+2,w,c
  7065  0026F2  A4D8               	btfss	status,2,c
  7066  0026F4  D00E               	goto	l2938
  7067  0026F6                     l2932:
  7068  0026F6  0E00               	movlw	0
  7069  0026F8  6E01               	movwf	?___ftpack,c
  7070  0026FA  0E00               	movlw	0
  7071  0026FC  6E02               	movwf	?___ftpack+1,c
  7072  0026FE  0E00               	movlw	0
  7073  002700  6E03               	movwf	?___ftpack+2,c
  7074  002702  0012               	return	
  7075  002704  D006               	goto	l2938
  7076  002706                     l2936:
  7077  002706  2A04               	incf	___ftpack@exp,f,c
  7078  002708  90D8               	bcf	status,0,c
  7079  00270A  3203               	rrcf	___ftpack@arg+2,f,c
  7080  00270C  3202               	rrcf	___ftpack@arg+1,f,c
  7081  00270E  3201               	rrcf	___ftpack@arg,f,c
  7082  002710  D000               	goto	l2938
  7083  002712                     l2938:
  7084  002712  0E00               	movlw	0
  7085  002714  1401               	andwf	___ftpack@arg,w,c
  7086  002716  6E06               	movwf	??___ftpack& (0+255),c
  7087  002718  0E00               	movlw	0
  7088  00271A  1402               	andwf	___ftpack@arg+1,w,c
  7089  00271C  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7090  00271E  0EFE               	movlw	254
  7091  002720  1403               	andwf	___ftpack@arg+2,w,c
  7092  002722  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7093  002724  5006               	movf	??___ftpack,w,c
  7094  002726  1007               	iorwf	??___ftpack+1,w,c
  7095  002728  1008               	iorwf	??___ftpack+2,w,c
  7096  00272A  B4D8               	btfsc	status,2,c
  7097  00272C  D00E               	goto	l2944
  7098  00272E  D7EB               	goto	l2936
  7099  002730  D00C               	goto	l2944
  7100  002732                     l2940:
  7101  002732  2A04               	incf	___ftpack@exp,f,c
  7102  002734  0E01               	movlw	1
  7103  002736  2601               	addwf	___ftpack@arg,f,c
  7104  002738  0E00               	movlw	0
  7105  00273A  2202               	addwfc	___ftpack@arg+1,f,c
  7106  00273C  0E00               	movlw	0
  7107  00273E  2203               	addwfc	___ftpack@arg+2,f,c
  7108  002740  90D8               	bcf	status,0,c
  7109  002742  3203               	rrcf	___ftpack@arg+2,f,c
  7110  002744  3202               	rrcf	___ftpack@arg+1,f,c
  7111  002746  3201               	rrcf	___ftpack@arg,f,c
  7112  002748  D000               	goto	l2944
  7113  00274A                     l2944:
  7114  00274A  0E00               	movlw	0
  7115  00274C  1401               	andwf	___ftpack@arg,w,c
  7116  00274E  6E06               	movwf	??___ftpack& (0+255),c
  7117  002750  0E00               	movlw	0
  7118  002752  1402               	andwf	___ftpack@arg+1,w,c
  7119  002754  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7120  002756  0EFF               	movlw	255
  7121  002758  1403               	andwf	___ftpack@arg+2,w,c
  7122  00275A  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7123  00275C  5006               	movf	??___ftpack,w,c
  7124  00275E  1007               	iorwf	??___ftpack+1,w,c
  7125  002760  1008               	iorwf	??___ftpack+2,w,c
  7126  002762  B4D8               	btfsc	status,2,c
  7127  002764  D008               	goto	l2948
  7128  002766  D7E5               	goto	l2940
  7129  002768  D006               	goto	l2948
  7130  00276A                     l2946:
  7131  00276A  0604               	decf	___ftpack@exp,f,c
  7132  00276C  90D8               	bcf	status,0,c
  7133  00276E  3601               	rlcf	___ftpack@arg,f,c
  7134  002770  3602               	rlcf	___ftpack@arg+1,f,c
  7135  002772  3603               	rlcf	___ftpack@arg+2,f,c
  7136  002774  D000               	goto	l2948
  7137  002776                     l2948:
  7138  002776  BE02               	btfsc	___ftpack@arg+1,7,c
  7139  002778  D004               	goto	l1116
  7140  00277A  0E02               	movlw	2
  7141  00277C  6004               	cpfslt	___ftpack@exp,c
  7142  00277E  D7F5               	goto	l2946
  7143  002780  D000               	goto	l1116
  7144  002782                     l1116:
  7145  002782  B004               	btfsc	___ftpack@exp,0,c
  7146  002784  D002               	goto	l2954
  7147  002786  9E02               	bcf	___ftpack@arg+1,7,c
  7148  002788  D000               	goto	l2954
  7149  00278A                     l2954:
  7150  00278A  90D8               	bcf	status,0,c
  7151  00278C  3204               	rrcf	___ftpack@exp,f,c
  7152  00278E  5004               	movf	___ftpack@exp,w,c
  7153  002790  1203               	iorwf	___ftpack@arg+2,f,c
  7154  002792  5005               	movf	___ftpack@sign,w,c
  7155  002794  B4D8               	btfsc	status,2,c
  7156  002796  D002               	goto	l2960
  7157  002798  8E03               	bsf	___ftpack@arg+2,7,c
  7158  00279A  D000               	goto	l2960
  7159  00279C                     l2960:
  7160  00279C  C001  F001         	movff	___ftpack@arg,?___ftpack
  7161  0027A0  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  7162  0027A4  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  7163  0027A8  0012               	return	
  7164  0027AA  0012               	return		;funcret
  7165  0027AC                     __end_of___ftpack:
  7166                           	opt stack 0
  7167                           tblptru	equ	0xFF8
  7168                           tblptrh	equ	0xFF7
  7169                           tblptrl	equ	0xFF6
  7170                           tablat	equ	0xFF5
  7171                           prodh	equ	0xFF4
  7172                           prodl	equ	0xFF3
  7173                           indf0	equ	0xFEF
  7174                           postinc0	equ	0xFEE
  7175                           fsr0h	equ	0xFEA
  7176                           fsr0l	equ	0xFE9
  7177                           wreg	equ	0xFE8
  7178                           postdec1	equ	0xFE5
  7179                           fsr1l	equ	0xFE1
  7180                           indf2	equ	0xFDF
  7181                           postinc2	equ	0xFDE
  7182                           postdec2	equ	0xFDD
  7183                           fsr2h	equ	0xFDA
  7184                           fsr2l	equ	0xFD9
  7185                           status	equ	0xFD8
  7186                           
  7187 ;; *************** function _not_fill_pass *****************
  7188 ;; Defined at:
  7189 ;;		line 34 in file "lcd_vision.c"
  7190 ;; Parameters:    Size  Location     Type
  7191 ;;  digit           2    0[COMRAM] short 
  7192 ;; Auto vars:     Size  Location     Type
  7193 ;;		None
  7194 ;; Return value:  Size  Location     Type
  7195 ;;                  1    wreg      unsigned char 
  7196 ;; Registers used:
  7197 ;;		wreg, status,2, status,0
  7198 ;; Tracked objects:
  7199 ;;		On entry : 0/0
  7200 ;;		On exit  : 0/0
  7201 ;;		Unchanged: 0/0
  7202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7203 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7206 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7207 ;;Total ram usage:        2 bytes
  7208 ;; Hardware stack levels used:    1
  7209 ;; This function calls:
  7210 ;;		Nothing
  7211 ;; This function is called by:
  7212 ;;		_set_vision
  7213 ;; This function uses a non-reentrant model
  7214 ;;
  7215                           
  7216                           	psect	text40
  7217  00313C                     __ptext40:
  7218                           	opt stack 0
  7219  00313C                     _not_fill_pass:
  7220                           	opt stack 29
  7221                           
  7222                           ;lcd_vision.c: 35: return digit !=16;
  7223                           
  7224                           ;incstack = 0
  7225  00313C  0E10               	movlw	16
  7226  00313E  1801               	xorwf	not_fill_pass@digit,w,c
  7227  003140  1002               	iorwf	not_fill_pass@digit+1,w,c
  7228  003142  B4D8               	btfsc	status,2,c
  7229  003144  D002               	goto	u4120
  7230  003146  0E01               	movlw	1
  7231  003148  0012               	return	
  7232  00314A                     u4120:
  7233  00314A  0E00               	movlw	0
  7234  00314C  0012               	return	
  7235  00314E  0012               	return		;funcret
  7236  003150                     __end_of_not_fill_pass:
  7237                           	opt stack 0
  7238                           tblptru	equ	0xFF8
  7239                           tblptrh	equ	0xFF7
  7240                           tblptrl	equ	0xFF6
  7241                           tablat	equ	0xFF5
  7242                           prodh	equ	0xFF4
  7243                           prodl	equ	0xFF3
  7244                           indf0	equ	0xFEF
  7245                           postinc0	equ	0xFEE
  7246                           fsr0h	equ	0xFEA
  7247                           fsr0l	equ	0xFE9
  7248                           wreg	equ	0xFE8
  7249                           postdec1	equ	0xFE5
  7250                           fsr1l	equ	0xFE1
  7251                           indf2	equ	0xFDF
  7252                           postinc2	equ	0xFDE
  7253                           postdec2	equ	0xFDD
  7254                           fsr2h	equ	0xFDA
  7255                           fsr2l	equ	0xFD9
  7256                           status	equ	0xFD8
  7257                           
  7258 ;; *************** function _is_not_letter *****************
  7259 ;; Defined at:
  7260 ;;		line 30 in file "lcd_vision.c"
  7261 ;; Parameters:    Size  Location     Type
  7262 ;;  input           1    wreg     unsigned char 
  7263 ;; Auto vars:     Size  Location     Type
  7264 ;;  input           1    1[COMRAM] unsigned char 
  7265 ;; Return value:  Size  Location     Type
  7266 ;;                  1    wreg      unsigned char 
  7267 ;; Registers used:
  7268 ;;		wreg, status,2, status,0
  7269 ;; Tracked objects:
  7270 ;;		On entry : 0/0
  7271 ;;		On exit  : 0/0
  7272 ;;		Unchanged: 0/0
  7273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7275 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7277 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7278 ;;Total ram usage:        2 bytes
  7279 ;; Hardware stack levels used:    1
  7280 ;; This function calls:
  7281 ;;		Nothing
  7282 ;; This function is called by:
  7283 ;;		_set_vision
  7284 ;; This function uses a non-reentrant model
  7285 ;;
  7286                           
  7287                           	psect	text41
  7288  002FBC                     __ptext41:
  7289                           	opt stack 0
  7290  002FBC                     _is_not_letter:
  7291                           	opt stack 29
  7292                           
  7293                           ;incstack = 0
  7294                           ;is_not_letter@input stored from wreg
  7295  002FBC  6E02               	movwf	is_not_letter@input,c
  7296                           
  7297                           ;lcd_vision.c: 31: return input != 16 && input != 11 && input !=12 && input!=13;
  7298  002FBE  0E00               	movlw	0
  7299  002FC0  6E01               	movwf	_is_not_letter$1329,c
  7300  002FC2  0E10               	movlw	16
  7301  002FC4  1802               	xorwf	is_not_letter@input,w,c
  7302  002FC6  B4D8               	btfsc	status,2,c
  7303  002FC8  D00E               	goto	l587
  7304  002FCA  0E0B               	movlw	11
  7305  002FCC  1802               	xorwf	is_not_letter@input,w,c
  7306  002FCE  B4D8               	btfsc	status,2,c
  7307  002FD0  D00A               	goto	l587
  7308  002FD2  0E0C               	movlw	12
  7309  002FD4  1802               	xorwf	is_not_letter@input,w,c
  7310  002FD6  B4D8               	btfsc	status,2,c
  7311  002FD8  D006               	goto	l587
  7312  002FDA  0E0D               	movlw	13
  7313  002FDC  1802               	xorwf	is_not_letter@input,w,c
  7314  002FDE  B4D8               	btfsc	status,2,c
  7315  002FE0  D002               	goto	l587
  7316  002FE2  0E01               	movlw	1
  7317  002FE4  6E01               	movwf	_is_not_letter$1329,c
  7318  002FE6                     l587:
  7319  002FE6  5001               	movf	_is_not_letter$1329,w,c
  7320  002FE8  0012               	return	
  7321  002FEA  0012               	return		;funcret
  7322  002FEC                     __end_of_is_not_letter:
  7323                           	opt stack 0
  7324                           tblptru	equ	0xFF8
  7325                           tblptrh	equ	0xFF7
  7326                           tblptrl	equ	0xFF6
  7327                           tablat	equ	0xFF5
  7328                           prodh	equ	0xFF4
  7329                           prodl	equ	0xFF3
  7330                           indf0	equ	0xFEF
  7331                           postinc0	equ	0xFEE
  7332                           fsr0h	equ	0xFEA
  7333                           fsr0l	equ	0xFE9
  7334                           wreg	equ	0xFE8
  7335                           postdec1	equ	0xFE5
  7336                           fsr1l	equ	0xFE1
  7337                           indf2	equ	0xFDF
  7338                           postinc2	equ	0xFDE
  7339                           postdec2	equ	0xFDD
  7340                           fsr2h	equ	0xFDA
  7341                           fsr2l	equ	0xFD9
  7342                           status	equ	0xFD8
  7343                           
  7344 ;; *************** function _clear *****************
  7345 ;; Defined at:
  7346 ;;		line 7 in file "lcd_vision.c"
  7347 ;; Parameters:    Size  Location     Type
  7348 ;;		None
  7349 ;; Auto vars:     Size  Location     Type
  7350 ;;		None
  7351 ;; Return value:  Size  Location     Type
  7352 ;;		None               void
  7353 ;; Registers used:
  7354 ;;		wreg, status,2, status,0, cstack
  7355 ;; Tracked objects:
  7356 ;;		On entry : 0/0
  7357 ;;		On exit  : 0/0
  7358 ;;		Unchanged: 0/0
  7359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7362 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7363 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7364 ;;Total ram usage:        1 bytes
  7365 ;; Hardware stack levels used:    1
  7366 ;; Hardware stack levels required when called:    3
  7367 ;; This function calls:
  7368 ;;		_lcd_comand
  7369 ;; This function is called by:
  7370 ;;		_set_vision
  7371 ;; This function uses a non-reentrant model
  7372 ;;
  7373                           
  7374                           	psect	text42
  7375  003112                     __ptext42:
  7376                           	opt stack 0
  7377  003112                     _clear:
  7378                           	opt stack 26
  7379                           
  7380                           ;lcd_vision.c: 8: lcd_comand(0b00000001);
  7381                           
  7382                           ;incstack = 0
  7383  003112  0E01               	movlw	1
  7384  003114  ECCB  F018         	call	_lcd_comand
  7385                           
  7386                           ;lcd_vision.c: 9: _delay((unsigned long)((5)*(8000000/4000.0)));
  7387  003118  0E0D               	movlw	13
  7388  00311A  6E06               	movwf	??_clear& (0+255),c
  7389  00311C  0EFC               	movlw	252
  7390  00311E                     u4427:
  7391  00311E  2EE8               	decfsz	wreg,f,c
  7392  003120  D7FE               	goto	u4427
  7393  003122  2E06               	decfsz	??_clear& (0+255),f,c
  7394  003124  D7FC               	goto	u4427
  7395  003126  0012               	return		;funcret
  7396  003128                     __end_of_clear:
  7397                           	opt stack 0
  7398                           tblptru	equ	0xFF8
  7399                           tblptrh	equ	0xFF7
  7400                           tblptrl	equ	0xFF6
  7401                           tablat	equ	0xFF5
  7402                           prodh	equ	0xFF4
  7403                           prodl	equ	0xFF3
  7404                           indf0	equ	0xFEF
  7405                           postinc0	equ	0xFEE
  7406                           fsr0h	equ	0xFEA
  7407                           fsr0l	equ	0xFE9
  7408                           wreg	equ	0xFE8
  7409                           postdec1	equ	0xFE5
  7410                           fsr1l	equ	0xFE1
  7411                           indf2	equ	0xFDF
  7412                           postinc2	equ	0xFDE
  7413                           postdec2	equ	0xFDD
  7414                           fsr2h	equ	0xFDA
  7415                           fsr2l	equ	0xFD9
  7416                           status	equ	0xFD8
  7417                           
  7418 ;; *************** function _caratula *****************
  7419 ;; Defined at:
  7420 ;;		line 31 in file "main.c"
  7421 ;; Parameters:    Size  Location     Type
  7422 ;;		None
  7423 ;; Auto vars:     Size  Location     Type
  7424 ;;		None
  7425 ;; Return value:  Size  Location     Type
  7426 ;;		None               void
  7427 ;; Registers used:
  7428 ;;		wreg, status,2, status,0, cstack
  7429 ;; Tracked objects:
  7430 ;;		On entry : 0/0
  7431 ;;		On exit  : 0/0
  7432 ;;		Unchanged: 0/0
  7433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7437 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7438 ;;Total ram usage:        0 bytes
  7439 ;; Hardware stack levels used:    1
  7440 ;; Hardware stack levels required when called:    3
  7441 ;; This function calls:
  7442 ;;		_lcd_comand
  7443 ;; This function is called by:
  7444 ;;		_main
  7445 ;; This function uses a non-reentrant model
  7446 ;;
  7447                           
  7448                           	psect	text43
  7449  0031AC                     __ptext43:
  7450                           	opt stack 0
  7451  0031AC                     _caratula:
  7452                           	opt stack 27
  7453                           
  7454                           ;main.c: 33: lcd_comand(0b00001100);
  7455                           
  7456                           ;incstack = 0
  7457  0031AC  0E0C               	movlw	12
  7458  0031AE  ECCB  F018         	call	_lcd_comand
  7459  0031B2  0012               	return		;funcret
  7460  0031B4                     __end_of_caratula:
  7461                           	opt stack 0
  7462                           tblptru	equ	0xFF8
  7463                           tblptrh	equ	0xFF7
  7464                           tblptrl	equ	0xFF6
  7465                           tablat	equ	0xFF5
  7466                           prodh	equ	0xFF4
  7467                           prodl	equ	0xFF3
  7468                           indf0	equ	0xFEF
  7469                           postinc0	equ	0xFEE
  7470                           fsr0h	equ	0xFEA
  7471                           fsr0l	equ	0xFE9
  7472                           wreg	equ	0xFE8
  7473                           postdec1	equ	0xFE5
  7474                           fsr1l	equ	0xFE1
  7475                           indf2	equ	0xFDF
  7476                           postinc2	equ	0xFDE
  7477                           postdec2	equ	0xFDD
  7478                           fsr2h	equ	0xFDA
  7479                           fsr2l	equ	0xFD9
  7480                           status	equ	0xFD8
  7481                           
  7482 ;; *************** function _Setup *****************
  7483 ;; Defined at:
  7484 ;;		line 51 in file "main.c"
  7485 ;; Parameters:    Size  Location     Type
  7486 ;;		None
  7487 ;; Auto vars:     Size  Location     Type
  7488 ;;		None
  7489 ;; Return value:  Size  Location     Type
  7490 ;;		None               void
  7491 ;; Registers used:
  7492 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7493 ;; Tracked objects:
  7494 ;;		On entry : 0/0
  7495 ;;		On exit  : 0/0
  7496 ;;		Unchanged: 0/0
  7497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7501 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7502 ;;Total ram usage:        0 bytes
  7503 ;; Hardware stack levels used:    1
  7504 ;; Hardware stack levels required when called:    3
  7505 ;; This function calls:
  7506 ;;		_Write_RTC
  7507 ;;		_lcd_comand
  7508 ;;		_lcd_init
  7509 ;; This function is called by:
  7510 ;;		_main
  7511 ;; This function uses a non-reentrant model
  7512 ;;
  7513                           
  7514                           	psect	text44
  7515  002E88                     __ptext44:
  7516                           	opt stack 0
  7517  002E88                     _Setup:
  7518                           	opt stack 27
  7519                           
  7520                           ;main.c: 53: OSCTUNEbits.INTSRC=1;
  7521                           
  7522                           ;incstack = 0
  7523  002E88  8E9B               	bsf	3995,7,c	;volatile
  7524                           
  7525                           ;main.c: 54: OSCTUNEbits.PLLEN=0;
  7526  002E8A  9C9B               	bcf	3995,6,c	;volatile
  7527                           
  7528                           ;main.c: 55: OSCCONbits.IRCF0=1;
  7529  002E8C  88D3               	bsf	4051,4,c	;volatile
  7530                           
  7531                           ;main.c: 56: OSCCONbits.IRCF1=1;
  7532  002E8E  8AD3               	bsf	4051,5,c	;volatile
  7533                           
  7534                           ;main.c: 57: OSCCONbits.IRCF2=1;
  7535  002E90  8CD3               	bsf	4051,6,c	;volatile
  7536                           
  7537                           ;main.c: 58: OSCCONbits.SCS0=0;
  7538  002E92  90D3               	bcf	4051,0,c	;volatile
  7539                           
  7540                           ;main.c: 59: OSCCONbits.SCS1=0;
  7541  002E94  92D3               	bcf	4051,1,c	;volatile
  7542                           
  7543                           ;main.c: 60: TRISA = 0b11110000;
  7544  002E96  0EF0               	movlw	240
  7545  002E98  6E92               	movwf	3986,c	;volatile
  7546                           
  7547                           ;main.c: 61: TRISB = 0;
  7548  002E9A  0E00               	movlw	0
  7549  002E9C  6E93               	movwf	3987,c	;volatile
  7550                           
  7551                           ;main.c: 62: TRISC = 0b0110111;
  7552  002E9E  0E37               	movlw	55
  7553  002EA0  6E94               	movwf	3988,c	;volatile
  7554                           
  7555                           ;main.c: 66: ANCON0=0b11111111;
  7556  002EA2  010F               	movlb	15	; () banked
  7557  002EA4  6948               	setf	72,b	;volatile
  7558                           
  7559                           ; BSR set to: 15
  7560                           ;main.c: 68: ANCON1=0b11111111;
  7561  002EA6  010F               	movlb	15	; () banked
  7562  002EA8  6949               	setf	73,b	;volatile
  7563                           
  7564                           ;main.c: 69: ADCON0=0b00101101;
  7565  002EAA  0E2D               	movlw	45
  7566  002EAC  6EC2               	movwf	4034,c	;volatile
  7567                           
  7568                           ;main.c: 70: ADCON1=0b00010000;
  7569  002EAE  0E10               	movlw	16
  7570  002EB0  6EC1               	movwf	4033,c	;volatile
  7571                           
  7572                           ; BSR set to: 15
  7573                           ;main.c: 71: RTCCFGbits.RTCEN=1;
  7574  002EB2  010F               	movlb	15	; () banked
  7575  002EB4  8F3F               	bsf	63,7,b	;volatile
  7576                           
  7577                           ; BSR set to: 15
  7578                           ;main.c: 72: RTCCFGbits.RTCWREN=1;
  7579  002EB6  010F               	movlb	15	; () banked
  7580  002EB8  8B3F               	bsf	63,5,b	;volatile
  7581                           
  7582                           ; BSR set to: 15
  7583                           ;main.c: 73: T1CONbits.T1OSCEN=1;
  7584  002EBA  86CD               	bsf	4045,3,c	;volatile
  7585                           
  7586                           ; BSR set to: 15
  7587                           ;main.c: 74: Write_RTC();
  7588  002EBC  EC46  F00C         	call	_Write_RTC	;wreg free
  7589                           
  7590                           ;main.c: 75: lcd_init();
  7591  002EC0  ECF7  F014         	call	_lcd_init	;wreg free
  7592                           
  7593                           ;main.c: 76: lcd_comand(0b00001100);
  7594  002EC4  0E0C               	movlw	12
  7595  002EC6  ECCB  F018         	call	_lcd_comand
  7596                           
  7597                           ;main.c: 77: LATBbits.LATB1 = 1;;
  7598  002ECA  828A               	bsf	3978,1,c	;volatile
  7599                           
  7600                           ;main.c: 78: LATBbits.LATB0 = 1;;
  7601  002ECC  808A               	bsf	3978,0,c	;volatile
  7602  002ECE  0012               	return		;funcret
  7603  002ED0                     __end_of_Setup:
  7604                           	opt stack 0
  7605                           tblptru	equ	0xFF8
  7606                           tblptrh	equ	0xFF7
  7607                           tblptrl	equ	0xFF6
  7608                           tablat	equ	0xFF5
  7609                           prodh	equ	0xFF4
  7610                           prodl	equ	0xFF3
  7611                           indf0	equ	0xFEF
  7612                           postinc0	equ	0xFEE
  7613                           fsr0h	equ	0xFEA
  7614                           fsr0l	equ	0xFE9
  7615                           wreg	equ	0xFE8
  7616                           postdec1	equ	0xFE5
  7617                           fsr1l	equ	0xFE1
  7618                           indf2	equ	0xFDF
  7619                           postinc2	equ	0xFDE
  7620                           postdec2	equ	0xFDD
  7621                           fsr2h	equ	0xFDA
  7622                           fsr2l	equ	0xFD9
  7623                           status	equ	0xFD8
  7624                           
  7625 ;; *************** function _lcd_init *****************
  7626 ;; Defined at:
  7627 ;;		line 119 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  7628 ;; Parameters:    Size  Location     Type
  7629 ;;		None
  7630 ;; Auto vars:     Size  Location     Type
  7631 ;;  i               1    4[COMRAM] unsigned char 
  7632 ;; Return value:  Size  Location     Type
  7633 ;;		None               void
  7634 ;; Registers used:
  7635 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7636 ;; Tracked objects:
  7637 ;;		On entry : 0/0
  7638 ;;		On exit  : 0/0
  7639 ;;		Unchanged: 0/0
  7640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7642 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7644 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7645 ;;Total ram usage:        1 bytes
  7646 ;; Hardware stack levels used:    1
  7647 ;; Hardware stack levels required when called:    2
  7648 ;; This function calls:
  7649 ;;		_Delay1KTCYx
  7650 ;;		_lcd_send_byte
  7651 ;;		_lcd_send_nibble
  7652 ;; This function is called by:
  7653 ;;		_Setup
  7654 ;; This function uses a non-reentrant model
  7655 ;;
  7656                           
  7657                           	psect	text45
  7658  0029EE                     __ptext45:
  7659                           	opt stack 0
  7660  0029EE                     _lcd_init:
  7661                           	opt stack 27
  7662                           
  7663                           ;unmc_lcd_216.c: 120: int8 i;
  7664                           ;unmc_lcd_216.c: 122: TRISBbits.TRISB3=0;
  7665                           
  7666                           ;incstack = 0
  7667  0029EE  9693               	bcf	3987,3,c	;volatile
  7668                           
  7669                           ;unmc_lcd_216.c: 123: TRISBbits.TRISB2=0;
  7670  0029F0  9493               	bcf	3987,2,c	;volatile
  7671                           
  7672                           ;unmc_lcd_216.c: 128: LATBbits.LATB3=0;
  7673  0029F2  968A               	bcf	3978,3,c	;volatile
  7674                           
  7675                           ;unmc_lcd_216.c: 129: LATBbits.LATB2=0;
  7676  0029F4  948A               	bcf	3978,2,c	;volatile
  7677                           
  7678                           ;unmc_lcd_216.c: 134: TRISBbits.TRISB4=0;
  7679  0029F6  9893               	bcf	3987,4,c	;volatile
  7680                           
  7681                           ;unmc_lcd_216.c: 135: TRISBbits.TRISB5=0;
  7682  0029F8  9A93               	bcf	3987,5,c	;volatile
  7683                           
  7684                           ;unmc_lcd_216.c: 136: TRISBbits.TRISB6=0;
  7685  0029FA  9C93               	bcf	3987,6,c	;volatile
  7686                           
  7687                           ;unmc_lcd_216.c: 137: TRISBbits.TRISB7=0;
  7688  0029FC  9E93               	bcf	3987,7,c	;volatile
  7689                           
  7690                           ;unmc_lcd_216.c: 139: Delay1KTCYx(8000000UL/800000UL);
  7691  0029FE  0E0A               	movlw	10
  7692  002A00  ECA8  F018         	call	_Delay1KTCYx
  7693                           
  7694                           ;unmc_lcd_216.c: 140: Delay1KTCYx(8000000UL/800000UL);
  7695  002A04  0E0A               	movlw	10
  7696  002A06  ECA8  F018         	call	_Delay1KTCYx
  7697                           
  7698                           ;unmc_lcd_216.c: 141: Delay1KTCYx(8000000UL/800000UL);
  7699  002A0A  0E0A               	movlw	10
  7700  002A0C  ECA8  F018         	call	_Delay1KTCYx
  7701                           
  7702                           ;unmc_lcd_216.c: 143: for(i=0 ;i < 3; i++){
  7703  002A10  0E00               	movlw	0
  7704  002A12  6E05               	movwf	lcd_init@i,c
  7705  002A14                     l3972:
  7706  002A14  0E02               	movlw	2
  7707  002A16  6405               	cpfsgt	lcd_init@i,c
  7708  002A18  D001               	goto	l3976
  7709  002A1A  D008               	goto	l3982
  7710  002A1C                     l3976:
  7711                           
  7712                           ;unmc_lcd_216.c: 144: lcd_send_nibble(0x03);
  7713  002A1C  0E03               	movlw	3
  7714  002A1E  ECB4  F015         	call	_lcd_send_nibble
  7715                           
  7716                           ;unmc_lcd_216.c: 145: Delay1KTCYx(8000000UL/800000UL);
  7717  002A22  0E0A               	movlw	10
  7718  002A24  ECA8  F018         	call	_Delay1KTCYx
  7719  002A28  2A05               	incf	lcd_init@i,f,c
  7720  002A2A  D7F4               	goto	l3972
  7721  002A2C                     l3982:
  7722                           
  7723                           ;unmc_lcd_216.c: 146: }
  7724                           ;unmc_lcd_216.c: 148: lcd_send_nibble(0x02);
  7725  002A2C  0E02               	movlw	2
  7726  002A2E  ECB4  F015         	call	_lcd_send_nibble
  7727                           
  7728                           ;unmc_lcd_216.c: 150: for(i=0; i < sizeof(LCD_INIT_STRING); i++){
  7729  002A32  0E00               	movlw	0
  7730  002A34  6E05               	movwf	lcd_init@i,c
  7731  002A36  0E03               	movlw	3
  7732  002A38  6405               	cpfsgt	lcd_init@i,c
  7733  002A3A  D002               	goto	l3990
  7734  002A3C  0012               	return	
  7735  002A3E  0012               	return	
  7736  002A40                     l3990:
  7737                           
  7738                           ;unmc_lcd_216.c: 151: lcd_send_byte(0, LCD_INIT_STRING[i]);
  7739  002A40  5005               	movf	lcd_init@i,w,c
  7740  002A42  0D01               	mullw	1
  7741  002A44  0E0B               	movlw	low _LCD_INIT_STRING
  7742  002A46  24F3               	addwf	prodl,w,c
  7743  002A48  6EF6               	movwf	tblptrl,c
  7744  002A4A  0E0F               	movlw	high _LCD_INIT_STRING
  7745  002A4C  20F4               	addwfc	prodh,w,c
  7746  002A4E  6EF7               	movwf	tblptrh,c
  7747  002A50                     	if	0	;There are less than 3 active tblptr bytes
  7748  002A50                     	endif
  7749  002A50  0008               	tblrd		*
  7750  002A52  CFF5 F003          	movff	tablat,lcd_send_byte@n
  7751  002A56  0E00               	movlw	0
  7752  002A58  ECC5  F017         	call	_lcd_send_byte
  7753                           
  7754                           ;unmc_lcd_216.c: 153: Delay1KTCYx(8000000UL/800000UL);
  7755  002A5C  0E0A               	movlw	10
  7756  002A5E  ECA8  F018         	call	_Delay1KTCYx
  7757  002A62  2A05               	incf	lcd_init@i,f,c
  7758  002A64  0E03               	movlw	3
  7759  002A66  6405               	cpfsgt	lcd_init@i,c
  7760  002A68  D7EB               	goto	l3990
  7761  002A6A  0012               	return	
  7762  002A6C  0012               	return		;funcret
  7763  002A6E                     __end_of_lcd_init:
  7764                           	opt stack 0
  7765                           tblptru	equ	0xFF8
  7766                           tblptrh	equ	0xFF7
  7767                           tblptrl	equ	0xFF6
  7768                           tablat	equ	0xFF5
  7769                           prodh	equ	0xFF4
  7770                           prodl	equ	0xFF3
  7771                           indf0	equ	0xFEF
  7772                           postinc0	equ	0xFEE
  7773                           fsr0h	equ	0xFEA
  7774                           fsr0l	equ	0xFE9
  7775                           wreg	equ	0xFE8
  7776                           postdec1	equ	0xFE5
  7777                           fsr1l	equ	0xFE1
  7778                           indf2	equ	0xFDF
  7779                           postinc2	equ	0xFDE
  7780                           postdec2	equ	0xFDD
  7781                           fsr2h	equ	0xFDA
  7782                           fsr2l	equ	0xFD9
  7783                           status	equ	0xFD8
  7784                           
  7785 ;; *************** function _Delay1KTCYx *****************
  7786 ;; Defined at:
  7787 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\d1ktcyx.c"
  7788 ;; Parameters:    Size  Location     Type
  7789 ;;  unit            1    wreg     unsigned char 
  7790 ;; Auto vars:     Size  Location     Type
  7791 ;;  unit            1    0[COMRAM] unsigned char 
  7792 ;; Return value:  Size  Location     Type
  7793 ;;		None               void
  7794 ;; Registers used:
  7795 ;;		wreg
  7796 ;; Tracked objects:
  7797 ;;		On entry : 0/0
  7798 ;;		On exit  : 0/0
  7799 ;;		Unchanged: 0/0
  7800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7802 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7804 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7805 ;;Total ram usage:        1 bytes
  7806 ;; Hardware stack levels used:    1
  7807 ;; This function calls:
  7808 ;;		Nothing
  7809 ;; This function is called by:
  7810 ;;		_lcd_init
  7811 ;;		_DelayPORXLCD
  7812 ;; This function uses a non-reentrant model
  7813 ;;
  7814                           
  7815                           	psect	text46
  7816  003150                     __ptext46:
  7817                           	opt stack 0
  7818  003150                     _Delay1KTCYx:
  7819                           	opt stack 28
  7820                           
  7821                           ;incstack = 0
  7822                           ;Delay1KTCYx@unit stored from wreg
  7823  003150  6E01               	movwf	Delay1KTCYx@unit,c
  7824  003152  0EFA               	movlw	250
  7825  003154                     u4437:
  7826  003154  F000               	nop	
  7827  003156  2EE8               	decfsz	wreg,f,c
  7828  003158  D7FD               	goto	u4437
  7829  00315A  2E01               	decfsz	Delay1KTCYx@unit,f,c
  7830  00315C  D7FA               	goto	l3708
  7831  00315E  0012               	return	
  7832  003160  0012               	return		;funcret
  7833  003162                     __end_of_Delay1KTCYx:
  7834                           	opt stack 0
  7835                           tblptru	equ	0xFF8
  7836                           tblptrh	equ	0xFF7
  7837                           tblptrl	equ	0xFF6
  7838                           tablat	equ	0xFF5
  7839                           prodh	equ	0xFF4
  7840                           prodl	equ	0xFF3
  7841                           indf0	equ	0xFEF
  7842                           postinc0	equ	0xFEE
  7843                           fsr0h	equ	0xFEA
  7844                           fsr0l	equ	0xFE9
  7845                           wreg	equ	0xFE8
  7846                           postdec1	equ	0xFE5
  7847                           fsr1l	equ	0xFE1
  7848                           indf2	equ	0xFDF
  7849                           postinc2	equ	0xFDE
  7850                           postdec2	equ	0xFDD
  7851                           fsr2h	equ	0xFDA
  7852                           fsr2l	equ	0xFD9
  7853                           status	equ	0xFD8
  7854                           
  7855 ;; *************** function _lcd_comand *****************
  7856 ;; Defined at:
  7857 ;;		line 189 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  7858 ;; Parameters:    Size  Location     Type
  7859 ;;  d               1    wreg     unsigned char 
  7860 ;; Auto vars:     Size  Location     Type
  7861 ;;  d               1    4[COMRAM] unsigned char 
  7862 ;; Return value:  Size  Location     Type
  7863 ;;		None               void
  7864 ;; Registers used:
  7865 ;;		wreg, status,2, status,0, cstack
  7866 ;; Tracked objects:
  7867 ;;		On entry : 0/0
  7868 ;;		On exit  : 0/0
  7869 ;;		Unchanged: 0/0
  7870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7872 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7874 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7875 ;;Total ram usage:        1 bytes
  7876 ;; Hardware stack levels used:    1
  7877 ;; Hardware stack levels required when called:    2
  7878 ;; This function calls:
  7879 ;;		_lcd_send_byte
  7880 ;; This function is called by:
  7881 ;;		_caratula
  7882 ;;		_Setup
  7883 ;;		_clear
  7884 ;; This function uses a non-reentrant model
  7885 ;;
  7886                           
  7887                           	psect	text47
  7888  003196                     __ptext47:
  7889                           	opt stack 0
  7890  003196                     _lcd_comand:
  7891                           	opt stack 26
  7892                           
  7893                           ;incstack = 0
  7894                           ;lcd_comand@d stored from wreg
  7895  003196  6E05               	movwf	lcd_comand@d,c
  7896                           
  7897                           ;unmc_lcd_216.c: 190: lcd_send_byte(0,d);
  7898  003198  C005  F003         	movff	lcd_comand@d,lcd_send_byte@n
  7899  00319C  0E00               	movlw	0
  7900  00319E  ECC5  F017         	call	_lcd_send_byte
  7901  0031A2  0012               	return		;funcret
  7902  0031A4                     __end_of_lcd_comand:
  7903                           	opt stack 0
  7904                           tblptru	equ	0xFF8
  7905                           tblptrh	equ	0xFF7
  7906                           tblptrl	equ	0xFF6
  7907                           tablat	equ	0xFF5
  7908                           prodh	equ	0xFF4
  7909                           prodl	equ	0xFF3
  7910                           indf0	equ	0xFEF
  7911                           postinc0	equ	0xFEE
  7912                           fsr0h	equ	0xFEA
  7913                           fsr0l	equ	0xFE9
  7914                           wreg	equ	0xFE8
  7915                           postdec1	equ	0xFE5
  7916                           fsr1l	equ	0xFE1
  7917                           indf2	equ	0xFDF
  7918                           postinc2	equ	0xFDE
  7919                           postdec2	equ	0xFDD
  7920                           fsr2h	equ	0xFDA
  7921                           fsr2l	equ	0xFD9
  7922                           status	equ	0xFD8
  7923                           
  7924 ;; *************** function _lcd_send_byte *****************
  7925 ;; Defined at:
  7926 ;;		line 86 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  7927 ;; Parameters:    Size  Location     Type
  7928 ;;  address         1    wreg     unsigned char 
  7929 ;;  n               1    2[COMRAM] unsigned char 
  7930 ;; Auto vars:     Size  Location     Type
  7931 ;;  address         1    3[COMRAM] unsigned char 
  7932 ;; Return value:  Size  Location     Type
  7933 ;;		None               void
  7934 ;; Registers used:
  7935 ;;		wreg, status,2, status,0, cstack
  7936 ;; Tracked objects:
  7937 ;;		On entry : 0/0
  7938 ;;		On exit  : 0/0
  7939 ;;		Unchanged: 0/0
  7940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7941 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7942 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7944 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7945 ;;Total ram usage:        2 bytes
  7946 ;; Hardware stack levels used:    1
  7947 ;; Hardware stack levels required when called:    1
  7948 ;; This function calls:
  7949 ;;		_Delay100TCYx
  7950 ;;		_lcd_send_nibble
  7951 ;; This function is called by:
  7952 ;;		_lcd_init
  7953 ;;		_lcd_gotoxy
  7954 ;;		_lcd_putc
  7955 ;;		_lcd_comand
  7956 ;;		_lcd_setcursor_vb
  7957 ;; This function uses a non-reentrant model
  7958 ;;
  7959                           
  7960                           	psect	text48
  7961  002F8A                     __ptext48:
  7962                           	opt stack 0
  7963  002F8A                     _lcd_send_byte:
  7964                           	opt stack 25
  7965                           
  7966                           ;incstack = 0
  7967                           ;lcd_send_byte@address stored from wreg
  7968  002F8A  6E04               	movwf	lcd_send_byte@address,c
  7969                           
  7970                           ;unmc_lcd_216.c: 88: LATBbits.LATB3=0;
  7971  002F8C  968A               	bcf	3978,3,c	;volatile
  7972                           
  7973                           ;unmc_lcd_216.c: 93: Delay100TCYx(8000000UL/4000000UL);
  7974  002F8E  0E02               	movlw	2
  7975  002F90  ECB1  F018         	call	_Delay100TCYx
  7976                           
  7977                           ;unmc_lcd_216.c: 96: TRISBbits.TRISB4=0;
  7978  002F94  9893               	bcf	3987,4,c	;volatile
  7979                           
  7980                           ;unmc_lcd_216.c: 97: TRISBbits.TRISB5=0;
  7981  002F96  9A93               	bcf	3987,5,c	;volatile
  7982                           
  7983                           ;unmc_lcd_216.c: 98: TRISBbits.TRISB6=0;
  7984  002F98  9C93               	bcf	3987,6,c	;volatile
  7985                           
  7986                           ;unmc_lcd_216.c: 99: TRISBbits.TRISB7=0;
  7987  002F9A  9E93               	bcf	3987,7,c	;volatile
  7988                           
  7989                           ;unmc_lcd_216.c: 101: if(address)
  7990  002F9C  5004               	movf	lcd_send_byte@address,w,c
  7991  002F9E  B4D8               	btfsc	status,2,c
  7992  002FA0  D002               	goto	l75
  7993                           
  7994                           ;unmc_lcd_216.c: 102: LATBbits.LATB3=1;
  7995  002FA2  868A               	bsf	3978,3,c	;volatile
  7996  002FA4  D001               	goto	l76
  7997  002FA6                     l75:
  7998                           
  7999                           ;unmc_lcd_216.c: 103: else
  8000                           ;unmc_lcd_216.c: 104: LATBbits.LATB3=0;
  8001  002FA6  968A               	bcf	3978,3,c	;volatile
  8002  002FA8                     l76:
  8003                           
  8004                           ;unmc_lcd_216.c: 106: __nop();
  8005  002FA8  F000               	nop	
  8006                           
  8007                           ;unmc_lcd_216.c: 113: lcd_send_nibble(n >> 4);
  8008  002FAA  3803               	swapf	lcd_send_byte@n,w,c
  8009  002FAC  0B0F               	andlw	15
  8010  002FAE  ECB4  F015         	call	_lcd_send_nibble
  8011                           
  8012                           ;unmc_lcd_216.c: 114: lcd_send_nibble(n & 0xf);
  8013  002FB2  5003               	movf	lcd_send_byte@n,w,c
  8014  002FB4  0B0F               	andlw	15
  8015  002FB6  ECB4  F015         	call	_lcd_send_nibble
  8016  002FBA  0012               	return		;funcret
  8017  002FBC                     __end_of_lcd_send_byte:
  8018                           	opt stack 0
  8019                           tblptru	equ	0xFF8
  8020                           tblptrh	equ	0xFF7
  8021                           tblptrl	equ	0xFF6
  8022                           tablat	equ	0xFF5
  8023                           prodh	equ	0xFF4
  8024                           prodl	equ	0xFF3
  8025                           indf0	equ	0xFEF
  8026                           postinc0	equ	0xFEE
  8027                           fsr0h	equ	0xFEA
  8028                           fsr0l	equ	0xFE9
  8029                           wreg	equ	0xFE8
  8030                           postdec1	equ	0xFE5
  8031                           fsr1l	equ	0xFE1
  8032                           indf2	equ	0xFDF
  8033                           postinc2	equ	0xFDE
  8034                           postdec2	equ	0xFDD
  8035                           fsr2h	equ	0xFDA
  8036                           fsr2l	equ	0xFD9
  8037                           status	equ	0xFD8
  8038                           
  8039 ;; *************** function _lcd_send_nibble *****************
  8040 ;; Defined at:
  8041 ;;		line 25 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  8042 ;; Parameters:    Size  Location     Type
  8043 ;;  nibble          1    wreg     unsigned char 
  8044 ;; Auto vars:     Size  Location     Type
  8045 ;;  nibble          1    1[COMRAM] unsigned char 
  8046 ;; Return value:  Size  Location     Type
  8047 ;;		None               void
  8048 ;; Registers used:
  8049 ;;		wreg, status,2, status,0
  8050 ;; Tracked objects:
  8051 ;;		On entry : 0/0
  8052 ;;		On exit  : 0/0
  8053 ;;		Unchanged: 0/0
  8054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8056 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8057 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8058 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8059 ;;Total ram usage:        2 bytes
  8060 ;; Hardware stack levels used:    1
  8061 ;; This function calls:
  8062 ;;		Nothing
  8063 ;; This function is called by:
  8064 ;;		_lcd_send_byte
  8065 ;;		_lcd_init
  8066 ;; This function uses a non-reentrant model
  8067 ;;
  8068                           
  8069                           	psect	text49
  8070  002B68                     __ptext49:
  8071                           	opt stack 0
  8072  002B68                     _lcd_send_nibble:
  8073                           	opt stack 25
  8074                           
  8075                           ;incstack = 0
  8076                           ;lcd_send_nibble@nibble stored from wreg
  8077  002B68  6E02               	movwf	lcd_send_nibble@nibble,c
  8078                           
  8079                           ;unmc_lcd_216.c: 27: LATBbits.LATB4=!!(nibble & 0x01);
  8080  002B6A  A002               	btfss	lcd_send_nibble@nibble,0,c
  8081  002B6C  D003               	goto	u2190
  8082  002B6E  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  8083  002B70  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  8084  002B72  D001               	goto	u2208
  8085  002B74                     u2190:
  8086  002B74  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  8087  002B76                     u2208:
  8088  002B76  3A01               	swapf	??_lcd_send_nibble,f,c
  8089  002B78  508A               	movf	3978,w,c	;volatile
  8090  002B7A  1801               	xorwf	??_lcd_send_nibble,w,c
  8091  002B7C  0BEF               	andlw	-17
  8092  002B7E  1801               	xorwf	??_lcd_send_nibble,w,c
  8093  002B80  6E8A               	movwf	3978,c	;volatile
  8094                           
  8095                           ;unmc_lcd_216.c: 28: LATBbits.LATB5=!!(nibble & 0x02);
  8096  002B82  A202               	btfss	lcd_send_nibble@nibble,1,c
  8097  002B84  D003               	goto	u2210
  8098  002B86  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  8099  002B88  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  8100  002B8A  D001               	goto	u2228
  8101  002B8C                     u2210:
  8102  002B8C  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  8103  002B8E                     u2228:
  8104  002B8E  3A01               	swapf	??_lcd_send_nibble,f,c
  8105  002B90  4601               	rlncf	??_lcd_send_nibble,f,c
  8106  002B92  508A               	movf	3978,w,c	;volatile
  8107  002B94  1801               	xorwf	??_lcd_send_nibble,w,c
  8108  002B96  0BDF               	andlw	-33
  8109  002B98  1801               	xorwf	??_lcd_send_nibble,w,c
  8110  002B9A  6E8A               	movwf	3978,c	;volatile
  8111                           
  8112                           ;unmc_lcd_216.c: 29: LATBbits.LATB6=!!(nibble & 0x04);
  8113  002B9C  A402               	btfss	lcd_send_nibble@nibble,2,c
  8114  002B9E  D003               	goto	u2230
  8115  002BA0  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  8116  002BA2  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  8117  002BA4  D001               	goto	u2248
  8118  002BA6                     u2230:
  8119  002BA6  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  8120  002BA8                     u2248:
  8121  002BA8  3A01               	swapf	??_lcd_send_nibble,f,c
  8122  002BAA  4601               	rlncf	??_lcd_send_nibble,f,c
  8123  002BAC  4601               	rlncf	??_lcd_send_nibble,f,c
  8124  002BAE  508A               	movf	3978,w,c	;volatile
  8125  002BB0  1801               	xorwf	??_lcd_send_nibble,w,c
  8126  002BB2  0BBF               	andlw	-65
  8127  002BB4  1801               	xorwf	??_lcd_send_nibble,w,c
  8128  002BB6  6E8A               	movwf	3978,c	;volatile
  8129                           
  8130                           ;unmc_lcd_216.c: 30: LATBbits.LATB7=!!(nibble & 0x08);
  8131  002BB8  A602               	btfss	lcd_send_nibble@nibble,3,c
  8132  002BBA  D003               	goto	u2250
  8133  002BBC  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  8134  002BBE  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  8135  002BC0  D001               	goto	u2268
  8136  002BC2                     u2250:
  8137  002BC2  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  8138  002BC4                     u2268:
  8139  002BC4  3201               	rrcf	??_lcd_send_nibble,f,c
  8140  002BC6  3201               	rrcf	??_lcd_send_nibble,f,c
  8141  002BC8  508A               	movf	3978,w,c	;volatile
  8142  002BCA  1801               	xorwf	??_lcd_send_nibble,w,c
  8143  002BCC  0B7F               	andlw	-129
  8144  002BCE  1801               	xorwf	??_lcd_send_nibble,w,c
  8145  002BD0  6E8A               	movwf	3978,c	;volatile
  8146                           
  8147                           ;unmc_lcd_216.c: 32: __nop();
  8148  002BD2  F000               	nop	
  8149                           
  8150                           ;unmc_lcd_216.c: 33: LATBbits.LATB2=1;
  8151  002BD4  848A               	bsf	3978,2,c	;volatile
  8152                           
  8153                           ;unmc_lcd_216.c: 34: __nop();__nop();
  8154  002BD6  F000               	nop	
  8155  002BD8  F000               	nop	
  8156                           
  8157                           ;unmc_lcd_216.c: 35: LATBbits.LATB2=0;
  8158  002BDA  948A               	bcf	3978,2,c	;volatile
  8159  002BDC  0012               	return		;funcret
  8160  002BDE                     __end_of_lcd_send_nibble:
  8161                           	opt stack 0
  8162                           tblptru	equ	0xFF8
  8163                           tblptrh	equ	0xFF7
  8164                           tblptrl	equ	0xFF6
  8165                           tablat	equ	0xFF5
  8166                           prodh	equ	0xFF4
  8167                           prodl	equ	0xFF3
  8168                           indf0	equ	0xFEF
  8169                           postinc0	equ	0xFEE
  8170                           fsr0h	equ	0xFEA
  8171                           fsr0l	equ	0xFE9
  8172                           wreg	equ	0xFE8
  8173                           postdec1	equ	0xFE5
  8174                           fsr1l	equ	0xFE1
  8175                           indf2	equ	0xFDF
  8176                           postinc2	equ	0xFDE
  8177                           postdec2	equ	0xFDD
  8178                           fsr2h	equ	0xFDA
  8179                           fsr2l	equ	0xFD9
  8180                           status	equ	0xFD8
  8181                           
  8182 ;; *************** function _Delay100TCYx *****************
  8183 ;; Defined at:
  8184 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\d100tcyx.c"
  8185 ;; Parameters:    Size  Location     Type
  8186 ;;  unit            1    wreg     unsigned char 
  8187 ;; Auto vars:     Size  Location     Type
  8188 ;;  unit            1    0[COMRAM] unsigned char 
  8189 ;; Return value:  Size  Location     Type
  8190 ;;		None               void
  8191 ;; Registers used:
  8192 ;;		wreg
  8193 ;; Tracked objects:
  8194 ;;		On entry : 0/0
  8195 ;;		On exit  : 0/0
  8196 ;;		Unchanged: 0/0
  8197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8199 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8201 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8202 ;;Total ram usage:        1 bytes
  8203 ;; Hardware stack levels used:    1
  8204 ;; This function calls:
  8205 ;;		Nothing
  8206 ;; This function is called by:
  8207 ;;		_lcd_send_byte
  8208 ;; This function uses a non-reentrant model
  8209 ;;
  8210                           
  8211                           	psect	text50
  8212  003162                     __ptext50:
  8213                           	opt stack 0
  8214  003162                     _Delay100TCYx:
  8215                           	opt stack 25
  8216                           
  8217                           ;incstack = 0
  8218                           ;Delay100TCYx@unit stored from wreg
  8219  003162  6E01               	movwf	Delay100TCYx@unit,c
  8220  003164  0E21               	movlw	33
  8221  003166                     u4447:
  8222  003166  2EE8               	decfsz	wreg,f,c
  8223  003168  D7FE               	goto	u4447
  8224  00316A  F000               	nop	
  8225  00316C  2E01               	decfsz	Delay100TCYx@unit,f,c
  8226  00316E  D7FA               	goto	l2906
  8227  003170  0012               	return	
  8228  003172  0012               	return		;funcret
  8229  003174                     __end_of_Delay100TCYx:
  8230                           	opt stack 0
  8231                           tblptru	equ	0xFF8
  8232                           tblptrh	equ	0xFF7
  8233                           tblptrl	equ	0xFF6
  8234                           tablat	equ	0xFF5
  8235                           prodh	equ	0xFF4
  8236                           prodl	equ	0xFF3
  8237                           indf0	equ	0xFEF
  8238                           postinc0	equ	0xFEE
  8239                           fsr0h	equ	0xFEA
  8240                           fsr0l	equ	0xFE9
  8241                           wreg	equ	0xFE8
  8242                           postdec1	equ	0xFE5
  8243                           fsr1l	equ	0xFE1
  8244                           indf2	equ	0xFDF
  8245                           postinc2	equ	0xFDE
  8246                           postdec2	equ	0xFDD
  8247                           fsr2h	equ	0xFDA
  8248                           fsr2l	equ	0xFD9
  8249                           status	equ	0xFD8
  8250                           
  8251 ;; *************** function _Write_RTC *****************
  8252 ;; Defined at:
  8253 ;;		line 22 in file "../../Program Files/Unimic/unmc_01/sources/unmc_rtcc_01.c"
  8254 ;; Parameters:    Size  Location     Type
  8255 ;;		None
  8256 ;; Auto vars:     Size  Location     Type
  8257 ;;		None
  8258 ;; Return value:  Size  Location     Type
  8259 ;;                  2   26[None  ] int 
  8260 ;; Registers used:
  8261 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8262 ;; Tracked objects:
  8263 ;;		On entry : 0/0
  8264 ;;		On exit  : 0/0
  8265 ;;		Unchanged: 0/0
  8266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8270 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8271 ;;Total ram usage:        0 bytes
  8272 ;; Hardware stack levels used:    1
  8273 ;; Hardware stack levels required when called:    2
  8274 ;; This function calls:
  8275 ;;		_RtccWrOn
  8276 ;;		_RtccWriteDate
  8277 ;;		_RtccWriteTime
  8278 ;;		___awdiv
  8279 ;; This function is called by:
  8280 ;;		_Setup
  8281 ;;		_setClock
  8282 ;; This function uses a non-reentrant model
  8283 ;;
  8284                           
  8285                           	psect	text51
  8286  00188C                     __ptext51:
  8287                           	opt stack 0
  8288  00188C                     _Write_RTC:
  8289                           	opt stack 27
  8290                           
  8291                           ;unmc_rtcc_01.c: 24: RtccWrOn();
  8292                           
  8293                           ;incstack = 0
  8294  00188C  ECBA  F018         	call	_RtccWrOn	;wreg free
  8295                           
  8296                           ;unmc_rtcc_01.c: 26: PIE3bits.RTCCIE=1;
  8297  001890  80A3               	bsf	4003,0,c	;volatile
  8298                           
  8299                           ;unmc_rtcc_01.c: 27: segundo_d=segundo/10;
  8300  001892  C08A  F001         	movff	_segundo,___awdiv@dividend
  8301  001896  C08B  F002         	movff	_segundo+1,___awdiv@dividend+1
  8302  00189A  0E00               	movlw	0
  8303  00189C  6E04               	movwf	___awdiv@divisor+1,c
  8304  00189E  0E0A               	movlw	10
  8305  0018A0  6E03               	movwf	___awdiv@divisor,c
  8306  0018A2  EC21  F014         	call	___awdiv	;wreg free
  8307  0018A6  5001               	movf	?___awdiv,w,c
  8308  0018A8  0100               	movlb	0	; () banked
  8309  0018AA  6FDA               	movwf	_segundo_d& (0+255),b
  8310                           
  8311                           ; BSR set to: 0
  8312                           ;unmc_rtcc_01.c: 28: segundo_u=segundo-segundo_d*10;
  8313  0018AC  0100               	movlb	0	; () banked
  8314  0018AE  51DA               	movf	_segundo_d& (0+255),w,b
  8315  0018B0  0D0A               	mullw	10
  8316  0018B2  50F3               	movf	prodl,w,c
  8317  0018B4  0800               	sublw	0
  8318  0018B6  0100               	movlb	0	; () banked
  8319  0018B8  258A               	addwf	_segundo& (0+255),w,b
  8320  0018BA  0100               	movlb	0	; () banked
  8321  0018BC  6FDB               	movwf	_segundo_u& (0+255),b
  8322                           
  8323                           ; BSR set to: 0
  8324                           ;unmc_rtcc_01.c: 29: RtccTime.f.sec =segundo_d*16+segundo_u;
  8325  0018BE  0100               	movlb	0	; () banked
  8326  0018C0  51DA               	movf	_segundo_d& (0+255),w,b
  8327  0018C2  0D10               	mullw	16
  8328  0018C4  50F3               	movf	prodl,w,c
  8329  0018C6  0100               	movlb	0	; () banked
  8330  0018C8  25DB               	addwf	_segundo_u& (0+255),w,b
  8331  0018CA  0100               	movlb	0	; () banked
  8332  0018CC  6FA5               	movwf	(_RtccTime+1)& (0+255),b
  8333                           
  8334                           ; BSR set to: 0
  8335                           ;unmc_rtcc_01.c: 30: minuto_d=minuto/10;
  8336  0018CE  C0C9  F001         	movff	_minuto,___awdiv@dividend
  8337  0018D2  C0CA  F002         	movff	_minuto+1,___awdiv@dividend+1
  8338  0018D6  0E00               	movlw	0
  8339  0018D8  6E04               	movwf	___awdiv@divisor+1,c
  8340  0018DA  0E0A               	movlw	10
  8341  0018DC  6E03               	movwf	___awdiv@divisor,c
  8342  0018DE  EC21  F014         	call	___awdiv	;wreg free
  8343  0018E2  5001               	movf	?___awdiv,w,c
  8344  0018E4  0100               	movlb	0	; () banked
  8345  0018E6  6FD8               	movwf	_minuto_d& (0+255),b
  8346                           
  8347                           ; BSR set to: 0
  8348                           ;unmc_rtcc_01.c: 31: minuto_u=minuto-minuto_d*10;
  8349  0018E8  0100               	movlb	0	; () banked
  8350  0018EA  51D8               	movf	_minuto_d& (0+255),w,b
  8351  0018EC  0D0A               	mullw	10
  8352  0018EE  50F3               	movf	prodl,w,c
  8353  0018F0  0800               	sublw	0
  8354  0018F2  0100               	movlb	0	; () banked
  8355  0018F4  25C9               	addwf	_minuto& (0+255),w,b
  8356  0018F6  0100               	movlb	0	; () banked
  8357  0018F8  6FD9               	movwf	_minuto_u& (0+255),b
  8358                           
  8359                           ; BSR set to: 0
  8360                           ;unmc_rtcc_01.c: 32: RtccTime.f.min =minuto_d*16+minuto_u;
  8361  0018FA  0100               	movlb	0	; () banked
  8362  0018FC  51D8               	movf	_minuto_d& (0+255),w,b
  8363  0018FE  0D10               	mullw	16
  8364  001900  50F3               	movf	prodl,w,c
  8365  001902  0100               	movlb	0	; () banked
  8366  001904  25D9               	addwf	_minuto_u& (0+255),w,b
  8367  001906  0100               	movlb	0	; () banked
  8368  001908  6FA6               	movwf	(_RtccTime+2)& (0+255),b
  8369                           
  8370                           ; BSR set to: 0
  8371                           ;unmc_rtcc_01.c: 33: hora_d=hora/10;
  8372  00190A  C0C5  F001         	movff	_hora,___awdiv@dividend
  8373  00190E  C0C6  F002         	movff	_hora+1,___awdiv@dividend+1
  8374  001912  0E00               	movlw	0
  8375  001914  6E04               	movwf	___awdiv@divisor+1,c
  8376  001916  0E0A               	movlw	10
  8377  001918  6E03               	movwf	___awdiv@divisor,c
  8378  00191A  EC21  F014         	call	___awdiv	;wreg free
  8379  00191E  5001               	movf	?___awdiv,w,c
  8380  001920  0100               	movlb	0	; () banked
  8381  001922  6FD4               	movwf	_hora_d& (0+255),b
  8382                           
  8383                           ; BSR set to: 0
  8384                           ;unmc_rtcc_01.c: 34: hora_u=hora-hora_d*10;
  8385  001924  0100               	movlb	0	; () banked
  8386  001926  51D4               	movf	_hora_d& (0+255),w,b
  8387  001928  0D0A               	mullw	10
  8388  00192A  50F3               	movf	prodl,w,c
  8389  00192C  0800               	sublw	0
  8390  00192E  0100               	movlb	0	; () banked
  8391  001930  25C5               	addwf	_hora& (0+255),w,b
  8392  001932  0100               	movlb	0	; () banked
  8393  001934  6FD5               	movwf	_hora_u& (0+255),b
  8394                           
  8395                           ; BSR set to: 0
  8396                           ;unmc_rtcc_01.c: 35: RtccTime.f.hour=hora_d*16+hora_u;
  8397  001936  0100               	movlb	0	; () banked
  8398  001938  51D4               	movf	_hora_d& (0+255),w,b
  8399  00193A  0D10               	mullw	16
  8400  00193C  50F3               	movf	prodl,w,c
  8401  00193E  0100               	movlb	0	; () banked
  8402  001940  25D5               	addwf	_hora_u& (0+255),w,b
  8403  001942  0100               	movlb	0	; () banked
  8404  001944  6FA7               	movwf	(_RtccTime+3)& (0+255),b
  8405                           
  8406                           ; BSR set to: 0
  8407                           ;unmc_rtcc_01.c: 36: anio_d=anio/10;
  8408  001946  C0BF  F001         	movff	_anio,___awdiv@dividend
  8409  00194A  C0C0  F002         	movff	_anio+1,___awdiv@dividend+1
  8410  00194E  0E00               	movlw	0
  8411  001950  6E04               	movwf	___awdiv@divisor+1,c
  8412  001952  0E0A               	movlw	10
  8413  001954  6E03               	movwf	___awdiv@divisor,c
  8414  001956  EC21  F014         	call	___awdiv	;wreg free
  8415  00195A  5001               	movf	?___awdiv,w,c
  8416  00195C  0100               	movlb	0	; () banked
  8417  00195E  6FCF               	movwf	_anio_d& (0+255),b
  8418                           
  8419                           ; BSR set to: 0
  8420                           ;unmc_rtcc_01.c: 37: anio_u=anio-anio_d*10;
  8421  001960  0100               	movlb	0	; () banked
  8422  001962  51CF               	movf	_anio_d& (0+255),w,b
  8423  001964  0D0A               	mullw	10
  8424  001966  50F3               	movf	prodl,w,c
  8425  001968  0800               	sublw	0
  8426  00196A  0100               	movlb	0	; () banked
  8427  00196C  25BF               	addwf	_anio& (0+255),w,b
  8428  00196E  0100               	movlb	0	; () banked
  8429  001970  6FD0               	movwf	_anio_u& (0+255),b
  8430                           
  8431                           ; BSR set to: 0
  8432                           ;unmc_rtcc_01.c: 38: RtccDate.f.year=anio_d*16+anio_u;
  8433  001972  0100               	movlb	0	; () banked
  8434  001974  51CF               	movf	_anio_d& (0+255),w,b
  8435  001976  0D10               	mullw	16
  8436  001978  50F3               	movf	prodl,w,c
  8437  00197A  0100               	movlb	0	; () banked
  8438  00197C  25D0               	addwf	_anio_u& (0+255),w,b
  8439  00197E  0100               	movlb	0	; () banked
  8440  001980  6FA3               	movwf	(_RtccDate+3)& (0+255),b
  8441                           
  8442                           ; BSR set to: 0
  8443                           ;unmc_rtcc_01.c: 39: mes_d=mes/10;
  8444  001982  C0C7  F001         	movff	_mes,___awdiv@dividend
  8445  001986  C0C8  F002         	movff	_mes+1,___awdiv@dividend+1
  8446  00198A  0E00               	movlw	0
  8447  00198C  6E04               	movwf	___awdiv@divisor+1,c
  8448  00198E  0E0A               	movlw	10
  8449  001990  6E03               	movwf	___awdiv@divisor,c
  8450  001992  EC21  F014         	call	___awdiv	;wreg free
  8451  001996  5001               	movf	?___awdiv,w,c
  8452  001998  0100               	movlb	0	; () banked
  8453  00199A  6FD6               	movwf	_mes_d& (0+255),b
  8454                           
  8455                           ; BSR set to: 0
  8456                           ;unmc_rtcc_01.c: 40: mes_u=mes-mes_d*10;
  8457  00199C  0100               	movlb	0	; () banked
  8458  00199E  51D6               	movf	_mes_d& (0+255),w,b
  8459  0019A0  0D0A               	mullw	10
  8460  0019A2  50F3               	movf	prodl,w,c
  8461  0019A4  0800               	sublw	0
  8462  0019A6  0100               	movlb	0	; () banked
  8463  0019A8  25C7               	addwf	_mes& (0+255),w,b
  8464  0019AA  0100               	movlb	0	; () banked
  8465  0019AC  6FD7               	movwf	_mes_u& (0+255),b
  8466                           
  8467                           ; BSR set to: 0
  8468                           ;unmc_rtcc_01.c: 41: RtccDate.f.mon=mes_d*16+mes_u;
  8469  0019AE  0100               	movlb	0	; () banked
  8470  0019B0  51D6               	movf	_mes_d& (0+255),w,b
  8471  0019B2  0D10               	mullw	16
  8472  0019B4  50F3               	movf	prodl,w,c
  8473  0019B6  0100               	movlb	0	; () banked
  8474  0019B8  25D7               	addwf	_mes_u& (0+255),w,b
  8475  0019BA  0100               	movlb	0	; () banked
  8476  0019BC  6FA2               	movwf	(_RtccDate+2)& (0+255),b
  8477                           
  8478                           ; BSR set to: 0
  8479                           ;unmc_rtcc_01.c: 42: fecha_d=dia/10;
  8480  0019BE  C0C1  F001         	movff	_dia,___awdiv@dividend
  8481  0019C2  C0C2  F002         	movff	_dia+1,___awdiv@dividend+1
  8482  0019C6  0E00               	movlw	0
  8483  0019C8  6E04               	movwf	___awdiv@divisor+1,c
  8484  0019CA  0E0A               	movlw	10
  8485  0019CC  6E03               	movwf	___awdiv@divisor,c
  8486  0019CE  EC21  F014         	call	___awdiv	;wreg free
  8487  0019D2  5001               	movf	?___awdiv,w,c
  8488  0019D4  0100               	movlb	0	; () banked
  8489  0019D6  6FD2               	movwf	_fecha_d& (0+255),b
  8490                           
  8491                           ; BSR set to: 0
  8492                           ;unmc_rtcc_01.c: 43: fecha_u=dia-fecha_d*10;
  8493  0019D8  0100               	movlb	0	; () banked
  8494  0019DA  51D2               	movf	_fecha_d& (0+255),w,b
  8495  0019DC  0D0A               	mullw	10
  8496  0019DE  50F3               	movf	prodl,w,c
  8497  0019E0  0800               	sublw	0
  8498  0019E2  0100               	movlb	0	; () banked
  8499  0019E4  25C1               	addwf	_dia& (0+255),w,b
  8500  0019E6  0100               	movlb	0	; () banked
  8501  0019E8  6FD3               	movwf	_fecha_u& (0+255),b
  8502                           
  8503                           ; BSR set to: 0
  8504                           ;unmc_rtcc_01.c: 44: RtccDate.f.mday=fecha_d*16+fecha_u;
  8505  0019EA  0100               	movlb	0	; () banked
  8506  0019EC  51D2               	movf	_fecha_d& (0+255),w,b
  8507  0019EE  0D10               	mullw	16
  8508  0019F0  50F3               	movf	prodl,w,c
  8509  0019F2  0100               	movlb	0	; () banked
  8510  0019F4  25D3               	addwf	_fecha_u& (0+255),w,b
  8511  0019F6  0100               	movlb	0	; () banked
  8512  0019F8  6FA1               	movwf	(_RtccDate+1)& (0+255),b
  8513                           
  8514                           ; BSR set to: 0
  8515                           ;unmc_rtcc_01.c: 45: dia_semana=diasem;
  8516  0019FA  C0C3  F0D1         	movff	_diasem,_dia_semana
  8517                           
  8518                           ; BSR set to: 0
  8519                           ;unmc_rtcc_01.c: 46: RtccDate.f.wday =diasem;
  8520  0019FE  C0C3  F0A0         	movff	_diasem,_RtccDate
  8521                           
  8522                           ; BSR set to: 0
  8523                           ;unmc_rtcc_01.c: 47: RtccWriteTime(&RtccTime,1);
  8524  001A02  0EA4               	movlw	low _RtccTime
  8525  001A04  6E01               	movwf	RtccWriteTime@pTm,c
  8526  001A06  0E00               	movlw	high _RtccTime
  8527  001A08  6E02               	movwf	RtccWriteTime@pTm+1,c
  8528  001A0A  0E01               	movlw	1
  8529  001A0C  6E03               	movwf	RtccWriteTime@di,c
  8530  001A0E  ECBC  F00F         	call	_RtccWriteTime	;wreg free
  8531                           
  8532                           ;unmc_rtcc_01.c: 48: RtccWriteDate(&RtccDate,1);
  8533  001A12  0EA0               	movlw	low _RtccDate
  8534  001A14  6E01               	movwf	RtccWriteDate@pDt,c
  8535  001A16  0E00               	movlw	high _RtccDate
  8536  001A18  6E02               	movwf	RtccWriteDate@pDt+1,c
  8537  001A1A  0E01               	movlw	1
  8538  001A1C  6E03               	movwf	RtccWriteDate@di,c
  8539  001A1E  EC89  F00E         	call	_RtccWriteDate	;wreg free
  8540                           
  8541                           ;unmc_rtcc_01.c: 49: (RTCCFGbits.RTCEN=1);
  8542  001A22  010F               	movlb	15	; () banked
  8543  001A24  8F3F               	bsf	63,7,b	;volatile
  8544                           
  8545                           ; BSR set to: 15
  8546  001A26  0012               	return		;funcret
  8547  001A28                     __end_of_Write_RTC:
  8548                           	opt stack 0
  8549                           tblptru	equ	0xFF8
  8550                           tblptrh	equ	0xFF7
  8551                           tblptrl	equ	0xFF6
  8552                           tablat	equ	0xFF5
  8553                           prodh	equ	0xFF4
  8554                           prodl	equ	0xFF3
  8555                           indf0	equ	0xFEF
  8556                           postinc0	equ	0xFEE
  8557                           fsr0h	equ	0xFEA
  8558                           fsr0l	equ	0xFE9
  8559                           wreg	equ	0xFE8
  8560                           postdec1	equ	0xFE5
  8561                           fsr1l	equ	0xFE1
  8562                           indf2	equ	0xFDF
  8563                           postinc2	equ	0xFDE
  8564                           postdec2	equ	0xFDD
  8565                           fsr2h	equ	0xFDA
  8566                           fsr2l	equ	0xFD9
  8567                           status	equ	0xFD8
  8568                           
  8569 ;; *************** function ___awdiv *****************
  8570 ;; Defined at:
  8571 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\awdiv.c"
  8572 ;; Parameters:    Size  Location     Type
  8573 ;;  dividend        2    0[COMRAM] int 
  8574 ;;  divisor         2    2[COMRAM] int 
  8575 ;; Auto vars:     Size  Location     Type
  8576 ;;  quotient        2    6[COMRAM] int 
  8577 ;;  sign            1    5[COMRAM] unsigned char 
  8578 ;;  counter         1    4[COMRAM] unsigned char 
  8579 ;; Return value:  Size  Location     Type
  8580 ;;                  2    0[COMRAM] int 
  8581 ;; Registers used:
  8582 ;;		wreg, status,2, status,0
  8583 ;; Tracked objects:
  8584 ;;		On entry : 0/0
  8585 ;;		On exit  : 0/0
  8586 ;;		Unchanged: 0/0
  8587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8588 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8589 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8591 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8592 ;;Total ram usage:        8 bytes
  8593 ;; Hardware stack levels used:    1
  8594 ;; This function calls:
  8595 ;;		Nothing
  8596 ;; This function is called by:
  8597 ;;		_Write_RTC
  8598 ;;		__delay_s
  8599 ;; This function uses a non-reentrant model
  8600 ;;
  8601                           
  8602                           	psect	text52
  8603  002842                     __ptext52:
  8604                           	opt stack 0
  8605  002842                     ___awdiv:
  8606                           	opt stack 27
  8607                           
  8608                           ; BSR set to: 15
  8609                           ;incstack = 0
  8610  002842  0E00               	movlw	0
  8611  002844  6E06               	movwf	___awdiv@sign,c
  8612  002846  AE04               	btfss	___awdiv@divisor+1,7,c
  8613  002848  D007               	goto	l3514
  8614  00284A  6C03               	negf	___awdiv@divisor,c
  8615  00284C  1E04               	comf	___awdiv@divisor+1,f,c
  8616  00284E  B0D8               	btfsc	status,0,c
  8617  002850  2A04               	incf	___awdiv@divisor+1,f,c
  8618  002852  0E01               	movlw	1
  8619  002854  6E06               	movwf	___awdiv@sign,c
  8620  002856  D000               	goto	l3514
  8621  002858                     l3514:
  8622  002858  AE02               	btfss	___awdiv@dividend+1,7,c
  8623  00285A  D007               	goto	l3520
  8624  00285C  6C01               	negf	___awdiv@dividend,c
  8625  00285E  1E02               	comf	___awdiv@dividend+1,f,c
  8626  002860  B0D8               	btfsc	status,0,c
  8627  002862  2A02               	incf	___awdiv@dividend+1,f,c
  8628  002864  0E01               	movlw	1
  8629  002866  1A06               	xorwf	___awdiv@sign,f,c
  8630  002868  D000               	goto	l3520
  8631  00286A                     l3520:
  8632  00286A  0E00               	movlw	0
  8633  00286C  6E08               	movwf	___awdiv@quotient+1,c
  8634  00286E  0E00               	movlw	0
  8635  002870  6E07               	movwf	___awdiv@quotient,c
  8636  002872  5003               	movf	___awdiv@divisor,w,c
  8637  002874  1004               	iorwf	___awdiv@divisor+1,w,c
  8638  002876  B4D8               	btfsc	status,2,c
  8639  002878  D021               	goto	l3542
  8640  00287A  0E01               	movlw	1
  8641  00287C  6E05               	movwf	___awdiv@counter,c
  8642  00287E  D005               	goto	l3528
  8643  002880                     l3526:
  8644  002880  90D8               	bcf	status,0,c
  8645  002882  3603               	rlcf	___awdiv@divisor,f,c
  8646  002884  3604               	rlcf	___awdiv@divisor+1,f,c
  8647  002886  2A05               	incf	___awdiv@counter,f,c
  8648  002888  D000               	goto	l3528
  8649  00288A                     l3528:
  8650  00288A  BE04               	btfsc	___awdiv@divisor+1,7,c
  8651  00288C  D002               	goto	l3530
  8652  00288E  D7F8               	goto	l3526
  8653  002890  D000               	goto	l3530
  8654  002892                     l3530:
  8655  002892  90D8               	bcf	status,0,c
  8656  002894  3607               	rlcf	___awdiv@quotient,f,c
  8657  002896  3608               	rlcf	___awdiv@quotient+1,f,c
  8658  002898  5003               	movf	___awdiv@divisor,w,c
  8659  00289A  5C01               	subwf	___awdiv@dividend,w,c
  8660  00289C  5004               	movf	___awdiv@divisor+1,w,c
  8661  00289E  5802               	subwfb	___awdiv@dividend+1,w,c
  8662  0028A0  A0D8               	btfss	status,0,c
  8663  0028A2  D006               	goto	l3538
  8664  0028A4  5003               	movf	___awdiv@divisor,w,c
  8665  0028A6  5E01               	subwf	___awdiv@dividend,f,c
  8666  0028A8  5004               	movf	___awdiv@divisor+1,w,c
  8667  0028AA  5A02               	subwfb	___awdiv@dividend+1,f,c
  8668  0028AC  8007               	bsf	___awdiv@quotient,0,c
  8669  0028AE  D000               	goto	l3538
  8670  0028B0                     l3538:
  8671  0028B0  90D8               	bcf	status,0,c
  8672  0028B2  3204               	rrcf	___awdiv@divisor+1,f,c
  8673  0028B4  3203               	rrcf	___awdiv@divisor,f,c
  8674  0028B6  2E05               	decfsz	___awdiv@counter,f,c
  8675  0028B8  D7EC               	goto	l3530
  8676  0028BA  D000               	goto	l3542
  8677  0028BC                     l3542:
  8678  0028BC  5006               	movf	___awdiv@sign,w,c
  8679  0028BE  B4D8               	btfsc	status,2,c
  8680  0028C0  D005               	goto	l3546
  8681  0028C2  6C07               	negf	___awdiv@quotient,c
  8682  0028C4  1E08               	comf	___awdiv@quotient+1,f,c
  8683  0028C6  B0D8               	btfsc	status,0,c
  8684  0028C8  2A08               	incf	___awdiv@quotient+1,f,c
  8685  0028CA  D000               	goto	l3546
  8686  0028CC                     l3546:
  8687  0028CC  C007  F001         	movff	___awdiv@quotient,?___awdiv
  8688  0028D0  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  8689  0028D4  0012               	return	
  8690  0028D6  0012               	return		;funcret
  8691  0028D8                     __end_of___awdiv:
  8692                           	opt stack 0
  8693                           tblptru	equ	0xFF8
  8694                           tblptrh	equ	0xFF7
  8695                           tblptrl	equ	0xFF6
  8696                           tablat	equ	0xFF5
  8697                           prodh	equ	0xFF4
  8698                           prodl	equ	0xFF3
  8699                           indf0	equ	0xFEF
  8700                           postinc0	equ	0xFEE
  8701                           fsr0h	equ	0xFEA
  8702                           fsr0l	equ	0xFE9
  8703                           wreg	equ	0xFE8
  8704                           postdec1	equ	0xFE5
  8705                           fsr1l	equ	0xFE1
  8706                           indf2	equ	0xFDF
  8707                           postinc2	equ	0xFDE
  8708                           postdec2	equ	0xFDD
  8709                           fsr2h	equ	0xFDA
  8710                           fsr2l	equ	0xFD9
  8711                           status	equ	0xFD8
  8712                           
  8713 ;; *************** function _RtccWriteTime *****************
  8714 ;; Defined at:
  8715 ;;		line 34 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteTime.c"
  8716 ;; Parameters:    Size  Location     Type
  8717 ;;  pTm             2    0[COMRAM] PTR const struct .
  8718 ;;		 -> RtccTime(4), 
  8719 ;;  di              1    2[COMRAM] enum E7121
  8720 ;; Auto vars:     Size  Location     Type
  8721 ;;  tempHourWDay    2    9[COMRAM] struct .
  8722 ;;  tempMinSec      2    7[COMRAM] struct .
  8723 ;;  wasWrEn         1    6[COMRAM] enum E7121
  8724 ;;  wasAlrm         1    5[COMRAM] enum E7121
  8725 ;;  wasOn           1    4[COMRAM] enum E7121
  8726 ;; Return value:  Size  Location     Type
  8727 ;;                  1    wreg      enum E7121
  8728 ;; Registers used:
  8729 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8730 ;; Tracked objects:
  8731 ;;		On entry : 0/0
  8732 ;;		On exit  : 0/0
  8733 ;;		Unchanged: 0/0
  8734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8735 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8736 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8737 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8738 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8739 ;;Total ram usage:       11 bytes
  8740 ;; Hardware stack levels used:    1
  8741 ;; Hardware stack levels required when called:    1
  8742 ;; This function calls:
  8743 ;;		_RtccWrOn
  8744 ;; This function is called by:
  8745 ;;		_Write_RTC
  8746 ;; This function uses a non-reentrant model
  8747 ;;
  8748                           
  8749                           	psect	text53
  8750  001F78                     __ptext53:
  8751                           	opt stack 0
  8752  001F78                     _RtccWriteTime:
  8753                           	opt stack 27
  8754                           
  8755                           ;incstack = 0
  8756  001F78  0E00               	movlw	0
  8757  001F7A  6E06               	movwf	RtccWriteTime@wasAlrm,c
  8758  001F7C  EE20 F002          	lfsr	2,2
  8759  001F80  5001               	movf	RtccWriteTime@pTm,w,c
  8760  001F82  26D9               	addwf	fsr2l,f,c
  8761  001F84  5002               	movf	RtccWriteTime@pTm+1,w,c
  8762  001F86  22DA               	addwfc	fsr2h,f,c
  8763  001F88  0E5A               	movlw	90
  8764  001F8A  60DF               	cpfslt	indf2,c
  8765  001F8C  0012               	return	
  8766  001F8E  EE20 F001          	lfsr	2,1
  8767  001F92  5001               	movf	RtccWriteTime@pTm,w,c
  8768  001F94  26D9               	addwf	fsr2l,f,c
  8769  001F96  5002               	movf	RtccWriteTime@pTm+1,w,c
  8770  001F98  22DA               	addwfc	fsr2h,f,c
  8771  001F9A  0E5A               	movlw	90
  8772  001F9C  60DF               	cpfslt	indf2,c
  8773  001F9E  0012               	return	
  8774  001FA0  EE20 F003          	lfsr	2,3
  8775  001FA4  5001               	movf	RtccWriteTime@pTm,w,c
  8776  001FA6  26D9               	addwf	fsr2l,f,c
  8777  001FA8  5002               	movf	RtccWriteTime@pTm+1,w,c
  8778  001FAA  22DA               	addwfc	fsr2h,f,c
  8779  001FAC  0E24               	movlw	36
  8780  001FAE  64DF               	cpfsgt	indf2,c
  8781  001FB0  D002               	goto	l3722
  8782  001FB2  0012               	return	
  8783                           
  8784                           ;	Return value of _RtccWriteTime is never used
  8785  001FB4  0012               	return	
  8786  001FB6                     l3722:
  8787  001FB6  EE20 F002          	lfsr	2,2
  8788  001FBA  5001               	movf	RtccWriteTime@pTm,w,c
  8789  001FBC  26D9               	addwf	fsr2l,f,c
  8790  001FBE  5002               	movf	RtccWriteTime@pTm+1,w,c
  8791  001FC0  22DA               	addwfc	fsr2h,f,c
  8792  001FC2  50DF               	movf	indf2,w,c
  8793  001FC4  6E09               	movwf	RtccWriteTime@tempMinSec+1,c
  8794  001FC6  EE20 F001          	lfsr	2,1
  8795  001FCA  5001               	movf	RtccWriteTime@pTm,w,c
  8796  001FCC  26D9               	addwf	fsr2l,f,c
  8797  001FCE  5002               	movf	RtccWriteTime@pTm+1,w,c
  8798  001FD0  22DA               	addwfc	fsr2h,f,c
  8799  001FD2  50DF               	movf	indf2,w,c
  8800  001FD4  6E08               	movwf	RtccWriteTime@tempMinSec,c
  8801  001FD6  5003               	movf	RtccWriteTime@di,w,c
  8802  001FD8  B4D8               	btfsc	status,2,c
  8803  001FDA  D002               	goto	l3728
  8804  001FDC  9CF2               	bcf	intcon,6,c	;volatile
  8805  001FDE  D000               	goto	l3728
  8806  001FE0                     l3728:
  8807  001FE0  0E00               	movlw	0
  8808  001FE2  BB3F               	btfsc	63,5,b	;volatile
  8809  001FE4  0E01               	movlw	1
  8810  001FE6  6E07               	movwf	RtccWriteTime@wasWrEn,c
  8811  001FE8  5007               	movf	RtccWriteTime@wasWrEn,w,c
  8812  001FEA  A4D8               	btfss	status,2,c
  8813  001FEC  D003               	goto	l3732
  8814  001FEE  ECBA  F018         	call	_RtccWrOn	;wreg free
  8815  001FF2  D000               	goto	l3732
  8816  001FF4                     l3732:
  8817  001FF4  0E00               	movlw	0
  8818  001FF6  BF3F               	btfsc	63,7,b	;volatile
  8819  001FF8  0E01               	movlw	1
  8820  001FFA  6E05               	movwf	RtccWriteTime@wasOn,c
  8821  001FFC  5005               	movf	RtccWriteTime@wasOn,w,c
  8822  001FFE  B4D8               	btfsc	status,2,c
  8823  002000  D007               	goto	l3738
  8824  002002  0E00               	movlw	0
  8825  002004  BE91               	btfsc	3985,7,c	;volatile
  8826  002006  0E01               	movlw	1
  8827  002008  6E06               	movwf	RtccWriteTime@wasAlrm,c
  8828  00200A  010F               	movlb	15	; () banked
  8829  00200C  9F3F               	bcf	63,7,b	;volatile
  8830  00200E  D000               	goto	l3738
  8831  002010                     l3738:
  8832  002010  0EFC               	movlw	252
  8833  002012  010F               	movlb	15	; () banked
  8834  002014  173F               	andwf	63,f,b	;volatile
  8835  002016  010F               	movlb	15	; () banked
  8836  002018  813F               	bsf	63,0,b	;volatile
  8837                           
  8838                           ; BSR set to: 15
  8839  00201A  CF98 F00A          	movff	3992,RtccWriteTime@tempHourWDay	;volatile
  8840                           
  8841                           ; BSR set to: 15
  8842  00201E  CF99 F00B          	movff	3993,RtccWriteTime@tempHourWDay+1	;volatile
  8843                           
  8844                           ; BSR set to: 15
  8845  002022  EE20 F003          	lfsr	2,3
  8846  002026  5001               	movf	RtccWriteTime@pTm,w,c
  8847  002028  26D9               	addwf	fsr2l,f,c
  8848  00202A  5002               	movf	RtccWriteTime@pTm+1,w,c
  8849  00202C  22DA               	addwfc	fsr2h,f,c
  8850  00202E  50DF               	movf	indf2,w,c
  8851  002030  6E0A               	movwf	RtccWriteTime@tempHourWDay,c
  8852                           
  8853                           ; BSR set to: 15
  8854  002032  0EFC               	movlw	252
  8855  002034  010F               	movlb	15	; () banked
  8856  002036  173F               	andwf	63,f,b	;volatile
  8857                           
  8858                           ; BSR set to: 15
  8859  002038  010F               	movlb	15	; () banked
  8860  00203A  813F               	bsf	63,0,b	;volatile
  8861                           
  8862                           ; BSR set to: 15
  8863  00203C  C00A  FF98         	movff	RtccWriteTime@tempHourWDay,3992	;volatile
  8864                           
  8865                           ; BSR set to: 15
  8866  002040  C00B  FF99         	movff	RtccWriteTime@tempHourWDay+1,3993	;volatile
  8867                           
  8868                           ; BSR set to: 15
  8869  002044  C008  FF98         	movff	RtccWriteTime@tempMinSec,3992	;volatile
  8870                           
  8871                           ; BSR set to: 15
  8872  002048  C009  FF99         	movff	RtccWriteTime@tempMinSec+1,3993	;volatile
  8873                           
  8874                           ; BSR set to: 15
  8875  00204C  5005               	movf	RtccWriteTime@wasOn,w,c
  8876  00204E  B4D8               	btfsc	status,2,c
  8877  002050  D00D               	goto	l3770
  8878                           
  8879                           ; BSR set to: 15
  8880  002052  010F               	movlb	15	; () banked
  8881  002054  8F3F               	bsf	63,7,b	;volatile
  8882                           
  8883                           ; BSR set to: 15
  8884  002056  5006               	movf	RtccWriteTime@wasAlrm,w,c
  8885  002058  B4D8               	btfsc	status,2,c
  8886  00205A  D002               	goto	l3766
  8887                           
  8888                           ; BSR set to: 15
  8889  00205C  8E91               	bsf	3985,7,c	;volatile
  8890  00205E  D000               	goto	l3766
  8891  002060                     l3766:
  8892                           
  8893                           ; BSR set to: 15
  8894  002060  5007               	movf	RtccWriteTime@wasWrEn,w,c
  8895  002062  B4D8               	btfsc	status,2,c
  8896  002064  D009               	goto	l3774
  8897                           
  8898                           ; BSR set to: 15
  8899  002066  ECBA  F018         	call	_RtccWrOn	;wreg free
  8900  00206A  D006               	goto	l3774
  8901  00206C                     l3770:
  8902  00206C  5007               	movf	RtccWriteTime@wasWrEn,w,c
  8903  00206E  A4D8               	btfss	status,2,c
  8904  002070  D003               	goto	l3774
  8905  002072  010F               	movlb	15	; () banked
  8906  002074  9B3F               	bcf	63,5,b	;volatile
  8907                           
  8908                           ; BSR set to: 15
  8909  002076  D000               	goto	l3774
  8910  002078                     l3774:
  8911  002078  5003               	movf	RtccWriteTime@di,w,c
  8912  00207A  B4D8               	btfsc	status,2,c
  8913  00207C  0012               	return	
  8914  00207E  8CF2               	bsf	intcon,6,c	;volatile
  8915  002080  0012               	return	
  8916                           
  8917                           ;	Return value of _RtccWriteTime is never used
  8918  002082  0012               	return		;funcret
  8919  002084                     __end_of_RtccWriteTime:
  8920                           	opt stack 0
  8921                           tblptru	equ	0xFF8
  8922                           tblptrh	equ	0xFF7
  8923                           tblptrl	equ	0xFF6
  8924                           tablat	equ	0xFF5
  8925                           prodh	equ	0xFF4
  8926                           prodl	equ	0xFF3
  8927                           intcon	equ	0xFF2
  8928                           indf0	equ	0xFEF
  8929                           postinc0	equ	0xFEE
  8930                           fsr0h	equ	0xFEA
  8931                           fsr0l	equ	0xFE9
  8932                           wreg	equ	0xFE8
  8933                           postdec1	equ	0xFE5
  8934                           fsr1l	equ	0xFE1
  8935                           indf2	equ	0xFDF
  8936                           postinc2	equ	0xFDE
  8937                           postdec2	equ	0xFDD
  8938                           fsr2h	equ	0xFDA
  8939                           fsr2l	equ	0xFD9
  8940                           status	equ	0xFD8
  8941                           
  8942 ;; *************** function _RtccWriteDate *****************
  8943 ;; Defined at:
  8944 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteDate.c"
  8945 ;; Parameters:    Size  Location     Type
  8946 ;;  pDt             2    0[COMRAM] PTR const struct .
  8947 ;;		 -> RtccDate(4), 
  8948 ;;  di              1    2[COMRAM] enum E7121
  8949 ;; Auto vars:     Size  Location     Type
  8950 ;;  tempHourWDay    2   11[COMRAM] struct .
  8951 ;;  tempDayMonth    2    9[COMRAM] struct .
  8952 ;;  tempYear        2    6[COMRAM] struct .
  8953 ;;  wasWrEn         1    8[COMRAM] enum E7121
  8954 ;;  wasAlrm         1    5[COMRAM] enum E7121
  8955 ;;  wasOn           1    4[COMRAM] enum E7121
  8956 ;; Return value:  Size  Location     Type
  8957 ;;                  1    wreg      enum E7121
  8958 ;; Registers used:
  8959 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8960 ;; Tracked objects:
  8961 ;;		On entry : 0/0
  8962 ;;		On exit  : 0/0
  8963 ;;		Unchanged: 0/0
  8964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8965 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8966 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8967 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8968 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8969 ;;Total ram usage:       13 bytes
  8970 ;; Hardware stack levels used:    1
  8971 ;; Hardware stack levels required when called:    1
  8972 ;; This function calls:
  8973 ;;		_RtccWrOn
  8974 ;; This function is called by:
  8975 ;;		_Write_RTC
  8976 ;; This function uses a non-reentrant model
  8977 ;;
  8978                           
  8979                           	psect	text54
  8980  001D12                     __ptext54:
  8981                           	opt stack 0
  8982  001D12                     _RtccWriteDate:
  8983                           	opt stack 27
  8984                           
  8985                           ;incstack = 0
  8986  001D12  0E00               	movlw	0
  8987  001D14  6E06               	movwf	RtccWriteDate@wasAlrm,c
  8988  001D16  EE20 F002          	lfsr	2,2
  8989  001D1A  5001               	movf	RtccWriteDate@pDt,w,c
  8990  001D1C  26D9               	addwf	fsr2l,f,c
  8991  001D1E  5002               	movf	RtccWriteDate@pDt+1,w,c
  8992  001D20  22DA               	addwfc	fsr2h,f,c
  8993  001D22  0E13               	movlw	19
  8994  001D24  60DF               	cpfslt	indf2,c
  8995  001D26  0012               	return	
  8996  001D28  EE20 F002          	lfsr	2,2
  8997  001D2C  5001               	movf	RtccWriteDate@pDt,w,c
  8998  001D2E  26D9               	addwf	fsr2l,f,c
  8999  001D30  5002               	movf	RtccWriteDate@pDt+1,w,c
  9000  001D32  22DA               	addwfc	fsr2h,f,c
  9001  001D34  50DF               	movf	indf2,w,c
  9002  001D36  B4D8               	btfsc	status,2,c
  9003  001D38  0012               	return	
  9004  001D3A  EE20 F001          	lfsr	2,1
  9005  001D3E  5001               	movf	RtccWriteDate@pDt,w,c
  9006  001D40  26D9               	addwf	fsr2l,f,c
  9007  001D42  5002               	movf	RtccWriteDate@pDt+1,w,c
  9008  001D44  22DA               	addwfc	fsr2h,f,c
  9009  001D46  0E32               	movlw	50
  9010  001D48  60DF               	cpfslt	indf2,c
  9011  001D4A  0012               	return	
  9012  001D4C  EE20 F001          	lfsr	2,1
  9013  001D50  5001               	movf	RtccWriteDate@pDt,w,c
  9014  001D52  26D9               	addwf	fsr2l,f,c
  9015  001D54  5002               	movf	RtccWriteDate@pDt+1,w,c
  9016  001D56  22DA               	addwfc	fsr2h,f,c
  9017  001D58  50DF               	movf	indf2,w,c
  9018  001D5A  B4D8               	btfsc	status,2,c
  9019  001D5C  0012               	return	
  9020  001D5E  EE20 F003          	lfsr	2,3
  9021  001D62  5001               	movf	RtccWriteDate@pDt,w,c
  9022  001D64  26D9               	addwf	fsr2l,f,c
  9023  001D66  5002               	movf	RtccWriteDate@pDt+1,w,c
  9024  001D68  22DA               	addwfc	fsr2h,f,c
  9025  001D6A  0E99               	movlw	153
  9026  001D6C  64DF               	cpfsgt	indf2,c
  9027  001D6E  D002               	goto	l3790
  9028  001D70  0012               	return	
  9029                           
  9030                           ;	Return value of _RtccWriteDate is never used
  9031  001D72  0012               	return	
  9032  001D74                     l3790:
  9033  001D74  EE20 F003          	lfsr	2,3
  9034  001D78  5001               	movf	RtccWriteDate@pDt,w,c
  9035  001D7A  26D9               	addwf	fsr2l,f,c
  9036  001D7C  5002               	movf	RtccWriteDate@pDt+1,w,c
  9037  001D7E  22DA               	addwfc	fsr2h,f,c
  9038  001D80  50DF               	movf	indf2,w,c
  9039  001D82  6E07               	movwf	RtccWriteDate@tempYear,c
  9040  001D84  EE20 F001          	lfsr	2,1
  9041  001D88  5001               	movf	RtccWriteDate@pDt,w,c
  9042  001D8A  26D9               	addwf	fsr2l,f,c
  9043  001D8C  5002               	movf	RtccWriteDate@pDt+1,w,c
  9044  001D8E  22DA               	addwfc	fsr2h,f,c
  9045  001D90  50DF               	movf	indf2,w,c
  9046  001D92  6E0A               	movwf	RtccWriteDate@tempDayMonth,c
  9047  001D94  EE20 F002          	lfsr	2,2
  9048  001D98  5001               	movf	RtccWriteDate@pDt,w,c
  9049  001D9A  26D9               	addwf	fsr2l,f,c
  9050  001D9C  5002               	movf	RtccWriteDate@pDt+1,w,c
  9051  001D9E  22DA               	addwfc	fsr2h,f,c
  9052  001DA0  50DF               	movf	indf2,w,c
  9053  001DA2  6E0B               	movwf	RtccWriteDate@tempDayMonth+1,c
  9054  001DA4  5003               	movf	RtccWriteDate@di,w,c
  9055  001DA6  B4D8               	btfsc	status,2,c
  9056  001DA8  D002               	goto	l3796
  9057  001DAA  9CF2               	bcf	intcon,6,c	;volatile
  9058  001DAC  D000               	goto	l3796
  9059  001DAE                     l3796:
  9060  001DAE  0E00               	movlw	0
  9061  001DB0  BB3F               	btfsc	63,5,b	;volatile
  9062  001DB2  0E01               	movlw	1
  9063  001DB4  6E09               	movwf	RtccWriteDate@wasWrEn,c
  9064  001DB6  5009               	movf	RtccWriteDate@wasWrEn,w,c
  9065  001DB8  A4D8               	btfss	status,2,c
  9066  001DBA  D003               	goto	l3800
  9067  001DBC  ECBA  F018         	call	_RtccWrOn	;wreg free
  9068  001DC0  D000               	goto	l3800
  9069  001DC2                     l3800:
  9070  001DC2  0E00               	movlw	0
  9071  001DC4  BF3F               	btfsc	63,7,b	;volatile
  9072  001DC6  0E01               	movlw	1
  9073  001DC8  6E05               	movwf	RtccWriteDate@wasOn,c
  9074  001DCA  5005               	movf	RtccWriteDate@wasOn,w,c
  9075  001DCC  B4D8               	btfsc	status,2,c
  9076  001DCE  D007               	goto	l3806
  9077  001DD0  0E00               	movlw	0
  9078  001DD2  BE91               	btfsc	3985,7,c	;volatile
  9079  001DD4  0E01               	movlw	1
  9080  001DD6  6E06               	movwf	RtccWriteDate@wasAlrm,c
  9081  001DD8  010F               	movlb	15	; () banked
  9082  001DDA  9F3F               	bcf	63,7,b	;volatile
  9083  001DDC  D000               	goto	l3806
  9084  001DDE                     l3806:
  9085  001DDE  0EFC               	movlw	252
  9086  001DE0  010F               	movlb	15	; () banked
  9087  001DE2  173F               	andwf	63,f,b	;volatile
  9088  001DE4  010F               	movlb	15	; () banked
  9089  001DE6  813F               	bsf	63,0,b	;volatile
  9090                           
  9091                           ; BSR set to: 15
  9092  001DE8  CF98 F00C          	movff	3992,RtccWriteDate@tempHourWDay	;volatile
  9093                           
  9094                           ; BSR set to: 15
  9095  001DEC  CF99 F00D          	movff	3993,RtccWriteDate@tempHourWDay+1	;volatile
  9096                           
  9097                           ; BSR set to: 15
  9098  001DF0  C001  FFD9         	movff	RtccWriteDate@pDt,fsr2l
  9099  001DF4  C002  FFDA         	movff	RtccWriteDate@pDt+1,fsr2h
  9100  001DF8  50DF               	movf	indf2,w,c
  9101  001DFA  6E0D               	movwf	RtccWriteDate@tempHourWDay+1,c
  9102                           
  9103                           ; BSR set to: 15
  9104  001DFC  0EFC               	movlw	252
  9105  001DFE  010F               	movlb	15	; () banked
  9106  001E00  173F               	andwf	63,f,b	;volatile
  9107                           
  9108                           ; BSR set to: 15
  9109  001E02  0E03               	movlw	3
  9110  001E04  010F               	movlb	15	; () banked
  9111  001E06  133F               	iorwf	63,f,b	;volatile
  9112                           
  9113                           ; BSR set to: 15
  9114  001E08  C007  FF98         	movff	RtccWriteDate@tempYear,3992	;volatile
  9115                           
  9116                           ; BSR set to: 15
  9117  001E0C  C008  FF99         	movff	RtccWriteDate@tempYear+1,3993	;volatile
  9118                           
  9119                           ; BSR set to: 15
  9120  001E10  C00A  FF98         	movff	RtccWriteDate@tempDayMonth,3992	;volatile
  9121                           
  9122                           ; BSR set to: 15
  9123  001E14  C00B  FF99         	movff	RtccWriteDate@tempDayMonth+1,3993	;volatile
  9124                           
  9125                           ; BSR set to: 15
  9126  001E18  C00C  FF98         	movff	RtccWriteDate@tempHourWDay,3992	;volatile
  9127                           
  9128                           ; BSR set to: 15
  9129  001E1C  C00D  FF99         	movff	RtccWriteDate@tempHourWDay+1,3993	;volatile
  9130                           
  9131                           ; BSR set to: 15
  9132  001E20  5005               	movf	RtccWriteDate@wasOn,w,c
  9133  001E22  B4D8               	btfsc	status,2,c
  9134  001E24  D00D               	goto	l3842
  9135                           
  9136                           ; BSR set to: 15
  9137  001E26  010F               	movlb	15	; () banked
  9138  001E28  8F3F               	bsf	63,7,b	;volatile
  9139                           
  9140                           ; BSR set to: 15
  9141  001E2A  5006               	movf	RtccWriteDate@wasAlrm,w,c
  9142  001E2C  B4D8               	btfsc	status,2,c
  9143  001E2E  D002               	goto	l3838
  9144                           
  9145                           ; BSR set to: 15
  9146  001E30  8E91               	bsf	3985,7,c	;volatile
  9147  001E32  D000               	goto	l3838
  9148  001E34                     l3838:
  9149                           
  9150                           ; BSR set to: 15
  9151  001E34  5009               	movf	RtccWriteDate@wasWrEn,w,c
  9152  001E36  B4D8               	btfsc	status,2,c
  9153  001E38  D009               	goto	l3846
  9154                           
  9155                           ; BSR set to: 15
  9156  001E3A  ECBA  F018         	call	_RtccWrOn	;wreg free
  9157  001E3E  D006               	goto	l3846
  9158  001E40                     l3842:
  9159  001E40  5009               	movf	RtccWriteDate@wasWrEn,w,c
  9160  001E42  A4D8               	btfss	status,2,c
  9161  001E44  D003               	goto	l3846
  9162  001E46  010F               	movlb	15	; () banked
  9163  001E48  9B3F               	bcf	63,5,b	;volatile
  9164                           
  9165                           ; BSR set to: 15
  9166  001E4A  D000               	goto	l3846
  9167  001E4C                     l3846:
  9168  001E4C  5003               	movf	RtccWriteDate@di,w,c
  9169  001E4E  B4D8               	btfsc	status,2,c
  9170  001E50  0012               	return	
  9171  001E52  9CF2               	bcf	intcon,6,c	;volatile
  9172  001E54  0012               	return	
  9173                           
  9174                           ;	Return value of _RtccWriteDate is never used
  9175  001E56  0012               	return		;funcret
  9176  001E58                     __end_of_RtccWriteDate:
  9177                           	opt stack 0
  9178                           tblptru	equ	0xFF8
  9179                           tblptrh	equ	0xFF7
  9180                           tblptrl	equ	0xFF6
  9181                           tablat	equ	0xFF5
  9182                           prodh	equ	0xFF4
  9183                           prodl	equ	0xFF3
  9184                           intcon	equ	0xFF2
  9185                           indf0	equ	0xFEF
  9186                           postinc0	equ	0xFEE
  9187                           fsr0h	equ	0xFEA
  9188                           fsr0l	equ	0xFE9
  9189                           wreg	equ	0xFE8
  9190                           postdec1	equ	0xFE5
  9191                           fsr1l	equ	0xFE1
  9192                           indf2	equ	0xFDF
  9193                           postinc2	equ	0xFDE
  9194                           postdec2	equ	0xFDD
  9195                           fsr2h	equ	0xFDA
  9196                           fsr2l	equ	0xFD9
  9197                           status	equ	0xFD8
  9198                           
  9199 ;; *************** function _RtccWrOn *****************
  9200 ;; Defined at:
  9201 ;;		line 21 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWrOn.c"
  9202 ;; Parameters:    Size  Location     Type
  9203 ;;		None
  9204 ;; Auto vars:     Size  Location     Type
  9205 ;;  data            2    0        unsigned int 
  9206 ;; Return value:  Size  Location     Type
  9207 ;;		None               void
  9208 ;; Registers used:
  9209 ;;		wreg, status,2
  9210 ;; Tracked objects:
  9211 ;;		On entry : 0/0
  9212 ;;		On exit  : 0/0
  9213 ;;		Unchanged: 0/0
  9214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9218 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9219 ;;Total ram usage:        0 bytes
  9220 ;; Hardware stack levels used:    1
  9221 ;; This function calls:
  9222 ;;		Nothing
  9223 ;; This function is called by:
  9224 ;;		_Write_RTC
  9225 ;;		_RtccWriteDate
  9226 ;;		_RtccWriteTime
  9227 ;; This function uses a non-reentrant model
  9228 ;;
  9229                           
  9230                           	psect	text55
  9231  003174                     __ptext55:
  9232                           	opt stack 0
  9233  003174                     _RtccWrOn:
  9234                           	opt stack 27
  9235                           
  9236                           ;incstack = 0
  9237  003174  9CF2               	bcf	intcon,6,c	;volatile
  9238  003176  0E55               	movlw	85
  9239  003178  6EA7               	movwf	4007,c	;volatile
  9240  00317A  0EAA               	movlw	170
  9241  00317C  6EA7               	movwf	4007,c	;volatile
  9242  00317E  010F               	movlb	15	; () banked
  9243  003180  8B3F               	bsf	63,5,b	;volatile
  9244                           
  9245                           ; BSR set to: 15
  9246  003182  8CF2               	bsf	intcon,6,c	;volatile
  9247                           
  9248                           ; BSR set to: 15
  9249  003184  0012               	return		;funcret
  9250  003186                     __end_of_RtccWrOn:
  9251                           	opt stack 0
  9252                           tblptru	equ	0xFF8
  9253                           tblptrh	equ	0xFF7
  9254                           tblptrl	equ	0xFF6
  9255                           tablat	equ	0xFF5
  9256                           prodh	equ	0xFF4
  9257                           prodl	equ	0xFF3
  9258                           intcon	equ	0xFF2
  9259                           indf0	equ	0xFEF
  9260                           postinc0	equ	0xFEE
  9261                           fsr0h	equ	0xFEA
  9262                           fsr0l	equ	0xFE9
  9263                           wreg	equ	0xFE8
  9264                           postdec1	equ	0xFE5
  9265                           fsr1l	equ	0xFE1
  9266                           indf2	equ	0xFDF
  9267                           postinc2	equ	0xFDE
  9268                           postdec2	equ	0xFDD
  9269                           fsr2h	equ	0xFDA
  9270                           fsr2l	equ	0xFD9
  9271                           status	equ	0xFD8
  9272                           tblptru	equ	0xFF8
  9273                           tblptrh	equ	0xFF7
  9274                           tblptrl	equ	0xFF6
  9275                           tablat	equ	0xFF5
  9276                           prodh	equ	0xFF4
  9277                           prodl	equ	0xFF3
  9278                           intcon	equ	0xFF2
  9279                           indf0	equ	0xFEF
  9280                           postinc0	equ	0xFEE
  9281                           fsr0h	equ	0xFEA
  9282                           fsr0l	equ	0xFE9
  9283                           wreg	equ	0xFE8
  9284                           postdec1	equ	0xFE5
  9285                           fsr1l	equ	0xFE1
  9286                           indf2	equ	0xFDF
  9287                           postinc2	equ	0xFDE
  9288                           postdec2	equ	0xFDD
  9289                           fsr2h	equ	0xFDA
  9290                           fsr2l	equ	0xFD9
  9291                           status	equ	0xFD8
  9292                           
  9293                           	psect	rparam
  9294  0000                     tblptru	equ	0xFF8
  9295                           tblptrh	equ	0xFF7
  9296                           tblptrl	equ	0xFF6
  9297                           tablat	equ	0xFF5
  9298                           prodh	equ	0xFF4
  9299                           prodl	equ	0xFF3
  9300                           intcon	equ	0xFF2
  9301                           indf0	equ	0xFEF
  9302                           postinc0	equ	0xFEE
  9303                           fsr0h	equ	0xFEA
  9304                           fsr0l	equ	0xFE9
  9305                           wreg	equ	0xFE8
  9306                           postdec1	equ	0xFE5
  9307                           fsr1l	equ	0xFE1
  9308                           indf2	equ	0xFDF
  9309                           postinc2	equ	0xFDE
  9310                           postdec2	equ	0xFDD
  9311                           fsr2h	equ	0xFDA
  9312                           fsr2l	equ	0xFD9
  9313                           status	equ	0xFD8


Data Sizes:
    Strings     122
    Constant    71
    Data        16
    BSS         72
    Persistent  13
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160     23     125
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    RtccWriteTime@pTm	PTR const struct . size(2) Largest target is 4
		 -> RtccTime(BANK0[4]), 

    RtccWriteDate@pDt	PTR const struct . size(2) Largest target is 4
		 -> RtccDate(BANK0[4]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_15(CODE[10]), STR_14(CODE[15]), STR_13(CODE[5]), STR_12(CODE[5]), 
		 -> STR_11(CODE[5]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), 
		 -> STR_7(CODE[5]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> buffer2(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    obtain_pass@digit	PTR short  size(2) Largest target is 2
		 -> set_vision@digit(BANK0[2]), 

    next_code@input	PTR unsigned char  size(2) Largest target is 1
		 -> obtain_pass@input(COMRAM[1]), 

    next_code@digit	PTR short  size(2) Largest target is 2
		 -> set_vision@digit(BANK0[2]), 

    lcd_putrs@ptr	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_21(CODE[8]), STR_20(CODE[4]), STR_19(CODE[3]), STR_18(CODE[10]), 
		 -> STR_17(CODE[11]), STR_16(CODE[11]), buffer2(BANK0[20]), STR_3(CODE[10]), 
		 -> STR_2(CODE[13]), STR_1(CODE[33]), 


Critical Paths under _main in COMRAM

    _set_vision->_obtain_pass
    _write_Date->_sprintf
    _twinkle->_read_keyboard
    _read_keyboard->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    __delay_s->___awdiv
    _set_desactive_vision->_lcd_putrs
    _lcd_setcursor_vb->_lcd_send_byte
    _lcd_putrs->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _review_code->_checkPass
    _obtain_pass->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftadd
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___awtoft
    ___ftmul->___lbtoft
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    _next_code->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    ___lbtoft->___ftpack
    _clear->_lcd_comand
    _caratula->_lcd_comand
    _lcd_init->_lcd_send_byte
    _lcd_comand->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _Write_RTC->_RtccWriteDate

Critical Paths under _main in BANK0

    _main->_set_vision
    _set_vision->_obtain_pass
    _obtain_pass->_pow

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  131466
                                             94 COMRAM     1     1      0
                                             22 BANK0      1     1      0
                              _Setup
                           _caratula
                         _lcd_gotoxy
                          _lcd_putrs
                      _read_keyboard
                         _set_vision
 ---------------------------------------------------------------------------------
 (1) _set_vision                                           5     5      0  114948
                                             17 BANK0      5     5      0
                              _clear
                      _is_not_letter
                         _lcd_gotoxy
                          _lcd_putrs
                      _not_fill_pass
                        _obtain_pass
                      _read_keyboard
                        _review_code
               _set_desactive_vision
                            _twinkle
                         _write_Date
 ---------------------------------------------------------------------------------
 (2) _write_Date                                           0     0      0    8431
                         _lcd_gotoxy
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _twinkle                                              1     1      0   13367
                                             36 COMRAM     1     1      0
                           __delay_s
                     _clear_keyboard
                         _lcd_gotoxy
                          _lcd_putrs
                      _read_keyboard
 ---------------------------------------------------------------------------------
 (3) _read_keyboard                                        1     1      0    6970
                                             35 COMRAM     1     1      0
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             32    22     10    3452
                                             12 COMRAM    23    13     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) __delay_s                                             7     5      2    1394
                                              8 COMRAM     7     5      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _set_desactive_vision                                 2     0      2    5925
                                             10 COMRAM     2     0      2
                         _lcd_gotoxy
                          _lcd_putrs
                   _lcd_setcursor_vb
 ---------------------------------------------------------------------------------
 (3) _lcd_setcursor_vb                                     2     1      1     796
                                              4 COMRAM     2     1      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (3) _lcd_putrs                                            2     0      2    3518
                                              8 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (4) _lcd_putc                                             1     1      0    2129
                                              7 COMRAM     1     1      0
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (2) _review_code                                          4     0      4     386
                                              2 COMRAM     4     0      4
                          _checkPass
 ---------------------------------------------------------------------------------
 (3) _checkPass                                            2     0      2      86
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _obtain_pass                                         13     8      5   73615
                                             87 COMRAM     7     2      5
                                             11 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                           ___lbtoft
                          _next_code
                                _pow
 ---------------------------------------------------------------------------------
 (3) _pow                                                 17    11      6   58696
                                             81 COMRAM     6     0      6
                                              0 BANK0     11    11      0
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (4) _log                                                  5     2      3   19163
                                             51 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _exp                                                  9     6      3   31848
                                             72 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (5) _ldexp                                                7     2      5     376
                                             51 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (5) _floor                                                8     5      3    8237
                                             64 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                7     2      5     480
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             15    11      4     508
                                             39 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftge                                               9     3      6     648
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (6) ___altoft                                            10     6      4    2389
                                             54 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           12     5      7    8487
                                             39 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     543
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___ftmul                                             15     9      6    3485
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftsub                                              6     0      6    4194
                                             39 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (6) ___ftadd                                             12     6      6    3897
                                             27 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftneg                                              3     0      3     237
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (5) ___ftdiv                                             15     9      6    2697
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___awtoft                                             4     1      3    2534
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             9     5      4    2320
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _next_code                                            6     2      4    1677
                                              7 COMRAM     6     2      4
                     _clear_keyboard
                         _lcd_gotoxy
 ---------------------------------------------------------------------------------
 (5) _lcd_gotoxy                                           3     2      1    1461
                                              4 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (3) _clear_keyboard                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___lbtoft                                             4     1      3    2209
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2187
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _not_fill_pass                                        2     0      2     150
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _is_not_letter                                        2     2      0     112
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _clear                                                1     1      0     646
                                              5 COMRAM     1     1      0
                         _lcd_comand
 ---------------------------------------------------------------------------------
 (1) _caratula                                             0     0      0     646
                         _lcd_comand
 ---------------------------------------------------------------------------------
 (1) _Setup                                                0     0      0    3899
                          _Write_RTC
                         _lcd_comand
                           _lcd_init
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             1     1      0     848
                                              4 COMRAM     1     1      0
                        _Delay1KTCYx
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _lcd_comand                                           1     1      0     646
                                              4 COMRAM     1     1      0
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (5) _lcd_send_byte                                        2     1      1     624
                                              2 COMRAM     2     1      1
                       _Delay100TCYx
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (6) _lcd_send_nibble                                      2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _Delay100TCYx                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Write_RTC                                            0     0      0    2405
                           _RtccWrOn
                      _RtccWriteDate
                      _RtccWriteTime
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1196
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _RtccWriteTime                                       11     8      3     537
                                              0 COMRAM    11     8      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (3) _RtccWriteDate                                       13    10      3     672
                                              0 COMRAM    13    10      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (4) _RtccWrOn                                             2     2      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Setup
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_init
       _Delay1KTCYx
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
       _lcd_send_nibble
   _caratula
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
   _lcd_gotoxy
     _lcd_send_byte
       _Delay100TCYx
       _lcd_send_nibble
   _lcd_putrs
     _lcd_putc
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
   _read_keyboard
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _set_vision
     _clear
       _lcd_comand
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _is_not_letter
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _not_fill_pass
     _obtain_pass
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___lbtoft
         ___ftpack
       _next_code
         _clear_keyboard
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _pow
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___lltoft
           ___ftpack
         _exp
           ___awtoft
             ___ftpack
           ___ftdiv
             ___ftpack
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lbtoft (ARG)
               ___ftpack
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
           _floor
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
           _log (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
         _log
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
           _frexp
     _read_keyboard
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _review_code
       _checkPass
     _set_desactive_vision
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _lcd_setcursor_vb
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _twinkle
       __delay_s
         ___awdiv
       _clear_keyboard
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _read_keyboard
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _write_Date
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       1       4        0.6%
BANK0               A0     17      7D       5       78.1%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      DC       6        0.0%
DATA                 0      0      DC       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Sep 08 19:58:52 2016

                 ___altoft@exp 003F                              _a 007C                              _b 007E  
                            _c 0080                              _i 0084                              _j 0086  
                            _k 0088                  ___altoft@sign 0040                    _state_alarm 00CE  
                           l75 2FA6                             l76 2FA8                 ?_lcd_send_byte 0003  
                 ___awdiv@sign 0006            ___wmul@multiplicand 0003                    lcd_comand@d 0005  
                 __CFG_CP0$OFF 000000                   ___ftadd@exp1 0027                   ___ftadd@exp2 0026  
                 ___ftadd@sign 0025                            l220 10BC                            l212 106E  
                          l204 1002                            l221 10B8                            l213 106A  
                          l205 0FFE                            l240 11AC                            l232 1138  
                          l224 10F2                            l216 107E                            l208 1038  
                          l241 11A8                            l233 1134                            l225 10EE  
                          l217 107A                            l209 1034                            l260 1250  
                          l252 120A                            l244 11E2                            l236 1176  
                          l228 1128                            l261 124C                            l253 1206  
                          l245 11DE                            l237 1172                            l229 1124  
                          l256 1240                            l248 11F2                            l265 125C  
                          l257 123C                            l249 11EE                            l580 2D3A  
                          l587 2FE6                            l676 144E                            _dia 00C1  
                          _key 00CD                            _mes 00C7                            _exp 14E0  
                          _log 1E58                            _pow 1A28                            wreg 000FE8  
                  lcd_gotoxy@x 0006                    lcd_gotoxy@y 0005                   ___ftdiv@cntr 0012  
                 ___ftdiv@sign 0017                           l1202 30A2                           l1116 2782  
                         l1160 17F8                           l1320 2CEE                           l1145 170C  
                         l3010 1744                           l1330 2DE6                           l1180 242A  
                         l3004 171A                           l3100 2232                           l1149 1736  
                         l3110 2260                           l3102 2238                           l3032 179C  
                         l3016 1750                           l3200 2DF4                           l1169 1814  
                         l3034 17A8                           l3026 1778                           l3106 224A  
                         l3122 2810                           l1362 1B9C                           l3202 2E00  
                         l3210 2E24                           l3052 1832                           l3044 17E0  
                         l3036 17B4                           l3204 2E0C                           l3300 2CB2  
                         l3220 30EC                           l1381 1596                           l1357 1A62  
                         l3230 239C                           l3062 1864                           l3046 17EC  
                         l3038 17BC                           l3118 27DE                           l1382 16BA  
                         l3206 2E18                           l3302 2CBC                           l4110 1BBE  
                         l3072 21AE                           l3128 283C                           l3160 2128  
                         l1392 2530                           l3400 2D52                           l3312 2CE2  
                         l3304 2CC4                           l3320 2DB2                           l4120 1C02  
                         l4112 1BCC                           l3170 215A                           l3138 20B0  
                         l3322 2DBC                           l3410 1286                           l4130 1C64  
                         l3236 23C4                           l3092 220A                           l3156 2118  
                         l3404 2D7C                           l3324 2DC4                           l3078 21D6  
                         l3174 2172                           l3166 2142                           l3350 24B6  
                         l3342 248E                           l3422 12B8                           l4054 2C42  
                         l4142 1C9C                           l4126 1C40                           l3520 286A  
                         l3256 2404                           l3096 221C                           l3360 26D0  
                         l3168 2150                           l3600 1568                           l4048 2368  
                         l3328 2DDA                           l3440 1356                           l3424 12CE  
                         l3416 12A0                           l4152 1CFE                           l3530 2892  
                         l3514 2858                           l3266 2438                           l3274 2EE8  
                         l3186 2900                           l3346 249C                           l3442 1378  
                         l3418 12AE                           l4066 2C8E                           l3460 13C8  
                         l3452 13A0                           l3436 1350                           l3428 12EC  
                         l4148 1CDA                           l3526 2880                           l3542 28BC  
                         l3286 2F2A                           l3358 2652                           l3622 1690  
                         l3470 1402                           l3702 1264                           l4158 2974  
                         l3800 1DC2                           l3528 288A                           l3552 2BE4  
                         l3392 25D6                           l3376 259E                           l3368 2556  
                         l3464 13EC                           l3456 13C4                           l3448 1394  
                         l3722 1FB6                           l3546 28CC                           l3538 28B0  
                         l2906 3164                           l3554 2BF2                           l3394 2602  
                         l3490 14A8                           l3466 13F6                           l3732 1FF4  
                         l3708 3152                           l2940 2732                           l2932 26F6  
                         l3388 25C6                           l3572 1E96                           l3900 1B14  
                         l3484 1454                           l3476 1424                           l3492 14B4  
                         l3806 1DDE                           l3566 1E74                           l3478 142C  
                         l3494 14D0                           l3728 1FE0                           l2960 279C  
                         l2944 274A                           l2936 2706                           l3842 1E40  
                         l3770 206C                           l3738 2010                           l2954 278A  
                         l2946 276A                           l2938 2712                           l2970 30C2  
                         l3594 1530                           l2948 2776                           l3588 14F8  
                         l3846 1E4C                           l3838 1E34                           l3790 1D74  
                         l3774 2078                           l3766 2060                           l2990 2B1C  
                         l2968 30BC                           l3856 2D26                           l3882 1A70  
                         l3796 1DAE                           l3972 2A14                           l2988 2B0E  
                         ?_exp 0049                           ?_log 0034                           l3990 2A40  
                         l3982 2A2C                           l3976 2A1C                           l3896 1AEC  
                         l3888 1A88                           ?_pow 0052                           STR_1 0F48  
                         STR_2 0F78                           STR_3 0FA4                           STR_4 0FB6  
                         STR_5 0FB6                           STR_6 0FB6                           STR_7 0FB6  
                         STR_8 0FB6                           STR_9 0FB6                           u2210 2B8C  
                         u3010 2576                           u2230 2BA6                           u2208 2B76  
                         u2401 16EC                           u2250 2BC2                           u3018 2578  
                         u3050 2D72                           u2228 2B8E                           u4020 1AD4  
                         u3060 2D9C                           u2190 2B74                           u2248 2BA8  
                         u4120 314A                           u2601 2196                           u3057 2D68  
                         u3067 2D92                           u2268 2BC4                           u3340 1570  
                         u2621 21BE                           u2710 20CE                           u3350 1572  
                         u2391 16D8                           u2811 2384                           u2715 20C6  
                         u2831 23AC                           u4407 126A                           u4417 2D2C  
                         u4427 311E                           u2691 2094                           u2780 2928  
                         u4437 3154                           u4447 3166                           u2970 24A8  
                         u2788 292A                           u4397 29DE                           u3960 310C  
             ?_lcd_send_nibble 0001                           _anio 00BF                           _flag 06E0  
                         _main 296A                           _hora 00C5                   ___ftpack@arg 0001  
                 ___ftpack@exp 0004                           fsr0h 000FEA                           indf0 000FEF  
                         fsr0l 000FE9                           fsr2h 000FDA                           fsr1l 000FE1  
                         indf2 000FDF                           fsr2l 000FD9                           exp@x 0049  
                         log@x 0034                  __CFG_T1DIG$ON 000000                           pow@x 0052  
                         pow@y 0055                           prodh 000FF4                           prodl 000FF3  
                         start 0000                  __CFG_IESO$OFF 000000                   ___ftmul@cntr 001A  
                 ___param_bank 000010                   ___ftmul@sign 001B                obtain_pass@pass 0058  
                 ___fttol@exp1 0036                          ??_exp 004C                          ??_log 0037  
                 ___fttol@lval 0032                          ??_pow 0058                    _Delay1KTCYx 3150  
                __CFG_PLLDIV$1 000000                          ?_main 0001                __end_of___awdiv 28D8  
              __end_of___ftadd 188C                          STR_10 0FB6                          STR_11 0FB6  
                        STR_12 0FB6                          STR_20 0FBB                          STR_13 0FB6  
                        STR_21 0FAE                          STR_14 0F69                          STR_15 0F9A  
                        STR_16 0F85                          STR_17 0F5E                          STR_18 0F90  
                        STR_19 0FBF          __size_of_Delay100TCYx 0012                __end_of___ftdiv 2460  
              __end_of___ftneg 30B0                __end_of___ftmul 2288                ___awdiv@divisor 0003  
              __end_of___ftsub 2F14                __end_of___fttol 2186                __end_of___lwdiv 2CF8  
              __end_of___lwmod 2DF0                ___awdiv@counter 0005                          _TRISA 000F92  
                        _TRISB 000F93                          _TRISC 000F94                   ___lltoft@exp 0011  
               __CFG_FCMEN$OFF 000000                          _Setup 2E88                  ___awtoft@sign 000C  
                        _clear 3112                __end_of_dpowers 0F0B                          _floor 2460  
                        _ldexp 253E                          _frexp 28D8                          _mes_d 00D6  
                        _errno 0082                          _mes_u 00D7                __end_of_isdigit 30F6  
                ___ftpack@sign 0005                   ?_obtain_pass 0058                          tablat 000FF5  
                        pow@yi 00AF                   lcd_putrs@ptr 0009                          status 000FD8  
              __end_of_sprintf 14E0                __end_of_twinkle 2C9C                    exp@exponent 004F  
      __CFG_DSWDTOSC$INTOSCREF 000000                    ldexp@newexp 0037        __size_of_clear_keyboard 0008  
              __initialization 2F50                    log@exponent 0037                   _Delay100TCYx 3162  
                 __end_of_main 29EE                ??_lcd_send_byte 0004               obtain_pass@digit 005B  
             obtain_pass@input 005A           _set_desactive_vision 2FEC                         ??_main 005F  
                ___fttol@sign1 0031                  __activetblptr 000002             is_not_letter@input 0002  
             __end_of_RtccWrOn 3186                         ?_Setup 0001                         ?_clear 0001  
                       _ADCON0 000FC2                         _ADCON1 000FC1                         ?_floor 0041  
                       ?_ldexp 0034                         ?_frexp 0001               __end_of___altoft 2B68  
                       _EECON2 000FA7                         _ANCON0 000F48                         _ANCON1 000F49  
             ___awdiv@dividend 0001               __end_of___awtoft 2F50               __end_of___ftpack 27AC  
             __end_of___lbtoft 308C               __end_of__delay_s 2D50               __end_of___lltoft 2C3E  
               __CFG_WDTEN$OFF 000000               RtccWriteDate@pDt 0001                         _RTCCFG 000F3F  
               __CFG_WPCFG$OFF 000000               __end_of_caratula 31B4                 __CFG_WPDIS$OFF 000000  
               __CFG_XINST$OFF 000000               __end_of_lcd_init 2A6E               __end_of_lcd_putc 2E3C  
                       ___ftge 27AC              ?_lcd_setcursor_vb 0005                         ___wmul 3018  
                    ??___awdiv 0005                      ??___ftadd 0022                 __CFG_STVREN$ON 000000  
                    ??___ftdiv 000F                      ??___ftneg 0004                         _diasem 00C3  
                    ??___ftmul 0013                         _anio_d 00CF                      ??___ftsub 002E  
                    ??___fttol 002C                         _anio_u 00D0                      ??___lwdiv 0005  
                    ??___lwmod 000C                   ?_review_code 0003             ??_lcd_setcursor_vb 0006  
                       _hora_d 00D4                         _hora_u 00D5                         clear_0 2F5A  
             ___awdiv@quotient 0007                         _minuto 00C9          ?_set_desactive_vision 000B  
        __end_of_RtccWriteDate 1E58          __end_of_RtccWriteTime 2084                  checkPass@pass 0001  
                       floor@i 0044                         floor@x 0041          ___ftmul@f3_as_product 0017  
             RtccWriteTime@pTm 0001                      ??_isdigit 0001                   __mediumconst 0000  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
       __size_of_is_not_letter 0030                      ??_sprintf 0017                      ??_twinkle 0025  
       __size_of_read_keyboard 02B8          __end_of_not_fill_pass 3150               __end_ofexp@coeff 0F2D  
             __end_oflog@coeff 0F48                     __accesstop 0060        __end_of__initialization 2F80  
                   ___altoft@c 0037                     ___ftadd@f1 001C                     ___ftadd@f2 001F  
           __size_of_Write_RTC 019C                     ___ftge@ff1 0001                     ___ftge@ff2 0004  
                 eval_poly@res 0031                  ___rparam_used 000001                     ___ftdiv@f1 0009  
                   ___ftdiv@f2 000C                     ___ftdiv@f3 0013                     ___ftneg@f1 0001  
                   ___awtoft@c 0009                     ___lbtoft@c 000C                     ___ftmul@f1 000D  
                   ___ftmul@f2 0010                     ___ftsub@f1 0028                     ___ftsub@f2 002B  
                   ___fttol@f1 0028                 __pcstackCOMRAM 0001                  __end_of_Setup 2ED0  
                 __pidataBANK0 3186             __size_of_checkPass 001C                  __end_of_clear 3128  
                   ___lltoft@c 0009                  __end_of_floor 253E                  __end_of_ldexp 2612  
                __end_of_frexp 296A                __CFG_DSWDTPS$G2 000000                review_code@pass 0005  
              __CFG_OSC$INTOSC 000000                        ??_Setup 000E              lcd_gotoxy@address 0007  
                      ??_clear 0006             __size_of_lcd_putrs 0054                        ??_floor 0044  
                      ??_ldexp 0039                        ??_frexp 0006                   sprintf@width 0021  
                   __pbssBANK0 0060             __size_of_eval_poly 00D4           __size_of_obtain_pass 00EC  
                   _dia_semana 00D1      RtccWriteTime@tempHourWDay 000A                 _clear_keyboard 31A4  
                    ?_RtccWrOn 0001                 lcd_send_byte@n 0003                  _is_not_letter 2FBC  
                      ?___ftge 0001                        ?___wmul 0001             __size_of_next_code 004C  
       ??_set_desactive_vision 000D                  _read_keyboard 0FC4                   ?_Delay1KTCYx 0001  
                    ?___altoft 0037                      ?___awtoft 0009                      ?___ftpack 0001  
                    ?___lbtoft 0009                      ?__delay_s 0009                      ?___lltoft 0009  
            __end_of_Write_RTC 1A28                 __delay_s@index 000E                     _lcd_comand 3196  
                    ?_caratula 0001                     _lcd_gotoxy 30B0                        _RTCVALH 000F99  
                      _RTCVALL 000F98                      ?_lcd_init 0001              __end_of_checkPass 3112  
                    ?_lcd_putc 0001         __end_of_clear_keyboard 31AC                        __Hparam 0000  
                      __Lparam 0000                 ?_is_not_letter 0001       __size_of_lcd_send_nibble 0076  
                   ??_RtccWrOn 0001                __size_of___ftge 0096                        ___awdiv 2842  
                      ___ftadd 16C8              __end_of_lcd_putrs 2DA4                        ___ftdiv 2374  
               ?_read_keyboard 0001                        ___ftneg 308C                __size_of___wmul 0028  
                      ___ftmul 2186                        ___ftsub 2ED0                        ___fttol 2084  
                      ___lwdiv 2C9C                        ___lwmod 2DA4                   __psmallconst 0F00  
                   ??___altoft 003B                    _RtccTimeVal 0078                        __pcinit 2F50  
                      _fecha_d 00D2                        _fecha_u 00D3                     ??___awtoft 000C  
                   ??___ftpack 0006                     ??___lbtoft 000C              __end_of_eval_poly 26E6  
                      __ramtop 0F00                     ??__delay_s 000B                     ??___lltoft 000D  
              set_vision@digit 00BC                        __ptext0 296A                        __ptext1 1BAA  
                      __ptext2 2A6E                        __ptext3 2C3E                        __ptext4 0FC4  
                      __ptext5 127C                        __ptext6 30D4                        __ptext7 2DA4  
                      __ptext8 2C9C                        __ptext9 2CF8           __size_of_review_code 0026  
                      _buffer2 008C                set_vision@input 00BB                      _T1CONbits 000FCD  
                      _dpowers 0F01                   __size_of_exp 01E8                   __size_of_log 0120  
                      _isdigit 30D4                   __size_of_pow 0182                     ??_caratula 0006  
                      _segundo 008A                        _sprintf 127C                     ??_lcd_init 0005  
                   ??_lcd_putc 0008                        _twinkle 2C3E           end_of_initialization 2F80  
            __end_of_next_code 2E88                        exp@sign 0051           lcd_send_byte@address 0004  
                __Lmediumconst 0000                ?_clear_keyboard 0001                        pow@sign 00AE  
                 twinkle@input 0025                        postdec1 000FE5                        postdec2 000FDD  
                      postinc0 000FEE                        postinc2 000FDE                     _set_vision 1BAA  
        __end_of_lcd_send_byte 2FBC                      _PORTAbits 000F80                      _PORTCbits 000F82  
             __CFG_DSBOREN$OFF 000000                    ?_lcd_comand 0001               __CFG_CPUDIV$OSC1 000000  
                    _TRISBbits 000F93                    ?_lcd_gotoxy 0005      __size_of_lcd_setcursor_vb 0014  
              _LCD_INIT_STRING 0F0B                    ___ftdiv@exp 0016               __CFG_IOL1WAY$OFF 000000  
    RtccWriteDate@tempDayMonth 000A                ??_is_not_letter 0001            __CFG_MSSP7B_EN$MSK7 000000  
                  ___ftmul@exp 0016                ??_read_keyboard 0024               Delay100TCYx@unit 0001  
                   _write_Date 2A6E                 __end_of___ftge 2842                    __delay_s@it 000C  
               __end_of___wmul 3040      RtccWriteDate@tempHourWDay 000C      set_desactive_vision@digit 000B  
           not_fill_pass@digit 0001              ??_lcd_send_nibble 0001                  __pbitbssBANK0 06E0  
         __size_of_Delay1KTCYx 0012               __CFG_DSWDTEN$OFF 000000                     floor@expon 0047  
          start_initialization 2F50                     eval_poly@d 002B                     eval_poly@n 002D  
                   eval_poly@x 0028                     ldexp@value 0034                    __end_of_exp 16C8  
                  __end_of_log 1F78                    __end_of_pow 1BAA               review_code@digit 0003  
                   frexp@value 0001           RtccWriteTime@wasAlrm 0006           RtccWriteTime@wasWrEn 0007  
       __size_of_RtccWriteDate 0146                RtccWriteDate@di 0003         __size_of_RtccWriteTime 010C  
          __size_of_lcd_comand 000E                       ??___ftge 0007            __size_of_lcd_gotoxy 0024  
                     ??___wmul 0005                    ?_set_vision 0001                    __pdataBANK0 00BF  
            __size_of_RtccWrOn 0012                RtccWriteTime@di 0003               __CFG_LPT1OSC$OFF 000000  
       __size_of_not_fill_pass 0014              __size_of___altoft 007C                    _ALRMCFGbits 000F91  
      __end_of_LCD_INIT_STRING 0F0F              __size_of___awtoft 003C              __size_of___ftpack 00C6  
            __size_of___lbtoft 0026              __size_of__delay_s 0058              __size_of___lltoft 0060  
                __pcstackBANK0 00A8                      _Write_RTC 188C                   _isdigit$2371 0002  
            __size_of_caratula 0008                  ??_obtain_pass 005D                Delay1KTCYx@unit 0001  
            __size_of_lcd_init 0080                    sprintf@flag 001D              __size_of_lcd_putc 004C  
                  sprintf@prec 0020                      _checkPass 30F6                      __pnvBANK0 00CF  
             ___lwdiv@dividend 0001                  ?_Delay100TCYx 0001                       ?___awdiv 0001  
                     ?___ftadd 001C                       ?___ftdiv 0009                       ?___ftneg 0001  
                     ?___ftmul 000D                       ?___ftsub 0028                       ?___fttol 0028  
                     ?___lwdiv 0001                    ?_write_Date 0001                       ?___lwmod 0008  
      RtccWriteTime@tempMinSec 0008  __size_of_set_desactive_vision 002C                      _lcd_putrs 2D50  
      lcd_setcursor_vb@visible 0006                  _RtccWriteDate 1D12                    __smallconst 0F00  
                _RtccWriteTime 1F78                       ?_isdigit 0001                      _eval_poly 2612  
         __CFG_RTCOSC$T1OSCREF 000000               _lcd_setcursor_vb 3128                 __size_of_Setup 0048  
                   ?_Write_RTC 0001               ___lwdiv@quotient 0005                 __size_of_clear 0016  
             ??_clear_keyboard 0001                       ?_sprintf 000D                 __size_of_floor 00DE  
               __size_of_ldexp 00D4                 __size_of_frexp 0092                       ?_twinkle 0001  
               set_vision@pass 00B9            __size_of_set_vision 0168               _RtccAlrmTimeDate 0060  
                _not_fill_pass 313C                 ___wmul@product 0005                __delay_s@millis 0009  
                     _LATAbits 000F89                       _LATBbits 000F8A                     ?_checkPass 0001  
                    _next_code 2E3C                       _PIE3bits 000FA3            __end_of_obtain_pass 2374  
                    _segundo_d 00DA                 ??_Delay100TCYx 0001                      _segundo_u 00DB  
             __CFG_WDTPS$32768 000000             _is_not_letter$1329 0001                  ??_review_code 0007  
           RtccWriteDate@wasOn 0005             _Rtcc_read_TimeDate 0070                 ?_RtccWriteDate 0001  
                   ?_lcd_putrs 0009              ___wmul@multiplier 0001                 ?_RtccWriteTime 0001  
                    lcd_init@i 0005                   ??_lcd_comand 0005                     ?_eval_poly 0028  
                    main@input 00BE                      lcd_putc@c 0008                   ??_lcd_gotoxy 0006  
                    copy_data0 2F74                 ?_not_fill_pass 0001            __size_of_write_Date 007E  
                   ?_next_code 0008                      frexp@eptr 0004                _lcd_send_nibble 2B68  
                     __Hrparam 0000                       _RtccDate 00A0                       __Lrparam 0000  
                     _RtccTime 00A4                       _RtccWrOn 3174             __end_of_lcd_comand 31A4  
           __end_of_lcd_gotoxy 30D4               __size_of___awdiv 0096               __size_of___ftadd 01C4  
             __size_of___ftdiv 00EC               __size_of___ftneg 0024                       ___altoft 2AEC  
             __size_of___ftmul 0102               __size_of___ftsub 0044               __size_of___fttol 0102  
             __size_of___lwdiv 005C               __size_of___lwmod 004C                       ___awtoft 2F14  
                     ___ftpack 26E6                       ___lbtoft 3066                       __delay_s 2CF8  
                     ___lltoft 2BDE                   _RtccTimeDate 0068                       _exp$2748 004C  
          __end_of_review_code 3066                     sprintf@val 001E                       _caratula 31AC  
             __size_of_isdigit 0022                ___lwdiv@divisor 0003                    ??_Write_RTC 000E  
              ___lwdiv@counter 0007                       __ptext10 2FEC                       __ptext11 3128  
                     __ptext20 253E                       __ptext12 2D50                       __ptext21 2460  
                     __ptext13 2DF0                       __ptext30 16C8                       __ptext22 28D8  
                     __ptext14 3040                       __ptext31 308C                       __ptext23 2084  
                     __ptext15 30F6                       __ptext40 313C                       __ptext32 2374  
                     __ptext24 27AC                       __ptext16 2288                       __ptext41 2FBC  
                     __ptext33 2F14                       __ptext25 2AEC                       __ptext17 1A28  
                     __ptext50 3162                       __ptext42 3112                       __ptext34 2BDE  
                     __ptext26 2612                       __ptext18 1E58                       __ptext51 188C  
                     __ptext43 31AC                       __ptext35 2E3C                       __ptext27 3018  
                     __ptext19 14E0                       __ptext52 2842                       __ptext44 2E88  
                     __ptext36 30B0                       __ptext28 2186                       __ptext53 1F78  
                     __ptext45 29EE                       __ptext37 31A4                       __ptext29 2ED0  
                     __ptext54 1D12                       __ptext46 3150                       __ptext38 3066  
                     __ptext55 3174                       __ptext47 3196                       __ptext39 26E6  
                     __ptext48 2F8A                       __ptext49 2B68                       _lcd_init 29EE  
                     _lcd_putc 2DF0                       _pow$2746 00A8                       _pow$2747 00AB  
                  _obtain_pass 2288                 next_code@digit 0008               __size_of_sprintf 0264  
             __size_of_twinkle 005E                 next_code@input 000A         __size_of_lcd_send_byte 0032  
                __size_of_main 0084                    ??_checkPass 0003                       _minuto_d 00D8  
                     _minuto_u 00D9                       _password 00CB          __end_of_is_not_letter 2FEC  
                 ??_set_vision 005F          __end_of_read_keyboard 127C                  ??_Delay1KTCYx 0001  
              ??_RtccWriteDate 0004                ??_RtccWriteTime 0004                    ??_lcd_putrs 000B  
                     exp@coeff 0F0F                       log@coeff 0F2D                    _OSCTUNEbits 000F9B  
                   _INTCONbits 000FF2                    ??_eval_poly 002F             RtccWriteTime@wasOn 0005  
         __end_of_Delay100TCYx 3174                       isdigit@c 0003                ??_not_fill_pass 0003  
                    sprintf@ap 001B        __end_of_lcd_send_nibble 2BDE                      sprintf@sp 000D  
           __end_of_set_vision 1D12          lcd_setcursor_vb@blink 0005               ___lwmod@dividend 0008  
                  ??_next_code 000C                     _OSCCONbits 000FD3       __end_of_lcd_setcursor_vb 313C  
        RtccWriteDate@tempYear 0007                   ??_write_Date 0024                    _review_code 3040  
                _lcd_send_byte 2F8A                     _RTCCFGbits 000F3F                       sprintf@c 0023  
                     sprintf@f 000F                ___lwmod@divisor 000A            __end_of_Delay1KTCYx 3162  
              ___lwmod@counter 000C           RtccWriteDate@wasAlrm 0006           RtccWriteDate@wasWrEn 0009  
             _obtain_pass$2744 00B3               _obtain_pass$2745 00B6   __end_of_set_desactive_vision 3018  
           __end_of_write_Date 2AEC          lcd_send_nibble@nibble 0002  
