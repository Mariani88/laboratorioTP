

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sun Sep 04 19:46:32 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    44                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    45  0000                     
    46                           	psect	idataCOMRAM
    47  001F0C                     __pidataCOMRAM:
    48                           	opt stack 0
    49                           
    50                           ;initializer for _anio
    51  001F0C  000F               	dw	15
    52                           
    53                           ;initializer for _dia
    54  001F0E  0008               	dw	8
    55                           
    56                           ;initializer for _diasem
    57  001F10  0003               	dw	3
    58                           
    59                           ;initializer for _hora
    60  001F12  0012               	dw	18
    61                           
    62                           ;initializer for _mes
    63  001F14  0009               	dw	9
    64                           
    65                           ;initializer for _minuto
    66  001F16  001E               	dw	30
    67                           
    68                           ;initializer for _state_alarm
    69  001F18  01                 	db	1
    70                           
    71                           	psect	smallconst
    72  000F00                     __psmallconst:
    73                           	opt stack 0
    74  000F00  00                 	db	0
    75  000F01                     _dpowers:
    76                           	opt stack 0
    77  000F01  0001               	dw	1
    78  000F03  000A               	dw	10
    79  000F05  0064               	dw	100
    80  000F07  03E8               	dw	1000
    81  000F09  2710               	dw	10000
    82  000F0B                     __end_of_dpowers:
    83                           	opt stack 0
    84  000F0B                     _LCD_INIT_STRING:
    85                           	opt stack 0
    86  000F0B  28                 	db	40
    87  000F0C  0C                 	db	12
    88  000F0D  01                 	db	1
    89  000F0E  06                 	db	6
    90  000F0F                     __end_of_LCD_INIT_STRING:
    91                           	opt stack 0
    92  000F0F                     STR_1:
    93                           
    94                           ; BSR set to: 15
    95  000F0F  20                 	db	32
    96  000F10  20                 	db	32
    97  000F11  20                 	db	32
    98  000F12  20                 	db	32
    99  000F13  20                 	db	32
   100  000F14  20                 	db	32
   101  000F15  20                 	db	32
   102  000F16  20                 	db	32
   103  000F17  20                 	db	32
   104  000F18  20                 	db	32
   105  000F19  20                 	db	32
   106  000F1A  20                 	db	32
   107  000F1B  20                 	db	32
   108  000F1C  20                 	db	32
   109  000F1D  20                 	db	32
   110  000F1E  20                 	db	32
   111  000F1F  20                 	db	32
   112  000F20  20                 	db	32
   113  000F21  20                 	db	32
   114  000F22  20                 	db	32
   115  000F23  20                 	db	32
   116  000F24  20                 	db	32
   117  000F25  20                 	db	32
   118  000F26  20                 	db	32
   119  000F27  20                 	db	32
   120  000F28  20                 	db	32
   121  000F29  20                 	db	32
   122  000F2A  20                 	db	32
   123  000F2B  20                 	db	32
   124  000F2C  20                 	db	32
   125  000F2D  20                 	db	32
   126  000F2E  20                 	db	32
   127  000F2F  00                 	db	0
   128  000F30                     STR_20:
   129                           
   130                           ; BSR set to: 15
   131  000F30  25                 	db	37
   132  000F31  30                 	db	48	;'0'
   133  000F32  32                 	db	50	;'2'
   134  000F33  75                 	db	117	;'u'
   135  000F34  2F                 	db	47
   136  000F35  25                 	db	37
   137  000F36  30                 	db	48	;'0'
   138  000F37  32                 	db	50	;'2'
   139  000F38  75                 	db	117	;'u'
   140  000F39  2F                 	db	47
   141  000F3A  25                 	db	37
   142  000F3B  30                 	db	48	;'0'
   143  000F3C  32                 	db	50	;'2'
   144  000F3D  75                 	db	117	;'u'
   145  000F3E  00                 	db	0
   146  000F3F                     STR_2:
   147                           
   148                           ; BSR set to: 15
   149  000F3F  6E                 	db	110	;'n'
   150  000F40  75                 	db	117	;'u'
   151  000F41  6C                 	db	108	;'l'
   152  000F42  6C                 	db	108	;'l'
   153  000F43  20                 	db	32
   154  000F44  70                 	db	112	;'p'
   155  000F45  6F                 	db	111	;'o'
   156  000F46  69                 	db	105	;'i'
   157  000F47  6E                 	db	110	;'n'
   158  000F48  74                 	db	116	;'t'
   159  000F49  65                 	db	101	;'e'
   160  000F4A  72                 	db	114	;'r'
   161  000F4B  00                 	db	0
   162  000F4C                     STR_22:
   163                           
   164                           ; BSR set to: 15
   165  000F4C  57                 	db	87	;'W'
   166  000F4D  41                 	db	65	;'A'
   167  000F4E  52                 	db	82	;'R'
   168  000F4F  4E                 	db	78	;'N'
   169  000F50  49                 	db	73	;'I'
   170  000F51  4E                 	db	78	;'N'
   171  000F52  47                 	db	71	;'G'
   172  000F53  21                 	db	33
   173  000F54  21                 	db	33
   174  000F55  21                 	db	33
   175  000F56  00                 	db	0
   176  000F57                     STR_26:
   177                           
   178                           ; BSR set to: 15
   179  000F57  70                 	db	112	;'p'
   180  000F58  61                 	db	97	;'a'
   181  000F59  73                 	db	115	;'s'
   182  000F5A  73                 	db	115	;'s'
   183  000F5B  3A                 	db	58	;':'
   184  000F5C  5F                 	db	95	;'_'
   185  000F5D  5F                 	db	95	;'_'
   186  000F5E  5F                 	db	95	;'_'
   187  000F5F  5F                 	db	95	;'_'
   188  000F60  00                 	db	0
   189  000F61                     STR_21:
   190                           
   191                           ; BSR set to: 15
   192  000F61  25                 	db	37
   193  000F62  30                 	db	48	;'0'
   194  000F63  32                 	db	50	;'2'
   195  000F64  75                 	db	117	;'u'
   196  000F65  3A                 	db	58	;':'
   197  000F66  25                 	db	37
   198  000F67  30                 	db	48	;'0'
   199  000F68  32                 	db	50	;'2'
   200  000F69  75                 	db	117	;'u'
   201  000F6A  00                 	db	0
   202  000F6B                     STR_3:
   203                           
   204                           ; BSR set to: 15
   205  000F6B  65                 	db	101	;'e'
   206  000F6C  78                 	db	120	;'x'
   207  000F6D  63                 	db	99	;'c'
   208  000F6E  65                 	db	101	;'e'
   209  000F6F  70                 	db	112	;'p'
   210  000F70  74                 	db	116	;'t'
   211  000F71  69                 	db	105	;'i'
   212  000F72  6F                 	db	111	;'o'
   213  000F73  6E                 	db	110	;'n'
   214  000F74  00                 	db	0
   215  000F75                     STR_27:
   216                           
   217                           ; BSR set to: 15
   218  000F75  54                 	db	84	;'T'
   219  000F76  52                 	db	82	;'R'
   220  000F77  49                 	db	73	;'I'
   221  000F78  47                 	db	71	;'G'
   222  000F79  47                 	db	71	;'G'
   223  000F7A  45                 	db	69	;'E'
   224  000F7B  44                 	db	68	;'D'
   225  000F7C  00                 	db	0
   226  000F7D                     STR_4:
   227                           
   228                           ; BSR set to: 15
   229  000F7D  25                 	db	37
   230  000F7E  30                 	db	48	;'0'
   231  000F7F  31                 	db	49	;'1'
   232  000F80  75                 	db	117	;'u'
   233  000F81  00                 	db	0
   234  000F82                     STR_25:
   235                           
   236                           ; BSR set to: 15
   237  000F82  4F                 	db	79	;'O'
   238  000F83  46                 	db	70	;'F'
   239  000F84  46                 	db	70	;'F'
   240  000F85  00                 	db	0
   241  000F86                     STR_24:
   242                           
   243                           ; BSR set to: 15
   244  000F86  4F                 	db	79	;'O'
   245  000F87  4E                 	db	78	;'N'
   246  000F88  00                 	db	0
   247  000F89                     STR_18:
   248                           
   249                           ; BSR set to: 15
   250  000F89  23                 	db	35
   251  000F8A  00                 	db	0
   252  000F8B                     STR_16:
   253                           
   254                           ; BSR set to: 15
   255  000F8B  2A                 	db	42
   256  000F8C  00                 	db	0
   257  000F8D                     STR_7:
   258                           
   259                           ; BSR set to: 15
   260  000F8D  41                 	db	65	;'A'
   261  000F8E  00                 	db	0
   262  000F8F                     STR_11:
   263                           
   264                           ; BSR set to: 15
   265  000F8F  42                 	db	66	;'B'
   266  000F90  00                 	db	0
   267  000F91                     STR_15:
   268                           
   269                           ; BSR set to: 15
   270  000F91  43                 	db	67	;'C'
   271  000F92  00                 	db	0
   272  0000                     
   273                           ; #config settings
   274  000F93  00                 	db	0	; dummy byte at the end
   275  0000                     
   276                           	psect	nvCOMRAM
   277  000043                     __pnvCOMRAM:
   278                           	opt stack 0
   279  000043                     _anio_d:
   280                           	opt stack 0
   281  000043                     	ds	1
   282  000044                     _anio_u:
   283                           	opt stack 0
   284  000044                     	ds	1
   285  000045                     _dia_semana:
   286                           	opt stack 0
   287  000045                     	ds	1
   288  000046                     _fecha_d:
   289                           	opt stack 0
   290  000046                     	ds	1
   291  000047                     _fecha_u:
   292                           	opt stack 0
   293  000047                     	ds	1
   294  000048                     _hora_d:
   295                           	opt stack 0
   296  000048                     	ds	1
   297  000049                     _hora_u:
   298                           	opt stack 0
   299  000049                     	ds	1
   300  00004A                     _mes_d:
   301                           	opt stack 0
   302  00004A                     	ds	1
   303  00004B                     _mes_u:
   304                           	opt stack 0
   305  00004B                     	ds	1
   306  00004C                     _minuto_d:
   307                           	opt stack 0
   308  00004C                     	ds	1
   309  00004D                     _minuto_u:
   310                           	opt stack 0
   311  00004D                     	ds	1
   312  00004E                     _segundo_d:
   313                           	opt stack 0
   314  00004E                     	ds	1
   315  00004F                     _segundo_u:
   316                           	opt stack 0
   317  00004F                     	ds	1
   318  0000                     _ANCON0	set	3912
   319  0000                     _ANCON1	set	3913
   320  0000                     _RTCCFG	set	3903
   321  0000                     _RTCCFGbits	set	3903
   322  0000                     _ADCON0	set	4034
   323  0000                     _ADCON1	set	4033
   324  0000                     _ALRMCFGbits	set	3985
   325  0000                     _EECON2	set	4007
   326  0000                     _INTCONbits	set	4082
   327  0000                     _LATAbits	set	3977
   328  0000                     _LATBbits	set	3978
   329  0000                     _OSCCONbits	set	4051
   330  0000                     _OSCTUNEbits	set	3995
   331  0000                     _PIE3bits	set	4003
   332  0000                     _PORTAbits	set	3968
   333  0000                     _PORTCbits	set	3970
   334  0000                     _RTCVALH	set	3993
   335  0000                     _RTCVALL	set	3992
   336  0000                     _T1CONbits	set	4045
   337  0000                     _TRISA	set	3986
   338  0000                     _TRISB	set	3987
   339  0000                     _TRISBbits	set	3987
   340  0000                     _TRISC	set	3988
   341                           
   342                           	psect	cinit
   343  001DBA                     __pcinit:
   344                           	opt stack 0
   345  001DBA                     start_initialization:
   346                           	opt stack 0
   347  001DBA                     __initialization:
   348                           	opt stack 0
   349                           
   350                           ; Clear objects allocated to BANK0 (44 bytes)
   351  001DBA  EE00  F060         	lfsr	0,__pbssBANK0
   352  001DBE  0E2C               	movlw	44
   353  001DC0                     clear_0:
   354  001DC0  6AEE               	clrf	postinc0,c
   355  001DC2  06E8               	decf	wreg,f,c
   356  001DC4  E1FD               	bnz	clear_0
   357                           
   358                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   359  001DC6  6A5D               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   360                           
   361                           ; Clear objects allocated to COMRAM (27 bytes)
   362  001DC8  EE00  F028         	lfsr	0,__pbssCOMRAM
   363  001DCC  0E1B               	movlw	27
   364  001DCE                     clear_1:
   365  001DCE  6AEE               	clrf	postinc0,c
   366  001DD0  06E8               	decf	wreg,f,c
   367  001DD2  E1FD               	bnz	clear_1
   368                           
   369                           ; Initialize objects allocated to COMRAM (13 bytes)
   370                           ; load TBLPTR registers with __pidataCOMRAM
   371  001DD4  0E0C               	movlw	low __pidataCOMRAM
   372  001DD6  6EF6               	movwf	tblptrl,c
   373  001DD8  0E1F               	movlw	high __pidataCOMRAM
   374  001DDA  6EF7               	movwf	tblptrh,c
   375  001DDC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   376  001DDE  6EF8               	movwf	tblptru,c
   377  001DE0  EE00  F050         	lfsr	0,__pdataCOMRAM
   378  001DE4  EE10 F00D          	lfsr	1,13
   379  001DE8                     copy_data0:
   380  001DE8  0009               	tblrd		*+
   381  001DEA  CFF5 FFEE          	movff	tablat,postinc0
   382  001DEE  50E5               	movf	postdec1,w,c
   383  001DF0  50E1               	movf	fsr1l,w,c
   384  001DF2  E1FA               	bnz	copy_data0
   385  001DF4                     end_of_initialization:
   386                           	opt stack 0
   387  001DF4                     __end_of__initialization:
   388                           	opt stack 0
   389  001DF4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   390  001DF6  6EF8               	movwf	tblptru,c
   391  001DF8  0100               	movlb	0
   392  001DFA  EF41  F00D         	goto	_main	;jump to C main() function
   393                           tblptru	equ	0xFF8
   394                           tblptrh	equ	0xFF7
   395                           tblptrl	equ	0xFF6
   396                           tablat	equ	0xFF5
   397                           postinc0	equ	0xFEE
   398                           wreg	equ	0xFE8
   399                           postdec1	equ	0xFE5
   400                           fsr1l	equ	0xFE1
   401                           
   402                           	psect	bitbssCOMRAM
   403  0002E8                     __pbitbssCOMRAM:
   404                           	opt stack 0
   405  0002E8                     _flag:
   406                           	opt stack 0
   407  0002E8                     	ds	1
   408                           tblptru	equ	0xFF8
   409                           tblptrh	equ	0xFF7
   410                           tblptrl	equ	0xFF6
   411                           tablat	equ	0xFF5
   412                           postinc0	equ	0xFEE
   413                           wreg	equ	0xFE8
   414                           postdec1	equ	0xFE5
   415                           fsr1l	equ	0xFE1
   416                           
   417                           	psect	bssCOMRAM
   418  000028                     __pbssCOMRAM:
   419                           	opt stack 0
   420  000028                     _RtccTimeVal:
   421                           	opt stack 0
   422  000028                     	ds	4
   423  00002C                     _a:
   424                           	opt stack 0
   425  00002C                     	ds	2
   426  00002E                     _b:
   427                           	opt stack 0
   428  00002E                     	ds	2
   429  000030                     _c:
   430                           	opt stack 0
   431  000030                     	ds	2
   432  000032                     _i:
   433                           	opt stack 0
   434  000032                     	ds	2
   435  000034                     _j:
   436                           	opt stack 0
   437  000034                     	ds	2
   438  000036                     _k:
   439                           	opt stack 0
   440  000036                     	ds	2
   441  000038                     _segundo:
   442                           	opt stack 0
   443  000038                     	ds	2
   444  00003A                     _key:
   445                           	opt stack 0
   446  00003A                     	ds	1
   447  00003B                     _RtccDate:
   448                           	opt stack 0
   449  00003B                     	ds	4
   450  00003F                     _RtccTime:
   451                           	opt stack 0
   452  00003F                     	ds	4
   453                           tblptru	equ	0xFF8
   454                           tblptrh	equ	0xFF7
   455                           tblptrl	equ	0xFF6
   456                           tablat	equ	0xFF5
   457                           postinc0	equ	0xFEE
   458                           wreg	equ	0xFE8
   459                           postdec1	equ	0xFE5
   460                           fsr1l	equ	0xFE1
   461                           
   462                           	psect	dataCOMRAM
   463  000050                     __pdataCOMRAM:
   464                           	opt stack 0
   465  000050                     _anio:
   466                           	opt stack 0
   467  000050                     	ds	2
   468  000052                     _dia:
   469                           	opt stack 0
   470  000052                     	ds	2
   471  000054                     _diasem:
   472                           	opt stack 0
   473  000054                     	ds	2
   474  000056                     _hora:
   475                           	opt stack 0
   476  000056                     	ds	2
   477  000058                     _mes:
   478                           	opt stack 0
   479  000058                     	ds	2
   480  00005A                     _minuto:
   481                           	opt stack 0
   482  00005A                     	ds	2
   483  00005C                     _state_alarm:
   484                           	opt stack 0
   485  00005C                     	ds	1
   486                           tblptru	equ	0xFF8
   487                           tblptrh	equ	0xFF7
   488                           tblptrl	equ	0xFF6
   489                           tablat	equ	0xFF5
   490                           postinc0	equ	0xFEE
   491                           wreg	equ	0xFE8
   492                           postdec1	equ	0xFE5
   493                           fsr1l	equ	0xFE1
   494                           
   495                           	psect	bssBANK0
   496  000060                     __pbssBANK0:
   497                           	opt stack 0
   498  000060                     _RtccAlrmTimeDate:
   499                           	opt stack 0
   500  000060                     	ds	8
   501  000068                     _RtccTimeDate:
   502                           	opt stack 0
   503  000068                     	ds	8
   504  000070                     _Rtcc_read_TimeDate:
   505                           	opt stack 0
   506  000070                     	ds	8
   507  000078                     _buffer2:
   508                           	opt stack 0
   509  000078                     	ds	20
   510                           tblptru	equ	0xFF8
   511                           tblptrh	equ	0xFF7
   512                           tblptrl	equ	0xFF6
   513                           tablat	equ	0xFF5
   514                           postinc0	equ	0xFEE
   515                           wreg	equ	0xFE8
   516                           postdec1	equ	0xFE5
   517                           fsr1l	equ	0xFE1
   518                           
   519                           	psect	cstackCOMRAM
   520  000001                     __pcstackCOMRAM:
   521                           	opt stack 0
   522  000001                     ??_isdigit:
   523  000001                     ??_lcd_send_nibble:
   524  000001                     ?___wmul:
   525                           	opt stack 0
   526  000001                     ?___awdiv:
   527                           	opt stack 0
   528  000001                     ?___lwdiv:
   529                           	opt stack 0
   530  000001                     Delay100TCYx@unit:
   531                           	opt stack 0
   532  000001                     Delay1KTCYx@unit:
   533                           	opt stack 0
   534  000001                     RtccWriteDate@pDt:
   535                           	opt stack 0
   536  000001                     RtccWriteTime@pTm:
   537                           	opt stack 0
   538  000001                     ___wmul@multiplier:
   539                           	opt stack 0
   540  000001                     ___awdiv@dividend:
   541                           	opt stack 0
   542  000001                     ___lwdiv@dividend:
   543                           	opt stack 0
   544                           
   545                           ; 2 bytes @ 0x0
   546  000001                     	ds	1
   547  000002                     lcd_send_nibble@nibble:
   548                           	opt stack 0
   549  000002                     _isdigit$2331:
   550                           	opt stack 0
   551                           
   552                           ; 1 bytes @ 0x1
   553  000002                     	ds	1
   554  000003                     lcd_send_byte@n:
   555                           	opt stack 0
   556  000003                     RtccWriteDate@di:
   557                           	opt stack 0
   558  000003                     RtccWriteTime@di:
   559                           	opt stack 0
   560  000003                     isdigit@c:
   561                           	opt stack 0
   562  000003                     ___wmul@multiplicand:
   563                           	opt stack 0
   564  000003                     ___awdiv@divisor:
   565                           	opt stack 0
   566  000003                     ___lwdiv@divisor:
   567                           	opt stack 0
   568                           
   569                           ; 2 bytes @ 0x2
   570  000003                     	ds	1
   571  000004                     lcd_send_byte@address:
   572                           	opt stack 0
   573                           
   574                           ; 1 bytes @ 0x3
   575  000004                     	ds	1
   576  000005                     lcd_init@i:
   577                           	opt stack 0
   578  000005                     lcd_gotoxy@y:
   579                           	opt stack 0
   580  000005                     lcd_comand@d:
   581                           	opt stack 0
   582  000005                     lcd_setcursor_vb@blink:
   583                           	opt stack 0
   584  000005                     RtccWriteDate@wasOn:
   585                           	opt stack 0
   586  000005                     RtccWriteTime@wasOn:
   587                           	opt stack 0
   588  000005                     ___awdiv@counter:
   589                           	opt stack 0
   590  000005                     ___wmul@product:
   591                           	opt stack 0
   592  000005                     ___lwdiv@quotient:
   593                           	opt stack 0
   594                           
   595                           ; 2 bytes @ 0x4
   596  000005                     	ds	1
   597  000006                     ??_clear:
   598  000006                     lcd_gotoxy@x:
   599                           	opt stack 0
   600  000006                     lcd_setcursor_vb@visible:
   601                           	opt stack 0
   602  000006                     RtccWriteDate@wasAlrm:
   603                           	opt stack 0
   604  000006                     RtccWriteTime@wasAlrm:
   605                           	opt stack 0
   606  000006                     ___awdiv@sign:
   607                           	opt stack 0
   608                           
   609                           ; 1 bytes @ 0x5
   610  000006                     	ds	1
   611  000007                     lcd_gotoxy@address:
   612                           	opt stack 0
   613  000007                     RtccWriteTime@wasWrEn:
   614                           	opt stack 0
   615  000007                     ___lwdiv@counter:
   616                           	opt stack 0
   617  000007                     RtccWriteDate@tempYear:
   618                           	opt stack 0
   619  000007                     ___awdiv@quotient:
   620                           	opt stack 0
   621                           
   622                           ; 2 bytes @ 0x6
   623  000007                     	ds	1
   624  000008                     ?___lwmod:
   625                           	opt stack 0
   626  000008                     lcd_putc@c:
   627                           	opt stack 0
   628  000008                     RtccWriteTime@tempMinSec:
   629                           	opt stack 0
   630  000008                     ___lwmod@dividend:
   631                           	opt stack 0
   632                           
   633                           ; 2 bytes @ 0x7
   634  000008                     	ds	1
   635  000009                     RtccWriteDate@wasWrEn:
   636                           	opt stack 0
   637  000009                     lcd_putrs@ptr:
   638                           	opt stack 0
   639  000009                     __delay_s@millis:
   640                           	opt stack 0
   641                           
   642                           ; 2 bytes @ 0x8
   643  000009                     	ds	1
   644  00000A                     RtccWriteDate@tempDayMonth:
   645                           	opt stack 0
   646  00000A                     RtccWriteTime@tempHourWDay:
   647                           	opt stack 0
   648  00000A                     ___lwmod@divisor:
   649                           	opt stack 0
   650                           
   651                           ; 2 bytes @ 0x9
   652  00000A                     	ds	1
   653  00000B                     ??__delay_s:
   654                           
   655                           ; 0 bytes @ 0xA
   656  00000B                     	ds	1
   657  00000C                     ___lwmod@counter:
   658                           	opt stack 0
   659  00000C                     __delay_s@it:
   660                           	opt stack 0
   661  00000C                     RtccWriteDate@tempHourWDay:
   662                           	opt stack 0
   663                           
   664                           ; 2 bytes @ 0xB
   665  00000C                     	ds	1
   666  00000D                     ?_sprintf:
   667                           	opt stack 0
   668  00000D                     sprintf@sp:
   669                           	opt stack 0
   670                           
   671                           ; 2 bytes @ 0xC
   672  00000D                     	ds	1
   673  00000E                     __delay_s@index:
   674                           	opt stack 0
   675                           
   676                           ; 2 bytes @ 0xD
   677  00000E                     	ds	1
   678  00000F                     sprintf@f:
   679                           	opt stack 0
   680                           
   681                           ; 2 bytes @ 0xE
   682  00000F                     	ds	8
   683  000017                     ??_sprintf:
   684                           
   685                           ; 0 bytes @ 0x16
   686  000017                     	ds	4
   687  00001B                     sprintf@ap:
   688                           	opt stack 0
   689                           
   690                           ; 2 bytes @ 0x1A
   691  00001B                     	ds	2
   692  00001D                     sprintf@flag:
   693                           	opt stack 0
   694                           
   695                           ; 1 bytes @ 0x1C
   696  00001D                     	ds	1
   697  00001E                     sprintf@val:
   698                           	opt stack 0
   699                           
   700                           ; 2 bytes @ 0x1D
   701  00001E                     	ds	2
   702  000020                     sprintf@prec:
   703                           	opt stack 0
   704                           
   705                           ; 1 bytes @ 0x1F
   706  000020                     	ds	1
   707  000021                     sprintf@width:
   708                           	opt stack 0
   709                           
   710                           ; 2 bytes @ 0x20
   711  000021                     	ds	2
   712  000023                     sprintf@c:
   713                           	opt stack 0
   714                           
   715                           ; 1 bytes @ 0x22
   716  000023                     	ds	1
   717  000024                     ??_read_keyboard:
   718  000024                     
   719                           ; 0 bytes @ 0x23
   720  000024                     	ds	1
   721  000025                     twinkle@input:
   722                           	opt stack 0
   723                           
   724                           ; 1 bytes @ 0x24
   725  000025                     	ds	1
   726  000026                     ??_main:
   727                           
   728                           ; 0 bytes @ 0x25
   729  000026                     	ds	1
   730  000027                     main@input:
   731                           	opt stack 0
   732                           
   733                           ; 1 bytes @ 0x26
   734  000027                     	ds	1
   735                           tblptru	equ	0xFF8
   736                           tblptrh	equ	0xFF7
   737                           tblptrl	equ	0xFF6
   738                           tablat	equ	0xFF5
   739                           postinc0	equ	0xFEE
   740                           wreg	equ	0xFE8
   741                           postdec1	equ	0xFE5
   742                           fsr1l	equ	0xFE1
   743                           
   744 ;;
   745 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   746 ;;
   747 ;; *************** function _main *****************
   748 ;; Defined at:
   749 ;;		line 87 in file "main.c"
   750 ;; Parameters:    Size  Location     Type
   751 ;;		None
   752 ;; Auto vars:     Size  Location     Type
   753 ;;  input           1   38[COMRAM] unsigned char 
   754 ;; Return value:  Size  Location     Type
   755 ;;                  2   52[None  ] int 
   756 ;; Registers used:
   757 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   758 ;; Tracked objects:
   759 ;;		On entry : 0/0
   760 ;;		On exit  : 0/0
   761 ;;		Unchanged: 0/0
   762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   764 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   765 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   766 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   767 ;;Total ram usage:        2 bytes
   768 ;; Hardware stack levels required when called:    8
   769 ;; This function calls:
   770 ;;		_Setup
   771 ;;		_caratula
   772 ;;		_lcd_gotoxy
   773 ;;		_lcd_putrs
   774 ;;		_read_keyboard
   775 ;;		_set_vision
   776 ;; This function is called by:
   777 ;;		Startup code after reset
   778 ;; This function uses a non-reentrant model
   779 ;;
   780                           
   781                           	psect	text0
   782  001A82                     __ptext0:
   783                           	opt stack 0
   784  001A82                     _main:
   785                           	opt stack 23
   786                           
   787                           ;main.c: 88: Setup();
   788                           
   789                           ; BSR set to: 15
   790                           ;incstack = 0
   791  001A82  ECB9  F00E         	call	_Setup	;wreg free
   792                           
   793                           ;main.c: 89: caratula();
   794  001A86  EC8D  F00F         	call	_caratula	;wreg free
   795  001A8A  D000               	goto	l2817
   796  001A8C                     l2817:
   797                           
   798                           ;main.c: 94: set_vision();
   799  001A8C  ECC3  F00C         	call	_set_vision	;wreg free
   800                           
   801                           ;main.c: 96: char input = read_keyboard();
   802  001A90  ECCA  F007         	call	_read_keyboard	;wreg free
   803  001A94  6E27               	movwf	main@input,c
   804                           
   805                           ;main.c: 98: if (input == 16){
   806  001A96  0E10               	movlw	16
   807  001A98  1827               	xorwf	main@input,w,c
   808  001A9A  A4D8               	btfss	status,2,c
   809  001A9C  D7F7               	goto	l2817
   810                           
   811                           ;main.c: 99: lcd_gotoxy(1,1);
   812  001A9E  0E01               	movlw	1
   813  001AA0  6E05               	movwf	lcd_gotoxy@y,c
   814  001AA2  0E01               	movlw	1
   815  001AA4  EC2C  F00F         	call	_lcd_gotoxy
   816                           
   817                           ;main.c: 100: lcd_putrs("                                ");
   818  001AA8  0E0F               	movlw	low STR_1
   819  001AAA  6E09               	movwf	lcd_putrs@ptr,c
   820  001AAC  0E0F               	movlw	high STR_1
   821  001AAE  6E0A               	movwf	lcd_putrs@ptr+1,c
   822  001AB0  EC43  F00E         	call	_lcd_putrs	;wreg free
   823                           
   824                           ;main.c: 101: lcd_gotoxy(1,1);
   825  001AB4  0E01               	movlw	1
   826  001AB6  6E05               	movwf	lcd_gotoxy@y,c
   827  001AB8  0E01               	movlw	1
   828  001ABA  EC2C  F00F         	call	_lcd_gotoxy
   829                           
   830                           ;main.c: 102: lcd_putrs("null pointer");
   831  001ABE  0E3F               	movlw	low STR_2
   832  001AC0  6E09               	movwf	lcd_putrs@ptr,c
   833  001AC2  0E0F               	movlw	high STR_2
   834  001AC4  6E0A               	movwf	lcd_putrs@ptr+1,c
   835  001AC6  EC43  F00E         	call	_lcd_putrs	;wreg free
   836                           
   837                           ;main.c: 103: lcd_gotoxy(1,2);
   838  001ACA  0E02               	movlw	2
   839  001ACC  6E05               	movwf	lcd_gotoxy@y,c
   840  001ACE  0E01               	movlw	1
   841  001AD0  EC2C  F00F         	call	_lcd_gotoxy
   842                           
   843                           ;main.c: 104: lcd_putrs("exception");
   844  001AD4  0E6B               	movlw	low STR_3
   845  001AD6  6E09               	movwf	lcd_putrs@ptr,c
   846  001AD8  0E0F               	movlw	high STR_3
   847  001ADA  6E0A               	movwf	lcd_putrs@ptr+1,c
   848  001ADC  EC43  F00E         	call	_lcd_putrs	;wreg free
   849                           
   850                           ;main.c: 105: input = 0;
   851  001AE0  0E00               	movlw	0
   852  001AE2  6E27               	movwf	main@input,c
   853                           
   854                           ;main.c: 106: key = 0;
   855  001AE4  0E00               	movlw	0
   856  001AE6  6E3A               	movwf	_key,c
   857                           
   858                           ;main.c: 107: _delay((unsigned long)((98)*(8000000/4000.0)));
   859  001AE8  0EFF               	movlw	255
   860  001AEA  6E26               	movwf	??_main& (0+255),c
   861  001AEC  0E8A               	movlw	138
   862  001AEE                     u2357:
   863  001AEE  2EE8               	decfsz	wreg,f,c
   864  001AF0  D7FE               	goto	u2357
   865  001AF2  2E26               	decfsz	??_main& (0+255),f,c
   866  001AF4  D7FC               	goto	u2357
   867  001AF6  D000               	nop2	
   868  001AF8  D7C9               	goto	l2817
   869                           
   870                           ;main.c: 108: }
   871                           ;main.c: 109: }
   872                           ;main.c: 111: return 0;
   873                           ;	Return value of _main is never used
   874  001AFA  EF00  F000         	goto	start
   875  001AFE                     __end_of_main:
   876                           	opt stack 0
   877                           tblptru	equ	0xFF8
   878                           tblptrh	equ	0xFF7
   879                           tblptrl	equ	0xFF6
   880                           tablat	equ	0xFF5
   881                           postinc0	equ	0xFEE
   882                           wreg	equ	0xFE8
   883                           postdec1	equ	0xFE5
   884                           fsr1l	equ	0xFE1
   885                           status	equ	0xFD8
   886                           
   887 ;; *************** function _set_vision *****************
   888 ;; Defined at:
   889 ;;		line 45 in file "lcd_vision.c"
   890 ;; Parameters:    Size  Location     Type
   891 ;;		None
   892 ;; Auto vars:     Size  Location     Type
   893 ;;		None
   894 ;; Return value:  Size  Location     Type
   895 ;;		None               void
   896 ;; Registers used:
   897 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   898 ;; Tracked objects:
   899 ;;		On entry : 0/0
   900 ;;		On exit  : 0/0
   901 ;;		Unchanged: 0/0
   902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   906 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   907 ;;Total ram usage:        0 bytes
   908 ;; Hardware stack levels used:    1
   909 ;; Hardware stack levels required when called:    7
   910 ;; This function calls:
   911 ;;		_clear
   912 ;;		_lcd_gotoxy
   913 ;;		_lcd_putrs
   914 ;;		_lcd_setcursor_vb
   915 ;;		_twinkle
   916 ;;		_write_Date
   917 ;; This function is called by:
   918 ;;		_main
   919 ;; This function uses a non-reentrant model
   920 ;;
   921                           
   922                           	psect	text1
   923  001986                     __ptext1:
   924                           	opt stack 0
   925  001986                     _set_vision:
   926                           	opt stack 23
   927                           
   928                           ;lcd_vision.c: 46: clear();
   929                           
   930                           ;incstack = 0
   931  001986  EC4F  F00F         	call	_clear	;wreg free
   932                           
   933                           ;lcd_vision.c: 47: write_Date();
   934  00198A  EC02  F00D         	call	_write_Date	;wreg free
   935                           
   936                           ;lcd_vision.c: 48: lcd_gotoxy(1,1);
   937  00198E  0E01               	movlw	1
   938  001990  6E05               	movwf	lcd_gotoxy@y,c
   939  001992  0E01               	movlw	1
   940  001994  EC2C  F00F         	call	_lcd_gotoxy
   941                           
   942                           ;lcd_vision.c: 50: switch (state_alarm){
   943  001998  D02C               	goto	l2811
   944  00199A                     l2799:
   945  00199A  0E86               	movlw	low STR_24
   946  00199C  6E09               	movwf	lcd_putrs@ptr,c
   947  00199E  0E0F               	movlw	high STR_24
   948  0019A0  6E0A               	movwf	lcd_putrs@ptr+1,c
   949  0019A2  EC43  F00E         	call	_lcd_putrs	;wreg free
   950                           
   951                           ;lcd_vision.c: 52: break;
   952  0019A6  0012               	return	
   953  0019A8                     l2801:
   954  0019A8  0E82               	movlw	low STR_25
   955  0019AA  6E09               	movwf	lcd_putrs@ptr,c
   956  0019AC  0E0F               	movlw	high STR_25
   957  0019AE  6E0A               	movwf	lcd_putrs@ptr+1,c
   958  0019B0  EC43  F00E         	call	_lcd_putrs	;wreg free
   959                           
   960                           ;lcd_vision.c: 54: lcd_gotoxy(7,2);
   961  0019B4  0E02               	movlw	2
   962  0019B6  6E05               	movwf	lcd_gotoxy@y,c
   963  0019B8  0E07               	movlw	7
   964  0019BA  EC2C  F00F         	call	_lcd_gotoxy
   965                           
   966                           ;lcd_vision.c: 55: lcd_putrs("pass:____");
   967  0019BE  0E57               	movlw	low STR_26
   968  0019C0  6E09               	movwf	lcd_putrs@ptr,c
   969  0019C2  0E0F               	movlw	high STR_26
   970  0019C4  6E0A               	movwf	lcd_putrs@ptr+1,c
   971  0019C6  EC43  F00E         	call	_lcd_putrs	;wreg free
   972                           
   973                           ;lcd_vision.c: 56: lcd_gotoxy(12,2);
   974  0019CA  0E02               	movlw	2
   975  0019CC  6E05               	movwf	lcd_gotoxy@y,c
   976  0019CE  0E0C               	movlw	12
   977  0019D0  EC2C  F00F         	call	_lcd_gotoxy
   978                           
   979                           ;lcd_vision.c: 57: lcd_setcursor_vb(1,1);
   980  0019D4  0E01               	movlw	1
   981  0019D6  6E05               	movwf	lcd_setcursor_vb@blink,c
   982  0019D8  0E01               	movlw	1
   983  0019DA  EC5A  F00F         	call	_lcd_setcursor_vb
   984                           
   985                           ;lcd_vision.c: 58: break;
   986  0019DE  0012               	return	
   987  0019E0                     l2807:
   988  0019E0  0E75               	movlw	low STR_27
   989  0019E2  6E09               	movwf	lcd_putrs@ptr,c
   990  0019E4  0E0F               	movlw	high STR_27
   991  0019E6  6E0A               	movwf	lcd_putrs@ptr+1,c
   992  0019E8  EC43  F00E         	call	_lcd_putrs	;wreg free
   993                           
   994                           ;lcd_vision.c: 60: twinkle();
   995  0019EC  ECBA  F00D         	call	_twinkle	;wreg free
   996                           
   997                           ;lcd_vision.c: 61: }
   998  0019F0  0012               	return	
   999  0019F2                     l2811:
  1000  0019F2  505C               	movf	_state_alarm,w,c
  1001                           
  1002                           ; Switch size 1, requested type "space"
  1003                           ; Number of cases is 2, Range of values is 0 to 1
  1004                           ; switch strategies available:
  1005                           ; Name         Instructions Cycles
  1006                           ; simple_byte            7     4 (average)
  1007                           ;	Chosen strategy is simple_byte
  1008  0019F4  0A00               	xorlw	0	; case 0
  1009  0019F6  B4D8               	btfsc	status,2,c
  1010  0019F8  D7D0               	goto	l2799
  1011  0019FA  0A01               	xorlw	1	; case 1
  1012  0019FC  B4D8               	btfsc	status,2,c
  1013  0019FE  D7D4               	goto	l2801
  1014  001A00  D7EF               	goto	l2807
  1015  001A02  0012               	return		;funcret
  1016  001A04                     __end_of_set_vision:
  1017                           	opt stack 0
  1018                           tblptru	equ	0xFF8
  1019                           tblptrh	equ	0xFF7
  1020                           tblptrl	equ	0xFF6
  1021                           tablat	equ	0xFF5
  1022                           postinc0	equ	0xFEE
  1023                           wreg	equ	0xFE8
  1024                           postdec1	equ	0xFE5
  1025                           fsr1l	equ	0xFE1
  1026                           status	equ	0xFD8
  1027                           
  1028 ;; *************** function _write_Date *****************
  1029 ;; Defined at:
  1030 ;;		line 10 in file "lcd_vision.c"
  1031 ;; Parameters:    Size  Location     Type
  1032 ;;		None
  1033 ;; Auto vars:     Size  Location     Type
  1034 ;;		None
  1035 ;; Return value:  Size  Location     Type
  1036 ;;		None               void
  1037 ;; Registers used:
  1038 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1039 ;; Tracked objects:
  1040 ;;		On entry : 0/0
  1041 ;;		On exit  : 0/0
  1042 ;;		Unchanged: 0/0
  1043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1047 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1048 ;;Total ram usage:        0 bytes
  1049 ;; Hardware stack levels used:    1
  1050 ;; Hardware stack levels required when called:    5
  1051 ;; This function calls:
  1052 ;;		_lcd_gotoxy
  1053 ;;		_lcd_putrs
  1054 ;;		_sprintf
  1055 ;; This function is called by:
  1056 ;;		_set_vision
  1057 ;; This function uses a non-reentrant model
  1058 ;;
  1059                           
  1060                           	psect	text2
  1061  001A04                     __ptext2:
  1062                           	opt stack 0
  1063  001A04                     _write_Date:
  1064                           	opt stack 24
  1065                           
  1066                           ;lcd_vision.c: 11: lcd_gotoxy(9,1);
  1067                           
  1068                           ;incstack = 0
  1069  001A04  0E01               	movlw	1
  1070  001A06  6E05               	movwf	lcd_gotoxy@y,c
  1071  001A08  0E09               	movlw	9
  1072  001A0A  EC2C  F00F         	call	_lcd_gotoxy
  1073                           
  1074                           ;lcd_vision.c: 12: sprintf(buffer2,"%02u/%02u/%02u",dia,mes,anio);
  1075  001A0E  0E78               	movlw	low _buffer2
  1076  001A10  6E0D               	movwf	sprintf@sp,c
  1077  001A12  0E00               	movlw	high _buffer2
  1078  001A14  6E0E               	movwf	sprintf@sp+1,c
  1079  001A16  0E30               	movlw	low STR_20
  1080  001A18  6E0F               	movwf	sprintf@f,c
  1081  001A1A  0E0F               	movlw	high STR_20
  1082  001A1C  6E10               	movwf	sprintf@f+1,c
  1083  001A1E  C052  F011         	movff	_dia,?_sprintf+4
  1084  001A22  C053  F012         	movff	_dia+1,?_sprintf+5
  1085  001A26  C058  F013         	movff	_mes,?_sprintf+6
  1086  001A2A  C059  F014         	movff	_mes+1,?_sprintf+7
  1087  001A2E  C050  F015         	movff	_anio,?_sprintf+8
  1088  001A32  C051  F016         	movff	_anio+1,?_sprintf+9
  1089  001A36  EC39  F009         	call	_sprintf	;wreg free
  1090                           
  1091                           ;lcd_vision.c: 13: lcd_putrs(buffer2);
  1092  001A3A  0E78               	movlw	low _buffer2
  1093  001A3C  6E09               	movwf	lcd_putrs@ptr,c
  1094  001A3E  0E00               	movlw	high _buffer2
  1095  001A40  6E0A               	movwf	lcd_putrs@ptr+1,c
  1096  001A42  EC43  F00E         	call	_lcd_putrs	;wreg free
  1097                           
  1098                           ;lcd_vision.c: 14: sprintf(buffer2,"%02u:%02u",hora,minuto);
  1099  001A46  0E78               	movlw	low _buffer2
  1100  001A48  6E0D               	movwf	sprintf@sp,c
  1101  001A4A  0E00               	movlw	high _buffer2
  1102  001A4C  6E0E               	movwf	sprintf@sp+1,c
  1103  001A4E  0E61               	movlw	low STR_21
  1104  001A50  6E0F               	movwf	sprintf@f,c
  1105  001A52  0E0F               	movlw	high STR_21
  1106  001A54  6E10               	movwf	sprintf@f+1,c
  1107  001A56  C056  F011         	movff	_hora,?_sprintf+4
  1108  001A5A  C057  F012         	movff	_hora+1,?_sprintf+5
  1109  001A5E  C05A  F013         	movff	_minuto,?_sprintf+6
  1110  001A62  C05B  F014         	movff	_minuto+1,?_sprintf+7
  1111  001A66  EC39  F009         	call	_sprintf	;wreg free
  1112                           
  1113                           ;lcd_vision.c: 15: lcd_gotoxy(1,2);
  1114  001A6A  0E02               	movlw	2
  1115  001A6C  6E05               	movwf	lcd_gotoxy@y,c
  1116  001A6E  0E01               	movlw	1
  1117  001A70  EC2C  F00F         	call	_lcd_gotoxy
  1118                           
  1119                           ;lcd_vision.c: 16: lcd_putrs(buffer2);
  1120  001A74  0E78               	movlw	low _buffer2
  1121  001A76  6E09               	movwf	lcd_putrs@ptr,c
  1122  001A78  0E00               	movlw	high _buffer2
  1123  001A7A  6E0A               	movwf	lcd_putrs@ptr+1,c
  1124  001A7C  EC43  F00E         	call	_lcd_putrs	;wreg free
  1125  001A80  0012               	return		;funcret
  1126  001A82                     __end_of_write_Date:
  1127                           	opt stack 0
  1128                           tblptru	equ	0xFF8
  1129                           tblptrh	equ	0xFF7
  1130                           tblptrl	equ	0xFF6
  1131                           tablat	equ	0xFF5
  1132                           postinc0	equ	0xFEE
  1133                           wreg	equ	0xFE8
  1134                           postdec1	equ	0xFE5
  1135                           fsr1l	equ	0xFE1
  1136                           status	equ	0xFD8
  1137                           
  1138 ;; *************** function _twinkle *****************
  1139 ;; Defined at:
  1140 ;;		line 28 in file "lcd_vision.c"
  1141 ;; Parameters:    Size  Location     Type
  1142 ;;		None
  1143 ;; Auto vars:     Size  Location     Type
  1144 ;;  input           1   36[COMRAM] unsigned char 
  1145 ;; Return value:  Size  Location     Type
  1146 ;;		None               void
  1147 ;; Registers used:
  1148 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1149 ;; Tracked objects:
  1150 ;;		On entry : 0/0
  1151 ;;		On exit  : 0/0
  1152 ;;		Unchanged: 0/0
  1153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1155 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1157 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1158 ;;Total ram usage:        1 bytes
  1159 ;; Hardware stack levels used:    1
  1160 ;; Hardware stack levels required when called:    6
  1161 ;; This function calls:
  1162 ;;		__delay_s
  1163 ;;		_lcd_gotoxy
  1164 ;;		_lcd_putrs
  1165 ;;		_read_keyboard
  1166 ;; This function is called by:
  1167 ;;		_set_vision
  1168 ;; This function uses a non-reentrant model
  1169 ;;
  1170                           
  1171                           	psect	text3
  1172  001B74                     __ptext3:
  1173                           	opt stack 0
  1174  001B74                     _twinkle:
  1175                           	opt stack 23
  1176                           
  1177                           ;lcd_vision.c: 29: char input = 1;
  1178                           
  1179                           ;incstack = 0
  1180  001B74  0E01               	movlw	1
  1181  001B76  D024               	goto	L1
  1182  001B78                     l2751:
  1183                           
  1184                           ;lcd_vision.c: 32: _delay_s(500);
  1185  001B78  0E01               	movlw	1
  1186  001B7A  6E0A               	movwf	__delay_s@millis+1,c
  1187  001B7C  0EF4               	movlw	244
  1188  001B7E  6E09               	movwf	__delay_s@millis,c
  1189  001B80  EC17  F00E         	call	__delay_s	;wreg free
  1190                           
  1191                           ;lcd_vision.c: 33: lcd_gotoxy(7,2);
  1192  001B84  0E02               	movlw	2
  1193  001B86  6E05               	movwf	lcd_gotoxy@y,c
  1194  001B88  0E07               	movlw	7
  1195  001B8A  EC2C  F00F         	call	_lcd_gotoxy
  1196                           
  1197                           ;lcd_vision.c: 34: lcd_putrs("WARNING!!!");
  1198  001B8E  0E4C               	movlw	low STR_22
  1199  001B90  6E09               	movwf	lcd_putrs@ptr,c
  1200  001B92  0E0F               	movlw	high STR_22
  1201  001B94  6E0A               	movwf	lcd_putrs@ptr+1,c
  1202  001B96  EC43  F00E         	call	_lcd_putrs	;wreg free
  1203                           
  1204                           ;lcd_vision.c: 35: _delay_s(500);
  1205  001B9A  0E01               	movlw	1
  1206  001B9C  6E0A               	movwf	__delay_s@millis+1,c
  1207  001B9E  0EF4               	movlw	244
  1208  001BA0  6E09               	movwf	__delay_s@millis,c
  1209  001BA2  EC17  F00E         	call	__delay_s	;wreg free
  1210                           
  1211                           ;lcd_vision.c: 36: lcd_gotoxy(7,2);
  1212  001BA6  0E02               	movlw	2
  1213  001BA8  6E05               	movwf	lcd_gotoxy@y,c
  1214  001BAA  0E07               	movlw	7
  1215  001BAC  EC2C  F00F         	call	_lcd_gotoxy
  1216                           
  1217                           ;lcd_vision.c: 37: lcd_putrs("          ");
  1218  001BB0  0E25               	movlw	low (STR_1+22)
  1219  001BB2  6E09               	movwf	lcd_putrs@ptr,c
  1220  001BB4  0E0F               	movlw	high (STR_1+22)
  1221  001BB6  6E0A               	movwf	lcd_putrs@ptr+1,c
  1222  001BB8  EC43  F00E         	call	_lcd_putrs	;wreg free
  1223                           
  1224                           ;lcd_vision.c: 38: input = read_keyboard();
  1225  001BBC  ECCA  F007         	call	_read_keyboard	;wreg free
  1226  001BC0                     L1:
  1227  001BC0  6E25               	movwf	twinkle@input,c
  1228  001BC2  D000               	goto	l2763
  1229  001BC4                     l2763:
  1230  001BC4  0E10               	movlw	16
  1231  001BC6  1825               	xorwf	twinkle@input,w,c
  1232  001BC8  A4D8               	btfss	status,2,c
  1233  001BCA  D7D6               	goto	l2751
  1234                           
  1235                           ;lcd_vision.c: 39: }
  1236                           ;lcd_vision.c: 42: state_alarm = ACTIVE;
  1237  001BCC  0E00               	movlw	0
  1238  001BCE  6E5C               	movwf	_state_alarm,c
  1239  001BD0  0012               	return		;funcret
  1240  001BD2                     __end_of_twinkle:
  1241                           	opt stack 0
  1242                           tblptru	equ	0xFF8
  1243                           tblptrh	equ	0xFF7
  1244                           tblptrl	equ	0xFF6
  1245                           tablat	equ	0xFF5
  1246                           postinc0	equ	0xFEE
  1247                           wreg	equ	0xFE8
  1248                           postdec1	equ	0xFE5
  1249                           fsr1l	equ	0xFE1
  1250                           status	equ	0xFD8
  1251                           
  1252 ;; *************** function _read_keyboard *****************
  1253 ;; Defined at:
  1254 ;;		line 4 in file "keyboard.c"
  1255 ;; Parameters:    Size  Location     Type
  1256 ;;		None
  1257 ;; Auto vars:     Size  Location     Type
  1258 ;;		None
  1259 ;; Return value:  Size  Location     Type
  1260 ;;                  1    wreg      unsigned char 
  1261 ;; Registers used:
  1262 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1263 ;; Tracked objects:
  1264 ;;		On entry : 0/0
  1265 ;;		On exit  : 0/0
  1266 ;;		Unchanged: 0/0
  1267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1270 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1271 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1272 ;;Total ram usage:        1 bytes
  1273 ;; Hardware stack levels used:    1
  1274 ;; Hardware stack levels required when called:    5
  1275 ;; This function calls:
  1276 ;;		_lcd_putrs
  1277 ;;		_sprintf
  1278 ;; This function is called by:
  1279 ;;		_main
  1280 ;;		_twinkle
  1281 ;; This function uses a non-reentrant model
  1282 ;;
  1283                           
  1284                           	psect	text4
  1285  000F94                     __ptext4:
  1286                           	opt stack 0
  1287  000F94                     _read_keyboard:
  1288                           	opt stack 23
  1289                           
  1290                           ;keyboard.c: 5: LATAbits.LATA0=1;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=0;
  1291                           
  1292                           ;incstack = 0
  1293  000F94  8089               	bsf	3977,0,c	;volatile
  1294  000F96  9289               	bcf	3977,1,c	;volatile
  1295  000F98  9489               	bcf	3977,2,c	;volatile
  1296  000F9A  9689               	bcf	3977,3,c	;volatile
  1297                           
  1298                           ;keyboard.c: 6: {
  1299                           ;keyboard.c: 7: if (PORTAbits.RA5==1){key=1;sprintf(buffer2,"%01u",key);lcd_putrs(buffer
      +                          2);while(PORTAbits.RA5==1){};}
  1300  000F9C  AA80               	btfss	3968,5,c	;volatile
  1301  000F9E  D018               	goto	l201
  1302  000FA0  0E01               	movlw	1
  1303  000FA2  6E3A               	movwf	_key,c
  1304  000FA4  0E78               	movlw	low _buffer2
  1305  000FA6  6E0D               	movwf	sprintf@sp,c
  1306  000FA8  0E00               	movlw	high _buffer2
  1307  000FAA  6E0E               	movwf	sprintf@sp+1,c
  1308  000FAC  0E7D               	movlw	low STR_4
  1309  000FAE  6E0F               	movwf	sprintf@f,c
  1310  000FB0  0E0F               	movlw	high STR_4
  1311  000FB2  6E10               	movwf	sprintf@f+1,c
  1312  000FB4  C03A  F011         	movff	_key,?_sprintf+4
  1313  000FB8  6A12               	clrf	?_sprintf+5,c
  1314  000FBA  EC39  F009         	call	_sprintf	;wreg free
  1315  000FBE  0E78               	movlw	low _buffer2
  1316  000FC0  6E09               	movwf	lcd_putrs@ptr,c
  1317  000FC2  0E00               	movlw	high _buffer2
  1318  000FC4  6E0A               	movwf	lcd_putrs@ptr+1,c
  1319  000FC6  EC43  F00E         	call	_lcd_putrs	;wreg free
  1320  000FCA  D000               	goto	l202
  1321  000FCC                     l202:
  1322  000FCC  BA80               	btfsc	3968,5,c	;volatile
  1323  000FCE  D7FE               	goto	l202
  1324  000FD0                     l201:
  1325                           
  1326                           ;keyboard.c: 8: if (PORTAbits.RA7==1){key=2;sprintf(buffer2,"%01u",key);lcd_putrs(buffer
      +                          2);while(PORTAbits.RA7==1){};}
  1327  000FD0  AE80               	btfss	3968,7,c	;volatile
  1328  000FD2  D018               	goto	l205
  1329  000FD4  0E02               	movlw	2
  1330  000FD6  6E3A               	movwf	_key,c
  1331  000FD8  0E78               	movlw	low _buffer2
  1332  000FDA  6E0D               	movwf	sprintf@sp,c
  1333  000FDC  0E00               	movlw	high _buffer2
  1334  000FDE  6E0E               	movwf	sprintf@sp+1,c
  1335  000FE0  0E7D               	movlw	low STR_4
  1336  000FE2  6E0F               	movwf	sprintf@f,c
  1337  000FE4  0E0F               	movlw	high STR_4
  1338  000FE6  6E10               	movwf	sprintf@f+1,c
  1339  000FE8  C03A  F011         	movff	_key,?_sprintf+4
  1340  000FEC  6A12               	clrf	?_sprintf+5,c
  1341  000FEE  EC39  F009         	call	_sprintf	;wreg free
  1342  000FF2  0E78               	movlw	low _buffer2
  1343  000FF4  6E09               	movwf	lcd_putrs@ptr,c
  1344  000FF6  0E00               	movlw	high _buffer2
  1345  000FF8  6E0A               	movwf	lcd_putrs@ptr+1,c
  1346  000FFA  EC43  F00E         	call	_lcd_putrs	;wreg free
  1347  000FFE  D000               	goto	l206
  1348  001000                     l206:
  1349  001000  BE80               	btfsc	3968,7,c	;volatile
  1350  001002  D7FE               	goto	l206
  1351  001004                     l205:
  1352                           
  1353                           ;keyboard.c: 9: if (PORTAbits.RA6==1){key=3;sprintf(buffer2,"%01u",key);lcd_putrs(buffer
      +                          2);while(PORTAbits.RA6==1){};}
  1354  001004  AC80               	btfss	3968,6,c	;volatile
  1355  001006  D018               	goto	l209
  1356  001008  0E03               	movlw	3
  1357  00100A  6E3A               	movwf	_key,c
  1358  00100C  0E78               	movlw	low _buffer2
  1359  00100E  6E0D               	movwf	sprintf@sp,c
  1360  001010  0E00               	movlw	high _buffer2
  1361  001012  6E0E               	movwf	sprintf@sp+1,c
  1362  001014  0E7D               	movlw	low STR_4
  1363  001016  6E0F               	movwf	sprintf@f,c
  1364  001018  0E0F               	movlw	high STR_4
  1365  00101A  6E10               	movwf	sprintf@f+1,c
  1366  00101C  C03A  F011         	movff	_key,?_sprintf+4
  1367  001020  6A12               	clrf	?_sprintf+5,c
  1368  001022  EC39  F009         	call	_sprintf	;wreg free
  1369  001026  0E78               	movlw	low _buffer2
  1370  001028  6E09               	movwf	lcd_putrs@ptr,c
  1371  00102A  0E00               	movlw	high _buffer2
  1372  00102C  6E0A               	movwf	lcd_putrs@ptr+1,c
  1373  00102E  EC43  F00E         	call	_lcd_putrs	;wreg free
  1374  001032  D000               	goto	l210
  1375  001034                     l210:
  1376  001034  BC80               	btfsc	3968,6,c	;volatile
  1377  001036  D7FE               	goto	l210
  1378  001038                     l209:
  1379                           
  1380                           ;keyboard.c: 10: if (PORTCbits.RC2==1){key=11;lcd_putrs("A");while(PORTCbits.RC2==1){};}
  1381  001038  A482               	btfss	3970,2,c	;volatile
  1382  00103A  D00B               	goto	l213
  1383  00103C  0E0B               	movlw	11
  1384  00103E  6E3A               	movwf	_key,c
  1385  001040  0E8D               	movlw	low STR_7
  1386  001042  6E09               	movwf	lcd_putrs@ptr,c
  1387  001044  0E0F               	movlw	high STR_7
  1388  001046  6E0A               	movwf	lcd_putrs@ptr+1,c
  1389  001048  EC43  F00E         	call	_lcd_putrs	;wreg free
  1390  00104C  D000               	goto	l214
  1391  00104E                     l214:
  1392  00104E  B482               	btfsc	3970,2,c	;volatile
  1393  001050  D7FE               	goto	l214
  1394  001052                     l213:
  1395                           
  1396                           ;keyboard.c: 11: }
  1397                           ;keyboard.c: 12: LATAbits.LATA0=0;LATAbits.LATA1=1;LATAbits.LATA2=0;LATAbits.LATA3=0;
  1398  001052  9089               	bcf	3977,0,c	;volatile
  1399  001054  8289               	bsf	3977,1,c	;volatile
  1400  001056  9489               	bcf	3977,2,c	;volatile
  1401  001058  9689               	bcf	3977,3,c	;volatile
  1402                           
  1403                           ;keyboard.c: 13: {
  1404                           ;keyboard.c: 14: if (PORTAbits.RA5==1){key=4;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA5==1){};}
  1405  00105A  AA80               	btfss	3968,5,c	;volatile
  1406  00105C  D018               	goto	l217
  1407  00105E  0E04               	movlw	4
  1408  001060  6E3A               	movwf	_key,c
  1409  001062  0E78               	movlw	low _buffer2
  1410  001064  6E0D               	movwf	sprintf@sp,c
  1411  001066  0E00               	movlw	high _buffer2
  1412  001068  6E0E               	movwf	sprintf@sp+1,c
  1413  00106A  0E7D               	movlw	low STR_4
  1414  00106C  6E0F               	movwf	sprintf@f,c
  1415  00106E  0E0F               	movlw	high STR_4
  1416  001070  6E10               	movwf	sprintf@f+1,c
  1417  001072  C03A  F011         	movff	_key,?_sprintf+4
  1418  001076  6A12               	clrf	?_sprintf+5,c
  1419  001078  EC39  F009         	call	_sprintf	;wreg free
  1420  00107C  0E78               	movlw	low _buffer2
  1421  00107E  6E09               	movwf	lcd_putrs@ptr,c
  1422  001080  0E00               	movlw	high _buffer2
  1423  001082  6E0A               	movwf	lcd_putrs@ptr+1,c
  1424  001084  EC43  F00E         	call	_lcd_putrs	;wreg free
  1425  001088  D000               	goto	l218
  1426  00108A                     l218:
  1427  00108A  BA80               	btfsc	3968,5,c	;volatile
  1428  00108C  D7FE               	goto	l218
  1429  00108E                     l217:
  1430                           
  1431                           ;keyboard.c: 15: if (PORTAbits.RA7==1){key=5;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  1432  00108E  AE80               	btfss	3968,7,c	;volatile
  1433  001090  D018               	goto	l221
  1434  001092  0E05               	movlw	5
  1435  001094  6E3A               	movwf	_key,c
  1436  001096  0E78               	movlw	low _buffer2
  1437  001098  6E0D               	movwf	sprintf@sp,c
  1438  00109A  0E00               	movlw	high _buffer2
  1439  00109C  6E0E               	movwf	sprintf@sp+1,c
  1440  00109E  0E7D               	movlw	low STR_4
  1441  0010A0  6E0F               	movwf	sprintf@f,c
  1442  0010A2  0E0F               	movlw	high STR_4
  1443  0010A4  6E10               	movwf	sprintf@f+1,c
  1444  0010A6  C03A  F011         	movff	_key,?_sprintf+4
  1445  0010AA  6A12               	clrf	?_sprintf+5,c
  1446  0010AC  EC39  F009         	call	_sprintf	;wreg free
  1447  0010B0  0E78               	movlw	low _buffer2
  1448  0010B2  6E09               	movwf	lcd_putrs@ptr,c
  1449  0010B4  0E00               	movlw	high _buffer2
  1450  0010B6  6E0A               	movwf	lcd_putrs@ptr+1,c
  1451  0010B8  EC43  F00E         	call	_lcd_putrs	;wreg free
  1452  0010BC  D000               	goto	l222
  1453  0010BE                     l222:
  1454  0010BE  BE80               	btfsc	3968,7,c	;volatile
  1455  0010C0  D7FE               	goto	l222
  1456  0010C2                     l221:
  1457                           
  1458                           ;keyboard.c: 16: if (PORTAbits.RA6==1){key=6;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA6==1){};}
  1459  0010C2  AC80               	btfss	3968,6,c	;volatile
  1460  0010C4  D018               	goto	l225
  1461  0010C6  0E06               	movlw	6
  1462  0010C8  6E3A               	movwf	_key,c
  1463  0010CA  0E78               	movlw	low _buffer2
  1464  0010CC  6E0D               	movwf	sprintf@sp,c
  1465  0010CE  0E00               	movlw	high _buffer2
  1466  0010D0  6E0E               	movwf	sprintf@sp+1,c
  1467  0010D2  0E7D               	movlw	low STR_4
  1468  0010D4  6E0F               	movwf	sprintf@f,c
  1469  0010D6  0E0F               	movlw	high STR_4
  1470  0010D8  6E10               	movwf	sprintf@f+1,c
  1471  0010DA  C03A  F011         	movff	_key,?_sprintf+4
  1472  0010DE  6A12               	clrf	?_sprintf+5,c
  1473  0010E0  EC39  F009         	call	_sprintf	;wreg free
  1474  0010E4  0E78               	movlw	low _buffer2
  1475  0010E6  6E09               	movwf	lcd_putrs@ptr,c
  1476  0010E8  0E00               	movlw	high _buffer2
  1477  0010EA  6E0A               	movwf	lcd_putrs@ptr+1,c
  1478  0010EC  EC43  F00E         	call	_lcd_putrs	;wreg free
  1479  0010F0  D000               	goto	l226
  1480  0010F2                     l226:
  1481  0010F2  BC80               	btfsc	3968,6,c	;volatile
  1482  0010F4  D7FE               	goto	l226
  1483  0010F6                     l225:
  1484                           
  1485                           ;keyboard.c: 17: if (PORTCbits.RC2==1){key=12;lcd_putrs("B");while(PORTCbits.RC2==1){};}
  1486  0010F6  A482               	btfss	3970,2,c	;volatile
  1487  0010F8  D00B               	goto	l229
  1488  0010FA  0E0C               	movlw	12
  1489  0010FC  6E3A               	movwf	_key,c
  1490  0010FE  0E8F               	movlw	low STR_11
  1491  001100  6E09               	movwf	lcd_putrs@ptr,c
  1492  001102  0E0F               	movlw	high STR_11
  1493  001104  6E0A               	movwf	lcd_putrs@ptr+1,c
  1494  001106  EC43  F00E         	call	_lcd_putrs	;wreg free
  1495  00110A  D000               	goto	l230
  1496  00110C                     l230:
  1497  00110C  B482               	btfsc	3970,2,c	;volatile
  1498  00110E  D7FE               	goto	l230
  1499  001110                     l229:
  1500                           
  1501                           ;keyboard.c: 18: }
  1502                           ;keyboard.c: 19: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=1;LATAbits.LATA3=0;
  1503  001110  9089               	bcf	3977,0,c	;volatile
  1504  001112  9289               	bcf	3977,1,c	;volatile
  1505  001114  8489               	bsf	3977,2,c	;volatile
  1506  001116  9689               	bcf	3977,3,c	;volatile
  1507                           
  1508                           ;keyboard.c: 20: {
  1509                           ;keyboard.c: 21: if (PORTAbits.RA5==1){key=7;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA5==1){};}
  1510  001118  AA80               	btfss	3968,5,c	;volatile
  1511  00111A  D018               	goto	l233
  1512  00111C  0E07               	movlw	7
  1513  00111E  6E3A               	movwf	_key,c
  1514  001120  0E78               	movlw	low _buffer2
  1515  001122  6E0D               	movwf	sprintf@sp,c
  1516  001124  0E00               	movlw	high _buffer2
  1517  001126  6E0E               	movwf	sprintf@sp+1,c
  1518  001128  0E7D               	movlw	low STR_4
  1519  00112A  6E0F               	movwf	sprintf@f,c
  1520  00112C  0E0F               	movlw	high STR_4
  1521  00112E  6E10               	movwf	sprintf@f+1,c
  1522  001130  C03A  F011         	movff	_key,?_sprintf+4
  1523  001134  6A12               	clrf	?_sprintf+5,c
  1524  001136  EC39  F009         	call	_sprintf	;wreg free
  1525  00113A  0E78               	movlw	low _buffer2
  1526  00113C  6E09               	movwf	lcd_putrs@ptr,c
  1527  00113E  0E00               	movlw	high _buffer2
  1528  001140  6E0A               	movwf	lcd_putrs@ptr+1,c
  1529  001142  EC43  F00E         	call	_lcd_putrs	;wreg free
  1530  001146  D000               	goto	l234
  1531  001148                     l234:
  1532  001148  BA80               	btfsc	3968,5,c	;volatile
  1533  00114A  D7FE               	goto	l234
  1534  00114C                     l233:
  1535                           
  1536                           ;keyboard.c: 22: if (PORTAbits.RA7==1){key=8;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  1537  00114C  AE80               	btfss	3968,7,c	;volatile
  1538  00114E  D018               	goto	l237
  1539  001150  0E08               	movlw	8
  1540  001152  6E3A               	movwf	_key,c
  1541  001154  0E78               	movlw	low _buffer2
  1542  001156  6E0D               	movwf	sprintf@sp,c
  1543  001158  0E00               	movlw	high _buffer2
  1544  00115A  6E0E               	movwf	sprintf@sp+1,c
  1545  00115C  0E7D               	movlw	low STR_4
  1546  00115E  6E0F               	movwf	sprintf@f,c
  1547  001160  0E0F               	movlw	high STR_4
  1548  001162  6E10               	movwf	sprintf@f+1,c
  1549  001164  C03A  F011         	movff	_key,?_sprintf+4
  1550  001168  6A12               	clrf	?_sprintf+5,c
  1551  00116A  EC39  F009         	call	_sprintf	;wreg free
  1552  00116E  0E78               	movlw	low _buffer2
  1553  001170  6E09               	movwf	lcd_putrs@ptr,c
  1554  001172  0E00               	movlw	high _buffer2
  1555  001174  6E0A               	movwf	lcd_putrs@ptr+1,c
  1556  001176  EC43  F00E         	call	_lcd_putrs	;wreg free
  1557  00117A  D000               	goto	l238
  1558  00117C                     l238:
  1559  00117C  BE80               	btfsc	3968,7,c	;volatile
  1560  00117E  D7FE               	goto	l238
  1561  001180                     l237:
  1562                           
  1563                           ;keyboard.c: 23: if (PORTAbits.RA6==1){key=9;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA6==1){};}
  1564  001180  AC80               	btfss	3968,6,c	;volatile
  1565  001182  D018               	goto	l241
  1566  001184  0E09               	movlw	9
  1567  001186  6E3A               	movwf	_key,c
  1568  001188  0E78               	movlw	low _buffer2
  1569  00118A  6E0D               	movwf	sprintf@sp,c
  1570  00118C  0E00               	movlw	high _buffer2
  1571  00118E  6E0E               	movwf	sprintf@sp+1,c
  1572  001190  0E7D               	movlw	low STR_4
  1573  001192  6E0F               	movwf	sprintf@f,c
  1574  001194  0E0F               	movlw	high STR_4
  1575  001196  6E10               	movwf	sprintf@f+1,c
  1576  001198  C03A  F011         	movff	_key,?_sprintf+4
  1577  00119C  6A12               	clrf	?_sprintf+5,c
  1578  00119E  EC39  F009         	call	_sprintf	;wreg free
  1579  0011A2  0E78               	movlw	low _buffer2
  1580  0011A4  6E09               	movwf	lcd_putrs@ptr,c
  1581  0011A6  0E00               	movlw	high _buffer2
  1582  0011A8  6E0A               	movwf	lcd_putrs@ptr+1,c
  1583  0011AA  EC43  F00E         	call	_lcd_putrs	;wreg free
  1584  0011AE  D000               	goto	l242
  1585  0011B0                     l242:
  1586  0011B0  BC80               	btfsc	3968,6,c	;volatile
  1587  0011B2  D7FE               	goto	l242
  1588  0011B4                     l241:
  1589                           
  1590                           ;keyboard.c: 24: if (PORTCbits.RC2==1){key=13;lcd_putrs("C");while(PORTCbits.RC2==1){};}
  1591  0011B4  A482               	btfss	3970,2,c	;volatile
  1592  0011B6  D00B               	goto	l245
  1593  0011B8  0E0D               	movlw	13
  1594  0011BA  6E3A               	movwf	_key,c
  1595  0011BC  0E91               	movlw	low STR_15
  1596  0011BE  6E09               	movwf	lcd_putrs@ptr,c
  1597  0011C0  0E0F               	movlw	high STR_15
  1598  0011C2  6E0A               	movwf	lcd_putrs@ptr+1,c
  1599  0011C4  EC43  F00E         	call	_lcd_putrs	;wreg free
  1600  0011C8  D000               	goto	l246
  1601  0011CA                     l246:
  1602  0011CA  B482               	btfsc	3970,2,c	;volatile
  1603  0011CC  D7FE               	goto	l246
  1604  0011CE                     l245:
  1605                           
  1606                           ;keyboard.c: 25: }
  1607                           ;keyboard.c: 26: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=1;
  1608  0011CE  9089               	bcf	3977,0,c	;volatile
  1609  0011D0  9289               	bcf	3977,1,c	;volatile
  1610  0011D2  9489               	bcf	3977,2,c	;volatile
  1611  0011D4  8689               	bsf	3977,3,c	;volatile
  1612                           
  1613                           ;keyboard.c: 27: {
  1614                           ;keyboard.c: 28: if (PORTAbits.RA5==1){key=14;lcd_putrs("*");while(PORTAbits.RA5==1){};}
  1615  0011D6  AA80               	btfss	3968,5,c	;volatile
  1616  0011D8  D00B               	goto	l249
  1617  0011DA  0E0E               	movlw	14
  1618  0011DC  6E3A               	movwf	_key,c
  1619  0011DE  0E8B               	movlw	low STR_16
  1620  0011E0  6E09               	movwf	lcd_putrs@ptr,c
  1621  0011E2  0E0F               	movlw	high STR_16
  1622  0011E4  6E0A               	movwf	lcd_putrs@ptr+1,c
  1623  0011E6  EC43  F00E         	call	_lcd_putrs	;wreg free
  1624  0011EA  D000               	goto	l250
  1625  0011EC                     l250:
  1626  0011EC  BA80               	btfsc	3968,5,c	;volatile
  1627  0011EE  D7FE               	goto	l250
  1628  0011F0                     l249:
  1629                           
  1630                           ;keyboard.c: 29: if (PORTAbits.RA7==1){key=0;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  1631  0011F0  AE80               	btfss	3968,7,c	;volatile
  1632  0011F2  D018               	goto	l253
  1633  0011F4  0E00               	movlw	0
  1634  0011F6  6E3A               	movwf	_key,c
  1635  0011F8  0E78               	movlw	low _buffer2
  1636  0011FA  6E0D               	movwf	sprintf@sp,c
  1637  0011FC  0E00               	movlw	high _buffer2
  1638  0011FE  6E0E               	movwf	sprintf@sp+1,c
  1639  001200  0E7D               	movlw	low STR_4
  1640  001202  6E0F               	movwf	sprintf@f,c
  1641  001204  0E0F               	movlw	high STR_4
  1642  001206  6E10               	movwf	sprintf@f+1,c
  1643  001208  C03A  F011         	movff	_key,?_sprintf+4
  1644  00120C  6A12               	clrf	?_sprintf+5,c
  1645  00120E  EC39  F009         	call	_sprintf	;wreg free
  1646  001212  0E78               	movlw	low _buffer2
  1647  001214  6E09               	movwf	lcd_putrs@ptr,c
  1648  001216  0E00               	movlw	high _buffer2
  1649  001218  6E0A               	movwf	lcd_putrs@ptr+1,c
  1650  00121A  EC43  F00E         	call	_lcd_putrs	;wreg free
  1651  00121E  D000               	goto	l254
  1652  001220                     l254:
  1653  001220  BE80               	btfsc	3968,7,c	;volatile
  1654  001222  D7FE               	goto	l254
  1655  001224                     l253:
  1656                           
  1657                           ;keyboard.c: 30: if (PORTAbits.RA6==1){key=15;lcd_putrs("#");while(PORTAbits.RA6==1){};}
  1658  001224  AC80               	btfss	3968,6,c	;volatile
  1659  001226  D00B               	goto	l257
  1660  001228  0E0F               	movlw	15
  1661  00122A  6E3A               	movwf	_key,c
  1662  00122C  0E89               	movlw	low STR_18
  1663  00122E  6E09               	movwf	lcd_putrs@ptr,c
  1664  001230  0E0F               	movlw	high STR_18
  1665  001232  6E0A               	movwf	lcd_putrs@ptr+1,c
  1666  001234  EC43  F00E         	call	_lcd_putrs	;wreg free
  1667  001238  D000               	goto	l258
  1668  00123A                     l258:
  1669  00123A  BC80               	btfsc	3968,6,c	;volatile
  1670  00123C  D7FE               	goto	l258
  1671  00123E                     l257:
  1672                           
  1673                           ;keyboard.c: 31: if (PORTCbits.RC2==1){key=16;lcd_putrs("D");while(PORTCbits.RC2==1){};}
  1674  00123E  A482               	btfss	3970,2,c	;volatile
  1675  001240  D00D               	goto	l2499
  1676  001242  0E10               	movlw	16
  1677  001244  6E3A               	movwf	_key,c
  1678  001246  0E7B               	movlw	low (STR_27+6)
  1679  001248  6E09               	movwf	lcd_putrs@ptr,c
  1680  00124A  0E0F               	movlw	high (STR_27+6)
  1681  00124C  6E0A               	movwf	lcd_putrs@ptr+1,c
  1682  00124E  EC43  F00E         	call	_lcd_putrs	;wreg free
  1683  001252  D000               	goto	l262
  1684  001254                     l262:
  1685  001254  A482               	btfss	3970,2,c	;volatile
  1686  001256  D002               	goto	l2499
  1687  001258  D7FD               	goto	l262
  1688  00125A  D000               	goto	l2499
  1689  00125C                     l2499:
  1690                           
  1691                           ;keyboard.c: 32: }
  1692                           ;keyboard.c: 33: _delay((unsigned long)((98)*(8000000/4000.0)));
  1693  00125C  0EFF               	movlw	255
  1694  00125E  6E24               	movwf	??_read_keyboard& (0+255),c
  1695  001260  0E8A               	movlw	138
  1696  001262                     u2367:
  1697  001262  2EE8               	decfsz	wreg,f,c
  1698  001264  D7FE               	goto	u2367
  1699  001266  2E24               	decfsz	??_read_keyboard& (0+255),f,c
  1700  001268  D7FC               	goto	u2367
  1701  00126A  D000               	nop2	
  1702                           
  1703                           ;keyboard.c: 36: return key;
  1704  00126C  503A               	movf	_key,w,c
  1705  00126E  0012               	return	
  1706  001270  0012               	return		;funcret
  1707  001272                     __end_of_read_keyboard:
  1708                           	opt stack 0
  1709                           tblptru	equ	0xFF8
  1710                           tblptrh	equ	0xFF7
  1711                           tblptrl	equ	0xFF6
  1712                           tablat	equ	0xFF5
  1713                           postinc0	equ	0xFEE
  1714                           wreg	equ	0xFE8
  1715                           postdec1	equ	0xFE5
  1716                           fsr1l	equ	0xFE1
  1717                           status	equ	0xFD8
  1718                           
  1719 ;; *************** function _sprintf *****************
  1720 ;; Defined at:
  1721 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\doprnt.c"
  1722 ;; Parameters:    Size  Location     Type
  1723 ;;  sp              2   12[COMRAM] PTR unsigned char 
  1724 ;;		 -> buffer2(20), 
  1725 ;;  f               2   14[COMRAM] PTR const unsigned char 
  1726 ;;		 -> STR_21(10), STR_20(15), STR_17(5), STR_14(5), 
  1727 ;;		 -> STR_13(5), STR_12(5), STR_10(5), STR_9(5), 
  1728 ;;		 -> STR_8(5), STR_6(5), STR_5(5), STR_4(5), 
  1729 ;; Auto vars:     Size  Location     Type
  1730 ;;  tmpval          4    0        struct .
  1731 ;;  cp              3    0        PTR const unsigned char 
  1732 ;;  width           2   32[COMRAM] int 
  1733 ;;  val             2   29[COMRAM] unsigned int 
  1734 ;;  ap              2   26[COMRAM] PTR void [1]
  1735 ;;		 -> ?_sprintf(2), 
  1736 ;;  len             2    0        unsigned int 
  1737 ;;  c               1   34[COMRAM] char 
  1738 ;;  prec            1   31[COMRAM] char 
  1739 ;;  flag            1   28[COMRAM] unsigned char 
  1740 ;; Return value:  Size  Location     Type
  1741 ;;                  2   12[COMRAM] int 
  1742 ;; Registers used:
  1743 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1744 ;; Tracked objects:
  1745 ;;		On entry : 0/0
  1746 ;;		On exit  : 0/0
  1747 ;;		Unchanged: 0/0
  1748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1749 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1750 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1751 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1752 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1753 ;;Total ram usage:       23 bytes
  1754 ;; Hardware stack levels used:    1
  1755 ;; Hardware stack levels required when called:    1
  1756 ;; This function calls:
  1757 ;;		___lwdiv
  1758 ;;		___lwmod
  1759 ;;		___wmul
  1760 ;;		_isdigit
  1761 ;; This function is called by:
  1762 ;;		_read_keyboard
  1763 ;;		_write_Date
  1764 ;; This function uses a non-reentrant model
  1765 ;;
  1766                           
  1767                           	psect	text5
  1768  001272                     __ptext5:
  1769                           	opt stack 0
  1770  001272                     _sprintf:
  1771                           	opt stack 27
  1772                           
  1773                           ;doprnt.c: 494: va_list ap;
  1774                           ;doprnt.c: 499: signed char c;
  1775                           ;doprnt.c: 501: int width;
  1776                           ;doprnt.c: 506: signed char prec;
  1777                           ;doprnt.c: 508: unsigned char flag;
  1778                           ;doprnt.c: 523: union {
  1779                           ;doprnt.c: 524: unsigned long vd;
  1780                           ;doprnt.c: 525: double integ;
  1781                           ;doprnt.c: 526: } tmpval;
  1782                           ;doprnt.c: 528: unsigned int val;
  1783                           ;doprnt.c: 529: unsigned len;
  1784                           ;doprnt.c: 530: const char * cp;
  1785                           ;doprnt.c: 533: *ap = __va_start();
  1786                           
  1787                           ;incstack = 0
  1788  001272  0E11               	movlw	low (?_sprintf+4)
  1789  001274  6E1B               	movwf	sprintf@ap,c
  1790  001276  0E00               	movlw	high (?_sprintf+4)
  1791  001278  6E1C               	movwf	sprintf@ap+1,c
  1792                           
  1793                           ;doprnt.c: 536: while(c = *f++) {
  1794  00127A  D117               	goto	l2361
  1795  00127C                     l2279:
  1796                           
  1797                           ;doprnt.c: 538: if(c != '%')
  1798  00127C  0E25               	movlw	37
  1799  00127E  1823               	xorwf	sprintf@c,w,c
  1800  001280  B4D8               	btfsc	status,2,c
  1801  001282  D009               	goto	l2285
  1802                           
  1803                           ;doprnt.c: 540: {
  1804                           ;doprnt.c: 541: ((*sp++ = (c)));
  1805  001284  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1806  001288  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1807  00128C  C023  FFDF         	movff	sprintf@c,indf2
  1808  001290  4A0D               	infsnz	sprintf@sp,f,c
  1809  001292  2A0E               	incf	sprintf@sp+1,f,c
  1810                           
  1811                           ;doprnt.c: 542: continue;
  1812  001294  D10A               	goto	l2361
  1813  001296                     l2285:
  1814                           
  1815                           ;doprnt.c: 543: }
  1816                           ;doprnt.c: 546: width = 0;
  1817  001296  0E00               	movlw	0
  1818  001298  6E22               	movwf	sprintf@width+1,c
  1819  00129A  0E00               	movlw	0
  1820  00129C  6E21               	movwf	sprintf@width,c
  1821                           
  1822                           ;doprnt.c: 548: flag = 0;
  1823  00129E  0E00               	movlw	0
  1824  0012A0  6E1D               	movwf	sprintf@flag,c
  1825                           
  1826                           ;doprnt.c: 551: switch(*f) {
  1827                           
  1828                           ;doprnt.c: 550: for(;;) {
  1829  0012A2  D005               	goto	l2291
  1830  0012A4                     l2287:
  1831                           
  1832                           ;doprnt.c: 580: flag |= 0x04;
  1833  0012A4  841D               	bsf	sprintf@flag,2,c
  1834                           
  1835                           ;doprnt.c: 581: f++;
  1836  0012A6  4A0F               	infsnz	sprintf@f,f,c
  1837  0012A8  2A10               	incf	sprintf@f+1,f,c
  1838                           
  1839                           ;doprnt.c: 582: continue;
  1840  0012AA  D001               	goto	l2291
  1841                           
  1842                           ;doprnt.c: 584: }
  1843  0012AC  D00B               	goto	l2293
  1844  0012AE                     l2291:
  1845  0012AE  C00F  FFF6         	movff	sprintf@f,tblptrl
  1846  0012B2  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1847  0012B6                     	if	0	;tblptru may be non-zero
  1848  0012B6                     	endif
  1849  0012B6                     	if	0	;tblptru may be non-zero
  1850  0012B6                     	endif
  1851  0012B6  0008               	tblrd		*
  1852  0012B8  50F5               	movf	tablat,w,c
  1853                           
  1854                           ; Switch size 1, requested type "space"
  1855                           ; Number of cases is 1, Range of values is 48 to 48
  1856                           ; switch strategies available:
  1857                           ; Name         Instructions Cycles
  1858                           ; simple_byte            4     3 (average)
  1859                           ;	Chosen strategy is simple_byte
  1860  0012BA  0A30               	xorlw	48	; case 48
  1861  0012BC  B4D8               	btfsc	status,2,c
  1862  0012BE  D7F2               	goto	l2287
  1863                           
  1864                           ;doprnt.c: 585: break;
  1865  0012C0  D001               	goto	l2293
  1866                           
  1867                           ;doprnt.c: 586: }
  1868  0012C2  D7F5               	goto	l2291
  1869  0012C4                     l2293:
  1870                           
  1871                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1872  0012C4  C00F  FFF6         	movff	sprintf@f,tblptrl
  1873  0012C8  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1874  0012CC                     	if	0	;tblptru may be non-zero
  1875  0012CC                     	endif
  1876  0012CC                     	if	0	;tblptru may be non-zero
  1877  0012CC                     	endif
  1878  0012CC  0008               	tblrd		*
  1879  0012CE  50F5               	movf	tablat,w,c
  1880  0012D0  EC3E  F00F         	call	_isdigit
  1881  0012D4  A0D8               	btfss	status,0,c
  1882  0012D6  D03A               	goto	l2309
  1883                           
  1884                           ;doprnt.c: 598: width = 0;
  1885  0012D8  0E00               	movlw	0
  1886  0012DA  6E22               	movwf	sprintf@width+1,c
  1887  0012DC  0E00               	movlw	0
  1888  0012DE  6E21               	movwf	sprintf@width,c
  1889  0012E0  D000               	goto	l2297
  1890  0012E2                     l2297:
  1891                           
  1892                           ;doprnt.c: 600: width *= 10;
  1893  0012E2  C021  F001         	movff	sprintf@width,___wmul@multiplier
  1894  0012E6  C022  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  1895  0012EA  0E00               	movlw	0
  1896  0012EC  6E04               	movwf	___wmul@multiplicand+1,c
  1897  0012EE  0E0A               	movlw	10
  1898  0012F0  6E03               	movwf	___wmul@multiplicand,c
  1899  0012F2  EC18  F00F         	call	___wmul	;wreg free
  1900  0012F6  C001  F021         	movff	?___wmul,sprintf@width
  1901  0012FA  C002  F022         	movff	?___wmul+1,sprintf@width+1
  1902                           
  1903                           ;doprnt.c: 601: width += *f++ - '0';
  1904  0012FE  0ED0               	movlw	208
  1905  001300  6E17               	movwf	??_sprintf& (0+255),c
  1906  001302  0EFF               	movlw	255
  1907  001304  6E18               	movwf	(??_sprintf+1)& (0+255),c
  1908  001306  C00F  FFF6         	movff	sprintf@f,tblptrl
  1909  00130A  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1910  00130E                     	if	0	;tblptru may be non-zero
  1911  00130E                     	endif
  1912  00130E                     	if	0	;tblptru may be non-zero
  1913  00130E                     	endif
  1914  00130E  0008               	tblrd		*
  1915  001310  50F5               	movf	tablat,w,c
  1916  001312  6E19               	movwf	(??_sprintf+2)& (0+255),c
  1917  001314  6A1A               	clrf	(??_sprintf+3)& (0+255),c
  1918  001316  5017               	movf	??_sprintf,w,c
  1919  001318  2619               	addwf	??_sprintf+2,f,c
  1920  00131A  5018               	movf	??_sprintf+1,w,c
  1921  00131C  221A               	addwfc	??_sprintf+3,f,c
  1922  00131E  5019               	movf	??_sprintf+2,w,c
  1923  001320  2621               	addwf	sprintf@width,f,c
  1924  001322  501A               	movf	??_sprintf+3,w,c
  1925  001324  2222               	addwfc	sprintf@width+1,f,c
  1926  001326  4A0F               	infsnz	sprintf@f,f,c
  1927  001328  2A10               	incf	sprintf@f+1,f,c
  1928                           
  1929                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1930  00132A  C00F  FFF6         	movff	sprintf@f,tblptrl
  1931  00132E  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1932  001332                     	if	0	;tblptru may be non-zero
  1933  001332                     	endif
  1934  001332                     	if	0	;tblptru may be non-zero
  1935  001332                     	endif
  1936  001332  0008               	tblrd		*
  1937  001334  50F5               	movf	tablat,w,c
  1938  001336  EC3E  F00F         	call	_isdigit
  1939  00133A  A0D8               	btfss	status,0,c
  1940  00133C  D007               	goto	l2309
  1941  00133E  D7D1               	goto	l2297
  1942                           
  1943                           ;doprnt.c: 608: }
  1944                           ;doprnt.c: 635: switch(c = *f++) {
  1945  001340  D005               	goto	l2309
  1946                           
  1947                           ;doprnt.c: 638: goto alldone;
  1948                           
  1949                           ;doprnt.c: 637: case 0:
  1950  001342  D0C1               	goto	l2363
  1951                           
  1952                           ;doprnt.c: 813: continue;
  1953                           
  1954                           ;doprnt.c: 802: default:
  1955  001344  D0B2               	goto	l2361
  1956  001346                     l2305:
  1957                           
  1958                           ;doprnt.c: 818: flag |= 0xC0;
  1959  001346  0EC0               	movlw	192
  1960  001348  121D               	iorwf	sprintf@flag,f,c
  1961                           
  1962                           ;doprnt.c: 822: }
  1963                           
  1964                           ;doprnt.c: 819: break;
  1965  00134A  D011               	goto	l2311
  1966  00134C                     l2309:
  1967  00134C  C00F  FFF6         	movff	sprintf@f,tblptrl
  1968  001350  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1969  001354  4A0F               	infsnz	sprintf@f,f,c
  1970  001356  2A10               	incf	sprintf@f+1,f,c
  1971  001358                     	if	0	;tblptru may be non-zero
  1972  001358                     	endif
  1973  001358                     	if	0	;tblptru may be non-zero
  1974  001358                     	endif
  1975  001358  0008               	tblrd		*
  1976  00135A  CFF5 F023          	movff	tablat,sprintf@c
  1977  00135E  5023               	movf	sprintf@c,w,c
  1978                           
  1979                           ; Switch size 1, requested type "space"
  1980                           ; Number of cases is 2, Range of values is 0 to 117
  1981                           ; switch strategies available:
  1982                           ; Name         Instructions Cycles
  1983                           ; simple_byte            7     4 (average)
  1984                           ;	Chosen strategy is simple_byte
  1985  001360  0A00               	xorlw	0	; case 0
  1986  001362  B4D8               	btfsc	status,2,c
  1987  001364  D0B0               	goto	l2363
  1988  001366  0A75               	xorlw	117	; case 117
  1989  001368  B4D8               	btfsc	status,2,c
  1990  00136A  D7ED               	goto	l2305
  1991  00136C  D09E               	goto	l2361
  1992  00136E                     l2311:
  1993                           
  1994                           ;doprnt.c: 1273: {
  1995                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1996  00136E  C01B  FFD9         	movff	sprintf@ap,fsr2l
  1997  001372  C01C  FFDA         	movff	sprintf@ap+1,fsr2h
  1998  001376  CFDE F01E          	movff	postinc2,sprintf@val
  1999  00137A  CFDD F01F          	movff	postdec2,sprintf@val+1
  2000  00137E  0E02               	movlw	2
  2001  001380  261B               	addwf	sprintf@ap,f,c
  2002  001382  0E00               	movlw	0
  2003  001384  221C               	addwfc	sprintf@ap+1,f,c
  2004                           
  2005                           ;doprnt.c: 1287: }
  2006                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2007  001386  0E01               	movlw	1
  2008  001388  6E23               	movwf	sprintf@c,c
  2009  00138A                     l2317:
  2010  00138A  0E05               	movlw	5
  2011  00138C  1823               	xorwf	sprintf@c,w,c
  2012  00138E  B4D8               	btfsc	status,2,c
  2013  001390  D016               	goto	l2329
  2014  001392  D001               	goto	l2321
  2015  001394  D014               	goto	l2329
  2016  001396                     l2321:
  2017                           
  2018                           ;doprnt.c: 1306: if(val < dpowers[c])
  2019  001396  5023               	movf	sprintf@c,w,c
  2020  001398  0D02               	mullw	2
  2021  00139A  0E01               	movlw	low _dpowers
  2022  00139C  24F3               	addwf	prodl,w,c
  2023  00139E  6EF6               	movwf	tblptrl,c
  2024  0013A0  0E0F               	movlw	high _dpowers
  2025  0013A2  20F4               	addwfc	prodh,w,c
  2026  0013A4  6EF7               	movwf	tblptrh,c
  2027  0013A6                     	if	0	;There are less than 3 active tblptr bytes
  2028  0013A6                     	endif
  2029  0013A6  0009               	tblrd		*+
  2030  0013A8  50F5               	movf	tablat,w,c
  2031  0013AA  5C1E               	subwf	sprintf@val,w,c
  2032  0013AC  0009               	tblrd		*+
  2033  0013AE  50F5               	movf	tablat,w,c
  2034  0013B0  581F               	subwfb	sprintf@val+1,w,c
  2035  0013B2  A0D8               	btfss	status,0,c
  2036  0013B4  D004               	goto	l2329
  2037  0013B6  D001               	goto	l2325
  2038                           
  2039                           ;doprnt.c: 1307: break;
  2040  0013B8  D002               	goto	l2329
  2041  0013BA                     l2325:
  2042  0013BA  2A23               	incf	sprintf@c,f,c
  2043  0013BC  D7E6               	goto	l2317
  2044  0013BE                     l2329:
  2045                           
  2046                           ;doprnt.c: 1381: if(width > c)
  2047  0013BE  0E80               	movlw	128
  2048  0013C0  BE23               	btfsc	sprintf@c,7,c
  2049  0013C2  0E7F               	movlw	127
  2050  0013C4  6E17               	movwf	??_sprintf& (0+255),c
  2051  0013C6  5021               	movf	sprintf@width,w,c
  2052  0013C8  5C23               	subwf	sprintf@c,w,c
  2053  0013CA  5022               	movf	sprintf@width+1,w,c
  2054  0013CC  0A80               	xorlw	128
  2055  0013CE  5817               	subwfb	??_sprintf& (0+255),w,c
  2056  0013D0  B0D8               	btfsc	status,0,c
  2057  0013D2  D007               	goto	l2333
  2058                           
  2059                           ;doprnt.c: 1382: width -= c;
  2060  0013D4  5023               	movf	sprintf@c,w,c
  2061  0013D6  5E21               	subwf	sprintf@width,f,c
  2062  0013D8  0E00               	movlw	0
  2063  0013DA  BE23               	btfsc	sprintf@c,7,c
  2064  0013DC  0EFF               	movlw	255
  2065  0013DE  5A22               	subwfb	sprintf@width+1,f,c
  2066  0013E0  D005               	goto	l2335
  2067  0013E2                     l2333:
  2068                           
  2069                           ;doprnt.c: 1383: else
  2070                           ;doprnt.c: 1384: width = 0;
  2071  0013E2  0E00               	movlw	0
  2072  0013E4  6E22               	movwf	sprintf@width+1,c
  2073  0013E6  0E00               	movlw	0
  2074  0013E8  6E21               	movwf	sprintf@width,c
  2075  0013EA  D000               	goto	l2335
  2076  0013EC                     l2335:
  2077                           
  2078                           ;doprnt.c: 1387: if(flag & 0x04) {
  2079  0013EC  A41D               	btfss	sprintf@flag,2,c
  2080  0013EE  D015               	goto	l2345
  2081                           
  2082                           ;doprnt.c: 1415: if(width)
  2083  0013F0  5021               	movf	sprintf@width,w,c
  2084  0013F2  1022               	iorwf	sprintf@width+1,w,c
  2085  0013F4  B4D8               	btfsc	status,2,c
  2086  0013F6  D026               	goto	l624
  2087  0013F8                     l2339:
  2088                           
  2089                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  2090  0013F8  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2091  0013FC  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2092  001400  0E30               	movlw	48
  2093  001402  6EDF               	movwf	indf2,c
  2094  001404  4A0D               	infsnz	sprintf@sp,f,c
  2095  001406  2A0E               	incf	sprintf@sp+1,f,c
  2096                           
  2097                           ;doprnt.c: 1418: while(--width);
  2098  001408  0621               	decf	sprintf@width,f,c
  2099  00140A  A0D8               	btfss	status,0,c
  2100  00140C  0622               	decf	sprintf@width+1,f,c
  2101  00140E  5021               	movf	sprintf@width,w,c
  2102  001410  1022               	iorwf	sprintf@width+1,w,c
  2103  001412  B4D8               	btfsc	status,2,c
  2104  001414  D017               	goto	l624
  2105  001416  D7F0               	goto	l2339
  2106                           
  2107                           ;doprnt.c: 1420: } else
  2108  001418  D015               	goto	l624
  2109  00141A                     l2345:
  2110                           
  2111                           ;doprnt.c: 1422: {
  2112                           ;doprnt.c: 1424: if(width
  2113                           ;doprnt.c: 1428: )
  2114  00141A  5021               	movf	sprintf@width,w,c
  2115  00141C  1022               	iorwf	sprintf@width+1,w,c
  2116  00141E  B4D8               	btfsc	status,2,c
  2117  001420  D011               	goto	l624
  2118  001422                     l2347:
  2119                           
  2120                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  2121  001422  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2122  001426  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2123  00142A  0E20               	movlw	32
  2124  00142C  6EDF               	movwf	indf2,c
  2125  00142E  4A0D               	infsnz	sprintf@sp,f,c
  2126  001430  2A0E               	incf	sprintf@sp+1,f,c
  2127                           
  2128                           ;doprnt.c: 1431: while(--width);
  2129  001432  0621               	decf	sprintf@width,f,c
  2130  001434  A0D8               	btfss	status,0,c
  2131  001436  0622               	decf	sprintf@width+1,f,c
  2132  001438  5021               	movf	sprintf@width,w,c
  2133  00143A  1022               	iorwf	sprintf@width+1,w,c
  2134  00143C  B4D8               	btfsc	status,2,c
  2135  00143E  D002               	goto	l624
  2136  001440  D7F0               	goto	l2347
  2137  001442  D000               	goto	l624
  2138  001444                     l624:
  2139                           
  2140                           ;doprnt.c: 1469: }
  2141                           ;doprnt.c: 1472: prec = c;
  2142  001444  C023  F020         	movff	sprintf@c,sprintf@prec
  2143                           
  2144                           ;doprnt.c: 1474: while(prec--) {
  2145  001448  D02A               	goto	l2359
  2146  00144A                     l2353:
  2147                           
  2148                           ;doprnt.c: 1478: {
  2149                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2150  00144A  5020               	movf	sprintf@prec,w,c
  2151  00144C  0D02               	mullw	2
  2152  00144E  0E01               	movlw	low _dpowers
  2153  001450  24F3               	addwf	prodl,w,c
  2154  001452  6EF6               	movwf	tblptrl,c
  2155  001454  0E0F               	movlw	high _dpowers
  2156  001456  20F4               	addwfc	prodh,w,c
  2157  001458  6EF7               	movwf	tblptrh,c
  2158  00145A                     	if	0	;There are less than 3 active tblptr bytes
  2159  00145A                     	endif
  2160  00145A  0009               	tblrd		*+
  2161  00145C  CFF5 F003          	movff	tablat,___lwdiv@divisor
  2162  001460  000A               	tblrd		*-
  2163  001462  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  2164  001466  C01E  F001         	movff	sprintf@val,___lwdiv@dividend
  2165  00146A  C01F  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  2166  00146E  ECE9  F00D         	call	___lwdiv	;wreg free
  2167  001472  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  2168  001476  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  2169  00147A  0E00               	movlw	0
  2170  00147C  6E0B               	movwf	___lwmod@divisor+1,c
  2171  00147E  0E0A               	movlw	10
  2172  001480  6E0A               	movwf	___lwmod@divisor,c
  2173  001482  EC6D  F00E         	call	___lwmod	;wreg free
  2174  001486  5008               	movf	?___lwmod,w,c
  2175  001488  0F30               	addlw	48
  2176  00148A  6E23               	movwf	sprintf@c,c
  2177                           
  2178                           ;doprnt.c: 1523: }
  2179                           ;doprnt.c: 1524: ((*sp++ = (c)));
  2180  00148C  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2181  001490  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2182  001494  C023  FFDF         	movff	sprintf@c,indf2
  2183  001498  4A0D               	infsnz	sprintf@sp,f,c
  2184  00149A  2A0E               	incf	sprintf@sp+1,f,c
  2185  00149C  D000               	goto	l2359
  2186  00149E                     l2359:
  2187  00149E  0620               	decf	sprintf@prec,f,c
  2188  0014A0  2820               	incf	sprintf@prec,w,c
  2189  0014A2  B4D8               	btfsc	status,2,c
  2190  0014A4  D002               	goto	l2361
  2191  0014A6  D7D1               	goto	l2353
  2192  0014A8  D000               	goto	l2361
  2193  0014AA                     l2361:
  2194  0014AA  C00F  FFF6         	movff	sprintf@f,tblptrl
  2195  0014AE  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2196  0014B2  4A0F               	infsnz	sprintf@f,f,c
  2197  0014B4  2A10               	incf	sprintf@f+1,f,c
  2198  0014B6                     	if	0	;tblptru may be non-zero
  2199  0014B6                     	endif
  2200  0014B6                     	if	0	;tblptru may be non-zero
  2201  0014B6                     	endif
  2202  0014B6  0008               	tblrd		*
  2203  0014B8  CFF5 F023          	movff	tablat,sprintf@c
  2204  0014BC  5023               	movf	sprintf@c,w,c
  2205  0014BE  B4D8               	btfsc	status,2,c
  2206  0014C0  D002               	goto	l2363
  2207  0014C2  D6DC               	goto	l2279
  2208  0014C4  D000               	goto	l2363
  2209  0014C6                     l2363:
  2210                           
  2211                           ;doprnt.c: 1538: *sp = 0;
  2212  0014C6  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2213  0014CA  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2214  0014CE  0E00               	movlw	0
  2215  0014D0  6EDF               	movwf	indf2,c
  2216  0014D2  0012               	return	
  2217                           
  2218                           ;doprnt.c: 1540: return 0;
  2219                           ;	Return value of _sprintf is never used
  2220  0014D4  0012               	return		;funcret
  2221  0014D6                     __end_of_sprintf:
  2222                           	opt stack 0
  2223                           tblptru	equ	0xFF8
  2224                           tblptrh	equ	0xFF7
  2225                           tblptrl	equ	0xFF6
  2226                           tablat	equ	0xFF5
  2227                           prodh	equ	0xFF4
  2228                           prodl	equ	0xFF3
  2229                           postinc0	equ	0xFEE
  2230                           wreg	equ	0xFE8
  2231                           postdec1	equ	0xFE5
  2232                           fsr1l	equ	0xFE1
  2233                           indf2	equ	0xFDF
  2234                           postinc2	equ	0xFDE
  2235                           postdec2	equ	0xFDD
  2236                           fsr2h	equ	0xFDA
  2237                           fsr2l	equ	0xFD9
  2238                           status	equ	0xFD8
  2239                           
  2240 ;; *************** function _isdigit *****************
  2241 ;; Defined at:
  2242 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\isdigit.c"
  2243 ;; Parameters:    Size  Location     Type
  2244 ;;  c               1    wreg     unsigned char 
  2245 ;; Auto vars:     Size  Location     Type
  2246 ;;  c               1    2[COMRAM] unsigned char 
  2247 ;; Return value:  Size  Location     Type
  2248 ;;		None               void
  2249 ;; Registers used:
  2250 ;;		wreg, status,2, status,0
  2251 ;; Tracked objects:
  2252 ;;		On entry : 0/0
  2253 ;;		On exit  : 0/0
  2254 ;;		Unchanged: 0/0
  2255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2257 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2258 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2259 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2260 ;;Total ram usage:        3 bytes
  2261 ;; Hardware stack levels used:    1
  2262 ;; This function calls:
  2263 ;;		Nothing
  2264 ;; This function is called by:
  2265 ;;		_sprintf
  2266 ;; This function uses a non-reentrant model
  2267 ;;
  2268                           
  2269                           	psect	text6
  2270  001E7C                     __ptext6:
  2271                           	opt stack 0
  2272  001E7C                     _isdigit:
  2273                           	opt stack 27
  2274                           
  2275                           ;incstack = 0
  2276                           ;isdigit@c stored from wreg
  2277  001E7C  6E03               	movwf	isdigit@c,c
  2278  001E7E  0E00               	movlw	0
  2279  001E80  6E02               	movwf	_isdigit$2331,c
  2280  001E82  0E3A               	movlw	58
  2281  001E84  6003               	cpfslt	isdigit@c,c
  2282  001E86  D006               	goto	l2221
  2283  001E88  0E2F               	movlw	47
  2284  001E8A  6403               	cpfsgt	isdigit@c,c
  2285  001E8C  D003               	goto	l2221
  2286  001E8E  0E01               	movlw	1
  2287  001E90  6E02               	movwf	_isdigit$2331,c
  2288  001E92  D000               	goto	l2221
  2289  001E94                     l2221:
  2290  001E94  C002  F001         	movff	_isdigit$2331,??_isdigit
  2291  001E98  3001               	rrcf	??_isdigit,w,c
  2292  001E9A  0012               	return	
  2293  001E9C  0012               	return		;funcret
  2294  001E9E                     __end_of_isdigit:
  2295                           	opt stack 0
  2296                           tblptru	equ	0xFF8
  2297                           tblptrh	equ	0xFF7
  2298                           tblptrl	equ	0xFF6
  2299                           tablat	equ	0xFF5
  2300                           prodh	equ	0xFF4
  2301                           prodl	equ	0xFF3
  2302                           postinc0	equ	0xFEE
  2303                           wreg	equ	0xFE8
  2304                           postdec1	equ	0xFE5
  2305                           fsr1l	equ	0xFE1
  2306                           indf2	equ	0xFDF
  2307                           postinc2	equ	0xFDE
  2308                           postdec2	equ	0xFDD
  2309                           fsr2h	equ	0xFDA
  2310                           fsr2l	equ	0xFD9
  2311                           status	equ	0xFD8
  2312                           
  2313 ;; *************** function ___wmul *****************
  2314 ;; Defined at:
  2315 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\Umul16.c"
  2316 ;; Parameters:    Size  Location     Type
  2317 ;;  multiplier      2    0[COMRAM] unsigned int 
  2318 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2319 ;; Auto vars:     Size  Location     Type
  2320 ;;  product         2    4[COMRAM] unsigned int 
  2321 ;; Return value:  Size  Location     Type
  2322 ;;                  2    0[COMRAM] unsigned int 
  2323 ;; Registers used:
  2324 ;;		wreg, status,2, status,0, prodl, prodh
  2325 ;; Tracked objects:
  2326 ;;		On entry : 0/0
  2327 ;;		On exit  : 0/0
  2328 ;;		Unchanged: 0/0
  2329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2330 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2331 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2333 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2334 ;;Total ram usage:        6 bytes
  2335 ;; Hardware stack levels used:    1
  2336 ;; This function calls:
  2337 ;;		Nothing
  2338 ;; This function is called by:
  2339 ;;		_sprintf
  2340 ;; This function uses a non-reentrant model
  2341 ;;
  2342                           
  2343                           	psect	text7
  2344  001E30                     __ptext7:
  2345                           	opt stack 0
  2346  001E30                     ___wmul:
  2347                           	opt stack 27
  2348                           
  2349                           ;incstack = 0
  2350  001E30  5001               	movf	___wmul@multiplier,w,c
  2351  001E32  0203               	mulwf	___wmul@multiplicand,c
  2352  001E34  CFF3 F005          	movff	prodl,___wmul@product
  2353  001E38  CFF4 F006          	movff	prodh,___wmul@product+1
  2354  001E3C  5001               	movf	___wmul@multiplier,w,c
  2355  001E3E  0204               	mulwf	___wmul@multiplicand+1,c
  2356  001E40  50F3               	movf	prodl,w,c
  2357  001E42  2606               	addwf	___wmul@product+1,f,c
  2358  001E44  5002               	movf	___wmul@multiplier+1,w,c
  2359  001E46  0203               	mulwf	___wmul@multiplicand,c
  2360  001E48  50F3               	movf	prodl,w,c
  2361  001E4A  2606               	addwf	___wmul@product+1,f,c
  2362  001E4C  C005  F001         	movff	___wmul@product,?___wmul
  2363  001E50  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2364  001E54  0012               	return	
  2365  001E56  0012               	return		;funcret
  2366  001E58                     __end_of___wmul:
  2367                           	opt stack 0
  2368                           tblptru	equ	0xFF8
  2369                           tblptrh	equ	0xFF7
  2370                           tblptrl	equ	0xFF6
  2371                           tablat	equ	0xFF5
  2372                           prodh	equ	0xFF4
  2373                           prodl	equ	0xFF3
  2374                           postinc0	equ	0xFEE
  2375                           wreg	equ	0xFE8
  2376                           postdec1	equ	0xFE5
  2377                           fsr1l	equ	0xFE1
  2378                           indf2	equ	0xFDF
  2379                           postinc2	equ	0xFDE
  2380                           postdec2	equ	0xFDD
  2381                           fsr2h	equ	0xFDA
  2382                           fsr2l	equ	0xFD9
  2383                           status	equ	0xFD8
  2384                           
  2385 ;; *************** function ___lwmod *****************
  2386 ;; Defined at:
  2387 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lwmod.c"
  2388 ;; Parameters:    Size  Location     Type
  2389 ;;  dividend        2    7[COMRAM] unsigned int 
  2390 ;;  divisor         2    9[COMRAM] unsigned int 
  2391 ;; Auto vars:     Size  Location     Type
  2392 ;;  counter         1   11[COMRAM] unsigned char 
  2393 ;; Return value:  Size  Location     Type
  2394 ;;                  2    7[COMRAM] unsigned int 
  2395 ;; Registers used:
  2396 ;;		wreg, status,2, status,0
  2397 ;; Tracked objects:
  2398 ;;		On entry : 0/0
  2399 ;;		On exit  : 0/0
  2400 ;;		Unchanged: 0/0
  2401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2402 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2403 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2405 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2406 ;;Total ram usage:        5 bytes
  2407 ;; Hardware stack levels used:    1
  2408 ;; This function calls:
  2409 ;;		Nothing
  2410 ;; This function is called by:
  2411 ;;		_sprintf
  2412 ;; This function uses a non-reentrant model
  2413 ;;
  2414                           
  2415                           	psect	text8
  2416  001CDA                     __ptext8:
  2417                           	opt stack 0
  2418  001CDA                     ___lwmod:
  2419                           	opt stack 27
  2420                           
  2421                           ;incstack = 0
  2422  001CDA  500A               	movf	___lwmod@divisor,w,c
  2423  001CDC  100B               	iorwf	___lwmod@divisor+1,w,c
  2424  001CDE  B4D8               	btfsc	status,2,c
  2425  001CE0  D01D               	goto	l1278
  2426  001CE2  0E01               	movlw	1
  2427  001CE4  6E0C               	movwf	___lwmod@counter,c
  2428  001CE6  D005               	goto	l2259
  2429  001CE8                     l2257:
  2430  001CE8  90D8               	bcf	status,0,c
  2431  001CEA  360A               	rlcf	___lwmod@divisor,f,c
  2432  001CEC  360B               	rlcf	___lwmod@divisor+1,f,c
  2433  001CEE  2A0C               	incf	___lwmod@counter,f,c
  2434  001CF0  D000               	goto	l2259
  2435  001CF2                     l2259:
  2436  001CF2  BE0B               	btfsc	___lwmod@divisor+1,7,c
  2437  001CF4  D002               	goto	l2261
  2438  001CF6  D7F8               	goto	l2257
  2439  001CF8  D000               	goto	l2261
  2440  001CFA                     l2261:
  2441  001CFA  500A               	movf	___lwmod@divisor,w,c
  2442  001CFC  5C08               	subwf	___lwmod@dividend,w,c
  2443  001CFE  500B               	movf	___lwmod@divisor+1,w,c
  2444  001D00  5809               	subwfb	___lwmod@dividend+1,w,c
  2445  001D02  A0D8               	btfss	status,0,c
  2446  001D04  D005               	goto	l2265
  2447  001D06  500A               	movf	___lwmod@divisor,w,c
  2448  001D08  5E08               	subwf	___lwmod@dividend,f,c
  2449  001D0A  500B               	movf	___lwmod@divisor+1,w,c
  2450  001D0C  5A09               	subwfb	___lwmod@dividend+1,f,c
  2451  001D0E  D000               	goto	l2265
  2452  001D10                     l2265:
  2453  001D10  90D8               	bcf	status,0,c
  2454  001D12  320B               	rrcf	___lwmod@divisor+1,f,c
  2455  001D14  320A               	rrcf	___lwmod@divisor,f,c
  2456  001D16  2E0C               	decfsz	___lwmod@counter,f,c
  2457  001D18  D7F0               	goto	l2261
  2458  001D1A  D000               	goto	l1278
  2459  001D1C                     l1278:
  2460  001D1C  C008  F008         	movff	___lwmod@dividend,?___lwmod
  2461  001D20  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  2462  001D24  0012               	return		;funcret
  2463  001D26                     __end_of___lwmod:
  2464                           	opt stack 0
  2465                           tblptru	equ	0xFF8
  2466                           tblptrh	equ	0xFF7
  2467                           tblptrl	equ	0xFF6
  2468                           tablat	equ	0xFF5
  2469                           prodh	equ	0xFF4
  2470                           prodl	equ	0xFF3
  2471                           postinc0	equ	0xFEE
  2472                           wreg	equ	0xFE8
  2473                           postdec1	equ	0xFE5
  2474                           fsr1l	equ	0xFE1
  2475                           indf2	equ	0xFDF
  2476                           postinc2	equ	0xFDE
  2477                           postdec2	equ	0xFDD
  2478                           fsr2h	equ	0xFDA
  2479                           fsr2l	equ	0xFD9
  2480                           status	equ	0xFD8
  2481                           
  2482 ;; *************** function ___lwdiv *****************
  2483 ;; Defined at:
  2484 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  2485 ;; Parameters:    Size  Location     Type
  2486 ;;  dividend        2    0[COMRAM] unsigned int 
  2487 ;;  divisor         2    2[COMRAM] unsigned int 
  2488 ;; Auto vars:     Size  Location     Type
  2489 ;;  quotient        2    4[COMRAM] unsigned int 
  2490 ;;  counter         1    6[COMRAM] unsigned char 
  2491 ;; Return value:  Size  Location     Type
  2492 ;;                  2    0[COMRAM] unsigned int 
  2493 ;; Registers used:
  2494 ;;		wreg, status,2, status,0
  2495 ;; Tracked objects:
  2496 ;;		On entry : 0/0
  2497 ;;		On exit  : 0/0
  2498 ;;		Unchanged: 0/0
  2499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2500 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2501 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2503 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2504 ;;Total ram usage:        7 bytes
  2505 ;; Hardware stack levels used:    1
  2506 ;; This function calls:
  2507 ;;		Nothing
  2508 ;; This function is called by:
  2509 ;;		_sprintf
  2510 ;; This function uses a non-reentrant model
  2511 ;;
  2512                           
  2513                           	psect	text9
  2514  001BD2                     __ptext9:
  2515                           	opt stack 0
  2516  001BD2                     ___lwdiv:
  2517                           	opt stack 27
  2518                           
  2519                           ;incstack = 0
  2520  001BD2  0E00               	movlw	0
  2521  001BD4  6E06               	movwf	___lwdiv@quotient+1,c
  2522  001BD6  0E00               	movlw	0
  2523  001BD8  6E05               	movwf	___lwdiv@quotient,c
  2524  001BDA  5003               	movf	___lwdiv@divisor,w,c
  2525  001BDC  1004               	iorwf	___lwdiv@divisor+1,w,c
  2526  001BDE  B4D8               	btfsc	status,2,c
  2527  001BE0  D021               	goto	l1268
  2528  001BE2  0E01               	movlw	1
  2529  001BE4  6E07               	movwf	___lwdiv@counter,c
  2530  001BE6  D005               	goto	l2239
  2531  001BE8                     l2237:
  2532  001BE8  90D8               	bcf	status,0,c
  2533  001BEA  3603               	rlcf	___lwdiv@divisor,f,c
  2534  001BEC  3604               	rlcf	___lwdiv@divisor+1,f,c
  2535  001BEE  2A07               	incf	___lwdiv@counter,f,c
  2536  001BF0  D000               	goto	l2239
  2537  001BF2                     l2239:
  2538  001BF2  BE04               	btfsc	___lwdiv@divisor+1,7,c
  2539  001BF4  D002               	goto	l2241
  2540  001BF6  D7F8               	goto	l2237
  2541  001BF8  D000               	goto	l2241
  2542  001BFA                     l2241:
  2543  001BFA  90D8               	bcf	status,0,c
  2544  001BFC  3605               	rlcf	___lwdiv@quotient,f,c
  2545  001BFE  3606               	rlcf	___lwdiv@quotient+1,f,c
  2546  001C00  5003               	movf	___lwdiv@divisor,w,c
  2547  001C02  5C01               	subwf	___lwdiv@dividend,w,c
  2548  001C04  5004               	movf	___lwdiv@divisor+1,w,c
  2549  001C06  5802               	subwfb	___lwdiv@dividend+1,w,c
  2550  001C08  A0D8               	btfss	status,0,c
  2551  001C0A  D006               	goto	l2249
  2552  001C0C  5003               	movf	___lwdiv@divisor,w,c
  2553  001C0E  5E01               	subwf	___lwdiv@dividend,f,c
  2554  001C10  5004               	movf	___lwdiv@divisor+1,w,c
  2555  001C12  5A02               	subwfb	___lwdiv@dividend+1,f,c
  2556  001C14  8005               	bsf	___lwdiv@quotient,0,c
  2557  001C16  D000               	goto	l2249
  2558  001C18                     l2249:
  2559  001C18  90D8               	bcf	status,0,c
  2560  001C1A  3204               	rrcf	___lwdiv@divisor+1,f,c
  2561  001C1C  3203               	rrcf	___lwdiv@divisor,f,c
  2562  001C1E  2E07               	decfsz	___lwdiv@counter,f,c
  2563  001C20  D7EC               	goto	l2241
  2564  001C22  D000               	goto	l1268
  2565  001C24                     l1268:
  2566  001C24  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  2567  001C28  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2568  001C2C  0012               	return		;funcret
  2569  001C2E                     __end_of___lwdiv:
  2570                           	opt stack 0
  2571                           tblptru	equ	0xFF8
  2572                           tblptrh	equ	0xFF7
  2573                           tblptrl	equ	0xFF6
  2574                           tablat	equ	0xFF5
  2575                           prodh	equ	0xFF4
  2576                           prodl	equ	0xFF3
  2577                           postinc0	equ	0xFEE
  2578                           wreg	equ	0xFE8
  2579                           postdec1	equ	0xFE5
  2580                           fsr1l	equ	0xFE1
  2581                           indf2	equ	0xFDF
  2582                           postinc2	equ	0xFDE
  2583                           postdec2	equ	0xFDD
  2584                           fsr2h	equ	0xFDA
  2585                           fsr2l	equ	0xFD9
  2586                           status	equ	0xFD8
  2587                           
  2588 ;; *************** function _lcd_putrs *****************
  2589 ;; Defined at:
  2590 ;;		line 221 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2591 ;; Parameters:    Size  Location     Type
  2592 ;;  ptr             2    8[COMRAM] PTR const unsigned char 
  2593 ;;		 -> STR_27(8), STR_26(10), STR_25(4), STR_24(3), 
  2594 ;;		 -> STR_23(11), STR_22(11), STR_19(2), STR_18(2), 
  2595 ;;		 -> STR_16(2), STR_15(2), STR_11(2), STR_7(2), 
  2596 ;;		 -> buffer2(20), STR_3(10), STR_2(13), STR_1(33), 
  2597 ;; Auto vars:     Size  Location     Type
  2598 ;;		None
  2599 ;; Return value:  Size  Location     Type
  2600 ;;		None               void
  2601 ;; Registers used:
  2602 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2603 ;; Tracked objects:
  2604 ;;		On entry : 0/0
  2605 ;;		On exit  : 0/0
  2606 ;;		Unchanged: 0/0
  2607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2608 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2611 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2612 ;;Total ram usage:        2 bytes
  2613 ;; Hardware stack levels used:    1
  2614 ;; Hardware stack levels required when called:    4
  2615 ;; This function calls:
  2616 ;;		_lcd_putc
  2617 ;; This function is called by:
  2618 ;;		_main
  2619 ;;		_read_keyboard
  2620 ;;		_write_Date
  2621 ;;		_twinkle
  2622 ;;		_set_vision
  2623 ;; This function uses a non-reentrant model
  2624 ;;
  2625                           
  2626                           	psect	text10
  2627  001C86                     __ptext10:
  2628                           	opt stack 0
  2629  001C86                     _lcd_putrs:
  2630                           	opt stack 24
  2631                           
  2632                           ;unmc_lcd_216.c: 223: while(*ptr){
  2633                           
  2634                           ;incstack = 0
  2635  001C86  D015               	goto	l2275
  2636  001C88                     l2271:
  2637                           
  2638                           ;unmc_lcd_216.c: 224: lcd_putc(*ptr++);
  2639  001C88  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  2640  001C8C  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  2641  001C90  6AF8               	clrf	tblptru,c
  2642  001C92  0E0E               	movlw	(high __ramtop+-1)
  2643  001C94  64F7               	cpfsgt	tblptrh,c
  2644  001C96  D003               	bra	u1367
  2645  001C98  0008               	tblrd		*
  2646  001C9A  50F5               	movf	tablat,w,c
  2647  001C9C  D005               	bra	u1360
  2648  001C9E                     u1367:
  2649  001C9E  CFF6 FFE9          	movff	tblptrl,fsr0l
  2650  001CA2  CFF7 FFEA          	movff	tblptrh,fsr0h
  2651  001CA6  50EF               	movf	indf0,w,c
  2652  001CA8                     u1360:
  2653  001CA8  EC93  F00E         	call	_lcd_putc
  2654  001CAC  4A09               	infsnz	lcd_putrs@ptr,f,c
  2655  001CAE  2A0A               	incf	lcd_putrs@ptr+1,f,c
  2656  001CB0  D000               	goto	l2275
  2657  001CB2                     l2275:
  2658  001CB2  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  2659  001CB6  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  2660  001CBA  6AF8               	clrf	tblptru,c
  2661  001CBC  0E0E               	movlw	(high __ramtop+-1)
  2662  001CBE  64F7               	cpfsgt	tblptrh,c
  2663  001CC0  D003               	bra	u1377
  2664  001CC2  0008               	tblrd		*
  2665  001CC4  50F5               	movf	tablat,w,c
  2666  001CC6  D005               	bra	u1370
  2667  001CC8                     u1377:
  2668  001CC8  CFF6 FFE9          	movff	tblptrl,fsr0l
  2669  001CCC  CFF7 FFEA          	movff	tblptrh,fsr0h
  2670  001CD0  50EF               	movf	indf0,w,c
  2671  001CD2                     u1370:
  2672  001CD2  0900               	iorlw	0
  2673  001CD4  A4D8               	btfss	status,2,c
  2674  001CD6  D7D8               	goto	l2271
  2675  001CD8  0012               	return		;funcret
  2676  001CDA                     __end_of_lcd_putrs:
  2677                           	opt stack 0
  2678                           tblptru	equ	0xFF8
  2679                           tblptrh	equ	0xFF7
  2680                           tblptrl	equ	0xFF6
  2681                           tablat	equ	0xFF5
  2682                           prodh	equ	0xFF4
  2683                           prodl	equ	0xFF3
  2684                           indf0	equ	0xFEF
  2685                           postinc0	equ	0xFEE
  2686                           fsr0h	equ	0xFEA
  2687                           fsr0l	equ	0xFE9
  2688                           wreg	equ	0xFE8
  2689                           postdec1	equ	0xFE5
  2690                           fsr1l	equ	0xFE1
  2691                           indf2	equ	0xFDF
  2692                           postinc2	equ	0xFDE
  2693                           postdec2	equ	0xFDD
  2694                           fsr2h	equ	0xFDA
  2695                           fsr2l	equ	0xFD9
  2696                           status	equ	0xFD8
  2697                           
  2698 ;; *************** function _lcd_putc *****************
  2699 ;; Defined at:
  2700 ;;		line 172 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2701 ;; Parameters:    Size  Location     Type
  2702 ;;  c               1    wreg     unsigned char 
  2703 ;; Auto vars:     Size  Location     Type
  2704 ;;  c               1    7[COMRAM] unsigned char 
  2705 ;; Return value:  Size  Location     Type
  2706 ;;		None               void
  2707 ;; Registers used:
  2708 ;;		wreg, status,2, status,0, cstack
  2709 ;; Tracked objects:
  2710 ;;		On entry : 0/0
  2711 ;;		On exit  : 0/0
  2712 ;;		Unchanged: 0/0
  2713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2715 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2717 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2718 ;;Total ram usage:        1 bytes
  2719 ;; Hardware stack levels used:    1
  2720 ;; Hardware stack levels required when called:    3
  2721 ;; This function calls:
  2722 ;;		_lcd_gotoxy
  2723 ;;		_lcd_send_byte
  2724 ;; This function is called by:
  2725 ;;		_lcd_putrs
  2726 ;;		_lcd_puts
  2727 ;; This function uses a non-reentrant model
  2728 ;;
  2729                           
  2730                           	psect	text11
  2731  001D26                     __ptext11:
  2732                           	opt stack 0
  2733  001D26                     _lcd_putc:
  2734                           	opt stack 24
  2735                           
  2736                           ;incstack = 0
  2737                           ;lcd_putc@c stored from wreg
  2738  001D26  6E08               	movwf	lcd_putc@c,c
  2739                           
  2740                           ;unmc_lcd_216.c: 173: switch(c){
  2741  001D28  D018               	goto	l2211
  2742  001D2A                     l2201:
  2743                           
  2744                           ;unmc_lcd_216.c: 175: lcd_send_byte(0,1);
  2745  001D2A  0E01               	movlw	1
  2746  001D2C  6E03               	movwf	lcd_send_byte@n,c
  2747  001D2E  0E00               	movlw	0
  2748  001D30  ECFF  F00E         	call	_lcd_send_byte
  2749                           
  2750                           ;unmc_lcd_216.c: 176: break;
  2751  001D34  0012               	return	
  2752  001D36                     l2203:
  2753                           
  2754                           ;unmc_lcd_216.c: 178: lcd_gotoxy(1,2);
  2755  001D36  0E02               	movlw	2
  2756  001D38  6E05               	movwf	lcd_gotoxy@y,c
  2757  001D3A  0E01               	movlw	1
  2758  001D3C  EC2C  F00F         	call	_lcd_gotoxy
  2759                           
  2760                           ;unmc_lcd_216.c: 179: break;
  2761  001D40  0012               	return	
  2762  001D42                     l2205:
  2763                           
  2764                           ;unmc_lcd_216.c: 181: lcd_send_byte(0,0x10);
  2765  001D42  0E10               	movlw	16
  2766  001D44  6E03               	movwf	lcd_send_byte@n,c
  2767  001D46  0E00               	movlw	0
  2768  001D48  ECFF  F00E         	call	_lcd_send_byte
  2769                           
  2770                           ;unmc_lcd_216.c: 182: break;
  2771  001D4C  0012               	return	
  2772  001D4E                     l2207:
  2773                           
  2774                           ;unmc_lcd_216.c: 184: lcd_send_byte(1,c);
  2775  001D4E  C008  F003         	movff	lcd_putc@c,lcd_send_byte@n
  2776  001D52  0E01               	movlw	1
  2777  001D54  ECFF  F00E         	call	_lcd_send_byte
  2778                           
  2779                           ;unmc_lcd_216.c: 186: }
  2780                           
  2781                           ;unmc_lcd_216.c: 185: break;
  2782  001D58  0012               	return	
  2783  001D5A                     l2211:
  2784  001D5A  5008               	movf	lcd_putc@c,w,c
  2785                           
  2786                           ; Switch size 1, requested type "space"
  2787                           ; Number of cases is 3, Range of values is 8 to 12
  2788                           ; switch strategies available:
  2789                           ; Name         Instructions Cycles
  2790                           ; simple_byte           10     6 (average)
  2791                           ;	Chosen strategy is simple_byte
  2792  001D5C  0A08               	xorlw	8	; case 8
  2793  001D5E  B4D8               	btfsc	status,2,c
  2794  001D60  D7F0               	goto	l2205
  2795  001D62  0A02               	xorlw	2	; case 10
  2796  001D64  B4D8               	btfsc	status,2,c
  2797  001D66  D7E7               	goto	l2203
  2798  001D68  0A06               	xorlw	6	; case 12
  2799  001D6A  B4D8               	btfsc	status,2,c
  2800  001D6C  D7DE               	goto	l2201
  2801  001D6E  D7EF               	goto	l2207
  2802  001D70  0012               	return		;funcret
  2803  001D72                     __end_of_lcd_putc:
  2804                           	opt stack 0
  2805                           tblptru	equ	0xFF8
  2806                           tblptrh	equ	0xFF7
  2807                           tblptrl	equ	0xFF6
  2808                           tablat	equ	0xFF5
  2809                           prodh	equ	0xFF4
  2810                           prodl	equ	0xFF3
  2811                           indf0	equ	0xFEF
  2812                           postinc0	equ	0xFEE
  2813                           fsr0h	equ	0xFEA
  2814                           fsr0l	equ	0xFE9
  2815                           wreg	equ	0xFE8
  2816                           postdec1	equ	0xFE5
  2817                           fsr1l	equ	0xFE1
  2818                           indf2	equ	0xFDF
  2819                           postinc2	equ	0xFDE
  2820                           postdec2	equ	0xFDD
  2821                           fsr2h	equ	0xFDA
  2822                           fsr2l	equ	0xFD9
  2823                           status	equ	0xFD8
  2824                           
  2825 ;; *************** function _lcd_gotoxy *****************
  2826 ;; Defined at:
  2827 ;;		line 158 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2828 ;; Parameters:    Size  Location     Type
  2829 ;;  x               1    wreg     unsigned char 
  2830 ;;  y               1    4[COMRAM] unsigned char 
  2831 ;; Auto vars:     Size  Location     Type
  2832 ;;  x               1    5[COMRAM] unsigned char 
  2833 ;;  address         1    6[COMRAM] unsigned char 
  2834 ;; Return value:  Size  Location     Type
  2835 ;;		None               void
  2836 ;; Registers used:
  2837 ;;		wreg, status,2, status,0, cstack
  2838 ;; Tracked objects:
  2839 ;;		On entry : 0/0
  2840 ;;		On exit  : 0/0
  2841 ;;		Unchanged: 0/0
  2842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2843 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2844 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2846 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2847 ;;Total ram usage:        3 bytes
  2848 ;; Hardware stack levels used:    1
  2849 ;; Hardware stack levels required when called:    2
  2850 ;; This function calls:
  2851 ;;		_lcd_send_byte
  2852 ;; This function is called by:
  2853 ;;		_main
  2854 ;;		_lcd_putc
  2855 ;;		_write_Date
  2856 ;;		_twinkle
  2857 ;;		_set_vision
  2858 ;; This function uses a non-reentrant model
  2859 ;;
  2860                           
  2861                           	psect	text12
  2862  001E58                     __ptext12:
  2863                           	opt stack 0
  2864  001E58                     _lcd_gotoxy:
  2865                           	opt stack 24
  2866                           
  2867                           ;incstack = 0
  2868                           ;lcd_gotoxy@x stored from wreg
  2869  001E58  6E06               	movwf	lcd_gotoxy@x,c
  2870                           
  2871                           ;unmc_lcd_216.c: 159: int8 address;
  2872                           ;unmc_lcd_216.c: 161: if(y != 1)
  2873  001E5A  0405               	decf	lcd_gotoxy@y,w,c
  2874  001E5C  B4D8               	btfsc	status,2,c
  2875  001E5E  D002               	goto	l2193
  2876                           
  2877                           ;unmc_lcd_216.c: 162: address = 0x40;
  2878  001E60  0E40               	movlw	64
  2879  001E62  D001               	goto	L2
  2880  001E64                     l2193:
  2881                           
  2882                           ;unmc_lcd_216.c: 163: else
  2883                           ;unmc_lcd_216.c: 164: address=0;
  2884  001E64  0E00               	movlw	0
  2885  001E66                     L2:
  2886  001E66  6E07               	movwf	lcd_gotoxy@address,c
  2887  001E68  D000               	goto	l2195
  2888  001E6A                     l2195:
  2889                           
  2890                           ;unmc_lcd_216.c: 166: address += x-1;
  2891  001E6A  0406               	decf	lcd_gotoxy@x,w,c
  2892  001E6C  2607               	addwf	lcd_gotoxy@address,f,c
  2893                           
  2894                           ;unmc_lcd_216.c: 167: lcd_send_byte(0, 0x80 | address);
  2895  001E6E  5007               	movf	lcd_gotoxy@address,w,c
  2896  001E70  0980               	iorlw	128
  2897  001E72  6E03               	movwf	lcd_send_byte@n,c
  2898  001E74  0E00               	movlw	0
  2899  001E76  ECFF  F00E         	call	_lcd_send_byte
  2900  001E7A  0012               	return		;funcret
  2901  001E7C                     __end_of_lcd_gotoxy:
  2902                           	opt stack 0
  2903                           tblptru	equ	0xFF8
  2904                           tblptrh	equ	0xFF7
  2905                           tblptrl	equ	0xFF6
  2906                           tablat	equ	0xFF5
  2907                           prodh	equ	0xFF4
  2908                           prodl	equ	0xFF3
  2909                           indf0	equ	0xFEF
  2910                           postinc0	equ	0xFEE
  2911                           fsr0h	equ	0xFEA
  2912                           fsr0l	equ	0xFE9
  2913                           wreg	equ	0xFE8
  2914                           postdec1	equ	0xFE5
  2915                           fsr1l	equ	0xFE1
  2916                           indf2	equ	0xFDF
  2917                           postinc2	equ	0xFDE
  2918                           postdec2	equ	0xFDD
  2919                           fsr2h	equ	0xFDA
  2920                           fsr2l	equ	0xFD9
  2921                           status	equ	0xFD8
  2922                           
  2923 ;; *************** function __delay_s *****************
  2924 ;; Defined at:
  2925 ;;		line 19 in file "lcd_vision.c"
  2926 ;; Parameters:    Size  Location     Type
  2927 ;;  millis          2    8[COMRAM] int 
  2928 ;; Auto vars:     Size  Location     Type
  2929 ;;  index           2   13[COMRAM] short 
  2930 ;;  it              2   11[COMRAM] short 
  2931 ;; Return value:  Size  Location     Type
  2932 ;;		None               void
  2933 ;; Registers used:
  2934 ;;		wreg, status,2, status,0, cstack
  2935 ;; Tracked objects:
  2936 ;;		On entry : 0/0
  2937 ;;		On exit  : 0/0
  2938 ;;		Unchanged: 0/0
  2939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2940 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2941 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2942 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2943 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2944 ;;Total ram usage:        7 bytes
  2945 ;; Hardware stack levels used:    1
  2946 ;; Hardware stack levels required when called:    1
  2947 ;; This function calls:
  2948 ;;		___awdiv
  2949 ;; This function is called by:
  2950 ;;		_twinkle
  2951 ;; This function uses a non-reentrant model
  2952 ;;
  2953                           
  2954                           	psect	text13
  2955  001C2E                     __ptext13:
  2956                           	opt stack 0
  2957  001C2E                     __delay_s:
  2958                           	opt stack 27
  2959                           
  2960                           ;lcd_vision.c: 20: short it = millis/100;
  2961                           
  2962                           ;incstack = 0
  2963  001C2E  C009  F001         	movff	__delay_s@millis,___awdiv@dividend
  2964  001C32  C00A  F002         	movff	__delay_s@millis+1,___awdiv@dividend+1
  2965  001C36  0E00               	movlw	0
  2966  001C38  6E04               	movwf	___awdiv@divisor+1,c
  2967  001C3A  0E64               	movlw	100
  2968  001C3C  6E03               	movwf	___awdiv@divisor,c
  2969  001C3E  EC38  F00C         	call	___awdiv	;wreg free
  2970  001C42  C001  F00C         	movff	?___awdiv,__delay_s@it
  2971  001C46  C002  F00D         	movff	?___awdiv+1,__delay_s@it+1
  2972                           
  2973                           ;lcd_vision.c: 21: short index = 1;
  2974  001C4A  0E00               	movlw	0
  2975  001C4C  6E0F               	movwf	__delay_s@index+1,c
  2976  001C4E  0E01               	movlw	1
  2977  001C50  6E0E               	movwf	__delay_s@index,c
  2978                           
  2979                           ;lcd_vision.c: 23: for(index = 1; index <= it; index++){
  2980  001C52  0E00               	movlw	0
  2981  001C54  6E0F               	movwf	__delay_s@index+1,c
  2982  001C56  0E01               	movlw	1
  2983  001C58  6E0E               	movwf	__delay_s@index,c
  2984  001C5A  D00A               	goto	l569
  2985  001C5C                     l2647:
  2986                           
  2987                           ;lcd_vision.c: 24: _delay((unsigned long)((98)*(8000000/4000.0)));
  2988  001C5C  0EFF               	movlw	255
  2989  001C5E  6E0B               	movwf	??__delay_s& (0+255),c
  2990  001C60  0E8A               	movlw	138
  2991  001C62                     u2377:
  2992  001C62  2EE8               	decfsz	wreg,f,c
  2993  001C64  D7FE               	goto	u2377
  2994  001C66  2E0B               	decfsz	??__delay_s& (0+255),f,c
  2995  001C68  D7FC               	goto	u2377
  2996  001C6A  D000               	nop2	
  2997  001C6C  4A0E               	infsnz	__delay_s@index,f,c
  2998  001C6E  2A0F               	incf	__delay_s@index+1,f,c
  2999  001C70                     l569:
  3000  001C70  500E               	movf	__delay_s@index,w,c
  3001  001C72  5C0C               	subwf	__delay_s@it,w,c
  3002  001C74  500D               	movf	__delay_s@it+1,w,c
  3003  001C76  0A80               	xorlw	128
  3004  001C78  6E0B               	movwf	??__delay_s& (0+255),c
  3005  001C7A  500F               	movf	__delay_s@index+1,w,c
  3006  001C7C  0A80               	xorlw	128
  3007  001C7E  580B               	subwfb	??__delay_s& (0+255),w,c
  3008  001C80  B0D8               	btfsc	status,0,c
  3009  001C82  D7EC               	goto	l2647
  3010  001C84  0012               	return		;funcret
  3011  001C86                     __end_of__delay_s:
  3012                           	opt stack 0
  3013                           tblptru	equ	0xFF8
  3014                           tblptrh	equ	0xFF7
  3015                           tblptrl	equ	0xFF6
  3016                           tablat	equ	0xFF5
  3017                           prodh	equ	0xFF4
  3018                           prodl	equ	0xFF3
  3019                           indf0	equ	0xFEF
  3020                           postinc0	equ	0xFEE
  3021                           fsr0h	equ	0xFEA
  3022                           fsr0l	equ	0xFE9
  3023                           wreg	equ	0xFE8
  3024                           postdec1	equ	0xFE5
  3025                           fsr1l	equ	0xFE1
  3026                           indf2	equ	0xFDF
  3027                           postinc2	equ	0xFDE
  3028                           postdec2	equ	0xFDD
  3029                           fsr2h	equ	0xFDA
  3030                           fsr2l	equ	0xFD9
  3031                           status	equ	0xFD8
  3032                           
  3033 ;; *************** function _lcd_setcursor_vb *****************
  3034 ;; Defined at:
  3035 ;;		line 210 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3036 ;; Parameters:    Size  Location     Type
  3037 ;;  visible         1    wreg     unsigned char 
  3038 ;;  blink           1    4[COMRAM] unsigned char 
  3039 ;; Auto vars:     Size  Location     Type
  3040 ;;  visible         1    5[COMRAM] unsigned char 
  3041 ;; Return value:  Size  Location     Type
  3042 ;;		None               void
  3043 ;; Registers used:
  3044 ;;		wreg, status,2, status,0, cstack
  3045 ;; Tracked objects:
  3046 ;;		On entry : 0/0
  3047 ;;		On exit  : 0/0
  3048 ;;		Unchanged: 0/0
  3049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3050 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3051 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3053 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3054 ;;Total ram usage:        2 bytes
  3055 ;; Hardware stack levels used:    1
  3056 ;; Hardware stack levels required when called:    2
  3057 ;; This function calls:
  3058 ;;		_lcd_send_byte
  3059 ;; This function is called by:
  3060 ;;		_set_vision
  3061 ;;		_jumpIfNotNumber
  3062 ;; This function uses a non-reentrant model
  3063 ;;
  3064                           
  3065                           	psect	text14
  3066  001EB4                     __ptext14:
  3067                           	opt stack 0
  3068  001EB4                     _lcd_setcursor_vb:
  3069                           	opt stack 27
  3070                           
  3071                           ;incstack = 0
  3072                           ;lcd_setcursor_vb@visible stored from wreg
  3073  001EB4  6E06               	movwf	lcd_setcursor_vb@visible,c
  3074                           
  3075                           ;unmc_lcd_216.c: 211: lcd_send_byte(0, 0xC|(visible<<1)|blink);
  3076  001EB6  5006               	movf	lcd_setcursor_vb@visible,w,c
  3077  001EB8  2406               	addwf	lcd_setcursor_vb@visible,w,c
  3078  001EBA  1005               	iorwf	lcd_setcursor_vb@blink,w,c
  3079  001EBC  090C               	iorlw	12
  3080  001EBE  6E03               	movwf	lcd_send_byte@n,c
  3081  001EC0  0E00               	movlw	0
  3082  001EC2  ECFF  F00E         	call	_lcd_send_byte
  3083  001EC6  0012               	return		;funcret
  3084  001EC8                     __end_of_lcd_setcursor_vb:
  3085                           	opt stack 0
  3086                           tblptru	equ	0xFF8
  3087                           tblptrh	equ	0xFF7
  3088                           tblptrl	equ	0xFF6
  3089                           tablat	equ	0xFF5
  3090                           prodh	equ	0xFF4
  3091                           prodl	equ	0xFF3
  3092                           indf0	equ	0xFEF
  3093                           postinc0	equ	0xFEE
  3094                           fsr0h	equ	0xFEA
  3095                           fsr0l	equ	0xFE9
  3096                           wreg	equ	0xFE8
  3097                           postdec1	equ	0xFE5
  3098                           fsr1l	equ	0xFE1
  3099                           indf2	equ	0xFDF
  3100                           postinc2	equ	0xFDE
  3101                           postdec2	equ	0xFDD
  3102                           fsr2h	equ	0xFDA
  3103                           fsr2l	equ	0xFD9
  3104                           status	equ	0xFD8
  3105                           
  3106 ;; *************** function _clear *****************
  3107 ;; Defined at:
  3108 ;;		line 5 in file "lcd_vision.c"
  3109 ;; Parameters:    Size  Location     Type
  3110 ;;		None
  3111 ;; Auto vars:     Size  Location     Type
  3112 ;;		None
  3113 ;; Return value:  Size  Location     Type
  3114 ;;		None               void
  3115 ;; Registers used:
  3116 ;;		wreg, status,2, status,0, cstack
  3117 ;; Tracked objects:
  3118 ;;		On entry : 0/0
  3119 ;;		On exit  : 0/0
  3120 ;;		Unchanged: 0/0
  3121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3124 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3125 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3126 ;;Total ram usage:        1 bytes
  3127 ;; Hardware stack levels used:    1
  3128 ;; Hardware stack levels required when called:    3
  3129 ;; This function calls:
  3130 ;;		_lcd_comand
  3131 ;; This function is called by:
  3132 ;;		_set_vision
  3133 ;; This function uses a non-reentrant model
  3134 ;;
  3135                           
  3136                           	psect	text15
  3137  001E9E                     __ptext15:
  3138                           	opt stack 0
  3139  001E9E                     _clear:
  3140                           	opt stack 26
  3141                           
  3142                           ;lcd_vision.c: 6: lcd_comand(0b00000001);
  3143                           
  3144                           ;incstack = 0
  3145  001E9E  0E01               	movlw	1
  3146  001EA0  EC7F  F00F         	call	_lcd_comand
  3147                           
  3148                           ;lcd_vision.c: 7: _delay((unsigned long)((5)*(8000000/4000.0)));
  3149  001EA4  0E0D               	movlw	13
  3150  001EA6  6E06               	movwf	??_clear& (0+255),c
  3151  001EA8  0EFC               	movlw	252
  3152  001EAA                     u2387:
  3153  001EAA  2EE8               	decfsz	wreg,f,c
  3154  001EAC  D7FE               	goto	u2387
  3155  001EAE  2E06               	decfsz	??_clear& (0+255),f,c
  3156  001EB0  D7FC               	goto	u2387
  3157  001EB2  0012               	return		;funcret
  3158  001EB4                     __end_of_clear:
  3159                           	opt stack 0
  3160                           tblptru	equ	0xFF8
  3161                           tblptrh	equ	0xFF7
  3162                           tblptrl	equ	0xFF6
  3163                           tablat	equ	0xFF5
  3164                           prodh	equ	0xFF4
  3165                           prodl	equ	0xFF3
  3166                           indf0	equ	0xFEF
  3167                           postinc0	equ	0xFEE
  3168                           fsr0h	equ	0xFEA
  3169                           fsr0l	equ	0xFE9
  3170                           wreg	equ	0xFE8
  3171                           postdec1	equ	0xFE5
  3172                           fsr1l	equ	0xFE1
  3173                           indf2	equ	0xFDF
  3174                           postinc2	equ	0xFDE
  3175                           postdec2	equ	0xFDD
  3176                           fsr2h	equ	0xFDA
  3177                           fsr2l	equ	0xFD9
  3178                           status	equ	0xFD8
  3179                           
  3180 ;; *************** function _caratula *****************
  3181 ;; Defined at:
  3182 ;;		line 31 in file "main.c"
  3183 ;; Parameters:    Size  Location     Type
  3184 ;;		None
  3185 ;; Auto vars:     Size  Location     Type
  3186 ;;		None
  3187 ;; Return value:  Size  Location     Type
  3188 ;;		None               void
  3189 ;; Registers used:
  3190 ;;		wreg, status,2, status,0, cstack
  3191 ;; Tracked objects:
  3192 ;;		On entry : 0/0
  3193 ;;		On exit  : 0/0
  3194 ;;		Unchanged: 0/0
  3195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3199 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3200 ;;Total ram usage:        0 bytes
  3201 ;; Hardware stack levels used:    1
  3202 ;; Hardware stack levels required when called:    3
  3203 ;; This function calls:
  3204 ;;		_lcd_comand
  3205 ;; This function is called by:
  3206 ;;		_main
  3207 ;; This function uses a non-reentrant model
  3208 ;;
  3209                           
  3210                           	psect	text16
  3211  001F1A                     __ptext16:
  3212                           	opt stack 0
  3213  001F1A                     _caratula:
  3214                           	opt stack 27
  3215                           
  3216                           ;main.c: 33: lcd_comand(0b00001100);
  3217                           
  3218                           ;incstack = 0
  3219  001F1A  0E0C               	movlw	12
  3220  001F1C  EC7F  F00F         	call	_lcd_comand
  3221  001F20  0012               	return		;funcret
  3222  001F22                     __end_of_caratula:
  3223                           	opt stack 0
  3224                           tblptru	equ	0xFF8
  3225                           tblptrh	equ	0xFF7
  3226                           tblptrl	equ	0xFF6
  3227                           tablat	equ	0xFF5
  3228                           prodh	equ	0xFF4
  3229                           prodl	equ	0xFF3
  3230                           indf0	equ	0xFEF
  3231                           postinc0	equ	0xFEE
  3232                           fsr0h	equ	0xFEA
  3233                           fsr0l	equ	0xFE9
  3234                           wreg	equ	0xFE8
  3235                           postdec1	equ	0xFE5
  3236                           fsr1l	equ	0xFE1
  3237                           indf2	equ	0xFDF
  3238                           postinc2	equ	0xFDE
  3239                           postdec2	equ	0xFDD
  3240                           fsr2h	equ	0xFDA
  3241                           fsr2l	equ	0xFD9
  3242                           status	equ	0xFD8
  3243                           
  3244 ;; *************** function _Setup *****************
  3245 ;; Defined at:
  3246 ;;		line 51 in file "main.c"
  3247 ;; Parameters:    Size  Location     Type
  3248 ;;		None
  3249 ;; Auto vars:     Size  Location     Type
  3250 ;;		None
  3251 ;; Return value:  Size  Location     Type
  3252 ;;		None               void
  3253 ;; Registers used:
  3254 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3255 ;; Tracked objects:
  3256 ;;		On entry : 0/0
  3257 ;;		On exit  : 0/0
  3258 ;;		Unchanged: 0/0
  3259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3263 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3264 ;;Total ram usage:        0 bytes
  3265 ;; Hardware stack levels used:    1
  3266 ;; Hardware stack levels required when called:    3
  3267 ;; This function calls:
  3268 ;;		_Write_RTC
  3269 ;;		_lcd_comand
  3270 ;;		_lcd_init
  3271 ;; This function is called by:
  3272 ;;		_main
  3273 ;; This function uses a non-reentrant model
  3274 ;;
  3275                           
  3276                           	psect	text17
  3277  001D72                     __ptext17:
  3278                           	opt stack 0
  3279  001D72                     _Setup:
  3280                           	opt stack 27
  3281                           
  3282                           ;main.c: 53: OSCTUNEbits.INTSRC=1;
  3283                           
  3284                           ;incstack = 0
  3285  001D72  8E9B               	bsf	3995,7,c	;volatile
  3286                           
  3287                           ;main.c: 54: OSCTUNEbits.PLLEN=0;
  3288  001D74  9C9B               	bcf	3995,6,c	;volatile
  3289                           
  3290                           ;main.c: 55: OSCCONbits.IRCF0=1;
  3291  001D76  88D3               	bsf	4051,4,c	;volatile
  3292                           
  3293                           ;main.c: 56: OSCCONbits.IRCF1=1;
  3294  001D78  8AD3               	bsf	4051,5,c	;volatile
  3295                           
  3296                           ;main.c: 57: OSCCONbits.IRCF2=1;
  3297  001D7A  8CD3               	bsf	4051,6,c	;volatile
  3298                           
  3299                           ;main.c: 58: OSCCONbits.SCS0=0;
  3300  001D7C  90D3               	bcf	4051,0,c	;volatile
  3301                           
  3302                           ;main.c: 59: OSCCONbits.SCS1=0;
  3303  001D7E  92D3               	bcf	4051,1,c	;volatile
  3304                           
  3305                           ;main.c: 60: TRISA = 0b11110000;
  3306  001D80  0EF0               	movlw	240
  3307  001D82  6E92               	movwf	3986,c	;volatile
  3308                           
  3309                           ;main.c: 61: TRISB = 0;
  3310  001D84  0E00               	movlw	0
  3311  001D86  6E93               	movwf	3987,c	;volatile
  3312                           
  3313                           ;main.c: 62: TRISC = 0b00000111;
  3314  001D88  0E07               	movlw	7
  3315  001D8A  6E94               	movwf	3988,c	;volatile
  3316                           
  3317                           ;main.c: 66: ANCON0=0b11111111;
  3318  001D8C  010F               	movlb	15	; () banked
  3319  001D8E  6948               	setf	72,b	;volatile
  3320                           
  3321                           ; BSR set to: 15
  3322                           ;main.c: 68: ANCON1=0b11111111;
  3323  001D90  010F               	movlb	15	; () banked
  3324  001D92  6949               	setf	73,b	;volatile
  3325                           
  3326                           ;main.c: 69: ADCON0=0b00101101;
  3327  001D94  0E2D               	movlw	45
  3328  001D96  6EC2               	movwf	4034,c	;volatile
  3329                           
  3330                           ;main.c: 70: ADCON1=0b00010000;
  3331  001D98  0E10               	movlw	16
  3332  001D9A  6EC1               	movwf	4033,c	;volatile
  3333                           
  3334                           ; BSR set to: 15
  3335                           ;main.c: 71: RTCCFGbits.RTCEN=1;
  3336  001D9C  010F               	movlb	15	; () banked
  3337  001D9E  8F3F               	bsf	63,7,b	;volatile
  3338                           
  3339                           ; BSR set to: 15
  3340                           ;main.c: 72: RTCCFGbits.RTCWREN=1;
  3341  001DA0  010F               	movlb	15	; () banked
  3342  001DA2  8B3F               	bsf	63,5,b	;volatile
  3343                           
  3344                           ; BSR set to: 15
  3345                           ;main.c: 73: T1CONbits.T1OSCEN=1;
  3346  001DA4  86CD               	bsf	4045,3,c	;volatile
  3347                           
  3348                           ; BSR set to: 15
  3349                           ;main.c: 74: Write_RTC();
  3350  001DA6  EC6B  F00A         	call	_Write_RTC	;wreg free
  3351                           
  3352                           ;main.c: 75: lcd_init();
  3353  001DAA  EC83  F00C         	call	_lcd_init	;wreg free
  3354                           
  3355                           ;main.c: 76: lcd_comand(0b00001100);
  3356  001DAE  0E0C               	movlw	12
  3357  001DB0  EC7F  F00F         	call	_lcd_comand
  3358                           
  3359                           ;main.c: 77: LATBbits.LATB1 = 1;;
  3360  001DB4  828A               	bsf	3978,1,c	;volatile
  3361                           
  3362                           ;main.c: 78: LATBbits.LATB0 = 1;;
  3363  001DB6  808A               	bsf	3978,0,c	;volatile
  3364  001DB8  0012               	return		;funcret
  3365  001DBA                     __end_of_Setup:
  3366                           	opt stack 0
  3367                           tblptru	equ	0xFF8
  3368                           tblptrh	equ	0xFF7
  3369                           tblptrl	equ	0xFF6
  3370                           tablat	equ	0xFF5
  3371                           prodh	equ	0xFF4
  3372                           prodl	equ	0xFF3
  3373                           indf0	equ	0xFEF
  3374                           postinc0	equ	0xFEE
  3375                           fsr0h	equ	0xFEA
  3376                           fsr0l	equ	0xFE9
  3377                           wreg	equ	0xFE8
  3378                           postdec1	equ	0xFE5
  3379                           fsr1l	equ	0xFE1
  3380                           indf2	equ	0xFDF
  3381                           postinc2	equ	0xFDE
  3382                           postdec2	equ	0xFDD
  3383                           fsr2h	equ	0xFDA
  3384                           fsr2l	equ	0xFD9
  3385                           status	equ	0xFD8
  3386                           
  3387 ;; *************** function _lcd_init *****************
  3388 ;; Defined at:
  3389 ;;		line 119 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3390 ;; Parameters:    Size  Location     Type
  3391 ;;		None
  3392 ;; Auto vars:     Size  Location     Type
  3393 ;;  i               1    4[COMRAM] unsigned char 
  3394 ;; Return value:  Size  Location     Type
  3395 ;;		None               void
  3396 ;; Registers used:
  3397 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3398 ;; Tracked objects:
  3399 ;;		On entry : 0/0
  3400 ;;		On exit  : 0/0
  3401 ;;		Unchanged: 0/0
  3402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3404 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3406 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3407 ;;Total ram usage:        1 bytes
  3408 ;; Hardware stack levels used:    1
  3409 ;; Hardware stack levels required when called:    2
  3410 ;; This function calls:
  3411 ;;		_Delay1KTCYx
  3412 ;;		_lcd_send_byte
  3413 ;;		_lcd_send_nibble
  3414 ;; This function is called by:
  3415 ;;		_Setup
  3416 ;; This function uses a non-reentrant model
  3417 ;;
  3418                           
  3419                           	psect	text18
  3420  001906                     __ptext18:
  3421                           	opt stack 0
  3422  001906                     _lcd_init:
  3423                           	opt stack 27
  3424                           
  3425                           ;unmc_lcd_216.c: 120: int8 i;
  3426                           ;unmc_lcd_216.c: 122: TRISBbits.TRISB3=0;
  3427                           
  3428                           ;incstack = 0
  3429  001906  9693               	bcf	3987,3,c	;volatile
  3430                           
  3431                           ;unmc_lcd_216.c: 123: TRISBbits.TRISB2=0;
  3432  001908  9493               	bcf	3987,2,c	;volatile
  3433                           
  3434                           ;unmc_lcd_216.c: 128: LATBbits.LATB3=0;
  3435  00190A  968A               	bcf	3978,3,c	;volatile
  3436                           
  3437                           ;unmc_lcd_216.c: 129: LATBbits.LATB2=0;
  3438  00190C  948A               	bcf	3978,2,c	;volatile
  3439                           
  3440                           ;unmc_lcd_216.c: 134: TRISBbits.TRISB4=0;
  3441  00190E  9893               	bcf	3987,4,c	;volatile
  3442                           
  3443                           ;unmc_lcd_216.c: 135: TRISBbits.TRISB5=0;
  3444  001910  9A93               	bcf	3987,5,c	;volatile
  3445                           
  3446                           ;unmc_lcd_216.c: 136: TRISBbits.TRISB6=0;
  3447  001912  9C93               	bcf	3987,6,c	;volatile
  3448                           
  3449                           ;unmc_lcd_216.c: 137: TRISBbits.TRISB7=0;
  3450  001914  9E93               	bcf	3987,7,c	;volatile
  3451                           
  3452                           ;unmc_lcd_216.c: 139: Delay1KTCYx(8000000UL/800000UL);
  3453  001916  0E0A               	movlw	10
  3454  001918  EC64  F00F         	call	_Delay1KTCYx
  3455                           
  3456                           ;unmc_lcd_216.c: 140: Delay1KTCYx(8000000UL/800000UL);
  3457  00191C  0E0A               	movlw	10
  3458  00191E  EC64  F00F         	call	_Delay1KTCYx
  3459                           
  3460                           ;unmc_lcd_216.c: 141: Delay1KTCYx(8000000UL/800000UL);
  3461  001922  0E0A               	movlw	10
  3462  001924  EC64  F00F         	call	_Delay1KTCYx
  3463                           
  3464                           ;unmc_lcd_216.c: 143: for(i=0 ;i < 3; i++){
  3465  001928  0E00               	movlw	0
  3466  00192A  6E05               	movwf	lcd_init@i,c
  3467  00192C                     l2707:
  3468  00192C  0E02               	movlw	2
  3469  00192E  6405               	cpfsgt	lcd_init@i,c
  3470  001930  D001               	goto	l2711
  3471  001932  D008               	goto	l2717
  3472  001934                     l2711:
  3473                           
  3474                           ;unmc_lcd_216.c: 144: lcd_send_nibble(0x03);
  3475  001934  0E03               	movlw	3
  3476  001936  EC7F  F00D         	call	_lcd_send_nibble
  3477                           
  3478                           ;unmc_lcd_216.c: 145: Delay1KTCYx(8000000UL/800000UL);
  3479  00193A  0E0A               	movlw	10
  3480  00193C  EC64  F00F         	call	_Delay1KTCYx
  3481  001940  2A05               	incf	lcd_init@i,f,c
  3482  001942  D7F4               	goto	l2707
  3483  001944                     l2717:
  3484                           
  3485                           ;unmc_lcd_216.c: 146: }
  3486                           ;unmc_lcd_216.c: 148: lcd_send_nibble(0x02);
  3487  001944  0E02               	movlw	2
  3488  001946  EC7F  F00D         	call	_lcd_send_nibble
  3489                           
  3490                           ;unmc_lcd_216.c: 150: for(i=0; i < sizeof(LCD_INIT_STRING); i++){
  3491  00194A  0E00               	movlw	0
  3492  00194C  6E05               	movwf	lcd_init@i,c
  3493  00194E  0E03               	movlw	3
  3494  001950  6405               	cpfsgt	lcd_init@i,c
  3495  001952  D002               	goto	l2725
  3496  001954  0012               	return	
  3497  001956  0012               	return	
  3498  001958                     l2725:
  3499                           
  3500                           ;unmc_lcd_216.c: 151: lcd_send_byte(0, LCD_INIT_STRING[i]);
  3501  001958  5005               	movf	lcd_init@i,w,c
  3502  00195A  0D01               	mullw	1
  3503  00195C  0E0B               	movlw	low _LCD_INIT_STRING
  3504  00195E  24F3               	addwf	prodl,w,c
  3505  001960  6EF6               	movwf	tblptrl,c
  3506  001962  0E0F               	movlw	high _LCD_INIT_STRING
  3507  001964  20F4               	addwfc	prodh,w,c
  3508  001966  6EF7               	movwf	tblptrh,c
  3509  001968                     	if	0	;There are less than 3 active tblptr bytes
  3510  001968                     	endif
  3511  001968  0008               	tblrd		*
  3512  00196A  CFF5 F003          	movff	tablat,lcd_send_byte@n
  3513  00196E  0E00               	movlw	0
  3514  001970  ECFF  F00E         	call	_lcd_send_byte
  3515                           
  3516                           ;unmc_lcd_216.c: 153: Delay1KTCYx(8000000UL/800000UL);
  3517  001974  0E0A               	movlw	10
  3518  001976  EC64  F00F         	call	_Delay1KTCYx
  3519  00197A  2A05               	incf	lcd_init@i,f,c
  3520  00197C  0E03               	movlw	3
  3521  00197E  6405               	cpfsgt	lcd_init@i,c
  3522  001980  D7EB               	goto	l2725
  3523  001982  0012               	return	
  3524  001984  0012               	return		;funcret
  3525  001986                     __end_of_lcd_init:
  3526                           	opt stack 0
  3527                           tblptru	equ	0xFF8
  3528                           tblptrh	equ	0xFF7
  3529                           tblptrl	equ	0xFF6
  3530                           tablat	equ	0xFF5
  3531                           prodh	equ	0xFF4
  3532                           prodl	equ	0xFF3
  3533                           indf0	equ	0xFEF
  3534                           postinc0	equ	0xFEE
  3535                           fsr0h	equ	0xFEA
  3536                           fsr0l	equ	0xFE9
  3537                           wreg	equ	0xFE8
  3538                           postdec1	equ	0xFE5
  3539                           fsr1l	equ	0xFE1
  3540                           indf2	equ	0xFDF
  3541                           postinc2	equ	0xFDE
  3542                           postdec2	equ	0xFDD
  3543                           fsr2h	equ	0xFDA
  3544                           fsr2l	equ	0xFD9
  3545                           status	equ	0xFD8
  3546                           
  3547 ;; *************** function _Delay1KTCYx *****************
  3548 ;; Defined at:
  3549 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\d1ktcyx.c"
  3550 ;; Parameters:    Size  Location     Type
  3551 ;;  unit            1    wreg     unsigned char 
  3552 ;; Auto vars:     Size  Location     Type
  3553 ;;  unit            1    0[COMRAM] unsigned char 
  3554 ;; Return value:  Size  Location     Type
  3555 ;;		None               void
  3556 ;; Registers used:
  3557 ;;		wreg
  3558 ;; Tracked objects:
  3559 ;;		On entry : 0/0
  3560 ;;		On exit  : 0/0
  3561 ;;		Unchanged: 0/0
  3562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3564 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3566 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3567 ;;Total ram usage:        1 bytes
  3568 ;; Hardware stack levels used:    1
  3569 ;; This function calls:
  3570 ;;		Nothing
  3571 ;; This function is called by:
  3572 ;;		_lcd_init
  3573 ;;		_DelayPORXLCD
  3574 ;; This function uses a non-reentrant model
  3575 ;;
  3576                           
  3577                           	psect	text19
  3578  001EC8                     __ptext19:
  3579                           	opt stack 0
  3580  001EC8                     _Delay1KTCYx:
  3581                           	opt stack 28
  3582                           
  3583                           ;incstack = 0
  3584                           ;Delay1KTCYx@unit stored from wreg
  3585  001EC8  6E01               	movwf	Delay1KTCYx@unit,c
  3586  001ECA  0EFA               	movlw	250
  3587  001ECC                     u2397:
  3588  001ECC  F000               	nop	
  3589  001ECE  2EE8               	decfsz	wreg,f,c
  3590  001ED0  D7FD               	goto	u2397
  3591  001ED2  2E01               	decfsz	Delay1KTCYx@unit,f,c
  3592  001ED4  D7FA               	goto	l1703
  3593  001ED6  0012               	return	
  3594  001ED8  0012               	return		;funcret
  3595  001EDA                     __end_of_Delay1KTCYx:
  3596                           	opt stack 0
  3597                           tblptru	equ	0xFF8
  3598                           tblptrh	equ	0xFF7
  3599                           tblptrl	equ	0xFF6
  3600                           tablat	equ	0xFF5
  3601                           prodh	equ	0xFF4
  3602                           prodl	equ	0xFF3
  3603                           indf0	equ	0xFEF
  3604                           postinc0	equ	0xFEE
  3605                           fsr0h	equ	0xFEA
  3606                           fsr0l	equ	0xFE9
  3607                           wreg	equ	0xFE8
  3608                           postdec1	equ	0xFE5
  3609                           fsr1l	equ	0xFE1
  3610                           indf2	equ	0xFDF
  3611                           postinc2	equ	0xFDE
  3612                           postdec2	equ	0xFDD
  3613                           fsr2h	equ	0xFDA
  3614                           fsr2l	equ	0xFD9
  3615                           status	equ	0xFD8
  3616                           
  3617 ;; *************** function _lcd_comand *****************
  3618 ;; Defined at:
  3619 ;;		line 189 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3620 ;; Parameters:    Size  Location     Type
  3621 ;;  d               1    wreg     unsigned char 
  3622 ;; Auto vars:     Size  Location     Type
  3623 ;;  d               1    4[COMRAM] unsigned char 
  3624 ;; Return value:  Size  Location     Type
  3625 ;;		None               void
  3626 ;; Registers used:
  3627 ;;		wreg, status,2, status,0, cstack
  3628 ;; Tracked objects:
  3629 ;;		On entry : 0/0
  3630 ;;		On exit  : 0/0
  3631 ;;		Unchanged: 0/0
  3632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3634 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3636 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3637 ;;Total ram usage:        1 bytes
  3638 ;; Hardware stack levels used:    1
  3639 ;; Hardware stack levels required when called:    2
  3640 ;; This function calls:
  3641 ;;		_lcd_send_byte
  3642 ;; This function is called by:
  3643 ;;		_caratula
  3644 ;;		_Setup
  3645 ;;		_clear
  3646 ;; This function uses a non-reentrant model
  3647 ;;
  3648                           
  3649                           	psect	text20
  3650  001EFE                     __ptext20:
  3651                           	opt stack 0
  3652  001EFE                     _lcd_comand:
  3653                           	opt stack 26
  3654                           
  3655                           ;incstack = 0
  3656                           ;lcd_comand@d stored from wreg
  3657  001EFE  6E05               	movwf	lcd_comand@d,c
  3658                           
  3659                           ;unmc_lcd_216.c: 190: lcd_send_byte(0,d);
  3660  001F00  C005  F003         	movff	lcd_comand@d,lcd_send_byte@n
  3661  001F04  0E00               	movlw	0
  3662  001F06  ECFF  F00E         	call	_lcd_send_byte
  3663  001F0A  0012               	return		;funcret
  3664  001F0C                     __end_of_lcd_comand:
  3665                           	opt stack 0
  3666                           tblptru	equ	0xFF8
  3667                           tblptrh	equ	0xFF7
  3668                           tblptrl	equ	0xFF6
  3669                           tablat	equ	0xFF5
  3670                           prodh	equ	0xFF4
  3671                           prodl	equ	0xFF3
  3672                           indf0	equ	0xFEF
  3673                           postinc0	equ	0xFEE
  3674                           fsr0h	equ	0xFEA
  3675                           fsr0l	equ	0xFE9
  3676                           wreg	equ	0xFE8
  3677                           postdec1	equ	0xFE5
  3678                           fsr1l	equ	0xFE1
  3679                           indf2	equ	0xFDF
  3680                           postinc2	equ	0xFDE
  3681                           postdec2	equ	0xFDD
  3682                           fsr2h	equ	0xFDA
  3683                           fsr2l	equ	0xFD9
  3684                           status	equ	0xFD8
  3685                           
  3686 ;; *************** function _lcd_send_byte *****************
  3687 ;; Defined at:
  3688 ;;		line 86 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3689 ;; Parameters:    Size  Location     Type
  3690 ;;  address         1    wreg     unsigned char 
  3691 ;;  n               1    2[COMRAM] unsigned char 
  3692 ;; Auto vars:     Size  Location     Type
  3693 ;;  address         1    3[COMRAM] unsigned char 
  3694 ;; Return value:  Size  Location     Type
  3695 ;;		None               void
  3696 ;; Registers used:
  3697 ;;		wreg, status,2, status,0, cstack
  3698 ;; Tracked objects:
  3699 ;;		On entry : 0/0
  3700 ;;		On exit  : 0/0
  3701 ;;		Unchanged: 0/0
  3702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3703 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3704 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3706 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3707 ;;Total ram usage:        2 bytes
  3708 ;; Hardware stack levels used:    1
  3709 ;; Hardware stack levels required when called:    1
  3710 ;; This function calls:
  3711 ;;		_Delay100TCYx
  3712 ;;		_lcd_send_nibble
  3713 ;; This function is called by:
  3714 ;;		_lcd_init
  3715 ;;		_lcd_gotoxy
  3716 ;;		_lcd_putc
  3717 ;;		_lcd_comand
  3718 ;;		_lcd_setcursor_vb
  3719 ;; This function uses a non-reentrant model
  3720 ;;
  3721                           
  3722                           	psect	text21
  3723  001DFE                     __ptext21:
  3724                           	opt stack 0
  3725  001DFE                     _lcd_send_byte:
  3726                           	opt stack 25
  3727                           
  3728                           ;incstack = 0
  3729                           ;lcd_send_byte@address stored from wreg
  3730  001DFE  6E04               	movwf	lcd_send_byte@address,c
  3731                           
  3732                           ;unmc_lcd_216.c: 88: LATBbits.LATB3=0;
  3733  001E00  968A               	bcf	3978,3,c	;volatile
  3734                           
  3735                           ;unmc_lcd_216.c: 93: Delay100TCYx(8000000UL/4000000UL);
  3736  001E02  0E02               	movlw	2
  3737  001E04  EC6D  F00F         	call	_Delay100TCYx
  3738                           
  3739                           ;unmc_lcd_216.c: 96: TRISBbits.TRISB4=0;
  3740  001E08  9893               	bcf	3987,4,c	;volatile
  3741                           
  3742                           ;unmc_lcd_216.c: 97: TRISBbits.TRISB5=0;
  3743  001E0A  9A93               	bcf	3987,5,c	;volatile
  3744                           
  3745                           ;unmc_lcd_216.c: 98: TRISBbits.TRISB6=0;
  3746  001E0C  9C93               	bcf	3987,6,c	;volatile
  3747                           
  3748                           ;unmc_lcd_216.c: 99: TRISBbits.TRISB7=0;
  3749  001E0E  9E93               	bcf	3987,7,c	;volatile
  3750                           
  3751                           ;unmc_lcd_216.c: 101: if(address)
  3752  001E10  5004               	movf	lcd_send_byte@address,w,c
  3753  001E12  B4D8               	btfsc	status,2,c
  3754  001E14  D002               	goto	l75
  3755                           
  3756                           ;unmc_lcd_216.c: 102: LATBbits.LATB3=1;
  3757  001E16  868A               	bsf	3978,3,c	;volatile
  3758  001E18  D001               	goto	l76
  3759  001E1A                     l75:
  3760                           
  3761                           ;unmc_lcd_216.c: 103: else
  3762                           ;unmc_lcd_216.c: 104: LATBbits.LATB3=0;
  3763  001E1A  968A               	bcf	3978,3,c	;volatile
  3764  001E1C                     l76:
  3765                           
  3766                           ;unmc_lcd_216.c: 106: __nop();
  3767  001E1C  F000               	nop	
  3768                           
  3769                           ;unmc_lcd_216.c: 113: lcd_send_nibble(n >> 4);
  3770  001E1E  3803               	swapf	lcd_send_byte@n,w,c
  3771  001E20  0B0F               	andlw	15
  3772  001E22  EC7F  F00D         	call	_lcd_send_nibble
  3773                           
  3774                           ;unmc_lcd_216.c: 114: lcd_send_nibble(n & 0xf);
  3775  001E26  5003               	movf	lcd_send_byte@n,w,c
  3776  001E28  0B0F               	andlw	15
  3777  001E2A  EC7F  F00D         	call	_lcd_send_nibble
  3778  001E2E  0012               	return		;funcret
  3779  001E30                     __end_of_lcd_send_byte:
  3780                           	opt stack 0
  3781                           tblptru	equ	0xFF8
  3782                           tblptrh	equ	0xFF7
  3783                           tblptrl	equ	0xFF6
  3784                           tablat	equ	0xFF5
  3785                           prodh	equ	0xFF4
  3786                           prodl	equ	0xFF3
  3787                           indf0	equ	0xFEF
  3788                           postinc0	equ	0xFEE
  3789                           fsr0h	equ	0xFEA
  3790                           fsr0l	equ	0xFE9
  3791                           wreg	equ	0xFE8
  3792                           postdec1	equ	0xFE5
  3793                           fsr1l	equ	0xFE1
  3794                           indf2	equ	0xFDF
  3795                           postinc2	equ	0xFDE
  3796                           postdec2	equ	0xFDD
  3797                           fsr2h	equ	0xFDA
  3798                           fsr2l	equ	0xFD9
  3799                           status	equ	0xFD8
  3800                           
  3801 ;; *************** function _lcd_send_nibble *****************
  3802 ;; Defined at:
  3803 ;;		line 25 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3804 ;; Parameters:    Size  Location     Type
  3805 ;;  nibble          1    wreg     unsigned char 
  3806 ;; Auto vars:     Size  Location     Type
  3807 ;;  nibble          1    1[COMRAM] unsigned char 
  3808 ;; Return value:  Size  Location     Type
  3809 ;;		None               void
  3810 ;; Registers used:
  3811 ;;		wreg, status,2, status,0
  3812 ;; Tracked objects:
  3813 ;;		On entry : 0/0
  3814 ;;		On exit  : 0/0
  3815 ;;		Unchanged: 0/0
  3816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3818 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3819 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3820 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3821 ;;Total ram usage:        2 bytes
  3822 ;; Hardware stack levels used:    1
  3823 ;; This function calls:
  3824 ;;		Nothing
  3825 ;; This function is called by:
  3826 ;;		_lcd_send_byte
  3827 ;;		_lcd_init
  3828 ;; This function uses a non-reentrant model
  3829 ;;
  3830                           
  3831                           	psect	text22
  3832  001AFE                     __ptext22:
  3833                           	opt stack 0
  3834  001AFE                     _lcd_send_nibble:
  3835                           	opt stack 25
  3836                           
  3837                           ;incstack = 0
  3838                           ;lcd_send_nibble@nibble stored from wreg
  3839  001AFE  6E02               	movwf	lcd_send_nibble@nibble,c
  3840                           
  3841                           ;unmc_lcd_216.c: 27: LATBbits.LATB4=!!(nibble & 0x01);
  3842  001B00  A002               	btfss	lcd_send_nibble@nibble,0,c
  3843  001B02  D003               	goto	u1180
  3844  001B04  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3845  001B06  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  3846  001B08  D001               	goto	u1198
  3847  001B0A                     u1180:
  3848  001B0A  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3849  001B0C                     u1198:
  3850  001B0C  3A01               	swapf	??_lcd_send_nibble,f,c
  3851  001B0E  508A               	movf	3978,w,c	;volatile
  3852  001B10  1801               	xorwf	??_lcd_send_nibble,w,c
  3853  001B12  0BEF               	andlw	-17
  3854  001B14  1801               	xorwf	??_lcd_send_nibble,w,c
  3855  001B16  6E8A               	movwf	3978,c	;volatile
  3856                           
  3857                           ;unmc_lcd_216.c: 28: LATBbits.LATB5=!!(nibble & 0x02);
  3858  001B18  A202               	btfss	lcd_send_nibble@nibble,1,c
  3859  001B1A  D003               	goto	u1200
  3860  001B1C  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3861  001B1E  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  3862  001B20  D001               	goto	u1218
  3863  001B22                     u1200:
  3864  001B22  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3865  001B24                     u1218:
  3866  001B24  3A01               	swapf	??_lcd_send_nibble,f,c
  3867  001B26  4601               	rlncf	??_lcd_send_nibble,f,c
  3868  001B28  508A               	movf	3978,w,c	;volatile
  3869  001B2A  1801               	xorwf	??_lcd_send_nibble,w,c
  3870  001B2C  0BDF               	andlw	-33
  3871  001B2E  1801               	xorwf	??_lcd_send_nibble,w,c
  3872  001B30  6E8A               	movwf	3978,c	;volatile
  3873                           
  3874                           ;unmc_lcd_216.c: 29: LATBbits.LATB6=!!(nibble & 0x04);
  3875  001B32  A402               	btfss	lcd_send_nibble@nibble,2,c
  3876  001B34  D003               	goto	u1220
  3877  001B36  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3878  001B38  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  3879  001B3A  D001               	goto	u1238
  3880  001B3C                     u1220:
  3881  001B3C  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3882  001B3E                     u1238:
  3883  001B3E  3A01               	swapf	??_lcd_send_nibble,f,c
  3884  001B40  4601               	rlncf	??_lcd_send_nibble,f,c
  3885  001B42  4601               	rlncf	??_lcd_send_nibble,f,c
  3886  001B44  508A               	movf	3978,w,c	;volatile
  3887  001B46  1801               	xorwf	??_lcd_send_nibble,w,c
  3888  001B48  0BBF               	andlw	-65
  3889  001B4A  1801               	xorwf	??_lcd_send_nibble,w,c
  3890  001B4C  6E8A               	movwf	3978,c	;volatile
  3891                           
  3892                           ;unmc_lcd_216.c: 30: LATBbits.LATB7=!!(nibble & 0x08);
  3893  001B4E  A602               	btfss	lcd_send_nibble@nibble,3,c
  3894  001B50  D003               	goto	u1240
  3895  001B52  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3896  001B54  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  3897  001B56  D001               	goto	u1258
  3898  001B58                     u1240:
  3899  001B58  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3900  001B5A                     u1258:
  3901  001B5A  3201               	rrcf	??_lcd_send_nibble,f,c
  3902  001B5C  3201               	rrcf	??_lcd_send_nibble,f,c
  3903  001B5E  508A               	movf	3978,w,c	;volatile
  3904  001B60  1801               	xorwf	??_lcd_send_nibble,w,c
  3905  001B62  0B7F               	andlw	-129
  3906  001B64  1801               	xorwf	??_lcd_send_nibble,w,c
  3907  001B66  6E8A               	movwf	3978,c	;volatile
  3908                           
  3909                           ;unmc_lcd_216.c: 32: __nop();
  3910  001B68  F000               	nop	
  3911                           
  3912                           ;unmc_lcd_216.c: 33: LATBbits.LATB2=1;
  3913  001B6A  848A               	bsf	3978,2,c	;volatile
  3914                           
  3915                           ;unmc_lcd_216.c: 34: __nop();__nop();
  3916  001B6C  F000               	nop	
  3917  001B6E  F000               	nop	
  3918                           
  3919                           ;unmc_lcd_216.c: 35: LATBbits.LATB2=0;
  3920  001B70  948A               	bcf	3978,2,c	;volatile
  3921  001B72  0012               	return		;funcret
  3922  001B74                     __end_of_lcd_send_nibble:
  3923                           	opt stack 0
  3924                           tblptru	equ	0xFF8
  3925                           tblptrh	equ	0xFF7
  3926                           tblptrl	equ	0xFF6
  3927                           tablat	equ	0xFF5
  3928                           prodh	equ	0xFF4
  3929                           prodl	equ	0xFF3
  3930                           indf0	equ	0xFEF
  3931                           postinc0	equ	0xFEE
  3932                           fsr0h	equ	0xFEA
  3933                           fsr0l	equ	0xFE9
  3934                           wreg	equ	0xFE8
  3935                           postdec1	equ	0xFE5
  3936                           fsr1l	equ	0xFE1
  3937                           indf2	equ	0xFDF
  3938                           postinc2	equ	0xFDE
  3939                           postdec2	equ	0xFDD
  3940                           fsr2h	equ	0xFDA
  3941                           fsr2l	equ	0xFD9
  3942                           status	equ	0xFD8
  3943                           
  3944 ;; *************** function _Delay100TCYx *****************
  3945 ;; Defined at:
  3946 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\d100tcyx.c"
  3947 ;; Parameters:    Size  Location     Type
  3948 ;;  unit            1    wreg     unsigned char 
  3949 ;; Auto vars:     Size  Location     Type
  3950 ;;  unit            1    0[COMRAM] unsigned char 
  3951 ;; Return value:  Size  Location     Type
  3952 ;;		None               void
  3953 ;; Registers used:
  3954 ;;		wreg
  3955 ;; Tracked objects:
  3956 ;;		On entry : 0/0
  3957 ;;		On exit  : 0/0
  3958 ;;		Unchanged: 0/0
  3959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3961 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3963 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3964 ;;Total ram usage:        1 bytes
  3965 ;; Hardware stack levels used:    1
  3966 ;; This function calls:
  3967 ;;		Nothing
  3968 ;; This function is called by:
  3969 ;;		_lcd_send_byte
  3970 ;; This function uses a non-reentrant model
  3971 ;;
  3972                           
  3973                           	psect	text23
  3974  001EDA                     __ptext23:
  3975                           	opt stack 0
  3976  001EDA                     _Delay100TCYx:
  3977                           	opt stack 25
  3978                           
  3979                           ;incstack = 0
  3980                           ;Delay100TCYx@unit stored from wreg
  3981  001EDA  6E01               	movwf	Delay100TCYx@unit,c
  3982  001EDC  0E21               	movlw	33
  3983  001EDE                     u2407:
  3984  001EDE  2EE8               	decfsz	wreg,f,c
  3985  001EE0  D7FE               	goto	u2407
  3986  001EE2  F000               	nop	
  3987  001EE4  2E01               	decfsz	Delay100TCYx@unit,f,c
  3988  001EE6  D7FA               	goto	l2167
  3989  001EE8  0012               	return	
  3990  001EEA  0012               	return		;funcret
  3991  001EEC                     __end_of_Delay100TCYx:
  3992                           	opt stack 0
  3993                           tblptru	equ	0xFF8
  3994                           tblptrh	equ	0xFF7
  3995                           tblptrl	equ	0xFF6
  3996                           tablat	equ	0xFF5
  3997                           prodh	equ	0xFF4
  3998                           prodl	equ	0xFF3
  3999                           indf0	equ	0xFEF
  4000                           postinc0	equ	0xFEE
  4001                           fsr0h	equ	0xFEA
  4002                           fsr0l	equ	0xFE9
  4003                           wreg	equ	0xFE8
  4004                           postdec1	equ	0xFE5
  4005                           fsr1l	equ	0xFE1
  4006                           indf2	equ	0xFDF
  4007                           postinc2	equ	0xFDE
  4008                           postdec2	equ	0xFDD
  4009                           fsr2h	equ	0xFDA
  4010                           fsr2l	equ	0xFD9
  4011                           status	equ	0xFD8
  4012                           
  4013 ;; *************** function _Write_RTC *****************
  4014 ;; Defined at:
  4015 ;;		line 22 in file "../../Program Files/Unimic/unmc_01/sources/unmc_rtcc_01.c"
  4016 ;; Parameters:    Size  Location     Type
  4017 ;;		None
  4018 ;; Auto vars:     Size  Location     Type
  4019 ;;		None
  4020 ;; Return value:  Size  Location     Type
  4021 ;;                  2   26[None  ] int 
  4022 ;; Registers used:
  4023 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4024 ;; Tracked objects:
  4025 ;;		On entry : 0/0
  4026 ;;		On exit  : 0/0
  4027 ;;		Unchanged: 0/0
  4028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4032 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4033 ;;Total ram usage:        0 bytes
  4034 ;; Hardware stack levels used:    1
  4035 ;; Hardware stack levels required when called:    2
  4036 ;; This function calls:
  4037 ;;		_RtccWrOn
  4038 ;;		_RtccWriteDate
  4039 ;;		_RtccWriteTime
  4040 ;;		___awdiv
  4041 ;; This function is called by:
  4042 ;;		_Setup
  4043 ;;		_setClock
  4044 ;; This function uses a non-reentrant model
  4045 ;;
  4046                           
  4047                           	psect	text24
  4048  0014D6                     __ptext24:
  4049                           	opt stack 0
  4050  0014D6                     _Write_RTC:
  4051                           	opt stack 27
  4052                           
  4053                           ;unmc_rtcc_01.c: 24: RtccWrOn();
  4054                           
  4055                           ;incstack = 0
  4056  0014D6  EC76  F00F         	call	_RtccWrOn	;wreg free
  4057                           
  4058                           ;unmc_rtcc_01.c: 26: PIE3bits.RTCCIE=1;
  4059  0014DA  80A3               	bsf	4003,0,c	;volatile
  4060                           
  4061                           ;unmc_rtcc_01.c: 27: segundo_d=segundo/10;
  4062  0014DC  C038  F001         	movff	_segundo,___awdiv@dividend
  4063  0014E0  C039  F002         	movff	_segundo+1,___awdiv@dividend+1
  4064  0014E4  0E00               	movlw	0
  4065  0014E6  6E04               	movwf	___awdiv@divisor+1,c
  4066  0014E8  0E0A               	movlw	10
  4067  0014EA  6E03               	movwf	___awdiv@divisor,c
  4068  0014EC  EC38  F00C         	call	___awdiv	;wreg free
  4069  0014F0  5001               	movf	?___awdiv,w,c
  4070  0014F2  6E4E               	movwf	_segundo_d,c
  4071                           
  4072                           ;unmc_rtcc_01.c: 28: segundo_u=segundo-segundo_d*10;
  4073  0014F4  504E               	movf	_segundo_d,w,c
  4074  0014F6  0D0A               	mullw	10
  4075  0014F8  50F3               	movf	prodl,w,c
  4076  0014FA  0800               	sublw	0
  4077  0014FC  2438               	addwf	_segundo,w,c
  4078  0014FE  6E4F               	movwf	_segundo_u,c
  4079                           
  4080                           ;unmc_rtcc_01.c: 29: RtccTime.f.sec =segundo_d*16+segundo_u;
  4081  001500  504E               	movf	_segundo_d,w,c
  4082  001502  0D10               	mullw	16
  4083  001504  50F3               	movf	prodl,w,c
  4084  001506  244F               	addwf	_segundo_u,w,c
  4085  001508  6E40               	movwf	_RtccTime+1,c
  4086                           
  4087                           ;unmc_rtcc_01.c: 30: minuto_d=minuto/10;
  4088  00150A  C05A  F001         	movff	_minuto,___awdiv@dividend
  4089  00150E  C05B  F002         	movff	_minuto+1,___awdiv@dividend+1
  4090  001512  0E00               	movlw	0
  4091  001514  6E04               	movwf	___awdiv@divisor+1,c
  4092  001516  0E0A               	movlw	10
  4093  001518  6E03               	movwf	___awdiv@divisor,c
  4094  00151A  EC38  F00C         	call	___awdiv	;wreg free
  4095  00151E  5001               	movf	?___awdiv,w,c
  4096  001520  6E4C               	movwf	_minuto_d,c
  4097                           
  4098                           ;unmc_rtcc_01.c: 31: minuto_u=minuto-minuto_d*10;
  4099  001522  504C               	movf	_minuto_d,w,c
  4100  001524  0D0A               	mullw	10
  4101  001526  50F3               	movf	prodl,w,c
  4102  001528  0800               	sublw	0
  4103  00152A  245A               	addwf	_minuto,w,c
  4104  00152C  6E4D               	movwf	_minuto_u,c
  4105                           
  4106                           ;unmc_rtcc_01.c: 32: RtccTime.f.min =minuto_d*16+minuto_u;
  4107  00152E  504C               	movf	_minuto_d,w,c
  4108  001530  0D10               	mullw	16
  4109  001532  50F3               	movf	prodl,w,c
  4110  001534  244D               	addwf	_minuto_u,w,c
  4111  001536  6E41               	movwf	_RtccTime+2,c
  4112                           
  4113                           ;unmc_rtcc_01.c: 33: hora_d=hora/10;
  4114  001538  C056  F001         	movff	_hora,___awdiv@dividend
  4115  00153C  C057  F002         	movff	_hora+1,___awdiv@dividend+1
  4116  001540  0E00               	movlw	0
  4117  001542  6E04               	movwf	___awdiv@divisor+1,c
  4118  001544  0E0A               	movlw	10
  4119  001546  6E03               	movwf	___awdiv@divisor,c
  4120  001548  EC38  F00C         	call	___awdiv	;wreg free
  4121  00154C  5001               	movf	?___awdiv,w,c
  4122  00154E  6E48               	movwf	_hora_d,c
  4123                           
  4124                           ;unmc_rtcc_01.c: 34: hora_u=hora-hora_d*10;
  4125  001550  5048               	movf	_hora_d,w,c
  4126  001552  0D0A               	mullw	10
  4127  001554  50F3               	movf	prodl,w,c
  4128  001556  0800               	sublw	0
  4129  001558  2456               	addwf	_hora,w,c
  4130  00155A  6E49               	movwf	_hora_u,c
  4131                           
  4132                           ;unmc_rtcc_01.c: 35: RtccTime.f.hour=hora_d*16+hora_u;
  4133  00155C  5048               	movf	_hora_d,w,c
  4134  00155E  0D10               	mullw	16
  4135  001560  50F3               	movf	prodl,w,c
  4136  001562  2449               	addwf	_hora_u,w,c
  4137  001564  6E42               	movwf	_RtccTime+3,c
  4138                           
  4139                           ;unmc_rtcc_01.c: 36: anio_d=anio/10;
  4140  001566  C050  F001         	movff	_anio,___awdiv@dividend
  4141  00156A  C051  F002         	movff	_anio+1,___awdiv@dividend+1
  4142  00156E  0E00               	movlw	0
  4143  001570  6E04               	movwf	___awdiv@divisor+1,c
  4144  001572  0E0A               	movlw	10
  4145  001574  6E03               	movwf	___awdiv@divisor,c
  4146  001576  EC38  F00C         	call	___awdiv	;wreg free
  4147  00157A  5001               	movf	?___awdiv,w,c
  4148  00157C  6E43               	movwf	_anio_d,c
  4149                           
  4150                           ;unmc_rtcc_01.c: 37: anio_u=anio-anio_d*10;
  4151  00157E  5043               	movf	_anio_d,w,c
  4152  001580  0D0A               	mullw	10
  4153  001582  50F3               	movf	prodl,w,c
  4154  001584  0800               	sublw	0
  4155  001586  2450               	addwf	_anio,w,c
  4156  001588  6E44               	movwf	_anio_u,c
  4157                           
  4158                           ;unmc_rtcc_01.c: 38: RtccDate.f.year=anio_d*16+anio_u;
  4159  00158A  5043               	movf	_anio_d,w,c
  4160  00158C  0D10               	mullw	16
  4161  00158E  50F3               	movf	prodl,w,c
  4162  001590  2444               	addwf	_anio_u,w,c
  4163  001592  6E3E               	movwf	_RtccDate+3,c
  4164                           
  4165                           ;unmc_rtcc_01.c: 39: mes_d=mes/10;
  4166  001594  C058  F001         	movff	_mes,___awdiv@dividend
  4167  001598  C059  F002         	movff	_mes+1,___awdiv@dividend+1
  4168  00159C  0E00               	movlw	0
  4169  00159E  6E04               	movwf	___awdiv@divisor+1,c
  4170  0015A0  0E0A               	movlw	10
  4171  0015A2  6E03               	movwf	___awdiv@divisor,c
  4172  0015A4  EC38  F00C         	call	___awdiv	;wreg free
  4173  0015A8  5001               	movf	?___awdiv,w,c
  4174  0015AA  6E4A               	movwf	_mes_d,c
  4175                           
  4176                           ;unmc_rtcc_01.c: 40: mes_u=mes-mes_d*10;
  4177  0015AC  504A               	movf	_mes_d,w,c
  4178  0015AE  0D0A               	mullw	10
  4179  0015B0  50F3               	movf	prodl,w,c
  4180  0015B2  0800               	sublw	0
  4181  0015B4  2458               	addwf	_mes,w,c
  4182  0015B6  6E4B               	movwf	_mes_u,c
  4183                           
  4184                           ;unmc_rtcc_01.c: 41: RtccDate.f.mon=mes_d*16+mes_u;
  4185  0015B8  504A               	movf	_mes_d,w,c
  4186  0015BA  0D10               	mullw	16
  4187  0015BC  50F3               	movf	prodl,w,c
  4188  0015BE  244B               	addwf	_mes_u,w,c
  4189  0015C0  6E3D               	movwf	_RtccDate+2,c
  4190                           
  4191                           ;unmc_rtcc_01.c: 42: fecha_d=dia/10;
  4192  0015C2  C052  F001         	movff	_dia,___awdiv@dividend
  4193  0015C6  C053  F002         	movff	_dia+1,___awdiv@dividend+1
  4194  0015CA  0E00               	movlw	0
  4195  0015CC  6E04               	movwf	___awdiv@divisor+1,c
  4196  0015CE  0E0A               	movlw	10
  4197  0015D0  6E03               	movwf	___awdiv@divisor,c
  4198  0015D2  EC38  F00C         	call	___awdiv	;wreg free
  4199  0015D6  5001               	movf	?___awdiv,w,c
  4200  0015D8  6E46               	movwf	_fecha_d,c
  4201                           
  4202                           ;unmc_rtcc_01.c: 43: fecha_u=dia-fecha_d*10;
  4203  0015DA  5046               	movf	_fecha_d,w,c
  4204  0015DC  0D0A               	mullw	10
  4205  0015DE  50F3               	movf	prodl,w,c
  4206  0015E0  0800               	sublw	0
  4207  0015E2  2452               	addwf	_dia,w,c
  4208  0015E4  6E47               	movwf	_fecha_u,c
  4209                           
  4210                           ;unmc_rtcc_01.c: 44: RtccDate.f.mday=fecha_d*16+fecha_u;
  4211  0015E6  5046               	movf	_fecha_d,w,c
  4212  0015E8  0D10               	mullw	16
  4213  0015EA  50F3               	movf	prodl,w,c
  4214  0015EC  2447               	addwf	_fecha_u,w,c
  4215  0015EE  6E3C               	movwf	_RtccDate+1,c
  4216                           
  4217                           ;unmc_rtcc_01.c: 45: dia_semana=diasem;
  4218  0015F0  C054  F045         	movff	_diasem,_dia_semana
  4219                           
  4220                           ;unmc_rtcc_01.c: 46: RtccDate.f.wday =diasem;
  4221  0015F4  C054  F03B         	movff	_diasem,_RtccDate
  4222                           
  4223                           ;unmc_rtcc_01.c: 47: RtccWriteTime(&RtccTime,1);
  4224  0015F8  0E3F               	movlw	low _RtccTime
  4225  0015FA  6E01               	movwf	RtccWriteTime@pTm,c
  4226  0015FC  0E00               	movlw	high _RtccTime
  4227  0015FE  6E02               	movwf	RtccWriteTime@pTm+1,c
  4228  001600  0E01               	movlw	1
  4229  001602  6E03               	movwf	RtccWriteTime@di,c
  4230  001604  ECB2  F00B         	call	_RtccWriteTime	;wreg free
  4231                           
  4232                           ;unmc_rtcc_01.c: 48: RtccWriteDate(&RtccDate,1);
  4233  001608  0E3B               	movlw	low _RtccDate
  4234  00160A  6E01               	movwf	RtccWriteDate@pDt,c
  4235  00160C  0E00               	movlw	high _RtccDate
  4236  00160E  6E02               	movwf	RtccWriteDate@pDt+1,c
  4237  001610  0E01               	movlw	1
  4238  001612  6E03               	movwf	RtccWriteDate@di,c
  4239  001614  EC0F  F00B         	call	_RtccWriteDate	;wreg free
  4240                           
  4241                           ;unmc_rtcc_01.c: 49: (RTCCFGbits.RTCEN=1);
  4242  001618  010F               	movlb	15	; () banked
  4243  00161A  8F3F               	bsf	63,7,b	;volatile
  4244                           
  4245                           ; BSR set to: 15
  4246  00161C  0012               	return		;funcret
  4247  00161E                     __end_of_Write_RTC:
  4248                           	opt stack 0
  4249                           tblptru	equ	0xFF8
  4250                           tblptrh	equ	0xFF7
  4251                           tblptrl	equ	0xFF6
  4252                           tablat	equ	0xFF5
  4253                           prodh	equ	0xFF4
  4254                           prodl	equ	0xFF3
  4255                           indf0	equ	0xFEF
  4256                           postinc0	equ	0xFEE
  4257                           fsr0h	equ	0xFEA
  4258                           fsr0l	equ	0xFE9
  4259                           wreg	equ	0xFE8
  4260                           postdec1	equ	0xFE5
  4261                           fsr1l	equ	0xFE1
  4262                           indf2	equ	0xFDF
  4263                           postinc2	equ	0xFDE
  4264                           postdec2	equ	0xFDD
  4265                           fsr2h	equ	0xFDA
  4266                           fsr2l	equ	0xFD9
  4267                           status	equ	0xFD8
  4268                           
  4269 ;; *************** function ___awdiv *****************
  4270 ;; Defined at:
  4271 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\awdiv.c"
  4272 ;; Parameters:    Size  Location     Type
  4273 ;;  dividend        2    0[COMRAM] int 
  4274 ;;  divisor         2    2[COMRAM] int 
  4275 ;; Auto vars:     Size  Location     Type
  4276 ;;  quotient        2    6[COMRAM] int 
  4277 ;;  sign            1    5[COMRAM] unsigned char 
  4278 ;;  counter         1    4[COMRAM] unsigned char 
  4279 ;; Return value:  Size  Location     Type
  4280 ;;                  2    0[COMRAM] int 
  4281 ;; Registers used:
  4282 ;;		wreg, status,2, status,0
  4283 ;; Tracked objects:
  4284 ;;		On entry : 0/0
  4285 ;;		On exit  : 0/0
  4286 ;;		Unchanged: 0/0
  4287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4288 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4289 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4291 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4292 ;;Total ram usage:        8 bytes
  4293 ;; Hardware stack levels used:    1
  4294 ;; This function calls:
  4295 ;;		Nothing
  4296 ;; This function is called by:
  4297 ;;		_Write_RTC
  4298 ;;		__delay_s
  4299 ;; This function uses a non-reentrant model
  4300 ;;
  4301                           
  4302                           	psect	text25
  4303  001870                     __ptext25:
  4304                           	opt stack 0
  4305  001870                     ___awdiv:
  4306                           	opt stack 27
  4307                           
  4308                           ; BSR set to: 15
  4309                           ;incstack = 0
  4310  001870  0E00               	movlw	0
  4311  001872  6E06               	movwf	___awdiv@sign,c
  4312  001874  AE04               	btfss	___awdiv@divisor+1,7,c
  4313  001876  D007               	goto	l2375
  4314  001878  6C03               	negf	___awdiv@divisor,c
  4315  00187A  1E04               	comf	___awdiv@divisor+1,f,c
  4316  00187C  B0D8               	btfsc	status,0,c
  4317  00187E  2A04               	incf	___awdiv@divisor+1,f,c
  4318  001880  0E01               	movlw	1
  4319  001882  6E06               	movwf	___awdiv@sign,c
  4320  001884  D000               	goto	l2375
  4321  001886                     l2375:
  4322  001886  AE02               	btfss	___awdiv@dividend+1,7,c
  4323  001888  D007               	goto	l2381
  4324  00188A  6C01               	negf	___awdiv@dividend,c
  4325  00188C  1E02               	comf	___awdiv@dividend+1,f,c
  4326  00188E  B0D8               	btfsc	status,0,c
  4327  001890  2A02               	incf	___awdiv@dividend+1,f,c
  4328  001892  0E01               	movlw	1
  4329  001894  1A06               	xorwf	___awdiv@sign,f,c
  4330  001896  D000               	goto	l2381
  4331  001898                     l2381:
  4332  001898  0E00               	movlw	0
  4333  00189A  6E08               	movwf	___awdiv@quotient+1,c
  4334  00189C  0E00               	movlw	0
  4335  00189E  6E07               	movwf	___awdiv@quotient,c
  4336  0018A0  5003               	movf	___awdiv@divisor,w,c
  4337  0018A2  1004               	iorwf	___awdiv@divisor+1,w,c
  4338  0018A4  B4D8               	btfsc	status,2,c
  4339  0018A6  D021               	goto	l2403
  4340  0018A8  0E01               	movlw	1
  4341  0018AA  6E05               	movwf	___awdiv@counter,c
  4342  0018AC  D005               	goto	l2389
  4343  0018AE                     l2387:
  4344  0018AE  90D8               	bcf	status,0,c
  4345  0018B0  3603               	rlcf	___awdiv@divisor,f,c
  4346  0018B2  3604               	rlcf	___awdiv@divisor+1,f,c
  4347  0018B4  2A05               	incf	___awdiv@counter,f,c
  4348  0018B6  D000               	goto	l2389
  4349  0018B8                     l2389:
  4350  0018B8  BE04               	btfsc	___awdiv@divisor+1,7,c
  4351  0018BA  D002               	goto	l2391
  4352  0018BC  D7F8               	goto	l2387
  4353  0018BE  D000               	goto	l2391
  4354  0018C0                     l2391:
  4355  0018C0  90D8               	bcf	status,0,c
  4356  0018C2  3607               	rlcf	___awdiv@quotient,f,c
  4357  0018C4  3608               	rlcf	___awdiv@quotient+1,f,c
  4358  0018C6  5003               	movf	___awdiv@divisor,w,c
  4359  0018C8  5C01               	subwf	___awdiv@dividend,w,c
  4360  0018CA  5004               	movf	___awdiv@divisor+1,w,c
  4361  0018CC  5802               	subwfb	___awdiv@dividend+1,w,c
  4362  0018CE  A0D8               	btfss	status,0,c
  4363  0018D0  D006               	goto	l2399
  4364  0018D2  5003               	movf	___awdiv@divisor,w,c
  4365  0018D4  5E01               	subwf	___awdiv@dividend,f,c
  4366  0018D6  5004               	movf	___awdiv@divisor+1,w,c
  4367  0018D8  5A02               	subwfb	___awdiv@dividend+1,f,c
  4368  0018DA  8007               	bsf	___awdiv@quotient,0,c
  4369  0018DC  D000               	goto	l2399
  4370  0018DE                     l2399:
  4371  0018DE  90D8               	bcf	status,0,c
  4372  0018E0  3204               	rrcf	___awdiv@divisor+1,f,c
  4373  0018E2  3203               	rrcf	___awdiv@divisor,f,c
  4374  0018E4  2E05               	decfsz	___awdiv@counter,f,c
  4375  0018E6  D7EC               	goto	l2391
  4376  0018E8  D000               	goto	l2403
  4377  0018EA                     l2403:
  4378  0018EA  5006               	movf	___awdiv@sign,w,c
  4379  0018EC  B4D8               	btfsc	status,2,c
  4380  0018EE  D005               	goto	l2407
  4381  0018F0  6C07               	negf	___awdiv@quotient,c
  4382  0018F2  1E08               	comf	___awdiv@quotient+1,f,c
  4383  0018F4  B0D8               	btfsc	status,0,c
  4384  0018F6  2A08               	incf	___awdiv@quotient+1,f,c
  4385  0018F8  D000               	goto	l2407
  4386  0018FA                     l2407:
  4387  0018FA  C007  F001         	movff	___awdiv@quotient,?___awdiv
  4388  0018FE  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  4389  001902  0012               	return	
  4390  001904  0012               	return		;funcret
  4391  001906                     __end_of___awdiv:
  4392                           	opt stack 0
  4393                           tblptru	equ	0xFF8
  4394                           tblptrh	equ	0xFF7
  4395                           tblptrl	equ	0xFF6
  4396                           tablat	equ	0xFF5
  4397                           prodh	equ	0xFF4
  4398                           prodl	equ	0xFF3
  4399                           indf0	equ	0xFEF
  4400                           postinc0	equ	0xFEE
  4401                           fsr0h	equ	0xFEA
  4402                           fsr0l	equ	0xFE9
  4403                           wreg	equ	0xFE8
  4404                           postdec1	equ	0xFE5
  4405                           fsr1l	equ	0xFE1
  4406                           indf2	equ	0xFDF
  4407                           postinc2	equ	0xFDE
  4408                           postdec2	equ	0xFDD
  4409                           fsr2h	equ	0xFDA
  4410                           fsr2l	equ	0xFD9
  4411                           status	equ	0xFD8
  4412                           
  4413 ;; *************** function _RtccWriteTime *****************
  4414 ;; Defined at:
  4415 ;;		line 34 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteTime.c"
  4416 ;; Parameters:    Size  Location     Type
  4417 ;;  pTm             2    0[COMRAM] PTR const struct .
  4418 ;;		 -> RtccTime(4), 
  4419 ;;  di              1    2[COMRAM] enum E7121
  4420 ;; Auto vars:     Size  Location     Type
  4421 ;;  tempHourWDay    2    9[COMRAM] struct .
  4422 ;;  tempMinSec      2    7[COMRAM] struct .
  4423 ;;  wasWrEn         1    6[COMRAM] enum E7121
  4424 ;;  wasAlrm         1    5[COMRAM] enum E7121
  4425 ;;  wasOn           1    4[COMRAM] enum E7121
  4426 ;; Return value:  Size  Location     Type
  4427 ;;                  1    wreg      enum E7121
  4428 ;; Registers used:
  4429 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4430 ;; Tracked objects:
  4431 ;;		On entry : 0/0
  4432 ;;		On exit  : 0/0
  4433 ;;		Unchanged: 0/0
  4434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4435 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4436 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4437 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4438 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4439 ;;Total ram usage:       11 bytes
  4440 ;; Hardware stack levels used:    1
  4441 ;; Hardware stack levels required when called:    1
  4442 ;; This function calls:
  4443 ;;		_RtccWrOn
  4444 ;; This function is called by:
  4445 ;;		_Write_RTC
  4446 ;; This function uses a non-reentrant model
  4447 ;;
  4448                           
  4449                           	psect	text26
  4450  001764                     __ptext26:
  4451                           	opt stack 0
  4452  001764                     _RtccWriteTime:
  4453                           	opt stack 27
  4454                           
  4455                           ;incstack = 0
  4456  001764  0E00               	movlw	0
  4457  001766  6E06               	movwf	RtccWriteTime@wasAlrm,c
  4458  001768  EE20 F002          	lfsr	2,2
  4459  00176C  5001               	movf	RtccWriteTime@pTm,w,c
  4460  00176E  26D9               	addwf	fsr2l,f,c
  4461  001770  5002               	movf	RtccWriteTime@pTm+1,w,c
  4462  001772  22DA               	addwfc	fsr2h,f,c
  4463  001774  0E5A               	movlw	90
  4464  001776  60DF               	cpfslt	indf2,c
  4465  001778  0012               	return	
  4466  00177A  EE20 F001          	lfsr	2,1
  4467  00177E  5001               	movf	RtccWriteTime@pTm,w,c
  4468  001780  26D9               	addwf	fsr2l,f,c
  4469  001782  5002               	movf	RtccWriteTime@pTm+1,w,c
  4470  001784  22DA               	addwfc	fsr2h,f,c
  4471  001786  0E5A               	movlw	90
  4472  001788  60DF               	cpfslt	indf2,c
  4473  00178A  0012               	return	
  4474  00178C  EE20 F003          	lfsr	2,3
  4475  001790  5001               	movf	RtccWriteTime@pTm,w,c
  4476  001792  26D9               	addwf	fsr2l,f,c
  4477  001794  5002               	movf	RtccWriteTime@pTm+1,w,c
  4478  001796  22DA               	addwfc	fsr2h,f,c
  4479  001798  0E24               	movlw	36
  4480  00179A  64DF               	cpfsgt	indf2,c
  4481  00179C  D002               	goto	l2513
  4482  00179E  0012               	return	
  4483                           
  4484                           ;	Return value of _RtccWriteTime is never used
  4485  0017A0  0012               	return	
  4486  0017A2                     l2513:
  4487  0017A2  EE20 F002          	lfsr	2,2
  4488  0017A6  5001               	movf	RtccWriteTime@pTm,w,c
  4489  0017A8  26D9               	addwf	fsr2l,f,c
  4490  0017AA  5002               	movf	RtccWriteTime@pTm+1,w,c
  4491  0017AC  22DA               	addwfc	fsr2h,f,c
  4492  0017AE  50DF               	movf	indf2,w,c
  4493  0017B0  6E09               	movwf	RtccWriteTime@tempMinSec+1,c
  4494  0017B2  EE20 F001          	lfsr	2,1
  4495  0017B6  5001               	movf	RtccWriteTime@pTm,w,c
  4496  0017B8  26D9               	addwf	fsr2l,f,c
  4497  0017BA  5002               	movf	RtccWriteTime@pTm+1,w,c
  4498  0017BC  22DA               	addwfc	fsr2h,f,c
  4499  0017BE  50DF               	movf	indf2,w,c
  4500  0017C0  6E08               	movwf	RtccWriteTime@tempMinSec,c
  4501  0017C2  5003               	movf	RtccWriteTime@di,w,c
  4502  0017C4  B4D8               	btfsc	status,2,c
  4503  0017C6  D002               	goto	l2519
  4504  0017C8  9CF2               	bcf	intcon,6,c	;volatile
  4505  0017CA  D000               	goto	l2519
  4506  0017CC                     l2519:
  4507  0017CC  0E00               	movlw	0
  4508  0017CE  BB3F               	btfsc	63,5,b	;volatile
  4509  0017D0  0E01               	movlw	1
  4510  0017D2  6E07               	movwf	RtccWriteTime@wasWrEn,c
  4511  0017D4  5007               	movf	RtccWriteTime@wasWrEn,w,c
  4512  0017D6  A4D8               	btfss	status,2,c
  4513  0017D8  D003               	goto	l2523
  4514  0017DA  EC76  F00F         	call	_RtccWrOn	;wreg free
  4515  0017DE  D000               	goto	l2523
  4516  0017E0                     l2523:
  4517  0017E0  0E00               	movlw	0
  4518  0017E2  BF3F               	btfsc	63,7,b	;volatile
  4519  0017E4  0E01               	movlw	1
  4520  0017E6  6E05               	movwf	RtccWriteTime@wasOn,c
  4521  0017E8  5005               	movf	RtccWriteTime@wasOn,w,c
  4522  0017EA  B4D8               	btfsc	status,2,c
  4523  0017EC  D007               	goto	l2529
  4524  0017EE  0E00               	movlw	0
  4525  0017F0  BE91               	btfsc	3985,7,c	;volatile
  4526  0017F2  0E01               	movlw	1
  4527  0017F4  6E06               	movwf	RtccWriteTime@wasAlrm,c
  4528  0017F6  010F               	movlb	15	; () banked
  4529  0017F8  9F3F               	bcf	63,7,b	;volatile
  4530  0017FA  D000               	goto	l2529
  4531  0017FC                     l2529:
  4532  0017FC  0EFC               	movlw	252
  4533  0017FE  010F               	movlb	15	; () banked
  4534  001800  173F               	andwf	63,f,b	;volatile
  4535  001802  010F               	movlb	15	; () banked
  4536  001804  813F               	bsf	63,0,b	;volatile
  4537                           
  4538                           ; BSR set to: 15
  4539  001806  CF98 F00A          	movff	3992,RtccWriteTime@tempHourWDay	;volatile
  4540                           
  4541                           ; BSR set to: 15
  4542  00180A  CF99 F00B          	movff	3993,RtccWriteTime@tempHourWDay+1	;volatile
  4543                           
  4544                           ; BSR set to: 15
  4545  00180E  EE20 F003          	lfsr	2,3
  4546  001812  5001               	movf	RtccWriteTime@pTm,w,c
  4547  001814  26D9               	addwf	fsr2l,f,c
  4548  001816  5002               	movf	RtccWriteTime@pTm+1,w,c
  4549  001818  22DA               	addwfc	fsr2h,f,c
  4550  00181A  50DF               	movf	indf2,w,c
  4551  00181C  6E0A               	movwf	RtccWriteTime@tempHourWDay,c
  4552                           
  4553                           ; BSR set to: 15
  4554  00181E  0EFC               	movlw	252
  4555  001820  010F               	movlb	15	; () banked
  4556  001822  173F               	andwf	63,f,b	;volatile
  4557                           
  4558                           ; BSR set to: 15
  4559  001824  010F               	movlb	15	; () banked
  4560  001826  813F               	bsf	63,0,b	;volatile
  4561                           
  4562                           ; BSR set to: 15
  4563  001828  C00A  FF98         	movff	RtccWriteTime@tempHourWDay,3992	;volatile
  4564                           
  4565                           ; BSR set to: 15
  4566  00182C  C00B  FF99         	movff	RtccWriteTime@tempHourWDay+1,3993	;volatile
  4567                           
  4568                           ; BSR set to: 15
  4569  001830  C008  FF98         	movff	RtccWriteTime@tempMinSec,3992	;volatile
  4570                           
  4571                           ; BSR set to: 15
  4572  001834  C009  FF99         	movff	RtccWriteTime@tempMinSec+1,3993	;volatile
  4573                           
  4574                           ; BSR set to: 15
  4575  001838  5005               	movf	RtccWriteTime@wasOn,w,c
  4576  00183A  B4D8               	btfsc	status,2,c
  4577  00183C  D00D               	goto	l2561
  4578                           
  4579                           ; BSR set to: 15
  4580  00183E  010F               	movlb	15	; () banked
  4581  001840  8F3F               	bsf	63,7,b	;volatile
  4582                           
  4583                           ; BSR set to: 15
  4584  001842  5006               	movf	RtccWriteTime@wasAlrm,w,c
  4585  001844  B4D8               	btfsc	status,2,c
  4586  001846  D002               	goto	l2557
  4587                           
  4588                           ; BSR set to: 15
  4589  001848  8E91               	bsf	3985,7,c	;volatile
  4590  00184A  D000               	goto	l2557
  4591  00184C                     l2557:
  4592                           
  4593                           ; BSR set to: 15
  4594  00184C  5007               	movf	RtccWriteTime@wasWrEn,w,c
  4595  00184E  B4D8               	btfsc	status,2,c
  4596  001850  D009               	goto	l2565
  4597                           
  4598                           ; BSR set to: 15
  4599  001852  EC76  F00F         	call	_RtccWrOn	;wreg free
  4600  001856  D006               	goto	l2565
  4601  001858                     l2561:
  4602  001858  5007               	movf	RtccWriteTime@wasWrEn,w,c
  4603  00185A  A4D8               	btfss	status,2,c
  4604  00185C  D003               	goto	l2565
  4605  00185E  010F               	movlb	15	; () banked
  4606  001860  9B3F               	bcf	63,5,b	;volatile
  4607                           
  4608                           ; BSR set to: 15
  4609  001862  D000               	goto	l2565
  4610  001864                     l2565:
  4611  001864  5003               	movf	RtccWriteTime@di,w,c
  4612  001866  B4D8               	btfsc	status,2,c
  4613  001868  0012               	return	
  4614  00186A  8CF2               	bsf	intcon,6,c	;volatile
  4615  00186C  0012               	return	
  4616                           
  4617                           ;	Return value of _RtccWriteTime is never used
  4618  00186E  0012               	return		;funcret
  4619  001870                     __end_of_RtccWriteTime:
  4620                           	opt stack 0
  4621                           tblptru	equ	0xFF8
  4622                           tblptrh	equ	0xFF7
  4623                           tblptrl	equ	0xFF6
  4624                           tablat	equ	0xFF5
  4625                           prodh	equ	0xFF4
  4626                           prodl	equ	0xFF3
  4627                           intcon	equ	0xFF2
  4628                           indf0	equ	0xFEF
  4629                           postinc0	equ	0xFEE
  4630                           fsr0h	equ	0xFEA
  4631                           fsr0l	equ	0xFE9
  4632                           wreg	equ	0xFE8
  4633                           postdec1	equ	0xFE5
  4634                           fsr1l	equ	0xFE1
  4635                           indf2	equ	0xFDF
  4636                           postinc2	equ	0xFDE
  4637                           postdec2	equ	0xFDD
  4638                           fsr2h	equ	0xFDA
  4639                           fsr2l	equ	0xFD9
  4640                           status	equ	0xFD8
  4641                           
  4642 ;; *************** function _RtccWriteDate *****************
  4643 ;; Defined at:
  4644 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteDate.c"
  4645 ;; Parameters:    Size  Location     Type
  4646 ;;  pDt             2    0[COMRAM] PTR const struct .
  4647 ;;		 -> RtccDate(4), 
  4648 ;;  di              1    2[COMRAM] enum E7121
  4649 ;; Auto vars:     Size  Location     Type
  4650 ;;  tempHourWDay    2   11[COMRAM] struct .
  4651 ;;  tempDayMonth    2    9[COMRAM] struct .
  4652 ;;  tempYear        2    6[COMRAM] struct .
  4653 ;;  wasWrEn         1    8[COMRAM] enum E7121
  4654 ;;  wasAlrm         1    5[COMRAM] enum E7121
  4655 ;;  wasOn           1    4[COMRAM] enum E7121
  4656 ;; Return value:  Size  Location     Type
  4657 ;;                  1    wreg      enum E7121
  4658 ;; Registers used:
  4659 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4660 ;; Tracked objects:
  4661 ;;		On entry : 0/0
  4662 ;;		On exit  : 0/0
  4663 ;;		Unchanged: 0/0
  4664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4665 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4666 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4667 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4668 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4669 ;;Total ram usage:       13 bytes
  4670 ;; Hardware stack levels used:    1
  4671 ;; Hardware stack levels required when called:    1
  4672 ;; This function calls:
  4673 ;;		_RtccWrOn
  4674 ;; This function is called by:
  4675 ;;		_Write_RTC
  4676 ;; This function uses a non-reentrant model
  4677 ;;
  4678                           
  4679                           	psect	text27
  4680  00161E                     __ptext27:
  4681                           	opt stack 0
  4682  00161E                     _RtccWriteDate:
  4683                           	opt stack 27
  4684                           
  4685                           ;incstack = 0
  4686  00161E  0E00               	movlw	0
  4687  001620  6E06               	movwf	RtccWriteDate@wasAlrm,c
  4688  001622  EE20 F002          	lfsr	2,2
  4689  001626  5001               	movf	RtccWriteDate@pDt,w,c
  4690  001628  26D9               	addwf	fsr2l,f,c
  4691  00162A  5002               	movf	RtccWriteDate@pDt+1,w,c
  4692  00162C  22DA               	addwfc	fsr2h,f,c
  4693  00162E  0E13               	movlw	19
  4694  001630  60DF               	cpfslt	indf2,c
  4695  001632  0012               	return	
  4696  001634  EE20 F002          	lfsr	2,2
  4697  001638  5001               	movf	RtccWriteDate@pDt,w,c
  4698  00163A  26D9               	addwf	fsr2l,f,c
  4699  00163C  5002               	movf	RtccWriteDate@pDt+1,w,c
  4700  00163E  22DA               	addwfc	fsr2h,f,c
  4701  001640  50DF               	movf	indf2,w,c
  4702  001642  B4D8               	btfsc	status,2,c
  4703  001644  0012               	return	
  4704  001646  EE20 F001          	lfsr	2,1
  4705  00164A  5001               	movf	RtccWriteDate@pDt,w,c
  4706  00164C  26D9               	addwf	fsr2l,f,c
  4707  00164E  5002               	movf	RtccWriteDate@pDt+1,w,c
  4708  001650  22DA               	addwfc	fsr2h,f,c
  4709  001652  0E32               	movlw	50
  4710  001654  60DF               	cpfslt	indf2,c
  4711  001656  0012               	return	
  4712  001658  EE20 F001          	lfsr	2,1
  4713  00165C  5001               	movf	RtccWriteDate@pDt,w,c
  4714  00165E  26D9               	addwf	fsr2l,f,c
  4715  001660  5002               	movf	RtccWriteDate@pDt+1,w,c
  4716  001662  22DA               	addwfc	fsr2h,f,c
  4717  001664  50DF               	movf	indf2,w,c
  4718  001666  B4D8               	btfsc	status,2,c
  4719  001668  0012               	return	
  4720  00166A  EE20 F003          	lfsr	2,3
  4721  00166E  5001               	movf	RtccWriteDate@pDt,w,c
  4722  001670  26D9               	addwf	fsr2l,f,c
  4723  001672  5002               	movf	RtccWriteDate@pDt+1,w,c
  4724  001674  22DA               	addwfc	fsr2h,f,c
  4725  001676  0E99               	movlw	153
  4726  001678  64DF               	cpfsgt	indf2,c
  4727  00167A  D002               	goto	l2581
  4728  00167C  0012               	return	
  4729                           
  4730                           ;	Return value of _RtccWriteDate is never used
  4731  00167E  0012               	return	
  4732  001680                     l2581:
  4733  001680  EE20 F003          	lfsr	2,3
  4734  001684  5001               	movf	RtccWriteDate@pDt,w,c
  4735  001686  26D9               	addwf	fsr2l,f,c
  4736  001688  5002               	movf	RtccWriteDate@pDt+1,w,c
  4737  00168A  22DA               	addwfc	fsr2h,f,c
  4738  00168C  50DF               	movf	indf2,w,c
  4739  00168E  6E07               	movwf	RtccWriteDate@tempYear,c
  4740  001690  EE20 F001          	lfsr	2,1
  4741  001694  5001               	movf	RtccWriteDate@pDt,w,c
  4742  001696  26D9               	addwf	fsr2l,f,c
  4743  001698  5002               	movf	RtccWriteDate@pDt+1,w,c
  4744  00169A  22DA               	addwfc	fsr2h,f,c
  4745  00169C  50DF               	movf	indf2,w,c
  4746  00169E  6E0A               	movwf	RtccWriteDate@tempDayMonth,c
  4747  0016A0  EE20 F002          	lfsr	2,2
  4748  0016A4  5001               	movf	RtccWriteDate@pDt,w,c
  4749  0016A6  26D9               	addwf	fsr2l,f,c
  4750  0016A8  5002               	movf	RtccWriteDate@pDt+1,w,c
  4751  0016AA  22DA               	addwfc	fsr2h,f,c
  4752  0016AC  50DF               	movf	indf2,w,c
  4753  0016AE  6E0B               	movwf	RtccWriteDate@tempDayMonth+1,c
  4754  0016B0  5003               	movf	RtccWriteDate@di,w,c
  4755  0016B2  B4D8               	btfsc	status,2,c
  4756  0016B4  D002               	goto	l2587
  4757  0016B6  9CF2               	bcf	intcon,6,c	;volatile
  4758  0016B8  D000               	goto	l2587
  4759  0016BA                     l2587:
  4760  0016BA  0E00               	movlw	0
  4761  0016BC  BB3F               	btfsc	63,5,b	;volatile
  4762  0016BE  0E01               	movlw	1
  4763  0016C0  6E09               	movwf	RtccWriteDate@wasWrEn,c
  4764  0016C2  5009               	movf	RtccWriteDate@wasWrEn,w,c
  4765  0016C4  A4D8               	btfss	status,2,c
  4766  0016C6  D003               	goto	l2591
  4767  0016C8  EC76  F00F         	call	_RtccWrOn	;wreg free
  4768  0016CC  D000               	goto	l2591
  4769  0016CE                     l2591:
  4770  0016CE  0E00               	movlw	0
  4771  0016D0  BF3F               	btfsc	63,7,b	;volatile
  4772  0016D2  0E01               	movlw	1
  4773  0016D4  6E05               	movwf	RtccWriteDate@wasOn,c
  4774  0016D6  5005               	movf	RtccWriteDate@wasOn,w,c
  4775  0016D8  B4D8               	btfsc	status,2,c
  4776  0016DA  D007               	goto	l2597
  4777  0016DC  0E00               	movlw	0
  4778  0016DE  BE91               	btfsc	3985,7,c	;volatile
  4779  0016E0  0E01               	movlw	1
  4780  0016E2  6E06               	movwf	RtccWriteDate@wasAlrm,c
  4781  0016E4  010F               	movlb	15	; () banked
  4782  0016E6  9F3F               	bcf	63,7,b	;volatile
  4783  0016E8  D000               	goto	l2597
  4784  0016EA                     l2597:
  4785  0016EA  0EFC               	movlw	252
  4786  0016EC  010F               	movlb	15	; () banked
  4787  0016EE  173F               	andwf	63,f,b	;volatile
  4788  0016F0  010F               	movlb	15	; () banked
  4789  0016F2  813F               	bsf	63,0,b	;volatile
  4790                           
  4791                           ; BSR set to: 15
  4792  0016F4  CF98 F00C          	movff	3992,RtccWriteDate@tempHourWDay	;volatile
  4793                           
  4794                           ; BSR set to: 15
  4795  0016F8  CF99 F00D          	movff	3993,RtccWriteDate@tempHourWDay+1	;volatile
  4796                           
  4797                           ; BSR set to: 15
  4798  0016FC  C001  FFD9         	movff	RtccWriteDate@pDt,fsr2l
  4799  001700  C002  FFDA         	movff	RtccWriteDate@pDt+1,fsr2h
  4800  001704  50DF               	movf	indf2,w,c
  4801  001706  6E0D               	movwf	RtccWriteDate@tempHourWDay+1,c
  4802                           
  4803                           ; BSR set to: 15
  4804  001708  0EFC               	movlw	252
  4805  00170A  010F               	movlb	15	; () banked
  4806  00170C  173F               	andwf	63,f,b	;volatile
  4807                           
  4808                           ; BSR set to: 15
  4809  00170E  0E03               	movlw	3
  4810  001710  010F               	movlb	15	; () banked
  4811  001712  133F               	iorwf	63,f,b	;volatile
  4812                           
  4813                           ; BSR set to: 15
  4814  001714  C007  FF98         	movff	RtccWriteDate@tempYear,3992	;volatile
  4815                           
  4816                           ; BSR set to: 15
  4817  001718  C008  FF99         	movff	RtccWriteDate@tempYear+1,3993	;volatile
  4818                           
  4819                           ; BSR set to: 15
  4820  00171C  C00A  FF98         	movff	RtccWriteDate@tempDayMonth,3992	;volatile
  4821                           
  4822                           ; BSR set to: 15
  4823  001720  C00B  FF99         	movff	RtccWriteDate@tempDayMonth+1,3993	;volatile
  4824                           
  4825                           ; BSR set to: 15
  4826  001724  C00C  FF98         	movff	RtccWriteDate@tempHourWDay,3992	;volatile
  4827                           
  4828                           ; BSR set to: 15
  4829  001728  C00D  FF99         	movff	RtccWriteDate@tempHourWDay+1,3993	;volatile
  4830                           
  4831                           ; BSR set to: 15
  4832  00172C  5005               	movf	RtccWriteDate@wasOn,w,c
  4833  00172E  B4D8               	btfsc	status,2,c
  4834  001730  D00D               	goto	l2633
  4835                           
  4836                           ; BSR set to: 15
  4837  001732  010F               	movlb	15	; () banked
  4838  001734  8F3F               	bsf	63,7,b	;volatile
  4839                           
  4840                           ; BSR set to: 15
  4841  001736  5006               	movf	RtccWriteDate@wasAlrm,w,c
  4842  001738  B4D8               	btfsc	status,2,c
  4843  00173A  D002               	goto	l2629
  4844                           
  4845                           ; BSR set to: 15
  4846  00173C  8E91               	bsf	3985,7,c	;volatile
  4847  00173E  D000               	goto	l2629
  4848  001740                     l2629:
  4849                           
  4850                           ; BSR set to: 15
  4851  001740  5009               	movf	RtccWriteDate@wasWrEn,w,c
  4852  001742  B4D8               	btfsc	status,2,c
  4853  001744  D009               	goto	l2637
  4854                           
  4855                           ; BSR set to: 15
  4856  001746  EC76  F00F         	call	_RtccWrOn	;wreg free
  4857  00174A  D006               	goto	l2637
  4858  00174C                     l2633:
  4859  00174C  5009               	movf	RtccWriteDate@wasWrEn,w,c
  4860  00174E  A4D8               	btfss	status,2,c
  4861  001750  D003               	goto	l2637
  4862  001752  010F               	movlb	15	; () banked
  4863  001754  9B3F               	bcf	63,5,b	;volatile
  4864                           
  4865                           ; BSR set to: 15
  4866  001756  D000               	goto	l2637
  4867  001758                     l2637:
  4868  001758  5003               	movf	RtccWriteDate@di,w,c
  4869  00175A  B4D8               	btfsc	status,2,c
  4870  00175C  0012               	return	
  4871  00175E  9CF2               	bcf	intcon,6,c	;volatile
  4872  001760  0012               	return	
  4873                           
  4874                           ;	Return value of _RtccWriteDate is never used
  4875  001762  0012               	return		;funcret
  4876  001764                     __end_of_RtccWriteDate:
  4877                           	opt stack 0
  4878                           tblptru	equ	0xFF8
  4879                           tblptrh	equ	0xFF7
  4880                           tblptrl	equ	0xFF6
  4881                           tablat	equ	0xFF5
  4882                           prodh	equ	0xFF4
  4883                           prodl	equ	0xFF3
  4884                           intcon	equ	0xFF2
  4885                           indf0	equ	0xFEF
  4886                           postinc0	equ	0xFEE
  4887                           fsr0h	equ	0xFEA
  4888                           fsr0l	equ	0xFE9
  4889                           wreg	equ	0xFE8
  4890                           postdec1	equ	0xFE5
  4891                           fsr1l	equ	0xFE1
  4892                           indf2	equ	0xFDF
  4893                           postinc2	equ	0xFDE
  4894                           postdec2	equ	0xFDD
  4895                           fsr2h	equ	0xFDA
  4896                           fsr2l	equ	0xFD9
  4897                           status	equ	0xFD8
  4898                           
  4899 ;; *************** function _RtccWrOn *****************
  4900 ;; Defined at:
  4901 ;;		line 21 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWrOn.c"
  4902 ;; Parameters:    Size  Location     Type
  4903 ;;		None
  4904 ;; Auto vars:     Size  Location     Type
  4905 ;;  data            2    0        unsigned int 
  4906 ;; Return value:  Size  Location     Type
  4907 ;;		None               void
  4908 ;; Registers used:
  4909 ;;		wreg, status,2
  4910 ;; Tracked objects:
  4911 ;;		On entry : 0/0
  4912 ;;		On exit  : 0/0
  4913 ;;		Unchanged: 0/0
  4914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4918 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4919 ;;Total ram usage:        0 bytes
  4920 ;; Hardware stack levels used:    1
  4921 ;; This function calls:
  4922 ;;		Nothing
  4923 ;; This function is called by:
  4924 ;;		_Write_RTC
  4925 ;;		_RtccWriteDate
  4926 ;;		_RtccWriteTime
  4927 ;; This function uses a non-reentrant model
  4928 ;;
  4929                           
  4930                           	psect	text28
  4931  001EEC                     __ptext28:
  4932                           	opt stack 0
  4933  001EEC                     _RtccWrOn:
  4934                           	opt stack 27
  4935                           
  4936                           ;incstack = 0
  4937  001EEC  9CF2               	bcf	intcon,6,c	;volatile
  4938  001EEE  0E55               	movlw	85
  4939  001EF0  6EA7               	movwf	4007,c	;volatile
  4940  001EF2  0EAA               	movlw	170
  4941  001EF4  6EA7               	movwf	4007,c	;volatile
  4942  001EF6  010F               	movlb	15	; () banked
  4943  001EF8  8B3F               	bsf	63,5,b	;volatile
  4944                           
  4945                           ; BSR set to: 15
  4946  001EFA  8CF2               	bsf	intcon,6,c	;volatile
  4947                           
  4948                           ; BSR set to: 15
  4949  001EFC  0012               	return		;funcret
  4950  001EFE                     __end_of_RtccWrOn:
  4951                           	opt stack 0
  4952                           tblptru	equ	0xFF8
  4953                           tblptrh	equ	0xFF7
  4954                           tblptrl	equ	0xFF6
  4955                           tablat	equ	0xFF5
  4956                           prodh	equ	0xFF4
  4957                           prodl	equ	0xFF3
  4958                           intcon	equ	0xFF2
  4959                           indf0	equ	0xFEF
  4960                           postinc0	equ	0xFEE
  4961                           fsr0h	equ	0xFEA
  4962                           fsr0l	equ	0xFE9
  4963                           wreg	equ	0xFE8
  4964                           postdec1	equ	0xFE5
  4965                           fsr1l	equ	0xFE1
  4966                           indf2	equ	0xFDF
  4967                           postinc2	equ	0xFDE
  4968                           postdec2	equ	0xFDD
  4969                           fsr2h	equ	0xFDA
  4970                           fsr2l	equ	0xFD9
  4971                           status	equ	0xFD8
  4972                           tblptru	equ	0xFF8
  4973                           tblptrh	equ	0xFF7
  4974                           tblptrl	equ	0xFF6
  4975                           tablat	equ	0xFF5
  4976                           prodh	equ	0xFF4
  4977                           prodl	equ	0xFF3
  4978                           intcon	equ	0xFF2
  4979                           indf0	equ	0xFEF
  4980                           postinc0	equ	0xFEE
  4981                           fsr0h	equ	0xFEA
  4982                           fsr0l	equ	0xFE9
  4983                           wreg	equ	0xFE8
  4984                           postdec1	equ	0xFE5
  4985                           fsr1l	equ	0xFE1
  4986                           indf2	equ	0xFDF
  4987                           postinc2	equ	0xFDE
  4988                           postdec2	equ	0xFDD
  4989                           fsr2h	equ	0xFDA
  4990                           fsr2l	equ	0xFD9
  4991                           status	equ	0xFD8
  4992                           
  4993                           	psect	rparam
  4994  0000                     tblptru	equ	0xFF8
  4995                           tblptrh	equ	0xFF7
  4996                           tblptrl	equ	0xFF6
  4997                           tablat	equ	0xFF5
  4998                           prodh	equ	0xFF4
  4999                           prodl	equ	0xFF3
  5000                           intcon	equ	0xFF2
  5001                           indf0	equ	0xFEF
  5002                           postinc0	equ	0xFEE
  5003                           fsr0h	equ	0xFEA
  5004                           fsr0l	equ	0xFE9
  5005                           wreg	equ	0xFE8
  5006                           postdec1	equ	0xFE5
  5007                           fsr1l	equ	0xFE1
  5008                           indf2	equ	0xFDF
  5009                           postinc2	equ	0xFDE
  5010                           postdec2	equ	0xFDD
  5011                           fsr2h	equ	0xFDA
  5012                           fsr2l	equ	0xFD9
  5013                           status	equ	0xFD8


Data Sizes:
    Strings     132
    Constant    14
    Data        13
    BSS         71
    Persistent  13
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     39      93
    BANK0           160      0      44
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    RtccWriteTime@pTm	PTR const struct . size(2) Largest target is 4
		 -> RtccTime(COMRAM[4]), 

    RtccWriteDate@pDt	PTR const struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_21(CODE[10]), STR_20(CODE[15]), STR_17(CODE[5]), STR_14(CODE[5]), 
		 -> STR_13(CODE[5]), STR_12(CODE[5]), STR_10(CODE[5]), STR_9(CODE[5]), 
		 -> STR_8(CODE[5]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> buffer2(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    lcd_putrs@ptr	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_27(CODE[8]), STR_26(CODE[10]), STR_25(CODE[4]), STR_24(CODE[3]), 
		 -> STR_23(CODE[11]), STR_22(CODE[11]), STR_19(CODE[2]), STR_18(CODE[2]), 
		 -> STR_16(CODE[2]), STR_15(CODE[2]), STR_11(CODE[2]), STR_7(CODE[2]), 
		 -> buffer2(BANK0[20]), STR_3(CODE[10]), STR_2(CODE[13]), STR_1(CODE[33]), 


Critical Paths under _main in COMRAM

    _set_vision->_twinkle
    _write_Date->_sprintf
    _twinkle->_read_keyboard
    _read_keyboard->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcd_putrs->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    __delay_s->___awdiv
    _lcd_setcursor_vb->_lcd_send_byte
    _clear->_lcd_comand
    _caratula->_lcd_comand
    _lcd_init->_lcd_send_byte
    _lcd_comand->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _Write_RTC->_RtccWriteDate

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   45626
                                             37 COMRAM     2     2      0
                              _Setup
                           _caratula
                         _lcd_gotoxy
                          _lcd_putrs
                      _read_keyboard
                         _set_vision
 ---------------------------------------------------------------------------------
 (1) _set_vision                                           0     0      0   28795
                              _clear
                         _lcd_gotoxy
                          _lcd_putrs
                   _lcd_setcursor_vb
                            _twinkle
                         _write_Date
 ---------------------------------------------------------------------------------
 (2) _write_Date                                           0     0      0    8431
                         _lcd_gotoxy
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _twinkle                                              1     1      0   13687
                                             36 COMRAM     1     1      0
                           __delay_s
                         _lcd_gotoxy
                          _lcd_putrs
                      _read_keyboard
 ---------------------------------------------------------------------------------
 (3) _read_keyboard                                        1     1      0    7034
                                             35 COMRAM     1     1      0
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             32    22     10    3196
                                             12 COMRAM    23    13     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     287
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcd_putrs                                            2     0      2    3838
                                              8 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (4) _lcd_putc                                             1     1      0    2065
                                              7 COMRAM     1     1      0
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (5) _lcd_gotoxy                                           3     2      1    1397
                                              4 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (3) __delay_s                                             7     5      2    1394
                                              8 COMRAM     7     5      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _lcd_setcursor_vb                                     2     1      1     796
                                              4 COMRAM     2     1      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (2) _clear                                                1     1      0     646
                                              5 COMRAM     1     1      0
                         _lcd_comand
 ---------------------------------------------------------------------------------
 (1) _caratula                                             0     0      0     646
                         _lcd_comand
 ---------------------------------------------------------------------------------
 (1) _Setup                                                0     0      0    3892
                          _Write_RTC
                         _lcd_comand
                           _lcd_init
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             1     1      0     841
                                              4 COMRAM     1     1      0
                        _Delay1KTCYx
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _lcd_comand                                           1     1      0     646
                                              4 COMRAM     1     1      0
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (5) _lcd_send_byte                                        2     1      1     624
                                              2 COMRAM     2     1      1
                       _Delay100TCYx
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (6) _lcd_send_nibble                                      2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _Delay100TCYx                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Write_RTC                                            0     0      0    2405
                           _RtccWrOn
                      _RtccWriteDate
                      _RtccWriteTime
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1196
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _RtccWriteTime                                       11     8      3     537
                                              0 COMRAM    11     8      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (3) _RtccWriteDate                                       13    10      3     672
                                              0 COMRAM    13    10      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (4) _RtccWrOn                                             2     2      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Setup
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_init
       _Delay1KTCYx
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
       _lcd_send_nibble
   _caratula
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
   _lcd_gotoxy
     _lcd_send_byte
       _Delay100TCYx
       _lcd_send_nibble
   _lcd_putrs
     _lcd_putc
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
   _read_keyboard
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _set_vision
     _clear
       _lcd_comand
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _lcd_setcursor_vb
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _twinkle
       __delay_s
         ___awdiv
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _read_keyboard
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _write_Date
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      2C       5       27.5%
BITCOMRAM           5F      0       1       0        1.1%
COMRAM              5F     27      5D       1       97.9%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      89       6        0.0%
DATA                 0      0      89       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sun Sep 04 19:46:32 2016

                        _a 002C                          _b 002E                          _c 0030  
                        _i 0032                          _j 0034                          _k 0036  
              _state_alarm 005C                         l75 1E1A                         l76 1E1C  
           ?_lcd_send_byte 0003               ___awdiv@sign 0006        ___wmul@multiplicand 0003  
              lcd_comand@d 0005               __CFG_CP0$OFF 000000                        l201 0FD0  
                      l210 1034                        l202 0FCC                        l221 10C2  
                      l213 1052                        l205 1004                        l230 110C  
                      l222 10BE                        l214 104E                        l206 1000  
                      l241 11B4                        l233 114C                        l225 10F6  
                      l217 108E                        l209 1038                        l250 11EC  
                      l242 11B0                        l234 1148                        l226 10F2  
                      l218 108A                        l253 1224                        l245 11CE  
                      l237 1180                        l229 1110                        l262 1254  
                      l254 1220                        l246 11CA                        l238 117C  
                      l257 123E                        l249 11F0                        l258 123A  
                      l624 1444                        l569 1C70                        _dia 0052  
                      _key 003A                        _mes 0058                        wreg 000FE8  
              lcd_gotoxy@x 0006                lcd_gotoxy@y 0005                       l2201 1D2A  
                     l2203 1D36                       l2211 1D5A                       l2205 1D42  
                     l2221 1E94                       l2207 1D4E                       l2311 136E  
                     l2241 1BFA                       l2321 1396                       l2305 1346  
                     l2403 18EA                       l1268 1C24                       l2237 1BE8  
                     l2261 1CFA                       l2333 13E2                       l2325 13BA  
                     l2317 138A                       l2309 134C                       l1278 1D1C  
                     l2407 18FA                       l2167 1EDC                       l1703 1ECA  
                     l2271 1C88                       l2239 1BF2                       l2335 13EC  
                     l2513 17A2                       l2193 1E64                       l2249 1C18  
                     l2265 1D10                       l2257 1CE8                       l2353 144A  
                     l2345 141A                       l2329 13BE                       l2361 14AA  
                     l2523 17E0                       l2195 1E6A                       l2275 1CB2  
                     l2259 1CF2                       l2347 1422                       l2339 13F8  
                     l2363 14C6                       l2291 12AE                       l2381 1898  
                     l2293 12C4                       l2285 1296                       l2519 17CC  
                     l2391 18C0                       l2375 1886                       l2711 1934  
                     l2359 149E                       l2287 12A4                       l2279 127C  
                     l2633 174C                       l2561 1858                       l2529 17FC  
                     l2297 12E2                       l2801 19A8                       l2387 18AE  
                     l2707 192C                       l2811 19F2                       l2637 1758  
                     l2629 1740                       l2581 1680                       l2565 1864  
                     l2557 184C                       l2389 18B8                       l2725 1958  
                     l2717 1944                       l2591 16CE                       l2399 18DE  
                     l2647 1C5C                       l2751 1B78                       l2807 19E0  
                     l2817 1A8C                       l2587 16BA                       l2499 125C  
                     l2763 1BC4                       l2597 16EA                       l2799 199A  
                     STR_1 0F0F                       STR_2 0F3F                       STR_3 0F6B  
                     STR_4 0F7D                       STR_5 0F7D                       STR_6 0F7D  
                     STR_7 0F8D                       STR_8 0F7D                       STR_9 0F7D  
                     u1200 1B22                       u1220 1B3C                       u1240 1B58  
                     u1218 1B24                       u1180 1B0A                       u1238 1B3E  
                     u1360 1CA8                       u1258 1B5A                       u1370 1CD2  
                     u1198 1B0C                       u2407 1EDE                       u1367 1C9E  
                     u1377 1CC8                       u2357 1AEE                       u2367 1262  
                     u2377 1C62                       u2387 1EAA                       u2397 1ECC  
         ?_lcd_send_nibble 0001                       _anio 0050                       _flag 02E8  
                     _main 1A82                       _hora 0056                       fsr0h 000FEA  
                     indf0 000FEF                       fsr0l 000FE9                       fsr2h 000FDA  
                     fsr1l 000FE1                       indf2 000FDF                       fsr2l 000FD9  
            __CFG_T1DIG$ON 000000                       prodh 000FF4                       prodl 000FF3  
                     start 0000              __CFG_IESO$OFF 000000               ___param_bank 000010  
              _Delay1KTCYx 1EC8              __CFG_PLLDIV$1 000000                      ?_main 0001  
          __end_of___awdiv 1906                      STR_10 0F7D                      STR_11 0F8F  
                    STR_12 0F7D                      STR_20 0F30                      STR_13 0F7D  
                    STR_21 0F61                      STR_14 0F7D                      STR_22 0F4C  
                    STR_23 0F25                      STR_15 0F91                      STR_16 0F8B  
                    STR_24 0F86                      STR_17 0F7D                      STR_25 0F82  
                    STR_18 0F89                      STR_26 0F57                      STR_19 0F7B  
                    STR_27 0F75      __size_of_Delay100TCYx 0012            ___awdiv@divisor 0003  
          __end_of___lwdiv 1C2E            __end_of___lwmod 1D26            ___awdiv@counter 0005  
                    _TRISA 000F92                      _TRISB 000F93                      _TRISC 000F94  
           __CFG_FCMEN$OFF 000000                      _Setup 1D72                      _clear 1E9E  
          __end_of_dpowers 0F0B                      _mes_d 004A                      _mes_u 004B  
          __end_of_isdigit 1E9E             __pbitbssCOMRAM 02E8                      tablat 000FF5  
             lcd_putrs@ptr 0009                      status 000FD8            __end_of_sprintf 14D6  
          __end_of_twinkle 1BD2    __CFG_DSWDTOSC$INTOSCREF 000000            __initialization 1DBA  
             _Delay100TCYx 1EDA               __end_of_main 1AFE            ??_lcd_send_byte 0004  
                   ??_main 0026              __activetblptr 000002           __end_of_RtccWrOn 1EFE  
                   ?_Setup 0001                     ?_clear 0001                     _ADCON0 000FC2  
                   _ADCON1 000FC1                     _EECON2 000FA7                     _ANCON0 000F48  
                   _ANCON1 000F49           ___awdiv@dividend 0001           __end_of__delay_s 1C86  
           __CFG_WDTEN$OFF 000000           RtccWriteDate@pDt 0001                     _RTCCFG 000F3F  
           __CFG_WPCFG$OFF 000000           __end_of_caratula 1F22             __CFG_WPDIS$OFF 000000  
           __CFG_XINST$OFF 000000           __end_of_lcd_init 1986           __end_of_lcd_putc 1D72  
        ?_lcd_setcursor_vb 0005                     ___wmul 1E30                  ??___awdiv 0005  
           __CFG_STVREN$ON 000000                     _diasem 0054                     _anio_d 0043  
                   _anio_u 0044                  ??___lwdiv 0005                  ??___lwmod 000C  
       ??_lcd_setcursor_vb 0006                     _hora_d 0048                     _hora_u 0049  
                   clear_0 1DC0                     clear_1 1DCE           ___awdiv@quotient 0007  
                   _minuto 005A      __end_of_RtccWriteDate 1764      __end_of_RtccWriteTime 1870  
         RtccWriteTime@pTm 0001               __pdataCOMRAM 0050                  ??_isdigit 0001  
             __mediumconst 0000                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8                  ??_sprintf 0017                  ??_twinkle 0025  
   __size_of_read_keyboard 02DE                 __accesstop 0060    __end_of__initialization 1DF4  
       __size_of_Write_RTC 0148              ___rparam_used 000001             __pcstackCOMRAM 0001  
            __end_of_Setup 1DBA              __end_of_clear 1EB4            __CFG_DSWDTPS$G2 000000  
          __CFG_OSC$INTOSC 000000                    ??_Setup 000E          lcd_gotoxy@address 0007  
                  ??_clear 0006         __size_of_lcd_putrs 0054               sprintf@width 0021  
               __pbssBANK0 0060                 _dia_semana 0045  RtccWriteTime@tempHourWDay 000A  
               __pnvCOMRAM 0043                  ?_RtccWrOn 0001             lcd_send_byte@n 0003  
                  ?___wmul 0001              _read_keyboard 0F94               ?_Delay1KTCYx 0001  
                ?__delay_s 0009          __end_of_Write_RTC 161E             __delay_s@index 000E  
               _lcd_comand 1EFE                  ?_caratula 0001                 _lcd_gotoxy 1E58  
                  _RTCVALH 000F99                    _RTCVALL 000F98                  ?_lcd_init 0001  
                ?_lcd_putc 0001                    __Hparam 0000                    __Lparam 0000  
 __size_of_lcd_send_nibble 0076                 ??_RtccWrOn 0001                    ___awdiv 1870  
        __end_of_lcd_putrs 1CDA             ?_read_keyboard 0001            __size_of___wmul 0028  
                  ___lwdiv 1BD2                    ___lwmod 1CDA               __psmallconst 0F00  
              _RtccTimeVal 0028                    __pcinit 1DBA                    _fecha_d 0046  
                  _fecha_u 0047                    __ramtop 0F00                 ??__delay_s 000B  
                  __ptext0 1A82                    __ptext1 1986                    __ptext2 1A04  
                  __ptext3 1B74                    __ptext4 0F94                    __ptext5 1272  
                  __ptext6 1E7C                    __ptext7 1E30                    __ptext8 1CDA  
                  __ptext9 1BD2                    _buffer2 0078                  _T1CONbits 000FCD  
                  _dpowers 0F01                    _isdigit 1E7C                 ??_caratula 0006  
                  _segundo 0038                    _sprintf 1272                 ??_lcd_init 0005  
               ??_lcd_putc 0008                    _twinkle 1B74       end_of_initialization 1DF4  
     lcd_send_byte@address 0004              __Lmediumconst 0000               twinkle@input 0025  
                  postdec1 000FE5                    postdec2 000FDD                    postinc0 000FEE  
                  postinc2 000FDE                 _set_vision 1986      __end_of_lcd_send_byte 1E30  
                _PORTAbits 000F80                  _PORTCbits 000F82           __CFG_DSBOREN$OFF 000000  
              ?_lcd_comand 0001           __CFG_CPUDIV$OSC1 000000                  _TRISBbits 000F93  
              ?_lcd_gotoxy 0005  __size_of_lcd_setcursor_vb 0014            _LCD_INIT_STRING 0F0B  
         __CFG_IOL1WAY$OFF 000000  RtccWriteDate@tempDayMonth 000A        __CFG_MSSP7B_EN$MSK7 000000  
          ??_read_keyboard 0024           Delay100TCYx@unit 0001                 _write_Date 1A04  
              __delay_s@it 000C             __end_of___wmul 1E58              __pidataCOMRAM 1F0C  
RtccWriteDate@tempHourWDay 000C          ??_lcd_send_nibble 0001       __size_of_Delay1KTCYx 0012  
         __CFG_DSWDTEN$OFF 000000        start_initialization 1DBA       RtccWriteTime@wasAlrm 0006  
     RtccWriteTime@wasWrEn 0007     __size_of_RtccWriteDate 0146            RtccWriteDate@di 0003  
   __size_of_RtccWriteTime 010C        __size_of_lcd_comand 000E        __size_of_lcd_gotoxy 0024  
                 ??___wmul 0005                ?_set_vision 0001          __size_of_RtccWrOn 0012  
          RtccWriteTime@di 0003           __CFG_LPT1OSC$OFF 000000                _ALRMCFGbits 000F91  
  __end_of_LCD_INIT_STRING 0F0F          __size_of__delay_s 0058                __pbssCOMRAM 0028  
                _Write_RTC 14D6               _isdigit$2331 0002          __size_of_caratula 0008  
          Delay1KTCYx@unit 0001          __size_of_lcd_init 0080                sprintf@flag 001D  
        __size_of_lcd_putc 004C                sprintf@prec 0020           ___lwdiv@dividend 0001  
            ?_Delay100TCYx 0001                   ?___awdiv 0001                   ?___lwdiv 0001  
              ?_write_Date 0001                   ?___lwmod 0008    RtccWriteTime@tempMinSec 0008  
                _lcd_putrs 1C86    lcd_setcursor_vb@visible 0006              _RtccWriteDate 161E  
              __smallconst 0F00              _RtccWriteTime 1764                   ?_isdigit 0001  
     __CFG_RTCOSC$T1OSCREF 000000           _lcd_setcursor_vb 1EB4             __size_of_Setup 0048  
               ?_Write_RTC 0001           ___lwdiv@quotient 0005             __size_of_clear 0016  
                 ?_sprintf 000D                   ?_twinkle 0001        __size_of_set_vision 007E  
         _RtccAlrmTimeDate 0060             ___wmul@product 0005            __delay_s@millis 0009  
                 _LATAbits 000F89                   _LATBbits 000F8A                   _PIE3bits 000FA3  
                _segundo_d 004E             ??_Delay100TCYx 0001                  _segundo_u 004F  
         __CFG_WDTPS$32768 000000         RtccWriteDate@wasOn 0005         _Rtcc_read_TimeDate 0070  
           ?_RtccWriteDate 0001                 ?_lcd_putrs 0009          ___wmul@multiplier 0001  
           ?_RtccWriteTime 0001                  lcd_init@i 0005               ??_lcd_comand 0005  
                main@input 0027                  lcd_putc@c 0008               ??_lcd_gotoxy 0006  
                copy_data0 1DE8        __size_of_write_Date 007E            _lcd_send_nibble 1AFE  
                 __Hrparam 0000                   _RtccDate 003B                   __Lrparam 0000  
                 _RtccTime 003F                   _RtccWrOn 1EEC         __end_of_lcd_comand 1F0C  
       __end_of_lcd_gotoxy 1E7C           __size_of___awdiv 0096           __size_of___lwdiv 005C  
         __size_of___lwmod 004C                   __delay_s 1C2E               _RtccTimeDate 0068  
               sprintf@val 001E                   _caratula 1F1A           __size_of_isdigit 0022  
          ___lwdiv@divisor 0003                ??_Write_RTC 000E            ___lwdiv@counter 0007  
                 __ptext10 1C86                   __ptext11 1D26                   __ptext20 1EFE  
                 __ptext12 1E58                   __ptext21 1DFE                   __ptext13 1C2E  
                 __ptext22 1AFE                   __ptext14 1EB4                   __ptext23 1EDA  
                 __ptext15 1E9E                   __ptext24 14D6                   __ptext16 1F1A  
                 __ptext25 1870                   __ptext17 1D72                   __ptext26 1764  
                 __ptext18 1906                   __ptext27 161E                   __ptext19 1EC8  
                 __ptext28 1EEC                   _lcd_init 1906                   _lcd_putc 1D26  
         __size_of_sprintf 0264           __size_of_twinkle 005E     __size_of_lcd_send_byte 0032  
            __size_of_main 007C                   _minuto_d 004C                   _minuto_u 004D  
             ??_set_vision 0026      __end_of_read_keyboard 1272              ??_Delay1KTCYx 0001  
          ??_RtccWriteDate 0004            ??_RtccWriteTime 0004                ??_lcd_putrs 000B  
              _OSCTUNEbits 000F9B                 _INTCONbits 000FF2         RtccWriteTime@wasOn 0005  
     __end_of_Delay100TCYx 1EEC                   isdigit@c 0003                  sprintf@ap 001B  
  __end_of_lcd_send_nibble 1B74                  sprintf@sp 000D         __end_of_set_vision 1A04  
    lcd_setcursor_vb@blink 0005           ___lwmod@dividend 0008                 _OSCCONbits 000FD3  
 __end_of_lcd_setcursor_vb 1EC8      RtccWriteDate@tempYear 0007               ??_write_Date 0024  
            _lcd_send_byte 1DFE                 _RTCCFGbits 000F3F                   sprintf@c 0023  
                 sprintf@f 000F            ___lwmod@divisor 000A        __end_of_Delay1KTCYx 1EDA  
          ___lwmod@counter 000C       RtccWriteDate@wasAlrm 0006       RtccWriteDate@wasWrEn 0009  
       __end_of_write_Date 1A82      lcd_send_nibble@nibble 0002  
