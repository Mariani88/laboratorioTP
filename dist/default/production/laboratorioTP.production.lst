

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Sep 06 20:31:12 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    70                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    71  0000                     
    72                           	psect	idataCOMRAM
    73  0030CE                     __pidataCOMRAM:
    74                           	opt stack 0
    75                           
    76                           ;initializer for _mes
    77  0030CE  0009               	dw	9
    78                           
    79                           ;initializer for _key
    80  0030D0  12                 	db	18
    81                           
    82                           	psect	idataBANK0
    83  0030B2                     __pidataBANK0:
    84                           	opt stack 0
    85                           
    86                           ;initializer for _anio
    87  0030B2  000F               	dw	15
    88                           
    89                           ;initializer for _dia
    90  0030B4  0008               	dw	8
    91                           
    92                           ;initializer for _diasem
    93  0030B6  0003               	dw	3
    94                           
    95                           ;initializer for _hora
    96  0030B8  0012               	dw	18
    97                           
    98                           ;initializer for _minuto
    99  0030BA  001E               	dw	30
   100                           
   101                           ;initializer for _password
   102  0030BC  04D2               	dw	1234
   103                           
   104                           ;initializer for _state_alarm
   105  0030BE  01                 	db	1
   106                           
   107                           	psect	smallconst
   108  000F00                     __psmallconst:
   109                           	opt stack 0
   110  000F00  00                 	db	0
   111  000F01                     _dpowers:
   112                           	opt stack 0
   113  000F01  0001               	dw	1
   114  000F03  000A               	dw	10
   115  000F05  0064               	dw	100
   116  000F07  03E8               	dw	1000
   117  000F09  2710               	dw	10000
   118  000F0B                     __end_of_dpowers:
   119                           	opt stack 0
   120  000F0B                     _LCD_INIT_STRING:
   121                           	opt stack 0
   122  000F0B  28                 	db	40
   123  000F0C  0C                 	db	12
   124  000F0D  01                 	db	1
   125  000F0E  06                 	db	6
   126  000F0F                     __end_of_LCD_INIT_STRING:
   127                           	opt stack 0
   128  000F0F                     exp@coeff:
   129                           	opt stack 0
   130  000F0F  00                 	db	0
   131  000F10  80                 	db	128
   132  000F11  3F                 	db	63
   133  000F12  72                 	db	114
   134  000F13  31                 	db	49
   135  000F14  3F                 	db	63
   136  000F15  FE                 	db	254
   137  000F16  75                 	db	117
   138  000F17  3E                 	db	62
   139  000F18  58                 	db	88
   140  000F19  63                 	db	99
   141  000F1A  3D                 	db	61
   142  000F1B  95                 	db	149
   143  000F1C  1D                 	db	29
   144  000F1D  3C                 	db	60
   145  000F1E  C5                 	db	197
   146  000F1F  AE                 	db	174
   147  000F20  3A                 	db	58
   148  000F21  79                 	db	121
   149  000F22  21                 	db	33
   150  000F23  39                 	db	57
   151  000F24  94                 	db	148
   152  000F25  80                 	db	128
   153  000F26  37                 	db	55
   154  000F27  93                 	db	147
   155  000F28  A7                 	db	167
   156  000F29  35                 	db	53
   157  000F2A  56                 	db	86
   158  000F2B  15                 	db	21
   159  000F2C  34                 	db	52
   160  000F2D                     __end_ofexp@coeff:
   161                           	opt stack 0
   162  000F2D                     log@coeff:
   163                           	opt stack 0
   164  000F2D  00                 	db	0
   165  000F2E  00                 	db	0
   166  000F2F  00                 	db	0
   167  000F30  00                 	db	0
   168  000F31  80                 	db	128
   169  000F32  3F                 	db	63
   170  000F33  F0                 	db	240
   171  000F34  FF                 	db	255
   172  000F35  BE                 	db	190
   173  000F36  E2                 	db	226
   174  000F37  A9                 	db	169
   175  000F38  3E                 	db	62
   176  000F39  83                 	db	131
   177  000F3A  76                 	db	118
   178  000F3B  BE                 	db	190
   179  000F3C  AE                 	db	174
   180  000F3D  2B                 	db	43
   181  000F3E  3E                 	db	62
   182  000F3F  3C                 	db	60
   183  000F40  C3                 	db	195
   184  000F41  BD                 	db	189
   185  000F42  D2                 	db	210
   186  000F43  13                 	db	19
   187  000F44  3D                 	db	61
   188  000F45  78                 	db	120
   189  000F46  D3                 	db	211
   190  000F47  BB                 	db	187
   191  000F48                     __end_oflog@coeff:
   192                           	opt stack 0
   193  000F48                     STR_1:
   194                           
   195                           ; BSR set to: 15
   196  000F48  20                 	db	32
   197  000F49  20                 	db	32
   198  000F4A  20                 	db	32
   199  000F4B  20                 	db	32
   200  000F4C  20                 	db	32
   201  000F4D  20                 	db	32
   202  000F4E  20                 	db	32
   203  000F4F  20                 	db	32
   204  000F50  20                 	db	32
   205  000F51  20                 	db	32
   206  000F52  20                 	db	32
   207  000F53  20                 	db	32
   208  000F54  20                 	db	32
   209  000F55  20                 	db	32
   210  000F56  20                 	db	32
   211  000F57  20                 	db	32
   212  000F58  20                 	db	32
   213  000F59  20                 	db	32
   214  000F5A  20                 	db	32
   215  000F5B  20                 	db	32
   216  000F5C  20                 	db	32
   217  000F5D  20                 	db	32
   218  000F5E  20                 	db	32
   219  000F5F  20                 	db	32
   220  000F60  20                 	db	32
   221  000F61  20                 	db	32
   222  000F62  20                 	db	32
   223  000F63  20                 	db	32
   224  000F64  20                 	db	32
   225  000F65  20                 	db	32
   226  000F66  20                 	db	32
   227  000F67  20                 	db	32
   228  000F68  00                 	db	0
   229  000F69                     STR_14:
   230                           
   231                           ; BSR set to: 15
   232  000F69  25                 	db	37
   233  000F6A  30                 	db	48	;'0'
   234  000F6B  32                 	db	50	;'2'
   235  000F6C  75                 	db	117	;'u'
   236  000F6D  2F                 	db	47
   237  000F6E  25                 	db	37
   238  000F6F  30                 	db	48	;'0'
   239  000F70  32                 	db	50	;'2'
   240  000F71  75                 	db	117	;'u'
   241  000F72  2F                 	db	47
   242  000F73  25                 	db	37
   243  000F74  30                 	db	48	;'0'
   244  000F75  32                 	db	50	;'2'
   245  000F76  75                 	db	117	;'u'
   246  000F77  00                 	db	0
   247  000F78                     STR_2:
   248                           
   249                           ; BSR set to: 15
   250  000F78  6E                 	db	110	;'n'
   251  000F79  75                 	db	117	;'u'
   252  000F7A  6C                 	db	108	;'l'
   253  000F7B  6C                 	db	108	;'l'
   254  000F7C  20                 	db	32
   255  000F7D  70                 	db	112	;'p'
   256  000F7E  6F                 	db	111	;'o'
   257  000F7F  69                 	db	105	;'i'
   258  000F80  6E                 	db	110	;'n'
   259  000F81  74                 	db	116	;'t'
   260  000F82  65                 	db	101	;'e'
   261  000F83  72                 	db	114	;'r'
   262  000F84  00                 	db	0
   263  000F85                     STR_16:
   264                           
   265                           ; BSR set to: 15
   266  000F85  57                 	db	87	;'W'
   267  000F86  41                 	db	65	;'A'
   268  000F87  52                 	db	82	;'R'
   269  000F88  4E                 	db	78	;'N'
   270  000F89  49                 	db	73	;'I'
   271  000F8A  4E                 	db	78	;'N'
   272  000F8B  47                 	db	71	;'G'
   273  000F8C  21                 	db	33
   274  000F8D  21                 	db	33
   275  000F8E  21                 	db	33
   276  000F8F  00                 	db	0
   277  000F90                     STR_20:
   278                           
   279                           ; BSR set to: 15
   280  000F90  70                 	db	112	;'p'
   281  000F91  61                 	db	97	;'a'
   282  000F92  73                 	db	115	;'s'
   283  000F93  73                 	db	115	;'s'
   284  000F94  3A                 	db	58	;':'
   285  000F95  5F                 	db	95	;'_'
   286  000F96  5F                 	db	95	;'_'
   287  000F97  5F                 	db	95	;'_'
   288  000F98  5F                 	db	95	;'_'
   289  000F99  00                 	db	0
   290  000F9A                     STR_15:
   291                           
   292                           ; BSR set to: 15
   293  000F9A  25                 	db	37
   294  000F9B  30                 	db	48	;'0'
   295  000F9C  32                 	db	50	;'2'
   296  000F9D  75                 	db	117	;'u'
   297  000F9E  3A                 	db	58	;':'
   298  000F9F  25                 	db	37
   299  000FA0  30                 	db	48	;'0'
   300  000FA1  32                 	db	50	;'2'
   301  000FA2  75                 	db	117	;'u'
   302  000FA3  00                 	db	0
   303  000FA4                     STR_3:
   304                           
   305                           ; BSR set to: 15
   306  000FA4  65                 	db	101	;'e'
   307  000FA5  78                 	db	120	;'x'
   308  000FA6  63                 	db	99	;'c'
   309  000FA7  65                 	db	101	;'e'
   310  000FA8  70                 	db	112	;'p'
   311  000FA9  74                 	db	116	;'t'
   312  000FAA  69                 	db	105	;'i'
   313  000FAB  6F                 	db	111	;'o'
   314  000FAC  6E                 	db	110	;'n'
   315  000FAD  00                 	db	0
   316  000FAE                     STR_21:
   317                           
   318                           ; BSR set to: 15
   319  000FAE  54                 	db	84	;'T'
   320  000FAF  52                 	db	82	;'R'
   321  000FB0  49                 	db	73	;'I'
   322  000FB1  47                 	db	71	;'G'
   323  000FB2  47                 	db	71	;'G'
   324  000FB3  45                 	db	69	;'E'
   325  000FB4  44                 	db	68	;'D'
   326  000FB5  00                 	db	0
   327  000FB6                     STR_4:
   328                           
   329                           ; BSR set to: 15
   330  000FB6  25                 	db	37
   331  000FB7  30                 	db	48	;'0'
   332  000FB8  31                 	db	49	;'1'
   333  000FB9  75                 	db	117	;'u'
   334  000FBA  00                 	db	0
   335  000FBB                     STR_19:
   336                           
   337                           ; BSR set to: 15
   338  000FBB  4F                 	db	79	;'O'
   339  000FBC  46                 	db	70	;'F'
   340  000FBD  46                 	db	70	;'F'
   341  000FBE  00                 	db	0
   342  000FBF                     STR_18:
   343                           
   344                           ; BSR set to: 15
   345  000FBF  4F                 	db	79	;'O'
   346  000FC0  4E                 	db	78	;'N'
   347  000FC1  00                 	db	0
   348  0000                     
   349                           ; #config settings
   350  000FC2  00                 	db	0	; dummy byte at the end
   351  0000                     
   352                           	psect	nvBANK0
   353  0000BE                     __pnvBANK0:
   354                           	opt stack 0
   355  0000BE                     _anio_d:
   356                           	opt stack 0
   357  0000BE                     	ds	1
   358  0000BF                     _anio_u:
   359                           	opt stack 0
   360  0000BF                     	ds	1
   361  0000C0                     _dia_semana:
   362                           	opt stack 0
   363  0000C0                     	ds	1
   364  0000C1                     _fecha_d:
   365                           	opt stack 0
   366  0000C1                     	ds	1
   367  0000C2                     _fecha_u:
   368                           	opt stack 0
   369  0000C2                     	ds	1
   370  0000C3                     _hora_d:
   371                           	opt stack 0
   372  0000C3                     	ds	1
   373  0000C4                     _hora_u:
   374                           	opt stack 0
   375  0000C4                     	ds	1
   376  0000C5                     _mes_d:
   377                           	opt stack 0
   378  0000C5                     	ds	1
   379  0000C6                     _mes_u:
   380                           	opt stack 0
   381  0000C6                     	ds	1
   382  0000C7                     _minuto_d:
   383                           	opt stack 0
   384  0000C7                     	ds	1
   385  0000C8                     _minuto_u:
   386                           	opt stack 0
   387  0000C8                     	ds	1
   388  0000C9                     _segundo_d:
   389                           	opt stack 0
   390  0000C9                     	ds	1
   391  0000CA                     _segundo_u:
   392                           	opt stack 0
   393  0000CA                     	ds	1
   394  0000                     _ANCON0	set	3912
   395  0000                     _ANCON1	set	3913
   396  0000                     _RTCCFG	set	3903
   397  0000                     _RTCCFGbits	set	3903
   398  0000                     _ADCON0	set	4034
   399  0000                     _ADCON1	set	4033
   400  0000                     _ALRMCFGbits	set	3985
   401  0000                     _EECON2	set	4007
   402  0000                     _INTCONbits	set	4082
   403  0000                     _LATAbits	set	3977
   404  0000                     _LATBbits	set	3978
   405  0000                     _OSCCONbits	set	4051
   406  0000                     _OSCTUNEbits	set	3995
   407  0000                     _PIE3bits	set	4003
   408  0000                     _PORTAbits	set	3968
   409  0000                     _PORTCbits	set	3970
   410  0000                     _RTCVALH	set	3993
   411  0000                     _RTCVALL	set	3992
   412  0000                     _T1CONbits	set	4045
   413  0000                     _TRISA	set	3986
   414  0000                     _TRISB	set	3987
   415  0000                     _TRISBbits	set	3987
   416  0000                     _TRISC	set	3988
   417                           
   418                           	psect	cinit
   419  002CA4                     __pcinit:
   420                           	opt stack 0
   421  002CA4                     start_initialization:
   422                           	opt stack 0
   423  002CA4                     __initialization:
   424                           	opt stack 0
   425                           
   426                           ; Clear objects allocated to BANK0 (72 bytes)
   427  002CA4  EE00  F060         	lfsr	0,__pbssBANK0
   428  002CA8  0E48               	movlw	72
   429  002CAA                     clear_0:
   430  002CAA  6AEE               	clrf	postinc0,c
   431  002CAC  06E8               	decf	wreg,f,c
   432  002CAE  E1FD               	bnz	clear_0
   433                           
   434                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   435  002CB0  6A5F               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   436                           
   437                           ; Initialize objects allocated to BANK0 (13 bytes)
   438                           ; load TBLPTR registers with __pidataBANK0
   439  002CB2  0EB2               	movlw	low __pidataBANK0
   440  002CB4  6EF6               	movwf	tblptrl,c
   441  002CB6  0E30               	movlw	high __pidataBANK0
   442  002CB8  6EF7               	movwf	tblptrh,c
   443  002CBA  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   444  002CBC  6EF8               	movwf	tblptru,c
   445  002CBE  EE00  F0CB         	lfsr	0,__pdataBANK0
   446  002CC2  EE10 F00D          	lfsr	1,13
   447  002CC6                     copy_data0:
   448  002CC6  0009               	tblrd		*+
   449  002CC8  CFF5 FFEE          	movff	tablat,postinc0
   450  002CCC  50E5               	movf	postdec1,w,c
   451  002CCE  50E1               	movf	fsr1l,w,c
   452  002CD0  E1FA               	bnz	copy_data0
   453                           
   454                           ; Initialize objects allocated to COMRAM (3 bytes)
   455                           ; load TBLPTR registers with __pidataCOMRAM
   456  002CD2  0ECE               	movlw	low __pidataCOMRAM
   457  002CD4  6EF6               	movwf	tblptrl,c
   458  002CD6  0E30               	movlw	high __pidataCOMRAM
   459  002CD8  6EF7               	movwf	tblptrh,c
   460  002CDA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   461  002CDC  6EF8               	movwf	tblptru,c
   462  002CDE  0009               	tblrd		*+	;fetch initializer
   463  002CE0  CFF5 F05C          	movff	tablat,__pdataCOMRAM
   464  002CE4  0009               	tblrd		*+	;fetch initializer
   465  002CE6  CFF5 F05D          	movff	tablat,__pdataCOMRAM+1
   466  002CEA  0009               	tblrd		*+	;fetch initializer
   467  002CEC  CFF5 F05E          	movff	tablat,__pdataCOMRAM+2
   468  002CF0                     end_of_initialization:
   469                           	opt stack 0
   470  002CF0                     __end_of__initialization:
   471                           	opt stack 0
   472  002CF0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   473  002CF2  6EF8               	movwf	tblptru,c
   474  002CF4  0100               	movlb	0
   475  002CF6  EFE1  F014         	goto	_main	;jump to C main() function
   476                           tblptru	equ	0xFF8
   477                           tblptrh	equ	0xFF7
   478                           tblptrl	equ	0xFF6
   479                           tablat	equ	0xFF5
   480                           postinc0	equ	0xFEE
   481                           wreg	equ	0xFE8
   482                           postdec1	equ	0xFE5
   483                           fsr1l	equ	0xFE1
   484                           
   485                           	psect	bitbssCOMRAM
   486  0002F8                     __pbitbssCOMRAM:
   487                           	opt stack 0
   488  0002F8                     _flag:
   489                           	opt stack 0
   490  0002F8                     	ds	1
   491                           tblptru	equ	0xFF8
   492                           tblptrh	equ	0xFF7
   493                           tblptrl	equ	0xFF6
   494                           tablat	equ	0xFF5
   495                           postinc0	equ	0xFEE
   496                           wreg	equ	0xFE8
   497                           postdec1	equ	0xFE5
   498                           fsr1l	equ	0xFE1
   499                           
   500                           	psect	dataCOMRAM
   501  00005C                     __pdataCOMRAM:
   502                           	opt stack 0
   503  00005C                     _mes:
   504                           	opt stack 0
   505  00005C                     	ds	2
   506  00005E                     _key:
   507                           	opt stack 0
   508  00005E                     	ds	1
   509                           tblptru	equ	0xFF8
   510                           tblptrh	equ	0xFF7
   511                           tblptrl	equ	0xFF6
   512                           tablat	equ	0xFF5
   513                           postinc0	equ	0xFEE
   514                           wreg	equ	0xFE8
   515                           postdec1	equ	0xFE5
   516                           fsr1l	equ	0xFE1
   517                           
   518                           	psect	bssBANK0
   519  000060                     __pbssBANK0:
   520                           	opt stack 0
   521  000060                     _RtccAlrmTimeDate:
   522                           	opt stack 0
   523  000060                     	ds	8
   524  000068                     _RtccTimeDate:
   525                           	opt stack 0
   526  000068                     	ds	8
   527  000070                     _Rtcc_read_TimeDate:
   528                           	opt stack 0
   529  000070                     	ds	8
   530  000078                     _RtccTimeVal:
   531                           	opt stack 0
   532  000078                     	ds	4
   533  00007C                     _a:
   534                           	opt stack 0
   535  00007C                     	ds	2
   536  00007E                     _b:
   537                           	opt stack 0
   538  00007E                     	ds	2
   539  000080                     _c:
   540                           	opt stack 0
   541  000080                     	ds	2
   542  000082                     _errno:
   543                           	opt stack 0
   544  000082                     	ds	2
   545  000084                     _i:
   546                           	opt stack 0
   547  000084                     	ds	2
   548  000086                     _j:
   549                           	opt stack 0
   550  000086                     	ds	2
   551  000088                     _k:
   552                           	opt stack 0
   553  000088                     	ds	2
   554  00008A                     _segundo:
   555                           	opt stack 0
   556  00008A                     	ds	2
   557  00008C                     _buffer2:
   558                           	opt stack 0
   559  00008C                     	ds	20
   560  0000A0                     _RtccDate:
   561                           	opt stack 0
   562  0000A0                     	ds	4
   563  0000A4                     _RtccTime:
   564                           	opt stack 0
   565  0000A4                     	ds	4
   566                           tblptru	equ	0xFF8
   567                           tblptrh	equ	0xFF7
   568                           tblptrl	equ	0xFF6
   569                           tablat	equ	0xFF5
   570                           postinc0	equ	0xFEE
   571                           wreg	equ	0xFE8
   572                           postdec1	equ	0xFE5
   573                           fsr1l	equ	0xFE1
   574                           
   575                           	psect	dataBANK0
   576  0000CB                     __pdataBANK0:
   577                           	opt stack 0
   578  0000CB                     _anio:
   579                           	opt stack 0
   580  0000CB                     	ds	2
   581  0000CD                     _dia:
   582                           	opt stack 0
   583  0000CD                     	ds	2
   584  0000CF                     _diasem:
   585                           	opt stack 0
   586  0000CF                     	ds	2
   587  0000D1                     _hora:
   588                           	opt stack 0
   589  0000D1                     	ds	2
   590  0000D3                     _minuto:
   591                           	opt stack 0
   592  0000D3                     	ds	2
   593  0000D5                     _password:
   594                           	opt stack 0
   595  0000D5                     	ds	2
   596  0000D7                     _state_alarm:
   597                           	opt stack 0
   598  0000D7                     	ds	1
   599                           tblptru	equ	0xFF8
   600                           tblptrh	equ	0xFF7
   601                           tblptrl	equ	0xFF6
   602                           tablat	equ	0xFF5
   603                           postinc0	equ	0xFEE
   604                           wreg	equ	0xFE8
   605                           postdec1	equ	0xFE5
   606                           fsr1l	equ	0xFE1
   607                           
   608                           	psect	cstackBANK0
   609  0000A8                     __pcstackBANK0:
   610                           	opt stack 0
   611  0000A8                     _pow$2728:
   612                           	opt stack 0
   613                           
   614                           ; 3 bytes @ 0x0
   615  0000A8                     	ds	3
   616  0000AB                     _pow$2729:
   617                           	opt stack 0
   618                           
   619                           ; 3 bytes @ 0x3
   620  0000AB                     	ds	3
   621  0000AE                     pow@sign:
   622                           	opt stack 0
   623                           
   624                           ; 1 bytes @ 0x6
   625  0000AE                     	ds	1
   626  0000AF                     pow@yi:
   627                           	opt stack 0
   628                           
   629                           ; 4 bytes @ 0x7
   630  0000AF                     	ds	4
   631  0000B3                     _set_vision$2726:
   632                           	opt stack 0
   633                           
   634                           ; 3 bytes @ 0xB
   635  0000B3                     	ds	3
   636  0000B6                     _set_vision$2727:
   637                           	opt stack 0
   638                           
   639                           ; 3 bytes @ 0xE
   640  0000B6                     	ds	3
   641  0000B9                     set_vision@pass:
   642                           	opt stack 0
   643                           
   644                           ; 2 bytes @ 0x11
   645  0000B9                     	ds	2
   646  0000BB                     set_vision@digit:
   647                           	opt stack 0
   648                           
   649                           ; 2 bytes @ 0x13
   650  0000BB                     	ds	2
   651  0000BD                     set_vision@input:
   652                           	opt stack 0
   653                           
   654                           ; 1 bytes @ 0x15
   655  0000BD                     	ds	1
   656                           tblptru	equ	0xFF8
   657                           tblptrh	equ	0xFF7
   658                           tblptrl	equ	0xFF6
   659                           tablat	equ	0xFF5
   660                           postinc0	equ	0xFEE
   661                           wreg	equ	0xFE8
   662                           postdec1	equ	0xFE5
   663                           fsr1l	equ	0xFE1
   664                           
   665                           	psect	cstackCOMRAM
   666  000001                     __pcstackCOMRAM:
   667                           	opt stack 0
   668  000001                     ??_isdigit:
   669  000001                     ??_lcd_send_nibble:
   670  000001                     ?___wmul:
   671                           	opt stack 0
   672  000001                     ?___awdiv:
   673                           	opt stack 0
   674  000001                     ?___lwdiv:
   675                           	opt stack 0
   676  000001                     ?___ftpack:
   677                           	opt stack 0
   678  000001                     ?_frexp:
   679                           	opt stack 0
   680  000001                     ?___ftneg:
   681                           	opt stack 0
   682  000001                     _is_not_letter$1329:
   683                           	opt stack 0
   684  000001                     Delay100TCYx@unit:
   685                           	opt stack 0
   686  000001                     Delay1KTCYx@unit:
   687                           	opt stack 0
   688  000001                     not_fill_pass@digit:
   689                           	opt stack 0
   690  000001                     checkPass@pass:
   691                           	opt stack 0
   692  000001                     RtccWriteDate@pDt:
   693                           	opt stack 0
   694  000001                     RtccWriteTime@pTm:
   695                           	opt stack 0
   696  000001                     ___wmul@multiplier:
   697                           	opt stack 0
   698  000001                     ___awdiv@dividend:
   699                           	opt stack 0
   700  000001                     ___lwdiv@dividend:
   701                           	opt stack 0
   702  000001                     ___ftpack@arg:
   703                           	opt stack 0
   704  000001                     ___ftge@ff1:
   705                           	opt stack 0
   706  000001                     ___ftneg@f1:
   707                           	opt stack 0
   708  000001                     frexp@value:
   709                           	opt stack 0
   710                           
   711                           ; 3 bytes @ 0x0
   712  000001                     	ds	1
   713  000002                     lcd_send_nibble@nibble:
   714                           	opt stack 0
   715  000002                     is_not_letter@input:
   716                           	opt stack 0
   717  000002                     _isdigit$2359:
   718                           	opt stack 0
   719                           
   720                           ; 1 bytes @ 0x1
   721  000002                     	ds	1
   722  000003                     lcd_send_byte@n:
   723                           	opt stack 0
   724  000003                     RtccWriteDate@di:
   725                           	opt stack 0
   726  000003                     RtccWriteTime@di:
   727                           	opt stack 0
   728  000003                     isdigit@c:
   729                           	opt stack 0
   730  000003                     ___wmul@multiplicand:
   731                           	opt stack 0
   732  000003                     ___awdiv@divisor:
   733                           	opt stack 0
   734  000003                     ___lwdiv@divisor:
   735                           	opt stack 0
   736                           
   737                           ; 2 bytes @ 0x2
   738  000003                     	ds	1
   739  000004                     lcd_send_byte@address:
   740                           	opt stack 0
   741  000004                     ___ftpack@exp:
   742                           	opt stack 0
   743  000004                     frexp@eptr:
   744                           	opt stack 0
   745  000004                     ___ftge@ff2:
   746                           	opt stack 0
   747                           
   748                           ; 3 bytes @ 0x3
   749  000004                     	ds	1
   750  000005                     lcd_init@i:
   751                           	opt stack 0
   752  000005                     lcd_gotoxy@y:
   753                           	opt stack 0
   754  000005                     lcd_comand@d:
   755                           	opt stack 0
   756  000005                     lcd_setcursor_vb@blink:
   757                           	opt stack 0
   758  000005                     RtccWriteDate@wasOn:
   759                           	opt stack 0
   760  000005                     RtccWriteTime@wasOn:
   761                           	opt stack 0
   762  000005                     ___awdiv@counter:
   763                           	opt stack 0
   764  000005                     ___ftpack@sign:
   765                           	opt stack 0
   766  000005                     ___wmul@product:
   767                           	opt stack 0
   768  000005                     ___lwdiv@quotient:
   769                           	opt stack 0
   770                           
   771                           ; 2 bytes @ 0x4
   772  000005                     	ds	1
   773  000006                     ??___ftpack:
   774  000006                     ??_frexp:
   775  000006                     ??_clear:
   776  000006                     lcd_gotoxy@x:
   777                           	opt stack 0
   778  000006                     lcd_setcursor_vb@visible:
   779                           	opt stack 0
   780  000006                     RtccWriteDate@wasAlrm:
   781                           	opt stack 0
   782  000006                     RtccWriteTime@wasAlrm:
   783                           	opt stack 0
   784  000006                     ___awdiv@sign:
   785                           	opt stack 0
   786                           
   787                           ; 1 bytes @ 0x5
   788  000006                     	ds	1
   789  000007                     ??___ftge:
   790  000007                     lcd_gotoxy@address:
   791                           	opt stack 0
   792  000007                     RtccWriteTime@wasWrEn:
   793                           	opt stack 0
   794  000007                     ___lwdiv@counter:
   795                           	opt stack 0
   796  000007                     RtccWriteDate@tempYear:
   797                           	opt stack 0
   798  000007                     ___awdiv@quotient:
   799                           	opt stack 0
   800                           
   801                           ; 2 bytes @ 0x6
   802  000007                     	ds	1
   803  000008                     ?___lwmod:
   804                           	opt stack 0
   805  000008                     lcd_putc@c:
   806                           	opt stack 0
   807  000008                     next_code@digit:
   808                           	opt stack 0
   809  000008                     RtccWriteTime@tempMinSec:
   810                           	opt stack 0
   811  000008                     ___lwmod@dividend:
   812                           	opt stack 0
   813                           
   814                           ; 2 bytes @ 0x7
   815  000008                     	ds	1
   816  000009                     ?___ftdiv:
   817                           	opt stack 0
   818  000009                     ?___awtoft:
   819                           	opt stack 0
   820  000009                     ?___lbtoft:
   821                           	opt stack 0
   822  000009                     ?___lltoft:
   823                           	opt stack 0
   824  000009                     RtccWriteDate@wasWrEn:
   825                           	opt stack 0
   826  000009                     lcd_putrs@ptr:
   827                           	opt stack 0
   828  000009                     __delay_s@millis:
   829                           	opt stack 0
   830  000009                     ___awtoft@c:
   831                           	opt stack 0
   832  000009                     ___ftdiv@f1:
   833                           	opt stack 0
   834  000009                     ___lltoft@c:
   835                           	opt stack 0
   836                           
   837                           ; 4 bytes @ 0x8
   838  000009                     	ds	1
   839  00000A                     next_code@input:
   840                           	opt stack 0
   841  00000A                     RtccWriteDate@tempDayMonth:
   842                           	opt stack 0
   843  00000A                     RtccWriteTime@tempHourWDay:
   844                           	opt stack 0
   845  00000A                     ___lwmod@divisor:
   846                           	opt stack 0
   847                           
   848                           ; 2 bytes @ 0x9
   849  00000A                     	ds	1
   850  00000B                     ??__delay_s:
   851                           
   852                           ; 0 bytes @ 0xA
   853  00000B                     	ds	1
   854  00000C                     ??_next_code:
   855  00000C                     ___awtoft@sign:
   856                           	opt stack 0
   857  00000C                     ___lbtoft@c:
   858                           	opt stack 0
   859  00000C                     ___lwmod@counter:
   860                           	opt stack 0
   861  00000C                     __delay_s@it:
   862                           	opt stack 0
   863  00000C                     RtccWriteDate@tempHourWDay:
   864                           	opt stack 0
   865  00000C                     ___ftdiv@f2:
   866                           	opt stack 0
   867                           
   868                           ; 3 bytes @ 0xB
   869  00000C                     	ds	1
   870  00000D                     ??___lltoft:
   871  00000D                     ?_sprintf:
   872                           	opt stack 0
   873  00000D                     ?___ftmul:
   874                           	opt stack 0
   875  00000D                     sprintf@sp:
   876                           	opt stack 0
   877  00000D                     ___ftmul@f1:
   878                           	opt stack 0
   879                           
   880                           ; 3 bytes @ 0xC
   881  00000D                     	ds	1
   882  00000E                     __delay_s@index:
   883                           	opt stack 0
   884                           
   885                           ; 2 bytes @ 0xD
   886  00000E                     	ds	1
   887  00000F                     ??___ftdiv:
   888  00000F                     sprintf@f:
   889                           	opt stack 0
   890                           
   891                           ; 2 bytes @ 0xE
   892  00000F                     	ds	1
   893  000010                     ___ftmul@f2:
   894                           	opt stack 0
   895                           
   896                           ; 3 bytes @ 0xF
   897  000010                     	ds	1
   898  000011                     ___lltoft@exp:
   899                           	opt stack 0
   900                           
   901                           ; 1 bytes @ 0x10
   902  000011                     	ds	1
   903  000012                     ___ftdiv@cntr:
   904                           	opt stack 0
   905                           
   906                           ; 1 bytes @ 0x11
   907  000012                     	ds	1
   908  000013                     ??___ftmul:
   909  000013                     ___ftdiv@f3:
   910                           	opt stack 0
   911                           
   912                           ; 3 bytes @ 0x12
   913  000013                     	ds	3
   914  000016                     ___ftdiv@exp:
   915                           	opt stack 0
   916  000016                     ___ftmul@exp:
   917                           	opt stack 0
   918                           
   919                           ; 1 bytes @ 0x15
   920  000016                     	ds	1
   921  000017                     ??_sprintf:
   922  000017                     ___ftdiv@sign:
   923                           	opt stack 0
   924  000017                     ___ftmul@f3_as_product:
   925                           	opt stack 0
   926                           
   927                           ; 3 bytes @ 0x16
   928  000017                     	ds	3
   929  00001A                     ___ftmul@cntr:
   930                           	opt stack 0
   931                           
   932                           ; 1 bytes @ 0x19
   933  00001A                     	ds	1
   934  00001B                     ___ftmul@sign:
   935                           	opt stack 0
   936  00001B                     sprintf@ap:
   937                           	opt stack 0
   938                           
   939                           ; 2 bytes @ 0x1A
   940  00001B                     	ds	1
   941  00001C                     ?___ftadd:
   942                           	opt stack 0
   943  00001C                     ___ftadd@f1:
   944                           	opt stack 0
   945                           
   946                           ; 3 bytes @ 0x1B
   947  00001C                     	ds	1
   948  00001D                     sprintf@flag:
   949                           	opt stack 0
   950                           
   951                           ; 1 bytes @ 0x1C
   952  00001D                     	ds	1
   953  00001E                     sprintf@val:
   954                           	opt stack 0
   955                           
   956                           ; 2 bytes @ 0x1D
   957  00001E                     	ds	1
   958  00001F                     ___ftadd@f2:
   959                           	opt stack 0
   960                           
   961                           ; 3 bytes @ 0x1E
   962  00001F                     	ds	1
   963  000020                     sprintf@prec:
   964                           	opt stack 0
   965                           
   966                           ; 1 bytes @ 0x1F
   967  000020                     	ds	1
   968  000021                     sprintf@width:
   969                           	opt stack 0
   970                           
   971                           ; 2 bytes @ 0x20
   972  000021                     	ds	1
   973  000022                     ??___ftadd:
   974                           
   975                           ; 0 bytes @ 0x21
   976  000022                     	ds	1
   977  000023                     sprintf@c:
   978                           	opt stack 0
   979                           
   980                           ; 1 bytes @ 0x22
   981  000023                     	ds	1
   982  000024                     ??_read_keyboard:
   983  000024                     
   984                           ; 0 bytes @ 0x23
   985  000024                     	ds	1
   986  000025                     twinkle@input:
   987                           	opt stack 0
   988  000025                     ___ftadd@sign:
   989                           	opt stack 0
   990                           
   991                           ; 1 bytes @ 0x24
   992  000025                     	ds	1
   993  000026                     ___ftadd@exp2:
   994                           	opt stack 0
   995                           
   996                           ; 1 bytes @ 0x25
   997  000026                     	ds	1
   998  000027                     ___ftadd@exp1:
   999                           	opt stack 0
  1000                           
  1001                           ; 1 bytes @ 0x26
  1002  000027                     	ds	1
  1003  000028                     ?___ftsub:
  1004                           	opt stack 0
  1005  000028                     ?_eval_poly:
  1006                           	opt stack 0
  1007  000028                     ?___fttol:
  1008                           	opt stack 0
  1009  000028                     ___ftsub@f1:
  1010                           	opt stack 0
  1011  000028                     ___fttol@f1:
  1012                           	opt stack 0
  1013  000028                     eval_poly@x:
  1014                           	opt stack 0
  1015                           
  1016                           ; 3 bytes @ 0x27
  1017  000028                     	ds	3
  1018  00002B                     eval_poly@d:
  1019                           	opt stack 0
  1020  00002B                     ___ftsub@f2:
  1021                           	opt stack 0
  1022                           
  1023                           ; 3 bytes @ 0x2A
  1024  00002B                     	ds	1
  1025  00002C                     ??___fttol:
  1026                           
  1027                           ; 0 bytes @ 0x2B
  1028  00002C                     	ds	1
  1029  00002D                     eval_poly@n:
  1030                           	opt stack 0
  1031                           
  1032                           ; 2 bytes @ 0x2C
  1033  00002D                     	ds	1
  1034  00002E                     
  1035                           ; 0 bytes @ 0x2D
  1036  00002E                     	ds	1
  1037  00002F                     ??_eval_poly:
  1038                           
  1039                           ; 0 bytes @ 0x2E
  1040  00002F                     	ds	2
  1041  000031                     ___fttol@sign1:
  1042                           	opt stack 0
  1043  000031                     eval_poly@res:
  1044                           	opt stack 0
  1045                           
  1046                           ; 3 bytes @ 0x30
  1047  000031                     	ds	1
  1048  000032                     ___fttol@lval:
  1049                           	opt stack 0
  1050                           
  1051                           ; 4 bytes @ 0x31
  1052  000032                     	ds	2
  1053  000034                     ?_log:
  1054                           	opt stack 0
  1055  000034                     ?_ldexp:
  1056                           	opt stack 0
  1057  000034                     ldexp@value:
  1058                           	opt stack 0
  1059  000034                     log@x:
  1060                           	opt stack 0
  1061                           
  1062                           ; 3 bytes @ 0x33
  1063  000034                     	ds	2
  1064  000036                     ___fttol@exp1:
  1065                           	opt stack 0
  1066                           
  1067                           ; 1 bytes @ 0x35
  1068  000036                     	ds	1
  1069  000037                     ?___altoft:
  1070                           	opt stack 0
  1071  000037                     ldexp@newexp:
  1072                           	opt stack 0
  1073  000037                     log@exponent:
  1074                           	opt stack 0
  1075  000037                     ___altoft@c:
  1076                           	opt stack 0
  1077                           
  1078                           ; 4 bytes @ 0x36
  1079  000037                     	ds	2
  1080  000039                     ??_ldexp:
  1081                           
  1082                           ; 0 bytes @ 0x38
  1083  000039                     	ds	2
  1084  00003B                     ??___altoft:
  1085                           
  1086                           ; 0 bytes @ 0x3A
  1087  00003B                     	ds	4
  1088  00003F                     ___altoft@exp:
  1089                           	opt stack 0
  1090                           
  1091                           ; 1 bytes @ 0x3E
  1092  00003F                     	ds	1
  1093  000040                     ___altoft@sign:
  1094                           	opt stack 0
  1095                           
  1096                           ; 1 bytes @ 0x3F
  1097  000040                     	ds	1
  1098  000041                     ?_floor:
  1099                           	opt stack 0
  1100  000041                     floor@x:
  1101                           	opt stack 0
  1102                           
  1103                           ; 3 bytes @ 0x40
  1104  000041                     	ds	3
  1105  000044                     floor@i:
  1106                           	opt stack 0
  1107                           
  1108                           ; 3 bytes @ 0x43
  1109  000044                     	ds	3
  1110  000047                     floor@expon:
  1111                           	opt stack 0
  1112                           
  1113                           ; 2 bytes @ 0x46
  1114  000047                     	ds	2
  1115  000049                     ?_exp:
  1116                           	opt stack 0
  1117  000049                     exp@x:
  1118                           	opt stack 0
  1119                           
  1120                           ; 3 bytes @ 0x48
  1121  000049                     	ds	3
  1122  00004C                     _exp$2730:
  1123                           	opt stack 0
  1124                           
  1125                           ; 3 bytes @ 0x4B
  1126  00004C                     	ds	3
  1127  00004F                     exp@exponent:
  1128                           	opt stack 0
  1129                           
  1130                           ; 2 bytes @ 0x4E
  1131  00004F                     	ds	2
  1132  000051                     exp@sign:
  1133                           	opt stack 0
  1134                           
  1135                           ; 1 bytes @ 0x50
  1136  000051                     	ds	1
  1137  000052                     ?_pow:
  1138                           	opt stack 0
  1139  000052                     pow@x:
  1140                           	opt stack 0
  1141                           
  1142                           ; 3 bytes @ 0x51
  1143  000052                     	ds	3
  1144  000055                     pow@y:
  1145                           	opt stack 0
  1146                           
  1147                           ; 3 bytes @ 0x54
  1148  000055                     	ds	3
  1149  000058                     ??_set_vision:
  1150  000058                     
  1151                           ; 0 bytes @ 0x57
  1152  000058                     	ds	2
  1153  00005A                     ??_main:
  1154                           
  1155                           ; 0 bytes @ 0x59
  1156  00005A                     	ds	1
  1157  00005B                     main@input:
  1158                           	opt stack 0
  1159                           
  1160                           ; 1 bytes @ 0x5A
  1161  00005B                     	ds	1
  1162                           tblptru	equ	0xFF8
  1163                           tblptrh	equ	0xFF7
  1164                           tblptrl	equ	0xFF6
  1165                           tablat	equ	0xFF5
  1166                           postinc0	equ	0xFEE
  1167                           wreg	equ	0xFE8
  1168                           postdec1	equ	0xFE5
  1169                           fsr1l	equ	0xFE1
  1170                           
  1171 ;;
  1172 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1173 ;;
  1174 ;; *************** function _main *****************
  1175 ;; Defined at:
  1176 ;;		line 87 in file "main.c"
  1177 ;; Parameters:    Size  Location     Type
  1178 ;;		None
  1179 ;; Auto vars:     Size  Location     Type
  1180 ;;  input           1   90[COMRAM] unsigned char 
  1181 ;; Return value:  Size  Location     Type
  1182 ;;                  2   52[None  ] int 
  1183 ;; Registers used:
  1184 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1185 ;; Tracked objects:
  1186 ;;		On entry : 0/0
  1187 ;;		On exit  : 0/0
  1188 ;;		Unchanged: 0/0
  1189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1191 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1192 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1193 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1194 ;;Total ram usage:        2 bytes
  1195 ;; Hardware stack levels required when called:    8
  1196 ;; This function calls:
  1197 ;;		_Setup
  1198 ;;		_caratula
  1199 ;;		_lcd_gotoxy
  1200 ;;		_lcd_putrs
  1201 ;;		_read_keyboard
  1202 ;;		_set_vision
  1203 ;; This function is called by:
  1204 ;;		Startup code after reset
  1205 ;; This function uses a non-reentrant model
  1206 ;;
  1207                           
  1208                           	psect	text0
  1209  0029C2                     __ptext0:
  1210                           	opt stack 0
  1211  0029C2                     _main:
  1212                           	opt stack 23
  1213                           
  1214                           ;main.c: 88: Setup();
  1215                           
  1216                           ; BSR set to: 15
  1217                           ;incstack = 0
  1218  0029C2  EC19  F017         	call	_Setup	;wreg free
  1219                           
  1220                           ;main.c: 89: caratula();
  1221  0029C6  EC60  F018         	call	_caratula	;wreg free
  1222  0029CA  D000               	goto	l4092
  1223  0029CC                     l4092:
  1224                           
  1225                           ;main.c: 94: set_vision();
  1226  0029CC  EC53  F00B         	call	_set_vision	;wreg free
  1227                           
  1228                           ;main.c: 96: char input = read_keyboard();
  1229  0029D0  ECE2  F007         	call	_read_keyboard	;wreg free
  1230  0029D4  6E5B               	movwf	main@input,c
  1231                           
  1232                           ;main.c: 98: if (input == 16){
  1233  0029D6  0E10               	movlw	16
  1234  0029D8  185B               	xorwf	main@input,w,c
  1235  0029DA  A4D8               	btfss	status,2,c
  1236  0029DC  D7F7               	goto	l4092
  1237                           
  1238                           ;main.c: 99: lcd_gotoxy(1,1);
  1239  0029DE  0E01               	movlw	1
  1240  0029E0  6E05               	movwf	lcd_gotoxy@y,c
  1241  0029E2  0E01               	movlw	1
  1242  0029E4  ECE7  F017         	call	_lcd_gotoxy
  1243                           
  1244                           ;main.c: 100: lcd_putrs("                                ");
  1245  0029E8  0E48               	movlw	low STR_1
  1246  0029EA  6E09               	movwf	lcd_putrs@ptr,c
  1247  0029EC  0E0F               	movlw	high STR_1
  1248  0029EE  6E0A               	movwf	lcd_putrs@ptr+1,c
  1249  0029F0  EC7D  F016         	call	_lcd_putrs	;wreg free
  1250                           
  1251                           ;main.c: 101: lcd_gotoxy(1,1);
  1252  0029F4  0E01               	movlw	1
  1253  0029F6  6E05               	movwf	lcd_gotoxy@y,c
  1254  0029F8  0E01               	movlw	1
  1255  0029FA  ECE7  F017         	call	_lcd_gotoxy
  1256                           
  1257                           ;main.c: 102: lcd_putrs("null pointer");
  1258  0029FE  0E78               	movlw	low STR_2
  1259  002A00  6E09               	movwf	lcd_putrs@ptr,c
  1260  002A02  0E0F               	movlw	high STR_2
  1261  002A04  6E0A               	movwf	lcd_putrs@ptr+1,c
  1262  002A06  EC7D  F016         	call	_lcd_putrs	;wreg free
  1263                           
  1264                           ;main.c: 103: lcd_gotoxy(1,2);
  1265  002A0A  0E02               	movlw	2
  1266  002A0C  6E05               	movwf	lcd_gotoxy@y,c
  1267  002A0E  0E01               	movlw	1
  1268  002A10  ECE7  F017         	call	_lcd_gotoxy
  1269                           
  1270                           ;main.c: 104: lcd_putrs("exception");
  1271  002A14  0EA4               	movlw	low STR_3
  1272  002A16  6E09               	movwf	lcd_putrs@ptr,c
  1273  002A18  0E0F               	movlw	high STR_3
  1274  002A1A  6E0A               	movwf	lcd_putrs@ptr+1,c
  1275  002A1C  EC7D  F016         	call	_lcd_putrs	;wreg free
  1276                           
  1277                           ;main.c: 105: input = 0;
  1278  002A20  0E00               	movlw	0
  1279  002A22  6E5B               	movwf	main@input,c
  1280                           
  1281                           ;main.c: 106: key = 0;
  1282  002A24  0E00               	movlw	0
  1283  002A26  6E5E               	movwf	_key,c
  1284                           
  1285                           ;main.c: 107: _delay((unsigned long)((98)*(8000000/4000.0)));
  1286  002A28  0EFF               	movlw	255
  1287  002A2A  6E5A               	movwf	??_main& (0+255),c
  1288  002A2C  0E8A               	movlw	138
  1289  002A2E                     u4357:
  1290  002A2E  2EE8               	decfsz	wreg,f,c
  1291  002A30  D7FE               	goto	u4357
  1292  002A32  2E5A               	decfsz	??_main& (0+255),f,c
  1293  002A34  D7FC               	goto	u4357
  1294  002A36  D000               	nop2	
  1295  002A38  D7C9               	goto	l4092
  1296                           
  1297                           ;main.c: 108: }
  1298                           ;main.c: 109: }
  1299                           ;main.c: 111: return 0;
  1300                           ;	Return value of _main is never used
  1301  002A3A  EF00  F000         	goto	start
  1302  002A3E                     __end_of_main:
  1303                           	opt stack 0
  1304                           tblptru	equ	0xFF8
  1305                           tblptrh	equ	0xFF7
  1306                           tblptrl	equ	0xFF6
  1307                           tablat	equ	0xFF5
  1308                           postinc0	equ	0xFEE
  1309                           wreg	equ	0xFE8
  1310                           postdec1	equ	0xFE5
  1311                           fsr1l	equ	0xFE1
  1312                           status	equ	0xFD8
  1313                           
  1314 ;; *************** function _set_vision *****************
  1315 ;; Defined at:
  1316 ;;		line 64 in file "lcd_vision.c"
  1317 ;; Parameters:    Size  Location     Type
  1318 ;;		None
  1319 ;; Auto vars:     Size  Location     Type
  1320 ;;  digit           2   19[BANK0 ] short 
  1321 ;;  pass            2   17[BANK0 ] int 
  1322 ;;  input           1   21[BANK0 ] unsigned char 
  1323 ;; Return value:  Size  Location     Type
  1324 ;;		None               void
  1325 ;; Registers used:
  1326 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1327 ;; Tracked objects:
  1328 ;;		On entry : 0/0
  1329 ;;		On exit  : 0/0
  1330 ;;		Unchanged: 0/0
  1331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1333 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1334 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1335 ;;      Totals:         2      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1336 ;;Total ram usage:       13 bytes
  1337 ;; Hardware stack levels used:    1
  1338 ;; Hardware stack levels required when called:    7
  1339 ;; This function calls:
  1340 ;;		___awtoft
  1341 ;;		___ftadd
  1342 ;;		___ftmul
  1343 ;;		___fttol
  1344 ;;		___lbtoft
  1345 ;;		_checkPass
  1346 ;;		_clear
  1347 ;;		_is_not_letter
  1348 ;;		_lcd_gotoxy
  1349 ;;		_lcd_putrs
  1350 ;;		_lcd_setcursor_vb
  1351 ;;		_next_code
  1352 ;;		_not_fill_pass
  1353 ;;		_pow
  1354 ;;		_read_keyboard
  1355 ;;		_twinkle
  1356 ;;		_write_Date
  1357 ;; This function is called by:
  1358 ;;		_main
  1359 ;; This function uses a non-reentrant model
  1360 ;;
  1361                           
  1362                           	psect	text1
  1363  0016A6                     __ptext1:
  1364                           	opt stack 0
  1365  0016A6                     _set_vision:
  1366                           	opt stack 23
  1367                           
  1368                           ;lcd_vision.c: 65: clear();
  1369                           
  1370                           ;incstack = 0
  1371  0016A6  EC18  F018         	call	_clear	;wreg free
  1372                           
  1373                           ;lcd_vision.c: 66: write_Date();
  1374  0016AA  ECA2  F014         	call	_write_Date	;wreg free
  1375                           
  1376                           ;lcd_vision.c: 67: lcd_gotoxy(1,1);
  1377  0016AE  0E01               	movlw	1
  1378  0016B0  6E05               	movwf	lcd_gotoxy@y,c
  1379  0016B2  0E01               	movlw	1
  1380  0016B4  ECE7  F017         	call	_lcd_gotoxy
  1381                           
  1382                           ;lcd_vision.c: 69: switch (state_alarm){
  1383  0016B8  D0D5               	goto	l4086
  1384  0016BA                     l4040:
  1385  0016BA  0EBF               	movlw	low STR_18
  1386  0016BC  6E09               	movwf	lcd_putrs@ptr,c
  1387  0016BE  0E0F               	movlw	high STR_18
  1388  0016C0  6E0A               	movwf	lcd_putrs@ptr+1,c
  1389  0016C2  EC7D  F016         	call	_lcd_putrs	;wreg free
  1390                           
  1391                           ;lcd_vision.c: 71: break;
  1392  0016C6  0012               	return	
  1393  0016C8                     l4042:
  1394  0016C8  0EBB               	movlw	low STR_19
  1395  0016CA  6E09               	movwf	lcd_putrs@ptr,c
  1396  0016CC  0E0F               	movlw	high STR_19
  1397  0016CE  6E0A               	movwf	lcd_putrs@ptr+1,c
  1398  0016D0  EC7D  F016         	call	_lcd_putrs	;wreg free
  1399                           
  1400                           ;lcd_vision.c: 73: lcd_gotoxy(7,2);
  1401  0016D4  0E02               	movlw	2
  1402  0016D6  6E05               	movwf	lcd_gotoxy@y,c
  1403  0016D8  0E07               	movlw	7
  1404  0016DA  ECE7  F017         	call	_lcd_gotoxy
  1405                           
  1406                           ;lcd_vision.c: 74: lcd_putrs("pass:____");
  1407  0016DE  0E90               	movlw	low STR_20
  1408  0016E0  6E09               	movwf	lcd_putrs@ptr,c
  1409  0016E2  0E0F               	movlw	high STR_20
  1410  0016E4  6E0A               	movwf	lcd_putrs@ptr+1,c
  1411  0016E6  EC7D  F016         	call	_lcd_putrs	;wreg free
  1412                           
  1413                           ;lcd_vision.c: 75: short digit = 12;
  1414  0016EA  0E00               	movlw	0
  1415  0016EC  0100               	movlb	0	; () banked
  1416  0016EE  6FBC               	movwf	(set_vision@digit+1)& (0+255),b
  1417  0016F0  0E0C               	movlw	12
  1418  0016F2  6FBB               	movwf	set_vision@digit& (0+255),b
  1419                           
  1420                           ; BSR set to: 0
  1421                           ;lcd_vision.c: 76: lcd_gotoxy(digit,2);
  1422  0016F4  0E02               	movlw	2
  1423  0016F6  6E05               	movwf	lcd_gotoxy@y,c
  1424  0016F8  0100               	movlb	0	; () banked
  1425  0016FA  51BB               	movf	set_vision@digit& (0+255),w,b
  1426  0016FC  ECE7  F017         	call	_lcd_gotoxy
  1427                           
  1428                           ;lcd_vision.c: 77: lcd_setcursor_vb(1,1);
  1429  001700  0E01               	movlw	1
  1430  001702  6E05               	movwf	lcd_setcursor_vb@blink,c
  1431  001704  0E01               	movlw	1
  1432  001706  EC2D  F018         	call	_lcd_setcursor_vb
  1433                           
  1434                           ;lcd_vision.c: 79: char input = read_keyboard();
  1435  00170A  ECE2  F007         	call	_read_keyboard	;wreg free
  1436  00170E  0100               	movlb	0	; () banked
  1437  001710  6FBD               	movwf	set_vision@input& (0+255),b
  1438                           
  1439                           ; BSR set to: 0
  1440                           ;lcd_vision.c: 80: int pass = 0;
  1441  001712  0E00               	movlw	0
  1442  001714  0100               	movlb	0	; () banked
  1443  001716  6FBA               	movwf	(set_vision@pass+1)& (0+255),b
  1444  001718  0E00               	movlw	0
  1445  00171A  6FB9               	movwf	set_vision@pass& (0+255),b
  1446                           
  1447                           ;lcd_vision.c: 82: while(is_not_letter(input) && not_fill_pass(digit)){
  1448  00171C  D088               	goto	l4078
  1449  00171E                     l4058:
  1450                           
  1451                           ;lcd_vision.c: 84: if(0<input && input<10){
  1452  00171E  0100               	movlb	0	; () banked
  1453  001720  51BD               	movf	set_vision@input& (0+255),w,b
  1454  001722  0100               	movlb	0	; () banked
  1455  001724  B4D8               	btfsc	status,2,c
  1456  001726  D06B               	goto	l4070
  1457                           
  1458                           ; BSR set to: 0
  1459  001728  0E0A               	movlw	10
  1460  00172A  0100               	movlb	0	; () banked
  1461  00172C  61BD               	cpfslt	set_vision@input& (0+255),b
  1462  00172E  D067               	goto	l4070
  1463                           
  1464                           ; BSR set to: 0
  1465                           ;lcd_vision.c: 86: pass = pass + input * pow(10, 15 - digit);
  1466  001730  C0BB  F058         	movff	set_vision@digit,??_set_vision
  1467  001734  C0BC  F059         	movff	set_vision@digit+1,??_set_vision+1
  1468  001738  1E58               	comf	??_set_vision,f,c
  1469  00173A  1E59               	comf	??_set_vision+1,f,c
  1470  00173C  4A58               	infsnz	??_set_vision,f,c
  1471  00173E  2A59               	incf	??_set_vision+1,f,c
  1472  001740  0E0F               	movlw	15
  1473  001742  2458               	addwf	??_set_vision,w,c
  1474  001744  6E09               	movwf	___awtoft@c,c
  1475  001746  0E00               	movlw	0
  1476  001748  2059               	addwfc	??_set_vision+1,w,c
  1477  00174A  6E0A               	movwf	___awtoft@c+1,c
  1478  00174C  EC5F  F017         	call	___awtoft	;wreg free
  1479  001750  C009  F0B3         	movff	?___awtoft,_set_vision$2726
  1480  001754  C00A  F0B4         	movff	?___awtoft+1,_set_vision$2726+1
  1481  001758  C00B  F0B5         	movff	?___awtoft+2,_set_vision$2726+2
  1482                           
  1483                           ;lcd_vision.c: 86: pass = pass + input * pow(10, 15 - digit);
  1484  00175C  C0B3  F055         	movff	_set_vision$2726,pow@y
  1485  001760  C0B4  F056         	movff	_set_vision$2726+1,pow@y+1
  1486  001764  C0B5  F057         	movff	_set_vision$2726+2,pow@y+2
  1487  001768  0E00               	movlw	0
  1488  00176A  6E52               	movwf	pow@x,c
  1489  00176C  0E20               	movlw	32
  1490  00176E  6E53               	movwf	pow@x+1,c
  1491  001770  0E41               	movlw	65
  1492  001772  6E54               	movwf	pow@x+2,c
  1493  001774  ECEB  F00D         	call	_pow	;wreg free
  1494  001778  C052  F0B6         	movff	?_pow,_set_vision$2727
  1495  00177C  C053  F0B7         	movff	?_pow+1,_set_vision$2727+1
  1496  001780  C054  F0B8         	movff	?_pow+2,_set_vision$2727+2
  1497                           
  1498                           ;lcd_vision.c: 86: pass = pass + input * pow(10, 15 - digit);
  1499  001784  C0B6  F010         	movff	_set_vision$2727,___ftmul@f2
  1500  001788  C0B7  F011         	movff	_set_vision$2727+1,___ftmul@f2+1
  1501  00178C  C0B8  F012         	movff	_set_vision$2727+2,___ftmul@f2+2
  1502  001790  0100               	movlb	0	; () banked
  1503  001792  51BD               	movf	set_vision@input& (0+255),w,b
  1504  001794  ECC2  F017         	call	___lbtoft
  1505  001798  C009  F00D         	movff	?___lbtoft,___ftmul@f1
  1506  00179C  C00A  F00E         	movff	?___lbtoft+1,___ftmul@f1+1
  1507  0017A0  C00B  F00F         	movff	?___lbtoft+2,___ftmul@f1+2
  1508  0017A4  ECE6  F010         	call	___ftmul	;wreg free
  1509  0017A8  C00D  F01F         	movff	?___ftmul,___ftadd@f2
  1510  0017AC  C00E  F020         	movff	?___ftmul+1,___ftadd@f2+1
  1511  0017B0  C00F  F021         	movff	?___ftmul+2,___ftadd@f2+2
  1512  0017B4  C0B9  F009         	movff	set_vision@pass,___awtoft@c
  1513  0017B8  C0BA  F00A         	movff	set_vision@pass+1,___awtoft@c+1
  1514  0017BC  EC5F  F017         	call	___awtoft	;wreg free
  1515  0017C0  C009  F01C         	movff	?___awtoft,___ftadd@f1
  1516  0017C4  C00A  F01D         	movff	?___awtoft+1,___ftadd@f1+1
  1517  0017C8  C00B  F01E         	movff	?___awtoft+2,___ftadd@f1+2
  1518  0017CC  EC3C  F00C         	call	___ftadd	;wreg free
  1519  0017D0  C01C  F028         	movff	?___ftadd,___fttol@f1
  1520  0017D4  C01D  F029         	movff	?___ftadd+1,___fttol@f1+1
  1521  0017D8  C01E  F02A         	movff	?___ftadd+2,___fttol@f1+2
  1522  0017DC  EC65  F010         	call	___fttol	;wreg free
  1523  0017E0  C028  F0B9         	movff	?___fttol,set_vision@pass
  1524  0017E4  C029  F0BA         	movff	?___fttol+1,set_vision@pass+1
  1525                           
  1526                           ;lcd_vision.c: 87: next_code(&digit, &input);
  1527  0017E8  0EBB               	movlw	low set_vision@digit
  1528  0017EA  6E08               	movwf	next_code@digit,c
  1529  0017EC  0E00               	movlw	high set_vision@digit
  1530  0017EE  6E09               	movwf	next_code@digit+1,c
  1531  0017F0  0EBD               	movlw	low set_vision@input
  1532  0017F2  6E0A               	movwf	next_code@input,c
  1533  0017F4  0E00               	movlw	high set_vision@input
  1534  0017F6  6E0B               	movwf	next_code@input+1,c
  1535  0017F8  ECF3  F016         	call	_next_code	;wreg free
  1536  0017FC  D000               	goto	l4070
  1537  0017FE                     l4070:
  1538                           
  1539                           ;lcd_vision.c: 92: }
  1540                           ;lcd_vision.c: 93: input = read_keyboard();
  1541  0017FE  ECE2  F007         	call	_read_keyboard	;wreg free
  1542  001802  0100               	movlb	0	; () banked
  1543  001804  6FBD               	movwf	set_vision@input& (0+255),b
  1544                           
  1545                           ; BSR set to: 0
  1546                           ;lcd_vision.c: 95: if(digit == 16){
  1547  001806  0E10               	movlw	16
  1548  001808  0100               	movlb	0	; () banked
  1549  00180A  19BB               	xorwf	set_vision@digit& (0+255),w,b
  1550  00180C  0100               	movlb	0	; () banked
  1551  00180E  11BC               	iorwf	(set_vision@digit+1)& (0+255),w,b
  1552  001810  A4D8               	btfss	status,2,c
  1553  001812  D00D               	goto	l4078
  1554                           
  1555                           ; BSR set to: 0
  1556                           ;lcd_vision.c: 96: if(checkPass(pass)){
  1557  001814  C0B9  F001         	movff	set_vision@pass,checkPass@pass
  1558  001818  C0BA  F002         	movff	set_vision@pass+1,checkPass@pass+1
  1559  00181C  EC0A  F018         	call	_checkPass	;wreg free
  1560  001820  0900               	iorlw	0
  1561  001822  B4D8               	btfsc	status,2,c
  1562  001824  D004               	goto	l4078
  1563                           
  1564                           ;lcd_vision.c: 97: state_alarm = ACTIVE;
  1565  001826  0E00               	movlw	0
  1566  001828  0100               	movlb	0	; () banked
  1567  00182A  6FD7               	movwf	_state_alarm& (0+255),b
  1568                           
  1569                           ; BSR set to: 0
  1570                           
  1571                           ; BSR set to: 0
  1572  00182C  D000               	goto	l4078
  1573  00182E                     l4078:
  1574  00182E  0100               	movlb	0	; () banked
  1575  001830  51BD               	movf	set_vision@input& (0+255),w,b
  1576  001832  EC96  F017         	call	_is_not_letter
  1577  001836  0900               	iorlw	0
  1578  001838  B4D8               	btfsc	status,2,c
  1579  00183A  0012               	return	
  1580  00183C  C0BB  F001         	movff	set_vision@digit,not_fill_pass@digit
  1581  001840  C0BC  F002         	movff	set_vision@digit+1,not_fill_pass@digit+1
  1582  001844  EC23  F018         	call	_not_fill_pass	;wreg free
  1583  001848  0900               	iorlw	0
  1584  00184A  B4D8               	btfsc	status,2,c
  1585  00184C  0012               	return	
  1586  00184E  D767               	goto	l4058
  1587                           
  1588                           ;lcd_vision.c: 98: }
  1589                           ;lcd_vision.c: 99: }
  1590                           ;lcd_vision.c: 100: }
  1591                           ;lcd_vision.c: 102: break;
  1592  001850  0012               	return	
  1593  001852                     l4082:
  1594  001852  0EAE               	movlw	low STR_21
  1595  001854  6E09               	movwf	lcd_putrs@ptr,c
  1596  001856  0E0F               	movlw	high STR_21
  1597  001858  6E0A               	movwf	lcd_putrs@ptr+1,c
  1598  00185A  EC7D  F016         	call	_lcd_putrs	;wreg free
  1599                           
  1600                           ;lcd_vision.c: 104: twinkle();
  1601  00185E  EC98  F015         	call	_twinkle	;wreg free
  1602                           
  1603                           ;lcd_vision.c: 105: }
  1604  001862  0012               	return	
  1605  001864                     l4086:
  1606  001864  0100               	movlb	0	; () banked
  1607  001866  51D7               	movf	_state_alarm& (0+255),w,b
  1608                           
  1609                           ; Switch size 1, requested type "space"
  1610                           ; Number of cases is 2, Range of values is 0 to 1
  1611                           ; switch strategies available:
  1612                           ; Name         Instructions Cycles
  1613                           ; simple_byte            7     4 (average)
  1614                           ;	Chosen strategy is simple_byte
  1615  001868  0A00               	xorlw	0	; case 0
  1616  00186A  B4D8               	btfsc	status,2,c
  1617  00186C  D726               	goto	l4040
  1618  00186E  0A01               	xorlw	1	; case 1
  1619  001870  B4D8               	btfsc	status,2,c
  1620  001872  D72A               	goto	l4042
  1621  001874  D7EE               	goto	l4082
  1622                           
  1623                           ; BSR set to: 0
  1624  001876  0012               	return		;funcret
  1625  001878                     __end_of_set_vision:
  1626                           	opt stack 0
  1627                           tblptru	equ	0xFF8
  1628                           tblptrh	equ	0xFF7
  1629                           tblptrl	equ	0xFF6
  1630                           tablat	equ	0xFF5
  1631                           postinc0	equ	0xFEE
  1632                           wreg	equ	0xFE8
  1633                           postdec1	equ	0xFE5
  1634                           fsr1l	equ	0xFE1
  1635                           status	equ	0xFD8
  1636                           
  1637 ;; *************** function _write_Date *****************
  1638 ;; Defined at:
  1639 ;;		line 12 in file "lcd_vision.c"
  1640 ;; Parameters:    Size  Location     Type
  1641 ;;		None
  1642 ;; Auto vars:     Size  Location     Type
  1643 ;;		None
  1644 ;; Return value:  Size  Location     Type
  1645 ;;		None               void
  1646 ;; Registers used:
  1647 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1648 ;; Tracked objects:
  1649 ;;		On entry : 0/0
  1650 ;;		On exit  : 0/0
  1651 ;;		Unchanged: 0/0
  1652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1656 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1657 ;;Total ram usage:        0 bytes
  1658 ;; Hardware stack levels used:    1
  1659 ;; Hardware stack levels required when called:    5
  1660 ;; This function calls:
  1661 ;;		_lcd_gotoxy
  1662 ;;		_lcd_putrs
  1663 ;;		_sprintf
  1664 ;; This function is called by:
  1665 ;;		_set_vision
  1666 ;; This function uses a non-reentrant model
  1667 ;;
  1668                           
  1669                           	psect	text2
  1670  002944                     __ptext2:
  1671                           	opt stack 0
  1672  002944                     _write_Date:
  1673                           	opt stack 24
  1674                           
  1675                           ;lcd_vision.c: 13: lcd_gotoxy(9,1);
  1676                           
  1677                           ;incstack = 0
  1678  002944  0E01               	movlw	1
  1679  002946  6E05               	movwf	lcd_gotoxy@y,c
  1680  002948  0E09               	movlw	9
  1681  00294A  ECE7  F017         	call	_lcd_gotoxy
  1682                           
  1683                           ;lcd_vision.c: 14: sprintf(buffer2,"%02u/%02u/%02u",dia,mes,anio);
  1684  00294E  0E8C               	movlw	low _buffer2
  1685  002950  6E0D               	movwf	sprintf@sp,c
  1686  002952  0E00               	movlw	high _buffer2
  1687  002954  6E0E               	movwf	sprintf@sp+1,c
  1688  002956  0E69               	movlw	low STR_14
  1689  002958  6E0F               	movwf	sprintf@f,c
  1690  00295A  0E0F               	movlw	high STR_14
  1691  00295C  6E10               	movwf	sprintf@f+1,c
  1692  00295E  C0CD  F011         	movff	_dia,?_sprintf+4
  1693  002962  C0CE  F012         	movff	_dia+1,?_sprintf+5
  1694  002966  C05C  F013         	movff	_mes,?_sprintf+6
  1695  00296A  C05D  F014         	movff	_mes+1,?_sprintf+7
  1696  00296E  C0CB  F015         	movff	_anio,?_sprintf+8
  1697  002972  C0CC  F016         	movff	_anio+1,?_sprintf+9
  1698  002976  EC2D  F009         	call	_sprintf	;wreg free
  1699                           
  1700                           ;lcd_vision.c: 15: lcd_putrs(buffer2);
  1701  00297A  0E8C               	movlw	low _buffer2
  1702  00297C  6E09               	movwf	lcd_putrs@ptr,c
  1703  00297E  0E00               	movlw	high _buffer2
  1704  002980  6E0A               	movwf	lcd_putrs@ptr+1,c
  1705  002982  EC7D  F016         	call	_lcd_putrs	;wreg free
  1706                           
  1707                           ;lcd_vision.c: 16: sprintf(buffer2,"%02u:%02u",hora,minuto);
  1708  002986  0E8C               	movlw	low _buffer2
  1709  002988  6E0D               	movwf	sprintf@sp,c
  1710  00298A  0E00               	movlw	high _buffer2
  1711  00298C  6E0E               	movwf	sprintf@sp+1,c
  1712  00298E  0E9A               	movlw	low STR_15
  1713  002990  6E0F               	movwf	sprintf@f,c
  1714  002992  0E0F               	movlw	high STR_15
  1715  002994  6E10               	movwf	sprintf@f+1,c
  1716  002996  C0D1  F011         	movff	_hora,?_sprintf+4
  1717  00299A  C0D2  F012         	movff	_hora+1,?_sprintf+5
  1718  00299E  C0D3  F013         	movff	_minuto,?_sprintf+6
  1719  0029A2  C0D4  F014         	movff	_minuto+1,?_sprintf+7
  1720  0029A6  EC2D  F009         	call	_sprintf	;wreg free
  1721                           
  1722                           ;lcd_vision.c: 17: lcd_gotoxy(1,2);
  1723  0029AA  0E02               	movlw	2
  1724  0029AC  6E05               	movwf	lcd_gotoxy@y,c
  1725  0029AE  0E01               	movlw	1
  1726  0029B0  ECE7  F017         	call	_lcd_gotoxy
  1727                           
  1728                           ;lcd_vision.c: 18: lcd_putrs(buffer2);
  1729  0029B4  0E8C               	movlw	low _buffer2
  1730  0029B6  6E09               	movwf	lcd_putrs@ptr,c
  1731  0029B8  0E00               	movlw	high _buffer2
  1732  0029BA  6E0A               	movwf	lcd_putrs@ptr+1,c
  1733  0029BC  EC7D  F016         	call	_lcd_putrs	;wreg free
  1734  0029C0  0012               	return		;funcret
  1735  0029C2                     __end_of_write_Date:
  1736                           	opt stack 0
  1737                           tblptru	equ	0xFF8
  1738                           tblptrh	equ	0xFF7
  1739                           tblptrl	equ	0xFF6
  1740                           tablat	equ	0xFF5
  1741                           postinc0	equ	0xFEE
  1742                           wreg	equ	0xFE8
  1743                           postdec1	equ	0xFE5
  1744                           fsr1l	equ	0xFE1
  1745                           status	equ	0xFD8
  1746                           
  1747 ;; *************** function _twinkle *****************
  1748 ;; Defined at:
  1749 ;;		line 47 in file "lcd_vision.c"
  1750 ;; Parameters:    Size  Location     Type
  1751 ;;		None
  1752 ;; Auto vars:     Size  Location     Type
  1753 ;;  input           1   36[COMRAM] unsigned char 
  1754 ;; Return value:  Size  Location     Type
  1755 ;;		None               void
  1756 ;; Registers used:
  1757 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1758 ;; Tracked objects:
  1759 ;;		On entry : 0/0
  1760 ;;		On exit  : 0/0
  1761 ;;		Unchanged: 0/0
  1762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1764 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1766 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1767 ;;Total ram usage:        1 bytes
  1768 ;; Hardware stack levels used:    1
  1769 ;; Hardware stack levels required when called:    6
  1770 ;; This function calls:
  1771 ;;		__delay_s
  1772 ;;		_lcd_gotoxy
  1773 ;;		_lcd_putrs
  1774 ;;		_read_keyboard
  1775 ;; This function is called by:
  1776 ;;		_set_vision
  1777 ;; This function uses a non-reentrant model
  1778 ;;
  1779                           
  1780                           	psect	text3
  1781  002B30                     __ptext3:
  1782                           	opt stack 0
  1783  002B30                     _twinkle:
  1784                           	opt stack 23
  1785                           
  1786                           ;lcd_vision.c: 48: char input = 1;
  1787                           
  1788                           ;incstack = 0
  1789  002B30  0E01               	movlw	1
  1790  002B32  D024               	goto	L1
  1791  002B34                     l3944:
  1792                           
  1793                           ;lcd_vision.c: 51: _delay_s(500);
  1794  002B34  0E01               	movlw	1
  1795  002B36  6E0A               	movwf	__delay_s@millis+1,c
  1796  002B38  0EF4               	movlw	244
  1797  002B3A  6E09               	movwf	__delay_s@millis,c
  1798  002B3C  EC26  F016         	call	__delay_s	;wreg free
  1799                           
  1800                           ;lcd_vision.c: 52: lcd_gotoxy(7,2);
  1801  002B40  0E02               	movlw	2
  1802  002B42  6E05               	movwf	lcd_gotoxy@y,c
  1803  002B44  0E07               	movlw	7
  1804  002B46  ECE7  F017         	call	_lcd_gotoxy
  1805                           
  1806                           ;lcd_vision.c: 53: lcd_putrs("WARNING!!!");
  1807  002B4A  0E85               	movlw	low STR_16
  1808  002B4C  6E09               	movwf	lcd_putrs@ptr,c
  1809  002B4E  0E0F               	movlw	high STR_16
  1810  002B50  6E0A               	movwf	lcd_putrs@ptr+1,c
  1811  002B52  EC7D  F016         	call	_lcd_putrs	;wreg free
  1812                           
  1813                           ;lcd_vision.c: 54: _delay_s(500);
  1814  002B56  0E01               	movlw	1
  1815  002B58  6E0A               	movwf	__delay_s@millis+1,c
  1816  002B5A  0EF4               	movlw	244
  1817  002B5C  6E09               	movwf	__delay_s@millis,c
  1818  002B5E  EC26  F016         	call	__delay_s	;wreg free
  1819                           
  1820                           ;lcd_vision.c: 55: lcd_gotoxy(7,2);
  1821  002B62  0E02               	movlw	2
  1822  002B64  6E05               	movwf	lcd_gotoxy@y,c
  1823  002B66  0E07               	movlw	7
  1824  002B68  ECE7  F017         	call	_lcd_gotoxy
  1825                           
  1826                           ;lcd_vision.c: 56: lcd_putrs("          ");
  1827  002B6C  0E5E               	movlw	low (STR_1+22)
  1828  002B6E  6E09               	movwf	lcd_putrs@ptr,c
  1829  002B70  0E0F               	movlw	high (STR_1+22)
  1830  002B72  6E0A               	movwf	lcd_putrs@ptr+1,c
  1831  002B74  EC7D  F016         	call	_lcd_putrs	;wreg free
  1832                           
  1833                           ;lcd_vision.c: 57: input = read_keyboard();
  1834  002B78  ECE2  F007         	call	_read_keyboard	;wreg free
  1835  002B7C                     L1:
  1836  002B7C  6E25               	movwf	twinkle@input,c
  1837  002B7E  D000               	goto	l3956
  1838  002B80                     l3956:
  1839  002B80  0E10               	movlw	16
  1840  002B82  1825               	xorwf	twinkle@input,w,c
  1841  002B84  A4D8               	btfss	status,2,c
  1842  002B86  D7D6               	goto	l3944
  1843                           
  1844                           ;lcd_vision.c: 58: }
  1845                           ;lcd_vision.c: 61: state_alarm = ACTIVE;
  1846  002B88  0E00               	movlw	0
  1847  002B8A  0100               	movlb	0	; () banked
  1848  002B8C  6FD7               	movwf	_state_alarm& (0+255),b
  1849                           
  1850                           ; BSR set to: 0
  1851  002B8E  0012               	return		;funcret
  1852  002B90                     __end_of_twinkle:
  1853                           	opt stack 0
  1854                           tblptru	equ	0xFF8
  1855                           tblptrh	equ	0xFF7
  1856                           tblptrl	equ	0xFF6
  1857                           tablat	equ	0xFF5
  1858                           postinc0	equ	0xFEE
  1859                           wreg	equ	0xFE8
  1860                           postdec1	equ	0xFE5
  1861                           fsr1l	equ	0xFE1
  1862                           status	equ	0xFD8
  1863                           
  1864 ;; *************** function _read_keyboard *****************
  1865 ;; Defined at:
  1866 ;;		line 8 in file "keyboard.c"
  1867 ;; Parameters:    Size  Location     Type
  1868 ;;		None
  1869 ;; Auto vars:     Size  Location     Type
  1870 ;;		None
  1871 ;; Return value:  Size  Location     Type
  1872 ;;                  1    wreg      unsigned char 
  1873 ;; Registers used:
  1874 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1875 ;; Tracked objects:
  1876 ;;		On entry : 0/0
  1877 ;;		On exit  : 0/0
  1878 ;;		Unchanged: 0/0
  1879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1882 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1883 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1884 ;;Total ram usage:        1 bytes
  1885 ;; Hardware stack levels used:    1
  1886 ;; Hardware stack levels required when called:    5
  1887 ;; This function calls:
  1888 ;;		_lcd_putrs
  1889 ;;		_sprintf
  1890 ;; This function is called by:
  1891 ;;		_main
  1892 ;;		_twinkle
  1893 ;;		_set_vision
  1894 ;; This function uses a non-reentrant model
  1895 ;;
  1896                           
  1897                           	psect	text4
  1898  000FC4                     __ptext4:
  1899                           	opt stack 0
  1900  000FC4                     _read_keyboard:
  1901                           	opt stack 23
  1902                           
  1903                           ;keyboard.c: 9: LATAbits.LATA0=1;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=0;
  1904                           
  1905                           ; BSR set to: 0
  1906                           ;incstack = 0
  1907  000FC4  8089               	bsf	3977,0,c	;volatile
  1908  000FC6  9289               	bcf	3977,1,c	;volatile
  1909  000FC8  9489               	bcf	3977,2,c	;volatile
  1910  000FCA  9689               	bcf	3977,3,c	;volatile
  1911                           
  1912                           ;keyboard.c: 10: {
  1913                           ;keyboard.c: 11: if (PORTAbits.RA5==1){key=1;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA5==1){};}
  1914  000FCC  AA80               	btfss	3968,5,c	;volatile
  1915  000FCE  D018               	goto	l204
  1916  000FD0  0E01               	movlw	1
  1917  000FD2  6E5E               	movwf	_key,c
  1918  000FD4  0E8C               	movlw	low _buffer2
  1919  000FD6  6E0D               	movwf	sprintf@sp,c
  1920  000FD8  0E00               	movlw	high _buffer2
  1921  000FDA  6E0E               	movwf	sprintf@sp+1,c
  1922  000FDC  0EB6               	movlw	low STR_4
  1923  000FDE  6E0F               	movwf	sprintf@f,c
  1924  000FE0  0E0F               	movlw	high STR_4
  1925  000FE2  6E10               	movwf	sprintf@f+1,c
  1926  000FE4  C05E  F011         	movff	_key,?_sprintf+4
  1927  000FE8  6A12               	clrf	?_sprintf+5,c
  1928  000FEA  EC2D  F009         	call	_sprintf	;wreg free
  1929  000FEE  0E8C               	movlw	low _buffer2
  1930  000FF0  6E09               	movwf	lcd_putrs@ptr,c
  1931  000FF2  0E00               	movlw	high _buffer2
  1932  000FF4  6E0A               	movwf	lcd_putrs@ptr+1,c
  1933  000FF6  EC7D  F016         	call	_lcd_putrs	;wreg free
  1934  000FFA  D000               	goto	l205
  1935  000FFC                     l205:
  1936  000FFC  BA80               	btfsc	3968,5,c	;volatile
  1937  000FFE  D7FE               	goto	l205
  1938  001000                     l204:
  1939                           
  1940                           ;keyboard.c: 12: if (PORTAbits.RA7==1){key=2;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  1941  001000  AE80               	btfss	3968,7,c	;volatile
  1942  001002  D018               	goto	l208
  1943  001004  0E02               	movlw	2
  1944  001006  6E5E               	movwf	_key,c
  1945  001008  0E8C               	movlw	low _buffer2
  1946  00100A  6E0D               	movwf	sprintf@sp,c
  1947  00100C  0E00               	movlw	high _buffer2
  1948  00100E  6E0E               	movwf	sprintf@sp+1,c
  1949  001010  0EB6               	movlw	low STR_4
  1950  001012  6E0F               	movwf	sprintf@f,c
  1951  001014  0E0F               	movlw	high STR_4
  1952  001016  6E10               	movwf	sprintf@f+1,c
  1953  001018  C05E  F011         	movff	_key,?_sprintf+4
  1954  00101C  6A12               	clrf	?_sprintf+5,c
  1955  00101E  EC2D  F009         	call	_sprintf	;wreg free
  1956  001022  0E8C               	movlw	low _buffer2
  1957  001024  6E09               	movwf	lcd_putrs@ptr,c
  1958  001026  0E00               	movlw	high _buffer2
  1959  001028  6E0A               	movwf	lcd_putrs@ptr+1,c
  1960  00102A  EC7D  F016         	call	_lcd_putrs	;wreg free
  1961  00102E  D000               	goto	l209
  1962  001030                     l209:
  1963  001030  BE80               	btfsc	3968,7,c	;volatile
  1964  001032  D7FE               	goto	l209
  1965  001034                     l208:
  1966                           
  1967                           ;keyboard.c: 13: if (PORTAbits.RA6==1){key=3;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA6==1){};}
  1968  001034  AC80               	btfss	3968,6,c	;volatile
  1969  001036  D018               	goto	l212
  1970  001038  0E03               	movlw	3
  1971  00103A  6E5E               	movwf	_key,c
  1972  00103C  0E8C               	movlw	low _buffer2
  1973  00103E  6E0D               	movwf	sprintf@sp,c
  1974  001040  0E00               	movlw	high _buffer2
  1975  001042  6E0E               	movwf	sprintf@sp+1,c
  1976  001044  0EB6               	movlw	low STR_4
  1977  001046  6E0F               	movwf	sprintf@f,c
  1978  001048  0E0F               	movlw	high STR_4
  1979  00104A  6E10               	movwf	sprintf@f+1,c
  1980  00104C  C05E  F011         	movff	_key,?_sprintf+4
  1981  001050  6A12               	clrf	?_sprintf+5,c
  1982  001052  EC2D  F009         	call	_sprintf	;wreg free
  1983  001056  0E8C               	movlw	low _buffer2
  1984  001058  6E09               	movwf	lcd_putrs@ptr,c
  1985  00105A  0E00               	movlw	high _buffer2
  1986  00105C  6E0A               	movwf	lcd_putrs@ptr+1,c
  1987  00105E  EC7D  F016         	call	_lcd_putrs	;wreg free
  1988  001062  D000               	goto	l213
  1989  001064                     l213:
  1990  001064  BC80               	btfsc	3968,6,c	;volatile
  1991  001066  D7FE               	goto	l213
  1992  001068                     l212:
  1993                           
  1994                           ;keyboard.c: 14: if (PORTCbits.RC2==1){key=11; while(PORTCbits.RC2==1){};}
  1995  001068  A482               	btfss	3970,2,c	;volatile
  1996  00106A  D005               	goto	l216
  1997  00106C  0E0B               	movlw	11
  1998  00106E  6E5E               	movwf	_key,c
  1999  001070  D000               	goto	l217
  2000  001072                     l217:
  2001  001072  B482               	btfsc	3970,2,c	;volatile
  2002  001074  D7FE               	goto	l217
  2003  001076                     l216:
  2004                           
  2005                           ;keyboard.c: 15: }
  2006                           ;keyboard.c: 16: LATAbits.LATA0=0;LATAbits.LATA1=1;LATAbits.LATA2=0;LATAbits.LATA3=0;
  2007  001076  9089               	bcf	3977,0,c	;volatile
  2008  001078  8289               	bsf	3977,1,c	;volatile
  2009  00107A  9489               	bcf	3977,2,c	;volatile
  2010  00107C  9689               	bcf	3977,3,c	;volatile
  2011                           
  2012                           ;keyboard.c: 17: {
  2013                           ;keyboard.c: 18: if (PORTAbits.RA5==1){key=4;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA5==1){};}
  2014  00107E  AA80               	btfss	3968,5,c	;volatile
  2015  001080  D018               	goto	l220
  2016  001082  0E04               	movlw	4
  2017  001084  6E5E               	movwf	_key,c
  2018  001086  0E8C               	movlw	low _buffer2
  2019  001088  6E0D               	movwf	sprintf@sp,c
  2020  00108A  0E00               	movlw	high _buffer2
  2021  00108C  6E0E               	movwf	sprintf@sp+1,c
  2022  00108E  0EB6               	movlw	low STR_4
  2023  001090  6E0F               	movwf	sprintf@f,c
  2024  001092  0E0F               	movlw	high STR_4
  2025  001094  6E10               	movwf	sprintf@f+1,c
  2026  001096  C05E  F011         	movff	_key,?_sprintf+4
  2027  00109A  6A12               	clrf	?_sprintf+5,c
  2028  00109C  EC2D  F009         	call	_sprintf	;wreg free
  2029  0010A0  0E8C               	movlw	low _buffer2
  2030  0010A2  6E09               	movwf	lcd_putrs@ptr,c
  2031  0010A4  0E00               	movlw	high _buffer2
  2032  0010A6  6E0A               	movwf	lcd_putrs@ptr+1,c
  2033  0010A8  EC7D  F016         	call	_lcd_putrs	;wreg free
  2034  0010AC  D000               	goto	l221
  2035  0010AE                     l221:
  2036  0010AE  BA80               	btfsc	3968,5,c	;volatile
  2037  0010B0  D7FE               	goto	l221
  2038  0010B2                     l220:
  2039                           
  2040                           ;keyboard.c: 19: if (PORTAbits.RA7==1){key=5;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  2041  0010B2  AE80               	btfss	3968,7,c	;volatile
  2042  0010B4  D018               	goto	l224
  2043  0010B6  0E05               	movlw	5
  2044  0010B8  6E5E               	movwf	_key,c
  2045  0010BA  0E8C               	movlw	low _buffer2
  2046  0010BC  6E0D               	movwf	sprintf@sp,c
  2047  0010BE  0E00               	movlw	high _buffer2
  2048  0010C0  6E0E               	movwf	sprintf@sp+1,c
  2049  0010C2  0EB6               	movlw	low STR_4
  2050  0010C4  6E0F               	movwf	sprintf@f,c
  2051  0010C6  0E0F               	movlw	high STR_4
  2052  0010C8  6E10               	movwf	sprintf@f+1,c
  2053  0010CA  C05E  F011         	movff	_key,?_sprintf+4
  2054  0010CE  6A12               	clrf	?_sprintf+5,c
  2055  0010D0  EC2D  F009         	call	_sprintf	;wreg free
  2056  0010D4  0E8C               	movlw	low _buffer2
  2057  0010D6  6E09               	movwf	lcd_putrs@ptr,c
  2058  0010D8  0E00               	movlw	high _buffer2
  2059  0010DA  6E0A               	movwf	lcd_putrs@ptr+1,c
  2060  0010DC  EC7D  F016         	call	_lcd_putrs	;wreg free
  2061  0010E0  D000               	goto	l225
  2062  0010E2                     l225:
  2063  0010E2  BE80               	btfsc	3968,7,c	;volatile
  2064  0010E4  D7FE               	goto	l225
  2065  0010E6                     l224:
  2066                           
  2067                           ;keyboard.c: 20: if (PORTAbits.RA6==1){key=6;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA6==1){};}
  2068  0010E6  AC80               	btfss	3968,6,c	;volatile
  2069  0010E8  D018               	goto	l228
  2070  0010EA  0E06               	movlw	6
  2071  0010EC  6E5E               	movwf	_key,c
  2072  0010EE  0E8C               	movlw	low _buffer2
  2073  0010F0  6E0D               	movwf	sprintf@sp,c
  2074  0010F2  0E00               	movlw	high _buffer2
  2075  0010F4  6E0E               	movwf	sprintf@sp+1,c
  2076  0010F6  0EB6               	movlw	low STR_4
  2077  0010F8  6E0F               	movwf	sprintf@f,c
  2078  0010FA  0E0F               	movlw	high STR_4
  2079  0010FC  6E10               	movwf	sprintf@f+1,c
  2080  0010FE  C05E  F011         	movff	_key,?_sprintf+4
  2081  001102  6A12               	clrf	?_sprintf+5,c
  2082  001104  EC2D  F009         	call	_sprintf	;wreg free
  2083  001108  0E8C               	movlw	low _buffer2
  2084  00110A  6E09               	movwf	lcd_putrs@ptr,c
  2085  00110C  0E00               	movlw	high _buffer2
  2086  00110E  6E0A               	movwf	lcd_putrs@ptr+1,c
  2087  001110  EC7D  F016         	call	_lcd_putrs	;wreg free
  2088  001114  D000               	goto	l229
  2089  001116                     l229:
  2090  001116  BC80               	btfsc	3968,6,c	;volatile
  2091  001118  D7FE               	goto	l229
  2092  00111A                     l228:
  2093                           
  2094                           ;keyboard.c: 21: if (PORTCbits.RC2==1){key=12; while(PORTCbits.RC2==1){};}
  2095  00111A  A482               	btfss	3970,2,c	;volatile
  2096  00111C  D005               	goto	l232
  2097  00111E  0E0C               	movlw	12
  2098  001120  6E5E               	movwf	_key,c
  2099  001122  D000               	goto	l233
  2100  001124                     l233:
  2101  001124  B482               	btfsc	3970,2,c	;volatile
  2102  001126  D7FE               	goto	l233
  2103  001128                     l232:
  2104                           
  2105                           ;keyboard.c: 22: }
  2106                           ;keyboard.c: 23: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=1;LATAbits.LATA3=0;
  2107  001128  9089               	bcf	3977,0,c	;volatile
  2108  00112A  9289               	bcf	3977,1,c	;volatile
  2109  00112C  8489               	bsf	3977,2,c	;volatile
  2110  00112E  9689               	bcf	3977,3,c	;volatile
  2111                           
  2112                           ;keyboard.c: 24: {
  2113                           ;keyboard.c: 25: if (PORTAbits.RA5==1){key=7;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA5==1){};}
  2114  001130  AA80               	btfss	3968,5,c	;volatile
  2115  001132  D018               	goto	l236
  2116  001134  0E07               	movlw	7
  2117  001136  6E5E               	movwf	_key,c
  2118  001138  0E8C               	movlw	low _buffer2
  2119  00113A  6E0D               	movwf	sprintf@sp,c
  2120  00113C  0E00               	movlw	high _buffer2
  2121  00113E  6E0E               	movwf	sprintf@sp+1,c
  2122  001140  0EB6               	movlw	low STR_4
  2123  001142  6E0F               	movwf	sprintf@f,c
  2124  001144  0E0F               	movlw	high STR_4
  2125  001146  6E10               	movwf	sprintf@f+1,c
  2126  001148  C05E  F011         	movff	_key,?_sprintf+4
  2127  00114C  6A12               	clrf	?_sprintf+5,c
  2128  00114E  EC2D  F009         	call	_sprintf	;wreg free
  2129  001152  0E8C               	movlw	low _buffer2
  2130  001154  6E09               	movwf	lcd_putrs@ptr,c
  2131  001156  0E00               	movlw	high _buffer2
  2132  001158  6E0A               	movwf	lcd_putrs@ptr+1,c
  2133  00115A  EC7D  F016         	call	_lcd_putrs	;wreg free
  2134  00115E  D000               	goto	l237
  2135  001160                     l237:
  2136  001160  BA80               	btfsc	3968,5,c	;volatile
  2137  001162  D7FE               	goto	l237
  2138  001164                     l236:
  2139                           
  2140                           ;keyboard.c: 26: if (PORTAbits.RA7==1){key=8;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  2141  001164  AE80               	btfss	3968,7,c	;volatile
  2142  001166  D018               	goto	l240
  2143  001168  0E08               	movlw	8
  2144  00116A  6E5E               	movwf	_key,c
  2145  00116C  0E8C               	movlw	low _buffer2
  2146  00116E  6E0D               	movwf	sprintf@sp,c
  2147  001170  0E00               	movlw	high _buffer2
  2148  001172  6E0E               	movwf	sprintf@sp+1,c
  2149  001174  0EB6               	movlw	low STR_4
  2150  001176  6E0F               	movwf	sprintf@f,c
  2151  001178  0E0F               	movlw	high STR_4
  2152  00117A  6E10               	movwf	sprintf@f+1,c
  2153  00117C  C05E  F011         	movff	_key,?_sprintf+4
  2154  001180  6A12               	clrf	?_sprintf+5,c
  2155  001182  EC2D  F009         	call	_sprintf	;wreg free
  2156  001186  0E8C               	movlw	low _buffer2
  2157  001188  6E09               	movwf	lcd_putrs@ptr,c
  2158  00118A  0E00               	movlw	high _buffer2
  2159  00118C  6E0A               	movwf	lcd_putrs@ptr+1,c
  2160  00118E  EC7D  F016         	call	_lcd_putrs	;wreg free
  2161  001192  D000               	goto	l241
  2162  001194                     l241:
  2163  001194  BE80               	btfsc	3968,7,c	;volatile
  2164  001196  D7FE               	goto	l241
  2165  001198                     l240:
  2166                           
  2167                           ;keyboard.c: 27: if (PORTAbits.RA6==1){key=9;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA6==1){};}
  2168  001198  AC80               	btfss	3968,6,c	;volatile
  2169  00119A  D018               	goto	l244
  2170  00119C  0E09               	movlw	9
  2171  00119E  6E5E               	movwf	_key,c
  2172  0011A0  0E8C               	movlw	low _buffer2
  2173  0011A2  6E0D               	movwf	sprintf@sp,c
  2174  0011A4  0E00               	movlw	high _buffer2
  2175  0011A6  6E0E               	movwf	sprintf@sp+1,c
  2176  0011A8  0EB6               	movlw	low STR_4
  2177  0011AA  6E0F               	movwf	sprintf@f,c
  2178  0011AC  0E0F               	movlw	high STR_4
  2179  0011AE  6E10               	movwf	sprintf@f+1,c
  2180  0011B0  C05E  F011         	movff	_key,?_sprintf+4
  2181  0011B4  6A12               	clrf	?_sprintf+5,c
  2182  0011B6  EC2D  F009         	call	_sprintf	;wreg free
  2183  0011BA  0E8C               	movlw	low _buffer2
  2184  0011BC  6E09               	movwf	lcd_putrs@ptr,c
  2185  0011BE  0E00               	movlw	high _buffer2
  2186  0011C0  6E0A               	movwf	lcd_putrs@ptr+1,c
  2187  0011C2  EC7D  F016         	call	_lcd_putrs	;wreg free
  2188  0011C6  D000               	goto	l245
  2189  0011C8                     l245:
  2190  0011C8  BC80               	btfsc	3968,6,c	;volatile
  2191  0011CA  D7FE               	goto	l245
  2192  0011CC                     l244:
  2193                           
  2194                           ;keyboard.c: 28: if (PORTCbits.RC2==1){key=13; while(PORTCbits.RC2==1){};}
  2195  0011CC  A482               	btfss	3970,2,c	;volatile
  2196  0011CE  D005               	goto	l248
  2197  0011D0  0E0D               	movlw	13
  2198  0011D2  6E5E               	movwf	_key,c
  2199  0011D4  D000               	goto	l249
  2200  0011D6                     l249:
  2201  0011D6  B482               	btfsc	3970,2,c	;volatile
  2202  0011D8  D7FE               	goto	l249
  2203  0011DA                     l248:
  2204                           
  2205                           ;keyboard.c: 29: }
  2206                           ;keyboard.c: 30: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=1;
  2207  0011DA  9089               	bcf	3977,0,c	;volatile
  2208  0011DC  9289               	bcf	3977,1,c	;volatile
  2209  0011DE  9489               	bcf	3977,2,c	;volatile
  2210  0011E0  8689               	bsf	3977,3,c	;volatile
  2211                           
  2212                           ;keyboard.c: 31: {
  2213                           ;keyboard.c: 32: if (PORTAbits.RA5==1){key=14; while(PORTAbits.RA5==1){};}
  2214  0011E2  AA80               	btfss	3968,5,c	;volatile
  2215  0011E4  D005               	goto	l252
  2216  0011E6  0E0E               	movlw	14
  2217  0011E8  6E5E               	movwf	_key,c
  2218  0011EA  D000               	goto	l253
  2219  0011EC                     l253:
  2220  0011EC  BA80               	btfsc	3968,5,c	;volatile
  2221  0011EE  D7FE               	goto	l253
  2222  0011F0                     l252:
  2223                           
  2224                           ;keyboard.c: 33: if (PORTAbits.RA7==1){key=0;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  2225  0011F0  AE80               	btfss	3968,7,c	;volatile
  2226  0011F2  D018               	goto	l256
  2227  0011F4  0E00               	movlw	0
  2228  0011F6  6E5E               	movwf	_key,c
  2229  0011F8  0E8C               	movlw	low _buffer2
  2230  0011FA  6E0D               	movwf	sprintf@sp,c
  2231  0011FC  0E00               	movlw	high _buffer2
  2232  0011FE  6E0E               	movwf	sprintf@sp+1,c
  2233  001200  0EB6               	movlw	low STR_4
  2234  001202  6E0F               	movwf	sprintf@f,c
  2235  001204  0E0F               	movlw	high STR_4
  2236  001206  6E10               	movwf	sprintf@f+1,c
  2237  001208  C05E  F011         	movff	_key,?_sprintf+4
  2238  00120C  6A12               	clrf	?_sprintf+5,c
  2239  00120E  EC2D  F009         	call	_sprintf	;wreg free
  2240  001212  0E8C               	movlw	low _buffer2
  2241  001214  6E09               	movwf	lcd_putrs@ptr,c
  2242  001216  0E00               	movlw	high _buffer2
  2243  001218  6E0A               	movwf	lcd_putrs@ptr+1,c
  2244  00121A  EC7D  F016         	call	_lcd_putrs	;wreg free
  2245  00121E  D000               	goto	l257
  2246  001220                     l257:
  2247  001220  BE80               	btfsc	3968,7,c	;volatile
  2248  001222  D7FE               	goto	l257
  2249  001224                     l256:
  2250                           
  2251                           ;keyboard.c: 34: if (PORTAbits.RA6==1){key=15; while(PORTAbits.RA6==1){};}
  2252  001224  AC80               	btfss	3968,6,c	;volatile
  2253  001226  D005               	goto	l260
  2254  001228  0E0F               	movlw	15
  2255  00122A  6E5E               	movwf	_key,c
  2256  00122C  D000               	goto	l261
  2257  00122E                     l261:
  2258  00122E  BC80               	btfsc	3968,6,c	;volatile
  2259  001230  D7FE               	goto	l261
  2260  001232                     l260:
  2261                           
  2262                           ;keyboard.c: 35: if (PORTCbits.RC2==1){key=16; while(PORTCbits.RC2==1){};}
  2263  001232  A482               	btfss	3970,2,c	;volatile
  2264  001234  D007               	goto	l3588
  2265  001236  0E10               	movlw	16
  2266  001238  6E5E               	movwf	_key,c
  2267  00123A  D000               	goto	l265
  2268  00123C                     l265:
  2269  00123C  A482               	btfss	3970,2,c	;volatile
  2270  00123E  D002               	goto	l3588
  2271  001240  D7FD               	goto	l265
  2272  001242  D000               	goto	l3588
  2273  001244                     l3588:
  2274                           
  2275                           ;keyboard.c: 36: }
  2276                           ;keyboard.c: 37: _delay((unsigned long)((98)*(8000000/4000.0)));
  2277  001244  0EFF               	movlw	255
  2278  001246  6E24               	movwf	??_read_keyboard& (0+255),c
  2279  001248  0E8A               	movlw	138
  2280  00124A                     u4367:
  2281  00124A  2EE8               	decfsz	wreg,f,c
  2282  00124C  D7FE               	goto	u4367
  2283  00124E  2E24               	decfsz	??_read_keyboard& (0+255),f,c
  2284  001250  D7FC               	goto	u4367
  2285  001252  D000               	nop2	
  2286                           
  2287                           ;keyboard.c: 40: return key;
  2288  001254  505E               	movf	_key,w,c
  2289  001256  0012               	return	
  2290  001258  0012               	return		;funcret
  2291  00125A                     __end_of_read_keyboard:
  2292                           	opt stack 0
  2293                           tblptru	equ	0xFF8
  2294                           tblptrh	equ	0xFF7
  2295                           tblptrl	equ	0xFF6
  2296                           tablat	equ	0xFF5
  2297                           postinc0	equ	0xFEE
  2298                           wreg	equ	0xFE8
  2299                           postdec1	equ	0xFE5
  2300                           fsr1l	equ	0xFE1
  2301                           status	equ	0xFD8
  2302                           
  2303 ;; *************** function _sprintf *****************
  2304 ;; Defined at:
  2305 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2306 ;; Parameters:    Size  Location     Type
  2307 ;;  sp              2   12[COMRAM] PTR unsigned char 
  2308 ;;		 -> buffer2(20), 
  2309 ;;  f               2   14[COMRAM] PTR const unsigned char 
  2310 ;;		 -> STR_15(10), STR_14(15), STR_13(5), STR_12(5), 
  2311 ;;		 -> STR_11(5), STR_10(5), STR_9(5), STR_8(5), 
  2312 ;;		 -> STR_7(5), STR_6(5), STR_5(5), STR_4(5), 
  2313 ;; Auto vars:     Size  Location     Type
  2314 ;;  tmpval          4    0        struct .
  2315 ;;  cp              3    0        PTR const unsigned char 
  2316 ;;  width           2   32[COMRAM] int 
  2317 ;;  val             2   29[COMRAM] unsigned int 
  2318 ;;  ap              2   26[COMRAM] PTR void [1]
  2319 ;;		 -> ?_sprintf(2), 
  2320 ;;  len             2    0        unsigned int 
  2321 ;;  c               1   34[COMRAM] char 
  2322 ;;  prec            1   31[COMRAM] char 
  2323 ;;  flag            1   28[COMRAM] unsigned char 
  2324 ;; Return value:  Size  Location     Type
  2325 ;;                  2   12[COMRAM] int 
  2326 ;; Registers used:
  2327 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2328 ;; Tracked objects:
  2329 ;;		On entry : 0/0
  2330 ;;		On exit  : 0/0
  2331 ;;		Unchanged: 0/0
  2332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2333 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2334 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2335 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2336 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2337 ;;Total ram usage:       23 bytes
  2338 ;; Hardware stack levels used:    1
  2339 ;; Hardware stack levels required when called:    1
  2340 ;; This function calls:
  2341 ;;		___lwdiv
  2342 ;;		___lwmod
  2343 ;;		___wmul
  2344 ;;		_isdigit
  2345 ;; This function is called by:
  2346 ;;		_read_keyboard
  2347 ;;		_write_Date
  2348 ;; This function uses a non-reentrant model
  2349 ;;
  2350                           
  2351                           	psect	text5
  2352  00125A                     __ptext5:
  2353                           	opt stack 0
  2354  00125A                     _sprintf:
  2355                           	opt stack 27
  2356                           
  2357                           ;doprnt.c: 494: va_list ap;
  2358                           ;doprnt.c: 499: signed char c;
  2359                           ;doprnt.c: 501: int width;
  2360                           ;doprnt.c: 506: signed char prec;
  2361                           ;doprnt.c: 508: unsigned char flag;
  2362                           ;doprnt.c: 523: union {
  2363                           ;doprnt.c: 524: unsigned long vd;
  2364                           ;doprnt.c: 525: double integ;
  2365                           ;doprnt.c: 526: } tmpval;
  2366                           ;doprnt.c: 528: unsigned int val;
  2367                           ;doprnt.c: 529: unsigned len;
  2368                           ;doprnt.c: 530: const char * cp;
  2369                           ;doprnt.c: 533: *ap = __va_start();
  2370                           
  2371                           ;incstack = 0
  2372  00125A  0E11               	movlw	low (?_sprintf+4)
  2373  00125C  6E1B               	movwf	sprintf@ap,c
  2374  00125E  0E00               	movlw	high (?_sprintf+4)
  2375  001260  6E1C               	movwf	sprintf@ap+1,c
  2376                           
  2377                           ;doprnt.c: 536: while(c = *f++) {
  2378  001262  D117               	goto	l3318
  2379  001264                     l3236:
  2380                           
  2381                           ;doprnt.c: 538: if(c != '%')
  2382  001264  0E25               	movlw	37
  2383  001266  1823               	xorwf	sprintf@c,w,c
  2384  001268  B4D8               	btfsc	status,2,c
  2385  00126A  D009               	goto	l3242
  2386                           
  2387                           ;doprnt.c: 540: {
  2388                           ;doprnt.c: 541: ((*sp++ = (c)));
  2389  00126C  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2390  001270  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2391  001274  C023  FFDF         	movff	sprintf@c,indf2
  2392  001278  4A0D               	infsnz	sprintf@sp,f,c
  2393  00127A  2A0E               	incf	sprintf@sp+1,f,c
  2394                           
  2395                           ;doprnt.c: 542: continue;
  2396  00127C  D10A               	goto	l3318
  2397  00127E                     l3242:
  2398                           
  2399                           ;doprnt.c: 543: }
  2400                           ;doprnt.c: 546: width = 0;
  2401  00127E  0E00               	movlw	0
  2402  001280  6E22               	movwf	sprintf@width+1,c
  2403  001282  0E00               	movlw	0
  2404  001284  6E21               	movwf	sprintf@width,c
  2405                           
  2406                           ;doprnt.c: 548: flag = 0;
  2407  001286  0E00               	movlw	0
  2408  001288  6E1D               	movwf	sprintf@flag,c
  2409                           
  2410                           ;doprnt.c: 551: switch(*f) {
  2411                           
  2412                           ;doprnt.c: 550: for(;;) {
  2413  00128A  D005               	goto	l3248
  2414  00128C                     l3244:
  2415                           
  2416                           ;doprnt.c: 580: flag |= 0x04;
  2417  00128C  841D               	bsf	sprintf@flag,2,c
  2418                           
  2419                           ;doprnt.c: 581: f++;
  2420  00128E  4A0F               	infsnz	sprintf@f,f,c
  2421  001290  2A10               	incf	sprintf@f+1,f,c
  2422                           
  2423                           ;doprnt.c: 582: continue;
  2424  001292  D001               	goto	l3248
  2425                           
  2426                           ;doprnt.c: 584: }
  2427  001294  D00B               	goto	l3250
  2428  001296                     l3248:
  2429  001296  C00F  FFF6         	movff	sprintf@f,tblptrl
  2430  00129A  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2431  00129E                     	if	0	;tblptru may be non-zero
  2432  00129E                     	endif
  2433  00129E                     	if	0	;tblptru may be non-zero
  2434  00129E                     	endif
  2435  00129E  0008               	tblrd		*
  2436  0012A0  50F5               	movf	tablat,w,c
  2437                           
  2438                           ; Switch size 1, requested type "space"
  2439                           ; Number of cases is 1, Range of values is 48 to 48
  2440                           ; switch strategies available:
  2441                           ; Name         Instructions Cycles
  2442                           ; simple_byte            4     3 (average)
  2443                           ;	Chosen strategy is simple_byte
  2444  0012A2  0A30               	xorlw	48	; case 48
  2445  0012A4  B4D8               	btfsc	status,2,c
  2446  0012A6  D7F2               	goto	l3244
  2447                           
  2448                           ;doprnt.c: 585: break;
  2449  0012A8  D001               	goto	l3250
  2450                           
  2451                           ;doprnt.c: 586: }
  2452  0012AA  D7F5               	goto	l3248
  2453  0012AC                     l3250:
  2454                           
  2455                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2456  0012AC  C00F  FFF6         	movff	sprintf@f,tblptrl
  2457  0012B0  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2458  0012B4                     	if	0	;tblptru may be non-zero
  2459  0012B4                     	endif
  2460  0012B4                     	if	0	;tblptru may be non-zero
  2461  0012B4                     	endif
  2462  0012B4  0008               	tblrd		*
  2463  0012B6  50F5               	movf	tablat,w,c
  2464  0012B8  ECF9  F017         	call	_isdigit
  2465  0012BC  A0D8               	btfss	status,0,c
  2466  0012BE  D03A               	goto	l3266
  2467                           
  2468                           ;doprnt.c: 598: width = 0;
  2469  0012C0  0E00               	movlw	0
  2470  0012C2  6E22               	movwf	sprintf@width+1,c
  2471  0012C4  0E00               	movlw	0
  2472  0012C6  6E21               	movwf	sprintf@width,c
  2473  0012C8  D000               	goto	l3254
  2474  0012CA                     l3254:
  2475                           
  2476                           ;doprnt.c: 600: width *= 10;
  2477  0012CA  C021  F001         	movff	sprintf@width,___wmul@multiplier
  2478  0012CE  C022  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  2479  0012D2  0E00               	movlw	0
  2480  0012D4  6E04               	movwf	___wmul@multiplicand+1,c
  2481  0012D6  0E0A               	movlw	10
  2482  0012D8  6E03               	movwf	___wmul@multiplicand,c
  2483  0012DA  ECAE  F017         	call	___wmul	;wreg free
  2484  0012DE  C001  F021         	movff	?___wmul,sprintf@width
  2485  0012E2  C002  F022         	movff	?___wmul+1,sprintf@width+1
  2486                           
  2487                           ;doprnt.c: 601: width += *f++ - '0';
  2488  0012E6  0ED0               	movlw	208
  2489  0012E8  6E17               	movwf	??_sprintf& (0+255),c
  2490  0012EA  0EFF               	movlw	255
  2491  0012EC  6E18               	movwf	(??_sprintf+1)& (0+255),c
  2492  0012EE  C00F  FFF6         	movff	sprintf@f,tblptrl
  2493  0012F2  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2494  0012F6                     	if	0	;tblptru may be non-zero
  2495  0012F6                     	endif
  2496  0012F6                     	if	0	;tblptru may be non-zero
  2497  0012F6                     	endif
  2498  0012F6  0008               	tblrd		*
  2499  0012F8  50F5               	movf	tablat,w,c
  2500  0012FA  6E19               	movwf	(??_sprintf+2)& (0+255),c
  2501  0012FC  6A1A               	clrf	(??_sprintf+3)& (0+255),c
  2502  0012FE  5017               	movf	??_sprintf,w,c
  2503  001300  2619               	addwf	??_sprintf+2,f,c
  2504  001302  5018               	movf	??_sprintf+1,w,c
  2505  001304  221A               	addwfc	??_sprintf+3,f,c
  2506  001306  5019               	movf	??_sprintf+2,w,c
  2507  001308  2621               	addwf	sprintf@width,f,c
  2508  00130A  501A               	movf	??_sprintf+3,w,c
  2509  00130C  2222               	addwfc	sprintf@width+1,f,c
  2510  00130E  4A0F               	infsnz	sprintf@f,f,c
  2511  001310  2A10               	incf	sprintf@f+1,f,c
  2512                           
  2513                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2514  001312  C00F  FFF6         	movff	sprintf@f,tblptrl
  2515  001316  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2516  00131A                     	if	0	;tblptru may be non-zero
  2517  00131A                     	endif
  2518  00131A                     	if	0	;tblptru may be non-zero
  2519  00131A                     	endif
  2520  00131A  0008               	tblrd		*
  2521  00131C  50F5               	movf	tablat,w,c
  2522  00131E  ECF9  F017         	call	_isdigit
  2523  001322  A0D8               	btfss	status,0,c
  2524  001324  D007               	goto	l3266
  2525  001326  D7D1               	goto	l3254
  2526                           
  2527                           ;doprnt.c: 608: }
  2528                           ;doprnt.c: 635: switch(c = *f++) {
  2529  001328  D005               	goto	l3266
  2530                           
  2531                           ;doprnt.c: 638: goto alldone;
  2532                           
  2533                           ;doprnt.c: 637: case 0:
  2534  00132A  D0C1               	goto	l3320
  2535                           
  2536                           ;doprnt.c: 813: continue;
  2537                           
  2538                           ;doprnt.c: 802: default:
  2539  00132C  D0B2               	goto	l3318
  2540  00132E                     l3262:
  2541                           
  2542                           ;doprnt.c: 818: flag |= 0xC0;
  2543  00132E  0EC0               	movlw	192
  2544  001330  121D               	iorwf	sprintf@flag,f,c
  2545                           
  2546                           ;doprnt.c: 822: }
  2547                           
  2548                           ;doprnt.c: 819: break;
  2549  001332  D011               	goto	l3268
  2550  001334                     l3266:
  2551  001334  C00F  FFF6         	movff	sprintf@f,tblptrl
  2552  001338  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2553  00133C  4A0F               	infsnz	sprintf@f,f,c
  2554  00133E  2A10               	incf	sprintf@f+1,f,c
  2555  001340                     	if	0	;tblptru may be non-zero
  2556  001340                     	endif
  2557  001340                     	if	0	;tblptru may be non-zero
  2558  001340                     	endif
  2559  001340  0008               	tblrd		*
  2560  001342  CFF5 F023          	movff	tablat,sprintf@c
  2561  001346  5023               	movf	sprintf@c,w,c
  2562                           
  2563                           ; Switch size 1, requested type "space"
  2564                           ; Number of cases is 2, Range of values is 0 to 117
  2565                           ; switch strategies available:
  2566                           ; Name         Instructions Cycles
  2567                           ; simple_byte            7     4 (average)
  2568                           ;	Chosen strategy is simple_byte
  2569  001348  0A00               	xorlw	0	; case 0
  2570  00134A  B4D8               	btfsc	status,2,c
  2571  00134C  D0B0               	goto	l3320
  2572  00134E  0A75               	xorlw	117	; case 117
  2573  001350  B4D8               	btfsc	status,2,c
  2574  001352  D7ED               	goto	l3262
  2575  001354  D09E               	goto	l3318
  2576  001356                     l3268:
  2577                           
  2578                           ;doprnt.c: 1273: {
  2579                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2580  001356  C01B  FFD9         	movff	sprintf@ap,fsr2l
  2581  00135A  C01C  FFDA         	movff	sprintf@ap+1,fsr2h
  2582  00135E  CFDE F01E          	movff	postinc2,sprintf@val
  2583  001362  CFDD F01F          	movff	postdec2,sprintf@val+1
  2584  001366  0E02               	movlw	2
  2585  001368  261B               	addwf	sprintf@ap,f,c
  2586  00136A  0E00               	movlw	0
  2587  00136C  221C               	addwfc	sprintf@ap+1,f,c
  2588                           
  2589                           ;doprnt.c: 1287: }
  2590                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2591  00136E  0E01               	movlw	1
  2592  001370  6E23               	movwf	sprintf@c,c
  2593  001372                     l3274:
  2594  001372  0E05               	movlw	5
  2595  001374  1823               	xorwf	sprintf@c,w,c
  2596  001376  B4D8               	btfsc	status,2,c
  2597  001378  D016               	goto	l3286
  2598  00137A  D001               	goto	l3278
  2599  00137C  D014               	goto	l3286
  2600  00137E                     l3278:
  2601                           
  2602                           ;doprnt.c: 1306: if(val < dpowers[c])
  2603  00137E  5023               	movf	sprintf@c,w,c
  2604  001380  0D02               	mullw	2
  2605  001382  0E01               	movlw	low _dpowers
  2606  001384  24F3               	addwf	prodl,w,c
  2607  001386  6EF6               	movwf	tblptrl,c
  2608  001388  0E0F               	movlw	high _dpowers
  2609  00138A  20F4               	addwfc	prodh,w,c
  2610  00138C  6EF7               	movwf	tblptrh,c
  2611  00138E                     	if	0	;There are less than 3 active tblptr bytes
  2612  00138E                     	endif
  2613  00138E  0009               	tblrd		*+
  2614  001390  50F5               	movf	tablat,w,c
  2615  001392  5C1E               	subwf	sprintf@val,w,c
  2616  001394  0009               	tblrd		*+
  2617  001396  50F5               	movf	tablat,w,c
  2618  001398  581F               	subwfb	sprintf@val+1,w,c
  2619  00139A  A0D8               	btfss	status,0,c
  2620  00139C  D004               	goto	l3286
  2621  00139E  D001               	goto	l3282
  2622                           
  2623                           ;doprnt.c: 1307: break;
  2624  0013A0  D002               	goto	l3286
  2625  0013A2                     l3282:
  2626  0013A2  2A23               	incf	sprintf@c,f,c
  2627  0013A4  D7E6               	goto	l3274
  2628  0013A6                     l3286:
  2629                           
  2630                           ;doprnt.c: 1381: if(width > c)
  2631  0013A6  0E80               	movlw	128
  2632  0013A8  BE23               	btfsc	sprintf@c,7,c
  2633  0013AA  0E7F               	movlw	127
  2634  0013AC  6E17               	movwf	??_sprintf& (0+255),c
  2635  0013AE  5021               	movf	sprintf@width,w,c
  2636  0013B0  5C23               	subwf	sprintf@c,w,c
  2637  0013B2  5022               	movf	sprintf@width+1,w,c
  2638  0013B4  0A80               	xorlw	128
  2639  0013B6  5817               	subwfb	??_sprintf& (0+255),w,c
  2640  0013B8  B0D8               	btfsc	status,0,c
  2641  0013BA  D007               	goto	l3290
  2642                           
  2643                           ;doprnt.c: 1382: width -= c;
  2644  0013BC  5023               	movf	sprintf@c,w,c
  2645  0013BE  5E21               	subwf	sprintf@width,f,c
  2646  0013C0  0E00               	movlw	0
  2647  0013C2  BE23               	btfsc	sprintf@c,7,c
  2648  0013C4  0EFF               	movlw	255
  2649  0013C6  5A22               	subwfb	sprintf@width+1,f,c
  2650  0013C8  D005               	goto	l3292
  2651  0013CA                     l3290:
  2652                           
  2653                           ;doprnt.c: 1383: else
  2654                           ;doprnt.c: 1384: width = 0;
  2655  0013CA  0E00               	movlw	0
  2656  0013CC  6E22               	movwf	sprintf@width+1,c
  2657  0013CE  0E00               	movlw	0
  2658  0013D0  6E21               	movwf	sprintf@width,c
  2659  0013D2  D000               	goto	l3292
  2660  0013D4                     l3292:
  2661                           
  2662                           ;doprnt.c: 1387: if(flag & 0x04) {
  2663  0013D4  A41D               	btfss	sprintf@flag,2,c
  2664  0013D6  D015               	goto	l3302
  2665                           
  2666                           ;doprnt.c: 1415: if(width)
  2667  0013D8  5021               	movf	sprintf@width,w,c
  2668  0013DA  1022               	iorwf	sprintf@width+1,w,c
  2669  0013DC  B4D8               	btfsc	status,2,c
  2670  0013DE  D026               	goto	l662
  2671  0013E0                     l3296:
  2672                           
  2673                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  2674  0013E0  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2675  0013E4  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2676  0013E8  0E30               	movlw	48
  2677  0013EA  6EDF               	movwf	indf2,c
  2678  0013EC  4A0D               	infsnz	sprintf@sp,f,c
  2679  0013EE  2A0E               	incf	sprintf@sp+1,f,c
  2680                           
  2681                           ;doprnt.c: 1418: while(--width);
  2682  0013F0  0621               	decf	sprintf@width,f,c
  2683  0013F2  A0D8               	btfss	status,0,c
  2684  0013F4  0622               	decf	sprintf@width+1,f,c
  2685  0013F6  5021               	movf	sprintf@width,w,c
  2686  0013F8  1022               	iorwf	sprintf@width+1,w,c
  2687  0013FA  B4D8               	btfsc	status,2,c
  2688  0013FC  D017               	goto	l662
  2689  0013FE  D7F0               	goto	l3296
  2690                           
  2691                           ;doprnt.c: 1420: } else
  2692  001400  D015               	goto	l662
  2693  001402                     l3302:
  2694                           
  2695                           ;doprnt.c: 1422: {
  2696                           ;doprnt.c: 1424: if(width
  2697                           ;doprnt.c: 1428: )
  2698  001402  5021               	movf	sprintf@width,w,c
  2699  001404  1022               	iorwf	sprintf@width+1,w,c
  2700  001406  B4D8               	btfsc	status,2,c
  2701  001408  D011               	goto	l662
  2702  00140A                     l3304:
  2703                           
  2704                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  2705  00140A  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2706  00140E  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2707  001412  0E20               	movlw	32
  2708  001414  6EDF               	movwf	indf2,c
  2709  001416  4A0D               	infsnz	sprintf@sp,f,c
  2710  001418  2A0E               	incf	sprintf@sp+1,f,c
  2711                           
  2712                           ;doprnt.c: 1431: while(--width);
  2713  00141A  0621               	decf	sprintf@width,f,c
  2714  00141C  A0D8               	btfss	status,0,c
  2715  00141E  0622               	decf	sprintf@width+1,f,c
  2716  001420  5021               	movf	sprintf@width,w,c
  2717  001422  1022               	iorwf	sprintf@width+1,w,c
  2718  001424  B4D8               	btfsc	status,2,c
  2719  001426  D002               	goto	l662
  2720  001428  D7F0               	goto	l3304
  2721  00142A  D000               	goto	l662
  2722  00142C                     l662:
  2723                           
  2724                           ;doprnt.c: 1469: }
  2725                           ;doprnt.c: 1472: prec = c;
  2726  00142C  C023  F020         	movff	sprintf@c,sprintf@prec
  2727                           
  2728                           ;doprnt.c: 1474: while(prec--) {
  2729  001430  D02A               	goto	l3316
  2730  001432                     l3310:
  2731                           
  2732                           ;doprnt.c: 1478: {
  2733                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2734  001432  5020               	movf	sprintf@prec,w,c
  2735  001434  0D02               	mullw	2
  2736  001436  0E01               	movlw	low _dpowers
  2737  001438  24F3               	addwf	prodl,w,c
  2738  00143A  6EF6               	movwf	tblptrl,c
  2739  00143C  0E0F               	movlw	high _dpowers
  2740  00143E  20F4               	addwfc	prodh,w,c
  2741  001440  6EF7               	movwf	tblptrh,c
  2742  001442                     	if	0	;There are less than 3 active tblptr bytes
  2743  001442                     	endif
  2744  001442  0009               	tblrd		*+
  2745  001444  CFF5 F003          	movff	tablat,___lwdiv@divisor
  2746  001448  000A               	tblrd		*-
  2747  00144A  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  2748  00144E  C01E  F001         	movff	sprintf@val,___lwdiv@dividend
  2749  001452  C01F  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  2750  001456  ECF8  F015         	call	___lwdiv	;wreg free
  2751  00145A  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  2752  00145E  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  2753  001462  0E00               	movlw	0
  2754  001464  6E0B               	movwf	___lwmod@divisor+1,c
  2755  001466  0E0A               	movlw	10
  2756  001468  6E0A               	movwf	___lwmod@divisor,c
  2757  00146A  ECA7  F016         	call	___lwmod	;wreg free
  2758  00146E  5008               	movf	?___lwmod,w,c
  2759  001470  0F30               	addlw	48
  2760  001472  6E23               	movwf	sprintf@c,c
  2761                           
  2762                           ;doprnt.c: 1523: }
  2763                           ;doprnt.c: 1524: ((*sp++ = (c)));
  2764  001474  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2765  001478  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2766  00147C  C023  FFDF         	movff	sprintf@c,indf2
  2767  001480  4A0D               	infsnz	sprintf@sp,f,c
  2768  001482  2A0E               	incf	sprintf@sp+1,f,c
  2769  001484  D000               	goto	l3316
  2770  001486                     l3316:
  2771  001486  0620               	decf	sprintf@prec,f,c
  2772  001488  2820               	incf	sprintf@prec,w,c
  2773  00148A  B4D8               	btfsc	status,2,c
  2774  00148C  D002               	goto	l3318
  2775  00148E  D7D1               	goto	l3310
  2776  001490  D000               	goto	l3318
  2777  001492                     l3318:
  2778  001492  C00F  FFF6         	movff	sprintf@f,tblptrl
  2779  001496  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2780  00149A  4A0F               	infsnz	sprintf@f,f,c
  2781  00149C  2A10               	incf	sprintf@f+1,f,c
  2782  00149E                     	if	0	;tblptru may be non-zero
  2783  00149E                     	endif
  2784  00149E                     	if	0	;tblptru may be non-zero
  2785  00149E                     	endif
  2786  00149E  0008               	tblrd		*
  2787  0014A0  CFF5 F023          	movff	tablat,sprintf@c
  2788  0014A4  5023               	movf	sprintf@c,w,c
  2789  0014A6  B4D8               	btfsc	status,2,c
  2790  0014A8  D002               	goto	l3320
  2791  0014AA  D6DC               	goto	l3236
  2792  0014AC  D000               	goto	l3320
  2793  0014AE                     l3320:
  2794                           
  2795                           ;doprnt.c: 1538: *sp = 0;
  2796  0014AE  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2797  0014B2  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2798  0014B6  0E00               	movlw	0
  2799  0014B8  6EDF               	movwf	indf2,c
  2800  0014BA  0012               	return	
  2801                           
  2802                           ;doprnt.c: 1540: return 0;
  2803                           ;	Return value of _sprintf is never used
  2804  0014BC  0012               	return		;funcret
  2805  0014BE                     __end_of_sprintf:
  2806                           	opt stack 0
  2807                           tblptru	equ	0xFF8
  2808                           tblptrh	equ	0xFF7
  2809                           tblptrl	equ	0xFF6
  2810                           tablat	equ	0xFF5
  2811                           prodh	equ	0xFF4
  2812                           prodl	equ	0xFF3
  2813                           postinc0	equ	0xFEE
  2814                           wreg	equ	0xFE8
  2815                           postdec1	equ	0xFE5
  2816                           fsr1l	equ	0xFE1
  2817                           indf2	equ	0xFDF
  2818                           postinc2	equ	0xFDE
  2819                           postdec2	equ	0xFDD
  2820                           fsr2h	equ	0xFDA
  2821                           fsr2l	equ	0xFD9
  2822                           status	equ	0xFD8
  2823                           
  2824 ;; *************** function _isdigit *****************
  2825 ;; Defined at:
  2826 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\isdigit.c"
  2827 ;; Parameters:    Size  Location     Type
  2828 ;;  c               1    wreg     unsigned char 
  2829 ;; Auto vars:     Size  Location     Type
  2830 ;;  c               1    2[COMRAM] unsigned char 
  2831 ;; Return value:  Size  Location     Type
  2832 ;;		None               void
  2833 ;; Registers used:
  2834 ;;		wreg, status,2, status,0
  2835 ;; Tracked objects:
  2836 ;;		On entry : 0/0
  2837 ;;		On exit  : 0/0
  2838 ;;		Unchanged: 0/0
  2839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2841 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2842 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2843 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2844 ;;Total ram usage:        3 bytes
  2845 ;; Hardware stack levels used:    1
  2846 ;; This function calls:
  2847 ;;		Nothing
  2848 ;; This function is called by:
  2849 ;;		_sprintf
  2850 ;; This function uses a non-reentrant model
  2851 ;;
  2852                           
  2853                           	psect	text6
  2854  002FF2                     __ptext6:
  2855                           	opt stack 0
  2856  002FF2                     _isdigit:
  2857                           	opt stack 27
  2858                           
  2859                           ;incstack = 0
  2860                           ;isdigit@c stored from wreg
  2861  002FF2  6E03               	movwf	isdigit@c,c
  2862  002FF4  0E00               	movlw	0
  2863  002FF6  6E02               	movwf	_isdigit$2359,c
  2864  002FF8  0E3A               	movlw	58
  2865  002FFA  6003               	cpfslt	isdigit@c,c
  2866  002FFC  D006               	goto	l2960
  2867  002FFE  0E2F               	movlw	47
  2868  003000  6403               	cpfsgt	isdigit@c,c
  2869  003002  D003               	goto	l2960
  2870  003004  0E01               	movlw	1
  2871  003006  6E02               	movwf	_isdigit$2359,c
  2872  003008  D000               	goto	l2960
  2873  00300A                     l2960:
  2874  00300A  C002  F001         	movff	_isdigit$2359,??_isdigit
  2875  00300E  3001               	rrcf	??_isdigit,w,c
  2876  003010  0012               	return	
  2877  003012  0012               	return		;funcret
  2878  003014                     __end_of_isdigit:
  2879                           	opt stack 0
  2880                           tblptru	equ	0xFF8
  2881                           tblptrh	equ	0xFF7
  2882                           tblptrl	equ	0xFF6
  2883                           tablat	equ	0xFF5
  2884                           prodh	equ	0xFF4
  2885                           prodl	equ	0xFF3
  2886                           postinc0	equ	0xFEE
  2887                           wreg	equ	0xFE8
  2888                           postdec1	equ	0xFE5
  2889                           fsr1l	equ	0xFE1
  2890                           indf2	equ	0xFDF
  2891                           postinc2	equ	0xFDE
  2892                           postdec2	equ	0xFDD
  2893                           fsr2h	equ	0xFDA
  2894                           fsr2l	equ	0xFD9
  2895                           status	equ	0xFD8
  2896                           
  2897 ;; *************** function ___lwmod *****************
  2898 ;; Defined at:
  2899 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lwmod.c"
  2900 ;; Parameters:    Size  Location     Type
  2901 ;;  dividend        2    7[COMRAM] unsigned int 
  2902 ;;  divisor         2    9[COMRAM] unsigned int 
  2903 ;; Auto vars:     Size  Location     Type
  2904 ;;  counter         1   11[COMRAM] unsigned char 
  2905 ;; Return value:  Size  Location     Type
  2906 ;;                  2    7[COMRAM] unsigned int 
  2907 ;; Registers used:
  2908 ;;		wreg, status,2, status,0
  2909 ;; Tracked objects:
  2910 ;;		On entry : 0/0
  2911 ;;		On exit  : 0/0
  2912 ;;		Unchanged: 0/0
  2913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2914 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2915 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2917 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2918 ;;Total ram usage:        5 bytes
  2919 ;; Hardware stack levels used:    1
  2920 ;; This function calls:
  2921 ;;		Nothing
  2922 ;; This function is called by:
  2923 ;;		_sprintf
  2924 ;; This function uses a non-reentrant model
  2925 ;;
  2926                           
  2927                           	psect	text7
  2928  002D4E                     __ptext7:
  2929                           	opt stack 0
  2930  002D4E                     ___lwmod:
  2931                           	opt stack 27
  2932                           
  2933                           ;incstack = 0
  2934  002D4E  500A               	movf	___lwmod@divisor,w,c
  2935  002D50  100B               	iorwf	___lwmod@divisor+1,w,c
  2936  002D52  B4D8               	btfsc	status,2,c
  2937  002D54  D01D               	goto	l1316
  2938  002D56  0E01               	movlw	1
  2939  002D58  6E0C               	movwf	___lwmod@counter,c
  2940  002D5A  D005               	goto	l3196
  2941  002D5C                     l3194:
  2942  002D5C  90D8               	bcf	status,0,c
  2943  002D5E  360A               	rlcf	___lwmod@divisor,f,c
  2944  002D60  360B               	rlcf	___lwmod@divisor+1,f,c
  2945  002D62  2A0C               	incf	___lwmod@counter,f,c
  2946  002D64  D000               	goto	l3196
  2947  002D66                     l3196:
  2948  002D66  BE0B               	btfsc	___lwmod@divisor+1,7,c
  2949  002D68  D002               	goto	l3198
  2950  002D6A  D7F8               	goto	l3194
  2951  002D6C  D000               	goto	l3198
  2952  002D6E                     l3198:
  2953  002D6E  500A               	movf	___lwmod@divisor,w,c
  2954  002D70  5C08               	subwf	___lwmod@dividend,w,c
  2955  002D72  500B               	movf	___lwmod@divisor+1,w,c
  2956  002D74  5809               	subwfb	___lwmod@dividend+1,w,c
  2957  002D76  A0D8               	btfss	status,0,c
  2958  002D78  D005               	goto	l3202
  2959  002D7A  500A               	movf	___lwmod@divisor,w,c
  2960  002D7C  5E08               	subwf	___lwmod@dividend,f,c
  2961  002D7E  500B               	movf	___lwmod@divisor+1,w,c
  2962  002D80  5A09               	subwfb	___lwmod@dividend+1,f,c
  2963  002D82  D000               	goto	l3202
  2964  002D84                     l3202:
  2965  002D84  90D8               	bcf	status,0,c
  2966  002D86  320B               	rrcf	___lwmod@divisor+1,f,c
  2967  002D88  320A               	rrcf	___lwmod@divisor,f,c
  2968  002D8A  2E0C               	decfsz	___lwmod@counter,f,c
  2969  002D8C  D7F0               	goto	l3198
  2970  002D8E  D000               	goto	l1316
  2971  002D90                     l1316:
  2972  002D90  C008  F008         	movff	___lwmod@dividend,?___lwmod
  2973  002D94  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  2974  002D98  0012               	return		;funcret
  2975  002D9A                     __end_of___lwmod:
  2976                           	opt stack 0
  2977                           tblptru	equ	0xFF8
  2978                           tblptrh	equ	0xFF7
  2979                           tblptrl	equ	0xFF6
  2980                           tablat	equ	0xFF5
  2981                           prodh	equ	0xFF4
  2982                           prodl	equ	0xFF3
  2983                           postinc0	equ	0xFEE
  2984                           wreg	equ	0xFE8
  2985                           postdec1	equ	0xFE5
  2986                           fsr1l	equ	0xFE1
  2987                           indf2	equ	0xFDF
  2988                           postinc2	equ	0xFDE
  2989                           postdec2	equ	0xFDD
  2990                           fsr2h	equ	0xFDA
  2991                           fsr2l	equ	0xFD9
  2992                           status	equ	0xFD8
  2993                           
  2994 ;; *************** function ___lwdiv *****************
  2995 ;; Defined at:
  2996 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  2997 ;; Parameters:    Size  Location     Type
  2998 ;;  dividend        2    0[COMRAM] unsigned int 
  2999 ;;  divisor         2    2[COMRAM] unsigned int 
  3000 ;; Auto vars:     Size  Location     Type
  3001 ;;  quotient        2    4[COMRAM] unsigned int 
  3002 ;;  counter         1    6[COMRAM] unsigned char 
  3003 ;; Return value:  Size  Location     Type
  3004 ;;                  2    0[COMRAM] unsigned int 
  3005 ;; Registers used:
  3006 ;;		wreg, status,2, status,0
  3007 ;; Tracked objects:
  3008 ;;		On entry : 0/0
  3009 ;;		On exit  : 0/0
  3010 ;;		Unchanged: 0/0
  3011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3012 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3013 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3015 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3016 ;;Total ram usage:        7 bytes
  3017 ;; Hardware stack levels used:    1
  3018 ;; This function calls:
  3019 ;;		Nothing
  3020 ;; This function is called by:
  3021 ;;		_sprintf
  3022 ;; This function uses a non-reentrant model
  3023 ;;
  3024                           
  3025                           	psect	text8
  3026  002BF0                     __ptext8:
  3027                           	opt stack 0
  3028  002BF0                     ___lwdiv:
  3029                           	opt stack 27
  3030                           
  3031                           ;incstack = 0
  3032  002BF0  0E00               	movlw	0
  3033  002BF2  6E06               	movwf	___lwdiv@quotient+1,c
  3034  002BF4  0E00               	movlw	0
  3035  002BF6  6E05               	movwf	___lwdiv@quotient,c
  3036  002BF8  5003               	movf	___lwdiv@divisor,w,c
  3037  002BFA  1004               	iorwf	___lwdiv@divisor+1,w,c
  3038  002BFC  B4D8               	btfsc	status,2,c
  3039  002BFE  D021               	goto	l1306
  3040  002C00  0E01               	movlw	1
  3041  002C02  6E07               	movwf	___lwdiv@counter,c
  3042  002C04  D005               	goto	l3176
  3043  002C06                     l3174:
  3044  002C06  90D8               	bcf	status,0,c
  3045  002C08  3603               	rlcf	___lwdiv@divisor,f,c
  3046  002C0A  3604               	rlcf	___lwdiv@divisor+1,f,c
  3047  002C0C  2A07               	incf	___lwdiv@counter,f,c
  3048  002C0E  D000               	goto	l3176
  3049  002C10                     l3176:
  3050  002C10  BE04               	btfsc	___lwdiv@divisor+1,7,c
  3051  002C12  D002               	goto	l3178
  3052  002C14  D7F8               	goto	l3174
  3053  002C16  D000               	goto	l3178
  3054  002C18                     l3178:
  3055  002C18  90D8               	bcf	status,0,c
  3056  002C1A  3605               	rlcf	___lwdiv@quotient,f,c
  3057  002C1C  3606               	rlcf	___lwdiv@quotient+1,f,c
  3058  002C1E  5003               	movf	___lwdiv@divisor,w,c
  3059  002C20  5C01               	subwf	___lwdiv@dividend,w,c
  3060  002C22  5004               	movf	___lwdiv@divisor+1,w,c
  3061  002C24  5802               	subwfb	___lwdiv@dividend+1,w,c
  3062  002C26  A0D8               	btfss	status,0,c
  3063  002C28  D006               	goto	l3186
  3064  002C2A  5003               	movf	___lwdiv@divisor,w,c
  3065  002C2C  5E01               	subwf	___lwdiv@dividend,f,c
  3066  002C2E  5004               	movf	___lwdiv@divisor+1,w,c
  3067  002C30  5A02               	subwfb	___lwdiv@dividend+1,f,c
  3068  002C32  8005               	bsf	___lwdiv@quotient,0,c
  3069  002C34  D000               	goto	l3186
  3070  002C36                     l3186:
  3071  002C36  90D8               	bcf	status,0,c
  3072  002C38  3204               	rrcf	___lwdiv@divisor+1,f,c
  3073  002C3A  3203               	rrcf	___lwdiv@divisor,f,c
  3074  002C3C  2E07               	decfsz	___lwdiv@counter,f,c
  3075  002C3E  D7EC               	goto	l3178
  3076  002C40  D000               	goto	l1306
  3077  002C42                     l1306:
  3078  002C42  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  3079  002C46  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3080  002C4A  0012               	return		;funcret
  3081  002C4C                     __end_of___lwdiv:
  3082                           	opt stack 0
  3083                           tblptru	equ	0xFF8
  3084                           tblptrh	equ	0xFF7
  3085                           tblptrl	equ	0xFF6
  3086                           tablat	equ	0xFF5
  3087                           prodh	equ	0xFF4
  3088                           prodl	equ	0xFF3
  3089                           postinc0	equ	0xFEE
  3090                           wreg	equ	0xFE8
  3091                           postdec1	equ	0xFE5
  3092                           fsr1l	equ	0xFE1
  3093                           indf2	equ	0xFDF
  3094                           postinc2	equ	0xFDE
  3095                           postdec2	equ	0xFDD
  3096                           fsr2h	equ	0xFDA
  3097                           fsr2l	equ	0xFD9
  3098                           status	equ	0xFD8
  3099                           
  3100 ;; *************** function _lcd_putrs *****************
  3101 ;; Defined at:
  3102 ;;		line 221 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3103 ;; Parameters:    Size  Location     Type
  3104 ;;  ptr             2    8[COMRAM] PTR const unsigned char 
  3105 ;;		 -> STR_21(8), STR_20(10), STR_19(4), STR_18(3), 
  3106 ;;		 -> STR_17(11), STR_16(11), buffer2(20), STR_3(10), 
  3107 ;;		 -> STR_2(13), STR_1(33), 
  3108 ;; Auto vars:     Size  Location     Type
  3109 ;;		None
  3110 ;; Return value:  Size  Location     Type
  3111 ;;		None               void
  3112 ;; Registers used:
  3113 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3114 ;; Tracked objects:
  3115 ;;		On entry : 0/0
  3116 ;;		On exit  : 0/0
  3117 ;;		Unchanged: 0/0
  3118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3119 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3122 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3123 ;;Total ram usage:        2 bytes
  3124 ;; Hardware stack levels used:    1
  3125 ;; Hardware stack levels required when called:    4
  3126 ;; This function calls:
  3127 ;;		_lcd_putc
  3128 ;; This function is called by:
  3129 ;;		_main
  3130 ;;		_read_keyboard
  3131 ;;		_write_Date
  3132 ;;		_twinkle
  3133 ;;		_set_vision
  3134 ;; This function uses a non-reentrant model
  3135 ;;
  3136                           
  3137                           	psect	text9
  3138  002CFA                     __ptext9:
  3139                           	opt stack 0
  3140  002CFA                     _lcd_putrs:
  3141                           	opt stack 24
  3142                           
  3143                           ;unmc_lcd_216.c: 223: while(*ptr){
  3144                           
  3145                           ;incstack = 0
  3146  002CFA  D015               	goto	l3232
  3147  002CFC                     l3228:
  3148                           
  3149                           ;unmc_lcd_216.c: 224: lcd_putc(*ptr++);
  3150  002CFC  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  3151  002D00  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  3152  002D04  6AF8               	clrf	tblptru,c
  3153  002D06  0E0E               	movlw	(high __ramtop+-1)
  3154  002D08  64F7               	cpfsgt	tblptrh,c
  3155  002D0A  D003               	bra	u2857
  3156  002D0C  0008               	tblrd		*
  3157  002D0E  50F5               	movf	tablat,w,c
  3158  002D10  D005               	bra	u2850
  3159  002D12                     u2857:
  3160  002D12  CFF6 FFE9          	movff	tblptrl,fsr0l
  3161  002D16  CFF7 FFEA          	movff	tblptrh,fsr0h
  3162  002D1A  50EF               	movf	indf0,w,c
  3163  002D1C                     u2850:
  3164  002D1C  ECCD  F016         	call	_lcd_putc
  3165  002D20  4A09               	infsnz	lcd_putrs@ptr,f,c
  3166  002D22  2A0A               	incf	lcd_putrs@ptr+1,f,c
  3167  002D24  D000               	goto	l3232
  3168  002D26                     l3232:
  3169  002D26  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  3170  002D2A  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  3171  002D2E  6AF8               	clrf	tblptru,c
  3172  002D30  0E0E               	movlw	(high __ramtop+-1)
  3173  002D32  64F7               	cpfsgt	tblptrh,c
  3174  002D34  D003               	bra	u2867
  3175  002D36  0008               	tblrd		*
  3176  002D38  50F5               	movf	tablat,w,c
  3177  002D3A  D005               	bra	u2860
  3178  002D3C                     u2867:
  3179  002D3C  CFF6 FFE9          	movff	tblptrl,fsr0l
  3180  002D40  CFF7 FFEA          	movff	tblptrh,fsr0h
  3181  002D44  50EF               	movf	indf0,w,c
  3182  002D46                     u2860:
  3183  002D46  0900               	iorlw	0
  3184  002D48  A4D8               	btfss	status,2,c
  3185  002D4A  D7D8               	goto	l3228
  3186  002D4C  0012               	return		;funcret
  3187  002D4E                     __end_of_lcd_putrs:
  3188                           	opt stack 0
  3189                           tblptru	equ	0xFF8
  3190                           tblptrh	equ	0xFF7
  3191                           tblptrl	equ	0xFF6
  3192                           tablat	equ	0xFF5
  3193                           prodh	equ	0xFF4
  3194                           prodl	equ	0xFF3
  3195                           indf0	equ	0xFEF
  3196                           postinc0	equ	0xFEE
  3197                           fsr0h	equ	0xFEA
  3198                           fsr0l	equ	0xFE9
  3199                           wreg	equ	0xFE8
  3200                           postdec1	equ	0xFE5
  3201                           fsr1l	equ	0xFE1
  3202                           indf2	equ	0xFDF
  3203                           postinc2	equ	0xFDE
  3204                           postdec2	equ	0xFDD
  3205                           fsr2h	equ	0xFDA
  3206                           fsr2l	equ	0xFD9
  3207                           status	equ	0xFD8
  3208                           
  3209 ;; *************** function _lcd_putc *****************
  3210 ;; Defined at:
  3211 ;;		line 172 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3212 ;; Parameters:    Size  Location     Type
  3213 ;;  c               1    wreg     unsigned char 
  3214 ;; Auto vars:     Size  Location     Type
  3215 ;;  c               1    7[COMRAM] unsigned char 
  3216 ;; Return value:  Size  Location     Type
  3217 ;;		None               void
  3218 ;; Registers used:
  3219 ;;		wreg, status,2, status,0, cstack
  3220 ;; Tracked objects:
  3221 ;;		On entry : 0/0
  3222 ;;		On exit  : 0/0
  3223 ;;		Unchanged: 0/0
  3224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3226 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3228 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3229 ;;Total ram usage:        1 bytes
  3230 ;; Hardware stack levels used:    1
  3231 ;; Hardware stack levels required when called:    3
  3232 ;; This function calls:
  3233 ;;		_lcd_gotoxy
  3234 ;;		_lcd_send_byte
  3235 ;; This function is called by:
  3236 ;;		_lcd_putrs
  3237 ;;		_lcd_puts
  3238 ;; This function uses a non-reentrant model
  3239 ;;
  3240                           
  3241                           	psect	text10
  3242  002D9A                     __ptext10:
  3243                           	opt stack 0
  3244  002D9A                     _lcd_putc:
  3245                           	opt stack 24
  3246                           
  3247                           ;incstack = 0
  3248                           ;lcd_putc@c stored from wreg
  3249  002D9A  6E08               	movwf	lcd_putc@c,c
  3250                           
  3251                           ;unmc_lcd_216.c: 173: switch(c){
  3252  002D9C  D018               	goto	l2950
  3253  002D9E                     l2940:
  3254                           
  3255                           ;unmc_lcd_216.c: 175: lcd_send_byte(0,1);
  3256  002D9E  0E01               	movlw	1
  3257  002DA0  6E03               	movwf	lcd_send_byte@n,c
  3258  002DA2  0E00               	movlw	0
  3259  002DA4  EC7D  F017         	call	_lcd_send_byte
  3260                           
  3261                           ;unmc_lcd_216.c: 176: break;
  3262  002DA8  0012               	return	
  3263  002DAA                     l2942:
  3264                           
  3265                           ;unmc_lcd_216.c: 178: lcd_gotoxy(1,2);
  3266  002DAA  0E02               	movlw	2
  3267  002DAC  6E05               	movwf	lcd_gotoxy@y,c
  3268  002DAE  0E01               	movlw	1
  3269  002DB0  ECE7  F017         	call	_lcd_gotoxy
  3270                           
  3271                           ;unmc_lcd_216.c: 179: break;
  3272  002DB4  0012               	return	
  3273  002DB6                     l2944:
  3274                           
  3275                           ;unmc_lcd_216.c: 181: lcd_send_byte(0,0x10);
  3276  002DB6  0E10               	movlw	16
  3277  002DB8  6E03               	movwf	lcd_send_byte@n,c
  3278  002DBA  0E00               	movlw	0
  3279  002DBC  EC7D  F017         	call	_lcd_send_byte
  3280                           
  3281                           ;unmc_lcd_216.c: 182: break;
  3282  002DC0  0012               	return	
  3283  002DC2                     l2946:
  3284                           
  3285                           ;unmc_lcd_216.c: 184: lcd_send_byte(1,c);
  3286  002DC2  C008  F003         	movff	lcd_putc@c,lcd_send_byte@n
  3287  002DC6  0E01               	movlw	1
  3288  002DC8  EC7D  F017         	call	_lcd_send_byte
  3289                           
  3290                           ;unmc_lcd_216.c: 186: }
  3291                           
  3292                           ;unmc_lcd_216.c: 185: break;
  3293  002DCC  0012               	return	
  3294  002DCE                     l2950:
  3295  002DCE  5008               	movf	lcd_putc@c,w,c
  3296                           
  3297                           ; Switch size 1, requested type "space"
  3298                           ; Number of cases is 3, Range of values is 8 to 12
  3299                           ; switch strategies available:
  3300                           ; Name         Instructions Cycles
  3301                           ; simple_byte           10     6 (average)
  3302                           ;	Chosen strategy is simple_byte
  3303  002DD0  0A08               	xorlw	8	; case 8
  3304  002DD2  B4D8               	btfsc	status,2,c
  3305  002DD4  D7F0               	goto	l2944
  3306  002DD6  0A02               	xorlw	2	; case 10
  3307  002DD8  B4D8               	btfsc	status,2,c
  3308  002DDA  D7E7               	goto	l2942
  3309  002DDC  0A06               	xorlw	6	; case 12
  3310  002DDE  B4D8               	btfsc	status,2,c
  3311  002DE0  D7DE               	goto	l2940
  3312  002DE2  D7EF               	goto	l2946
  3313  002DE4  0012               	return		;funcret
  3314  002DE6                     __end_of_lcd_putc:
  3315                           	opt stack 0
  3316                           tblptru	equ	0xFF8
  3317                           tblptrh	equ	0xFF7
  3318                           tblptrl	equ	0xFF6
  3319                           tablat	equ	0xFF5
  3320                           prodh	equ	0xFF4
  3321                           prodl	equ	0xFF3
  3322                           indf0	equ	0xFEF
  3323                           postinc0	equ	0xFEE
  3324                           fsr0h	equ	0xFEA
  3325                           fsr0l	equ	0xFE9
  3326                           wreg	equ	0xFE8
  3327                           postdec1	equ	0xFE5
  3328                           fsr1l	equ	0xFE1
  3329                           indf2	equ	0xFDF
  3330                           postinc2	equ	0xFDE
  3331                           postdec2	equ	0xFDD
  3332                           fsr2h	equ	0xFDA
  3333                           fsr2l	equ	0xFD9
  3334                           status	equ	0xFD8
  3335                           
  3336 ;; *************** function __delay_s *****************
  3337 ;; Defined at:
  3338 ;;		line 21 in file "lcd_vision.c"
  3339 ;; Parameters:    Size  Location     Type
  3340 ;;  millis          2    8[COMRAM] int 
  3341 ;; Auto vars:     Size  Location     Type
  3342 ;;  index           2   13[COMRAM] short 
  3343 ;;  it              2   11[COMRAM] short 
  3344 ;; Return value:  Size  Location     Type
  3345 ;;		None               void
  3346 ;; Registers used:
  3347 ;;		wreg, status,2, status,0, cstack
  3348 ;; Tracked objects:
  3349 ;;		On entry : 0/0
  3350 ;;		On exit  : 0/0
  3351 ;;		Unchanged: 0/0
  3352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3353 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3354 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3355 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3356 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3357 ;;Total ram usage:        7 bytes
  3358 ;; Hardware stack levels used:    1
  3359 ;; Hardware stack levels required when called:    1
  3360 ;; This function calls:
  3361 ;;		___awdiv
  3362 ;; This function is called by:
  3363 ;;		_twinkle
  3364 ;; This function uses a non-reentrant model
  3365 ;;
  3366                           
  3367                           	psect	text11
  3368  002C4C                     __ptext11:
  3369                           	opt stack 0
  3370  002C4C                     __delay_s:
  3371                           	opt stack 27
  3372                           
  3373                           ;lcd_vision.c: 22: short it = millis/100;
  3374                           
  3375                           ;incstack = 0
  3376  002C4C  C009  F001         	movff	__delay_s@millis,___awdiv@dividend
  3377  002C50  C00A  F002         	movff	__delay_s@millis+1,___awdiv@dividend+1
  3378  002C54  0E00               	movlw	0
  3379  002C56  6E04               	movwf	___awdiv@divisor+1,c
  3380  002C58  0E64               	movlw	100
  3381  002C5A  6E03               	movwf	___awdiv@divisor,c
  3382  002C5C  ECCE  F013         	call	___awdiv	;wreg free
  3383  002C60  C001  F00C         	movff	?___awdiv,__delay_s@it
  3384  002C64  C002  F00D         	movff	?___awdiv+1,__delay_s@it+1
  3385                           
  3386                           ;lcd_vision.c: 23: short index = 1;
  3387  002C68  0E00               	movlw	0
  3388  002C6A  6E0F               	movwf	__delay_s@index+1,c
  3389  002C6C  0E01               	movlw	1
  3390  002C6E  6E0E               	movwf	__delay_s@index,c
  3391                           
  3392                           ;lcd_vision.c: 25: for(index = 1; index <= it; index++){
  3393  002C70  0E00               	movlw	0
  3394  002C72  6E0F               	movwf	__delay_s@index+1,c
  3395  002C74  0E01               	movlw	1
  3396  002C76  6E0E               	movwf	__delay_s@index,c
  3397  002C78  D00A               	goto	l580
  3398  002C7A                     l3738:
  3399                           
  3400                           ;lcd_vision.c: 26: _delay((unsigned long)((98)*(8000000/4000.0)));
  3401  002C7A  0EFF               	movlw	255
  3402  002C7C  6E0B               	movwf	??__delay_s& (0+255),c
  3403  002C7E  0E8A               	movlw	138
  3404  002C80                     u4377:
  3405  002C80  2EE8               	decfsz	wreg,f,c
  3406  002C82  D7FE               	goto	u4377
  3407  002C84  2E0B               	decfsz	??__delay_s& (0+255),f,c
  3408  002C86  D7FC               	goto	u4377
  3409  002C88  D000               	nop2	
  3410  002C8A  4A0E               	infsnz	__delay_s@index,f,c
  3411  002C8C  2A0F               	incf	__delay_s@index+1,f,c
  3412  002C8E                     l580:
  3413  002C8E  500E               	movf	__delay_s@index,w,c
  3414  002C90  5C0C               	subwf	__delay_s@it,w,c
  3415  002C92  500D               	movf	__delay_s@it+1,w,c
  3416  002C94  0A80               	xorlw	128
  3417  002C96  6E0B               	movwf	??__delay_s& (0+255),c
  3418  002C98  500F               	movf	__delay_s@index+1,w,c
  3419  002C9A  0A80               	xorlw	128
  3420  002C9C  580B               	subwfb	??__delay_s& (0+255),w,c
  3421  002C9E  B0D8               	btfsc	status,0,c
  3422  002CA0  D7EC               	goto	l3738
  3423  002CA2  0012               	return		;funcret
  3424  002CA4                     __end_of__delay_s:
  3425                           	opt stack 0
  3426                           tblptru	equ	0xFF8
  3427                           tblptrh	equ	0xFF7
  3428                           tblptrl	equ	0xFF6
  3429                           tablat	equ	0xFF5
  3430                           prodh	equ	0xFF4
  3431                           prodl	equ	0xFF3
  3432                           indf0	equ	0xFEF
  3433                           postinc0	equ	0xFEE
  3434                           fsr0h	equ	0xFEA
  3435                           fsr0l	equ	0xFE9
  3436                           wreg	equ	0xFE8
  3437                           postdec1	equ	0xFE5
  3438                           fsr1l	equ	0xFE1
  3439                           indf2	equ	0xFDF
  3440                           postinc2	equ	0xFDE
  3441                           postdec2	equ	0xFDD
  3442                           fsr2h	equ	0xFDA
  3443                           fsr2l	equ	0xFD9
  3444                           status	equ	0xFD8
  3445                           
  3446 ;; *************** function _pow *****************
  3447 ;; Defined at:
  3448 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\pow.c"
  3449 ;; Parameters:    Size  Location     Type
  3450 ;;  x               3   81[COMRAM] short 
  3451 ;;  y               3   84[COMRAM] short 
  3452 ;; Auto vars:     Size  Location     Type
  3453 ;;  yi              4    7[BANK0 ] unsigned long 
  3454 ;;  sign            1    6[BANK0 ] unsigned char 
  3455 ;; Return value:  Size  Location     Type
  3456 ;;                  3   81[COMRAM] unsigned char 
  3457 ;; Registers used:
  3458 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3459 ;; Tracked objects:
  3460 ;;		On entry : 0/0
  3461 ;;		On exit  : 0/0
  3462 ;;		Unchanged: 0/0
  3463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3464 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3465 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3467 ;;      Totals:         6      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3468 ;;Total ram usage:       17 bytes
  3469 ;; Hardware stack levels used:    1
  3470 ;; Hardware stack levels required when called:    4
  3471 ;; This function calls:
  3472 ;;		___ftge
  3473 ;;		___ftmul
  3474 ;;		___ftneg
  3475 ;;		___fttol
  3476 ;;		___lltoft
  3477 ;;		_exp
  3478 ;;		_log
  3479 ;; This function is called by:
  3480 ;;		_set_vision
  3481 ;; This function uses a non-reentrant model
  3482 ;;
  3483                           
  3484                           	psect	text12
  3485  001BD6                     __ptext12:
  3486                           	opt stack 0
  3487  001BD6                     _pow:
  3488                           	opt stack 25
  3489                           
  3490                           ;incstack = 0
  3491  001BD6  0E00               	movlw	0
  3492  001BD8  0100               	movlb	0	; () banked
  3493  001BDA  6FAE               	movwf	pow@sign& (0+255),b
  3494                           
  3495                           ; BSR set to: 0
  3496  001BDC  5052               	movf	pow@x,w,c
  3497  001BDE  1053               	iorwf	pow@x+1,w,c
  3498  001BE0  1054               	iorwf	pow@x+2,w,c
  3499  001BE2  A4D8               	btfss	status,2,c
  3500  001BE4  D01C               	goto	l3970
  3501                           
  3502                           ; BSR set to: 0
  3503  001BE6  0E00               	movlw	0
  3504  001BE8  6E01               	movwf	___ftge@ff1,c
  3505  001BEA  0E00               	movlw	0
  3506  001BEC  6E02               	movwf	___ftge@ff1+1,c
  3507  001BEE  0E00               	movlw	0
  3508  001BF0  6E03               	movwf	___ftge@ff1+2,c
  3509  001BF2  C055  F004         	movff	pow@y,___ftge@ff2
  3510  001BF6  C056  F005         	movff	pow@y+1,___ftge@ff2+1
  3511  001BFA  C057  F006         	movff	pow@y+2,___ftge@ff2+2
  3512  001BFE  EC83  F013         	call	___ftge	;wreg free
  3513  001C02  A0D8               	btfss	status,0,c
  3514  001C04  D005               	goto	l1343
  3515  001C06  0E00               	movlw	0
  3516  001C08  0100               	movlb	0	; () banked
  3517  001C0A  6F83               	movwf	(_errno+1)& (0+255),b
  3518  001C0C  0E21               	movlw	33
  3519  001C0E  6F82               	movwf	_errno& (0+255),b
  3520  001C10                     l1343:
  3521  001C10  0E00               	movlw	0
  3522  001C12  6E52               	movwf	?_pow,c
  3523  001C14  0E00               	movlw	0
  3524  001C16  6E53               	movwf	?_pow+1,c
  3525  001C18  0E00               	movlw	0
  3526  001C1A  6E54               	movwf	?_pow+2,c
  3527  001C1C  0012               	return	
  3528  001C1E                     l3970:
  3529  001C1E  5055               	movf	pow@y,w,c
  3530  001C20  1056               	iorwf	pow@y+1,w,c
  3531  001C22  1057               	iorwf	pow@y+2,w,c
  3532  001C24  A4D8               	btfss	status,2,c
  3533  001C26  D007               	goto	l3976
  3534  001C28  0E00               	movlw	0
  3535  001C2A  6E52               	movwf	?_pow,c
  3536  001C2C  0E80               	movlw	128
  3537  001C2E  6E53               	movwf	?_pow+1,c
  3538  001C30  0E3F               	movlw	63
  3539  001C32  6E54               	movwf	?_pow+2,c
  3540  001C34  0012               	return	
  3541  001C36                     l3976:
  3542  001C36  AE54               	btfss	pow@x+2,7,c
  3543  001C38  D044               	goto	l3988
  3544  001C3A  C055  F028         	movff	pow@y,___fttol@f1
  3545  001C3E  C056  F029         	movff	pow@y+1,___fttol@f1+1
  3546  001C42  C057  F02A         	movff	pow@y+2,___fttol@f1+2
  3547  001C46  EC65  F010         	call	___fttol	;wreg free
  3548  001C4A  C028  F0AF         	movff	?___fttol,pow@yi
  3549  001C4E  C029  F0B0         	movff	?___fttol+1,pow@yi+1
  3550  001C52  C02A  F0B1         	movff	?___fttol+2,pow@yi+2
  3551  001C56  C02B  F0B2         	movff	?___fttol+3,pow@yi+3
  3552  001C5A  C0AF  F009         	movff	pow@yi,___lltoft@c
  3553  001C5E  C0B0  F00A         	movff	pow@yi+1,___lltoft@c+1
  3554  001C62  C0B1  F00B         	movff	pow@yi+2,___lltoft@c+2
  3555  001C66  C0B2  F00C         	movff	pow@yi+3,___lltoft@c+3
  3556  001C6A  ECC8  F015         	call	___lltoft	;wreg free
  3557  001C6E  5055               	movf	pow@y,w,c
  3558  001C70  1809               	xorwf	?___lltoft,w,c
  3559  001C72  E107               	bnz	u4090
  3560  001C74  5056               	movf	pow@y+1,w,c
  3561  001C76  180A               	xorwf	?___lltoft+1,w,c
  3562  001C78  E104               	bnz	u4090
  3563  001C7A  5057               	movf	pow@y+2,w,c
  3564  001C7C  180B               	xorwf	?___lltoft+2,w,c
  3565  001C7E  B4D8               	btfsc	status,2,c
  3566  001C80  D00C               	goto	l3984
  3567  001C82                     u4090:
  3568  001C82  0E00               	movlw	0
  3569  001C84  0100               	movlb	0	; () banked
  3570  001C86  6F83               	movwf	(_errno+1)& (0+255),b
  3571  001C88  0E21               	movlw	33
  3572  001C8A  6F82               	movwf	_errno& (0+255),b
  3573  001C8C  0E00               	movlw	0
  3574  001C8E  6E52               	movwf	?_pow,c
  3575  001C90  0E00               	movlw	0
  3576  001C92  6E53               	movwf	?_pow+1,c
  3577  001C94  0E00               	movlw	0
  3578  001C96  6E54               	movwf	?_pow+2,c
  3579                           
  3580                           ; BSR set to: 0
  3581  001C98  0012               	return	
  3582  001C9A                     l3984:
  3583  001C9A  0100               	movlb	0	; () banked
  3584  001C9C  51AF               	movf	pow@yi& (0+255),w,b
  3585  001C9E  0B01               	andlw	1
  3586  001CA0  0100               	movlb	0	; () banked
  3587  001CA2  6FAE               	movwf	pow@sign& (0+255),b
  3588                           
  3589                           ; BSR set to: 0
  3590  001CA4  C052  F001         	movff	pow@x,___ftneg@f1
  3591  001CA8  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  3592  001CAC  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  3593  001CB0  ECD5  F017         	call	___ftneg	;wreg free
  3594  001CB4  C001  F052         	movff	?___ftneg,pow@x
  3595  001CB8  C002  F053         	movff	?___ftneg+1,pow@x+1
  3596  001CBC  C003  F054         	movff	?___ftneg+2,pow@x+2
  3597  001CC0  D000               	goto	l3988
  3598  001CC2                     l3988:
  3599  001CC2  C052  F034         	movff	pow@x,log@x
  3600  001CC6  C053  F035         	movff	pow@x+1,log@x+1
  3601  001CCA  C054  F036         	movff	pow@x+2,log@x+2
  3602  001CCE  EC4F  F00F         	call	_log	;wreg free
  3603  001CD2  C034  F0A8         	movff	?_log,_pow$2728
  3604  001CD6  C035  F0A9         	movff	?_log+1,_pow$2728+1
  3605  001CDA  C036  F0AA         	movff	?_log+2,_pow$2728+2
  3606  001CDE  C0A8  F00D         	movff	_pow$2728,___ftmul@f1
  3607  001CE2  C0A9  F00E         	movff	_pow$2728+1,___ftmul@f1+1
  3608  001CE6  C0AA  F00F         	movff	_pow$2728+2,___ftmul@f1+2
  3609  001CEA  C055  F010         	movff	pow@y,___ftmul@f2
  3610  001CEE  C056  F011         	movff	pow@y+1,___ftmul@f2+1
  3611  001CF2  C057  F012         	movff	pow@y+2,___ftmul@f2+2
  3612  001CF6  ECE6  F010         	call	___ftmul	;wreg free
  3613  001CFA  C00D  F0AB         	movff	?___ftmul,_pow$2729
  3614  001CFE  C00E  F0AC         	movff	?___ftmul+1,_pow$2729+1
  3615  001D02  C00F  F0AD         	movff	?___ftmul+2,_pow$2729+2
  3616  001D06  C0AB  F049         	movff	_pow$2729,exp@x
  3617  001D0A  C0AC  F04A         	movff	_pow$2729+1,exp@x+1
  3618  001D0E  C0AD  F04B         	movff	_pow$2729+2,exp@x+2
  3619  001D12  EC5F  F00A         	call	_exp	;wreg free
  3620  001D16  C049  F052         	movff	?_exp,pow@x
  3621  001D1A  C04A  F053         	movff	?_exp+1,pow@x+1
  3622  001D1E  C04B  F054         	movff	?_exp+2,pow@x+2
  3623  001D22  0100               	movlb	0	; () banked
  3624  001D24  51AE               	movf	pow@sign& (0+255),w,b
  3625  001D26  0100               	movlb	0	; () banked
  3626  001D28  B4D8               	btfsc	status,2,c
  3627  001D2A  D00F               	goto	l1348
  3628                           
  3629                           ; BSR set to: 0
  3630  001D2C  C052  F001         	movff	pow@x,___ftneg@f1
  3631  001D30  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  3632  001D34  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  3633  001D38  ECD5  F017         	call	___ftneg	;wreg free
  3634  001D3C  C001  F052         	movff	?___ftneg,?_pow
  3635  001D40  C002  F053         	movff	?___ftneg+1,?_pow+1
  3636  001D44  C003  F054         	movff	?___ftneg+2,?_pow+2
  3637  001D48  0012               	return	
  3638  001D4A                     l1348:
  3639                           
  3640                           ; BSR set to: 0
  3641  001D4A  C052  F052         	movff	pow@x,?_pow
  3642  001D4E  C053  F053         	movff	pow@x+1,?_pow+1
  3643  001D52  C054  F054         	movff	pow@x+2,?_pow+2
  3644  001D56  0012               	return		;funcret
  3645  001D58                     __end_of_pow:
  3646                           	opt stack 0
  3647                           tblptru	equ	0xFF8
  3648                           tblptrh	equ	0xFF7
  3649                           tblptrl	equ	0xFF6
  3650                           tablat	equ	0xFF5
  3651                           prodh	equ	0xFF4
  3652                           prodl	equ	0xFF3
  3653                           indf0	equ	0xFEF
  3654                           postinc0	equ	0xFEE
  3655                           fsr0h	equ	0xFEA
  3656                           fsr0l	equ	0xFE9
  3657                           wreg	equ	0xFE8
  3658                           postdec1	equ	0xFE5
  3659                           fsr1l	equ	0xFE1
  3660                           indf2	equ	0xFDF
  3661                           postinc2	equ	0xFDE
  3662                           postdec2	equ	0xFDD
  3663                           fsr2h	equ	0xFDA
  3664                           fsr2l	equ	0xFD9
  3665                           status	equ	0xFD8
  3666                           
  3667 ;; *************** function _log *****************
  3668 ;; Defined at:
  3669 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\log.c"
  3670 ;; Parameters:    Size  Location     Type
  3671 ;;  x               3   51[COMRAM] unsigned char 
  3672 ;; Auto vars:     Size  Location     Type
  3673 ;;  exponent        2   54[COMRAM] int 
  3674 ;; Return value:  Size  Location     Type
  3675 ;;                  3   51[COMRAM] int 
  3676 ;; Registers used:
  3677 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3678 ;; Tracked objects:
  3679 ;;		On entry : 0/0
  3680 ;;		On exit  : 0/0
  3681 ;;		Unchanged: 0/0
  3682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3683 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3684 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3686 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3687 ;;Total ram usage:        5 bytes
  3688 ;; Hardware stack levels used:    1
  3689 ;; Hardware stack levels required when called:    3
  3690 ;; This function calls:
  3691 ;;		___awtoft
  3692 ;;		___ftadd
  3693 ;;		___ftmul
  3694 ;;		_eval_poly
  3695 ;;		_frexp
  3696 ;; This function is called by:
  3697 ;;		_pow
  3698 ;; This function uses a non-reentrant model
  3699 ;;
  3700                           
  3701                           	psect	text13
  3702  001E9E                     __ptext13:
  3703                           	opt stack 0
  3704  001E9E                     _log:
  3705                           	opt stack 25
  3706                           
  3707                           ;incstack = 0
  3708  001E9E  AE36               	btfss	log@x+2,7,c
  3709  001EA0  D00C               	goto	l3758
  3710  001EA2  0E00               	movlw	0
  3711  001EA4  0100               	movlb	0	; () banked
  3712  001EA6  6F83               	movwf	(_errno+1)& (0+255),b
  3713  001EA8  0E21               	movlw	33
  3714  001EAA  6F82               	movwf	_errno& (0+255),b
  3715  001EAC  0E00               	movlw	0
  3716  001EAE  6E34               	movwf	?_log,c
  3717  001EB0  0E00               	movlw	0
  3718  001EB2  6E35               	movwf	?_log+1,c
  3719  001EB4  0E00               	movlw	0
  3720  001EB6  6E36               	movwf	?_log+2,c
  3721                           
  3722                           ; BSR set to: 0
  3723  001EB8  0012               	return	
  3724  001EBA                     l3758:
  3725  001EBA  5034               	movf	log@x,w,c
  3726  001EBC  1035               	iorwf	log@x+1,w,c
  3727  001EBE  1036               	iorwf	log@x+2,w,c
  3728  001EC0  A4D8               	btfss	status,2,c
  3729  001EC2  D00C               	goto	l3764
  3730  001EC4  0E00               	movlw	0
  3731  001EC6  0100               	movlb	0	; () banked
  3732  001EC8  6F83               	movwf	(_errno+1)& (0+255),b
  3733  001ECA  0E22               	movlw	34
  3734  001ECC  6F82               	movwf	_errno& (0+255),b
  3735  001ECE  0E00               	movlw	0
  3736  001ED0  6E34               	movwf	?_log,c
  3737  001ED2  0E00               	movlw	0
  3738  001ED4  6E35               	movwf	?_log+1,c
  3739  001ED6  0E00               	movlw	0
  3740  001ED8  6E36               	movwf	?_log+2,c
  3741                           
  3742                           ; BSR set to: 0
  3743  001EDA  0012               	return	
  3744  001EDC                     l3764:
  3745  001EDC  0E00               	movlw	0
  3746  001EDE  6E10               	movwf	___ftmul@f2,c
  3747  001EE0  0E00               	movlw	0
  3748  001EE2  6E11               	movwf	___ftmul@f2+1,c
  3749  001EE4  0E40               	movlw	64
  3750  001EE6  6E12               	movwf	___ftmul@f2+2,c
  3751  001EE8  0E37               	movlw	low log@exponent
  3752  001EEA  6E04               	movwf	frexp@eptr,c
  3753  001EEC  0E00               	movlw	high log@exponent
  3754  001EEE  6E05               	movwf	frexp@eptr+1,c
  3755  001EF0  C034  F001         	movff	log@x,frexp@value
  3756  001EF4  C035  F002         	movff	log@x+1,frexp@value+1
  3757  001EF8  C036  F003         	movff	log@x+2,frexp@value+2
  3758  001EFC  EC19  F014         	call	_frexp	;wreg free
  3759  001F00  C001  F00D         	movff	?_frexp,___ftmul@f1
  3760  001F04  C002  F00E         	movff	?_frexp+1,___ftmul@f1+1
  3761  001F08  C003  F00F         	movff	?_frexp+2,___ftmul@f1+2
  3762  001F0C  ECE6  F010         	call	___ftmul	;wreg free
  3763  001F10  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  3764  001F14  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  3765  001F18  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  3766  001F1C  0E00               	movlw	0
  3767  001F1E  6E1F               	movwf	___ftadd@f2,c
  3768  001F20  0E80               	movlw	128
  3769  001F22  6E20               	movwf	___ftadd@f2+1,c
  3770  001F24  0EBF               	movlw	191
  3771  001F26  6E21               	movwf	___ftadd@f2+2,c
  3772  001F28  EC3C  F00C         	call	___ftadd	;wreg free
  3773  001F2C  C01C  F034         	movff	?___ftadd,log@x
  3774  001F30  C01D  F035         	movff	?___ftadd+1,log@x+1
  3775  001F34  C01E  F036         	movff	?___ftadd+2,log@x+2
  3776  001F38  0637               	decf	log@exponent,f,c
  3777  001F3A  A0D8               	btfss	status,0,c
  3778  001F3C  0638               	decf	log@exponent+1,f,c
  3779  001F3E  C034  F028         	movff	log@x,eval_poly@x
  3780  001F42  C035  F029         	movff	log@x+1,eval_poly@x+1
  3781  001F46  C036  F02A         	movff	log@x+2,eval_poly@x+2
  3782  001F4A  0E2D               	movlw	low log@coeff
  3783  001F4C  6E2B               	movwf	eval_poly@d,c
  3784  001F4E  0E0F               	movlw	high log@coeff
  3785  001F50  6E2C               	movwf	eval_poly@d+1,c
  3786  001F52  0E00               	movlw	0
  3787  001F54  6E2E               	movwf	eval_poly@n+1,c
  3788  001F56  0E08               	movlw	8
  3789  001F58  6E2D               	movwf	eval_poly@n,c
  3790  001F5A  ECB6  F012         	call	_eval_poly	;wreg free
  3791  001F5E  C028  F034         	movff	?_eval_poly,log@x
  3792  001F62  C029  F035         	movff	?_eval_poly+1,log@x+1
  3793  001F66  C02A  F036         	movff	?_eval_poly+2,log@x+2
  3794  001F6A  0E72               	movlw	114
  3795  001F6C  6E10               	movwf	___ftmul@f2,c
  3796  001F6E  0E31               	movlw	49
  3797  001F70  6E11               	movwf	___ftmul@f2+1,c
  3798  001F72  0E3F               	movlw	63
  3799  001F74  6E12               	movwf	___ftmul@f2+2,c
  3800  001F76  C037  F009         	movff	log@exponent,___awtoft@c
  3801  001F7A  C038  F00A         	movff	log@exponent+1,___awtoft@c+1
  3802  001F7E  EC5F  F017         	call	___awtoft	;wreg free
  3803  001F82  C009  F00D         	movff	?___awtoft,___ftmul@f1
  3804  001F86  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  3805  001F8A  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  3806  001F8E  ECE6  F010         	call	___ftmul	;wreg free
  3807  001F92  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  3808  001F96  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  3809  001F9A  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  3810  001F9E  C034  F01F         	movff	log@x,___ftadd@f2
  3811  001FA2  C035  F020         	movff	log@x+1,___ftadd@f2+1
  3812  001FA6  C036  F021         	movff	log@x+2,___ftadd@f2+2
  3813  001FAA  EC3C  F00C         	call	___ftadd	;wreg free
  3814  001FAE  C01C  F034         	movff	?___ftadd,?_log
  3815  001FB2  C01D  F035         	movff	?___ftadd+1,?_log+1
  3816  001FB6  C01E  F036         	movff	?___ftadd+2,?_log+2
  3817  001FBA  0012               	return	
  3818  001FBC  0012               	return		;funcret
  3819  001FBE                     __end_of_log:
  3820                           	opt stack 0
  3821                           tblptru	equ	0xFF8
  3822                           tblptrh	equ	0xFF7
  3823                           tblptrl	equ	0xFF6
  3824                           tablat	equ	0xFF5
  3825                           prodh	equ	0xFF4
  3826                           prodl	equ	0xFF3
  3827                           indf0	equ	0xFEF
  3828                           postinc0	equ	0xFEE
  3829                           fsr0h	equ	0xFEA
  3830                           fsr0l	equ	0xFE9
  3831                           wreg	equ	0xFE8
  3832                           postdec1	equ	0xFE5
  3833                           fsr1l	equ	0xFE1
  3834                           indf2	equ	0xFDF
  3835                           postinc2	equ	0xFDE
  3836                           postdec2	equ	0xFDD
  3837                           fsr2h	equ	0xFDA
  3838                           fsr2l	equ	0xFD9
  3839                           status	equ	0xFD8
  3840                           
  3841 ;; *************** function _exp *****************
  3842 ;; Defined at:
  3843 ;;		line 12 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\exp.c"
  3844 ;; Parameters:    Size  Location     Type
  3845 ;;  x               3   72[COMRAM] int 
  3846 ;; Auto vars:     Size  Location     Type
  3847 ;;  exponent        2   78[COMRAM] int 
  3848 ;;  sign            1   80[COMRAM] unsigned char 
  3849 ;; Return value:  Size  Location     Type
  3850 ;;                  3   72[COMRAM] unsigned char 
  3851 ;; Registers used:
  3852 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3853 ;; Tracked objects:
  3854 ;;		On entry : 0/0
  3855 ;;		On exit  : 0/0
  3856 ;;		Unchanged: 0/0
  3857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3858 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3859 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3861 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3862 ;;Total ram usage:        9 bytes
  3863 ;; Hardware stack levels used:    1
  3864 ;; Hardware stack levels required when called:    3
  3865 ;; This function calls:
  3866 ;;		___awtoft
  3867 ;;		___ftdiv
  3868 ;;		___ftge
  3869 ;;		___ftmul
  3870 ;;		___ftneg
  3871 ;;		___ftsub
  3872 ;;		___fttol
  3873 ;;		_eval_poly
  3874 ;;		_floor
  3875 ;;		_ldexp
  3876 ;; This function is called by:
  3877 ;;		_pow
  3878 ;; This function uses a non-reentrant model
  3879 ;;
  3880                           
  3881                           	psect	text14
  3882  0014BE                     __ptext14:
  3883                           	opt stack 0
  3884  0014BE                     _exp:
  3885                           	opt stack 25
  3886                           
  3887                           ;incstack = 0
  3888  0014BE  5049               	movf	exp@x,w,c
  3889  0014C0  104A               	iorwf	exp@x+1,w,c
  3890  0014C2  104B               	iorwf	exp@x+2,w,c
  3891  0014C4  A4D8               	btfss	status,2,c
  3892  0014C6  D007               	goto	l3780
  3893  0014C8  0E00               	movlw	0
  3894  0014CA  6E49               	movwf	?_exp,c
  3895  0014CC  0E80               	movlw	128
  3896  0014CE  6E4A               	movwf	?_exp+1,c
  3897  0014D0  0E3F               	movlw	63
  3898  0014D2  6E4B               	movwf	?_exp+2,c
  3899  0014D4  0012               	return	
  3900  0014D6                     l3780:
  3901  0014D6  0E72               	movlw	114
  3902  0014D8  6E01               	movwf	___ftge@ff1,c
  3903  0014DA  0E31               	movlw	49
  3904  0014DC  6E02               	movwf	___ftge@ff1+1,c
  3905  0014DE  0E44               	movlw	68
  3906  0014E0  6E03               	movwf	___ftge@ff1+2,c
  3907  0014E2  C049  F004         	movff	exp@x,___ftge@ff2
  3908  0014E6  C04A  F005         	movff	exp@x+1,___ftge@ff2+1
  3909  0014EA  C04B  F006         	movff	exp@x+2,___ftge@ff2+2
  3910  0014EE  EC83  F013         	call	___ftge	;wreg free
  3911  0014F2  B0D8               	btfsc	status,0,c
  3912  0014F4  D00C               	goto	l3786
  3913  0014F6  0E00               	movlw	0
  3914  0014F8  0100               	movlb	0	; () banked
  3915  0014FA  6F83               	movwf	(_errno+1)& (0+255),b
  3916  0014FC  0E22               	movlw	34
  3917  0014FE  6F82               	movwf	_errno& (0+255),b
  3918  001500  0EFF               	movlw	255
  3919  001502  6E49               	movwf	?_exp,c
  3920  001504  0E7F               	movlw	127
  3921  001506  6E4A               	movwf	?_exp+1,c
  3922  001508  0E7F               	movlw	127
  3923  00150A  6E4B               	movwf	?_exp+2,c
  3924                           
  3925                           ; BSR set to: 0
  3926  00150C  0012               	return	
  3927  00150E                     l3786:
  3928  00150E  C049  F001         	movff	exp@x,___ftge@ff1
  3929  001512  C04A  F002         	movff	exp@x+1,___ftge@ff1+1
  3930  001516  C04B  F003         	movff	exp@x+2,___ftge@ff1+2
  3931  00151A  0E49               	movlw	73
  3932  00151C  6E04               	movwf	___ftge@ff2,c
  3933  00151E  0E3A               	movlw	58
  3934  001520  6E05               	movwf	___ftge@ff2+1,c
  3935  001522  0EC4               	movlw	196
  3936  001524  6E06               	movwf	___ftge@ff2+2,c
  3937  001526  EC83  F013         	call	___ftge	;wreg free
  3938  00152A  B0D8               	btfsc	status,0,c
  3939  00152C  D00C               	goto	l3792
  3940  00152E  0E00               	movlw	0
  3941  001530  0100               	movlb	0	; () banked
  3942  001532  6F83               	movwf	(_errno+1)& (0+255),b
  3943  001534  0E22               	movlw	34
  3944  001536  6F82               	movwf	_errno& (0+255),b
  3945  001538  0E00               	movlw	0
  3946  00153A  6E49               	movwf	?_exp,c
  3947  00153C  0E00               	movlw	0
  3948  00153E  6E4A               	movwf	?_exp+1,c
  3949  001540  0E00               	movlw	0
  3950  001542  6E4B               	movwf	?_exp+2,c
  3951                           
  3952                           ; BSR set to: 0
  3953  001544  0012               	return	
  3954  001546                     l3792:
  3955  001546  AE4B               	btfss	exp@x+2,7,c
  3956  001548  D002               	goto	u3890
  3957  00154A  0E01               	movlw	1
  3958  00154C  D001               	goto	u3900
  3959  00154E                     u3890:
  3960  00154E  0E00               	movlw	0
  3961  001550                     u3900:
  3962  001550  6E51               	movwf	exp@sign,c
  3963  001552  5051               	movf	exp@sign,w,c
  3964  001554  B4D8               	btfsc	status,2,c
  3965  001556  D00E               	goto	l1367
  3966  001558  C049  F001         	movff	exp@x,___ftneg@f1
  3967  00155C  C04A  F002         	movff	exp@x+1,___ftneg@f1+1
  3968  001560  C04B  F003         	movff	exp@x+2,___ftneg@f1+2
  3969  001564  ECD5  F017         	call	___ftneg	;wreg free
  3970  001568  C001  F049         	movff	?___ftneg,exp@x
  3971  00156C  C002  F04A         	movff	?___ftneg+1,exp@x+1
  3972  001570  C003  F04B         	movff	?___ftneg+2,exp@x+2
  3973  001574                     l1367:
  3974  001574  C049  F00D         	movff	exp@x,___ftmul@f1
  3975  001578  C04A  F00E         	movff	exp@x+1,___ftmul@f1+1
  3976  00157C  C04B  F00F         	movff	exp@x+2,___ftmul@f1+2
  3977  001580  0EAA               	movlw	170
  3978  001582  6E10               	movwf	___ftmul@f2,c
  3979  001584  0EB8               	movlw	184
  3980  001586  6E11               	movwf	___ftmul@f2+1,c
  3981  001588  0E3F               	movlw	63
  3982  00158A  6E12               	movwf	___ftmul@f2+2,c
  3983  00158C  ECE6  F010         	call	___ftmul	;wreg free
  3984  001590  C00D  F049         	movff	?___ftmul,exp@x
  3985  001594  C00E  F04A         	movff	?___ftmul+1,exp@x+1
  3986  001598  C00F  F04B         	movff	?___ftmul+2,exp@x+2
  3987  00159C  C049  F041         	movff	exp@x,floor@x
  3988  0015A0  C04A  F042         	movff	exp@x+1,floor@x+1
  3989  0015A4  C04B  F043         	movff	exp@x+2,floor@x+2
  3990  0015A8  ECDD  F011         	call	_floor	;wreg free
  3991  0015AC  C041  F04C         	movff	?_floor,_exp$2730
  3992  0015B0  C042  F04D         	movff	?_floor+1,_exp$2730+1
  3993  0015B4  C043  F04E         	movff	?_floor+2,_exp$2730+2
  3994  0015B8  C04C  F028         	movff	_exp$2730,___fttol@f1
  3995  0015BC  C04D  F029         	movff	_exp$2730+1,___fttol@f1+1
  3996  0015C0  C04E  F02A         	movff	_exp$2730+2,___fttol@f1+2
  3997  0015C4  EC65  F010         	call	___fttol	;wreg free
  3998  0015C8  C028  F04F         	movff	?___fttol,exp@exponent
  3999  0015CC  C029  F050         	movff	?___fttol+1,exp@exponent+1
  4000  0015D0  C049  F028         	movff	exp@x,___ftsub@f1
  4001  0015D4  C04A  F029         	movff	exp@x+1,___ftsub@f1+1
  4002  0015D8  C04B  F02A         	movff	exp@x+2,___ftsub@f1+2
  4003  0015DC  C04F  F009         	movff	exp@exponent,___awtoft@c
  4004  0015E0  C050  F00A         	movff	exp@exponent+1,___awtoft@c+1
  4005  0015E4  EC5F  F017         	call	___awtoft	;wreg free
  4006  0015E8  C009  F02B         	movff	?___awtoft,___ftsub@f2
  4007  0015EC  C00A  F02C         	movff	?___awtoft+1,___ftsub@f2+1
  4008  0015F0  C00B  F02D         	movff	?___awtoft+2,___ftsub@f2+2
  4009  0015F4  EC3D  F017         	call	___ftsub	;wreg free
  4010  0015F8  C028  F049         	movff	?___ftsub,exp@x
  4011  0015FC  C029  F04A         	movff	?___ftsub+1,exp@x+1
  4012  001600  C02A  F04B         	movff	?___ftsub+2,exp@x+2
  4013  001604  C049  F028         	movff	exp@x,eval_poly@x
  4014  001608  C04A  F029         	movff	exp@x+1,eval_poly@x+1
  4015  00160C  C04B  F02A         	movff	exp@x+2,eval_poly@x+2
  4016  001610  0E0F               	movlw	low exp@coeff
  4017  001612  6E2B               	movwf	eval_poly@d,c
  4018  001614  0E0F               	movlw	high exp@coeff
  4019  001616  6E2C               	movwf	eval_poly@d+1,c
  4020  001618  0E00               	movlw	0
  4021  00161A  6E2E               	movwf	eval_poly@n+1,c
  4022  00161C  0E09               	movlw	9
  4023  00161E  6E2D               	movwf	eval_poly@n,c
  4024  001620  ECB6  F012         	call	_eval_poly	;wreg free
  4025  001624  C028  F034         	movff	?_eval_poly,ldexp@value
  4026  001628  C029  F035         	movff	?_eval_poly+1,ldexp@value+1
  4027  00162C  C02A  F036         	movff	?_eval_poly+2,ldexp@value+2
  4028  001630  C04F  F037         	movff	exp@exponent,ldexp@newexp
  4029  001634  C050  F038         	movff	exp@exponent+1,ldexp@newexp+1
  4030  001638  EC4C  F012         	call	_ldexp	;wreg free
  4031  00163C  C034  F049         	movff	?_ldexp,exp@x
  4032  001640  C035  F04A         	movff	?_ldexp+1,exp@x+1
  4033  001644  C036  F04B         	movff	?_ldexp+2,exp@x+2
  4034  001648  5051               	movf	exp@sign,w,c
  4035  00164A  B4D8               	btfsc	status,2,c
  4036  00164C  D025               	goto	l1368
  4037  00164E  2849               	incf	exp@x,w,c
  4038  001650  E10E               	bnz	l3814
  4039  001652  0E7F               	movlw	127
  4040  001654  184A               	xorwf	exp@x+1,w,c
  4041  001656  E10B               	bnz	l3814
  4042  001658  0E7F               	movlw	127
  4043  00165A  184B               	xorwf	exp@x+2,w,c
  4044  00165C  A4D8               	btfss	status,2,c
  4045  00165E  D007               	goto	l3814
  4046  001660  0E00               	movlw	0
  4047  001662  6E49               	movwf	?_exp,c
  4048  001664  0E00               	movlw	0
  4049  001666  6E4A               	movwf	?_exp+1,c
  4050  001668  0E00               	movlw	0
  4051  00166A  6E4B               	movwf	?_exp+2,c
  4052  00166C  0012               	return	
  4053  00166E                     l3814:
  4054  00166E  0E00               	movlw	0
  4055  001670  6E09               	movwf	___ftdiv@f1,c
  4056  001672  0E80               	movlw	128
  4057  001674  6E0A               	movwf	___ftdiv@f1+1,c
  4058  001676  0E3F               	movlw	63
  4059  001678  6E0B               	movwf	___ftdiv@f1+2,c
  4060  00167A  C049  F00C         	movff	exp@x,___ftdiv@f2
  4061  00167E  C04A  F00D         	movff	exp@x+1,___ftdiv@f2+1
  4062  001682  C04B  F00E         	movff	exp@x+2,___ftdiv@f2+2
  4063  001686  EC67  F011         	call	___ftdiv	;wreg free
  4064  00168A  C009  F049         	movff	?___ftdiv,?_exp
  4065  00168E  C00A  F04A         	movff	?___ftdiv+1,?_exp+1
  4066  001692  C00B  F04B         	movff	?___ftdiv+2,?_exp+2
  4067  001696  0012               	return	
  4068  001698                     l1368:
  4069  001698  C049  F049         	movff	exp@x,?_exp
  4070  00169C  C04A  F04A         	movff	exp@x+1,?_exp+1
  4071  0016A0  C04B  F04B         	movff	exp@x+2,?_exp+2
  4072  0016A4  0012               	return		;funcret
  4073  0016A6                     __end_of_exp:
  4074                           	opt stack 0
  4075                           tblptru	equ	0xFF8
  4076                           tblptrh	equ	0xFF7
  4077                           tblptrl	equ	0xFF6
  4078                           tablat	equ	0xFF5
  4079                           prodh	equ	0xFF4
  4080                           prodl	equ	0xFF3
  4081                           indf0	equ	0xFEF
  4082                           postinc0	equ	0xFEE
  4083                           fsr0h	equ	0xFEA
  4084                           fsr0l	equ	0xFE9
  4085                           wreg	equ	0xFE8
  4086                           postdec1	equ	0xFE5
  4087                           fsr1l	equ	0xFE1
  4088                           indf2	equ	0xFDF
  4089                           postinc2	equ	0xFDE
  4090                           postdec2	equ	0xFDD
  4091                           fsr2h	equ	0xFDA
  4092                           fsr2l	equ	0xFD9
  4093                           status	equ	0xFD8
  4094                           
  4095 ;; *************** function _ldexp *****************
  4096 ;; Defined at:
  4097 ;;		line 277 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\frexp.c"
  4098 ;; Parameters:    Size  Location     Type
  4099 ;;  value           3   51[COMRAM] unsigned char 
  4100 ;;  newexp          2   54[COMRAM] int 
  4101 ;; Auto vars:     Size  Location     Type
  4102 ;;		None
  4103 ;; Return value:  Size  Location     Type
  4104 ;;                  3   51[COMRAM] int 
  4105 ;; Registers used:
  4106 ;;		wreg, status,2, status,0
  4107 ;; Tracked objects:
  4108 ;;		On entry : 0/0
  4109 ;;		On exit  : 0/0
  4110 ;;		Unchanged: 0/0
  4111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4112 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4114 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4115 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4116 ;;Total ram usage:        7 bytes
  4117 ;; Hardware stack levels used:    1
  4118 ;; This function calls:
  4119 ;;		Nothing
  4120 ;; This function is called by:
  4121 ;;		_exp
  4122 ;; This function uses a non-reentrant model
  4123 ;;
  4124                           
  4125                           	psect	text15
  4126  002498                     __ptext15:
  4127                           	opt stack 0
  4128  002498                     _ldexp:
  4129                           	opt stack 27
  4130                           
  4131                           ;incstack = 0
  4132  002498  5034               	movf	ldexp@value,w,c
  4133  00249A  1035               	iorwf	ldexp@value+1,w,c
  4134  00249C  1036               	iorwf	ldexp@value+2,w,c
  4135  00249E  A4D8               	btfss	status,2,c
  4136  0024A0  D007               	goto	l3482
  4137  0024A2  0E00               	movlw	0
  4138  0024A4  6E34               	movwf	?_ldexp,c
  4139  0024A6  0E00               	movlw	0
  4140  0024A8  6E35               	movwf	?_ldexp+1,c
  4141  0024AA  0E00               	movlw	0
  4142  0024AC  6E36               	movwf	?_ldexp+2,c
  4143  0024AE  0012               	return	
  4144  0024B0                     l3482:
  4145  0024B0  5036               	movf	ldexp@value+2,w,c
  4146  0024B2  0B7F               	andlw	127
  4147  0024B4  6E39               	movwf	??_ldexp& (0+255),c
  4148  0024B6  6A3A               	clrf	(??_ldexp+1)& (0+255),c
  4149  0024B8  90D8               	bcf	status,0,c
  4150  0024BA  3639               	rlcf	??_ldexp,f,c
  4151  0024BC  363A               	rlcf	??_ldexp+1,f,c
  4152  0024BE  5039               	movf	??_ldexp,w,c
  4153  0024C0  2637               	addwf	ldexp@newexp,f,c
  4154  0024C2  503A               	movf	??_ldexp+1,w,c
  4155  0024C4  2238               	addwfc	ldexp@newexp+1,f,c
  4156  0024C6  AE35               	btfss	ldexp@value+1,7,c
  4157  0024C8  D003               	goto	u3220
  4158  0024CA  6A39               	clrf	??_ldexp& (0+255),c
  4159  0024CC  2A39               	incf	??_ldexp& (0+255),f,c
  4160  0024CE  D001               	goto	u3228
  4161  0024D0                     u3220:
  4162  0024D0  6A39               	clrf	??_ldexp& (0+255),c
  4163  0024D2                     u3228:
  4164  0024D2  5039               	movf	??_ldexp,w,c
  4165  0024D4  2637               	addwf	ldexp@newexp,f,c
  4166  0024D6  0E00               	movlw	0
  4167  0024D8  2238               	addwfc	ldexp@newexp+1,f,c
  4168  0024DA  AE38               	btfss	ldexp@newexp+1,7,c
  4169  0024DC  D00D               	goto	l3490
  4170  0024DE  0E00               	movlw	0
  4171  0024E0  0100               	movlb	0	; () banked
  4172  0024E2  6F83               	movwf	(_errno+1)& (0+255),b
  4173  0024E4  0E22               	movlw	34
  4174  0024E6  6F82               	movwf	_errno& (0+255),b
  4175  0024E8  0E00               	movlw	0
  4176  0024EA  6E34               	movwf	?_ldexp,c
  4177  0024EC  0E00               	movlw	0
  4178  0024EE  6E35               	movwf	?_ldexp+1,c
  4179  0024F0  0E00               	movlw	0
  4180  0024F2                     L2:
  4181  0024F2  6E36               	movwf	?_ldexp+2,c
  4182                           
  4183                           ; BSR set to: 0
  4184  0024F4  0012               	return	
  4185                           
  4186                           ; BSR set to: 0
  4187  0024F6  D032               	goto	l3508
  4188  0024F8                     l3490:
  4189  0024F8  BE38               	btfsc	ldexp@newexp+1,7,c
  4190  0024FA  D01A               	goto	l3506
  4191  0024FC  0438               	decf	ldexp@newexp+1,w,c
  4192  0024FE  A0D8               	btfss	status,0,c
  4193  002500  D017               	goto	l3506
  4194  002502  0E00               	movlw	0
  4195  002504  0100               	movlb	0	; () banked
  4196  002506  6F83               	movwf	(_errno+1)& (0+255),b
  4197  002508  0E22               	movlw	34
  4198  00250A  6F82               	movwf	_errno& (0+255),b
  4199                           
  4200                           ; BSR set to: 0
  4201  00250C  AE36               	btfss	ldexp@value+2,7,c
  4202  00250E  D008               	goto	l3502
  4203                           
  4204                           ; BSR set to: 0
  4205  002510  0EFF               	movlw	255
  4206  002512  6E34               	movwf	?_ldexp,c
  4207  002514  0E7F               	movlw	127
  4208  002516  6E35               	movwf	?_ldexp+1,c
  4209  002518  0EFF               	movlw	255
  4210  00251A  D7EB               	goto	L2
  4211                           
  4212                           ; BSR set to: 0
  4213  00251C  0012               	return	
  4214                           
  4215                           ; BSR set to: 0
  4216  00251E  D01E               	goto	l3508
  4217  002520                     l3502:
  4218                           
  4219                           ; BSR set to: 0
  4220  002520  0EFF               	movlw	255
  4221  002522  6E34               	movwf	?_ldexp,c
  4222  002524  0E7F               	movlw	127
  4223  002526  6E35               	movwf	?_ldexp+1,c
  4224  002528  0E7F               	movlw	127
  4225  00252A  D7E3               	goto	L2
  4226                           
  4227                           ; BSR set to: 0
  4228  00252C  0012               	return	
  4229                           
  4230                           ; BSR set to: 0
  4231  00252E  D016               	goto	l3508
  4232  002530                     l3506:
  4233  002530  3438               	rlcf	ldexp@newexp+1,w,c
  4234  002532  3038               	rrcf	ldexp@newexp+1,w,c
  4235  002534  6E3A               	movwf	(??_ldexp+1)& (0+255),c
  4236  002536  3037               	rrcf	ldexp@newexp,w,c
  4237  002538  6E39               	movwf	??_ldexp& (0+255),c
  4238  00253A  5036               	movf	ldexp@value+2,w,c
  4239  00253C  1839               	xorwf	??_ldexp,w,c
  4240  00253E  0B80               	andlw	-128
  4241  002540  1839               	xorwf	??_ldexp,w,c
  4242  002542  6E36               	movwf	ldexp@value+2,c
  4243  002544  C037  F039         	movff	ldexp@newexp,??_ldexp
  4244  002548  0E01               	movlw	1
  4245  00254A  1639               	andwf	??_ldexp,f,c
  4246  00254C  3239               	rrcf	??_ldexp,f,c
  4247  00254E  3239               	rrcf	??_ldexp,f,c
  4248  002550  5035               	movf	ldexp@value+1,w,c
  4249  002552  1839               	xorwf	??_ldexp,w,c
  4250  002554  0B7F               	andlw	-129
  4251  002556  1839               	xorwf	??_ldexp,w,c
  4252  002558  6E35               	movwf	ldexp@value+1,c
  4253  00255A  D000               	goto	l3508
  4254  00255C                     l3508:
  4255  00255C  C034  F034         	movff	ldexp@value,?_ldexp
  4256  002560  C035  F035         	movff	ldexp@value+1,?_ldexp+1
  4257  002564  C036  F036         	movff	ldexp@value+2,?_ldexp+2
  4258  002568  0012               	return	
  4259  00256A  0012               	return		;funcret
  4260  00256C                     __end_of_ldexp:
  4261                           	opt stack 0
  4262                           tblptru	equ	0xFF8
  4263                           tblptrh	equ	0xFF7
  4264                           tblptrl	equ	0xFF6
  4265                           tablat	equ	0xFF5
  4266                           prodh	equ	0xFF4
  4267                           prodl	equ	0xFF3
  4268                           indf0	equ	0xFEF
  4269                           postinc0	equ	0xFEE
  4270                           fsr0h	equ	0xFEA
  4271                           fsr0l	equ	0xFE9
  4272                           wreg	equ	0xFE8
  4273                           postdec1	equ	0xFE5
  4274                           fsr1l	equ	0xFE1
  4275                           indf2	equ	0xFDF
  4276                           postinc2	equ	0xFDE
  4277                           postdec2	equ	0xFDD
  4278                           fsr2h	equ	0xFDA
  4279                           fsr2l	equ	0xFD9
  4280                           status	equ	0xFD8
  4281                           
  4282 ;; *************** function _floor *****************
  4283 ;; Defined at:
  4284 ;;		line 13 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\floor.c"
  4285 ;; Parameters:    Size  Location     Type
  4286 ;;  x               3   64[COMRAM] int 
  4287 ;; Auto vars:     Size  Location     Type
  4288 ;;  i               3   67[COMRAM] int 
  4289 ;;  expon           2   70[COMRAM] int 
  4290 ;; Return value:  Size  Location     Type
  4291 ;;                  3   64[COMRAM] int 
  4292 ;; Registers used:
  4293 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4294 ;; Tracked objects:
  4295 ;;		On entry : 0/0
  4296 ;;		On exit  : 0/0
  4297 ;;		Unchanged: 0/0
  4298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4299 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4300 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4302 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4303 ;;Total ram usage:        8 bytes
  4304 ;; Hardware stack levels used:    1
  4305 ;; Hardware stack levels required when called:    2
  4306 ;; This function calls:
  4307 ;;		___altoft
  4308 ;;		___ftadd
  4309 ;;		___ftge
  4310 ;;		___fttol
  4311 ;;		_frexp
  4312 ;; This function is called by:
  4313 ;;		_exp
  4314 ;; This function uses a non-reentrant model
  4315 ;;
  4316                           
  4317                           	psect	text16
  4318  0023BA                     __ptext16:
  4319                           	opt stack 0
  4320  0023BA                     _floor:
  4321                           	opt stack 25
  4322                           
  4323                           ;incstack = 0
  4324  0023BA  C041  F001         	movff	floor@x,frexp@value
  4325  0023BE  C042  F002         	movff	floor@x+1,frexp@value+1
  4326  0023C2  C043  F003         	movff	floor@x+2,frexp@value+2
  4327  0023C6  0E47               	movlw	low floor@expon
  4328  0023C8  6E04               	movwf	frexp@eptr,c
  4329  0023CA  0E00               	movlw	high floor@expon
  4330  0023CC  6E05               	movwf	frexp@eptr+1,c
  4331  0023CE  EC19  F014         	call	_frexp	;wreg free
  4332  0023D2  AE48               	btfss	floor@expon+1,7,c
  4333  0023D4  D010               	goto	l3460
  4334  0023D6  AE43               	btfss	floor@x+2,7,c
  4335  0023D8  D007               	goto	l3456
  4336  0023DA  0E00               	movlw	0
  4337  0023DC  6E41               	movwf	?_floor,c
  4338  0023DE  0E80               	movlw	128
  4339  0023E0  6E42               	movwf	?_floor+1,c
  4340  0023E2  0EBF               	movlw	191
  4341  0023E4  6E43               	movwf	?_floor+2,c
  4342  0023E6  0012               	return	
  4343  0023E8                     l3456:
  4344  0023E8  0E00               	movlw	0
  4345  0023EA  6E41               	movwf	?_floor,c
  4346  0023EC  0E00               	movlw	0
  4347  0023EE  6E42               	movwf	?_floor+1,c
  4348  0023F0  0E00               	movlw	0
  4349  0023F2  6E43               	movwf	?_floor+2,c
  4350  0023F4  0012               	return	
  4351  0023F6                     l3460:
  4352  0023F6  5048               	movf	floor@expon+1,w,c
  4353  0023F8  E104               	bnz	u3180
  4354  0023FA  0E15               	movlw	21
  4355  0023FC  5C47               	subwf	floor@expon,w,c
  4356  0023FE  A0D8               	btfss	status,0,c
  4357  002400  D007               	goto	l3464
  4358  002402                     u3180:
  4359  002402  C041  F041         	movff	floor@x,?_floor
  4360  002406  C042  F042         	movff	floor@x+1,?_floor+1
  4361  00240A  C043  F043         	movff	floor@x+2,?_floor+2
  4362  00240E  0012               	return	
  4363  002410                     l3464:
  4364  002410  C041  F028         	movff	floor@x,___fttol@f1
  4365  002414  C042  F029         	movff	floor@x+1,___fttol@f1+1
  4366  002418  C043  F02A         	movff	floor@x+2,___fttol@f1+2
  4367  00241C  EC65  F010         	call	___fttol	;wreg free
  4368  002420  C028  F037         	movff	?___fttol,___altoft@c
  4369  002424  C029  F038         	movff	?___fttol+1,___altoft@c+1
  4370  002428  C02A  F039         	movff	?___fttol+2,___altoft@c+2
  4371  00242C  C02B  F03A         	movff	?___fttol+3,___altoft@c+3
  4372  002430  EC1F  F015         	call	___altoft	;wreg free
  4373  002434  C037  F044         	movff	?___altoft,floor@i
  4374  002438  C038  F045         	movff	?___altoft+1,floor@i+1
  4375  00243C  C039  F046         	movff	?___altoft+2,floor@i+2
  4376  002440  C041  F001         	movff	floor@x,___ftge@ff1
  4377  002444  C042  F002         	movff	floor@x+1,___ftge@ff1+1
  4378  002448  C043  F003         	movff	floor@x+2,___ftge@ff1+2
  4379  00244C  C044  F004         	movff	floor@i,___ftge@ff2
  4380  002450  C045  F005         	movff	floor@i+1,___ftge@ff2+1
  4381  002454  C046  F006         	movff	floor@i+2,___ftge@ff2+2
  4382  002458  EC83  F013         	call	___ftge	;wreg free
  4383  00245C  B0D8               	btfsc	status,0,c
  4384  00245E  D015               	goto	l1378
  4385  002460  C044  F01C         	movff	floor@i,___ftadd@f1
  4386  002464  C045  F01D         	movff	floor@i+1,___ftadd@f1+1
  4387  002468  C046  F01E         	movff	floor@i+2,___ftadd@f1+2
  4388  00246C  0E00               	movlw	0
  4389  00246E  6E1F               	movwf	___ftadd@f2,c
  4390  002470  0E80               	movlw	128
  4391  002472  6E20               	movwf	___ftadd@f2+1,c
  4392  002474  0EBF               	movlw	191
  4393  002476  6E21               	movwf	___ftadd@f2+2,c
  4394  002478  EC3C  F00C         	call	___ftadd	;wreg free
  4395  00247C  C01C  F041         	movff	?___ftadd,?_floor
  4396  002480  C01D  F042         	movff	?___ftadd+1,?_floor+1
  4397  002484  C01E  F043         	movff	?___ftadd+2,?_floor+2
  4398  002488  0012               	return	
  4399  00248A                     l1378:
  4400  00248A  C044  F041         	movff	floor@i,?_floor
  4401  00248E  C045  F042         	movff	floor@i+1,?_floor+1
  4402  002492  C046  F043         	movff	floor@i+2,?_floor+2
  4403  002496  0012               	return		;funcret
  4404  002498                     __end_of_floor:
  4405                           	opt stack 0
  4406                           tblptru	equ	0xFF8
  4407                           tblptrh	equ	0xFF7
  4408                           tblptrl	equ	0xFF6
  4409                           tablat	equ	0xFF5
  4410                           prodh	equ	0xFF4
  4411                           prodl	equ	0xFF3
  4412                           indf0	equ	0xFEF
  4413                           postinc0	equ	0xFEE
  4414                           fsr0h	equ	0xFEA
  4415                           fsr0l	equ	0xFE9
  4416                           wreg	equ	0xFE8
  4417                           postdec1	equ	0xFE5
  4418                           fsr1l	equ	0xFE1
  4419                           indf2	equ	0xFDF
  4420                           postinc2	equ	0xFDE
  4421                           postdec2	equ	0xFDD
  4422                           fsr2h	equ	0xFDA
  4423                           fsr2l	equ	0xFD9
  4424                           status	equ	0xFD8
  4425                           
  4426 ;; *************** function _frexp *****************
  4427 ;; Defined at:
  4428 ;;		line 254 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\frexp.c"
  4429 ;; Parameters:    Size  Location     Type
  4430 ;;  value           3    0[COMRAM] int 
  4431 ;;  eptr            2    3[COMRAM] PTR int 
  4432 ;;		 -> log@exponent(2), floor@expon(2), 
  4433 ;; Auto vars:     Size  Location     Type
  4434 ;;		None
  4435 ;; Return value:  Size  Location     Type
  4436 ;;                  3    0[COMRAM] PTR int 
  4437 ;; Registers used:
  4438 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4439 ;; Tracked objects:
  4440 ;;		On entry : 0/0
  4441 ;;		On exit  : 0/0
  4442 ;;		Unchanged: 0/0
  4443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4444 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4446 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4447 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4448 ;;Total ram usage:        7 bytes
  4449 ;; Hardware stack levels used:    1
  4450 ;; This function calls:
  4451 ;;		Nothing
  4452 ;; This function is called by:
  4453 ;;		_floor
  4454 ;;		_log
  4455 ;; This function uses a non-reentrant model
  4456 ;;
  4457                           
  4458                           	psect	text17
  4459  002832                     __ptext17:
  4460                           	opt stack 0
  4461  002832                     _frexp:
  4462                           	opt stack 27
  4463                           
  4464                           ;incstack = 0
  4465  002832  5001               	movf	frexp@value,w,c
  4466  002834  1002               	iorwf	frexp@value+1,w,c
  4467  002836  1003               	iorwf	frexp@value+2,w,c
  4468  002838  A4D8               	btfss	status,2,c
  4469  00283A  D00F               	goto	l3214
  4470  00283C  C004  FFD9         	movff	frexp@eptr,fsr2l
  4471  002840  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  4472  002844  0E00               	movlw	0
  4473  002846  6EDE               	movwf	postinc2,c
  4474  002848  0E00               	movlw	0
  4475  00284A  6EDD               	movwf	postdec2,c
  4476  00284C  0E00               	movlw	0
  4477  00284E  6E01               	movwf	?_frexp,c
  4478  002850  0E00               	movlw	0
  4479  002852  6E02               	movwf	?_frexp+1,c
  4480  002854  0E00               	movlw	0
  4481  002856  6E03               	movwf	?_frexp+2,c
  4482  002858  0012               	return	
  4483  00285A                     l3214:
  4484  00285A  5003               	movf	frexp@value+2,w,c
  4485  00285C  0B7F               	andlw	127
  4486  00285E  6E06               	movwf	??_frexp& (0+255),c
  4487  002860  6A07               	clrf	(??_frexp+1)& (0+255),c
  4488  002862  90D8               	bcf	status,0,c
  4489  002864  3606               	rlcf	??_frexp,f,c
  4490  002866  3607               	rlcf	??_frexp+1,f,c
  4491  002868  C004  FFD9         	movff	frexp@eptr,fsr2l
  4492  00286C  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  4493  002870  C006  FFDE         	movff	??_frexp,postinc2
  4494  002874  C007  FFDD         	movff	??_frexp+1,postdec2
  4495  002878  AE02               	btfss	frexp@value+1,7,c
  4496  00287A  D003               	goto	u2840
  4497  00287C  6A06               	clrf	??_frexp& (0+255),c
  4498  00287E  2A06               	incf	??_frexp& (0+255),f,c
  4499  002880  D001               	goto	u2848
  4500  002882                     u2840:
  4501  002882  6A06               	clrf	??_frexp& (0+255),c
  4502  002884                     u2848:
  4503  002884  5006               	movf	??_frexp,w,c
  4504  002886  C004  FFD9         	movff	frexp@eptr,fsr2l
  4505  00288A  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  4506  00288E  12DE               	iorwf	postinc2,f,c
  4507  002890  0E00               	movlw	0
  4508  002892  12DD               	iorwf	postdec2,f,c
  4509  002894  C004  FFD9         	movff	frexp@eptr,fsr2l
  4510  002898  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  4511  00289C  0E82               	movlw	130
  4512  00289E  26DE               	addwf	postinc2,f,c
  4513  0028A0  0EFF               	movlw	255
  4514  0028A2  22DD               	addwfc	postdec2,f,c
  4515  0028A4  8003               	bsf	frexp@value+2,0,c
  4516  0028A6  8203               	bsf	frexp@value+2,1,c
  4517  0028A8  8403               	bsf	frexp@value+2,2,c
  4518  0028AA  8603               	bsf	frexp@value+2,3,c
  4519  0028AC  8803               	bsf	frexp@value+2,4,c
  4520  0028AE  8A03               	bsf	frexp@value+2,5,c
  4521  0028B0  9C03               	bcf	frexp@value+2,6,c
  4522  0028B2  9E02               	bcf	frexp@value+1,7,c
  4523  0028B4  C001  F001         	movff	frexp@value,?_frexp
  4524  0028B8  C002  F002         	movff	frexp@value+1,?_frexp+1
  4525  0028BC  C003  F003         	movff	frexp@value+2,?_frexp+2
  4526  0028C0  0012               	return	
  4527  0028C2  0012               	return		;funcret
  4528  0028C4                     __end_of_frexp:
  4529                           	opt stack 0
  4530                           tblptru	equ	0xFF8
  4531                           tblptrh	equ	0xFF7
  4532                           tblptrl	equ	0xFF6
  4533                           tablat	equ	0xFF5
  4534                           prodh	equ	0xFF4
  4535                           prodl	equ	0xFF3
  4536                           indf0	equ	0xFEF
  4537                           postinc0	equ	0xFEE
  4538                           fsr0h	equ	0xFEA
  4539                           fsr0l	equ	0xFE9
  4540                           wreg	equ	0xFE8
  4541                           postdec1	equ	0xFE5
  4542                           fsr1l	equ	0xFE1
  4543                           indf2	equ	0xFDF
  4544                           postinc2	equ	0xFDE
  4545                           postdec2	equ	0xFDD
  4546                           fsr2h	equ	0xFDA
  4547                           fsr2l	equ	0xFD9
  4548                           status	equ	0xFD8
  4549                           
  4550 ;; *************** function ___fttol *****************
  4551 ;; Defined at:
  4552 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\fttol.c"
  4553 ;; Parameters:    Size  Location     Type
  4554 ;;  f1              3   39[COMRAM] float 
  4555 ;; Auto vars:     Size  Location     Type
  4556 ;;  lval            4   49[COMRAM] unsigned long 
  4557 ;;  exp1            1   53[COMRAM] unsigned char 
  4558 ;;  sign1           1   48[COMRAM] unsigned char 
  4559 ;; Return value:  Size  Location     Type
  4560 ;;                  4   39[COMRAM] long 
  4561 ;; Registers used:
  4562 ;;		wreg, status,2, status,0
  4563 ;; Tracked objects:
  4564 ;;		On entry : 0/0
  4565 ;;		On exit  : 0/0
  4566 ;;		Unchanged: 0/0
  4567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4568 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4569 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4570 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4571 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4572 ;;Total ram usage:       15 bytes
  4573 ;; Hardware stack levels used:    1
  4574 ;; This function calls:
  4575 ;;		Nothing
  4576 ;; This function is called by:
  4577 ;;		_set_vision
  4578 ;;		_pow
  4579 ;;		_exp
  4580 ;;		_floor
  4581 ;; This function uses a non-reentrant model
  4582 ;;
  4583                           
  4584                           	psect	text18
  4585  0020CA                     __ptext18:
  4586                           	opt stack 0
  4587  0020CA                     ___fttol:
  4588                           	opt stack 26
  4589                           
  4590                           ;incstack = 0
  4591  0020CA  C02A  F02C         	movff	___fttol@f1+2,??___fttol
  4592  0020CE  6A2D               	clrf	(??___fttol+1)& (0+255),c
  4593  0020D0  6A2E               	clrf	(??___fttol+2)& (0+255),c
  4594  0020D2  3429               	rlcf	___fttol@f1+1,w,c
  4595  0020D4  362C               	rlcf	??___fttol& (0+255),f,c
  4596  0020D6  E301               	bnc	u2691
  4597  0020D8  802D               	bsf	(??___fttol+1)& (0+255),0,c
  4598  0020DA                     u2691:
  4599  0020DA  502C               	movf	??___fttol,w,c
  4600  0020DC  6E36               	movwf	___fttol@exp1,c
  4601  0020DE  5036               	movf	___fttol@exp1,w,c
  4602  0020E0  A4D8               	btfss	status,2,c
  4603  0020E2  D009               	goto	l3128
  4604  0020E4  0E00               	movlw	0
  4605  0020E6  6E28               	movwf	?___fttol,c
  4606  0020E8  0E00               	movlw	0
  4607  0020EA  6E29               	movwf	?___fttol+1,c
  4608  0020EC  0E00               	movlw	0
  4609  0020EE  6E2A               	movwf	?___fttol+2,c
  4610  0020F0  0E00               	movlw	0
  4611  0020F2  6E2B               	movwf	?___fttol+3,c
  4612  0020F4  0012               	return	
  4613  0020F6                     l3128:
  4614  0020F6  0E17               	movlw	23
  4615  0020F8  6E2C               	movwf	??___fttol& (0+255),c
  4616  0020FA  C028  F02D         	movff	___fttol@f1,??___fttol+1
  4617  0020FE  C029  F02E         	movff	___fttol@f1+1,??___fttol+2
  4618  002102  C02A  F02F         	movff	___fttol@f1+2,??___fttol+3
  4619  002106  282C               	incf	??___fttol,w,c
  4620  002108  6E30               	movwf	(??___fttol+4)& (0+255),c
  4621  00210A  D004               	goto	u2710
  4622  00210C                     u2715:
  4623  00210C  90D8               	bcf	status,0,c
  4624  00210E  322F               	rrcf	??___fttol+3,f,c
  4625  002110  322E               	rrcf	??___fttol+2,f,c
  4626  002112  322D               	rrcf	??___fttol+1,f,c
  4627  002114                     u2710:
  4628  002114  2E30               	decfsz	(??___fttol+4)& (0+255),f,c
  4629  002116  D7FA               	goto	u2715
  4630  002118  502D               	movf	??___fttol+1,w,c
  4631  00211A  6E31               	movwf	___fttol@sign1,c
  4632  00211C  8E29               	bsf	___fttol@f1+1,7,c
  4633  00211E  0EFF               	movlw	255
  4634  002120  1628               	andwf	___fttol@f1,f,c
  4635  002122  0EFF               	movlw	255
  4636  002124  1629               	andwf	___fttol@f1+1,f,c
  4637  002126  0E00               	movlw	0
  4638  002128  162A               	andwf	___fttol@f1+2,f,c
  4639  00212A  5028               	movf	___fttol@f1,w,c
  4640  00212C  6E32               	movwf	___fttol@lval,c
  4641  00212E  5029               	movf	___fttol@f1+1,w,c
  4642  002130  6E33               	movwf	___fttol@lval+1,c
  4643  002132  502A               	movf	___fttol@f1+2,w,c
  4644  002134  6E34               	movwf	___fttol@lval+2,c
  4645  002136  6A35               	clrf	___fttol@lval+3,c
  4646  002138  0E8E               	movlw	142
  4647  00213A  5E36               	subwf	___fttol@exp1,f,c
  4648  00213C  AE36               	btfss	___fttol@exp1,7,c
  4649  00213E  D017               	goto	l3150
  4650  002140  5036               	movf	___fttol@exp1,w,c
  4651  002142  0A80               	xorlw	128
  4652  002144  0F8F               	addlw	143
  4653  002146  B0D8               	btfsc	status,0,c
  4654  002148  D00A               	goto	l3146
  4655  00214A  0E00               	movlw	0
  4656  00214C  6E28               	movwf	?___fttol,c
  4657  00214E  0E00               	movlw	0
  4658  002150  6E29               	movwf	?___fttol+1,c
  4659  002152  0E00               	movlw	0
  4660  002154  6E2A               	movwf	?___fttol+2,c
  4661  002156  0E00               	movlw	0
  4662  002158  6E2B               	movwf	?___fttol+3,c
  4663  00215A  0012               	return	
  4664  00215C  D000               	goto	l3146
  4665  00215E                     l3146:
  4666  00215E  90D8               	bcf	status,0,c
  4667  002160  3235               	rrcf	___fttol@lval+3,f,c
  4668  002162  3234               	rrcf	___fttol@lval+2,f,c
  4669  002164  3233               	rrcf	___fttol@lval+1,f,c
  4670  002166  3232               	rrcf	___fttol@lval,f,c
  4671  002168  3E36               	incfsz	___fttol@exp1,f,c
  4672  00216A  D7F9               	goto	l3146
  4673  00216C  D019               	goto	l3160
  4674  00216E                     l3150:
  4675  00216E  0E17               	movlw	23
  4676  002170  6436               	cpfsgt	___fttol@exp1,c
  4677  002172  D011               	goto	l3158
  4678  002174  0E00               	movlw	0
  4679  002176  6E28               	movwf	?___fttol,c
  4680  002178  0E00               	movlw	0
  4681  00217A  6E29               	movwf	?___fttol+1,c
  4682  00217C  0E00               	movlw	0
  4683  00217E  6E2A               	movwf	?___fttol+2,c
  4684  002180  0E00               	movlw	0
  4685  002182  6E2B               	movwf	?___fttol+3,c
  4686  002184  0012               	return	
  4687  002186  D007               	goto	l3158
  4688  002188                     l3156:
  4689  002188  90D8               	bcf	status,0,c
  4690  00218A  3632               	rlcf	___fttol@lval,f,c
  4691  00218C  3633               	rlcf	___fttol@lval+1,f,c
  4692  00218E  3634               	rlcf	___fttol@lval+2,f,c
  4693  002190  3635               	rlcf	___fttol@lval+3,f,c
  4694  002192  0636               	decf	___fttol@exp1,f,c
  4695  002194  D000               	goto	l3158
  4696  002196                     l3158:
  4697  002196  5036               	movf	___fttol@exp1,w,c
  4698  002198  B4D8               	btfsc	status,2,c
  4699  00219A  D002               	goto	l3160
  4700  00219C  D7F5               	goto	l3156
  4701  00219E  D000               	goto	l3160
  4702  0021A0                     l3160:
  4703  0021A0  5031               	movf	___fttol@sign1,w,c
  4704  0021A2  B4D8               	btfsc	status,2,c
  4705  0021A4  D009               	goto	l3164
  4706  0021A6  1E35               	comf	___fttol@lval+3,f,c
  4707  0021A8  1E34               	comf	___fttol@lval+2,f,c
  4708  0021AA  1E33               	comf	___fttol@lval+1,f,c
  4709  0021AC  6C32               	negf	___fttol@lval,c
  4710  0021AE  0E00               	movlw	0
  4711  0021B0  2233               	addwfc	___fttol@lval+1,f,c
  4712  0021B2  2234               	addwfc	___fttol@lval+2,f,c
  4713  0021B4  2235               	addwfc	___fttol@lval+3,f,c
  4714  0021B6  D000               	goto	l3164
  4715  0021B8                     l3164:
  4716  0021B8  C032  F028         	movff	___fttol@lval,?___fttol
  4717  0021BC  C033  F029         	movff	___fttol@lval+1,?___fttol+1
  4718  0021C0  C034  F02A         	movff	___fttol@lval+2,?___fttol+2
  4719  0021C4  C035  F02B         	movff	___fttol@lval+3,?___fttol+3
  4720  0021C8  0012               	return	
  4721  0021CA  0012               	return		;funcret
  4722  0021CC                     __end_of___fttol:
  4723                           	opt stack 0
  4724                           tblptru	equ	0xFF8
  4725                           tblptrh	equ	0xFF7
  4726                           tblptrl	equ	0xFF6
  4727                           tablat	equ	0xFF5
  4728                           prodh	equ	0xFF4
  4729                           prodl	equ	0xFF3
  4730                           indf0	equ	0xFEF
  4731                           postinc0	equ	0xFEE
  4732                           fsr0h	equ	0xFEA
  4733                           fsr0l	equ	0xFE9
  4734                           wreg	equ	0xFE8
  4735                           postdec1	equ	0xFE5
  4736                           fsr1l	equ	0xFE1
  4737                           indf2	equ	0xFDF
  4738                           postinc2	equ	0xFDE
  4739                           postdec2	equ	0xFDD
  4740                           fsr2h	equ	0xFDA
  4741                           fsr2l	equ	0xFD9
  4742                           status	equ	0xFD8
  4743                           
  4744 ;; *************** function ___ftge *****************
  4745 ;; Defined at:
  4746 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\ftge.c"
  4747 ;; Parameters:    Size  Location     Type
  4748 ;;  ff1             3    0[COMRAM] float 
  4749 ;;  ff2             3    3[COMRAM] float 
  4750 ;; Auto vars:     Size  Location     Type
  4751 ;;		None
  4752 ;; Return value:  Size  Location     Type
  4753 ;;		None               void
  4754 ;; Registers used:
  4755 ;;		wreg, status,2, status,0
  4756 ;; Tracked objects:
  4757 ;;		On entry : 0/0
  4758 ;;		On exit  : 0/0
  4759 ;;		Unchanged: 0/0
  4760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4761 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4762 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4763 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4764 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4765 ;;Total ram usage:        9 bytes
  4766 ;; Hardware stack levels used:    1
  4767 ;; This function calls:
  4768 ;;		Nothing
  4769 ;; This function is called by:
  4770 ;;		_pow
  4771 ;;		_exp
  4772 ;;		_floor
  4773 ;; This function uses a non-reentrant model
  4774 ;;
  4775                           
  4776                           	psect	text19
  4777  002706                     __ptext19:
  4778                           	opt stack 0
  4779  002706                     ___ftge:
  4780                           	opt stack 26
  4781                           
  4782                           ;incstack = 0
  4783  002706  AE03               	btfss	___ftge@ff1+2,7,c
  4784  002708  D017               	goto	l3108
  4785  00270A  C001  F007         	movff	___ftge@ff1,??___ftge
  4786  00270E  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  4787  002712  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  4788  002716  1E07               	comf	??___ftge,f,c
  4789  002718  1E08               	comf	??___ftge+1,f,c
  4790  00271A  1E09               	comf	??___ftge+2,f,c
  4791  00271C  2A07               	incf	??___ftge,f,c
  4792  00271E  0E00               	movlw	0
  4793  002720  2208               	addwfc	??___ftge+1,f,c
  4794  002722  2209               	addwfc	??___ftge+2,f,c
  4795  002724  0E00               	movlw	0
  4796  002726  2407               	addwf	??___ftge,w,c
  4797  002728  6E01               	movwf	___ftge@ff1,c
  4798  00272A  0E00               	movlw	0
  4799  00272C  2008               	addwfc	??___ftge+1,w,c
  4800  00272E  6E02               	movwf	___ftge@ff1+1,c
  4801  002730  0E80               	movlw	128
  4802  002732  2009               	addwfc	??___ftge+2,w,c
  4803  002734  6E03               	movwf	___ftge@ff1+2,c
  4804  002736  D000               	goto	l3108
  4805  002738                     l3108:
  4806  002738  AE06               	btfss	___ftge@ff2+2,7,c
  4807  00273A  D017               	goto	l3112
  4808  00273C  C004  F007         	movff	___ftge@ff2,??___ftge
  4809  002740  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  4810  002744  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  4811  002748  1E07               	comf	??___ftge,f,c
  4812  00274A  1E08               	comf	??___ftge+1,f,c
  4813  00274C  1E09               	comf	??___ftge+2,f,c
  4814  00274E  2A07               	incf	??___ftge,f,c
  4815  002750  0E00               	movlw	0
  4816  002752  2208               	addwfc	??___ftge+1,f,c
  4817  002754  2209               	addwfc	??___ftge+2,f,c
  4818  002756  0E00               	movlw	0
  4819  002758  2407               	addwf	??___ftge,w,c
  4820  00275A  6E04               	movwf	___ftge@ff2,c
  4821  00275C  0E00               	movlw	0
  4822  00275E  2008               	addwfc	??___ftge+1,w,c
  4823  002760  6E05               	movwf	___ftge@ff2+1,c
  4824  002762  0E80               	movlw	128
  4825  002764  2009               	addwfc	??___ftge+2,w,c
  4826  002766  6E06               	movwf	___ftge@ff2+2,c
  4827  002768  D000               	goto	l3112
  4828  00276A                     l3112:
  4829  00276A  0E00               	movlw	0
  4830  00276C  1A01               	xorwf	___ftge@ff1,f,c
  4831  00276E  0E00               	movlw	0
  4832  002770  1A02               	xorwf	___ftge@ff1+1,f,c
  4833  002772  0E80               	movlw	128
  4834  002774  1A03               	xorwf	___ftge@ff1+2,f,c
  4835  002776  0E00               	movlw	0
  4836  002778  1A04               	xorwf	___ftge@ff2,f,c
  4837  00277A  0E00               	movlw	0
  4838  00277C  1A05               	xorwf	___ftge@ff2+1,f,c
  4839  00277E  0E80               	movlw	128
  4840  002780  1A06               	xorwf	___ftge@ff2+2,f,c
  4841  002782  5004               	movf	___ftge@ff2,w,c
  4842  002784  5C01               	subwf	___ftge@ff1,w,c
  4843  002786  5005               	movf	___ftge@ff2+1,w,c
  4844  002788  5802               	subwfb	___ftge@ff1+1,w,c
  4845  00278A  5006               	movf	___ftge@ff2+2,w,c
  4846  00278C  5803               	subwfb	___ftge@ff1+2,w,c
  4847  00278E  B0D8               	btfsc	status,0,c
  4848  002790  D002               	goto	l3118
  4849  002792  90D8               	bcf	status,0,c
  4850  002794  0012               	return	
  4851  002796                     l3118:
  4852  002796  80D8               	bsf	status,0,c
  4853  002798  0012               	return	
  4854  00279A  0012               	return		;funcret
  4855  00279C                     __end_of___ftge:
  4856                           	opt stack 0
  4857                           tblptru	equ	0xFF8
  4858                           tblptrh	equ	0xFF7
  4859                           tblptrl	equ	0xFF6
  4860                           tablat	equ	0xFF5
  4861                           prodh	equ	0xFF4
  4862                           prodl	equ	0xFF3
  4863                           indf0	equ	0xFEF
  4864                           postinc0	equ	0xFEE
  4865                           fsr0h	equ	0xFEA
  4866                           fsr0l	equ	0xFE9
  4867                           wreg	equ	0xFE8
  4868                           postdec1	equ	0xFE5
  4869                           fsr1l	equ	0xFE1
  4870                           indf2	equ	0xFDF
  4871                           postinc2	equ	0xFDE
  4872                           postdec2	equ	0xFDD
  4873                           fsr2h	equ	0xFDA
  4874                           fsr2l	equ	0xFD9
  4875                           status	equ	0xFD8
  4876                           
  4877 ;; *************** function ___altoft *****************
  4878 ;; Defined at:
  4879 ;;		line 42 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\altoft.c"
  4880 ;; Parameters:    Size  Location     Type
  4881 ;;  c               4   54[COMRAM] long 
  4882 ;; Auto vars:     Size  Location     Type
  4883 ;;  sign            1   63[COMRAM] unsigned char 
  4884 ;;  exp             1   62[COMRAM] unsigned char 
  4885 ;; Return value:  Size  Location     Type
  4886 ;;                  3   54[COMRAM] float 
  4887 ;; Registers used:
  4888 ;;		wreg, status,2, status,0, cstack
  4889 ;; Tracked objects:
  4890 ;;		On entry : 0/0
  4891 ;;		On exit  : 0/0
  4892 ;;		Unchanged: 0/0
  4893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4894 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4895 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4896 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4897 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4898 ;;Total ram usage:       10 bytes
  4899 ;; Hardware stack levels used:    1
  4900 ;; Hardware stack levels required when called:    1
  4901 ;; This function calls:
  4902 ;;		___ftpack
  4903 ;; This function is called by:
  4904 ;;		_floor
  4905 ;; This function uses a non-reentrant model
  4906 ;;
  4907                           
  4908                           	psect	text20
  4909  002A3E                     __ptext20:
  4910                           	opt stack 0
  4911  002A3E                     ___altoft:
  4912                           	opt stack 25
  4913                           
  4914                           ;incstack = 0
  4915  002A3E  0E00               	movlw	0
  4916  002A40  6E40               	movwf	___altoft@sign,c
  4917  002A42  0E8E               	movlw	142
  4918  002A44  6E3F               	movwf	___altoft@exp,c
  4919  002A46  AE3A               	btfss	___altoft@c+3,7,c
  4920  002A48  D012               	goto	l2980
  4921  002A4A  1E3A               	comf	___altoft@c+3,f,c
  4922  002A4C  1E39               	comf	___altoft@c+2,f,c
  4923  002A4E  1E38               	comf	___altoft@c+1,f,c
  4924  002A50  6C37               	negf	___altoft@c,c
  4925  002A52  0E00               	movlw	0
  4926  002A54  2238               	addwfc	___altoft@c+1,f,c
  4927  002A56  2239               	addwfc	___altoft@c+2,f,c
  4928  002A58  223A               	addwfc	___altoft@c+3,f,c
  4929  002A5A  0E01               	movlw	1
  4930  002A5C  6E40               	movwf	___altoft@sign,c
  4931  002A5E  D007               	goto	l2980
  4932  002A60                     l2978:
  4933  002A60  90D8               	bcf	status,0,c
  4934  002A62  323A               	rrcf	___altoft@c+3,f,c
  4935  002A64  3239               	rrcf	___altoft@c+2,f,c
  4936  002A66  3238               	rrcf	___altoft@c+1,f,c
  4937  002A68  3237               	rrcf	___altoft@c,f,c
  4938  002A6A  2A3F               	incf	___altoft@exp,f,c
  4939  002A6C  D000               	goto	l2980
  4940  002A6E                     l2980:
  4941  002A6E  0E00               	movlw	0
  4942  002A70  1437               	andwf	___altoft@c,w,c
  4943  002A72  6E3B               	movwf	??___altoft& (0+255),c
  4944  002A74  0E00               	movlw	0
  4945  002A76  1438               	andwf	___altoft@c+1,w,c
  4946  002A78  6E3C               	movwf	(??___altoft+1)& (0+255),c
  4947  002A7A  0E00               	movlw	0
  4948  002A7C  1439               	andwf	___altoft@c+2,w,c
  4949  002A7E  6E3D               	movwf	(??___altoft+2)& (0+255),c
  4950  002A80  0EFF               	movlw	255
  4951  002A82  143A               	andwf	___altoft@c+3,w,c
  4952  002A84  6E3E               	movwf	(??___altoft+3)& (0+255),c
  4953  002A86  503B               	movf	??___altoft,w,c
  4954  002A88  103C               	iorwf	??___altoft+1,w,c
  4955  002A8A  103D               	iorwf	??___altoft+2,w,c
  4956  002A8C  103E               	iorwf	??___altoft+3,w,c
  4957  002A8E  A4D8               	btfss	status,2,c
  4958  002A90  D7E7               	goto	l2978
  4959  002A92  C037  F001         	movff	___altoft@c,___ftpack@arg
  4960  002A96  C038  F002         	movff	___altoft@c+1,___ftpack@arg+1
  4961  002A9A  C039  F003         	movff	___altoft@c+2,___ftpack@arg+2
  4962  002A9E  C03F  F004         	movff	___altoft@exp,___ftpack@exp
  4963  002AA2  C040  F005         	movff	___altoft@sign,___ftpack@sign
  4964  002AA6  EC20  F013         	call	___ftpack	;wreg free
  4965  002AAA  C001  F037         	movff	?___ftpack,?___altoft
  4966  002AAE  C002  F038         	movff	?___ftpack+1,?___altoft+1
  4967  002AB2  C003  F039         	movff	?___ftpack+2,?___altoft+2
  4968  002AB6  0012               	return	
  4969  002AB8  0012               	return		;funcret
  4970  002ABA                     __end_of___altoft:
  4971                           	opt stack 0
  4972                           tblptru	equ	0xFF8
  4973                           tblptrh	equ	0xFF7
  4974                           tblptrl	equ	0xFF6
  4975                           tablat	equ	0xFF5
  4976                           prodh	equ	0xFF4
  4977                           prodl	equ	0xFF3
  4978                           indf0	equ	0xFEF
  4979                           postinc0	equ	0xFEE
  4980                           fsr0h	equ	0xFEA
  4981                           fsr0l	equ	0xFE9
  4982                           wreg	equ	0xFE8
  4983                           postdec1	equ	0xFE5
  4984                           fsr1l	equ	0xFE1
  4985                           indf2	equ	0xFDF
  4986                           postinc2	equ	0xFDE
  4987                           postdec2	equ	0xFDD
  4988                           fsr2h	equ	0xFDA
  4989                           fsr2l	equ	0xFD9
  4990                           status	equ	0xFD8
  4991                           
  4992 ;; *************** function _eval_poly *****************
  4993 ;; Defined at:
  4994 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\evalpoly.c"
  4995 ;; Parameters:    Size  Location     Type
  4996 ;;  x               3   39[COMRAM] float 
  4997 ;;  d               2   42[COMRAM] PTR const 
  4998 ;;		 -> log@coeff(27), exp@coeff(30), 
  4999 ;;  n               2   44[COMRAM] int 
  5000 ;; Auto vars:     Size  Location     Type
  5001 ;;  res             3   48[COMRAM] int 
  5002 ;; Return value:  Size  Location     Type
  5003 ;;                  3   39[COMRAM] int 
  5004 ;; Registers used:
  5005 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5006 ;; Tracked objects:
  5007 ;;		On entry : 0/0
  5008 ;;		On exit  : 0/0
  5009 ;;		Unchanged: 0/0
  5010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5011 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5012 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5013 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5014 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5015 ;;Total ram usage:       12 bytes
  5016 ;; Hardware stack levels used:    1
  5017 ;; Hardware stack levels required when called:    2
  5018 ;; This function calls:
  5019 ;;		___ftadd
  5020 ;;		___ftmul
  5021 ;;		___wmul
  5022 ;; This function is called by:
  5023 ;;		_exp
  5024 ;;		_log
  5025 ;; This function uses a non-reentrant model
  5026 ;;
  5027                           
  5028                           	psect	text21
  5029  00256C                     __ptext21:
  5030                           	opt stack 0
  5031  00256C                     _eval_poly:
  5032                           	opt stack 25
  5033                           
  5034                           ;incstack = 0
  5035  00256C  C02D  F001         	movff	eval_poly@n,___wmul@multiplier
  5036  002570  C02E  F002         	movff	eval_poly@n+1,___wmul@multiplier+1
  5037  002574  0E00               	movlw	0
  5038  002576  6E04               	movwf	___wmul@multiplicand+1,c
  5039  002578  0E03               	movlw	3
  5040  00257A  6E03               	movwf	___wmul@multiplicand,c
  5041  00257C  ECAE  F017         	call	___wmul	;wreg free
  5042  002580  C02B  F02F         	movff	eval_poly@d,??_eval_poly
  5043  002584  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
  5044  002588  5001               	movf	?___wmul,w,c
  5045  00258A  262F               	addwf	??_eval_poly,f,c
  5046  00258C  5002               	movf	?___wmul+1,w,c
  5047  00258E  2230               	addwfc	??_eval_poly+1,f,c
  5048  002590  C02F  FFF6         	movff	??_eval_poly,tblptrl
  5049  002594  C030  FFF7         	movff	??_eval_poly+1,tblptrh
  5050  002598                     	if	0	;tblptru may be non-zero
  5051  002598                     	endif
  5052  002598                     	if	0	;tblptru may be non-zero
  5053  002598                     	endif
  5054  002598  0009               	tblrd		*+
  5055  00259A  CFF5 F031          	movff	tablat,eval_poly@res
  5056  00259E  0009               	tblrd		*+
  5057  0025A0  CFF5 F032          	movff	tablat,eval_poly@res+1
  5058  0025A4  000A               	tblrd		*-
  5059  0025A6  CFF5 F033          	movff	tablat,eval_poly@res+2
  5060  0025AA  D03F               	goto	l3474
  5061  0025AC                     l3472:
  5062  0025AC  C031  F010         	movff	eval_poly@res,___ftmul@f2
  5063  0025B0  C032  F011         	movff	eval_poly@res+1,___ftmul@f2+1
  5064  0025B4  C033  F012         	movff	eval_poly@res+2,___ftmul@f2+2
  5065  0025B8  C028  F00D         	movff	eval_poly@x,___ftmul@f1
  5066  0025BC  C029  F00E         	movff	eval_poly@x+1,___ftmul@f1+1
  5067  0025C0  C02A  F00F         	movff	eval_poly@x+2,___ftmul@f1+2
  5068  0025C4  ECE6  F010         	call	___ftmul	;wreg free
  5069  0025C8  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  5070  0025CC  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  5071  0025D0  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  5072  0025D4  0E00               	movlw	0
  5073  0025D6  6E04               	movwf	___wmul@multiplicand+1,c
  5074  0025D8  0E03               	movlw	3
  5075  0025DA  6E03               	movwf	___wmul@multiplicand,c
  5076  0025DC  062D               	decf	eval_poly@n,f,c
  5077  0025DE  A0D8               	btfss	status,0,c
  5078  0025E0  062E               	decf	eval_poly@n+1,f,c
  5079  0025E2  C02D  F001         	movff	eval_poly@n,___wmul@multiplier
  5080  0025E6  C02E  F002         	movff	eval_poly@n+1,___wmul@multiplier+1
  5081  0025EA  ECAE  F017         	call	___wmul	;wreg free
  5082  0025EE  C02B  F02F         	movff	eval_poly@d,??_eval_poly
  5083  0025F2  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
  5084  0025F6  5001               	movf	?___wmul,w,c
  5085  0025F8  262F               	addwf	??_eval_poly,f,c
  5086  0025FA  5002               	movf	?___wmul+1,w,c
  5087  0025FC  2230               	addwfc	??_eval_poly+1,f,c
  5088  0025FE  C02F  FFF6         	movff	??_eval_poly,tblptrl
  5089  002602  C030  FFF7         	movff	??_eval_poly+1,tblptrh
  5090  002606                     	if	0	;tblptru may be non-zero
  5091  002606                     	endif
  5092  002606                     	if	0	;tblptru may be non-zero
  5093  002606                     	endif
  5094  002606  0009               	tblrd		*+
  5095  002608  CFF5 F01F          	movff	tablat,___ftadd@f2
  5096  00260C  0009               	tblrd		*+
  5097  00260E  CFF5 F020          	movff	tablat,___ftadd@f2+1
  5098  002612  000A               	tblrd		*-
  5099  002614  CFF5 F021          	movff	tablat,___ftadd@f2+2
  5100  002618  EC3C  F00C         	call	___ftadd	;wreg free
  5101  00261C  C01C  F031         	movff	?___ftadd,eval_poly@res
  5102  002620  C01D  F032         	movff	?___ftadd+1,eval_poly@res+1
  5103  002624  C01E  F033         	movff	?___ftadd+2,eval_poly@res+2
  5104  002628  D000               	goto	l3474
  5105  00262A                     l3474:
  5106  00262A  502D               	movf	eval_poly@n,w,c
  5107  00262C  102E               	iorwf	eval_poly@n+1,w,c
  5108  00262E  A4D8               	btfss	status,2,c
  5109  002630  D7BD               	goto	l3472
  5110  002632  C031  F028         	movff	eval_poly@res,?_eval_poly
  5111  002636  C032  F029         	movff	eval_poly@res+1,?_eval_poly+1
  5112  00263A  C033  F02A         	movff	eval_poly@res+2,?_eval_poly+2
  5113  00263E  0012               	return		;funcret
  5114  002640                     __end_of_eval_poly:
  5115                           	opt stack 0
  5116                           tblptru	equ	0xFF8
  5117                           tblptrh	equ	0xFF7
  5118                           tblptrl	equ	0xFF6
  5119                           tablat	equ	0xFF5
  5120                           prodh	equ	0xFF4
  5121                           prodl	equ	0xFF3
  5122                           indf0	equ	0xFEF
  5123                           postinc0	equ	0xFEE
  5124                           fsr0h	equ	0xFEA
  5125                           fsr0l	equ	0xFE9
  5126                           wreg	equ	0xFE8
  5127                           postdec1	equ	0xFE5
  5128                           fsr1l	equ	0xFE1
  5129                           indf2	equ	0xFDF
  5130                           postinc2	equ	0xFDE
  5131                           postdec2	equ	0xFDD
  5132                           fsr2h	equ	0xFDA
  5133                           fsr2l	equ	0xFD9
  5134                           status	equ	0xFD8
  5135                           
  5136 ;; *************** function ___wmul *****************
  5137 ;; Defined at:
  5138 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\Umul16.c"
  5139 ;; Parameters:    Size  Location     Type
  5140 ;;  multiplier      2    0[COMRAM] unsigned int 
  5141 ;;  multiplicand    2    2[COMRAM] unsigned int 
  5142 ;; Auto vars:     Size  Location     Type
  5143 ;;  product         2    4[COMRAM] unsigned int 
  5144 ;; Return value:  Size  Location     Type
  5145 ;;                  2    0[COMRAM] unsigned int 
  5146 ;; Registers used:
  5147 ;;		wreg, status,2, status,0, prodl, prodh
  5148 ;; Tracked objects:
  5149 ;;		On entry : 0/0
  5150 ;;		On exit  : 0/0
  5151 ;;		Unchanged: 0/0
  5152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5153 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5154 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5156 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5157 ;;Total ram usage:        6 bytes
  5158 ;; Hardware stack levels used:    1
  5159 ;; This function calls:
  5160 ;;		Nothing
  5161 ;; This function is called by:
  5162 ;;		_sprintf
  5163 ;;		_eval_poly
  5164 ;; This function uses a non-reentrant model
  5165 ;;
  5166                           
  5167                           	psect	text22
  5168  002F5C                     __ptext22:
  5169                           	opt stack 0
  5170  002F5C                     ___wmul:
  5171                           	opt stack 27
  5172                           
  5173                           ;incstack = 0
  5174  002F5C  5001               	movf	___wmul@multiplier,w,c
  5175  002F5E  0203               	mulwf	___wmul@multiplicand,c
  5176  002F60  CFF3 F005          	movff	prodl,___wmul@product
  5177  002F64  CFF4 F006          	movff	prodh,___wmul@product+1
  5178  002F68  5001               	movf	___wmul@multiplier,w,c
  5179  002F6A  0204               	mulwf	___wmul@multiplicand+1,c
  5180  002F6C  50F3               	movf	prodl,w,c
  5181  002F6E  2606               	addwf	___wmul@product+1,f,c
  5182  002F70  5002               	movf	___wmul@multiplier+1,w,c
  5183  002F72  0203               	mulwf	___wmul@multiplicand,c
  5184  002F74  50F3               	movf	prodl,w,c
  5185  002F76  2606               	addwf	___wmul@product+1,f,c
  5186  002F78  C005  F001         	movff	___wmul@product,?___wmul
  5187  002F7C  C006  F002         	movff	___wmul@product+1,?___wmul+1
  5188  002F80  0012               	return	
  5189  002F82  0012               	return		;funcret
  5190  002F84                     __end_of___wmul:
  5191                           	opt stack 0
  5192                           tblptru	equ	0xFF8
  5193                           tblptrh	equ	0xFF7
  5194                           tblptrl	equ	0xFF6
  5195                           tablat	equ	0xFF5
  5196                           prodh	equ	0xFF4
  5197                           prodl	equ	0xFF3
  5198                           indf0	equ	0xFEF
  5199                           postinc0	equ	0xFEE
  5200                           fsr0h	equ	0xFEA
  5201                           fsr0l	equ	0xFE9
  5202                           wreg	equ	0xFE8
  5203                           postdec1	equ	0xFE5
  5204                           fsr1l	equ	0xFE1
  5205                           indf2	equ	0xFDF
  5206                           postinc2	equ	0xFDE
  5207                           postdec2	equ	0xFDD
  5208                           fsr2h	equ	0xFDA
  5209                           fsr2l	equ	0xFD9
  5210                           status	equ	0xFD8
  5211                           
  5212 ;; *************** function ___ftmul *****************
  5213 ;; Defined at:
  5214 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\ftmul.c"
  5215 ;; Parameters:    Size  Location     Type
  5216 ;;  f1              3   12[COMRAM] float 
  5217 ;;  f2              3   15[COMRAM] float 
  5218 ;; Auto vars:     Size  Location     Type
  5219 ;;  f3_as_produc    3   22[COMRAM] unsigned um
  5220 ;;  sign            1   26[COMRAM] unsigned char 
  5221 ;;  cntr            1   25[COMRAM] unsigned char 
  5222 ;;  exp             1   21[COMRAM] unsigned char 
  5223 ;; Return value:  Size  Location     Type
  5224 ;;                  3   12[COMRAM] float 
  5225 ;; Registers used:
  5226 ;;		wreg, status,2, status,0, cstack
  5227 ;; Tracked objects:
  5228 ;;		On entry : 0/0
  5229 ;;		On exit  : 0/0
  5230 ;;		Unchanged: 0/0
  5231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5232 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5233 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5234 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5235 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5236 ;;Total ram usage:       15 bytes
  5237 ;; Hardware stack levels used:    1
  5238 ;; Hardware stack levels required when called:    1
  5239 ;; This function calls:
  5240 ;;		___ftpack
  5241 ;; This function is called by:
  5242 ;;		_set_vision
  5243 ;;		_pow
  5244 ;;		_exp
  5245 ;;		_log
  5246 ;;		_eval_poly
  5247 ;; This function uses a non-reentrant model
  5248 ;;
  5249                           
  5250                           	psect	text23
  5251  0021CC                     __ptext23:
  5252                           	opt stack 0
  5253  0021CC                     ___ftmul:
  5254                           	opt stack 25
  5255                           
  5256                           ;incstack = 0
  5257  0021CC  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
  5258  0021D0  6A14               	clrf	(??___ftmul+1)& (0+255),c
  5259  0021D2  6A15               	clrf	(??___ftmul+2)& (0+255),c
  5260  0021D4  340E               	rlcf	___ftmul@f1+1,w,c
  5261  0021D6  3613               	rlcf	??___ftmul& (0+255),f,c
  5262  0021D8  E301               	bnc	u2601
  5263  0021DA  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  5264  0021DC                     u2601:
  5265  0021DC  5013               	movf	??___ftmul,w,c
  5266  0021DE  6E16               	movwf	___ftmul@exp,c
  5267  0021E0  5016               	movf	___ftmul@exp,w,c
  5268  0021E2  A4D8               	btfss	status,2,c
  5269  0021E4  D007               	goto	l3062
  5270  0021E6  0E00               	movlw	0
  5271  0021E8  6E0D               	movwf	?___ftmul,c
  5272  0021EA  0E00               	movlw	0
  5273  0021EC  6E0E               	movwf	?___ftmul+1,c
  5274  0021EE  0E00               	movlw	0
  5275  0021F0  6E0F               	movwf	?___ftmul+2,c
  5276  0021F2  0012               	return	
  5277  0021F4                     l3062:
  5278  0021F4  C012  F013         	movff	___ftmul@f2+2,??___ftmul
  5279  0021F8  6A14               	clrf	(??___ftmul+1)& (0+255),c
  5280  0021FA  6A15               	clrf	(??___ftmul+2)& (0+255),c
  5281  0021FC  3411               	rlcf	___ftmul@f2+1,w,c
  5282  0021FE  3613               	rlcf	??___ftmul& (0+255),f,c
  5283  002200  E301               	bnc	u2621
  5284  002202  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  5285  002204                     u2621:
  5286  002204  5013               	movf	??___ftmul,w,c
  5287  002206  6E1B               	movwf	___ftmul@sign,c
  5288  002208  501B               	movf	___ftmul@sign,w,c
  5289  00220A  A4D8               	btfss	status,2,c
  5290  00220C  D007               	goto	l3068
  5291  00220E  0E00               	movlw	0
  5292  002210  6E0D               	movwf	?___ftmul,c
  5293  002212  0E00               	movlw	0
  5294  002214  6E0E               	movwf	?___ftmul+1,c
  5295  002216  0E00               	movlw	0
  5296  002218  6E0F               	movwf	?___ftmul+2,c
  5297  00221A  0012               	return	
  5298  00221C                     l3068:
  5299  00221C  501B               	movf	___ftmul@sign,w,c
  5300  00221E  0F7B               	addlw	123
  5301  002220  2616               	addwf	___ftmul@exp,f,c
  5302  002222  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
  5303  002226  5012               	movf	___ftmul@f2+2,w,c
  5304  002228  1A1B               	xorwf	___ftmul@sign,f,c
  5305  00222A  0E80               	movlw	128
  5306  00222C  161B               	andwf	___ftmul@sign,f,c
  5307  00222E  8E0E               	bsf	___ftmul@f1+1,7,c
  5308  002230  8E11               	bsf	___ftmul@f2+1,7,c
  5309  002232  0EFF               	movlw	255
  5310  002234  1610               	andwf	___ftmul@f2,f,c
  5311  002236  0EFF               	movlw	255
  5312  002238  1611               	andwf	___ftmul@f2+1,f,c
  5313  00223A  0E00               	movlw	0
  5314  00223C  1612               	andwf	___ftmul@f2+2,f,c
  5315  00223E  0E00               	movlw	0
  5316  002240  6E17               	movwf	___ftmul@f3_as_product,c
  5317  002242  0E00               	movlw	0
  5318  002244  6E18               	movwf	___ftmul@f3_as_product+1,c
  5319  002246  0E00               	movlw	0
  5320  002248  6E19               	movwf	___ftmul@f3_as_product+2,c
  5321  00224A  0E07               	movlw	7
  5322  00224C  6E1A               	movwf	___ftmul@cntr,c
  5323  00224E  D000               	goto	l3082
  5324  002250                     l3082:
  5325  002250  A00D               	btfss	___ftmul@f1,0,c
  5326  002252  D007               	goto	l3086
  5327  002254  5010               	movf	___ftmul@f2,w,c
  5328  002256  2617               	addwf	___ftmul@f3_as_product,f,c
  5329  002258  5011               	movf	___ftmul@f2+1,w,c
  5330  00225A  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  5331  00225C  5012               	movf	___ftmul@f2+2,w,c
  5332  00225E  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  5333  002260  D000               	goto	l3086
  5334  002262                     l3086:
  5335  002262  90D8               	bcf	status,0,c
  5336  002264  320F               	rrcf	___ftmul@f1+2,f,c
  5337  002266  320E               	rrcf	___ftmul@f1+1,f,c
  5338  002268  320D               	rrcf	___ftmul@f1,f,c
  5339  00226A  90D8               	bcf	status,0,c
  5340  00226C  3610               	rlcf	___ftmul@f2,f,c
  5341  00226E  3611               	rlcf	___ftmul@f2+1,f,c
  5342  002270  3612               	rlcf	___ftmul@f2+2,f,c
  5343  002272  2E1A               	decfsz	___ftmul@cntr,f,c
  5344  002274  D7ED               	goto	l3082
  5345  002276  D000               	goto	l3090
  5346  002278                     l3090:
  5347  002278  0E09               	movlw	9
  5348  00227A  6E1A               	movwf	___ftmul@cntr,c
  5349  00227C  D000               	goto	l3092
  5350  00227E                     l3092:
  5351  00227E  A00D               	btfss	___ftmul@f1,0,c
  5352  002280  D007               	goto	l3096
  5353  002282  5010               	movf	___ftmul@f2,w,c
  5354  002284  2617               	addwf	___ftmul@f3_as_product,f,c
  5355  002286  5011               	movf	___ftmul@f2+1,w,c
  5356  002288  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  5357  00228A  5012               	movf	___ftmul@f2+2,w,c
  5358  00228C  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  5359  00228E  D000               	goto	l3096
  5360  002290                     l3096:
  5361  002290  90D8               	bcf	status,0,c
  5362  002292  320F               	rrcf	___ftmul@f1+2,f,c
  5363  002294  320E               	rrcf	___ftmul@f1+1,f,c
  5364  002296  320D               	rrcf	___ftmul@f1,f,c
  5365  002298  90D8               	bcf	status,0,c
  5366  00229A  3219               	rrcf	___ftmul@f3_as_product+2,f,c
  5367  00229C  3218               	rrcf	___ftmul@f3_as_product+1,f,c
  5368  00229E  3217               	rrcf	___ftmul@f3_as_product,f,c
  5369  0022A0  2E1A               	decfsz	___ftmul@cntr,f,c
  5370  0022A2  D7ED               	goto	l3092
  5371  0022A4  D000               	goto	l3100
  5372  0022A6                     l3100:
  5373  0022A6  C017  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  5374  0022AA  C018  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5375  0022AE  C019  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5376  0022B2  C016  F004         	movff	___ftmul@exp,___ftpack@exp
  5377  0022B6  C01B  F005         	movff	___ftmul@sign,___ftpack@sign
  5378  0022BA  EC20  F013         	call	___ftpack	;wreg free
  5379  0022BE  C001  F00D         	movff	?___ftpack,?___ftmul
  5380  0022C2  C002  F00E         	movff	?___ftpack+1,?___ftmul+1
  5381  0022C6  C003  F00F         	movff	?___ftpack+2,?___ftmul+2
  5382  0022CA  0012               	return	
  5383  0022CC  0012               	return		;funcret
  5384  0022CE                     __end_of___ftmul:
  5385                           	opt stack 0
  5386                           tblptru	equ	0xFF8
  5387                           tblptrh	equ	0xFF7
  5388                           tblptrl	equ	0xFF6
  5389                           tablat	equ	0xFF5
  5390                           prodh	equ	0xFF4
  5391                           prodl	equ	0xFF3
  5392                           indf0	equ	0xFEF
  5393                           postinc0	equ	0xFEE
  5394                           fsr0h	equ	0xFEA
  5395                           fsr0l	equ	0xFE9
  5396                           wreg	equ	0xFE8
  5397                           postdec1	equ	0xFE5
  5398                           fsr1l	equ	0xFE1
  5399                           indf2	equ	0xFDF
  5400                           postinc2	equ	0xFDE
  5401                           postdec2	equ	0xFDD
  5402                           fsr2h	equ	0xFDA
  5403                           fsr2l	equ	0xFD9
  5404                           status	equ	0xFD8
  5405                           
  5406 ;; *************** function ___ftsub *****************
  5407 ;; Defined at:
  5408 ;;		line 20 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\ftsub.c"
  5409 ;; Parameters:    Size  Location     Type
  5410 ;;  f1              3   39[COMRAM] float 
  5411 ;;  f2              3   42[COMRAM] float 
  5412 ;; Auto vars:     Size  Location     Type
  5413 ;;		None
  5414 ;; Return value:  Size  Location     Type
  5415 ;;                  3   39[COMRAM] float 
  5416 ;; Registers used:
  5417 ;;		wreg, status,2, status,0, cstack
  5418 ;; Tracked objects:
  5419 ;;		On entry : 0/0
  5420 ;;		On exit  : 0/0
  5421 ;;		Unchanged: 0/0
  5422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5423 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5426 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5427 ;;Total ram usage:        6 bytes
  5428 ;; Hardware stack levels used:    1
  5429 ;; Hardware stack levels required when called:    2
  5430 ;; This function calls:
  5431 ;;		___ftadd
  5432 ;; This function is called by:
  5433 ;;		_exp
  5434 ;; This function uses a non-reentrant model
  5435 ;;
  5436                           
  5437                           	psect	text24
  5438  002E7A                     __ptext24:
  5439                           	opt stack 0
  5440  002E7A                     ___ftsub:
  5441                           	opt stack 25
  5442                           
  5443                           ;incstack = 0
  5444  002E7A  502B               	movf	___ftsub@f2,w,c
  5445  002E7C  102C               	iorwf	___ftsub@f2+1,w,c
  5446  002E7E  102D               	iorwf	___ftsub@f2+2,w,c
  5447  002E80  B4D8               	btfsc	status,2,c
  5448  002E82  D007               	goto	l3382
  5449  002E84  0E00               	movlw	0
  5450  002E86  1A2B               	xorwf	___ftsub@f2,f,c
  5451  002E88  0E00               	movlw	0
  5452  002E8A  1A2C               	xorwf	___ftsub@f2+1,f,c
  5453  002E8C  0E80               	movlw	128
  5454  002E8E  1A2D               	xorwf	___ftsub@f2+2,f,c
  5455  002E90  D000               	goto	l3382
  5456  002E92                     l3382:
  5457  002E92  C028  F01C         	movff	___ftsub@f1,___ftadd@f1
  5458  002E96  C029  F01D         	movff	___ftsub@f1+1,___ftadd@f1+1
  5459  002E9A  C02A  F01E         	movff	___ftsub@f1+2,___ftadd@f1+2
  5460  002E9E  C02B  F01F         	movff	___ftsub@f2,___ftadd@f2
  5461  002EA2  C02C  F020         	movff	___ftsub@f2+1,___ftadd@f2+1
  5462  002EA6  C02D  F021         	movff	___ftsub@f2+2,___ftadd@f2+2
  5463  002EAA  EC3C  F00C         	call	___ftadd	;wreg free
  5464  002EAE  C01C  F028         	movff	?___ftadd,?___ftsub
  5465  002EB2  C01D  F029         	movff	?___ftadd+1,?___ftsub+1
  5466  002EB6  C01E  F02A         	movff	?___ftadd+2,?___ftsub+2
  5467  002EBA  0012               	return	
  5468  002EBC  0012               	return		;funcret
  5469  002EBE                     __end_of___ftsub:
  5470                           	opt stack 0
  5471                           tblptru	equ	0xFF8
  5472                           tblptrh	equ	0xFF7
  5473                           tblptrl	equ	0xFF6
  5474                           tablat	equ	0xFF5
  5475                           prodh	equ	0xFF4
  5476                           prodl	equ	0xFF3
  5477                           indf0	equ	0xFEF
  5478                           postinc0	equ	0xFEE
  5479                           fsr0h	equ	0xFEA
  5480                           fsr0l	equ	0xFE9
  5481                           wreg	equ	0xFE8
  5482                           postdec1	equ	0xFE5
  5483                           fsr1l	equ	0xFE1
  5484                           indf2	equ	0xFDF
  5485                           postinc2	equ	0xFDE
  5486                           postdec2	equ	0xFDD
  5487                           fsr2h	equ	0xFDA
  5488                           fsr2l	equ	0xFD9
  5489                           status	equ	0xFD8
  5490                           
  5491 ;; *************** function ___ftadd *****************
  5492 ;; Defined at:
  5493 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\ftadd.c"
  5494 ;; Parameters:    Size  Location     Type
  5495 ;;  f1              3   27[COMRAM] float 
  5496 ;;  f2              3   30[COMRAM] float 
  5497 ;; Auto vars:     Size  Location     Type
  5498 ;;  exp1            1   38[COMRAM] unsigned char 
  5499 ;;  exp2            1   37[COMRAM] unsigned char 
  5500 ;;  sign            1   36[COMRAM] unsigned char 
  5501 ;; Return value:  Size  Location     Type
  5502 ;;                  3   27[COMRAM] float 
  5503 ;; Registers used:
  5504 ;;		wreg, status,2, status,0, cstack
  5505 ;; Tracked objects:
  5506 ;;		On entry : 0/0
  5507 ;;		On exit  : 0/0
  5508 ;;		Unchanged: 0/0
  5509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5510 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5511 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5512 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5513 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5514 ;;Total ram usage:       12 bytes
  5515 ;; Hardware stack levels used:    1
  5516 ;; Hardware stack levels required when called:    1
  5517 ;; This function calls:
  5518 ;;		___ftpack
  5519 ;; This function is called by:
  5520 ;;		_set_vision
  5521 ;;		___ftsub
  5522 ;;		_floor
  5523 ;;		_log
  5524 ;;		_eval_poly
  5525 ;; This function uses a non-reentrant model
  5526 ;;
  5527                           
  5528                           	psect	text25
  5529  001878                     __ptext25:
  5530                           	opt stack 0
  5531  001878                     ___ftadd:
  5532                           	opt stack 25
  5533                           
  5534                           ;incstack = 0
  5535  001878  C01E  F022         	movff	___ftadd@f1+2,??___ftadd
  5536  00187C  6A23               	clrf	(??___ftadd+1)& (0+255),c
  5537  00187E  6A24               	clrf	(??___ftadd+2)& (0+255),c
  5538  001880  341D               	rlcf	___ftadd@f1+1,w,c
  5539  001882  3622               	rlcf	??___ftadd& (0+255),f,c
  5540  001884  E301               	bnc	u2391
  5541  001886  8023               	bsf	(??___ftadd+1)& (0+255),0,c
  5542  001888                     u2391:
  5543  001888  5022               	movf	??___ftadd,w,c
  5544  00188A  6E27               	movwf	___ftadd@exp1,c
  5545  00188C  C021  F022         	movff	___ftadd@f2+2,??___ftadd
  5546  001890  6A23               	clrf	(??___ftadd+1)& (0+255),c
  5547  001892  6A24               	clrf	(??___ftadd+2)& (0+255),c
  5548  001894  3420               	rlcf	___ftadd@f2+1,w,c
  5549  001896  3622               	rlcf	??___ftadd& (0+255),f,c
  5550  001898  E301               	bnc	u2401
  5551  00189A  8023               	bsf	(??___ftadd+1)& (0+255),0,c
  5552  00189C                     u2401:
  5553  00189C  5022               	movf	??___ftadd,w,c
  5554  00189E  6E26               	movwf	___ftadd@exp2,c
  5555  0018A0  5027               	movf	___ftadd@exp1,w,c
  5556  0018A2  B4D8               	btfsc	status,2,c
  5557  0018A4  D00B               	goto	l1131
  5558  0018A6  5026               	movf	___ftadd@exp2,w,c
  5559  0018A8  5C27               	subwf	___ftadd@exp1,w,c
  5560  0018AA  B0D8               	btfsc	status,0,c
  5561  0018AC  D00E               	goto	l2994
  5562  0018AE  5027               	movf	___ftadd@exp1,w,c
  5563  0018B0  0800               	sublw	0
  5564  0018B2  2426               	addwf	___ftadd@exp2,w,c
  5565  0018B4  6E22               	movwf	??___ftadd& (0+255),c
  5566  0018B6  0E18               	movlw	24
  5567  0018B8  6422               	cpfsgt	??___ftadd,c
  5568  0018BA  D007               	goto	l2994
  5569  0018BC                     l1131:
  5570  0018BC  C01F  F01C         	movff	___ftadd@f2,?___ftadd
  5571  0018C0  C020  F01D         	movff	___ftadd@f2+1,?___ftadd+1
  5572  0018C4  C021  F01E         	movff	___ftadd@f2+2,?___ftadd+2
  5573  0018C8  0012               	return	
  5574  0018CA                     l2994:
  5575  0018CA  5026               	movf	___ftadd@exp2,w,c
  5576  0018CC  B4D8               	btfsc	status,2,c
  5577  0018CE  D00B               	goto	l1135
  5578  0018D0  5027               	movf	___ftadd@exp1,w,c
  5579  0018D2  5C26               	subwf	___ftadd@exp2,w,c
  5580  0018D4  B0D8               	btfsc	status,0,c
  5581  0018D6  D00E               	goto	l3000
  5582  0018D8  5026               	movf	___ftadd@exp2,w,c
  5583  0018DA  0800               	sublw	0
  5584  0018DC  2427               	addwf	___ftadd@exp1,w,c
  5585  0018DE  6E22               	movwf	??___ftadd& (0+255),c
  5586  0018E0  0E18               	movlw	24
  5587  0018E2  6422               	cpfsgt	??___ftadd,c
  5588  0018E4  D007               	goto	l3000
  5589  0018E6                     l1135:
  5590  0018E6  C01C  F01C         	movff	___ftadd@f1,?___ftadd
  5591  0018EA  C01D  F01D         	movff	___ftadd@f1+1,?___ftadd+1
  5592  0018EE  C01E  F01E         	movff	___ftadd@f1+2,?___ftadd+2
  5593  0018F2  0012               	return	
  5594  0018F4                     l3000:
  5595  0018F4  0E06               	movlw	6
  5596  0018F6  6E25               	movwf	___ftadd@sign,c
  5597  0018F8  AE1E               	btfss	___ftadd@f1+2,7,c
  5598  0018FA  D002               	goto	l3006
  5599  0018FC  8E25               	bsf	___ftadd@sign,7,c
  5600  0018FE  D000               	goto	l3006
  5601  001900                     l3006:
  5602  001900  BE21               	btfsc	___ftadd@f2+2,7,c
  5603  001902  8C25               	bsf	___ftadd@sign,6,c
  5604  001904  8E1D               	bsf	___ftadd@f1+1,7,c
  5605  001906  0EFF               	movlw	255
  5606  001908  161C               	andwf	___ftadd@f1,f,c
  5607  00190A  0EFF               	movlw	255
  5608  00190C  161D               	andwf	___ftadd@f1+1,f,c
  5609  00190E  0E00               	movlw	0
  5610  001910  161E               	andwf	___ftadd@f1+2,f,c
  5611  001912  8E20               	bsf	___ftadd@f2+1,7,c
  5612  001914  0EFF               	movlw	255
  5613  001916  161F               	andwf	___ftadd@f2,f,c
  5614  001918  0EFF               	movlw	255
  5615  00191A  1620               	andwf	___ftadd@f2+1,f,c
  5616  00191C  0E00               	movlw	0
  5617  00191E  1621               	andwf	___ftadd@f2+2,f,c
  5618  001920  5026               	movf	___ftadd@exp2,w,c
  5619  001922  5C27               	subwf	___ftadd@exp1,w,c
  5620  001924  B0D8               	btfsc	status,0,c
  5621  001926  D01E               	goto	l3026
  5622  001928                     l3016:
  5623  001928  90D8               	bcf	status,0,c
  5624  00192A  361F               	rlcf	___ftadd@f2,f,c
  5625  00192C  3620               	rlcf	___ftadd@f2+1,f,c
  5626  00192E  3621               	rlcf	___ftadd@f2+2,f,c
  5627  001930  0626               	decf	___ftadd@exp2,f,c
  5628  001932  5027               	movf	___ftadd@exp1,w,c
  5629  001934  1826               	xorwf	___ftadd@exp2,w,c
  5630  001936  B4D8               	btfsc	status,2,c
  5631  001938  D00F               	goto	l3024
  5632  00193A  0625               	decf	___ftadd@sign,f,c
  5633  00193C  C025  F022         	movff	___ftadd@sign,??___ftadd
  5634  001940  0E07               	movlw	7
  5635  001942  1622               	andwf	??___ftadd,f,c
  5636  001944  B4D8               	btfsc	status,2,c
  5637  001946  D008               	goto	l3024
  5638  001948  D7EF               	goto	l3016
  5639  00194A  D006               	goto	l3024
  5640  00194C                     l3022:
  5641  00194C  90D8               	bcf	status,0,c
  5642  00194E  321E               	rrcf	___ftadd@f1+2,f,c
  5643  001950  321D               	rrcf	___ftadd@f1+1,f,c
  5644  001952  321C               	rrcf	___ftadd@f1,f,c
  5645  001954  2A27               	incf	___ftadd@exp1,f,c
  5646  001956  D000               	goto	l3024
  5647  001958                     l3024:
  5648  001958  5026               	movf	___ftadd@exp2,w,c
  5649  00195A  1827               	xorwf	___ftadd@exp1,w,c
  5650  00195C  B4D8               	btfsc	status,2,c
  5651  00195E  D024               	goto	l1146
  5652  001960  D7F5               	goto	l3022
  5653  001962  D022               	goto	l1146
  5654  001964                     l3026:
  5655  001964  5027               	movf	___ftadd@exp1,w,c
  5656  001966  5C26               	subwf	___ftadd@exp2,w,c
  5657  001968  B0D8               	btfsc	status,0,c
  5658  00196A  D01E               	goto	l1146
  5659  00196C                     l3028:
  5660  00196C  90D8               	bcf	status,0,c
  5661  00196E  361C               	rlcf	___ftadd@f1,f,c
  5662  001970  361D               	rlcf	___ftadd@f1+1,f,c
  5663  001972  361E               	rlcf	___ftadd@f1+2,f,c
  5664  001974  0627               	decf	___ftadd@exp1,f,c
  5665  001976  5027               	movf	___ftadd@exp1,w,c
  5666  001978  1826               	xorwf	___ftadd@exp2,w,c
  5667  00197A  B4D8               	btfsc	status,2,c
  5668  00197C  D00F               	goto	l3036
  5669  00197E  0625               	decf	___ftadd@sign,f,c
  5670  001980  C025  F022         	movff	___ftadd@sign,??___ftadd
  5671  001984  0E07               	movlw	7
  5672  001986  1622               	andwf	??___ftadd,f,c
  5673  001988  B4D8               	btfsc	status,2,c
  5674  00198A  D008               	goto	l3036
  5675  00198C  D7EF               	goto	l3028
  5676  00198E  D006               	goto	l3036
  5677  001990                     l3034:
  5678  001990  90D8               	bcf	status,0,c
  5679  001992  3221               	rrcf	___ftadd@f2+2,f,c
  5680  001994  3220               	rrcf	___ftadd@f2+1,f,c
  5681  001996  321F               	rrcf	___ftadd@f2,f,c
  5682  001998  2A26               	incf	___ftadd@exp2,f,c
  5683  00199A  D000               	goto	l3036
  5684  00199C                     l3036:
  5685  00199C  5026               	movf	___ftadd@exp2,w,c
  5686  00199E  1827               	xorwf	___ftadd@exp1,w,c
  5687  0019A0  B4D8               	btfsc	status,2,c
  5688  0019A2  D002               	goto	l1146
  5689  0019A4  D7F5               	goto	l3034
  5690  0019A6  D000               	goto	l1146
  5691  0019A8                     l1146:
  5692  0019A8  AE25               	btfss	___ftadd@sign,7,c
  5693  0019AA  D00C               	goto	l1155
  5694  0019AC  0EFF               	movlw	255
  5695  0019AE  1A1C               	xorwf	___ftadd@f1,f,c
  5696  0019B0  0EFF               	movlw	255
  5697  0019B2  1A1D               	xorwf	___ftadd@f1+1,f,c
  5698  0019B4  0EFF               	movlw	255
  5699  0019B6  1A1E               	xorwf	___ftadd@f1+2,f,c
  5700  0019B8  0E01               	movlw	1
  5701  0019BA  261C               	addwf	___ftadd@f1,f,c
  5702  0019BC  0E00               	movlw	0
  5703  0019BE  221D               	addwfc	___ftadd@f1+1,f,c
  5704  0019C0  0E00               	movlw	0
  5705  0019C2  221E               	addwfc	___ftadd@f1+2,f,c
  5706  0019C4                     l1155:
  5707  0019C4  AC25               	btfss	___ftadd@sign,6,c
  5708  0019C6  D00D               	goto	l3042
  5709  0019C8  0EFF               	movlw	255
  5710  0019CA  1A1F               	xorwf	___ftadd@f2,f,c
  5711  0019CC  0EFF               	movlw	255
  5712  0019CE  1A20               	xorwf	___ftadd@f2+1,f,c
  5713  0019D0  0EFF               	movlw	255
  5714  0019D2  1A21               	xorwf	___ftadd@f2+2,f,c
  5715  0019D4  0E01               	movlw	1
  5716  0019D6  261F               	addwf	___ftadd@f2,f,c
  5717  0019D8  0E00               	movlw	0
  5718  0019DA  2220               	addwfc	___ftadd@f2+1,f,c
  5719  0019DC  0E00               	movlw	0
  5720  0019DE  2221               	addwfc	___ftadd@f2+2,f,c
  5721  0019E0  D000               	goto	l3042
  5722  0019E2                     l3042:
  5723  0019E2  0E00               	movlw	0
  5724  0019E4  6E25               	movwf	___ftadd@sign,c
  5725  0019E6  501C               	movf	___ftadd@f1,w,c
  5726  0019E8  261F               	addwf	___ftadd@f2,f,c
  5727  0019EA  501D               	movf	___ftadd@f1+1,w,c
  5728  0019EC  2220               	addwfc	___ftadd@f2+1,f,c
  5729  0019EE  501E               	movf	___ftadd@f1+2,w,c
  5730  0019F0  2221               	addwfc	___ftadd@f2+2,f,c
  5731  0019F2  AE21               	btfss	___ftadd@f2+2,7,c
  5732  0019F4  D00F               	goto	l3052
  5733  0019F6  0EFF               	movlw	255
  5734  0019F8  1A1F               	xorwf	___ftadd@f2,f,c
  5735  0019FA  0EFF               	movlw	255
  5736  0019FC  1A20               	xorwf	___ftadd@f2+1,f,c
  5737  0019FE  0EFF               	movlw	255
  5738  001A00  1A21               	xorwf	___ftadd@f2+2,f,c
  5739  001A02  0E01               	movlw	1
  5740  001A04  261F               	addwf	___ftadd@f2,f,c
  5741  001A06  0E00               	movlw	0
  5742  001A08  2220               	addwfc	___ftadd@f2+1,f,c
  5743  001A0A  0E00               	movlw	0
  5744  001A0C  2221               	addwfc	___ftadd@f2+2,f,c
  5745  001A0E  0E01               	movlw	1
  5746  001A10  6E25               	movwf	___ftadd@sign,c
  5747  001A12  D000               	goto	l3052
  5748  001A14                     l3052:
  5749  001A14  C01F  F001         	movff	___ftadd@f2,___ftpack@arg
  5750  001A18  C020  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  5751  001A1C  C021  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  5752  001A20  C027  F004         	movff	___ftadd@exp1,___ftpack@exp
  5753  001A24  C025  F005         	movff	___ftadd@sign,___ftpack@sign
  5754  001A28  EC20  F013         	call	___ftpack	;wreg free
  5755  001A2C  C001  F01C         	movff	?___ftpack,?___ftadd
  5756  001A30  C002  F01D         	movff	?___ftpack+1,?___ftadd+1
  5757  001A34  C003  F01E         	movff	?___ftpack+2,?___ftadd+2
  5758  001A38  0012               	return	
  5759  001A3A  0012               	return		;funcret
  5760  001A3C                     __end_of___ftadd:
  5761                           	opt stack 0
  5762                           tblptru	equ	0xFF8
  5763                           tblptrh	equ	0xFF7
  5764                           tblptrl	equ	0xFF6
  5765                           tablat	equ	0xFF5
  5766                           prodh	equ	0xFF4
  5767                           prodl	equ	0xFF3
  5768                           indf0	equ	0xFEF
  5769                           postinc0	equ	0xFEE
  5770                           fsr0h	equ	0xFEA
  5771                           fsr0l	equ	0xFE9
  5772                           wreg	equ	0xFE8
  5773                           postdec1	equ	0xFE5
  5774                           fsr1l	equ	0xFE1
  5775                           indf2	equ	0xFDF
  5776                           postinc2	equ	0xFDE
  5777                           postdec2	equ	0xFDD
  5778                           fsr2h	equ	0xFDA
  5779                           fsr2l	equ	0xFD9
  5780                           status	equ	0xFD8
  5781                           
  5782 ;; *************** function ___ftneg *****************
  5783 ;; Defined at:
  5784 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\ftneg.c"
  5785 ;; Parameters:    Size  Location     Type
  5786 ;;  f1              3    0[COMRAM] float 
  5787 ;; Auto vars:     Size  Location     Type
  5788 ;;		None
  5789 ;; Return value:  Size  Location     Type
  5790 ;;                  3    0[COMRAM] float 
  5791 ;; Registers used:
  5792 ;;		wreg, status,2, status,0
  5793 ;; Tracked objects:
  5794 ;;		On entry : 0/0
  5795 ;;		On exit  : 0/0
  5796 ;;		Unchanged: 0/0
  5797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5798 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5801 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5802 ;;Total ram usage:        3 bytes
  5803 ;; Hardware stack levels used:    1
  5804 ;; This function calls:
  5805 ;;		Nothing
  5806 ;; This function is called by:
  5807 ;;		_pow
  5808 ;;		_exp
  5809 ;; This function uses a non-reentrant model
  5810 ;;
  5811                           
  5812                           	psect	text26
  5813  002FAA                     __ptext26:
  5814                           	opt stack 0
  5815  002FAA                     ___ftneg:
  5816                           	opt stack 27
  5817                           
  5818                           ;incstack = 0
  5819  002FAA  5001               	movf	___ftneg@f1,w,c
  5820  002FAC  1002               	iorwf	___ftneg@f1+1,w,c
  5821  002FAE  1003               	iorwf	___ftneg@f1+2,w,c
  5822  002FB0  B4D8               	btfsc	status,2,c
  5823  002FB2  D006               	goto	l1188
  5824  002FB4  0E00               	movlw	0
  5825  002FB6  1A01               	xorwf	___ftneg@f1,f,c
  5826  002FB8  0E00               	movlw	0
  5827  002FBA  1A02               	xorwf	___ftneg@f1+1,f,c
  5828  002FBC  0E80               	movlw	128
  5829  002FBE  1A03               	xorwf	___ftneg@f1+2,f,c
  5830  002FC0                     l1188:
  5831  002FC0  C001  F001         	movff	___ftneg@f1,?___ftneg
  5832  002FC4  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  5833  002FC8  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  5834  002FCC  0012               	return		;funcret
  5835  002FCE                     __end_of___ftneg:
  5836                           	opt stack 0
  5837                           tblptru	equ	0xFF8
  5838                           tblptrh	equ	0xFF7
  5839                           tblptrl	equ	0xFF6
  5840                           tablat	equ	0xFF5
  5841                           prodh	equ	0xFF4
  5842                           prodl	equ	0xFF3
  5843                           indf0	equ	0xFEF
  5844                           postinc0	equ	0xFEE
  5845                           fsr0h	equ	0xFEA
  5846                           fsr0l	equ	0xFE9
  5847                           wreg	equ	0xFE8
  5848                           postdec1	equ	0xFE5
  5849                           fsr1l	equ	0xFE1
  5850                           indf2	equ	0xFDF
  5851                           postinc2	equ	0xFDE
  5852                           postdec2	equ	0xFDD
  5853                           fsr2h	equ	0xFDA
  5854                           fsr2l	equ	0xFD9
  5855                           status	equ	0xFD8
  5856                           
  5857 ;; *************** function ___ftdiv *****************
  5858 ;; Defined at:
  5859 ;;		line 54 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  5860 ;; Parameters:    Size  Location     Type
  5861 ;;  f1              3    8[COMRAM] float 
  5862 ;;  f2              3   11[COMRAM] float 
  5863 ;; Auto vars:     Size  Location     Type
  5864 ;;  f3              3   18[COMRAM] float 
  5865 ;;  sign            1   22[COMRAM] unsigned char 
  5866 ;;  exp             1   21[COMRAM] unsigned char 
  5867 ;;  cntr            1   17[COMRAM] unsigned char 
  5868 ;; Return value:  Size  Location     Type
  5869 ;;                  3    8[COMRAM] float 
  5870 ;; Registers used:
  5871 ;;		wreg, status,2, status,0, cstack
  5872 ;; Tracked objects:
  5873 ;;		On entry : 0/0
  5874 ;;		On exit  : 0/0
  5875 ;;		Unchanged: 0/0
  5876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5877 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5878 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5879 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5880 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5881 ;;Total ram usage:       15 bytes
  5882 ;; Hardware stack levels used:    1
  5883 ;; Hardware stack levels required when called:    1
  5884 ;; This function calls:
  5885 ;;		___ftpack
  5886 ;; This function is called by:
  5887 ;;		_exp
  5888 ;; This function uses a non-reentrant model
  5889 ;;
  5890                           
  5891                           	psect	text27
  5892  0022CE                     __ptext27:
  5893                           	opt stack 0
  5894  0022CE                     ___ftdiv:
  5895                           	opt stack 26
  5896                           
  5897                           ;incstack = 0
  5898  0022CE  C00B  F00F         	movff	___ftdiv@f1+2,??___ftdiv
  5899  0022D2  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  5900  0022D4  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  5901  0022D6  340A               	rlcf	___ftdiv@f1+1,w,c
  5902  0022D8  360F               	rlcf	??___ftdiv& (0+255),f,c
  5903  0022DA  E301               	bnc	u3021
  5904  0022DC  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  5905  0022DE                     u3021:
  5906  0022DE  500F               	movf	??___ftdiv,w,c
  5907  0022E0  6E16               	movwf	___ftdiv@exp,c
  5908  0022E2  5016               	movf	___ftdiv@exp,w,c
  5909  0022E4  A4D8               	btfss	status,2,c
  5910  0022E6  D007               	goto	l3338
  5911  0022E8  0E00               	movlw	0
  5912  0022EA  6E09               	movwf	?___ftdiv,c
  5913  0022EC  0E00               	movlw	0
  5914  0022EE  6E0A               	movwf	?___ftdiv+1,c
  5915  0022F0  0E00               	movlw	0
  5916  0022F2  6E0B               	movwf	?___ftdiv+2,c
  5917  0022F4  0012               	return	
  5918  0022F6                     l3338:
  5919  0022F6  C00E  F00F         	movff	___ftdiv@f2+2,??___ftdiv
  5920  0022FA  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  5921  0022FC  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  5922  0022FE  340D               	rlcf	___ftdiv@f2+1,w,c
  5923  002300  360F               	rlcf	??___ftdiv& (0+255),f,c
  5924  002302  E301               	bnc	u3041
  5925  002304  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  5926  002306                     u3041:
  5927  002306  500F               	movf	??___ftdiv,w,c
  5928  002308  6E17               	movwf	___ftdiv@sign,c
  5929  00230A  5017               	movf	___ftdiv@sign,w,c
  5930  00230C  A4D8               	btfss	status,2,c
  5931  00230E  D007               	goto	l3344
  5932  002310  0E00               	movlw	0
  5933  002312  6E09               	movwf	?___ftdiv,c
  5934  002314  0E00               	movlw	0
  5935  002316  6E0A               	movwf	?___ftdiv+1,c
  5936  002318  0E00               	movlw	0
  5937  00231A  6E0B               	movwf	?___ftdiv+2,c
  5938  00231C  0012               	return	
  5939  00231E                     l3344:
  5940  00231E  0E00               	movlw	0
  5941  002320  6E13               	movwf	___ftdiv@f3,c
  5942  002322  0E00               	movlw	0
  5943  002324  6E14               	movwf	___ftdiv@f3+1,c
  5944  002326  0E00               	movlw	0
  5945  002328  6E15               	movwf	___ftdiv@f3+2,c
  5946  00232A  5017               	movf	___ftdiv@sign,w,c
  5947  00232C  0F89               	addlw	137
  5948  00232E  5E16               	subwf	___ftdiv@exp,f,c
  5949  002330  C00B  F017         	movff	___ftdiv@f1+2,___ftdiv@sign
  5950  002334  500E               	movf	___ftdiv@f2+2,w,c
  5951  002336  1A17               	xorwf	___ftdiv@sign,f,c
  5952  002338  0E80               	movlw	128
  5953  00233A  1617               	andwf	___ftdiv@sign,f,c
  5954  00233C  8E0A               	bsf	___ftdiv@f1+1,7,c
  5955  00233E  0EFF               	movlw	255
  5956  002340  1609               	andwf	___ftdiv@f1,f,c
  5957  002342  0EFF               	movlw	255
  5958  002344  160A               	andwf	___ftdiv@f1+1,f,c
  5959  002346  0E00               	movlw	0
  5960  002348  160B               	andwf	___ftdiv@f1+2,f,c
  5961  00234A  8E0D               	bsf	___ftdiv@f2+1,7,c
  5962  00234C  0EFF               	movlw	255
  5963  00234E  160C               	andwf	___ftdiv@f2,f,c
  5964  002350  0EFF               	movlw	255
  5965  002352  160D               	andwf	___ftdiv@f2+1,f,c
  5966  002354  0E00               	movlw	0
  5967  002356  160E               	andwf	___ftdiv@f2+2,f,c
  5968  002358  0E18               	movlw	24
  5969  00235A  6E12               	movwf	___ftdiv@cntr,c
  5970  00235C  D000               	goto	l3364
  5971  00235E                     l3364:
  5972  00235E  90D8               	bcf	status,0,c
  5973  002360  3613               	rlcf	___ftdiv@f3,f,c
  5974  002362  3614               	rlcf	___ftdiv@f3+1,f,c
  5975  002364  3615               	rlcf	___ftdiv@f3+2,f,c
  5976  002366  500C               	movf	___ftdiv@f2,w,c
  5977  002368  5C09               	subwf	___ftdiv@f1,w,c
  5978  00236A  500D               	movf	___ftdiv@f2+1,w,c
  5979  00236C  580A               	subwfb	___ftdiv@f1+1,w,c
  5980  00236E  500E               	movf	___ftdiv@f2+2,w,c
  5981  002370  580B               	subwfb	___ftdiv@f1+2,w,c
  5982  002372  A0D8               	btfss	status,0,c
  5983  002374  D007               	goto	l1166
  5984  002376  500C               	movf	___ftdiv@f2,w,c
  5985  002378  5E09               	subwf	___ftdiv@f1,f,c
  5986  00237A  500D               	movf	___ftdiv@f2+1,w,c
  5987  00237C  5A0A               	subwfb	___ftdiv@f1+1,f,c
  5988  00237E  500E               	movf	___ftdiv@f2+2,w,c
  5989  002380  5A0B               	subwfb	___ftdiv@f1+2,f,c
  5990  002382  8013               	bsf	___ftdiv@f3,0,c
  5991  002384                     l1166:
  5992  002384  90D8               	bcf	status,0,c
  5993  002386  3609               	rlcf	___ftdiv@f1,f,c
  5994  002388  360A               	rlcf	___ftdiv@f1+1,f,c
  5995  00238A  360B               	rlcf	___ftdiv@f1+2,f,c
  5996  00238C  2E12               	decfsz	___ftdiv@cntr,f,c
  5997  00238E  D7E7               	goto	l3364
  5998  002390  D000               	goto	l3374
  5999  002392                     l3374:
  6000  002392  C013  F001         	movff	___ftdiv@f3,___ftpack@arg
  6001  002396  C014  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6002  00239A  C015  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6003  00239E  C016  F004         	movff	___ftdiv@exp,___ftpack@exp
  6004  0023A2  C017  F005         	movff	___ftdiv@sign,___ftpack@sign
  6005  0023A6  EC20  F013         	call	___ftpack	;wreg free
  6006  0023AA  C001  F009         	movff	?___ftpack,?___ftdiv
  6007  0023AE  C002  F00A         	movff	?___ftpack+1,?___ftdiv+1
  6008  0023B2  C003  F00B         	movff	?___ftpack+2,?___ftdiv+2
  6009  0023B6  0012               	return	
  6010  0023B8  0012               	return		;funcret
  6011  0023BA                     __end_of___ftdiv:
  6012                           	opt stack 0
  6013                           tblptru	equ	0xFF8
  6014                           tblptrh	equ	0xFF7
  6015                           tblptrl	equ	0xFF6
  6016                           tablat	equ	0xFF5
  6017                           prodh	equ	0xFF4
  6018                           prodl	equ	0xFF3
  6019                           indf0	equ	0xFEF
  6020                           postinc0	equ	0xFEE
  6021                           fsr0h	equ	0xFEA
  6022                           fsr0l	equ	0xFE9
  6023                           wreg	equ	0xFE8
  6024                           postdec1	equ	0xFE5
  6025                           fsr1l	equ	0xFE1
  6026                           indf2	equ	0xFDF
  6027                           postinc2	equ	0xFDE
  6028                           postdec2	equ	0xFDD
  6029                           fsr2h	equ	0xFDA
  6030                           fsr2l	equ	0xFD9
  6031                           status	equ	0xFD8
  6032                           
  6033 ;; *************** function ___awtoft *****************
  6034 ;; Defined at:
  6035 ;;		line 32 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\awtoft.c"
  6036 ;; Parameters:    Size  Location     Type
  6037 ;;  c               2    8[COMRAM] int 
  6038 ;; Auto vars:     Size  Location     Type
  6039 ;;  sign            1   11[COMRAM] unsigned char 
  6040 ;; Return value:  Size  Location     Type
  6041 ;;                  3    8[COMRAM] float 
  6042 ;; Registers used:
  6043 ;;		wreg, status,2, status,0, cstack
  6044 ;; Tracked objects:
  6045 ;;		On entry : 0/0
  6046 ;;		On exit  : 0/0
  6047 ;;		Unchanged: 0/0
  6048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6049 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6050 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6052 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6053 ;;Total ram usage:        4 bytes
  6054 ;; Hardware stack levels used:    1
  6055 ;; Hardware stack levels required when called:    1
  6056 ;; This function calls:
  6057 ;;		___ftpack
  6058 ;; This function is called by:
  6059 ;;		_set_vision
  6060 ;;		_exp
  6061 ;;		_log
  6062 ;; This function uses a non-reentrant model
  6063 ;;
  6064                           
  6065                           	psect	text28
  6066  002EBE                     __ptext28:
  6067                           	opt stack 0
  6068  002EBE                     ___awtoft:
  6069                           	opt stack 26
  6070                           
  6071                           ;incstack = 0
  6072  002EBE  0E00               	movlw	0
  6073  002EC0  6E0C               	movwf	___awtoft@sign,c
  6074  002EC2  AE0A               	btfss	___awtoft@c+1,7,c
  6075  002EC4  D007               	goto	l3438
  6076  002EC6  6C09               	negf	___awtoft@c,c
  6077  002EC8  1E0A               	comf	___awtoft@c+1,f,c
  6078  002ECA  B0D8               	btfsc	status,0,c
  6079  002ECC  2A0A               	incf	___awtoft@c+1,f,c
  6080  002ECE  0E01               	movlw	1
  6081  002ED0  6E0C               	movwf	___awtoft@sign,c
  6082  002ED2  D000               	goto	l3438
  6083  002ED4                     l3438:
  6084  002ED4  C009  F001         	movff	___awtoft@c,___ftpack@arg
  6085  002ED8  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  6086  002EDC  6A03               	clrf	___ftpack@arg+2,c
  6087  002EDE  0E8E               	movlw	142
  6088  002EE0  6E04               	movwf	___ftpack@exp,c
  6089  002EE2  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  6090  002EE6  EC20  F013         	call	___ftpack	;wreg free
  6091  002EEA  C001  F009         	movff	?___ftpack,?___awtoft
  6092  002EEE  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  6093  002EF2  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  6094  002EF6  0012               	return	
  6095  002EF8  0012               	return		;funcret
  6096  002EFA                     __end_of___awtoft:
  6097                           	opt stack 0
  6098                           tblptru	equ	0xFF8
  6099                           tblptrh	equ	0xFF7
  6100                           tblptrl	equ	0xFF6
  6101                           tablat	equ	0xFF5
  6102                           prodh	equ	0xFF4
  6103                           prodl	equ	0xFF3
  6104                           indf0	equ	0xFEF
  6105                           postinc0	equ	0xFEE
  6106                           fsr0h	equ	0xFEA
  6107                           fsr0l	equ	0xFE9
  6108                           wreg	equ	0xFE8
  6109                           postdec1	equ	0xFE5
  6110                           fsr1l	equ	0xFE1
  6111                           indf2	equ	0xFDF
  6112                           postinc2	equ	0xFDE
  6113                           postdec2	equ	0xFDD
  6114                           fsr2h	equ	0xFDA
  6115                           fsr2l	equ	0xFD9
  6116                           status	equ	0xFD8
  6117                           
  6118 ;; *************** function ___lltoft *****************
  6119 ;; Defined at:
  6120 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lltoft.c"
  6121 ;; Parameters:    Size  Location     Type
  6122 ;;  c               4    8[COMRAM] unsigned long 
  6123 ;; Auto vars:     Size  Location     Type
  6124 ;;  exp             1   16[COMRAM] unsigned char 
  6125 ;; Return value:  Size  Location     Type
  6126 ;;                  3    8[COMRAM] float 
  6127 ;; Registers used:
  6128 ;;		wreg, status,2, status,0, cstack
  6129 ;; Tracked objects:
  6130 ;;		On entry : 0/0
  6131 ;;		On exit  : 0/0
  6132 ;;		Unchanged: 0/0
  6133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6134 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6135 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6136 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6137 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6138 ;;Total ram usage:        9 bytes
  6139 ;; Hardware stack levels used:    1
  6140 ;; Hardware stack levels required when called:    1
  6141 ;; This function calls:
  6142 ;;		___ftpack
  6143 ;; This function is called by:
  6144 ;;		_pow
  6145 ;; This function uses a non-reentrant model
  6146 ;;
  6147                           
  6148                           	psect	text29
  6149  002B90                     __ptext29:
  6150                           	opt stack 0
  6151  002B90                     ___lltoft:
  6152                           	opt stack 27
  6153                           
  6154                           ;incstack = 0
  6155  002B90  0E8E               	movlw	142
  6156  002B92  6E11               	movwf	___lltoft@exp,c
  6157  002B94  D007               	goto	l3746
  6158  002B96                     l3744:
  6159  002B96  90D8               	bcf	status,0,c
  6160  002B98  320C               	rrcf	___lltoft@c+3,f,c
  6161  002B9A  320B               	rrcf	___lltoft@c+2,f,c
  6162  002B9C  320A               	rrcf	___lltoft@c+1,f,c
  6163  002B9E  3209               	rrcf	___lltoft@c,f,c
  6164  002BA0  2A11               	incf	___lltoft@exp,f,c
  6165  002BA2  D000               	goto	l3746
  6166  002BA4                     l3746:
  6167  002BA4  0E00               	movlw	0
  6168  002BA6  1409               	andwf	___lltoft@c,w,c
  6169  002BA8  6E0D               	movwf	??___lltoft& (0+255),c
  6170  002BAA  0E00               	movlw	0
  6171  002BAC  140A               	andwf	___lltoft@c+1,w,c
  6172  002BAE  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  6173  002BB0  0E00               	movlw	0
  6174  002BB2  140B               	andwf	___lltoft@c+2,w,c
  6175  002BB4  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  6176  002BB6  0EFF               	movlw	255
  6177  002BB8  140C               	andwf	___lltoft@c+3,w,c
  6178  002BBA  6E10               	movwf	(??___lltoft+3)& (0+255),c
  6179  002BBC  500D               	movf	??___lltoft,w,c
  6180  002BBE  100E               	iorwf	??___lltoft+1,w,c
  6181  002BC0  100F               	iorwf	??___lltoft+2,w,c
  6182  002BC2  1010               	iorwf	??___lltoft+3,w,c
  6183  002BC4  A4D8               	btfss	status,2,c
  6184  002BC6  D7E7               	goto	l3744
  6185  002BC8  C009  F001         	movff	___lltoft@c,___ftpack@arg
  6186  002BCC  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  6187  002BD0  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  6188  002BD4  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  6189  002BD8  0E00               	movlw	0
  6190  002BDA  6E05               	movwf	___ftpack@sign,c
  6191  002BDC  EC20  F013         	call	___ftpack	;wreg free
  6192  002BE0  C001  F009         	movff	?___ftpack,?___lltoft
  6193  002BE4  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  6194  002BE8  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  6195  002BEC  0012               	return	
  6196  002BEE  0012               	return		;funcret
  6197  002BF0                     __end_of___lltoft:
  6198                           	opt stack 0
  6199                           tblptru	equ	0xFF8
  6200                           tblptrh	equ	0xFF7
  6201                           tblptrl	equ	0xFF6
  6202                           tablat	equ	0xFF5
  6203                           prodh	equ	0xFF4
  6204                           prodl	equ	0xFF3
  6205                           indf0	equ	0xFEF
  6206                           postinc0	equ	0xFEE
  6207                           fsr0h	equ	0xFEA
  6208                           fsr0l	equ	0xFE9
  6209                           wreg	equ	0xFE8
  6210                           postdec1	equ	0xFE5
  6211                           fsr1l	equ	0xFE1
  6212                           indf2	equ	0xFDF
  6213                           postinc2	equ	0xFDE
  6214                           postdec2	equ	0xFDD
  6215                           fsr2h	equ	0xFDA
  6216                           fsr2l	equ	0xFD9
  6217                           status	equ	0xFD8
  6218                           
  6219 ;; *************** function _not_fill_pass *****************
  6220 ;; Defined at:
  6221 ;;		line 34 in file "lcd_vision.c"
  6222 ;; Parameters:    Size  Location     Type
  6223 ;;  digit           2    0[COMRAM] short 
  6224 ;; Auto vars:     Size  Location     Type
  6225 ;;		None
  6226 ;; Return value:  Size  Location     Type
  6227 ;;                  1    wreg      unsigned char 
  6228 ;; Registers used:
  6229 ;;		wreg, status,2, status,0
  6230 ;; Tracked objects:
  6231 ;;		On entry : 0/0
  6232 ;;		On exit  : 0/0
  6233 ;;		Unchanged: 0/0
  6234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6235 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6238 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6239 ;;Total ram usage:        2 bytes
  6240 ;; Hardware stack levels used:    1
  6241 ;; This function calls:
  6242 ;;		Nothing
  6243 ;; This function is called by:
  6244 ;;		_set_vision
  6245 ;; This function uses a non-reentrant model
  6246 ;;
  6247                           
  6248                           	psect	text30
  6249  003046                     __ptext30:
  6250                           	opt stack 0
  6251  003046                     _not_fill_pass:
  6252                           	opt stack 29
  6253                           
  6254                           ;lcd_vision.c: 35: return digit !=16;
  6255                           
  6256                           ;incstack = 0
  6257  003046  0E10               	movlw	16
  6258  003048  1801               	xorwf	not_fill_pass@digit,w,c
  6259  00304A  1002               	iorwf	not_fill_pass@digit+1,w,c
  6260  00304C  B4D8               	btfsc	status,2,c
  6261  00304E  D002               	goto	u4020
  6262  003050  0E01               	movlw	1
  6263  003052  0012               	return	
  6264  003054                     u4020:
  6265  003054  0E00               	movlw	0
  6266  003056  0012               	return	
  6267  003058  0012               	return		;funcret
  6268  00305A                     __end_of_not_fill_pass:
  6269                           	opt stack 0
  6270                           tblptru	equ	0xFF8
  6271                           tblptrh	equ	0xFF7
  6272                           tblptrl	equ	0xFF6
  6273                           tablat	equ	0xFF5
  6274                           prodh	equ	0xFF4
  6275                           prodl	equ	0xFF3
  6276                           indf0	equ	0xFEF
  6277                           postinc0	equ	0xFEE
  6278                           fsr0h	equ	0xFEA
  6279                           fsr0l	equ	0xFE9
  6280                           wreg	equ	0xFE8
  6281                           postdec1	equ	0xFE5
  6282                           fsr1l	equ	0xFE1
  6283                           indf2	equ	0xFDF
  6284                           postinc2	equ	0xFDE
  6285                           postdec2	equ	0xFDD
  6286                           fsr2h	equ	0xFDA
  6287                           fsr2l	equ	0xFD9
  6288                           status	equ	0xFD8
  6289                           
  6290 ;; *************** function _next_code *****************
  6291 ;; Defined at:
  6292 ;;		line 39 in file "lcd_vision.c"
  6293 ;; Parameters:    Size  Location     Type
  6294 ;;  digit           2    7[COMRAM] PTR short 
  6295 ;;		 -> set_vision@digit(2), 
  6296 ;;  input           2    9[COMRAM] PTR unsigned char 
  6297 ;;		 -> set_vision@input(1), 
  6298 ;; Auto vars:     Size  Location     Type
  6299 ;;		None
  6300 ;; Return value:  Size  Location     Type
  6301 ;;		None               void
  6302 ;; Registers used:
  6303 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6304 ;; Tracked objects:
  6305 ;;		On entry : 0/0
  6306 ;;		On exit  : 0/0
  6307 ;;		Unchanged: 0/0
  6308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6309 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6311 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6312 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6313 ;;Total ram usage:        6 bytes
  6314 ;; Hardware stack levels used:    1
  6315 ;; Hardware stack levels required when called:    3
  6316 ;; This function calls:
  6317 ;;		_clear_keyboard
  6318 ;;		_lcd_gotoxy
  6319 ;; This function is called by:
  6320 ;;		_set_vision
  6321 ;; This function uses a non-reentrant model
  6322 ;;
  6323                           
  6324                           	psect	text31
  6325  002DE6                     __ptext31:
  6326                           	opt stack 0
  6327  002DE6                     _next_code:
  6328                           	opt stack 26
  6329                           
  6330                           ;lcd_vision.c: 40: clear_keyboard();
  6331                           
  6332                           ;incstack = 0
  6333  002DE6  EC64  F018         	call	_clear_keyboard	;wreg free
  6334                           
  6335                           ;lcd_vision.c: 41: *digit = *digit + 1;
  6336  002DEA  C008  FFD9         	movff	next_code@digit,fsr2l
  6337  002DEE  C009  FFDA         	movff	next_code@digit+1,fsr2h
  6338  002DF2  CFDE F00C          	movff	postinc2,??_next_code
  6339  002DF6  CFDD F00D          	movff	postdec2,??_next_code+1
  6340  002DFA  0E01               	movlw	1
  6341  002DFC  260C               	addwf	??_next_code,f,c
  6342  002DFE  0E00               	movlw	0
  6343  002E00  220D               	addwfc	??_next_code+1,f,c
  6344  002E02  C008  FFD9         	movff	next_code@digit,fsr2l
  6345  002E06  C009  FFDA         	movff	next_code@digit+1,fsr2h
  6346  002E0A  C00C  FFDE         	movff	??_next_code,postinc2
  6347  002E0E  C00D  FFDD         	movff	??_next_code+1,postdec2
  6348                           
  6349                           ;lcd_vision.c: 42: lcd_gotoxy(*digit, 2);
  6350  002E12  0E02               	movlw	2
  6351  002E14  6E05               	movwf	lcd_gotoxy@y,c
  6352  002E16  C008  FFD9         	movff	next_code@digit,fsr2l
  6353  002E1A  C009  FFDA         	movff	next_code@digit+1,fsr2h
  6354  002E1E  50DF               	movf	indf2,w,c
  6355  002E20  ECE7  F017         	call	_lcd_gotoxy
  6356                           
  6357                           ;lcd_vision.c: 43: *input = 18;
  6358  002E24  C00A  FFD9         	movff	next_code@input,fsr2l
  6359  002E28  C00B  FFDA         	movff	next_code@input+1,fsr2h
  6360  002E2C  0E12               	movlw	18
  6361  002E2E  6EDF               	movwf	indf2,c
  6362  002E30  0012               	return		;funcret
  6363  002E32                     __end_of_next_code:
  6364                           	opt stack 0
  6365                           tblptru	equ	0xFF8
  6366                           tblptrh	equ	0xFF7
  6367                           tblptrl	equ	0xFF6
  6368                           tablat	equ	0xFF5
  6369                           prodh	equ	0xFF4
  6370                           prodl	equ	0xFF3
  6371                           indf0	equ	0xFEF
  6372                           postinc0	equ	0xFEE
  6373                           fsr0h	equ	0xFEA
  6374                           fsr0l	equ	0xFE9
  6375                           wreg	equ	0xFE8
  6376                           postdec1	equ	0xFE5
  6377                           fsr1l	equ	0xFE1
  6378                           indf2	equ	0xFDF
  6379                           postinc2	equ	0xFDE
  6380                           postdec2	equ	0xFDD
  6381                           fsr2h	equ	0xFDA
  6382                           fsr2l	equ	0xFD9
  6383                           status	equ	0xFD8
  6384                           
  6385 ;; *************** function _lcd_gotoxy *****************
  6386 ;; Defined at:
  6387 ;;		line 158 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  6388 ;; Parameters:    Size  Location     Type
  6389 ;;  x               1    wreg     unsigned char 
  6390 ;;  y               1    4[COMRAM] unsigned char 
  6391 ;; Auto vars:     Size  Location     Type
  6392 ;;  x               1    5[COMRAM] unsigned char 
  6393 ;;  address         1    6[COMRAM] unsigned char 
  6394 ;; Return value:  Size  Location     Type
  6395 ;;		None               void
  6396 ;; Registers used:
  6397 ;;		wreg, status,2, status,0, cstack
  6398 ;; Tracked objects:
  6399 ;;		On entry : 0/0
  6400 ;;		On exit  : 0/0
  6401 ;;		Unchanged: 0/0
  6402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6403 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6404 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6406 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6407 ;;Total ram usage:        3 bytes
  6408 ;; Hardware stack levels used:    1
  6409 ;; Hardware stack levels required when called:    2
  6410 ;; This function calls:
  6411 ;;		_lcd_send_byte
  6412 ;; This function is called by:
  6413 ;;		_main
  6414 ;;		_lcd_putc
  6415 ;;		_write_Date
  6416 ;;		_next_code
  6417 ;;		_twinkle
  6418 ;;		_set_vision
  6419 ;; This function uses a non-reentrant model
  6420 ;;
  6421                           
  6422                           	psect	text32
  6423  002FCE                     __ptext32:
  6424                           	opt stack 0
  6425  002FCE                     _lcd_gotoxy:
  6426                           	opt stack 24
  6427                           
  6428                           ;incstack = 0
  6429                           ;lcd_gotoxy@x stored from wreg
  6430  002FCE  6E06               	movwf	lcd_gotoxy@x,c
  6431                           
  6432                           ;unmc_lcd_216.c: 159: int8 address;
  6433                           ;unmc_lcd_216.c: 161: if(y != 1)
  6434  002FD0  0405               	decf	lcd_gotoxy@y,w,c
  6435  002FD2  B4D8               	btfsc	status,2,c
  6436  002FD4  D002               	goto	l2896
  6437                           
  6438                           ;unmc_lcd_216.c: 162: address = 0x40;
  6439  002FD6  0E40               	movlw	64
  6440  002FD8  D001               	goto	L3
  6441  002FDA                     l2896:
  6442                           
  6443                           ;unmc_lcd_216.c: 163: else
  6444                           ;unmc_lcd_216.c: 164: address=0;
  6445  002FDA  0E00               	movlw	0
  6446  002FDC                     L3:
  6447  002FDC  6E07               	movwf	lcd_gotoxy@address,c
  6448  002FDE  D000               	goto	l2898
  6449  002FE0                     l2898:
  6450                           
  6451                           ;unmc_lcd_216.c: 166: address += x-1;
  6452  002FE0  0406               	decf	lcd_gotoxy@x,w,c
  6453  002FE2  2607               	addwf	lcd_gotoxy@address,f,c
  6454                           
  6455                           ;unmc_lcd_216.c: 167: lcd_send_byte(0, 0x80 | address);
  6456  002FE4  5007               	movf	lcd_gotoxy@address,w,c
  6457  002FE6  0980               	iorlw	128
  6458  002FE8  6E03               	movwf	lcd_send_byte@n,c
  6459  002FEA  0E00               	movlw	0
  6460  002FEC  EC7D  F017         	call	_lcd_send_byte
  6461  002FF0  0012               	return		;funcret
  6462  002FF2                     __end_of_lcd_gotoxy:
  6463                           	opt stack 0
  6464                           tblptru	equ	0xFF8
  6465                           tblptrh	equ	0xFF7
  6466                           tblptrl	equ	0xFF6
  6467                           tablat	equ	0xFF5
  6468                           prodh	equ	0xFF4
  6469                           prodl	equ	0xFF3
  6470                           indf0	equ	0xFEF
  6471                           postinc0	equ	0xFEE
  6472                           fsr0h	equ	0xFEA
  6473                           fsr0l	equ	0xFE9
  6474                           wreg	equ	0xFE8
  6475                           postdec1	equ	0xFE5
  6476                           fsr1l	equ	0xFE1
  6477                           indf2	equ	0xFDF
  6478                           postinc2	equ	0xFDE
  6479                           postdec2	equ	0xFDD
  6480                           fsr2h	equ	0xFDA
  6481                           fsr2l	equ	0xFD9
  6482                           status	equ	0xFD8
  6483                           
  6484 ;; *************** function _clear_keyboard *****************
  6485 ;; Defined at:
  6486 ;;		line 4 in file "keyboard.c"
  6487 ;; Parameters:    Size  Location     Type
  6488 ;;		None
  6489 ;; Auto vars:     Size  Location     Type
  6490 ;;		None
  6491 ;; Return value:  Size  Location     Type
  6492 ;;		None               void
  6493 ;; Registers used:
  6494 ;;		wreg, status,2
  6495 ;; Tracked objects:
  6496 ;;		On entry : 0/0
  6497 ;;		On exit  : 0/0
  6498 ;;		Unchanged: 0/0
  6499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6503 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6504 ;;Total ram usage:        0 bytes
  6505 ;; Hardware stack levels used:    1
  6506 ;; This function calls:
  6507 ;;		Nothing
  6508 ;; This function is called by:
  6509 ;;		_next_code
  6510 ;; This function uses a non-reentrant model
  6511 ;;
  6512                           
  6513                           	psect	text33
  6514  0030C8                     __ptext33:
  6515                           	opt stack 0
  6516  0030C8                     _clear_keyboard:
  6517                           	opt stack 28
  6518                           
  6519                           ;keyboard.c: 5: key = 18;
  6520                           
  6521                           ;incstack = 0
  6522  0030C8  0E12               	movlw	18
  6523  0030CA  6E5E               	movwf	_key,c
  6524  0030CC  0012               	return		;funcret
  6525  0030CE                     __end_of_clear_keyboard:
  6526                           	opt stack 0
  6527                           tblptru	equ	0xFF8
  6528                           tblptrh	equ	0xFF7
  6529                           tblptrl	equ	0xFF6
  6530                           tablat	equ	0xFF5
  6531                           prodh	equ	0xFF4
  6532                           prodl	equ	0xFF3
  6533                           indf0	equ	0xFEF
  6534                           postinc0	equ	0xFEE
  6535                           fsr0h	equ	0xFEA
  6536                           fsr0l	equ	0xFE9
  6537                           wreg	equ	0xFE8
  6538                           postdec1	equ	0xFE5
  6539                           fsr1l	equ	0xFE1
  6540                           indf2	equ	0xFDF
  6541                           postinc2	equ	0xFDE
  6542                           postdec2	equ	0xFDD
  6543                           fsr2h	equ	0xFDA
  6544                           fsr2l	equ	0xFD9
  6545                           status	equ	0xFD8
  6546                           
  6547 ;; *************** function _lcd_setcursor_vb *****************
  6548 ;; Defined at:
  6549 ;;		line 210 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  6550 ;; Parameters:    Size  Location     Type
  6551 ;;  visible         1    wreg     unsigned char 
  6552 ;;  blink           1    4[COMRAM] unsigned char 
  6553 ;; Auto vars:     Size  Location     Type
  6554 ;;  visible         1    5[COMRAM] unsigned char 
  6555 ;; Return value:  Size  Location     Type
  6556 ;;		None               void
  6557 ;; Registers used:
  6558 ;;		wreg, status,2, status,0, cstack
  6559 ;; Tracked objects:
  6560 ;;		On entry : 0/0
  6561 ;;		On exit  : 0/0
  6562 ;;		Unchanged: 0/0
  6563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6564 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6565 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6567 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6568 ;;Total ram usage:        2 bytes
  6569 ;; Hardware stack levels used:    1
  6570 ;; Hardware stack levels required when called:    2
  6571 ;; This function calls:
  6572 ;;		_lcd_send_byte
  6573 ;; This function is called by:
  6574 ;;		_set_vision
  6575 ;;		_jumpIfNotNumber
  6576 ;; This function uses a non-reentrant model
  6577 ;;
  6578                           
  6579                           	psect	text34
  6580  00305A                     __ptext34:
  6581                           	opt stack 0
  6582  00305A                     _lcd_setcursor_vb:
  6583                           	opt stack 27
  6584                           
  6585                           ;incstack = 0
  6586                           ;lcd_setcursor_vb@visible stored from wreg
  6587  00305A  6E06               	movwf	lcd_setcursor_vb@visible,c
  6588                           
  6589                           ;unmc_lcd_216.c: 211: lcd_send_byte(0, 0xC|(visible<<1)|blink);
  6590  00305C  5006               	movf	lcd_setcursor_vb@visible,w,c
  6591  00305E  2406               	addwf	lcd_setcursor_vb@visible,w,c
  6592  003060  1005               	iorwf	lcd_setcursor_vb@blink,w,c
  6593  003062  090C               	iorlw	12
  6594  003064  6E03               	movwf	lcd_send_byte@n,c
  6595  003066  0E00               	movlw	0
  6596  003068  EC7D  F017         	call	_lcd_send_byte
  6597  00306C  0012               	return		;funcret
  6598  00306E                     __end_of_lcd_setcursor_vb:
  6599                           	opt stack 0
  6600                           tblptru	equ	0xFF8
  6601                           tblptrh	equ	0xFF7
  6602                           tblptrl	equ	0xFF6
  6603                           tablat	equ	0xFF5
  6604                           prodh	equ	0xFF4
  6605                           prodl	equ	0xFF3
  6606                           indf0	equ	0xFEF
  6607                           postinc0	equ	0xFEE
  6608                           fsr0h	equ	0xFEA
  6609                           fsr0l	equ	0xFE9
  6610                           wreg	equ	0xFE8
  6611                           postdec1	equ	0xFE5
  6612                           fsr1l	equ	0xFE1
  6613                           indf2	equ	0xFDF
  6614                           postinc2	equ	0xFDE
  6615                           postdec2	equ	0xFDD
  6616                           fsr2h	equ	0xFDA
  6617                           fsr2l	equ	0xFD9
  6618                           status	equ	0xFD8
  6619                           
  6620 ;; *************** function _is_not_letter *****************
  6621 ;; Defined at:
  6622 ;;		line 30 in file "lcd_vision.c"
  6623 ;; Parameters:    Size  Location     Type
  6624 ;;  input           1    wreg     unsigned char 
  6625 ;; Auto vars:     Size  Location     Type
  6626 ;;  input           1    1[COMRAM] unsigned char 
  6627 ;; Return value:  Size  Location     Type
  6628 ;;                  1    wreg      unsigned char 
  6629 ;; Registers used:
  6630 ;;		wreg, status,2, status,0
  6631 ;; Tracked objects:
  6632 ;;		On entry : 0/0
  6633 ;;		On exit  : 0/0
  6634 ;;		Unchanged: 0/0
  6635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6637 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6639 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6640 ;;Total ram usage:        2 bytes
  6641 ;; Hardware stack levels used:    1
  6642 ;; This function calls:
  6643 ;;		Nothing
  6644 ;; This function is called by:
  6645 ;;		_set_vision
  6646 ;; This function uses a non-reentrant model
  6647 ;;
  6648                           
  6649                           	psect	text35
  6650  002F2C                     __ptext35:
  6651                           	opt stack 0
  6652  002F2C                     _is_not_letter:
  6653                           	opt stack 29
  6654                           
  6655                           ;incstack = 0
  6656                           ;is_not_letter@input stored from wreg
  6657  002F2C  6E02               	movwf	is_not_letter@input,c
  6658                           
  6659                           ;lcd_vision.c: 31: return input != 16 && input != 11 && input !=12 && input!=13;
  6660  002F2E  0E00               	movlw	0
  6661  002F30  6E01               	movwf	_is_not_letter$1329,c
  6662  002F32  0E10               	movlw	16
  6663  002F34  1802               	xorwf	is_not_letter@input,w,c
  6664  002F36  B4D8               	btfsc	status,2,c
  6665  002F38  D00E               	goto	l587
  6666  002F3A  0E0B               	movlw	11
  6667  002F3C  1802               	xorwf	is_not_letter@input,w,c
  6668  002F3E  B4D8               	btfsc	status,2,c
  6669  002F40  D00A               	goto	l587
  6670  002F42  0E0C               	movlw	12
  6671  002F44  1802               	xorwf	is_not_letter@input,w,c
  6672  002F46  B4D8               	btfsc	status,2,c
  6673  002F48  D006               	goto	l587
  6674  002F4A  0E0D               	movlw	13
  6675  002F4C  1802               	xorwf	is_not_letter@input,w,c
  6676  002F4E  B4D8               	btfsc	status,2,c
  6677  002F50  D002               	goto	l587
  6678  002F52  0E01               	movlw	1
  6679  002F54  6E01               	movwf	_is_not_letter$1329,c
  6680  002F56                     l587:
  6681  002F56  5001               	movf	_is_not_letter$1329,w,c
  6682  002F58  0012               	return	
  6683  002F5A  0012               	return		;funcret
  6684  002F5C                     __end_of_is_not_letter:
  6685                           	opt stack 0
  6686                           tblptru	equ	0xFF8
  6687                           tblptrh	equ	0xFF7
  6688                           tblptrl	equ	0xFF6
  6689                           tablat	equ	0xFF5
  6690                           prodh	equ	0xFF4
  6691                           prodl	equ	0xFF3
  6692                           indf0	equ	0xFEF
  6693                           postinc0	equ	0xFEE
  6694                           fsr0h	equ	0xFEA
  6695                           fsr0l	equ	0xFE9
  6696                           wreg	equ	0xFE8
  6697                           postdec1	equ	0xFE5
  6698                           fsr1l	equ	0xFE1
  6699                           indf2	equ	0xFDF
  6700                           postinc2	equ	0xFDE
  6701                           postdec2	equ	0xFDD
  6702                           fsr2h	equ	0xFDA
  6703                           fsr2l	equ	0xFD9
  6704                           status	equ	0xFD8
  6705                           
  6706 ;; *************** function _clear *****************
  6707 ;; Defined at:
  6708 ;;		line 7 in file "lcd_vision.c"
  6709 ;; Parameters:    Size  Location     Type
  6710 ;;		None
  6711 ;; Auto vars:     Size  Location     Type
  6712 ;;		None
  6713 ;; Return value:  Size  Location     Type
  6714 ;;		None               void
  6715 ;; Registers used:
  6716 ;;		wreg, status,2, status,0, cstack
  6717 ;; Tracked objects:
  6718 ;;		On entry : 0/0
  6719 ;;		On exit  : 0/0
  6720 ;;		Unchanged: 0/0
  6721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6724 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6725 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6726 ;;Total ram usage:        1 bytes
  6727 ;; Hardware stack levels used:    1
  6728 ;; Hardware stack levels required when called:    3
  6729 ;; This function calls:
  6730 ;;		_lcd_comand
  6731 ;; This function is called by:
  6732 ;;		_set_vision
  6733 ;; This function uses a non-reentrant model
  6734 ;;
  6735                           
  6736                           	psect	text36
  6737  003030                     __ptext36:
  6738                           	opt stack 0
  6739  003030                     _clear:
  6740                           	opt stack 26
  6741                           
  6742                           ;lcd_vision.c: 8: lcd_comand(0b00000001);
  6743                           
  6744                           ;incstack = 0
  6745  003030  0E01               	movlw	1
  6746  003032  EC52  F018         	call	_lcd_comand
  6747                           
  6748                           ;lcd_vision.c: 9: _delay((unsigned long)((5)*(8000000/4000.0)));
  6749  003036  0E0D               	movlw	13
  6750  003038  6E06               	movwf	??_clear& (0+255),c
  6751  00303A  0EFC               	movlw	252
  6752  00303C                     u4387:
  6753  00303C  2EE8               	decfsz	wreg,f,c
  6754  00303E  D7FE               	goto	u4387
  6755  003040  2E06               	decfsz	??_clear& (0+255),f,c
  6756  003042  D7FC               	goto	u4387
  6757  003044  0012               	return		;funcret
  6758  003046                     __end_of_clear:
  6759                           	opt stack 0
  6760                           tblptru	equ	0xFF8
  6761                           tblptrh	equ	0xFF7
  6762                           tblptrl	equ	0xFF6
  6763                           tablat	equ	0xFF5
  6764                           prodh	equ	0xFF4
  6765                           prodl	equ	0xFF3
  6766                           indf0	equ	0xFEF
  6767                           postinc0	equ	0xFEE
  6768                           fsr0h	equ	0xFEA
  6769                           fsr0l	equ	0xFE9
  6770                           wreg	equ	0xFE8
  6771                           postdec1	equ	0xFE5
  6772                           fsr1l	equ	0xFE1
  6773                           indf2	equ	0xFDF
  6774                           postinc2	equ	0xFDE
  6775                           postdec2	equ	0xFDD
  6776                           fsr2h	equ	0xFDA
  6777                           fsr2l	equ	0xFD9
  6778                           status	equ	0xFD8
  6779                           
  6780 ;; *************** function _checkPass *****************
  6781 ;; Defined at:
  6782 ;;		line 3 in file "config.c"
  6783 ;; Parameters:    Size  Location     Type
  6784 ;;  pass            2    0[COMRAM] int 
  6785 ;; Auto vars:     Size  Location     Type
  6786 ;;		None
  6787 ;; Return value:  Size  Location     Type
  6788 ;;                  1    wreg      unsigned char 
  6789 ;; Registers used:
  6790 ;;		wreg, status,2, status,0
  6791 ;; Tracked objects:
  6792 ;;		On entry : 0/0
  6793 ;;		On exit  : 0/0
  6794 ;;		Unchanged: 0/0
  6795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6796 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6799 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6800 ;;Total ram usage:        2 bytes
  6801 ;; Hardware stack levels used:    1
  6802 ;; This function calls:
  6803 ;;		Nothing
  6804 ;; This function is called by:
  6805 ;;		_set_vision
  6806 ;; This function uses a non-reentrant model
  6807 ;;
  6808                           
  6809                           	psect	text37
  6810  003014                     __ptext37:
  6811                           	opt stack 0
  6812  003014                     _checkPass:
  6813                           	opt stack 29
  6814                           
  6815                           ;config.c: 4: return password == pass;
  6816                           
  6817                           ;incstack = 0
  6818  003014  5001               	movf	checkPass@pass,w,c
  6819  003016  0100               	movlb	0	; () banked
  6820  003018  19D5               	xorwf	_password& (0+255),w,b
  6821  00301A  E107               	bnz	u4110
  6822  00301C  5002               	movf	checkPass@pass+1,w,c
  6823  00301E  0100               	movlb	0	; () banked
  6824  003020  19D6               	xorwf	(_password+1)& (0+255),w,b
  6825  003022  A4D8               	btfss	status,2,c
  6826  003024  D002               	goto	u4110
  6827  003026  0E01               	movlw	1
  6828  003028  0012               	return	
  6829  00302A                     u4110:
  6830  00302A  0E00               	movlw	0
  6831  00302C  0012               	return	
  6832                           
  6833                           ; BSR set to: 0
  6834                           
  6835                           ; BSR set to: 0
  6836  00302E  0012               	return		;funcret
  6837  003030                     __end_of_checkPass:
  6838                           	opt stack 0
  6839                           tblptru	equ	0xFF8
  6840                           tblptrh	equ	0xFF7
  6841                           tblptrl	equ	0xFF6
  6842                           tablat	equ	0xFF5
  6843                           prodh	equ	0xFF4
  6844                           prodl	equ	0xFF3
  6845                           indf0	equ	0xFEF
  6846                           postinc0	equ	0xFEE
  6847                           fsr0h	equ	0xFEA
  6848                           fsr0l	equ	0xFE9
  6849                           wreg	equ	0xFE8
  6850                           postdec1	equ	0xFE5
  6851                           fsr1l	equ	0xFE1
  6852                           indf2	equ	0xFDF
  6853                           postinc2	equ	0xFDE
  6854                           postdec2	equ	0xFDD
  6855                           fsr2h	equ	0xFDA
  6856                           fsr2l	equ	0xFD9
  6857                           status	equ	0xFD8
  6858                           
  6859 ;; *************** function ___lbtoft *****************
  6860 ;; Defined at:
  6861 ;;		line 27 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lbtoft.c"
  6862 ;; Parameters:    Size  Location     Type
  6863 ;;  c               1    wreg     unsigned char 
  6864 ;; Auto vars:     Size  Location     Type
  6865 ;;  c               1   11[COMRAM] unsigned char 
  6866 ;; Return value:  Size  Location     Type
  6867 ;;                  3    8[COMRAM] float 
  6868 ;; Registers used:
  6869 ;;		wreg, status,2, status,0, cstack
  6870 ;; Tracked objects:
  6871 ;;		On entry : 0/0
  6872 ;;		On exit  : 0/0
  6873 ;;		Unchanged: 0/0
  6874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6875 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6876 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6878 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6879 ;;Total ram usage:        4 bytes
  6880 ;; Hardware stack levels used:    1
  6881 ;; Hardware stack levels required when called:    1
  6882 ;; This function calls:
  6883 ;;		___ftpack
  6884 ;; This function is called by:
  6885 ;;		_set_vision
  6886 ;; This function uses a non-reentrant model
  6887 ;;
  6888                           
  6889                           	psect	text38
  6890  002F84                     __ptext38:
  6891                           	opt stack 0
  6892  002F84                     ___lbtoft:
  6893                           	opt stack 28
  6894                           
  6895                           ; BSR set to: 0
  6896                           ;incstack = 0
  6897                           ;___lbtoft@c stored from wreg
  6898  002F84  6E0C               	movwf	___lbtoft@c,c
  6899  002F86  500C               	movf	___lbtoft@c,w,c
  6900  002F88  6E01               	movwf	___ftpack@arg,c
  6901  002F8A  6A02               	clrf	___ftpack@arg+1,c
  6902  002F8C  6A03               	clrf	___ftpack@arg+2,c
  6903  002F8E  0E8E               	movlw	142
  6904  002F90  6E04               	movwf	___ftpack@exp,c
  6905  002F92  0E00               	movlw	0
  6906  002F94  6E05               	movwf	___ftpack@sign,c
  6907  002F96  EC20  F013         	call	___ftpack	;wreg free
  6908  002F9A  C001  F009         	movff	?___ftpack,?___lbtoft
  6909  002F9E  C002  F00A         	movff	?___ftpack+1,?___lbtoft+1
  6910  002FA2  C003  F00B         	movff	?___ftpack+2,?___lbtoft+2
  6911  002FA6  0012               	return	
  6912  002FA8  0012               	return		;funcret
  6913  002FAA                     __end_of___lbtoft:
  6914                           	opt stack 0
  6915                           tblptru	equ	0xFF8
  6916                           tblptrh	equ	0xFF7
  6917                           tblptrl	equ	0xFF6
  6918                           tablat	equ	0xFF5
  6919                           prodh	equ	0xFF4
  6920                           prodl	equ	0xFF3
  6921                           indf0	equ	0xFEF
  6922                           postinc0	equ	0xFEE
  6923                           fsr0h	equ	0xFEA
  6924                           fsr0l	equ	0xFE9
  6925                           wreg	equ	0xFE8
  6926                           postdec1	equ	0xFE5
  6927                           fsr1l	equ	0xFE1
  6928                           indf2	equ	0xFDF
  6929                           postinc2	equ	0xFDE
  6930                           postdec2	equ	0xFDD
  6931                           fsr2h	equ	0xFDA
  6932                           fsr2l	equ	0xFD9
  6933                           status	equ	0xFD8
  6934                           
  6935 ;; *************** function ___ftpack *****************
  6936 ;; Defined at:
  6937 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\float.c"
  6938 ;; Parameters:    Size  Location     Type
  6939 ;;  arg             3    0[COMRAM] unsigned um
  6940 ;;  exp             1    3[COMRAM] unsigned char 
  6941 ;;  sign            1    4[COMRAM] unsigned char 
  6942 ;; Auto vars:     Size  Location     Type
  6943 ;;		None
  6944 ;; Return value:  Size  Location     Type
  6945 ;;                  3    0[COMRAM] float 
  6946 ;; Registers used:
  6947 ;;		wreg, status,2, status,0
  6948 ;; Tracked objects:
  6949 ;;		On entry : 0/0
  6950 ;;		On exit  : 0/0
  6951 ;;		Unchanged: 0/0
  6952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6953 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6955 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6956 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6957 ;;Total ram usage:        8 bytes
  6958 ;; Hardware stack levels used:    1
  6959 ;; This function calls:
  6960 ;;		Nothing
  6961 ;; This function is called by:
  6962 ;;		___altoft
  6963 ;;		___awtoft
  6964 ;;		___ftadd
  6965 ;;		___ftdiv
  6966 ;;		___ftmul
  6967 ;;		___lbtoft
  6968 ;;		___lltoft
  6969 ;; This function uses a non-reentrant model
  6970 ;;
  6971                           
  6972                           	psect	text39
  6973  002640                     __ptext39:
  6974                           	opt stack 0
  6975  002640                     ___ftpack:
  6976                           	opt stack 25
  6977                           
  6978                           ;incstack = 0
  6979  002640  5004               	movf	___ftpack@exp,w,c
  6980  002642  B4D8               	btfsc	status,2,c
  6981  002644  D005               	goto	l2906
  6982  002646  5001               	movf	___ftpack@arg,w,c
  6983  002648  1002               	iorwf	___ftpack@arg+1,w,c
  6984  00264A  1003               	iorwf	___ftpack@arg+2,w,c
  6985  00264C  A4D8               	btfss	status,2,c
  6986  00264E  D00E               	goto	l2912
  6987  002650                     l2906:
  6988  002650  0E00               	movlw	0
  6989  002652  6E01               	movwf	?___ftpack,c
  6990  002654  0E00               	movlw	0
  6991  002656  6E02               	movwf	?___ftpack+1,c
  6992  002658  0E00               	movlw	0
  6993  00265A  6E03               	movwf	?___ftpack+2,c
  6994  00265C  0012               	return	
  6995  00265E  D006               	goto	l2912
  6996  002660                     l2910:
  6997  002660  2A04               	incf	___ftpack@exp,f,c
  6998  002662  90D8               	bcf	status,0,c
  6999  002664  3203               	rrcf	___ftpack@arg+2,f,c
  7000  002666  3202               	rrcf	___ftpack@arg+1,f,c
  7001  002668  3201               	rrcf	___ftpack@arg,f,c
  7002  00266A  D000               	goto	l2912
  7003  00266C                     l2912:
  7004  00266C  0E00               	movlw	0
  7005  00266E  1401               	andwf	___ftpack@arg,w,c
  7006  002670  6E06               	movwf	??___ftpack& (0+255),c
  7007  002672  0E00               	movlw	0
  7008  002674  1402               	andwf	___ftpack@arg+1,w,c
  7009  002676  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7010  002678  0EFE               	movlw	254
  7011  00267A  1403               	andwf	___ftpack@arg+2,w,c
  7012  00267C  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7013  00267E  5006               	movf	??___ftpack,w,c
  7014  002680  1007               	iorwf	??___ftpack+1,w,c
  7015  002682  1008               	iorwf	??___ftpack+2,w,c
  7016  002684  B4D8               	btfsc	status,2,c
  7017  002686  D00E               	goto	l2918
  7018  002688  D7EB               	goto	l2910
  7019  00268A  D00C               	goto	l2918
  7020  00268C                     l2914:
  7021  00268C  2A04               	incf	___ftpack@exp,f,c
  7022  00268E  0E01               	movlw	1
  7023  002690  2601               	addwf	___ftpack@arg,f,c
  7024  002692  0E00               	movlw	0
  7025  002694  2202               	addwfc	___ftpack@arg+1,f,c
  7026  002696  0E00               	movlw	0
  7027  002698  2203               	addwfc	___ftpack@arg+2,f,c
  7028  00269A  90D8               	bcf	status,0,c
  7029  00269C  3203               	rrcf	___ftpack@arg+2,f,c
  7030  00269E  3202               	rrcf	___ftpack@arg+1,f,c
  7031  0026A0  3201               	rrcf	___ftpack@arg,f,c
  7032  0026A2  D000               	goto	l2918
  7033  0026A4                     l2918:
  7034  0026A4  0E00               	movlw	0
  7035  0026A6  1401               	andwf	___ftpack@arg,w,c
  7036  0026A8  6E06               	movwf	??___ftpack& (0+255),c
  7037  0026AA  0E00               	movlw	0
  7038  0026AC  1402               	andwf	___ftpack@arg+1,w,c
  7039  0026AE  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7040  0026B0  0EFF               	movlw	255
  7041  0026B2  1403               	andwf	___ftpack@arg+2,w,c
  7042  0026B4  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7043  0026B6  5006               	movf	??___ftpack,w,c
  7044  0026B8  1007               	iorwf	??___ftpack+1,w,c
  7045  0026BA  1008               	iorwf	??___ftpack+2,w,c
  7046  0026BC  B4D8               	btfsc	status,2,c
  7047  0026BE  D008               	goto	l2922
  7048  0026C0  D7E5               	goto	l2914
  7049  0026C2  D006               	goto	l2922
  7050  0026C4                     l2920:
  7051  0026C4  0604               	decf	___ftpack@exp,f,c
  7052  0026C6  90D8               	bcf	status,0,c
  7053  0026C8  3601               	rlcf	___ftpack@arg,f,c
  7054  0026CA  3602               	rlcf	___ftpack@arg+1,f,c
  7055  0026CC  3603               	rlcf	___ftpack@arg+2,f,c
  7056  0026CE  D000               	goto	l2922
  7057  0026D0                     l2922:
  7058  0026D0  BE02               	btfsc	___ftpack@arg+1,7,c
  7059  0026D2  D004               	goto	l1102
  7060  0026D4  0E02               	movlw	2
  7061  0026D6  6004               	cpfslt	___ftpack@exp,c
  7062  0026D8  D7F5               	goto	l2920
  7063  0026DA  D000               	goto	l1102
  7064  0026DC                     l1102:
  7065  0026DC  B004               	btfsc	___ftpack@exp,0,c
  7066  0026DE  D002               	goto	l2928
  7067  0026E0  9E02               	bcf	___ftpack@arg+1,7,c
  7068  0026E2  D000               	goto	l2928
  7069  0026E4                     l2928:
  7070  0026E4  90D8               	bcf	status,0,c
  7071  0026E6  3204               	rrcf	___ftpack@exp,f,c
  7072  0026E8  5004               	movf	___ftpack@exp,w,c
  7073  0026EA  1203               	iorwf	___ftpack@arg+2,f,c
  7074  0026EC  5005               	movf	___ftpack@sign,w,c
  7075  0026EE  B4D8               	btfsc	status,2,c
  7076  0026F0  D002               	goto	l2934
  7077  0026F2  8E03               	bsf	___ftpack@arg+2,7,c
  7078  0026F4  D000               	goto	l2934
  7079  0026F6                     l2934:
  7080  0026F6  C001  F001         	movff	___ftpack@arg,?___ftpack
  7081  0026FA  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  7082  0026FE  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  7083  002702  0012               	return	
  7084  002704  0012               	return		;funcret
  7085  002706                     __end_of___ftpack:
  7086                           	opt stack 0
  7087                           tblptru	equ	0xFF8
  7088                           tblptrh	equ	0xFF7
  7089                           tblptrl	equ	0xFF6
  7090                           tablat	equ	0xFF5
  7091                           prodh	equ	0xFF4
  7092                           prodl	equ	0xFF3
  7093                           indf0	equ	0xFEF
  7094                           postinc0	equ	0xFEE
  7095                           fsr0h	equ	0xFEA
  7096                           fsr0l	equ	0xFE9
  7097                           wreg	equ	0xFE8
  7098                           postdec1	equ	0xFE5
  7099                           fsr1l	equ	0xFE1
  7100                           indf2	equ	0xFDF
  7101                           postinc2	equ	0xFDE
  7102                           postdec2	equ	0xFDD
  7103                           fsr2h	equ	0xFDA
  7104                           fsr2l	equ	0xFD9
  7105                           status	equ	0xFD8
  7106                           
  7107 ;; *************** function _caratula *****************
  7108 ;; Defined at:
  7109 ;;		line 31 in file "main.c"
  7110 ;; Parameters:    Size  Location     Type
  7111 ;;		None
  7112 ;; Auto vars:     Size  Location     Type
  7113 ;;		None
  7114 ;; Return value:  Size  Location     Type
  7115 ;;		None               void
  7116 ;; Registers used:
  7117 ;;		wreg, status,2, status,0, cstack
  7118 ;; Tracked objects:
  7119 ;;		On entry : 0/0
  7120 ;;		On exit  : 0/0
  7121 ;;		Unchanged: 0/0
  7122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7126 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7127 ;;Total ram usage:        0 bytes
  7128 ;; Hardware stack levels used:    1
  7129 ;; Hardware stack levels required when called:    3
  7130 ;; This function calls:
  7131 ;;		_lcd_comand
  7132 ;; This function is called by:
  7133 ;;		_main
  7134 ;; This function uses a non-reentrant model
  7135 ;;
  7136                           
  7137                           	psect	text40
  7138  0030C0                     __ptext40:
  7139                           	opt stack 0
  7140  0030C0                     _caratula:
  7141                           	opt stack 27
  7142                           
  7143                           ;main.c: 33: lcd_comand(0b00001100);
  7144                           
  7145                           ;incstack = 0
  7146  0030C0  0E0C               	movlw	12
  7147  0030C2  EC52  F018         	call	_lcd_comand
  7148  0030C6  0012               	return		;funcret
  7149  0030C8                     __end_of_caratula:
  7150                           	opt stack 0
  7151                           tblptru	equ	0xFF8
  7152                           tblptrh	equ	0xFF7
  7153                           tblptrl	equ	0xFF6
  7154                           tablat	equ	0xFF5
  7155                           prodh	equ	0xFF4
  7156                           prodl	equ	0xFF3
  7157                           indf0	equ	0xFEF
  7158                           postinc0	equ	0xFEE
  7159                           fsr0h	equ	0xFEA
  7160                           fsr0l	equ	0xFE9
  7161                           wreg	equ	0xFE8
  7162                           postdec1	equ	0xFE5
  7163                           fsr1l	equ	0xFE1
  7164                           indf2	equ	0xFDF
  7165                           postinc2	equ	0xFDE
  7166                           postdec2	equ	0xFDD
  7167                           fsr2h	equ	0xFDA
  7168                           fsr2l	equ	0xFD9
  7169                           status	equ	0xFD8
  7170                           
  7171 ;; *************** function _Setup *****************
  7172 ;; Defined at:
  7173 ;;		line 51 in file "main.c"
  7174 ;; Parameters:    Size  Location     Type
  7175 ;;		None
  7176 ;; Auto vars:     Size  Location     Type
  7177 ;;		None
  7178 ;; Return value:  Size  Location     Type
  7179 ;;		None               void
  7180 ;; Registers used:
  7181 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7182 ;; Tracked objects:
  7183 ;;		On entry : 0/0
  7184 ;;		On exit  : 0/0
  7185 ;;		Unchanged: 0/0
  7186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7188 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7190 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7191 ;;Total ram usage:        0 bytes
  7192 ;; Hardware stack levels used:    1
  7193 ;; Hardware stack levels required when called:    3
  7194 ;; This function calls:
  7195 ;;		_Write_RTC
  7196 ;;		_lcd_comand
  7197 ;;		_lcd_init
  7198 ;; This function is called by:
  7199 ;;		_main
  7200 ;; This function uses a non-reentrant model
  7201 ;;
  7202                           
  7203                           	psect	text41
  7204  002E32                     __ptext41:
  7205                           	opt stack 0
  7206  002E32                     _Setup:
  7207                           	opt stack 27
  7208                           
  7209                           ;main.c: 53: OSCTUNEbits.INTSRC=1;
  7210                           
  7211                           ;incstack = 0
  7212  002E32  8E9B               	bsf	3995,7,c	;volatile
  7213                           
  7214                           ;main.c: 54: OSCTUNEbits.PLLEN=0;
  7215  002E34  9C9B               	bcf	3995,6,c	;volatile
  7216                           
  7217                           ;main.c: 55: OSCCONbits.IRCF0=1;
  7218  002E36  88D3               	bsf	4051,4,c	;volatile
  7219                           
  7220                           ;main.c: 56: OSCCONbits.IRCF1=1;
  7221  002E38  8AD3               	bsf	4051,5,c	;volatile
  7222                           
  7223                           ;main.c: 57: OSCCONbits.IRCF2=1;
  7224  002E3A  8CD3               	bsf	4051,6,c	;volatile
  7225                           
  7226                           ;main.c: 58: OSCCONbits.SCS0=0;
  7227  002E3C  90D3               	bcf	4051,0,c	;volatile
  7228                           
  7229                           ;main.c: 59: OSCCONbits.SCS1=0;
  7230  002E3E  92D3               	bcf	4051,1,c	;volatile
  7231                           
  7232                           ;main.c: 60: TRISA = 0b11110000;
  7233  002E40  0EF0               	movlw	240
  7234  002E42  6E92               	movwf	3986,c	;volatile
  7235                           
  7236                           ;main.c: 61: TRISB = 0;
  7237  002E44  0E00               	movlw	0
  7238  002E46  6E93               	movwf	3987,c	;volatile
  7239                           
  7240                           ;main.c: 62: TRISC = 0b0110111;
  7241  002E48  0E37               	movlw	55
  7242  002E4A  6E94               	movwf	3988,c	;volatile
  7243                           
  7244                           ;main.c: 66: ANCON0=0b11111111;
  7245  002E4C  010F               	movlb	15	; () banked
  7246  002E4E  6948               	setf	72,b	;volatile
  7247                           
  7248                           ; BSR set to: 15
  7249                           ;main.c: 68: ANCON1=0b11111111;
  7250  002E50  010F               	movlb	15	; () banked
  7251  002E52  6949               	setf	73,b	;volatile
  7252                           
  7253                           ;main.c: 69: ADCON0=0b00101101;
  7254  002E54  0E2D               	movlw	45
  7255  002E56  6EC2               	movwf	4034,c	;volatile
  7256                           
  7257                           ;main.c: 70: ADCON1=0b00010000;
  7258  002E58  0E10               	movlw	16
  7259  002E5A  6EC1               	movwf	4033,c	;volatile
  7260                           
  7261                           ; BSR set to: 15
  7262                           ;main.c: 71: RTCCFGbits.RTCEN=1;
  7263  002E5C  010F               	movlb	15	; () banked
  7264  002E5E  8F3F               	bsf	63,7,b	;volatile
  7265                           
  7266                           ; BSR set to: 15
  7267                           ;main.c: 72: RTCCFGbits.RTCWREN=1;
  7268  002E60  010F               	movlb	15	; () banked
  7269  002E62  8B3F               	bsf	63,5,b	;volatile
  7270                           
  7271                           ; BSR set to: 15
  7272                           ;main.c: 73: T1CONbits.T1OSCEN=1;
  7273  002E64  86CD               	bsf	4045,3,c	;volatile
  7274                           
  7275                           ; BSR set to: 15
  7276                           ;main.c: 74: Write_RTC();
  7277  002E66  EC1E  F00D         	call	_Write_RTC	;wreg free
  7278                           
  7279                           ;main.c: 75: lcd_init();
  7280  002E6A  EC62  F014         	call	_lcd_init	;wreg free
  7281                           
  7282                           ;main.c: 76: lcd_comand(0b00001100);
  7283  002E6E  0E0C               	movlw	12
  7284  002E70  EC52  F018         	call	_lcd_comand
  7285                           
  7286                           ;main.c: 77: LATBbits.LATB1 = 1;;
  7287  002E74  828A               	bsf	3978,1,c	;volatile
  7288                           
  7289                           ;main.c: 78: LATBbits.LATB0 = 1;;
  7290  002E76  808A               	bsf	3978,0,c	;volatile
  7291  002E78  0012               	return		;funcret
  7292  002E7A                     __end_of_Setup:
  7293                           	opt stack 0
  7294                           tblptru	equ	0xFF8
  7295                           tblptrh	equ	0xFF7
  7296                           tblptrl	equ	0xFF6
  7297                           tablat	equ	0xFF5
  7298                           prodh	equ	0xFF4
  7299                           prodl	equ	0xFF3
  7300                           indf0	equ	0xFEF
  7301                           postinc0	equ	0xFEE
  7302                           fsr0h	equ	0xFEA
  7303                           fsr0l	equ	0xFE9
  7304                           wreg	equ	0xFE8
  7305                           postdec1	equ	0xFE5
  7306                           fsr1l	equ	0xFE1
  7307                           indf2	equ	0xFDF
  7308                           postinc2	equ	0xFDE
  7309                           postdec2	equ	0xFDD
  7310                           fsr2h	equ	0xFDA
  7311                           fsr2l	equ	0xFD9
  7312                           status	equ	0xFD8
  7313                           
  7314 ;; *************** function _lcd_init *****************
  7315 ;; Defined at:
  7316 ;;		line 119 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  7317 ;; Parameters:    Size  Location     Type
  7318 ;;		None
  7319 ;; Auto vars:     Size  Location     Type
  7320 ;;  i               1    4[COMRAM] unsigned char 
  7321 ;; Return value:  Size  Location     Type
  7322 ;;		None               void
  7323 ;; Registers used:
  7324 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7325 ;; Tracked objects:
  7326 ;;		On entry : 0/0
  7327 ;;		On exit  : 0/0
  7328 ;;		Unchanged: 0/0
  7329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7331 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7333 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7334 ;;Total ram usage:        1 bytes
  7335 ;; Hardware stack levels used:    1
  7336 ;; Hardware stack levels required when called:    2
  7337 ;; This function calls:
  7338 ;;		_Delay1KTCYx
  7339 ;;		_lcd_send_byte
  7340 ;;		_lcd_send_nibble
  7341 ;; This function is called by:
  7342 ;;		_Setup
  7343 ;; This function uses a non-reentrant model
  7344 ;;
  7345                           
  7346                           	psect	text42
  7347  0028C4                     __ptext42:
  7348                           	opt stack 0
  7349  0028C4                     _lcd_init:
  7350                           	opt stack 27
  7351                           
  7352                           ;unmc_lcd_216.c: 120: int8 i;
  7353                           ;unmc_lcd_216.c: 122: TRISBbits.TRISB3=0;
  7354                           
  7355                           ;incstack = 0
  7356  0028C4  9693               	bcf	3987,3,c	;volatile
  7357                           
  7358                           ;unmc_lcd_216.c: 123: TRISBbits.TRISB2=0;
  7359  0028C6  9493               	bcf	3987,2,c	;volatile
  7360                           
  7361                           ;unmc_lcd_216.c: 128: LATBbits.LATB3=0;
  7362  0028C8  968A               	bcf	3978,3,c	;volatile
  7363                           
  7364                           ;unmc_lcd_216.c: 129: LATBbits.LATB2=0;
  7365  0028CA  948A               	bcf	3978,2,c	;volatile
  7366                           
  7367                           ;unmc_lcd_216.c: 134: TRISBbits.TRISB4=0;
  7368  0028CC  9893               	bcf	3987,4,c	;volatile
  7369                           
  7370                           ;unmc_lcd_216.c: 135: TRISBbits.TRISB5=0;
  7371  0028CE  9A93               	bcf	3987,5,c	;volatile
  7372                           
  7373                           ;unmc_lcd_216.c: 136: TRISBbits.TRISB6=0;
  7374  0028D0  9C93               	bcf	3987,6,c	;volatile
  7375                           
  7376                           ;unmc_lcd_216.c: 137: TRISBbits.TRISB7=0;
  7377  0028D2  9E93               	bcf	3987,7,c	;volatile
  7378                           
  7379                           ;unmc_lcd_216.c: 139: Delay1KTCYx(8000000UL/800000UL);
  7380  0028D4  0E0A               	movlw	10
  7381  0028D6  EC37  F018         	call	_Delay1KTCYx
  7382                           
  7383                           ;unmc_lcd_216.c: 140: Delay1KTCYx(8000000UL/800000UL);
  7384  0028DA  0E0A               	movlw	10
  7385  0028DC  EC37  F018         	call	_Delay1KTCYx
  7386                           
  7387                           ;unmc_lcd_216.c: 141: Delay1KTCYx(8000000UL/800000UL);
  7388  0028E0  0E0A               	movlw	10
  7389  0028E2  EC37  F018         	call	_Delay1KTCYx
  7390                           
  7391                           ;unmc_lcd_216.c: 143: for(i=0 ;i < 3; i++){
  7392  0028E6  0E00               	movlw	0
  7393  0028E8  6E05               	movwf	lcd_init@i,c
  7394  0028EA                     l3874:
  7395  0028EA  0E02               	movlw	2
  7396  0028EC  6405               	cpfsgt	lcd_init@i,c
  7397  0028EE  D001               	goto	l3878
  7398  0028F0  D008               	goto	l3884
  7399  0028F2                     l3878:
  7400                           
  7401                           ;unmc_lcd_216.c: 144: lcd_send_nibble(0x03);
  7402  0028F2  0E03               	movlw	3
  7403  0028F4  EC5D  F015         	call	_lcd_send_nibble
  7404                           
  7405                           ;unmc_lcd_216.c: 145: Delay1KTCYx(8000000UL/800000UL);
  7406  0028F8  0E0A               	movlw	10
  7407  0028FA  EC37  F018         	call	_Delay1KTCYx
  7408  0028FE  2A05               	incf	lcd_init@i,f,c
  7409  002900  D7F4               	goto	l3874
  7410  002902                     l3884:
  7411                           
  7412                           ;unmc_lcd_216.c: 146: }
  7413                           ;unmc_lcd_216.c: 148: lcd_send_nibble(0x02);
  7414  002902  0E02               	movlw	2
  7415  002904  EC5D  F015         	call	_lcd_send_nibble
  7416                           
  7417                           ;unmc_lcd_216.c: 150: for(i=0; i < sizeof(LCD_INIT_STRING); i++){
  7418  002908  0E00               	movlw	0
  7419  00290A  6E05               	movwf	lcd_init@i,c
  7420  00290C  0E03               	movlw	3
  7421  00290E  6405               	cpfsgt	lcd_init@i,c
  7422  002910  D002               	goto	l3892
  7423  002912  0012               	return	
  7424  002914  0012               	return	
  7425  002916                     l3892:
  7426                           
  7427                           ;unmc_lcd_216.c: 151: lcd_send_byte(0, LCD_INIT_STRING[i]);
  7428  002916  5005               	movf	lcd_init@i,w,c
  7429  002918  0D01               	mullw	1
  7430  00291A  0E0B               	movlw	low _LCD_INIT_STRING
  7431  00291C  24F3               	addwf	prodl,w,c
  7432  00291E  6EF6               	movwf	tblptrl,c
  7433  002920  0E0F               	movlw	high _LCD_INIT_STRING
  7434  002922  20F4               	addwfc	prodh,w,c
  7435  002924  6EF7               	movwf	tblptrh,c
  7436  002926                     	if	0	;There are less than 3 active tblptr bytes
  7437  002926                     	endif
  7438  002926  0008               	tblrd		*
  7439  002928  CFF5 F003          	movff	tablat,lcd_send_byte@n
  7440  00292C  0E00               	movlw	0
  7441  00292E  EC7D  F017         	call	_lcd_send_byte
  7442                           
  7443                           ;unmc_lcd_216.c: 153: Delay1KTCYx(8000000UL/800000UL);
  7444  002932  0E0A               	movlw	10
  7445  002934  EC37  F018         	call	_Delay1KTCYx
  7446  002938  2A05               	incf	lcd_init@i,f,c
  7447  00293A  0E03               	movlw	3
  7448  00293C  6405               	cpfsgt	lcd_init@i,c
  7449  00293E  D7EB               	goto	l3892
  7450  002940  0012               	return	
  7451  002942  0012               	return		;funcret
  7452  002944                     __end_of_lcd_init:
  7453                           	opt stack 0
  7454                           tblptru	equ	0xFF8
  7455                           tblptrh	equ	0xFF7
  7456                           tblptrl	equ	0xFF6
  7457                           tablat	equ	0xFF5
  7458                           prodh	equ	0xFF4
  7459                           prodl	equ	0xFF3
  7460                           indf0	equ	0xFEF
  7461                           postinc0	equ	0xFEE
  7462                           fsr0h	equ	0xFEA
  7463                           fsr0l	equ	0xFE9
  7464                           wreg	equ	0xFE8
  7465                           postdec1	equ	0xFE5
  7466                           fsr1l	equ	0xFE1
  7467                           indf2	equ	0xFDF
  7468                           postinc2	equ	0xFDE
  7469                           postdec2	equ	0xFDD
  7470                           fsr2h	equ	0xFDA
  7471                           fsr2l	equ	0xFD9
  7472                           status	equ	0xFD8
  7473                           
  7474 ;; *************** function _Delay1KTCYx *****************
  7475 ;; Defined at:
  7476 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\d1ktcyx.c"
  7477 ;; Parameters:    Size  Location     Type
  7478 ;;  unit            1    wreg     unsigned char 
  7479 ;; Auto vars:     Size  Location     Type
  7480 ;;  unit            1    0[COMRAM] unsigned char 
  7481 ;; Return value:  Size  Location     Type
  7482 ;;		None               void
  7483 ;; Registers used:
  7484 ;;		wreg
  7485 ;; Tracked objects:
  7486 ;;		On entry : 0/0
  7487 ;;		On exit  : 0/0
  7488 ;;		Unchanged: 0/0
  7489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7491 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7493 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7494 ;;Total ram usage:        1 bytes
  7495 ;; Hardware stack levels used:    1
  7496 ;; This function calls:
  7497 ;;		Nothing
  7498 ;; This function is called by:
  7499 ;;		_lcd_init
  7500 ;;		_DelayPORXLCD
  7501 ;; This function uses a non-reentrant model
  7502 ;;
  7503                           
  7504                           	psect	text43
  7505  00306E                     __ptext43:
  7506                           	opt stack 0
  7507  00306E                     _Delay1KTCYx:
  7508                           	opt stack 28
  7509                           
  7510                           ;incstack = 0
  7511                           ;Delay1KTCYx@unit stored from wreg
  7512  00306E  6E01               	movwf	Delay1KTCYx@unit,c
  7513  003070  0EFA               	movlw	250
  7514  003072                     u4397:
  7515  003072  F000               	nop	
  7516  003074  2EE8               	decfsz	wreg,f,c
  7517  003076  D7FD               	goto	u4397
  7518  003078  2E01               	decfsz	Delay1KTCYx@unit,f,c
  7519  00307A  D7FA               	goto	l2214
  7520  00307C  0012               	return	
  7521  00307E  0012               	return		;funcret
  7522  003080                     __end_of_Delay1KTCYx:
  7523                           	opt stack 0
  7524                           tblptru	equ	0xFF8
  7525                           tblptrh	equ	0xFF7
  7526                           tblptrl	equ	0xFF6
  7527                           tablat	equ	0xFF5
  7528                           prodh	equ	0xFF4
  7529                           prodl	equ	0xFF3
  7530                           indf0	equ	0xFEF
  7531                           postinc0	equ	0xFEE
  7532                           fsr0h	equ	0xFEA
  7533                           fsr0l	equ	0xFE9
  7534                           wreg	equ	0xFE8
  7535                           postdec1	equ	0xFE5
  7536                           fsr1l	equ	0xFE1
  7537                           indf2	equ	0xFDF
  7538                           postinc2	equ	0xFDE
  7539                           postdec2	equ	0xFDD
  7540                           fsr2h	equ	0xFDA
  7541                           fsr2l	equ	0xFD9
  7542                           status	equ	0xFD8
  7543                           
  7544 ;; *************** function _lcd_comand *****************
  7545 ;; Defined at:
  7546 ;;		line 189 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  7547 ;; Parameters:    Size  Location     Type
  7548 ;;  d               1    wreg     unsigned char 
  7549 ;; Auto vars:     Size  Location     Type
  7550 ;;  d               1    4[COMRAM] unsigned char 
  7551 ;; Return value:  Size  Location     Type
  7552 ;;		None               void
  7553 ;; Registers used:
  7554 ;;		wreg, status,2, status,0, cstack
  7555 ;; Tracked objects:
  7556 ;;		On entry : 0/0
  7557 ;;		On exit  : 0/0
  7558 ;;		Unchanged: 0/0
  7559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7561 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7563 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7564 ;;Total ram usage:        1 bytes
  7565 ;; Hardware stack levels used:    1
  7566 ;; Hardware stack levels required when called:    2
  7567 ;; This function calls:
  7568 ;;		_lcd_send_byte
  7569 ;; This function is called by:
  7570 ;;		_caratula
  7571 ;;		_Setup
  7572 ;;		_clear
  7573 ;; This function uses a non-reentrant model
  7574 ;;
  7575                           
  7576                           	psect	text44
  7577  0030A4                     __ptext44:
  7578                           	opt stack 0
  7579  0030A4                     _lcd_comand:
  7580                           	opt stack 26
  7581                           
  7582                           ;incstack = 0
  7583                           ;lcd_comand@d stored from wreg
  7584  0030A4  6E05               	movwf	lcd_comand@d,c
  7585                           
  7586                           ;unmc_lcd_216.c: 190: lcd_send_byte(0,d);
  7587  0030A6  C005  F003         	movff	lcd_comand@d,lcd_send_byte@n
  7588  0030AA  0E00               	movlw	0
  7589  0030AC  EC7D  F017         	call	_lcd_send_byte
  7590  0030B0  0012               	return		;funcret
  7591  0030B2                     __end_of_lcd_comand:
  7592                           	opt stack 0
  7593                           tblptru	equ	0xFF8
  7594                           tblptrh	equ	0xFF7
  7595                           tblptrl	equ	0xFF6
  7596                           tablat	equ	0xFF5
  7597                           prodh	equ	0xFF4
  7598                           prodl	equ	0xFF3
  7599                           indf0	equ	0xFEF
  7600                           postinc0	equ	0xFEE
  7601                           fsr0h	equ	0xFEA
  7602                           fsr0l	equ	0xFE9
  7603                           wreg	equ	0xFE8
  7604                           postdec1	equ	0xFE5
  7605                           fsr1l	equ	0xFE1
  7606                           indf2	equ	0xFDF
  7607                           postinc2	equ	0xFDE
  7608                           postdec2	equ	0xFDD
  7609                           fsr2h	equ	0xFDA
  7610                           fsr2l	equ	0xFD9
  7611                           status	equ	0xFD8
  7612                           
  7613 ;; *************** function _lcd_send_byte *****************
  7614 ;; Defined at:
  7615 ;;		line 86 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  7616 ;; Parameters:    Size  Location     Type
  7617 ;;  address         1    wreg     unsigned char 
  7618 ;;  n               1    2[COMRAM] unsigned char 
  7619 ;; Auto vars:     Size  Location     Type
  7620 ;;  address         1    3[COMRAM] unsigned char 
  7621 ;; Return value:  Size  Location     Type
  7622 ;;		None               void
  7623 ;; Registers used:
  7624 ;;		wreg, status,2, status,0, cstack
  7625 ;; Tracked objects:
  7626 ;;		On entry : 0/0
  7627 ;;		On exit  : 0/0
  7628 ;;		Unchanged: 0/0
  7629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7630 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7631 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7633 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7634 ;;Total ram usage:        2 bytes
  7635 ;; Hardware stack levels used:    1
  7636 ;; Hardware stack levels required when called:    1
  7637 ;; This function calls:
  7638 ;;		_Delay100TCYx
  7639 ;;		_lcd_send_nibble
  7640 ;; This function is called by:
  7641 ;;		_lcd_init
  7642 ;;		_lcd_gotoxy
  7643 ;;		_lcd_putc
  7644 ;;		_lcd_comand
  7645 ;;		_lcd_setcursor_vb
  7646 ;; This function uses a non-reentrant model
  7647 ;;
  7648                           
  7649                           	psect	text45
  7650  002EFA                     __ptext45:
  7651                           	opt stack 0
  7652  002EFA                     _lcd_send_byte:
  7653                           	opt stack 25
  7654                           
  7655                           ;incstack = 0
  7656                           ;lcd_send_byte@address stored from wreg
  7657  002EFA  6E04               	movwf	lcd_send_byte@address,c
  7658                           
  7659                           ;unmc_lcd_216.c: 88: LATBbits.LATB3=0;
  7660  002EFC  968A               	bcf	3978,3,c	;volatile
  7661                           
  7662                           ;unmc_lcd_216.c: 93: Delay100TCYx(8000000UL/4000000UL);
  7663  002EFE  0E02               	movlw	2
  7664  002F00  EC40  F018         	call	_Delay100TCYx
  7665                           
  7666                           ;unmc_lcd_216.c: 96: TRISBbits.TRISB4=0;
  7667  002F04  9893               	bcf	3987,4,c	;volatile
  7668                           
  7669                           ;unmc_lcd_216.c: 97: TRISBbits.TRISB5=0;
  7670  002F06  9A93               	bcf	3987,5,c	;volatile
  7671                           
  7672                           ;unmc_lcd_216.c: 98: TRISBbits.TRISB6=0;
  7673  002F08  9C93               	bcf	3987,6,c	;volatile
  7674                           
  7675                           ;unmc_lcd_216.c: 99: TRISBbits.TRISB7=0;
  7676  002F0A  9E93               	bcf	3987,7,c	;volatile
  7677                           
  7678                           ;unmc_lcd_216.c: 101: if(address)
  7679  002F0C  5004               	movf	lcd_send_byte@address,w,c
  7680  002F0E  B4D8               	btfsc	status,2,c
  7681  002F10  D002               	goto	l75
  7682                           
  7683                           ;unmc_lcd_216.c: 102: LATBbits.LATB3=1;
  7684  002F12  868A               	bsf	3978,3,c	;volatile
  7685  002F14  D001               	goto	l76
  7686  002F16                     l75:
  7687                           
  7688                           ;unmc_lcd_216.c: 103: else
  7689                           ;unmc_lcd_216.c: 104: LATBbits.LATB3=0;
  7690  002F16  968A               	bcf	3978,3,c	;volatile
  7691  002F18                     l76:
  7692                           
  7693                           ;unmc_lcd_216.c: 106: __nop();
  7694  002F18  F000               	nop	
  7695                           
  7696                           ;unmc_lcd_216.c: 113: lcd_send_nibble(n >> 4);
  7697  002F1A  3803               	swapf	lcd_send_byte@n,w,c
  7698  002F1C  0B0F               	andlw	15
  7699  002F1E  EC5D  F015         	call	_lcd_send_nibble
  7700                           
  7701                           ;unmc_lcd_216.c: 114: lcd_send_nibble(n & 0xf);
  7702  002F22  5003               	movf	lcd_send_byte@n,w,c
  7703  002F24  0B0F               	andlw	15
  7704  002F26  EC5D  F015         	call	_lcd_send_nibble
  7705  002F2A  0012               	return		;funcret
  7706  002F2C                     __end_of_lcd_send_byte:
  7707                           	opt stack 0
  7708                           tblptru	equ	0xFF8
  7709                           tblptrh	equ	0xFF7
  7710                           tblptrl	equ	0xFF6
  7711                           tablat	equ	0xFF5
  7712                           prodh	equ	0xFF4
  7713                           prodl	equ	0xFF3
  7714                           indf0	equ	0xFEF
  7715                           postinc0	equ	0xFEE
  7716                           fsr0h	equ	0xFEA
  7717                           fsr0l	equ	0xFE9
  7718                           wreg	equ	0xFE8
  7719                           postdec1	equ	0xFE5
  7720                           fsr1l	equ	0xFE1
  7721                           indf2	equ	0xFDF
  7722                           postinc2	equ	0xFDE
  7723                           postdec2	equ	0xFDD
  7724                           fsr2h	equ	0xFDA
  7725                           fsr2l	equ	0xFD9
  7726                           status	equ	0xFD8
  7727                           
  7728 ;; *************** function _lcd_send_nibble *****************
  7729 ;; Defined at:
  7730 ;;		line 25 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  7731 ;; Parameters:    Size  Location     Type
  7732 ;;  nibble          1    wreg     unsigned char 
  7733 ;; Auto vars:     Size  Location     Type
  7734 ;;  nibble          1    1[COMRAM] unsigned char 
  7735 ;; Return value:  Size  Location     Type
  7736 ;;		None               void
  7737 ;; Registers used:
  7738 ;;		wreg, status,2, status,0
  7739 ;; Tracked objects:
  7740 ;;		On entry : 0/0
  7741 ;;		On exit  : 0/0
  7742 ;;		Unchanged: 0/0
  7743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7745 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7746 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7747 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7748 ;;Total ram usage:        2 bytes
  7749 ;; Hardware stack levels used:    1
  7750 ;; This function calls:
  7751 ;;		Nothing
  7752 ;; This function is called by:
  7753 ;;		_lcd_send_byte
  7754 ;;		_lcd_init
  7755 ;; This function uses a non-reentrant model
  7756 ;;
  7757                           
  7758                           	psect	text46
  7759  002ABA                     __ptext46:
  7760                           	opt stack 0
  7761  002ABA                     _lcd_send_nibble:
  7762                           	opt stack 25
  7763                           
  7764                           ;incstack = 0
  7765                           ;lcd_send_nibble@nibble stored from wreg
  7766  002ABA  6E02               	movwf	lcd_send_nibble@nibble,c
  7767                           
  7768                           ;unmc_lcd_216.c: 27: LATBbits.LATB4=!!(nibble & 0x01);
  7769  002ABC  A002               	btfss	lcd_send_nibble@nibble,0,c
  7770  002ABE  D003               	goto	u2170
  7771  002AC0  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  7772  002AC2  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  7773  002AC4  D001               	goto	u2188
  7774  002AC6                     u2170:
  7775  002AC6  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  7776  002AC8                     u2188:
  7777  002AC8  3A01               	swapf	??_lcd_send_nibble,f,c
  7778  002ACA  508A               	movf	3978,w,c	;volatile
  7779  002ACC  1801               	xorwf	??_lcd_send_nibble,w,c
  7780  002ACE  0BEF               	andlw	-17
  7781  002AD0  1801               	xorwf	??_lcd_send_nibble,w,c
  7782  002AD2  6E8A               	movwf	3978,c	;volatile
  7783                           
  7784                           ;unmc_lcd_216.c: 28: LATBbits.LATB5=!!(nibble & 0x02);
  7785  002AD4  A202               	btfss	lcd_send_nibble@nibble,1,c
  7786  002AD6  D003               	goto	u2190
  7787  002AD8  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  7788  002ADA  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  7789  002ADC  D001               	goto	u2208
  7790  002ADE                     u2190:
  7791  002ADE  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  7792  002AE0                     u2208:
  7793  002AE0  3A01               	swapf	??_lcd_send_nibble,f,c
  7794  002AE2  4601               	rlncf	??_lcd_send_nibble,f,c
  7795  002AE4  508A               	movf	3978,w,c	;volatile
  7796  002AE6  1801               	xorwf	??_lcd_send_nibble,w,c
  7797  002AE8  0BDF               	andlw	-33
  7798  002AEA  1801               	xorwf	??_lcd_send_nibble,w,c
  7799  002AEC  6E8A               	movwf	3978,c	;volatile
  7800                           
  7801                           ;unmc_lcd_216.c: 29: LATBbits.LATB6=!!(nibble & 0x04);
  7802  002AEE  A402               	btfss	lcd_send_nibble@nibble,2,c
  7803  002AF0  D003               	goto	u2210
  7804  002AF2  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  7805  002AF4  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  7806  002AF6  D001               	goto	u2228
  7807  002AF8                     u2210:
  7808  002AF8  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  7809  002AFA                     u2228:
  7810  002AFA  3A01               	swapf	??_lcd_send_nibble,f,c
  7811  002AFC  4601               	rlncf	??_lcd_send_nibble,f,c
  7812  002AFE  4601               	rlncf	??_lcd_send_nibble,f,c
  7813  002B00  508A               	movf	3978,w,c	;volatile
  7814  002B02  1801               	xorwf	??_lcd_send_nibble,w,c
  7815  002B04  0BBF               	andlw	-65
  7816  002B06  1801               	xorwf	??_lcd_send_nibble,w,c
  7817  002B08  6E8A               	movwf	3978,c	;volatile
  7818                           
  7819                           ;unmc_lcd_216.c: 30: LATBbits.LATB7=!!(nibble & 0x08);
  7820  002B0A  A602               	btfss	lcd_send_nibble@nibble,3,c
  7821  002B0C  D003               	goto	u2230
  7822  002B0E  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  7823  002B10  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  7824  002B12  D001               	goto	u2248
  7825  002B14                     u2230:
  7826  002B14  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  7827  002B16                     u2248:
  7828  002B16  3201               	rrcf	??_lcd_send_nibble,f,c
  7829  002B18  3201               	rrcf	??_lcd_send_nibble,f,c
  7830  002B1A  508A               	movf	3978,w,c	;volatile
  7831  002B1C  1801               	xorwf	??_lcd_send_nibble,w,c
  7832  002B1E  0B7F               	andlw	-129
  7833  002B20  1801               	xorwf	??_lcd_send_nibble,w,c
  7834  002B22  6E8A               	movwf	3978,c	;volatile
  7835                           
  7836                           ;unmc_lcd_216.c: 32: __nop();
  7837  002B24  F000               	nop	
  7838                           
  7839                           ;unmc_lcd_216.c: 33: LATBbits.LATB2=1;
  7840  002B26  848A               	bsf	3978,2,c	;volatile
  7841                           
  7842                           ;unmc_lcd_216.c: 34: __nop();__nop();
  7843  002B28  F000               	nop	
  7844  002B2A  F000               	nop	
  7845                           
  7846                           ;unmc_lcd_216.c: 35: LATBbits.LATB2=0;
  7847  002B2C  948A               	bcf	3978,2,c	;volatile
  7848  002B2E  0012               	return		;funcret
  7849  002B30                     __end_of_lcd_send_nibble:
  7850                           	opt stack 0
  7851                           tblptru	equ	0xFF8
  7852                           tblptrh	equ	0xFF7
  7853                           tblptrl	equ	0xFF6
  7854                           tablat	equ	0xFF5
  7855                           prodh	equ	0xFF4
  7856                           prodl	equ	0xFF3
  7857                           indf0	equ	0xFEF
  7858                           postinc0	equ	0xFEE
  7859                           fsr0h	equ	0xFEA
  7860                           fsr0l	equ	0xFE9
  7861                           wreg	equ	0xFE8
  7862                           postdec1	equ	0xFE5
  7863                           fsr1l	equ	0xFE1
  7864                           indf2	equ	0xFDF
  7865                           postinc2	equ	0xFDE
  7866                           postdec2	equ	0xFDD
  7867                           fsr2h	equ	0xFDA
  7868                           fsr2l	equ	0xFD9
  7869                           status	equ	0xFD8
  7870                           
  7871 ;; *************** function _Delay100TCYx *****************
  7872 ;; Defined at:
  7873 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\d100tcyx.c"
  7874 ;; Parameters:    Size  Location     Type
  7875 ;;  unit            1    wreg     unsigned char 
  7876 ;; Auto vars:     Size  Location     Type
  7877 ;;  unit            1    0[COMRAM] unsigned char 
  7878 ;; Return value:  Size  Location     Type
  7879 ;;		None               void
  7880 ;; Registers used:
  7881 ;;		wreg
  7882 ;; Tracked objects:
  7883 ;;		On entry : 0/0
  7884 ;;		On exit  : 0/0
  7885 ;;		Unchanged: 0/0
  7886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7888 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7890 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7891 ;;Total ram usage:        1 bytes
  7892 ;; Hardware stack levels used:    1
  7893 ;; This function calls:
  7894 ;;		Nothing
  7895 ;; This function is called by:
  7896 ;;		_lcd_send_byte
  7897 ;; This function uses a non-reentrant model
  7898 ;;
  7899                           
  7900                           	psect	text47
  7901  003080                     __ptext47:
  7902                           	opt stack 0
  7903  003080                     _Delay100TCYx:
  7904                           	opt stack 25
  7905                           
  7906                           ;incstack = 0
  7907                           ;Delay100TCYx@unit stored from wreg
  7908  003080  6E01               	movwf	Delay100TCYx@unit,c
  7909  003082  0E21               	movlw	33
  7910  003084                     u4407:
  7911  003084  2EE8               	decfsz	wreg,f,c
  7912  003086  D7FE               	goto	u4407
  7913  003088  F000               	nop	
  7914  00308A  2E01               	decfsz	Delay100TCYx@unit,f,c
  7915  00308C  D7FA               	goto	l2870
  7916  00308E  0012               	return	
  7917  003090  0012               	return		;funcret
  7918  003092                     __end_of_Delay100TCYx:
  7919                           	opt stack 0
  7920                           tblptru	equ	0xFF8
  7921                           tblptrh	equ	0xFF7
  7922                           tblptrl	equ	0xFF6
  7923                           tablat	equ	0xFF5
  7924                           prodh	equ	0xFF4
  7925                           prodl	equ	0xFF3
  7926                           indf0	equ	0xFEF
  7927                           postinc0	equ	0xFEE
  7928                           fsr0h	equ	0xFEA
  7929                           fsr0l	equ	0xFE9
  7930                           wreg	equ	0xFE8
  7931                           postdec1	equ	0xFE5
  7932                           fsr1l	equ	0xFE1
  7933                           indf2	equ	0xFDF
  7934                           postinc2	equ	0xFDE
  7935                           postdec2	equ	0xFDD
  7936                           fsr2h	equ	0xFDA
  7937                           fsr2l	equ	0xFD9
  7938                           status	equ	0xFD8
  7939                           
  7940 ;; *************** function _Write_RTC *****************
  7941 ;; Defined at:
  7942 ;;		line 22 in file "../../Program Files/Unimic/unmc_01/sources/unmc_rtcc_01.c"
  7943 ;; Parameters:    Size  Location     Type
  7944 ;;		None
  7945 ;; Auto vars:     Size  Location     Type
  7946 ;;		None
  7947 ;; Return value:  Size  Location     Type
  7948 ;;                  2   26[None  ] int 
  7949 ;; Registers used:
  7950 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7951 ;; Tracked objects:
  7952 ;;		On entry : 0/0
  7953 ;;		On exit  : 0/0
  7954 ;;		Unchanged: 0/0
  7955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7959 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7960 ;;Total ram usage:        0 bytes
  7961 ;; Hardware stack levels used:    1
  7962 ;; Hardware stack levels required when called:    2
  7963 ;; This function calls:
  7964 ;;		_RtccWrOn
  7965 ;;		_RtccWriteDate
  7966 ;;		_RtccWriteTime
  7967 ;;		___awdiv
  7968 ;; This function is called by:
  7969 ;;		_Setup
  7970 ;;		_setClock
  7971 ;; This function uses a non-reentrant model
  7972 ;;
  7973                           
  7974                           	psect	text48
  7975  001A3C                     __ptext48:
  7976                           	opt stack 0
  7977  001A3C                     _Write_RTC:
  7978                           	opt stack 27
  7979                           
  7980                           ;unmc_rtcc_01.c: 24: RtccWrOn();
  7981                           
  7982                           ;incstack = 0
  7983  001A3C  EC49  F018         	call	_RtccWrOn	;wreg free
  7984                           
  7985                           ;unmc_rtcc_01.c: 26: PIE3bits.RTCCIE=1;
  7986  001A40  80A3               	bsf	4003,0,c	;volatile
  7987                           
  7988                           ;unmc_rtcc_01.c: 27: segundo_d=segundo/10;
  7989  001A42  C08A  F001         	movff	_segundo,___awdiv@dividend
  7990  001A46  C08B  F002         	movff	_segundo+1,___awdiv@dividend+1
  7991  001A4A  0E00               	movlw	0
  7992  001A4C  6E04               	movwf	___awdiv@divisor+1,c
  7993  001A4E  0E0A               	movlw	10
  7994  001A50  6E03               	movwf	___awdiv@divisor,c
  7995  001A52  ECCE  F013         	call	___awdiv	;wreg free
  7996  001A56  5001               	movf	?___awdiv,w,c
  7997  001A58  0100               	movlb	0	; () banked
  7998  001A5A  6FC9               	movwf	_segundo_d& (0+255),b
  7999                           
  8000                           ; BSR set to: 0
  8001                           ;unmc_rtcc_01.c: 28: segundo_u=segundo-segundo_d*10;
  8002  001A5C  0100               	movlb	0	; () banked
  8003  001A5E  51C9               	movf	_segundo_d& (0+255),w,b
  8004  001A60  0D0A               	mullw	10
  8005  001A62  50F3               	movf	prodl,w,c
  8006  001A64  0800               	sublw	0
  8007  001A66  0100               	movlb	0	; () banked
  8008  001A68  258A               	addwf	_segundo& (0+255),w,b
  8009  001A6A  0100               	movlb	0	; () banked
  8010  001A6C  6FCA               	movwf	_segundo_u& (0+255),b
  8011                           
  8012                           ; BSR set to: 0
  8013                           ;unmc_rtcc_01.c: 29: RtccTime.f.sec =segundo_d*16+segundo_u;
  8014  001A6E  0100               	movlb	0	; () banked
  8015  001A70  51C9               	movf	_segundo_d& (0+255),w,b
  8016  001A72  0D10               	mullw	16
  8017  001A74  50F3               	movf	prodl,w,c
  8018  001A76  0100               	movlb	0	; () banked
  8019  001A78  25CA               	addwf	_segundo_u& (0+255),w,b
  8020  001A7A  0100               	movlb	0	; () banked
  8021  001A7C  6FA5               	movwf	(_RtccTime+1)& (0+255),b
  8022                           
  8023                           ; BSR set to: 0
  8024                           ;unmc_rtcc_01.c: 30: minuto_d=minuto/10;
  8025  001A7E  C0D3  F001         	movff	_minuto,___awdiv@dividend
  8026  001A82  C0D4  F002         	movff	_minuto+1,___awdiv@dividend+1
  8027  001A86  0E00               	movlw	0
  8028  001A88  6E04               	movwf	___awdiv@divisor+1,c
  8029  001A8A  0E0A               	movlw	10
  8030  001A8C  6E03               	movwf	___awdiv@divisor,c
  8031  001A8E  ECCE  F013         	call	___awdiv	;wreg free
  8032  001A92  5001               	movf	?___awdiv,w,c
  8033  001A94  0100               	movlb	0	; () banked
  8034  001A96  6FC7               	movwf	_minuto_d& (0+255),b
  8035                           
  8036                           ; BSR set to: 0
  8037                           ;unmc_rtcc_01.c: 31: minuto_u=minuto-minuto_d*10;
  8038  001A98  0100               	movlb	0	; () banked
  8039  001A9A  51C7               	movf	_minuto_d& (0+255),w,b
  8040  001A9C  0D0A               	mullw	10
  8041  001A9E  50F3               	movf	prodl,w,c
  8042  001AA0  0800               	sublw	0
  8043  001AA2  0100               	movlb	0	; () banked
  8044  001AA4  25D3               	addwf	_minuto& (0+255),w,b
  8045  001AA6  0100               	movlb	0	; () banked
  8046  001AA8  6FC8               	movwf	_minuto_u& (0+255),b
  8047                           
  8048                           ; BSR set to: 0
  8049                           ;unmc_rtcc_01.c: 32: RtccTime.f.min =minuto_d*16+minuto_u;
  8050  001AAA  0100               	movlb	0	; () banked
  8051  001AAC  51C7               	movf	_minuto_d& (0+255),w,b
  8052  001AAE  0D10               	mullw	16
  8053  001AB0  50F3               	movf	prodl,w,c
  8054  001AB2  0100               	movlb	0	; () banked
  8055  001AB4  25C8               	addwf	_minuto_u& (0+255),w,b
  8056  001AB6  0100               	movlb	0	; () banked
  8057  001AB8  6FA6               	movwf	(_RtccTime+2)& (0+255),b
  8058                           
  8059                           ; BSR set to: 0
  8060                           ;unmc_rtcc_01.c: 33: hora_d=hora/10;
  8061  001ABA  C0D1  F001         	movff	_hora,___awdiv@dividend
  8062  001ABE  C0D2  F002         	movff	_hora+1,___awdiv@dividend+1
  8063  001AC2  0E00               	movlw	0
  8064  001AC4  6E04               	movwf	___awdiv@divisor+1,c
  8065  001AC6  0E0A               	movlw	10
  8066  001AC8  6E03               	movwf	___awdiv@divisor,c
  8067  001ACA  ECCE  F013         	call	___awdiv	;wreg free
  8068  001ACE  5001               	movf	?___awdiv,w,c
  8069  001AD0  0100               	movlb	0	; () banked
  8070  001AD2  6FC3               	movwf	_hora_d& (0+255),b
  8071                           
  8072                           ; BSR set to: 0
  8073                           ;unmc_rtcc_01.c: 34: hora_u=hora-hora_d*10;
  8074  001AD4  0100               	movlb	0	; () banked
  8075  001AD6  51C3               	movf	_hora_d& (0+255),w,b
  8076  001AD8  0D0A               	mullw	10
  8077  001ADA  50F3               	movf	prodl,w,c
  8078  001ADC  0800               	sublw	0
  8079  001ADE  0100               	movlb	0	; () banked
  8080  001AE0  25D1               	addwf	_hora& (0+255),w,b
  8081  001AE2  0100               	movlb	0	; () banked
  8082  001AE4  6FC4               	movwf	_hora_u& (0+255),b
  8083                           
  8084                           ; BSR set to: 0
  8085                           ;unmc_rtcc_01.c: 35: RtccTime.f.hour=hora_d*16+hora_u;
  8086  001AE6  0100               	movlb	0	; () banked
  8087  001AE8  51C3               	movf	_hora_d& (0+255),w,b
  8088  001AEA  0D10               	mullw	16
  8089  001AEC  50F3               	movf	prodl,w,c
  8090  001AEE  0100               	movlb	0	; () banked
  8091  001AF0  25C4               	addwf	_hora_u& (0+255),w,b
  8092  001AF2  0100               	movlb	0	; () banked
  8093  001AF4  6FA7               	movwf	(_RtccTime+3)& (0+255),b
  8094                           
  8095                           ; BSR set to: 0
  8096                           ;unmc_rtcc_01.c: 36: anio_d=anio/10;
  8097  001AF6  C0CB  F001         	movff	_anio,___awdiv@dividend
  8098  001AFA  C0CC  F002         	movff	_anio+1,___awdiv@dividend+1
  8099  001AFE  0E00               	movlw	0
  8100  001B00  6E04               	movwf	___awdiv@divisor+1,c
  8101  001B02  0E0A               	movlw	10
  8102  001B04  6E03               	movwf	___awdiv@divisor,c
  8103  001B06  ECCE  F013         	call	___awdiv	;wreg free
  8104  001B0A  5001               	movf	?___awdiv,w,c
  8105  001B0C  0100               	movlb	0	; () banked
  8106  001B0E  6FBE               	movwf	_anio_d& (0+255),b
  8107                           
  8108                           ; BSR set to: 0
  8109                           ;unmc_rtcc_01.c: 37: anio_u=anio-anio_d*10;
  8110  001B10  0100               	movlb	0	; () banked
  8111  001B12  51BE               	movf	_anio_d& (0+255),w,b
  8112  001B14  0D0A               	mullw	10
  8113  001B16  50F3               	movf	prodl,w,c
  8114  001B18  0800               	sublw	0
  8115  001B1A  0100               	movlb	0	; () banked
  8116  001B1C  25CB               	addwf	_anio& (0+255),w,b
  8117  001B1E  0100               	movlb	0	; () banked
  8118  001B20  6FBF               	movwf	_anio_u& (0+255),b
  8119                           
  8120                           ; BSR set to: 0
  8121                           ;unmc_rtcc_01.c: 38: RtccDate.f.year=anio_d*16+anio_u;
  8122  001B22  0100               	movlb	0	; () banked
  8123  001B24  51BE               	movf	_anio_d& (0+255),w,b
  8124  001B26  0D10               	mullw	16
  8125  001B28  50F3               	movf	prodl,w,c
  8126  001B2A  0100               	movlb	0	; () banked
  8127  001B2C  25BF               	addwf	_anio_u& (0+255),w,b
  8128  001B2E  0100               	movlb	0	; () banked
  8129  001B30  6FA3               	movwf	(_RtccDate+3)& (0+255),b
  8130                           
  8131                           ; BSR set to: 0
  8132                           ;unmc_rtcc_01.c: 39: mes_d=mes/10;
  8133  001B32  C05C  F001         	movff	_mes,___awdiv@dividend
  8134  001B36  C05D  F002         	movff	_mes+1,___awdiv@dividend+1
  8135  001B3A  0E00               	movlw	0
  8136  001B3C  6E04               	movwf	___awdiv@divisor+1,c
  8137  001B3E  0E0A               	movlw	10
  8138  001B40  6E03               	movwf	___awdiv@divisor,c
  8139  001B42  ECCE  F013         	call	___awdiv	;wreg free
  8140  001B46  5001               	movf	?___awdiv,w,c
  8141  001B48  0100               	movlb	0	; () banked
  8142  001B4A  6FC5               	movwf	_mes_d& (0+255),b
  8143                           
  8144                           ; BSR set to: 0
  8145                           ;unmc_rtcc_01.c: 40: mes_u=mes-mes_d*10;
  8146  001B4C  0100               	movlb	0	; () banked
  8147  001B4E  51C5               	movf	_mes_d& (0+255),w,b
  8148  001B50  0D0A               	mullw	10
  8149  001B52  50F3               	movf	prodl,w,c
  8150  001B54  0800               	sublw	0
  8151  001B56  245C               	addwf	_mes,w,c
  8152  001B58  0100               	movlb	0	; () banked
  8153  001B5A  6FC6               	movwf	_mes_u& (0+255),b
  8154                           
  8155                           ; BSR set to: 0
  8156                           ;unmc_rtcc_01.c: 41: RtccDate.f.mon=mes_d*16+mes_u;
  8157  001B5C  0100               	movlb	0	; () banked
  8158  001B5E  51C5               	movf	_mes_d& (0+255),w,b
  8159  001B60  0D10               	mullw	16
  8160  001B62  50F3               	movf	prodl,w,c
  8161  001B64  0100               	movlb	0	; () banked
  8162  001B66  25C6               	addwf	_mes_u& (0+255),w,b
  8163  001B68  0100               	movlb	0	; () banked
  8164  001B6A  6FA2               	movwf	(_RtccDate+2)& (0+255),b
  8165                           
  8166                           ; BSR set to: 0
  8167                           ;unmc_rtcc_01.c: 42: fecha_d=dia/10;
  8168  001B6C  C0CD  F001         	movff	_dia,___awdiv@dividend
  8169  001B70  C0CE  F002         	movff	_dia+1,___awdiv@dividend+1
  8170  001B74  0E00               	movlw	0
  8171  001B76  6E04               	movwf	___awdiv@divisor+1,c
  8172  001B78  0E0A               	movlw	10
  8173  001B7A  6E03               	movwf	___awdiv@divisor,c
  8174  001B7C  ECCE  F013         	call	___awdiv	;wreg free
  8175  001B80  5001               	movf	?___awdiv,w,c
  8176  001B82  0100               	movlb	0	; () banked
  8177  001B84  6FC1               	movwf	_fecha_d& (0+255),b
  8178                           
  8179                           ; BSR set to: 0
  8180                           ;unmc_rtcc_01.c: 43: fecha_u=dia-fecha_d*10;
  8181  001B86  0100               	movlb	0	; () banked
  8182  001B88  51C1               	movf	_fecha_d& (0+255),w,b
  8183  001B8A  0D0A               	mullw	10
  8184  001B8C  50F3               	movf	prodl,w,c
  8185  001B8E  0800               	sublw	0
  8186  001B90  0100               	movlb	0	; () banked
  8187  001B92  25CD               	addwf	_dia& (0+255),w,b
  8188  001B94  0100               	movlb	0	; () banked
  8189  001B96  6FC2               	movwf	_fecha_u& (0+255),b
  8190                           
  8191                           ; BSR set to: 0
  8192                           ;unmc_rtcc_01.c: 44: RtccDate.f.mday=fecha_d*16+fecha_u;
  8193  001B98  0100               	movlb	0	; () banked
  8194  001B9A  51C1               	movf	_fecha_d& (0+255),w,b
  8195  001B9C  0D10               	mullw	16
  8196  001B9E  50F3               	movf	prodl,w,c
  8197  001BA0  0100               	movlb	0	; () banked
  8198  001BA2  25C2               	addwf	_fecha_u& (0+255),w,b
  8199  001BA4  0100               	movlb	0	; () banked
  8200  001BA6  6FA1               	movwf	(_RtccDate+1)& (0+255),b
  8201                           
  8202                           ; BSR set to: 0
  8203                           ;unmc_rtcc_01.c: 45: dia_semana=diasem;
  8204  001BA8  C0CF  F0C0         	movff	_diasem,_dia_semana
  8205                           
  8206                           ; BSR set to: 0
  8207                           ;unmc_rtcc_01.c: 46: RtccDate.f.wday =diasem;
  8208  001BAC  C0CF  F0A0         	movff	_diasem,_RtccDate
  8209                           
  8210                           ; BSR set to: 0
  8211                           ;unmc_rtcc_01.c: 47: RtccWriteTime(&RtccTime,1);
  8212  001BB0  0EA4               	movlw	low _RtccTime
  8213  001BB2  6E01               	movwf	RtccWriteTime@pTm,c
  8214  001BB4  0E00               	movlw	high _RtccTime
  8215  001BB6  6E02               	movwf	RtccWriteTime@pTm+1,c
  8216  001BB8  0E01               	movlw	1
  8217  001BBA  6E03               	movwf	RtccWriteTime@di,c
  8218  001BBC  ECDF  F00F         	call	_RtccWriteTime	;wreg free
  8219                           
  8220                           ;unmc_rtcc_01.c: 48: RtccWriteDate(&RtccDate,1);
  8221  001BC0  0EA0               	movlw	low _RtccDate
  8222  001BC2  6E01               	movwf	RtccWriteDate@pDt,c
  8223  001BC4  0E00               	movlw	high _RtccDate
  8224  001BC6  6E02               	movwf	RtccWriteDate@pDt+1,c
  8225  001BC8  0E01               	movlw	1
  8226  001BCA  6E03               	movwf	RtccWriteDate@di,c
  8227  001BCC  ECAC  F00E         	call	_RtccWriteDate	;wreg free
  8228                           
  8229                           ;unmc_rtcc_01.c: 49: (RTCCFGbits.RTCEN=1);
  8230  001BD0  010F               	movlb	15	; () banked
  8231  001BD2  8F3F               	bsf	63,7,b	;volatile
  8232                           
  8233                           ; BSR set to: 15
  8234  001BD4  0012               	return		;funcret
  8235  001BD6                     __end_of_Write_RTC:
  8236                           	opt stack 0
  8237                           tblptru	equ	0xFF8
  8238                           tblptrh	equ	0xFF7
  8239                           tblptrl	equ	0xFF6
  8240                           tablat	equ	0xFF5
  8241                           prodh	equ	0xFF4
  8242                           prodl	equ	0xFF3
  8243                           indf0	equ	0xFEF
  8244                           postinc0	equ	0xFEE
  8245                           fsr0h	equ	0xFEA
  8246                           fsr0l	equ	0xFE9
  8247                           wreg	equ	0xFE8
  8248                           postdec1	equ	0xFE5
  8249                           fsr1l	equ	0xFE1
  8250                           indf2	equ	0xFDF
  8251                           postinc2	equ	0xFDE
  8252                           postdec2	equ	0xFDD
  8253                           fsr2h	equ	0xFDA
  8254                           fsr2l	equ	0xFD9
  8255                           status	equ	0xFD8
  8256                           
  8257 ;; *************** function ___awdiv *****************
  8258 ;; Defined at:
  8259 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\awdiv.c"
  8260 ;; Parameters:    Size  Location     Type
  8261 ;;  dividend        2    0[COMRAM] int 
  8262 ;;  divisor         2    2[COMRAM] int 
  8263 ;; Auto vars:     Size  Location     Type
  8264 ;;  quotient        2    6[COMRAM] int 
  8265 ;;  sign            1    5[COMRAM] unsigned char 
  8266 ;;  counter         1    4[COMRAM] unsigned char 
  8267 ;; Return value:  Size  Location     Type
  8268 ;;                  2    0[COMRAM] int 
  8269 ;; Registers used:
  8270 ;;		wreg, status,2, status,0
  8271 ;; Tracked objects:
  8272 ;;		On entry : 0/0
  8273 ;;		On exit  : 0/0
  8274 ;;		Unchanged: 0/0
  8275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8276 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8277 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8279 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8280 ;;Total ram usage:        8 bytes
  8281 ;; Hardware stack levels used:    1
  8282 ;; This function calls:
  8283 ;;		Nothing
  8284 ;; This function is called by:
  8285 ;;		_Write_RTC
  8286 ;;		__delay_s
  8287 ;; This function uses a non-reentrant model
  8288 ;;
  8289                           
  8290                           	psect	text49
  8291  00279C                     __ptext49:
  8292                           	opt stack 0
  8293  00279C                     ___awdiv:
  8294                           	opt stack 27
  8295                           
  8296                           ; BSR set to: 15
  8297                           ;incstack = 0
  8298  00279C  0E00               	movlw	0
  8299  00279E  6E06               	movwf	___awdiv@sign,c
  8300  0027A0  AE04               	btfss	___awdiv@divisor+1,7,c
  8301  0027A2  D007               	goto	l3394
  8302  0027A4  6C03               	negf	___awdiv@divisor,c
  8303  0027A6  1E04               	comf	___awdiv@divisor+1,f,c
  8304  0027A8  B0D8               	btfsc	status,0,c
  8305  0027AA  2A04               	incf	___awdiv@divisor+1,f,c
  8306  0027AC  0E01               	movlw	1
  8307  0027AE  6E06               	movwf	___awdiv@sign,c
  8308  0027B0  D000               	goto	l3394
  8309  0027B2                     l3394:
  8310  0027B2  AE02               	btfss	___awdiv@dividend+1,7,c
  8311  0027B4  D007               	goto	l3400
  8312  0027B6  6C01               	negf	___awdiv@dividend,c
  8313  0027B8  1E02               	comf	___awdiv@dividend+1,f,c
  8314  0027BA  B0D8               	btfsc	status,0,c
  8315  0027BC  2A02               	incf	___awdiv@dividend+1,f,c
  8316  0027BE  0E01               	movlw	1
  8317  0027C0  1A06               	xorwf	___awdiv@sign,f,c
  8318  0027C2  D000               	goto	l3400
  8319  0027C4                     l3400:
  8320  0027C4  0E00               	movlw	0
  8321  0027C6  6E08               	movwf	___awdiv@quotient+1,c
  8322  0027C8  0E00               	movlw	0
  8323  0027CA  6E07               	movwf	___awdiv@quotient,c
  8324  0027CC  5003               	movf	___awdiv@divisor,w,c
  8325  0027CE  1004               	iorwf	___awdiv@divisor+1,w,c
  8326  0027D0  B4D8               	btfsc	status,2,c
  8327  0027D2  D021               	goto	l3422
  8328  0027D4  0E01               	movlw	1
  8329  0027D6  6E05               	movwf	___awdiv@counter,c
  8330  0027D8  D005               	goto	l3408
  8331  0027DA                     l3406:
  8332  0027DA  90D8               	bcf	status,0,c
  8333  0027DC  3603               	rlcf	___awdiv@divisor,f,c
  8334  0027DE  3604               	rlcf	___awdiv@divisor+1,f,c
  8335  0027E0  2A05               	incf	___awdiv@counter,f,c
  8336  0027E2  D000               	goto	l3408
  8337  0027E4                     l3408:
  8338  0027E4  BE04               	btfsc	___awdiv@divisor+1,7,c
  8339  0027E6  D002               	goto	l3410
  8340  0027E8  D7F8               	goto	l3406
  8341  0027EA  D000               	goto	l3410
  8342  0027EC                     l3410:
  8343  0027EC  90D8               	bcf	status,0,c
  8344  0027EE  3607               	rlcf	___awdiv@quotient,f,c
  8345  0027F0  3608               	rlcf	___awdiv@quotient+1,f,c
  8346  0027F2  5003               	movf	___awdiv@divisor,w,c
  8347  0027F4  5C01               	subwf	___awdiv@dividend,w,c
  8348  0027F6  5004               	movf	___awdiv@divisor+1,w,c
  8349  0027F8  5802               	subwfb	___awdiv@dividend+1,w,c
  8350  0027FA  A0D8               	btfss	status,0,c
  8351  0027FC  D006               	goto	l3418
  8352  0027FE  5003               	movf	___awdiv@divisor,w,c
  8353  002800  5E01               	subwf	___awdiv@dividend,f,c
  8354  002802  5004               	movf	___awdiv@divisor+1,w,c
  8355  002804  5A02               	subwfb	___awdiv@dividend+1,f,c
  8356  002806  8007               	bsf	___awdiv@quotient,0,c
  8357  002808  D000               	goto	l3418
  8358  00280A                     l3418:
  8359  00280A  90D8               	bcf	status,0,c
  8360  00280C  3204               	rrcf	___awdiv@divisor+1,f,c
  8361  00280E  3203               	rrcf	___awdiv@divisor,f,c
  8362  002810  2E05               	decfsz	___awdiv@counter,f,c
  8363  002812  D7EC               	goto	l3410
  8364  002814  D000               	goto	l3422
  8365  002816                     l3422:
  8366  002816  5006               	movf	___awdiv@sign,w,c
  8367  002818  B4D8               	btfsc	status,2,c
  8368  00281A  D005               	goto	l3426
  8369  00281C  6C07               	negf	___awdiv@quotient,c
  8370  00281E  1E08               	comf	___awdiv@quotient+1,f,c
  8371  002820  B0D8               	btfsc	status,0,c
  8372  002822  2A08               	incf	___awdiv@quotient+1,f,c
  8373  002824  D000               	goto	l3426
  8374  002826                     l3426:
  8375  002826  C007  F001         	movff	___awdiv@quotient,?___awdiv
  8376  00282A  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  8377  00282E  0012               	return	
  8378  002830  0012               	return		;funcret
  8379  002832                     __end_of___awdiv:
  8380                           	opt stack 0
  8381                           tblptru	equ	0xFF8
  8382                           tblptrh	equ	0xFF7
  8383                           tblptrl	equ	0xFF6
  8384                           tablat	equ	0xFF5
  8385                           prodh	equ	0xFF4
  8386                           prodl	equ	0xFF3
  8387                           indf0	equ	0xFEF
  8388                           postinc0	equ	0xFEE
  8389                           fsr0h	equ	0xFEA
  8390                           fsr0l	equ	0xFE9
  8391                           wreg	equ	0xFE8
  8392                           postdec1	equ	0xFE5
  8393                           fsr1l	equ	0xFE1
  8394                           indf2	equ	0xFDF
  8395                           postinc2	equ	0xFDE
  8396                           postdec2	equ	0xFDD
  8397                           fsr2h	equ	0xFDA
  8398                           fsr2l	equ	0xFD9
  8399                           status	equ	0xFD8
  8400                           
  8401 ;; *************** function _RtccWriteTime *****************
  8402 ;; Defined at:
  8403 ;;		line 34 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteTime.c"
  8404 ;; Parameters:    Size  Location     Type
  8405 ;;  pTm             2    0[COMRAM] PTR const struct .
  8406 ;;		 -> RtccTime(4), 
  8407 ;;  di              1    2[COMRAM] enum E7121
  8408 ;; Auto vars:     Size  Location     Type
  8409 ;;  tempHourWDay    2    9[COMRAM] struct .
  8410 ;;  tempMinSec      2    7[COMRAM] struct .
  8411 ;;  wasWrEn         1    6[COMRAM] enum E7121
  8412 ;;  wasAlrm         1    5[COMRAM] enum E7121
  8413 ;;  wasOn           1    4[COMRAM] enum E7121
  8414 ;; Return value:  Size  Location     Type
  8415 ;;                  1    wreg      enum E7121
  8416 ;; Registers used:
  8417 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8418 ;; Tracked objects:
  8419 ;;		On entry : 0/0
  8420 ;;		On exit  : 0/0
  8421 ;;		Unchanged: 0/0
  8422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8423 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8424 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8425 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8426 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8427 ;;Total ram usage:       11 bytes
  8428 ;; Hardware stack levels used:    1
  8429 ;; Hardware stack levels required when called:    1
  8430 ;; This function calls:
  8431 ;;		_RtccWrOn
  8432 ;; This function is called by:
  8433 ;;		_Write_RTC
  8434 ;; This function uses a non-reentrant model
  8435 ;;
  8436                           
  8437                           	psect	text50
  8438  001FBE                     __ptext50:
  8439                           	opt stack 0
  8440  001FBE                     _RtccWriteTime:
  8441                           	opt stack 27
  8442                           
  8443                           ;incstack = 0
  8444  001FBE  0E00               	movlw	0
  8445  001FC0  6E06               	movwf	RtccWriteTime@wasAlrm,c
  8446  001FC2  EE20 F002          	lfsr	2,2
  8447  001FC6  5001               	movf	RtccWriteTime@pTm,w,c
  8448  001FC8  26D9               	addwf	fsr2l,f,c
  8449  001FCA  5002               	movf	RtccWriteTime@pTm+1,w,c
  8450  001FCC  22DA               	addwfc	fsr2h,f,c
  8451  001FCE  0E5A               	movlw	90
  8452  001FD0  60DF               	cpfslt	indf2,c
  8453  001FD2  0012               	return	
  8454  001FD4  EE20 F001          	lfsr	2,1
  8455  001FD8  5001               	movf	RtccWriteTime@pTm,w,c
  8456  001FDA  26D9               	addwf	fsr2l,f,c
  8457  001FDC  5002               	movf	RtccWriteTime@pTm+1,w,c
  8458  001FDE  22DA               	addwfc	fsr2h,f,c
  8459  001FE0  0E5A               	movlw	90
  8460  001FE2  60DF               	cpfslt	indf2,c
  8461  001FE4  0012               	return	
  8462  001FE6  EE20 F003          	lfsr	2,3
  8463  001FEA  5001               	movf	RtccWriteTime@pTm,w,c
  8464  001FEC  26D9               	addwf	fsr2l,f,c
  8465  001FEE  5002               	movf	RtccWriteTime@pTm+1,w,c
  8466  001FF0  22DA               	addwfc	fsr2h,f,c
  8467  001FF2  0E24               	movlw	36
  8468  001FF4  64DF               	cpfsgt	indf2,c
  8469  001FF6  D002               	goto	l3604
  8470  001FF8  0012               	return	
  8471                           
  8472                           ;	Return value of _RtccWriteTime is never used
  8473  001FFA  0012               	return	
  8474  001FFC                     l3604:
  8475  001FFC  EE20 F002          	lfsr	2,2
  8476  002000  5001               	movf	RtccWriteTime@pTm,w,c
  8477  002002  26D9               	addwf	fsr2l,f,c
  8478  002004  5002               	movf	RtccWriteTime@pTm+1,w,c
  8479  002006  22DA               	addwfc	fsr2h,f,c
  8480  002008  50DF               	movf	indf2,w,c
  8481  00200A  6E09               	movwf	RtccWriteTime@tempMinSec+1,c
  8482  00200C  EE20 F001          	lfsr	2,1
  8483  002010  5001               	movf	RtccWriteTime@pTm,w,c
  8484  002012  26D9               	addwf	fsr2l,f,c
  8485  002014  5002               	movf	RtccWriteTime@pTm+1,w,c
  8486  002016  22DA               	addwfc	fsr2h,f,c
  8487  002018  50DF               	movf	indf2,w,c
  8488  00201A  6E08               	movwf	RtccWriteTime@tempMinSec,c
  8489  00201C  5003               	movf	RtccWriteTime@di,w,c
  8490  00201E  B4D8               	btfsc	status,2,c
  8491  002020  D002               	goto	l3610
  8492  002022  9CF2               	bcf	intcon,6,c	;volatile
  8493  002024  D000               	goto	l3610
  8494  002026                     l3610:
  8495  002026  0E00               	movlw	0
  8496  002028  BB3F               	btfsc	63,5,b	;volatile
  8497  00202A  0E01               	movlw	1
  8498  00202C  6E07               	movwf	RtccWriteTime@wasWrEn,c
  8499  00202E  5007               	movf	RtccWriteTime@wasWrEn,w,c
  8500  002030  A4D8               	btfss	status,2,c
  8501  002032  D003               	goto	l3614
  8502  002034  EC49  F018         	call	_RtccWrOn	;wreg free
  8503  002038  D000               	goto	l3614
  8504  00203A                     l3614:
  8505  00203A  0E00               	movlw	0
  8506  00203C  BF3F               	btfsc	63,7,b	;volatile
  8507  00203E  0E01               	movlw	1
  8508  002040  6E05               	movwf	RtccWriteTime@wasOn,c
  8509  002042  5005               	movf	RtccWriteTime@wasOn,w,c
  8510  002044  B4D8               	btfsc	status,2,c
  8511  002046  D007               	goto	l3620
  8512  002048  0E00               	movlw	0
  8513  00204A  BE91               	btfsc	3985,7,c	;volatile
  8514  00204C  0E01               	movlw	1
  8515  00204E  6E06               	movwf	RtccWriteTime@wasAlrm,c
  8516  002050  010F               	movlb	15	; () banked
  8517  002052  9F3F               	bcf	63,7,b	;volatile
  8518  002054  D000               	goto	l3620
  8519  002056                     l3620:
  8520  002056  0EFC               	movlw	252
  8521  002058  010F               	movlb	15	; () banked
  8522  00205A  173F               	andwf	63,f,b	;volatile
  8523  00205C  010F               	movlb	15	; () banked
  8524  00205E  813F               	bsf	63,0,b	;volatile
  8525                           
  8526                           ; BSR set to: 15
  8527  002060  CF98 F00A          	movff	3992,RtccWriteTime@tempHourWDay	;volatile
  8528                           
  8529                           ; BSR set to: 15
  8530  002064  CF99 F00B          	movff	3993,RtccWriteTime@tempHourWDay+1	;volatile
  8531                           
  8532                           ; BSR set to: 15
  8533  002068  EE20 F003          	lfsr	2,3
  8534  00206C  5001               	movf	RtccWriteTime@pTm,w,c
  8535  00206E  26D9               	addwf	fsr2l,f,c
  8536  002070  5002               	movf	RtccWriteTime@pTm+1,w,c
  8537  002072  22DA               	addwfc	fsr2h,f,c
  8538  002074  50DF               	movf	indf2,w,c
  8539  002076  6E0A               	movwf	RtccWriteTime@tempHourWDay,c
  8540                           
  8541                           ; BSR set to: 15
  8542  002078  0EFC               	movlw	252
  8543  00207A  010F               	movlb	15	; () banked
  8544  00207C  173F               	andwf	63,f,b	;volatile
  8545                           
  8546                           ; BSR set to: 15
  8547  00207E  010F               	movlb	15	; () banked
  8548  002080  813F               	bsf	63,0,b	;volatile
  8549                           
  8550                           ; BSR set to: 15
  8551  002082  C00A  FF98         	movff	RtccWriteTime@tempHourWDay,3992	;volatile
  8552                           
  8553                           ; BSR set to: 15
  8554  002086  C00B  FF99         	movff	RtccWriteTime@tempHourWDay+1,3993	;volatile
  8555                           
  8556                           ; BSR set to: 15
  8557  00208A  C008  FF98         	movff	RtccWriteTime@tempMinSec,3992	;volatile
  8558                           
  8559                           ; BSR set to: 15
  8560  00208E  C009  FF99         	movff	RtccWriteTime@tempMinSec+1,3993	;volatile
  8561                           
  8562                           ; BSR set to: 15
  8563  002092  5005               	movf	RtccWriteTime@wasOn,w,c
  8564  002094  B4D8               	btfsc	status,2,c
  8565  002096  D00D               	goto	l3652
  8566                           
  8567                           ; BSR set to: 15
  8568  002098  010F               	movlb	15	; () banked
  8569  00209A  8F3F               	bsf	63,7,b	;volatile
  8570                           
  8571                           ; BSR set to: 15
  8572  00209C  5006               	movf	RtccWriteTime@wasAlrm,w,c
  8573  00209E  B4D8               	btfsc	status,2,c
  8574  0020A0  D002               	goto	l3648
  8575                           
  8576                           ; BSR set to: 15
  8577  0020A2  8E91               	bsf	3985,7,c	;volatile
  8578  0020A4  D000               	goto	l3648
  8579  0020A6                     l3648:
  8580                           
  8581                           ; BSR set to: 15
  8582  0020A6  5007               	movf	RtccWriteTime@wasWrEn,w,c
  8583  0020A8  B4D8               	btfsc	status,2,c
  8584  0020AA  D009               	goto	l3656
  8585                           
  8586                           ; BSR set to: 15
  8587  0020AC  EC49  F018         	call	_RtccWrOn	;wreg free
  8588  0020B0  D006               	goto	l3656
  8589  0020B2                     l3652:
  8590  0020B2  5007               	movf	RtccWriteTime@wasWrEn,w,c
  8591  0020B4  A4D8               	btfss	status,2,c
  8592  0020B6  D003               	goto	l3656
  8593  0020B8  010F               	movlb	15	; () banked
  8594  0020BA  9B3F               	bcf	63,5,b	;volatile
  8595                           
  8596                           ; BSR set to: 15
  8597  0020BC  D000               	goto	l3656
  8598  0020BE                     l3656:
  8599  0020BE  5003               	movf	RtccWriteTime@di,w,c
  8600  0020C0  B4D8               	btfsc	status,2,c
  8601  0020C2  0012               	return	
  8602  0020C4  8CF2               	bsf	intcon,6,c	;volatile
  8603  0020C6  0012               	return	
  8604                           
  8605                           ;	Return value of _RtccWriteTime is never used
  8606  0020C8  0012               	return		;funcret
  8607  0020CA                     __end_of_RtccWriteTime:
  8608                           	opt stack 0
  8609                           tblptru	equ	0xFF8
  8610                           tblptrh	equ	0xFF7
  8611                           tblptrl	equ	0xFF6
  8612                           tablat	equ	0xFF5
  8613                           prodh	equ	0xFF4
  8614                           prodl	equ	0xFF3
  8615                           intcon	equ	0xFF2
  8616                           indf0	equ	0xFEF
  8617                           postinc0	equ	0xFEE
  8618                           fsr0h	equ	0xFEA
  8619                           fsr0l	equ	0xFE9
  8620                           wreg	equ	0xFE8
  8621                           postdec1	equ	0xFE5
  8622                           fsr1l	equ	0xFE1
  8623                           indf2	equ	0xFDF
  8624                           postinc2	equ	0xFDE
  8625                           postdec2	equ	0xFDD
  8626                           fsr2h	equ	0xFDA
  8627                           fsr2l	equ	0xFD9
  8628                           status	equ	0xFD8
  8629                           
  8630 ;; *************** function _RtccWriteDate *****************
  8631 ;; Defined at:
  8632 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteDate.c"
  8633 ;; Parameters:    Size  Location     Type
  8634 ;;  pDt             2    0[COMRAM] PTR const struct .
  8635 ;;		 -> RtccDate(4), 
  8636 ;;  di              1    2[COMRAM] enum E7121
  8637 ;; Auto vars:     Size  Location     Type
  8638 ;;  tempHourWDay    2   11[COMRAM] struct .
  8639 ;;  tempDayMonth    2    9[COMRAM] struct .
  8640 ;;  tempYear        2    6[COMRAM] struct .
  8641 ;;  wasWrEn         1    8[COMRAM] enum E7121
  8642 ;;  wasAlrm         1    5[COMRAM] enum E7121
  8643 ;;  wasOn           1    4[COMRAM] enum E7121
  8644 ;; Return value:  Size  Location     Type
  8645 ;;                  1    wreg      enum E7121
  8646 ;; Registers used:
  8647 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8648 ;; Tracked objects:
  8649 ;;		On entry : 0/0
  8650 ;;		On exit  : 0/0
  8651 ;;		Unchanged: 0/0
  8652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8653 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8654 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8655 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8656 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8657 ;;Total ram usage:       13 bytes
  8658 ;; Hardware stack levels used:    1
  8659 ;; Hardware stack levels required when called:    1
  8660 ;; This function calls:
  8661 ;;		_RtccWrOn
  8662 ;; This function is called by:
  8663 ;;		_Write_RTC
  8664 ;; This function uses a non-reentrant model
  8665 ;;
  8666                           
  8667                           	psect	text51
  8668  001D58                     __ptext51:
  8669                           	opt stack 0
  8670  001D58                     _RtccWriteDate:
  8671                           	opt stack 27
  8672                           
  8673                           ;incstack = 0
  8674  001D58  0E00               	movlw	0
  8675  001D5A  6E06               	movwf	RtccWriteDate@wasAlrm,c
  8676  001D5C  EE20 F002          	lfsr	2,2
  8677  001D60  5001               	movf	RtccWriteDate@pDt,w,c
  8678  001D62  26D9               	addwf	fsr2l,f,c
  8679  001D64  5002               	movf	RtccWriteDate@pDt+1,w,c
  8680  001D66  22DA               	addwfc	fsr2h,f,c
  8681  001D68  0E13               	movlw	19
  8682  001D6A  60DF               	cpfslt	indf2,c
  8683  001D6C  0012               	return	
  8684  001D6E  EE20 F002          	lfsr	2,2
  8685  001D72  5001               	movf	RtccWriteDate@pDt,w,c
  8686  001D74  26D9               	addwf	fsr2l,f,c
  8687  001D76  5002               	movf	RtccWriteDate@pDt+1,w,c
  8688  001D78  22DA               	addwfc	fsr2h,f,c
  8689  001D7A  50DF               	movf	indf2,w,c
  8690  001D7C  B4D8               	btfsc	status,2,c
  8691  001D7E  0012               	return	
  8692  001D80  EE20 F001          	lfsr	2,1
  8693  001D84  5001               	movf	RtccWriteDate@pDt,w,c
  8694  001D86  26D9               	addwf	fsr2l,f,c
  8695  001D88  5002               	movf	RtccWriteDate@pDt+1,w,c
  8696  001D8A  22DA               	addwfc	fsr2h,f,c
  8697  001D8C  0E32               	movlw	50
  8698  001D8E  60DF               	cpfslt	indf2,c
  8699  001D90  0012               	return	
  8700  001D92  EE20 F001          	lfsr	2,1
  8701  001D96  5001               	movf	RtccWriteDate@pDt,w,c
  8702  001D98  26D9               	addwf	fsr2l,f,c
  8703  001D9A  5002               	movf	RtccWriteDate@pDt+1,w,c
  8704  001D9C  22DA               	addwfc	fsr2h,f,c
  8705  001D9E  50DF               	movf	indf2,w,c
  8706  001DA0  B4D8               	btfsc	status,2,c
  8707  001DA2  0012               	return	
  8708  001DA4  EE20 F003          	lfsr	2,3
  8709  001DA8  5001               	movf	RtccWriteDate@pDt,w,c
  8710  001DAA  26D9               	addwf	fsr2l,f,c
  8711  001DAC  5002               	movf	RtccWriteDate@pDt+1,w,c
  8712  001DAE  22DA               	addwfc	fsr2h,f,c
  8713  001DB0  0E99               	movlw	153
  8714  001DB2  64DF               	cpfsgt	indf2,c
  8715  001DB4  D002               	goto	l3672
  8716  001DB6  0012               	return	
  8717                           
  8718                           ;	Return value of _RtccWriteDate is never used
  8719  001DB8  0012               	return	
  8720  001DBA                     l3672:
  8721  001DBA  EE20 F003          	lfsr	2,3
  8722  001DBE  5001               	movf	RtccWriteDate@pDt,w,c
  8723  001DC0  26D9               	addwf	fsr2l,f,c
  8724  001DC2  5002               	movf	RtccWriteDate@pDt+1,w,c
  8725  001DC4  22DA               	addwfc	fsr2h,f,c
  8726  001DC6  50DF               	movf	indf2,w,c
  8727  001DC8  6E07               	movwf	RtccWriteDate@tempYear,c
  8728  001DCA  EE20 F001          	lfsr	2,1
  8729  001DCE  5001               	movf	RtccWriteDate@pDt,w,c
  8730  001DD0  26D9               	addwf	fsr2l,f,c
  8731  001DD2  5002               	movf	RtccWriteDate@pDt+1,w,c
  8732  001DD4  22DA               	addwfc	fsr2h,f,c
  8733  001DD6  50DF               	movf	indf2,w,c
  8734  001DD8  6E0A               	movwf	RtccWriteDate@tempDayMonth,c
  8735  001DDA  EE20 F002          	lfsr	2,2
  8736  001DDE  5001               	movf	RtccWriteDate@pDt,w,c
  8737  001DE0  26D9               	addwf	fsr2l,f,c
  8738  001DE2  5002               	movf	RtccWriteDate@pDt+1,w,c
  8739  001DE4  22DA               	addwfc	fsr2h,f,c
  8740  001DE6  50DF               	movf	indf2,w,c
  8741  001DE8  6E0B               	movwf	RtccWriteDate@tempDayMonth+1,c
  8742  001DEA  5003               	movf	RtccWriteDate@di,w,c
  8743  001DEC  B4D8               	btfsc	status,2,c
  8744  001DEE  D002               	goto	l3678
  8745  001DF0  9CF2               	bcf	intcon,6,c	;volatile
  8746  001DF2  D000               	goto	l3678
  8747  001DF4                     l3678:
  8748  001DF4  0E00               	movlw	0
  8749  001DF6  BB3F               	btfsc	63,5,b	;volatile
  8750  001DF8  0E01               	movlw	1
  8751  001DFA  6E09               	movwf	RtccWriteDate@wasWrEn,c
  8752  001DFC  5009               	movf	RtccWriteDate@wasWrEn,w,c
  8753  001DFE  A4D8               	btfss	status,2,c
  8754  001E00  D003               	goto	l3682
  8755  001E02  EC49  F018         	call	_RtccWrOn	;wreg free
  8756  001E06  D000               	goto	l3682
  8757  001E08                     l3682:
  8758  001E08  0E00               	movlw	0
  8759  001E0A  BF3F               	btfsc	63,7,b	;volatile
  8760  001E0C  0E01               	movlw	1
  8761  001E0E  6E05               	movwf	RtccWriteDate@wasOn,c
  8762  001E10  5005               	movf	RtccWriteDate@wasOn,w,c
  8763  001E12  B4D8               	btfsc	status,2,c
  8764  001E14  D007               	goto	l3688
  8765  001E16  0E00               	movlw	0
  8766  001E18  BE91               	btfsc	3985,7,c	;volatile
  8767  001E1A  0E01               	movlw	1
  8768  001E1C  6E06               	movwf	RtccWriteDate@wasAlrm,c
  8769  001E1E  010F               	movlb	15	; () banked
  8770  001E20  9F3F               	bcf	63,7,b	;volatile
  8771  001E22  D000               	goto	l3688
  8772  001E24                     l3688:
  8773  001E24  0EFC               	movlw	252
  8774  001E26  010F               	movlb	15	; () banked
  8775  001E28  173F               	andwf	63,f,b	;volatile
  8776  001E2A  010F               	movlb	15	; () banked
  8777  001E2C  813F               	bsf	63,0,b	;volatile
  8778                           
  8779                           ; BSR set to: 15
  8780  001E2E  CF98 F00C          	movff	3992,RtccWriteDate@tempHourWDay	;volatile
  8781                           
  8782                           ; BSR set to: 15
  8783  001E32  CF99 F00D          	movff	3993,RtccWriteDate@tempHourWDay+1	;volatile
  8784                           
  8785                           ; BSR set to: 15
  8786  001E36  C001  FFD9         	movff	RtccWriteDate@pDt,fsr2l
  8787  001E3A  C002  FFDA         	movff	RtccWriteDate@pDt+1,fsr2h
  8788  001E3E  50DF               	movf	indf2,w,c
  8789  001E40  6E0D               	movwf	RtccWriteDate@tempHourWDay+1,c
  8790                           
  8791                           ; BSR set to: 15
  8792  001E42  0EFC               	movlw	252
  8793  001E44  010F               	movlb	15	; () banked
  8794  001E46  173F               	andwf	63,f,b	;volatile
  8795                           
  8796                           ; BSR set to: 15
  8797  001E48  0E03               	movlw	3
  8798  001E4A  010F               	movlb	15	; () banked
  8799  001E4C  133F               	iorwf	63,f,b	;volatile
  8800                           
  8801                           ; BSR set to: 15
  8802  001E4E  C007  FF98         	movff	RtccWriteDate@tempYear,3992	;volatile
  8803                           
  8804                           ; BSR set to: 15
  8805  001E52  C008  FF99         	movff	RtccWriteDate@tempYear+1,3993	;volatile
  8806                           
  8807                           ; BSR set to: 15
  8808  001E56  C00A  FF98         	movff	RtccWriteDate@tempDayMonth,3992	;volatile
  8809                           
  8810                           ; BSR set to: 15
  8811  001E5A  C00B  FF99         	movff	RtccWriteDate@tempDayMonth+1,3993	;volatile
  8812                           
  8813                           ; BSR set to: 15
  8814  001E5E  C00C  FF98         	movff	RtccWriteDate@tempHourWDay,3992	;volatile
  8815                           
  8816                           ; BSR set to: 15
  8817  001E62  C00D  FF99         	movff	RtccWriteDate@tempHourWDay+1,3993	;volatile
  8818                           
  8819                           ; BSR set to: 15
  8820  001E66  5005               	movf	RtccWriteDate@wasOn,w,c
  8821  001E68  B4D8               	btfsc	status,2,c
  8822  001E6A  D00D               	goto	l3724
  8823                           
  8824                           ; BSR set to: 15
  8825  001E6C  010F               	movlb	15	; () banked
  8826  001E6E  8F3F               	bsf	63,7,b	;volatile
  8827                           
  8828                           ; BSR set to: 15
  8829  001E70  5006               	movf	RtccWriteDate@wasAlrm,w,c
  8830  001E72  B4D8               	btfsc	status,2,c
  8831  001E74  D002               	goto	l3720
  8832                           
  8833                           ; BSR set to: 15
  8834  001E76  8E91               	bsf	3985,7,c	;volatile
  8835  001E78  D000               	goto	l3720
  8836  001E7A                     l3720:
  8837                           
  8838                           ; BSR set to: 15
  8839  001E7A  5009               	movf	RtccWriteDate@wasWrEn,w,c
  8840  001E7C  B4D8               	btfsc	status,2,c
  8841  001E7E  D009               	goto	l3728
  8842                           
  8843                           ; BSR set to: 15
  8844  001E80  EC49  F018         	call	_RtccWrOn	;wreg free
  8845  001E84  D006               	goto	l3728
  8846  001E86                     l3724:
  8847  001E86  5009               	movf	RtccWriteDate@wasWrEn,w,c
  8848  001E88  A4D8               	btfss	status,2,c
  8849  001E8A  D003               	goto	l3728
  8850  001E8C  010F               	movlb	15	; () banked
  8851  001E8E  9B3F               	bcf	63,5,b	;volatile
  8852                           
  8853                           ; BSR set to: 15
  8854  001E90  D000               	goto	l3728
  8855  001E92                     l3728:
  8856  001E92  5003               	movf	RtccWriteDate@di,w,c
  8857  001E94  B4D8               	btfsc	status,2,c
  8858  001E96  0012               	return	
  8859  001E98  9CF2               	bcf	intcon,6,c	;volatile
  8860  001E9A  0012               	return	
  8861                           
  8862                           ;	Return value of _RtccWriteDate is never used
  8863  001E9C  0012               	return		;funcret
  8864  001E9E                     __end_of_RtccWriteDate:
  8865                           	opt stack 0
  8866                           tblptru	equ	0xFF8
  8867                           tblptrh	equ	0xFF7
  8868                           tblptrl	equ	0xFF6
  8869                           tablat	equ	0xFF5
  8870                           prodh	equ	0xFF4
  8871                           prodl	equ	0xFF3
  8872                           intcon	equ	0xFF2
  8873                           indf0	equ	0xFEF
  8874                           postinc0	equ	0xFEE
  8875                           fsr0h	equ	0xFEA
  8876                           fsr0l	equ	0xFE9
  8877                           wreg	equ	0xFE8
  8878                           postdec1	equ	0xFE5
  8879                           fsr1l	equ	0xFE1
  8880                           indf2	equ	0xFDF
  8881                           postinc2	equ	0xFDE
  8882                           postdec2	equ	0xFDD
  8883                           fsr2h	equ	0xFDA
  8884                           fsr2l	equ	0xFD9
  8885                           status	equ	0xFD8
  8886                           
  8887 ;; *************** function _RtccWrOn *****************
  8888 ;; Defined at:
  8889 ;;		line 21 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWrOn.c"
  8890 ;; Parameters:    Size  Location     Type
  8891 ;;		None
  8892 ;; Auto vars:     Size  Location     Type
  8893 ;;  data            2    0        unsigned int 
  8894 ;; Return value:  Size  Location     Type
  8895 ;;		None               void
  8896 ;; Registers used:
  8897 ;;		wreg, status,2
  8898 ;; Tracked objects:
  8899 ;;		On entry : 0/0
  8900 ;;		On exit  : 0/0
  8901 ;;		Unchanged: 0/0
  8902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8906 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8907 ;;Total ram usage:        0 bytes
  8908 ;; Hardware stack levels used:    1
  8909 ;; This function calls:
  8910 ;;		Nothing
  8911 ;; This function is called by:
  8912 ;;		_Write_RTC
  8913 ;;		_RtccWriteDate
  8914 ;;		_RtccWriteTime
  8915 ;; This function uses a non-reentrant model
  8916 ;;
  8917                           
  8918                           	psect	text52
  8919  003092                     __ptext52:
  8920                           	opt stack 0
  8921  003092                     _RtccWrOn:
  8922                           	opt stack 27
  8923                           
  8924                           ;incstack = 0
  8925  003092  9CF2               	bcf	intcon,6,c	;volatile
  8926  003094  0E55               	movlw	85
  8927  003096  6EA7               	movwf	4007,c	;volatile
  8928  003098  0EAA               	movlw	170
  8929  00309A  6EA7               	movwf	4007,c	;volatile
  8930  00309C  010F               	movlb	15	; () banked
  8931  00309E  8B3F               	bsf	63,5,b	;volatile
  8932                           
  8933                           ; BSR set to: 15
  8934  0030A0  8CF2               	bsf	intcon,6,c	;volatile
  8935                           
  8936                           ; BSR set to: 15
  8937  0030A2  0012               	return		;funcret
  8938  0030A4                     __end_of_RtccWrOn:
  8939                           	opt stack 0
  8940                           tblptru	equ	0xFF8
  8941                           tblptrh	equ	0xFF7
  8942                           tblptrl	equ	0xFF6
  8943                           tablat	equ	0xFF5
  8944                           prodh	equ	0xFF4
  8945                           prodl	equ	0xFF3
  8946                           intcon	equ	0xFF2
  8947                           indf0	equ	0xFEF
  8948                           postinc0	equ	0xFEE
  8949                           fsr0h	equ	0xFEA
  8950                           fsr0l	equ	0xFE9
  8951                           wreg	equ	0xFE8
  8952                           postdec1	equ	0xFE5
  8953                           fsr1l	equ	0xFE1
  8954                           indf2	equ	0xFDF
  8955                           postinc2	equ	0xFDE
  8956                           postdec2	equ	0xFDD
  8957                           fsr2h	equ	0xFDA
  8958                           fsr2l	equ	0xFD9
  8959                           status	equ	0xFD8
  8960                           tblptru	equ	0xFF8
  8961                           tblptrh	equ	0xFF7
  8962                           tblptrl	equ	0xFF6
  8963                           tablat	equ	0xFF5
  8964                           prodh	equ	0xFF4
  8965                           prodl	equ	0xFF3
  8966                           intcon	equ	0xFF2
  8967                           indf0	equ	0xFEF
  8968                           postinc0	equ	0xFEE
  8969                           fsr0h	equ	0xFEA
  8970                           fsr0l	equ	0xFE9
  8971                           wreg	equ	0xFE8
  8972                           postdec1	equ	0xFE5
  8973                           fsr1l	equ	0xFE1
  8974                           indf2	equ	0xFDF
  8975                           postinc2	equ	0xFDE
  8976                           postdec2	equ	0xFDD
  8977                           fsr2h	equ	0xFDA
  8978                           fsr2l	equ	0xFD9
  8979                           status	equ	0xFD8
  8980                           
  8981                           	psect	rparam
  8982  0000                     tblptru	equ	0xFF8
  8983                           tblptrh	equ	0xFF7
  8984                           tblptrl	equ	0xFF6
  8985                           tablat	equ	0xFF5
  8986                           prodh	equ	0xFF4
  8987                           prodl	equ	0xFF3
  8988                           intcon	equ	0xFF2
  8989                           indf0	equ	0xFEF
  8990                           postinc0	equ	0xFEE
  8991                           fsr0h	equ	0xFEA
  8992                           fsr0l	equ	0xFE9
  8993                           wreg	equ	0xFE8
  8994                           postdec1	equ	0xFE5
  8995                           fsr1l	equ	0xFE1
  8996                           indf2	equ	0xFDF
  8997                           postinc2	equ	0xFDE
  8998                           postdec2	equ	0xFDD
  8999                           fsr2h	equ	0xFDA
  9000                           fsr2l	equ	0xFD9
  9001                           status	equ	0xFD8


Data Sizes:
    Strings     122
    Constant    71
    Data        16
    BSS         72
    Persistent  13
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     91      95
    BANK0           160     22     120
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    RtccWriteTime@pTm	PTR const struct . size(2) Largest target is 4
		 -> RtccTime(BANK0[4]), 

    RtccWriteDate@pDt	PTR const struct . size(2) Largest target is 4
		 -> RtccDate(BANK0[4]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_15(CODE[10]), STR_14(CODE[15]), STR_13(CODE[5]), STR_12(CODE[5]), 
		 -> STR_11(CODE[5]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), 
		 -> STR_7(CODE[5]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> buffer2(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    next_code@input	PTR unsigned char  size(2) Largest target is 1
		 -> set_vision@input(BANK0[1]), 

    next_code@digit	PTR short  size(2) Largest target is 2
		 -> set_vision@digit(BANK0[2]), 

    lcd_putrs@ptr	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_21(CODE[8]), STR_20(CODE[10]), STR_19(CODE[4]), STR_18(CODE[3]), 
		 -> STR_17(CODE[11]), STR_16(CODE[11]), buffer2(BANK0[20]), STR_3(CODE[10]), 
		 -> STR_2(CODE[13]), STR_1(CODE[33]), 


Critical Paths under _main in COMRAM

    _main->_set_vision
    _set_vision->_pow
    _write_Date->_sprintf
    _twinkle->_read_keyboard
    _read_keyboard->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcd_putrs->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    __delay_s->___awdiv
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftadd
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___awtoft
    ___ftmul->___lbtoft
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    _next_code->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_setcursor_vb->_lcd_send_byte
    _clear->_lcd_comand
    ___lbtoft->___ftpack
    _caratula->_lcd_comand
    _lcd_init->_lcd_send_byte
    _lcd_comand->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _Write_RTC->_RtccWriteDate

Critical Paths under _main in BANK0

    _main->_set_vision
    _set_vision->_pow

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  125311
                                             89 COMRAM     2     2      0
                              _Setup
                           _caratula
                         _lcd_gotoxy
                          _lcd_putrs
                      _read_keyboard
                         _set_vision
 ---------------------------------------------------------------------------------
 (1) _set_vision                                          13    13      0  108800
                                             87 COMRAM     2     2      0
                                             11 BANK0     11    11      0
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                           ___lbtoft
                          _checkPass
                              _clear
                      _is_not_letter
                         _lcd_gotoxy
                          _lcd_putrs
                   _lcd_setcursor_vb
                          _next_code
                      _not_fill_pass
                                _pow
                      _read_keyboard
                            _twinkle
                         _write_Date
 ---------------------------------------------------------------------------------
 (2) _write_Date                                           0     0      0    8431
                         _lcd_gotoxy
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _twinkle                                              1     1      0   13367
                                             36 COMRAM     1     1      0
                           __delay_s
                         _lcd_gotoxy
                          _lcd_putrs
                      _read_keyboard
 ---------------------------------------------------------------------------------
 (3) _read_keyboard                                        1     1      0    6970
                                             35 COMRAM     1     1      0
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             32    22     10    3452
                                             12 COMRAM    23    13     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcd_putrs                                            2     0      2    3518
                                              8 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (4) _lcd_putc                                             1     1      0    2129
                                              7 COMRAM     1     1      0
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (3) __delay_s                                             7     5      2    1394
                                              8 COMRAM     7     5      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _pow                                                 17    11      6   58696
                                             81 COMRAM     6     0      6
                                              0 BANK0     11    11      0
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  5     2      3   19163
                                             51 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                  9     6      3   31848
                                             72 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                                7     2      5     376
                                             51 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (4) _floor                                                8     5      3    8237
                                             64 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                7     2      5     480
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             15    11      4     508
                                             39 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftge                                               9     3      6     648
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (5) ___altoft                                            10     6      4    2389
                                             54 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           12     5      7    8487
                                             39 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     543
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             15     9      6    3485
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    4194
                                             39 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    3897
                                             27 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     237
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    2697
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    2534
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2320
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _not_fill_pass                                        2     0      2      86
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _next_code                                            6     2      4    1677
                                              7 COMRAM     6     2      4
                     _clear_keyboard
                         _lcd_gotoxy
 ---------------------------------------------------------------------------------
 (5) _lcd_gotoxy                                           3     2      1    1461
                                              4 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (3) _clear_keyboard                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _lcd_setcursor_vb                                     2     1      1     796
                                              4 COMRAM     2     1      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (2) _is_not_letter                                        2     2      0     112
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _clear                                                1     1      0     646
                                              5 COMRAM     1     1      0
                         _lcd_comand
 ---------------------------------------------------------------------------------
 (2) _checkPass                                            2     0      2      86
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             4     1      3    2209
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    2187
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _caratula                                             0     0      0     646
                         _lcd_comand
 ---------------------------------------------------------------------------------
 (1) _Setup                                                0     0      0    3892
                          _Write_RTC
                         _lcd_comand
                           _lcd_init
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             1     1      0     841
                                              4 COMRAM     1     1      0
                        _Delay1KTCYx
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _lcd_comand                                           1     1      0     646
                                              4 COMRAM     1     1      0
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (5) _lcd_send_byte                                        2     1      1     624
                                              2 COMRAM     2     1      1
                       _Delay100TCYx
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (6) _lcd_send_nibble                                      2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _Delay100TCYx                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Write_RTC                                            0     0      0    2405
                           _RtccWrOn
                      _RtccWriteDate
                      _RtccWriteTime
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1196
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _RtccWriteTime                                       11     8      3     537
                                              0 COMRAM    11     8      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (3) _RtccWriteDate                                       13    10      3     672
                                              0 COMRAM    13    10      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (4) _RtccWrOn                                             2     2      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Setup
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_init
       _Delay1KTCYx
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
       _lcd_send_nibble
   _caratula
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
   _lcd_gotoxy
     _lcd_send_byte
       _Delay100TCYx
       _lcd_send_nibble
   _lcd_putrs
     _lcd_putc
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
   _read_keyboard
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _set_vision
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
       _frexp (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___lbtoft (ARG)
         ___ftpack
     ___lbtoft
       ___ftpack
     _checkPass
     _clear
       _lcd_comand
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _is_not_letter
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _lcd_setcursor_vb
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _next_code
       _clear_keyboard
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _not_fill_pass
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lbtoft (ARG)
             ___ftpack
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lbtoft (ARG)
                 ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lbtoft (ARG)
               ___ftpack
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _frexp
     _read_keyboard
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _twinkle
       __delay_s
         ___awdiv
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _read_keyboard
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _write_Date
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     16      78       5       75.0%
BITCOMRAM           5F      0       1       0        1.1%
COMRAM              5F     5B      5F       1      100.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D7       6        0.0%
DATA                 0      0      D7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Sep 06 20:31:12 2016

             ___altoft@exp 003F                          _a 007C                          _b 007E  
                        _c 0080                          _i 0084                          _j 0086  
                        _k 0088              ___altoft@sign 0040                _state_alarm 00D7  
                       l75 2F16                         l76 2F18             ?_lcd_send_byte 0003  
             ___awdiv@sign 0006        ___wmul@multiplicand 0003                lcd_comand@d 0005  
             __CFG_CP0$OFF 000000               ___ftadd@exp1 0027               ___ftadd@exp2 0026  
             ___ftadd@sign 0025                        l220 10B2                        l212 1068  
                      l204 1000                        l221 10AE                        l213 1064  
                      l205 0FFC                        l240 1198                        l232 1128  
                      l224 10E6                        l216 1076                        l208 1034  
                      l241 1194                        l233 1124                        l225 10E2  
                      l217 1072                        l209 1030                        l260 1232  
                      l252 11F0                        l244 11CC                        l236 1164  
                      l228 111A                        l261 122E                        l253 11EC  
                      l245 11C8                        l237 1160                        l229 1116  
                      l256 1224                        l248 11DA                        l265 123C  
                      l257 1220                        l249 11D6                        l580 2C8E  
                      l662 142C                        l587 2F56                        _dia 00CD  
                      _key 005E                        _mes 005C                        _exp 14BE  
                      _log 1E9E                        _pow 1BD6                        wreg 000FE8  
              lcd_gotoxy@x 0006                lcd_gotoxy@y 0005               ___ftdiv@cntr 0012  
             ___ftdiv@sign 0017                       l1102 26DC                       l1131 18BC  
                     l1135 18E6                       l3000 18F4                       l1146 19A8  
                     l1306 2C42                       l1155 19C4                       l3100 22A6  
                     l1316 2D90                       l2214 3070                       l1166 2384  
                     l3022 194C                       l3006 1900                       l1343 1C10  
                     l3024 1958                       l3016 1928                       l3112 276A  
                     l3042 19E2                       l3034 1990                       l3026 1964  
                     l3202 2D84                       l1188 2FC0                       l3052 1A14  
                     l3036 199C                       l3028 196C                       l3108 2738  
                     l1348 1D4A                       l3062 21F4                       l3118 2796  
                     l3150 216E                       l3214 285A                       l3310 1432  
                     l3302 1402                       l1367 1574                       l3400 27C4  
                     l3160 21A0                       l3128 20F6                       l1368 1698  
                     l3232 2D26                       l3304 140A                       l3320 14AE  
                     l4040 16BA                       l3410 27EC                       l3090 2278  
                     l3082 2250                       l3146 215E                       l1378 248A  
                     l3250 12AC                       l3242 127E                       l4042 16C8  
                     l3092 227E                       l3068 221C                       l3164 21B8  
                     l3156 2188                       l3228 2CFC                       l3316 1486  
                     l3244 128C                       l3236 1264                       l3406 27DA  
                     l3422 2816                       l3086 2262                       l3158 2196  
                     l3502 2520                       l3174 2C06                       l3262 132E  
                     l3254 12CA                       l3318 1492                       l4070 17FE  
                     l3408 27E4                       l3344 231E                       l3096 2290  
                     l3176 2C10                       l3248 1296                       l3610 2026  
                     l3426 2826                       l3418 280A                       l3338 22F6  
                     l3506 2530                       l3186 2C36                       l3178 2C18  
                     l3194 2D5C                       l3290 13CA                       l3282 13A2  
                     l3274 1372                       l3266 1334                       l4082 1852  
                     l4058 171E                       l3620 2056                       l3604 1FFC  
                     l3364 235E                       l3460 23F6                       l3508 255C  
                     l3196 2D66                       l3292 13D4                       l3268 1356  
                     l4092 29CC                       l3614 203A                       l2910 2660  
                     l3438 2ED4                       l3374 2392                       l3382 2E92  
                     l3198 2D6E                       l3286 13A6                       l3278 137E  
                     l4078 182E                       l4086 1864                       l3720 1E7A  
                     l2920 26C4                       l2912 266C                       l3472 25AC  
                     l3464 2410                       l3456 23E8                       l3296 13E0  
                     l3394 27B2                       l2922 26D0                       l2914 268C  
                     l2906 2650                       l3474 262A                       l3490 24F8  
                     l3482 24B0                       l3724 1E86                       l3652 20B2  
                     l2940 2D9E                       l2870 3082                       l2934 26F6  
                     l2918 26A4                       l3814 166E                       l2942 2DAA  
                     l2950 2DCE                       l3728 1E92                       l3672 1DBA  
                     l3656 20BE                       l3648 20A6                       l2928 26E4  
                     l3744 2B96                       l2944 2DB6                       l2960 300A  
                     l3682 1E08                       l3746 2BA4                       l3738 2C7A  
                     l2946 2DC2                       l2980 2A6E                       l3780 14D6  
                     l3764 1EDC                       l3588 1244                       l3678 1DF4  
                     l3758 1EBA                       l3688 1E24                       l2896 2FDA  
                     l3792 1546                       l3944 2B34                       l3874 28EA  
                     l2898 2FE0                       l2994 18CA                       l2978 2A60  
                     l3786 150E                       l3970 1C1E                       l3892 2916  
                     l3884 2902                       l3956 2B80                       ?_exp 0049  
                     ?_log 0034                       l3878 28F2                       l3984 1C9A  
                     l3976 1C36                       l3988 1CC2                       ?_pow 0052  
                     STR_1 0F48                       STR_2 0F78                       STR_3 0FA4  
                     STR_4 0FB6                       STR_5 0FB6                       STR_6 0FB6  
                     STR_7 0FB6                       STR_8 0FB6                       STR_9 0FB6  
                     u2210 2AF8                       u3021 22DE                       u2230 2B14  
                     u2208 2AE0                       u3041 2306                       u2401 189C  
                     u2170 2AC6                       u2228 2AFA                       u4020 3054  
                     u3220 24D0                       u2190 2ADE                       u4110 302A  
                     u2248 2B16                       u2601 21DC                       u2188 2AC8  
                     u3180 2402                       u3228 24D2                       u2621 2204  
                     u2710 2114                       u2391 1888                       u4090 1C82  
                     u2715 210C                       u4407 3084                       u2840 2882  
                     u2850 2D1C                       u2691 20DA                       u3900 1550  
                     u2860 2D46                       u4357 2A2E                       u4367 124A  
                     u2848 2884                       u4377 2C80                       u2857 2D12  
                     u4387 303C                       u2867 2D3C                       u4397 3072  
                     u3890 154E           ?_lcd_send_nibble 0001                       _anio 00CB  
                     _flag 02F8                       _main 29C2                       _hora 00D1  
             ___ftpack@arg 0001               ___ftpack@exp 0004                       fsr0h 000FEA  
                     indf0 000FEF                       fsr0l 000FE9                       fsr2h 000FDA  
                     fsr1l 000FE1                       indf2 000FDF                       fsr2l 000FD9  
                     exp@x 0049                       log@x 0034              __CFG_T1DIG$ON 000000  
                     pow@x 0052                       pow@y 0055                       prodh 000FF4  
                     prodl 000FF3                       start 0000              __CFG_IESO$OFF 000000  
             ___ftmul@cntr 001A               ___param_bank 000010               ___ftmul@sign 001B  
             ___fttol@exp1 0036                      ??_exp 004C                      ??_log 0037  
             ___fttol@lval 0032                      ??_pow 0058                _Delay1KTCYx 306E  
            __CFG_PLLDIV$1 000000                      ?_main 0001            __end_of___awdiv 2832  
          __end_of___ftadd 1A3C                      STR_10 0FB6                      STR_11 0FB6  
                    STR_12 0FB6                      STR_20 0F90                      STR_13 0FB6  
                    STR_21 0FAE                      STR_14 0F69                      STR_15 0F9A  
                    STR_16 0F85                      STR_17 0F5E                      STR_18 0FBF  
                    STR_19 0FBB      __size_of_Delay100TCYx 0012            __end_of___ftdiv 23BA  
          __end_of___ftneg 2FCE            __end_of___ftmul 22CE            ___awdiv@divisor 0003  
          __end_of___ftsub 2EBE            __end_of___fttol 21CC            __end_of___lwdiv 2C4C  
          __end_of___lwmod 2D9A            ___awdiv@counter 0005                      _TRISA 000F92  
                    _TRISB 000F93                      _TRISC 000F94               ___lltoft@exp 0011  
           __CFG_FCMEN$OFF 000000                      _Setup 2E32              ___awtoft@sign 000C  
                    _clear 3030            __end_of_dpowers 0F0B                      _floor 23BA  
                    _ldexp 2498                      _frexp 2832                      _mes_d 00C5  
                    _errno 0082                      _mes_u 00C6            __end_of_isdigit 3014  
            ___ftpack@sign 0005             __pbitbssCOMRAM 02F8                      tablat 000FF5  
                    pow@yi 00AF               lcd_putrs@ptr 0009                      status 000FD8  
          __end_of_sprintf 14BE            __end_of_twinkle 2B90                exp@exponent 004F  
  __CFG_DSWDTOSC$INTOSCREF 000000                ldexp@newexp 0037    __size_of_clear_keyboard 0006  
          __initialization 2CA4                log@exponent 0037               _Delay100TCYx 3080  
             __end_of_main 2A3E            ??_lcd_send_byte 0004            _set_vision$2726 00B3  
          _set_vision$2727 00B6                     ??_main 005A              ___fttol@sign1 0031  
            __activetblptr 000002         is_not_letter@input 0002           __end_of_RtccWrOn 30A4  
                   ?_Setup 0001                     ?_clear 0001                     _ADCON0 000FC2  
                   _ADCON1 000FC1                     ?_floor 0041                     ?_ldexp 0034  
                   ?_frexp 0001           __end_of___altoft 2ABA                     _EECON2 000FA7  
                   _ANCON0 000F48                     _ANCON1 000F49           ___awdiv@dividend 0001  
         __end_of___awtoft 2EFA           __end_of___ftpack 2706           __end_of___lbtoft 2FAA  
         __end_of__delay_s 2CA4           __end_of___lltoft 2BF0             __CFG_WDTEN$OFF 000000  
         RtccWriteDate@pDt 0001                     _RTCCFG 000F3F             __CFG_WPCFG$OFF 000000  
         __end_of_caratula 30C8             __CFG_WPDIS$OFF 000000             __CFG_XINST$OFF 000000  
         __end_of_lcd_init 2944           __end_of_lcd_putc 2DE6                     ___ftge 2706  
        ?_lcd_setcursor_vb 0005                     ___wmul 2F5C                  ??___awdiv 0005  
                ??___ftadd 0022             __CFG_STVREN$ON 000000                  ??___ftdiv 000F  
                ??___ftneg 0004                     _diasem 00CF                  ??___ftmul 0013  
                   _anio_d 00BE                  ??___ftsub 002E                  ??___fttol 002C  
                   _anio_u 00BF                  ??___lwdiv 0005                  ??___lwmod 000C  
       ??_lcd_setcursor_vb 0006                     _hora_d 00C3                     _hora_u 00C4  
                   clear_0 2CAA           ___awdiv@quotient 0007                     _minuto 00D3  
    __end_of_RtccWriteDate 1E9E      __end_of_RtccWriteTime 20CA              checkPass@pass 0001  
                   floor@i 0044                     floor@x 0041      ___ftmul@f3_as_product 0017  
         RtccWriteTime@pTm 0001               __pdataCOMRAM 005C                  ??_isdigit 0001  
             __mediumconst 0000                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8     __size_of_is_not_letter 0030                  ??_sprintf 0017  
                ??_twinkle 0025     __size_of_read_keyboard 0296      __end_of_not_fill_pass 305A  
         __end_ofexp@coeff 0F2D           __end_oflog@coeff 0F48                 __accesstop 0060  
  __end_of__initialization 2CF0                 ___altoft@c 0037                 ___ftadd@f1 001C  
               ___ftadd@f2 001F         __size_of_Write_RTC 019A                 ___ftge@ff1 0001  
               ___ftge@ff2 0004               eval_poly@res 0031              ___rparam_used 000001  
               ___ftdiv@f1 0009                 ___ftdiv@f2 000C                 ___ftdiv@f3 0013  
               ___ftneg@f1 0001                 ___awtoft@c 0009                 ___lbtoft@c 000C  
               ___ftmul@f1 000D                 ___ftmul@f2 0010                 ___ftsub@f1 0028  
               ___ftsub@f2 002B                 ___fttol@f1 0028             __pcstackCOMRAM 0001  
            __end_of_Setup 2E7A               __pidataBANK0 30B2         __size_of_checkPass 001C  
            __end_of_clear 3046                 ___lltoft@c 0009              __end_of_floor 2498  
            __end_of_ldexp 256C              __end_of_frexp 28C4            __CFG_DSWDTPS$G2 000000  
          __CFG_OSC$INTOSC 000000                    ??_Setup 000E          lcd_gotoxy@address 0007  
                  ??_clear 0006         __size_of_lcd_putrs 0054                    ??_floor 0044  
                  ??_ldexp 0039                    ??_frexp 0006               sprintf@width 0021  
               __pbssBANK0 0060         __size_of_eval_poly 00D4                 _dia_semana 00C0  
RtccWriteTime@tempHourWDay 000A             _clear_keyboard 30C8                  ?_RtccWrOn 0001  
           lcd_send_byte@n 0003              _is_not_letter 2F2C                    ?___ftge 0001  
                  ?___wmul 0001         __size_of_next_code 004C              _read_keyboard 0FC4  
             ?_Delay1KTCYx 0001                  ?___altoft 0037                  ?___awtoft 0009  
                ?___ftpack 0001                  ?___lbtoft 0009                  ?__delay_s 0009  
                ?___lltoft 0009          __end_of_Write_RTC 1BD6             __delay_s@index 000E  
               _lcd_comand 30A4                  ?_caratula 0001                 _lcd_gotoxy 2FCE  
                  _RTCVALH 000F99                    _RTCVALL 000F98                  ?_lcd_init 0001  
        __end_of_checkPass 3030                  ?_lcd_putc 0001     __end_of_clear_keyboard 30CE  
                  __Hparam 0000                    __Lparam 0000             ?_is_not_letter 0001  
 __size_of_lcd_send_nibble 0076                 ??_RtccWrOn 0001            __size_of___ftge 0096  
                  ___awdiv 279C                    ___ftadd 1878          __end_of_lcd_putrs 2D4E  
                  ___ftdiv 22CE             ?_read_keyboard 0001                    ___ftneg 2FAA  
          __size_of___wmul 0028                    ___ftmul 21CC                    ___ftsub 2E7A  
                  ___fttol 20CA                    ___lwdiv 2BF0                    ___lwmod 2D4E  
             __psmallconst 0F00                 ??___altoft 003B                _RtccTimeVal 0078  
                  __pcinit 2CA4                    _fecha_d 00C1                    _fecha_u 00C2  
               ??___awtoft 000C                 ??___ftpack 0006                 ??___lbtoft 000C  
        __end_of_eval_poly 2640                    __ramtop 0F00                 ??__delay_s 000B  
               ??___lltoft 000D            set_vision@digit 00BB                    __ptext0 29C2  
                  __ptext1 16A6                    __ptext2 2944                    __ptext3 2B30  
                  __ptext4 0FC4                    __ptext5 125A                    __ptext6 2FF2  
                  __ptext7 2D4E                    __ptext8 2BF0                    __ptext9 2CFA  
                  _buffer2 008C            set_vision@input 00BD                  _T1CONbits 000FCD  
                  _dpowers 0F01               __size_of_exp 01E8               __size_of_log 0120  
                  _isdigit 2FF2               __size_of_pow 0182                 ??_caratula 0006  
                  _segundo 008A                    _sprintf 125A                 ??_lcd_init 0005  
               ??_lcd_putc 0008                    _twinkle 2B30       end_of_initialization 2CF0  
        __end_of_next_code 2E32                    exp@sign 0051       lcd_send_byte@address 0004  
            __Lmediumconst 0000            ?_clear_keyboard 0001                    pow@sign 00AE  
             twinkle@input 0025                    postdec1 000FE5                    postdec2 000FDD  
                  postinc0 000FEE                    postinc2 000FDE                 _set_vision 16A6  
    __end_of_lcd_send_byte 2F2C                  _PORTAbits 000F80                  _PORTCbits 000F82  
         __CFG_DSBOREN$OFF 000000                ?_lcd_comand 0001           __CFG_CPUDIV$OSC1 000000  
                _TRISBbits 000F93                ?_lcd_gotoxy 0005  __size_of_lcd_setcursor_vb 0014  
          _LCD_INIT_STRING 0F0B                ___ftdiv@exp 0016           __CFG_IOL1WAY$OFF 000000  
RtccWriteDate@tempDayMonth 000A            ??_is_not_letter 0001        __CFG_MSSP7B_EN$MSK7 000000  
              ___ftmul@exp 0016            ??_read_keyboard 0024           Delay100TCYx@unit 0001  
               _write_Date 2944             __end_of___ftge 279C                __delay_s@it 000C  
           __end_of___wmul 2F84              __pidataCOMRAM 30CE  RtccWriteDate@tempHourWDay 000C  
       not_fill_pass@digit 0001          ??_lcd_send_nibble 0001       __size_of_Delay1KTCYx 0012  
         __CFG_DSWDTEN$OFF 000000                 floor@expon 0047        start_initialization 2CA4  
               eval_poly@d 002B                 eval_poly@n 002D                 eval_poly@x 0028  
               ldexp@value 0034                __end_of_exp 16A6                __end_of_log 1FBE  
              __end_of_pow 1D58                 frexp@value 0001       RtccWriteTime@wasAlrm 0006  
     RtccWriteTime@wasWrEn 0007     __size_of_RtccWriteDate 0146            RtccWriteDate@di 0003  
   __size_of_RtccWriteTime 010C        __size_of_lcd_comand 000E                   ??___ftge 0007  
      __size_of_lcd_gotoxy 0024                   ??___wmul 0005                ?_set_vision 0001  
              __pdataBANK0 00CB          __size_of_RtccWrOn 0012            RtccWriteTime@di 0003  
         __CFG_LPT1OSC$OFF 000000     __size_of_not_fill_pass 0014          __size_of___altoft 007C  
              _ALRMCFGbits 000F91    __end_of_LCD_INIT_STRING 0F0F          __size_of___awtoft 003C  
        __size_of___ftpack 00C6          __size_of___lbtoft 0026          __size_of__delay_s 0058  
        __size_of___lltoft 0060              __pcstackBANK0 00A8                  _Write_RTC 1A3C  
             _isdigit$2359 0002          __size_of_caratula 0008            Delay1KTCYx@unit 0001  
        __size_of_lcd_init 0080                sprintf@flag 001D          __size_of_lcd_putc 004C  
              sprintf@prec 0020                  _checkPass 3014                  __pnvBANK0 00BE  
         ___lwdiv@dividend 0001              ?_Delay100TCYx 0001                   ?___awdiv 0001  
                 ?___ftadd 001C                   ?___ftdiv 0009                   ?___ftneg 0001  
                 ?___ftmul 000D                   ?___ftsub 0028                   ?___fttol 0028  
                 ?___lwdiv 0001                ?_write_Date 0001                   ?___lwmod 0008  
  RtccWriteTime@tempMinSec 0008                  _lcd_putrs 2CFA    lcd_setcursor_vb@visible 0006  
            _RtccWriteDate 1D58                __smallconst 0F00              _RtccWriteTime 1FBE  
                 ?_isdigit 0001                  _eval_poly 256C       __CFG_RTCOSC$T1OSCREF 000000  
         _lcd_setcursor_vb 305A             __size_of_Setup 0048                 ?_Write_RTC 0001  
         ___lwdiv@quotient 0005             __size_of_clear 0016           ??_clear_keyboard 0001  
                 ?_sprintf 000D             __size_of_floor 00DE             __size_of_ldexp 00D4  
           __size_of_frexp 0092                   ?_twinkle 0001             set_vision@pass 00B9  
      __size_of_set_vision 01D2           _RtccAlrmTimeDate 0060              _not_fill_pass 3046  
           ___wmul@product 0005            __delay_s@millis 0009                   _LATAbits 000F89  
                 _LATBbits 000F8A                 ?_checkPass 0001                  _next_code 2DE6  
                 _PIE3bits 000FA3                  _segundo_d 00C9             ??_Delay100TCYx 0001  
                _segundo_u 00CA           __CFG_WDTPS$32768 000000         _is_not_letter$1329 0001  
       RtccWriteDate@wasOn 0005         _Rtcc_read_TimeDate 0070             ?_RtccWriteDate 0001  
               ?_lcd_putrs 0009          ___wmul@multiplier 0001             ?_RtccWriteTime 0001  
                lcd_init@i 0005               ??_lcd_comand 0005                 ?_eval_poly 0028  
                main@input 005B                  lcd_putc@c 0008               ??_lcd_gotoxy 0006  
                copy_data0 2CC6             ?_not_fill_pass 0001        __size_of_write_Date 007E  
               ?_next_code 0008                  frexp@eptr 0004            _lcd_send_nibble 2ABA  
                 __Hrparam 0000                   _RtccDate 00A0                   __Lrparam 0000  
                 _RtccTime 00A4                   _RtccWrOn 3092         __end_of_lcd_comand 30B2  
       __end_of_lcd_gotoxy 2FF2           __size_of___awdiv 0096           __size_of___ftadd 01C4  
         __size_of___ftdiv 00EC           __size_of___ftneg 0024                   ___altoft 2A3E  
         __size_of___ftmul 0102           __size_of___ftsub 0044           __size_of___fttol 0102  
         __size_of___lwdiv 005C           __size_of___lwmod 004C                   ___awtoft 2EBE  
                 ___ftpack 2640                   ___lbtoft 2F84                   __delay_s 2C4C  
                 ___lltoft 2B90               _RtccTimeDate 0068                   _exp$2730 004C  
               sprintf@val 001E                   _caratula 30C0           __size_of_isdigit 0022  
          ___lwdiv@divisor 0003                ??_Write_RTC 000E            ___lwdiv@counter 0007  
                 __ptext10 2D9A                   __ptext11 2C4C                   __ptext20 2A3E  
                 __ptext12 1BD6                   __ptext21 256C                   __ptext13 1E9E  
                 __ptext30 3046                   __ptext22 2F5C                   __ptext14 14BE  
                 __ptext31 2DE6                   __ptext23 21CC                   __ptext15 2498  
                 __ptext40 30C0                   __ptext32 2FCE                   __ptext24 2E7A  
                 __ptext16 23BA                   __ptext41 2E32                   __ptext33 30C8  
                 __ptext25 1878                   __ptext17 2832                   __ptext50 1FBE  
                 __ptext42 28C4                   __ptext34 305A                   __ptext26 2FAA  
                 __ptext18 20CA                   __ptext51 1D58                   __ptext43 306E  
                 __ptext35 2F2C                   __ptext27 22CE                   __ptext19 2706  
                 __ptext52 3092                   __ptext44 30A4                   __ptext36 3030  
                 __ptext28 2EBE                   __ptext45 2EFA                   __ptext37 3014  
                 __ptext29 2B90                   __ptext46 2ABA                   __ptext38 2F84  
                 __ptext47 3080                   __ptext39 2640                   __ptext48 1A3C  
                 __ptext49 279C                   _lcd_init 28C4                   _lcd_putc 2D9A  
                 _pow$2728 00A8                   _pow$2729 00AB             next_code@digit 0008  
         __size_of_sprintf 0264           __size_of_twinkle 0060             next_code@input 000A  
   __size_of_lcd_send_byte 0032              __size_of_main 007C                ??_checkPass 0003  
                 _minuto_d 00C7                   _minuto_u 00C8                   _password 00D5  
    __end_of_is_not_letter 2F5C               ??_set_vision 0058      __end_of_read_keyboard 125A  
            ??_Delay1KTCYx 0001            ??_RtccWriteDate 0004            ??_RtccWriteTime 0004  
              ??_lcd_putrs 000B                   exp@coeff 0F0F                   log@coeff 0F2D  
              _OSCTUNEbits 000F9B                 _INTCONbits 000FF2                ??_eval_poly 002F  
       RtccWriteTime@wasOn 0005       __end_of_Delay100TCYx 3092                   isdigit@c 0003  
          ??_not_fill_pass 0003                  sprintf@ap 001B    __end_of_lcd_send_nibble 2B30  
                sprintf@sp 000D         __end_of_set_vision 1878      lcd_setcursor_vb@blink 0005  
         ___lwmod@dividend 0008                ??_next_code 000C                 _OSCCONbits 000FD3  
 __end_of_lcd_setcursor_vb 306E      RtccWriteDate@tempYear 0007               ??_write_Date 0024  
            _lcd_send_byte 2EFA                 _RTCCFGbits 000F3F                   sprintf@c 0023  
                 sprintf@f 000F            ___lwmod@divisor 000A        __end_of_Delay1KTCYx 3080  
          ___lwmod@counter 000C       RtccWriteDate@wasAlrm 0006       RtccWriteDate@wasWrEn 0009  
       __end_of_write_Date 29C2      lcd_send_nibble@nibble 0002  
