

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Sep 22 19:34:35 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	text64,global,reloc=2,class=CODE,delta=1
    79                           	psect	text65,global,reloc=2,class=CODE,delta=1
    80                           	psect	text66,global,reloc=2,class=CODE,delta=1
    81                           	psect	text67,global,reloc=2,class=CODE,delta=1
    82                           	psect	text68,global,reloc=2,class=CODE,delta=1
    83                           	psect	text69,global,reloc=2,class=CODE,delta=1
    84                           	psect	text70,global,reloc=2,class=CODE,delta=1
    85                           	psect	text71,global,reloc=2,class=CODE,delta=1
    86                           	psect	text72,global,reloc=2,class=CODE,delta=1
    87                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    88                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    89  0000                     
    90                           	psect	idataBANK0
    91  003A86                     __pidataBANK0:
    92                           	opt stack 0
    93                           
    94                           ;initializer for _anio
    95  003A86  000F               	dw	15
    96                           
    97                           ;initializer for _dia
    98  003A88  0008               	dw	8
    99                           
   100                           ;initializer for _diasem
   101  003A8A  0003               	dw	3
   102                           
   103                           ;initializer for _hora
   104  003A8C  0012               	dw	18
   105                           
   106                           ;initializer for _mes
   107  003A8E  0009               	dw	9
   108                           
   109                           ;initializer for _minuto
   110  003A90  001E               	dw	30
   111                           
   112                           ;initializer for _password
   113  003A92  04D2               	dw	1234
   114                           
   115                           ;initializer for _time_to_stop
   116  003A94  27C0               	dw	10176
   117                           
   118                           ;initializer for _key
   119  003A96  12                 	db	18
   120                           
   121                           ;initializer for _menu
   122  003A97  01                 	db	1
   123                           
   124                           ;initializer for _state_alarm
   125  003A98  01                 	db	1
   126                           
   127                           	psect	smallconst
   128  000F00                     __psmallconst:
   129                           	opt stack 0
   130  000F00  00                 	db	0
   131  000F01                     _dpowers:
   132                           	opt stack 0
   133  000F01  0001               	dw	1
   134  000F03  000A               	dw	10
   135  000F05  0064               	dw	100
   136  000F07  03E8               	dw	1000
   137  000F09  2710               	dw	10000
   138  000F0B                     __end_of_dpowers:
   139                           	opt stack 0
   140  000F0B                     _LCD_INIT_STRING:
   141                           	opt stack 0
   142  000F0B  28                 	db	40
   143  000F0C  0C                 	db	12
   144  000F0D  01                 	db	1
   145  000F0E  06                 	db	6
   146  000F0F                     __end_of_LCD_INIT_STRING:
   147                           	opt stack 0
   148  000F0F                     exp@coeff:
   149                           	opt stack 0
   150  000F0F  00                 	db	0
   151  000F10  80                 	db	128
   152  000F11  3F                 	db	63
   153  000F12  72                 	db	114
   154  000F13  31                 	db	49
   155  000F14  3F                 	db	63
   156  000F15  FE                 	db	254
   157  000F16  75                 	db	117
   158  000F17  3E                 	db	62
   159  000F18  58                 	db	88
   160  000F19  63                 	db	99
   161  000F1A  3D                 	db	61
   162  000F1B  95                 	db	149
   163  000F1C  1D                 	db	29
   164  000F1D  3C                 	db	60
   165  000F1E  C5                 	db	197
   166  000F1F  AE                 	db	174
   167  000F20  3A                 	db	58
   168  000F21  79                 	db	121
   169  000F22  21                 	db	33
   170  000F23  39                 	db	57
   171  000F24  94                 	db	148
   172  000F25  80                 	db	128
   173  000F26  37                 	db	55
   174  000F27  93                 	db	147
   175  000F28  A7                 	db	167
   176  000F29  35                 	db	53
   177  000F2A  56                 	db	86
   178  000F2B  15                 	db	21
   179  000F2C  34                 	db	52
   180  000F2D                     __end_ofexp@coeff:
   181                           	opt stack 0
   182  000F2D                     log@coeff:
   183                           	opt stack 0
   184  000F2D  00                 	db	0
   185  000F2E  00                 	db	0
   186  000F2F  00                 	db	0
   187  000F30  00                 	db	0
   188  000F31  80                 	db	128
   189  000F32  3F                 	db	63
   190  000F33  F0                 	db	240
   191  000F34  FF                 	db	255
   192  000F35  BE                 	db	190
   193  000F36  E2                 	db	226
   194  000F37  A9                 	db	169
   195  000F38  3E                 	db	62
   196  000F39  83                 	db	131
   197  000F3A  76                 	db	118
   198  000F3B  BE                 	db	190
   199  000F3C  AE                 	db	174
   200  000F3D  2B                 	db	43
   201  000F3E  3E                 	db	62
   202  000F3F  3C                 	db	60
   203  000F40  C3                 	db	195
   204  000F41  BD                 	db	189
   205  000F42  D2                 	db	210
   206  000F43  13                 	db	19
   207  000F44  3D                 	db	61
   208  000F45  78                 	db	120
   209  000F46  D3                 	db	211
   210  000F47  BB                 	db	187
   211  000F48                     __end_oflog@coeff:
   212                           	opt stack 0
   213  000F48                     STR_22:
   214                           
   215                           ; BSR set to: 15
   216  000F48  6E                 	db	110	;'n'
   217  000F49  6F                 	db	111	;'o'
   218  000F4A  74                 	db	116	;'t'
   219  000F4B  68                 	db	104	;'h'
   220  000F4C  69                 	db	105	;'i'
   221  000F4D  6E                 	db	110	;'n'
   222  000F4E  67                 	db	103	;'g'
   223  000F4F  20                 	db	32
   224  000F50  63                 	db	99	;'c'
   225  000F51  68                 	db	104	;'h'
   226  000F52  61                 	db	97	;'a'
   227  000F53  6E                 	db	110	;'n'
   228  000F54  67                 	db	103	;'g'
   229  000F55  65                 	db	101	;'e'
   230  000F56  64                 	db	100	;'d'
   231  000F57  00                 	db	0
   232  000F58                     STR_21:
   233                           
   234                           ; BSR set to: 15
   235  000F58  6F                 	db	111	;'o'
   236  000F59  6C                 	db	108	;'l'
   237  000F5A  64                 	db	100	;'d'
   238  000F5B  20                 	db	32
   239  000F5C  70                 	db	112	;'p'
   240  000F5D  61                 	db	97	;'a'
   241  000F5E  73                 	db	115	;'s'
   242  000F5F  73                 	db	115	;'s'
   243  000F60  20                 	db	32
   244  000F61  77                 	db	119	;'w'
   245  000F62  72                 	db	114	;'r'
   246  000F63  6F                 	db	111	;'o'
   247  000F64  6E                 	db	110	;'n'
   248  000F65  67                 	db	103	;'g'
   249  000F66  00                 	db	0
   250  000F67                     STR_11:
   251                           
   252                           ; BSR set to: 15
   253  000F67  25                 	db	37
   254  000F68  30                 	db	48	;'0'
   255  000F69  32                 	db	50	;'2'
   256  000F6A  75                 	db	117	;'u'
   257  000F6B  2F                 	db	47
   258  000F6C  25                 	db	37
   259  000F6D  30                 	db	48	;'0'
   260  000F6E  32                 	db	50	;'2'
   261  000F6F  75                 	db	117	;'u'
   262  000F70  2F                 	db	47
   263  000F71  25                 	db	37
   264  000F72  30                 	db	48	;'0'
   265  000F73  32                 	db	50	;'2'
   266  000F74  75                 	db	117	;'u'
   267  000F75  00                 	db	0
   268  000F76                     STR_23:
   269                           
   270                           ; BSR set to: 15
   271  000F76  4F                 	db	79	;'O'
   272  000F77  6C                 	db	108	;'l'
   273  000F78  64                 	db	100	;'d'
   274  000F79  20                 	db	32
   275  000F7A  70                 	db	112	;'p'
   276  000F7B  61                 	db	97	;'a'
   277  000F7C  73                 	db	115	;'s'
   278  000F7D  73                 	db	115	;'s'
   279  000F7E  3A                 	db	58	;':'
   280  000F7F  5F                 	db	95	;'_'
   281  000F80  5F                 	db	95	;'_'
   282  000F81  5F                 	db	95	;'_'
   283  000F82  5F                 	db	95	;'_'
   284  000F83  00                 	db	0
   285  000F84                     STR_24:
   286                           
   287                           ; BSR set to: 15
   288  000F84  4E                 	db	78	;'N'
   289  000F85  65                 	db	101	;'e'
   290  000F86  77                 	db	119	;'w'
   291  000F87  20                 	db	32
   292  000F88  70                 	db	112	;'p'
   293  000F89  61                 	db	97	;'a'
   294  000F8A  73                 	db	115	;'s'
   295  000F8B  73                 	db	115	;'s'
   296  000F8C  3A                 	db	58	;':'
   297  000F8D  5F                 	db	95	;'_'
   298  000F8E  5F                 	db	95	;'_'
   299  000F8F  5F                 	db	95	;'_'
   300  000F90  5F                 	db	95	;'_'
   301  000F91  00                 	db	0
   302  000F92                     STR_19:
   303                           
   304                           ; BSR set to: 15
   305  000F92  70                 	db	112	;'p'
   306  000F93  61                 	db	97	;'a'
   307  000F94  73                 	db	115	;'s'
   308  000F95  73                 	db	115	;'s'
   309  000F96  20                 	db	32
   310  000F97  73                 	db	115	;'s'
   311  000F98  75                 	db	117	;'u'
   312  000F99  63                 	db	99	;'c'
   313  000F9A  63                 	db	99	;'c'
   314  000F9B  65                 	db	101	;'e'
   315  000F9C  73                 	db	115	;'s'
   316  000F9D  73                 	db	115	;'s'
   317  000F9E  00                 	db	0
   318  000F9F                     STR_15:
   319                           
   320                           ; BSR set to: 15
   321  000F9F  20                 	db	32
   322  000FA0  20                 	db	32
   323  000FA1  20                 	db	32
   324  000FA2  20                 	db	32
   325  000FA3  20                 	db	32
   326  000FA4  20                 	db	32
   327  000FA5  20                 	db	32
   328  000FA6  20                 	db	32
   329  000FA7  20                 	db	32
   330  000FA8  20                 	db	32
   331  000FA9  00                 	db	0
   332  000FAA                     STR_14:
   333                           
   334                           ; BSR set to: 15
   335  000FAA  57                 	db	87	;'W'
   336  000FAB  41                 	db	65	;'A'
   337  000FAC  52                 	db	82	;'R'
   338  000FAD  4E                 	db	78	;'N'
   339  000FAE  49                 	db	73	;'I'
   340  000FAF  4E                 	db	78	;'N'
   341  000FB0  47                 	db	71	;'G'
   342  000FB1  21                 	db	33
   343  000FB2  21                 	db	33
   344  000FB3  21                 	db	33
   345  000FB4  00                 	db	0
   346  000FB5                     STR_12:
   347                           
   348                           ; BSR set to: 15
   349  000FB5  25                 	db	37
   350  000FB6  30                 	db	48	;'0'
   351  000FB7  32                 	db	50	;'2'
   352  000FB8  75                 	db	117	;'u'
   353  000FB9  3A                 	db	58	;':'
   354  000FBA  25                 	db	37
   355  000FBB  30                 	db	48	;'0'
   356  000FBC  32                 	db	50	;'2'
   357  000FBD  75                 	db	117	;'u'
   358  000FBE  00                 	db	0
   359  000FBF                     STR_25:
   360                           
   361                           ; BSR set to: 15
   362  000FBF  53                 	db	83	;'S'
   363  000FC0  65                 	db	101	;'e'
   364  000FC1  6E                 	db	110	;'n'
   365  000FC2  73                 	db	115	;'s'
   366  000FC3  6F                 	db	111	;'o'
   367  000FC4  72                 	db	114	;'r'
   368  000FC5  3A                 	db	58	;':'
   369  000FC6  20                 	db	32
   370  000FC7  00                 	db	0
   371  000FC8                     STR_18:
   372                           
   373                           ; BSR set to: 15
   374  000FC8  54                 	db	84	;'T'
   375  000FC9  52                 	db	82	;'R'
   376  000FCA  49                 	db	73	;'I'
   377  000FCB  47                 	db	71	;'G'
   378  000FCC  47                 	db	71	;'G'
   379  000FCD  45                 	db	69	;'E'
   380  000FCE  44                 	db	68	;'D'
   381  000FCF  00                 	db	0
   382  000FD0                     STR_27:
   383                           
   384                           ; BSR set to: 15
   385  000FD0  44                 	db	68	;'D'
   386  000FD1  61                 	db	97	;'a'
   387  000FD2  74                 	db	116	;'t'
   388  000FD3  65                 	db	101	;'e'
   389  000FD4  3A                 	db	58	;':'
   390  000FD5  00                 	db	0
   391  000FD6                     STR_1:
   392                           
   393                           ; BSR set to: 15
   394  000FD6  25                 	db	37
   395  000FD7  30                 	db	48	;'0'
   396  000FD8  31                 	db	49	;'1'
   397  000FD9  75                 	db	117	;'u'
   398  000FDA  00                 	db	0
   399  000FDB                     STR_17:
   400                           
   401                           ; BSR set to: 15
   402  000FDB  4F                 	db	79	;'O'
   403  000FDC  46                 	db	70	;'F'
   404  000FDD  46                 	db	70	;'F'
   405  000FDE  00                 	db	0
   406  000FDF                     STR_16:
   407                           
   408                           ; BSR set to: 15
   409  000FDF  4F                 	db	79	;'O'
   410  000FE0  4E                 	db	78	;'N'
   411  000FE1  00                 	db	0
   412  0000                     
   413                           ; #config settings
   414  000FE2  00                 	db	0	; dummy byte at the end
   415  0000                     
   416                           	psect	nvBANK0
   417  0000E0                     __pnvBANK0:
   418                           	opt stack 0
   419  0000E0                     _anio_d:
   420                           	opt stack 0
   421  0000E0                     	ds	1
   422  0000E1                     _anio_u:
   423                           	opt stack 0
   424  0000E1                     	ds	1
   425  0000E2                     _dia_semana:
   426                           	opt stack 0
   427  0000E2                     	ds	1
   428  0000E3                     _fecha_d:
   429                           	opt stack 0
   430  0000E3                     	ds	1
   431  0000E4                     _fecha_u:
   432                           	opt stack 0
   433  0000E4                     	ds	1
   434  0000E5                     _hora_d:
   435                           	opt stack 0
   436  0000E5                     	ds	1
   437  0000E6                     _hora_u:
   438                           	opt stack 0
   439  0000E6                     	ds	1
   440  0000E7                     _mes_d:
   441                           	opt stack 0
   442  0000E7                     	ds	1
   443  0000E8                     _mes_u:
   444                           	opt stack 0
   445  0000E8                     	ds	1
   446  0000E9                     _minuto_d:
   447                           	opt stack 0
   448  0000E9                     	ds	1
   449  0000EA                     _minuto_u:
   450                           	opt stack 0
   451  0000EA                     	ds	1
   452  0000EB                     _segundo_d:
   453                           	opt stack 0
   454  0000EB                     	ds	1
   455  0000EC                     _segundo_u:
   456                           	opt stack 0
   457  0000EC                     	ds	1
   458  0000                     _ANCON0	set	3912
   459  0000                     _ANCON1	set	3913
   460  0000                     _RTCCFG	set	3903
   461  0000                     _RTCCFGbits	set	3903
   462  0000                     _ADCON0	set	4034
   463  0000                     _ADCON1	set	4033
   464  0000                     _ALRMCFGbits	set	3985
   465  0000                     _EECON2	set	4007
   466  0000                     _INTCONbits	set	4082
   467  0000                     _LATAbits	set	3977
   468  0000                     _LATBbits	set	3978
   469  0000                     _OSCCONbits	set	4051
   470  0000                     _OSCTUNEbits	set	3995
   471  0000                     _PIE3bits	set	4003
   472  0000                     _PORTAbits	set	3968
   473  0000                     _PORTCbits	set	3970
   474  0000                     _RTCVALH	set	3993
   475  0000                     _RTCVALL	set	3992
   476  0000                     _T1CONbits	set	4045
   477  0000                     _TRISA	set	3986
   478  0000                     _TRISB	set	3987
   479  0000                     _TRISBbits	set	3987
   480  0000                     _TRISC	set	3988
   481                           
   482                           	psect	cinit
   483  0037F8                     __pcinit:
   484                           	opt stack 0
   485  0037F8                     start_initialization:
   486                           	opt stack 0
   487  0037F8                     __initialization:
   488                           	opt stack 0
   489                           
   490                           ; Clear objects allocated to BITBANK0 (1 bytes)
   491  0037F8  0100               	movlb	0
   492  0037FA  6BED               	clrf	(__pbitbssBANK0/(0+8))& (0+255),b
   493                           
   494                           ; Clear objects allocated to BANK0 (83 bytes)
   495  0037FC  EE00  F060         	lfsr	0,__pbssBANK0
   496  003800  0E53               	movlw	83
   497  003802                     clear_0:
   498  003802  6AEE               	clrf	postinc0,c
   499  003804  06E8               	decf	wreg,f,c
   500  003806  E1FD               	bnz	clear_0
   501                           
   502                           ; Initialize objects allocated to BANK0 (19 bytes)
   503                           ; load TBLPTR registers with __pidataBANK0
   504  003808  0E86               	movlw	low __pidataBANK0
   505  00380A  6EF6               	movwf	tblptrl,c
   506  00380C  0E3A               	movlw	high __pidataBANK0
   507  00380E  6EF7               	movwf	tblptrh,c
   508  003810  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   509  003812  6EF8               	movwf	tblptru,c
   510  003814  EE00  F0CD         	lfsr	0,__pdataBANK0
   511  003818  EE10 F013          	lfsr	1,19
   512  00381C                     copy_data0:
   513  00381C  0009               	tblrd		*+
   514  00381E  CFF5 FFEE          	movff	tablat,postinc0
   515  003822  50E5               	movf	postdec1,w,c
   516  003824  50E1               	movf	fsr1l,w,c
   517  003826  E1FA               	bnz	copy_data0
   518  003828                     end_of_initialization:
   519                           	opt stack 0
   520  003828                     __end_of__initialization:
   521                           	opt stack 0
   522  003828  0E00               	movlw	low (__Lmediumconst shr (0+16))
   523  00382A  6EF8               	movwf	tblptru,c
   524  00382C  0100               	movlb	0
   525  00382E  EF19  F01C         	goto	_main	;jump to C main() function
   526                           tblptru	equ	0xFF8
   527                           tblptrh	equ	0xFF7
   528                           tblptrl	equ	0xFF6
   529                           tablat	equ	0xFF5
   530                           postinc0	equ	0xFEE
   531                           wreg	equ	0xFE8
   532                           postdec1	equ	0xFE5
   533                           fsr1l	equ	0xFE1
   534                           
   535                           	psect	bitbssBANK0
   536  000768                     __pbitbssBANK0:
   537                           	opt stack 0
   538  000768                     _flag:
   539                           	opt stack 0
   540  000768                     	ds	1
   541                           tblptru	equ	0xFF8
   542                           tblptrh	equ	0xFF7
   543                           tblptrl	equ	0xFF6
   544                           tablat	equ	0xFF5
   545                           postinc0	equ	0xFEE
   546                           wreg	equ	0xFE8
   547                           postdec1	equ	0xFE5
   548                           fsr1l	equ	0xFE1
   549                           
   550                           	psect	bssBANK0
   551  000060                     __pbssBANK0:
   552                           	opt stack 0
   553  000060                     _RtccAlrmTimeDate:
   554                           	opt stack 0
   555  000060                     	ds	8
   556  000068                     _RtccTimeDate:
   557                           	opt stack 0
   558  000068                     	ds	8
   559  000070                     _Rtcc_read_TimeDate:
   560                           	opt stack 0
   561  000070                     	ds	8
   562  000078                     _RtccTimeVal:
   563                           	opt stack 0
   564  000078                     	ds	4
   565  00007C                     _a:
   566                           	opt stack 0
   567  00007C                     	ds	2
   568  00007E                     _b:
   569                           	opt stack 0
   570  00007E                     	ds	2
   571  000080                     _c:
   572                           	opt stack 0
   573  000080                     	ds	2
   574  000082                     _diaDisparo:
   575                           	opt stack 0
   576  000082                     	ds	2
   577  000084                     _errno:
   578                           	opt stack 0
   579  000084                     	ds	2
   580  000086                     _horaDisparo:
   581                           	opt stack 0
   582  000086                     	ds	2
   583  000088                     _i:
   584                           	opt stack 0
   585  000088                     	ds	2
   586  00008A                     _j:
   587                           	opt stack 0
   588  00008A                     	ds	2
   589  00008C                     _k:
   590                           	opt stack 0
   591  00008C                     	ds	2
   592  00008E                     _mesDisparo:
   593                           	opt stack 0
   594  00008E                     	ds	2
   595  000090                     _minDisparo:
   596                           	opt stack 0
   597  000090                     	ds	2
   598  000092                     _newpass:
   599                           	opt stack 0
   600  000092                     	ds	2
   601  000094                     _segundo:
   602                           	opt stack 0
   603  000094                     	ds	2
   604  000096                     _sensorDisparado:
   605                           	opt stack 0
   606  000096                     	ds	1
   607  000097                     _buffer2:
   608                           	opt stack 0
   609  000097                     	ds	20
   610  0000AB                     _RtccDate:
   611                           	opt stack 0
   612  0000AB                     	ds	4
   613  0000AF                     _RtccTime:
   614                           	opt stack 0
   615  0000AF                     	ds	4
   616                           tblptru	equ	0xFF8
   617                           tblptrh	equ	0xFF7
   618                           tblptrl	equ	0xFF6
   619                           tablat	equ	0xFF5
   620                           postinc0	equ	0xFEE
   621                           wreg	equ	0xFE8
   622                           postdec1	equ	0xFE5
   623                           fsr1l	equ	0xFE1
   624                           
   625                           	psect	dataBANK0
   626  0000CD                     __pdataBANK0:
   627                           	opt stack 0
   628  0000CD                     _anio:
   629                           	opt stack 0
   630  0000CD                     	ds	2
   631  0000CF                     _dia:
   632                           	opt stack 0
   633  0000CF                     	ds	2
   634  0000D1                     _diasem:
   635                           	opt stack 0
   636  0000D1                     	ds	2
   637  0000D3                     _hora:
   638                           	opt stack 0
   639  0000D3                     	ds	2
   640  0000D5                     _mes:
   641                           	opt stack 0
   642  0000D5                     	ds	2
   643  0000D7                     _minuto:
   644                           	opt stack 0
   645  0000D7                     	ds	2
   646  0000D9                     _password:
   647                           	opt stack 0
   648  0000D9                     	ds	2
   649  0000DB                     _time_to_stop:
   650                           	opt stack 0
   651  0000DB                     	ds	2
   652  0000DD                     _key:
   653                           	opt stack 0
   654  0000DD                     	ds	1
   655  0000DE                     _menu:
   656                           	opt stack 0
   657  0000DE                     	ds	1
   658  0000DF                     _state_alarm:
   659                           	opt stack 0
   660  0000DF                     	ds	1
   661                           tblptru	equ	0xFF8
   662                           tblptrh	equ	0xFF7
   663                           tblptrl	equ	0xFF6
   664                           tablat	equ	0xFF5
   665                           postinc0	equ	0xFEE
   666                           wreg	equ	0xFE8
   667                           postdec1	equ	0xFE5
   668                           fsr1l	equ	0xFE1
   669                           
   670                           	psect	cstackBANK0
   671  0000B3                     __pcstackBANK0:
   672                           	opt stack 0
   673  0000B3                     _pow$3190:
   674                           	opt stack 0
   675                           
   676                           ; 3 bytes @ 0x0
   677  0000B3                     	ds	3
   678  0000B6                     _pow$3191:
   679                           	opt stack 0
   680                           
   681                           ; 3 bytes @ 0x3
   682  0000B6                     	ds	3
   683  0000B9                     pow@sign:
   684                           	opt stack 0
   685                           
   686                           ; 1 bytes @ 0x6
   687  0000B9                     	ds	1
   688  0000BA                     pow@yi:
   689                           	opt stack 0
   690                           
   691                           ; 4 bytes @ 0x7
   692  0000BA                     	ds	4
   693  0000BE                     _obtain_pass$3184:
   694                           	opt stack 0
   695  0000BE                     _input_old_pass$3186:
   696                           	opt stack 0
   697  0000BE                     _input_new_pass$3188:
   698                           	opt stack 0
   699                           
   700                           ; 3 bytes @ 0xB
   701  0000BE                     	ds	3
   702  0000C1                     _obtain_pass$3185:
   703                           	opt stack 0
   704  0000C1                     _input_old_pass$3187:
   705                           	opt stack 0
   706  0000C1                     _input_new_pass$3189:
   707                           	opt stack 0
   708                           
   709                           ; 3 bytes @ 0xE
   710  0000C1                     	ds	3
   711  0000C4                     input_new_pass@input:
   712                           	opt stack 0
   713  0000C4                     input_password@pass:
   714                           	opt stack 0
   715  0000C4                     input_old_pass@pass:
   716                           	opt stack 0
   717                           
   718                           ; 2 bytes @ 0x11
   719  0000C4                     	ds	1
   720  0000C5                     input_new_pass@digit:
   721                           	opt stack 0
   722                           
   723                           ; 2 bytes @ 0x12
   724  0000C5                     	ds	1
   725  0000C6                     input_password@input:
   726                           	opt stack 0
   727  0000C6                     input_old_pass@input:
   728                           	opt stack 0
   729                           
   730                           ; 1 bytes @ 0x13
   731  0000C6                     	ds	1
   732  0000C7                     input_password@digit:
   733                           	opt stack 0
   734  0000C7                     input_old_pass@digit:
   735                           	opt stack 0
   736                           
   737                           ; 2 bytes @ 0x14
   738  0000C7                     	ds	2
   739  0000C9                     twinkle@input:
   740                           	opt stack 0
   741                           
   742                           ; 1 bytes @ 0x16
   743  0000C9                     	ds	1
   744  0000CA                     twinkle@time:
   745                           	opt stack 0
   746                           
   747                           ; 2 bytes @ 0x17
   748  0000CA                     	ds	2
   749  0000CC                     ??_main:
   750                           
   751                           ; 0 bytes @ 0x19
   752  0000CC                     	ds	1
   753                           tblptru	equ	0xFF8
   754                           tblptrh	equ	0xFF7
   755                           tblptrl	equ	0xFF6
   756                           tablat	equ	0xFF5
   757                           postinc0	equ	0xFEE
   758                           wreg	equ	0xFE8
   759                           postdec1	equ	0xFE5
   760                           fsr1l	equ	0xFE1
   761                           
   762                           	psect	cstackCOMRAM
   763  000001                     __pcstackCOMRAM:
   764                           	opt stack 0
   765  000001                     ??_isdigit:
   766  000001                     ??_lcd_send_nibble:
   767  000001                     ?___wmul:
   768                           	opt stack 0
   769  000001                     ?___awdiv:
   770                           	opt stack 0
   771  000001                     ?___lwdiv:
   772                           	opt stack 0
   773  000001                     ?___ftpack:
   774                           	opt stack 0
   775  000001                     ?_frexp:
   776                           	opt stack 0
   777  000001                     ?___ftneg:
   778                           	opt stack 0
   779  000001                     _is_not_letter$1409:
   780                           	opt stack 0
   781  000001                     Delay100TCYx@unit:
   782                           	opt stack 0
   783  000001                     Delay1KTCYx@unit:
   784                           	opt stack 0
   785  000001                     evalueChanceOfRaw@x:
   786                           	opt stack 0
   787  000001                     not_fill_pass@digit:
   788                           	opt stack 0
   789  000001                     checkPass@pass:
   790                           	opt stack 0
   791  000001                     changePass@pass:
   792                           	opt stack 0
   793  000001                     RtccReadDate@pDt:
   794                           	opt stack 0
   795  000001                     RtccReadTime@pTm:
   796                           	opt stack 0
   797  000001                     RtccWriteDate@pDt:
   798                           	opt stack 0
   799  000001                     RtccWriteTime@pTm:
   800                           	opt stack 0
   801  000001                     ___wmul@multiplier:
   802                           	opt stack 0
   803  000001                     ___awdiv@dividend:
   804                           	opt stack 0
   805  000001                     ___lwdiv@dividend:
   806                           	opt stack 0
   807  000001                     ___ftpack@arg:
   808                           	opt stack 0
   809  000001                     ___ftge@ff1:
   810                           	opt stack 0
   811  000001                     ___ftneg@f1:
   812                           	opt stack 0
   813  000001                     frexp@value:
   814                           	opt stack 0
   815                           
   816                           ; 3 bytes @ 0x0
   817  000001                     	ds	1
   818  000002                     lcd_send_nibble@nibble:
   819                           	opt stack 0
   820  000002                     is_not_letter@input:
   821                           	opt stack 0
   822  000002                     _isdigit$2793:
   823                           	opt stack 0
   824                           
   825                           ; 1 bytes @ 0x1
   826  000002                     	ds	1
   827  000003                     lcd_send_byte@n:
   828                           	opt stack 0
   829  000003                     RtccWriteDate@di:
   830                           	opt stack 0
   831  000003                     RtccWriteTime@di:
   832                           	opt stack 0
   833  000003                     isdigit@c:
   834                           	opt stack 0
   835  000003                     evalueChanceOfRaw@y:
   836                           	opt stack 0
   837  000003                     review_code@digit:
   838                           	opt stack 0
   839  000003                     ___wmul@multiplicand:
   840                           	opt stack 0
   841  000003                     ___awdiv@divisor:
   842                           	opt stack 0
   843  000003                     ___lwdiv@divisor:
   844                           	opt stack 0
   845  000003                     RtccReadDate@rTD1:
   846                           	opt stack 0
   847  000003                     RtccReadTime@rTD1:
   848                           	opt stack 0
   849                           
   850                           ; 8 bytes @ 0x2
   851  000003                     	ds	1
   852  000004                     lcd_send_byte@address:
   853                           	opt stack 0
   854  000004                     ___ftpack@exp:
   855                           	opt stack 0
   856  000004                     frexp@eptr:
   857                           	opt stack 0
   858  000004                     ___ftge@ff2:
   859                           	opt stack 0
   860                           
   861                           ; 3 bytes @ 0x3
   862  000004                     	ds	1
   863  000005                     lcd_init@i:
   864                           	opt stack 0
   865  000005                     lcd_gotoxy@y:
   866                           	opt stack 0
   867  000005                     lcd_comand@d:
   868                           	opt stack 0
   869  000005                     lcd_setcursor_vb@blink:
   870                           	opt stack 0
   871  000005                     RtccWriteDate@wasOn:
   872                           	opt stack 0
   873  000005                     RtccWriteTime@wasOn:
   874                           	opt stack 0
   875  000005                     ___awdiv@counter:
   876                           	opt stack 0
   877  000005                     ___ftpack@sign:
   878                           	opt stack 0
   879  000005                     review_code@pass:
   880                           	opt stack 0
   881  000005                     ___wmul@product:
   882                           	opt stack 0
   883  000005                     ___lwdiv@quotient:
   884                           	opt stack 0
   885                           
   886                           ; 2 bytes @ 0x4
   887  000005                     	ds	1
   888  000006                     ??___ftpack:
   889  000006                     ??_frexp:
   890  000006                     ??_clear:
   891  000006                     lcd_gotoxy@x:
   892                           	opt stack 0
   893  000006                     lcd_setcursor_vb@visible:
   894                           	opt stack 0
   895  000006                     RtccWriteDate@wasAlrm:
   896                           	opt stack 0
   897  000006                     RtccWriteTime@wasAlrm:
   898                           	opt stack 0
   899  000006                     ___awdiv@sign:
   900                           	opt stack 0
   901                           
   902                           ; 1 bytes @ 0x5
   903  000006                     	ds	1
   904  000007                     ??___ftge:
   905  000007                     lcd_gotoxy@address:
   906                           	opt stack 0
   907  000007                     RtccWriteTime@wasWrEn:
   908                           	opt stack 0
   909  000007                     ___lwdiv@counter:
   910                           	opt stack 0
   911  000007                     RtccWriteDate@tempYear:
   912                           	opt stack 0
   913  000007                     ___awdiv@quotient:
   914                           	opt stack 0
   915                           
   916                           ; 2 bytes @ 0x6
   917  000007                     	ds	1
   918  000008                     ?___lwmod:
   919                           	opt stack 0
   920  000008                     lcd_putc@c:
   921                           	opt stack 0
   922  000008                     next_code@digit:
   923                           	opt stack 0
   924  000008                     RtccWriteTime@tempMinSec:
   925                           	opt stack 0
   926  000008                     ___lwmod@dividend:
   927                           	opt stack 0
   928                           
   929                           ; 2 bytes @ 0x7
   930  000008                     	ds	1
   931  000009                     ?___ftdiv:
   932                           	opt stack 0
   933  000009                     ?___awtoft:
   934                           	opt stack 0
   935  000009                     ?___lbtoft:
   936                           	opt stack 0
   937  000009                     ?___lltoft:
   938                           	opt stack 0
   939  000009                     RtccWriteDate@wasWrEn:
   940                           	opt stack 0
   941  000009                     lcd_putrs@ptr:
   942                           	opt stack 0
   943  000009                     __delay_s@millis:
   944                           	opt stack 0
   945  000009                     ___awtoft@c:
   946                           	opt stack 0
   947  000009                     ___ftdiv@f1:
   948                           	opt stack 0
   949  000009                     ___lltoft@c:
   950                           	opt stack 0
   951                           
   952                           ; 4 bytes @ 0x8
   953  000009                     	ds	1
   954  00000A                     next_code@input:
   955                           	opt stack 0
   956  00000A                     RtccWriteDate@tempDayMonth:
   957                           	opt stack 0
   958  00000A                     RtccWriteTime@tempHourWDay:
   959                           	opt stack 0
   960  00000A                     ___lwmod@divisor:
   961                           	opt stack 0
   962                           
   963                           ; 2 bytes @ 0x9
   964  00000A                     	ds	1
   965  00000B                     ??__delay_s:
   966  00000B                     set_desactive_vision@digit:
   967                           	opt stack 0
   968  00000B                     RtccReadDate@rTD0:
   969                           	opt stack 0
   970  00000B                     RtccReadTime@rTD0:
   971                           	opt stack 0
   972                           
   973                           ; 8 bytes @ 0xA
   974  00000B                     	ds	1
   975  00000C                     ??_next_code:
   976  00000C                     ___awtoft@sign:
   977                           	opt stack 0
   978  00000C                     ___lbtoft@c:
   979                           	opt stack 0
   980  00000C                     ___lwmod@counter:
   981                           	opt stack 0
   982  00000C                     __delay_s@it:
   983                           	opt stack 0
   984  00000C                     RtccWriteDate@tempHourWDay:
   985                           	opt stack 0
   986  00000C                     ___ftdiv@f2:
   987                           	opt stack 0
   988                           
   989                           ; 3 bytes @ 0xB
   990  00000C                     	ds	1
   991  00000D                     ??___lltoft:
   992  00000D                     ?_sprintf:
   993                           	opt stack 0
   994  00000D                     ?___ftmul:
   995                           	opt stack 0
   996  00000D                     sprintf@sp:
   997                           	opt stack 0
   998  00000D                     ___ftmul@f1:
   999                           	opt stack 0
  1000                           
  1001                           ; 3 bytes @ 0xC
  1002  00000D                     	ds	1
  1003  00000E                     ??_setClock:
  1004  00000E                     __delay_s@index:
  1005                           	opt stack 0
  1006                           
  1007                           ; 2 bytes @ 0xD
  1008  00000E                     	ds	1
  1009  00000F                     ??___ftdiv:
  1010  00000F                     setClock@x:
  1011                           	opt stack 0
  1012  00000F                     sprintf@f:
  1013                           	opt stack 0
  1014                           
  1015                           ; 2 bytes @ 0xE
  1016  00000F                     	ds	1
  1017  000010                     ___ftmul@f2:
  1018                           	opt stack 0
  1019                           
  1020                           ; 3 bytes @ 0xF
  1021  000010                     	ds	1
  1022  000011                     ___lltoft@exp:
  1023                           	opt stack 0
  1024                           
  1025                           ; 1 bytes @ 0x10
  1026  000011                     	ds	1
  1027  000012                     ___ftdiv@cntr:
  1028                           	opt stack 0
  1029                           
  1030                           ; 1 bytes @ 0x11
  1031  000012                     	ds	1
  1032  000013                     ??___ftmul:
  1033  000013                     dispararSensor@sensor:
  1034                           	opt stack 0
  1035  000013                     ___ftdiv@f3:
  1036                           	opt stack 0
  1037                           
  1038                           ; 3 bytes @ 0x12
  1039  000013                     	ds	2
  1040  000015                     
  1041                           ; 0 bytes @ 0x14
  1042  000015                     	ds	1
  1043  000016                     ___ftdiv@exp:
  1044                           	opt stack 0
  1045  000016                     ___ftmul@exp:
  1046                           	opt stack 0
  1047                           
  1048                           ; 1 bytes @ 0x15
  1049  000016                     	ds	1
  1050  000017                     ??_sprintf:
  1051  000017                     ___ftdiv@sign:
  1052                           	opt stack 0
  1053  000017                     ___ftmul@f3_as_product:
  1054                           	opt stack 0
  1055                           
  1056                           ; 3 bytes @ 0x16
  1057  000017                     	ds	3
  1058  00001A                     ___ftmul@cntr:
  1059                           	opt stack 0
  1060                           
  1061                           ; 1 bytes @ 0x19
  1062  00001A                     	ds	1
  1063  00001B                     ___ftmul@sign:
  1064                           	opt stack 0
  1065  00001B                     sprintf@ap:
  1066                           	opt stack 0
  1067                           
  1068                           ; 2 bytes @ 0x1A
  1069  00001B                     	ds	1
  1070  00001C                     ?___ftadd:
  1071                           	opt stack 0
  1072  00001C                     ___ftadd@f1:
  1073                           	opt stack 0
  1074                           
  1075                           ; 3 bytes @ 0x1B
  1076  00001C                     	ds	1
  1077  00001D                     sprintf@flag:
  1078                           	opt stack 0
  1079                           
  1080                           ; 1 bytes @ 0x1C
  1081  00001D                     	ds	1
  1082  00001E                     sprintf@val:
  1083                           	opt stack 0
  1084                           
  1085                           ; 2 bytes @ 0x1D
  1086  00001E                     	ds	1
  1087  00001F                     ___ftadd@f2:
  1088                           	opt stack 0
  1089                           
  1090                           ; 3 bytes @ 0x1E
  1091  00001F                     	ds	1
  1092  000020                     sprintf@prec:
  1093                           	opt stack 0
  1094                           
  1095                           ; 1 bytes @ 0x1F
  1096  000020                     	ds	1
  1097  000021                     sprintf@width:
  1098                           	opt stack 0
  1099                           
  1100                           ; 2 bytes @ 0x20
  1101  000021                     	ds	1
  1102  000022                     ??___ftadd:
  1103                           
  1104                           ; 0 bytes @ 0x21
  1105  000022                     	ds	1
  1106  000023                     sprintf@c:
  1107                           	opt stack 0
  1108                           
  1109                           ; 1 bytes @ 0x22
  1110  000023                     	ds	1
  1111  000024                     ??_read_keyboard:
  1112                           
  1113                           ; 0 bytes @ 0x23
  1114  000024                     	ds	1
  1115  000025                     ??_configurar_reloj:
  1116  000025                     ver_info@input:
  1117                           	opt stack 0
  1118  000025                     ___ftadd@sign:
  1119                           	opt stack 0
  1120                           
  1121                           ; 1 bytes @ 0x24
  1122  000025                     	ds	1
  1123  000026                     configurar_reloj@input:
  1124                           	opt stack 0
  1125  000026                     ___ftadd@exp2:
  1126                           	opt stack 0
  1127                           
  1128                           ; 1 bytes @ 0x25
  1129  000026                     	ds	1
  1130  000027                     configurar_reloj@y:
  1131                           	opt stack 0
  1132  000027                     ___ftadd@exp1:
  1133                           	opt stack 0
  1134                           
  1135                           ; 1 bytes @ 0x26
  1136  000027                     	ds	1
  1137  000028                     ?___ftsub:
  1138                           	opt stack 0
  1139  000028                     ?_eval_poly:
  1140                           	opt stack 0
  1141  000028                     ?___fttol:
  1142                           	opt stack 0
  1143  000028                     configurar_reloj@x:
  1144                           	opt stack 0
  1145  000028                     ___ftsub@f1:
  1146                           	opt stack 0
  1147  000028                     ___fttol@f1:
  1148                           	opt stack 0
  1149  000028                     eval_poly@x:
  1150                           	opt stack 0
  1151                           
  1152                           ; 3 bytes @ 0x27
  1153  000028                     	ds	3
  1154  00002B                     eval_poly@d:
  1155                           	opt stack 0
  1156  00002B                     ___ftsub@f2:
  1157                           	opt stack 0
  1158                           
  1159                           ; 3 bytes @ 0x2A
  1160  00002B                     	ds	1
  1161  00002C                     ??___fttol:
  1162                           
  1163                           ; 0 bytes @ 0x2B
  1164  00002C                     	ds	1
  1165  00002D                     eval_poly@n:
  1166                           	opt stack 0
  1167                           
  1168                           ; 2 bytes @ 0x2C
  1169  00002D                     	ds	1
  1170  00002E                     
  1171                           ; 0 bytes @ 0x2D
  1172  00002E                     	ds	1
  1173  00002F                     ??_eval_poly:
  1174                           
  1175                           ; 0 bytes @ 0x2E
  1176  00002F                     	ds	2
  1177  000031                     ___fttol@sign1:
  1178                           	opt stack 0
  1179  000031                     eval_poly@res:
  1180                           	opt stack 0
  1181                           
  1182                           ; 3 bytes @ 0x30
  1183  000031                     	ds	1
  1184  000032                     ___fttol@lval:
  1185                           	opt stack 0
  1186                           
  1187                           ; 4 bytes @ 0x31
  1188  000032                     	ds	2
  1189  000034                     ?_log:
  1190                           	opt stack 0
  1191  000034                     ?_ldexp:
  1192                           	opt stack 0
  1193  000034                     ldexp@value:
  1194                           	opt stack 0
  1195  000034                     log@x:
  1196                           	opt stack 0
  1197                           
  1198                           ; 3 bytes @ 0x33
  1199  000034                     	ds	2
  1200  000036                     ___fttol@exp1:
  1201                           	opt stack 0
  1202                           
  1203                           ; 1 bytes @ 0x35
  1204  000036                     	ds	1
  1205  000037                     ?___altoft:
  1206                           	opt stack 0
  1207  000037                     ldexp@newexp:
  1208                           	opt stack 0
  1209  000037                     log@exponent:
  1210                           	opt stack 0
  1211  000037                     ___altoft@c:
  1212                           	opt stack 0
  1213                           
  1214                           ; 4 bytes @ 0x36
  1215  000037                     	ds	2
  1216  000039                     ??_ldexp:
  1217                           
  1218                           ; 0 bytes @ 0x38
  1219  000039                     	ds	2
  1220  00003B                     ??___altoft:
  1221                           
  1222                           ; 0 bytes @ 0x3A
  1223  00003B                     	ds	4
  1224  00003F                     ___altoft@exp:
  1225                           	opt stack 0
  1226                           
  1227                           ; 1 bytes @ 0x3E
  1228  00003F                     	ds	1
  1229  000040                     ___altoft@sign:
  1230                           	opt stack 0
  1231                           
  1232                           ; 1 bytes @ 0x3F
  1233  000040                     	ds	1
  1234  000041                     ?_floor:
  1235                           	opt stack 0
  1236  000041                     floor@x:
  1237                           	opt stack 0
  1238                           
  1239                           ; 3 bytes @ 0x40
  1240  000041                     	ds	3
  1241  000044                     floor@i:
  1242                           	opt stack 0
  1243                           
  1244                           ; 3 bytes @ 0x43
  1245  000044                     	ds	3
  1246  000047                     floor@expon:
  1247                           	opt stack 0
  1248                           
  1249                           ; 2 bytes @ 0x46
  1250  000047                     	ds	2
  1251  000049                     ?_exp:
  1252                           	opt stack 0
  1253  000049                     exp@x:
  1254                           	opt stack 0
  1255                           
  1256                           ; 3 bytes @ 0x48
  1257  000049                     	ds	3
  1258  00004C                     _exp$3192:
  1259                           	opt stack 0
  1260                           
  1261                           ; 3 bytes @ 0x4B
  1262  00004C                     	ds	3
  1263  00004F                     exp@exponent:
  1264                           	opt stack 0
  1265                           
  1266                           ; 2 bytes @ 0x4E
  1267  00004F                     	ds	2
  1268  000051                     exp@sign:
  1269                           	opt stack 0
  1270                           
  1271                           ; 1 bytes @ 0x50
  1272  000051                     	ds	1
  1273  000052                     ?_pow:
  1274                           	opt stack 0
  1275  000052                     pow@x:
  1276                           	opt stack 0
  1277                           
  1278                           ; 3 bytes @ 0x51
  1279  000052                     	ds	3
  1280  000055                     pow@y:
  1281                           	opt stack 0
  1282                           
  1283                           ; 3 bytes @ 0x54
  1284  000055                     	ds	3
  1285  000058                     ??_input_old_pass:
  1286  000058                     ??_input_new_pass:
  1287  000058                     ?_obtain_pass:
  1288                           	opt stack 0
  1289  000058                     obtain_pass@pass:
  1290                           	opt stack 0
  1291                           
  1292                           ; 2 bytes @ 0x57
  1293  000058                     	ds	2
  1294  00005A                     obtain_pass@input:
  1295                           	opt stack 0
  1296  00005A                     ver_opcion_cambio@old_correct:
  1297                           	opt stack 0
  1298                           
  1299                           ; 1 bytes @ 0x59
  1300  00005A                     	ds	1
  1301  00005B                     ver_opcion_cambio@input:
  1302                           	opt stack 0
  1303  00005B                     obtain_pass@digit:
  1304                           	opt stack 0
  1305                           
  1306                           ; 2 bytes @ 0x5A
  1307  00005B                     	ds	1
  1308  00005C                     
  1309                           ; 0 bytes @ 0x5B
  1310  00005C                     	ds	1
  1311  00005D                     ??_obtain_pass:
  1312                           
  1313                           ; 0 bytes @ 0x5C
  1314  00005D                     	ds	2
  1315  00005F                     ??_twinkle:
  1316                           
  1317                           ; 0 bytes @ 0x5E
  1318  00005F                     	ds	1
  1319  000060                     tblptru	equ	0xFF8
  1320                           tblptrh	equ	0xFF7
  1321                           tblptrl	equ	0xFF6
  1322                           tablat	equ	0xFF5
  1323                           postinc0	equ	0xFEE
  1324                           wreg	equ	0xFE8
  1325                           postdec1	equ	0xFE5
  1326                           fsr1l	equ	0xFE1
  1327                           
  1328                           ; 0 bytes @ 0x5F
  1329 ;;
  1330 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1331 ;;
  1332 ;; *************** function _main *****************
  1333 ;; Defined at:
  1334 ;;		line 88 in file "main.c"
  1335 ;; Parameters:    Size  Location     Type
  1336 ;;		None
  1337 ;; Auto vars:     Size  Location     Type
  1338 ;;		None
  1339 ;; Return value:  Size  Location     Type
  1340 ;;                  2  132[None  ] int 
  1341 ;; Registers used:
  1342 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1343 ;; Tracked objects:
  1344 ;;		On entry : 0/0
  1345 ;;		On exit  : 0/0
  1346 ;;		Unchanged: 0/0
  1347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1350 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1351 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1352 ;;Total ram usage:        1 bytes
  1353 ;; Hardware stack levels required when called:    9
  1354 ;; This function calls:
  1355 ;;		_Read_RTC
  1356 ;;		_Setup
  1357 ;;		_caratula
  1358 ;;		_select_menu
  1359 ;;		_set_vision
  1360 ;; This function is called by:
  1361 ;;		Startup code after reset
  1362 ;; This function uses a non-reentrant model
  1363 ;;
  1364                           
  1365                           	psect	text0
  1366  003832                     __ptext0:
  1367                           	opt stack 0
  1368  003832                     _main:
  1369                           	opt stack 22
  1370                           
  1371                           ;main.c: 89: Setup();
  1372                           
  1373                           ; BSR set to: 15
  1374                           ;incstack = 0
  1375  003832  EC5B  F01B         	call	_Setup	;wreg free
  1376                           
  1377                           ;main.c: 90: caratula();
  1378  003836  EC78  F01D         	call	_caratula	;wreg free
  1379  00383A  D000               	goto	l5117
  1380  00383C                     l5117:
  1381                           
  1382                           ;main.c: 92: Read_RTC();
  1383  00383C  EC89  F00E         	call	_Read_RTC	;wreg free
  1384                           
  1385                           ;main.c: 93: caratula();
  1386  003840  EC78  F01D         	call	_caratula	;wreg free
  1387                           
  1388                           ;main.c: 95: select_menu();
  1389  003844  EC5D  F016         	call	_select_menu	;wreg free
  1390                           
  1391                           ;main.c: 96: set_vision();
  1392  003848  EC36  F01A         	call	_set_vision	;wreg free
  1393                           
  1394                           ;main.c: 97: _delay((unsigned long)((98)*(8000000/4000.0)));
  1395  00384C  0EFF               	movlw	255
  1396  00384E  0100               	movlb	0	; () banked
  1397  003850  6FCC               	movwf	??_main& (0+255),b
  1398  003852  0E8A               	movlw	138
  1399  003854                     u4737:
  1400  003854  2EE8               	decfsz	wreg,f,c
  1401  003856  D7FE               	goto	u4737
  1402  003858  2FCC               	decfsz	??_main& (0+255),f,b
  1403  00385A  D7FC               	goto	u4737
  1404  00385C  D000               	nop2	
  1405  00385E  D7EE               	goto	l5117
  1406                           
  1407                           ;main.c: 98: }
  1408                           ;main.c: 100: return 0;
  1409                           ;	Return value of _main is never used
  1410  003860  EF00  F000         	goto	start
  1411  003864                     __end_of_main:
  1412                           	opt stack 0
  1413                           tblptru	equ	0xFF8
  1414                           tblptrh	equ	0xFF7
  1415                           tblptrl	equ	0xFF6
  1416                           tablat	equ	0xFF5
  1417                           postinc0	equ	0xFEE
  1418                           wreg	equ	0xFE8
  1419                           postdec1	equ	0xFE5
  1420                           fsr1l	equ	0xFE1
  1421                           
  1422 ;; *************** function _set_vision *****************
  1423 ;; Defined at:
  1424 ;;		line 125 in file "lcd_vision.c"
  1425 ;; Parameters:    Size  Location     Type
  1426 ;;		None
  1427 ;; Auto vars:     Size  Location     Type
  1428 ;;		None
  1429 ;; Return value:  Size  Location     Type
  1430 ;;		None               void
  1431 ;; Registers used:
  1432 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1433 ;; Tracked objects:
  1434 ;;		On entry : 0/0
  1435 ;;		On exit  : 0/0
  1436 ;;		Unchanged: 0/0
  1437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1441 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1442 ;;Total ram usage:        0 bytes
  1443 ;; Hardware stack levels used:    1
  1444 ;; Hardware stack levels required when called:    8
  1445 ;; This function calls:
  1446 ;;		_clear
  1447 ;;		_input_password
  1448 ;;		_lcd_gotoxy
  1449 ;;		_lcd_putrs
  1450 ;;		_twinkle
  1451 ;;		_write_Date
  1452 ;; This function is called by:
  1453 ;;		_main
  1454 ;; This function uses a non-reentrant model
  1455 ;;
  1456                           
  1457                           	psect	text1
  1458  00346C                     __ptext1:
  1459                           	opt stack 0
  1460  00346C                     _set_vision:
  1461                           	opt stack 22
  1462                           
  1463                           ;lcd_vision.c: 126: clear();
  1464                           
  1465                           ;incstack = 0
  1466  00346C  EC24  F01D         	call	_clear	;wreg free
  1467                           
  1468                           ;lcd_vision.c: 127: write_Date();
  1469  003470  EC5E  F018         	call	_write_Date	;wreg free
  1470                           
  1471                           ;lcd_vision.c: 128: lcd_gotoxy(1,1);
  1472  003474  0E01               	movlw	1
  1473  003476  6E05               	movwf	lcd_gotoxy@y,c
  1474  003478  0E01               	movlw	1
  1475  00347A  ECF3  F01C         	call	_lcd_gotoxy
  1476                           
  1477                           ;lcd_vision.c: 130: switch (state_alarm){
  1478  00347E  D01B               	goto	l5111
  1479  003480                     l5097:
  1480  003480  0EDF               	movlw	low STR_16
  1481  003482  6E09               	movwf	lcd_putrs@ptr,c
  1482  003484  0E0F               	movlw	high STR_16
  1483  003486  6E0A               	movwf	lcd_putrs@ptr+1,c
  1484  003488  ECBF  F01A         	call	_lcd_putrs	;wreg free
  1485                           
  1486                           ;lcd_vision.c: 132: LATBbits.LATB0 = 1;;
  1487  00348C  808A               	bsf	3978,0,c	;volatile
  1488                           
  1489                           ;lcd_vision.c: 134: break;
  1490  00348E  0012               	return	
  1491  003490                     l5101:
  1492  003490  0EDB               	movlw	low STR_17
  1493  003492  6E09               	movwf	lcd_putrs@ptr,c
  1494  003494  0E0F               	movlw	high STR_17
  1495  003496  6E0A               	movwf	lcd_putrs@ptr+1,c
  1496  003498  ECBF  F01A         	call	_lcd_putrs	;wreg free
  1497                           
  1498                           ;lcd_vision.c: 137: LATBbits.LATB0 = 0;;
  1499  00349C  908A               	bcf	3978,0,c	;volatile
  1500                           
  1501                           ;lcd_vision.c: 138: input_password();
  1502  00349E  ECD0  F017         	call	_input_password	;wreg free
  1503                           
  1504                           ;lcd_vision.c: 140: break;
  1505  0034A2  0012               	return	
  1506  0034A4                     l5107:
  1507  0034A4  0EC8               	movlw	low STR_18
  1508  0034A6  6E09               	movwf	lcd_putrs@ptr,c
  1509  0034A8  0E0F               	movlw	high STR_18
  1510  0034AA  6E0A               	movwf	lcd_putrs@ptr+1,c
  1511  0034AC  ECBF  F01A         	call	_lcd_putrs	;wreg free
  1512                           
  1513                           ;lcd_vision.c: 142: twinkle();
  1514  0034B0  EC93  F015         	call	_twinkle	;wreg free
  1515                           
  1516                           ;lcd_vision.c: 144: }
  1517  0034B4  0012               	return	
  1518  0034B6                     l5111:
  1519  0034B6  0100               	movlb	0	; () banked
  1520  0034B8  51DF               	movf	_state_alarm& (0+255),w,b
  1521                           
  1522                           ; Switch size 1, requested type "space"
  1523                           ; Number of cases is 2, Range of values is 0 to 1
  1524                           ; switch strategies available:
  1525                           ; Name         Instructions Cycles
  1526                           ; simple_byte            7     4 (average)
  1527                           ;	Chosen strategy is simple_byte
  1528  0034BA  0A00               	xorlw	0	; case 0
  1529  0034BC  B4D8               	btfsc	status,2,c
  1530  0034BE  D7E0               	goto	l5097
  1531  0034C0  0A01               	xorlw	1	; case 1
  1532  0034C2  B4D8               	btfsc	status,2,c
  1533  0034C4  D7E5               	goto	l5101
  1534  0034C6  D7EE               	goto	l5107
  1535                           
  1536                           ; BSR set to: 0
  1537  0034C8  0012               	return		;funcret
  1538  0034CA                     __end_of_set_vision:
  1539                           	opt stack 0
  1540                           tblptru	equ	0xFF8
  1541                           tblptrh	equ	0xFF7
  1542                           tblptrl	equ	0xFF6
  1543                           tablat	equ	0xFF5
  1544                           postinc0	equ	0xFEE
  1545                           wreg	equ	0xFE8
  1546                           postdec1	equ	0xFE5
  1547                           fsr1l	equ	0xFE1
  1548                           status	equ	0xFD8
  1549                           
  1550 ;; *************** function _twinkle *****************
  1551 ;; Defined at:
  1552 ;;		line 95 in file "lcd_vision.c"
  1553 ;; Parameters:    Size  Location     Type
  1554 ;;		None
  1555 ;; Auto vars:     Size  Location     Type
  1556 ;;  time            2   23[BANK0 ] int 
  1557 ;;  input           1   22[BANK0 ] unsigned char 
  1558 ;; Return value:  Size  Location     Type
  1559 ;;		None               void
  1560 ;; Registers used:
  1561 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1562 ;; Tracked objects:
  1563 ;;		On entry : 0/0
  1564 ;;		On exit  : 0/0
  1565 ;;		Unchanged: 0/0
  1566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1568 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1569 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1570 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1571 ;;Total ram usage:        4 bytes
  1572 ;; Hardware stack levels used:    1
  1573 ;; Hardware stack levels required when called:    7
  1574 ;; This function calls:
  1575 ;;		__delay_s
  1576 ;;		_clear_keyboard
  1577 ;;		_input_password
  1578 ;;		_lcd_gotoxy
  1579 ;;		_lcd_putrs
  1580 ;;		_read_keyboard
  1581 ;; This function is called by:
  1582 ;;		_set_vision
  1583 ;; This function uses a non-reentrant model
  1584 ;;
  1585                           
  1586                           	psect	text2
  1587  002B26                     __ptext2:
  1588                           	opt stack 0
  1589  002B26                     _twinkle:
  1590                           	opt stack 22
  1591                           
  1592                           ;lcd_vision.c: 96: char input = 1;
  1593                           
  1594                           ;incstack = 0
  1595  002B26  0E01               	movlw	1
  1596  002B28  0100               	movlb	0	; () banked
  1597  002B2A  6FC9               	movwf	twinkle@input& (0+255),b
  1598                           
  1599                           ;lcd_vision.c: 97: int time = 0;
  1600  002B2C  0E00               	movlw	0
  1601  002B2E  0100               	movlb	0	; () banked
  1602  002B30  6FCB               	movwf	(twinkle@time+1)& (0+255),b
  1603  002B32  0E00               	movlw	0
  1604  002B34  6FCA               	movwf	twinkle@time& (0+255),b
  1605                           
  1606                           ;lcd_vision.c: 99: while(input != 16 && time < time_to_stop){
  1607  002B36  D031               	goto	l4953
  1608  002B38                     l666:
  1609                           
  1610                           ; BSR set to: 0
  1611                           ;lcd_vision.c: 100: PORTCbits.RC7 = 1;;
  1612  002B38  8E82               	bsf	3970,7,c	;volatile
  1613                           
  1614                           ; BSR set to: 0
  1615                           ;lcd_vision.c: 102: _delay_s(200);
  1616  002B3A  0E00               	movlw	0
  1617  002B3C  6E0A               	movwf	__delay_s@millis+1,c
  1618  002B3E  0EC8               	movlw	200
  1619  002B40  6E09               	movwf	__delay_s@millis,c
  1620  002B42  EC93  F01A         	call	__delay_s	;wreg free
  1621                           
  1622                           ;lcd_vision.c: 103: lcd_gotoxy(7,2);
  1623  002B46  0E02               	movlw	2
  1624  002B48  6E05               	movwf	lcd_gotoxy@y,c
  1625  002B4A  0E07               	movlw	7
  1626  002B4C  ECF3  F01C         	call	_lcd_gotoxy
  1627                           
  1628                           ;lcd_vision.c: 104: LATBbits.LATB1 = 0;;
  1629  002B50  928A               	bcf	3978,1,c	;volatile
  1630                           
  1631                           ;lcd_vision.c: 105: LATBbits.LATB0 = 1;;
  1632  002B52  808A               	bsf	3978,0,c	;volatile
  1633                           
  1634                           ;lcd_vision.c: 106: lcd_putrs("WARNING!!!");
  1635  002B54  0EAA               	movlw	low STR_14
  1636  002B56  6E09               	movwf	lcd_putrs@ptr,c
  1637  002B58  0E0F               	movlw	high STR_14
  1638  002B5A  6E0A               	movwf	lcd_putrs@ptr+1,c
  1639  002B5C  ECBF  F01A         	call	_lcd_putrs	;wreg free
  1640                           
  1641                           ;lcd_vision.c: 107: _delay_s(200);
  1642  002B60  0E00               	movlw	0
  1643  002B62  6E0A               	movwf	__delay_s@millis+1,c
  1644  002B64  0EC8               	movlw	200
  1645  002B66  6E09               	movwf	__delay_s@millis,c
  1646  002B68  EC93  F01A         	call	__delay_s	;wreg free
  1647                           
  1648                           ;lcd_vision.c: 108: LATBbits.LATB0 = 0;;
  1649  002B6C  908A               	bcf	3978,0,c	;volatile
  1650                           
  1651                           ;lcd_vision.c: 109: LATBbits.LATB1 = 1;;
  1652  002B6E  828A               	bsf	3978,1,c	;volatile
  1653                           
  1654                           ;lcd_vision.c: 110: lcd_gotoxy(7,2);
  1655  002B70  0E02               	movlw	2
  1656  002B72  6E05               	movwf	lcd_gotoxy@y,c
  1657  002B74  0E07               	movlw	7
  1658  002B76  ECF3  F01C         	call	_lcd_gotoxy
  1659                           
  1660                           ;lcd_vision.c: 111: lcd_putrs("          ");
  1661  002B7A  0E9F               	movlw	low STR_15
  1662  002B7C  6E09               	movwf	lcd_putrs@ptr,c
  1663  002B7E  0E0F               	movlw	high STR_15
  1664  002B80  6E0A               	movwf	lcd_putrs@ptr+1,c
  1665  002B82  ECBF  F01A         	call	_lcd_putrs	;wreg free
  1666                           
  1667                           ;lcd_vision.c: 112: input = read_keyboard();
  1668  002B86  ECF2  F007         	call	_read_keyboard	;wreg free
  1669  002B8A  0100               	movlb	0	; () banked
  1670  002B8C  6FC9               	movwf	twinkle@input& (0+255),b
  1671                           
  1672                           ; BSR set to: 0
  1673                           ;lcd_vision.c: 113: time +=400;
  1674  002B8E  0100               	movlb	0	; () banked
  1675  002B90  0E90               	movlw	144
  1676  002B92  27CA               	addwf	twinkle@time& (0+255),f,b
  1677  002B94  0E01               	movlw	1
  1678  002B96  23CB               	addwfc	(twinkle@time+1)& (0+255),f,b
  1679  002B98  D000               	goto	l4953
  1680  002B9A                     l4953:
  1681                           
  1682                           ; BSR set to: 0
  1683  002B9A  0E10               	movlw	16
  1684  002B9C  0100               	movlb	0	; () banked
  1685  002B9E  19C9               	xorwf	twinkle@input& (0+255),w,b
  1686  002BA0  B4D8               	btfsc	status,2,c
  1687  002BA2  D010               	goto	l4957
  1688                           
  1689                           ; BSR set to: 0
  1690  002BA4  0100               	movlb	0	; () banked
  1691  002BA6  51DB               	movf	_time_to_stop& (0+255),w,b
  1692  002BA8  0100               	movlb	0	; () banked
  1693  002BAA  5DCA               	subwf	twinkle@time& (0+255),w,b
  1694  002BAC  0100               	movlb	0	; () banked
  1695  002BAE  51CB               	movf	(twinkle@time+1)& (0+255),w,b
  1696  002BB0  0A80               	xorlw	128
  1697  002BB2  6E5F               	movwf	??_twinkle& (0+255),c
  1698  002BB4  0100               	movlb	0	; () banked
  1699  002BB6  51DC               	movf	(_time_to_stop+1)& (0+255),w,b
  1700  002BB8  0A80               	xorlw	128
  1701  002BBA  585F               	subwfb	??_twinkle& (0+255),w,c
  1702  002BBC  B0D8               	btfsc	status,0,c
  1703  002BBE  D002               	goto	l4957
  1704  002BC0  D7BB               	goto	l666
  1705                           
  1706                           ; BSR set to: 0
  1707  002BC2  D000               	goto	l4957
  1708  002BC4                     l4957:
  1709                           
  1710                           ; BSR set to: 0
  1711                           ;lcd_vision.c: 114: }
  1712                           ;lcd_vision.c: 116: clear_keyboard();
  1713  002BC4  EC74  F01D         	call	_clear_keyboard	;wreg free
  1714                           
  1715                           ;lcd_vision.c: 118: if(time >= time_to_stop){
  1716  002BC8  0100               	movlb	0	; () banked
  1717  002BCA  51DB               	movf	_time_to_stop& (0+255),w,b
  1718  002BCC  0100               	movlb	0	; () banked
  1719  002BCE  5DCA               	subwf	twinkle@time& (0+255),w,b
  1720  002BD0  0100               	movlb	0	; () banked
  1721  002BD2  51CB               	movf	(twinkle@time+1)& (0+255),w,b
  1722  002BD4  0A80               	xorlw	128
  1723  002BD6  6E5F               	movwf	??_twinkle& (0+255),c
  1724  002BD8  0100               	movlb	0	; () banked
  1725  002BDA  51DC               	movf	(_time_to_stop+1)& (0+255),w,b
  1726  002BDC  0A80               	xorlw	128
  1727  002BDE  585F               	subwfb	??_twinkle& (0+255),w,c
  1728  002BE0  A0D8               	btfss	status,0,c
  1729  002BE2  D004               	goto	l4963
  1730                           
  1731                           ; BSR set to: 0
  1732                           ;lcd_vision.c: 119: state_alarm = ACTIVE;
  1733  002BE4  0E00               	movlw	0
  1734  002BE6  0100               	movlb	0	; () banked
  1735  002BE8  6FDF               	movwf	_state_alarm& (0+255),b
  1736                           
  1737                           ;lcd_vision.c: 120: }else{
  1738  002BEA  0012               	return	
  1739  002BEC                     l4963:
  1740                           
  1741                           ; BSR set to: 0
  1742                           ;lcd_vision.c: 121: input_password();
  1743  002BEC  ECD0  F017         	call	_input_password	;wreg free
  1744  002BF0  0012               	return	
  1745  002BF2  0012               	return		;funcret
  1746  002BF4                     __end_of_twinkle:
  1747                           	opt stack 0
  1748                           tblptru	equ	0xFF8
  1749                           tblptrh	equ	0xFF7
  1750                           tblptrl	equ	0xFF6
  1751                           tablat	equ	0xFF5
  1752                           postinc0	equ	0xFEE
  1753                           wreg	equ	0xFE8
  1754                           postdec1	equ	0xFE5
  1755                           fsr1l	equ	0xFE1
  1756                           status	equ	0xFD8
  1757                           
  1758 ;; *************** function _input_password *****************
  1759 ;; Defined at:
  1760 ;;		line 81 in file "lcd_vision.c"
  1761 ;; Parameters:    Size  Location     Type
  1762 ;;		None
  1763 ;; Auto vars:     Size  Location     Type
  1764 ;;  digit           2   20[BANK0 ] short 
  1765 ;;  pass            2   17[BANK0 ] int 
  1766 ;;  input           1   19[BANK0 ] unsigned char 
  1767 ;; Return value:  Size  Location     Type
  1768 ;;		None               void
  1769 ;; Registers used:
  1770 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1771 ;; Tracked objects:
  1772 ;;		On entry : 0/0
  1773 ;;		On exit  : 0/0
  1774 ;;		Unchanged: 0/0
  1775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1777 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1779 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1780 ;;Total ram usage:        5 bytes
  1781 ;; Hardware stack levels used:    1
  1782 ;; Hardware stack levels required when called:    6
  1783 ;; This function calls:
  1784 ;;		_is_not_letter
  1785 ;;		_not_fill_pass
  1786 ;;		_obtain_pass
  1787 ;;		_read_keyboard
  1788 ;;		_review_code
  1789 ;;		_set_desactive_vision
  1790 ;; This function is called by:
  1791 ;;		_twinkle
  1792 ;;		_set_vision
  1793 ;; This function uses a non-reentrant model
  1794 ;;
  1795                           
  1796                           	psect	text3
  1797  002FA0                     __ptext3:
  1798                           	opt stack 0
  1799  002FA0                     _input_password:
  1800                           	opt stack 22
  1801                           
  1802                           ;lcd_vision.c: 82: short digit = 12;
  1803                           
  1804                           ;incstack = 0
  1805  002FA0  0E00               	movlw	0
  1806  002FA2  0100               	movlb	0	; () banked
  1807  002FA4  6FC8               	movwf	(input_password@digit+1)& (0+255),b
  1808  002FA6  0E0C               	movlw	12
  1809  002FA8  6FC7               	movwf	input_password@digit& (0+255),b
  1810                           
  1811                           ;lcd_vision.c: 83: int pass = 0;
  1812  002FAA  0E00               	movlw	0
  1813  002FAC  0100               	movlb	0	; () banked
  1814  002FAE  6FC5               	movwf	(input_password@pass+1)& (0+255),b
  1815  002FB0  0E00               	movlw	0
  1816  002FB2  6FC4               	movwf	input_password@pass& (0+255),b
  1817                           
  1818                           ; BSR set to: 0
  1819                           ;lcd_vision.c: 85: set_desactive_vision(digit);
  1820  002FB4  C0C7  F00B         	movff	input_password@digit,set_desactive_vision@digit
  1821  002FB8  C0C8  F00C         	movff	input_password@digit+1,set_desactive_vision@digit+1
  1822  002FBC  EC92  F01C         	call	_set_desactive_vision	;wreg free
  1823                           
  1824                           ;lcd_vision.c: 86: char input = read_keyboard();
  1825  002FC0  ECF2  F007         	call	_read_keyboard	;wreg free
  1826  002FC4  0100               	movlb	0	; () banked
  1827  002FC6  6FC6               	movwf	input_password@input& (0+255),b
  1828                           
  1829                           ;lcd_vision.c: 88: while(is_not_letter(input) && not_fill_pass(digit)){
  1830  002FC8  D01F               	goto	l4785
  1831  002FCA                     l4779:
  1832                           
  1833                           ;lcd_vision.c: 89: pass = obtain_pass(pass,input,&digit);
  1834  002FCA  C0C4  F058         	movff	input_password@pass,obtain_pass@pass
  1835  002FCE  C0C5  F059         	movff	input_password@pass+1,obtain_pass@pass+1
  1836  002FD2  C0C6  F05A         	movff	input_password@input,obtain_pass@input
  1837  002FD6  0EC7               	movlw	low input_password@digit
  1838  002FD8  6E5B               	movwf	obtain_pass@digit,c
  1839  002FDA  0E00               	movlw	high input_password@digit
  1840  002FDC  6E5C               	movwf	obtain_pass@digit+1,c
  1841  002FDE  EC84  F012         	call	_obtain_pass	;wreg free
  1842  002FE2  C058  F0C4         	movff	?_obtain_pass,input_password@pass
  1843  002FE6  C059  F0C5         	movff	?_obtain_pass+1,input_password@pass+1
  1844                           
  1845                           ;lcd_vision.c: 90: input = read_keyboard();
  1846  002FEA  ECF2  F007         	call	_read_keyboard	;wreg free
  1847  002FEE  0100               	movlb	0	; () banked
  1848  002FF0  6FC6               	movwf	input_password@input& (0+255),b
  1849                           
  1850                           ; BSR set to: 0
  1851                           ;lcd_vision.c: 91: review_code(digit, pass);
  1852  002FF2  C0C7  F003         	movff	input_password@digit,review_code@digit
  1853  002FF6  C0C8  F004         	movff	input_password@digit+1,review_code@digit+1
  1854  002FFA  C0C4  F005         	movff	input_password@pass,review_code@pass
  1855  002FFE  C0C5  F006         	movff	input_password@pass+1,review_code@pass+1
  1856  003002  ECCF  F01C         	call	_review_code	;wreg free
  1857  003006  D000               	goto	l4785
  1858  003008                     l4785:
  1859  003008  0100               	movlb	0	; () banked
  1860  00300A  51C6               	movf	input_password@input& (0+255),w,b
  1861  00300C  EC4B  F01C         	call	_is_not_letter
  1862  003010  0900               	iorlw	0
  1863  003012  B4D8               	btfsc	status,2,c
  1864  003014  0012               	return	
  1865  003016  C0C7  F001         	movff	input_password@digit,not_fill_pass@digit
  1866  00301A  C0C8  F002         	movff	input_password@digit+1,not_fill_pass@digit+1
  1867  00301E  EC2F  F01D         	call	_not_fill_pass	;wreg free
  1868  003022  0900               	iorlw	0
  1869  003024  B4D8               	btfsc	status,2,c
  1870  003026  0012               	return	
  1871  003028  D7D0               	goto	l4779
  1872  00302A  0012               	return	
  1873  00302C  0012               	return		;funcret
  1874  00302E                     __end_of_input_password:
  1875                           	opt stack 0
  1876                           tblptru	equ	0xFF8
  1877                           tblptrh	equ	0xFF7
  1878                           tblptrl	equ	0xFF6
  1879                           tablat	equ	0xFF5
  1880                           postinc0	equ	0xFEE
  1881                           wreg	equ	0xFE8
  1882                           postdec1	equ	0xFE5
  1883                           fsr1l	equ	0xFE1
  1884                           status	equ	0xFD8
  1885                           
  1886 ;; *************** function _set_desactive_vision *****************
  1887 ;; Defined at:
  1888 ;;		line 74 in file "lcd_vision.c"
  1889 ;; Parameters:    Size  Location     Type
  1890 ;;  digit           2   10[COMRAM] short 
  1891 ;; Auto vars:     Size  Location     Type
  1892 ;;		None
  1893 ;; Return value:  Size  Location     Type
  1894 ;;		None               void
  1895 ;; Registers used:
  1896 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1897 ;; Tracked objects:
  1898 ;;		On entry : 0/0
  1899 ;;		On exit  : 0/0
  1900 ;;		Unchanged: 0/0
  1901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1902 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1903 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1905 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1906 ;;Total ram usage:        2 bytes
  1907 ;; Hardware stack levels used:    1
  1908 ;; Hardware stack levels required when called:    5
  1909 ;; This function calls:
  1910 ;;		_lcd_gotoxy
  1911 ;;		_lcd_putrs
  1912 ;;		_lcd_setcursor_vb
  1913 ;; This function is called by:
  1914 ;;		_input_password
  1915 ;; This function uses a non-reentrant model
  1916 ;;
  1917                           
  1918                           	psect	text4
  1919  003924                     __ptext4:
  1920                           	opt stack 0
  1921  003924                     _set_desactive_vision:
  1922                           	opt stack 22
  1923                           
  1924                           ;lcd_vision.c: 75: lcd_gotoxy(7,2);
  1925                           
  1926                           ;incstack = 0
  1927  003924  0E02               	movlw	2
  1928  003926  6E05               	movwf	lcd_gotoxy@y,c
  1929  003928  0E07               	movlw	7
  1930  00392A  ECF3  F01C         	call	_lcd_gotoxy
  1931                           
  1932                           ;lcd_vision.c: 76: lcd_putrs("pass:____");
  1933  00392E  0E7A               	movlw	low (STR_23+4)
  1934  003930  6E09               	movwf	lcd_putrs@ptr,c
  1935  003932  0E0F               	movlw	high (STR_23+4)
  1936  003934  6E0A               	movwf	lcd_putrs@ptr+1,c
  1937  003936  ECBF  F01A         	call	_lcd_putrs	;wreg free
  1938                           
  1939                           ;lcd_vision.c: 77: lcd_gotoxy(digit,2);
  1940  00393A  0E02               	movlw	2
  1941  00393C  6E05               	movwf	lcd_gotoxy@y,c
  1942  00393E  500B               	movf	set_desactive_vision@digit,w,c
  1943  003940  ECF3  F01C         	call	_lcd_gotoxy
  1944                           
  1945                           ;lcd_vision.c: 78: lcd_setcursor_vb(1,1);
  1946  003944  0E01               	movlw	1
  1947  003946  6E05               	movwf	lcd_setcursor_vb@blink,c
  1948  003948  0E01               	movlw	1
  1949  00394A  EC39  F01D         	call	_lcd_setcursor_vb
  1950  00394E  0012               	return		;funcret
  1951  003950                     __end_of_set_desactive_vision:
  1952                           	opt stack 0
  1953                           tblptru	equ	0xFF8
  1954                           tblptrh	equ	0xFF7
  1955                           tblptrl	equ	0xFF6
  1956                           tablat	equ	0xFF5
  1957                           postinc0	equ	0xFEE
  1958                           wreg	equ	0xFE8
  1959                           postdec1	equ	0xFE5
  1960                           fsr1l	equ	0xFE1
  1961                           status	equ	0xFD8
  1962                           
  1963 ;; *************** function _review_code *****************
  1964 ;; Defined at:
  1965 ;;		line 57 in file "lcd_vision.c"
  1966 ;; Parameters:    Size  Location     Type
  1967 ;;  digit           2    2[COMRAM] short 
  1968 ;;  pass            2    4[COMRAM] int 
  1969 ;; Auto vars:     Size  Location     Type
  1970 ;;		None
  1971 ;; Return value:  Size  Location     Type
  1972 ;;		None               void
  1973 ;; Registers used:
  1974 ;;		wreg, status,2, status,0, cstack
  1975 ;; Tracked objects:
  1976 ;;		On entry : 0/0
  1977 ;;		On exit  : 0/0
  1978 ;;		Unchanged: 0/0
  1979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1980 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1983 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1984 ;;Total ram usage:        4 bytes
  1985 ;; Hardware stack levels used:    1
  1986 ;; Hardware stack levels required when called:    1
  1987 ;; This function calls:
  1988 ;;		_change_state
  1989 ;;		_checkPass
  1990 ;; This function is called by:
  1991 ;;		_input_password
  1992 ;; This function uses a non-reentrant model
  1993 ;;
  1994                           
  1995                           	psect	text5
  1996  00399E                     __ptext5:
  1997                           	opt stack 0
  1998  00399E                     _review_code:
  1999                           	opt stack 26
  2000                           
  2001                           ;lcd_vision.c: 58: if(digit == 16){
  2002                           
  2003                           ;incstack = 0
  2004  00399E  0E10               	movlw	16
  2005  0039A0  1803               	xorwf	review_code@digit,w,c
  2006  0039A2  1004               	iorwf	review_code@digit+1,w,c
  2007  0039A4  A4D8               	btfss	status,2,c
  2008  0039A6  0012               	return	
  2009                           
  2010                           ;lcd_vision.c: 59: if(checkPass(pass)){
  2011  0039A8  C005  F001         	movff	review_code@pass,checkPass@pass
  2012  0039AC  C006  F002         	movff	review_code@pass+1,checkPass@pass+1
  2013  0039B0  EC16  F01D         	call	_checkPass	;wreg free
  2014  0039B4  0900               	iorlw	0
  2015  0039B6  B4D8               	btfsc	status,2,c
  2016  0039B8  0012               	return	
  2017                           
  2018                           ;lcd_vision.c: 60: change_state();
  2019  0039BA  EC7B  F01C         	call	_change_state	;wreg free
  2020  0039BE  0012               	return	
  2021  0039C0  0012               	return		;funcret
  2022  0039C2                     __end_of_review_code:
  2023                           	opt stack 0
  2024                           tblptru	equ	0xFF8
  2025                           tblptrh	equ	0xFF7
  2026                           tblptrl	equ	0xFF6
  2027                           tablat	equ	0xFF5
  2028                           postinc0	equ	0xFEE
  2029                           wreg	equ	0xFE8
  2030                           postdec1	equ	0xFE5
  2031                           fsr1l	equ	0xFE1
  2032                           status	equ	0xFD8
  2033                           
  2034 ;; *************** function _change_state *****************
  2035 ;; Defined at:
  2036 ;;		line 47 in file "lcd_vision.c"
  2037 ;; Parameters:    Size  Location     Type
  2038 ;;		None
  2039 ;; Auto vars:     Size  Location     Type
  2040 ;;		None
  2041 ;; Return value:  Size  Location     Type
  2042 ;;		None               void
  2043 ;; Registers used:
  2044 ;;		wreg, status,2, status,0
  2045 ;; Tracked objects:
  2046 ;;		On entry : 0/0
  2047 ;;		On exit  : 0/0
  2048 ;;		Unchanged: 0/0
  2049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2051 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2053 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2054 ;;Total ram usage:        0 bytes
  2055 ;; Hardware stack levels used:    1
  2056 ;; This function calls:
  2057 ;;		Nothing
  2058 ;; This function is called by:
  2059 ;;		_review_code
  2060 ;; This function uses a non-reentrant model
  2061 ;;
  2062                           
  2063                           	psect	text6
  2064  0038F6                     __ptext6:
  2065                           	opt stack 0
  2066  0038F6                     _change_state:
  2067                           	opt stack 26
  2068                           
  2069                           ;lcd_vision.c: 48: switch (state_alarm){
  2070                           
  2071                           ;incstack = 0
  2072  0038F6  D00C               	goto	l4195
  2073  0038F8                     l4189:
  2074  0038F8  0E00               	movlw	0
  2075  0038FA  0100               	movlb	0	; () banked
  2076  0038FC  6FDF               	movwf	_state_alarm& (0+255),b
  2077                           
  2078                           ;lcd_vision.c: 50: break;
  2079  0038FE  0012               	return	
  2080  003900                     l4191:
  2081                           
  2082                           ; BSR set to: 0
  2083  003900  0E01               	movlw	1
  2084  003902  0100               	movlb	0	; () banked
  2085  003904  6FDF               	movwf	_state_alarm& (0+255),b
  2086                           
  2087                           ;lcd_vision.c: 52: break;
  2088  003906  0012               	return	
  2089  003908                     l4193:
  2090                           
  2091                           ; BSR set to: 0
  2092  003908  0E01               	movlw	1
  2093  00390A  0100               	movlb	0	; () banked
  2094  00390C  6FDF               	movwf	_state_alarm& (0+255),b
  2095                           
  2096                           ;lcd_vision.c: 54: }
  2097  00390E  0012               	return	
  2098  003910                     l4195:
  2099  003910  0100               	movlb	0	; () banked
  2100  003912  51DF               	movf	_state_alarm& (0+255),w,b
  2101                           
  2102                           ; Switch size 1, requested type "space"
  2103                           ; Number of cases is 2, Range of values is 0 to 1
  2104                           ; switch strategies available:
  2105                           ; Name         Instructions Cycles
  2106                           ; simple_byte            7     4 (average)
  2107                           ;	Chosen strategy is simple_byte
  2108  003914  0A00               	xorlw	0	; case 0
  2109  003916  B4D8               	btfsc	status,2,c
  2110  003918  D7F3               	goto	l4191
  2111  00391A  0A01               	xorlw	1	; case 1
  2112  00391C  B4D8               	btfsc	status,2,c
  2113  00391E  D7EC               	goto	l4189
  2114  003920  D7F3               	goto	l4193
  2115                           
  2116                           ; BSR set to: 0
  2117                           
  2118                           ; BSR set to: 0
  2119  003922  0012               	return		;funcret
  2120  003924                     __end_of_change_state:
  2121                           	opt stack 0
  2122                           tblptru	equ	0xFF8
  2123                           tblptrh	equ	0xFF7
  2124                           tblptrl	equ	0xFF6
  2125                           tablat	equ	0xFF5
  2126                           postinc0	equ	0xFEE
  2127                           wreg	equ	0xFE8
  2128                           postdec1	equ	0xFE5
  2129                           fsr1l	equ	0xFE1
  2130                           status	equ	0xFD8
  2131                           
  2132 ;; *************** function _obtain_pass *****************
  2133 ;; Defined at:
  2134 ;;		line 65 in file "lcd_vision.c"
  2135 ;; Parameters:    Size  Location     Type
  2136 ;;  pass            2   87[COMRAM] int 
  2137 ;;  input           1   89[COMRAM] unsigned char 
  2138 ;;  digit           2   90[COMRAM] PTR short 
  2139 ;;		 -> input_password@digit(2), 
  2140 ;; Auto vars:     Size  Location     Type
  2141 ;;		None
  2142 ;; Return value:  Size  Location     Type
  2143 ;;                  2   87[COMRAM] int 
  2144 ;; Registers used:
  2145 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2146 ;; Tracked objects:
  2147 ;;		On entry : 0/0
  2148 ;;		On exit  : 0/0
  2149 ;;		Unchanged: 0/0
  2150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2151 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2152 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2153 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2154 ;;      Totals:         7       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2155 ;;Total ram usage:       13 bytes
  2156 ;; Hardware stack levels used:    1
  2157 ;; Hardware stack levels required when called:    5
  2158 ;; This function calls:
  2159 ;;		___awtoft
  2160 ;;		___ftadd
  2161 ;;		___ftmul
  2162 ;;		___fttol
  2163 ;;		___lbtoft
  2164 ;;		_next_code
  2165 ;;		_pow
  2166 ;; This function is called by:
  2167 ;;		_input_password
  2168 ;; This function uses a non-reentrant model
  2169 ;;
  2170                           
  2171                           	psect	text7
  2172  002508                     __ptext7:
  2173                           	opt stack 0
  2174  002508                     _obtain_pass:
  2175                           	opt stack 22
  2176                           
  2177                           ;lcd_vision.c: 67: if(0<input && input<10){
  2178                           
  2179                           ; BSR set to: 0
  2180                           ;incstack = 0
  2181  002508  505A               	movf	obtain_pass@input,w,c
  2182  00250A  B4D8               	btfsc	status,2,c
  2183  00250C  D06D               	goto	l4605
  2184  00250E  0E0A               	movlw	10
  2185  002510  605A               	cpfslt	obtain_pass@input,c
  2186  002512  D06A               	goto	l4605
  2187                           
  2188                           ;lcd_vision.c: 68: pass = pass + input * pow(10, 15 - *digit);
  2189  002514  C05B  FFD9         	movff	obtain_pass@digit,fsr2l
  2190  002518  C05C  FFDA         	movff	obtain_pass@digit+1,fsr2h
  2191  00251C  CFDE F05D          	movff	postinc2,??_obtain_pass
  2192  002520  CFDD F05E          	movff	postdec2,??_obtain_pass+1
  2193  002524  1E5D               	comf	??_obtain_pass,f,c
  2194  002526  1E5E               	comf	??_obtain_pass+1,f,c
  2195  002528  4A5D               	infsnz	??_obtain_pass,f,c
  2196  00252A  2A5E               	incf	??_obtain_pass+1,f,c
  2197  00252C  0E0F               	movlw	15
  2198  00252E  245D               	addwf	??_obtain_pass,w,c
  2199  002530  6E09               	movwf	___awtoft@c,c
  2200  002532  0E00               	movlw	0
  2201  002534  205E               	addwfc	??_obtain_pass+1,w,c
  2202  002536  6E0A               	movwf	___awtoft@c+1,c
  2203  002538  ECDE  F01B         	call	___awtoft	;wreg free
  2204  00253C  C009  F0BE         	movff	?___awtoft,_obtain_pass$3184
  2205  002540  C00A  F0BF         	movff	?___awtoft+1,_obtain_pass$3184+1
  2206  002544  C00B  F0C0         	movff	?___awtoft+2,_obtain_pass$3184+2
  2207                           
  2208                           ;lcd_vision.c: 68: pass = pass + input * pow(10, 15 - *digit);
  2209  002548  C0BE  F055         	movff	_obtain_pass$3184,pow@y
  2210  00254C  C0BF  F056         	movff	_obtain_pass$3184+1,pow@y+1
  2211  002550  C0C0  F057         	movff	_obtain_pass$3184+2,pow@y+2
  2212  002554  0E00               	movlw	0
  2213  002556  6E52               	movwf	pow@x,c
  2214  002558  0E20               	movlw	32
  2215  00255A  6E53               	movwf	pow@x+1,c
  2216  00255C  0E41               	movlw	65
  2217  00255E  6E54               	movwf	pow@x+2,c
  2218  002560  EC24  F00D         	call	_pow	;wreg free
  2219  002564  C052  F0C1         	movff	?_pow,_obtain_pass$3185
  2220  002568  C053  F0C2         	movff	?_pow+1,_obtain_pass$3185+1
  2221  00256C  C054  F0C3         	movff	?_pow+2,_obtain_pass$3185+2
  2222                           
  2223                           ;lcd_vision.c: 68: pass = pass + input * pow(10, 15 - *digit);
  2224  002570  C0C1  F010         	movff	_obtain_pass$3185,___ftmul@f2
  2225  002574  C0C2  F011         	movff	_obtain_pass$3185+1,___ftmul@f2+1
  2226  002578  C0C3  F012         	movff	_obtain_pass$3185+2,___ftmul@f2+2
  2227  00257C  505A               	movf	obtain_pass@input,w,c
  2228  00257E  ECBC  F01C         	call	___lbtoft
  2229  002582  C009  F00D         	movff	?___lbtoft,___ftmul@f1
  2230  002586  C00A  F00E         	movff	?___lbtoft+1,___ftmul@f1+1
  2231  00258A  C00B  F00F         	movff	?___lbtoft+2,___ftmul@f1+2
  2232  00258E  EC03  F012         	call	___ftmul	;wreg free
  2233  002592  C00D  F01F         	movff	?___ftmul,___ftadd@f2
  2234  002596  C00E  F020         	movff	?___ftmul+1,___ftadd@f2+1
  2235  00259A  C00F  F021         	movff	?___ftmul+2,___ftadd@f2+2
  2236  00259E  C058  F009         	movff	obtain_pass@pass,___awtoft@c
  2237  0025A2  C059  F00A         	movff	obtain_pass@pass+1,___awtoft@c+1
  2238  0025A6  ECDE  F01B         	call	___awtoft	;wreg free
  2239  0025AA  C009  F01C         	movff	?___awtoft,___ftadd@f1
  2240  0025AE  C00A  F01D         	movff	?___awtoft+1,___ftadd@f1+1
  2241  0025B2  C00B  F01E         	movff	?___awtoft+2,___ftadd@f1+2
  2242  0025B6  EC74  F00B         	call	___ftadd	;wreg free
  2243  0025BA  C01C  F028         	movff	?___ftadd,___fttol@f1
  2244  0025BE  C01D  F029         	movff	?___ftadd+1,___fttol@f1+1
  2245  0025C2  C01E  F02A         	movff	?___ftadd+2,___fttol@f1+2
  2246  0025C6  EC82  F011         	call	___fttol	;wreg free
  2247  0025CA  C028  F058         	movff	?___fttol,obtain_pass@pass
  2248  0025CE  C029  F059         	movff	?___fttol+1,obtain_pass@pass+1
  2249                           
  2250                           ;lcd_vision.c: 69: next_code(digit, &input);
  2251  0025D2  C05B  F008         	movff	obtain_pass@digit,next_code@digit
  2252  0025D6  C05C  F009         	movff	obtain_pass@digit+1,next_code@digit+1
  2253  0025DA  0E5A               	movlw	low obtain_pass@input
  2254  0025DC  6E0A               	movwf	next_code@input,c
  2255  0025DE  0E00               	movlw	high obtain_pass@input
  2256  0025E0  6E0B               	movwf	next_code@input+1,c
  2257  0025E2  ECE9  F01A         	call	_next_code	;wreg free
  2258  0025E6  D000               	goto	l4605
  2259  0025E8                     l4605:
  2260                           
  2261                           ;lcd_vision.c: 70: }
  2262                           ;lcd_vision.c: 71: return pass;
  2263  0025E8  C058  F058         	movff	obtain_pass@pass,?_obtain_pass
  2264  0025EC  C059  F059         	movff	obtain_pass@pass+1,?_obtain_pass+1
  2265  0025F0  0012               	return	
  2266  0025F2  0012               	return		;funcret
  2267  0025F4                     __end_of_obtain_pass:
  2268                           	opt stack 0
  2269                           tblptru	equ	0xFF8
  2270                           tblptrh	equ	0xFF7
  2271                           tblptrl	equ	0xFF6
  2272                           tablat	equ	0xFF5
  2273                           postinc0	equ	0xFEE
  2274                           wreg	equ	0xFE8
  2275                           postdec1	equ	0xFE5
  2276                           fsr1l	equ	0xFE1
  2277                           postinc2	equ	0xFDE
  2278                           postdec2	equ	0xFDD
  2279                           fsr2h	equ	0xFDA
  2280                           fsr2l	equ	0xFD9
  2281                           status	equ	0xFD8
  2282                           
  2283 ;; *************** function _next_code *****************
  2284 ;; Defined at:
  2285 ;;		line 40 in file "lcd_vision.c"
  2286 ;; Parameters:    Size  Location     Type
  2287 ;;  digit           2    7[COMRAM] PTR short 
  2288 ;;		 -> input_password@digit(2), 
  2289 ;;  input           2    9[COMRAM] PTR unsigned char 
  2290 ;;		 -> obtain_pass@input(1), 
  2291 ;; Auto vars:     Size  Location     Type
  2292 ;;		None
  2293 ;; Return value:  Size  Location     Type
  2294 ;;		None               void
  2295 ;; Registers used:
  2296 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2297 ;; Tracked objects:
  2298 ;;		On entry : 0/0
  2299 ;;		On exit  : 0/0
  2300 ;;		Unchanged: 0/0
  2301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2302 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2304 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2305 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2306 ;;Total ram usage:        6 bytes
  2307 ;; Hardware stack levels used:    1
  2308 ;; Hardware stack levels required when called:    3
  2309 ;; This function calls:
  2310 ;;		_clear_keyboard
  2311 ;;		_lcd_gotoxy
  2312 ;; This function is called by:
  2313 ;;		_obtain_pass
  2314 ;; This function uses a non-reentrant model
  2315 ;;
  2316                           
  2317                           	psect	text8
  2318  0035D2                     __ptext8:
  2319                           	opt stack 0
  2320  0035D2                     _next_code:
  2321                           	opt stack 23
  2322                           
  2323                           ;lcd_vision.c: 41: clear_keyboard();
  2324                           
  2325                           ;incstack = 0
  2326  0035D2  EC74  F01D         	call	_clear_keyboard	;wreg free
  2327                           
  2328                           ;lcd_vision.c: 42: *digit = *digit + 1;
  2329  0035D6  C008  FFD9         	movff	next_code@digit,fsr2l
  2330  0035DA  C009  FFDA         	movff	next_code@digit+1,fsr2h
  2331  0035DE  CFDE F00C          	movff	postinc2,??_next_code
  2332  0035E2  CFDD F00D          	movff	postdec2,??_next_code+1
  2333  0035E6  0E01               	movlw	1
  2334  0035E8  260C               	addwf	??_next_code,f,c
  2335  0035EA  0E00               	movlw	0
  2336  0035EC  220D               	addwfc	??_next_code+1,f,c
  2337  0035EE  C008  FFD9         	movff	next_code@digit,fsr2l
  2338  0035F2  C009  FFDA         	movff	next_code@digit+1,fsr2h
  2339  0035F6  C00C  FFDE         	movff	??_next_code,postinc2
  2340  0035FA  C00D  FFDD         	movff	??_next_code+1,postdec2
  2341                           
  2342                           ;lcd_vision.c: 43: lcd_gotoxy(*digit, 2);
  2343  0035FE  0E02               	movlw	2
  2344  003600  6E05               	movwf	lcd_gotoxy@y,c
  2345  003602  C008  FFD9         	movff	next_code@digit,fsr2l
  2346  003606  C009  FFDA         	movff	next_code@digit+1,fsr2h
  2347  00360A  50DF               	movf	indf2,w,c
  2348  00360C  ECF3  F01C         	call	_lcd_gotoxy
  2349                           
  2350                           ;lcd_vision.c: 44: *input = 18;
  2351  003610  C00A  FFD9         	movff	next_code@input,fsr2l
  2352  003614  C00B  FFDA         	movff	next_code@input+1,fsr2h
  2353  003618  0E12               	movlw	18
  2354  00361A  6EDF               	movwf	indf2,c
  2355  00361C  0012               	return		;funcret
  2356  00361E                     __end_of_next_code:
  2357                           	opt stack 0
  2358                           tblptru	equ	0xFF8
  2359                           tblptrh	equ	0xFF7
  2360                           tblptrl	equ	0xFF6
  2361                           tablat	equ	0xFF5
  2362                           postinc0	equ	0xFEE
  2363                           wreg	equ	0xFE8
  2364                           postdec1	equ	0xFE5
  2365                           fsr1l	equ	0xFE1
  2366                           indf2	equ	0xFDF
  2367                           postinc2	equ	0xFDE
  2368                           postdec2	equ	0xFDD
  2369                           fsr2h	equ	0xFDA
  2370                           fsr2l	equ	0xFD9
  2371                           status	equ	0xFD8
  2372                           
  2373 ;; *************** function _is_not_letter *****************
  2374 ;; Defined at:
  2375 ;;		line 31 in file "lcd_vision.c"
  2376 ;; Parameters:    Size  Location     Type
  2377 ;;  input           1    wreg     unsigned char 
  2378 ;; Auto vars:     Size  Location     Type
  2379 ;;  input           1    1[COMRAM] unsigned char 
  2380 ;; Return value:  Size  Location     Type
  2381 ;;                  1    wreg      unsigned char 
  2382 ;; Registers used:
  2383 ;;		wreg, status,2, status,0
  2384 ;; Tracked objects:
  2385 ;;		On entry : 0/0
  2386 ;;		On exit  : 0/0
  2387 ;;		Unchanged: 0/0
  2388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2390 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2392 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2393 ;;Total ram usage:        2 bytes
  2394 ;; Hardware stack levels used:    1
  2395 ;; This function calls:
  2396 ;;		Nothing
  2397 ;; This function is called by:
  2398 ;;		_input_password
  2399 ;; This function uses a non-reentrant model
  2400 ;;
  2401                           
  2402                           	psect	text9
  2403  003896                     __ptext9:
  2404                           	opt stack 0
  2405  003896                     _is_not_letter:
  2406                           	opt stack 27
  2407                           
  2408                           ;incstack = 0
  2409                           ;is_not_letter@input stored from wreg
  2410  003896  6E02               	movwf	is_not_letter@input,c
  2411                           
  2412                           ;lcd_vision.c: 32: return input != 16 && input != 11 && input !=12 && input!=13;
  2413  003898  0E00               	movlw	0
  2414  00389A  6E01               	movwf	_is_not_letter$1409,c
  2415  00389C  0E10               	movlw	16
  2416  00389E  1802               	xorwf	is_not_letter@input,w,c
  2417  0038A0  B4D8               	btfsc	status,2,c
  2418  0038A2  D00E               	goto	l627
  2419  0038A4  0E0B               	movlw	11
  2420  0038A6  1802               	xorwf	is_not_letter@input,w,c
  2421  0038A8  B4D8               	btfsc	status,2,c
  2422  0038AA  D00A               	goto	l627
  2423  0038AC  0E0C               	movlw	12
  2424  0038AE  1802               	xorwf	is_not_letter@input,w,c
  2425  0038B0  B4D8               	btfsc	status,2,c
  2426  0038B2  D006               	goto	l627
  2427  0038B4  0E0D               	movlw	13
  2428  0038B6  1802               	xorwf	is_not_letter@input,w,c
  2429  0038B8  B4D8               	btfsc	status,2,c
  2430  0038BA  D002               	goto	l627
  2431  0038BC  0E01               	movlw	1
  2432  0038BE  6E01               	movwf	_is_not_letter$1409,c
  2433  0038C0                     l627:
  2434  0038C0  5001               	movf	_is_not_letter$1409,w,c
  2435  0038C2  0012               	return	
  2436  0038C4  0012               	return		;funcret
  2437  0038C6                     __end_of_is_not_letter:
  2438                           	opt stack 0
  2439                           tblptru	equ	0xFF8
  2440                           tblptrh	equ	0xFF7
  2441                           tblptrl	equ	0xFF6
  2442                           tablat	equ	0xFF5
  2443                           postinc0	equ	0xFEE
  2444                           wreg	equ	0xFE8
  2445                           postdec1	equ	0xFE5
  2446                           fsr1l	equ	0xFE1
  2447                           indf2	equ	0xFDF
  2448                           postinc2	equ	0xFDE
  2449                           postdec2	equ	0xFDD
  2450                           fsr2h	equ	0xFDA
  2451                           fsr2l	equ	0xFD9
  2452                           status	equ	0xFD8
  2453                           
  2454 ;; *************** function _select_menu *****************
  2455 ;; Defined at:
  2456 ;;		line 127 in file "menu.c"
  2457 ;; Parameters:    Size  Location     Type
  2458 ;;		None
  2459 ;; Auto vars:     Size  Location     Type
  2460 ;;		None
  2461 ;; Return value:  Size  Location     Type
  2462 ;;                  2   34[None  ] int 
  2463 ;; Registers used:
  2464 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2465 ;; Tracked objects:
  2466 ;;		On entry : 0/0
  2467 ;;		On exit  : 0/0
  2468 ;;		Unchanged: 0/0
  2469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2471 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2472 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2473 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2474 ;;Total ram usage:        0 bytes
  2475 ;; Hardware stack levels used:    1
  2476 ;; Hardware stack levels required when called:    8
  2477 ;; This function calls:
  2478 ;;		_configurar_reloj
  2479 ;;		_dispararSensor
  2480 ;;		_read_keyboard
  2481 ;;		_ver_info
  2482 ;;		_ver_opcion_cambio
  2483 ;; This function is called by:
  2484 ;;		_main
  2485 ;; This function uses a non-reentrant model
  2486 ;;
  2487                           
  2488                           	psect	text10
  2489  002CBA                     __ptext10:
  2490                           	opt stack 0
  2491  002CBA                     _select_menu:
  2492                           	opt stack 22
  2493                           
  2494                           ;menu.c: 128: if (state_alarm == DESACTIVE){
  2495                           
  2496                           ;incstack = 0
  2497  002CBA  0100               	movlb	0	; () banked
  2498  002CBC  05DF               	decf	_state_alarm& (0+255),w,b
  2499  002CBE  A4D8               	btfss	status,2,c
  2500  002CC0  D01A               	goto	l5077
  2501                           
  2502                           ; BSR set to: 0
  2503                           ;menu.c: 129: menu = read_keyboard();
  2504  002CC2  ECF2  F007         	call	_read_keyboard	;wreg free
  2505  002CC6  0100               	movlb	0	; () banked
  2506  002CC8  6FDE               	movwf	_menu& (0+255),b
  2507                           
  2508                           ;menu.c: 130: switch (menu){
  2509  002CCA  D009               	goto	l5075
  2510  002CCC                     l5069:
  2511                           
  2512                           ; BSR set to: 0
  2513  002CCC  ECA2  F018         	call	_ver_opcion_cambio	;wreg free
  2514                           
  2515                           ;menu.c: 132: break;
  2516  002CD0  D03C               	goto	l5089
  2517  002CD2                     l5071:
  2518  002CD2  EC88  F017         	call	_configurar_reloj	;wreg free
  2519                           
  2520                           ;menu.c: 134: break;
  2521  002CD6  D039               	goto	l5089
  2522  002CD8                     l5073:
  2523  002CD8  EC50  F014         	call	_ver_info	;wreg free
  2524                           
  2525                           ;menu.c: 138: }
  2526                           
  2527                           ;menu.c: 137: default: ;
  2528                           
  2529                           ;menu.c: 136: break;
  2530  002CDC  D036               	goto	l5089
  2531  002CDE                     l5075:
  2532  002CDE  0100               	movlb	0	; () banked
  2533  002CE0  51DE               	movf	_menu& (0+255),w,b
  2534                           
  2535                           ; Switch size 1, requested type "space"
  2536                           ; Number of cases is 3, Range of values is 11 to 13
  2537                           ; switch strategies available:
  2538                           ; Name         Instructions Cycles
  2539                           ; simple_byte           10     6 (average)
  2540                           ;	Chosen strategy is simple_byte
  2541  002CE2  0A0B               	xorlw	11	; case 11
  2542  002CE4  B4D8               	btfsc	status,2,c
  2543  002CE6  D7F2               	goto	l5069
  2544  002CE8  0A07               	xorlw	7	; case 12
  2545  002CEA  B4D8               	btfsc	status,2,c
  2546  002CEC  D7F2               	goto	l5071
  2547  002CEE  0A01               	xorlw	1	; case 13
  2548  002CF0  B4D8               	btfsc	status,2,c
  2549  002CF2  D7F2               	goto	l5073
  2550                           
  2551                           ; BSR set to: 0
  2552                           ;menu.c: 139: }else{
  2553  002CF4  D02A               	goto	l5089
  2554  002CF6                     l5077:
  2555                           
  2556                           ; BSR set to: 0
  2557                           ;menu.c: 140: if (state_alarm == ACTIVE){
  2558  002CF6  0100               	movlb	0	; () banked
  2559  002CF8  51DF               	movf	_state_alarm& (0+255),w,b
  2560  002CFA  A4D8               	btfss	status,2,c
  2561  002CFC  D026               	goto	l5089
  2562                           
  2563                           ; BSR set to: 0
  2564                           ;menu.c: 141: menu = read_keyboard();
  2565  002CFE  ECF2  F007         	call	_read_keyboard	;wreg free
  2566  002D02  0100               	movlb	0	; () banked
  2567  002D04  6FDE               	movwf	_menu& (0+255),b
  2568                           
  2569                           ;menu.c: 142: switch (menu){
  2570  002D06  D015               	goto	l5087
  2571  002D08                     l5081:
  2572                           
  2573                           ; BSR set to: 0
  2574  002D08  0E00               	movlw	0
  2575  002D0A  6E14               	movwf	dispararSensor@sensor+1,c
  2576  002D0C  0E01               	movlw	1
  2577  002D0E  6E13               	movwf	dispararSensor@sensor,c
  2578  002D10  EC63  F01C         	call	_dispararSensor	;wreg free
  2579                           
  2580                           ;menu.c: 144: break;
  2581  002D14  D01A               	goto	l5089
  2582  002D16                     l5083:
  2583  002D16  0E00               	movlw	0
  2584  002D18  6E14               	movwf	dispararSensor@sensor+1,c
  2585  002D1A  0E02               	movlw	2
  2586  002D1C  6E13               	movwf	dispararSensor@sensor,c
  2587  002D1E  EC63  F01C         	call	_dispararSensor	;wreg free
  2588                           
  2589                           ;menu.c: 146: break;
  2590  002D22  D013               	goto	l5089
  2591  002D24                     l5085:
  2592  002D24  0E00               	movlw	0
  2593  002D26  6E14               	movwf	dispararSensor@sensor+1,c
  2594  002D28  0E03               	movlw	3
  2595  002D2A  6E13               	movwf	dispararSensor@sensor,c
  2596  002D2C  EC63  F01C         	call	_dispararSensor	;wreg free
  2597                           
  2598                           ;menu.c: 150: }
  2599                           
  2600                           ;menu.c: 149: default: ;
  2601                           
  2602                           ;menu.c: 148: break;
  2603  002D30  D00C               	goto	l5089
  2604  002D32                     l5087:
  2605  002D32  0100               	movlb	0	; () banked
  2606  002D34  51DE               	movf	_menu& (0+255),w,b
  2607                           
  2608                           ; Switch size 1, requested type "space"
  2609                           ; Number of cases is 3, Range of values is 11 to 13
  2610                           ; switch strategies available:
  2611                           ; Name         Instructions Cycles
  2612                           ; simple_byte           10     6 (average)
  2613                           ;	Chosen strategy is simple_byte
  2614  002D36  0A0B               	xorlw	11	; case 11
  2615  002D38  B4D8               	btfsc	status,2,c
  2616  002D3A  D7E6               	goto	l5081
  2617  002D3C  0A07               	xorlw	7	; case 12
  2618  002D3E  B4D8               	btfsc	status,2,c
  2619  002D40  D7EA               	goto	l5083
  2620  002D42  0A01               	xorlw	1	; case 13
  2621  002D44  B4D8               	btfsc	status,2,c
  2622  002D46  D7EE               	goto	l5085
  2623                           
  2624                           ; BSR set to: 0
  2625                           
  2626                           ; BSR set to: 0
  2627  002D48  D000               	goto	l5089
  2628  002D4A                     l5089:
  2629                           
  2630                           ;menu.c: 151: }
  2631                           ;menu.c: 152: }
  2632                           ;menu.c: 153: menu = 18;
  2633  002D4A  0E12               	movlw	18
  2634  002D4C  0100               	movlb	0	; () banked
  2635  002D4E  6FDE               	movwf	_menu& (0+255),b
  2636                           
  2637                           ; BSR set to: 0
  2638  002D50  0012               	return		;funcret
  2639  002D52                     __end_of_select_menu:
  2640                           	opt stack 0
  2641                           tblptru	equ	0xFF8
  2642                           tblptrh	equ	0xFF7
  2643                           tblptrl	equ	0xFF6
  2644                           tablat	equ	0xFF5
  2645                           postinc0	equ	0xFEE
  2646                           wreg	equ	0xFE8
  2647                           postdec1	equ	0xFE5
  2648                           fsr1l	equ	0xFE1
  2649                           indf2	equ	0xFDF
  2650                           postinc2	equ	0xFDE
  2651                           postdec2	equ	0xFDD
  2652                           fsr2h	equ	0xFDA
  2653                           fsr2l	equ	0xFD9
  2654                           status	equ	0xFD8
  2655                           
  2656 ;; *************** function _ver_opcion_cambio *****************
  2657 ;; Defined at:
  2658 ;;		line 71 in file "menu.c"
  2659 ;; Parameters:    Size  Location     Type
  2660 ;;		None
  2661 ;; Auto vars:     Size  Location     Type
  2662 ;;  input           1   90[COMRAM] unsigned char 
  2663 ;;  old_correct     1   89[COMRAM] unsigned char 
  2664 ;; Return value:  Size  Location     Type
  2665 ;;		None               void
  2666 ;; Registers used:
  2667 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2668 ;; Tracked objects:
  2669 ;;		On entry : 0/0
  2670 ;;		On exit  : 0/0
  2671 ;;		Unchanged: 0/0
  2672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2674 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2676 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2677 ;;Total ram usage:        2 bytes
  2678 ;; Hardware stack levels used:    1
  2679 ;; Hardware stack levels required when called:    7
  2680 ;; This function calls:
  2681 ;;		_changePass
  2682 ;;		_clear
  2683 ;;		_input_new_pass
  2684 ;;		_input_old_pass
  2685 ;;		_lcd_gotoxy
  2686 ;;		_lcd_putrs
  2687 ;;		_read_keyboard
  2688 ;;		_show_error
  2689 ;;		_show_success
  2690 ;; This function is called by:
  2691 ;;		_select_menu
  2692 ;; This function uses a non-reentrant model
  2693 ;;
  2694                           
  2695                           	psect	text11
  2696  003144                     __ptext11:
  2697                           	opt stack 0
  2698  003144                     _ver_opcion_cambio:
  2699                           	opt stack 22
  2700                           
  2701                           ;menu.c: 72: clear();
  2702                           
  2703                           ; BSR set to: 0
  2704                           ;incstack = 0
  2705  003144  EC24  F01D         	call	_clear	;wreg free
  2706                           
  2707                           ;menu.c: 73: bool old_correct = 0;
  2708  003148  0E00               	movlw	0
  2709  00314A  6E5A               	movwf	ver_opcion_cambio@old_correct,c
  2710                           
  2711                           ;menu.c: 74: lcd_gotoxy(2,1);
  2712  00314C  0E01               	movlw	1
  2713  00314E  6E05               	movwf	lcd_gotoxy@y,c
  2714  003150  0E02               	movlw	2
  2715  003152  ECF3  F01C         	call	_lcd_gotoxy
  2716                           
  2717                           ;menu.c: 75: lcd_putrs("Old pass:____");
  2718  003156  0E76               	movlw	low STR_23
  2719  003158  6E09               	movwf	lcd_putrs@ptr,c
  2720  00315A  0E0F               	movlw	high STR_23
  2721  00315C  6E0A               	movwf	lcd_putrs@ptr+1,c
  2722  00315E  ECBF  F01A         	call	_lcd_putrs	;wreg free
  2723                           
  2724                           ;menu.c: 76: lcd_gotoxy(2,2);
  2725  003162  0E02               	movlw	2
  2726  003164  6E05               	movwf	lcd_gotoxy@y,c
  2727  003166  0E02               	movlw	2
  2728  003168  ECF3  F01C         	call	_lcd_gotoxy
  2729                           
  2730                           ;menu.c: 77: lcd_putrs("New pass:____");
  2731  00316C  0E84               	movlw	low STR_24
  2732  00316E  6E09               	movwf	lcd_putrs@ptr,c
  2733  003170  0E0F               	movlw	high STR_24
  2734  003172  6E0A               	movwf	lcd_putrs@ptr+1,c
  2735  003174  ECBF  F01A         	call	_lcd_putrs	;wreg free
  2736                           
  2737                           ;menu.c: 78: lcd_gotoxy(11,1);
  2738  003178  0E01               	movlw	1
  2739  00317A  6E05               	movwf	lcd_gotoxy@y,c
  2740  00317C  0E0B               	movlw	11
  2741  00317E  ECF3  F01C         	call	_lcd_gotoxy
  2742                           
  2743                           ;menu.c: 79: old_correct = input_old_pass();
  2744  003182  ECE5  F00D         	call	_input_old_pass	;wreg free
  2745  003186  6E5A               	movwf	ver_opcion_cambio@old_correct,c
  2746                           
  2747                           ;menu.c: 80: lcd_gotoxy(11,2);
  2748  003188  0E02               	movlw	2
  2749  00318A  6E05               	movwf	lcd_gotoxy@y,c
  2750  00318C  0E0B               	movlw	11
  2751  00318E  ECF3  F01C         	call	_lcd_gotoxy
  2752                           
  2753                           ;menu.c: 81: input_new_pass();
  2754  003192  ECCF  F00F         	call	_input_new_pass	;wreg free
  2755                           
  2756                           ;menu.c: 82: char input = 0;
  2757  003196  0E00               	movlw	0
  2758  003198  D002               	goto	L1
  2759  00319A                     l4987:
  2760                           
  2761                           ;menu.c: 84: input = read_keyboard();
  2762  00319A  ECF2  F007         	call	_read_keyboard	;wreg free
  2763  00319E                     L1:
  2764  00319E  6E5B               	movwf	ver_opcion_cambio@input,c
  2765  0031A0  D000               	goto	l4989
  2766  0031A2                     l4989:
  2767  0031A2  0E10               	movlw	16
  2768  0031A4  185B               	xorwf	ver_opcion_cambio@input,w,c
  2769  0031A6  A4D8               	btfss	status,2,c
  2770  0031A8  D7F8               	goto	l4987
  2771                           
  2772                           ;menu.c: 85: }
  2773                           ;menu.c: 86: if (old_correct)
  2774  0031AA  505A               	movf	ver_opcion_cambio@old_correct,w,c
  2775  0031AC  B4D8               	btfsc	status,2,c
  2776  0031AE  D009               	goto	l4997
  2777                           
  2778                           ;menu.c: 87: {
  2779                           ;menu.c: 88: changePass(newpass);
  2780  0031B0  C092  F001         	movff	_newpass,changePass@pass
  2781  0031B4  C093  F002         	movff	_newpass+1,changePass@pass+1
  2782  0031B8  EC6F  F01D         	call	_changePass	;wreg free
  2783                           
  2784                           ;menu.c: 89: show_success();
  2785  0031BC  ECA0  F01B         	call	_show_success	;wreg free
  2786                           
  2787                           ;menu.c: 90: }else{
  2788  0031C0  0012               	return	
  2789  0031C2                     l4997:
  2790                           
  2791                           ;menu.c: 91: show_error();
  2792  0031C2  ECBF  F01B         	call	_show_error	;wreg free
  2793  0031C6  0012               	return	
  2794  0031C8  0012               	return		;funcret
  2795  0031CA                     __end_of_ver_opcion_cambio:
  2796                           	opt stack 0
  2797                           tblptru	equ	0xFF8
  2798                           tblptrh	equ	0xFF7
  2799                           tblptrl	equ	0xFF6
  2800                           tablat	equ	0xFF5
  2801                           postinc0	equ	0xFEE
  2802                           wreg	equ	0xFE8
  2803                           postdec1	equ	0xFE5
  2804                           fsr1l	equ	0xFE1
  2805                           indf2	equ	0xFDF
  2806                           postinc2	equ	0xFDE
  2807                           postdec2	equ	0xFDD
  2808                           fsr2h	equ	0xFDA
  2809                           fsr2l	equ	0xFD9
  2810                           status	equ	0xFD8
  2811                           
  2812 ;; *************** function _show_success *****************
  2813 ;; Defined at:
  2814 ;;		line 36 in file "menu.c"
  2815 ;; Parameters:    Size  Location     Type
  2816 ;;		None
  2817 ;; Auto vars:     Size  Location     Type
  2818 ;;		None
  2819 ;; Return value:  Size  Location     Type
  2820 ;;		None               void
  2821 ;; Registers used:
  2822 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2823 ;; Tracked objects:
  2824 ;;		On entry : 0/0
  2825 ;;		On exit  : 0/0
  2826 ;;		Unchanged: 0/0
  2827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2831 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2832 ;;Total ram usage:        0 bytes
  2833 ;; Hardware stack levels used:    1
  2834 ;; Hardware stack levels required when called:    5
  2835 ;; This function calls:
  2836 ;;		__delay_s
  2837 ;;		_clear
  2838 ;;		_lcd_gotoxy
  2839 ;;		_lcd_putrs
  2840 ;; This function is called by:
  2841 ;;		_ver_opcion_cambio
  2842 ;; This function uses a non-reentrant model
  2843 ;;
  2844                           
  2845                           	psect	text12
  2846  003740                     __ptext12:
  2847                           	opt stack 0
  2848  003740                     _show_success:
  2849                           	opt stack 23
  2850                           
  2851                           ;menu.c: 37: clear();
  2852                           
  2853                           ;incstack = 0
  2854  003740  EC24  F01D         	call	_clear	;wreg free
  2855                           
  2856                           ;menu.c: 38: lcd_gotoxy(1,1);
  2857  003744  0E01               	movlw	1
  2858  003746  6E05               	movwf	lcd_gotoxy@y,c
  2859  003748  0E01               	movlw	1
  2860  00374A  ECF3  F01C         	call	_lcd_gotoxy
  2861                           
  2862                           ;menu.c: 39: lcd_putrs("pass success");
  2863  00374E  0E92               	movlw	low STR_19
  2864  003750  6E09               	movwf	lcd_putrs@ptr,c
  2865  003752  0E0F               	movlw	high STR_19
  2866  003754  6E0A               	movwf	lcd_putrs@ptr+1,c
  2867  003756  ECBF  F01A         	call	_lcd_putrs	;wreg free
  2868                           
  2869                           ;menu.c: 40: lcd_gotoxy(1,2);
  2870  00375A  0E02               	movlw	2
  2871  00375C  6E05               	movwf	lcd_gotoxy@y,c
  2872  00375E  0E01               	movlw	1
  2873  003760  ECF3  F01C         	call	_lcd_gotoxy
  2874                           
  2875                           ;menu.c: 41: lcd_putrs("changed");
  2876  003764  0E50               	movlw	low (STR_22+8)
  2877  003766  6E09               	movwf	lcd_putrs@ptr,c
  2878  003768  0E0F               	movlw	high (STR_22+8)
  2879  00376A  6E0A               	movwf	lcd_putrs@ptr+1,c
  2880  00376C  ECBF  F01A         	call	_lcd_putrs	;wreg free
  2881                           
  2882                           ;menu.c: 42: _delay_s(1000);
  2883  003770  0E03               	movlw	3
  2884  003772  6E0A               	movwf	__delay_s@millis+1,c
  2885  003774  0EE8               	movlw	232
  2886  003776  6E09               	movwf	__delay_s@millis,c
  2887  003778  EC93  F01A         	call	__delay_s	;wreg free
  2888  00377C  0012               	return		;funcret
  2889  00377E                     __end_of_show_success:
  2890                           	opt stack 0
  2891                           tblptru	equ	0xFF8
  2892                           tblptrh	equ	0xFF7
  2893                           tblptrl	equ	0xFF6
  2894                           tablat	equ	0xFF5
  2895                           postinc0	equ	0xFEE
  2896                           wreg	equ	0xFE8
  2897                           postdec1	equ	0xFE5
  2898                           fsr1l	equ	0xFE1
  2899                           indf2	equ	0xFDF
  2900                           postinc2	equ	0xFDE
  2901                           postdec2	equ	0xFDD
  2902                           fsr2h	equ	0xFDA
  2903                           fsr2l	equ	0xFD9
  2904                           status	equ	0xFD8
  2905                           
  2906 ;; *************** function _show_error *****************
  2907 ;; Defined at:
  2908 ;;		line 45 in file "menu.c"
  2909 ;; Parameters:    Size  Location     Type
  2910 ;;		None
  2911 ;; Auto vars:     Size  Location     Type
  2912 ;;		None
  2913 ;; Return value:  Size  Location     Type
  2914 ;;		None               void
  2915 ;; Registers used:
  2916 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2917 ;; Tracked objects:
  2918 ;;		On entry : 0/0
  2919 ;;		On exit  : 0/0
  2920 ;;		Unchanged: 0/0
  2921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2925 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2926 ;;Total ram usage:        0 bytes
  2927 ;; Hardware stack levels used:    1
  2928 ;; Hardware stack levels required when called:    5
  2929 ;; This function calls:
  2930 ;;		__delay_s
  2931 ;;		_clear
  2932 ;;		_lcd_gotoxy
  2933 ;;		_lcd_putrs
  2934 ;; This function is called by:
  2935 ;;		_ver_opcion_cambio
  2936 ;; This function uses a non-reentrant model
  2937 ;;
  2938                           
  2939                           	psect	text13
  2940  00377E                     __ptext13:
  2941                           	opt stack 0
  2942  00377E                     _show_error:
  2943                           	opt stack 23
  2944                           
  2945                           ;menu.c: 46: clear();
  2946                           
  2947                           ;incstack = 0
  2948  00377E  EC24  F01D         	call	_clear	;wreg free
  2949                           
  2950                           ;menu.c: 47: lcd_gotoxy(1,1);
  2951  003782  0E01               	movlw	1
  2952  003784  6E05               	movwf	lcd_gotoxy@y,c
  2953  003786  0E01               	movlw	1
  2954  003788  ECF3  F01C         	call	_lcd_gotoxy
  2955                           
  2956                           ;menu.c: 48: lcd_putrs("old pass wrong");
  2957  00378C  0E58               	movlw	low STR_21
  2958  00378E  6E09               	movwf	lcd_putrs@ptr,c
  2959  003790  0E0F               	movlw	high STR_21
  2960  003792  6E0A               	movwf	lcd_putrs@ptr+1,c
  2961  003794  ECBF  F01A         	call	_lcd_putrs	;wreg free
  2962                           
  2963                           ;menu.c: 49: lcd_gotoxy(1,2);
  2964  003798  0E02               	movlw	2
  2965  00379A  6E05               	movwf	lcd_gotoxy@y,c
  2966  00379C  0E01               	movlw	1
  2967  00379E  ECF3  F01C         	call	_lcd_gotoxy
  2968                           
  2969                           ;menu.c: 50: lcd_putrs("nothing changed");
  2970  0037A2  0E48               	movlw	low STR_22
  2971  0037A4  6E09               	movwf	lcd_putrs@ptr,c
  2972  0037A6  0E0F               	movlw	high STR_22
  2973  0037A8  6E0A               	movwf	lcd_putrs@ptr+1,c
  2974  0037AA  ECBF  F01A         	call	_lcd_putrs	;wreg free
  2975                           
  2976                           ;menu.c: 51: _delay_s(1000);
  2977  0037AE  0E03               	movlw	3
  2978  0037B0  6E0A               	movwf	__delay_s@millis+1,c
  2979  0037B2  0EE8               	movlw	232
  2980  0037B4  6E09               	movwf	__delay_s@millis,c
  2981  0037B6  EC93  F01A         	call	__delay_s	;wreg free
  2982  0037BA  0012               	return		;funcret
  2983  0037BC                     __end_of_show_error:
  2984                           	opt stack 0
  2985                           tblptru	equ	0xFF8
  2986                           tblptrh	equ	0xFF7
  2987                           tblptrl	equ	0xFF6
  2988                           tablat	equ	0xFF5
  2989                           postinc0	equ	0xFEE
  2990                           wreg	equ	0xFE8
  2991                           postdec1	equ	0xFE5
  2992                           fsr1l	equ	0xFE1
  2993                           indf2	equ	0xFDF
  2994                           postinc2	equ	0xFDE
  2995                           postdec2	equ	0xFDD
  2996                           fsr2h	equ	0xFDA
  2997                           fsr2l	equ	0xFD9
  2998                           status	equ	0xFD8
  2999                           
  3000 ;; *************** function _input_old_pass *****************
  3001 ;; Defined at:
  3002 ;;		line 17 in file "menu.c"
  3003 ;; Parameters:    Size  Location     Type
  3004 ;;		None
  3005 ;; Auto vars:     Size  Location     Type
  3006 ;;  digit           2   20[BANK0 ] short 
  3007 ;;  pass            2   17[BANK0 ] int 
  3008 ;;  input           1   19[BANK0 ] unsigned char 
  3009 ;; Return value:  Size  Location     Type
  3010 ;;                  1    wreg      unsigned char 
  3011 ;; Registers used:
  3012 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3013 ;; Tracked objects:
  3014 ;;		On entry : 0/0
  3015 ;;		On exit  : 0/0
  3016 ;;		Unchanged: 0/0
  3017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3019 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3020 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3021 ;;      Totals:         2      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3022 ;;Total ram usage:       13 bytes
  3023 ;; Hardware stack levels used:    1
  3024 ;; Hardware stack levels required when called:    6
  3025 ;; This function calls:
  3026 ;;		___awtoft
  3027 ;;		___ftadd
  3028 ;;		___ftmul
  3029 ;;		___fttol
  3030 ;;		___lbtoft
  3031 ;;		__delay_s
  3032 ;;		_checkPass
  3033 ;;		_clear_keyboard
  3034 ;;		_lcd_gotoxy
  3035 ;;		_not_fill_pass
  3036 ;;		_pow
  3037 ;;		_read_keyboard
  3038 ;; This function is called by:
  3039 ;;		_ver_opcion_cambio
  3040 ;; This function uses a non-reentrant model
  3041 ;;
  3042                           
  3043                           	psect	text14
  3044  001BCA                     __ptext14:
  3045                           	opt stack 0
  3046  001BCA                     _input_old_pass:
  3047                           	opt stack 22
  3048                           
  3049                           ;menu.c: 18: short digit = 12;
  3050                           
  3051                           ;incstack = 0
  3052  001BCA  0E00               	movlw	0
  3053  001BCC  0100               	movlb	0	; () banked
  3054  001BCE  6FC8               	movwf	(input_old_pass@digit+1)& (0+255),b
  3055  001BD0  0E0C               	movlw	12
  3056  001BD2  6FC7               	movwf	input_old_pass@digit& (0+255),b
  3057                           
  3058                           ;menu.c: 19: int pass = 0;
  3059  001BD4  0E00               	movlw	0
  3060  001BD6  0100               	movlb	0	; () banked
  3061  001BD8  6FC5               	movwf	(input_old_pass@pass+1)& (0+255),b
  3062  001BDA  0E00               	movlw	0
  3063  001BDC  6FC4               	movwf	input_old_pass@pass& (0+255),b
  3064                           
  3065                           ; BSR set to: 0
  3066                           ;menu.c: 20: char input = read_keyboard();
  3067  001BDE  ECF2  F007         	call	_read_keyboard	;wreg free
  3068  001BE2  D083               	goto	L2
  3069  001BE4                     l4795:
  3070                           
  3071                           ;menu.c: 22: if(0<input && input<10){
  3072  001BE4  0100               	movlb	0	; () banked
  3073  001BE6  51C6               	movf	input_old_pass@input& (0+255),w,b
  3074  001BE8  0100               	movlb	0	; () banked
  3075  001BEA  B4D8               	btfsc	status,2,c
  3076  001BEC  D07C               	goto	l4815
  3077                           
  3078                           ; BSR set to: 0
  3079  001BEE  0E0A               	movlw	10
  3080  001BF0  0100               	movlb	0	; () banked
  3081  001BF2  61C6               	cpfslt	input_old_pass@input& (0+255),b
  3082  001BF4  D078               	goto	l4815
  3083                           
  3084                           ; BSR set to: 0
  3085                           ;menu.c: 23: pass = pass + input * pow(10, 15 - digit);
  3086  001BF6  C0C7  F058         	movff	input_old_pass@digit,??_input_old_pass
  3087  001BFA  C0C8  F059         	movff	input_old_pass@digit+1,??_input_old_pass+1
  3088  001BFE  1E58               	comf	??_input_old_pass,f,c
  3089  001C00  1E59               	comf	??_input_old_pass+1,f,c
  3090  001C02  4A58               	infsnz	??_input_old_pass,f,c
  3091  001C04  2A59               	incf	??_input_old_pass+1,f,c
  3092  001C06  0E0F               	movlw	15
  3093  001C08  2458               	addwf	??_input_old_pass,w,c
  3094  001C0A  6E09               	movwf	___awtoft@c,c
  3095  001C0C  0E00               	movlw	0
  3096  001C0E  2059               	addwfc	??_input_old_pass+1,w,c
  3097  001C10  6E0A               	movwf	___awtoft@c+1,c
  3098  001C12  ECDE  F01B         	call	___awtoft	;wreg free
  3099  001C16  C009  F0BE         	movff	?___awtoft,_input_old_pass$3186
  3100  001C1A  C00A  F0BF         	movff	?___awtoft+1,_input_old_pass$3186+1
  3101  001C1E  C00B  F0C0         	movff	?___awtoft+2,_input_old_pass$3186+2
  3102                           
  3103                           ;menu.c: 23: pass = pass + input * pow(10, 15 - digit);
  3104  001C22  C0BE  F055         	movff	_input_old_pass$3186,pow@y
  3105  001C26  C0BF  F056         	movff	_input_old_pass$3186+1,pow@y+1
  3106  001C2A  C0C0  F057         	movff	_input_old_pass$3186+2,pow@y+2
  3107  001C2E  0E00               	movlw	0
  3108  001C30  6E52               	movwf	pow@x,c
  3109  001C32  0E20               	movlw	32
  3110  001C34  6E53               	movwf	pow@x+1,c
  3111  001C36  0E41               	movlw	65
  3112  001C38  6E54               	movwf	pow@x+2,c
  3113  001C3A  EC24  F00D         	call	_pow	;wreg free
  3114  001C3E  C052  F0C1         	movff	?_pow,_input_old_pass$3187
  3115  001C42  C053  F0C2         	movff	?_pow+1,_input_old_pass$3187+1
  3116  001C46  C054  F0C3         	movff	?_pow+2,_input_old_pass$3187+2
  3117                           
  3118                           ;menu.c: 23: pass = pass + input * pow(10, 15 - digit);
  3119  001C4A  C0C1  F010         	movff	_input_old_pass$3187,___ftmul@f2
  3120  001C4E  C0C2  F011         	movff	_input_old_pass$3187+1,___ftmul@f2+1
  3121  001C52  C0C3  F012         	movff	_input_old_pass$3187+2,___ftmul@f2+2
  3122  001C56  0100               	movlb	0	; () banked
  3123  001C58  51C6               	movf	input_old_pass@input& (0+255),w,b
  3124  001C5A  ECBC  F01C         	call	___lbtoft
  3125  001C5E  C009  F00D         	movff	?___lbtoft,___ftmul@f1
  3126  001C62  C00A  F00E         	movff	?___lbtoft+1,___ftmul@f1+1
  3127  001C66  C00B  F00F         	movff	?___lbtoft+2,___ftmul@f1+2
  3128  001C6A  EC03  F012         	call	___ftmul	;wreg free
  3129  001C6E  C00D  F01F         	movff	?___ftmul,___ftadd@f2
  3130  001C72  C00E  F020         	movff	?___ftmul+1,___ftadd@f2+1
  3131  001C76  C00F  F021         	movff	?___ftmul+2,___ftadd@f2+2
  3132  001C7A  C0C4  F009         	movff	input_old_pass@pass,___awtoft@c
  3133  001C7E  C0C5  F00A         	movff	input_old_pass@pass+1,___awtoft@c+1
  3134  001C82  ECDE  F01B         	call	___awtoft	;wreg free
  3135  001C86  C009  F01C         	movff	?___awtoft,___ftadd@f1
  3136  001C8A  C00A  F01D         	movff	?___awtoft+1,___ftadd@f1+1
  3137  001C8E  C00B  F01E         	movff	?___awtoft+2,___ftadd@f1+2
  3138  001C92  EC74  F00B         	call	___ftadd	;wreg free
  3139  001C96  C01C  F028         	movff	?___ftadd,___fttol@f1
  3140  001C9A  C01D  F029         	movff	?___ftadd+1,___fttol@f1+1
  3141  001C9E  C01E  F02A         	movff	?___ftadd+2,___fttol@f1+2
  3142  001CA2  EC82  F011         	call	___fttol	;wreg free
  3143  001CA6  C028  F0C4         	movff	?___fttol,input_old_pass@pass
  3144  001CAA  C029  F0C5         	movff	?___fttol+1,input_old_pass@pass+1
  3145                           
  3146                           ;menu.c: 24: lcd_gotoxy(digit,1);
  3147  001CAE  0E01               	movlw	1
  3148  001CB0  6E05               	movwf	lcd_gotoxy@y,c
  3149  001CB2  0100               	movlb	0	; () banked
  3150  001CB4  51C7               	movf	input_old_pass@digit& (0+255),w,b
  3151  001CB6  ECF3  F01C         	call	_lcd_gotoxy
  3152                           
  3153                           ;menu.c: 25: _delay_s(50);
  3154  001CBA  0E00               	movlw	0
  3155  001CBC  6E0A               	movwf	__delay_s@millis+1,c
  3156  001CBE  0E32               	movlw	50
  3157  001CC0  6E09               	movwf	__delay_s@millis,c
  3158  001CC2  EC93  F01A         	call	__delay_s	;wreg free
  3159                           
  3160                           ;menu.c: 26: clear_keyboard();
  3161  001CC6  EC74  F01D         	call	_clear_keyboard	;wreg free
  3162                           
  3163                           ;menu.c: 27: digit = digit +1;
  3164  001CCA  0E01               	movlw	1
  3165  001CCC  0100               	movlb	0	; () banked
  3166  001CCE  25C7               	addwf	input_old_pass@digit& (0+255),w,b
  3167  001CD0  0100               	movlb	0	; () banked
  3168  001CD2  6FC7               	movwf	input_old_pass@digit& (0+255),b
  3169  001CD4  0E00               	movlw	0
  3170  001CD6  0100               	movlb	0	; () banked
  3171  001CD8  21C8               	addwfc	(input_old_pass@digit+1)& (0+255),w,b
  3172  001CDA  0100               	movlb	0	; () banked
  3173  001CDC  6FC8               	movwf	(input_old_pass@digit+1)& (0+255),b
  3174                           
  3175                           ; BSR set to: 0
  3176                           ;menu.c: 28: input = 18;
  3177  001CDE  0E12               	movlw	18
  3178  001CE0  0100               	movlb	0	; () banked
  3179  001CE2  6FC6               	movwf	input_old_pass@input& (0+255),b
  3180  001CE4  D000               	goto	l4815
  3181  001CE6                     l4815:
  3182                           
  3183                           ; BSR set to: 0
  3184                           ;menu.c: 29: }
  3185                           ;menu.c: 31: input = read_keyboard();
  3186  001CE6  ECF2  F007         	call	_read_keyboard	;wreg free
  3187  001CEA                     L2:
  3188  001CEA  0100               	movlb	0	; () banked
  3189  001CEC  6FC6               	movwf	input_old_pass@input& (0+255),b
  3190  001CEE  D000               	goto	l4817
  3191  001CF0                     l4817:
  3192                           
  3193                           ; BSR set to: 0
  3194  001CF0  C0C7  F001         	movff	input_old_pass@digit,not_fill_pass@digit
  3195  001CF4  C0C8  F002         	movff	input_old_pass@digit+1,not_fill_pass@digit+1
  3196  001CF8  EC2F  F01D         	call	_not_fill_pass	;wreg free
  3197  001CFC  0900               	iorlw	0
  3198  001CFE  A4D8               	btfss	status,2,c
  3199  001D00  D771               	goto	l4795
  3200                           
  3201                           ;menu.c: 32: }
  3202                           ;menu.c: 33: return checkPass(pass);
  3203  001D02  C0C4  F001         	movff	input_old_pass@pass,checkPass@pass
  3204  001D06  C0C5  F002         	movff	input_old_pass@pass+1,checkPass@pass+1
  3205  001D0A  EC16  F01D         	call	_checkPass	;wreg free
  3206  001D0E  0012               	return	
  3207  001D10  0012               	return		;funcret
  3208  001D12                     __end_of_input_old_pass:
  3209                           	opt stack 0
  3210                           tblptru	equ	0xFF8
  3211                           tblptrh	equ	0xFF7
  3212                           tblptrl	equ	0xFF6
  3213                           tablat	equ	0xFF5
  3214                           postinc0	equ	0xFEE
  3215                           wreg	equ	0xFE8
  3216                           postdec1	equ	0xFE5
  3217                           fsr1l	equ	0xFE1
  3218                           indf2	equ	0xFDF
  3219                           postinc2	equ	0xFDE
  3220                           postdec2	equ	0xFDD
  3221                           fsr2h	equ	0xFDA
  3222                           fsr2l	equ	0xFD9
  3223                           status	equ	0xFD8
  3224                           
  3225 ;; *************** function _checkPass *****************
  3226 ;; Defined at:
  3227 ;;		line 3 in file "config.c"
  3228 ;; Parameters:    Size  Location     Type
  3229 ;;  pass            2    0[COMRAM] int 
  3230 ;; Auto vars:     Size  Location     Type
  3231 ;;		None
  3232 ;; Return value:  Size  Location     Type
  3233 ;;                  1    wreg      unsigned char 
  3234 ;; Registers used:
  3235 ;;		wreg, status,2, status,0
  3236 ;; Tracked objects:
  3237 ;;		On entry : 0/0
  3238 ;;		On exit  : 0/0
  3239 ;;		Unchanged: 0/0
  3240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3241 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3244 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3245 ;;Total ram usage:        2 bytes
  3246 ;; Hardware stack levels used:    1
  3247 ;; This function calls:
  3248 ;;		Nothing
  3249 ;; This function is called by:
  3250 ;;		_review_code
  3251 ;;		_input_old_pass
  3252 ;; This function uses a non-reentrant model
  3253 ;;
  3254                           
  3255                           	psect	text15
  3256  003A2C                     __ptext15:
  3257                           	opt stack 0
  3258  003A2C                     _checkPass:
  3259                           	opt stack 26
  3260                           
  3261                           ;config.c: 4: return password == pass;
  3262                           
  3263                           ;incstack = 0
  3264  003A2C  5001               	movf	checkPass@pass,w,c
  3265  003A2E  0100               	movlb	0	; () banked
  3266  003A30  19D9               	xorwf	_password& (0+255),w,b
  3267  003A32  E107               	bnz	u3510
  3268  003A34  5002               	movf	checkPass@pass+1,w,c
  3269  003A36  0100               	movlb	0	; () banked
  3270  003A38  19DA               	xorwf	(_password+1)& (0+255),w,b
  3271  003A3A  A4D8               	btfss	status,2,c
  3272  003A3C  D002               	goto	u3510
  3273  003A3E  0E01               	movlw	1
  3274  003A40  0012               	return	
  3275  003A42                     u3510:
  3276  003A42  0E00               	movlw	0
  3277  003A44  0012               	return	
  3278                           
  3279                           ; BSR set to: 0
  3280                           
  3281                           ; BSR set to: 0
  3282  003A46  0012               	return		;funcret
  3283  003A48                     __end_of_checkPass:
  3284                           	opt stack 0
  3285                           tblptru	equ	0xFF8
  3286                           tblptrh	equ	0xFF7
  3287                           tblptrl	equ	0xFF6
  3288                           tablat	equ	0xFF5
  3289                           postinc0	equ	0xFEE
  3290                           wreg	equ	0xFE8
  3291                           postdec1	equ	0xFE5
  3292                           fsr1l	equ	0xFE1
  3293                           indf2	equ	0xFDF
  3294                           postinc2	equ	0xFDE
  3295                           postdec2	equ	0xFDD
  3296                           fsr2h	equ	0xFDA
  3297                           fsr2l	equ	0xFD9
  3298                           status	equ	0xFD8
  3299                           
  3300 ;; *************** function _input_new_pass *****************
  3301 ;; Defined at:
  3302 ;;		line 54 in file "menu.c"
  3303 ;; Parameters:    Size  Location     Type
  3304 ;;		None
  3305 ;; Auto vars:     Size  Location     Type
  3306 ;;  digit           2   18[BANK0 ] short 
  3307 ;;  input           1   17[BANK0 ] unsigned char 
  3308 ;; Return value:  Size  Location     Type
  3309 ;;		None               void
  3310 ;; Registers used:
  3311 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3312 ;; Tracked objects:
  3313 ;;		On entry : 0/0
  3314 ;;		On exit  : 0/0
  3315 ;;		Unchanged: 0/0
  3316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3318 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3319 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3320 ;;      Totals:         2       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3321 ;;Total ram usage:       11 bytes
  3322 ;; Hardware stack levels used:    1
  3323 ;; Hardware stack levels required when called:    6
  3324 ;; This function calls:
  3325 ;;		___awtoft
  3326 ;;		___ftadd
  3327 ;;		___ftmul
  3328 ;;		___fttol
  3329 ;;		___lbtoft
  3330 ;;		__delay_s
  3331 ;;		_clear_keyboard
  3332 ;;		_lcd_gotoxy
  3333 ;;		_not_fill_pass
  3334 ;;		_pow
  3335 ;;		_read_keyboard
  3336 ;; This function is called by:
  3337 ;;		_ver_opcion_cambio
  3338 ;; This function uses a non-reentrant model
  3339 ;;
  3340                           
  3341                           	psect	text16
  3342  001F9E                     __ptext16:
  3343                           	opt stack 0
  3344  001F9E                     _input_new_pass:
  3345                           	opt stack 22
  3346                           
  3347                           ;menu.c: 55: short digit = 12;
  3348                           
  3349                           ; BSR set to: 0
  3350                           ;incstack = 0
  3351  001F9E  0E00               	movlw	0
  3352  001FA0  0100               	movlb	0	; () banked
  3353  001FA2  6FC6               	movwf	(input_new_pass@digit+1)& (0+255),b
  3354  001FA4  0E0C               	movlw	12
  3355  001FA6  6FC5               	movwf	input_new_pass@digit& (0+255),b
  3356                           
  3357                           ;menu.c: 56: newpass = 0;
  3358  001FA8  0E00               	movlw	0
  3359  001FAA  0100               	movlb	0	; () banked
  3360  001FAC  6F93               	movwf	(_newpass+1)& (0+255),b
  3361  001FAE  0E00               	movlw	0
  3362  001FB0  6F92               	movwf	_newpass& (0+255),b
  3363                           
  3364                           ; BSR set to: 0
  3365                           ;menu.c: 57: char input = read_keyboard();
  3366  001FB2  ECF2  F007         	call	_read_keyboard	;wreg free
  3367  001FB6  D083               	goto	L3
  3368  001FB8                     l4843:
  3369                           
  3370                           ;menu.c: 59: if(0<input && input<10){
  3371  001FB8  0100               	movlb	0	; () banked
  3372  001FBA  51C4               	movf	input_new_pass@input& (0+255),w,b
  3373  001FBC  0100               	movlb	0	; () banked
  3374  001FBE  B4D8               	btfsc	status,2,c
  3375  001FC0  D07C               	goto	l4863
  3376                           
  3377                           ; BSR set to: 0
  3378  001FC2  0E0A               	movlw	10
  3379  001FC4  0100               	movlb	0	; () banked
  3380  001FC6  61C4               	cpfslt	input_new_pass@input& (0+255),b
  3381  001FC8  D078               	goto	l4863
  3382                           
  3383                           ; BSR set to: 0
  3384                           ;menu.c: 60: newpass = newpass + input * pow(10, 15 - digit);
  3385  001FCA  C0C5  F058         	movff	input_new_pass@digit,??_input_new_pass
  3386  001FCE  C0C6  F059         	movff	input_new_pass@digit+1,??_input_new_pass+1
  3387  001FD2  1E58               	comf	??_input_new_pass,f,c
  3388  001FD4  1E59               	comf	??_input_new_pass+1,f,c
  3389  001FD6  4A58               	infsnz	??_input_new_pass,f,c
  3390  001FD8  2A59               	incf	??_input_new_pass+1,f,c
  3391  001FDA  0E0F               	movlw	15
  3392  001FDC  2458               	addwf	??_input_new_pass,w,c
  3393  001FDE  6E09               	movwf	___awtoft@c,c
  3394  001FE0  0E00               	movlw	0
  3395  001FE2  2059               	addwfc	??_input_new_pass+1,w,c
  3396  001FE4  6E0A               	movwf	___awtoft@c+1,c
  3397  001FE6  ECDE  F01B         	call	___awtoft	;wreg free
  3398  001FEA  C009  F0BE         	movff	?___awtoft,_input_new_pass$3188
  3399  001FEE  C00A  F0BF         	movff	?___awtoft+1,_input_new_pass$3188+1
  3400  001FF2  C00B  F0C0         	movff	?___awtoft+2,_input_new_pass$3188+2
  3401                           
  3402                           ;menu.c: 60: newpass = newpass + input * pow(10, 15 - digit);
  3403  001FF6  C0BE  F055         	movff	_input_new_pass$3188,pow@y
  3404  001FFA  C0BF  F056         	movff	_input_new_pass$3188+1,pow@y+1
  3405  001FFE  C0C0  F057         	movff	_input_new_pass$3188+2,pow@y+2
  3406  002002  0E00               	movlw	0
  3407  002004  6E52               	movwf	pow@x,c
  3408  002006  0E20               	movlw	32
  3409  002008  6E53               	movwf	pow@x+1,c
  3410  00200A  0E41               	movlw	65
  3411  00200C  6E54               	movwf	pow@x+2,c
  3412  00200E  EC24  F00D         	call	_pow	;wreg free
  3413  002012  C052  F0C1         	movff	?_pow,_input_new_pass$3189
  3414  002016  C053  F0C2         	movff	?_pow+1,_input_new_pass$3189+1
  3415  00201A  C054  F0C3         	movff	?_pow+2,_input_new_pass$3189+2
  3416                           
  3417                           ;menu.c: 60: newpass = newpass + input * pow(10, 15 - digit);
  3418  00201E  C0C1  F010         	movff	_input_new_pass$3189,___ftmul@f2
  3419  002022  C0C2  F011         	movff	_input_new_pass$3189+1,___ftmul@f2+1
  3420  002026  C0C3  F012         	movff	_input_new_pass$3189+2,___ftmul@f2+2
  3421  00202A  0100               	movlb	0	; () banked
  3422  00202C  51C4               	movf	input_new_pass@input& (0+255),w,b
  3423  00202E  ECBC  F01C         	call	___lbtoft
  3424  002032  C009  F00D         	movff	?___lbtoft,___ftmul@f1
  3425  002036  C00A  F00E         	movff	?___lbtoft+1,___ftmul@f1+1
  3426  00203A  C00B  F00F         	movff	?___lbtoft+2,___ftmul@f1+2
  3427  00203E  EC03  F012         	call	___ftmul	;wreg free
  3428  002042  C00D  F01F         	movff	?___ftmul,___ftadd@f2
  3429  002046  C00E  F020         	movff	?___ftmul+1,___ftadd@f2+1
  3430  00204A  C00F  F021         	movff	?___ftmul+2,___ftadd@f2+2
  3431  00204E  C092  F009         	movff	_newpass,___awtoft@c
  3432  002052  C093  F00A         	movff	_newpass+1,___awtoft@c+1
  3433  002056  ECDE  F01B         	call	___awtoft	;wreg free
  3434  00205A  C009  F01C         	movff	?___awtoft,___ftadd@f1
  3435  00205E  C00A  F01D         	movff	?___awtoft+1,___ftadd@f1+1
  3436  002062  C00B  F01E         	movff	?___awtoft+2,___ftadd@f1+2
  3437  002066  EC74  F00B         	call	___ftadd	;wreg free
  3438  00206A  C01C  F028         	movff	?___ftadd,___fttol@f1
  3439  00206E  C01D  F029         	movff	?___ftadd+1,___fttol@f1+1
  3440  002072  C01E  F02A         	movff	?___ftadd+2,___fttol@f1+2
  3441  002076  EC82  F011         	call	___fttol	;wreg free
  3442  00207A  C028  F092         	movff	?___fttol,_newpass
  3443  00207E  C029  F093         	movff	?___fttol+1,_newpass+1
  3444                           
  3445                           ;menu.c: 61: lcd_gotoxy(digit,2);
  3446  002082  0E02               	movlw	2
  3447  002084  6E05               	movwf	lcd_gotoxy@y,c
  3448  002086  0100               	movlb	0	; () banked
  3449  002088  51C5               	movf	input_new_pass@digit& (0+255),w,b
  3450  00208A  ECF3  F01C         	call	_lcd_gotoxy
  3451                           
  3452                           ;menu.c: 62: _delay_s(50);
  3453  00208E  0E00               	movlw	0
  3454  002090  6E0A               	movwf	__delay_s@millis+1,c
  3455  002092  0E32               	movlw	50
  3456  002094  6E09               	movwf	__delay_s@millis,c
  3457  002096  EC93  F01A         	call	__delay_s	;wreg free
  3458                           
  3459                           ;menu.c: 63: clear_keyboard();
  3460  00209A  EC74  F01D         	call	_clear_keyboard	;wreg free
  3461                           
  3462                           ;menu.c: 64: digit = digit +1;
  3463  00209E  0E01               	movlw	1
  3464  0020A0  0100               	movlb	0	; () banked
  3465  0020A2  25C5               	addwf	input_new_pass@digit& (0+255),w,b
  3466  0020A4  0100               	movlb	0	; () banked
  3467  0020A6  6FC5               	movwf	input_new_pass@digit& (0+255),b
  3468  0020A8  0E00               	movlw	0
  3469  0020AA  0100               	movlb	0	; () banked
  3470  0020AC  21C6               	addwfc	(input_new_pass@digit+1)& (0+255),w,b
  3471  0020AE  0100               	movlb	0	; () banked
  3472  0020B0  6FC6               	movwf	(input_new_pass@digit+1)& (0+255),b
  3473                           
  3474                           ; BSR set to: 0
  3475                           ;menu.c: 65: input = 18;
  3476  0020B2  0E12               	movlw	18
  3477  0020B4  0100               	movlb	0	; () banked
  3478  0020B6  6FC4               	movwf	input_new_pass@input& (0+255),b
  3479  0020B8  D000               	goto	l4863
  3480  0020BA                     l4863:
  3481                           
  3482                           ; BSR set to: 0
  3483                           ;menu.c: 66: }
  3484                           ;menu.c: 67: input = read_keyboard();
  3485  0020BA  ECF2  F007         	call	_read_keyboard	;wreg free
  3486  0020BE                     L3:
  3487  0020BE  0100               	movlb	0	; () banked
  3488  0020C0  6FC4               	movwf	input_new_pass@input& (0+255),b
  3489  0020C2  D000               	goto	l4865
  3490  0020C4                     l4865:
  3491                           
  3492                           ; BSR set to: 0
  3493  0020C4  C0C5  F001         	movff	input_new_pass@digit,not_fill_pass@digit
  3494  0020C8  C0C6  F002         	movff	input_new_pass@digit+1,not_fill_pass@digit+1
  3495  0020CC  EC2F  F01D         	call	_not_fill_pass	;wreg free
  3496  0020D0  0900               	iorlw	0
  3497  0020D2  A4D8               	btfss	status,2,c
  3498  0020D4  D771               	goto	l4843
  3499  0020D6  0012               	return		;funcret
  3500  0020D8                     __end_of_input_new_pass:
  3501                           	opt stack 0
  3502                           tblptru	equ	0xFF8
  3503                           tblptrh	equ	0xFF7
  3504                           tblptrl	equ	0xFF6
  3505                           tablat	equ	0xFF5
  3506                           postinc0	equ	0xFEE
  3507                           wreg	equ	0xFE8
  3508                           postdec1	equ	0xFE5
  3509                           fsr1l	equ	0xFE1
  3510                           indf2	equ	0xFDF
  3511                           postinc2	equ	0xFDE
  3512                           postdec2	equ	0xFDD
  3513                           fsr2h	equ	0xFDA
  3514                           fsr2l	equ	0xFD9
  3515                           status	equ	0xFD8
  3516                           
  3517 ;; *************** function _pow *****************
  3518 ;; Defined at:
  3519 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\pow.c"
  3520 ;; Parameters:    Size  Location     Type
  3521 ;;  x               3   81[COMRAM] unsigned char 
  3522 ;;  y               3   84[COMRAM] unsigned char 
  3523 ;; Auto vars:     Size  Location     Type
  3524 ;;  yi              4    7[BANK0 ] unsigned long 
  3525 ;;  sign            1    6[BANK0 ] unsigned char 
  3526 ;; Return value:  Size  Location     Type
  3527 ;;                  3   81[COMRAM] unsigned char 
  3528 ;; Registers used:
  3529 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3530 ;; Tracked objects:
  3531 ;;		On entry : 0/0
  3532 ;;		On exit  : 0/0
  3533 ;;		Unchanged: 0/0
  3534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3535 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3536 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3538 ;;      Totals:         6      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3539 ;;Total ram usage:       17 bytes
  3540 ;; Hardware stack levels used:    1
  3541 ;; Hardware stack levels required when called:    4
  3542 ;; This function calls:
  3543 ;;		___ftge
  3544 ;;		___ftmul
  3545 ;;		___ftneg
  3546 ;;		___fttol
  3547 ;;		___lltoft
  3548 ;;		_exp
  3549 ;;		_log
  3550 ;; This function is called by:
  3551 ;;		_obtain_pass
  3552 ;;		_input_old_pass
  3553 ;;		_input_new_pass
  3554 ;; This function uses a non-reentrant model
  3555 ;;
  3556                           
  3557                           	psect	text17
  3558  001A48                     __ptext17:
  3559                           	opt stack 0
  3560  001A48                     _pow:
  3561                           	opt stack 22
  3562                           
  3563                           ;incstack = 0
  3564  001A48  0E00               	movlw	0
  3565  001A4A  0100               	movlb	0	; () banked
  3566  001A4C  6FB9               	movwf	pow@sign& (0+255),b
  3567                           
  3568                           ; BSR set to: 0
  3569  001A4E  5052               	movf	pow@x,w,c
  3570  001A50  1053               	iorwf	pow@x+1,w,c
  3571  001A52  1054               	iorwf	pow@x+2,w,c
  3572  001A54  A4D8               	btfss	status,2,c
  3573  001A56  D01C               	goto	l4211
  3574                           
  3575                           ; BSR set to: 0
  3576  001A58  0E00               	movlw	0
  3577  001A5A  6E01               	movwf	___ftge@ff1,c
  3578  001A5C  0E00               	movlw	0
  3579  001A5E  6E02               	movwf	___ftge@ff1+1,c
  3580  001A60  0E00               	movlw	0
  3581  001A62  6E03               	movwf	___ftge@ff1+2,c
  3582  001A64  C055  F004         	movff	pow@y,___ftge@ff2
  3583  001A68  C056  F005         	movff	pow@y+1,___ftge@ff2+1
  3584  001A6C  C057  F006         	movff	pow@y+2,___ftge@ff2+2
  3585  001A70  ECA9  F016         	call	___ftge	;wreg free
  3586  001A74  A0D8               	btfss	status,0,c
  3587  001A76  D005               	goto	l1678
  3588  001A78  0E00               	movlw	0
  3589  001A7A  0100               	movlb	0	; () banked
  3590  001A7C  6F85               	movwf	(_errno+1)& (0+255),b
  3591  001A7E  0E21               	movlw	33
  3592  001A80  6F84               	movwf	_errno& (0+255),b
  3593  001A82                     l1678:
  3594  001A82  0E00               	movlw	0
  3595  001A84  6E52               	movwf	?_pow,c
  3596  001A86  0E00               	movlw	0
  3597  001A88  6E53               	movwf	?_pow+1,c
  3598  001A8A  0E00               	movlw	0
  3599  001A8C  6E54               	movwf	?_pow+2,c
  3600  001A8E  0012               	return	
  3601  001A90                     l4211:
  3602  001A90  5055               	movf	pow@y,w,c
  3603  001A92  1056               	iorwf	pow@y+1,w,c
  3604  001A94  1057               	iorwf	pow@y+2,w,c
  3605  001A96  A4D8               	btfss	status,2,c
  3606  001A98  D007               	goto	l4217
  3607  001A9A  0E00               	movlw	0
  3608  001A9C  6E52               	movwf	?_pow,c
  3609  001A9E  0E80               	movlw	128
  3610  001AA0  6E53               	movwf	?_pow+1,c
  3611  001AA2  0E3F               	movlw	63
  3612  001AA4  6E54               	movwf	?_pow+2,c
  3613  001AA6  0012               	return	
  3614  001AA8                     l4217:
  3615  001AA8  AE54               	btfss	pow@x+2,7,c
  3616  001AAA  D044               	goto	l4229
  3617  001AAC  C055  F028         	movff	pow@y,___fttol@f1
  3618  001AB0  C056  F029         	movff	pow@y+1,___fttol@f1+1
  3619  001AB4  C057  F02A         	movff	pow@y+2,___fttol@f1+2
  3620  001AB8  EC82  F011         	call	___fttol	;wreg free
  3621  001ABC  C028  F0BA         	movff	?___fttol,pow@yi
  3622  001AC0  C029  F0BB         	movff	?___fttol+1,pow@yi+1
  3623  001AC4  C02A  F0BC         	movff	?___fttol+2,pow@yi+2
  3624  001AC8  C02B  F0BD         	movff	?___fttol+3,pow@yi+3
  3625  001ACC  C0BA  F009         	movff	pow@yi,___lltoft@c
  3626  001AD0  C0BB  F00A         	movff	pow@yi+1,___lltoft@c+1
  3627  001AD4  C0BC  F00B         	movff	pow@yi+2,___lltoft@c+2
  3628  001AD8  C0BD  F00C         	movff	pow@yi+3,___lltoft@c+3
  3629  001ADC  EC06  F01A         	call	___lltoft	;wreg free
  3630  001AE0  5055               	movf	pow@y,w,c
  3631  001AE2  1809               	xorwf	?___lltoft,w,c
  3632  001AE4  E107               	bnz	u3570
  3633  001AE6  5056               	movf	pow@y+1,w,c
  3634  001AE8  180A               	xorwf	?___lltoft+1,w,c
  3635  001AEA  E104               	bnz	u3570
  3636  001AEC  5057               	movf	pow@y+2,w,c
  3637  001AEE  180B               	xorwf	?___lltoft+2,w,c
  3638  001AF0  B4D8               	btfsc	status,2,c
  3639  001AF2  D00C               	goto	l4225
  3640  001AF4                     u3570:
  3641  001AF4  0E00               	movlw	0
  3642  001AF6  0100               	movlb	0	; () banked
  3643  001AF8  6F85               	movwf	(_errno+1)& (0+255),b
  3644  001AFA  0E21               	movlw	33
  3645  001AFC  6F84               	movwf	_errno& (0+255),b
  3646  001AFE  0E00               	movlw	0
  3647  001B00  6E52               	movwf	?_pow,c
  3648  001B02  0E00               	movlw	0
  3649  001B04  6E53               	movwf	?_pow+1,c
  3650  001B06  0E00               	movlw	0
  3651  001B08  6E54               	movwf	?_pow+2,c
  3652                           
  3653                           ; BSR set to: 0
  3654  001B0A  0012               	return	
  3655  001B0C                     l4225:
  3656  001B0C  0100               	movlb	0	; () banked
  3657  001B0E  51BA               	movf	pow@yi& (0+255),w,b
  3658  001B10  0B01               	andlw	1
  3659  001B12  0100               	movlb	0	; () banked
  3660  001B14  6FB9               	movwf	pow@sign& (0+255),b
  3661                           
  3662                           ; BSR set to: 0
  3663  001B16  C052  F001         	movff	pow@x,___ftneg@f1
  3664  001B1A  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  3665  001B1E  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  3666  001B22  ECE1  F01C         	call	___ftneg	;wreg free
  3667  001B26  C001  F052         	movff	?___ftneg,pow@x
  3668  001B2A  C002  F053         	movff	?___ftneg+1,pow@x+1
  3669  001B2E  C003  F054         	movff	?___ftneg+2,pow@x+2
  3670  001B32  D000               	goto	l4229
  3671  001B34                     l4229:
  3672  001B34  C052  F034         	movff	pow@x,log@x
  3673  001B38  C053  F035         	movff	pow@x+1,log@x+1
  3674  001B3C  C054  F036         	movff	pow@x+2,log@x+2
  3675  001B40  EC6C  F010         	call	_log	;wreg free
  3676  001B44  C034  F0B3         	movff	?_log,_pow$3190
  3677  001B48  C035  F0B4         	movff	?_log+1,_pow$3190+1
  3678  001B4C  C036  F0B5         	movff	?_log+2,_pow$3190+2
  3679  001B50  C0B3  F00D         	movff	_pow$3190,___ftmul@f1
  3680  001B54  C0B4  F00E         	movff	_pow$3190+1,___ftmul@f1+1
  3681  001B58  C0B5  F00F         	movff	_pow$3190+2,___ftmul@f1+2
  3682  001B5C  C055  F010         	movff	pow@y,___ftmul@f2
  3683  001B60  C056  F011         	movff	pow@y+1,___ftmul@f2+1
  3684  001B64  C057  F012         	movff	pow@y+2,___ftmul@f2+2
  3685  001B68  EC03  F012         	call	___ftmul	;wreg free
  3686  001B6C  C00D  F0B6         	movff	?___ftmul,_pow$3191
  3687  001B70  C00E  F0B7         	movff	?___ftmul+1,_pow$3191+1
  3688  001B74  C00F  F0B8         	movff	?___ftmul+2,_pow$3191+2
  3689  001B78  C0B6  F049         	movff	_pow$3191,exp@x
  3690  001B7C  C0B7  F04A         	movff	_pow$3191+1,exp@x+1
  3691  001B80  C0B8  F04B         	movff	_pow$3191+2,exp@x+2
  3692  001B84  EC80  F00A         	call	_exp	;wreg free
  3693  001B88  C049  F052         	movff	?_exp,pow@x
  3694  001B8C  C04A  F053         	movff	?_exp+1,pow@x+1
  3695  001B90  C04B  F054         	movff	?_exp+2,pow@x+2
  3696  001B94  0100               	movlb	0	; () banked
  3697  001B96  51B9               	movf	pow@sign& (0+255),w,b
  3698  001B98  0100               	movlb	0	; () banked
  3699  001B9A  B4D8               	btfsc	status,2,c
  3700  001B9C  D00F               	goto	l1683
  3701                           
  3702                           ; BSR set to: 0
  3703  001B9E  C052  F001         	movff	pow@x,___ftneg@f1
  3704  001BA2  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  3705  001BA6  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  3706  001BAA  ECE1  F01C         	call	___ftneg	;wreg free
  3707  001BAE  C001  F052         	movff	?___ftneg,?_pow
  3708  001BB2  C002  F053         	movff	?___ftneg+1,?_pow+1
  3709  001BB6  C003  F054         	movff	?___ftneg+2,?_pow+2
  3710  001BBA  0012               	return	
  3711  001BBC                     l1683:
  3712                           
  3713                           ; BSR set to: 0
  3714  001BBC  C052  F052         	movff	pow@x,?_pow
  3715  001BC0  C053  F053         	movff	pow@x+1,?_pow+1
  3716  001BC4  C054  F054         	movff	pow@x+2,?_pow+2
  3717  001BC8  0012               	return		;funcret
  3718  001BCA                     __end_of_pow:
  3719                           	opt stack 0
  3720                           tblptru	equ	0xFF8
  3721                           tblptrh	equ	0xFF7
  3722                           tblptrl	equ	0xFF6
  3723                           tablat	equ	0xFF5
  3724                           postinc0	equ	0xFEE
  3725                           wreg	equ	0xFE8
  3726                           postdec1	equ	0xFE5
  3727                           fsr1l	equ	0xFE1
  3728                           indf2	equ	0xFDF
  3729                           postinc2	equ	0xFDE
  3730                           postdec2	equ	0xFDD
  3731                           fsr2h	equ	0xFDA
  3732                           fsr2l	equ	0xFD9
  3733                           status	equ	0xFD8
  3734                           
  3735 ;; *************** function _log *****************
  3736 ;; Defined at:
  3737 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\log.c"
  3738 ;; Parameters:    Size  Location     Type
  3739 ;;  x               3   51[COMRAM] unsigned char 
  3740 ;; Auto vars:     Size  Location     Type
  3741 ;;  exponent        2   54[COMRAM] int 
  3742 ;; Return value:  Size  Location     Type
  3743 ;;                  3   51[COMRAM] int 
  3744 ;; Registers used:
  3745 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3746 ;; Tracked objects:
  3747 ;;		On entry : 0/0
  3748 ;;		On exit  : 0/0
  3749 ;;		Unchanged: 0/0
  3750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3751 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3752 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3754 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3755 ;;Total ram usage:        5 bytes
  3756 ;; Hardware stack levels used:    1
  3757 ;; Hardware stack levels required when called:    3
  3758 ;; This function calls:
  3759 ;;		___awtoft
  3760 ;;		___ftadd
  3761 ;;		___ftmul
  3762 ;;		_eval_poly
  3763 ;;		_frexp
  3764 ;; This function is called by:
  3765 ;;		_pow
  3766 ;; This function uses a non-reentrant model
  3767 ;;
  3768                           
  3769                           	psect	text18
  3770  0020D8                     __ptext18:
  3771                           	opt stack 0
  3772  0020D8                     _log:
  3773                           	opt stack 22
  3774                           
  3775                           ;incstack = 0
  3776  0020D8  AE36               	btfss	log@x+2,7,c
  3777  0020DA  D00C               	goto	l4017
  3778  0020DC  0E00               	movlw	0
  3779  0020DE  0100               	movlb	0	; () banked
  3780  0020E0  6F85               	movwf	(_errno+1)& (0+255),b
  3781  0020E2  0E21               	movlw	33
  3782  0020E4  6F84               	movwf	_errno& (0+255),b
  3783  0020E6  0E00               	movlw	0
  3784  0020E8  6E34               	movwf	?_log,c
  3785  0020EA  0E00               	movlw	0
  3786  0020EC  6E35               	movwf	?_log+1,c
  3787  0020EE  0E00               	movlw	0
  3788  0020F0  6E36               	movwf	?_log+2,c
  3789                           
  3790                           ; BSR set to: 0
  3791  0020F2  0012               	return	
  3792  0020F4                     l4017:
  3793  0020F4  5034               	movf	log@x,w,c
  3794  0020F6  1035               	iorwf	log@x+1,w,c
  3795  0020F8  1036               	iorwf	log@x+2,w,c
  3796  0020FA  A4D8               	btfss	status,2,c
  3797  0020FC  D00C               	goto	l4023
  3798  0020FE  0E00               	movlw	0
  3799  002100  0100               	movlb	0	; () banked
  3800  002102  6F85               	movwf	(_errno+1)& (0+255),b
  3801  002104  0E22               	movlw	34
  3802  002106  6F84               	movwf	_errno& (0+255),b
  3803  002108  0E00               	movlw	0
  3804  00210A  6E34               	movwf	?_log,c
  3805  00210C  0E00               	movlw	0
  3806  00210E  6E35               	movwf	?_log+1,c
  3807  002110  0E00               	movlw	0
  3808  002112  6E36               	movwf	?_log+2,c
  3809                           
  3810                           ; BSR set to: 0
  3811  002114  0012               	return	
  3812  002116                     l4023:
  3813  002116  0E00               	movlw	0
  3814  002118  6E10               	movwf	___ftmul@f2,c
  3815  00211A  0E00               	movlw	0
  3816  00211C  6E11               	movwf	___ftmul@f2+1,c
  3817  00211E  0E40               	movlw	64
  3818  002120  6E12               	movwf	___ftmul@f2+2,c
  3819  002122  0E37               	movlw	low log@exponent
  3820  002124  6E04               	movwf	frexp@eptr,c
  3821  002126  0E00               	movlw	high log@exponent
  3822  002128  6E05               	movwf	frexp@eptr+1,c
  3823  00212A  C034  F001         	movff	log@x,frexp@value
  3824  00212E  C035  F002         	movff	log@x+1,frexp@value+1
  3825  002132  C036  F003         	movff	log@x+2,frexp@value+2
  3826  002136  EC3F  F017         	call	_frexp	;wreg free
  3827  00213A  C001  F00D         	movff	?_frexp,___ftmul@f1
  3828  00213E  C002  F00E         	movff	?_frexp+1,___ftmul@f1+1
  3829  002142  C003  F00F         	movff	?_frexp+2,___ftmul@f1+2
  3830  002146  EC03  F012         	call	___ftmul	;wreg free
  3831  00214A  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  3832  00214E  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  3833  002152  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  3834  002156  0E00               	movlw	0
  3835  002158  6E1F               	movwf	___ftadd@f2,c
  3836  00215A  0E80               	movlw	128
  3837  00215C  6E20               	movwf	___ftadd@f2+1,c
  3838  00215E  0EBF               	movlw	191
  3839  002160  6E21               	movwf	___ftadd@f2+2,c
  3840  002162  EC74  F00B         	call	___ftadd	;wreg free
  3841  002166  C01C  F034         	movff	?___ftadd,log@x
  3842  00216A  C01D  F035         	movff	?___ftadd+1,log@x+1
  3843  00216E  C01E  F036         	movff	?___ftadd+2,log@x+2
  3844  002172  0637               	decf	log@exponent,f,c
  3845  002174  A0D8               	btfss	status,0,c
  3846  002176  0638               	decf	log@exponent+1,f,c
  3847  002178  C034  F028         	movff	log@x,eval_poly@x
  3848  00217C  C035  F029         	movff	log@x+1,eval_poly@x+1
  3849  002180  C036  F02A         	movff	log@x+2,eval_poly@x+2
  3850  002184  0E2D               	movlw	low log@coeff
  3851  002186  6E2B               	movwf	eval_poly@d,c
  3852  002188  0E0F               	movlw	high log@coeff
  3853  00218A  6E2C               	movwf	eval_poly@d+1,c
  3854  00218C  0E00               	movlw	0
  3855  00218E  6E2E               	movwf	eval_poly@n+1,c
  3856  002190  0E08               	movlw	8
  3857  002192  6E2D               	movwf	eval_poly@n,c
  3858  002194  EC29  F015         	call	_eval_poly	;wreg free
  3859  002198  C028  F034         	movff	?_eval_poly,log@x
  3860  00219C  C029  F035         	movff	?_eval_poly+1,log@x+1
  3861  0021A0  C02A  F036         	movff	?_eval_poly+2,log@x+2
  3862  0021A4  0E72               	movlw	114
  3863  0021A6  6E10               	movwf	___ftmul@f2,c
  3864  0021A8  0E31               	movlw	49
  3865  0021AA  6E11               	movwf	___ftmul@f2+1,c
  3866  0021AC  0E3F               	movlw	63
  3867  0021AE  6E12               	movwf	___ftmul@f2+2,c
  3868  0021B0  C037  F009         	movff	log@exponent,___awtoft@c
  3869  0021B4  C038  F00A         	movff	log@exponent+1,___awtoft@c+1
  3870  0021B8  ECDE  F01B         	call	___awtoft	;wreg free
  3871  0021BC  C009  F00D         	movff	?___awtoft,___ftmul@f1
  3872  0021C0  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  3873  0021C4  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  3874  0021C8  EC03  F012         	call	___ftmul	;wreg free
  3875  0021CC  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  3876  0021D0  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  3877  0021D4  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  3878  0021D8  C034  F01F         	movff	log@x,___ftadd@f2
  3879  0021DC  C035  F020         	movff	log@x+1,___ftadd@f2+1
  3880  0021E0  C036  F021         	movff	log@x+2,___ftadd@f2+2
  3881  0021E4  EC74  F00B         	call	___ftadd	;wreg free
  3882  0021E8  C01C  F034         	movff	?___ftadd,?_log
  3883  0021EC  C01D  F035         	movff	?___ftadd+1,?_log+1
  3884  0021F0  C01E  F036         	movff	?___ftadd+2,?_log+2
  3885  0021F4  0012               	return	
  3886  0021F6  0012               	return		;funcret
  3887  0021F8                     __end_of_log:
  3888                           	opt stack 0
  3889                           tblptru	equ	0xFF8
  3890                           tblptrh	equ	0xFF7
  3891                           tblptrl	equ	0xFF6
  3892                           tablat	equ	0xFF5
  3893                           postinc0	equ	0xFEE
  3894                           wreg	equ	0xFE8
  3895                           postdec1	equ	0xFE5
  3896                           fsr1l	equ	0xFE1
  3897                           indf2	equ	0xFDF
  3898                           postinc2	equ	0xFDE
  3899                           postdec2	equ	0xFDD
  3900                           fsr2h	equ	0xFDA
  3901                           fsr2l	equ	0xFD9
  3902                           status	equ	0xFD8
  3903                           
  3904 ;; *************** function _exp *****************
  3905 ;; Defined at:
  3906 ;;		line 12 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\exp.c"
  3907 ;; Parameters:    Size  Location     Type
  3908 ;;  x               3   72[COMRAM] int 
  3909 ;; Auto vars:     Size  Location     Type
  3910 ;;  exponent        2   78[COMRAM] int 
  3911 ;;  sign            1   80[COMRAM] unsigned char 
  3912 ;; Return value:  Size  Location     Type
  3913 ;;                  3   72[COMRAM] unsigned char 
  3914 ;; Registers used:
  3915 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3916 ;; Tracked objects:
  3917 ;;		On entry : 0/0
  3918 ;;		On exit  : 0/0
  3919 ;;		Unchanged: 0/0
  3920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3921 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3922 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3924 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3925 ;;Total ram usage:        9 bytes
  3926 ;; Hardware stack levels used:    1
  3927 ;; Hardware stack levels required when called:    3
  3928 ;; This function calls:
  3929 ;;		___awtoft
  3930 ;;		___ftdiv
  3931 ;;		___ftge
  3932 ;;		___ftmul
  3933 ;;		___ftneg
  3934 ;;		___ftsub
  3935 ;;		___fttol
  3936 ;;		_eval_poly
  3937 ;;		_floor
  3938 ;;		_ldexp
  3939 ;; This function is called by:
  3940 ;;		_pow
  3941 ;; This function uses a non-reentrant model
  3942 ;;
  3943                           
  3944                           	psect	text19
  3945  001500                     __ptext19:
  3946                           	opt stack 0
  3947  001500                     _exp:
  3948                           	opt stack 22
  3949                           
  3950                           ;incstack = 0
  3951  001500  5049               	movf	exp@x,w,c
  3952  001502  104A               	iorwf	exp@x+1,w,c
  3953  001504  104B               	iorwf	exp@x+2,w,c
  3954  001506  A4D8               	btfss	status,2,c
  3955  001508  D007               	goto	l4039
  3956  00150A  0E00               	movlw	0
  3957  00150C  6E49               	movwf	?_exp,c
  3958  00150E  0E80               	movlw	128
  3959  001510  6E4A               	movwf	?_exp+1,c
  3960  001512  0E3F               	movlw	63
  3961  001514  6E4B               	movwf	?_exp+2,c
  3962  001516  0012               	return	
  3963  001518                     l4039:
  3964  001518  0E72               	movlw	114
  3965  00151A  6E01               	movwf	___ftge@ff1,c
  3966  00151C  0E31               	movlw	49
  3967  00151E  6E02               	movwf	___ftge@ff1+1,c
  3968  001520  0E44               	movlw	68
  3969  001522  6E03               	movwf	___ftge@ff1+2,c
  3970  001524  C049  F004         	movff	exp@x,___ftge@ff2
  3971  001528  C04A  F005         	movff	exp@x+1,___ftge@ff2+1
  3972  00152C  C04B  F006         	movff	exp@x+2,___ftge@ff2+2
  3973  001530  ECA9  F016         	call	___ftge	;wreg free
  3974  001534  B0D8               	btfsc	status,0,c
  3975  001536  D00C               	goto	l4045
  3976  001538  0E00               	movlw	0
  3977  00153A  0100               	movlb	0	; () banked
  3978  00153C  6F85               	movwf	(_errno+1)& (0+255),b
  3979  00153E  0E22               	movlw	34
  3980  001540  6F84               	movwf	_errno& (0+255),b
  3981  001542  0EFF               	movlw	255
  3982  001544  6E49               	movwf	?_exp,c
  3983  001546  0E7F               	movlw	127
  3984  001548  6E4A               	movwf	?_exp+1,c
  3985  00154A  0E7F               	movlw	127
  3986  00154C  6E4B               	movwf	?_exp+2,c
  3987                           
  3988                           ; BSR set to: 0
  3989  00154E  0012               	return	
  3990  001550                     l4045:
  3991  001550  C049  F001         	movff	exp@x,___ftge@ff1
  3992  001554  C04A  F002         	movff	exp@x+1,___ftge@ff1+1
  3993  001558  C04B  F003         	movff	exp@x+2,___ftge@ff1+2
  3994  00155C  0E49               	movlw	73
  3995  00155E  6E04               	movwf	___ftge@ff2,c
  3996  001560  0E3A               	movlw	58
  3997  001562  6E05               	movwf	___ftge@ff2+1,c
  3998  001564  0EC4               	movlw	196
  3999  001566  6E06               	movwf	___ftge@ff2+2,c
  4000  001568  ECA9  F016         	call	___ftge	;wreg free
  4001  00156C  B0D8               	btfsc	status,0,c
  4002  00156E  D00C               	goto	l4051
  4003  001570  0E00               	movlw	0
  4004  001572  0100               	movlb	0	; () banked
  4005  001574  6F85               	movwf	(_errno+1)& (0+255),b
  4006  001576  0E22               	movlw	34
  4007  001578  6F84               	movwf	_errno& (0+255),b
  4008  00157A  0E00               	movlw	0
  4009  00157C  6E49               	movwf	?_exp,c
  4010  00157E  0E00               	movlw	0
  4011  001580  6E4A               	movwf	?_exp+1,c
  4012  001582  0E00               	movlw	0
  4013  001584  6E4B               	movwf	?_exp+2,c
  4014                           
  4015                           ; BSR set to: 0
  4016  001586  0012               	return	
  4017  001588                     l4051:
  4018  001588  AE4B               	btfss	exp@x+2,7,c
  4019  00158A  D002               	goto	u3290
  4020  00158C  0E01               	movlw	1
  4021  00158E  D001               	goto	u3300
  4022  001590                     u3290:
  4023  001590  0E00               	movlw	0
  4024  001592                     u3300:
  4025  001592  6E51               	movwf	exp@sign,c
  4026  001594  5051               	movf	exp@sign,w,c
  4027  001596  B4D8               	btfsc	status,2,c
  4028  001598  D00E               	goto	l1702
  4029  00159A  C049  F001         	movff	exp@x,___ftneg@f1
  4030  00159E  C04A  F002         	movff	exp@x+1,___ftneg@f1+1
  4031  0015A2  C04B  F003         	movff	exp@x+2,___ftneg@f1+2
  4032  0015A6  ECE1  F01C         	call	___ftneg	;wreg free
  4033  0015AA  C001  F049         	movff	?___ftneg,exp@x
  4034  0015AE  C002  F04A         	movff	?___ftneg+1,exp@x+1
  4035  0015B2  C003  F04B         	movff	?___ftneg+2,exp@x+2
  4036  0015B6                     l1702:
  4037  0015B6  C049  F00D         	movff	exp@x,___ftmul@f1
  4038  0015BA  C04A  F00E         	movff	exp@x+1,___ftmul@f1+1
  4039  0015BE  C04B  F00F         	movff	exp@x+2,___ftmul@f1+2
  4040  0015C2  0EAA               	movlw	170
  4041  0015C4  6E10               	movwf	___ftmul@f2,c
  4042  0015C6  0EB8               	movlw	184
  4043  0015C8  6E11               	movwf	___ftmul@f2+1,c
  4044  0015CA  0E3F               	movlw	63
  4045  0015CC  6E12               	movwf	___ftmul@f2+2,c
  4046  0015CE  EC03  F012         	call	___ftmul	;wreg free
  4047  0015D2  C00D  F049         	movff	?___ftmul,exp@x
  4048  0015D6  C00E  F04A         	movff	?___ftmul+1,exp@x+1
  4049  0015DA  C00F  F04B         	movff	?___ftmul+2,exp@x+2
  4050  0015DE  C049  F041         	movff	exp@x,floor@x
  4051  0015E2  C04A  F042         	movff	exp@x+1,floor@x+1
  4052  0015E6  C04B  F043         	movff	exp@x+2,floor@x+2
  4053  0015EA  ECE1  F013         	call	_floor	;wreg free
  4054  0015EE  C041  F04C         	movff	?_floor,_exp$3192
  4055  0015F2  C042  F04D         	movff	?_floor+1,_exp$3192+1
  4056  0015F6  C043  F04E         	movff	?_floor+2,_exp$3192+2
  4057  0015FA  C04C  F028         	movff	_exp$3192,___fttol@f1
  4058  0015FE  C04D  F029         	movff	_exp$3192+1,___fttol@f1+1
  4059  001602  C04E  F02A         	movff	_exp$3192+2,___fttol@f1+2
  4060  001606  EC82  F011         	call	___fttol	;wreg free
  4061  00160A  C028  F04F         	movff	?___fttol,exp@exponent
  4062  00160E  C029  F050         	movff	?___fttol+1,exp@exponent+1
  4063  001612  C049  F028         	movff	exp@x,___ftsub@f1
  4064  001616  C04A  F029         	movff	exp@x+1,___ftsub@f1+1
  4065  00161A  C04B  F02A         	movff	exp@x+2,___ftsub@f1+2
  4066  00161E  C04F  F009         	movff	exp@exponent,___awtoft@c
  4067  001622  C050  F00A         	movff	exp@exponent+1,___awtoft@c+1
  4068  001626  ECDE  F01B         	call	___awtoft	;wreg free
  4069  00162A  C009  F02B         	movff	?___awtoft,___ftsub@f2
  4070  00162E  C00A  F02C         	movff	?___awtoft+1,___ftsub@f2+1
  4071  001632  C00B  F02D         	movff	?___awtoft+2,___ftsub@f2+2
  4072  001636  EC7E  F01B         	call	___ftsub	;wreg free
  4073  00163A  C028  F049         	movff	?___ftsub,exp@x
  4074  00163E  C029  F04A         	movff	?___ftsub+1,exp@x+1
  4075  001642  C02A  F04B         	movff	?___ftsub+2,exp@x+2
  4076  001646  C049  F028         	movff	exp@x,eval_poly@x
  4077  00164A  C04A  F029         	movff	exp@x+1,eval_poly@x+1
  4078  00164E  C04B  F02A         	movff	exp@x+2,eval_poly@x+2
  4079  001652  0E0F               	movlw	low exp@coeff
  4080  001654  6E2B               	movwf	eval_poly@d,c
  4081  001656  0E0F               	movlw	high exp@coeff
  4082  001658  6E2C               	movwf	eval_poly@d+1,c
  4083  00165A  0E00               	movlw	0
  4084  00165C  6E2E               	movwf	eval_poly@n+1,c
  4085  00165E  0E09               	movlw	9
  4086  001660  6E2D               	movwf	eval_poly@n,c
  4087  001662  EC29  F015         	call	_eval_poly	;wreg free
  4088  001666  C028  F034         	movff	?_eval_poly,ldexp@value
  4089  00166A  C029  F035         	movff	?_eval_poly+1,ldexp@value+1
  4090  00166E  C02A  F036         	movff	?_eval_poly+2,ldexp@value+2
  4091  001672  C04F  F037         	movff	exp@exponent,ldexp@newexp
  4092  001676  C050  F038         	movff	exp@exponent+1,ldexp@newexp+1
  4093  00167A  ECBF  F014         	call	_ldexp	;wreg free
  4094  00167E  C034  F049         	movff	?_ldexp,exp@x
  4095  001682  C035  F04A         	movff	?_ldexp+1,exp@x+1
  4096  001686  C036  F04B         	movff	?_ldexp+2,exp@x+2
  4097  00168A  5051               	movf	exp@sign,w,c
  4098  00168C  B4D8               	btfsc	status,2,c
  4099  00168E  D025               	goto	l1703
  4100  001690  2849               	incf	exp@x,w,c
  4101  001692  E10E               	bnz	l4073
  4102  001694  0E7F               	movlw	127
  4103  001696  184A               	xorwf	exp@x+1,w,c
  4104  001698  E10B               	bnz	l4073
  4105  00169A  0E7F               	movlw	127
  4106  00169C  184B               	xorwf	exp@x+2,w,c
  4107  00169E  A4D8               	btfss	status,2,c
  4108  0016A0  D007               	goto	l4073
  4109  0016A2  0E00               	movlw	0
  4110  0016A4  6E49               	movwf	?_exp,c
  4111  0016A6  0E00               	movlw	0
  4112  0016A8  6E4A               	movwf	?_exp+1,c
  4113  0016AA  0E00               	movlw	0
  4114  0016AC  6E4B               	movwf	?_exp+2,c
  4115  0016AE  0012               	return	
  4116  0016B0                     l4073:
  4117  0016B0  0E00               	movlw	0
  4118  0016B2  6E09               	movwf	___ftdiv@f1,c
  4119  0016B4  0E80               	movlw	128
  4120  0016B6  6E0A               	movwf	___ftdiv@f1+1,c
  4121  0016B8  0E3F               	movlw	63
  4122  0016BA  6E0B               	movwf	___ftdiv@f1+2,c
  4123  0016BC  C049  F00C         	movff	exp@x,___ftdiv@f2
  4124  0016C0  C04A  F00D         	movff	exp@x+1,___ftdiv@f2+1
  4125  0016C4  C04B  F00E         	movff	exp@x+2,___ftdiv@f2+2
  4126  0016C8  ECFA  F012         	call	___ftdiv	;wreg free
  4127  0016CC  C009  F049         	movff	?___ftdiv,?_exp
  4128  0016D0  C00A  F04A         	movff	?___ftdiv+1,?_exp+1
  4129  0016D4  C00B  F04B         	movff	?___ftdiv+2,?_exp+2
  4130  0016D8  0012               	return	
  4131  0016DA                     l1703:
  4132  0016DA  C049  F049         	movff	exp@x,?_exp
  4133  0016DE  C04A  F04A         	movff	exp@x+1,?_exp+1
  4134  0016E2  C04B  F04B         	movff	exp@x+2,?_exp+2
  4135  0016E6  0012               	return		;funcret
  4136  0016E8                     __end_of_exp:
  4137                           	opt stack 0
  4138                           tblptru	equ	0xFF8
  4139                           tblptrh	equ	0xFF7
  4140                           tblptrl	equ	0xFF6
  4141                           tablat	equ	0xFF5
  4142                           postinc0	equ	0xFEE
  4143                           wreg	equ	0xFE8
  4144                           postdec1	equ	0xFE5
  4145                           fsr1l	equ	0xFE1
  4146                           indf2	equ	0xFDF
  4147                           postinc2	equ	0xFDE
  4148                           postdec2	equ	0xFDD
  4149                           fsr2h	equ	0xFDA
  4150                           fsr2l	equ	0xFD9
  4151                           status	equ	0xFD8
  4152                           
  4153 ;; *************** function _ldexp *****************
  4154 ;; Defined at:
  4155 ;;		line 277 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\frexp.c"
  4156 ;; Parameters:    Size  Location     Type
  4157 ;;  value           3   51[COMRAM] unsigned char 
  4158 ;;  newexp          2   54[COMRAM] int 
  4159 ;; Auto vars:     Size  Location     Type
  4160 ;;		None
  4161 ;; Return value:  Size  Location     Type
  4162 ;;                  3   51[COMRAM] int 
  4163 ;; Registers used:
  4164 ;;		wreg, status,2, status,0
  4165 ;; Tracked objects:
  4166 ;;		On entry : 0/0
  4167 ;;		On exit  : 0/0
  4168 ;;		Unchanged: 0/0
  4169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4170 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4172 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4173 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4174 ;;Total ram usage:        7 bytes
  4175 ;; Hardware stack levels used:    1
  4176 ;; This function calls:
  4177 ;;		Nothing
  4178 ;; This function is called by:
  4179 ;;		_exp
  4180 ;; This function uses a non-reentrant model
  4181 ;;
  4182                           
  4183                           	psect	text20
  4184  00297E                     __ptext20:
  4185                           	opt stack 0
  4186  00297E                     _ldexp:
  4187                           	opt stack 24
  4188                           
  4189                           ;incstack = 0
  4190  00297E  5034               	movf	ldexp@value,w,c
  4191  002980  1035               	iorwf	ldexp@value+1,w,c
  4192  002982  1036               	iorwf	ldexp@value+2,w,c
  4193  002984  A4D8               	btfss	status,2,c
  4194  002986  D007               	goto	l3897
  4195  002988  0E00               	movlw	0
  4196  00298A  6E34               	movwf	?_ldexp,c
  4197  00298C  0E00               	movlw	0
  4198  00298E  6E35               	movwf	?_ldexp+1,c
  4199  002990  0E00               	movlw	0
  4200  002992  6E36               	movwf	?_ldexp+2,c
  4201  002994  0012               	return	
  4202  002996                     l3897:
  4203  002996  5036               	movf	ldexp@value+2,w,c
  4204  002998  0B7F               	andlw	127
  4205  00299A  6E39               	movwf	??_ldexp& (0+255),c
  4206  00299C  6A3A               	clrf	(??_ldexp+1)& (0+255),c
  4207  00299E  90D8               	bcf	status,0,c
  4208  0029A0  3639               	rlcf	??_ldexp,f,c
  4209  0029A2  363A               	rlcf	??_ldexp+1,f,c
  4210  0029A4  5039               	movf	??_ldexp,w,c
  4211  0029A6  2637               	addwf	ldexp@newexp,f,c
  4212  0029A8  503A               	movf	??_ldexp+1,w,c
  4213  0029AA  2238               	addwfc	ldexp@newexp+1,f,c
  4214  0029AC  AE35               	btfss	ldexp@value+1,7,c
  4215  0029AE  D003               	goto	u3110
  4216  0029B0  6A39               	clrf	??_ldexp& (0+255),c
  4217  0029B2  2A39               	incf	??_ldexp& (0+255),f,c
  4218  0029B4  D001               	goto	u3118
  4219  0029B6                     u3110:
  4220  0029B6  6A39               	clrf	??_ldexp& (0+255),c
  4221  0029B8                     u3118:
  4222  0029B8  5039               	movf	??_ldexp,w,c
  4223  0029BA  2637               	addwf	ldexp@newexp,f,c
  4224  0029BC  0E00               	movlw	0
  4225  0029BE  2238               	addwfc	ldexp@newexp+1,f,c
  4226  0029C0  AE38               	btfss	ldexp@newexp+1,7,c
  4227  0029C2  D00D               	goto	l3905
  4228  0029C4  0E00               	movlw	0
  4229  0029C6  0100               	movlb	0	; () banked
  4230  0029C8  6F85               	movwf	(_errno+1)& (0+255),b
  4231  0029CA  0E22               	movlw	34
  4232  0029CC  6F84               	movwf	_errno& (0+255),b
  4233  0029CE  0E00               	movlw	0
  4234  0029D0  6E34               	movwf	?_ldexp,c
  4235  0029D2  0E00               	movlw	0
  4236  0029D4  6E35               	movwf	?_ldexp+1,c
  4237  0029D6  0E00               	movlw	0
  4238  0029D8                     L4:
  4239  0029D8  6E36               	movwf	?_ldexp+2,c
  4240                           
  4241                           ; BSR set to: 0
  4242  0029DA  0012               	return	
  4243                           
  4244                           ; BSR set to: 0
  4245  0029DC  D032               	goto	l3923
  4246  0029DE                     l3905:
  4247  0029DE  BE38               	btfsc	ldexp@newexp+1,7,c
  4248  0029E0  D01A               	goto	l3921
  4249  0029E2  0438               	decf	ldexp@newexp+1,w,c
  4250  0029E4  A0D8               	btfss	status,0,c
  4251  0029E6  D017               	goto	l3921
  4252  0029E8  0E00               	movlw	0
  4253  0029EA  0100               	movlb	0	; () banked
  4254  0029EC  6F85               	movwf	(_errno+1)& (0+255),b
  4255  0029EE  0E22               	movlw	34
  4256  0029F0  6F84               	movwf	_errno& (0+255),b
  4257                           
  4258                           ; BSR set to: 0
  4259  0029F2  AE36               	btfss	ldexp@value+2,7,c
  4260  0029F4  D008               	goto	l3917
  4261                           
  4262                           ; BSR set to: 0
  4263  0029F6  0EFF               	movlw	255
  4264  0029F8  6E34               	movwf	?_ldexp,c
  4265  0029FA  0E7F               	movlw	127
  4266  0029FC  6E35               	movwf	?_ldexp+1,c
  4267  0029FE  0EFF               	movlw	255
  4268  002A00  D7EB               	goto	L4
  4269                           
  4270                           ; BSR set to: 0
  4271  002A02  0012               	return	
  4272                           
  4273                           ; BSR set to: 0
  4274  002A04  D01E               	goto	l3923
  4275  002A06                     l3917:
  4276                           
  4277                           ; BSR set to: 0
  4278  002A06  0EFF               	movlw	255
  4279  002A08  6E34               	movwf	?_ldexp,c
  4280  002A0A  0E7F               	movlw	127
  4281  002A0C  6E35               	movwf	?_ldexp+1,c
  4282  002A0E  0E7F               	movlw	127
  4283  002A10  D7E3               	goto	L4
  4284                           
  4285                           ; BSR set to: 0
  4286  002A12  0012               	return	
  4287                           
  4288                           ; BSR set to: 0
  4289  002A14  D016               	goto	l3923
  4290  002A16                     l3921:
  4291  002A16  3438               	rlcf	ldexp@newexp+1,w,c
  4292  002A18  3038               	rrcf	ldexp@newexp+1,w,c
  4293  002A1A  6E3A               	movwf	(??_ldexp+1)& (0+255),c
  4294  002A1C  3037               	rrcf	ldexp@newexp,w,c
  4295  002A1E  6E39               	movwf	??_ldexp& (0+255),c
  4296  002A20  5036               	movf	ldexp@value+2,w,c
  4297  002A22  1839               	xorwf	??_ldexp,w,c
  4298  002A24  0B80               	andlw	-128
  4299  002A26  1839               	xorwf	??_ldexp,w,c
  4300  002A28  6E36               	movwf	ldexp@value+2,c
  4301  002A2A  C037  F039         	movff	ldexp@newexp,??_ldexp
  4302  002A2E  0E01               	movlw	1
  4303  002A30  1639               	andwf	??_ldexp,f,c
  4304  002A32  3239               	rrcf	??_ldexp,f,c
  4305  002A34  3239               	rrcf	??_ldexp,f,c
  4306  002A36  5035               	movf	ldexp@value+1,w,c
  4307  002A38  1839               	xorwf	??_ldexp,w,c
  4308  002A3A  0B7F               	andlw	-129
  4309  002A3C  1839               	xorwf	??_ldexp,w,c
  4310  002A3E  6E35               	movwf	ldexp@value+1,c
  4311  002A40  D000               	goto	l3923
  4312  002A42                     l3923:
  4313  002A42  C034  F034         	movff	ldexp@value,?_ldexp
  4314  002A46  C035  F035         	movff	ldexp@value+1,?_ldexp+1
  4315  002A4A  C036  F036         	movff	ldexp@value+2,?_ldexp+2
  4316  002A4E  0012               	return	
  4317  002A50  0012               	return		;funcret
  4318  002A52                     __end_of_ldexp:
  4319                           	opt stack 0
  4320                           tblptru	equ	0xFF8
  4321                           tblptrh	equ	0xFF7
  4322                           tblptrl	equ	0xFF6
  4323                           tablat	equ	0xFF5
  4324                           postinc0	equ	0xFEE
  4325                           wreg	equ	0xFE8
  4326                           postdec1	equ	0xFE5
  4327                           fsr1l	equ	0xFE1
  4328                           indf2	equ	0xFDF
  4329                           postinc2	equ	0xFDE
  4330                           postdec2	equ	0xFDD
  4331                           fsr2h	equ	0xFDA
  4332                           fsr2l	equ	0xFD9
  4333                           status	equ	0xFD8
  4334                           
  4335 ;; *************** function _floor *****************
  4336 ;; Defined at:
  4337 ;;		line 13 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\floor.c"
  4338 ;; Parameters:    Size  Location     Type
  4339 ;;  x               3   64[COMRAM] int 
  4340 ;; Auto vars:     Size  Location     Type
  4341 ;;  i               3   67[COMRAM] int 
  4342 ;;  expon           2   70[COMRAM] int 
  4343 ;; Return value:  Size  Location     Type
  4344 ;;                  3   64[COMRAM] int 
  4345 ;; Registers used:
  4346 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4347 ;; Tracked objects:
  4348 ;;		On entry : 0/0
  4349 ;;		On exit  : 0/0
  4350 ;;		Unchanged: 0/0
  4351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4352 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4353 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4355 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4356 ;;Total ram usage:        8 bytes
  4357 ;; Hardware stack levels used:    1
  4358 ;; Hardware stack levels required when called:    2
  4359 ;; This function calls:
  4360 ;;		___altoft
  4361 ;;		___ftadd
  4362 ;;		___ftge
  4363 ;;		___fttol
  4364 ;;		_frexp
  4365 ;; This function is called by:
  4366 ;;		_exp
  4367 ;; This function uses a non-reentrant model
  4368 ;;
  4369                           
  4370                           	psect	text21
  4371  0027C2                     __ptext21:
  4372                           	opt stack 0
  4373  0027C2                     _floor:
  4374                           	opt stack 22
  4375                           
  4376                           ;incstack = 0
  4377  0027C2  C041  F001         	movff	floor@x,frexp@value
  4378  0027C6  C042  F002         	movff	floor@x+1,frexp@value+1
  4379  0027CA  C043  F003         	movff	floor@x+2,frexp@value+2
  4380  0027CE  0E47               	movlw	low floor@expon
  4381  0027D0  6E04               	movwf	frexp@eptr,c
  4382  0027D2  0E00               	movlw	high floor@expon
  4383  0027D4  6E05               	movwf	frexp@eptr+1,c
  4384  0027D6  EC3F  F017         	call	_frexp	;wreg free
  4385  0027DA  AE48               	btfss	floor@expon+1,7,c
  4386  0027DC  D010               	goto	l3875
  4387  0027DE  AE43               	btfss	floor@x+2,7,c
  4388  0027E0  D007               	goto	l3871
  4389  0027E2  0E00               	movlw	0
  4390  0027E4  6E41               	movwf	?_floor,c
  4391  0027E6  0E80               	movlw	128
  4392  0027E8  6E42               	movwf	?_floor+1,c
  4393  0027EA  0EBF               	movlw	191
  4394  0027EC  6E43               	movwf	?_floor+2,c
  4395  0027EE  0012               	return	
  4396  0027F0                     l3871:
  4397  0027F0  0E00               	movlw	0
  4398  0027F2  6E41               	movwf	?_floor,c
  4399  0027F4  0E00               	movlw	0
  4400  0027F6  6E42               	movwf	?_floor+1,c
  4401  0027F8  0E00               	movlw	0
  4402  0027FA  6E43               	movwf	?_floor+2,c
  4403  0027FC  0012               	return	
  4404  0027FE                     l3875:
  4405  0027FE  5048               	movf	floor@expon+1,w,c
  4406  002800  E104               	bnz	u3070
  4407  002802  0E15               	movlw	21
  4408  002804  5C47               	subwf	floor@expon,w,c
  4409  002806  A0D8               	btfss	status,0,c
  4410  002808  D007               	goto	l3879
  4411  00280A                     u3070:
  4412  00280A  C041  F041         	movff	floor@x,?_floor
  4413  00280E  C042  F042         	movff	floor@x+1,?_floor+1
  4414  002812  C043  F043         	movff	floor@x+2,?_floor+2
  4415  002816  0012               	return	
  4416  002818                     l3879:
  4417  002818  C041  F028         	movff	floor@x,___fttol@f1
  4418  00281C  C042  F029         	movff	floor@x+1,___fttol@f1+1
  4419  002820  C043  F02A         	movff	floor@x+2,___fttol@f1+2
  4420  002824  EC82  F011         	call	___fttol	;wreg free
  4421  002828  C028  F037         	movff	?___fttol,___altoft@c
  4422  00282C  C029  F038         	movff	?___fttol+1,___altoft@c+1
  4423  002830  C02A  F039         	movff	?___fttol+2,___altoft@c+2
  4424  002834  C02B  F03A         	movff	?___fttol+3,___altoft@c+3
  4425  002838  EC25  F019         	call	___altoft	;wreg free
  4426  00283C  C037  F044         	movff	?___altoft,floor@i
  4427  002840  C038  F045         	movff	?___altoft+1,floor@i+1
  4428  002844  C039  F046         	movff	?___altoft+2,floor@i+2
  4429  002848  C041  F001         	movff	floor@x,___ftge@ff1
  4430  00284C  C042  F002         	movff	floor@x+1,___ftge@ff1+1
  4431  002850  C043  F003         	movff	floor@x+2,___ftge@ff1+2
  4432  002854  C044  F004         	movff	floor@i,___ftge@ff2
  4433  002858  C045  F005         	movff	floor@i+1,___ftge@ff2+1
  4434  00285C  C046  F006         	movff	floor@i+2,___ftge@ff2+2
  4435  002860  ECA9  F016         	call	___ftge	;wreg free
  4436  002864  B0D8               	btfsc	status,0,c
  4437  002866  D015               	goto	l1713
  4438  002868  C044  F01C         	movff	floor@i,___ftadd@f1
  4439  00286C  C045  F01D         	movff	floor@i+1,___ftadd@f1+1
  4440  002870  C046  F01E         	movff	floor@i+2,___ftadd@f1+2
  4441  002874  0E00               	movlw	0
  4442  002876  6E1F               	movwf	___ftadd@f2,c
  4443  002878  0E80               	movlw	128
  4444  00287A  6E20               	movwf	___ftadd@f2+1,c
  4445  00287C  0EBF               	movlw	191
  4446  00287E  6E21               	movwf	___ftadd@f2+2,c
  4447  002880  EC74  F00B         	call	___ftadd	;wreg free
  4448  002884  C01C  F041         	movff	?___ftadd,?_floor
  4449  002888  C01D  F042         	movff	?___ftadd+1,?_floor+1
  4450  00288C  C01E  F043         	movff	?___ftadd+2,?_floor+2
  4451  002890  0012               	return	
  4452  002892                     l1713:
  4453  002892  C044  F041         	movff	floor@i,?_floor
  4454  002896  C045  F042         	movff	floor@i+1,?_floor+1
  4455  00289A  C046  F043         	movff	floor@i+2,?_floor+2
  4456  00289E  0012               	return		;funcret
  4457  0028A0                     __end_of_floor:
  4458                           	opt stack 0
  4459                           tblptru	equ	0xFF8
  4460                           tblptrh	equ	0xFF7
  4461                           tblptrl	equ	0xFF6
  4462                           tablat	equ	0xFF5
  4463                           postinc0	equ	0xFEE
  4464                           wreg	equ	0xFE8
  4465                           postdec1	equ	0xFE5
  4466                           fsr1l	equ	0xFE1
  4467                           indf2	equ	0xFDF
  4468                           postinc2	equ	0xFDE
  4469                           postdec2	equ	0xFDD
  4470                           fsr2h	equ	0xFDA
  4471                           fsr2l	equ	0xFD9
  4472                           status	equ	0xFD8
  4473                           
  4474 ;; *************** function _frexp *****************
  4475 ;; Defined at:
  4476 ;;		line 254 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\frexp.c"
  4477 ;; Parameters:    Size  Location     Type
  4478 ;;  value           3    0[COMRAM] int 
  4479 ;;  eptr            2    3[COMRAM] PTR int 
  4480 ;;		 -> log@exponent(2), floor@expon(2), 
  4481 ;; Auto vars:     Size  Location     Type
  4482 ;;		None
  4483 ;; Return value:  Size  Location     Type
  4484 ;;                  3    0[COMRAM] PTR int 
  4485 ;; Registers used:
  4486 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4487 ;; Tracked objects:
  4488 ;;		On entry : 0/0
  4489 ;;		On exit  : 0/0
  4490 ;;		Unchanged: 0/0
  4491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4492 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4494 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4495 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4496 ;;Total ram usage:        7 bytes
  4497 ;; Hardware stack levels used:    1
  4498 ;; This function calls:
  4499 ;;		Nothing
  4500 ;; This function is called by:
  4501 ;;		_floor
  4502 ;;		_log
  4503 ;; This function uses a non-reentrant model
  4504 ;;
  4505                           
  4506                           	psect	text22
  4507  002E7E                     __ptext22:
  4508                           	opt stack 0
  4509  002E7E                     _frexp:
  4510                           	opt stack 24
  4511                           
  4512                           ;incstack = 0
  4513  002E7E  5001               	movf	frexp@value,w,c
  4514  002E80  1002               	iorwf	frexp@value+1,w,c
  4515  002E82  1003               	iorwf	frexp@value+2,w,c
  4516  002E84  A4D8               	btfss	status,2,c
  4517  002E86  D00F               	goto	l3769
  4518  002E88  C004  FFD9         	movff	frexp@eptr,fsr2l
  4519  002E8C  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  4520  002E90  0E00               	movlw	0
  4521  002E92  6EDE               	movwf	postinc2,c
  4522  002E94  0E00               	movlw	0
  4523  002E96  6EDD               	movwf	postdec2,c
  4524  002E98  0E00               	movlw	0
  4525  002E9A  6E01               	movwf	?_frexp,c
  4526  002E9C  0E00               	movlw	0
  4527  002E9E  6E02               	movwf	?_frexp+1,c
  4528  002EA0  0E00               	movlw	0
  4529  002EA2  6E03               	movwf	?_frexp+2,c
  4530  002EA4  0012               	return	
  4531  002EA6                     l3769:
  4532  002EA6  5003               	movf	frexp@value+2,w,c
  4533  002EA8  0B7F               	andlw	127
  4534  002EAA  6E06               	movwf	??_frexp& (0+255),c
  4535  002EAC  6A07               	clrf	(??_frexp+1)& (0+255),c
  4536  002EAE  90D8               	bcf	status,0,c
  4537  002EB0  3606               	rlcf	??_frexp,f,c
  4538  002EB2  3607               	rlcf	??_frexp+1,f,c
  4539  002EB4  C004  FFD9         	movff	frexp@eptr,fsr2l
  4540  002EB8  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  4541  002EBC  C006  FFDE         	movff	??_frexp,postinc2
  4542  002EC0  C007  FFDD         	movff	??_frexp+1,postdec2
  4543  002EC4  AE02               	btfss	frexp@value+1,7,c
  4544  002EC6  D003               	goto	u2950
  4545  002EC8  6A06               	clrf	??_frexp& (0+255),c
  4546  002ECA  2A06               	incf	??_frexp& (0+255),f,c
  4547  002ECC  D001               	goto	u2958
  4548  002ECE                     u2950:
  4549  002ECE  6A06               	clrf	??_frexp& (0+255),c
  4550  002ED0                     u2958:
  4551  002ED0  5006               	movf	??_frexp,w,c
  4552  002ED2  C004  FFD9         	movff	frexp@eptr,fsr2l
  4553  002ED6  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  4554  002EDA  12DE               	iorwf	postinc2,f,c
  4555  002EDC  0E00               	movlw	0
  4556  002EDE  12DD               	iorwf	postdec2,f,c
  4557  002EE0  C004  FFD9         	movff	frexp@eptr,fsr2l
  4558  002EE4  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  4559  002EE8  0E82               	movlw	130
  4560  002EEA  26DE               	addwf	postinc2,f,c
  4561  002EEC  0EFF               	movlw	255
  4562  002EEE  22DD               	addwfc	postdec2,f,c
  4563  002EF0  8003               	bsf	frexp@value+2,0,c
  4564  002EF2  8203               	bsf	frexp@value+2,1,c
  4565  002EF4  8403               	bsf	frexp@value+2,2,c
  4566  002EF6  8603               	bsf	frexp@value+2,3,c
  4567  002EF8  8803               	bsf	frexp@value+2,4,c
  4568  002EFA  8A03               	bsf	frexp@value+2,5,c
  4569  002EFC  9C03               	bcf	frexp@value+2,6,c
  4570  002EFE  9E02               	bcf	frexp@value+1,7,c
  4571  002F00  C001  F001         	movff	frexp@value,?_frexp
  4572  002F04  C002  F002         	movff	frexp@value+1,?_frexp+1
  4573  002F08  C003  F003         	movff	frexp@value+2,?_frexp+2
  4574  002F0C  0012               	return	
  4575  002F0E  0012               	return		;funcret
  4576  002F10                     __end_of_frexp:
  4577                           	opt stack 0
  4578                           tblptru	equ	0xFF8
  4579                           tblptrh	equ	0xFF7
  4580                           tblptrl	equ	0xFF6
  4581                           tablat	equ	0xFF5
  4582                           postinc0	equ	0xFEE
  4583                           wreg	equ	0xFE8
  4584                           postdec1	equ	0xFE5
  4585                           fsr1l	equ	0xFE1
  4586                           indf2	equ	0xFDF
  4587                           postinc2	equ	0xFDE
  4588                           postdec2	equ	0xFDD
  4589                           fsr2h	equ	0xFDA
  4590                           fsr2l	equ	0xFD9
  4591                           status	equ	0xFD8
  4592                           
  4593 ;; *************** function ___fttol *****************
  4594 ;; Defined at:
  4595 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\fttol.c"
  4596 ;; Parameters:    Size  Location     Type
  4597 ;;  f1              3   39[COMRAM] float 
  4598 ;; Auto vars:     Size  Location     Type
  4599 ;;  lval            4   49[COMRAM] unsigned long 
  4600 ;;  exp1            1   53[COMRAM] unsigned char 
  4601 ;;  sign1           1   48[COMRAM] unsigned char 
  4602 ;; Return value:  Size  Location     Type
  4603 ;;                  4   39[COMRAM] long 
  4604 ;; Registers used:
  4605 ;;		wreg, status,2, status,0
  4606 ;; Tracked objects:
  4607 ;;		On entry : 0/0
  4608 ;;		On exit  : 0/0
  4609 ;;		Unchanged: 0/0
  4610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4611 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4612 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4613 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4614 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4615 ;;Total ram usage:       15 bytes
  4616 ;; Hardware stack levels used:    1
  4617 ;; This function calls:
  4618 ;;		Nothing
  4619 ;; This function is called by:
  4620 ;;		_obtain_pass
  4621 ;;		_input_old_pass
  4622 ;;		_input_new_pass
  4623 ;;		_pow
  4624 ;;		_exp
  4625 ;;		_floor
  4626 ;; This function uses a non-reentrant model
  4627 ;;
  4628                           
  4629                           	psect	text23
  4630  002304                     __ptext23:
  4631                           	opt stack 0
  4632  002304                     ___fttol:
  4633                           	opt stack 23
  4634                           
  4635                           ;incstack = 0
  4636  002304  C02A  F02C         	movff	___fttol@f1+2,??___fttol
  4637  002308  6A2D               	clrf	(??___fttol+1)& (0+255),c
  4638  00230A  6A2E               	clrf	(??___fttol+2)& (0+255),c
  4639  00230C  3429               	rlcf	___fttol@f1+1,w,c
  4640  00230E  362C               	rlcf	??___fttol& (0+255),f,c
  4641  002310  E301               	bnc	u2861
  4642  002312  802D               	bsf	(??___fttol+1)& (0+255),0,c
  4643  002314                     u2861:
  4644  002314  502C               	movf	??___fttol,w,c
  4645  002316  6E36               	movwf	___fttol@exp1,c
  4646  002318  5036               	movf	___fttol@exp1,w,c
  4647  00231A  A4D8               	btfss	status,2,c
  4648  00231C  D009               	goto	l3721
  4649  00231E  0E00               	movlw	0
  4650  002320  6E28               	movwf	?___fttol,c
  4651  002322  0E00               	movlw	0
  4652  002324  6E29               	movwf	?___fttol+1,c
  4653  002326  0E00               	movlw	0
  4654  002328  6E2A               	movwf	?___fttol+2,c
  4655  00232A  0E00               	movlw	0
  4656  00232C  6E2B               	movwf	?___fttol+3,c
  4657  00232E  0012               	return	
  4658  002330                     l3721:
  4659  002330  0E17               	movlw	23
  4660  002332  6E2C               	movwf	??___fttol& (0+255),c
  4661  002334  C028  F02D         	movff	___fttol@f1,??___fttol+1
  4662  002338  C029  F02E         	movff	___fttol@f1+1,??___fttol+2
  4663  00233C  C02A  F02F         	movff	___fttol@f1+2,??___fttol+3
  4664  002340  282C               	incf	??___fttol,w,c
  4665  002342  6E30               	movwf	(??___fttol+4)& (0+255),c
  4666  002344  D004               	goto	u2880
  4667  002346                     u2885:
  4668  002346  90D8               	bcf	status,0,c
  4669  002348  322F               	rrcf	??___fttol+3,f,c
  4670  00234A  322E               	rrcf	??___fttol+2,f,c
  4671  00234C  322D               	rrcf	??___fttol+1,f,c
  4672  00234E                     u2880:
  4673  00234E  2E30               	decfsz	(??___fttol+4)& (0+255),f,c
  4674  002350  D7FA               	goto	u2885
  4675  002352  502D               	movf	??___fttol+1,w,c
  4676  002354  6E31               	movwf	___fttol@sign1,c
  4677  002356  8E29               	bsf	___fttol@f1+1,7,c
  4678  002358  0EFF               	movlw	255
  4679  00235A  1628               	andwf	___fttol@f1,f,c
  4680  00235C  0EFF               	movlw	255
  4681  00235E  1629               	andwf	___fttol@f1+1,f,c
  4682  002360  0E00               	movlw	0
  4683  002362  162A               	andwf	___fttol@f1+2,f,c
  4684  002364  5028               	movf	___fttol@f1,w,c
  4685  002366  6E32               	movwf	___fttol@lval,c
  4686  002368  5029               	movf	___fttol@f1+1,w,c
  4687  00236A  6E33               	movwf	___fttol@lval+1,c
  4688  00236C  502A               	movf	___fttol@f1+2,w,c
  4689  00236E  6E34               	movwf	___fttol@lval+2,c
  4690  002370  6A35               	clrf	___fttol@lval+3,c
  4691  002372  0E8E               	movlw	142
  4692  002374  5E36               	subwf	___fttol@exp1,f,c
  4693  002376  AE36               	btfss	___fttol@exp1,7,c
  4694  002378  D017               	goto	l3743
  4695  00237A  5036               	movf	___fttol@exp1,w,c
  4696  00237C  0A80               	xorlw	128
  4697  00237E  0F8F               	addlw	143
  4698  002380  B0D8               	btfsc	status,0,c
  4699  002382  D00A               	goto	l3739
  4700  002384  0E00               	movlw	0
  4701  002386  6E28               	movwf	?___fttol,c
  4702  002388  0E00               	movlw	0
  4703  00238A  6E29               	movwf	?___fttol+1,c
  4704  00238C  0E00               	movlw	0
  4705  00238E  6E2A               	movwf	?___fttol+2,c
  4706  002390  0E00               	movlw	0
  4707  002392  6E2B               	movwf	?___fttol+3,c
  4708  002394  0012               	return	
  4709  002396  D000               	goto	l3739
  4710  002398                     l3739:
  4711  002398  90D8               	bcf	status,0,c
  4712  00239A  3235               	rrcf	___fttol@lval+3,f,c
  4713  00239C  3234               	rrcf	___fttol@lval+2,f,c
  4714  00239E  3233               	rrcf	___fttol@lval+1,f,c
  4715  0023A0  3232               	rrcf	___fttol@lval,f,c
  4716  0023A2  3E36               	incfsz	___fttol@exp1,f,c
  4717  0023A4  D7F9               	goto	l3739
  4718  0023A6  D019               	goto	l3753
  4719  0023A8                     l3743:
  4720  0023A8  0E17               	movlw	23
  4721  0023AA  6436               	cpfsgt	___fttol@exp1,c
  4722  0023AC  D011               	goto	l3751
  4723  0023AE  0E00               	movlw	0
  4724  0023B0  6E28               	movwf	?___fttol,c
  4725  0023B2  0E00               	movlw	0
  4726  0023B4  6E29               	movwf	?___fttol+1,c
  4727  0023B6  0E00               	movlw	0
  4728  0023B8  6E2A               	movwf	?___fttol+2,c
  4729  0023BA  0E00               	movlw	0
  4730  0023BC  6E2B               	movwf	?___fttol+3,c
  4731  0023BE  0012               	return	
  4732  0023C0  D007               	goto	l3751
  4733  0023C2                     l3749:
  4734  0023C2  90D8               	bcf	status,0,c
  4735  0023C4  3632               	rlcf	___fttol@lval,f,c
  4736  0023C6  3633               	rlcf	___fttol@lval+1,f,c
  4737  0023C8  3634               	rlcf	___fttol@lval+2,f,c
  4738  0023CA  3635               	rlcf	___fttol@lval+3,f,c
  4739  0023CC  0636               	decf	___fttol@exp1,f,c
  4740  0023CE  D000               	goto	l3751
  4741  0023D0                     l3751:
  4742  0023D0  5036               	movf	___fttol@exp1,w,c
  4743  0023D2  B4D8               	btfsc	status,2,c
  4744  0023D4  D002               	goto	l3753
  4745  0023D6  D7F5               	goto	l3749
  4746  0023D8  D000               	goto	l3753
  4747  0023DA                     l3753:
  4748  0023DA  5031               	movf	___fttol@sign1,w,c
  4749  0023DC  B4D8               	btfsc	status,2,c
  4750  0023DE  D009               	goto	l3757
  4751  0023E0  1E35               	comf	___fttol@lval+3,f,c
  4752  0023E2  1E34               	comf	___fttol@lval+2,f,c
  4753  0023E4  1E33               	comf	___fttol@lval+1,f,c
  4754  0023E6  6C32               	negf	___fttol@lval,c
  4755  0023E8  0E00               	movlw	0
  4756  0023EA  2233               	addwfc	___fttol@lval+1,f,c
  4757  0023EC  2234               	addwfc	___fttol@lval+2,f,c
  4758  0023EE  2235               	addwfc	___fttol@lval+3,f,c
  4759  0023F0  D000               	goto	l3757
  4760  0023F2                     l3757:
  4761  0023F2  C032  F028         	movff	___fttol@lval,?___fttol
  4762  0023F6  C033  F029         	movff	___fttol@lval+1,?___fttol+1
  4763  0023FA  C034  F02A         	movff	___fttol@lval+2,?___fttol+2
  4764  0023FE  C035  F02B         	movff	___fttol@lval+3,?___fttol+3
  4765  002402  0012               	return	
  4766  002404  0012               	return		;funcret
  4767  002406                     __end_of___fttol:
  4768                           	opt stack 0
  4769                           tblptru	equ	0xFF8
  4770                           tblptrh	equ	0xFF7
  4771                           tblptrl	equ	0xFF6
  4772                           tablat	equ	0xFF5
  4773                           postinc0	equ	0xFEE
  4774                           wreg	equ	0xFE8
  4775                           postdec1	equ	0xFE5
  4776                           fsr1l	equ	0xFE1
  4777                           indf2	equ	0xFDF
  4778                           postinc2	equ	0xFDE
  4779                           postdec2	equ	0xFDD
  4780                           fsr2h	equ	0xFDA
  4781                           fsr2l	equ	0xFD9
  4782                           status	equ	0xFD8
  4783                           
  4784 ;; *************** function ___ftge *****************
  4785 ;; Defined at:
  4786 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\ftge.c"
  4787 ;; Parameters:    Size  Location     Type
  4788 ;;  ff1             3    0[COMRAM] float 
  4789 ;;  ff2             3    3[COMRAM] float 
  4790 ;; Auto vars:     Size  Location     Type
  4791 ;;		None
  4792 ;; Return value:  Size  Location     Type
  4793 ;;		None               void
  4794 ;; Registers used:
  4795 ;;		wreg, status,2, status,0
  4796 ;; Tracked objects:
  4797 ;;		On entry : 0/0
  4798 ;;		On exit  : 0/0
  4799 ;;		Unchanged: 0/0
  4800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4801 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4802 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4803 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4804 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4805 ;;Total ram usage:        9 bytes
  4806 ;; Hardware stack levels used:    1
  4807 ;; This function calls:
  4808 ;;		Nothing
  4809 ;; This function is called by:
  4810 ;;		_pow
  4811 ;;		_exp
  4812 ;;		_floor
  4813 ;; This function uses a non-reentrant model
  4814 ;;
  4815                           
  4816                           	psect	text24
  4817  002D52                     __ptext24:
  4818                           	opt stack 0
  4819  002D52                     ___ftge:
  4820                           	opt stack 23
  4821                           
  4822                           ;incstack = 0
  4823  002D52  AE03               	btfss	___ftge@ff1+2,7,c
  4824  002D54  D017               	goto	l3701
  4825  002D56  C001  F007         	movff	___ftge@ff1,??___ftge
  4826  002D5A  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  4827  002D5E  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  4828  002D62  1E07               	comf	??___ftge,f,c
  4829  002D64  1E08               	comf	??___ftge+1,f,c
  4830  002D66  1E09               	comf	??___ftge+2,f,c
  4831  002D68  2A07               	incf	??___ftge,f,c
  4832  002D6A  0E00               	movlw	0
  4833  002D6C  2208               	addwfc	??___ftge+1,f,c
  4834  002D6E  2209               	addwfc	??___ftge+2,f,c
  4835  002D70  0E00               	movlw	0
  4836  002D72  2407               	addwf	??___ftge,w,c
  4837  002D74  6E01               	movwf	___ftge@ff1,c
  4838  002D76  0E00               	movlw	0
  4839  002D78  2008               	addwfc	??___ftge+1,w,c
  4840  002D7A  6E02               	movwf	___ftge@ff1+1,c
  4841  002D7C  0E80               	movlw	128
  4842  002D7E  2009               	addwfc	??___ftge+2,w,c
  4843  002D80  6E03               	movwf	___ftge@ff1+2,c
  4844  002D82  D000               	goto	l3701
  4845  002D84                     l3701:
  4846  002D84  AE06               	btfss	___ftge@ff2+2,7,c
  4847  002D86  D017               	goto	l3705
  4848  002D88  C004  F007         	movff	___ftge@ff2,??___ftge
  4849  002D8C  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  4850  002D90  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  4851  002D94  1E07               	comf	??___ftge,f,c
  4852  002D96  1E08               	comf	??___ftge+1,f,c
  4853  002D98  1E09               	comf	??___ftge+2,f,c
  4854  002D9A  2A07               	incf	??___ftge,f,c
  4855  002D9C  0E00               	movlw	0
  4856  002D9E  2208               	addwfc	??___ftge+1,f,c
  4857  002DA0  2209               	addwfc	??___ftge+2,f,c
  4858  002DA2  0E00               	movlw	0
  4859  002DA4  2407               	addwf	??___ftge,w,c
  4860  002DA6  6E04               	movwf	___ftge@ff2,c
  4861  002DA8  0E00               	movlw	0
  4862  002DAA  2008               	addwfc	??___ftge+1,w,c
  4863  002DAC  6E05               	movwf	___ftge@ff2+1,c
  4864  002DAE  0E80               	movlw	128
  4865  002DB0  2009               	addwfc	??___ftge+2,w,c
  4866  002DB2  6E06               	movwf	___ftge@ff2+2,c
  4867  002DB4  D000               	goto	l3705
  4868  002DB6                     l3705:
  4869  002DB6  0E00               	movlw	0
  4870  002DB8  1A01               	xorwf	___ftge@ff1,f,c
  4871  002DBA  0E00               	movlw	0
  4872  002DBC  1A02               	xorwf	___ftge@ff1+1,f,c
  4873  002DBE  0E80               	movlw	128
  4874  002DC0  1A03               	xorwf	___ftge@ff1+2,f,c
  4875  002DC2  0E00               	movlw	0
  4876  002DC4  1A04               	xorwf	___ftge@ff2,f,c
  4877  002DC6  0E00               	movlw	0
  4878  002DC8  1A05               	xorwf	___ftge@ff2+1,f,c
  4879  002DCA  0E80               	movlw	128
  4880  002DCC  1A06               	xorwf	___ftge@ff2+2,f,c
  4881  002DCE  5004               	movf	___ftge@ff2,w,c
  4882  002DD0  5C01               	subwf	___ftge@ff1,w,c
  4883  002DD2  5005               	movf	___ftge@ff2+1,w,c
  4884  002DD4  5802               	subwfb	___ftge@ff1+1,w,c
  4885  002DD6  5006               	movf	___ftge@ff2+2,w,c
  4886  002DD8  5803               	subwfb	___ftge@ff1+2,w,c
  4887  002DDA  B0D8               	btfsc	status,0,c
  4888  002DDC  D002               	goto	l3711
  4889  002DDE  90D8               	bcf	status,0,c
  4890  002DE0  0012               	return	
  4891  002DE2                     l3711:
  4892  002DE2  80D8               	bsf	status,0,c
  4893  002DE4  0012               	return	
  4894  002DE6  0012               	return		;funcret
  4895  002DE8                     __end_of___ftge:
  4896                           	opt stack 0
  4897                           tblptru	equ	0xFF8
  4898                           tblptrh	equ	0xFF7
  4899                           tblptrl	equ	0xFF6
  4900                           tablat	equ	0xFF5
  4901                           postinc0	equ	0xFEE
  4902                           wreg	equ	0xFE8
  4903                           postdec1	equ	0xFE5
  4904                           fsr1l	equ	0xFE1
  4905                           indf2	equ	0xFDF
  4906                           postinc2	equ	0xFDE
  4907                           postdec2	equ	0xFDD
  4908                           fsr2h	equ	0xFDA
  4909                           fsr2l	equ	0xFD9
  4910                           status	equ	0xFD8
  4911                           
  4912 ;; *************** function ___altoft *****************
  4913 ;; Defined at:
  4914 ;;		line 42 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\altoft.c"
  4915 ;; Parameters:    Size  Location     Type
  4916 ;;  c               4   54[COMRAM] long 
  4917 ;; Auto vars:     Size  Location     Type
  4918 ;;  sign            1   63[COMRAM] unsigned char 
  4919 ;;  exp             1   62[COMRAM] unsigned char 
  4920 ;; Return value:  Size  Location     Type
  4921 ;;                  3   54[COMRAM] float 
  4922 ;; Registers used:
  4923 ;;		wreg, status,2, status,0, cstack
  4924 ;; Tracked objects:
  4925 ;;		On entry : 0/0
  4926 ;;		On exit  : 0/0
  4927 ;;		Unchanged: 0/0
  4928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4929 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4930 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4931 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4932 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4933 ;;Total ram usage:       10 bytes
  4934 ;; Hardware stack levels used:    1
  4935 ;; Hardware stack levels required when called:    1
  4936 ;; This function calls:
  4937 ;;		___ftpack
  4938 ;; This function is called by:
  4939 ;;		_floor
  4940 ;; This function uses a non-reentrant model
  4941 ;;
  4942                           
  4943                           	psect	text25
  4944  00324A                     __ptext25:
  4945                           	opt stack 0
  4946  00324A                     ___altoft:
  4947                           	opt stack 22
  4948                           
  4949                           ;incstack = 0
  4950  00324A  0E00               	movlw	0
  4951  00324C  6E40               	movwf	___altoft@sign,c
  4952  00324E  0E8E               	movlw	142
  4953  003250  6E3F               	movwf	___altoft@exp,c
  4954  003252  AE3A               	btfss	___altoft@c+3,7,c
  4955  003254  D012               	goto	l3573
  4956  003256  1E3A               	comf	___altoft@c+3,f,c
  4957  003258  1E39               	comf	___altoft@c+2,f,c
  4958  00325A  1E38               	comf	___altoft@c+1,f,c
  4959  00325C  6C37               	negf	___altoft@c,c
  4960  00325E  0E00               	movlw	0
  4961  003260  2238               	addwfc	___altoft@c+1,f,c
  4962  003262  2239               	addwfc	___altoft@c+2,f,c
  4963  003264  223A               	addwfc	___altoft@c+3,f,c
  4964  003266  0E01               	movlw	1
  4965  003268  6E40               	movwf	___altoft@sign,c
  4966  00326A  D007               	goto	l3573
  4967  00326C                     l3571:
  4968  00326C  90D8               	bcf	status,0,c
  4969  00326E  323A               	rrcf	___altoft@c+3,f,c
  4970  003270  3239               	rrcf	___altoft@c+2,f,c
  4971  003272  3238               	rrcf	___altoft@c+1,f,c
  4972  003274  3237               	rrcf	___altoft@c,f,c
  4973  003276  2A3F               	incf	___altoft@exp,f,c
  4974  003278  D000               	goto	l3573
  4975  00327A                     l3573:
  4976  00327A  0E00               	movlw	0
  4977  00327C  1437               	andwf	___altoft@c,w,c
  4978  00327E  6E3B               	movwf	??___altoft& (0+255),c
  4979  003280  0E00               	movlw	0
  4980  003282  1438               	andwf	___altoft@c+1,w,c
  4981  003284  6E3C               	movwf	(??___altoft+1)& (0+255),c
  4982  003286  0E00               	movlw	0
  4983  003288  1439               	andwf	___altoft@c+2,w,c
  4984  00328A  6E3D               	movwf	(??___altoft+2)& (0+255),c
  4985  00328C  0EFF               	movlw	255
  4986  00328E  143A               	andwf	___altoft@c+3,w,c
  4987  003290  6E3E               	movwf	(??___altoft+3)& (0+255),c
  4988  003292  503B               	movf	??___altoft,w,c
  4989  003294  103C               	iorwf	??___altoft+1,w,c
  4990  003296  103D               	iorwf	??___altoft+2,w,c
  4991  003298  103E               	iorwf	??___altoft+3,w,c
  4992  00329A  A4D8               	btfss	status,2,c
  4993  00329C  D7E7               	goto	l3571
  4994  00329E  C037  F001         	movff	___altoft@c,___ftpack@arg
  4995  0032A2  C038  F002         	movff	___altoft@c+1,___ftpack@arg+1
  4996  0032A6  C039  F003         	movff	___altoft@c+2,___ftpack@arg+2
  4997  0032AA  C03F  F004         	movff	___altoft@exp,___ftpack@exp
  4998  0032AE  C040  F005         	movff	___altoft@sign,___ftpack@sign
  4999  0032B2  ECFA  F015         	call	___ftpack	;wreg free
  5000  0032B6  C001  F037         	movff	?___ftpack,?___altoft
  5001  0032BA  C002  F038         	movff	?___ftpack+1,?___altoft+1
  5002  0032BE  C003  F039         	movff	?___ftpack+2,?___altoft+2
  5003  0032C2  0012               	return	
  5004  0032C4  0012               	return		;funcret
  5005  0032C6                     __end_of___altoft:
  5006                           	opt stack 0
  5007                           tblptru	equ	0xFF8
  5008                           tblptrh	equ	0xFF7
  5009                           tblptrl	equ	0xFF6
  5010                           tablat	equ	0xFF5
  5011                           postinc0	equ	0xFEE
  5012                           wreg	equ	0xFE8
  5013                           postdec1	equ	0xFE5
  5014                           fsr1l	equ	0xFE1
  5015                           indf2	equ	0xFDF
  5016                           postinc2	equ	0xFDE
  5017                           postdec2	equ	0xFDD
  5018                           fsr2h	equ	0xFDA
  5019                           fsr2l	equ	0xFD9
  5020                           status	equ	0xFD8
  5021                           
  5022 ;; *************** function _eval_poly *****************
  5023 ;; Defined at:
  5024 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\evalpoly.c"
  5025 ;; Parameters:    Size  Location     Type
  5026 ;;  x               3   39[COMRAM] float 
  5027 ;;  d               2   42[COMRAM] PTR const 
  5028 ;;		 -> log@coeff(27), exp@coeff(30), 
  5029 ;;  n               2   44[COMRAM] int 
  5030 ;; Auto vars:     Size  Location     Type
  5031 ;;  res             3   48[COMRAM] int 
  5032 ;; Return value:  Size  Location     Type
  5033 ;;                  3   39[COMRAM] int 
  5034 ;; Registers used:
  5035 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5036 ;; Tracked objects:
  5037 ;;		On entry : 0/0
  5038 ;;		On exit  : 0/0
  5039 ;;		Unchanged: 0/0
  5040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5041 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5042 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5043 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5044 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5045 ;;Total ram usage:       12 bytes
  5046 ;; Hardware stack levels used:    1
  5047 ;; Hardware stack levels required when called:    2
  5048 ;; This function calls:
  5049 ;;		___ftadd
  5050 ;;		___ftmul
  5051 ;;		___wmul
  5052 ;; This function is called by:
  5053 ;;		_exp
  5054 ;;		_log
  5055 ;; This function uses a non-reentrant model
  5056 ;;
  5057                           
  5058                           	psect	text26
  5059  002A52                     __ptext26:
  5060                           	opt stack 0
  5061  002A52                     _eval_poly:
  5062                           	opt stack 22
  5063                           
  5064                           ;incstack = 0
  5065  002A52  C02D  F001         	movff	eval_poly@n,___wmul@multiplier
  5066  002A56  C02E  F002         	movff	eval_poly@n+1,___wmul@multiplier+1
  5067  002A5A  0E00               	movlw	0
  5068  002A5C  6E04               	movwf	___wmul@multiplicand+1,c
  5069  002A5E  0E03               	movlw	3
  5070  002A60  6E03               	movwf	___wmul@multiplicand,c
  5071  002A62  ECA8  F01C         	call	___wmul	;wreg free
  5072  002A66  C02B  F02F         	movff	eval_poly@d,??_eval_poly
  5073  002A6A  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
  5074  002A6E  5001               	movf	?___wmul,w,c
  5075  002A70  262F               	addwf	??_eval_poly,f,c
  5076  002A72  5002               	movf	?___wmul+1,w,c
  5077  002A74  2230               	addwfc	??_eval_poly+1,f,c
  5078  002A76  C02F  FFF6         	movff	??_eval_poly,tblptrl
  5079  002A7A  C030  FFF7         	movff	??_eval_poly+1,tblptrh
  5080  002A7E                     	if	0	;tblptru may be non-zero
  5081  002A7E                     	endif
  5082  002A7E                     	if	0	;tblptru may be non-zero
  5083  002A7E                     	endif
  5084  002A7E  0009               	tblrd		*+
  5085  002A80  CFF5 F031          	movff	tablat,eval_poly@res
  5086  002A84  0009               	tblrd		*+
  5087  002A86  CFF5 F032          	movff	tablat,eval_poly@res+1
  5088  002A8A  000A               	tblrd		*-
  5089  002A8C  CFF5 F033          	movff	tablat,eval_poly@res+2
  5090  002A90  D03F               	goto	l3889
  5091  002A92                     l3887:
  5092  002A92  C031  F010         	movff	eval_poly@res,___ftmul@f2
  5093  002A96  C032  F011         	movff	eval_poly@res+1,___ftmul@f2+1
  5094  002A9A  C033  F012         	movff	eval_poly@res+2,___ftmul@f2+2
  5095  002A9E  C028  F00D         	movff	eval_poly@x,___ftmul@f1
  5096  002AA2  C029  F00E         	movff	eval_poly@x+1,___ftmul@f1+1
  5097  002AA6  C02A  F00F         	movff	eval_poly@x+2,___ftmul@f1+2
  5098  002AAA  EC03  F012         	call	___ftmul	;wreg free
  5099  002AAE  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  5100  002AB2  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  5101  002AB6  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  5102  002ABA  0E00               	movlw	0
  5103  002ABC  6E04               	movwf	___wmul@multiplicand+1,c
  5104  002ABE  0E03               	movlw	3
  5105  002AC0  6E03               	movwf	___wmul@multiplicand,c
  5106  002AC2  062D               	decf	eval_poly@n,f,c
  5107  002AC4  A0D8               	btfss	status,0,c
  5108  002AC6  062E               	decf	eval_poly@n+1,f,c
  5109  002AC8  C02D  F001         	movff	eval_poly@n,___wmul@multiplier
  5110  002ACC  C02E  F002         	movff	eval_poly@n+1,___wmul@multiplier+1
  5111  002AD0  ECA8  F01C         	call	___wmul	;wreg free
  5112  002AD4  C02B  F02F         	movff	eval_poly@d,??_eval_poly
  5113  002AD8  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
  5114  002ADC  5001               	movf	?___wmul,w,c
  5115  002ADE  262F               	addwf	??_eval_poly,f,c
  5116  002AE0  5002               	movf	?___wmul+1,w,c
  5117  002AE2  2230               	addwfc	??_eval_poly+1,f,c
  5118  002AE4  C02F  FFF6         	movff	??_eval_poly,tblptrl
  5119  002AE8  C030  FFF7         	movff	??_eval_poly+1,tblptrh
  5120  002AEC                     	if	0	;tblptru may be non-zero
  5121  002AEC                     	endif
  5122  002AEC                     	if	0	;tblptru may be non-zero
  5123  002AEC                     	endif
  5124  002AEC  0009               	tblrd		*+
  5125  002AEE  CFF5 F01F          	movff	tablat,___ftadd@f2
  5126  002AF2  0009               	tblrd		*+
  5127  002AF4  CFF5 F020          	movff	tablat,___ftadd@f2+1
  5128  002AF8  000A               	tblrd		*-
  5129  002AFA  CFF5 F021          	movff	tablat,___ftadd@f2+2
  5130  002AFE  EC74  F00B         	call	___ftadd	;wreg free
  5131  002B02  C01C  F031         	movff	?___ftadd,eval_poly@res
  5132  002B06  C01D  F032         	movff	?___ftadd+1,eval_poly@res+1
  5133  002B0A  C01E  F033         	movff	?___ftadd+2,eval_poly@res+2
  5134  002B0E  D000               	goto	l3889
  5135  002B10                     l3889:
  5136  002B10  502D               	movf	eval_poly@n,w,c
  5137  002B12  102E               	iorwf	eval_poly@n+1,w,c
  5138  002B14  A4D8               	btfss	status,2,c
  5139  002B16  D7BD               	goto	l3887
  5140  002B18  C031  F028         	movff	eval_poly@res,?_eval_poly
  5141  002B1C  C032  F029         	movff	eval_poly@res+1,?_eval_poly+1
  5142  002B20  C033  F02A         	movff	eval_poly@res+2,?_eval_poly+2
  5143  002B24  0012               	return		;funcret
  5144  002B26                     __end_of_eval_poly:
  5145                           	opt stack 0
  5146                           tblptru	equ	0xFF8
  5147                           tblptrh	equ	0xFF7
  5148                           tblptrl	equ	0xFF6
  5149                           tablat	equ	0xFF5
  5150                           postinc0	equ	0xFEE
  5151                           wreg	equ	0xFE8
  5152                           postdec1	equ	0xFE5
  5153                           fsr1l	equ	0xFE1
  5154                           indf2	equ	0xFDF
  5155                           postinc2	equ	0xFDE
  5156                           postdec2	equ	0xFDD
  5157                           fsr2h	equ	0xFDA
  5158                           fsr2l	equ	0xFD9
  5159                           status	equ	0xFD8
  5160                           
  5161 ;; *************** function ___ftmul *****************
  5162 ;; Defined at:
  5163 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\ftmul.c"
  5164 ;; Parameters:    Size  Location     Type
  5165 ;;  f1              3   12[COMRAM] float 
  5166 ;;  f2              3   15[COMRAM] float 
  5167 ;; Auto vars:     Size  Location     Type
  5168 ;;  f3_as_produc    3   22[COMRAM] unsigned um
  5169 ;;  sign            1   26[COMRAM] unsigned char 
  5170 ;;  cntr            1   25[COMRAM] unsigned char 
  5171 ;;  exp             1   21[COMRAM] unsigned char 
  5172 ;; Return value:  Size  Location     Type
  5173 ;;                  3   12[COMRAM] float 
  5174 ;; Registers used:
  5175 ;;		wreg, status,2, status,0, cstack
  5176 ;; Tracked objects:
  5177 ;;		On entry : 0/0
  5178 ;;		On exit  : 0/0
  5179 ;;		Unchanged: 0/0
  5180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5181 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5182 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5183 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5184 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5185 ;;Total ram usage:       15 bytes
  5186 ;; Hardware stack levels used:    1
  5187 ;; Hardware stack levels required when called:    1
  5188 ;; This function calls:
  5189 ;;		___ftpack
  5190 ;; This function is called by:
  5191 ;;		_obtain_pass
  5192 ;;		_input_old_pass
  5193 ;;		_input_new_pass
  5194 ;;		_pow
  5195 ;;		_exp
  5196 ;;		_log
  5197 ;;		_eval_poly
  5198 ;; This function uses a non-reentrant model
  5199 ;;
  5200                           
  5201                           	psect	text27
  5202  002406                     __ptext27:
  5203                           	opt stack 0
  5204  002406                     ___ftmul:
  5205                           	opt stack 22
  5206                           
  5207                           ;incstack = 0
  5208  002406  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
  5209  00240A  6A14               	clrf	(??___ftmul+1)& (0+255),c
  5210  00240C  6A15               	clrf	(??___ftmul+2)& (0+255),c
  5211  00240E  340E               	rlcf	___ftmul@f1+1,w,c
  5212  002410  3613               	rlcf	??___ftmul& (0+255),f,c
  5213  002412  E301               	bnc	u2771
  5214  002414  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  5215  002416                     u2771:
  5216  002416  5013               	movf	??___ftmul,w,c
  5217  002418  6E16               	movwf	___ftmul@exp,c
  5218  00241A  5016               	movf	___ftmul@exp,w,c
  5219  00241C  A4D8               	btfss	status,2,c
  5220  00241E  D007               	goto	l3655
  5221  002420  0E00               	movlw	0
  5222  002422  6E0D               	movwf	?___ftmul,c
  5223  002424  0E00               	movlw	0
  5224  002426  6E0E               	movwf	?___ftmul+1,c
  5225  002428  0E00               	movlw	0
  5226  00242A  6E0F               	movwf	?___ftmul+2,c
  5227  00242C  0012               	return	
  5228  00242E                     l3655:
  5229  00242E  C012  F013         	movff	___ftmul@f2+2,??___ftmul
  5230  002432  6A14               	clrf	(??___ftmul+1)& (0+255),c
  5231  002434  6A15               	clrf	(??___ftmul+2)& (0+255),c
  5232  002436  3411               	rlcf	___ftmul@f2+1,w,c
  5233  002438  3613               	rlcf	??___ftmul& (0+255),f,c
  5234  00243A  E301               	bnc	u2791
  5235  00243C  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  5236  00243E                     u2791:
  5237  00243E  5013               	movf	??___ftmul,w,c
  5238  002440  6E1B               	movwf	___ftmul@sign,c
  5239  002442  501B               	movf	___ftmul@sign,w,c
  5240  002444  A4D8               	btfss	status,2,c
  5241  002446  D007               	goto	l3661
  5242  002448  0E00               	movlw	0
  5243  00244A  6E0D               	movwf	?___ftmul,c
  5244  00244C  0E00               	movlw	0
  5245  00244E  6E0E               	movwf	?___ftmul+1,c
  5246  002450  0E00               	movlw	0
  5247  002452  6E0F               	movwf	?___ftmul+2,c
  5248  002454  0012               	return	
  5249  002456                     l3661:
  5250  002456  501B               	movf	___ftmul@sign,w,c
  5251  002458  0F7B               	addlw	123
  5252  00245A  2616               	addwf	___ftmul@exp,f,c
  5253  00245C  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
  5254  002460  5012               	movf	___ftmul@f2+2,w,c
  5255  002462  1A1B               	xorwf	___ftmul@sign,f,c
  5256  002464  0E80               	movlw	128
  5257  002466  161B               	andwf	___ftmul@sign,f,c
  5258  002468  8E0E               	bsf	___ftmul@f1+1,7,c
  5259  00246A  8E11               	bsf	___ftmul@f2+1,7,c
  5260  00246C  0EFF               	movlw	255
  5261  00246E  1610               	andwf	___ftmul@f2,f,c
  5262  002470  0EFF               	movlw	255
  5263  002472  1611               	andwf	___ftmul@f2+1,f,c
  5264  002474  0E00               	movlw	0
  5265  002476  1612               	andwf	___ftmul@f2+2,f,c
  5266  002478  0E00               	movlw	0
  5267  00247A  6E17               	movwf	___ftmul@f3_as_product,c
  5268  00247C  0E00               	movlw	0
  5269  00247E  6E18               	movwf	___ftmul@f3_as_product+1,c
  5270  002480  0E00               	movlw	0
  5271  002482  6E19               	movwf	___ftmul@f3_as_product+2,c
  5272  002484  0E07               	movlw	7
  5273  002486  6E1A               	movwf	___ftmul@cntr,c
  5274  002488  D000               	goto	l3675
  5275  00248A                     l3675:
  5276  00248A  A00D               	btfss	___ftmul@f1,0,c
  5277  00248C  D007               	goto	l3679
  5278  00248E  5010               	movf	___ftmul@f2,w,c
  5279  002490  2617               	addwf	___ftmul@f3_as_product,f,c
  5280  002492  5011               	movf	___ftmul@f2+1,w,c
  5281  002494  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  5282  002496  5012               	movf	___ftmul@f2+2,w,c
  5283  002498  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  5284  00249A  D000               	goto	l3679
  5285  00249C                     l3679:
  5286  00249C  90D8               	bcf	status,0,c
  5287  00249E  320F               	rrcf	___ftmul@f1+2,f,c
  5288  0024A0  320E               	rrcf	___ftmul@f1+1,f,c
  5289  0024A2  320D               	rrcf	___ftmul@f1,f,c
  5290  0024A4  90D8               	bcf	status,0,c
  5291  0024A6  3610               	rlcf	___ftmul@f2,f,c
  5292  0024A8  3611               	rlcf	___ftmul@f2+1,f,c
  5293  0024AA  3612               	rlcf	___ftmul@f2+2,f,c
  5294  0024AC  2E1A               	decfsz	___ftmul@cntr,f,c
  5295  0024AE  D7ED               	goto	l3675
  5296  0024B0  D000               	goto	l3683
  5297  0024B2                     l3683:
  5298  0024B2  0E09               	movlw	9
  5299  0024B4  6E1A               	movwf	___ftmul@cntr,c
  5300  0024B6  D000               	goto	l3685
  5301  0024B8                     l3685:
  5302  0024B8  A00D               	btfss	___ftmul@f1,0,c
  5303  0024BA  D007               	goto	l3689
  5304  0024BC  5010               	movf	___ftmul@f2,w,c
  5305  0024BE  2617               	addwf	___ftmul@f3_as_product,f,c
  5306  0024C0  5011               	movf	___ftmul@f2+1,w,c
  5307  0024C2  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  5308  0024C4  5012               	movf	___ftmul@f2+2,w,c
  5309  0024C6  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  5310  0024C8  D000               	goto	l3689
  5311  0024CA                     l3689:
  5312  0024CA  90D8               	bcf	status,0,c
  5313  0024CC  320F               	rrcf	___ftmul@f1+2,f,c
  5314  0024CE  320E               	rrcf	___ftmul@f1+1,f,c
  5315  0024D0  320D               	rrcf	___ftmul@f1,f,c
  5316  0024D2  90D8               	bcf	status,0,c
  5317  0024D4  3219               	rrcf	___ftmul@f3_as_product+2,f,c
  5318  0024D6  3218               	rrcf	___ftmul@f3_as_product+1,f,c
  5319  0024D8  3217               	rrcf	___ftmul@f3_as_product,f,c
  5320  0024DA  2E1A               	decfsz	___ftmul@cntr,f,c
  5321  0024DC  D7ED               	goto	l3685
  5322  0024DE  D000               	goto	l3693
  5323  0024E0                     l3693:
  5324  0024E0  C017  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  5325  0024E4  C018  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5326  0024E8  C019  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5327  0024EC  C016  F004         	movff	___ftmul@exp,___ftpack@exp
  5328  0024F0  C01B  F005         	movff	___ftmul@sign,___ftpack@sign
  5329  0024F4  ECFA  F015         	call	___ftpack	;wreg free
  5330  0024F8  C001  F00D         	movff	?___ftpack,?___ftmul
  5331  0024FC  C002  F00E         	movff	?___ftpack+1,?___ftmul+1
  5332  002500  C003  F00F         	movff	?___ftpack+2,?___ftmul+2
  5333  002504  0012               	return	
  5334  002506  0012               	return		;funcret
  5335  002508                     __end_of___ftmul:
  5336                           	opt stack 0
  5337                           tblptru	equ	0xFF8
  5338                           tblptrh	equ	0xFF7
  5339                           tblptrl	equ	0xFF6
  5340                           tablat	equ	0xFF5
  5341                           postinc0	equ	0xFEE
  5342                           wreg	equ	0xFE8
  5343                           postdec1	equ	0xFE5
  5344                           fsr1l	equ	0xFE1
  5345                           indf2	equ	0xFDF
  5346                           postinc2	equ	0xFDE
  5347                           postdec2	equ	0xFDD
  5348                           fsr2h	equ	0xFDA
  5349                           fsr2l	equ	0xFD9
  5350                           status	equ	0xFD8
  5351                           
  5352 ;; *************** function ___ftsub *****************
  5353 ;; Defined at:
  5354 ;;		line 20 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\ftsub.c"
  5355 ;; Parameters:    Size  Location     Type
  5356 ;;  f1              3   39[COMRAM] float 
  5357 ;;  f2              3   42[COMRAM] float 
  5358 ;; Auto vars:     Size  Location     Type
  5359 ;;		None
  5360 ;; Return value:  Size  Location     Type
  5361 ;;                  3   39[COMRAM] float 
  5362 ;; Registers used:
  5363 ;;		wreg, status,2, status,0, cstack
  5364 ;; Tracked objects:
  5365 ;;		On entry : 0/0
  5366 ;;		On exit  : 0/0
  5367 ;;		Unchanged: 0/0
  5368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5369 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5372 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5373 ;;Total ram usage:        6 bytes
  5374 ;; Hardware stack levels used:    1
  5375 ;; Hardware stack levels required when called:    2
  5376 ;; This function calls:
  5377 ;;		___ftadd
  5378 ;; This function is called by:
  5379 ;;		_exp
  5380 ;; This function uses a non-reentrant model
  5381 ;;
  5382                           
  5383                           	psect	text28
  5384  0036FC                     __ptext28:
  5385                           	opt stack 0
  5386  0036FC                     ___ftsub:
  5387                           	opt stack 22
  5388                           
  5389                           ;incstack = 0
  5390  0036FC  502B               	movf	___ftsub@f2,w,c
  5391  0036FE  102C               	iorwf	___ftsub@f2+1,w,c
  5392  003700  102D               	iorwf	___ftsub@f2+2,w,c
  5393  003702  B4D8               	btfsc	status,2,c
  5394  003704  D007               	goto	l3841
  5395  003706  0E00               	movlw	0
  5396  003708  1A2B               	xorwf	___ftsub@f2,f,c
  5397  00370A  0E00               	movlw	0
  5398  00370C  1A2C               	xorwf	___ftsub@f2+1,f,c
  5399  00370E  0E80               	movlw	128
  5400  003710  1A2D               	xorwf	___ftsub@f2+2,f,c
  5401  003712  D000               	goto	l3841
  5402  003714                     l3841:
  5403  003714  C028  F01C         	movff	___ftsub@f1,___ftadd@f1
  5404  003718  C029  F01D         	movff	___ftsub@f1+1,___ftadd@f1+1
  5405  00371C  C02A  F01E         	movff	___ftsub@f1+2,___ftadd@f1+2
  5406  003720  C02B  F01F         	movff	___ftsub@f2,___ftadd@f2
  5407  003724  C02C  F020         	movff	___ftsub@f2+1,___ftadd@f2+1
  5408  003728  C02D  F021         	movff	___ftsub@f2+2,___ftadd@f2+2
  5409  00372C  EC74  F00B         	call	___ftadd	;wreg free
  5410  003730  C01C  F028         	movff	?___ftadd,?___ftsub
  5411  003734  C01D  F029         	movff	?___ftadd+1,?___ftsub+1
  5412  003738  C01E  F02A         	movff	?___ftadd+2,?___ftsub+2
  5413  00373C  0012               	return	
  5414  00373E  0012               	return		;funcret
  5415  003740                     __end_of___ftsub:
  5416                           	opt stack 0
  5417                           tblptru	equ	0xFF8
  5418                           tblptrh	equ	0xFF7
  5419                           tblptrl	equ	0xFF6
  5420                           tablat	equ	0xFF5
  5421                           postinc0	equ	0xFEE
  5422                           wreg	equ	0xFE8
  5423                           postdec1	equ	0xFE5
  5424                           fsr1l	equ	0xFE1
  5425                           indf2	equ	0xFDF
  5426                           postinc2	equ	0xFDE
  5427                           postdec2	equ	0xFDD
  5428                           fsr2h	equ	0xFDA
  5429                           fsr2l	equ	0xFD9
  5430                           status	equ	0xFD8
  5431                           
  5432 ;; *************** function ___ftadd *****************
  5433 ;; Defined at:
  5434 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\ftadd.c"
  5435 ;; Parameters:    Size  Location     Type
  5436 ;;  f1              3   27[COMRAM] float 
  5437 ;;  f2              3   30[COMRAM] float 
  5438 ;; Auto vars:     Size  Location     Type
  5439 ;;  exp1            1   38[COMRAM] unsigned char 
  5440 ;;  exp2            1   37[COMRAM] unsigned char 
  5441 ;;  sign            1   36[COMRAM] unsigned char 
  5442 ;; Return value:  Size  Location     Type
  5443 ;;                  3   27[COMRAM] float 
  5444 ;; Registers used:
  5445 ;;		wreg, status,2, status,0, cstack
  5446 ;; Tracked objects:
  5447 ;;		On entry : 0/0
  5448 ;;		On exit  : 0/0
  5449 ;;		Unchanged: 0/0
  5450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5451 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5452 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5453 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5454 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5455 ;;Total ram usage:       12 bytes
  5456 ;; Hardware stack levels used:    1
  5457 ;; Hardware stack levels required when called:    1
  5458 ;; This function calls:
  5459 ;;		___ftpack
  5460 ;; This function is called by:
  5461 ;;		_obtain_pass
  5462 ;;		_input_old_pass
  5463 ;;		_input_new_pass
  5464 ;;		___ftsub
  5465 ;;		_floor
  5466 ;;		_log
  5467 ;;		_eval_poly
  5468 ;; This function uses a non-reentrant model
  5469 ;;
  5470                           
  5471                           	psect	text29
  5472  0016E8                     __ptext29:
  5473                           	opt stack 0
  5474  0016E8                     ___ftadd:
  5475                           	opt stack 22
  5476                           
  5477                           ;incstack = 0
  5478  0016E8  C01E  F022         	movff	___ftadd@f1+2,??___ftadd
  5479  0016EC  6A23               	clrf	(??___ftadd+1)& (0+255),c
  5480  0016EE  6A24               	clrf	(??___ftadd+2)& (0+255),c
  5481  0016F0  341D               	rlcf	___ftadd@f1+1,w,c
  5482  0016F2  3622               	rlcf	??___ftadd& (0+255),f,c
  5483  0016F4  E301               	bnc	u2561
  5484  0016F6  8023               	bsf	(??___ftadd+1)& (0+255),0,c
  5485  0016F8                     u2561:
  5486  0016F8  5022               	movf	??___ftadd,w,c
  5487  0016FA  6E27               	movwf	___ftadd@exp1,c
  5488  0016FC  C021  F022         	movff	___ftadd@f2+2,??___ftadd
  5489  001700  6A23               	clrf	(??___ftadd+1)& (0+255),c
  5490  001702  6A24               	clrf	(??___ftadd+2)& (0+255),c
  5491  001704  3420               	rlcf	___ftadd@f2+1,w,c
  5492  001706  3622               	rlcf	??___ftadd& (0+255),f,c
  5493  001708  E301               	bnc	u2571
  5494  00170A  8023               	bsf	(??___ftadd+1)& (0+255),0,c
  5495  00170C                     u2571:
  5496  00170C  5022               	movf	??___ftadd,w,c
  5497  00170E  6E26               	movwf	___ftadd@exp2,c
  5498  001710  5027               	movf	___ftadd@exp1,w,c
  5499  001712  B4D8               	btfsc	status,2,c
  5500  001714  D00B               	goto	l1466
  5501  001716  5026               	movf	___ftadd@exp2,w,c
  5502  001718  5C27               	subwf	___ftadd@exp1,w,c
  5503  00171A  B0D8               	btfsc	status,0,c
  5504  00171C  D00E               	goto	l3587
  5505  00171E  5027               	movf	___ftadd@exp1,w,c
  5506  001720  0800               	sublw	0
  5507  001722  2426               	addwf	___ftadd@exp2,w,c
  5508  001724  6E22               	movwf	??___ftadd& (0+255),c
  5509  001726  0E18               	movlw	24
  5510  001728  6422               	cpfsgt	??___ftadd,c
  5511  00172A  D007               	goto	l3587
  5512  00172C                     l1466:
  5513  00172C  C01F  F01C         	movff	___ftadd@f2,?___ftadd
  5514  001730  C020  F01D         	movff	___ftadd@f2+1,?___ftadd+1
  5515  001734  C021  F01E         	movff	___ftadd@f2+2,?___ftadd+2
  5516  001738  0012               	return	
  5517  00173A                     l3587:
  5518  00173A  5026               	movf	___ftadd@exp2,w,c
  5519  00173C  B4D8               	btfsc	status,2,c
  5520  00173E  D00B               	goto	l1470
  5521  001740  5027               	movf	___ftadd@exp1,w,c
  5522  001742  5C26               	subwf	___ftadd@exp2,w,c
  5523  001744  B0D8               	btfsc	status,0,c
  5524  001746  D00E               	goto	l3593
  5525  001748  5026               	movf	___ftadd@exp2,w,c
  5526  00174A  0800               	sublw	0
  5527  00174C  2427               	addwf	___ftadd@exp1,w,c
  5528  00174E  6E22               	movwf	??___ftadd& (0+255),c
  5529  001750  0E18               	movlw	24
  5530  001752  6422               	cpfsgt	??___ftadd,c
  5531  001754  D007               	goto	l3593
  5532  001756                     l1470:
  5533  001756  C01C  F01C         	movff	___ftadd@f1,?___ftadd
  5534  00175A  C01D  F01D         	movff	___ftadd@f1+1,?___ftadd+1
  5535  00175E  C01E  F01E         	movff	___ftadd@f1+2,?___ftadd+2
  5536  001762  0012               	return	
  5537  001764                     l3593:
  5538  001764  0E06               	movlw	6
  5539  001766  6E25               	movwf	___ftadd@sign,c
  5540  001768  AE1E               	btfss	___ftadd@f1+2,7,c
  5541  00176A  D002               	goto	l3599
  5542  00176C  8E25               	bsf	___ftadd@sign,7,c
  5543  00176E  D000               	goto	l3599
  5544  001770                     l3599:
  5545  001770  BE21               	btfsc	___ftadd@f2+2,7,c
  5546  001772  8C25               	bsf	___ftadd@sign,6,c
  5547  001774  8E1D               	bsf	___ftadd@f1+1,7,c
  5548  001776  0EFF               	movlw	255
  5549  001778  161C               	andwf	___ftadd@f1,f,c
  5550  00177A  0EFF               	movlw	255
  5551  00177C  161D               	andwf	___ftadd@f1+1,f,c
  5552  00177E  0E00               	movlw	0
  5553  001780  161E               	andwf	___ftadd@f1+2,f,c
  5554  001782  8E20               	bsf	___ftadd@f2+1,7,c
  5555  001784  0EFF               	movlw	255
  5556  001786  161F               	andwf	___ftadd@f2,f,c
  5557  001788  0EFF               	movlw	255
  5558  00178A  1620               	andwf	___ftadd@f2+1,f,c
  5559  00178C  0E00               	movlw	0
  5560  00178E  1621               	andwf	___ftadd@f2+2,f,c
  5561  001790  5026               	movf	___ftadd@exp2,w,c
  5562  001792  5C27               	subwf	___ftadd@exp1,w,c
  5563  001794  B0D8               	btfsc	status,0,c
  5564  001796  D01E               	goto	l3619
  5565  001798                     l3609:
  5566  001798  90D8               	bcf	status,0,c
  5567  00179A  361F               	rlcf	___ftadd@f2,f,c
  5568  00179C  3620               	rlcf	___ftadd@f2+1,f,c
  5569  00179E  3621               	rlcf	___ftadd@f2+2,f,c
  5570  0017A0  0626               	decf	___ftadd@exp2,f,c
  5571  0017A2  5027               	movf	___ftadd@exp1,w,c
  5572  0017A4  1826               	xorwf	___ftadd@exp2,w,c
  5573  0017A6  B4D8               	btfsc	status,2,c
  5574  0017A8  D00F               	goto	l3617
  5575  0017AA  0625               	decf	___ftadd@sign,f,c
  5576  0017AC  C025  F022         	movff	___ftadd@sign,??___ftadd
  5577  0017B0  0E07               	movlw	7
  5578  0017B2  1622               	andwf	??___ftadd,f,c
  5579  0017B4  B4D8               	btfsc	status,2,c
  5580  0017B6  D008               	goto	l3617
  5581  0017B8  D7EF               	goto	l3609
  5582  0017BA  D006               	goto	l3617
  5583  0017BC                     l3615:
  5584  0017BC  90D8               	bcf	status,0,c
  5585  0017BE  321E               	rrcf	___ftadd@f1+2,f,c
  5586  0017C0  321D               	rrcf	___ftadd@f1+1,f,c
  5587  0017C2  321C               	rrcf	___ftadd@f1,f,c
  5588  0017C4  2A27               	incf	___ftadd@exp1,f,c
  5589  0017C6  D000               	goto	l3617
  5590  0017C8                     l3617:
  5591  0017C8  5026               	movf	___ftadd@exp2,w,c
  5592  0017CA  1827               	xorwf	___ftadd@exp1,w,c
  5593  0017CC  B4D8               	btfsc	status,2,c
  5594  0017CE  D024               	goto	l1481
  5595  0017D0  D7F5               	goto	l3615
  5596  0017D2  D022               	goto	l1481
  5597  0017D4                     l3619:
  5598  0017D4  5027               	movf	___ftadd@exp1,w,c
  5599  0017D6  5C26               	subwf	___ftadd@exp2,w,c
  5600  0017D8  B0D8               	btfsc	status,0,c
  5601  0017DA  D01E               	goto	l1481
  5602  0017DC                     l3621:
  5603  0017DC  90D8               	bcf	status,0,c
  5604  0017DE  361C               	rlcf	___ftadd@f1,f,c
  5605  0017E0  361D               	rlcf	___ftadd@f1+1,f,c
  5606  0017E2  361E               	rlcf	___ftadd@f1+2,f,c
  5607  0017E4  0627               	decf	___ftadd@exp1,f,c
  5608  0017E6  5027               	movf	___ftadd@exp1,w,c
  5609  0017E8  1826               	xorwf	___ftadd@exp2,w,c
  5610  0017EA  B4D8               	btfsc	status,2,c
  5611  0017EC  D00F               	goto	l3629
  5612  0017EE  0625               	decf	___ftadd@sign,f,c
  5613  0017F0  C025  F022         	movff	___ftadd@sign,??___ftadd
  5614  0017F4  0E07               	movlw	7
  5615  0017F6  1622               	andwf	??___ftadd,f,c
  5616  0017F8  B4D8               	btfsc	status,2,c
  5617  0017FA  D008               	goto	l3629
  5618  0017FC  D7EF               	goto	l3621
  5619  0017FE  D006               	goto	l3629
  5620  001800                     l3627:
  5621  001800  90D8               	bcf	status,0,c
  5622  001802  3221               	rrcf	___ftadd@f2+2,f,c
  5623  001804  3220               	rrcf	___ftadd@f2+1,f,c
  5624  001806  321F               	rrcf	___ftadd@f2,f,c
  5625  001808  2A26               	incf	___ftadd@exp2,f,c
  5626  00180A  D000               	goto	l3629
  5627  00180C                     l3629:
  5628  00180C  5026               	movf	___ftadd@exp2,w,c
  5629  00180E  1827               	xorwf	___ftadd@exp1,w,c
  5630  001810  B4D8               	btfsc	status,2,c
  5631  001812  D002               	goto	l1481
  5632  001814  D7F5               	goto	l3627
  5633  001816  D000               	goto	l1481
  5634  001818                     l1481:
  5635  001818  AE25               	btfss	___ftadd@sign,7,c
  5636  00181A  D00C               	goto	l1490
  5637  00181C  0EFF               	movlw	255
  5638  00181E  1A1C               	xorwf	___ftadd@f1,f,c
  5639  001820  0EFF               	movlw	255
  5640  001822  1A1D               	xorwf	___ftadd@f1+1,f,c
  5641  001824  0EFF               	movlw	255
  5642  001826  1A1E               	xorwf	___ftadd@f1+2,f,c
  5643  001828  0E01               	movlw	1
  5644  00182A  261C               	addwf	___ftadd@f1,f,c
  5645  00182C  0E00               	movlw	0
  5646  00182E  221D               	addwfc	___ftadd@f1+1,f,c
  5647  001830  0E00               	movlw	0
  5648  001832  221E               	addwfc	___ftadd@f1+2,f,c
  5649  001834                     l1490:
  5650  001834  AC25               	btfss	___ftadd@sign,6,c
  5651  001836  D00D               	goto	l3635
  5652  001838  0EFF               	movlw	255
  5653  00183A  1A1F               	xorwf	___ftadd@f2,f,c
  5654  00183C  0EFF               	movlw	255
  5655  00183E  1A20               	xorwf	___ftadd@f2+1,f,c
  5656  001840  0EFF               	movlw	255
  5657  001842  1A21               	xorwf	___ftadd@f2+2,f,c
  5658  001844  0E01               	movlw	1
  5659  001846  261F               	addwf	___ftadd@f2,f,c
  5660  001848  0E00               	movlw	0
  5661  00184A  2220               	addwfc	___ftadd@f2+1,f,c
  5662  00184C  0E00               	movlw	0
  5663  00184E  2221               	addwfc	___ftadd@f2+2,f,c
  5664  001850  D000               	goto	l3635
  5665  001852                     l3635:
  5666  001852  0E00               	movlw	0
  5667  001854  6E25               	movwf	___ftadd@sign,c
  5668  001856  501C               	movf	___ftadd@f1,w,c
  5669  001858  261F               	addwf	___ftadd@f2,f,c
  5670  00185A  501D               	movf	___ftadd@f1+1,w,c
  5671  00185C  2220               	addwfc	___ftadd@f2+1,f,c
  5672  00185E  501E               	movf	___ftadd@f1+2,w,c
  5673  001860  2221               	addwfc	___ftadd@f2+2,f,c
  5674  001862  AE21               	btfss	___ftadd@f2+2,7,c
  5675  001864  D00F               	goto	l3645
  5676  001866  0EFF               	movlw	255
  5677  001868  1A1F               	xorwf	___ftadd@f2,f,c
  5678  00186A  0EFF               	movlw	255
  5679  00186C  1A20               	xorwf	___ftadd@f2+1,f,c
  5680  00186E  0EFF               	movlw	255
  5681  001870  1A21               	xorwf	___ftadd@f2+2,f,c
  5682  001872  0E01               	movlw	1
  5683  001874  261F               	addwf	___ftadd@f2,f,c
  5684  001876  0E00               	movlw	0
  5685  001878  2220               	addwfc	___ftadd@f2+1,f,c
  5686  00187A  0E00               	movlw	0
  5687  00187C  2221               	addwfc	___ftadd@f2+2,f,c
  5688  00187E  0E01               	movlw	1
  5689  001880  6E25               	movwf	___ftadd@sign,c
  5690  001882  D000               	goto	l3645
  5691  001884                     l3645:
  5692  001884  C01F  F001         	movff	___ftadd@f2,___ftpack@arg
  5693  001888  C020  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  5694  00188C  C021  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  5695  001890  C027  F004         	movff	___ftadd@exp1,___ftpack@exp
  5696  001894  C025  F005         	movff	___ftadd@sign,___ftpack@sign
  5697  001898  ECFA  F015         	call	___ftpack	;wreg free
  5698  00189C  C001  F01C         	movff	?___ftpack,?___ftadd
  5699  0018A0  C002  F01D         	movff	?___ftpack+1,?___ftadd+1
  5700  0018A4  C003  F01E         	movff	?___ftpack+2,?___ftadd+2
  5701  0018A8  0012               	return	
  5702  0018AA  0012               	return		;funcret
  5703  0018AC                     __end_of___ftadd:
  5704                           	opt stack 0
  5705                           tblptru	equ	0xFF8
  5706                           tblptrh	equ	0xFF7
  5707                           tblptrl	equ	0xFF6
  5708                           tablat	equ	0xFF5
  5709                           postinc0	equ	0xFEE
  5710                           wreg	equ	0xFE8
  5711                           postdec1	equ	0xFE5
  5712                           fsr1l	equ	0xFE1
  5713                           indf2	equ	0xFDF
  5714                           postinc2	equ	0xFDE
  5715                           postdec2	equ	0xFDD
  5716                           fsr2h	equ	0xFDA
  5717                           fsr2l	equ	0xFD9
  5718                           status	equ	0xFD8
  5719                           
  5720 ;; *************** function ___ftneg *****************
  5721 ;; Defined at:
  5722 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\ftneg.c"
  5723 ;; Parameters:    Size  Location     Type
  5724 ;;  f1              3    0[COMRAM] float 
  5725 ;; Auto vars:     Size  Location     Type
  5726 ;;		None
  5727 ;; Return value:  Size  Location     Type
  5728 ;;                  3    0[COMRAM] float 
  5729 ;; Registers used:
  5730 ;;		wreg, status,2, status,0
  5731 ;; Tracked objects:
  5732 ;;		On entry : 0/0
  5733 ;;		On exit  : 0/0
  5734 ;;		Unchanged: 0/0
  5735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5736 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5739 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5740 ;;Total ram usage:        3 bytes
  5741 ;; Hardware stack levels used:    1
  5742 ;; This function calls:
  5743 ;;		Nothing
  5744 ;; This function is called by:
  5745 ;;		_pow
  5746 ;;		_exp
  5747 ;; This function uses a non-reentrant model
  5748 ;;
  5749                           
  5750                           	psect	text30
  5751  0039C2                     __ptext30:
  5752                           	opt stack 0
  5753  0039C2                     ___ftneg:
  5754                           	opt stack 24
  5755                           
  5756                           ;incstack = 0
  5757  0039C2  5001               	movf	___ftneg@f1,w,c
  5758  0039C4  1002               	iorwf	___ftneg@f1+1,w,c
  5759  0039C6  1003               	iorwf	___ftneg@f1+2,w,c
  5760  0039C8  B4D8               	btfsc	status,2,c
  5761  0039CA  D006               	goto	l1523
  5762  0039CC  0E00               	movlw	0
  5763  0039CE  1A01               	xorwf	___ftneg@f1,f,c
  5764  0039D0  0E00               	movlw	0
  5765  0039D2  1A02               	xorwf	___ftneg@f1+1,f,c
  5766  0039D4  0E80               	movlw	128
  5767  0039D6  1A03               	xorwf	___ftneg@f1+2,f,c
  5768  0039D8                     l1523:
  5769  0039D8  C001  F001         	movff	___ftneg@f1,?___ftneg
  5770  0039DC  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  5771  0039E0  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  5772  0039E4  0012               	return		;funcret
  5773  0039E6                     __end_of___ftneg:
  5774                           	opt stack 0
  5775                           tblptru	equ	0xFF8
  5776                           tblptrh	equ	0xFF7
  5777                           tblptrl	equ	0xFF6
  5778                           tablat	equ	0xFF5
  5779                           postinc0	equ	0xFEE
  5780                           wreg	equ	0xFE8
  5781                           postdec1	equ	0xFE5
  5782                           fsr1l	equ	0xFE1
  5783                           indf2	equ	0xFDF
  5784                           postinc2	equ	0xFDE
  5785                           postdec2	equ	0xFDD
  5786                           fsr2h	equ	0xFDA
  5787                           fsr2l	equ	0xFD9
  5788                           status	equ	0xFD8
  5789                           
  5790 ;; *************** function ___ftdiv *****************
  5791 ;; Defined at:
  5792 ;;		line 54 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  5793 ;; Parameters:    Size  Location     Type
  5794 ;;  f1              3    8[COMRAM] float 
  5795 ;;  f2              3   11[COMRAM] float 
  5796 ;; Auto vars:     Size  Location     Type
  5797 ;;  f3              3   18[COMRAM] float 
  5798 ;;  sign            1   22[COMRAM] unsigned char 
  5799 ;;  exp             1   21[COMRAM] unsigned char 
  5800 ;;  cntr            1   17[COMRAM] unsigned char 
  5801 ;; Return value:  Size  Location     Type
  5802 ;;                  3    8[COMRAM] float 
  5803 ;; Registers used:
  5804 ;;		wreg, status,2, status,0, cstack
  5805 ;; Tracked objects:
  5806 ;;		On entry : 0/0
  5807 ;;		On exit  : 0/0
  5808 ;;		Unchanged: 0/0
  5809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5810 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5811 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5812 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5813 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5814 ;;Total ram usage:       15 bytes
  5815 ;; Hardware stack levels used:    1
  5816 ;; Hardware stack levels required when called:    1
  5817 ;; This function calls:
  5818 ;;		___ftpack
  5819 ;; This function is called by:
  5820 ;;		_exp
  5821 ;; This function uses a non-reentrant model
  5822 ;;
  5823                           
  5824                           	psect	text31
  5825  0025F4                     __ptext31:
  5826                           	opt stack 0
  5827  0025F4                     ___ftdiv:
  5828                           	opt stack 23
  5829                           
  5830                           ;incstack = 0
  5831  0025F4  C00B  F00F         	movff	___ftdiv@f1+2,??___ftdiv
  5832  0025F8  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  5833  0025FA  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  5834  0025FC  340A               	rlcf	___ftdiv@f1+1,w,c
  5835  0025FE  360F               	rlcf	??___ftdiv& (0+255),f,c
  5836  002600  E301               	bnc	u2971
  5837  002602  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  5838  002604                     u2971:
  5839  002604  500F               	movf	??___ftdiv,w,c
  5840  002606  6E16               	movwf	___ftdiv@exp,c
  5841  002608  5016               	movf	___ftdiv@exp,w,c
  5842  00260A  A4D8               	btfss	status,2,c
  5843  00260C  D007               	goto	l3797
  5844  00260E  0E00               	movlw	0
  5845  002610  6E09               	movwf	?___ftdiv,c
  5846  002612  0E00               	movlw	0
  5847  002614  6E0A               	movwf	?___ftdiv+1,c
  5848  002616  0E00               	movlw	0
  5849  002618  6E0B               	movwf	?___ftdiv+2,c
  5850  00261A  0012               	return	
  5851  00261C                     l3797:
  5852  00261C  C00E  F00F         	movff	___ftdiv@f2+2,??___ftdiv
  5853  002620  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  5854  002622  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  5855  002624  340D               	rlcf	___ftdiv@f2+1,w,c
  5856  002626  360F               	rlcf	??___ftdiv& (0+255),f,c
  5857  002628  E301               	bnc	u2991
  5858  00262A  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  5859  00262C                     u2991:
  5860  00262C  500F               	movf	??___ftdiv,w,c
  5861  00262E  6E17               	movwf	___ftdiv@sign,c
  5862  002630  5017               	movf	___ftdiv@sign,w,c
  5863  002632  A4D8               	btfss	status,2,c
  5864  002634  D007               	goto	l3803
  5865  002636  0E00               	movlw	0
  5866  002638  6E09               	movwf	?___ftdiv,c
  5867  00263A  0E00               	movlw	0
  5868  00263C  6E0A               	movwf	?___ftdiv+1,c
  5869  00263E  0E00               	movlw	0
  5870  002640  6E0B               	movwf	?___ftdiv+2,c
  5871  002642  0012               	return	
  5872  002644                     l3803:
  5873  002644  0E00               	movlw	0
  5874  002646  6E13               	movwf	___ftdiv@f3,c
  5875  002648  0E00               	movlw	0
  5876  00264A  6E14               	movwf	___ftdiv@f3+1,c
  5877  00264C  0E00               	movlw	0
  5878  00264E  6E15               	movwf	___ftdiv@f3+2,c
  5879  002650  5017               	movf	___ftdiv@sign,w,c
  5880  002652  0F89               	addlw	137
  5881  002654  5E16               	subwf	___ftdiv@exp,f,c
  5882  002656  C00B  F017         	movff	___ftdiv@f1+2,___ftdiv@sign
  5883  00265A  500E               	movf	___ftdiv@f2+2,w,c
  5884  00265C  1A17               	xorwf	___ftdiv@sign,f,c
  5885  00265E  0E80               	movlw	128
  5886  002660  1617               	andwf	___ftdiv@sign,f,c
  5887  002662  8E0A               	bsf	___ftdiv@f1+1,7,c
  5888  002664  0EFF               	movlw	255
  5889  002666  1609               	andwf	___ftdiv@f1,f,c
  5890  002668  0EFF               	movlw	255
  5891  00266A  160A               	andwf	___ftdiv@f1+1,f,c
  5892  00266C  0E00               	movlw	0
  5893  00266E  160B               	andwf	___ftdiv@f1+2,f,c
  5894  002670  8E0D               	bsf	___ftdiv@f2+1,7,c
  5895  002672  0EFF               	movlw	255
  5896  002674  160C               	andwf	___ftdiv@f2,f,c
  5897  002676  0EFF               	movlw	255
  5898  002678  160D               	andwf	___ftdiv@f2+1,f,c
  5899  00267A  0E00               	movlw	0
  5900  00267C  160E               	andwf	___ftdiv@f2+2,f,c
  5901  00267E  0E18               	movlw	24
  5902  002680  6E12               	movwf	___ftdiv@cntr,c
  5903  002682  D000               	goto	l3823
  5904  002684                     l3823:
  5905  002684  90D8               	bcf	status,0,c
  5906  002686  3613               	rlcf	___ftdiv@f3,f,c
  5907  002688  3614               	rlcf	___ftdiv@f3+1,f,c
  5908  00268A  3615               	rlcf	___ftdiv@f3+2,f,c
  5909  00268C  500C               	movf	___ftdiv@f2,w,c
  5910  00268E  5C09               	subwf	___ftdiv@f1,w,c
  5911  002690  500D               	movf	___ftdiv@f2+1,w,c
  5912  002692  580A               	subwfb	___ftdiv@f1+1,w,c
  5913  002694  500E               	movf	___ftdiv@f2+2,w,c
  5914  002696  580B               	subwfb	___ftdiv@f1+2,w,c
  5915  002698  A0D8               	btfss	status,0,c
  5916  00269A  D007               	goto	l1501
  5917  00269C  500C               	movf	___ftdiv@f2,w,c
  5918  00269E  5E09               	subwf	___ftdiv@f1,f,c
  5919  0026A0  500D               	movf	___ftdiv@f2+1,w,c
  5920  0026A2  5A0A               	subwfb	___ftdiv@f1+1,f,c
  5921  0026A4  500E               	movf	___ftdiv@f2+2,w,c
  5922  0026A6  5A0B               	subwfb	___ftdiv@f1+2,f,c
  5923  0026A8  8013               	bsf	___ftdiv@f3,0,c
  5924  0026AA                     l1501:
  5925  0026AA  90D8               	bcf	status,0,c
  5926  0026AC  3609               	rlcf	___ftdiv@f1,f,c
  5927  0026AE  360A               	rlcf	___ftdiv@f1+1,f,c
  5928  0026B0  360B               	rlcf	___ftdiv@f1+2,f,c
  5929  0026B2  2E12               	decfsz	___ftdiv@cntr,f,c
  5930  0026B4  D7E7               	goto	l3823
  5931  0026B6  D000               	goto	l3833
  5932  0026B8                     l3833:
  5933  0026B8  C013  F001         	movff	___ftdiv@f3,___ftpack@arg
  5934  0026BC  C014  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5935  0026C0  C015  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5936  0026C4  C016  F004         	movff	___ftdiv@exp,___ftpack@exp
  5937  0026C8  C017  F005         	movff	___ftdiv@sign,___ftpack@sign
  5938  0026CC  ECFA  F015         	call	___ftpack	;wreg free
  5939  0026D0  C001  F009         	movff	?___ftpack,?___ftdiv
  5940  0026D4  C002  F00A         	movff	?___ftpack+1,?___ftdiv+1
  5941  0026D8  C003  F00B         	movff	?___ftpack+2,?___ftdiv+2
  5942  0026DC  0012               	return	
  5943  0026DE  0012               	return		;funcret
  5944  0026E0                     __end_of___ftdiv:
  5945                           	opt stack 0
  5946                           tblptru	equ	0xFF8
  5947                           tblptrh	equ	0xFF7
  5948                           tblptrl	equ	0xFF6
  5949                           tablat	equ	0xFF5
  5950                           postinc0	equ	0xFEE
  5951                           wreg	equ	0xFE8
  5952                           postdec1	equ	0xFE5
  5953                           fsr1l	equ	0xFE1
  5954                           indf2	equ	0xFDF
  5955                           postinc2	equ	0xFDE
  5956                           postdec2	equ	0xFDD
  5957                           fsr2h	equ	0xFDA
  5958                           fsr2l	equ	0xFD9
  5959                           status	equ	0xFD8
  5960                           
  5961 ;; *************** function ___awtoft *****************
  5962 ;; Defined at:
  5963 ;;		line 32 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\awtoft.c"
  5964 ;; Parameters:    Size  Location     Type
  5965 ;;  c               2    8[COMRAM] int 
  5966 ;; Auto vars:     Size  Location     Type
  5967 ;;  sign            1   11[COMRAM] unsigned char 
  5968 ;; Return value:  Size  Location     Type
  5969 ;;                  3    8[COMRAM] float 
  5970 ;; Registers used:
  5971 ;;		wreg, status,2, status,0, cstack
  5972 ;; Tracked objects:
  5973 ;;		On entry : 0/0
  5974 ;;		On exit  : 0/0
  5975 ;;		Unchanged: 0/0
  5976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5977 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5978 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5980 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5981 ;;Total ram usage:        4 bytes
  5982 ;; Hardware stack levels used:    1
  5983 ;; Hardware stack levels required when called:    1
  5984 ;; This function calls:
  5985 ;;		___ftpack
  5986 ;; This function is called by:
  5987 ;;		_obtain_pass
  5988 ;;		_input_old_pass
  5989 ;;		_input_new_pass
  5990 ;;		_exp
  5991 ;;		_log
  5992 ;; This function uses a non-reentrant model
  5993 ;;
  5994                           
  5995                           	psect	text32
  5996  0037BC                     __ptext32:
  5997                           	opt stack 0
  5998  0037BC                     ___awtoft:
  5999                           	opt stack 23
  6000                           
  6001                           ;incstack = 0
  6002  0037BC  0E00               	movlw	0
  6003  0037BE  6E0C               	movwf	___awtoft@sign,c
  6004  0037C0  AE0A               	btfss	___awtoft@c+1,7,c
  6005  0037C2  D007               	goto	l3853
  6006  0037C4  6C09               	negf	___awtoft@c,c
  6007  0037C6  1E0A               	comf	___awtoft@c+1,f,c
  6008  0037C8  B0D8               	btfsc	status,0,c
  6009  0037CA  2A0A               	incf	___awtoft@c+1,f,c
  6010  0037CC  0E01               	movlw	1
  6011  0037CE  6E0C               	movwf	___awtoft@sign,c
  6012  0037D0  D000               	goto	l3853
  6013  0037D2                     l3853:
  6014  0037D2  C009  F001         	movff	___awtoft@c,___ftpack@arg
  6015  0037D6  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  6016  0037DA  6A03               	clrf	___ftpack@arg+2,c
  6017  0037DC  0E8E               	movlw	142
  6018  0037DE  6E04               	movwf	___ftpack@exp,c
  6019  0037E0  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  6020  0037E4  ECFA  F015         	call	___ftpack	;wreg free
  6021  0037E8  C001  F009         	movff	?___ftpack,?___awtoft
  6022  0037EC  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  6023  0037F0  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  6024  0037F4  0012               	return	
  6025  0037F6  0012               	return		;funcret
  6026  0037F8                     __end_of___awtoft:
  6027                           	opt stack 0
  6028                           tblptru	equ	0xFF8
  6029                           tblptrh	equ	0xFF7
  6030                           tblptrl	equ	0xFF6
  6031                           tablat	equ	0xFF5
  6032                           postinc0	equ	0xFEE
  6033                           wreg	equ	0xFE8
  6034                           postdec1	equ	0xFE5
  6035                           fsr1l	equ	0xFE1
  6036                           indf2	equ	0xFDF
  6037                           postinc2	equ	0xFDE
  6038                           postdec2	equ	0xFDD
  6039                           fsr2h	equ	0xFDA
  6040                           fsr2l	equ	0xFD9
  6041                           status	equ	0xFD8
  6042                           
  6043 ;; *************** function ___lltoft *****************
  6044 ;; Defined at:
  6045 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lltoft.c"
  6046 ;; Parameters:    Size  Location     Type
  6047 ;;  c               4    8[COMRAM] unsigned long 
  6048 ;; Auto vars:     Size  Location     Type
  6049 ;;  exp             1   16[COMRAM] unsigned char 
  6050 ;; Return value:  Size  Location     Type
  6051 ;;                  3    8[COMRAM] float 
  6052 ;; Registers used:
  6053 ;;		wreg, status,2, status,0, cstack
  6054 ;; Tracked objects:
  6055 ;;		On entry : 0/0
  6056 ;;		On exit  : 0/0
  6057 ;;		Unchanged: 0/0
  6058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6059 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6060 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6061 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6062 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6063 ;;Total ram usage:        9 bytes
  6064 ;; Hardware stack levels used:    1
  6065 ;; Hardware stack levels required when called:    1
  6066 ;; This function calls:
  6067 ;;		___ftpack
  6068 ;; This function is called by:
  6069 ;;		_pow
  6070 ;; This function uses a non-reentrant model
  6071 ;;
  6072                           
  6073                           	psect	text33
  6074  00340C                     __ptext33:
  6075                           	opt stack 0
  6076  00340C                     ___lltoft:
  6077                           	opt stack 24
  6078                           
  6079                           ;incstack = 0
  6080  00340C  0E8E               	movlw	142
  6081  00340E  6E11               	movwf	___lltoft@exp,c
  6082  003410  D007               	goto	l3967
  6083  003412                     l3965:
  6084  003412  90D8               	bcf	status,0,c
  6085  003414  320C               	rrcf	___lltoft@c+3,f,c
  6086  003416  320B               	rrcf	___lltoft@c+2,f,c
  6087  003418  320A               	rrcf	___lltoft@c+1,f,c
  6088  00341A  3209               	rrcf	___lltoft@c,f,c
  6089  00341C  2A11               	incf	___lltoft@exp,f,c
  6090  00341E  D000               	goto	l3967
  6091  003420                     l3967:
  6092  003420  0E00               	movlw	0
  6093  003422  1409               	andwf	___lltoft@c,w,c
  6094  003424  6E0D               	movwf	??___lltoft& (0+255),c
  6095  003426  0E00               	movlw	0
  6096  003428  140A               	andwf	___lltoft@c+1,w,c
  6097  00342A  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  6098  00342C  0E00               	movlw	0
  6099  00342E  140B               	andwf	___lltoft@c+2,w,c
  6100  003430  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  6101  003432  0EFF               	movlw	255
  6102  003434  140C               	andwf	___lltoft@c+3,w,c
  6103  003436  6E10               	movwf	(??___lltoft+3)& (0+255),c
  6104  003438  500D               	movf	??___lltoft,w,c
  6105  00343A  100E               	iorwf	??___lltoft+1,w,c
  6106  00343C  100F               	iorwf	??___lltoft+2,w,c
  6107  00343E  1010               	iorwf	??___lltoft+3,w,c
  6108  003440  A4D8               	btfss	status,2,c
  6109  003442  D7E7               	goto	l3965
  6110  003444  C009  F001         	movff	___lltoft@c,___ftpack@arg
  6111  003448  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  6112  00344C  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  6113  003450  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  6114  003454  0E00               	movlw	0
  6115  003456  6E05               	movwf	___ftpack@sign,c
  6116  003458  ECFA  F015         	call	___ftpack	;wreg free
  6117  00345C  C001  F009         	movff	?___ftpack,?___lltoft
  6118  003460  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  6119  003464  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  6120  003468  0012               	return	
  6121  00346A  0012               	return		;funcret
  6122  00346C                     __end_of___lltoft:
  6123                           	opt stack 0
  6124                           tblptru	equ	0xFF8
  6125                           tblptrh	equ	0xFF7
  6126                           tblptrl	equ	0xFF6
  6127                           tablat	equ	0xFF5
  6128                           postinc0	equ	0xFEE
  6129                           wreg	equ	0xFE8
  6130                           postdec1	equ	0xFE5
  6131                           fsr1l	equ	0xFE1
  6132                           indf2	equ	0xFDF
  6133                           postinc2	equ	0xFDE
  6134                           postdec2	equ	0xFDD
  6135                           fsr2h	equ	0xFDA
  6136                           fsr2l	equ	0xFD9
  6137                           status	equ	0xFD8
  6138                           
  6139 ;; *************** function _not_fill_pass *****************
  6140 ;; Defined at:
  6141 ;;		line 35 in file "lcd_vision.c"
  6142 ;; Parameters:    Size  Location     Type
  6143 ;;  digit           2    0[COMRAM] short 
  6144 ;; Auto vars:     Size  Location     Type
  6145 ;;		None
  6146 ;; Return value:  Size  Location     Type
  6147 ;;                  1    wreg      unsigned char 
  6148 ;; Registers used:
  6149 ;;		wreg, status,2, status,0
  6150 ;; Tracked objects:
  6151 ;;		On entry : 0/0
  6152 ;;		On exit  : 0/0
  6153 ;;		Unchanged: 0/0
  6154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6155 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6158 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6159 ;;Total ram usage:        2 bytes
  6160 ;; Hardware stack levels used:    1
  6161 ;; This function calls:
  6162 ;;		Nothing
  6163 ;; This function is called by:
  6164 ;;		_input_password
  6165 ;;		_input_old_pass
  6166 ;;		_input_new_pass
  6167 ;; This function uses a non-reentrant model
  6168 ;;
  6169                           
  6170                           	psect	text34
  6171  003A5E                     __ptext34:
  6172                           	opt stack 0
  6173  003A5E                     _not_fill_pass:
  6174                           	opt stack 27
  6175                           
  6176                           ;lcd_vision.c: 36: return digit !=16;
  6177                           
  6178                           ;incstack = 0
  6179  003A5E  0E10               	movlw	16
  6180  003A60  1801               	xorwf	not_fill_pass@digit,w,c
  6181  003A62  1002               	iorwf	not_fill_pass@digit+1,w,c
  6182  003A64  B4D8               	btfsc	status,2,c
  6183  003A66  D002               	goto	u4260
  6184  003A68  0E01               	movlw	1
  6185  003A6A  0012               	return	
  6186  003A6C                     u4260:
  6187  003A6C  0E00               	movlw	0
  6188  003A6E  0012               	return	
  6189  003A70  0012               	return		;funcret
  6190  003A72                     __end_of_not_fill_pass:
  6191                           	opt stack 0
  6192                           tblptru	equ	0xFF8
  6193                           tblptrh	equ	0xFF7
  6194                           tblptrl	equ	0xFF6
  6195                           tablat	equ	0xFF5
  6196                           postinc0	equ	0xFEE
  6197                           wreg	equ	0xFE8
  6198                           postdec1	equ	0xFE5
  6199                           fsr1l	equ	0xFE1
  6200                           indf2	equ	0xFDF
  6201                           postinc2	equ	0xFDE
  6202                           postdec2	equ	0xFDD
  6203                           fsr2h	equ	0xFDA
  6204                           fsr2l	equ	0xFD9
  6205                           status	equ	0xFD8
  6206                           
  6207 ;; *************** function _clear_keyboard *****************
  6208 ;; Defined at:
  6209 ;;		line 4 in file "keyboard.c"
  6210 ;; Parameters:    Size  Location     Type
  6211 ;;		None
  6212 ;; Auto vars:     Size  Location     Type
  6213 ;;		None
  6214 ;; Return value:  Size  Location     Type
  6215 ;;		None               void
  6216 ;; Registers used:
  6217 ;;		wreg, status,2
  6218 ;; Tracked objects:
  6219 ;;		On entry : 0/0
  6220 ;;		On exit  : 0/0
  6221 ;;		Unchanged: 0/0
  6222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6226 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6227 ;;Total ram usage:        0 bytes
  6228 ;; Hardware stack levels used:    1
  6229 ;; This function calls:
  6230 ;;		Nothing
  6231 ;; This function is called by:
  6232 ;;		_next_code
  6233 ;;		_twinkle
  6234 ;;		_input_old_pass
  6235 ;;		_input_new_pass
  6236 ;; This function uses a non-reentrant model
  6237 ;;
  6238                           
  6239                           	psect	text35
  6240  003AE8                     __ptext35:
  6241                           	opt stack 0
  6242  003AE8                     _clear_keyboard:
  6243                           	opt stack 25
  6244                           
  6245                           ;keyboard.c: 5: key = 18;
  6246                           
  6247                           ;incstack = 0
  6248  003AE8  0E12               	movlw	18
  6249  003AEA  0100               	movlb	0	; () banked
  6250  003AEC  6FDD               	movwf	_key& (0+255),b
  6251                           
  6252                           ; BSR set to: 0
  6253  003AEE  0012               	return		;funcret
  6254  003AF0                     __end_of_clear_keyboard:
  6255                           	opt stack 0
  6256                           tblptru	equ	0xFF8
  6257                           tblptrh	equ	0xFF7
  6258                           tblptrl	equ	0xFF6
  6259                           tablat	equ	0xFF5
  6260                           postinc0	equ	0xFEE
  6261                           wreg	equ	0xFE8
  6262                           postdec1	equ	0xFE5
  6263                           fsr1l	equ	0xFE1
  6264                           indf2	equ	0xFDF
  6265                           postinc2	equ	0xFDE
  6266                           postdec2	equ	0xFDD
  6267                           fsr2h	equ	0xFDA
  6268                           fsr2l	equ	0xFD9
  6269                           status	equ	0xFD8
  6270                           
  6271 ;; *************** function __delay_s *****************
  6272 ;; Defined at:
  6273 ;;		line 22 in file "lcd_vision.c"
  6274 ;; Parameters:    Size  Location     Type
  6275 ;;  millis          2    8[COMRAM] int 
  6276 ;; Auto vars:     Size  Location     Type
  6277 ;;  index           2   13[COMRAM] short 
  6278 ;;  it              2   11[COMRAM] short 
  6279 ;; Return value:  Size  Location     Type
  6280 ;;		None               void
  6281 ;; Registers used:
  6282 ;;		wreg, status,2, status,0, cstack
  6283 ;; Tracked objects:
  6284 ;;		On entry : 0/0
  6285 ;;		On exit  : 0/0
  6286 ;;		Unchanged: 0/0
  6287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6288 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6289 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6290 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6291 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6292 ;;Total ram usage:        7 bytes
  6293 ;; Hardware stack levels used:    1
  6294 ;; Hardware stack levels required when called:    1
  6295 ;; This function calls:
  6296 ;;		___awdiv
  6297 ;; This function is called by:
  6298 ;;		_twinkle
  6299 ;;		_input_old_pass
  6300 ;;		_show_success
  6301 ;;		_show_error
  6302 ;;		_input_new_pass
  6303 ;; This function uses a non-reentrant model
  6304 ;;
  6305                           
  6306                           	psect	text36
  6307  003526                     __ptext36:
  6308                           	opt stack 0
  6309  003526                     __delay_s:
  6310                           	opt stack 27
  6311                           
  6312                           ;lcd_vision.c: 23: short it = millis/100;
  6313                           
  6314                           ; BSR set to: 0
  6315                           ;incstack = 0
  6316  003526  C009  F001         	movff	__delay_s@millis,___awdiv@dividend
  6317  00352A  C00A  F002         	movff	__delay_s@millis+1,___awdiv@dividend+1
  6318  00352E  0E00               	movlw	0
  6319  003530  6E04               	movwf	___awdiv@divisor+1,c
  6320  003532  0E64               	movlw	100
  6321  003534  6E03               	movwf	___awdiv@divisor,c
  6322  003536  ECF4  F016         	call	___awdiv	;wreg free
  6323  00353A  C001  F00C         	movff	?___awdiv,__delay_s@it
  6324  00353E  C002  F00D         	movff	?___awdiv+1,__delay_s@it+1
  6325                           
  6326                           ;lcd_vision.c: 24: short index = 1;
  6327  003542  0E00               	movlw	0
  6328  003544  6E0F               	movwf	__delay_s@index+1,c
  6329  003546  0E01               	movlw	1
  6330  003548  6E0E               	movwf	__delay_s@index,c
  6331                           
  6332                           ;lcd_vision.c: 26: for(index = 1; index <= it; index++){
  6333  00354A  0E00               	movlw	0
  6334  00354C  6E0F               	movwf	__delay_s@index+1,c
  6335  00354E  0E01               	movlw	1
  6336  003550  6E0E               	movwf	__delay_s@index,c
  6337  003552  D00A               	goto	l620
  6338  003554                     l4565:
  6339                           
  6340                           ;lcd_vision.c: 27: _delay((unsigned long)((98)*(8000000/4000.0)));
  6341  003554  0EFF               	movlw	255
  6342  003556  6E0B               	movwf	??__delay_s& (0+255),c
  6343  003558  0E8A               	movlw	138
  6344  00355A                     u4747:
  6345  00355A  2EE8               	decfsz	wreg,f,c
  6346  00355C  D7FE               	goto	u4747
  6347  00355E  2E0B               	decfsz	??__delay_s& (0+255),f,c
  6348  003560  D7FC               	goto	u4747
  6349  003562  D000               	nop2	
  6350  003564  4A0E               	infsnz	__delay_s@index,f,c
  6351  003566  2A0F               	incf	__delay_s@index+1,f,c
  6352  003568                     l620:
  6353  003568  500E               	movf	__delay_s@index,w,c
  6354  00356A  5C0C               	subwf	__delay_s@it,w,c
  6355  00356C  500D               	movf	__delay_s@it+1,w,c
  6356  00356E  0A80               	xorlw	128
  6357  003570  6E0B               	movwf	??__delay_s& (0+255),c
  6358  003572  500F               	movf	__delay_s@index+1,w,c
  6359  003574  0A80               	xorlw	128
  6360  003576  580B               	subwfb	??__delay_s& (0+255),w,c
  6361  003578  B0D8               	btfsc	status,0,c
  6362  00357A  D7EC               	goto	l4565
  6363  00357C  0012               	return		;funcret
  6364  00357E                     __end_of__delay_s:
  6365                           	opt stack 0
  6366                           tblptru	equ	0xFF8
  6367                           tblptrh	equ	0xFF7
  6368                           tblptrl	equ	0xFF6
  6369                           tablat	equ	0xFF5
  6370                           postinc0	equ	0xFEE
  6371                           wreg	equ	0xFE8
  6372                           postdec1	equ	0xFE5
  6373                           fsr1l	equ	0xFE1
  6374                           indf2	equ	0xFDF
  6375                           postinc2	equ	0xFDE
  6376                           postdec2	equ	0xFDD
  6377                           fsr2h	equ	0xFDA
  6378                           fsr2l	equ	0xFD9
  6379                           status	equ	0xFD8
  6380                           
  6381 ;; *************** function ___lbtoft *****************
  6382 ;; Defined at:
  6383 ;;		line 27 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lbtoft.c"
  6384 ;; Parameters:    Size  Location     Type
  6385 ;;  c               1    wreg     unsigned char 
  6386 ;; Auto vars:     Size  Location     Type
  6387 ;;  c               1   11[COMRAM] unsigned char 
  6388 ;; Return value:  Size  Location     Type
  6389 ;;                  3    8[COMRAM] float 
  6390 ;; Registers used:
  6391 ;;		wreg, status,2, status,0, cstack
  6392 ;; Tracked objects:
  6393 ;;		On entry : 0/0
  6394 ;;		On exit  : 0/0
  6395 ;;		Unchanged: 0/0
  6396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6397 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6398 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6400 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6401 ;;Total ram usage:        4 bytes
  6402 ;; Hardware stack levels used:    1
  6403 ;; Hardware stack levels required when called:    1
  6404 ;; This function calls:
  6405 ;;		___ftpack
  6406 ;; This function is called by:
  6407 ;;		_obtain_pass
  6408 ;;		_input_old_pass
  6409 ;;		_input_new_pass
  6410 ;; This function uses a non-reentrant model
  6411 ;;
  6412                           
  6413                           	psect	text37
  6414  003978                     __ptext37:
  6415                           	opt stack 0
  6416  003978                     ___lbtoft:
  6417                           	opt stack 25
  6418                           
  6419                           ;incstack = 0
  6420                           ;___lbtoft@c stored from wreg
  6421  003978  6E0C               	movwf	___lbtoft@c,c
  6422  00397A  500C               	movf	___lbtoft@c,w,c
  6423  00397C  6E01               	movwf	___ftpack@arg,c
  6424  00397E  6A02               	clrf	___ftpack@arg+1,c
  6425  003980  6A03               	clrf	___ftpack@arg+2,c
  6426  003982  0E8E               	movlw	142
  6427  003984  6E04               	movwf	___ftpack@exp,c
  6428  003986  0E00               	movlw	0
  6429  003988  6E05               	movwf	___ftpack@sign,c
  6430  00398A  ECFA  F015         	call	___ftpack	;wreg free
  6431  00398E  C001  F009         	movff	?___ftpack,?___lbtoft
  6432  003992  C002  F00A         	movff	?___ftpack+1,?___lbtoft+1
  6433  003996  C003  F00B         	movff	?___ftpack+2,?___lbtoft+2
  6434  00399A  0012               	return	
  6435  00399C  0012               	return		;funcret
  6436  00399E                     __end_of___lbtoft:
  6437                           	opt stack 0
  6438                           tblptru	equ	0xFF8
  6439                           tblptrh	equ	0xFF7
  6440                           tblptrl	equ	0xFF6
  6441                           tablat	equ	0xFF5
  6442                           postinc0	equ	0xFEE
  6443                           wreg	equ	0xFE8
  6444                           postdec1	equ	0xFE5
  6445                           fsr1l	equ	0xFE1
  6446                           indf2	equ	0xFDF
  6447                           postinc2	equ	0xFDE
  6448                           postdec2	equ	0xFDD
  6449                           fsr2h	equ	0xFDA
  6450                           fsr2l	equ	0xFD9
  6451                           status	equ	0xFD8
  6452                           
  6453 ;; *************** function ___ftpack *****************
  6454 ;; Defined at:
  6455 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\float.c"
  6456 ;; Parameters:    Size  Location     Type
  6457 ;;  arg             3    0[COMRAM] unsigned um
  6458 ;;  exp             1    3[COMRAM] unsigned char 
  6459 ;;  sign            1    4[COMRAM] unsigned char 
  6460 ;; Auto vars:     Size  Location     Type
  6461 ;;		None
  6462 ;; Return value:  Size  Location     Type
  6463 ;;                  3    0[COMRAM] float 
  6464 ;; Registers used:
  6465 ;;		wreg, status,2, status,0
  6466 ;; Tracked objects:
  6467 ;;		On entry : 0/0
  6468 ;;		On exit  : 0/0
  6469 ;;		Unchanged: 0/0
  6470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6471 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6473 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6474 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6475 ;;Total ram usage:        8 bytes
  6476 ;; Hardware stack levels used:    1
  6477 ;; This function calls:
  6478 ;;		Nothing
  6479 ;; This function is called by:
  6480 ;;		___altoft
  6481 ;;		___awtoft
  6482 ;;		___ftadd
  6483 ;;		___ftdiv
  6484 ;;		___ftmul
  6485 ;;		___lbtoft
  6486 ;;		___lltoft
  6487 ;; This function uses a non-reentrant model
  6488 ;;
  6489                           
  6490                           	psect	text38
  6491  002BF4                     __ptext38:
  6492                           	opt stack 0
  6493  002BF4                     ___ftpack:
  6494                           	opt stack 22
  6495                           
  6496                           ;incstack = 0
  6497  002BF4  5004               	movf	___ftpack@exp,w,c
  6498  002BF6  B4D8               	btfsc	status,2,c
  6499  002BF8  D005               	goto	l3507
  6500  002BFA  5001               	movf	___ftpack@arg,w,c
  6501  002BFC  1002               	iorwf	___ftpack@arg+1,w,c
  6502  002BFE  1003               	iorwf	___ftpack@arg+2,w,c
  6503  002C00  A4D8               	btfss	status,2,c
  6504  002C02  D00E               	goto	l3513
  6505  002C04                     l3507:
  6506  002C04  0E00               	movlw	0
  6507  002C06  6E01               	movwf	?___ftpack,c
  6508  002C08  0E00               	movlw	0
  6509  002C0A  6E02               	movwf	?___ftpack+1,c
  6510  002C0C  0E00               	movlw	0
  6511  002C0E  6E03               	movwf	?___ftpack+2,c
  6512  002C10  0012               	return	
  6513  002C12  D006               	goto	l3513
  6514  002C14                     l3511:
  6515  002C14  2A04               	incf	___ftpack@exp,f,c
  6516  002C16  90D8               	bcf	status,0,c
  6517  002C18  3203               	rrcf	___ftpack@arg+2,f,c
  6518  002C1A  3202               	rrcf	___ftpack@arg+1,f,c
  6519  002C1C  3201               	rrcf	___ftpack@arg,f,c
  6520  002C1E  D000               	goto	l3513
  6521  002C20                     l3513:
  6522  002C20  0E00               	movlw	0
  6523  002C22  1401               	andwf	___ftpack@arg,w,c
  6524  002C24  6E06               	movwf	??___ftpack& (0+255),c
  6525  002C26  0E00               	movlw	0
  6526  002C28  1402               	andwf	___ftpack@arg+1,w,c
  6527  002C2A  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6528  002C2C  0EFE               	movlw	254
  6529  002C2E  1403               	andwf	___ftpack@arg+2,w,c
  6530  002C30  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6531  002C32  5006               	movf	??___ftpack,w,c
  6532  002C34  1007               	iorwf	??___ftpack+1,w,c
  6533  002C36  1008               	iorwf	??___ftpack+2,w,c
  6534  002C38  B4D8               	btfsc	status,2,c
  6535  002C3A  D00E               	goto	l3519
  6536  002C3C  D7EB               	goto	l3511
  6537  002C3E  D00C               	goto	l3519
  6538  002C40                     l3515:
  6539  002C40  2A04               	incf	___ftpack@exp,f,c
  6540  002C42  0E01               	movlw	1
  6541  002C44  2601               	addwf	___ftpack@arg,f,c
  6542  002C46  0E00               	movlw	0
  6543  002C48  2202               	addwfc	___ftpack@arg+1,f,c
  6544  002C4A  0E00               	movlw	0
  6545  002C4C  2203               	addwfc	___ftpack@arg+2,f,c
  6546  002C4E  90D8               	bcf	status,0,c
  6547  002C50  3203               	rrcf	___ftpack@arg+2,f,c
  6548  002C52  3202               	rrcf	___ftpack@arg+1,f,c
  6549  002C54  3201               	rrcf	___ftpack@arg,f,c
  6550  002C56  D000               	goto	l3519
  6551  002C58                     l3519:
  6552  002C58  0E00               	movlw	0
  6553  002C5A  1401               	andwf	___ftpack@arg,w,c
  6554  002C5C  6E06               	movwf	??___ftpack& (0+255),c
  6555  002C5E  0E00               	movlw	0
  6556  002C60  1402               	andwf	___ftpack@arg+1,w,c
  6557  002C62  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6558  002C64  0EFF               	movlw	255
  6559  002C66  1403               	andwf	___ftpack@arg+2,w,c
  6560  002C68  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6561  002C6A  5006               	movf	??___ftpack,w,c
  6562  002C6C  1007               	iorwf	??___ftpack+1,w,c
  6563  002C6E  1008               	iorwf	??___ftpack+2,w,c
  6564  002C70  B4D8               	btfsc	status,2,c
  6565  002C72  D008               	goto	l3523
  6566  002C74  D7E5               	goto	l3515
  6567  002C76  D006               	goto	l3523
  6568  002C78                     l3521:
  6569  002C78  0604               	decf	___ftpack@exp,f,c
  6570  002C7A  90D8               	bcf	status,0,c
  6571  002C7C  3601               	rlcf	___ftpack@arg,f,c
  6572  002C7E  3602               	rlcf	___ftpack@arg+1,f,c
  6573  002C80  3603               	rlcf	___ftpack@arg+2,f,c
  6574  002C82  D000               	goto	l3523
  6575  002C84                     l3523:
  6576  002C84  BE02               	btfsc	___ftpack@arg+1,7,c
  6577  002C86  D004               	goto	l1437
  6578  002C88  0E02               	movlw	2
  6579  002C8A  6004               	cpfslt	___ftpack@exp,c
  6580  002C8C  D7F5               	goto	l3521
  6581  002C8E  D000               	goto	l1437
  6582  002C90                     l1437:
  6583  002C90  B004               	btfsc	___ftpack@exp,0,c
  6584  002C92  D002               	goto	l3529
  6585  002C94  9E02               	bcf	___ftpack@arg+1,7,c
  6586  002C96  D000               	goto	l3529
  6587  002C98                     l3529:
  6588  002C98  90D8               	bcf	status,0,c
  6589  002C9A  3204               	rrcf	___ftpack@exp,f,c
  6590  002C9C  5004               	movf	___ftpack@exp,w,c
  6591  002C9E  1203               	iorwf	___ftpack@arg+2,f,c
  6592  002CA0  5005               	movf	___ftpack@sign,w,c
  6593  002CA2  B4D8               	btfsc	status,2,c
  6594  002CA4  D002               	goto	l3535
  6595  002CA6  8E03               	bsf	___ftpack@arg+2,7,c
  6596  002CA8  D000               	goto	l3535
  6597  002CAA                     l3535:
  6598  002CAA  C001  F001         	movff	___ftpack@arg,?___ftpack
  6599  002CAE  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6600  002CB2  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6601  002CB6  0012               	return	
  6602  002CB8  0012               	return		;funcret
  6603  002CBA                     __end_of___ftpack:
  6604                           	opt stack 0
  6605                           tblptru	equ	0xFF8
  6606                           tblptrh	equ	0xFF7
  6607                           tblptrl	equ	0xFF6
  6608                           tablat	equ	0xFF5
  6609                           postinc0	equ	0xFEE
  6610                           wreg	equ	0xFE8
  6611                           postdec1	equ	0xFE5
  6612                           fsr1l	equ	0xFE1
  6613                           indf2	equ	0xFDF
  6614                           postinc2	equ	0xFDE
  6615                           postdec2	equ	0xFDD
  6616                           fsr2h	equ	0xFDA
  6617                           fsr2l	equ	0xFD9
  6618                           status	equ	0xFD8
  6619                           
  6620 ;; *************** function _changePass *****************
  6621 ;; Defined at:
  6622 ;;		line 7 in file "config.c"
  6623 ;; Parameters:    Size  Location     Type
  6624 ;;  pass            2    0[COMRAM] int 
  6625 ;; Auto vars:     Size  Location     Type
  6626 ;;		None
  6627 ;; Return value:  Size  Location     Type
  6628 ;;		None               void
  6629 ;; Registers used:
  6630 ;;		None
  6631 ;; Tracked objects:
  6632 ;;		On entry : 0/0
  6633 ;;		On exit  : 0/0
  6634 ;;		Unchanged: 0/0
  6635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6636 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6639 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6640 ;;Total ram usage:        2 bytes
  6641 ;; Hardware stack levels used:    1
  6642 ;; This function calls:
  6643 ;;		Nothing
  6644 ;; This function is called by:
  6645 ;;		_ver_opcion_cambio
  6646 ;; This function uses a non-reentrant model
  6647 ;;
  6648                           
  6649                           	psect	text39
  6650  003ADE                     __ptext39:
  6651                           	opt stack 0
  6652  003ADE                     _changePass:
  6653                           	opt stack 28
  6654                           
  6655                           ;config.c: 8: password = pass;
  6656                           
  6657                           ;incstack = 0
  6658  003ADE  C001  F0D9         	movff	changePass@pass,_password
  6659  003AE2  C002  F0DA         	movff	changePass@pass+1,_password+1
  6660  003AE6  0012               	return		;funcret
  6661  003AE8                     __end_of_changePass:
  6662                           	opt stack 0
  6663                           tblptru	equ	0xFF8
  6664                           tblptrh	equ	0xFF7
  6665                           tblptrl	equ	0xFF6
  6666                           tablat	equ	0xFF5
  6667                           postinc0	equ	0xFEE
  6668                           wreg	equ	0xFE8
  6669                           postdec1	equ	0xFE5
  6670                           fsr1l	equ	0xFE1
  6671                           indf2	equ	0xFDF
  6672                           postinc2	equ	0xFDE
  6673                           postdec2	equ	0xFDD
  6674                           fsr2h	equ	0xFDA
  6675                           fsr2l	equ	0xFD9
  6676                           status	equ	0xFD8
  6677                           
  6678 ;; *************** function _ver_info *****************
  6679 ;; Defined at:
  6680 ;;		line 95 in file "menu.c"
  6681 ;; Parameters:    Size  Location     Type
  6682 ;;		None
  6683 ;; Auto vars:     Size  Location     Type
  6684 ;;  input           1   36[COMRAM] unsigned char 
  6685 ;; Return value:  Size  Location     Type
  6686 ;;		None               void
  6687 ;; Registers used:
  6688 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6689 ;; Tracked objects:
  6690 ;;		On entry : 0/0
  6691 ;;		On exit  : 0/0
  6692 ;;		Unchanged: 0/0
  6693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6695 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6697 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6698 ;;Total ram usage:        1 bytes
  6699 ;; Hardware stack levels used:    1
  6700 ;; Hardware stack levels required when called:    6
  6701 ;; This function calls:
  6702 ;;		_clear
  6703 ;;		_lcd_gotoxy
  6704 ;;		_lcd_putrs
  6705 ;;		_read_keyboard
  6706 ;;		_sprintf
  6707 ;; This function is called by:
  6708 ;;		_select_menu
  6709 ;; This function uses a non-reentrant model
  6710 ;;
  6711                           
  6712                           	psect	text40
  6713  0028A0                     __ptext40:
  6714                           	opt stack 0
  6715  0028A0                     _ver_info:
  6716                           	opt stack 23
  6717                           
  6718                           ;menu.c: 96: clear();
  6719                           
  6720                           ;incstack = 0
  6721  0028A0  EC24  F01D         	call	_clear	;wreg free
  6722                           
  6723                           ;menu.c: 97: char input = 18;
  6724  0028A4  0E12               	movlw	18
  6725  0028A6  D061               	goto	L5
  6726  0028A8                     l5003:
  6727                           
  6728                           ;menu.c: 99: lcd_gotoxy(1,1);
  6729  0028A8  0E01               	movlw	1
  6730  0028AA  6E05               	movwf	lcd_gotoxy@y,c
  6731  0028AC  0E01               	movlw	1
  6732  0028AE  ECF3  F01C         	call	_lcd_gotoxy
  6733                           
  6734                           ;menu.c: 100: lcd_putrs("Sensor: ");
  6735  0028B2  0EBF               	movlw	low STR_25
  6736  0028B4  6E09               	movwf	lcd_putrs@ptr,c
  6737  0028B6  0E0F               	movlw	high STR_25
  6738  0028B8  6E0A               	movwf	lcd_putrs@ptr+1,c
  6739  0028BA  ECBF  F01A         	call	_lcd_putrs	;wreg free
  6740                           
  6741                           ;menu.c: 101: sprintf(buffer2,"%02u",sensorDisparado);
  6742  0028BE  0E97               	movlw	low _buffer2
  6743  0028C0  6E0D               	movwf	sprintf@sp,c
  6744  0028C2  0E00               	movlw	high _buffer2
  6745  0028C4  6E0E               	movwf	sprintf@sp+1,c
  6746  0028C6  0E71               	movlw	low (STR_11+10)
  6747  0028C8  6E0F               	movwf	sprintf@f,c
  6748  0028CA  0E0F               	movlw	high (STR_11+10)
  6749  0028CC  6E10               	movwf	sprintf@f+1,c
  6750  0028CE  C096  F011         	movff	_sensorDisparado,?_sprintf+4
  6751  0028D2  6A12               	clrf	?_sprintf+5,c
  6752  0028D4  EC4E  F009         	call	_sprintf	;wreg free
  6753                           
  6754                           ;menu.c: 102: lcd_putrs(buffer2);
  6755  0028D8  0E97               	movlw	low _buffer2
  6756  0028DA  6E09               	movwf	lcd_putrs@ptr,c
  6757  0028DC  0E00               	movlw	high _buffer2
  6758  0028DE  6E0A               	movwf	lcd_putrs@ptr+1,c
  6759  0028E0  ECBF  F01A         	call	_lcd_putrs	;wreg free
  6760                           
  6761                           ;menu.c: 103: lcd_gotoxy(1,2);
  6762  0028E4  0E02               	movlw	2
  6763  0028E6  6E05               	movwf	lcd_gotoxy@y,c
  6764  0028E8  0E01               	movlw	1
  6765  0028EA  ECF3  F01C         	call	_lcd_gotoxy
  6766                           
  6767                           ;menu.c: 104: lcd_putrs("Date:");
  6768  0028EE  0ED0               	movlw	low STR_27
  6769  0028F0  6E09               	movwf	lcd_putrs@ptr,c
  6770  0028F2  0E0F               	movlw	high STR_27
  6771  0028F4  6E0A               	movwf	lcd_putrs@ptr+1,c
  6772  0028F6  ECBF  F01A         	call	_lcd_putrs	;wreg free
  6773                           
  6774                           ;menu.c: 105: sprintf(buffer2,"%02u/%02u",diaDisparo,mesDisparo);
  6775  0028FA  0E97               	movlw	low _buffer2
  6776  0028FC  6E0D               	movwf	sprintf@sp,c
  6777  0028FE  0E00               	movlw	high _buffer2
  6778  002900  6E0E               	movwf	sprintf@sp+1,c
  6779  002902  0E6C               	movlw	low (STR_11+5)
  6780  002904  6E0F               	movwf	sprintf@f,c
  6781  002906  0E0F               	movlw	high (STR_11+5)
  6782  002908  6E10               	movwf	sprintf@f+1,c
  6783  00290A  C082  F011         	movff	_diaDisparo,?_sprintf+4
  6784  00290E  C083  F012         	movff	_diaDisparo+1,?_sprintf+5
  6785  002912  C08E  F013         	movff	_mesDisparo,?_sprintf+6
  6786  002916  C08F  F014         	movff	_mesDisparo+1,?_sprintf+7
  6787  00291A  EC4E  F009         	call	_sprintf	;wreg free
  6788                           
  6789                           ;menu.c: 106: lcd_putrs(buffer2);
  6790  00291E  0E97               	movlw	low _buffer2
  6791  002920  6E09               	movwf	lcd_putrs@ptr,c
  6792  002922  0E00               	movlw	high _buffer2
  6793  002924  6E0A               	movwf	lcd_putrs@ptr+1,c
  6794  002926  ECBF  F01A         	call	_lcd_putrs	;wreg free
  6795                           
  6796                           ;menu.c: 107: lcd_putrs(" ");
  6797  00292A  0EA8               	movlw	low (STR_15+9)
  6798  00292C  6E09               	movwf	lcd_putrs@ptr,c
  6799  00292E  0E0F               	movlw	high (STR_15+9)
  6800  002930  6E0A               	movwf	lcd_putrs@ptr+1,c
  6801  002932  ECBF  F01A         	call	_lcd_putrs	;wreg free
  6802                           
  6803                           ;menu.c: 108: sprintf(buffer2,"%02u:%02u",horaDisparo,minDisparo);
  6804  002936  0E97               	movlw	low _buffer2
  6805  002938  6E0D               	movwf	sprintf@sp,c
  6806  00293A  0E00               	movlw	high _buffer2
  6807  00293C  6E0E               	movwf	sprintf@sp+1,c
  6808  00293E  0EB5               	movlw	low STR_12
  6809  002940  6E0F               	movwf	sprintf@f,c
  6810  002942  0E0F               	movlw	high STR_12
  6811  002944  6E10               	movwf	sprintf@f+1,c
  6812  002946  C086  F011         	movff	_horaDisparo,?_sprintf+4
  6813  00294A  C087  F012         	movff	_horaDisparo+1,?_sprintf+5
  6814  00294E  C090  F013         	movff	_minDisparo,?_sprintf+6
  6815  002952  C091  F014         	movff	_minDisparo+1,?_sprintf+7
  6816  002956  EC4E  F009         	call	_sprintf	;wreg free
  6817                           
  6818                           ;menu.c: 109: lcd_putrs(buffer2);
  6819  00295A  0E97               	movlw	low _buffer2
  6820  00295C  6E09               	movwf	lcd_putrs@ptr,c
  6821  00295E  0E00               	movlw	high _buffer2
  6822  002960  6E0A               	movwf	lcd_putrs@ptr+1,c
  6823  002962  ECBF  F01A         	call	_lcd_putrs	;wreg free
  6824                           
  6825                           ;menu.c: 110: input = read_keyboard();
  6826  002966  ECF2  F007         	call	_read_keyboard	;wreg free
  6827  00296A                     L5:
  6828  00296A  6E25               	movwf	ver_info@input,c
  6829  00296C  D000               	goto	l5023
  6830  00296E                     l5023:
  6831  00296E  0E10               	movlw	16
  6832  002970  1825               	xorwf	ver_info@input,w,c
  6833  002972  A4D8               	btfss	status,2,c
  6834  002974  D799               	goto	l5003
  6835                           
  6836                           ;menu.c: 111: }
  6837                           ;menu.c: 112: menu = 18;
  6838  002976  0E12               	movlw	18
  6839  002978  0100               	movlb	0	; () banked
  6840  00297A  6FDE               	movwf	_menu& (0+255),b
  6841                           
  6842                           ; BSR set to: 0
  6843  00297C  0012               	return		;funcret
  6844  00297E                     __end_of_ver_info:
  6845                           	opt stack 0
  6846                           tblptru	equ	0xFF8
  6847                           tblptrh	equ	0xFF7
  6848                           tblptrl	equ	0xFF6
  6849                           tablat	equ	0xFF5
  6850                           postinc0	equ	0xFEE
  6851                           wreg	equ	0xFE8
  6852                           postdec1	equ	0xFE5
  6853                           fsr1l	equ	0xFE1
  6854                           indf2	equ	0xFDF
  6855                           postinc2	equ	0xFDE
  6856                           postdec2	equ	0xFDD
  6857                           fsr2h	equ	0xFDA
  6858                           fsr2l	equ	0xFD9
  6859                           status	equ	0xFD8
  6860                           
  6861 ;; *************** function _clear *****************
  6862 ;; Defined at:
  6863 ;;		line 7 in file "lcd_vision.c"
  6864 ;; Parameters:    Size  Location     Type
  6865 ;;		None
  6866 ;; Auto vars:     Size  Location     Type
  6867 ;;		None
  6868 ;; Return value:  Size  Location     Type
  6869 ;;		None               void
  6870 ;; Registers used:
  6871 ;;		wreg, status,2, status,0, cstack
  6872 ;; Tracked objects:
  6873 ;;		On entry : 0/0
  6874 ;;		On exit  : 0/0
  6875 ;;		Unchanged: 0/0
  6876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6879 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6880 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6881 ;;Total ram usage:        1 bytes
  6882 ;; Hardware stack levels used:    1
  6883 ;; Hardware stack levels required when called:    3
  6884 ;; This function calls:
  6885 ;;		_lcd_comand
  6886 ;; This function is called by:
  6887 ;;		_set_vision
  6888 ;;		_show_success
  6889 ;;		_show_error
  6890 ;;		_ver_opcion_cambio
  6891 ;;		_ver_info
  6892 ;; This function uses a non-reentrant model
  6893 ;;
  6894                           
  6895                           	psect	text41
  6896  003A48                     __ptext41:
  6897                           	opt stack 0
  6898  003A48                     _clear:
  6899                           	opt stack 26
  6900                           
  6901                           ;lcd_vision.c: 8: lcd_comand(0b00000001);
  6902                           
  6903                           ; BSR set to: 0
  6904                           ;incstack = 0
  6905  003A48  0E01               	movlw	1
  6906  003A4A  EC68  F01D         	call	_lcd_comand
  6907                           
  6908                           ;lcd_vision.c: 9: _delay((unsigned long)((5)*(8000000/4000.0)));
  6909  003A4E  0E0D               	movlw	13
  6910  003A50  6E06               	movwf	??_clear& (0+255),c
  6911  003A52  0EFC               	movlw	252
  6912  003A54                     u4757:
  6913  003A54  2EE8               	decfsz	wreg,f,c
  6914  003A56  D7FE               	goto	u4757
  6915  003A58  2E06               	decfsz	??_clear& (0+255),f,c
  6916  003A5A  D7FC               	goto	u4757
  6917  003A5C  0012               	return		;funcret
  6918  003A5E                     __end_of_clear:
  6919                           	opt stack 0
  6920                           tblptru	equ	0xFF8
  6921                           tblptrh	equ	0xFF7
  6922                           tblptrl	equ	0xFF6
  6923                           tablat	equ	0xFF5
  6924                           postinc0	equ	0xFEE
  6925                           wreg	equ	0xFE8
  6926                           postdec1	equ	0xFE5
  6927                           fsr1l	equ	0xFE1
  6928                           indf2	equ	0xFDF
  6929                           postinc2	equ	0xFDE
  6930                           postdec2	equ	0xFDD
  6931                           fsr2h	equ	0xFDA
  6932                           fsr2l	equ	0xFD9
  6933                           status	equ	0xFD8
  6934                           
  6935 ;; *************** function _dispararSensor *****************
  6936 ;; Defined at:
  6937 ;;		line 116 in file "menu.c"
  6938 ;; Parameters:    Size  Location     Type
  6939 ;;  sensor          2   18[COMRAM] int 
  6940 ;; Auto vars:     Size  Location     Type
  6941 ;;		None
  6942 ;; Return value:  Size  Location     Type
  6943 ;;		None               void
  6944 ;; Registers used:
  6945 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6946 ;; Tracked objects:
  6947 ;;		On entry : 0/0
  6948 ;;		On exit  : 0/0
  6949 ;;		Unchanged: 0/0
  6950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6951 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6954 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6955 ;;Total ram usage:        2 bytes
  6956 ;; Hardware stack levels used:    1
  6957 ;; Hardware stack levels required when called:    2
  6958 ;; This function calls:
  6959 ;;		_Read_RTC
  6960 ;; This function is called by:
  6961 ;;		_select_menu
  6962 ;; This function uses a non-reentrant model
  6963 ;;
  6964                           
  6965                           	psect	text42
  6966  0038C6                     __ptext42:
  6967                           	opt stack 0
  6968  0038C6                     _dispararSensor:
  6969                           	opt stack 27
  6970                           
  6971                           ;menu.c: 117: Read_RTC();
  6972                           
  6973                           ;incstack = 0
  6974  0038C6  EC89  F00E         	call	_Read_RTC	;wreg free
  6975                           
  6976                           ;menu.c: 118: state_alarm = TRIGGED;
  6977  0038CA  0E02               	movlw	2
  6978  0038CC  0100               	movlb	0	; () banked
  6979  0038CE  6FDF               	movwf	_state_alarm& (0+255),b
  6980                           
  6981                           ; BSR set to: 0
  6982                           ;menu.c: 119: sensorDisparado = sensor;
  6983  0038D0  C013  F096         	movff	dispararSensor@sensor,_sensorDisparado
  6984                           
  6985                           ; BSR set to: 0
  6986                           ;menu.c: 120: diaDisparo = dia;
  6987  0038D4  C0CF  F082         	movff	_dia,_diaDisparo
  6988  0038D8  C0D0  F083         	movff	_dia+1,_diaDisparo+1
  6989                           
  6990                           ; BSR set to: 0
  6991                           ;menu.c: 121: mesDisparo = mes;
  6992  0038DC  C0D5  F08E         	movff	_mes,_mesDisparo
  6993  0038E0  C0D6  F08F         	movff	_mes+1,_mesDisparo+1
  6994                           
  6995                           ; BSR set to: 0
  6996                           ;menu.c: 122: horaDisparo = hora;
  6997  0038E4  C0D3  F086         	movff	_hora,_horaDisparo
  6998  0038E8  C0D4  F087         	movff	_hora+1,_horaDisparo+1
  6999                           
  7000                           ; BSR set to: 0
  7001                           ;menu.c: 123: minDisparo = minuto;
  7002  0038EC  C0D7  F090         	movff	_minuto,_minDisparo
  7003  0038F0  C0D8  F091         	movff	_minuto+1,_minDisparo+1
  7004                           
  7005                           ; BSR set to: 0
  7006  0038F4  0012               	return		;funcret
  7007  0038F6                     __end_of_dispararSensor:
  7008                           	opt stack 0
  7009                           tblptru	equ	0xFF8
  7010                           tblptrh	equ	0xFF7
  7011                           tblptrl	equ	0xFF6
  7012                           tablat	equ	0xFF5
  7013                           postinc0	equ	0xFEE
  7014                           wreg	equ	0xFE8
  7015                           postdec1	equ	0xFE5
  7016                           fsr1l	equ	0xFE1
  7017                           indf2	equ	0xFDF
  7018                           postinc2	equ	0xFDE
  7019                           postdec2	equ	0xFDD
  7020                           fsr2h	equ	0xFDA
  7021                           fsr2l	equ	0xFD9
  7022                           status	equ	0xFD8
  7023                           
  7024 ;; *************** function _configurar_reloj *****************
  7025 ;; Defined at:
  7026 ;;		line 74 in file "reloj.c"
  7027 ;; Parameters:    Size  Location     Type
  7028 ;;		None
  7029 ;; Auto vars:     Size  Location     Type
  7030 ;;  x               1   39[COMRAM] unsigned char 
  7031 ;;  y               1   38[COMRAM] unsigned char 
  7032 ;;  input           1   37[COMRAM] unsigned char 
  7033 ;; Return value:  Size  Location     Type
  7034 ;;		None               void
  7035 ;; Registers used:
  7036 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7037 ;; Tracked objects:
  7038 ;;		On entry : 0/0
  7039 ;;		On exit  : 0/0
  7040 ;;		Unchanged: 0/0
  7041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7043 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7044 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7045 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7046 ;;Total ram usage:        4 bytes
  7047 ;; Hardware stack levels used:    1
  7048 ;; Hardware stack levels required when called:    6
  7049 ;; This function calls:
  7050 ;;		_Read_RTC
  7051 ;;		_evalueChanceOfRaw
  7052 ;;		_lcd_gotoxy
  7053 ;;		_lcd_setcursor_vb
  7054 ;;		_read_keyboard
  7055 ;;		_setClock
  7056 ;;		_write_Date
  7057 ;; This function is called by:
  7058 ;;		_select_menu
  7059 ;; This function uses a non-reentrant model
  7060 ;;
  7061                           
  7062                           	psect	text43
  7063  002F10                     __ptext43:
  7064                           	opt stack 0
  7065  002F10                     _configurar_reloj:
  7066                           	opt stack 23
  7067                           
  7068                           ;reloj.c: 75: char input = 18;
  7069                           
  7070                           ; BSR set to: 0
  7071                           ;incstack = 0
  7072  002F10  0E12               	movlw	18
  7073  002F12  6E26               	movwf	configurar_reloj@input,c
  7074                           
  7075                           ;reloj.c: 76: int8 x = 10;
  7076  002F14  0E0A               	movlw	10
  7077  002F16  6E28               	movwf	configurar_reloj@x,c
  7078                           
  7079                           ;reloj.c: 77: int8 y = 1;
  7080  002F18  0E01               	movlw	1
  7081  002F1A  6E27               	movwf	configurar_reloj@y,c
  7082                           
  7083                           ;reloj.c: 79: while(input != 16){
  7084  002F1C  D03C               	goto	l4927
  7085  002F1E                     l4901:
  7086                           
  7087                           ;reloj.c: 80: Read_RTC();
  7088  002F1E  EC89  F00E         	call	_Read_RTC	;wreg free
  7089                           
  7090                           ;reloj.c: 81: lcd_setcursor_vb(1,1);
  7091  002F22  0E01               	movlw	1
  7092  002F24  6E05               	movwf	lcd_setcursor_vb@blink,c
  7093  002F26  0E01               	movlw	1
  7094  002F28  EC39  F01D         	call	_lcd_setcursor_vb
  7095                           
  7096                           ;reloj.c: 82: lcd_gotoxy(x,y);
  7097  002F2C  C027  F005         	movff	configurar_reloj@y,lcd_gotoxy@y
  7098  002F30  5028               	movf	configurar_reloj@x,w,c
  7099  002F32  ECF3  F01C         	call	_lcd_gotoxy
  7100                           
  7101                           ;reloj.c: 83: if(PORTCbits.RC5 == 0)
  7102  002F36  BA82               	btfsc	3970,5,c	;volatile
  7103  002F38  D01A               	goto	l4917
  7104                           
  7105                           ;reloj.c: 84: {
  7106                           ;reloj.c: 85: x=x+3;
  7107  002F3A  5028               	movf	configurar_reloj@x,w,c
  7108  002F3C  0F03               	addlw	3
  7109  002F3E  6E28               	movwf	configurar_reloj@x,c
  7110                           
  7111                           ;reloj.c: 87: _delay((unsigned long)((50)*(8000000/4000.0)));
  7112  002F40  0E82               	movlw	130
  7113  002F42  6E25               	movwf	??_configurar_reloj& (0+255),c
  7114  002F44  0EDE               	movlw	222
  7115  002F46                     u4767:
  7116  002F46  2EE8               	decfsz	wreg,f,c
  7117  002F48  D7FE               	goto	u4767
  7118  002F4A  2E25               	decfsz	??_configurar_reloj& (0+255),f,c
  7119  002F4C  D7FC               	goto	u4767
  7120                           
  7121                           ;reloj.c: 89: evalueChanceOfRaw(&x,&y);
  7122  002F4E  0E28               	movlw	low configurar_reloj@x
  7123  002F50  6E01               	movwf	evalueChanceOfRaw@x,c
  7124  002F52  0E00               	movlw	high configurar_reloj@x
  7125  002F54  6E02               	movwf	evalueChanceOfRaw@x+1,c
  7126  002F56  0E27               	movlw	low configurar_reloj@y
  7127  002F58  6E03               	movwf	evalueChanceOfRaw@y,c
  7128  002F5A  0E00               	movlw	high configurar_reloj@y
  7129  002F5C  6E04               	movwf	evalueChanceOfRaw@y+1,c
  7130  002F5E  ECD5  F019         	call	_evalueChanceOfRaw	;wreg free
  7131                           
  7132                           ;reloj.c: 90: lcd_gotoxy(x,y);
  7133  002F62  C027  F005         	movff	configurar_reloj@y,lcd_gotoxy@y
  7134  002F66  5028               	movf	configurar_reloj@x,w,c
  7135  002F68  ECF3  F01C         	call	_lcd_gotoxy
  7136  002F6C  D000               	goto	l4917
  7137  002F6E                     l4917:
  7138                           
  7139                           ;reloj.c: 91: }
  7140                           ;reloj.c: 93: if(PORTCbits.RC4 == 0){
  7141  002F6E  B882               	btfsc	3970,4,c	;volatile
  7142  002F70  D006               	goto	l4923
  7143                           
  7144                           ;reloj.c: 94: setClock(x);
  7145  002F72  5028               	movf	configurar_reloj@x,w,c
  7146  002F74  EC70  F013         	call	_setClock
  7147                           
  7148                           ;reloj.c: 95: write_Date();
  7149  002F78  EC5E  F018         	call	_write_Date	;wreg free
  7150  002F7C  D000               	goto	l4923
  7151  002F7E                     l4923:
  7152                           
  7153                           ;reloj.c: 96: }
  7154                           ;reloj.c: 97: input = read_keyboard();
  7155  002F7E  ECF2  F007         	call	_read_keyboard	;wreg free
  7156  002F82  6E26               	movwf	configurar_reloj@input,c
  7157                           
  7158                           ;reloj.c: 98: _delay((unsigned long)((98)*(8000000/4000.0)));
  7159  002F84  0EFF               	movlw	255
  7160  002F86  6E25               	movwf	??_configurar_reloj& (0+255),c
  7161  002F88  0E8A               	movlw	138
  7162  002F8A                     u4777:
  7163  002F8A  2EE8               	decfsz	wreg,f,c
  7164  002F8C  D7FE               	goto	u4777
  7165  002F8E  2E25               	decfsz	??_configurar_reloj& (0+255),f,c
  7166  002F90  D7FC               	goto	u4777
  7167  002F92  D000               	nop2	
  7168  002F94  D000               	goto	l4927
  7169  002F96                     l4927:
  7170  002F96  0E10               	movlw	16
  7171  002F98  1826               	xorwf	configurar_reloj@input,w,c
  7172  002F9A  A4D8               	btfss	status,2,c
  7173  002F9C  D7C0               	goto	l4901
  7174  002F9E  0012               	return		;funcret
  7175  002FA0                     __end_of_configurar_reloj:
  7176                           	opt stack 0
  7177                           tblptru	equ	0xFF8
  7178                           tblptrh	equ	0xFF7
  7179                           tblptrl	equ	0xFF6
  7180                           tablat	equ	0xFF5
  7181                           postinc0	equ	0xFEE
  7182                           wreg	equ	0xFE8
  7183                           postdec1	equ	0xFE5
  7184                           fsr1l	equ	0xFE1
  7185                           indf2	equ	0xFDF
  7186                           postinc2	equ	0xFDE
  7187                           postdec2	equ	0xFDD
  7188                           fsr2h	equ	0xFDA
  7189                           fsr2l	equ	0xFD9
  7190                           status	equ	0xFD8
  7191                           
  7192 ;; *************** function _write_Date *****************
  7193 ;; Defined at:
  7194 ;;		line 12 in file "lcd_vision.c"
  7195 ;; Parameters:    Size  Location     Type
  7196 ;;		None
  7197 ;; Auto vars:     Size  Location     Type
  7198 ;;		None
  7199 ;; Return value:  Size  Location     Type
  7200 ;;                  2  373[None  ] int 
  7201 ;; Registers used:
  7202 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7203 ;; Tracked objects:
  7204 ;;		On entry : 0/0
  7205 ;;		On exit  : 0/0
  7206 ;;		Unchanged: 0/0
  7207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7211 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7212 ;;Total ram usage:        0 bytes
  7213 ;; Hardware stack levels used:    1
  7214 ;; Hardware stack levels required when called:    5
  7215 ;; This function calls:
  7216 ;;		_lcd_gotoxy
  7217 ;;		_lcd_putrs
  7218 ;;		_lcd_setcursor_vb
  7219 ;;		_sprintf
  7220 ;; This function is called by:
  7221 ;;		_configurar_reloj
  7222 ;;		_set_vision
  7223 ;; This function uses a non-reentrant model
  7224 ;;
  7225                           
  7226                           	psect	text44
  7227  0030BC                     __ptext44:
  7228                           	opt stack 0
  7229  0030BC                     _write_Date:
  7230                           	opt stack 24
  7231                           
  7232                           ;lcd_vision.c: 13: lcd_setcursor_vb(0,0);
  7233                           
  7234                           ;incstack = 0
  7235  0030BC  0E00               	movlw	0
  7236  0030BE  6E05               	movwf	lcd_setcursor_vb@blink,c
  7237  0030C0  0E00               	movlw	0
  7238  0030C2  EC39  F01D         	call	_lcd_setcursor_vb
  7239                           
  7240                           ;lcd_vision.c: 14: lcd_gotoxy(9,1);
  7241  0030C6  0E01               	movlw	1
  7242  0030C8  6E05               	movwf	lcd_gotoxy@y,c
  7243  0030CA  0E09               	movlw	9
  7244  0030CC  ECF3  F01C         	call	_lcd_gotoxy
  7245                           
  7246                           ;lcd_vision.c: 15: sprintf(buffer2,"%02u/%02u/%02u",dia,mes,anio);
  7247  0030D0  0E97               	movlw	low _buffer2
  7248  0030D2  6E0D               	movwf	sprintf@sp,c
  7249  0030D4  0E00               	movlw	high _buffer2
  7250  0030D6  6E0E               	movwf	sprintf@sp+1,c
  7251  0030D8  0E67               	movlw	low STR_11
  7252  0030DA  6E0F               	movwf	sprintf@f,c
  7253  0030DC  0E0F               	movlw	high STR_11
  7254  0030DE  6E10               	movwf	sprintf@f+1,c
  7255  0030E0  C0CF  F011         	movff	_dia,?_sprintf+4
  7256  0030E4  C0D0  F012         	movff	_dia+1,?_sprintf+5
  7257  0030E8  C0D5  F013         	movff	_mes,?_sprintf+6
  7258  0030EC  C0D6  F014         	movff	_mes+1,?_sprintf+7
  7259  0030F0  C0CD  F015         	movff	_anio,?_sprintf+8
  7260  0030F4  C0CE  F016         	movff	_anio+1,?_sprintf+9
  7261  0030F8  EC4E  F009         	call	_sprintf	;wreg free
  7262                           
  7263                           ;lcd_vision.c: 16: lcd_putrs(buffer2);
  7264  0030FC  0E97               	movlw	low _buffer2
  7265  0030FE  6E09               	movwf	lcd_putrs@ptr,c
  7266  003100  0E00               	movlw	high _buffer2
  7267  003102  6E0A               	movwf	lcd_putrs@ptr+1,c
  7268  003104  ECBF  F01A         	call	_lcd_putrs	;wreg free
  7269                           
  7270                           ;lcd_vision.c: 17: sprintf(buffer2,"%02u:%02u",hora,minuto);
  7271  003108  0E97               	movlw	low _buffer2
  7272  00310A  6E0D               	movwf	sprintf@sp,c
  7273  00310C  0E00               	movlw	high _buffer2
  7274  00310E  6E0E               	movwf	sprintf@sp+1,c
  7275  003110  0EB5               	movlw	low STR_12
  7276  003112  6E0F               	movwf	sprintf@f,c
  7277  003114  0E0F               	movlw	high STR_12
  7278  003116  6E10               	movwf	sprintf@f+1,c
  7279  003118  C0D3  F011         	movff	_hora,?_sprintf+4
  7280  00311C  C0D4  F012         	movff	_hora+1,?_sprintf+5
  7281  003120  C0D7  F013         	movff	_minuto,?_sprintf+6
  7282  003124  C0D8  F014         	movff	_minuto+1,?_sprintf+7
  7283  003128  EC4E  F009         	call	_sprintf	;wreg free
  7284                           
  7285                           ;lcd_vision.c: 18: lcd_gotoxy(1,2);
  7286  00312C  0E02               	movlw	2
  7287  00312E  6E05               	movwf	lcd_gotoxy@y,c
  7288  003130  0E01               	movlw	1
  7289  003132  ECF3  F01C         	call	_lcd_gotoxy
  7290                           
  7291                           ;lcd_vision.c: 19: lcd_putrs(buffer2);
  7292  003136  0E97               	movlw	low _buffer2
  7293  003138  6E09               	movwf	lcd_putrs@ptr,c
  7294  00313A  0E00               	movlw	high _buffer2
  7295  00313C  6E0A               	movwf	lcd_putrs@ptr+1,c
  7296  00313E  ECBF  F01A         	call	_lcd_putrs	;wreg free
  7297  003142  0012               	return		;funcret
  7298  003144                     __end_of_write_Date:
  7299                           	opt stack 0
  7300                           tblptru	equ	0xFF8
  7301                           tblptrh	equ	0xFF7
  7302                           tblptrl	equ	0xFF6
  7303                           tablat	equ	0xFF5
  7304                           postinc0	equ	0xFEE
  7305                           wreg	equ	0xFE8
  7306                           postdec1	equ	0xFE5
  7307                           fsr1l	equ	0xFE1
  7308                           indf2	equ	0xFDF
  7309                           postinc2	equ	0xFDE
  7310                           postdec2	equ	0xFDD
  7311                           fsr2h	equ	0xFDA
  7312                           fsr2l	equ	0xFD9
  7313                           status	equ	0xFD8
  7314                           
  7315 ;; *************** function _lcd_setcursor_vb *****************
  7316 ;; Defined at:
  7317 ;;		line 210 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  7318 ;; Parameters:    Size  Location     Type
  7319 ;;  visible         1    wreg     unsigned char 
  7320 ;;  blink           1    4[COMRAM] unsigned char 
  7321 ;; Auto vars:     Size  Location     Type
  7322 ;;  visible         1    5[COMRAM] unsigned char 
  7323 ;; Return value:  Size  Location     Type
  7324 ;;		None               void
  7325 ;; Registers used:
  7326 ;;		wreg, status,2, status,0, cstack
  7327 ;; Tracked objects:
  7328 ;;		On entry : 0/0
  7329 ;;		On exit  : 0/0
  7330 ;;		Unchanged: 0/0
  7331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7332 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7333 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7335 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7336 ;;Total ram usage:        2 bytes
  7337 ;; Hardware stack levels used:    1
  7338 ;; Hardware stack levels required when called:    2
  7339 ;; This function calls:
  7340 ;;		_lcd_send_byte
  7341 ;; This function is called by:
  7342 ;;		_configurar_reloj
  7343 ;;		_write_Date
  7344 ;;		_set_desactive_vision
  7345 ;;		_jumpIfNotNumber
  7346 ;; This function uses a non-reentrant model
  7347 ;;
  7348                           
  7349                           	psect	text45
  7350  003A72                     __ptext45:
  7351                           	opt stack 0
  7352  003A72                     _lcd_setcursor_vb:
  7353                           	opt stack 26
  7354                           
  7355                           ;incstack = 0
  7356                           ;lcd_setcursor_vb@visible stored from wreg
  7357  003A72  6E06               	movwf	lcd_setcursor_vb@visible,c
  7358                           
  7359                           ;unmc_lcd_216.c: 211: lcd_send_byte(0, 0xC|(visible<<1)|blink);
  7360  003A74  5006               	movf	lcd_setcursor_vb@visible,w,c
  7361  003A76  2406               	addwf	lcd_setcursor_vb@visible,w,c
  7362  003A78  1005               	iorwf	lcd_setcursor_vb@blink,w,c
  7363  003A7A  090C               	iorlw	12
  7364  003A7C  6E03               	movwf	lcd_send_byte@n,c
  7365  003A7E  0E00               	movlw	0
  7366  003A80  EC32  F01C         	call	_lcd_send_byte
  7367  003A84  0012               	return		;funcret
  7368  003A86                     __end_of_lcd_setcursor_vb:
  7369                           	opt stack 0
  7370                           tblptru	equ	0xFF8
  7371                           tblptrh	equ	0xFF7
  7372                           tblptrl	equ	0xFF6
  7373                           tablat	equ	0xFF5
  7374                           postinc0	equ	0xFEE
  7375                           wreg	equ	0xFE8
  7376                           postdec1	equ	0xFE5
  7377                           fsr1l	equ	0xFE1
  7378                           indf2	equ	0xFDF
  7379                           postinc2	equ	0xFDE
  7380                           postdec2	equ	0xFDD
  7381                           fsr2h	equ	0xFDA
  7382                           fsr2l	equ	0xFD9
  7383                           status	equ	0xFD8
  7384                           
  7385 ;; *************** function _setClock *****************
  7386 ;; Defined at:
  7387 ;;		line 38 in file "reloj.c"
  7388 ;; Parameters:    Size  Location     Type
  7389 ;;  x               1    wreg     unsigned char 
  7390 ;; Auto vars:     Size  Location     Type
  7391 ;;  x               1   14[COMRAM] unsigned char 
  7392 ;; Return value:  Size  Location     Type
  7393 ;;		None               void
  7394 ;; Registers used:
  7395 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7396 ;; Tracked objects:
  7397 ;;		On entry : 0/0
  7398 ;;		On exit  : 0/0
  7399 ;;		Unchanged: 0/0
  7400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7402 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7403 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7404 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7405 ;;Total ram usage:        2 bytes
  7406 ;; Hardware stack levels used:    1
  7407 ;; Hardware stack levels required when called:    3
  7408 ;; This function calls:
  7409 ;;		_Write_RTC
  7410 ;; This function is called by:
  7411 ;;		_configurar_reloj
  7412 ;; This function uses a non-reentrant model
  7413 ;;
  7414                           
  7415                           	psect	text46
  7416  0026E0                     __ptext46:
  7417                           	opt stack 0
  7418  0026E0                     _setClock:
  7419                           	opt stack 25
  7420                           
  7421                           ;incstack = 0
  7422                           ;setClock@x stored from wreg
  7423  0026E0  6E0F               	movwf	setClock@x,c
  7424                           
  7425                           ;reloj.c: 39: switch (x) {
  7426  0026E2  D054               	goto	l4757
  7427  0026E4                     l4729:
  7428                           
  7429                           ;reloj.c: 41: dia++;
  7430  0026E4  0100               	movlb	0	; () banked
  7431  0026E6  4BCF               	infsnz	_dia& (0+255),f,b
  7432  0026E8  2BD0               	incf	(_dia+1)& (0+255),f,b
  7433                           
  7434                           ; BSR set to: 0
  7435                           ;reloj.c: 42: if(dia > 31){
  7436  0026EA  0100               	movlb	0	; () banked
  7437  0026EC  BFD0               	btfsc	(_dia+1)& (0+255),7,b
  7438  0026EE  D05F               	goto	l4759
  7439  0026F0  0100               	movlb	0	; () banked
  7440  0026F2  51D0               	movf	(_dia+1)& (0+255),w,b
  7441  0026F4  E105               	bnz	u4370
  7442  0026F6  0E20               	movlw	32
  7443  0026F8  0100               	movlb	0	; () banked
  7444  0026FA  5DCF               	subwf	_dia& (0+255),w,b
  7445  0026FC  A0D8               	btfss	status,0,c
  7446  0026FE  D057               	goto	l4759
  7447  002700                     u4370:
  7448                           
  7449                           ; BSR set to: 0
  7450                           ;reloj.c: 43: dia = 1;
  7451  002700  0E00               	movlw	0
  7452  002702  0100               	movlb	0	; () banked
  7453  002704  6FD0               	movwf	(_dia+1)& (0+255),b
  7454  002706  0E01               	movlw	1
  7455  002708  6FCF               	movwf	_dia& (0+255),b
  7456                           
  7457                           ; BSR set to: 0
  7458                           ;reloj.c: 44: }
  7459                           ;reloj.c: 45: break;
  7460  00270A  D051               	goto	l4759
  7461  00270C                     l4735:
  7462                           
  7463                           ;reloj.c: 47: mes++;
  7464  00270C  0100               	movlb	0	; () banked
  7465  00270E  4BD5               	infsnz	_mes& (0+255),f,b
  7466  002710  2BD6               	incf	(_mes+1)& (0+255),f,b
  7467                           
  7468                           ; BSR set to: 0
  7469                           ;reloj.c: 48: if(mes > 12){
  7470  002712  0100               	movlb	0	; () banked
  7471  002714  BFD6               	btfsc	(_mes+1)& (0+255),7,b
  7472  002716  D04B               	goto	l4759
  7473  002718  0100               	movlb	0	; () banked
  7474  00271A  51D6               	movf	(_mes+1)& (0+255),w,b
  7475  00271C  E105               	bnz	u4380
  7476  00271E  0E0D               	movlw	13
  7477  002720  0100               	movlb	0	; () banked
  7478  002722  5DD5               	subwf	_mes& (0+255),w,b
  7479  002724  A0D8               	btfss	status,0,c
  7480  002726  D043               	goto	l4759
  7481  002728                     u4380:
  7482                           
  7483                           ; BSR set to: 0
  7484                           ;reloj.c: 49: mes = 1;
  7485  002728  0E00               	movlw	0
  7486  00272A  0100               	movlb	0	; () banked
  7487  00272C  6FD6               	movwf	(_mes+1)& (0+255),b
  7488  00272E  0E01               	movlw	1
  7489  002730  6FD5               	movwf	_mes& (0+255),b
  7490                           
  7491                           ; BSR set to: 0
  7492                           ;reloj.c: 50: }
  7493                           ;reloj.c: 51: break;
  7494  002732  D03D               	goto	l4759
  7495  002734                     l4741:
  7496                           
  7497                           ;reloj.c: 53: anio++;
  7498  002734  0100               	movlb	0	; () banked
  7499  002736  4BCD               	infsnz	_anio& (0+255),f,b
  7500  002738  2BCE               	incf	(_anio+1)& (0+255),f,b
  7501                           
  7502                           ;reloj.c: 54: break;
  7503  00273A  D039               	goto	l4759
  7504  00273C                     l4743:
  7505                           
  7506                           ;reloj.c: 56: hora++;
  7507  00273C  0100               	movlb	0	; () banked
  7508  00273E  4BD3               	infsnz	_hora& (0+255),f,b
  7509  002740  2BD4               	incf	(_hora+1)& (0+255),f,b
  7510                           
  7511                           ; BSR set to: 0
  7512                           ;reloj.c: 57: if(hora > 23){
  7513  002742  0100               	movlb	0	; () banked
  7514  002744  BFD4               	btfsc	(_hora+1)& (0+255),7,b
  7515  002746  D033               	goto	l4759
  7516  002748  0100               	movlb	0	; () banked
  7517  00274A  51D4               	movf	(_hora+1)& (0+255),w,b
  7518  00274C  E105               	bnz	u4390
  7519  00274E  0E18               	movlw	24
  7520  002750  0100               	movlb	0	; () banked
  7521  002752  5DD3               	subwf	_hora& (0+255),w,b
  7522  002754  A0D8               	btfss	status,0,c
  7523  002756  D02B               	goto	l4759
  7524  002758                     u4390:
  7525                           
  7526                           ; BSR set to: 0
  7527                           ;reloj.c: 58: hora = 0;
  7528  002758  0E00               	movlw	0
  7529  00275A  0100               	movlb	0	; () banked
  7530  00275C  6FD4               	movwf	(_hora+1)& (0+255),b
  7531  00275E  0E00               	movlw	0
  7532  002760  6FD3               	movwf	_hora& (0+255),b
  7533                           
  7534                           ; BSR set to: 0
  7535                           ;reloj.c: 59: }
  7536                           ;reloj.c: 60: break;
  7537  002762  D025               	goto	l4759
  7538  002764                     l4749:
  7539                           
  7540                           ;reloj.c: 62: minuto++;
  7541  002764  0100               	movlb	0	; () banked
  7542  002766  4BD7               	infsnz	_minuto& (0+255),f,b
  7543  002768  2BD8               	incf	(_minuto+1)& (0+255),f,b
  7544                           
  7545                           ; BSR set to: 0
  7546                           ;reloj.c: 63: if(minuto > 59){
  7547  00276A  0100               	movlb	0	; () banked
  7548  00276C  BFD8               	btfsc	(_minuto+1)& (0+255),7,b
  7549  00276E  D01F               	goto	l4759
  7550  002770  0100               	movlb	0	; () banked
  7551  002772  51D8               	movf	(_minuto+1)& (0+255),w,b
  7552  002774  E105               	bnz	u4400
  7553  002776  0E3C               	movlw	60
  7554  002778  0100               	movlb	0	; () banked
  7555  00277A  5DD7               	subwf	_minuto& (0+255),w,b
  7556  00277C  A0D8               	btfss	status,0,c
  7557  00277E  D017               	goto	l4759
  7558  002780                     u4400:
  7559                           
  7560                           ; BSR set to: 0
  7561                           ;reloj.c: 64: minuto = 0;
  7562  002780  0E00               	movlw	0
  7563  002782  0100               	movlb	0	; () banked
  7564  002784  6FD8               	movwf	(_minuto+1)& (0+255),b
  7565  002786  0E00               	movlw	0
  7566  002788  6FD7               	movwf	_minuto& (0+255),b
  7567                           
  7568                           ; BSR set to: 0
  7569                           ;reloj.c: 69: }
  7570                           
  7571                           ; BSR set to: 0
  7572                           ;reloj.c: 68: break;
  7573                           
  7574                           ;reloj.c: 67: default:
  7575                           
  7576                           ; BSR set to: 0
  7577                           ;reloj.c: 65: }
  7578                           ;reloj.c: 66: break;
  7579  00278A  D011               	goto	l4759
  7580  00278C                     l4757:
  7581  00278C  500F               	movf	setClock@x,w,c
  7582                           
  7583                           ; Switch size 1, requested type "space"
  7584                           ; Number of cases is 5, Range of values is 2 to 16
  7585                           ; switch strategies available:
  7586                           ; Name         Instructions Cycles
  7587                           ; simple_byte           16     9 (average)
  7588                           ;	Chosen strategy is simple_byte
  7589  00278E  0A02               	xorlw	2	; case 2
  7590  002790  B4D8               	btfsc	status,2,c
  7591  002792  D7D4               	goto	l4743
  7592  002794  0A07               	xorlw	7	; case 5
  7593  002796  B4D8               	btfsc	status,2,c
  7594  002798  D7E5               	goto	l4749
  7595  00279A  0A0F               	xorlw	15	; case 10
  7596  00279C  B4D8               	btfsc	status,2,c
  7597  00279E  D7A2               	goto	l4729
  7598  0027A0  0A07               	xorlw	7	; case 13
  7599  0027A2  B4D8               	btfsc	status,2,c
  7600  0027A4  D7B3               	goto	l4735
  7601  0027A6  0A1D               	xorlw	29	; case 16
  7602  0027A8  B4D8               	btfsc	status,2,c
  7603  0027AA  D7C4               	goto	l4741
  7604  0027AC  D000               	goto	l4759
  7605  0027AE                     l4759:
  7606                           
  7607                           ;reloj.c: 70: Write_RTC();
  7608  0027AE  EC56  F00C         	call	_Write_RTC	;wreg free
  7609                           
  7610                           ;reloj.c: 71: _delay((unsigned long)((50)*(8000000/4000.0)));
  7611  0027B2  0E82               	movlw	130
  7612  0027B4  6E0E               	movwf	??_setClock& (0+255),c
  7613  0027B6  0EDE               	movlw	222
  7614  0027B8                     u4787:
  7615  0027B8  2EE8               	decfsz	wreg,f,c
  7616  0027BA  D7FE               	goto	u4787
  7617  0027BC  2E0E               	decfsz	??_setClock& (0+255),f,c
  7618  0027BE  D7FC               	goto	u4787
  7619  0027C0  0012               	return		;funcret
  7620  0027C2                     __end_of_setClock:
  7621                           	opt stack 0
  7622                           tblptru	equ	0xFF8
  7623                           tblptrh	equ	0xFF7
  7624                           tblptrl	equ	0xFF6
  7625                           tablat	equ	0xFF5
  7626                           postinc0	equ	0xFEE
  7627                           wreg	equ	0xFE8
  7628                           postdec1	equ	0xFE5
  7629                           fsr1l	equ	0xFE1
  7630                           indf2	equ	0xFDF
  7631                           postinc2	equ	0xFDE
  7632                           postdec2	equ	0xFDD
  7633                           fsr2h	equ	0xFDA
  7634                           fsr2l	equ	0xFD9
  7635                           status	equ	0xFD8
  7636                           
  7637 ;; *************** function _read_keyboard *****************
  7638 ;; Defined at:
  7639 ;;		line 8 in file "keyboard.c"
  7640 ;; Parameters:    Size  Location     Type
  7641 ;;		None
  7642 ;; Auto vars:     Size  Location     Type
  7643 ;;		None
  7644 ;; Return value:  Size  Location     Type
  7645 ;;                  1    wreg      unsigned char 
  7646 ;; Registers used:
  7647 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7648 ;; Tracked objects:
  7649 ;;		On entry : 0/0
  7650 ;;		On exit  : 0/0
  7651 ;;		Unchanged: 0/0
  7652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7655 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7656 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7657 ;;Total ram usage:        1 bytes
  7658 ;; Hardware stack levels used:    1
  7659 ;; Hardware stack levels required when called:    5
  7660 ;; This function calls:
  7661 ;;		_lcd_putrs
  7662 ;;		_sprintf
  7663 ;; This function is called by:
  7664 ;;		_configurar_reloj
  7665 ;;		_input_password
  7666 ;;		_twinkle
  7667 ;;		_input_old_pass
  7668 ;;		_input_new_pass
  7669 ;;		_ver_opcion_cambio
  7670 ;;		_ver_info
  7671 ;;		_select_menu
  7672 ;; This function uses a non-reentrant model
  7673 ;;
  7674                           
  7675                           	psect	text47
  7676  000FE4                     __ptext47:
  7677                           	opt stack 0
  7678  000FE4                     _read_keyboard:
  7679                           	opt stack 23
  7680                           
  7681                           ;keyboard.c: 9: LATAbits.LATA0=1;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=0;
  7682                           
  7683                           ;incstack = 0
  7684  000FE4  8089               	bsf	3977,0,c	;volatile
  7685  000FE6  9289               	bcf	3977,1,c	;volatile
  7686  000FE8  9489               	bcf	3977,2,c	;volatile
  7687  000FEA  9689               	bcf	3977,3,c	;volatile
  7688                           
  7689                           ;keyboard.c: 10: {
  7690                           ;keyboard.c: 11: if (PORTAbits.RA5==1){key=1;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA5==1){};}
  7691  000FEC  AA80               	btfss	3968,5,c	;volatile
  7692  000FEE  D019               	goto	l295
  7693  000FF0  0E01               	movlw	1
  7694  000FF2  0100               	movlb	0	; () banked
  7695  000FF4  6FDD               	movwf	_key& (0+255),b
  7696                           
  7697                           ; BSR set to: 0
  7698  000FF6  0E97               	movlw	low _buffer2
  7699  000FF8  6E0D               	movwf	sprintf@sp,c
  7700  000FFA  0E00               	movlw	high _buffer2
  7701  000FFC  6E0E               	movwf	sprintf@sp+1,c
  7702  000FFE  0ED6               	movlw	low STR_1
  7703  001000  6E0F               	movwf	sprintf@f,c
  7704  001002  0E0F               	movlw	high STR_1
  7705  001004  6E10               	movwf	sprintf@f+1,c
  7706  001006  C0DD  F011         	movff	_key,?_sprintf+4
  7707  00100A  6A12               	clrf	?_sprintf+5,c
  7708  00100C  EC4E  F009         	call	_sprintf	;wreg free
  7709  001010  0E97               	movlw	low _buffer2
  7710  001012  6E09               	movwf	lcd_putrs@ptr,c
  7711  001014  0E00               	movlw	high _buffer2
  7712  001016  6E0A               	movwf	lcd_putrs@ptr+1,c
  7713  001018  ECBF  F01A         	call	_lcd_putrs	;wreg free
  7714  00101C  D000               	goto	l296
  7715  00101E                     l296:
  7716  00101E  BA80               	btfsc	3968,5,c	;volatile
  7717  001020  D7FE               	goto	l296
  7718  001022                     l295:
  7719                           
  7720                           ;keyboard.c: 12: if (PORTAbits.RA7==1){key=2;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  7721  001022  AE80               	btfss	3968,7,c	;volatile
  7722  001024  D019               	goto	l299
  7723  001026  0E02               	movlw	2
  7724  001028  0100               	movlb	0	; () banked
  7725  00102A  6FDD               	movwf	_key& (0+255),b
  7726                           
  7727                           ; BSR set to: 0
  7728  00102C  0E97               	movlw	low _buffer2
  7729  00102E  6E0D               	movwf	sprintf@sp,c
  7730  001030  0E00               	movlw	high _buffer2
  7731  001032  6E0E               	movwf	sprintf@sp+1,c
  7732  001034  0ED6               	movlw	low STR_1
  7733  001036  6E0F               	movwf	sprintf@f,c
  7734  001038  0E0F               	movlw	high STR_1
  7735  00103A  6E10               	movwf	sprintf@f+1,c
  7736  00103C  C0DD  F011         	movff	_key,?_sprintf+4
  7737  001040  6A12               	clrf	?_sprintf+5,c
  7738  001042  EC4E  F009         	call	_sprintf	;wreg free
  7739  001046  0E97               	movlw	low _buffer2
  7740  001048  6E09               	movwf	lcd_putrs@ptr,c
  7741  00104A  0E00               	movlw	high _buffer2
  7742  00104C  6E0A               	movwf	lcd_putrs@ptr+1,c
  7743  00104E  ECBF  F01A         	call	_lcd_putrs	;wreg free
  7744  001052  D000               	goto	l300
  7745  001054                     l300:
  7746  001054  BE80               	btfsc	3968,7,c	;volatile
  7747  001056  D7FE               	goto	l300
  7748  001058                     l299:
  7749                           
  7750                           ;keyboard.c: 13: if (PORTAbits.RA6==1){key=3;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA6==1){};}
  7751  001058  AC80               	btfss	3968,6,c	;volatile
  7752  00105A  D019               	goto	l303
  7753  00105C  0E03               	movlw	3
  7754  00105E  0100               	movlb	0	; () banked
  7755  001060  6FDD               	movwf	_key& (0+255),b
  7756                           
  7757                           ; BSR set to: 0
  7758  001062  0E97               	movlw	low _buffer2
  7759  001064  6E0D               	movwf	sprintf@sp,c
  7760  001066  0E00               	movlw	high _buffer2
  7761  001068  6E0E               	movwf	sprintf@sp+1,c
  7762  00106A  0ED6               	movlw	low STR_1
  7763  00106C  6E0F               	movwf	sprintf@f,c
  7764  00106E  0E0F               	movlw	high STR_1
  7765  001070  6E10               	movwf	sprintf@f+1,c
  7766  001072  C0DD  F011         	movff	_key,?_sprintf+4
  7767  001076  6A12               	clrf	?_sprintf+5,c
  7768  001078  EC4E  F009         	call	_sprintf	;wreg free
  7769  00107C  0E97               	movlw	low _buffer2
  7770  00107E  6E09               	movwf	lcd_putrs@ptr,c
  7771  001080  0E00               	movlw	high _buffer2
  7772  001082  6E0A               	movwf	lcd_putrs@ptr+1,c
  7773  001084  ECBF  F01A         	call	_lcd_putrs	;wreg free
  7774  001088  D000               	goto	l304
  7775  00108A                     l304:
  7776  00108A  BC80               	btfsc	3968,6,c	;volatile
  7777  00108C  D7FE               	goto	l304
  7778  00108E                     l303:
  7779                           
  7780                           ;keyboard.c: 14: if (PORTCbits.RC2==1){key=11; while(PORTCbits.RC2==1){};}
  7781  00108E  A482               	btfss	3970,2,c	;volatile
  7782  001090  D006               	goto	l307
  7783  001092  0E0B               	movlw	11
  7784  001094  0100               	movlb	0	; () banked
  7785  001096  6FDD               	movwf	_key& (0+255),b
  7786  001098  D000               	goto	l308
  7787  00109A                     l308:
  7788  00109A  B482               	btfsc	3970,2,c	;volatile
  7789  00109C  D7FE               	goto	l308
  7790  00109E                     l307:
  7791                           
  7792                           ;keyboard.c: 15: }
  7793                           ;keyboard.c: 16: LATAbits.LATA0=0;LATAbits.LATA1=1;LATAbits.LATA2=0;LATAbits.LATA3=0;
  7794  00109E  9089               	bcf	3977,0,c	;volatile
  7795  0010A0  8289               	bsf	3977,1,c	;volatile
  7796  0010A2  9489               	bcf	3977,2,c	;volatile
  7797  0010A4  9689               	bcf	3977,3,c	;volatile
  7798                           
  7799                           ;keyboard.c: 17: {
  7800                           ;keyboard.c: 18: if (PORTAbits.RA5==1){key=4;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA5==1){};}
  7801  0010A6  AA80               	btfss	3968,5,c	;volatile
  7802  0010A8  D019               	goto	l311
  7803  0010AA  0E04               	movlw	4
  7804  0010AC  0100               	movlb	0	; () banked
  7805  0010AE  6FDD               	movwf	_key& (0+255),b
  7806                           
  7807                           ; BSR set to: 0
  7808  0010B0  0E97               	movlw	low _buffer2
  7809  0010B2  6E0D               	movwf	sprintf@sp,c
  7810  0010B4  0E00               	movlw	high _buffer2
  7811  0010B6  6E0E               	movwf	sprintf@sp+1,c
  7812  0010B8  0ED6               	movlw	low STR_1
  7813  0010BA  6E0F               	movwf	sprintf@f,c
  7814  0010BC  0E0F               	movlw	high STR_1
  7815  0010BE  6E10               	movwf	sprintf@f+1,c
  7816  0010C0  C0DD  F011         	movff	_key,?_sprintf+4
  7817  0010C4  6A12               	clrf	?_sprintf+5,c
  7818  0010C6  EC4E  F009         	call	_sprintf	;wreg free
  7819  0010CA  0E97               	movlw	low _buffer2
  7820  0010CC  6E09               	movwf	lcd_putrs@ptr,c
  7821  0010CE  0E00               	movlw	high _buffer2
  7822  0010D0  6E0A               	movwf	lcd_putrs@ptr+1,c
  7823  0010D2  ECBF  F01A         	call	_lcd_putrs	;wreg free
  7824  0010D6  D000               	goto	l312
  7825  0010D8                     l312:
  7826  0010D8  BA80               	btfsc	3968,5,c	;volatile
  7827  0010DA  D7FE               	goto	l312
  7828  0010DC                     l311:
  7829                           
  7830                           ;keyboard.c: 19: if (PORTAbits.RA7==1){key=5;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  7831  0010DC  AE80               	btfss	3968,7,c	;volatile
  7832  0010DE  D019               	goto	l315
  7833  0010E0  0E05               	movlw	5
  7834  0010E2  0100               	movlb	0	; () banked
  7835  0010E4  6FDD               	movwf	_key& (0+255),b
  7836                           
  7837                           ; BSR set to: 0
  7838  0010E6  0E97               	movlw	low _buffer2
  7839  0010E8  6E0D               	movwf	sprintf@sp,c
  7840  0010EA  0E00               	movlw	high _buffer2
  7841  0010EC  6E0E               	movwf	sprintf@sp+1,c
  7842  0010EE  0ED6               	movlw	low STR_1
  7843  0010F0  6E0F               	movwf	sprintf@f,c
  7844  0010F2  0E0F               	movlw	high STR_1
  7845  0010F4  6E10               	movwf	sprintf@f+1,c
  7846  0010F6  C0DD  F011         	movff	_key,?_sprintf+4
  7847  0010FA  6A12               	clrf	?_sprintf+5,c
  7848  0010FC  EC4E  F009         	call	_sprintf	;wreg free
  7849  001100  0E97               	movlw	low _buffer2
  7850  001102  6E09               	movwf	lcd_putrs@ptr,c
  7851  001104  0E00               	movlw	high _buffer2
  7852  001106  6E0A               	movwf	lcd_putrs@ptr+1,c
  7853  001108  ECBF  F01A         	call	_lcd_putrs	;wreg free
  7854  00110C  D000               	goto	l316
  7855  00110E                     l316:
  7856  00110E  BE80               	btfsc	3968,7,c	;volatile
  7857  001110  D7FE               	goto	l316
  7858  001112                     l315:
  7859                           
  7860                           ;keyboard.c: 20: if (PORTAbits.RA6==1){key=6;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA6==1){};}
  7861  001112  AC80               	btfss	3968,6,c	;volatile
  7862  001114  D019               	goto	l319
  7863  001116  0E06               	movlw	6
  7864  001118  0100               	movlb	0	; () banked
  7865  00111A  6FDD               	movwf	_key& (0+255),b
  7866                           
  7867                           ; BSR set to: 0
  7868  00111C  0E97               	movlw	low _buffer2
  7869  00111E  6E0D               	movwf	sprintf@sp,c
  7870  001120  0E00               	movlw	high _buffer2
  7871  001122  6E0E               	movwf	sprintf@sp+1,c
  7872  001124  0ED6               	movlw	low STR_1
  7873  001126  6E0F               	movwf	sprintf@f,c
  7874  001128  0E0F               	movlw	high STR_1
  7875  00112A  6E10               	movwf	sprintf@f+1,c
  7876  00112C  C0DD  F011         	movff	_key,?_sprintf+4
  7877  001130  6A12               	clrf	?_sprintf+5,c
  7878  001132  EC4E  F009         	call	_sprintf	;wreg free
  7879  001136  0E97               	movlw	low _buffer2
  7880  001138  6E09               	movwf	lcd_putrs@ptr,c
  7881  00113A  0E00               	movlw	high _buffer2
  7882  00113C  6E0A               	movwf	lcd_putrs@ptr+1,c
  7883  00113E  ECBF  F01A         	call	_lcd_putrs	;wreg free
  7884  001142  D000               	goto	l320
  7885  001144                     l320:
  7886  001144  BC80               	btfsc	3968,6,c	;volatile
  7887  001146  D7FE               	goto	l320
  7888  001148                     l319:
  7889                           
  7890                           ;keyboard.c: 21: if (PORTCbits.RC2==1){key=12; while(PORTCbits.RC2==1){};}
  7891  001148  A482               	btfss	3970,2,c	;volatile
  7892  00114A  D006               	goto	l323
  7893  00114C  0E0C               	movlw	12
  7894  00114E  0100               	movlb	0	; () banked
  7895  001150  6FDD               	movwf	_key& (0+255),b
  7896  001152  D000               	goto	l324
  7897  001154                     l324:
  7898  001154  B482               	btfsc	3970,2,c	;volatile
  7899  001156  D7FE               	goto	l324
  7900  001158                     l323:
  7901                           
  7902                           ;keyboard.c: 22: }
  7903                           ;keyboard.c: 23: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=1;LATAbits.LATA3=0;
  7904  001158  9089               	bcf	3977,0,c	;volatile
  7905  00115A  9289               	bcf	3977,1,c	;volatile
  7906  00115C  8489               	bsf	3977,2,c	;volatile
  7907  00115E  9689               	bcf	3977,3,c	;volatile
  7908                           
  7909                           ;keyboard.c: 24: {
  7910                           ;keyboard.c: 25: if (PORTAbits.RA5==1){key=7;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA5==1){};}
  7911  001160  AA80               	btfss	3968,5,c	;volatile
  7912  001162  D019               	goto	l327
  7913  001164  0E07               	movlw	7
  7914  001166  0100               	movlb	0	; () banked
  7915  001168  6FDD               	movwf	_key& (0+255),b
  7916                           
  7917                           ; BSR set to: 0
  7918  00116A  0E97               	movlw	low _buffer2
  7919  00116C  6E0D               	movwf	sprintf@sp,c
  7920  00116E  0E00               	movlw	high _buffer2
  7921  001170  6E0E               	movwf	sprintf@sp+1,c
  7922  001172  0ED6               	movlw	low STR_1
  7923  001174  6E0F               	movwf	sprintf@f,c
  7924  001176  0E0F               	movlw	high STR_1
  7925  001178  6E10               	movwf	sprintf@f+1,c
  7926  00117A  C0DD  F011         	movff	_key,?_sprintf+4
  7927  00117E  6A12               	clrf	?_sprintf+5,c
  7928  001180  EC4E  F009         	call	_sprintf	;wreg free
  7929  001184  0E97               	movlw	low _buffer2
  7930  001186  6E09               	movwf	lcd_putrs@ptr,c
  7931  001188  0E00               	movlw	high _buffer2
  7932  00118A  6E0A               	movwf	lcd_putrs@ptr+1,c
  7933  00118C  ECBF  F01A         	call	_lcd_putrs	;wreg free
  7934  001190  D000               	goto	l328
  7935  001192                     l328:
  7936  001192  BA80               	btfsc	3968,5,c	;volatile
  7937  001194  D7FE               	goto	l328
  7938  001196                     l327:
  7939                           
  7940                           ;keyboard.c: 26: if (PORTAbits.RA7==1){key=8;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  7941  001196  AE80               	btfss	3968,7,c	;volatile
  7942  001198  D019               	goto	l331
  7943  00119A  0E08               	movlw	8
  7944  00119C  0100               	movlb	0	; () banked
  7945  00119E  6FDD               	movwf	_key& (0+255),b
  7946                           
  7947                           ; BSR set to: 0
  7948  0011A0  0E97               	movlw	low _buffer2
  7949  0011A2  6E0D               	movwf	sprintf@sp,c
  7950  0011A4  0E00               	movlw	high _buffer2
  7951  0011A6  6E0E               	movwf	sprintf@sp+1,c
  7952  0011A8  0ED6               	movlw	low STR_1
  7953  0011AA  6E0F               	movwf	sprintf@f,c
  7954  0011AC  0E0F               	movlw	high STR_1
  7955  0011AE  6E10               	movwf	sprintf@f+1,c
  7956  0011B0  C0DD  F011         	movff	_key,?_sprintf+4
  7957  0011B4  6A12               	clrf	?_sprintf+5,c
  7958  0011B6  EC4E  F009         	call	_sprintf	;wreg free
  7959  0011BA  0E97               	movlw	low _buffer2
  7960  0011BC  6E09               	movwf	lcd_putrs@ptr,c
  7961  0011BE  0E00               	movlw	high _buffer2
  7962  0011C0  6E0A               	movwf	lcd_putrs@ptr+1,c
  7963  0011C2  ECBF  F01A         	call	_lcd_putrs	;wreg free
  7964  0011C6  D000               	goto	l332
  7965  0011C8                     l332:
  7966  0011C8  BE80               	btfsc	3968,7,c	;volatile
  7967  0011CA  D7FE               	goto	l332
  7968  0011CC                     l331:
  7969                           
  7970                           ;keyboard.c: 27: if (PORTAbits.RA6==1){key=9;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA6==1){};}
  7971  0011CC  AC80               	btfss	3968,6,c	;volatile
  7972  0011CE  D019               	goto	l335
  7973  0011D0  0E09               	movlw	9
  7974  0011D2  0100               	movlb	0	; () banked
  7975  0011D4  6FDD               	movwf	_key& (0+255),b
  7976                           
  7977                           ; BSR set to: 0
  7978  0011D6  0E97               	movlw	low _buffer2
  7979  0011D8  6E0D               	movwf	sprintf@sp,c
  7980  0011DA  0E00               	movlw	high _buffer2
  7981  0011DC  6E0E               	movwf	sprintf@sp+1,c
  7982  0011DE  0ED6               	movlw	low STR_1
  7983  0011E0  6E0F               	movwf	sprintf@f,c
  7984  0011E2  0E0F               	movlw	high STR_1
  7985  0011E4  6E10               	movwf	sprintf@f+1,c
  7986  0011E6  C0DD  F011         	movff	_key,?_sprintf+4
  7987  0011EA  6A12               	clrf	?_sprintf+5,c
  7988  0011EC  EC4E  F009         	call	_sprintf	;wreg free
  7989  0011F0  0E97               	movlw	low _buffer2
  7990  0011F2  6E09               	movwf	lcd_putrs@ptr,c
  7991  0011F4  0E00               	movlw	high _buffer2
  7992  0011F6  6E0A               	movwf	lcd_putrs@ptr+1,c
  7993  0011F8  ECBF  F01A         	call	_lcd_putrs	;wreg free
  7994  0011FC  D000               	goto	l336
  7995  0011FE                     l336:
  7996  0011FE  BC80               	btfsc	3968,6,c	;volatile
  7997  001200  D7FE               	goto	l336
  7998  001202                     l335:
  7999                           
  8000                           ;keyboard.c: 28: if (PORTCbits.RC2==1){key=13; while(PORTCbits.RC2==1){};}
  8001  001202  A482               	btfss	3970,2,c	;volatile
  8002  001204  D006               	goto	l339
  8003  001206  0E0D               	movlw	13
  8004  001208  0100               	movlb	0	; () banked
  8005  00120A  6FDD               	movwf	_key& (0+255),b
  8006  00120C  D000               	goto	l340
  8007  00120E                     l340:
  8008  00120E  B482               	btfsc	3970,2,c	;volatile
  8009  001210  D7FE               	goto	l340
  8010  001212                     l339:
  8011                           
  8012                           ;keyboard.c: 29: }
  8013                           ;keyboard.c: 30: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=1;
  8014  001212  9089               	bcf	3977,0,c	;volatile
  8015  001214  9289               	bcf	3977,1,c	;volatile
  8016  001216  9489               	bcf	3977,2,c	;volatile
  8017  001218  8689               	bsf	3977,3,c	;volatile
  8018                           
  8019                           ;keyboard.c: 31: {
  8020                           ;keyboard.c: 32: if (PORTAbits.RA5==1){key=14; while(PORTAbits.RA5==1){};}
  8021  00121A  AA80               	btfss	3968,5,c	;volatile
  8022  00121C  D006               	goto	l343
  8023  00121E  0E0E               	movlw	14
  8024  001220  0100               	movlb	0	; () banked
  8025  001222  6FDD               	movwf	_key& (0+255),b
  8026  001224  D000               	goto	l344
  8027  001226                     l344:
  8028  001226  BA80               	btfsc	3968,5,c	;volatile
  8029  001228  D7FE               	goto	l344
  8030  00122A                     l343:
  8031                           
  8032                           ;keyboard.c: 33: if (PORTAbits.RA7==1){key=0;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  8033  00122A  AE80               	btfss	3968,7,c	;volatile
  8034  00122C  D019               	goto	l347
  8035  00122E  0E00               	movlw	0
  8036  001230  0100               	movlb	0	; () banked
  8037  001232  6FDD               	movwf	_key& (0+255),b
  8038                           
  8039                           ; BSR set to: 0
  8040  001234  0E97               	movlw	low _buffer2
  8041  001236  6E0D               	movwf	sprintf@sp,c
  8042  001238  0E00               	movlw	high _buffer2
  8043  00123A  6E0E               	movwf	sprintf@sp+1,c
  8044  00123C  0ED6               	movlw	low STR_1
  8045  00123E  6E0F               	movwf	sprintf@f,c
  8046  001240  0E0F               	movlw	high STR_1
  8047  001242  6E10               	movwf	sprintf@f+1,c
  8048  001244  C0DD  F011         	movff	_key,?_sprintf+4
  8049  001248  6A12               	clrf	?_sprintf+5,c
  8050  00124A  EC4E  F009         	call	_sprintf	;wreg free
  8051  00124E  0E97               	movlw	low _buffer2
  8052  001250  6E09               	movwf	lcd_putrs@ptr,c
  8053  001252  0E00               	movlw	high _buffer2
  8054  001254  6E0A               	movwf	lcd_putrs@ptr+1,c
  8055  001256  ECBF  F01A         	call	_lcd_putrs	;wreg free
  8056  00125A  D000               	goto	l348
  8057  00125C                     l348:
  8058  00125C  BE80               	btfsc	3968,7,c	;volatile
  8059  00125E  D7FE               	goto	l348
  8060  001260                     l347:
  8061                           
  8062                           ;keyboard.c: 34: if (PORTAbits.RA6==1){key=15; while(PORTAbits.RA6==1){};}
  8063  001260  AC80               	btfss	3968,6,c	;volatile
  8064  001262  D006               	goto	l351
  8065  001264  0E0F               	movlw	15
  8066  001266  0100               	movlb	0	; () banked
  8067  001268  6FDD               	movwf	_key& (0+255),b
  8068  00126A  D000               	goto	l352
  8069  00126C                     l352:
  8070  00126C  BC80               	btfsc	3968,6,c	;volatile
  8071  00126E  D7FE               	goto	l352
  8072  001270                     l351:
  8073                           
  8074                           ;keyboard.c: 35: if (PORTCbits.RC2==1){key=16; while(PORTCbits.RC2==1){};}
  8075  001270  A482               	btfss	3970,2,c	;volatile
  8076  001272  D008               	goto	l4549
  8077  001274  0E10               	movlw	16
  8078  001276  0100               	movlb	0	; () banked
  8079  001278  6FDD               	movwf	_key& (0+255),b
  8080  00127A  D000               	goto	l356
  8081  00127C                     l356:
  8082  00127C  A482               	btfss	3970,2,c	;volatile
  8083  00127E  D002               	goto	l4549
  8084  001280  D7FD               	goto	l356
  8085  001282  D000               	goto	l4549
  8086  001284                     l4549:
  8087                           
  8088                           ;keyboard.c: 36: }
  8089                           ;keyboard.c: 37: _delay((unsigned long)((98)*(8000000/4000.0)));
  8090  001284  0EFF               	movlw	255
  8091  001286  6E24               	movwf	??_read_keyboard& (0+255),c
  8092  001288  0E8A               	movlw	138
  8093  00128A                     u4797:
  8094  00128A  2EE8               	decfsz	wreg,f,c
  8095  00128C  D7FE               	goto	u4797
  8096  00128E  2E24               	decfsz	??_read_keyboard& (0+255),f,c
  8097  001290  D7FC               	goto	u4797
  8098  001292  D000               	nop2	
  8099                           
  8100                           ;keyboard.c: 40: return key;
  8101  001294  0100               	movlb	0	; () banked
  8102  001296  51DD               	movf	_key& (0+255),w,b
  8103  001298  0012               	return	
  8104                           
  8105                           ; BSR set to: 0
  8106                           
  8107                           ; BSR set to: 0
  8108  00129A  0012               	return		;funcret
  8109  00129C                     __end_of_read_keyboard:
  8110                           	opt stack 0
  8111                           tblptru	equ	0xFF8
  8112                           tblptrh	equ	0xFF7
  8113                           tblptrl	equ	0xFF6
  8114                           tablat	equ	0xFF5
  8115                           postinc0	equ	0xFEE
  8116                           wreg	equ	0xFE8
  8117                           postdec1	equ	0xFE5
  8118                           fsr1l	equ	0xFE1
  8119                           indf2	equ	0xFDF
  8120                           postinc2	equ	0xFDE
  8121                           postdec2	equ	0xFDD
  8122                           fsr2h	equ	0xFDA
  8123                           fsr2l	equ	0xFD9
  8124                           status	equ	0xFD8
  8125                           
  8126 ;; *************** function _sprintf *****************
  8127 ;; Defined at:
  8128 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\doprnt.c"
  8129 ;; Parameters:    Size  Location     Type
  8130 ;;  sp              2   12[COMRAM] PTR unsigned char 
  8131 ;;		 -> buffer2(20), 
  8132 ;;  f               2   14[COMRAM] PTR const unsigned char 
  8133 ;;		 -> STR_30(10), STR_28(10), STR_26(5), STR_12(10), 
  8134 ;;		 -> STR_11(15), STR_10(5), STR_9(5), STR_8(5), 
  8135 ;;		 -> STR_7(5), STR_6(5), STR_5(5), STR_4(5), 
  8136 ;;		 -> STR_3(5), STR_2(5), STR_1(5), 
  8137 ;; Auto vars:     Size  Location     Type
  8138 ;;  tmpval          4    0        struct .
  8139 ;;  cp              3    0        PTR const unsigned char 
  8140 ;;  width           2   32[COMRAM] int 
  8141 ;;  val             2   29[COMRAM] unsigned int 
  8142 ;;  ap              2   26[COMRAM] PTR void [1]
  8143 ;;		 -> ?_sprintf(2), 
  8144 ;;  len             2    0        unsigned int 
  8145 ;;  c               1   34[COMRAM] char 
  8146 ;;  prec            1   31[COMRAM] char 
  8147 ;;  flag            1   28[COMRAM] unsigned char 
  8148 ;; Return value:  Size  Location     Type
  8149 ;;                  2   12[COMRAM] int 
  8150 ;; Registers used:
  8151 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8152 ;; Tracked objects:
  8153 ;;		On entry : 0/0
  8154 ;;		On exit  : 0/0
  8155 ;;		Unchanged: 0/0
  8156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8157 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8158 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8159 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8160 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8161 ;;Total ram usage:       23 bytes
  8162 ;; Hardware stack levels used:    1
  8163 ;; Hardware stack levels required when called:    1
  8164 ;; This function calls:
  8165 ;;		___lwdiv
  8166 ;;		___lwmod
  8167 ;;		___wmul
  8168 ;;		_isdigit
  8169 ;; This function is called by:
  8170 ;;		_read_keyboard
  8171 ;;		_write_Date
  8172 ;;		_ver_info
  8173 ;; This function uses a non-reentrant model
  8174 ;;
  8175                           
  8176                           	psect	text48
  8177  00129C                     __ptext48:
  8178                           	opt stack 0
  8179  00129C                     _sprintf:
  8180                           	opt stack 27
  8181                           
  8182                           ;doprnt.c: 494: va_list ap;
  8183                           ;doprnt.c: 499: signed char c;
  8184                           ;doprnt.c: 501: int width;
  8185                           ;doprnt.c: 506: signed char prec;
  8186                           ;doprnt.c: 508: unsigned char flag;
  8187                           ;doprnt.c: 523: union {
  8188                           ;doprnt.c: 524: unsigned long vd;
  8189                           ;doprnt.c: 525: double integ;
  8190                           ;doprnt.c: 526: } tmpval;
  8191                           ;doprnt.c: 528: unsigned int val;
  8192                           ;doprnt.c: 529: unsigned len;
  8193                           ;doprnt.c: 530: const char * cp;
  8194                           ;doprnt.c: 533: *ap = __va_start();
  8195                           
  8196                           ; BSR set to: 0
  8197                           ;incstack = 0
  8198  00129C  0E11               	movlw	low (?_sprintf+4)
  8199  00129E  6E1B               	movwf	sprintf@ap,c
  8200  0012A0  0E00               	movlw	high (?_sprintf+4)
  8201  0012A2  6E1C               	movwf	sprintf@ap+1,c
  8202                           
  8203                           ;doprnt.c: 536: while(c = *f++) {
  8204  0012A4  D117               	goto	l4173
  8205  0012A6                     l4091:
  8206                           
  8207                           ;doprnt.c: 538: if(c != '%')
  8208  0012A6  0E25               	movlw	37
  8209  0012A8  1823               	xorwf	sprintf@c,w,c
  8210  0012AA  B4D8               	btfsc	status,2,c
  8211  0012AC  D009               	goto	l4097
  8212                           
  8213                           ;doprnt.c: 540: {
  8214                           ;doprnt.c: 541: ((*sp++ = (c)));
  8215  0012AE  C00D  FFD9         	movff	sprintf@sp,fsr2l
  8216  0012B2  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  8217  0012B6  C023  FFDF         	movff	sprintf@c,indf2
  8218  0012BA  4A0D               	infsnz	sprintf@sp,f,c
  8219  0012BC  2A0E               	incf	sprintf@sp+1,f,c
  8220                           
  8221                           ;doprnt.c: 542: continue;
  8222  0012BE  D10A               	goto	l4173
  8223  0012C0                     l4097:
  8224                           
  8225                           ;doprnt.c: 543: }
  8226                           ;doprnt.c: 546: width = 0;
  8227  0012C0  0E00               	movlw	0
  8228  0012C2  6E22               	movwf	sprintf@width+1,c
  8229  0012C4  0E00               	movlw	0
  8230  0012C6  6E21               	movwf	sprintf@width,c
  8231                           
  8232                           ;doprnt.c: 548: flag = 0;
  8233  0012C8  0E00               	movlw	0
  8234  0012CA  6E1D               	movwf	sprintf@flag,c
  8235                           
  8236                           ;doprnt.c: 551: switch(*f) {
  8237                           
  8238                           ;doprnt.c: 550: for(;;) {
  8239  0012CC  D005               	goto	l4103
  8240  0012CE                     l4099:
  8241                           
  8242                           ;doprnt.c: 580: flag |= 0x04;
  8243  0012CE  841D               	bsf	sprintf@flag,2,c
  8244                           
  8245                           ;doprnt.c: 581: f++;
  8246  0012D0  4A0F               	infsnz	sprintf@f,f,c
  8247  0012D2  2A10               	incf	sprintf@f+1,f,c
  8248                           
  8249                           ;doprnt.c: 582: continue;
  8250  0012D4  D001               	goto	l4103
  8251                           
  8252                           ;doprnt.c: 584: }
  8253  0012D6  D00B               	goto	l4105
  8254  0012D8                     l4103:
  8255  0012D8  C00F  FFF6         	movff	sprintf@f,tblptrl
  8256  0012DC  C010  FFF7         	movff	sprintf@f+1,tblptrh
  8257  0012E0                     	if	0	;tblptru may be non-zero
  8258  0012E0                     	endif
  8259  0012E0                     	if	0	;tblptru may be non-zero
  8260  0012E0                     	endif
  8261  0012E0  0008               	tblrd		*
  8262  0012E2  50F5               	movf	tablat,w,c
  8263                           
  8264                           ; Switch size 1, requested type "space"
  8265                           ; Number of cases is 1, Range of values is 48 to 48
  8266                           ; switch strategies available:
  8267                           ; Name         Instructions Cycles
  8268                           ; simple_byte            4     3 (average)
  8269                           ;	Chosen strategy is simple_byte
  8270  0012E4  0A30               	xorlw	48	; case 48
  8271  0012E6  B4D8               	btfsc	status,2,c
  8272  0012E8  D7F2               	goto	l4099
  8273                           
  8274                           ;doprnt.c: 585: break;
  8275  0012EA  D001               	goto	l4105
  8276                           
  8277                           ;doprnt.c: 586: }
  8278  0012EC  D7F5               	goto	l4103
  8279  0012EE                     l4105:
  8280                           
  8281                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  8282  0012EE  C00F  FFF6         	movff	sprintf@f,tblptrl
  8283  0012F2  C010  FFF7         	movff	sprintf@f+1,tblptrh
  8284  0012F6                     	if	0	;tblptru may be non-zero
  8285  0012F6                     	endif
  8286  0012F6                     	if	0	;tblptru may be non-zero
  8287  0012F6                     	endif
  8288  0012F6  0008               	tblrd		*
  8289  0012F8  50F5               	movf	tablat,w,c
  8290  0012FA  EC05  F01D         	call	_isdigit
  8291  0012FE  A0D8               	btfss	status,0,c
  8292  001300  D03A               	goto	l4121
  8293                           
  8294                           ;doprnt.c: 598: width = 0;
  8295  001302  0E00               	movlw	0
  8296  001304  6E22               	movwf	sprintf@width+1,c
  8297  001306  0E00               	movlw	0
  8298  001308  6E21               	movwf	sprintf@width,c
  8299  00130A  D000               	goto	l4109
  8300  00130C                     l4109:
  8301                           
  8302                           ;doprnt.c: 600: width *= 10;
  8303  00130C  C021  F001         	movff	sprintf@width,___wmul@multiplier
  8304  001310  C022  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  8305  001314  0E00               	movlw	0
  8306  001316  6E04               	movwf	___wmul@multiplicand+1,c
  8307  001318  0E0A               	movlw	10
  8308  00131A  6E03               	movwf	___wmul@multiplicand,c
  8309  00131C  ECA8  F01C         	call	___wmul	;wreg free
  8310  001320  C001  F021         	movff	?___wmul,sprintf@width
  8311  001324  C002  F022         	movff	?___wmul+1,sprintf@width+1
  8312                           
  8313                           ;doprnt.c: 601: width += *f++ - '0';
  8314  001328  0ED0               	movlw	208
  8315  00132A  6E17               	movwf	??_sprintf& (0+255),c
  8316  00132C  0EFF               	movlw	255
  8317  00132E  6E18               	movwf	(??_sprintf+1)& (0+255),c
  8318  001330  C00F  FFF6         	movff	sprintf@f,tblptrl
  8319  001334  C010  FFF7         	movff	sprintf@f+1,tblptrh
  8320  001338                     	if	0	;tblptru may be non-zero
  8321  001338                     	endif
  8322  001338                     	if	0	;tblptru may be non-zero
  8323  001338                     	endif
  8324  001338  0008               	tblrd		*
  8325  00133A  50F5               	movf	tablat,w,c
  8326  00133C  6E19               	movwf	(??_sprintf+2)& (0+255),c
  8327  00133E  6A1A               	clrf	(??_sprintf+3)& (0+255),c
  8328  001340  5017               	movf	??_sprintf,w,c
  8329  001342  2619               	addwf	??_sprintf+2,f,c
  8330  001344  5018               	movf	??_sprintf+1,w,c
  8331  001346  221A               	addwfc	??_sprintf+3,f,c
  8332  001348  5019               	movf	??_sprintf+2,w,c
  8333  00134A  2621               	addwf	sprintf@width,f,c
  8334  00134C  501A               	movf	??_sprintf+3,w,c
  8335  00134E  2222               	addwfc	sprintf@width+1,f,c
  8336  001350  4A0F               	infsnz	sprintf@f,f,c
  8337  001352  2A10               	incf	sprintf@f+1,f,c
  8338                           
  8339                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  8340  001354  C00F  FFF6         	movff	sprintf@f,tblptrl
  8341  001358  C010  FFF7         	movff	sprintf@f+1,tblptrh
  8342  00135C                     	if	0	;tblptru may be non-zero
  8343  00135C                     	endif
  8344  00135C                     	if	0	;tblptru may be non-zero
  8345  00135C                     	endif
  8346  00135C  0008               	tblrd		*
  8347  00135E  50F5               	movf	tablat,w,c
  8348  001360  EC05  F01D         	call	_isdigit
  8349  001364  A0D8               	btfss	status,0,c
  8350  001366  D007               	goto	l4121
  8351  001368  D7D1               	goto	l4109
  8352                           
  8353                           ;doprnt.c: 608: }
  8354                           ;doprnt.c: 635: switch(c = *f++) {
  8355  00136A  D005               	goto	l4121
  8356                           
  8357                           ;doprnt.c: 638: goto alldone;
  8358                           
  8359                           ;doprnt.c: 637: case 0:
  8360  00136C  D0C1               	goto	l4175
  8361                           
  8362                           ;doprnt.c: 813: continue;
  8363                           
  8364                           ;doprnt.c: 802: default:
  8365  00136E  D0B2               	goto	l4173
  8366  001370                     l4117:
  8367                           
  8368                           ;doprnt.c: 818: flag |= 0xC0;
  8369  001370  0EC0               	movlw	192
  8370  001372  121D               	iorwf	sprintf@flag,f,c
  8371                           
  8372                           ;doprnt.c: 822: }
  8373                           
  8374                           ;doprnt.c: 819: break;
  8375  001374  D011               	goto	l4123
  8376  001376                     l4121:
  8377  001376  C00F  FFF6         	movff	sprintf@f,tblptrl
  8378  00137A  C010  FFF7         	movff	sprintf@f+1,tblptrh
  8379  00137E  4A0F               	infsnz	sprintf@f,f,c
  8380  001380  2A10               	incf	sprintf@f+1,f,c
  8381  001382                     	if	0	;tblptru may be non-zero
  8382  001382                     	endif
  8383  001382                     	if	0	;tblptru may be non-zero
  8384  001382                     	endif
  8385  001382  0008               	tblrd		*
  8386  001384  CFF5 F023          	movff	tablat,sprintf@c
  8387  001388  5023               	movf	sprintf@c,w,c
  8388                           
  8389                           ; Switch size 1, requested type "space"
  8390                           ; Number of cases is 2, Range of values is 0 to 117
  8391                           ; switch strategies available:
  8392                           ; Name         Instructions Cycles
  8393                           ; simple_byte            7     4 (average)
  8394                           ;	Chosen strategy is simple_byte
  8395  00138A  0A00               	xorlw	0	; case 0
  8396  00138C  B4D8               	btfsc	status,2,c
  8397  00138E  D0B0               	goto	l4175
  8398  001390  0A75               	xorlw	117	; case 117
  8399  001392  B4D8               	btfsc	status,2,c
  8400  001394  D7ED               	goto	l4117
  8401  001396  D09E               	goto	l4173
  8402  001398                     l4123:
  8403                           
  8404                           ;doprnt.c: 1273: {
  8405                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  8406  001398  C01B  FFD9         	movff	sprintf@ap,fsr2l
  8407  00139C  C01C  FFDA         	movff	sprintf@ap+1,fsr2h
  8408  0013A0  CFDE F01E          	movff	postinc2,sprintf@val
  8409  0013A4  CFDD F01F          	movff	postdec2,sprintf@val+1
  8410  0013A8  0E02               	movlw	2
  8411  0013AA  261B               	addwf	sprintf@ap,f,c
  8412  0013AC  0E00               	movlw	0
  8413  0013AE  221C               	addwfc	sprintf@ap+1,f,c
  8414                           
  8415                           ;doprnt.c: 1287: }
  8416                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8417  0013B0  0E01               	movlw	1
  8418  0013B2  6E23               	movwf	sprintf@c,c
  8419  0013B4                     l4129:
  8420  0013B4  0E05               	movlw	5
  8421  0013B6  1823               	xorwf	sprintf@c,w,c
  8422  0013B8  B4D8               	btfsc	status,2,c
  8423  0013BA  D016               	goto	l4141
  8424  0013BC  D001               	goto	l4133
  8425  0013BE  D014               	goto	l4141
  8426  0013C0                     l4133:
  8427                           
  8428                           ;doprnt.c: 1306: if(val < dpowers[c])
  8429  0013C0  5023               	movf	sprintf@c,w,c
  8430  0013C2  0D02               	mullw	2
  8431  0013C4  0E01               	movlw	low _dpowers
  8432  0013C6  24F3               	addwf	prodl,w,c
  8433  0013C8  6EF6               	movwf	tblptrl,c
  8434  0013CA  0E0F               	movlw	high _dpowers
  8435  0013CC  20F4               	addwfc	prodh,w,c
  8436  0013CE  6EF7               	movwf	tblptrh,c
  8437  0013D0                     	if	0	;There are less than 3 active tblptr bytes
  8438  0013D0                     	endif
  8439  0013D0  0009               	tblrd		*+
  8440  0013D2  50F5               	movf	tablat,w,c
  8441  0013D4  5C1E               	subwf	sprintf@val,w,c
  8442  0013D6  0009               	tblrd		*+
  8443  0013D8  50F5               	movf	tablat,w,c
  8444  0013DA  581F               	subwfb	sprintf@val+1,w,c
  8445  0013DC  A0D8               	btfss	status,0,c
  8446  0013DE  D004               	goto	l4141
  8447  0013E0  D001               	goto	l4137
  8448                           
  8449                           ;doprnt.c: 1307: break;
  8450  0013E2  D002               	goto	l4141
  8451  0013E4                     l4137:
  8452  0013E4  2A23               	incf	sprintf@c,f,c
  8453  0013E6  D7E6               	goto	l4129
  8454  0013E8                     l4141:
  8455                           
  8456                           ;doprnt.c: 1381: if(width > c)
  8457  0013E8  0E80               	movlw	128
  8458  0013EA  BE23               	btfsc	sprintf@c,7,c
  8459  0013EC  0E7F               	movlw	127
  8460  0013EE  6E17               	movwf	??_sprintf& (0+255),c
  8461  0013F0  5021               	movf	sprintf@width,w,c
  8462  0013F2  5C23               	subwf	sprintf@c,w,c
  8463  0013F4  5022               	movf	sprintf@width+1,w,c
  8464  0013F6  0A80               	xorlw	128
  8465  0013F8  5817               	subwfb	??_sprintf& (0+255),w,c
  8466  0013FA  B0D8               	btfsc	status,0,c
  8467  0013FC  D007               	goto	l4145
  8468                           
  8469                           ;doprnt.c: 1382: width -= c;
  8470  0013FE  5023               	movf	sprintf@c,w,c
  8471  001400  5E21               	subwf	sprintf@width,f,c
  8472  001402  0E00               	movlw	0
  8473  001404  BE23               	btfsc	sprintf@c,7,c
  8474  001406  0EFF               	movlw	255
  8475  001408  5A22               	subwfb	sprintf@width+1,f,c
  8476  00140A  D005               	goto	l4147
  8477  00140C                     l4145:
  8478                           
  8479                           ;doprnt.c: 1383: else
  8480                           ;doprnt.c: 1384: width = 0;
  8481  00140C  0E00               	movlw	0
  8482  00140E  6E22               	movwf	sprintf@width+1,c
  8483  001410  0E00               	movlw	0
  8484  001412  6E21               	movwf	sprintf@width,c
  8485  001414  D000               	goto	l4147
  8486  001416                     l4147:
  8487                           
  8488                           ;doprnt.c: 1387: if(flag & 0x04) {
  8489  001416  A41D               	btfss	sprintf@flag,2,c
  8490  001418  D015               	goto	l4157
  8491                           
  8492                           ;doprnt.c: 1415: if(width)
  8493  00141A  5021               	movf	sprintf@width,w,c
  8494  00141C  1022               	iorwf	sprintf@width+1,w,c
  8495  00141E  B4D8               	btfsc	status,2,c
  8496  001420  D026               	goto	l997
  8497  001422                     l4151:
  8498                           
  8499                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  8500  001422  C00D  FFD9         	movff	sprintf@sp,fsr2l
  8501  001426  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  8502  00142A  0E30               	movlw	48
  8503  00142C  6EDF               	movwf	indf2,c
  8504  00142E  4A0D               	infsnz	sprintf@sp,f,c
  8505  001430  2A0E               	incf	sprintf@sp+1,f,c
  8506                           
  8507                           ;doprnt.c: 1418: while(--width);
  8508  001432  0621               	decf	sprintf@width,f,c
  8509  001434  A0D8               	btfss	status,0,c
  8510  001436  0622               	decf	sprintf@width+1,f,c
  8511  001438  5021               	movf	sprintf@width,w,c
  8512  00143A  1022               	iorwf	sprintf@width+1,w,c
  8513  00143C  B4D8               	btfsc	status,2,c
  8514  00143E  D017               	goto	l997
  8515  001440  D7F0               	goto	l4151
  8516                           
  8517                           ;doprnt.c: 1420: } else
  8518  001442  D015               	goto	l997
  8519  001444                     l4157:
  8520                           
  8521                           ;doprnt.c: 1422: {
  8522                           ;doprnt.c: 1424: if(width
  8523                           ;doprnt.c: 1428: )
  8524  001444  5021               	movf	sprintf@width,w,c
  8525  001446  1022               	iorwf	sprintf@width+1,w,c
  8526  001448  B4D8               	btfsc	status,2,c
  8527  00144A  D011               	goto	l997
  8528  00144C                     l4159:
  8529                           
  8530                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  8531  00144C  C00D  FFD9         	movff	sprintf@sp,fsr2l
  8532  001450  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  8533  001454  0E20               	movlw	32
  8534  001456  6EDF               	movwf	indf2,c
  8535  001458  4A0D               	infsnz	sprintf@sp,f,c
  8536  00145A  2A0E               	incf	sprintf@sp+1,f,c
  8537                           
  8538                           ;doprnt.c: 1431: while(--width);
  8539  00145C  0621               	decf	sprintf@width,f,c
  8540  00145E  A0D8               	btfss	status,0,c
  8541  001460  0622               	decf	sprintf@width+1,f,c
  8542  001462  5021               	movf	sprintf@width,w,c
  8543  001464  1022               	iorwf	sprintf@width+1,w,c
  8544  001466  B4D8               	btfsc	status,2,c
  8545  001468  D002               	goto	l997
  8546  00146A  D7F0               	goto	l4159
  8547  00146C  D000               	goto	l997
  8548  00146E                     l997:
  8549                           
  8550                           ;doprnt.c: 1469: }
  8551                           ;doprnt.c: 1472: prec = c;
  8552  00146E  C023  F020         	movff	sprintf@c,sprintf@prec
  8553                           
  8554                           ;doprnt.c: 1474: while(prec--) {
  8555  001472  D02A               	goto	l4171
  8556  001474                     l4165:
  8557                           
  8558                           ;doprnt.c: 1478: {
  8559                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8560  001474  5020               	movf	sprintf@prec,w,c
  8561  001476  0D02               	mullw	2
  8562  001478  0E01               	movlw	low _dpowers
  8563  00147A  24F3               	addwf	prodl,w,c
  8564  00147C  6EF6               	movwf	tblptrl,c
  8565  00147E  0E0F               	movlw	high _dpowers
  8566  001480  20F4               	addwfc	prodh,w,c
  8567  001482  6EF7               	movwf	tblptrh,c
  8568  001484                     	if	0	;There are less than 3 active tblptr bytes
  8569  001484                     	endif
  8570  001484  0009               	tblrd		*+
  8571  001486  CFF5 F003          	movff	tablat,___lwdiv@divisor
  8572  00148A  000A               	tblrd		*-
  8573  00148C  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  8574  001490  C01E  F001         	movff	sprintf@val,___lwdiv@dividend
  8575  001494  C01F  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  8576  001498  EC65  F01A         	call	___lwdiv	;wreg free
  8577  00149C  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  8578  0014A0  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  8579  0014A4  0E00               	movlw	0
  8580  0014A6  6E0B               	movwf	___lwmod@divisor+1,c
  8581  0014A8  0E0A               	movlw	10
  8582  0014AA  6E0A               	movwf	___lwmod@divisor,c
  8583  0014AC  EC0F  F01B         	call	___lwmod	;wreg free
  8584  0014B0  5008               	movf	?___lwmod,w,c
  8585  0014B2  0F30               	addlw	48
  8586  0014B4  6E23               	movwf	sprintf@c,c
  8587                           
  8588                           ;doprnt.c: 1523: }
  8589                           ;doprnt.c: 1524: ((*sp++ = (c)));
  8590  0014B6  C00D  FFD9         	movff	sprintf@sp,fsr2l
  8591  0014BA  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  8592  0014BE  C023  FFDF         	movff	sprintf@c,indf2
  8593  0014C2  4A0D               	infsnz	sprintf@sp,f,c
  8594  0014C4  2A0E               	incf	sprintf@sp+1,f,c
  8595  0014C6  D000               	goto	l4171
  8596  0014C8                     l4171:
  8597  0014C8  0620               	decf	sprintf@prec,f,c
  8598  0014CA  2820               	incf	sprintf@prec,w,c
  8599  0014CC  B4D8               	btfsc	status,2,c
  8600  0014CE  D002               	goto	l4173
  8601  0014D0  D7D1               	goto	l4165
  8602  0014D2  D000               	goto	l4173
  8603  0014D4                     l4173:
  8604  0014D4  C00F  FFF6         	movff	sprintf@f,tblptrl
  8605  0014D8  C010  FFF7         	movff	sprintf@f+1,tblptrh
  8606  0014DC  4A0F               	infsnz	sprintf@f,f,c
  8607  0014DE  2A10               	incf	sprintf@f+1,f,c
  8608  0014E0                     	if	0	;tblptru may be non-zero
  8609  0014E0                     	endif
  8610  0014E0                     	if	0	;tblptru may be non-zero
  8611  0014E0                     	endif
  8612  0014E0  0008               	tblrd		*
  8613  0014E2  CFF5 F023          	movff	tablat,sprintf@c
  8614  0014E6  5023               	movf	sprintf@c,w,c
  8615  0014E8  B4D8               	btfsc	status,2,c
  8616  0014EA  D002               	goto	l4175
  8617  0014EC  D6DC               	goto	l4091
  8618  0014EE  D000               	goto	l4175
  8619  0014F0                     l4175:
  8620                           
  8621                           ;doprnt.c: 1538: *sp = 0;
  8622  0014F0  C00D  FFD9         	movff	sprintf@sp,fsr2l
  8623  0014F4  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  8624  0014F8  0E00               	movlw	0
  8625  0014FA  6EDF               	movwf	indf2,c
  8626  0014FC  0012               	return	
  8627                           
  8628                           ;doprnt.c: 1540: return 0;
  8629                           ;	Return value of _sprintf is never used
  8630  0014FE  0012               	return		;funcret
  8631  001500                     __end_of_sprintf:
  8632                           	opt stack 0
  8633                           tblptru	equ	0xFF8
  8634                           tblptrh	equ	0xFF7
  8635                           tblptrl	equ	0xFF6
  8636                           tablat	equ	0xFF5
  8637                           prodh	equ	0xFF4
  8638                           prodl	equ	0xFF3
  8639                           postinc0	equ	0xFEE
  8640                           wreg	equ	0xFE8
  8641                           postdec1	equ	0xFE5
  8642                           fsr1l	equ	0xFE1
  8643                           indf2	equ	0xFDF
  8644                           postinc2	equ	0xFDE
  8645                           postdec2	equ	0xFDD
  8646                           fsr2h	equ	0xFDA
  8647                           fsr2l	equ	0xFD9
  8648                           status	equ	0xFD8
  8649                           
  8650 ;; *************** function _isdigit *****************
  8651 ;; Defined at:
  8652 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\isdigit.c"
  8653 ;; Parameters:    Size  Location     Type
  8654 ;;  c               1    wreg     unsigned char 
  8655 ;; Auto vars:     Size  Location     Type
  8656 ;;  c               1    2[COMRAM] unsigned char 
  8657 ;; Return value:  Size  Location     Type
  8658 ;;		None               void
  8659 ;; Registers used:
  8660 ;;		wreg, status,2, status,0
  8661 ;; Tracked objects:
  8662 ;;		On entry : 0/0
  8663 ;;		On exit  : 0/0
  8664 ;;		Unchanged: 0/0
  8665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8667 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8668 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8669 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8670 ;;Total ram usage:        3 bytes
  8671 ;; Hardware stack levels used:    1
  8672 ;; This function calls:
  8673 ;;		Nothing
  8674 ;; This function is called by:
  8675 ;;		_sprintf
  8676 ;; This function uses a non-reentrant model
  8677 ;;
  8678                           
  8679                           	psect	text49
  8680  003A0A                     __ptext49:
  8681                           	opt stack 0
  8682  003A0A                     _isdigit:
  8683                           	opt stack 27
  8684                           
  8685                           ;incstack = 0
  8686                           ;isdigit@c stored from wreg
  8687  003A0A  6E03               	movwf	isdigit@c,c
  8688  003A0C  0E00               	movlw	0
  8689  003A0E  6E02               	movwf	_isdigit$2793,c
  8690  003A10  0E3A               	movlw	58
  8691  003A12  6003               	cpfslt	isdigit@c,c
  8692  003A14  D006               	goto	l3959
  8693  003A16  0E2F               	movlw	47
  8694  003A18  6403               	cpfsgt	isdigit@c,c
  8695  003A1A  D003               	goto	l3959
  8696  003A1C  0E01               	movlw	1
  8697  003A1E  6E02               	movwf	_isdigit$2793,c
  8698  003A20  D000               	goto	l3959
  8699  003A22                     l3959:
  8700  003A22  C002  F001         	movff	_isdigit$2793,??_isdigit
  8701  003A26  3001               	rrcf	??_isdigit,w,c
  8702  003A28  0012               	return	
  8703  003A2A  0012               	return		;funcret
  8704  003A2C                     __end_of_isdigit:
  8705                           	opt stack 0
  8706                           tblptru	equ	0xFF8
  8707                           tblptrh	equ	0xFF7
  8708                           tblptrl	equ	0xFF6
  8709                           tablat	equ	0xFF5
  8710                           prodh	equ	0xFF4
  8711                           prodl	equ	0xFF3
  8712                           postinc0	equ	0xFEE
  8713                           wreg	equ	0xFE8
  8714                           postdec1	equ	0xFE5
  8715                           fsr1l	equ	0xFE1
  8716                           indf2	equ	0xFDF
  8717                           postinc2	equ	0xFDE
  8718                           postdec2	equ	0xFDD
  8719                           fsr2h	equ	0xFDA
  8720                           fsr2l	equ	0xFD9
  8721                           status	equ	0xFD8
  8722                           
  8723 ;; *************** function ___wmul *****************
  8724 ;; Defined at:
  8725 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\Umul16.c"
  8726 ;; Parameters:    Size  Location     Type
  8727 ;;  multiplier      2    0[COMRAM] unsigned int 
  8728 ;;  multiplicand    2    2[COMRAM] unsigned int 
  8729 ;; Auto vars:     Size  Location     Type
  8730 ;;  product         2    4[COMRAM] unsigned int 
  8731 ;; Return value:  Size  Location     Type
  8732 ;;                  2    0[COMRAM] unsigned int 
  8733 ;; Registers used:
  8734 ;;		wreg, status,2, status,0, prodl, prodh
  8735 ;; Tracked objects:
  8736 ;;		On entry : 0/0
  8737 ;;		On exit  : 0/0
  8738 ;;		Unchanged: 0/0
  8739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8740 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8741 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8743 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8744 ;;Total ram usage:        6 bytes
  8745 ;; Hardware stack levels used:    1
  8746 ;; This function calls:
  8747 ;;		Nothing
  8748 ;; This function is called by:
  8749 ;;		_sprintf
  8750 ;;		_eval_poly
  8751 ;; This function uses a non-reentrant model
  8752 ;;
  8753                           
  8754                           	psect	text50
  8755  003950                     __ptext50:
  8756                           	opt stack 0
  8757  003950                     ___wmul:
  8758                           	opt stack 27
  8759                           
  8760                           ;incstack = 0
  8761  003950  5001               	movf	___wmul@multiplier,w,c
  8762  003952  0203               	mulwf	___wmul@multiplicand,c
  8763  003954  CFF3 F005          	movff	prodl,___wmul@product
  8764  003958  CFF4 F006          	movff	prodh,___wmul@product+1
  8765  00395C  5001               	movf	___wmul@multiplier,w,c
  8766  00395E  0204               	mulwf	___wmul@multiplicand+1,c
  8767  003960  50F3               	movf	prodl,w,c
  8768  003962  2606               	addwf	___wmul@product+1,f,c
  8769  003964  5002               	movf	___wmul@multiplier+1,w,c
  8770  003966  0203               	mulwf	___wmul@multiplicand,c
  8771  003968  50F3               	movf	prodl,w,c
  8772  00396A  2606               	addwf	___wmul@product+1,f,c
  8773  00396C  C005  F001         	movff	___wmul@product,?___wmul
  8774  003970  C006  F002         	movff	___wmul@product+1,?___wmul+1
  8775  003974  0012               	return	
  8776  003976  0012               	return		;funcret
  8777  003978                     __end_of___wmul:
  8778                           	opt stack 0
  8779                           tblptru	equ	0xFF8
  8780                           tblptrh	equ	0xFF7
  8781                           tblptrl	equ	0xFF6
  8782                           tablat	equ	0xFF5
  8783                           prodh	equ	0xFF4
  8784                           prodl	equ	0xFF3
  8785                           postinc0	equ	0xFEE
  8786                           wreg	equ	0xFE8
  8787                           postdec1	equ	0xFE5
  8788                           fsr1l	equ	0xFE1
  8789                           indf2	equ	0xFDF
  8790                           postinc2	equ	0xFDE
  8791                           postdec2	equ	0xFDD
  8792                           fsr2h	equ	0xFDA
  8793                           fsr2l	equ	0xFD9
  8794                           status	equ	0xFD8
  8795                           
  8796 ;; *************** function ___lwmod *****************
  8797 ;; Defined at:
  8798 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lwmod.c"
  8799 ;; Parameters:    Size  Location     Type
  8800 ;;  dividend        2    7[COMRAM] unsigned int 
  8801 ;;  divisor         2    9[COMRAM] unsigned int 
  8802 ;; Auto vars:     Size  Location     Type
  8803 ;;  counter         1   11[COMRAM] unsigned char 
  8804 ;; Return value:  Size  Location     Type
  8805 ;;                  2    7[COMRAM] unsigned int 
  8806 ;; Registers used:
  8807 ;;		wreg, status,2, status,0
  8808 ;; Tracked objects:
  8809 ;;		On entry : 0/0
  8810 ;;		On exit  : 0/0
  8811 ;;		Unchanged: 0/0
  8812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8813 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8814 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8816 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8817 ;;Total ram usage:        5 bytes
  8818 ;; Hardware stack levels used:    1
  8819 ;; This function calls:
  8820 ;;		Nothing
  8821 ;; This function is called by:
  8822 ;;		_sprintf
  8823 ;; This function uses a non-reentrant model
  8824 ;;
  8825                           
  8826                           	psect	text51
  8827  00361E                     __ptext51:
  8828                           	opt stack 0
  8829  00361E                     ___lwmod:
  8830                           	opt stack 27
  8831                           
  8832                           ;incstack = 0
  8833  00361E  500A               	movf	___lwmod@divisor,w,c
  8834  003620  100B               	iorwf	___lwmod@divisor+1,w,c
  8835  003622  B4D8               	btfsc	status,2,c
  8836  003624  D01D               	goto	l1651
  8837  003626  0E01               	movlw	1
  8838  003628  6E0C               	movwf	___lwmod@counter,c
  8839  00362A  D005               	goto	l4001
  8840  00362C                     l3999:
  8841  00362C  90D8               	bcf	status,0,c
  8842  00362E  360A               	rlcf	___lwmod@divisor,f,c
  8843  003630  360B               	rlcf	___lwmod@divisor+1,f,c
  8844  003632  2A0C               	incf	___lwmod@counter,f,c
  8845  003634  D000               	goto	l4001
  8846  003636                     l4001:
  8847  003636  BE0B               	btfsc	___lwmod@divisor+1,7,c
  8848  003638  D002               	goto	l4003
  8849  00363A  D7F8               	goto	l3999
  8850  00363C  D000               	goto	l4003
  8851  00363E                     l4003:
  8852  00363E  500A               	movf	___lwmod@divisor,w,c
  8853  003640  5C08               	subwf	___lwmod@dividend,w,c
  8854  003642  500B               	movf	___lwmod@divisor+1,w,c
  8855  003644  5809               	subwfb	___lwmod@dividend+1,w,c
  8856  003646  A0D8               	btfss	status,0,c
  8857  003648  D005               	goto	l4007
  8858  00364A  500A               	movf	___lwmod@divisor,w,c
  8859  00364C  5E08               	subwf	___lwmod@dividend,f,c
  8860  00364E  500B               	movf	___lwmod@divisor+1,w,c
  8861  003650  5A09               	subwfb	___lwmod@dividend+1,f,c
  8862  003652  D000               	goto	l4007
  8863  003654                     l4007:
  8864  003654  90D8               	bcf	status,0,c
  8865  003656  320B               	rrcf	___lwmod@divisor+1,f,c
  8866  003658  320A               	rrcf	___lwmod@divisor,f,c
  8867  00365A  2E0C               	decfsz	___lwmod@counter,f,c
  8868  00365C  D7F0               	goto	l4003
  8869  00365E  D000               	goto	l1651
  8870  003660                     l1651:
  8871  003660  C008  F008         	movff	___lwmod@dividend,?___lwmod
  8872  003664  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  8873  003668  0012               	return		;funcret
  8874  00366A                     __end_of___lwmod:
  8875                           	opt stack 0
  8876                           tblptru	equ	0xFF8
  8877                           tblptrh	equ	0xFF7
  8878                           tblptrl	equ	0xFF6
  8879                           tablat	equ	0xFF5
  8880                           prodh	equ	0xFF4
  8881                           prodl	equ	0xFF3
  8882                           postinc0	equ	0xFEE
  8883                           wreg	equ	0xFE8
  8884                           postdec1	equ	0xFE5
  8885                           fsr1l	equ	0xFE1
  8886                           indf2	equ	0xFDF
  8887                           postinc2	equ	0xFDE
  8888                           postdec2	equ	0xFDD
  8889                           fsr2h	equ	0xFDA
  8890                           fsr2l	equ	0xFD9
  8891                           status	equ	0xFD8
  8892                           
  8893 ;; *************** function ___lwdiv *****************
  8894 ;; Defined at:
  8895 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  8896 ;; Parameters:    Size  Location     Type
  8897 ;;  dividend        2    0[COMRAM] unsigned int 
  8898 ;;  divisor         2    2[COMRAM] unsigned int 
  8899 ;; Auto vars:     Size  Location     Type
  8900 ;;  quotient        2    4[COMRAM] unsigned int 
  8901 ;;  counter         1    6[COMRAM] unsigned char 
  8902 ;; Return value:  Size  Location     Type
  8903 ;;                  2    0[COMRAM] unsigned int 
  8904 ;; Registers used:
  8905 ;;		wreg, status,2, status,0
  8906 ;; Tracked objects:
  8907 ;;		On entry : 0/0
  8908 ;;		On exit  : 0/0
  8909 ;;		Unchanged: 0/0
  8910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8911 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8912 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8914 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8915 ;;Total ram usage:        7 bytes
  8916 ;; Hardware stack levels used:    1
  8917 ;; This function calls:
  8918 ;;		Nothing
  8919 ;; This function is called by:
  8920 ;;		_sprintf
  8921 ;; This function uses a non-reentrant model
  8922 ;;
  8923                           
  8924                           	psect	text52
  8925  0034CA                     __ptext52:
  8926                           	opt stack 0
  8927  0034CA                     ___lwdiv:
  8928                           	opt stack 27
  8929                           
  8930                           ;incstack = 0
  8931  0034CA  0E00               	movlw	0
  8932  0034CC  6E06               	movwf	___lwdiv@quotient+1,c
  8933  0034CE  0E00               	movlw	0
  8934  0034D0  6E05               	movwf	___lwdiv@quotient,c
  8935  0034D2  5003               	movf	___lwdiv@divisor,w,c
  8936  0034D4  1004               	iorwf	___lwdiv@divisor+1,w,c
  8937  0034D6  B4D8               	btfsc	status,2,c
  8938  0034D8  D021               	goto	l1641
  8939  0034DA  0E01               	movlw	1
  8940  0034DC  6E07               	movwf	___lwdiv@counter,c
  8941  0034DE  D005               	goto	l3981
  8942  0034E0                     l3979:
  8943  0034E0  90D8               	bcf	status,0,c
  8944  0034E2  3603               	rlcf	___lwdiv@divisor,f,c
  8945  0034E4  3604               	rlcf	___lwdiv@divisor+1,f,c
  8946  0034E6  2A07               	incf	___lwdiv@counter,f,c
  8947  0034E8  D000               	goto	l3981
  8948  0034EA                     l3981:
  8949  0034EA  BE04               	btfsc	___lwdiv@divisor+1,7,c
  8950  0034EC  D002               	goto	l3983
  8951  0034EE  D7F8               	goto	l3979
  8952  0034F0  D000               	goto	l3983
  8953  0034F2                     l3983:
  8954  0034F2  90D8               	bcf	status,0,c
  8955  0034F4  3605               	rlcf	___lwdiv@quotient,f,c
  8956  0034F6  3606               	rlcf	___lwdiv@quotient+1,f,c
  8957  0034F8  5003               	movf	___lwdiv@divisor,w,c
  8958  0034FA  5C01               	subwf	___lwdiv@dividend,w,c
  8959  0034FC  5004               	movf	___lwdiv@divisor+1,w,c
  8960  0034FE  5802               	subwfb	___lwdiv@dividend+1,w,c
  8961  003500  A0D8               	btfss	status,0,c
  8962  003502  D006               	goto	l3991
  8963  003504  5003               	movf	___lwdiv@divisor,w,c
  8964  003506  5E01               	subwf	___lwdiv@dividend,f,c
  8965  003508  5004               	movf	___lwdiv@divisor+1,w,c
  8966  00350A  5A02               	subwfb	___lwdiv@dividend+1,f,c
  8967  00350C  8005               	bsf	___lwdiv@quotient,0,c
  8968  00350E  D000               	goto	l3991
  8969  003510                     l3991:
  8970  003510  90D8               	bcf	status,0,c
  8971  003512  3204               	rrcf	___lwdiv@divisor+1,f,c
  8972  003514  3203               	rrcf	___lwdiv@divisor,f,c
  8973  003516  2E07               	decfsz	___lwdiv@counter,f,c
  8974  003518  D7EC               	goto	l3983
  8975  00351A  D000               	goto	l1641
  8976  00351C                     l1641:
  8977  00351C  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  8978  003520  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8979  003524  0012               	return		;funcret
  8980  003526                     __end_of___lwdiv:
  8981                           	opt stack 0
  8982                           tblptru	equ	0xFF8
  8983                           tblptrh	equ	0xFF7
  8984                           tblptrl	equ	0xFF6
  8985                           tablat	equ	0xFF5
  8986                           prodh	equ	0xFF4
  8987                           prodl	equ	0xFF3
  8988                           postinc0	equ	0xFEE
  8989                           wreg	equ	0xFE8
  8990                           postdec1	equ	0xFE5
  8991                           fsr1l	equ	0xFE1
  8992                           indf2	equ	0xFDF
  8993                           postinc2	equ	0xFDE
  8994                           postdec2	equ	0xFDD
  8995                           fsr2h	equ	0xFDA
  8996                           fsr2l	equ	0xFD9
  8997                           status	equ	0xFD8
  8998                           
  8999 ;; *************** function _lcd_putrs *****************
  9000 ;; Defined at:
  9001 ;;		line 221 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  9002 ;; Parameters:    Size  Location     Type
  9003 ;;  ptr             2    8[COMRAM] PTR const unsigned char 
  9004 ;;		 -> STR_29(2), STR_27(6), STR_25(9), STR_24(14), 
  9005 ;;		 -> STR_23(14), STR_22(16), STR_21(15), STR_20(8), 
  9006 ;;		 -> STR_19(13), STR_18(8), STR_17(4), STR_16(3), 
  9007 ;;		 -> STR_15(11), STR_14(11), STR_13(10), buffer2(20), 
  9008 ;; Auto vars:     Size  Location     Type
  9009 ;;		None
  9010 ;; Return value:  Size  Location     Type
  9011 ;;		None               void
  9012 ;; Registers used:
  9013 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9014 ;; Tracked objects:
  9015 ;;		On entry : 0/0
  9016 ;;		On exit  : 0/0
  9017 ;;		Unchanged: 0/0
  9018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9019 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9022 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9023 ;;Total ram usage:        2 bytes
  9024 ;; Hardware stack levels used:    1
  9025 ;; Hardware stack levels required when called:    4
  9026 ;; This function calls:
  9027 ;;		_lcd_putc
  9028 ;; This function is called by:
  9029 ;;		_read_keyboard
  9030 ;;		_write_Date
  9031 ;;		_set_desactive_vision
  9032 ;;		_twinkle
  9033 ;;		_set_vision
  9034 ;;		_show_success
  9035 ;;		_show_error
  9036 ;;		_ver_opcion_cambio
  9037 ;;		_ver_info
  9038 ;; This function uses a non-reentrant model
  9039 ;;
  9040                           
  9041                           	psect	text53
  9042  00357E                     __ptext53:
  9043                           	opt stack 0
  9044  00357E                     _lcd_putrs:
  9045                           	opt stack 24
  9046                           
  9047                           ;unmc_lcd_216.c: 223: while(*ptr){
  9048                           
  9049                           ;incstack = 0
  9050  00357E  D015               	goto	l4087
  9051  003580                     l4083:
  9052                           
  9053                           ;unmc_lcd_216.c: 224: lcd_putc(*ptr++);
  9054  003580  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  9055  003584  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  9056  003588  6AF8               	clrf	tblptru,c
  9057  00358A  0E0E               	movlw	(high __ramtop+-1)
  9058  00358C  64F7               	cpfsgt	tblptrh,c
  9059  00358E  D003               	bra	u3347
  9060  003590  0008               	tblrd		*
  9061  003592  50F5               	movf	tablat,w,c
  9062  003594  D005               	bra	u3340
  9063  003596                     u3347:
  9064  003596  CFF6 FFE9          	movff	tblptrl,fsr0l
  9065  00359A  CFF7 FFEA          	movff	tblptrh,fsr0h
  9066  00359E  50EF               	movf	indf0,w,c
  9067  0035A0                     u3340:
  9068  0035A0  EC35  F01B         	call	_lcd_putc
  9069  0035A4  4A09               	infsnz	lcd_putrs@ptr,f,c
  9070  0035A6  2A0A               	incf	lcd_putrs@ptr+1,f,c
  9071  0035A8  D000               	goto	l4087
  9072  0035AA                     l4087:
  9073  0035AA  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  9074  0035AE  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  9075  0035B2  6AF8               	clrf	tblptru,c
  9076  0035B4  0E0E               	movlw	(high __ramtop+-1)
  9077  0035B6  64F7               	cpfsgt	tblptrh,c
  9078  0035B8  D003               	bra	u3357
  9079  0035BA  0008               	tblrd		*
  9080  0035BC  50F5               	movf	tablat,w,c
  9081  0035BE  D005               	bra	u3350
  9082  0035C0                     u3357:
  9083  0035C0  CFF6 FFE9          	movff	tblptrl,fsr0l
  9084  0035C4  CFF7 FFEA          	movff	tblptrh,fsr0h
  9085  0035C8  50EF               	movf	indf0,w,c
  9086  0035CA                     u3350:
  9087  0035CA  0900               	iorlw	0
  9088  0035CC  A4D8               	btfss	status,2,c
  9089  0035CE  D7D8               	goto	l4083
  9090  0035D0  0012               	return		;funcret
  9091  0035D2                     __end_of_lcd_putrs:
  9092                           	opt stack 0
  9093                           tblptru	equ	0xFF8
  9094                           tblptrh	equ	0xFF7
  9095                           tblptrl	equ	0xFF6
  9096                           tablat	equ	0xFF5
  9097                           prodh	equ	0xFF4
  9098                           prodl	equ	0xFF3
  9099                           indf0	equ	0xFEF
  9100                           postinc0	equ	0xFEE
  9101                           fsr0h	equ	0xFEA
  9102                           fsr0l	equ	0xFE9
  9103                           wreg	equ	0xFE8
  9104                           postdec1	equ	0xFE5
  9105                           fsr1l	equ	0xFE1
  9106                           indf2	equ	0xFDF
  9107                           postinc2	equ	0xFDE
  9108                           postdec2	equ	0xFDD
  9109                           fsr2h	equ	0xFDA
  9110                           fsr2l	equ	0xFD9
  9111                           status	equ	0xFD8
  9112                           
  9113 ;; *************** function _lcd_putc *****************
  9114 ;; Defined at:
  9115 ;;		line 172 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  9116 ;; Parameters:    Size  Location     Type
  9117 ;;  c               1    wreg     unsigned char 
  9118 ;; Auto vars:     Size  Location     Type
  9119 ;;  c               1    7[COMRAM] unsigned char 
  9120 ;; Return value:  Size  Location     Type
  9121 ;;		None               void
  9122 ;; Registers used:
  9123 ;;		wreg, status,2, status,0, cstack
  9124 ;; Tracked objects:
  9125 ;;		On entry : 0/0
  9126 ;;		On exit  : 0/0
  9127 ;;		Unchanged: 0/0
  9128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9130 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9132 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9133 ;;Total ram usage:        1 bytes
  9134 ;; Hardware stack levels used:    1
  9135 ;; Hardware stack levels required when called:    3
  9136 ;; This function calls:
  9137 ;;		_lcd_gotoxy
  9138 ;;		_lcd_send_byte
  9139 ;; This function is called by:
  9140 ;;		_lcd_putrs
  9141 ;;		_lcd_puts
  9142 ;; This function uses a non-reentrant model
  9143 ;;
  9144                           
  9145                           	psect	text54
  9146  00366A                     __ptext54:
  9147                           	opt stack 0
  9148  00366A                     _lcd_putc:
  9149                           	opt stack 24
  9150                           
  9151                           ;incstack = 0
  9152                           ;lcd_putc@c stored from wreg
  9153  00366A  6E08               	movwf	lcd_putc@c,c
  9154                           
  9155                           ;unmc_lcd_216.c: 173: switch(c){
  9156  00366C  D018               	goto	l3939
  9157  00366E                     l3929:
  9158                           
  9159                           ;unmc_lcd_216.c: 175: lcd_send_byte(0,1);
  9160  00366E  0E01               	movlw	1
  9161  003670  6E03               	movwf	lcd_send_byte@n,c
  9162  003672  0E00               	movlw	0
  9163  003674  EC32  F01C         	call	_lcd_send_byte
  9164                           
  9165                           ;unmc_lcd_216.c: 176: break;
  9166  003678  0012               	return	
  9167  00367A                     l3931:
  9168                           
  9169                           ;unmc_lcd_216.c: 178: lcd_gotoxy(1,2);
  9170  00367A  0E02               	movlw	2
  9171  00367C  6E05               	movwf	lcd_gotoxy@y,c
  9172  00367E  0E01               	movlw	1
  9173  003680  ECF3  F01C         	call	_lcd_gotoxy
  9174                           
  9175                           ;unmc_lcd_216.c: 179: break;
  9176  003684  0012               	return	
  9177  003686                     l3933:
  9178                           
  9179                           ;unmc_lcd_216.c: 181: lcd_send_byte(0,0x10);
  9180  003686  0E10               	movlw	16
  9181  003688  6E03               	movwf	lcd_send_byte@n,c
  9182  00368A  0E00               	movlw	0
  9183  00368C  EC32  F01C         	call	_lcd_send_byte
  9184                           
  9185                           ;unmc_lcd_216.c: 182: break;
  9186  003690  0012               	return	
  9187  003692                     l3935:
  9188                           
  9189                           ;unmc_lcd_216.c: 184: lcd_send_byte(1,c);
  9190  003692  C008  F003         	movff	lcd_putc@c,lcd_send_byte@n
  9191  003696  0E01               	movlw	1
  9192  003698  EC32  F01C         	call	_lcd_send_byte
  9193                           
  9194                           ;unmc_lcd_216.c: 186: }
  9195                           
  9196                           ;unmc_lcd_216.c: 185: break;
  9197  00369C  0012               	return	
  9198  00369E                     l3939:
  9199  00369E  5008               	movf	lcd_putc@c,w,c
  9200                           
  9201                           ; Switch size 1, requested type "space"
  9202                           ; Number of cases is 3, Range of values is 8 to 12
  9203                           ; switch strategies available:
  9204                           ; Name         Instructions Cycles
  9205                           ; simple_byte           10     6 (average)
  9206                           ;	Chosen strategy is simple_byte
  9207  0036A0  0A08               	xorlw	8	; case 8
  9208  0036A2  B4D8               	btfsc	status,2,c
  9209  0036A4  D7F0               	goto	l3933
  9210  0036A6  0A02               	xorlw	2	; case 10
  9211  0036A8  B4D8               	btfsc	status,2,c
  9212  0036AA  D7E7               	goto	l3931
  9213  0036AC  0A06               	xorlw	6	; case 12
  9214  0036AE  B4D8               	btfsc	status,2,c
  9215  0036B0  D7DE               	goto	l3929
  9216  0036B2  D7EF               	goto	l3935
  9217  0036B4  0012               	return		;funcret
  9218  0036B6                     __end_of_lcd_putc:
  9219                           	opt stack 0
  9220                           tblptru	equ	0xFF8
  9221                           tblptrh	equ	0xFF7
  9222                           tblptrl	equ	0xFF6
  9223                           tablat	equ	0xFF5
  9224                           prodh	equ	0xFF4
  9225                           prodl	equ	0xFF3
  9226                           indf0	equ	0xFEF
  9227                           postinc0	equ	0xFEE
  9228                           fsr0h	equ	0xFEA
  9229                           fsr0l	equ	0xFE9
  9230                           wreg	equ	0xFE8
  9231                           postdec1	equ	0xFE5
  9232                           fsr1l	equ	0xFE1
  9233                           indf2	equ	0xFDF
  9234                           postinc2	equ	0xFDE
  9235                           postdec2	equ	0xFDD
  9236                           fsr2h	equ	0xFDA
  9237                           fsr2l	equ	0xFD9
  9238                           status	equ	0xFD8
  9239                           
  9240 ;; *************** function _lcd_gotoxy *****************
  9241 ;; Defined at:
  9242 ;;		line 158 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  9243 ;; Parameters:    Size  Location     Type
  9244 ;;  x               1    wreg     unsigned char 
  9245 ;;  y               1    4[COMRAM] unsigned char 
  9246 ;; Auto vars:     Size  Location     Type
  9247 ;;  x               1    5[COMRAM] unsigned char 
  9248 ;;  address         1    6[COMRAM] unsigned char 
  9249 ;; Return value:  Size  Location     Type
  9250 ;;		None               void
  9251 ;; Registers used:
  9252 ;;		wreg, status,2, status,0, cstack
  9253 ;; Tracked objects:
  9254 ;;		On entry : 0/0
  9255 ;;		On exit  : 0/0
  9256 ;;		Unchanged: 0/0
  9257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9258 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9259 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9261 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9262 ;;Total ram usage:        3 bytes
  9263 ;; Hardware stack levels used:    1
  9264 ;; Hardware stack levels required when called:    2
  9265 ;; This function calls:
  9266 ;;		_lcd_send_byte
  9267 ;; This function is called by:
  9268 ;;		_lcd_putc
  9269 ;;		_configurar_reloj
  9270 ;;		_write_Date
  9271 ;;		_next_code
  9272 ;;		_set_desactive_vision
  9273 ;;		_twinkle
  9274 ;;		_set_vision
  9275 ;;		_input_old_pass
  9276 ;;		_show_success
  9277 ;;		_show_error
  9278 ;;		_input_new_pass
  9279 ;;		_ver_opcion_cambio
  9280 ;;		_ver_info
  9281 ;; This function uses a non-reentrant model
  9282 ;;
  9283                           
  9284                           	psect	text55
  9285  0039E6                     __ptext55:
  9286                           	opt stack 0
  9287  0039E6                     _lcd_gotoxy:
  9288                           	opt stack 24
  9289                           
  9290                           ;incstack = 0
  9291                           ;lcd_gotoxy@x stored from wreg
  9292  0039E6  6E06               	movwf	lcd_gotoxy@x,c
  9293                           
  9294                           ;unmc_lcd_216.c: 159: int8 address;
  9295                           ;unmc_lcd_216.c: 161: if(y != 1)
  9296  0039E8  0405               	decf	lcd_gotoxy@y,w,c
  9297  0039EA  B4D8               	btfsc	status,2,c
  9298  0039EC  D002               	goto	l3785
  9299                           
  9300                           ;unmc_lcd_216.c: 162: address = 0x40;
  9301  0039EE  0E40               	movlw	64
  9302  0039F0  D001               	goto	L6
  9303  0039F2                     l3785:
  9304                           
  9305                           ;unmc_lcd_216.c: 163: else
  9306                           ;unmc_lcd_216.c: 164: address=0;
  9307  0039F2  0E00               	movlw	0
  9308  0039F4                     L6:
  9309  0039F4  6E07               	movwf	lcd_gotoxy@address,c
  9310  0039F6  D000               	goto	l3787
  9311  0039F8                     l3787:
  9312                           
  9313                           ;unmc_lcd_216.c: 166: address += x-1;
  9314  0039F8  0406               	decf	lcd_gotoxy@x,w,c
  9315  0039FA  2607               	addwf	lcd_gotoxy@address,f,c
  9316                           
  9317                           ;unmc_lcd_216.c: 167: lcd_send_byte(0, 0x80 | address);
  9318  0039FC  5007               	movf	lcd_gotoxy@address,w,c
  9319  0039FE  0980               	iorlw	128
  9320  003A00  6E03               	movwf	lcd_send_byte@n,c
  9321  003A02  0E00               	movlw	0
  9322  003A04  EC32  F01C         	call	_lcd_send_byte
  9323  003A08  0012               	return		;funcret
  9324  003A0A                     __end_of_lcd_gotoxy:
  9325                           	opt stack 0
  9326                           tblptru	equ	0xFF8
  9327                           tblptrh	equ	0xFF7
  9328                           tblptrl	equ	0xFF6
  9329                           tablat	equ	0xFF5
  9330                           prodh	equ	0xFF4
  9331                           prodl	equ	0xFF3
  9332                           indf0	equ	0xFEF
  9333                           postinc0	equ	0xFEE
  9334                           fsr0h	equ	0xFEA
  9335                           fsr0l	equ	0xFE9
  9336                           wreg	equ	0xFE8
  9337                           postdec1	equ	0xFE5
  9338                           fsr1l	equ	0xFE1
  9339                           indf2	equ	0xFDF
  9340                           postinc2	equ	0xFDE
  9341                           postdec2	equ	0xFDD
  9342                           fsr2h	equ	0xFDA
  9343                           fsr2l	equ	0xFD9
  9344                           status	equ	0xFD8
  9345                           
  9346 ;; *************** function _evalueChanceOfRaw *****************
  9347 ;; Defined at:
  9348 ;;		line 5 in file "reloj.c"
  9349 ;; Parameters:    Size  Location     Type
  9350 ;;  x               2    0[COMRAM] PTR unsigned char 
  9351 ;;		 -> configurar_reloj@x(1), 
  9352 ;;  y               2    2[COMRAM] PTR unsigned char 
  9353 ;;		 -> configurar_reloj@y(1), 
  9354 ;; Auto vars:     Size  Location     Type
  9355 ;;		None
  9356 ;; Return value:  Size  Location     Type
  9357 ;;		None               void
  9358 ;; Registers used:
  9359 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9360 ;; Tracked objects:
  9361 ;;		On entry : 0/0
  9362 ;;		On exit  : 0/0
  9363 ;;		Unchanged: 0/0
  9364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9365 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9367 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9368 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9369 ;;Total ram usage:        5 bytes
  9370 ;; Hardware stack levels used:    1
  9371 ;; This function calls:
  9372 ;;		Nothing
  9373 ;; This function is called by:
  9374 ;;		_configurar_reloj
  9375 ;; This function uses a non-reentrant model
  9376 ;;
  9377                           
  9378                           	psect	text56
  9379  0033AA                     __ptext56:
  9380                           	opt stack 0
  9381  0033AA                     _evalueChanceOfRaw:
  9382                           	opt stack 28
  9383                           
  9384                           ;reloj.c: 6: if (*x > 16){
  9385                           
  9386                           ;incstack = 0
  9387  0033AA  C001  FFD9         	movff	evalueChanceOfRaw@x,fsr2l
  9388  0033AE  C002  FFDA         	movff	evalueChanceOfRaw@x+1,fsr2h
  9389  0033B2  0E10               	movlw	16
  9390  0033B4  64DF               	cpfsgt	indf2,c
  9391  0033B6  D00D               	goto	l4721
  9392                           
  9393                           ;reloj.c: 7: *x = 2;
  9394  0033B8  C001  FFD9         	movff	evalueChanceOfRaw@x,fsr2l
  9395  0033BC  C002  FFDA         	movff	evalueChanceOfRaw@x+1,fsr2h
  9396  0033C0  0E02               	movlw	2
  9397  0033C2  6EDF               	movwf	indf2,c
  9398                           
  9399                           ;reloj.c: 8: *y = 2;
  9400  0033C4  C003  FFD9         	movff	evalueChanceOfRaw@y,fsr2l
  9401  0033C8  C004  FFDA         	movff	evalueChanceOfRaw@y+1,fsr2h
  9402  0033CC  0E02               	movlw	2
  9403  0033CE  6EDF               	movwf	indf2,c
  9404  0033D0  D000               	goto	l4721
  9405  0033D2                     l4721:
  9406                           
  9407                           ;reloj.c: 9: }
  9408                           ;reloj.c: 11: if(*y == 2 && *x > 5){
  9409  0033D2  C003  FFD9         	movff	evalueChanceOfRaw@y,fsr2l
  9410  0033D6  C004  FFDA         	movff	evalueChanceOfRaw@y+1,fsr2h
  9411  0033DA  0E02               	movlw	2
  9412  0033DC  18DE               	xorwf	postinc2,w,c
  9413  0033DE  A4D8               	btfss	status,2,c
  9414  0033E0  0012               	return	
  9415  0033E2  C001  FFD9         	movff	evalueChanceOfRaw@x,fsr2l
  9416  0033E6  C002  FFDA         	movff	evalueChanceOfRaw@x+1,fsr2h
  9417  0033EA  0E05               	movlw	5
  9418  0033EC  64DF               	cpfsgt	indf2,c
  9419  0033EE  0012               	return	
  9420                           
  9421                           ;reloj.c: 13: *y = 1;
  9422  0033F0  C003  FFD9         	movff	evalueChanceOfRaw@y,fsr2l
  9423  0033F4  C004  FFDA         	movff	evalueChanceOfRaw@y+1,fsr2h
  9424  0033F8  0E01               	movlw	1
  9425  0033FA  6EDF               	movwf	indf2,c
  9426                           
  9427                           ;reloj.c: 14: *x = 10;
  9428  0033FC  C001  FFD9         	movff	evalueChanceOfRaw@x,fsr2l
  9429  003400  C002  FFDA         	movff	evalueChanceOfRaw@x+1,fsr2h
  9430  003404  0E0A               	movlw	10
  9431  003406  6EDF               	movwf	indf2,c
  9432  003408  0012               	return	
  9433  00340A  0012               	return		;funcret
  9434  00340C                     __end_of_evalueChanceOfRaw:
  9435                           	opt stack 0
  9436                           tblptru	equ	0xFF8
  9437                           tblptrh	equ	0xFF7
  9438                           tblptrl	equ	0xFF6
  9439                           tablat	equ	0xFF5
  9440                           prodh	equ	0xFF4
  9441                           prodl	equ	0xFF3
  9442                           indf0	equ	0xFEF
  9443                           postinc0	equ	0xFEE
  9444                           fsr0h	equ	0xFEA
  9445                           fsr0l	equ	0xFE9
  9446                           wreg	equ	0xFE8
  9447                           postdec1	equ	0xFE5
  9448                           fsr1l	equ	0xFE1
  9449                           indf2	equ	0xFDF
  9450                           postinc2	equ	0xFDE
  9451                           postdec2	equ	0xFDD
  9452                           fsr2h	equ	0xFDA
  9453                           fsr2l	equ	0xFD9
  9454                           status	equ	0xFD8
  9455                           
  9456 ;; *************** function _Read_RTC *****************
  9457 ;; Defined at:
  9458 ;;		line 59 in file "Unimic/sources/unmc_rtcc_01.c"
  9459 ;; Parameters:    Size  Location     Type
  9460 ;;		None
  9461 ;; Auto vars:     Size  Location     Type
  9462 ;;		None
  9463 ;; Return value:  Size  Location     Type
  9464 ;;		None               void
  9465 ;; Registers used:
  9466 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9467 ;; Tracked objects:
  9468 ;;		On entry : 0/0
  9469 ;;		On exit  : 0/0
  9470 ;;		Unchanged: 0/0
  9471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9475 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9476 ;;Total ram usage:        0 bytes
  9477 ;; Hardware stack levels used:    1
  9478 ;; Hardware stack levels required when called:    1
  9479 ;; This function calls:
  9480 ;;		_RtccReadDate
  9481 ;;		_RtccReadTime
  9482 ;; This function is called by:
  9483 ;;		_main
  9484 ;;		_configurar_reloj
  9485 ;;		_dispararSensor
  9486 ;; This function uses a non-reentrant model
  9487 ;;
  9488                           
  9489                           	psect	text57
  9490  001D12                     __ptext57:
  9491                           	opt stack 0
  9492  001D12                     _Read_RTC:
  9493                           	opt stack 27
  9494                           
  9495                           ;unmc_rtcc_01.c: 62: RtccReadTime(&RtccTime);
  9496                           
  9497                           ;incstack = 0
  9498  001D12  0EAF               	movlw	low _RtccTime
  9499  001D14  6E01               	movwf	RtccReadTime@pTm,c
  9500  001D16  0E00               	movlw	high _RtccTime
  9501  001D18  6E02               	movwf	RtccReadTime@pTm+1,c
  9502  001D1A  EC9E  F019         	call	_RtccReadTime	;wreg free
  9503                           
  9504                           ;unmc_rtcc_01.c: 63: segundo_u=(RtccTime.f.sec & 0x0F);
  9505  001D1E  0100               	movlb	0	; () banked
  9506  001D20  51B0               	movf	(_RtccTime+1)& (0+255),w,b
  9507  001D22  0B0F               	andlw	15
  9508  001D24  0100               	movlb	0	; () banked
  9509  001D26  6FEC               	movwf	_segundo_u& (0+255),b
  9510                           
  9511                           ; BSR set to: 0
  9512                           ;unmc_rtcc_01.c: 64: segundo_d=((RtccTime.f.sec & 0xF0)>>4);
  9513  001D28  0100               	movlb	0	; () banked
  9514  001D2A  39B0               	swapf	(_RtccTime+1)& (0+255),w,b
  9515  001D2C  0B0F               	andlw	15
  9516  001D2E  0B0F               	andlw	15
  9517  001D30  0100               	movlb	0	; () banked
  9518  001D32  6FEB               	movwf	_segundo_d& (0+255),b
  9519                           
  9520                           ; BSR set to: 0
  9521                           ;unmc_rtcc_01.c: 65: minuto_u=(RtccTime.f.min & 0x0F);
  9522  001D34  0100               	movlb	0	; () banked
  9523  001D36  51B1               	movf	(_RtccTime+2)& (0+255),w,b
  9524  001D38  0B0F               	andlw	15
  9525  001D3A  0100               	movlb	0	; () banked
  9526  001D3C  6FEA               	movwf	_minuto_u& (0+255),b
  9527                           
  9528                           ; BSR set to: 0
  9529                           ;unmc_rtcc_01.c: 66: minuto_d=((RtccTime.f.min & 0xF0)>>4);
  9530  001D3E  0100               	movlb	0	; () banked
  9531  001D40  39B1               	swapf	(_RtccTime+2)& (0+255),w,b
  9532  001D42  0B0F               	andlw	15
  9533  001D44  0B0F               	andlw	15
  9534  001D46  0100               	movlb	0	; () banked
  9535  001D48  6FE9               	movwf	_minuto_d& (0+255),b
  9536                           
  9537                           ; BSR set to: 0
  9538                           ;unmc_rtcc_01.c: 67: hora_u=(RtccTime.f.hour & 0x0F);
  9539  001D4A  0100               	movlb	0	; () banked
  9540  001D4C  51B2               	movf	(_RtccTime+3)& (0+255),w,b
  9541  001D4E  0B0F               	andlw	15
  9542  001D50  0100               	movlb	0	; () banked
  9543  001D52  6FE6               	movwf	_hora_u& (0+255),b
  9544                           
  9545                           ; BSR set to: 0
  9546                           ;unmc_rtcc_01.c: 68: hora_d=((RtccTime.f.hour & 0xF0)>>4);
  9547  001D54  0100               	movlb	0	; () banked
  9548  001D56  39B2               	swapf	(_RtccTime+3)& (0+255),w,b
  9549  001D58  0B0F               	andlw	15
  9550  001D5A  0B0F               	andlw	15
  9551  001D5C  0100               	movlb	0	; () banked
  9552  001D5E  6FE5               	movwf	_hora_d& (0+255),b
  9553                           
  9554                           ;unmc_rtcc_01.c: 69: RtccReadDate(&RtccDate);
  9555  001D60  0EAB               	movlw	low _RtccDate
  9556  001D62  6E01               	movwf	RtccReadDate@pDt,c
  9557  001D64  0E00               	movlw	high _RtccDate
  9558  001D66  6E02               	movwf	RtccReadDate@pDt+1,c
  9559  001D68  EC17  F018         	call	_RtccReadDate	;wreg free
  9560                           
  9561                           ;unmc_rtcc_01.c: 70: fecha_u=(RtccDate.f.mday & 0x0F);
  9562  001D6C  0100               	movlb	0	; () banked
  9563  001D6E  51AC               	movf	(_RtccDate+1)& (0+255),w,b
  9564  001D70  0B0F               	andlw	15
  9565  001D72  0100               	movlb	0	; () banked
  9566  001D74  6FE4               	movwf	_fecha_u& (0+255),b
  9567                           
  9568                           ; BSR set to: 0
  9569                           ;unmc_rtcc_01.c: 71: fecha_d=((RtccDate.f.mday & 0xF0)>>4);
  9570  001D76  0100               	movlb	0	; () banked
  9571  001D78  39AC               	swapf	(_RtccDate+1)& (0+255),w,b
  9572  001D7A  0B0F               	andlw	15
  9573  001D7C  0B0F               	andlw	15
  9574  001D7E  0100               	movlb	0	; () banked
  9575  001D80  6FE3               	movwf	_fecha_d& (0+255),b
  9576                           
  9577                           ; BSR set to: 0
  9578                           ;unmc_rtcc_01.c: 72: mes_u=(RtccDate.f.mon & 0x0F);
  9579  001D82  0100               	movlb	0	; () banked
  9580  001D84  51AD               	movf	(_RtccDate+2)& (0+255),w,b
  9581  001D86  0B0F               	andlw	15
  9582  001D88  0100               	movlb	0	; () banked
  9583  001D8A  6FE8               	movwf	_mes_u& (0+255),b
  9584                           
  9585                           ; BSR set to: 0
  9586                           ;unmc_rtcc_01.c: 73: mes_d=((RtccDate.f.mon & 0xF0)>>4);
  9587  001D8C  0100               	movlb	0	; () banked
  9588  001D8E  39AD               	swapf	(_RtccDate+2)& (0+255),w,b
  9589  001D90  0B0F               	andlw	15
  9590  001D92  0B0F               	andlw	15
  9591  001D94  0100               	movlb	0	; () banked
  9592  001D96  6FE7               	movwf	_mes_d& (0+255),b
  9593                           
  9594                           ; BSR set to: 0
  9595                           ;unmc_rtcc_01.c: 74: dia_semana=RtccDate.f.wday;
  9596  001D98  C0AB  F0E2         	movff	_RtccDate,_dia_semana
  9597                           
  9598                           ; BSR set to: 0
  9599                           ;unmc_rtcc_01.c: 75: anio_u=(RtccDate.f.year & 0x0F);
  9600  001D9C  0100               	movlb	0	; () banked
  9601  001D9E  51AE               	movf	(_RtccDate+3)& (0+255),w,b
  9602  001DA0  0B0F               	andlw	15
  9603  001DA2  0100               	movlb	0	; () banked
  9604  001DA4  6FE1               	movwf	_anio_u& (0+255),b
  9605                           
  9606                           ; BSR set to: 0
  9607                           ;unmc_rtcc_01.c: 76: anio_d=((RtccDate.f.year & 0xF0)>>4);
  9608  001DA6  0100               	movlb	0	; () banked
  9609  001DA8  39AE               	swapf	(_RtccDate+3)& (0+255),w,b
  9610  001DAA  0B0F               	andlw	15
  9611  001DAC  0B0F               	andlw	15
  9612  001DAE  0100               	movlb	0	; () banked
  9613  001DB0  6FE0               	movwf	_anio_d& (0+255),b
  9614                           
  9615                           ; BSR set to: 0
  9616                           ;unmc_rtcc_01.c: 78: segundo=segundo_d*10+segundo_u;
  9617  001DB2  0100               	movlb	0	; () banked
  9618  001DB4  51EB               	movf	_segundo_d& (0+255),w,b
  9619  001DB6  0D0A               	mullw	10
  9620  001DB8  0100               	movlb	0	; () banked
  9621  001DBA  51EC               	movf	_segundo_u& (0+255),w,b
  9622  001DBC  24F3               	addwf	prodl,w,c
  9623  001DBE  0100               	movlb	0	; () banked
  9624  001DC0  6F94               	movwf	_segundo& (0+255),b
  9625  001DC2  0100               	movlb	0	; () banked
  9626  001DC4  0E00               	movlw	0
  9627  001DC6  20F4               	addwfc	prodh,w,c
  9628  001DC8  0100               	movlb	0	; () banked
  9629  001DCA  6F95               	movwf	(_segundo+1)& (0+255),b
  9630                           
  9631                           ; BSR set to: 0
  9632                           ;unmc_rtcc_01.c: 79: minuto=minuto_d*10+minuto_u;
  9633  001DCC  0100               	movlb	0	; () banked
  9634  001DCE  51E9               	movf	_minuto_d& (0+255),w,b
  9635  001DD0  0D0A               	mullw	10
  9636  001DD2  0100               	movlb	0	; () banked
  9637  001DD4  51EA               	movf	_minuto_u& (0+255),w,b
  9638  001DD6  24F3               	addwf	prodl,w,c
  9639  001DD8  0100               	movlb	0	; () banked
  9640  001DDA  6FD7               	movwf	_minuto& (0+255),b
  9641  001DDC  0100               	movlb	0	; () banked
  9642  001DDE  0E00               	movlw	0
  9643  001DE0  20F4               	addwfc	prodh,w,c
  9644  001DE2  0100               	movlb	0	; () banked
  9645  001DE4  6FD8               	movwf	(_minuto+1)& (0+255),b
  9646                           
  9647                           ; BSR set to: 0
  9648                           ;unmc_rtcc_01.c: 80: hora=hora_d*10+hora_u;
  9649  001DE6  0100               	movlb	0	; () banked
  9650  001DE8  51E5               	movf	_hora_d& (0+255),w,b
  9651  001DEA  0D0A               	mullw	10
  9652  001DEC  0100               	movlb	0	; () banked
  9653  001DEE  51E6               	movf	_hora_u& (0+255),w,b
  9654  001DF0  24F3               	addwf	prodl,w,c
  9655  001DF2  0100               	movlb	0	; () banked
  9656  001DF4  6FD3               	movwf	_hora& (0+255),b
  9657  001DF6  0100               	movlb	0	; () banked
  9658  001DF8  0E00               	movlw	0
  9659  001DFA  20F4               	addwfc	prodh,w,c
  9660  001DFC  0100               	movlb	0	; () banked
  9661  001DFE  6FD4               	movwf	(_hora+1)& (0+255),b
  9662                           
  9663                           ; BSR set to: 0
  9664                           ;unmc_rtcc_01.c: 81: dia=fecha_d*10+fecha_u;
  9665  001E00  0100               	movlb	0	; () banked
  9666  001E02  51E3               	movf	_fecha_d& (0+255),w,b
  9667  001E04  0D0A               	mullw	10
  9668  001E06  0100               	movlb	0	; () banked
  9669  001E08  51E4               	movf	_fecha_u& (0+255),w,b
  9670  001E0A  24F3               	addwf	prodl,w,c
  9671  001E0C  0100               	movlb	0	; () banked
  9672  001E0E  6FCF               	movwf	_dia& (0+255),b
  9673  001E10  0100               	movlb	0	; () banked
  9674  001E12  0E00               	movlw	0
  9675  001E14  20F4               	addwfc	prodh,w,c
  9676  001E16  0100               	movlb	0	; () banked
  9677  001E18  6FD0               	movwf	(_dia+1)& (0+255),b
  9678                           
  9679                           ; BSR set to: 0
  9680                           ;unmc_rtcc_01.c: 82: diasem=dia_semana;
  9681  001E1A  C0E2  F0D1         	movff	_dia_semana,_diasem
  9682  001E1E  0100               	movlb	0	; () banked
  9683  001E20  6BD2               	clrf	(_diasem+1)& (0+255),b
  9684                           
  9685                           ; BSR set to: 0
  9686                           ;unmc_rtcc_01.c: 83: mes=mes_d*10+mes_u;
  9687  001E22  0100               	movlb	0	; () banked
  9688  001E24  51E7               	movf	_mes_d& (0+255),w,b
  9689  001E26  0D0A               	mullw	10
  9690  001E28  0100               	movlb	0	; () banked
  9691  001E2A  51E8               	movf	_mes_u& (0+255),w,b
  9692  001E2C  24F3               	addwf	prodl,w,c
  9693  001E2E  0100               	movlb	0	; () banked
  9694  001E30  6FD5               	movwf	_mes& (0+255),b
  9695  001E32  0100               	movlb	0	; () banked
  9696  001E34  0E00               	movlw	0
  9697  001E36  20F4               	addwfc	prodh,w,c
  9698  001E38  0100               	movlb	0	; () banked
  9699  001E3A  6FD6               	movwf	(_mes+1)& (0+255),b
  9700                           
  9701                           ; BSR set to: 0
  9702                           ;unmc_rtcc_01.c: 84: anio=anio_d*10+anio_u;
  9703  001E3C  0100               	movlb	0	; () banked
  9704  001E3E  51E0               	movf	_anio_d& (0+255),w,b
  9705  001E40  0D0A               	mullw	10
  9706  001E42  0100               	movlb	0	; () banked
  9707  001E44  51E1               	movf	_anio_u& (0+255),w,b
  9708  001E46  24F3               	addwf	prodl,w,c
  9709  001E48  0100               	movlb	0	; () banked
  9710  001E4A  6FCD               	movwf	_anio& (0+255),b
  9711  001E4C  0100               	movlb	0	; () banked
  9712  001E4E  0E00               	movlw	0
  9713  001E50  20F4               	addwfc	prodh,w,c
  9714  001E52  0100               	movlb	0	; () banked
  9715  001E54  6FCE               	movwf	(_anio+1)& (0+255),b
  9716                           
  9717                           ; BSR set to: 0
  9718  001E56  0012               	return		;funcret
  9719  001E58                     __end_of_Read_RTC:
  9720                           	opt stack 0
  9721                           tblptru	equ	0xFF8
  9722                           tblptrh	equ	0xFF7
  9723                           tblptrl	equ	0xFF6
  9724                           tablat	equ	0xFF5
  9725                           prodh	equ	0xFF4
  9726                           prodl	equ	0xFF3
  9727                           indf0	equ	0xFEF
  9728                           postinc0	equ	0xFEE
  9729                           fsr0h	equ	0xFEA
  9730                           fsr0l	equ	0xFE9
  9731                           wreg	equ	0xFE8
  9732                           postdec1	equ	0xFE5
  9733                           fsr1l	equ	0xFE1
  9734                           indf2	equ	0xFDF
  9735                           postinc2	equ	0xFDE
  9736                           postdec2	equ	0xFDD
  9737                           fsr2h	equ	0xFDA
  9738                           fsr2l	equ	0xFD9
  9739                           status	equ	0xFD8
  9740                           
  9741 ;; *************** function _RtccReadTime *****************
  9742 ;; Defined at:
  9743 ;;		line 23 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadTime.c"
  9744 ;; Parameters:    Size  Location     Type
  9745 ;;  pTm             2    0[COMRAM] PTR struct .
  9746 ;;		 -> RtccTime(4), 
  9747 ;; Auto vars:     Size  Location     Type
  9748 ;;  rTD0            8   10[COMRAM] struct .
  9749 ;;  rTD1            8    2[COMRAM] struct .
  9750 ;; Return value:  Size  Location     Type
  9751 ;;		None               void
  9752 ;; Registers used:
  9753 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9754 ;; Tracked objects:
  9755 ;;		On entry : 0/0
  9756 ;;		On exit  : 0/0
  9757 ;;		Unchanged: 0/0
  9758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9759 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9760 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9762 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9763 ;;Total ram usage:       18 bytes
  9764 ;; Hardware stack levels used:    1
  9765 ;; This function calls:
  9766 ;;		Nothing
  9767 ;; This function is called by:
  9768 ;;		_Read_RTC
  9769 ;; This function uses a non-reentrant model
  9770 ;;
  9771                           
  9772                           	psect	text58
  9773  00333C                     __ptext58:
  9774                           	opt stack 0
  9775  00333C                     _RtccReadTime:
  9776                           	opt stack 27
  9777  00333C  0EFC               	movlw	252
  9778  00333E  010F               	movlb	15	; () banked
  9779  003340  173F               	andwf	63,f,b	;volatile
  9780                           
  9781                           ; BSR set to: 15
  9782  003342  010F               	movlb	15	; () banked
  9783  003344  813F               	bsf	63,0,b	;volatile
  9784                           
  9785                           ; BSR set to: 15
  9786  003346  CF98 F00F          	movff	3992,RtccReadTime@rTD0+4	;volatile
  9787                           
  9788                           ; BSR set to: 15
  9789  00334A  CF99 F010          	movff	3993,RtccReadTime@rTD0+5	;volatile
  9790                           
  9791                           ; BSR set to: 15
  9792  00334E  CF98 F011          	movff	3992,RtccReadTime@rTD0+6	;volatile
  9793                           
  9794                           ; BSR set to: 15
  9795  003352  CF99 F012          	movff	3993,RtccReadTime@rTD0+7	;volatile
  9796                           
  9797                           ; BSR set to: 15
  9798  003356  0EFC               	movlw	252
  9799  003358  010F               	movlb	15	; () banked
  9800  00335A  173F               	andwf	63,f,b	;volatile
  9801  00335C  010F               	movlb	15	; () banked
  9802  00335E  813F               	bsf	63,0,b	;volatile
  9803                           
  9804                           ; BSR set to: 15
  9805  003360  CF98 F007          	movff	3992,RtccReadTime@rTD1+4	;volatile
  9806                           
  9807                           ; BSR set to: 15
  9808  003364  CF99 F008          	movff	3993,RtccReadTime@rTD1+5	;volatile
  9809                           
  9810                           ; BSR set to: 15
  9811  003368  CF98 F009          	movff	3992,RtccReadTime@rTD1+6	;volatile
  9812                           
  9813                           ; BSR set to: 15
  9814  00336C  CF99 F00A          	movff	3993,RtccReadTime@rTD1+7	;volatile
  9815                           
  9816                           ; BSR set to: 15
  9817  003370  5009               	movf	RtccReadTime@rTD1+6,w,c
  9818  003372  1811               	xorwf	RtccReadTime@rTD0+6,w,c
  9819  003374  A4D8               	btfss	status,2,c
  9820  003376  D7E2               	goto	l4617
  9821                           
  9822                           ; BSR set to: 15
  9823                           
  9824                           ; BSR set to: 15
  9825  003378  EE20 F003          	lfsr	2,3
  9826  00337C  5001               	movf	RtccReadTime@pTm,w,c
  9827  00337E  26D9               	addwf	fsr2l,f,c
  9828  003380  5002               	movf	RtccReadTime@pTm+1,w,c
  9829  003382  22DA               	addwfc	fsr2h,f,c
  9830  003384  C00F  FFDF         	movff	RtccReadTime@rTD0+4,indf2
  9831  003388  EE20 F002          	lfsr	2,2
  9832  00338C  5001               	movf	RtccReadTime@pTm,w,c
  9833  00338E  26D9               	addwf	fsr2l,f,c
  9834  003390  5002               	movf	RtccReadTime@pTm+1,w,c
  9835  003392  22DA               	addwfc	fsr2h,f,c
  9836  003394  C012  FFDF         	movff	RtccReadTime@rTD0+7,indf2
  9837  003398  EE20 F001          	lfsr	2,1
  9838  00339C  5001               	movf	RtccReadTime@pTm,w,c
  9839  00339E  26D9               	addwf	fsr2l,f,c
  9840  0033A0  5002               	movf	RtccReadTime@pTm+1,w,c
  9841  0033A2  22DA               	addwfc	fsr2h,f,c
  9842  0033A4  C011  FFDF         	movff	RtccReadTime@rTD0+6,indf2
  9843                           
  9844                           ; BSR set to: 15
  9845  0033A8  0012               	return		;funcret
  9846  0033AA                     __end_of_RtccReadTime:
  9847                           	opt stack 0
  9848                           tblptru	equ	0xFF8
  9849                           tblptrh	equ	0xFF7
  9850                           tblptrl	equ	0xFF6
  9851                           tablat	equ	0xFF5
  9852                           prodh	equ	0xFF4
  9853                           prodl	equ	0xFF3
  9854                           indf0	equ	0xFEF
  9855                           postinc0	equ	0xFEE
  9856                           fsr0h	equ	0xFEA
  9857                           fsr0l	equ	0xFE9
  9858                           wreg	equ	0xFE8
  9859                           postdec1	equ	0xFE5
  9860                           fsr1l	equ	0xFE1
  9861                           indf2	equ	0xFDF
  9862                           postinc2	equ	0xFDE
  9863                           postdec2	equ	0xFDD
  9864                           fsr2h	equ	0xFDA
  9865                           fsr2l	equ	0xFD9
  9866                           status	equ	0xFD8
  9867                           
  9868 ;; *************** function _RtccReadDate *****************
  9869 ;; Defined at:
  9870 ;;		line 23 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadDate.c"
  9871 ;; Parameters:    Size  Location     Type
  9872 ;;  pDt             2    0[COMRAM] PTR struct .
  9873 ;;		 -> RtccDate(4), 
  9874 ;; Auto vars:     Size  Location     Type
  9875 ;;  rTD0            8   10[COMRAM] struct .
  9876 ;;  rTD1            8    2[COMRAM] struct .
  9877 ;; Return value:  Size  Location     Type
  9878 ;;		None               void
  9879 ;; Registers used:
  9880 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9881 ;; Tracked objects:
  9882 ;;		On entry : 0/0
  9883 ;;		On exit  : 0/0
  9884 ;;		Unchanged: 0/0
  9885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9886 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9887 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9889 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9890 ;;Total ram usage:       18 bytes
  9891 ;; Hardware stack levels used:    1
  9892 ;; This function calls:
  9893 ;;		Nothing
  9894 ;; This function is called by:
  9895 ;;		_Read_RTC
  9896 ;; This function uses a non-reentrant model
  9897 ;;
  9898                           
  9899                           	psect	text59
  9900  00302E                     __ptext59:
  9901                           	opt stack 0
  9902  00302E                     _RtccReadDate:
  9903                           	opt stack 27
  9904  00302E  0EFC               	movlw	252
  9905  003030  010F               	movlb	15	; () banked
  9906  003032  173F               	andwf	63,f,b	;volatile
  9907  003034  0E03               	movlw	3
  9908  003036  010F               	movlb	15	; () banked
  9909  003038  133F               	iorwf	63,f,b	;volatile
  9910                           
  9911                           ; BSR set to: 15
  9912  00303A  CF98 F00B          	movff	3992,RtccReadDate@rTD0	;volatile
  9913                           
  9914                           ; BSR set to: 15
  9915  00303E  CF99 F00C          	movff	3993,RtccReadDate@rTD0+1	;volatile
  9916                           
  9917                           ; BSR set to: 15
  9918  003042  CF98 F00D          	movff	3992,RtccReadDate@rTD0+2	;volatile
  9919                           
  9920                           ; BSR set to: 15
  9921  003046  CF99 F00E          	movff	3993,RtccReadDate@rTD0+3	;volatile
  9922                           
  9923                           ; BSR set to: 15
  9924  00304A  CF98 F00F          	movff	3992,RtccReadDate@rTD0+4	;volatile
  9925                           
  9926                           ; BSR set to: 15
  9927  00304E  CF99 F010          	movff	3993,RtccReadDate@rTD0+5	;volatile
  9928  003052  0EFC               	movlw	252
  9929  003054  010F               	movlb	15	; () banked
  9930  003056  173F               	andwf	63,f,b	;volatile
  9931  003058  0E03               	movlw	3
  9932  00305A  010F               	movlb	15	; () banked
  9933  00305C  133F               	iorwf	63,f,b	;volatile
  9934                           
  9935                           ; BSR set to: 15
  9936  00305E  CF98 F003          	movff	3992,RtccReadDate@rTD1	;volatile
  9937                           
  9938                           ; BSR set to: 15
  9939  003062  CF99 F004          	movff	3993,RtccReadDate@rTD1+1	;volatile
  9940                           
  9941                           ; BSR set to: 15
  9942  003066  CF98 F005          	movff	3992,RtccReadDate@rTD1+2	;volatile
  9943                           
  9944                           ; BSR set to: 15
  9945  00306A  CF99 F006          	movff	3993,RtccReadDate@rTD1+3	;volatile
  9946                           
  9947                           ; BSR set to: 15
  9948  00306E  CF98 F007          	movff	3992,RtccReadDate@rTD1+4	;volatile
  9949                           
  9950                           ; BSR set to: 15
  9951  003072  CF99 F008          	movff	3993,RtccReadDate@rTD1+5	;volatile
  9952  003076  5005               	movf	RtccReadDate@rTD1+2,w,c
  9953  003078  180D               	xorwf	RtccReadDate@rTD0+2,w,c
  9954  00307A  A4D8               	btfss	status,2,c
  9955  00307C  D7D8               	goto	l4643
  9956                           
  9957                           ; BSR set to: 15
  9958                           
  9959                           ; BSR set to: 15
  9960  00307E  EE20 F001          	lfsr	2,1
  9961  003082  5001               	movf	RtccReadDate@pDt,w,c
  9962  003084  26D9               	addwf	fsr2l,f,c
  9963  003086  5002               	movf	RtccReadDate@pDt+1,w,c
  9964  003088  22DA               	addwfc	fsr2h,f,c
  9965  00308A  C00D  FFDF         	movff	RtccReadDate@rTD0+2,indf2
  9966  00308E  EE20 F002          	lfsr	2,2
  9967  003092  5001               	movf	RtccReadDate@pDt,w,c
  9968  003094  26D9               	addwf	fsr2l,f,c
  9969  003096  5002               	movf	RtccReadDate@pDt+1,w,c
  9970  003098  22DA               	addwfc	fsr2h,f,c
  9971  00309A  C00E  FFDF         	movff	RtccReadDate@rTD0+3,indf2
  9972                           
  9973                           ; BSR set to: 15
  9974  00309E  C001  FFD9         	movff	RtccReadDate@pDt,fsr2l
  9975  0030A2  C002  FFDA         	movff	RtccReadDate@pDt+1,fsr2h
  9976  0030A6  C010  FFDF         	movff	RtccReadDate@rTD0+5,indf2
  9977                           
  9978                           ; BSR set to: 15
  9979  0030AA  EE20 F003          	lfsr	2,3
  9980  0030AE  5001               	movf	RtccReadDate@pDt,w,c
  9981  0030B0  26D9               	addwf	fsr2l,f,c
  9982  0030B2  5002               	movf	RtccReadDate@pDt+1,w,c
  9983  0030B4  22DA               	addwfc	fsr2h,f,c
  9984  0030B6  C00B  FFDF         	movff	RtccReadDate@rTD0,indf2
  9985                           
  9986                           ; BSR set to: 15
  9987  0030BA  0012               	return		;funcret
  9988  0030BC                     __end_of_RtccReadDate:
  9989                           	opt stack 0
  9990                           tblptru	equ	0xFF8
  9991                           tblptrh	equ	0xFF7
  9992                           tblptrl	equ	0xFF6
  9993                           tablat	equ	0xFF5
  9994                           prodh	equ	0xFF4
  9995                           prodl	equ	0xFF3
  9996                           indf0	equ	0xFEF
  9997                           postinc0	equ	0xFEE
  9998                           fsr0h	equ	0xFEA
  9999                           fsr0l	equ	0xFE9
 10000                           wreg	equ	0xFE8
 10001                           postdec1	equ	0xFE5
 10002                           fsr1l	equ	0xFE1
 10003                           indf2	equ	0xFDF
 10004                           postinc2	equ	0xFDE
 10005                           postdec2	equ	0xFDD
 10006                           fsr2h	equ	0xFDA
 10007                           fsr2l	equ	0xFD9
 10008                           status	equ	0xFD8
 10009                           
 10010 ;; *************** function _caratula *****************
 10011 ;; Defined at:
 10012 ;;		line 32 in file "main.c"
 10013 ;; Parameters:    Size  Location     Type
 10014 ;;		None
 10015 ;; Auto vars:     Size  Location     Type
 10016 ;;		None
 10017 ;; Return value:  Size  Location     Type
 10018 ;;		None               void
 10019 ;; Registers used:
 10020 ;;		wreg, status,2, status,0, cstack
 10021 ;; Tracked objects:
 10022 ;;		On entry : 0/0
 10023 ;;		On exit  : 0/0
 10024 ;;		Unchanged: 0/0
 10025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10029 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10030 ;;Total ram usage:        0 bytes
 10031 ;; Hardware stack levels used:    1
 10032 ;; Hardware stack levels required when called:    3
 10033 ;; This function calls:
 10034 ;;		_lcd_comand
 10035 ;; This function is called by:
 10036 ;;		_main
 10037 ;; This function uses a non-reentrant model
 10038 ;;
 10039                           
 10040                           	psect	text60
 10041  003AF0                     __ptext60:
 10042                           	opt stack 0
 10043  003AF0                     _caratula:
 10044                           	opt stack 27
 10045                           
 10046                           ;main.c: 34: lcd_comand(0b00001100);
 10047                           
 10048                           ; BSR set to: 15
 10049                           ;incstack = 0
 10050  003AF0  0E0C               	movlw	12
 10051  003AF2  EC68  F01D         	call	_lcd_comand
 10052  003AF6  0012               	return		;funcret
 10053  003AF8                     __end_of_caratula:
 10054                           	opt stack 0
 10055                           tblptru	equ	0xFF8
 10056                           tblptrh	equ	0xFF7
 10057                           tblptrl	equ	0xFF6
 10058                           tablat	equ	0xFF5
 10059                           prodh	equ	0xFF4
 10060                           prodl	equ	0xFF3
 10061                           indf0	equ	0xFEF
 10062                           postinc0	equ	0xFEE
 10063                           fsr0h	equ	0xFEA
 10064                           fsr0l	equ	0xFE9
 10065                           wreg	equ	0xFE8
 10066                           postdec1	equ	0xFE5
 10067                           fsr1l	equ	0xFE1
 10068                           indf2	equ	0xFDF
 10069                           postinc2	equ	0xFDE
 10070                           postdec2	equ	0xFDD
 10071                           fsr2h	equ	0xFDA
 10072                           fsr2l	equ	0xFD9
 10073                           status	equ	0xFD8
 10074                           
 10075 ;; *************** function _Setup *****************
 10076 ;; Defined at:
 10077 ;;		line 52 in file "main.c"
 10078 ;; Parameters:    Size  Location     Type
 10079 ;;		None
 10080 ;; Auto vars:     Size  Location     Type
 10081 ;;		None
 10082 ;; Return value:  Size  Location     Type
 10083 ;;		None               void
 10084 ;; Registers used:
 10085 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10086 ;; Tracked objects:
 10087 ;;		On entry : 0/0
 10088 ;;		On exit  : 0/0
 10089 ;;		Unchanged: 0/0
 10090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10094 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10095 ;;Total ram usage:        0 bytes
 10096 ;; Hardware stack levels used:    1
 10097 ;; Hardware stack levels required when called:    3
 10098 ;; This function calls:
 10099 ;;		_Write_RTC
 10100 ;;		_lcd_comand
 10101 ;;		_lcd_init
 10102 ;; This function is called by:
 10103 ;;		_main
 10104 ;; This function uses a non-reentrant model
 10105 ;;
 10106                           
 10107                           	psect	text61
 10108  0036B6                     __ptext61:
 10109                           	opt stack 0
 10110  0036B6                     _Setup:
 10111                           	opt stack 27
 10112                           
 10113                           ;main.c: 54: OSCTUNEbits.INTSRC=1;
 10114                           
 10115                           ;incstack = 0
 10116  0036B6  8E9B               	bsf	3995,7,c	;volatile
 10117                           
 10118                           ;main.c: 55: OSCTUNEbits.PLLEN=0;
 10119  0036B8  9C9B               	bcf	3995,6,c	;volatile
 10120                           
 10121                           ;main.c: 56: OSCCONbits.IRCF0=1;
 10122  0036BA  88D3               	bsf	4051,4,c	;volatile
 10123                           
 10124                           ;main.c: 57: OSCCONbits.IRCF1=1;
 10125  0036BC  8AD3               	bsf	4051,5,c	;volatile
 10126                           
 10127                           ;main.c: 58: OSCCONbits.IRCF2=1;
 10128  0036BE  8CD3               	bsf	4051,6,c	;volatile
 10129                           
 10130                           ;main.c: 59: OSCCONbits.SCS0=0;
 10131  0036C0  90D3               	bcf	4051,0,c	;volatile
 10132                           
 10133                           ;main.c: 60: OSCCONbits.SCS1=0;
 10134  0036C2  92D3               	bcf	4051,1,c	;volatile
 10135                           
 10136                           ;main.c: 61: TRISA = 0b11110000;
 10137  0036C4  0EF0               	movlw	240
 10138  0036C6  6E92               	movwf	3986,c	;volatile
 10139                           
 10140                           ;main.c: 62: TRISB = 0;
 10141  0036C8  0E00               	movlw	0
 10142  0036CA  6E93               	movwf	3987,c	;volatile
 10143                           
 10144                           ;main.c: 63: TRISC = 0b0110111;
 10145  0036CC  0E37               	movlw	55
 10146  0036CE  6E94               	movwf	3988,c	;volatile
 10147                           
 10148                           ;main.c: 67: ANCON0=0b11111111;
 10149  0036D0  010F               	movlb	15	; () banked
 10150  0036D2  6948               	setf	72,b	;volatile
 10151                           
 10152                           ; BSR set to: 15
 10153                           ;main.c: 69: ANCON1=0b11111111;
 10154  0036D4  010F               	movlb	15	; () banked
 10155  0036D6  6949               	setf	73,b	;volatile
 10156                           
 10157                           ;main.c: 70: ADCON0=0b00101101;
 10158  0036D8  0E2D               	movlw	45
 10159  0036DA  6EC2               	movwf	4034,c	;volatile
 10160                           
 10161                           ;main.c: 71: ADCON1=0b00010000;
 10162  0036DC  0E10               	movlw	16
 10163  0036DE  6EC1               	movwf	4033,c	;volatile
 10164                           
 10165                           ; BSR set to: 15
 10166                           ;main.c: 72: RTCCFGbits.RTCEN=1;
 10167  0036E0  010F               	movlb	15	; () banked
 10168  0036E2  8F3F               	bsf	63,7,b	;volatile
 10169                           
 10170                           ; BSR set to: 15
 10171                           ;main.c: 73: RTCCFGbits.RTCWREN=1;
 10172  0036E4  010F               	movlb	15	; () banked
 10173  0036E6  8B3F               	bsf	63,5,b	;volatile
 10174                           
 10175                           ; BSR set to: 15
 10176                           ;main.c: 74: T1CONbits.T1OSCEN=1;
 10177  0036E8  86CD               	bsf	4045,3,c	;volatile
 10178                           
 10179                           ; BSR set to: 15
 10180                           ;main.c: 75: Write_RTC();
 10181  0036EA  EC56  F00C         	call	_Write_RTC	;wreg free
 10182                           
 10183                           ;main.c: 76: lcd_init();
 10184  0036EE  ECE5  F018         	call	_lcd_init	;wreg free
 10185                           
 10186                           ;main.c: 77: lcd_comand(0b00001100);
 10187  0036F2  0E0C               	movlw	12
 10188  0036F4  EC68  F01D         	call	_lcd_comand
 10189                           
 10190                           ;main.c: 78: LATBbits.LATB1 = 1;;
 10191  0036F8  828A               	bsf	3978,1,c	;volatile
 10192  0036FA  0012               	return		;funcret
 10193  0036FC                     __end_of_Setup:
 10194                           	opt stack 0
 10195                           tblptru	equ	0xFF8
 10196                           tblptrh	equ	0xFF7
 10197                           tblptrl	equ	0xFF6
 10198                           tablat	equ	0xFF5
 10199                           prodh	equ	0xFF4
 10200                           prodl	equ	0xFF3
 10201                           indf0	equ	0xFEF
 10202                           postinc0	equ	0xFEE
 10203                           fsr0h	equ	0xFEA
 10204                           fsr0l	equ	0xFE9
 10205                           wreg	equ	0xFE8
 10206                           postdec1	equ	0xFE5
 10207                           fsr1l	equ	0xFE1
 10208                           indf2	equ	0xFDF
 10209                           postinc2	equ	0xFDE
 10210                           postdec2	equ	0xFDD
 10211                           fsr2h	equ	0xFDA
 10212                           fsr2l	equ	0xFD9
 10213                           status	equ	0xFD8
 10214                           
 10215 ;; *************** function _lcd_init *****************
 10216 ;; Defined at:
 10217 ;;		line 119 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
 10218 ;; Parameters:    Size  Location     Type
 10219 ;;		None
 10220 ;; Auto vars:     Size  Location     Type
 10221 ;;  i               1    4[COMRAM] unsigned char 
 10222 ;; Return value:  Size  Location     Type
 10223 ;;		None               void
 10224 ;; Registers used:
 10225 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10226 ;; Tracked objects:
 10227 ;;		On entry : 0/0
 10228 ;;		On exit  : 0/0
 10229 ;;		Unchanged: 0/0
 10230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10232 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10234 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10235 ;;Total ram usage:        1 bytes
 10236 ;; Hardware stack levels used:    1
 10237 ;; Hardware stack levels required when called:    2
 10238 ;; This function calls:
 10239 ;;		_Delay1KTCYx
 10240 ;;		_lcd_send_byte
 10241 ;;		_lcd_send_nibble
 10242 ;; This function is called by:
 10243 ;;		_Setup
 10244 ;; This function uses a non-reentrant model
 10245 ;;
 10246                           
 10247                           	psect	text62
 10248  0031CA                     __ptext62:
 10249                           	opt stack 0
 10250  0031CA                     _lcd_init:
 10251                           	opt stack 27
 10252                           
 10253                           ;unmc_lcd_216.c: 120: int8 i;
 10254                           ;unmc_lcd_216.c: 122: TRISBbits.TRISB3=0;
 10255                           
 10256                           ;incstack = 0
 10257  0031CA  9693               	bcf	3987,3,c	;volatile
 10258                           
 10259                           ;unmc_lcd_216.c: 123: TRISBbits.TRISB2=0;
 10260  0031CC  9493               	bcf	3987,2,c	;volatile
 10261                           
 10262                           ;unmc_lcd_216.c: 128: LATBbits.LATB3=0;
 10263  0031CE  968A               	bcf	3978,3,c	;volatile
 10264                           
 10265                           ;unmc_lcd_216.c: 129: LATBbits.LATB2=0;
 10266  0031D0  948A               	bcf	3978,2,c	;volatile
 10267                           
 10268                           ;unmc_lcd_216.c: 134: TRISBbits.TRISB4=0;
 10269  0031D2  9893               	bcf	3987,4,c	;volatile
 10270                           
 10271                           ;unmc_lcd_216.c: 135: TRISBbits.TRISB5=0;
 10272  0031D4  9A93               	bcf	3987,5,c	;volatile
 10273                           
 10274                           ;unmc_lcd_216.c: 136: TRISBbits.TRISB6=0;
 10275  0031D6  9C93               	bcf	3987,6,c	;volatile
 10276                           
 10277                           ;unmc_lcd_216.c: 137: TRISBbits.TRISB7=0;
 10278  0031D8  9E93               	bcf	3987,7,c	;volatile
 10279                           
 10280                           ;unmc_lcd_216.c: 139: Delay1KTCYx(8000000UL/800000UL);
 10281  0031DA  0E0A               	movlw	10
 10282  0031DC  EC4D  F01D         	call	_Delay1KTCYx
 10283                           
 10284                           ;unmc_lcd_216.c: 140: Delay1KTCYx(8000000UL/800000UL);
 10285  0031E0  0E0A               	movlw	10
 10286  0031E2  EC4D  F01D         	call	_Delay1KTCYx
 10287                           
 10288                           ;unmc_lcd_216.c: 141: Delay1KTCYx(8000000UL/800000UL);
 10289  0031E6  0E0A               	movlw	10
 10290  0031E8  EC4D  F01D         	call	_Delay1KTCYx
 10291                           
 10292                           ;unmc_lcd_216.c: 143: for(i=0 ;i < 3; i++){
 10293  0031EC  0E00               	movlw	0
 10294  0031EE  6E05               	movwf	lcd_init@i,c
 10295  0031F0                     l4873:
 10296  0031F0  0E02               	movlw	2
 10297  0031F2  6405               	cpfsgt	lcd_init@i,c
 10298  0031F4  D001               	goto	l4877
 10299  0031F6  D008               	goto	l4883
 10300  0031F8                     l4877:
 10301                           
 10302                           ;unmc_lcd_216.c: 144: lcd_send_nibble(0x03);
 10303  0031F8  0E03               	movlw	3
 10304  0031FA  EC63  F019         	call	_lcd_send_nibble
 10305                           
 10306                           ;unmc_lcd_216.c: 145: Delay1KTCYx(8000000UL/800000UL);
 10307  0031FE  0E0A               	movlw	10
 10308  003200  EC4D  F01D         	call	_Delay1KTCYx
 10309  003204  2A05               	incf	lcd_init@i,f,c
 10310  003206  D7F4               	goto	l4873
 10311  003208                     l4883:
 10312                           
 10313                           ;unmc_lcd_216.c: 146: }
 10314                           ;unmc_lcd_216.c: 148: lcd_send_nibble(0x02);
 10315  003208  0E02               	movlw	2
 10316  00320A  EC63  F019         	call	_lcd_send_nibble
 10317                           
 10318                           ;unmc_lcd_216.c: 150: for(i=0; i < sizeof(LCD_INIT_STRING); i++){
 10319  00320E  0E00               	movlw	0
 10320  003210  6E05               	movwf	lcd_init@i,c
 10321  003212  0E03               	movlw	3
 10322  003214  6405               	cpfsgt	lcd_init@i,c
 10323  003216  D002               	goto	l4891
 10324  003218  0012               	return	
 10325  00321A  0012               	return	
 10326  00321C                     l4891:
 10327                           
 10328                           ;unmc_lcd_216.c: 151: lcd_send_byte(0, LCD_INIT_STRING[i]);
 10329  00321C  5005               	movf	lcd_init@i,w,c
 10330  00321E  0D01               	mullw	1
 10331  003220  0E0B               	movlw	low _LCD_INIT_STRING
 10332  003222  24F3               	addwf	prodl,w,c
 10333  003224  6EF6               	movwf	tblptrl,c
 10334  003226  0E0F               	movlw	high _LCD_INIT_STRING
 10335  003228  20F4               	addwfc	prodh,w,c
 10336  00322A  6EF7               	movwf	tblptrh,c
 10337  00322C                     	if	0	;There are less than 3 active tblptr bytes
 10338  00322C                     	endif
 10339  00322C  0008               	tblrd		*
 10340  00322E  CFF5 F003          	movff	tablat,lcd_send_byte@n
 10341  003232  0E00               	movlw	0
 10342  003234  EC32  F01C         	call	_lcd_send_byte
 10343                           
 10344                           ;unmc_lcd_216.c: 153: Delay1KTCYx(8000000UL/800000UL);
 10345  003238  0E0A               	movlw	10
 10346  00323A  EC4D  F01D         	call	_Delay1KTCYx
 10347  00323E  2A05               	incf	lcd_init@i,f,c
 10348  003240  0E03               	movlw	3
 10349  003242  6405               	cpfsgt	lcd_init@i,c
 10350  003244  D7EB               	goto	l4891
 10351  003246  0012               	return	
 10352  003248  0012               	return		;funcret
 10353  00324A                     __end_of_lcd_init:
 10354                           	opt stack 0
 10355                           tblptru	equ	0xFF8
 10356                           tblptrh	equ	0xFF7
 10357                           tblptrl	equ	0xFF6
 10358                           tablat	equ	0xFF5
 10359                           prodh	equ	0xFF4
 10360                           prodl	equ	0xFF3
 10361                           indf0	equ	0xFEF
 10362                           postinc0	equ	0xFEE
 10363                           fsr0h	equ	0xFEA
 10364                           fsr0l	equ	0xFE9
 10365                           wreg	equ	0xFE8
 10366                           postdec1	equ	0xFE5
 10367                           fsr1l	equ	0xFE1
 10368                           indf2	equ	0xFDF
 10369                           postinc2	equ	0xFDE
 10370                           postdec2	equ	0xFDD
 10371                           fsr2h	equ	0xFDA
 10372                           fsr2l	equ	0xFD9
 10373                           status	equ	0xFD8
 10374                           
 10375 ;; *************** function _Delay1KTCYx *****************
 10376 ;; Defined at:
 10377 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\d1ktcyx.c"
 10378 ;; Parameters:    Size  Location     Type
 10379 ;;  unit            1    wreg     unsigned char 
 10380 ;; Auto vars:     Size  Location     Type
 10381 ;;  unit            1    0[COMRAM] unsigned char 
 10382 ;; Return value:  Size  Location     Type
 10383 ;;		None               void
 10384 ;; Registers used:
 10385 ;;		wreg
 10386 ;; Tracked objects:
 10387 ;;		On entry : 0/0
 10388 ;;		On exit  : 0/0
 10389 ;;		Unchanged: 0/0
 10390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10392 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10394 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10395 ;;Total ram usage:        1 bytes
 10396 ;; Hardware stack levels used:    1
 10397 ;; This function calls:
 10398 ;;		Nothing
 10399 ;; This function is called by:
 10400 ;;		_lcd_init
 10401 ;;		_DelayPORXLCD
 10402 ;; This function uses a non-reentrant model
 10403 ;;
 10404                           
 10405                           	psect	text63
 10406  003A9A                     __ptext63:
 10407                           	opt stack 0
 10408  003A9A                     _Delay1KTCYx:
 10409                           	opt stack 28
 10410                           
 10411                           ;incstack = 0
 10412                           ;Delay1KTCYx@unit stored from wreg
 10413  003A9A  6E01               	movwf	Delay1KTCYx@unit,c
 10414  003A9C  0EFA               	movlw	250
 10415  003A9E                     u4807:
 10416  003A9E  F000               	nop	
 10417  003AA0  2EE8               	decfsz	wreg,f,c
 10418  003AA2  D7FD               	goto	u4807
 10419  003AA4  2E01               	decfsz	Delay1KTCYx@unit,f,c
 10420  003AA6  D7FA               	goto	l3043
 10421  003AA8  0012               	return	
 10422  003AAA  0012               	return		;funcret
 10423  003AAC                     __end_of_Delay1KTCYx:
 10424                           	opt stack 0
 10425                           tblptru	equ	0xFF8
 10426                           tblptrh	equ	0xFF7
 10427                           tblptrl	equ	0xFF6
 10428                           tablat	equ	0xFF5
 10429                           prodh	equ	0xFF4
 10430                           prodl	equ	0xFF3
 10431                           indf0	equ	0xFEF
 10432                           postinc0	equ	0xFEE
 10433                           fsr0h	equ	0xFEA
 10434                           fsr0l	equ	0xFE9
 10435                           wreg	equ	0xFE8
 10436                           postdec1	equ	0xFE5
 10437                           fsr1l	equ	0xFE1
 10438                           indf2	equ	0xFDF
 10439                           postinc2	equ	0xFDE
 10440                           postdec2	equ	0xFDD
 10441                           fsr2h	equ	0xFDA
 10442                           fsr2l	equ	0xFD9
 10443                           status	equ	0xFD8
 10444                           
 10445 ;; *************** function _lcd_comand *****************
 10446 ;; Defined at:
 10447 ;;		line 189 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
 10448 ;; Parameters:    Size  Location     Type
 10449 ;;  d               1    wreg     unsigned char 
 10450 ;; Auto vars:     Size  Location     Type
 10451 ;;  d               1    4[COMRAM] unsigned char 
 10452 ;; Return value:  Size  Location     Type
 10453 ;;		None               void
 10454 ;; Registers used:
 10455 ;;		wreg, status,2, status,0, cstack
 10456 ;; Tracked objects:
 10457 ;;		On entry : 0/0
 10458 ;;		On exit  : 0/0
 10459 ;;		Unchanged: 0/0
 10460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10462 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10464 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10465 ;;Total ram usage:        1 bytes
 10466 ;; Hardware stack levels used:    1
 10467 ;; Hardware stack levels required when called:    2
 10468 ;; This function calls:
 10469 ;;		_lcd_send_byte
 10470 ;; This function is called by:
 10471 ;;		_caratula
 10472 ;;		_Setup
 10473 ;;		_clear
 10474 ;; This function uses a non-reentrant model
 10475 ;;
 10476                           
 10477                           	psect	text64
 10478  003AD0                     __ptext64:
 10479                           	opt stack 0
 10480  003AD0                     _lcd_comand:
 10481                           	opt stack 26
 10482                           
 10483                           ;incstack = 0
 10484                           ;lcd_comand@d stored from wreg
 10485  003AD0  6E05               	movwf	lcd_comand@d,c
 10486                           
 10487                           ;unmc_lcd_216.c: 190: lcd_send_byte(0,d);
 10488  003AD2  C005  F003         	movff	lcd_comand@d,lcd_send_byte@n
 10489  003AD6  0E00               	movlw	0
 10490  003AD8  EC32  F01C         	call	_lcd_send_byte
 10491  003ADC  0012               	return		;funcret
 10492  003ADE                     __end_of_lcd_comand:
 10493                           	opt stack 0
 10494                           tblptru	equ	0xFF8
 10495                           tblptrh	equ	0xFF7
 10496                           tblptrl	equ	0xFF6
 10497                           tablat	equ	0xFF5
 10498                           prodh	equ	0xFF4
 10499                           prodl	equ	0xFF3
 10500                           indf0	equ	0xFEF
 10501                           postinc0	equ	0xFEE
 10502                           fsr0h	equ	0xFEA
 10503                           fsr0l	equ	0xFE9
 10504                           wreg	equ	0xFE8
 10505                           postdec1	equ	0xFE5
 10506                           fsr1l	equ	0xFE1
 10507                           indf2	equ	0xFDF
 10508                           postinc2	equ	0xFDE
 10509                           postdec2	equ	0xFDD
 10510                           fsr2h	equ	0xFDA
 10511                           fsr2l	equ	0xFD9
 10512                           status	equ	0xFD8
 10513                           
 10514 ;; *************** function _lcd_send_byte *****************
 10515 ;; Defined at:
 10516 ;;		line 86 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
 10517 ;; Parameters:    Size  Location     Type
 10518 ;;  address         1    wreg     unsigned char 
 10519 ;;  n               1    2[COMRAM] unsigned char 
 10520 ;; Auto vars:     Size  Location     Type
 10521 ;;  address         1    3[COMRAM] unsigned char 
 10522 ;; Return value:  Size  Location     Type
 10523 ;;		None               void
 10524 ;; Registers used:
 10525 ;;		wreg, status,2, status,0, cstack
 10526 ;; Tracked objects:
 10527 ;;		On entry : 0/0
 10528 ;;		On exit  : 0/0
 10529 ;;		Unchanged: 0/0
 10530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10531 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10532 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10534 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10535 ;;Total ram usage:        2 bytes
 10536 ;; Hardware stack levels used:    1
 10537 ;; Hardware stack levels required when called:    1
 10538 ;; This function calls:
 10539 ;;		_Delay100TCYx
 10540 ;;		_lcd_send_nibble
 10541 ;; This function is called by:
 10542 ;;		_lcd_init
 10543 ;;		_lcd_gotoxy
 10544 ;;		_lcd_putc
 10545 ;;		_lcd_comand
 10546 ;;		_lcd_setcursor_vb
 10547 ;; This function uses a non-reentrant model
 10548 ;;
 10549                           
 10550                           	psect	text65
 10551  003864                     __ptext65:
 10552                           	opt stack 0
 10553  003864                     _lcd_send_byte:
 10554                           	opt stack 26
 10555                           
 10556                           ;incstack = 0
 10557                           ;lcd_send_byte@address stored from wreg
 10558  003864  6E04               	movwf	lcd_send_byte@address,c
 10559                           
 10560                           ;unmc_lcd_216.c: 88: LATBbits.LATB3=0;
 10561  003866  968A               	bcf	3978,3,c	;volatile
 10562                           
 10563                           ;unmc_lcd_216.c: 93: Delay100TCYx(8000000UL/4000000UL);
 10564  003868  0E02               	movlw	2
 10565  00386A  EC56  F01D         	call	_Delay100TCYx
 10566                           
 10567                           ;unmc_lcd_216.c: 96: TRISBbits.TRISB4=0;
 10568  00386E  9893               	bcf	3987,4,c	;volatile
 10569                           
 10570                           ;unmc_lcd_216.c: 97: TRISBbits.TRISB5=0;
 10571  003870  9A93               	bcf	3987,5,c	;volatile
 10572                           
 10573                           ;unmc_lcd_216.c: 98: TRISBbits.TRISB6=0;
 10574  003872  9C93               	bcf	3987,6,c	;volatile
 10575                           
 10576                           ;unmc_lcd_216.c: 99: TRISBbits.TRISB7=0;
 10577  003874  9E93               	bcf	3987,7,c	;volatile
 10578                           
 10579                           ;unmc_lcd_216.c: 101: if(address)
 10580  003876  5004               	movf	lcd_send_byte@address,w,c
 10581  003878  B4D8               	btfsc	status,2,c
 10582  00387A  D002               	goto	l154
 10583                           
 10584                           ;unmc_lcd_216.c: 102: LATBbits.LATB3=1;
 10585  00387C  868A               	bsf	3978,3,c	;volatile
 10586  00387E  D001               	goto	l155
 10587  003880                     l154:
 10588                           
 10589                           ;unmc_lcd_216.c: 103: else
 10590                           ;unmc_lcd_216.c: 104: LATBbits.LATB3=0;
 10591  003880  968A               	bcf	3978,3,c	;volatile
 10592  003882                     l155:
 10593                           
 10594                           ;unmc_lcd_216.c: 106: __nop();
 10595  003882  F000               	nop	
 10596                           
 10597                           ;unmc_lcd_216.c: 113: lcd_send_nibble(n >> 4);
 10598  003884  3803               	swapf	lcd_send_byte@n,w,c
 10599  003886  0B0F               	andlw	15
 10600  003888  EC63  F019         	call	_lcd_send_nibble
 10601                           
 10602                           ;unmc_lcd_216.c: 114: lcd_send_nibble(n & 0xf);
 10603  00388C  5003               	movf	lcd_send_byte@n,w,c
 10604  00388E  0B0F               	andlw	15
 10605  003890  EC63  F019         	call	_lcd_send_nibble
 10606  003894  0012               	return		;funcret
 10607  003896                     __end_of_lcd_send_byte:
 10608                           	opt stack 0
 10609                           tblptru	equ	0xFF8
 10610                           tblptrh	equ	0xFF7
 10611                           tblptrl	equ	0xFF6
 10612                           tablat	equ	0xFF5
 10613                           prodh	equ	0xFF4
 10614                           prodl	equ	0xFF3
 10615                           indf0	equ	0xFEF
 10616                           postinc0	equ	0xFEE
 10617                           fsr0h	equ	0xFEA
 10618                           fsr0l	equ	0xFE9
 10619                           wreg	equ	0xFE8
 10620                           postdec1	equ	0xFE5
 10621                           fsr1l	equ	0xFE1
 10622                           indf2	equ	0xFDF
 10623                           postinc2	equ	0xFDE
 10624                           postdec2	equ	0xFDD
 10625                           fsr2h	equ	0xFDA
 10626                           fsr2l	equ	0xFD9
 10627                           status	equ	0xFD8
 10628                           
 10629 ;; *************** function _lcd_send_nibble *****************
 10630 ;; Defined at:
 10631 ;;		line 25 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
 10632 ;; Parameters:    Size  Location     Type
 10633 ;;  nibble          1    wreg     unsigned char 
 10634 ;; Auto vars:     Size  Location     Type
 10635 ;;  nibble          1    1[COMRAM] unsigned char 
 10636 ;; Return value:  Size  Location     Type
 10637 ;;		None               void
 10638 ;; Registers used:
 10639 ;;		wreg, status,2, status,0
 10640 ;; Tracked objects:
 10641 ;;		On entry : 0/0
 10642 ;;		On exit  : 0/0
 10643 ;;		Unchanged: 0/0
 10644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10646 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10647 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10648 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10649 ;;Total ram usage:        2 bytes
 10650 ;; Hardware stack levels used:    1
 10651 ;; This function calls:
 10652 ;;		Nothing
 10653 ;; This function is called by:
 10654 ;;		_lcd_send_byte
 10655 ;;		_lcd_init
 10656 ;; This function uses a non-reentrant model
 10657 ;;
 10658                           
 10659                           	psect	text66
 10660  0032C6                     __ptext66:
 10661                           	opt stack 0
 10662  0032C6                     _lcd_send_nibble:
 10663                           	opt stack 26
 10664                           
 10665                           ;incstack = 0
 10666                           ;lcd_send_nibble@nibble stored from wreg
 10667  0032C6  6E02               	movwf	lcd_send_nibble@nibble,c
 10668                           
 10669                           ;unmc_lcd_216.c: 27: LATBbits.LATB4=!!(nibble & 0x01);
 10670  0032C8  A002               	btfss	lcd_send_nibble@nibble,0,c
 10671  0032CA  D003               	goto	u2370
 10672  0032CC  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10673  0032CE  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
 10674  0032D0  D001               	goto	u2388
 10675  0032D2                     u2370:
 10676  0032D2  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10677  0032D4                     u2388:
 10678  0032D4  3A01               	swapf	??_lcd_send_nibble,f,c
 10679  0032D6  508A               	movf	3978,w,c	;volatile
 10680  0032D8  1801               	xorwf	??_lcd_send_nibble,w,c
 10681  0032DA  0BEF               	andlw	-17
 10682  0032DC  1801               	xorwf	??_lcd_send_nibble,w,c
 10683  0032DE  6E8A               	movwf	3978,c	;volatile
 10684                           
 10685                           ;unmc_lcd_216.c: 28: LATBbits.LATB5=!!(nibble & 0x02);
 10686  0032E0  A202               	btfss	lcd_send_nibble@nibble,1,c
 10687  0032E2  D003               	goto	u2390
 10688  0032E4  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10689  0032E6  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
 10690  0032E8  D001               	goto	u2408
 10691  0032EA                     u2390:
 10692  0032EA  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10693  0032EC                     u2408:
 10694  0032EC  3A01               	swapf	??_lcd_send_nibble,f,c
 10695  0032EE  4601               	rlncf	??_lcd_send_nibble,f,c
 10696  0032F0  508A               	movf	3978,w,c	;volatile
 10697  0032F2  1801               	xorwf	??_lcd_send_nibble,w,c
 10698  0032F4  0BDF               	andlw	-33
 10699  0032F6  1801               	xorwf	??_lcd_send_nibble,w,c
 10700  0032F8  6E8A               	movwf	3978,c	;volatile
 10701                           
 10702                           ;unmc_lcd_216.c: 29: LATBbits.LATB6=!!(nibble & 0x04);
 10703  0032FA  A402               	btfss	lcd_send_nibble@nibble,2,c
 10704  0032FC  D003               	goto	u2410
 10705  0032FE  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10706  003300  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
 10707  003302  D001               	goto	u2428
 10708  003304                     u2410:
 10709  003304  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10710  003306                     u2428:
 10711  003306  3A01               	swapf	??_lcd_send_nibble,f,c
 10712  003308  4601               	rlncf	??_lcd_send_nibble,f,c
 10713  00330A  4601               	rlncf	??_lcd_send_nibble,f,c
 10714  00330C  508A               	movf	3978,w,c	;volatile
 10715  00330E  1801               	xorwf	??_lcd_send_nibble,w,c
 10716  003310  0BBF               	andlw	-65
 10717  003312  1801               	xorwf	??_lcd_send_nibble,w,c
 10718  003314  6E8A               	movwf	3978,c	;volatile
 10719                           
 10720                           ;unmc_lcd_216.c: 30: LATBbits.LATB7=!!(nibble & 0x08);
 10721  003316  A602               	btfss	lcd_send_nibble@nibble,3,c
 10722  003318  D003               	goto	u2430
 10723  00331A  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10724  00331C  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
 10725  00331E  D001               	goto	u2448
 10726  003320                     u2430:
 10727  003320  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10728  003322                     u2448:
 10729  003322  3201               	rrcf	??_lcd_send_nibble,f,c
 10730  003324  3201               	rrcf	??_lcd_send_nibble,f,c
 10731  003326  508A               	movf	3978,w,c	;volatile
 10732  003328  1801               	xorwf	??_lcd_send_nibble,w,c
 10733  00332A  0B7F               	andlw	-129
 10734  00332C  1801               	xorwf	??_lcd_send_nibble,w,c
 10735  00332E  6E8A               	movwf	3978,c	;volatile
 10736                           
 10737                           ;unmc_lcd_216.c: 32: __nop();
 10738  003330  F000               	nop	
 10739                           
 10740                           ;unmc_lcd_216.c: 33: LATBbits.LATB2=1;
 10741  003332  848A               	bsf	3978,2,c	;volatile
 10742                           
 10743                           ;unmc_lcd_216.c: 34: __nop();__nop();
 10744  003334  F000               	nop	
 10745  003336  F000               	nop	
 10746                           
 10747                           ;unmc_lcd_216.c: 35: LATBbits.LATB2=0;
 10748  003338  948A               	bcf	3978,2,c	;volatile
 10749  00333A  0012               	return		;funcret
 10750  00333C                     __end_of_lcd_send_nibble:
 10751                           	opt stack 0
 10752                           tblptru	equ	0xFF8
 10753                           tblptrh	equ	0xFF7
 10754                           tblptrl	equ	0xFF6
 10755                           tablat	equ	0xFF5
 10756                           prodh	equ	0xFF4
 10757                           prodl	equ	0xFF3
 10758                           indf0	equ	0xFEF
 10759                           postinc0	equ	0xFEE
 10760                           fsr0h	equ	0xFEA
 10761                           fsr0l	equ	0xFE9
 10762                           wreg	equ	0xFE8
 10763                           postdec1	equ	0xFE5
 10764                           fsr1l	equ	0xFE1
 10765                           indf2	equ	0xFDF
 10766                           postinc2	equ	0xFDE
 10767                           postdec2	equ	0xFDD
 10768                           fsr2h	equ	0xFDA
 10769                           fsr2l	equ	0xFD9
 10770                           status	equ	0xFD8
 10771                           
 10772 ;; *************** function _Delay100TCYx *****************
 10773 ;; Defined at:
 10774 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\d100tcyx.c"
 10775 ;; Parameters:    Size  Location     Type
 10776 ;;  unit            1    wreg     unsigned char 
 10777 ;; Auto vars:     Size  Location     Type
 10778 ;;  unit            1    0[COMRAM] unsigned char 
 10779 ;; Return value:  Size  Location     Type
 10780 ;;		None               void
 10781 ;; Registers used:
 10782 ;;		wreg
 10783 ;; Tracked objects:
 10784 ;;		On entry : 0/0
 10785 ;;		On exit  : 0/0
 10786 ;;		Unchanged: 0/0
 10787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10789 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10791 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10792 ;;Total ram usage:        1 bytes
 10793 ;; Hardware stack levels used:    1
 10794 ;; This function calls:
 10795 ;;		Nothing
 10796 ;; This function is called by:
 10797 ;;		_lcd_send_byte
 10798 ;; This function uses a non-reentrant model
 10799 ;;
 10800                           
 10801                           	psect	text67
 10802  003AAC                     __ptext67:
 10803                           	opt stack 0
 10804  003AAC                     _Delay100TCYx:
 10805                           	opt stack 26
 10806                           
 10807                           ;incstack = 0
 10808                           ;Delay100TCYx@unit stored from wreg
 10809  003AAC  6E01               	movwf	Delay100TCYx@unit,c
 10810  003AAE  0E21               	movlw	33
 10811  003AB0                     u4817:
 10812  003AB0  2EE8               	decfsz	wreg,f,c
 10813  003AB2  D7FE               	goto	u4817
 10814  003AB4  F000               	nop	
 10815  003AB6  2E01               	decfsz	Delay100TCYx@unit,f,c
 10816  003AB8  D7FA               	goto	l3499
 10817  003ABA  0012               	return	
 10818  003ABC  0012               	return		;funcret
 10819  003ABE                     __end_of_Delay100TCYx:
 10820                           	opt stack 0
 10821                           tblptru	equ	0xFF8
 10822                           tblptrh	equ	0xFF7
 10823                           tblptrl	equ	0xFF6
 10824                           tablat	equ	0xFF5
 10825                           prodh	equ	0xFF4
 10826                           prodl	equ	0xFF3
 10827                           indf0	equ	0xFEF
 10828                           postinc0	equ	0xFEE
 10829                           fsr0h	equ	0xFEA
 10830                           fsr0l	equ	0xFE9
 10831                           wreg	equ	0xFE8
 10832                           postdec1	equ	0xFE5
 10833                           fsr1l	equ	0xFE1
 10834                           indf2	equ	0xFDF
 10835                           postinc2	equ	0xFDE
 10836                           postdec2	equ	0xFDD
 10837                           fsr2h	equ	0xFDA
 10838                           fsr2l	equ	0xFD9
 10839                           status	equ	0xFD8
 10840                           
 10841 ;; *************** function _Write_RTC *****************
 10842 ;; Defined at:
 10843 ;;		line 22 in file "Unimic/sources/unmc_rtcc_01.c"
 10844 ;; Parameters:    Size  Location     Type
 10845 ;;		None
 10846 ;; Auto vars:     Size  Location     Type
 10847 ;;		None
 10848 ;; Return value:  Size  Location     Type
 10849 ;;		None               void
 10850 ;; Registers used:
 10851 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10852 ;; Tracked objects:
 10853 ;;		On entry : 0/0
 10854 ;;		On exit  : 0/0
 10855 ;;		Unchanged: 0/0
 10856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10857 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10860 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10861 ;;Total ram usage:        0 bytes
 10862 ;; Hardware stack levels used:    1
 10863 ;; Hardware stack levels required when called:    2
 10864 ;; This function calls:
 10865 ;;		_RtccWrOn
 10866 ;;		_RtccWriteDate
 10867 ;;		_RtccWriteTime
 10868 ;;		___awdiv
 10869 ;; This function is called by:
 10870 ;;		_Setup
 10871 ;;		_setClock
 10872 ;; This function uses a non-reentrant model
 10873 ;;
 10874                           
 10875                           	psect	text68
 10876  0018AC                     __ptext68:
 10877                           	opt stack 0
 10878  0018AC                     _Write_RTC:
 10879                           	opt stack 25
 10880                           
 10881                           ;unmc_rtcc_01.c: 24: RtccWrOn();
 10882                           
 10883                           ;incstack = 0
 10884  0018AC  EC5F  F01D         	call	_RtccWrOn	;wreg free
 10885                           
 10886                           ;unmc_rtcc_01.c: 26: PIE3bits.RTCCIE=1;
 10887  0018B0  80A3               	bsf	4003,0,c	;volatile
 10888                           
 10889                           ;unmc_rtcc_01.c: 27: segundo_d=segundo/10;
 10890  0018B2  C094  F001         	movff	_segundo,___awdiv@dividend
 10891  0018B6  C095  F002         	movff	_segundo+1,___awdiv@dividend+1
 10892  0018BA  0E00               	movlw	0
 10893  0018BC  6E04               	movwf	___awdiv@divisor+1,c
 10894  0018BE  0E0A               	movlw	10
 10895  0018C0  6E03               	movwf	___awdiv@divisor,c
 10896  0018C2  ECF4  F016         	call	___awdiv	;wreg free
 10897  0018C6  5001               	movf	?___awdiv,w,c
 10898  0018C8  0100               	movlb	0	; () banked
 10899  0018CA  6FEB               	movwf	_segundo_d& (0+255),b
 10900                           
 10901                           ; BSR set to: 0
 10902                           ;unmc_rtcc_01.c: 28: segundo_u=segundo-segundo_d*10;
 10903  0018CC  0100               	movlb	0	; () banked
 10904  0018CE  51EB               	movf	_segundo_d& (0+255),w,b
 10905  0018D0  0D0A               	mullw	10
 10906  0018D2  50F3               	movf	prodl,w,c
 10907  0018D4  0800               	sublw	0
 10908  0018D6  0100               	movlb	0	; () banked
 10909  0018D8  2594               	addwf	_segundo& (0+255),w,b
 10910  0018DA  0100               	movlb	0	; () banked
 10911  0018DC  6FEC               	movwf	_segundo_u& (0+255),b
 10912                           
 10913                           ; BSR set to: 0
 10914                           ;unmc_rtcc_01.c: 29: RtccTime.f.sec =segundo_d*16+segundo_u;
 10915  0018DE  0100               	movlb	0	; () banked
 10916  0018E0  51EB               	movf	_segundo_d& (0+255),w,b
 10917  0018E2  0D10               	mullw	16
 10918  0018E4  50F3               	movf	prodl,w,c
 10919  0018E6  0100               	movlb	0	; () banked
 10920  0018E8  25EC               	addwf	_segundo_u& (0+255),w,b
 10921  0018EA  0100               	movlb	0	; () banked
 10922  0018EC  6FB0               	movwf	(_RtccTime+1)& (0+255),b
 10923                           
 10924                           ; BSR set to: 0
 10925                           ;unmc_rtcc_01.c: 30: minuto_d=minuto/10;
 10926  0018EE  C0D7  F001         	movff	_minuto,___awdiv@dividend
 10927  0018F2  C0D8  F002         	movff	_minuto+1,___awdiv@dividend+1
 10928  0018F6  0E00               	movlw	0
 10929  0018F8  6E04               	movwf	___awdiv@divisor+1,c
 10930  0018FA  0E0A               	movlw	10
 10931  0018FC  6E03               	movwf	___awdiv@divisor,c
 10932  0018FE  ECF4  F016         	call	___awdiv	;wreg free
 10933  001902  5001               	movf	?___awdiv,w,c
 10934  001904  0100               	movlb	0	; () banked
 10935  001906  6FE9               	movwf	_minuto_d& (0+255),b
 10936                           
 10937                           ; BSR set to: 0
 10938                           ;unmc_rtcc_01.c: 31: minuto_u=minuto-minuto_d*10;
 10939  001908  0100               	movlb	0	; () banked
 10940  00190A  51E9               	movf	_minuto_d& (0+255),w,b
 10941  00190C  0D0A               	mullw	10
 10942  00190E  50F3               	movf	prodl,w,c
 10943  001910  0800               	sublw	0
 10944  001912  0100               	movlb	0	; () banked
 10945  001914  25D7               	addwf	_minuto& (0+255),w,b
 10946  001916  0100               	movlb	0	; () banked
 10947  001918  6FEA               	movwf	_minuto_u& (0+255),b
 10948                           
 10949                           ; BSR set to: 0
 10950                           ;unmc_rtcc_01.c: 32: RtccTime.f.min =minuto_d*16+minuto_u;
 10951  00191A  0100               	movlb	0	; () banked
 10952  00191C  51E9               	movf	_minuto_d& (0+255),w,b
 10953  00191E  0D10               	mullw	16
 10954  001920  50F3               	movf	prodl,w,c
 10955  001922  0100               	movlb	0	; () banked
 10956  001924  25EA               	addwf	_minuto_u& (0+255),w,b
 10957  001926  0100               	movlb	0	; () banked
 10958  001928  6FB1               	movwf	(_RtccTime+2)& (0+255),b
 10959                           
 10960                           ; BSR set to: 0
 10961                           ;unmc_rtcc_01.c: 33: hora_d=hora/10;
 10962  00192A  C0D3  F001         	movff	_hora,___awdiv@dividend
 10963  00192E  C0D4  F002         	movff	_hora+1,___awdiv@dividend+1
 10964  001932  0E00               	movlw	0
 10965  001934  6E04               	movwf	___awdiv@divisor+1,c
 10966  001936  0E0A               	movlw	10
 10967  001938  6E03               	movwf	___awdiv@divisor,c
 10968  00193A  ECF4  F016         	call	___awdiv	;wreg free
 10969  00193E  5001               	movf	?___awdiv,w,c
 10970  001940  0100               	movlb	0	; () banked
 10971  001942  6FE5               	movwf	_hora_d& (0+255),b
 10972                           
 10973                           ; BSR set to: 0
 10974                           ;unmc_rtcc_01.c: 34: hora_u=hora-hora_d*10;
 10975  001944  0100               	movlb	0	; () banked
 10976  001946  51E5               	movf	_hora_d& (0+255),w,b
 10977  001948  0D0A               	mullw	10
 10978  00194A  50F3               	movf	prodl,w,c
 10979  00194C  0800               	sublw	0
 10980  00194E  0100               	movlb	0	; () banked
 10981  001950  25D3               	addwf	_hora& (0+255),w,b
 10982  001952  0100               	movlb	0	; () banked
 10983  001954  6FE6               	movwf	_hora_u& (0+255),b
 10984                           
 10985                           ; BSR set to: 0
 10986                           ;unmc_rtcc_01.c: 35: RtccTime.f.hour=hora_d*16+hora_u;
 10987  001956  0100               	movlb	0	; () banked
 10988  001958  51E5               	movf	_hora_d& (0+255),w,b
 10989  00195A  0D10               	mullw	16
 10990  00195C  50F3               	movf	prodl,w,c
 10991  00195E  0100               	movlb	0	; () banked
 10992  001960  25E6               	addwf	_hora_u& (0+255),w,b
 10993  001962  0100               	movlb	0	; () banked
 10994  001964  6FB2               	movwf	(_RtccTime+3)& (0+255),b
 10995                           
 10996                           ; BSR set to: 0
 10997                           ;unmc_rtcc_01.c: 36: anio_d=anio/10;
 10998  001966  C0CD  F001         	movff	_anio,___awdiv@dividend
 10999  00196A  C0CE  F002         	movff	_anio+1,___awdiv@dividend+1
 11000  00196E  0E00               	movlw	0
 11001  001970  6E04               	movwf	___awdiv@divisor+1,c
 11002  001972  0E0A               	movlw	10
 11003  001974  6E03               	movwf	___awdiv@divisor,c
 11004  001976  ECF4  F016         	call	___awdiv	;wreg free
 11005  00197A  5001               	movf	?___awdiv,w,c
 11006  00197C  0100               	movlb	0	; () banked
 11007  00197E  6FE0               	movwf	_anio_d& (0+255),b
 11008                           
 11009                           ; BSR set to: 0
 11010                           ;unmc_rtcc_01.c: 37: anio_u=anio-anio_d*10;
 11011  001980  0100               	movlb	0	; () banked
 11012  001982  51E0               	movf	_anio_d& (0+255),w,b
 11013  001984  0D0A               	mullw	10
 11014  001986  50F3               	movf	prodl,w,c
 11015  001988  0800               	sublw	0
 11016  00198A  0100               	movlb	0	; () banked
 11017  00198C  25CD               	addwf	_anio& (0+255),w,b
 11018  00198E  0100               	movlb	0	; () banked
 11019  001990  6FE1               	movwf	_anio_u& (0+255),b
 11020                           
 11021                           ; BSR set to: 0
 11022                           ;unmc_rtcc_01.c: 38: RtccDate.f.year=anio_d*16+anio_u;
 11023  001992  0100               	movlb	0	; () banked
 11024  001994  51E0               	movf	_anio_d& (0+255),w,b
 11025  001996  0D10               	mullw	16
 11026  001998  50F3               	movf	prodl,w,c
 11027  00199A  0100               	movlb	0	; () banked
 11028  00199C  25E1               	addwf	_anio_u& (0+255),w,b
 11029  00199E  0100               	movlb	0	; () banked
 11030  0019A0  6FAE               	movwf	(_RtccDate+3)& (0+255),b
 11031                           
 11032                           ; BSR set to: 0
 11033                           ;unmc_rtcc_01.c: 39: mes_d=mes/10;
 11034  0019A2  C0D5  F001         	movff	_mes,___awdiv@dividend
 11035  0019A6  C0D6  F002         	movff	_mes+1,___awdiv@dividend+1
 11036  0019AA  0E00               	movlw	0
 11037  0019AC  6E04               	movwf	___awdiv@divisor+1,c
 11038  0019AE  0E0A               	movlw	10
 11039  0019B0  6E03               	movwf	___awdiv@divisor,c
 11040  0019B2  ECF4  F016         	call	___awdiv	;wreg free
 11041  0019B6  5001               	movf	?___awdiv,w,c
 11042  0019B8  0100               	movlb	0	; () banked
 11043  0019BA  6FE7               	movwf	_mes_d& (0+255),b
 11044                           
 11045                           ; BSR set to: 0
 11046                           ;unmc_rtcc_01.c: 40: mes_u=mes-mes_d*10;
 11047  0019BC  0100               	movlb	0	; () banked
 11048  0019BE  51E7               	movf	_mes_d& (0+255),w,b
 11049  0019C0  0D0A               	mullw	10
 11050  0019C2  50F3               	movf	prodl,w,c
 11051  0019C4  0800               	sublw	0
 11052  0019C6  0100               	movlb	0	; () banked
 11053  0019C8  25D5               	addwf	_mes& (0+255),w,b
 11054  0019CA  0100               	movlb	0	; () banked
 11055  0019CC  6FE8               	movwf	_mes_u& (0+255),b
 11056                           
 11057                           ; BSR set to: 0
 11058                           ;unmc_rtcc_01.c: 41: RtccDate.f.mon=mes_d*16+mes_u;
 11059  0019CE  0100               	movlb	0	; () banked
 11060  0019D0  51E7               	movf	_mes_d& (0+255),w,b
 11061  0019D2  0D10               	mullw	16
 11062  0019D4  50F3               	movf	prodl,w,c
 11063  0019D6  0100               	movlb	0	; () banked
 11064  0019D8  25E8               	addwf	_mes_u& (0+255),w,b
 11065  0019DA  0100               	movlb	0	; () banked
 11066  0019DC  6FAD               	movwf	(_RtccDate+2)& (0+255),b
 11067                           
 11068                           ; BSR set to: 0
 11069                           ;unmc_rtcc_01.c: 42: fecha_d=dia/10;
 11070  0019DE  C0CF  F001         	movff	_dia,___awdiv@dividend
 11071  0019E2  C0D0  F002         	movff	_dia+1,___awdiv@dividend+1
 11072  0019E6  0E00               	movlw	0
 11073  0019E8  6E04               	movwf	___awdiv@divisor+1,c
 11074  0019EA  0E0A               	movlw	10
 11075  0019EC  6E03               	movwf	___awdiv@divisor,c
 11076  0019EE  ECF4  F016         	call	___awdiv	;wreg free
 11077  0019F2  5001               	movf	?___awdiv,w,c
 11078  0019F4  0100               	movlb	0	; () banked
 11079  0019F6  6FE3               	movwf	_fecha_d& (0+255),b
 11080                           
 11081                           ; BSR set to: 0
 11082                           ;unmc_rtcc_01.c: 43: fecha_u=dia-fecha_d*10;
 11083  0019F8  0100               	movlb	0	; () banked
 11084  0019FA  51E3               	movf	_fecha_d& (0+255),w,b
 11085  0019FC  0D0A               	mullw	10
 11086  0019FE  50F3               	movf	prodl,w,c
 11087  001A00  0800               	sublw	0
 11088  001A02  0100               	movlb	0	; () banked
 11089  001A04  25CF               	addwf	_dia& (0+255),w,b
 11090  001A06  0100               	movlb	0	; () banked
 11091  001A08  6FE4               	movwf	_fecha_u& (0+255),b
 11092                           
 11093                           ; BSR set to: 0
 11094                           ;unmc_rtcc_01.c: 44: RtccDate.f.mday=fecha_d*16+fecha_u;
 11095  001A0A  0100               	movlb	0	; () banked
 11096  001A0C  51E3               	movf	_fecha_d& (0+255),w,b
 11097  001A0E  0D10               	mullw	16
 11098  001A10  50F3               	movf	prodl,w,c
 11099  001A12  0100               	movlb	0	; () banked
 11100  001A14  25E4               	addwf	_fecha_u& (0+255),w,b
 11101  001A16  0100               	movlb	0	; () banked
 11102  001A18  6FAC               	movwf	(_RtccDate+1)& (0+255),b
 11103                           
 11104                           ; BSR set to: 0
 11105                           ;unmc_rtcc_01.c: 45: dia_semana=diasem;
 11106  001A1A  C0D1  F0E2         	movff	_diasem,_dia_semana
 11107                           
 11108                           ; BSR set to: 0
 11109                           ;unmc_rtcc_01.c: 46: RtccDate.f.wday =diasem;
 11110  001A1E  C0D1  F0AB         	movff	_diasem,_RtccDate
 11111                           
 11112                           ; BSR set to: 0
 11113                           ;unmc_rtcc_01.c: 47: RtccWriteTime(&RtccTime,1);
 11114  001A22  0EAF               	movlw	low _RtccTime
 11115  001A24  6E01               	movwf	RtccWriteTime@pTm,c
 11116  001A26  0E00               	movlw	high _RtccTime
 11117  001A28  6E02               	movwf	RtccWriteTime@pTm+1,c
 11118  001A2A  0E01               	movlw	1
 11119  001A2C  6E03               	movwf	RtccWriteTime@di,c
 11120  001A2E  ECFC  F010         	call	_RtccWriteTime	;wreg free
 11121                           
 11122                           ;unmc_rtcc_01.c: 48: RtccWriteDate(&RtccDate,1);
 11123  001A32  0EAB               	movlw	low _RtccDate
 11124  001A34  6E01               	movwf	RtccWriteDate@pDt,c
 11125  001A36  0E00               	movlw	high _RtccDate
 11126  001A38  6E02               	movwf	RtccWriteDate@pDt+1,c
 11127  001A3A  0E01               	movlw	1
 11128  001A3C  6E03               	movwf	RtccWriteDate@di,c
 11129  001A3E  EC2C  F00F         	call	_RtccWriteDate	;wreg free
 11130                           
 11131                           ;unmc_rtcc_01.c: 49: (RTCCFGbits.RTCEN=1);
 11132  001A42  010F               	movlb	15	; () banked
 11133  001A44  8F3F               	bsf	63,7,b	;volatile
 11134                           
 11135                           ; BSR set to: 15
 11136  001A46  0012               	return		;funcret
 11137  001A48                     __end_of_Write_RTC:
 11138                           	opt stack 0
 11139                           tblptru	equ	0xFF8
 11140                           tblptrh	equ	0xFF7
 11141                           tblptrl	equ	0xFF6
 11142                           tablat	equ	0xFF5
 11143                           prodh	equ	0xFF4
 11144                           prodl	equ	0xFF3
 11145                           indf0	equ	0xFEF
 11146                           postinc0	equ	0xFEE
 11147                           fsr0h	equ	0xFEA
 11148                           fsr0l	equ	0xFE9
 11149                           wreg	equ	0xFE8
 11150                           postdec1	equ	0xFE5
 11151                           fsr1l	equ	0xFE1
 11152                           indf2	equ	0xFDF
 11153                           postinc2	equ	0xFDE
 11154                           postdec2	equ	0xFDD
 11155                           fsr2h	equ	0xFDA
 11156                           fsr2l	equ	0xFD9
 11157                           status	equ	0xFD8
 11158                           
 11159 ;; *************** function ___awdiv *****************
 11160 ;; Defined at:
 11161 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\awdiv.c"
 11162 ;; Parameters:    Size  Location     Type
 11163 ;;  dividend        2    0[COMRAM] int 
 11164 ;;  divisor         2    2[COMRAM] int 
 11165 ;; Auto vars:     Size  Location     Type
 11166 ;;  quotient        2    6[COMRAM] int 
 11167 ;;  sign            1    5[COMRAM] unsigned char 
 11168 ;;  counter         1    4[COMRAM] unsigned char 
 11169 ;; Return value:  Size  Location     Type
 11170 ;;                  2    0[COMRAM] int 
 11171 ;; Registers used:
 11172 ;;		wreg, status,2, status,0
 11173 ;; Tracked objects:
 11174 ;;		On entry : 0/0
 11175 ;;		On exit  : 0/0
 11176 ;;		Unchanged: 0/0
 11177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11178 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11179 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11181 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11182 ;;Total ram usage:        8 bytes
 11183 ;; Hardware stack levels used:    1
 11184 ;; This function calls:
 11185 ;;		Nothing
 11186 ;; This function is called by:
 11187 ;;		__delay_s
 11188 ;;		_Write_RTC
 11189 ;; This function uses a non-reentrant model
 11190 ;;
 11191                           
 11192                           	psect	text69
 11193  002DE8                     __ptext69:
 11194                           	opt stack 0
 11195  002DE8                     ___awdiv:
 11196                           	opt stack 27
 11197                           
 11198                           ; BSR set to: 15
 11199                           ;incstack = 0
 11200  002DE8  0E00               	movlw	0
 11201  002DEA  6E06               	movwf	___awdiv@sign,c
 11202  002DEC  AE04               	btfss	___awdiv@divisor+1,7,c
 11203  002DEE  D007               	goto	l4385
 11204  002DF0  6C03               	negf	___awdiv@divisor,c
 11205  002DF2  1E04               	comf	___awdiv@divisor+1,f,c
 11206  002DF4  B0D8               	btfsc	status,0,c
 11207  002DF6  2A04               	incf	___awdiv@divisor+1,f,c
 11208  002DF8  0E01               	movlw	1
 11209  002DFA  6E06               	movwf	___awdiv@sign,c
 11210  002DFC  D000               	goto	l4385
 11211  002DFE                     l4385:
 11212  002DFE  AE02               	btfss	___awdiv@dividend+1,7,c
 11213  002E00  D007               	goto	l4391
 11214  002E02  6C01               	negf	___awdiv@dividend,c
 11215  002E04  1E02               	comf	___awdiv@dividend+1,f,c
 11216  002E06  B0D8               	btfsc	status,0,c
 11217  002E08  2A02               	incf	___awdiv@dividend+1,f,c
 11218  002E0A  0E01               	movlw	1
 11219  002E0C  1A06               	xorwf	___awdiv@sign,f,c
 11220  002E0E  D000               	goto	l4391
 11221  002E10                     l4391:
 11222  002E10  0E00               	movlw	0
 11223  002E12  6E08               	movwf	___awdiv@quotient+1,c
 11224  002E14  0E00               	movlw	0
 11225  002E16  6E07               	movwf	___awdiv@quotient,c
 11226  002E18  5003               	movf	___awdiv@divisor,w,c
 11227  002E1A  1004               	iorwf	___awdiv@divisor+1,w,c
 11228  002E1C  B4D8               	btfsc	status,2,c
 11229  002E1E  D021               	goto	l4413
 11230  002E20  0E01               	movlw	1
 11231  002E22  6E05               	movwf	___awdiv@counter,c
 11232  002E24  D005               	goto	l4399
 11233  002E26                     l4397:
 11234  002E26  90D8               	bcf	status,0,c
 11235  002E28  3603               	rlcf	___awdiv@divisor,f,c
 11236  002E2A  3604               	rlcf	___awdiv@divisor+1,f,c
 11237  002E2C  2A05               	incf	___awdiv@counter,f,c
 11238  002E2E  D000               	goto	l4399
 11239  002E30                     l4399:
 11240  002E30  BE04               	btfsc	___awdiv@divisor+1,7,c
 11241  002E32  D002               	goto	l4401
 11242  002E34  D7F8               	goto	l4397
 11243  002E36  D000               	goto	l4401
 11244  002E38                     l4401:
 11245  002E38  90D8               	bcf	status,0,c
 11246  002E3A  3607               	rlcf	___awdiv@quotient,f,c
 11247  002E3C  3608               	rlcf	___awdiv@quotient+1,f,c
 11248  002E3E  5003               	movf	___awdiv@divisor,w,c
 11249  002E40  5C01               	subwf	___awdiv@dividend,w,c
 11250  002E42  5004               	movf	___awdiv@divisor+1,w,c
 11251  002E44  5802               	subwfb	___awdiv@dividend+1,w,c
 11252  002E46  A0D8               	btfss	status,0,c
 11253  002E48  D006               	goto	l4409
 11254  002E4A  5003               	movf	___awdiv@divisor,w,c
 11255  002E4C  5E01               	subwf	___awdiv@dividend,f,c
 11256  002E4E  5004               	movf	___awdiv@divisor+1,w,c
 11257  002E50  5A02               	subwfb	___awdiv@dividend+1,f,c
 11258  002E52  8007               	bsf	___awdiv@quotient,0,c
 11259  002E54  D000               	goto	l4409
 11260  002E56                     l4409:
 11261  002E56  90D8               	bcf	status,0,c
 11262  002E58  3204               	rrcf	___awdiv@divisor+1,f,c
 11263  002E5A  3203               	rrcf	___awdiv@divisor,f,c
 11264  002E5C  2E05               	decfsz	___awdiv@counter,f,c
 11265  002E5E  D7EC               	goto	l4401
 11266  002E60  D000               	goto	l4413
 11267  002E62                     l4413:
 11268  002E62  5006               	movf	___awdiv@sign,w,c
 11269  002E64  B4D8               	btfsc	status,2,c
 11270  002E66  D005               	goto	l4417
 11271  002E68  6C07               	negf	___awdiv@quotient,c
 11272  002E6A  1E08               	comf	___awdiv@quotient+1,f,c
 11273  002E6C  B0D8               	btfsc	status,0,c
 11274  002E6E  2A08               	incf	___awdiv@quotient+1,f,c
 11275  002E70  D000               	goto	l4417
 11276  002E72                     l4417:
 11277  002E72  C007  F001         	movff	___awdiv@quotient,?___awdiv
 11278  002E76  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
 11279  002E7A  0012               	return	
 11280  002E7C  0012               	return		;funcret
 11281  002E7E                     __end_of___awdiv:
 11282                           	opt stack 0
 11283                           tblptru	equ	0xFF8
 11284                           tblptrh	equ	0xFF7
 11285                           tblptrl	equ	0xFF6
 11286                           tablat	equ	0xFF5
 11287                           prodh	equ	0xFF4
 11288                           prodl	equ	0xFF3
 11289                           indf0	equ	0xFEF
 11290                           postinc0	equ	0xFEE
 11291                           fsr0h	equ	0xFEA
 11292                           fsr0l	equ	0xFE9
 11293                           wreg	equ	0xFE8
 11294                           postdec1	equ	0xFE5
 11295                           fsr1l	equ	0xFE1
 11296                           indf2	equ	0xFDF
 11297                           postinc2	equ	0xFDE
 11298                           postdec2	equ	0xFDD
 11299                           fsr2h	equ	0xFDA
 11300                           fsr2l	equ	0xFD9
 11301                           status	equ	0xFD8
 11302                           
 11303 ;; *************** function _RtccWriteTime *****************
 11304 ;; Defined at:
 11305 ;;		line 34 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteTime.c"
 11306 ;; Parameters:    Size  Location     Type
 11307 ;;  pTm             2    0[COMRAM] PTR const struct .
 11308 ;;		 -> RtccTime(4), 
 11309 ;;  di              1    2[COMRAM] enum E7121
 11310 ;; Auto vars:     Size  Location     Type
 11311 ;;  tempHourWDay    2    9[COMRAM] struct .
 11312 ;;  tempMinSec      2    7[COMRAM] struct .
 11313 ;;  wasWrEn         1    6[COMRAM] enum E7121
 11314 ;;  wasAlrm         1    5[COMRAM] enum E7121
 11315 ;;  wasOn           1    4[COMRAM] enum E7121
 11316 ;; Return value:  Size  Location     Type
 11317 ;;                  1    wreg      enum E7121
 11318 ;; Registers used:
 11319 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11320 ;; Tracked objects:
 11321 ;;		On entry : 0/0
 11322 ;;		On exit  : 0/0
 11323 ;;		Unchanged: 0/0
 11324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11325 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11326 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11327 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11328 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11329 ;;Total ram usage:       11 bytes
 11330 ;; Hardware stack levels used:    1
 11331 ;; Hardware stack levels required when called:    1
 11332 ;; This function calls:
 11333 ;;		_RtccWrOn
 11334 ;; This function is called by:
 11335 ;;		_Write_RTC
 11336 ;; This function uses a non-reentrant model
 11337 ;;
 11338                           
 11339                           	psect	text70
 11340  0021F8                     __ptext70:
 11341                           	opt stack 0
 11342  0021F8                     _RtccWriteTime:
 11343                           	opt stack 25
 11344                           
 11345                           ;incstack = 0
 11346  0021F8  0E00               	movlw	0
 11347  0021FA  6E06               	movwf	RtccWriteTime@wasAlrm,c
 11348  0021FC  EE20 F002          	lfsr	2,2
 11349  002200  5001               	movf	RtccWriteTime@pTm,w,c
 11350  002202  26D9               	addwf	fsr2l,f,c
 11351  002204  5002               	movf	RtccWriteTime@pTm+1,w,c
 11352  002206  22DA               	addwfc	fsr2h,f,c
 11353  002208  0E5A               	movlw	90
 11354  00220A  60DF               	cpfslt	indf2,c
 11355  00220C  0012               	return	
 11356  00220E  EE20 F001          	lfsr	2,1
 11357  002212  5001               	movf	RtccWriteTime@pTm,w,c
 11358  002214  26D9               	addwf	fsr2l,f,c
 11359  002216  5002               	movf	RtccWriteTime@pTm+1,w,c
 11360  002218  22DA               	addwfc	fsr2h,f,c
 11361  00221A  0E5A               	movlw	90
 11362  00221C  60DF               	cpfslt	indf2,c
 11363  00221E  0012               	return	
 11364  002220  EE20 F003          	lfsr	2,3
 11365  002224  5001               	movf	RtccWriteTime@pTm,w,c
 11366  002226  26D9               	addwf	fsr2l,f,c
 11367  002228  5002               	movf	RtccWriteTime@pTm+1,w,c
 11368  00222A  22DA               	addwfc	fsr2h,f,c
 11369  00222C  0E24               	movlw	36
 11370  00222E  64DF               	cpfsgt	indf2,c
 11371  002230  D002               	goto	l4249
 11372  002232  0012               	return	
 11373                           
 11374                           ;	Return value of _RtccWriteTime is never used
 11375  002234  0012               	return	
 11376  002236                     l4249:
 11377  002236  EE20 F002          	lfsr	2,2
 11378  00223A  5001               	movf	RtccWriteTime@pTm,w,c
 11379  00223C  26D9               	addwf	fsr2l,f,c
 11380  00223E  5002               	movf	RtccWriteTime@pTm+1,w,c
 11381  002240  22DA               	addwfc	fsr2h,f,c
 11382  002242  50DF               	movf	indf2,w,c
 11383  002244  6E09               	movwf	RtccWriteTime@tempMinSec+1,c
 11384  002246  EE20 F001          	lfsr	2,1
 11385  00224A  5001               	movf	RtccWriteTime@pTm,w,c
 11386  00224C  26D9               	addwf	fsr2l,f,c
 11387  00224E  5002               	movf	RtccWriteTime@pTm+1,w,c
 11388  002250  22DA               	addwfc	fsr2h,f,c
 11389  002252  50DF               	movf	indf2,w,c
 11390  002254  6E08               	movwf	RtccWriteTime@tempMinSec,c
 11391  002256  5003               	movf	RtccWriteTime@di,w,c
 11392  002258  B4D8               	btfsc	status,2,c
 11393  00225A  D002               	goto	l4255
 11394  00225C  9CF2               	bcf	intcon,6,c	;volatile
 11395  00225E  D000               	goto	l4255
 11396  002260                     l4255:
 11397  002260  0E00               	movlw	0
 11398  002262  BB3F               	btfsc	63,5,b	;volatile
 11399  002264  0E01               	movlw	1
 11400  002266  6E07               	movwf	RtccWriteTime@wasWrEn,c
 11401  002268  5007               	movf	RtccWriteTime@wasWrEn,w,c
 11402  00226A  A4D8               	btfss	status,2,c
 11403  00226C  D003               	goto	l4259
 11404  00226E  EC5F  F01D         	call	_RtccWrOn	;wreg free
 11405  002272  D000               	goto	l4259
 11406  002274                     l4259:
 11407  002274  0E00               	movlw	0
 11408  002276  BF3F               	btfsc	63,7,b	;volatile
 11409  002278  0E01               	movlw	1
 11410  00227A  6E05               	movwf	RtccWriteTime@wasOn,c
 11411  00227C  5005               	movf	RtccWriteTime@wasOn,w,c
 11412  00227E  B4D8               	btfsc	status,2,c
 11413  002280  D007               	goto	l4265
 11414  002282  0E00               	movlw	0
 11415  002284  BE91               	btfsc	3985,7,c	;volatile
 11416  002286  0E01               	movlw	1
 11417  002288  6E06               	movwf	RtccWriteTime@wasAlrm,c
 11418  00228A  010F               	movlb	15	; () banked
 11419  00228C  9F3F               	bcf	63,7,b	;volatile
 11420  00228E  D000               	goto	l4265
 11421  002290                     l4265:
 11422  002290  0EFC               	movlw	252
 11423  002292  010F               	movlb	15	; () banked
 11424  002294  173F               	andwf	63,f,b	;volatile
 11425  002296  010F               	movlb	15	; () banked
 11426  002298  813F               	bsf	63,0,b	;volatile
 11427                           
 11428                           ; BSR set to: 15
 11429  00229A  CF98 F00A          	movff	3992,RtccWriteTime@tempHourWDay	;volatile
 11430                           
 11431                           ; BSR set to: 15
 11432  00229E  CF99 F00B          	movff	3993,RtccWriteTime@tempHourWDay+1	;volatile
 11433                           
 11434                           ; BSR set to: 15
 11435  0022A2  EE20 F003          	lfsr	2,3
 11436  0022A6  5001               	movf	RtccWriteTime@pTm,w,c
 11437  0022A8  26D9               	addwf	fsr2l,f,c
 11438  0022AA  5002               	movf	RtccWriteTime@pTm+1,w,c
 11439  0022AC  22DA               	addwfc	fsr2h,f,c
 11440  0022AE  50DF               	movf	indf2,w,c
 11441  0022B0  6E0A               	movwf	RtccWriteTime@tempHourWDay,c
 11442                           
 11443                           ; BSR set to: 15
 11444  0022B2  0EFC               	movlw	252
 11445  0022B4  010F               	movlb	15	; () banked
 11446  0022B6  173F               	andwf	63,f,b	;volatile
 11447                           
 11448                           ; BSR set to: 15
 11449  0022B8  010F               	movlb	15	; () banked
 11450  0022BA  813F               	bsf	63,0,b	;volatile
 11451                           
 11452                           ; BSR set to: 15
 11453  0022BC  C00A  FF98         	movff	RtccWriteTime@tempHourWDay,3992	;volatile
 11454                           
 11455                           ; BSR set to: 15
 11456  0022C0  C00B  FF99         	movff	RtccWriteTime@tempHourWDay+1,3993	;volatile
 11457                           
 11458                           ; BSR set to: 15
 11459  0022C4  C008  FF98         	movff	RtccWriteTime@tempMinSec,3992	;volatile
 11460                           
 11461                           ; BSR set to: 15
 11462  0022C8  C009  FF99         	movff	RtccWriteTime@tempMinSec+1,3993	;volatile
 11463                           
 11464                           ; BSR set to: 15
 11465  0022CC  5005               	movf	RtccWriteTime@wasOn,w,c
 11466  0022CE  B4D8               	btfsc	status,2,c
 11467  0022D0  D00D               	goto	l4297
 11468                           
 11469                           ; BSR set to: 15
 11470  0022D2  010F               	movlb	15	; () banked
 11471  0022D4  8F3F               	bsf	63,7,b	;volatile
 11472                           
 11473                           ; BSR set to: 15
 11474  0022D6  5006               	movf	RtccWriteTime@wasAlrm,w,c
 11475  0022D8  B4D8               	btfsc	status,2,c
 11476  0022DA  D002               	goto	l4293
 11477                           
 11478                           ; BSR set to: 15
 11479  0022DC  8E91               	bsf	3985,7,c	;volatile
 11480  0022DE  D000               	goto	l4293
 11481  0022E0                     l4293:
 11482                           
 11483                           ; BSR set to: 15
 11484  0022E0  5007               	movf	RtccWriteTime@wasWrEn,w,c
 11485  0022E2  B4D8               	btfsc	status,2,c
 11486  0022E4  D009               	goto	l4301
 11487                           
 11488                           ; BSR set to: 15
 11489  0022E6  EC5F  F01D         	call	_RtccWrOn	;wreg free
 11490  0022EA  D006               	goto	l4301
 11491  0022EC                     l4297:
 11492  0022EC  5007               	movf	RtccWriteTime@wasWrEn,w,c
 11493  0022EE  A4D8               	btfss	status,2,c
 11494  0022F0  D003               	goto	l4301
 11495  0022F2  010F               	movlb	15	; () banked
 11496  0022F4  9B3F               	bcf	63,5,b	;volatile
 11497                           
 11498                           ; BSR set to: 15
 11499  0022F6  D000               	goto	l4301
 11500  0022F8                     l4301:
 11501  0022F8  5003               	movf	RtccWriteTime@di,w,c
 11502  0022FA  B4D8               	btfsc	status,2,c
 11503  0022FC  0012               	return	
 11504  0022FE  8CF2               	bsf	intcon,6,c	;volatile
 11505  002300  0012               	return	
 11506                           
 11507                           ;	Return value of _RtccWriteTime is never used
 11508  002302  0012               	return		;funcret
 11509  002304                     __end_of_RtccWriteTime:
 11510                           	opt stack 0
 11511                           tblptru	equ	0xFF8
 11512                           tblptrh	equ	0xFF7
 11513                           tblptrl	equ	0xFF6
 11514                           tablat	equ	0xFF5
 11515                           prodh	equ	0xFF4
 11516                           prodl	equ	0xFF3
 11517                           intcon	equ	0xFF2
 11518                           indf0	equ	0xFEF
 11519                           postinc0	equ	0xFEE
 11520                           fsr0h	equ	0xFEA
 11521                           fsr0l	equ	0xFE9
 11522                           wreg	equ	0xFE8
 11523                           postdec1	equ	0xFE5
 11524                           fsr1l	equ	0xFE1
 11525                           indf2	equ	0xFDF
 11526                           postinc2	equ	0xFDE
 11527                           postdec2	equ	0xFDD
 11528                           fsr2h	equ	0xFDA
 11529                           fsr2l	equ	0xFD9
 11530                           status	equ	0xFD8
 11531                           
 11532 ;; *************** function _RtccWriteDate *****************
 11533 ;; Defined at:
 11534 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteDate.c"
 11535 ;; Parameters:    Size  Location     Type
 11536 ;;  pDt             2    0[COMRAM] PTR const struct .
 11537 ;;		 -> RtccDate(4), 
 11538 ;;  di              1    2[COMRAM] enum E7121
 11539 ;; Auto vars:     Size  Location     Type
 11540 ;;  tempHourWDay    2   11[COMRAM] struct .
 11541 ;;  tempDayMonth    2    9[COMRAM] struct .
 11542 ;;  tempYear        2    6[COMRAM] struct .
 11543 ;;  wasWrEn         1    8[COMRAM] enum E7121
 11544 ;;  wasAlrm         1    5[COMRAM] enum E7121
 11545 ;;  wasOn           1    4[COMRAM] enum E7121
 11546 ;; Return value:  Size  Location     Type
 11547 ;;                  1    wreg      enum E7121
 11548 ;; Registers used:
 11549 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11550 ;; Tracked objects:
 11551 ;;		On entry : 0/0
 11552 ;;		On exit  : 0/0
 11553 ;;		Unchanged: 0/0
 11554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11555 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11556 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11557 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11558 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11559 ;;Total ram usage:       13 bytes
 11560 ;; Hardware stack levels used:    1
 11561 ;; Hardware stack levels required when called:    1
 11562 ;; This function calls:
 11563 ;;		_RtccWrOn
 11564 ;; This function is called by:
 11565 ;;		_Write_RTC
 11566 ;; This function uses a non-reentrant model
 11567 ;;
 11568                           
 11569                           	psect	text71
 11570  001E58                     __ptext71:
 11571                           	opt stack 0
 11572  001E58                     _RtccWriteDate:
 11573                           	opt stack 25
 11574                           
 11575                           ;incstack = 0
 11576  001E58  0E00               	movlw	0
 11577  001E5A  6E06               	movwf	RtccWriteDate@wasAlrm,c
 11578  001E5C  EE20 F002          	lfsr	2,2
 11579  001E60  5001               	movf	RtccWriteDate@pDt,w,c
 11580  001E62  26D9               	addwf	fsr2l,f,c
 11581  001E64  5002               	movf	RtccWriteDate@pDt+1,w,c
 11582  001E66  22DA               	addwfc	fsr2h,f,c
 11583  001E68  0E13               	movlw	19
 11584  001E6A  60DF               	cpfslt	indf2,c
 11585  001E6C  0012               	return	
 11586  001E6E  EE20 F002          	lfsr	2,2
 11587  001E72  5001               	movf	RtccWriteDate@pDt,w,c
 11588  001E74  26D9               	addwf	fsr2l,f,c
 11589  001E76  5002               	movf	RtccWriteDate@pDt+1,w,c
 11590  001E78  22DA               	addwfc	fsr2h,f,c
 11591  001E7A  50DF               	movf	indf2,w,c
 11592  001E7C  B4D8               	btfsc	status,2,c
 11593  001E7E  0012               	return	
 11594  001E80  EE20 F001          	lfsr	2,1
 11595  001E84  5001               	movf	RtccWriteDate@pDt,w,c
 11596  001E86  26D9               	addwf	fsr2l,f,c
 11597  001E88  5002               	movf	RtccWriteDate@pDt+1,w,c
 11598  001E8A  22DA               	addwfc	fsr2h,f,c
 11599  001E8C  0E32               	movlw	50
 11600  001E8E  60DF               	cpfslt	indf2,c
 11601  001E90  0012               	return	
 11602  001E92  EE20 F001          	lfsr	2,1
 11603  001E96  5001               	movf	RtccWriteDate@pDt,w,c
 11604  001E98  26D9               	addwf	fsr2l,f,c
 11605  001E9A  5002               	movf	RtccWriteDate@pDt+1,w,c
 11606  001E9C  22DA               	addwfc	fsr2h,f,c
 11607  001E9E  50DF               	movf	indf2,w,c
 11608  001EA0  B4D8               	btfsc	status,2,c
 11609  001EA2  0012               	return	
 11610  001EA4  EE20 F003          	lfsr	2,3
 11611  001EA8  5001               	movf	RtccWriteDate@pDt,w,c
 11612  001EAA  26D9               	addwf	fsr2l,f,c
 11613  001EAC  5002               	movf	RtccWriteDate@pDt+1,w,c
 11614  001EAE  22DA               	addwfc	fsr2h,f,c
 11615  001EB0  0E99               	movlw	153
 11616  001EB2  64DF               	cpfsgt	indf2,c
 11617  001EB4  D002               	goto	l4317
 11618  001EB6  0012               	return	
 11619                           
 11620                           ;	Return value of _RtccWriteDate is never used
 11621  001EB8  0012               	return	
 11622  001EBA                     l4317:
 11623  001EBA  EE20 F003          	lfsr	2,3
 11624  001EBE  5001               	movf	RtccWriteDate@pDt,w,c
 11625  001EC0  26D9               	addwf	fsr2l,f,c
 11626  001EC2  5002               	movf	RtccWriteDate@pDt+1,w,c
 11627  001EC4  22DA               	addwfc	fsr2h,f,c
 11628  001EC6  50DF               	movf	indf2,w,c
 11629  001EC8  6E07               	movwf	RtccWriteDate@tempYear,c
 11630  001ECA  EE20 F001          	lfsr	2,1
 11631  001ECE  5001               	movf	RtccWriteDate@pDt,w,c
 11632  001ED0  26D9               	addwf	fsr2l,f,c
 11633  001ED2  5002               	movf	RtccWriteDate@pDt+1,w,c
 11634  001ED4  22DA               	addwfc	fsr2h,f,c
 11635  001ED6  50DF               	movf	indf2,w,c
 11636  001ED8  6E0A               	movwf	RtccWriteDate@tempDayMonth,c
 11637  001EDA  EE20 F002          	lfsr	2,2
 11638  001EDE  5001               	movf	RtccWriteDate@pDt,w,c
 11639  001EE0  26D9               	addwf	fsr2l,f,c
 11640  001EE2  5002               	movf	RtccWriteDate@pDt+1,w,c
 11641  001EE4  22DA               	addwfc	fsr2h,f,c
 11642  001EE6  50DF               	movf	indf2,w,c
 11643  001EE8  6E0B               	movwf	RtccWriteDate@tempDayMonth+1,c
 11644  001EEA  5003               	movf	RtccWriteDate@di,w,c
 11645  001EEC  B4D8               	btfsc	status,2,c
 11646  001EEE  D002               	goto	l4323
 11647  001EF0  9CF2               	bcf	intcon,6,c	;volatile
 11648  001EF2  D000               	goto	l4323
 11649  001EF4                     l4323:
 11650  001EF4  0E00               	movlw	0
 11651  001EF6  BB3F               	btfsc	63,5,b	;volatile
 11652  001EF8  0E01               	movlw	1
 11653  001EFA  6E09               	movwf	RtccWriteDate@wasWrEn,c
 11654  001EFC  5009               	movf	RtccWriteDate@wasWrEn,w,c
 11655  001EFE  A4D8               	btfss	status,2,c
 11656  001F00  D003               	goto	l4327
 11657  001F02  EC5F  F01D         	call	_RtccWrOn	;wreg free
 11658  001F06  D000               	goto	l4327
 11659  001F08                     l4327:
 11660  001F08  0E00               	movlw	0
 11661  001F0A  BF3F               	btfsc	63,7,b	;volatile
 11662  001F0C  0E01               	movlw	1
 11663  001F0E  6E05               	movwf	RtccWriteDate@wasOn,c
 11664  001F10  5005               	movf	RtccWriteDate@wasOn,w,c
 11665  001F12  B4D8               	btfsc	status,2,c
 11666  001F14  D007               	goto	l4333
 11667  001F16  0E00               	movlw	0
 11668  001F18  BE91               	btfsc	3985,7,c	;volatile
 11669  001F1A  0E01               	movlw	1
 11670  001F1C  6E06               	movwf	RtccWriteDate@wasAlrm,c
 11671  001F1E  010F               	movlb	15	; () banked
 11672  001F20  9F3F               	bcf	63,7,b	;volatile
 11673  001F22  D000               	goto	l4333
 11674  001F24                     l4333:
 11675  001F24  0EFC               	movlw	252
 11676  001F26  010F               	movlb	15	; () banked
 11677  001F28  173F               	andwf	63,f,b	;volatile
 11678  001F2A  010F               	movlb	15	; () banked
 11679  001F2C  813F               	bsf	63,0,b	;volatile
 11680                           
 11681                           ; BSR set to: 15
 11682  001F2E  CF98 F00C          	movff	3992,RtccWriteDate@tempHourWDay	;volatile
 11683                           
 11684                           ; BSR set to: 15
 11685  001F32  CF99 F00D          	movff	3993,RtccWriteDate@tempHourWDay+1	;volatile
 11686                           
 11687                           ; BSR set to: 15
 11688  001F36  C001  FFD9         	movff	RtccWriteDate@pDt,fsr2l
 11689  001F3A  C002  FFDA         	movff	RtccWriteDate@pDt+1,fsr2h
 11690  001F3E  50DF               	movf	indf2,w,c
 11691  001F40  6E0D               	movwf	RtccWriteDate@tempHourWDay+1,c
 11692                           
 11693                           ; BSR set to: 15
 11694  001F42  0EFC               	movlw	252
 11695  001F44  010F               	movlb	15	; () banked
 11696  001F46  173F               	andwf	63,f,b	;volatile
 11697                           
 11698                           ; BSR set to: 15
 11699  001F48  0E03               	movlw	3
 11700  001F4A  010F               	movlb	15	; () banked
 11701  001F4C  133F               	iorwf	63,f,b	;volatile
 11702                           
 11703                           ; BSR set to: 15
 11704  001F4E  C007  FF98         	movff	RtccWriteDate@tempYear,3992	;volatile
 11705                           
 11706                           ; BSR set to: 15
 11707  001F52  C008  FF99         	movff	RtccWriteDate@tempYear+1,3993	;volatile
 11708                           
 11709                           ; BSR set to: 15
 11710  001F56  C00A  FF98         	movff	RtccWriteDate@tempDayMonth,3992	;volatile
 11711                           
 11712                           ; BSR set to: 15
 11713  001F5A  C00B  FF99         	movff	RtccWriteDate@tempDayMonth+1,3993	;volatile
 11714                           
 11715                           ; BSR set to: 15
 11716  001F5E  C00C  FF98         	movff	RtccWriteDate@tempHourWDay,3992	;volatile
 11717                           
 11718                           ; BSR set to: 15
 11719  001F62  C00D  FF99         	movff	RtccWriteDate@tempHourWDay+1,3993	;volatile
 11720                           
 11721                           ; BSR set to: 15
 11722  001F66  5005               	movf	RtccWriteDate@wasOn,w,c
 11723  001F68  B4D8               	btfsc	status,2,c
 11724  001F6A  D00D               	goto	l4369
 11725                           
 11726                           ; BSR set to: 15
 11727  001F6C  010F               	movlb	15	; () banked
 11728  001F6E  8F3F               	bsf	63,7,b	;volatile
 11729                           
 11730                           ; BSR set to: 15
 11731  001F70  5006               	movf	RtccWriteDate@wasAlrm,w,c
 11732  001F72  B4D8               	btfsc	status,2,c
 11733  001F74  D002               	goto	l4365
 11734                           
 11735                           ; BSR set to: 15
 11736  001F76  8E91               	bsf	3985,7,c	;volatile
 11737  001F78  D000               	goto	l4365
 11738  001F7A                     l4365:
 11739                           
 11740                           ; BSR set to: 15
 11741  001F7A  5009               	movf	RtccWriteDate@wasWrEn,w,c
 11742  001F7C  B4D8               	btfsc	status,2,c
 11743  001F7E  D009               	goto	l4373
 11744                           
 11745                           ; BSR set to: 15
 11746  001F80  EC5F  F01D         	call	_RtccWrOn	;wreg free
 11747  001F84  D006               	goto	l4373
 11748  001F86                     l4369:
 11749  001F86  5009               	movf	RtccWriteDate@wasWrEn,w,c
 11750  001F88  A4D8               	btfss	status,2,c
 11751  001F8A  D003               	goto	l4373
 11752  001F8C  010F               	movlb	15	; () banked
 11753  001F8E  9B3F               	bcf	63,5,b	;volatile
 11754                           
 11755                           ; BSR set to: 15
 11756  001F90  D000               	goto	l4373
 11757  001F92                     l4373:
 11758  001F92  5003               	movf	RtccWriteDate@di,w,c
 11759  001F94  B4D8               	btfsc	status,2,c
 11760  001F96  0012               	return	
 11761  001F98  9CF2               	bcf	intcon,6,c	;volatile
 11762  001F9A  0012               	return	
 11763                           
 11764                           ;	Return value of _RtccWriteDate is never used
 11765  001F9C  0012               	return		;funcret
 11766  001F9E                     __end_of_RtccWriteDate:
 11767                           	opt stack 0
 11768                           tblptru	equ	0xFF8
 11769                           tblptrh	equ	0xFF7
 11770                           tblptrl	equ	0xFF6
 11771                           tablat	equ	0xFF5
 11772                           prodh	equ	0xFF4
 11773                           prodl	equ	0xFF3
 11774                           intcon	equ	0xFF2
 11775                           indf0	equ	0xFEF
 11776                           postinc0	equ	0xFEE
 11777                           fsr0h	equ	0xFEA
 11778                           fsr0l	equ	0xFE9
 11779                           wreg	equ	0xFE8
 11780                           postdec1	equ	0xFE5
 11781                           fsr1l	equ	0xFE1
 11782                           indf2	equ	0xFDF
 11783                           postinc2	equ	0xFDE
 11784                           postdec2	equ	0xFDD
 11785                           fsr2h	equ	0xFDA
 11786                           fsr2l	equ	0xFD9
 11787                           status	equ	0xFD8
 11788                           
 11789 ;; *************** function _RtccWrOn *****************
 11790 ;; Defined at:
 11791 ;;		line 21 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWrOn.c"
 11792 ;; Parameters:    Size  Location     Type
 11793 ;;		None
 11794 ;; Auto vars:     Size  Location     Type
 11795 ;;  data            2    0        unsigned int 
 11796 ;; Return value:  Size  Location     Type
 11797 ;;		None               void
 11798 ;; Registers used:
 11799 ;;		wreg, status,2
 11800 ;; Tracked objects:
 11801 ;;		On entry : 0/0
 11802 ;;		On exit  : 0/0
 11803 ;;		Unchanged: 0/0
 11804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11808 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11809 ;;Total ram usage:        0 bytes
 11810 ;; Hardware stack levels used:    1
 11811 ;; This function calls:
 11812 ;;		Nothing
 11813 ;; This function is called by:
 11814 ;;		_Write_RTC
 11815 ;;		_RtccWriteDate
 11816 ;;		_RtccWriteTime
 11817 ;; This function uses a non-reentrant model
 11818 ;;
 11819                           
 11820                           	psect	text72
 11821  003ABE                     __ptext72:
 11822                           	opt stack 0
 11823  003ABE                     _RtccWrOn:
 11824                           	opt stack 25
 11825                           
 11826                           ;incstack = 0
 11827  003ABE  9CF2               	bcf	intcon,6,c	;volatile
 11828  003AC0  0E55               	movlw	85
 11829  003AC2  6EA7               	movwf	4007,c	;volatile
 11830  003AC4  0EAA               	movlw	170
 11831  003AC6  6EA7               	movwf	4007,c	;volatile
 11832  003AC8  010F               	movlb	15	; () banked
 11833  003ACA  8B3F               	bsf	63,5,b	;volatile
 11834                           
 11835                           ; BSR set to: 15
 11836  003ACC  8CF2               	bsf	intcon,6,c	;volatile
 11837                           
 11838                           ; BSR set to: 15
 11839  003ACE  0012               	return		;funcret
 11840  003AD0                     __end_of_RtccWrOn:
 11841                           	opt stack 0
 11842                           tblptru	equ	0xFF8
 11843                           tblptrh	equ	0xFF7
 11844                           tblptrl	equ	0xFF6
 11845                           tablat	equ	0xFF5
 11846                           prodh	equ	0xFF4
 11847                           prodl	equ	0xFF3
 11848                           intcon	equ	0xFF2
 11849                           indf0	equ	0xFEF
 11850                           postinc0	equ	0xFEE
 11851                           fsr0h	equ	0xFEA
 11852                           fsr0l	equ	0xFE9
 11853                           wreg	equ	0xFE8
 11854                           postdec1	equ	0xFE5
 11855                           fsr1l	equ	0xFE1
 11856                           indf2	equ	0xFDF
 11857                           postinc2	equ	0xFDE
 11858                           postdec2	equ	0xFDD
 11859                           fsr2h	equ	0xFDA
 11860                           fsr2l	equ	0xFD9
 11861                           status	equ	0xFD8
 11862                           tblptru	equ	0xFF8
 11863                           tblptrh	equ	0xFF7
 11864                           tblptrl	equ	0xFF6
 11865                           tablat	equ	0xFF5
 11866                           prodh	equ	0xFF4
 11867                           prodl	equ	0xFF3
 11868                           intcon	equ	0xFF2
 11869                           indf0	equ	0xFEF
 11870                           postinc0	equ	0xFEE
 11871                           fsr0h	equ	0xFEA
 11872                           fsr0l	equ	0xFE9
 11873                           wreg	equ	0xFE8
 11874                           postdec1	equ	0xFE5
 11875                           fsr1l	equ	0xFE1
 11876                           indf2	equ	0xFDF
 11877                           postinc2	equ	0xFDE
 11878                           postdec2	equ	0xFDD
 11879                           fsr2h	equ	0xFDA
 11880                           fsr2l	equ	0xFD9
 11881                           status	equ	0xFD8
 11882                           
 11883                           	psect	rparam
 11884  0000                     tblptru	equ	0xFF8
 11885                           tblptrh	equ	0xFF7
 11886                           tblptrl	equ	0xFF6
 11887                           tablat	equ	0xFF5
 11888                           prodh	equ	0xFF4
 11889                           prodl	equ	0xFF3
 11890                           intcon	equ	0xFF2
 11891                           indf0	equ	0xFEF
 11892                           postinc0	equ	0xFEE
 11893                           fsr0h	equ	0xFEA
 11894                           fsr0l	equ	0xFE9
 11895                           wreg	equ	0xFE8
 11896                           postdec1	equ	0xFE5
 11897                           fsr1l	equ	0xFE1
 11898                           indf2	equ	0xFDF
 11899                           postinc2	equ	0xFDE
 11900                           postdec2	equ	0xFDD
 11901                           fsr2h	equ	0xFDA
 11902                           fsr2l	equ	0xFD9
 11903                           status	equ	0xFD8


Data Sizes:
    Strings     154
    Constant    71
    Data        19
    BSS         83
    Persistent  13
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160     26     142
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    RtccWriteTime@pTm	PTR const struct . size(2) Largest target is 4
		 -> RtccTime(BANK0[4]), 

    RtccWriteDate@pDt	PTR const struct . size(2) Largest target is 4
		 -> RtccDate(BANK0[4]), 

    RtccReadTime@pTm	PTR struct . size(2) Largest target is 4
		 -> RtccTime(BANK0[4]), 

    RtccReadDate@pDt	PTR struct . size(2) Largest target is 4
		 -> RtccDate(BANK0[4]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_30(CODE[10]), STR_28(CODE[10]), STR_26(CODE[5]), STR_12(CODE[10]), 
		 -> STR_11(CODE[15]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), 
		 -> STR_7(CODE[5]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), 
		 -> STR_3(CODE[5]), STR_2(CODE[5]), STR_1(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> buffer2(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    obtain_pass@digit	PTR short  size(2) Largest target is 2
		 -> input_password@digit(BANK0[2]), 

    next_code@input	PTR unsigned char  size(2) Largest target is 1
		 -> obtain_pass@input(COMRAM[1]), 

    next_code@digit	PTR short  size(2) Largest target is 2
		 -> input_password@digit(BANK0[2]), 

    evalueChanceOfRaw@y	PTR unsigned char  size(2) Largest target is 1
		 -> configurar_reloj@y(COMRAM[1]), 

    evalueChanceOfRaw@x	PTR unsigned char  size(2) Largest target is 1
		 -> configurar_reloj@x(COMRAM[1]), 

    lcd_putrs@ptr	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_29(CODE[2]), STR_27(CODE[6]), STR_25(CODE[9]), STR_24(CODE[14]), 
		 -> STR_23(CODE[14]), STR_22(CODE[16]), STR_21(CODE[15]), STR_20(CODE[8]), 
		 -> STR_19(CODE[13]), STR_18(CODE[8]), STR_17(CODE[4]), STR_16(CODE[3]), 
		 -> STR_15(CODE[11]), STR_14(CODE[11]), STR_13(CODE[10]), buffer2(BANK0[20]), 


Critical Paths under _main in COMRAM

    _set_vision->_twinkle
    _input_password->_obtain_pass
    _set_desactive_vision->_lcd_putrs
    _review_code->_checkPass
    _obtain_pass->_pow
    _next_code->_lcd_gotoxy
    _select_menu->_ver_opcion_cambio
    _ver_opcion_cambio->_input_new_pass
    _ver_opcion_cambio->_input_old_pass
    _show_success->__delay_s
    _show_error->__delay_s
    _input_old_pass->_pow
    _input_new_pass->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftadd
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___awtoft
    ___ftmul->___lbtoft
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    __delay_s->___awdiv
    ___lbtoft->___ftpack
    _ver_info->_read_keyboard
    _clear->_lcd_comand
    _configurar_reloj->_read_keyboard
    _write_Date->_sprintf
    _lcd_setcursor_vb->_lcd_send_byte
    _read_keyboard->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcd_putrs->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _Read_RTC->_RtccReadDate
    _Read_RTC->_RtccReadTime
    _caratula->_lcd_comand
    _lcd_init->_lcd_send_byte
    _lcd_comand->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _Write_RTC->_RtccWriteDate

Critical Paths under _main in BANK0

    _set_vision->_twinkle
    _twinkle->_input_password
    _input_password->_obtain_pass
    _obtain_pass->_pow
    _ver_opcion_cambio->_input_old_pass
    _input_old_pass->_pow
    _input_new_pass->_pow

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  504464
                                             25 BANK0      1     1      0
                           _Read_RTC
                              _Setup
                           _caratula
                        _select_menu
                         _set_vision
 ---------------------------------------------------------------------------------
 (1) _set_vision                                           0     0      0  229001
                              _clear
                     _input_password
                         _lcd_gotoxy
                          _lcd_putrs
                            _twinkle
                         _write_Date
 ---------------------------------------------------------------------------------
 (2) _twinkle                                              4     4      0  113493
                                             94 COMRAM     1     1      0
                                             22 BANK0      3     3      0
                           __delay_s
                     _clear_keyboard
                     _input_password
                         _lcd_gotoxy
                          _lcd_putrs
                      _read_keyboard
 ---------------------------------------------------------------------------------
 (3) _input_password                                       5     5      0   96176
                                             17 BANK0      5     5      0
                      _is_not_letter
                      _not_fill_pass
                        _obtain_pass
                      _read_keyboard
                        _review_code
               _set_desactive_vision
 ---------------------------------------------------------------------------------
 (4) _set_desactive_vision                                 2     0      2    7973
                                             10 COMRAM     2     0      2
                         _lcd_gotoxy
                          _lcd_putrs
                   _lcd_setcursor_vb
 ---------------------------------------------------------------------------------
 (4) _review_code                                          4     0      4     322
                                              2 COMRAM     4     0      4
                       _change_state
                          _checkPass
 ---------------------------------------------------------------------------------
 (5) _change_state                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _obtain_pass                                         13     8      5   78735
                                             87 COMRAM     7     2      5
                                             11 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                           ___lbtoft
                          _next_code
                                _pow
 ---------------------------------------------------------------------------------
 (5) _next_code                                            6     2      4    2381
                                              7 COMRAM     6     2      4
                     _clear_keyboard
                         _lcd_gotoxy
 ---------------------------------------------------------------------------------
 (4) _is_not_letter                                        2     2      0     112
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _select_menu                                          0     0      0  269957
                   _configurar_reloj
                     _dispararSensor
                      _read_keyboard
                           _ver_info
                  _ver_opcion_cambio
 ---------------------------------------------------------------------------------
 (2) _ver_opcion_cambio                                    2     2      0  212701
                                             89 COMRAM     2     2      0
                         _changePass
                              _clear
                     _input_new_pass
                     _input_old_pass
                         _lcd_gotoxy
                          _lcd_putrs
                      _read_keyboard
                         _show_error
                       _show_success
 ---------------------------------------------------------------------------------
 (3) _show_success                                         0     0      0    9259
                           __delay_s
                              _clear
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (3) _show_error                                           0     0      0    9259
                           __delay_s
                              _clear
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (3) _input_old_pass                                      13    13      0   89001
                                             87 COMRAM     2     2      0
                                             11 BANK0     11    11      0
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                           ___lbtoft
                           __delay_s
                          _checkPass
                     _clear_keyboard
                         _lcd_gotoxy
                      _not_fill_pass
                                _pow
                      _read_keyboard
 ---------------------------------------------------------------------------------
 (5) _checkPass                                            2     0      2     150
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _input_new_pass                                      11    11      0   88805
                                             87 COMRAM     2     2      0
                                             11 BANK0      9     9      0
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                           ___lbtoft
                           __delay_s
                     _clear_keyboard
                         _lcd_gotoxy
                      _not_fill_pass
                                _pow
                      _read_keyboard
 ---------------------------------------------------------------------------------
 (5) _pow                                                 17    11      6   62408
                                             81 COMRAM     6     0      6
                                              0 BANK0     11    11      0
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (6) _log                                                  5     2      3   20443
                                             51 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _exp                                                  9     6      3   33640
                                             72 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (7) _ldexp                                                7     2      5     376
                                             51 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (7) _floor                                                8     5      3    8621
                                             64 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (7) _frexp                                                7     2      5     480
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (8) ___fttol                                             15    11      4     636
                                             39 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftge                                               9     3      6     648
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (8) ___altoft                                            10     6      4    2389
                                             54 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (7) _eval_poly                                           12     5      7    8999
                                             39 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (8) ___ftmul                                             15     9      6    3741
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftsub                                              6     0      6    4450
                                             39 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (8) ___ftadd                                             12     6      6    4153
                                             27 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     237
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             15     9      6    2697
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             4     1      3    2790
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___lltoft                                             9     5      4    2320
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) _not_fill_pass                                        2     0      2     214
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (6) _clear_keyboard                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) __delay_s                                             7     5      2    1650
                                              8 COMRAM     7     5      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) ___lbtoft                                             4     1      3    2209
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftpack                                             8     3      5    2187
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) _changePass                                           2     0      2      86
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ver_info                                             1     1      0   20103
                                             36 COMRAM     1     1      0
                              _clear
                         _lcd_gotoxy
                          _lcd_putrs
                      _read_keyboard
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _clear                                                1     1      0     646
                                              5 COMRAM     1     1      0
                         _lcd_comand
 ---------------------------------------------------------------------------------
 (2) _dispararSensor                                       2     0      2    1182
                                             18 COMRAM     2     0      2
                           _Read_RTC
 ---------------------------------------------------------------------------------
 (2) _configurar_reloj                                     4     4      0   27337
                                             36 COMRAM     4     4      0
                           _Read_RTC
                  _evalueChanceOfRaw
                         _lcd_gotoxy
                   _lcd_setcursor_vb
                      _read_keyboard
                           _setClock
                         _write_Date
 ---------------------------------------------------------------------------------
 (2) _write_Date                                           0     0      0   11723
                         _lcd_gotoxy
                          _lcd_putrs
                   _lcd_setcursor_vb
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _lcd_setcursor_vb                                     2     1      1     924
                                              4 COMRAM     2     1      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (3) _setClock                                             2     2      0    2427
                                             13 COMRAM     2     2      0
                          _Write_RTC
 ---------------------------------------------------------------------------------
 (3) _read_keyboard                                        1     1      0    8634
                                             35 COMRAM     1     1      0
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             32    22     10    3836
                                             12 COMRAM    23    13     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     543
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcd_putrs                                            2     0      2    4798
                                              8 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (4) _lcd_putc                                             1     1      0    2833
                                              7 COMRAM     1     1      0
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (5) _lcd_gotoxy                                           3     2      1    2165
                                              4 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (3) _evalueChanceOfRaw                                    5     1      4     282
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) _Read_RTC                                             0     0      0     968
                       _RtccReadDate
                       _RtccReadTime
 ---------------------------------------------------------------------------------
 (4) _RtccReadTime                                        18    16      2     437
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (4) _RtccReadDate                                        18    16      2     531
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (1) _caratula                                             0     0      0     646
                         _lcd_comand
 ---------------------------------------------------------------------------------
 (1) _Setup                                                0     0      0    3892
                          _Write_RTC
                         _lcd_comand
                           _lcd_init
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             1     1      0     841
                                              4 COMRAM     1     1      0
                        _Delay1KTCYx
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _lcd_comand                                           1     1      0     646
                                              4 COMRAM     1     1      0
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (4) _lcd_send_byte                                        2     1      1     624
                                              2 COMRAM     2     1      1
                       _Delay100TCYx
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (5) _lcd_send_nibble                                      2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _Delay100TCYx                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Write_RTC                                            0     0      0    2405
                           _RtccWrOn
                      _RtccWriteDate
                      _RtccWriteTime
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1196
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (5) _RtccWriteTime                                       11     8      3     537
                                              0 COMRAM    11     8      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (5) _RtccWriteDate                                       13    10      3     672
                                              0 COMRAM    13    10      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (6) _RtccWrOn                                             2     2      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Read_RTC
     _RtccReadDate
     _RtccReadTime
   _Setup
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_init
       _Delay1KTCYx
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
       _lcd_send_nibble
   _caratula
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
   _select_menu
     _configurar_reloj
       _Read_RTC
         _RtccReadDate
         _RtccReadTime
       _evalueChanceOfRaw
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_setcursor_vb
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _read_keyboard
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _setClock
         _Write_RTC
           _RtccWrOn
           _RtccWriteDate
             _RtccWrOn
           _RtccWriteTime
             _RtccWrOn
           ___awdiv
       _write_Date
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _lcd_setcursor_vb
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _dispararSensor
       _Read_RTC
         _RtccReadDate
         _RtccReadTime
     _read_keyboard
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _ver_info
       _clear
         _lcd_comand
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _read_keyboard
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _ver_opcion_cambio
       _changePass
       _clear
         _lcd_comand
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _input_new_pass
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___lbtoft
           ___ftpack
         __delay_s
           ___awdiv
         _clear_keyboard
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _not_fill_pass
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
         _read_keyboard
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
       _input_old_pass
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___lbtoft
           ___ftpack
         __delay_s
           ___awdiv
         _checkPass
         _clear_keyboard
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _not_fill_pass
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
         _read_keyboard
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _read_keyboard
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _show_error
         __delay_s
           ___awdiv
         _clear
           _lcd_comand
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
       _show_success
         __delay_s
           ___awdiv
         _clear
           _lcd_comand
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
   _set_vision
     _clear
       _lcd_comand
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _input_password
       _is_not_letter
       _not_fill_pass
       _obtain_pass
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___lbtoft
           ___ftpack
         _next_code
           _clear_keyboard
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
       _read_keyboard
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _review_code
         _change_state
         _checkPass
       _set_desactive_vision
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _lcd_setcursor_vb
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _twinkle
       __delay_s
         ___awdiv
       _clear_keyboard
       _input_password
         _is_not_letter
         _not_fill_pass
         _obtain_pass
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___lbtoft
             ___ftpack
           _next_code
             _clear_keyboard
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lbtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
         _read_keyboard
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _review_code
           _change_state
           _checkPass
         _set_desactive_vision
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _lcd_setcursor_vb
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _read_keyboard
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _write_Date
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _lcd_setcursor_vb
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       1       4        0.6%
BANK0               A0     1A      8E       5       88.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      ED       6        0.0%
DATA                 0      0      ED       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Sep 22 19:34:35 2016

                 ___altoft@exp 003F                              _a 007C                              _b 007E  
                            _c 0080                              _i 0088                              _j 008A  
                            _k 008C                 _input_old_pass 1BCA                 _input_new_pass 1F9E  
                ___altoft@sign 0040                    _state_alarm 00DF                 ?_lcd_send_byte 0003  
                 ___awdiv@sign 0006            ___wmul@multiplicand 0003                 _input_password 2FA0  
                  lcd_comand@d 0005                   __CFG_CP0$OFF 000000                   ___ftadd@exp1 0027  
                 ___ftadd@exp2 0026                   ___ftadd@sign 0025                            l300 1054  
                          l311 10DC                            l303 108E                            l320 1144  
                          l312 10D8                            l304 108A                            l154 3880  
                          l155 3882                            l331 11CC                            l323 1158  
                          l315 1112                            l307 109E                            l340 120E  
                          l332 11C8                            l324 1154                            l316 110E  
                          l308 109A                            l351 1270                            l343 122A  
                          l335 1202                            l327 1196                            l319 1148  
                          l352 126C                            l344 1226                            l336 11FE  
                          l328 1192                            l347 1260                            l339 1212  
                          l356 127C                            l348 125C                            l620 3568  
                          l295 1022                            l296 101E                            l299 1058  
                          l627 38C0                            l666 2B38                            l997 146E  
                          _dia 00CF                ?_dispararSensor 0013                            _key 00DD  
                          _mes 00D5                            _exp 1500                            _log 20D8  
                          _pow 1A48                            wreg 000FE8           __end_of_change_state 3924  
              RtccReadDate@pDt 0001                    lcd_gotoxy@x 0006                    lcd_gotoxy@y 0005  
                 ___ftdiv@cntr 0012                   ___ftdiv@sign 0017                           l1501 26AA  
                         l4001 3636                           l3043 3A9C                           l4003 363E  
                         l1523 39D8                           l1437 2C90                           l1470 1756  
                         l1702 15B6                           l4007 3654                           l4103 12D8  
                         l1703 16DA                           l4023 2116                           l1641 351C  
                         l4121 1376                           l4105 12EE                           l1481 1818  
                         l1713 2892                           l4017 20F4                           l1490 1834  
                         l1466 172C                           l1651 3660                           l4123 1398  
                         l5003 28A8                           l4051 1588                           l4211 1A90  
                         l4301 22F8                           l4141 13E8                           l4133 13C0  
                         l4117 1370                           l4109 130C                           l4045 1550  
                         l5101 3490                           l4151 1422                           l5023 296E  
                         l3511 2C14                           l4039 1518                           l5111 34B6  
                         l4401 2E38                           l4145 140C                           l4137 13E4  
                         l4129 13B4                           l3521 2C78                           l3513 2C20  
                         l4073 16B0                           l4225 1B0C                           l4217 1AA8  
                         l4323 1EF4                           l4083 3580                           l4171 14C8  
                         l4147 1416                           l4091 12A6                           l3523 2C84  
                         l3515 2C40                           l3507 2C04                           l1683 1BBC  
                         l5107 34A4                           l4333 1F24                           l4317 1EBA  
                         l4413 2E62                           l4165 1474                           l4157 1444  
                         l4173 14D4                           l3621 17DC                           l3701 2D84  
                         l4229 1B34                           l5117 383C                           l1678 1A82  
                         l4327 1F08                           l4255 2260                           l4087 35AA  
                         l4159 144C                           l4175 14F0                           l3535 2CAA  
                         l3519 2C58                           l3615 17BC                           l3711 2DE2  
                         l5071 2CD2                           l4191 3900                           l4265 2290  
                         l4249 2236                           l4417 2E72                           l4409 2E56  
                         l4097 12C0                           l3529 2C98                           l3617 17C8  
                         l3609 1798                           l3705 2DB6                           l3721 2330  
                         l5081 2D08                           l5073 2CD8                           l4193 3908  
                         l4259 2274                           l4099 12CE                           l3803 2644  
                         l3635 1852                           l3627 1800                           l3619 17D4  
                         l3571 326C                           l5083 2D16                           l5075 2CDE  
                         l4195 3910                           l4373 1F92                           l4365 1F7A  
                         l4293 22E0                           l3645 1884                           l3629 180C  
                         l3661 2456                           l3573 327A                           l5085 2D24  
                         l5069 2CCC                           l5077 2CF6                           l4605 25E8  
                         l4189 38F8                           l4391 2E10                           l3823 2684  
                         l3655 242E                           l3751 23D0                           l3743 23A8  
                         l5087 2D32                           l4369 1F86                           l4297 22EC  
                         l4385 2DFE                           l4617 333C                           l4721 33D2  
                         l3833 26B8                           l3593 1764                           l3841 3714  
                         l3753 23DA                           l3921 2A16                           l3905 29DE  
                         l5089 2D4A                           l5097 3480                           l3499 3AAE  
                         l4643 302E                           l3931 367A                           l3587 173A  
                         l3683 24B2                           l3675 248A                           l3739 2398  
                         l3923 2A42                           l4397 2E26                           l3933 3686  
                         l4549 1284                           l4741 2734                           l4901 2F1E  
                         l4565 3554                           l3853 37D2                           l3693 24E0  
                         l3685 24B8                           l3757 23F2                           l3749 23C2  
                         l3917 2A06                           l4399 2E30                           l3935 3692  
                         l4743 273C                           l4735 270C                           l3599 1770  
                         l3679 249C                           l3871 27F0                           l4815 1CE6  
                         l3785 39F2                           l3929 366E                           l4729 26E4  
                         l3689 24CA                           l3769 2EA6                           l4817 1CF0  
                         l3787 39F8                           l3939 369E                           l4923 2F7E  
                         l3875 27FE                           l4843 1FB8                           ?_exp 0049  
                         l3981 34EA                           l4749 2764                           l4757 278C  
                         l4917 2F6E                           l3965 3412                           l3797 261C  
                         ?_log 0034                           l3991 3510                           l3983 34F2  
                         l3959 3A22                           l4759 27AE                           l4927 2F96  
                         l3967 3420                           l3887 2A92                           l3879 2818  
                         l4863 20BA                           l4873 31F0                           l3889 2B10  
                         l3897 2996                           l4865 20C4                           l4785 3008  
                         l4953 2B9A                           l4891 321C                           l4883 3208  
                         l3979 34E0                           l4795 1BE4                           l4779 2FCA  
                         l4963 2BEC                           l4877 31F8                           l4957 2BC4  
                         l3999 362C                           l4987 319A                           l4997 31C2  
                         l4989 31A2                           ?_pow 0052                           STR_1 0FD6  
                         STR_2 0FD6                           STR_3 0FD6                           STR_4 0FD6  
                         STR_5 0FD6                           STR_6 0FD6                           STR_7 0FD6  
                         STR_8 0FD6                           STR_9 0FD6                           u3110 29B6  
                         u2410 3304                           u3300 1592                           u2430 3320  
                         u3070 280A                           u3118 29B8                           u2408 32EC  
                         u2370 32D2                           u2428 3306                           u3340 35A0  
                         u2390 32EA                           u3350 35CA                           u3510 3A42  
                         u2448 3322                           u4400 2780                           u2561 16F8  
                         u3290 1590                           u3347 3596                           u2571 170C  
                         u2388 32D4                           u4260 3A6C                           u3357 35C0  
                         u4370 2700                           u3570 1AF4                           u2771 2416  
                         u4380 2728                           u2861 2314                           u4390 2758  
                         u2950 2ECE                           u2791 243E                           u2880 234E  
                         u2971 2604                           u2885 2346                           u2958 2ED0  
                         u4807 3A9E                           u2991 262C                           u4817 3AB0  
                         u4737 3854                           u4747 355A                           u4757 3A54  
                         u4767 2F46                           u4777 2F8A                           u4787 27B8  
                         u4797 128A               ?_lcd_send_nibble 0001                           _anio 00CD  
                         _flag 0768                           _main 3832                           _hora 00D3  
                 ___ftpack@arg 0001                           _menu 00DE                   ___ftpack@exp 0004  
                         fsr0h 000FEA                           indf0 000FEF                           fsr0l 000FE9  
                         fsr2h 000FDA                           fsr1l 000FE1                           indf2 000FDF  
                         fsr2l 000FD9                           exp@x 0049                           log@x 0034  
                __CFG_T1DIG$ON 000000                           pow@x 0052                           pow@y 0055  
                         prodh 000FF4                           prodl 000FF3                           start 0000  
                __CFG_IESO$OFF 000000               RtccReadDate@rTD0 000B               RtccReadDate@rTD1 0003  
                ver_info@input 0025                   ___ftmul@cntr 001A         __end_of_input_old_pass 1D12  
       __end_of_input_new_pass 20D8                   ___param_bank 000010                   ___ftmul@sign 001B  
              RtccReadTime@pTm 0001         __end_of_input_password 302E                obtain_pass@pass 0058  
                 ___fttol@exp1 0036                          ??_exp 004C                          ??_log 0037  
                 ___fttol@lval 0032                          ??_pow 0058                    _Delay1KTCYx 3A9A  
                __CFG_PLLDIV$1 000000                          ?_main 0001                __end_of___awdiv 2E7E  
              __end_of___ftadd 18AC                          STR_10 0FD6                          STR_11 0F67  
                        STR_20 0F50                          STR_12 0FB5                          STR_13 0F7A  
                        STR_21 0F58                          STR_30 0FB5                          STR_14 0FAA  
                        STR_22 0F48                          STR_15 0F9F                          STR_23 0F76  
                        STR_16 0FDF                          STR_24 0F84                          STR_17 0FDB  
                        STR_25 0FBF                          STR_26 0F71                          STR_18 0FC8  
                        STR_27 0FD0                          STR_19 0F92                          STR_28 0F6C  
                        STR_29 0FA8          __size_of_Delay100TCYx 0012                __end_of___ftdiv 26E0  
              __end_of___ftneg 39E6                __end_of___ftmul 2508                ___awdiv@divisor 0003  
              __end_of___ftsub 3740                __end_of___fttol 2406                __end_of___lwdiv 3526  
              __end_of___lwmod 366A                ___awdiv@counter 0005                          _TRISA 000F92  
                        _TRISB 000F93                          _TRISC 000F94             input_password@pass 00C4  
                 ___lltoft@exp 0011                 __CFG_FCMEN$OFF 000000     __size_of_ver_opcion_cambio 0086  
                        _Setup 36B6                  ___awtoft@sign 000C                          _clear 3A48  
              __end_of_dpowers 0F0B                          _floor 27C2                          _ldexp 297E  
                        _frexp 2E7E                          _mes_d 00E7                          _errno 0084  
                        _mes_u 00E8                __end_of_isdigit 3A2C                  ___ftpack@sign 0005  
                 ?_obtain_pass 0058                          tablat 000FF5                          pow@yi 00BA  
                 lcd_putrs@ptr 0009                          status 000FD8                __end_of_sprintf 1500  
            ?_configurar_reloj 0001                __end_of_twinkle 2BF4                    exp@exponent 004F  
           ??_configurar_reloj 0025        __CFG_DSWDTOSC$INTOSCREF 000000                    ldexp@newexp 0037  
      __size_of_clear_keyboard 0008                __initialization 37F8                ?_input_old_pass 0001  
              ?_input_new_pass 0001                    log@exponent 0037                   _Delay100TCYx 3AAC  
                 __end_of_main 3864                ??_lcd_send_byte 0004               RtccReadTime@rTD0 000B  
             RtccReadTime@rTD1 0003                ?_input_password 0001               __end_of_Read_RTC 1E58  
             obtain_pass@digit 005B               obtain_pass@input 005A           _set_desactive_vision 3924  
                       ??_main 00CC                  ___fttol@sign1 0031                  __activetblptr 000002  
           is_not_letter@input 0002               __end_of_RtccWrOn 3AD0                         ?_Setup 0001  
                       ?_clear 0001                         _ADCON0 000FC2                         _ADCON1 000FC1  
                       ?_floor 0041                         ?_ldexp 0034                         ?_frexp 0001  
             __end_of___altoft 32C6                   ?_select_menu 0001                         _EECON2 000FA7  
                       _ANCON0 000F48                         _ANCON1 000F49               ___awdiv@dividend 0001  
             __end_of___awtoft 37F8               __end_of___ftpack 2CBA               __end_of___lbtoft 399E  
             __end_of__delay_s 357E               __end_of___lltoft 346C                 __CFG_WDTEN$OFF 000000  
             RtccWriteDate@pDt 0001                         _RTCCFG 000F3F                 __CFG_WPCFG$OFF 000000  
          input_password@digit 00C7            input_password@input 00C6               __end_of_caratula 3AF8  
               __CFG_WPDIS$OFF 000000                 __CFG_XINST$OFF 000000               __end_of_lcd_init 324A  
             __end_of_lcd_putc 36B6                         ___ftge 2D52              ?_lcd_setcursor_vb 0005  
                       ___wmul 3950                      ??___awdiv 0005                      ??___ftadd 0022  
               __CFG_STVREN$ON 000000                      ??___ftdiv 000F                      ??___ftneg 0004  
                       _diasem 00D1                      ??___ftmul 0013                         _anio_d 00E0  
                    ??___ftsub 002E                      ??___fttol 002C                         _anio_u 00E1  
                    ??___lwdiv 0005                      ??___lwmod 000C                   ?_review_code 0003  
           ??_lcd_setcursor_vb 0006                         _hora_d 00E5                         _hora_u 00E6  
              _sensorDisparado 0096                         clear_0 3802               ___awdiv@quotient 0007  
                       _minuto 00D7          ?_set_desactive_vision 000B          __size_of_change_state 002E  
        __end_of_RtccWriteDate 1F9E               __end_of_setClock 27C2          __end_of_RtccWriteTime 2304  
                checkPass@pass 0001                         floor@i 0044                         floor@x 0041  
        ___ftmul@f3_as_product 0017               RtccWriteTime@pTm 0001                      ??_isdigit 0001  
                 __mediumconst 0000               __end_of_ver_info 297E                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8         __size_of_is_not_letter 0030  
                    ??_sprintf 0017                      ??_twinkle 005F         __size_of_read_keyboard 02B8  
        __end_of_not_fill_pass 3A72               __end_ofexp@coeff 0F2D               __end_oflog@coeff 0F48  
                   __accesstop 0060        __end_of__initialization 3828                     ___altoft@c 0037  
                   ___ftadd@f1 001C                     ___ftadd@f2 001F             __size_of_Write_RTC 019C  
                   ___ftge@ff1 0001                     ___ftge@ff2 0004                   eval_poly@res 0031  
                ___rparam_used 000001                     ___ftdiv@f1 0009                     ___ftdiv@f2 000C  
                   ___ftdiv@f3 0013                     ___ftneg@f1 0001            _input_old_pass$3186 00BE  
          _input_old_pass$3187 00C1                     ___awtoft@c 0009                     ___lbtoft@c 000C  
                 _change_state 38F6                     ___ftmul@f1 000D                     ___ftmul@f2 0010  
                   ___ftsub@f1 0028                     ___ftsub@f2 002B                     ___fttol@f1 0028  
               __pcstackCOMRAM 0001                  __end_of_Setup 36FC                   __pidataBANK0 3A86  
           __size_of_checkPass 001C                  __end_of_clear 3A5E                     ___lltoft@c 0009  
                __end_of_floor 28A0                  __end_of_ldexp 2A52                  __end_of_frexp 2F10  
             ??_dispararSensor 0015              _evalueChanceOfRaw 33AA            _input_new_pass$3188 00BE  
          _input_new_pass$3189 00C1                __CFG_DSWDTPS$G2 000000             ?_evalueChanceOfRaw 0001  
                   _diaDisparo 0082                review_code@pass 0005                __CFG_OSC$INTOSC 000000  
                      ??_Setup 000E            ??_evalueChanceOfRaw 0005              lcd_gotoxy@address 0007  
                      ??_clear 0006             __size_of_lcd_putrs 0054                        ??_floor 0044  
                      ??_ldexp 0039                        ??_frexp 0006                   sprintf@width 0021  
                   __pbssBANK0 0060                     _changePass 3ADE             __size_of_eval_poly 00D4  
                    ?_Read_RTC 0001           __size_of_obtain_pass 00EC                     _dia_semana 00E2  
    RtccWriteTime@tempHourWDay 000A                 _clear_keyboard 3AE8                      ?_RtccWrOn 0001  
               lcd_send_byte@n 0003                  _is_not_letter 3896                        ?___ftge 0001  
    __end_of_evalueChanceOfRaw 340C                        ?___wmul 0001                  ?_RtccReadDate 0001  
           __size_of_next_code 004C         ??_set_desactive_vision 000D                  ?_RtccReadTime 0001  
                _read_keyboard 0FE4                   ?_Delay1KTCYx 0001                      ?___altoft 0037  
                    ?___awtoft 0009                      ?___ftpack 0001                      ?___lbtoft 0009  
                    ?__delay_s 0009                      ?___lltoft 0009              __end_of_Write_RTC 1A48  
               __delay_s@index 000E                     _lcd_comand 3AD0                      ?_caratula 0001  
                   _lcd_gotoxy 39E6                        _RTCVALH 000F99                        _RTCVALL 000F98  
                    ?_lcd_init 0001              __end_of_checkPass 3A48                      ?_lcd_putc 0001  
                   ??_Read_RTC 0013           __size_of_select_menu 0098               ??_input_old_pass 0058  
       __end_of_clear_keyboard 3AF0               ??_input_new_pass 0058                     _mesDisparo 008E  
             ??_input_password 005F                      ?_setClock 0001                     _minDisparo 0090  
       ver_opcion_cambio@input 005B                        __Hparam 0000                        __Lparam 0000  
               ?_is_not_letter 0001       __size_of_lcd_send_nibble 0076                     ??_RtccWrOn 0001  
               ??_RtccReadDate 0003                      ?_ver_info 0001                __size_of___ftge 0096  
               ??_RtccReadTime 0003                        ___awdiv 2DE8                        ___ftadd 16E8  
            __end_of_lcd_putrs 35D2                        ___ftdiv 25F4                 ?_read_keyboard 0001  
                      ___ftneg 39C2                __size_of___wmul 0028                        ___ftmul 2406  
                      ___ftsub 36FC                        ___fttol 2304                        ___lwdiv 34CA  
                      ___lwmod 361E                   __psmallconst 0F00                     ??___altoft 003B  
                  _RtccTimeVal 0078                        __pcinit 37F8                        _fecha_d 00E3  
                      _fecha_u 00E4                     ??___awtoft 000C                     ??___ftpack 0006  
                   ??___lbtoft 000C              __end_of_eval_poly 2B26                        __ramtop 0F00  
    __size_of_configurar_reloj 0090                     ??__delay_s 000B                     ??___lltoft 000D  
                      __ptext0 3832                        __ptext1 346C                        __ptext2 2B26  
                      __ptext3 2FA0                        __ptext4 3924                        __ptext5 399E  
                      __ptext6 38F6                        __ptext7 2508                        __ptext8 35D2  
                      __ptext9 3896           __size_of_review_code 0024                        _buffer2 0097  
                    _T1CONbits 000FCD                        _dpowers 0F01                   __size_of_exp 01E8  
                 __size_of_log 0120                        _isdigit 3A0A                   __size_of_pow 0182  
                   ??_caratula 0006                        _newpass 0092                        _segundo 0094  
                      _sprintf 129C                     ??_lcd_init 0005                     ??_lcd_putc 0008  
                      _twinkle 2B26           end_of_initialization 3828              __end_of_next_code 361E  
                      exp@sign 0051                    ?_changePass 0001           lcd_send_byte@address 0004  
                __Lmediumconst 0000                ?_clear_keyboard 0001                     ??_setClock 000E  
                      pow@sign 00B9     __size_of_evalueChanceOfRaw 0062                   twinkle@input 00C9  
                      postdec1 000FE5                        postdec2 000FDD                     ??_ver_info 0025  
                      postinc0 000FEE                        postinc2 000FDE                     _set_vision 346C  
        __end_of_lcd_send_byte 3896                      _PORTAbits 000F80                      _PORTCbits 000F82  
             __CFG_DSBOREN$OFF 000000                     _show_error 377E                    ?_lcd_comand 0001  
             __CFG_CPUDIV$OSC1 000000                  ?_show_success 0001                      _TRISBbits 000F93  
                  ?_lcd_gotoxy 0005      __size_of_lcd_setcursor_vb 0014                _LCD_INIT_STRING 0F0B  
                  ___ftdiv@exp 0016               __CFG_IOL1WAY$OFF 000000      RtccWriteDate@tempDayMonth 000A  
              ??_is_not_letter 0001            __CFG_MSSP7B_EN$MSK7 000000                    ___ftmul@exp 0016  
              ??_read_keyboard 0024               Delay100TCYx@unit 0001                     _write_Date 30BC  
               __end_of___ftge 2DE8                    __delay_s@it 000C                 __end_of___wmul 3978  
    RtccWriteDate@tempHourWDay 000C      set_desactive_vision@digit 000B            __size_of_changePass 000A  
           not_fill_pass@digit 0001              ??_lcd_send_nibble 0001                  __pbitbssBANK0 0768  
         __size_of_Delay1KTCYx 0012               __CFG_DSWDTEN$OFF 000000                     floor@expon 0047  
               changePass@pass 0001                 ??_show_success 0010            start_initialization 37F8  
                   eval_poly@d 002B                     eval_poly@n 002D                     eval_poly@x 0028  
                   ldexp@value 0034                    __end_of_exp 16E8                    __end_of_log 21F8  
                  __end_of_pow 1BCA           __end_of_RtccReadDate 30BC           __end_of_RtccReadTime 33AA  
             review_code@digit 0003                     frexp@value 0001           RtccWriteTime@wasAlrm 0006  
         RtccWriteTime@wasWrEn 0007         __size_of_RtccWriteDate 0146                RtccWriteDate@di 0003  
       __size_of_RtccWriteTime 010C              __size_of_Read_RTC 0146            __size_of_lcd_comand 000E  
                     ??___ftge 0007            __size_of_lcd_gotoxy 0024                       ??___wmul 0005  
                  ?_set_vision 0001                    __pdataBANK0 00CD              __size_of_RtccWrOn 0012  
              RtccWriteTime@di 0003               __CFG_LPT1OSC$OFF 000000               _configurar_reloj 2F10  
       __size_of_not_fill_pass 0014                    ?_show_error 0001              __size_of___altoft 007C  
                  _ALRMCFGbits 000F91        __end_of_LCD_INIT_STRING 0F0F              __size_of___awtoft 003C  
            __size_of___ftpack 00C6              __size_of___lbtoft 0026          configurar_reloj@input 0026  
            __size_of__delay_s 0058              __size_of___lltoft 0060                  __pcstackBANK0 00B3  
                    _Write_RTC 18AC                   _isdigit$2793 0002              __size_of_caratula 0008  
                ??_obtain_pass 005D                Delay1KTCYx@unit 0001              __size_of_lcd_init 0080  
                  sprintf@flag 001D              __size_of_lcd_putc 004C                    sprintf@prec 0020  
                    _checkPass 3A2C                      __pnvBANK0 00E0               ___lwdiv@dividend 0001  
                ?_Delay100TCYx 0001              __size_of_setClock 00E2                       ?___awdiv 0001  
                     ?___ftadd 001C                       ?___ftdiv 0009                       ?___ftneg 0001  
                     ?___ftmul 000D                       ?___ftsub 0028                       ?___fttol 0028  
                     ?___lwdiv 0001                    ?_write_Date 0001                       ?___lwmod 0008  
            __size_of_ver_info 00DE        RtccWriteTime@tempMinSec 0008  __size_of_set_desactive_vision 002C  
                    _lcd_putrs 357E        lcd_setcursor_vb@visible 0006                  _RtccWriteDate 1E58  
                  __smallconst 0F00                  _RtccWriteTime 21F8                       ?_isdigit 0001  
                    _eval_poly 2A52           __CFG_RTCOSC$T1OSCREF 000000               _lcd_setcursor_vb 3A72  
               __size_of_Setup 0046                     ?_Write_RTC 0001        __size_of_dispararSensor 0030  
             ___lwdiv@quotient 0005                  ??_select_menu 005C                 __size_of_clear 0016  
             ??_clear_keyboard 0001                       ?_sprintf 000D                 __size_of_floor 00DE  
               __size_of_ldexp 00D4                 __size_of_frexp 0092                       ?_twinkle 0001  
                 ??_changePass 0003            __size_of_set_vision 005E               _RtccAlrmTimeDate 0060  
                _not_fill_pass 3A5E                 ___wmul@product 0005                __delay_s@millis 0009  
                     _LATAbits 000F89                       _LATBbits 000F8A                     ?_checkPass 0001  
                    _next_code 35D2                       _PIE3bits 000FA3            __end_of_obtain_pass 25F4  
          __size_of_show_error 003E                      _segundo_d 00EB                 ??_Delay100TCYx 0001  
                    _segundo_u 00EC           __end_of_show_success 377E                    twinkle@time 00CA  
             __CFG_WDTPS$32768 000000             _is_not_letter$1409 0001                  ??_review_code 0007  
           RtccWriteDate@wasOn 0005             _Rtcc_read_TimeDate 0070           dispararSensor@sensor 0013  
               ?_RtccWriteDate 0001                     ?_lcd_putrs 0009              ___wmul@multiplier 0001  
           __end_of_changePass 3AE8                 ?_RtccWriteTime 0001             evalueChanceOfRaw@x 0001  
           evalueChanceOfRaw@y 0003                      lcd_init@i 0005          __size_of_RtccReadDate 008E  
                 ??_lcd_comand 0005                     ?_eval_poly 0028                      lcd_putc@c 0008  
        __size_of_RtccReadTime 006E                   ??_lcd_gotoxy 0006                      copy_data0 381C  
               ?_not_fill_pass 0001            __size_of_write_Date 0088                       _Read_RTC 1D12  
            configurar_reloj@x 0028              configurar_reloj@y 0027                     ?_next_code 0008  
                  _horaDisparo 0086            __end_of_select_menu 2D52                      frexp@eptr 0004  
              _lcd_send_nibble 32C6                       __Hrparam 0000                  ?_change_state 0001  
                     _RtccDate 00AB                       __Lrparam 0000                       _RtccTime 00AF  
                     _RtccWrOn 3ABE             __end_of_lcd_comand 3ADE             __end_of_lcd_gotoxy 3A0A  
                 _RtccReadDate 302E               __size_of___awdiv 0096        __size_of_input_old_pass 0148  
             __size_of___ftadd 01C4                   _RtccReadTime 333C        __size_of_input_new_pass 013A  
             __size_of___ftdiv 00EC               __size_of___ftneg 0024                       ___altoft 324A  
             __size_of___ftmul 0102               __size_of___ftsub 0044               __size_of___fttol 0102  
             __size_of___lwdiv 005C               __size_of___lwmod 004C                       ___awtoft 37BC  
                     ___ftpack 2BF4                       ___lbtoft 3978        __size_of_input_password 008E  
                     __delay_s 3526                       ___lltoft 340C                   _RtccTimeDate 0068  
                     _exp$3192 004C            __end_of_review_code 39C2                     sprintf@val 001E  
                    setClock@x 000F                       _caratula 3AF0               __size_of_isdigit 0022  
              ___lwdiv@divisor 0003                    ??_Write_RTC 000E                ___lwdiv@counter 0007  
                     __ptext10 2CBA                       __ptext11 3144                       __ptext20 297E  
                     __ptext12 3740                       __ptext21 27C2                       __ptext13 377E  
                     __ptext30 39C2                       __ptext22 2E7E                       __ptext14 1BCA  
                     __ptext31 25F4                       __ptext23 2304                       __ptext15 3A2C  
                     __ptext40 28A0                       __ptext32 37BC                       __ptext24 2D52  
                     __ptext16 1F9E                       __ptext41 3A48                       __ptext33 340C  
                     __ptext25 324A                       __ptext17 1A48                       __ptext50 3950  
                     __ptext42 38C6                       __ptext34 3A5E                       __ptext26 2A52  
                     __ptext18 20D8                       __ptext51 361E                       __ptext43 2F10  
                     __ptext35 3AE8                       __ptext27 2406                       __ptext19 1500  
                     __ptext60 3AF0                       __ptext52 34CA                       __ptext44 30BC  
                     __ptext36 3526                       __ptext28 36FC                       __ptext61 36B6  
                     __ptext53 357E                       __ptext45 3A72                       __ptext37 3978  
                     __ptext29 16E8                       __ptext70 21F8                       __ptext62 31CA  
                     __ptext54 366A                       __ptext46 26E0                       __ptext38 2BF4  
                     __ptext71 1E58                       __ptext63 3A9A                       __ptext55 39E6  
                     __ptext47 0FE4                       __ptext39 3ADE                       __ptext72 3ABE  
                     __ptext64 3AD0                       __ptext56 33AA                       __ptext48 129C  
                     __ptext65 3864                       __ptext57 1D12                       __ptext49 3A0A  
                     __ptext66 32C6                       __ptext58 333C                       __ptext67 3AAC  
                     __ptext59 302E                       __ptext68 18AC                       __ptext69 2DE8  
                     _lcd_init 31CA                       _lcd_putc 366A                       _pow$3190 00B3  
                     _pow$3191 00B6                    _obtain_pass 2508                 next_code@digit 0008  
             __size_of_sprintf 0264               __size_of_twinkle 00CE                 next_code@input 000A  
          input_old_pass@digit 00C7         __size_of_lcd_send_byte 0032       __end_of_configurar_reloj 2FA0  
          input_old_pass@input 00C6                  __size_of_main 0032                    ??_checkPass 0003  
                     _setClock 26E0                 ??_change_state 0001                       _minuto_d 00E9  
                     _minuto_u 00EA                       _password 00D9          __end_of_is_not_letter 38C6  
                     _ver_info 28A0                   ??_set_vision 0060          __end_of_read_keyboard 129C  
                ??_Delay1KTCYx 0001                ??_RtccWriteDate 0004                ??_RtccWriteTime 0004  
          input_new_pass@digit 00C5                    ??_lcd_putrs 000B            input_new_pass@input 00C4  
                 ??_show_error 0010                       exp@coeff 0F0F                       log@coeff 0F2D  
                  _OSCTUNEbits 000F9B                     _INTCONbits 000FF2                    ??_eval_poly 002F  
           RtccWriteTime@wasOn 0005                 _dispararSensor 38C6           __end_of_Delay100TCYx 3ABE  
                     isdigit@c 0003                ??_not_fill_pass 0003                    _select_menu 2CBA  
            _ver_opcion_cambio 3144                      sprintf@ap 001B        __end_of_lcd_send_nibble 333C  
                    sprintf@sp 000D             __end_of_set_vision 34CA             ?_ver_opcion_cambio 0001  
        lcd_setcursor_vb@blink 0005          __size_of_show_success 003E               ___lwmod@dividend 0008  
                  ??_next_code 000C   ver_opcion_cambio@old_correct 005A                   _time_to_stop 00DB  
           input_old_pass@pass 00C4             __end_of_show_error 37BC                     _OSCCONbits 000FD3  
          ??_ver_opcion_cambio 005A       __end_of_lcd_setcursor_vb 3A86          RtccWriteDate@tempYear 0007  
                 ??_write_Date 0024                    _review_code 399E                  _lcd_send_byte 3864  
                   _RTCCFGbits 000F3F                       sprintf@c 0023                       sprintf@f 000F  
       __end_of_dispararSensor 38F6                ___lwmod@divisor 000A            __end_of_Delay1KTCYx 3AAC  
              ___lwmod@counter 000C           RtccWriteDate@wasAlrm 0006      __end_of_ver_opcion_cambio 31CA  
                 _show_success 3740           RtccWriteDate@wasWrEn 0009               _obtain_pass$3184 00BE  
             _obtain_pass$3185 00C1   __end_of_set_desactive_vision 3950             __end_of_write_Date 3144  
        lcd_send_nibble@nibble 0002  
