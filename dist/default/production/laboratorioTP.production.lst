

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Sep 06 20:08:35 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    67                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    68  0000                     
    69                           	psect	idataCOMRAM
    70  00305C                     __pidataCOMRAM:
    71                           	opt stack 0
    72                           
    73                           ;initializer for _mes
    74  00305C  0009               	dw	9
    75                           
    76                           ;initializer for _key
    77  00305E  12                 	db	18
    78                           
    79                           	psect	idataBANK0
    80  003040                     __pidataBANK0:
    81                           	opt stack 0
    82                           
    83                           ;initializer for _anio
    84  003040  000F               	dw	15
    85                           
    86                           ;initializer for _dia
    87  003042  0008               	dw	8
    88                           
    89                           ;initializer for _diasem
    90  003044  0003               	dw	3
    91                           
    92                           ;initializer for _hora
    93  003046  0012               	dw	18
    94                           
    95                           ;initializer for _minuto
    96  003048  001E               	dw	30
    97                           
    98                           ;initializer for _password
    99  00304A  04D2               	dw	1234
   100                           
   101                           ;initializer for _state_alarm
   102  00304C  01                 	db	1
   103                           
   104                           	psect	smallconst
   105  000F00                     __psmallconst:
   106                           	opt stack 0
   107  000F00  00                 	db	0
   108  000F01                     _dpowers:
   109                           	opt stack 0
   110  000F01  0001               	dw	1
   111  000F03  000A               	dw	10
   112  000F05  0064               	dw	100
   113  000F07  03E8               	dw	1000
   114  000F09  2710               	dw	10000
   115  000F0B                     __end_of_dpowers:
   116                           	opt stack 0
   117  000F0B                     _LCD_INIT_STRING:
   118                           	opt stack 0
   119  000F0B  28                 	db	40
   120  000F0C  0C                 	db	12
   121  000F0D  01                 	db	1
   122  000F0E  06                 	db	6
   123  000F0F                     __end_of_LCD_INIT_STRING:
   124                           	opt stack 0
   125  000F0F                     exp@coeff:
   126                           	opt stack 0
   127  000F0F  00                 	db	0
   128  000F10  80                 	db	128
   129  000F11  3F                 	db	63
   130  000F12  72                 	db	114
   131  000F13  31                 	db	49
   132  000F14  3F                 	db	63
   133  000F15  FE                 	db	254
   134  000F16  75                 	db	117
   135  000F17  3E                 	db	62
   136  000F18  58                 	db	88
   137  000F19  63                 	db	99
   138  000F1A  3D                 	db	61
   139  000F1B  95                 	db	149
   140  000F1C  1D                 	db	29
   141  000F1D  3C                 	db	60
   142  000F1E  C5                 	db	197
   143  000F1F  AE                 	db	174
   144  000F20  3A                 	db	58
   145  000F21  79                 	db	121
   146  000F22  21                 	db	33
   147  000F23  39                 	db	57
   148  000F24  94                 	db	148
   149  000F25  80                 	db	128
   150  000F26  37                 	db	55
   151  000F27  93                 	db	147
   152  000F28  A7                 	db	167
   153  000F29  35                 	db	53
   154  000F2A  56                 	db	86
   155  000F2B  15                 	db	21
   156  000F2C  34                 	db	52
   157  000F2D                     __end_ofexp@coeff:
   158                           	opt stack 0
   159  000F2D                     log@coeff:
   160                           	opt stack 0
   161  000F2D  00                 	db	0
   162  000F2E  00                 	db	0
   163  000F2F  00                 	db	0
   164  000F30  00                 	db	0
   165  000F31  80                 	db	128
   166  000F32  3F                 	db	63
   167  000F33  F0                 	db	240
   168  000F34  FF                 	db	255
   169  000F35  BE                 	db	190
   170  000F36  E2                 	db	226
   171  000F37  A9                 	db	169
   172  000F38  3E                 	db	62
   173  000F39  83                 	db	131
   174  000F3A  76                 	db	118
   175  000F3B  BE                 	db	190
   176  000F3C  AE                 	db	174
   177  000F3D  2B                 	db	43
   178  000F3E  3E                 	db	62
   179  000F3F  3C                 	db	60
   180  000F40  C3                 	db	195
   181  000F41  BD                 	db	189
   182  000F42  D2                 	db	210
   183  000F43  13                 	db	19
   184  000F44  3D                 	db	61
   185  000F45  78                 	db	120
   186  000F46  D3                 	db	211
   187  000F47  BB                 	db	187
   188  000F48                     __end_oflog@coeff:
   189                           	opt stack 0
   190  000F48                     STR_1:
   191                           
   192                           ; BSR set to: 15
   193  000F48  20                 	db	32
   194  000F49  20                 	db	32
   195  000F4A  20                 	db	32
   196  000F4B  20                 	db	32
   197  000F4C  20                 	db	32
   198  000F4D  20                 	db	32
   199  000F4E  20                 	db	32
   200  000F4F  20                 	db	32
   201  000F50  20                 	db	32
   202  000F51  20                 	db	32
   203  000F52  20                 	db	32
   204  000F53  20                 	db	32
   205  000F54  20                 	db	32
   206  000F55  20                 	db	32
   207  000F56  20                 	db	32
   208  000F57  20                 	db	32
   209  000F58  20                 	db	32
   210  000F59  20                 	db	32
   211  000F5A  20                 	db	32
   212  000F5B  20                 	db	32
   213  000F5C  20                 	db	32
   214  000F5D  20                 	db	32
   215  000F5E  20                 	db	32
   216  000F5F  20                 	db	32
   217  000F60  20                 	db	32
   218  000F61  20                 	db	32
   219  000F62  20                 	db	32
   220  000F63  20                 	db	32
   221  000F64  20                 	db	32
   222  000F65  20                 	db	32
   223  000F66  20                 	db	32
   224  000F67  20                 	db	32
   225  000F68  00                 	db	0
   226  000F69                     STR_14:
   227                           
   228                           ; BSR set to: 15
   229  000F69  25                 	db	37
   230  000F6A  30                 	db	48	;'0'
   231  000F6B  32                 	db	50	;'2'
   232  000F6C  75                 	db	117	;'u'
   233  000F6D  2F                 	db	47
   234  000F6E  25                 	db	37
   235  000F6F  30                 	db	48	;'0'
   236  000F70  32                 	db	50	;'2'
   237  000F71  75                 	db	117	;'u'
   238  000F72  2F                 	db	47
   239  000F73  25                 	db	37
   240  000F74  30                 	db	48	;'0'
   241  000F75  32                 	db	50	;'2'
   242  000F76  75                 	db	117	;'u'
   243  000F77  00                 	db	0
   244  000F78                     STR_2:
   245                           
   246                           ; BSR set to: 15
   247  000F78  6E                 	db	110	;'n'
   248  000F79  75                 	db	117	;'u'
   249  000F7A  6C                 	db	108	;'l'
   250  000F7B  6C                 	db	108	;'l'
   251  000F7C  20                 	db	32
   252  000F7D  70                 	db	112	;'p'
   253  000F7E  6F                 	db	111	;'o'
   254  000F7F  69                 	db	105	;'i'
   255  000F80  6E                 	db	110	;'n'
   256  000F81  74                 	db	116	;'t'
   257  000F82  65                 	db	101	;'e'
   258  000F83  72                 	db	114	;'r'
   259  000F84  00                 	db	0
   260  000F85                     STR_16:
   261                           
   262                           ; BSR set to: 15
   263  000F85  57                 	db	87	;'W'
   264  000F86  41                 	db	65	;'A'
   265  000F87  52                 	db	82	;'R'
   266  000F88  4E                 	db	78	;'N'
   267  000F89  49                 	db	73	;'I'
   268  000F8A  4E                 	db	78	;'N'
   269  000F8B  47                 	db	71	;'G'
   270  000F8C  21                 	db	33
   271  000F8D  21                 	db	33
   272  000F8E  21                 	db	33
   273  000F8F  00                 	db	0
   274  000F90                     STR_20:
   275                           
   276                           ; BSR set to: 15
   277  000F90  70                 	db	112	;'p'
   278  000F91  61                 	db	97	;'a'
   279  000F92  73                 	db	115	;'s'
   280  000F93  73                 	db	115	;'s'
   281  000F94  3A                 	db	58	;':'
   282  000F95  5F                 	db	95	;'_'
   283  000F96  5F                 	db	95	;'_'
   284  000F97  5F                 	db	95	;'_'
   285  000F98  5F                 	db	95	;'_'
   286  000F99  00                 	db	0
   287  000F9A                     STR_15:
   288                           
   289                           ; BSR set to: 15
   290  000F9A  25                 	db	37
   291  000F9B  30                 	db	48	;'0'
   292  000F9C  32                 	db	50	;'2'
   293  000F9D  75                 	db	117	;'u'
   294  000F9E  3A                 	db	58	;':'
   295  000F9F  25                 	db	37
   296  000FA0  30                 	db	48	;'0'
   297  000FA1  32                 	db	50	;'2'
   298  000FA2  75                 	db	117	;'u'
   299  000FA3  00                 	db	0
   300  000FA4                     STR_3:
   301                           
   302                           ; BSR set to: 15
   303  000FA4  65                 	db	101	;'e'
   304  000FA5  78                 	db	120	;'x'
   305  000FA6  63                 	db	99	;'c'
   306  000FA7  65                 	db	101	;'e'
   307  000FA8  70                 	db	112	;'p'
   308  000FA9  74                 	db	116	;'t'
   309  000FAA  69                 	db	105	;'i'
   310  000FAB  6F                 	db	111	;'o'
   311  000FAC  6E                 	db	110	;'n'
   312  000FAD  00                 	db	0
   313  000FAE                     STR_21:
   314                           
   315                           ; BSR set to: 15
   316  000FAE  54                 	db	84	;'T'
   317  000FAF  52                 	db	82	;'R'
   318  000FB0  49                 	db	73	;'I'
   319  000FB1  47                 	db	71	;'G'
   320  000FB2  47                 	db	71	;'G'
   321  000FB3  45                 	db	69	;'E'
   322  000FB4  44                 	db	68	;'D'
   323  000FB5  00                 	db	0
   324  000FB6                     STR_4:
   325                           
   326                           ; BSR set to: 15
   327  000FB6  25                 	db	37
   328  000FB7  30                 	db	48	;'0'
   329  000FB8  31                 	db	49	;'1'
   330  000FB9  75                 	db	117	;'u'
   331  000FBA  00                 	db	0
   332  000FBB                     STR_19:
   333                           
   334                           ; BSR set to: 15
   335  000FBB  4F                 	db	79	;'O'
   336  000FBC  46                 	db	70	;'F'
   337  000FBD  46                 	db	70	;'F'
   338  000FBE  00                 	db	0
   339  000FBF                     STR_18:
   340                           
   341                           ; BSR set to: 15
   342  000FBF  4F                 	db	79	;'O'
   343  000FC0  4E                 	db	78	;'N'
   344  000FC1  00                 	db	0
   345  0000                     
   346                           ; #config settings
   347  000FC2  00                 	db	0	; dummy byte at the end
   348  0000                     
   349                           	psect	nvBANK0
   350  0000BE                     __pnvBANK0:
   351                           	opt stack 0
   352  0000BE                     _anio_d:
   353                           	opt stack 0
   354  0000BE                     	ds	1
   355  0000BF                     _anio_u:
   356                           	opt stack 0
   357  0000BF                     	ds	1
   358  0000C0                     _dia_semana:
   359                           	opt stack 0
   360  0000C0                     	ds	1
   361  0000C1                     _fecha_d:
   362                           	opt stack 0
   363  0000C1                     	ds	1
   364  0000C2                     _fecha_u:
   365                           	opt stack 0
   366  0000C2                     	ds	1
   367  0000C3                     _hora_d:
   368                           	opt stack 0
   369  0000C3                     	ds	1
   370  0000C4                     _hora_u:
   371                           	opt stack 0
   372  0000C4                     	ds	1
   373  0000C5                     _mes_d:
   374                           	opt stack 0
   375  0000C5                     	ds	1
   376  0000C6                     _mes_u:
   377                           	opt stack 0
   378  0000C6                     	ds	1
   379  0000C7                     _minuto_d:
   380                           	opt stack 0
   381  0000C7                     	ds	1
   382  0000C8                     _minuto_u:
   383                           	opt stack 0
   384  0000C8                     	ds	1
   385  0000C9                     _segundo_d:
   386                           	opt stack 0
   387  0000C9                     	ds	1
   388  0000CA                     _segundo_u:
   389                           	opt stack 0
   390  0000CA                     	ds	1
   391  0000                     _ANCON0	set	3912
   392  0000                     _ANCON1	set	3913
   393  0000                     _RTCCFG	set	3903
   394  0000                     _RTCCFGbits	set	3903
   395  0000                     _ADCON0	set	4034
   396  0000                     _ADCON1	set	4033
   397  0000                     _ALRMCFGbits	set	3985
   398  0000                     _EECON2	set	4007
   399  0000                     _INTCONbits	set	4082
   400  0000                     _LATAbits	set	3977
   401  0000                     _LATBbits	set	3978
   402  0000                     _OSCCONbits	set	4051
   403  0000                     _OSCTUNEbits	set	3995
   404  0000                     _PIE3bits	set	4003
   405  0000                     _PORTAbits	set	3968
   406  0000                     _PORTCbits	set	3970
   407  0000                     _RTCVALH	set	3993
   408  0000                     _RTCVALL	set	3992
   409  0000                     _T1CONbits	set	4045
   410  0000                     _TRISA	set	3986
   411  0000                     _TRISB	set	3987
   412  0000                     _TRISBbits	set	3987
   413  0000                     _TRISC	set	3988
   414                           
   415                           	psect	cinit
   416  002CC2                     __pcinit:
   417                           	opt stack 0
   418  002CC2                     start_initialization:
   419                           	opt stack 0
   420  002CC2                     __initialization:
   421                           	opt stack 0
   422                           
   423                           ; Clear objects allocated to BANK0 (72 bytes)
   424  002CC2  EE00  F060         	lfsr	0,__pbssBANK0
   425  002CC6  0E48               	movlw	72
   426  002CC8                     clear_0:
   427  002CC8  6AEE               	clrf	postinc0,c
   428  002CCA  06E8               	decf	wreg,f,c
   429  002CCC  E1FD               	bnz	clear_0
   430                           
   431                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   432  002CCE  6A5F               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   433                           
   434                           ; Initialize objects allocated to BANK0 (13 bytes)
   435                           ; load TBLPTR registers with __pidataBANK0
   436  002CD0  0E40               	movlw	low __pidataBANK0
   437  002CD2  6EF6               	movwf	tblptrl,c
   438  002CD4  0E30               	movlw	high __pidataBANK0
   439  002CD6  6EF7               	movwf	tblptrh,c
   440  002CD8  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   441  002CDA  6EF8               	movwf	tblptru,c
   442  002CDC  EE00  F0CB         	lfsr	0,__pdataBANK0
   443  002CE0  EE10 F00D          	lfsr	1,13
   444  002CE4                     copy_data0:
   445  002CE4  0009               	tblrd		*+
   446  002CE6  CFF5 FFEE          	movff	tablat,postinc0
   447  002CEA  50E5               	movf	postdec1,w,c
   448  002CEC  50E1               	movf	fsr1l,w,c
   449  002CEE  E1FA               	bnz	copy_data0
   450                           
   451                           ; Initialize objects allocated to COMRAM (3 bytes)
   452                           ; load TBLPTR registers with __pidataCOMRAM
   453  002CF0  0E5C               	movlw	low __pidataCOMRAM
   454  002CF2  6EF6               	movwf	tblptrl,c
   455  002CF4  0E30               	movlw	high __pidataCOMRAM
   456  002CF6  6EF7               	movwf	tblptrh,c
   457  002CF8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   458  002CFA  6EF8               	movwf	tblptru,c
   459  002CFC  0009               	tblrd		*+	;fetch initializer
   460  002CFE  CFF5 F05C          	movff	tablat,__pdataCOMRAM
   461  002D02  0009               	tblrd		*+	;fetch initializer
   462  002D04  CFF5 F05D          	movff	tablat,__pdataCOMRAM+1
   463  002D08  0009               	tblrd		*+	;fetch initializer
   464  002D0A  CFF5 F05E          	movff	tablat,__pdataCOMRAM+2
   465  002D0E                     end_of_initialization:
   466                           	opt stack 0
   467  002D0E                     __end_of__initialization:
   468                           	opt stack 0
   469  002D0E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   470  002D10  6EF8               	movwf	tblptru,c
   471  002D12  0100               	movlb	0
   472  002D14  EFF0  F014         	goto	_main	;jump to C main() function
   473                           tblptru	equ	0xFF8
   474                           tblptrh	equ	0xFF7
   475                           tblptrl	equ	0xFF6
   476                           tablat	equ	0xFF5
   477                           postinc0	equ	0xFEE
   478                           wreg	equ	0xFE8
   479                           postdec1	equ	0xFE5
   480                           fsr1l	equ	0xFE1
   481                           
   482                           	psect	bitbssCOMRAM
   483  0002F8                     __pbitbssCOMRAM:
   484                           	opt stack 0
   485  0002F8                     _flag:
   486                           	opt stack 0
   487  0002F8                     	ds	1
   488                           tblptru	equ	0xFF8
   489                           tblptrh	equ	0xFF7
   490                           tblptrl	equ	0xFF6
   491                           tablat	equ	0xFF5
   492                           postinc0	equ	0xFEE
   493                           wreg	equ	0xFE8
   494                           postdec1	equ	0xFE5
   495                           fsr1l	equ	0xFE1
   496                           
   497                           	psect	dataCOMRAM
   498  00005C                     __pdataCOMRAM:
   499                           	opt stack 0
   500  00005C                     _mes:
   501                           	opt stack 0
   502  00005C                     	ds	2
   503  00005E                     _key:
   504                           	opt stack 0
   505  00005E                     	ds	1
   506                           tblptru	equ	0xFF8
   507                           tblptrh	equ	0xFF7
   508                           tblptrl	equ	0xFF6
   509                           tablat	equ	0xFF5
   510                           postinc0	equ	0xFEE
   511                           wreg	equ	0xFE8
   512                           postdec1	equ	0xFE5
   513                           fsr1l	equ	0xFE1
   514                           
   515                           	psect	bssBANK0
   516  000060                     __pbssBANK0:
   517                           	opt stack 0
   518  000060                     _RtccAlrmTimeDate:
   519                           	opt stack 0
   520  000060                     	ds	8
   521  000068                     _RtccTimeDate:
   522                           	opt stack 0
   523  000068                     	ds	8
   524  000070                     _Rtcc_read_TimeDate:
   525                           	opt stack 0
   526  000070                     	ds	8
   527  000078                     _RtccTimeVal:
   528                           	opt stack 0
   529  000078                     	ds	4
   530  00007C                     _a:
   531                           	opt stack 0
   532  00007C                     	ds	2
   533  00007E                     _b:
   534                           	opt stack 0
   535  00007E                     	ds	2
   536  000080                     _c:
   537                           	opt stack 0
   538  000080                     	ds	2
   539  000082                     _errno:
   540                           	opt stack 0
   541  000082                     	ds	2
   542  000084                     _i:
   543                           	opt stack 0
   544  000084                     	ds	2
   545  000086                     _j:
   546                           	opt stack 0
   547  000086                     	ds	2
   548  000088                     _k:
   549                           	opt stack 0
   550  000088                     	ds	2
   551  00008A                     _segundo:
   552                           	opt stack 0
   553  00008A                     	ds	2
   554  00008C                     _buffer2:
   555                           	opt stack 0
   556  00008C                     	ds	20
   557  0000A0                     _RtccDate:
   558                           	opt stack 0
   559  0000A0                     	ds	4
   560  0000A4                     _RtccTime:
   561                           	opt stack 0
   562  0000A4                     	ds	4
   563                           tblptru	equ	0xFF8
   564                           tblptrh	equ	0xFF7
   565                           tblptrl	equ	0xFF6
   566                           tablat	equ	0xFF5
   567                           postinc0	equ	0xFEE
   568                           wreg	equ	0xFE8
   569                           postdec1	equ	0xFE5
   570                           fsr1l	equ	0xFE1
   571                           
   572                           	psect	dataBANK0
   573  0000CB                     __pdataBANK0:
   574                           	opt stack 0
   575  0000CB                     _anio:
   576                           	opt stack 0
   577  0000CB                     	ds	2
   578  0000CD                     _dia:
   579                           	opt stack 0
   580  0000CD                     	ds	2
   581  0000CF                     _diasem:
   582                           	opt stack 0
   583  0000CF                     	ds	2
   584  0000D1                     _hora:
   585                           	opt stack 0
   586  0000D1                     	ds	2
   587  0000D3                     _minuto:
   588                           	opt stack 0
   589  0000D3                     	ds	2
   590  0000D5                     _password:
   591                           	opt stack 0
   592  0000D5                     	ds	2
   593  0000D7                     _state_alarm:
   594                           	opt stack 0
   595  0000D7                     	ds	1
   596                           tblptru	equ	0xFF8
   597                           tblptrh	equ	0xFF7
   598                           tblptrl	equ	0xFF6
   599                           tablat	equ	0xFF5
   600                           postinc0	equ	0xFEE
   601                           wreg	equ	0xFE8
   602                           postdec1	equ	0xFE5
   603                           fsr1l	equ	0xFE1
   604                           
   605                           	psect	cstackBANK0
   606  0000A8                     __pcstackBANK0:
   607                           	opt stack 0
   608  0000A8                     _pow$2711:
   609                           	opt stack 0
   610                           
   611                           ; 3 bytes @ 0x0
   612  0000A8                     	ds	3
   613  0000AB                     _pow$2712:
   614                           	opt stack 0
   615                           
   616                           ; 3 bytes @ 0x3
   617  0000AB                     	ds	3
   618  0000AE                     pow@sign:
   619                           	opt stack 0
   620                           
   621                           ; 1 bytes @ 0x6
   622  0000AE                     	ds	1
   623  0000AF                     pow@yi:
   624                           	opt stack 0
   625                           
   626                           ; 4 bytes @ 0x7
   627  0000AF                     	ds	4
   628  0000B3                     _set_vision$2709:
   629                           	opt stack 0
   630                           
   631                           ; 3 bytes @ 0xB
   632  0000B3                     	ds	3
   633  0000B6                     _set_vision$2710:
   634                           	opt stack 0
   635                           
   636                           ; 3 bytes @ 0xE
   637  0000B6                     	ds	3
   638  0000B9                     set_vision@pass:
   639                           	opt stack 0
   640                           
   641                           ; 2 bytes @ 0x11
   642  0000B9                     	ds	2
   643  0000BB                     set_vision@digit:
   644                           	opt stack 0
   645                           
   646                           ; 2 bytes @ 0x13
   647  0000BB                     	ds	2
   648  0000BD                     set_vision@input:
   649                           	opt stack 0
   650                           
   651                           ; 1 bytes @ 0x15
   652  0000BD                     	ds	1
   653                           tblptru	equ	0xFF8
   654                           tblptrh	equ	0xFF7
   655                           tblptrl	equ	0xFF6
   656                           tablat	equ	0xFF5
   657                           postinc0	equ	0xFEE
   658                           wreg	equ	0xFE8
   659                           postdec1	equ	0xFE5
   660                           fsr1l	equ	0xFE1
   661                           
   662                           	psect	cstackCOMRAM
   663  000001                     __pcstackCOMRAM:
   664                           	opt stack 0
   665  000001                     ??_isdigit:
   666  000001                     ??_lcd_send_nibble:
   667  000001                     ?___wmul:
   668                           	opt stack 0
   669  000001                     ?___awdiv:
   670                           	opt stack 0
   671  000001                     ?___lwdiv:
   672                           	opt stack 0
   673  000001                     ?___ftpack:
   674                           	opt stack 0
   675  000001                     ?_frexp:
   676                           	opt stack 0
   677  000001                     ?___ftneg:
   678                           	opt stack 0
   679  000001                     Delay100TCYx@unit:
   680                           	opt stack 0
   681  000001                     Delay1KTCYx@unit:
   682                           	opt stack 0
   683  000001                     checkPass@pass:
   684                           	opt stack 0
   685  000001                     RtccWriteDate@pDt:
   686                           	opt stack 0
   687  000001                     RtccWriteTime@pTm:
   688                           	opt stack 0
   689  000001                     ___wmul@multiplier:
   690                           	opt stack 0
   691  000001                     ___awdiv@dividend:
   692                           	opt stack 0
   693  000001                     ___lwdiv@dividend:
   694                           	opt stack 0
   695  000001                     ___ftpack@arg:
   696                           	opt stack 0
   697  000001                     ___ftge@ff1:
   698                           	opt stack 0
   699  000001                     ___ftneg@f1:
   700                           	opt stack 0
   701  000001                     frexp@value:
   702                           	opt stack 0
   703                           
   704                           ; 3 bytes @ 0x0
   705  000001                     	ds	1
   706  000002                     lcd_send_nibble@nibble:
   707                           	opt stack 0
   708  000002                     _isdigit$2348:
   709                           	opt stack 0
   710                           
   711                           ; 1 bytes @ 0x1
   712  000002                     	ds	1
   713  000003                     lcd_send_byte@n:
   714                           	opt stack 0
   715  000003                     RtccWriteDate@di:
   716                           	opt stack 0
   717  000003                     RtccWriteTime@di:
   718                           	opt stack 0
   719  000003                     isdigit@c:
   720                           	opt stack 0
   721  000003                     ___wmul@multiplicand:
   722                           	opt stack 0
   723  000003                     ___awdiv@divisor:
   724                           	opt stack 0
   725  000003                     ___lwdiv@divisor:
   726                           	opt stack 0
   727                           
   728                           ; 2 bytes @ 0x2
   729  000003                     	ds	1
   730  000004                     lcd_send_byte@address:
   731                           	opt stack 0
   732  000004                     ___ftpack@exp:
   733                           	opt stack 0
   734  000004                     frexp@eptr:
   735                           	opt stack 0
   736  000004                     ___ftge@ff2:
   737                           	opt stack 0
   738                           
   739                           ; 3 bytes @ 0x3
   740  000004                     	ds	1
   741  000005                     lcd_init@i:
   742                           	opt stack 0
   743  000005                     lcd_gotoxy@y:
   744                           	opt stack 0
   745  000005                     lcd_comand@d:
   746                           	opt stack 0
   747  000005                     lcd_setcursor_vb@blink:
   748                           	opt stack 0
   749  000005                     RtccWriteDate@wasOn:
   750                           	opt stack 0
   751  000005                     RtccWriteTime@wasOn:
   752                           	opt stack 0
   753  000005                     ___awdiv@counter:
   754                           	opt stack 0
   755  000005                     ___ftpack@sign:
   756                           	opt stack 0
   757  000005                     ___wmul@product:
   758                           	opt stack 0
   759  000005                     ___lwdiv@quotient:
   760                           	opt stack 0
   761                           
   762                           ; 2 bytes @ 0x4
   763  000005                     	ds	1
   764  000006                     ??___ftpack:
   765  000006                     ??_frexp:
   766  000006                     ??_clear:
   767  000006                     lcd_gotoxy@x:
   768                           	opt stack 0
   769  000006                     lcd_setcursor_vb@visible:
   770                           	opt stack 0
   771  000006                     RtccWriteDate@wasAlrm:
   772                           	opt stack 0
   773  000006                     RtccWriteTime@wasAlrm:
   774                           	opt stack 0
   775  000006                     ___awdiv@sign:
   776                           	opt stack 0
   777                           
   778                           ; 1 bytes @ 0x5
   779  000006                     	ds	1
   780  000007                     ??___ftge:
   781  000007                     lcd_gotoxy@address:
   782                           	opt stack 0
   783  000007                     RtccWriteTime@wasWrEn:
   784                           	opt stack 0
   785  000007                     ___lwdiv@counter:
   786                           	opt stack 0
   787  000007                     RtccWriteDate@tempYear:
   788                           	opt stack 0
   789  000007                     ___awdiv@quotient:
   790                           	opt stack 0
   791                           
   792                           ; 2 bytes @ 0x6
   793  000007                     	ds	1
   794  000008                     ?___lwmod:
   795                           	opt stack 0
   796  000008                     lcd_putc@c:
   797                           	opt stack 0
   798  000008                     RtccWriteTime@tempMinSec:
   799                           	opt stack 0
   800  000008                     ___lwmod@dividend:
   801                           	opt stack 0
   802                           
   803                           ; 2 bytes @ 0x7
   804  000008                     	ds	1
   805  000009                     ?___ftdiv:
   806                           	opt stack 0
   807  000009                     ?___awtoft:
   808                           	opt stack 0
   809  000009                     ?___lbtoft:
   810                           	opt stack 0
   811  000009                     ?___lltoft:
   812                           	opt stack 0
   813  000009                     RtccWriteDate@wasWrEn:
   814                           	opt stack 0
   815  000009                     lcd_putrs@ptr:
   816                           	opt stack 0
   817  000009                     __delay_s@millis:
   818                           	opt stack 0
   819  000009                     ___awtoft@c:
   820                           	opt stack 0
   821  000009                     ___ftdiv@f1:
   822                           	opt stack 0
   823  000009                     ___lltoft@c:
   824                           	opt stack 0
   825                           
   826                           ; 4 bytes @ 0x8
   827  000009                     	ds	1
   828  00000A                     RtccWriteDate@tempDayMonth:
   829                           	opt stack 0
   830  00000A                     RtccWriteTime@tempHourWDay:
   831                           	opt stack 0
   832  00000A                     ___lwmod@divisor:
   833                           	opt stack 0
   834                           
   835                           ; 2 bytes @ 0x9
   836  00000A                     	ds	1
   837  00000B                     ??__delay_s:
   838                           
   839                           ; 0 bytes @ 0xA
   840  00000B                     	ds	1
   841  00000C                     ___awtoft@sign:
   842                           	opt stack 0
   843  00000C                     ___lbtoft@c:
   844                           	opt stack 0
   845  00000C                     ___lwmod@counter:
   846                           	opt stack 0
   847  00000C                     __delay_s@it:
   848                           	opt stack 0
   849  00000C                     RtccWriteDate@tempHourWDay:
   850                           	opt stack 0
   851  00000C                     ___ftdiv@f2:
   852                           	opt stack 0
   853                           
   854                           ; 3 bytes @ 0xB
   855  00000C                     	ds	1
   856  00000D                     ??___lltoft:
   857  00000D                     ?_sprintf:
   858                           	opt stack 0
   859  00000D                     ?___ftmul:
   860                           	opt stack 0
   861  00000D                     sprintf@sp:
   862                           	opt stack 0
   863  00000D                     ___ftmul@f1:
   864                           	opt stack 0
   865                           
   866                           ; 3 bytes @ 0xC
   867  00000D                     	ds	1
   868  00000E                     __delay_s@index:
   869                           	opt stack 0
   870                           
   871                           ; 2 bytes @ 0xD
   872  00000E                     	ds	1
   873  00000F                     ??___ftdiv:
   874  00000F                     sprintf@f:
   875                           	opt stack 0
   876                           
   877                           ; 2 bytes @ 0xE
   878  00000F                     	ds	1
   879  000010                     ___ftmul@f2:
   880                           	opt stack 0
   881                           
   882                           ; 3 bytes @ 0xF
   883  000010                     	ds	1
   884  000011                     ___lltoft@exp:
   885                           	opt stack 0
   886                           
   887                           ; 1 bytes @ 0x10
   888  000011                     	ds	1
   889  000012                     ___ftdiv@cntr:
   890                           	opt stack 0
   891                           
   892                           ; 1 bytes @ 0x11
   893  000012                     	ds	1
   894  000013                     ??___ftmul:
   895  000013                     ___ftdiv@f3:
   896                           	opt stack 0
   897                           
   898                           ; 3 bytes @ 0x12
   899  000013                     	ds	3
   900  000016                     ___ftdiv@exp:
   901                           	opt stack 0
   902  000016                     ___ftmul@exp:
   903                           	opt stack 0
   904                           
   905                           ; 1 bytes @ 0x15
   906  000016                     	ds	1
   907  000017                     ??_sprintf:
   908  000017                     ___ftdiv@sign:
   909                           	opt stack 0
   910  000017                     ___ftmul@f3_as_product:
   911                           	opt stack 0
   912                           
   913                           ; 3 bytes @ 0x16
   914  000017                     	ds	3
   915  00001A                     ___ftmul@cntr:
   916                           	opt stack 0
   917                           
   918                           ; 1 bytes @ 0x19
   919  00001A                     	ds	1
   920  00001B                     ___ftmul@sign:
   921                           	opt stack 0
   922  00001B                     sprintf@ap:
   923                           	opt stack 0
   924                           
   925                           ; 2 bytes @ 0x1A
   926  00001B                     	ds	1
   927  00001C                     ?___ftadd:
   928                           	opt stack 0
   929  00001C                     ___ftadd@f1:
   930                           	opt stack 0
   931                           
   932                           ; 3 bytes @ 0x1B
   933  00001C                     	ds	1
   934  00001D                     sprintf@flag:
   935                           	opt stack 0
   936                           
   937                           ; 1 bytes @ 0x1C
   938  00001D                     	ds	1
   939  00001E                     sprintf@val:
   940                           	opt stack 0
   941                           
   942                           ; 2 bytes @ 0x1D
   943  00001E                     	ds	1
   944  00001F                     ___ftadd@f2:
   945                           	opt stack 0
   946                           
   947                           ; 3 bytes @ 0x1E
   948  00001F                     	ds	1
   949  000020                     sprintf@prec:
   950                           	opt stack 0
   951                           
   952                           ; 1 bytes @ 0x1F
   953  000020                     	ds	1
   954  000021                     sprintf@width:
   955                           	opt stack 0
   956                           
   957                           ; 2 bytes @ 0x20
   958  000021                     	ds	1
   959  000022                     ??___ftadd:
   960                           
   961                           ; 0 bytes @ 0x21
   962  000022                     	ds	1
   963  000023                     sprintf@c:
   964                           	opt stack 0
   965                           
   966                           ; 1 bytes @ 0x22
   967  000023                     	ds	1
   968  000024                     ??_read_keyboard:
   969  000024                     
   970                           ; 0 bytes @ 0x23
   971  000024                     	ds	1
   972  000025                     twinkle@input:
   973                           	opt stack 0
   974  000025                     ___ftadd@sign:
   975                           	opt stack 0
   976                           
   977                           ; 1 bytes @ 0x24
   978  000025                     	ds	1
   979  000026                     ___ftadd@exp2:
   980                           	opt stack 0
   981                           
   982                           ; 1 bytes @ 0x25
   983  000026                     	ds	1
   984  000027                     ___ftadd@exp1:
   985                           	opt stack 0
   986                           
   987                           ; 1 bytes @ 0x26
   988  000027                     	ds	1
   989  000028                     ?___ftsub:
   990                           	opt stack 0
   991  000028                     ?_eval_poly:
   992                           	opt stack 0
   993  000028                     ?___fttol:
   994                           	opt stack 0
   995  000028                     ___ftsub@f1:
   996                           	opt stack 0
   997  000028                     ___fttol@f1:
   998                           	opt stack 0
   999  000028                     eval_poly@x:
  1000                           	opt stack 0
  1001                           
  1002                           ; 3 bytes @ 0x27
  1003  000028                     	ds	3
  1004  00002B                     eval_poly@d:
  1005                           	opt stack 0
  1006  00002B                     ___ftsub@f2:
  1007                           	opt stack 0
  1008                           
  1009                           ; 3 bytes @ 0x2A
  1010  00002B                     	ds	1
  1011  00002C                     ??___fttol:
  1012                           
  1013                           ; 0 bytes @ 0x2B
  1014  00002C                     	ds	1
  1015  00002D                     eval_poly@n:
  1016                           	opt stack 0
  1017                           
  1018                           ; 2 bytes @ 0x2C
  1019  00002D                     	ds	1
  1020  00002E                     
  1021                           ; 0 bytes @ 0x2D
  1022  00002E                     	ds	1
  1023  00002F                     ??_eval_poly:
  1024                           
  1025                           ; 0 bytes @ 0x2E
  1026  00002F                     	ds	2
  1027  000031                     ___fttol@sign1:
  1028                           	opt stack 0
  1029  000031                     eval_poly@res:
  1030                           	opt stack 0
  1031                           
  1032                           ; 3 bytes @ 0x30
  1033  000031                     	ds	1
  1034  000032                     ___fttol@lval:
  1035                           	opt stack 0
  1036                           
  1037                           ; 4 bytes @ 0x31
  1038  000032                     	ds	2
  1039  000034                     ?_log:
  1040                           	opt stack 0
  1041  000034                     ?_ldexp:
  1042                           	opt stack 0
  1043  000034                     ldexp@value:
  1044                           	opt stack 0
  1045  000034                     log@x:
  1046                           	opt stack 0
  1047                           
  1048                           ; 3 bytes @ 0x33
  1049  000034                     	ds	2
  1050  000036                     ___fttol@exp1:
  1051                           	opt stack 0
  1052                           
  1053                           ; 1 bytes @ 0x35
  1054  000036                     	ds	1
  1055  000037                     ?___altoft:
  1056                           	opt stack 0
  1057  000037                     ldexp@newexp:
  1058                           	opt stack 0
  1059  000037                     log@exponent:
  1060                           	opt stack 0
  1061  000037                     ___altoft@c:
  1062                           	opt stack 0
  1063                           
  1064                           ; 4 bytes @ 0x36
  1065  000037                     	ds	2
  1066  000039                     ??_ldexp:
  1067                           
  1068                           ; 0 bytes @ 0x38
  1069  000039                     	ds	2
  1070  00003B                     ??___altoft:
  1071                           
  1072                           ; 0 bytes @ 0x3A
  1073  00003B                     	ds	4
  1074  00003F                     ___altoft@exp:
  1075                           	opt stack 0
  1076                           
  1077                           ; 1 bytes @ 0x3E
  1078  00003F                     	ds	1
  1079  000040                     ___altoft@sign:
  1080                           	opt stack 0
  1081                           
  1082                           ; 1 bytes @ 0x3F
  1083  000040                     	ds	1
  1084  000041                     ?_floor:
  1085                           	opt stack 0
  1086  000041                     floor@x:
  1087                           	opt stack 0
  1088                           
  1089                           ; 3 bytes @ 0x40
  1090  000041                     	ds	3
  1091  000044                     floor@i:
  1092                           	opt stack 0
  1093                           
  1094                           ; 3 bytes @ 0x43
  1095  000044                     	ds	3
  1096  000047                     floor@expon:
  1097                           	opt stack 0
  1098                           
  1099                           ; 2 bytes @ 0x46
  1100  000047                     	ds	2
  1101  000049                     ?_exp:
  1102                           	opt stack 0
  1103  000049                     exp@x:
  1104                           	opt stack 0
  1105                           
  1106                           ; 3 bytes @ 0x48
  1107  000049                     	ds	3
  1108  00004C                     _exp$2713:
  1109                           	opt stack 0
  1110                           
  1111                           ; 3 bytes @ 0x4B
  1112  00004C                     	ds	3
  1113  00004F                     exp@exponent:
  1114                           	opt stack 0
  1115                           
  1116                           ; 2 bytes @ 0x4E
  1117  00004F                     	ds	2
  1118  000051                     exp@sign:
  1119                           	opt stack 0
  1120                           
  1121                           ; 1 bytes @ 0x50
  1122  000051                     	ds	1
  1123  000052                     ?_pow:
  1124                           	opt stack 0
  1125  000052                     pow@x:
  1126                           	opt stack 0
  1127                           
  1128                           ; 3 bytes @ 0x51
  1129  000052                     	ds	3
  1130  000055                     pow@y:
  1131                           	opt stack 0
  1132                           
  1133                           ; 3 bytes @ 0x54
  1134  000055                     	ds	3
  1135  000058                     ??_set_vision:
  1136  000058                     
  1137                           ; 0 bytes @ 0x57
  1138  000058                     	ds	2
  1139  00005A                     ??_main:
  1140                           
  1141                           ; 0 bytes @ 0x59
  1142  00005A                     	ds	1
  1143  00005B                     main@input:
  1144                           	opt stack 0
  1145                           
  1146                           ; 1 bytes @ 0x5A
  1147  00005B                     	ds	1
  1148                           tblptru	equ	0xFF8
  1149                           tblptrh	equ	0xFF7
  1150                           tblptrl	equ	0xFF6
  1151                           tablat	equ	0xFF5
  1152                           postinc0	equ	0xFEE
  1153                           wreg	equ	0xFE8
  1154                           postdec1	equ	0xFE5
  1155                           fsr1l	equ	0xFE1
  1156                           
  1157 ;;
  1158 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1159 ;;
  1160 ;; *************** function _main *****************
  1161 ;; Defined at:
  1162 ;;		line 87 in file "main.c"
  1163 ;; Parameters:    Size  Location     Type
  1164 ;;		None
  1165 ;; Auto vars:     Size  Location     Type
  1166 ;;  input           1   90[COMRAM] unsigned char 
  1167 ;; Return value:  Size  Location     Type
  1168 ;;                  2   52[None  ] int 
  1169 ;; Registers used:
  1170 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1171 ;; Tracked objects:
  1172 ;;		On entry : 0/0
  1173 ;;		On exit  : 0/0
  1174 ;;		Unchanged: 0/0
  1175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1177 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1178 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1179 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1180 ;;Total ram usage:        2 bytes
  1181 ;; Hardware stack levels required when called:    8
  1182 ;; This function calls:
  1183 ;;		_Setup
  1184 ;;		_caratula
  1185 ;;		_lcd_gotoxy
  1186 ;;		_lcd_putrs
  1187 ;;		_read_keyboard
  1188 ;;		_set_vision
  1189 ;; This function is called by:
  1190 ;;		Startup code after reset
  1191 ;; This function uses a non-reentrant model
  1192 ;;
  1193                           
  1194                           	psect	text0
  1195  0029E0                     __ptext0:
  1196                           	opt stack 0
  1197  0029E0                     _main:
  1198                           	opt stack 23
  1199                           
  1200                           ;main.c: 88: Setup();
  1201                           
  1202                           ; BSR set to: 15
  1203                           ;incstack = 0
  1204  0029E0  EC02  F017         	call	_Setup	;wreg free
  1205                           
  1206                           ;main.c: 89: caratula();
  1207  0029E4  EC27  F018         	call	_caratula	;wreg free
  1208  0029E8  D000               	goto	l4053
  1209  0029EA                     l4053:
  1210                           
  1211                           ;main.c: 94: set_vision();
  1212  0029EA  EC5F  F00A         	call	_set_vision	;wreg free
  1213                           
  1214                           ;main.c: 96: char input = read_keyboard();
  1215  0029EE  ECE2  F007         	call	_read_keyboard	;wreg free
  1216  0029F2  6E5B               	movwf	main@input,c
  1217                           
  1218                           ;main.c: 98: if (input == 16){
  1219  0029F4  0E10               	movlw	16
  1220  0029F6  185B               	xorwf	main@input,w,c
  1221  0029F8  A4D8               	btfss	status,2,c
  1222  0029FA  D7F7               	goto	l4053
  1223                           
  1224                           ;main.c: 99: lcd_gotoxy(1,1);
  1225  0029FC  0E01               	movlw	1
  1226  0029FE  6E05               	movwf	lcd_gotoxy@y,c
  1227  002A00  0E01               	movlw	1
  1228  002A02  ECA6  F017         	call	_lcd_gotoxy
  1229                           
  1230                           ;main.c: 100: lcd_putrs("                                ");
  1231  002A06  0E48               	movlw	low STR_1
  1232  002A08  6E09               	movwf	lcd_putrs@ptr,c
  1233  002A0A  0E0F               	movlw	high STR_1
  1234  002A0C  6E0A               	movwf	lcd_putrs@ptr+1,c
  1235  002A0E  EC8C  F016         	call	_lcd_putrs	;wreg free
  1236                           
  1237                           ;main.c: 101: lcd_gotoxy(1,1);
  1238  002A12  0E01               	movlw	1
  1239  002A14  6E05               	movwf	lcd_gotoxy@y,c
  1240  002A16  0E01               	movlw	1
  1241  002A18  ECA6  F017         	call	_lcd_gotoxy
  1242                           
  1243                           ;main.c: 102: lcd_putrs("null pointer");
  1244  002A1C  0E78               	movlw	low STR_2
  1245  002A1E  6E09               	movwf	lcd_putrs@ptr,c
  1246  002A20  0E0F               	movlw	high STR_2
  1247  002A22  6E0A               	movwf	lcd_putrs@ptr+1,c
  1248  002A24  EC8C  F016         	call	_lcd_putrs	;wreg free
  1249                           
  1250                           ;main.c: 103: lcd_gotoxy(1,2);
  1251  002A28  0E02               	movlw	2
  1252  002A2A  6E05               	movwf	lcd_gotoxy@y,c
  1253  002A2C  0E01               	movlw	1
  1254  002A2E  ECA6  F017         	call	_lcd_gotoxy
  1255                           
  1256                           ;main.c: 104: lcd_putrs("exception");
  1257  002A32  0EA4               	movlw	low STR_3
  1258  002A34  6E09               	movwf	lcd_putrs@ptr,c
  1259  002A36  0E0F               	movlw	high STR_3
  1260  002A38  6E0A               	movwf	lcd_putrs@ptr+1,c
  1261  002A3A  EC8C  F016         	call	_lcd_putrs	;wreg free
  1262                           
  1263                           ;main.c: 105: input = 0;
  1264  002A3E  0E00               	movlw	0
  1265  002A40  6E5B               	movwf	main@input,c
  1266                           
  1267                           ;main.c: 106: key = 0;
  1268  002A42  0E00               	movlw	0
  1269  002A44  6E5E               	movwf	_key,c
  1270                           
  1271                           ;main.c: 107: _delay((unsigned long)((98)*(8000000/4000.0)));
  1272  002A46  0EFF               	movlw	255
  1273  002A48  6E5A               	movwf	??_main& (0+255),c
  1274  002A4A  0E8A               	movlw	138
  1275  002A4C                     u4297:
  1276  002A4C  2EE8               	decfsz	wreg,f,c
  1277  002A4E  D7FE               	goto	u4297
  1278  002A50  2E5A               	decfsz	??_main& (0+255),f,c
  1279  002A52  D7FC               	goto	u4297
  1280  002A54  D000               	nop2	
  1281  002A56  D7C9               	goto	l4053
  1282                           
  1283                           ;main.c: 108: }
  1284                           ;main.c: 109: }
  1285                           ;main.c: 111: return 0;
  1286                           ;	Return value of _main is never used
  1287  002A58  EF00  F000         	goto	start
  1288  002A5C                     __end_of_main:
  1289                           	opt stack 0
  1290                           tblptru	equ	0xFF8
  1291                           tblptrh	equ	0xFF7
  1292                           tblptrl	equ	0xFF6
  1293                           tablat	equ	0xFF5
  1294                           postinc0	equ	0xFEE
  1295                           wreg	equ	0xFE8
  1296                           postdec1	equ	0xFE5
  1297                           fsr1l	equ	0xFE1
  1298                           status	equ	0xFD8
  1299                           
  1300 ;; *************** function _set_vision *****************
  1301 ;; Defined at:
  1302 ;;		line 47 in file "lcd_vision.c"
  1303 ;; Parameters:    Size  Location     Type
  1304 ;;		None
  1305 ;; Auto vars:     Size  Location     Type
  1306 ;;  digit           2   19[BANK0 ] short 
  1307 ;;  pass            2   17[BANK0 ] int 
  1308 ;;  input           1   21[BANK0 ] unsigned char 
  1309 ;; Return value:  Size  Location     Type
  1310 ;;		None               void
  1311 ;; Registers used:
  1312 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1313 ;; Tracked objects:
  1314 ;;		On entry : 0/0
  1315 ;;		On exit  : 0/0
  1316 ;;		Unchanged: 0/0
  1317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1319 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1320 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1321 ;;      Totals:         2      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1322 ;;Total ram usage:       13 bytes
  1323 ;; Hardware stack levels used:    1
  1324 ;; Hardware stack levels required when called:    7
  1325 ;; This function calls:
  1326 ;;		___awtoft
  1327 ;;		___ftadd
  1328 ;;		___ftmul
  1329 ;;		___fttol
  1330 ;;		___lbtoft
  1331 ;;		_checkPass
  1332 ;;		_clear
  1333 ;;		_clear_keyboard
  1334 ;;		_lcd_gotoxy
  1335 ;;		_lcd_putrs
  1336 ;;		_lcd_setcursor_vb
  1337 ;;		_pow
  1338 ;;		_read_keyboard
  1339 ;;		_twinkle
  1340 ;;		_write_Date
  1341 ;; This function is called by:
  1342 ;;		_main
  1343 ;; This function uses a non-reentrant model
  1344 ;;
  1345                           
  1346                           	psect	text1
  1347  0014BE                     __ptext1:
  1348                           	opt stack 0
  1349  0014BE                     _set_vision:
  1350                           	opt stack 23
  1351                           
  1352                           ;lcd_vision.c: 48: clear();
  1353                           
  1354                           ;incstack = 0
  1355  0014BE  ECE9  F017         	call	_clear	;wreg free
  1356                           
  1357                           ;lcd_vision.c: 49: write_Date();
  1358  0014C2  ECB1  F014         	call	_write_Date	;wreg free
  1359                           
  1360                           ;lcd_vision.c: 50: lcd_gotoxy(1,1);
  1361  0014C6  0E01               	movlw	1
  1362  0014C8  6E05               	movwf	lcd_gotoxy@y,c
  1363  0014CA  0E01               	movlw	1
  1364  0014CC  ECA6  F017         	call	_lcd_gotoxy
  1365                           
  1366                           ;lcd_vision.c: 52: switch (state_alarm){
  1367  0014D0  D0E4               	goto	l4047
  1368  0014D2                     l3989:
  1369  0014D2  0EBF               	movlw	low STR_18
  1370  0014D4  6E09               	movwf	lcd_putrs@ptr,c
  1371  0014D6  0E0F               	movlw	high STR_18
  1372  0014D8  6E0A               	movwf	lcd_putrs@ptr+1,c
  1373  0014DA  EC8C  F016         	call	_lcd_putrs	;wreg free
  1374                           
  1375                           ;lcd_vision.c: 54: break;
  1376  0014DE  0012               	return	
  1377  0014E0                     l3991:
  1378  0014E0  0EBB               	movlw	low STR_19
  1379  0014E2  6E09               	movwf	lcd_putrs@ptr,c
  1380  0014E4  0E0F               	movlw	high STR_19
  1381  0014E6  6E0A               	movwf	lcd_putrs@ptr+1,c
  1382  0014E8  EC8C  F016         	call	_lcd_putrs	;wreg free
  1383                           
  1384                           ;lcd_vision.c: 56: lcd_gotoxy(7,2);
  1385  0014EC  0E02               	movlw	2
  1386  0014EE  6E05               	movwf	lcd_gotoxy@y,c
  1387  0014F0  0E07               	movlw	7
  1388  0014F2  ECA6  F017         	call	_lcd_gotoxy
  1389                           
  1390                           ;lcd_vision.c: 57: lcd_putrs("pass:____");
  1391  0014F6  0E90               	movlw	low STR_20
  1392  0014F8  6E09               	movwf	lcd_putrs@ptr,c
  1393  0014FA  0E0F               	movlw	high STR_20
  1394  0014FC  6E0A               	movwf	lcd_putrs@ptr+1,c
  1395  0014FE  EC8C  F016         	call	_lcd_putrs	;wreg free
  1396                           
  1397                           ;lcd_vision.c: 58: short digit = 12;
  1398  001502  0E00               	movlw	0
  1399  001504  0100               	movlb	0	; () banked
  1400  001506  6FBC               	movwf	(set_vision@digit+1)& (0+255),b
  1401  001508  0E0C               	movlw	12
  1402  00150A  6FBB               	movwf	set_vision@digit& (0+255),b
  1403                           
  1404                           ; BSR set to: 0
  1405                           ;lcd_vision.c: 59: lcd_gotoxy(digit,2);
  1406  00150C  0E02               	movlw	2
  1407  00150E  6E05               	movwf	lcd_gotoxy@y,c
  1408  001510  0100               	movlb	0	; () banked
  1409  001512  51BB               	movf	set_vision@digit& (0+255),w,b
  1410  001514  ECA6  F017         	call	_lcd_gotoxy
  1411                           
  1412                           ;lcd_vision.c: 60: lcd_setcursor_vb(1,1);
  1413  001518  0E01               	movlw	1
  1414  00151A  6E05               	movwf	lcd_setcursor_vb@blink,c
  1415  00151C  0E01               	movlw	1
  1416  00151E  ECF4  F017         	call	_lcd_setcursor_vb
  1417                           
  1418                           ;lcd_vision.c: 62: char input = read_keyboard();
  1419  001522  ECE2  F007         	call	_read_keyboard	;wreg free
  1420  001526  0100               	movlb	0	; () banked
  1421  001528  6FBD               	movwf	set_vision@input& (0+255),b
  1422                           
  1423                           ; BSR set to: 0
  1424                           ;lcd_vision.c: 63: int pass = 0;
  1425  00152A  0E00               	movlw	0
  1426  00152C  0100               	movlb	0	; () banked
  1427  00152E  6FBA               	movwf	(set_vision@pass+1)& (0+255),b
  1428  001530  0E00               	movlw	0
  1429  001532  6FB9               	movwf	set_vision@pass& (0+255),b
  1430                           
  1431                           ;lcd_vision.c: 65: while(input != 16 && input != 11 && input !=12 && input!=13 && digit 
      +                          !=16){
  1432  001534  D08C               	goto	l4033
  1433  001536                     l4007:
  1434                           
  1435                           ; BSR set to: 0
  1436                           ;lcd_vision.c: 67: if(0<input && input<10){
  1437  001536  0100               	movlb	0	; () banked
  1438  001538  51BD               	movf	set_vision@input& (0+255),w,b
  1439  00153A  0100               	movlb	0	; () banked
  1440  00153C  B4D8               	btfsc	status,2,c
  1441  00153E  D06F               	goto	l4025
  1442                           
  1443                           ; BSR set to: 0
  1444  001540  0E0A               	movlw	10
  1445  001542  0100               	movlb	0	; () banked
  1446  001544  61BD               	cpfslt	set_vision@input& (0+255),b
  1447  001546  D06B               	goto	l4025
  1448                           
  1449                           ; BSR set to: 0
  1450                           ;lcd_vision.c: 69: pass = pass + input * pow(10, 15 - digit);
  1451  001548  C0BB  F058         	movff	set_vision@digit,??_set_vision
  1452  00154C  C0BC  F059         	movff	set_vision@digit+1,??_set_vision+1
  1453  001550  1E58               	comf	??_set_vision,f,c
  1454  001552  1E59               	comf	??_set_vision+1,f,c
  1455  001554  4A58               	infsnz	??_set_vision,f,c
  1456  001556  2A59               	incf	??_set_vision+1,f,c
  1457  001558  0E0F               	movlw	15
  1458  00155A  2458               	addwf	??_set_vision,w,c
  1459  00155C  6E09               	movwf	___awtoft@c,c
  1460  00155E  0E00               	movlw	0
  1461  001560  2059               	addwfc	??_set_vision+1,w,c
  1462  001562  6E0A               	movwf	___awtoft@c+1,c
  1463  001564  EC48  F017         	call	___awtoft	;wreg free
  1464  001568  C009  F0B3         	movff	?___awtoft,_set_vision$2709
  1465  00156C  C00A  F0B4         	movff	?___awtoft+1,_set_vision$2709+1
  1466  001570  C00B  F0B5         	movff	?___awtoft+2,_set_vision$2709+2
  1467                           
  1468                           ;lcd_vision.c: 69: pass = pass + input * pow(10, 15 - digit);
  1469  001574  C0B3  F055         	movff	_set_vision$2709,pow@y
  1470  001578  C0B4  F056         	movff	_set_vision$2709+1,pow@y+1
  1471  00157C  C0B5  F057         	movff	_set_vision$2709+2,pow@y+2
  1472  001580  0E00               	movlw	0
  1473  001582  6E52               	movwf	pow@x,c
  1474  001584  0E20               	movlw	32
  1475  001586  6E53               	movwf	pow@x+1,c
  1476  001588  0E41               	movlw	65
  1477  00158A  6E54               	movwf	pow@x+2,c
  1478  00158C  ECFA  F00D         	call	_pow	;wreg free
  1479  001590  C052  F0B6         	movff	?_pow,_set_vision$2710
  1480  001594  C053  F0B7         	movff	?_pow+1,_set_vision$2710+1
  1481  001598  C054  F0B8         	movff	?_pow+2,_set_vision$2710+2
  1482                           
  1483                           ;lcd_vision.c: 69: pass = pass + input * pow(10, 15 - digit);
  1484  00159C  C0B6  F010         	movff	_set_vision$2710,___ftmul@f2
  1485  0015A0  C0B7  F011         	movff	_set_vision$2710+1,___ftmul@f2+1
  1486  0015A4  C0B8  F012         	movff	_set_vision$2710+2,___ftmul@f2+2
  1487  0015A8  0100               	movlb	0	; () banked
  1488  0015AA  51BD               	movf	set_vision@input& (0+255),w,b
  1489  0015AC  EC93  F017         	call	___lbtoft
  1490  0015B0  C009  F00D         	movff	?___lbtoft,___ftmul@f1
  1491  0015B4  C00A  F00E         	movff	?___lbtoft+1,___ftmul@f1+1
  1492  0015B8  C00B  F00F         	movff	?___lbtoft+2,___ftmul@f1+2
  1493  0015BC  ECF5  F010         	call	___ftmul	;wreg free
  1494  0015C0  C00D  F01F         	movff	?___ftmul,___ftadd@f2
  1495  0015C4  C00E  F020         	movff	?___ftmul+1,___ftadd@f2+1
  1496  0015C8  C00F  F021         	movff	?___ftmul+2,___ftadd@f2+2
  1497  0015CC  C0B9  F009         	movff	set_vision@pass,___awtoft@c
  1498  0015D0  C0BA  F00A         	movff	set_vision@pass+1,___awtoft@c+1
  1499  0015D4  EC48  F017         	call	___awtoft	;wreg free
  1500  0015D8  C009  F01C         	movff	?___awtoft,___ftadd@f1
  1501  0015DC  C00A  F01D         	movff	?___awtoft+1,___ftadd@f1+1
  1502  0015E0  C00B  F01E         	movff	?___awtoft+2,___ftadd@f1+2
  1503  0015E4  EC4B  F00C         	call	___ftadd	;wreg free
  1504  0015E8  C01C  F028         	movff	?___ftadd,___fttol@f1
  1505  0015EC  C01D  F029         	movff	?___ftadd+1,___fttol@f1+1
  1506  0015F0  C01E  F02A         	movff	?___ftadd+2,___fttol@f1+2
  1507  0015F4  EC74  F010         	call	___fttol	;wreg free
  1508  0015F8  C028  F0B9         	movff	?___fttol,set_vision@pass
  1509  0015FC  C029  F0BA         	movff	?___fttol+1,set_vision@pass+1
  1510                           
  1511                           ;lcd_vision.c: 71: clear_keyboard();
  1512  001600  EC2B  F018         	call	_clear_keyboard	;wreg free
  1513                           
  1514                           ;lcd_vision.c: 72: digit++;
  1515  001604  0100               	movlb	0	; () banked
  1516  001606  4BBB               	infsnz	set_vision@digit& (0+255),f,b
  1517  001608  2BBC               	incf	(set_vision@digit+1)& (0+255),f,b
  1518                           
  1519                           ; BSR set to: 0
  1520                           ;lcd_vision.c: 73: lcd_gotoxy(digit, 2);
  1521  00160A  0E02               	movlw	2
  1522  00160C  6E05               	movwf	lcd_gotoxy@y,c
  1523  00160E  0100               	movlb	0	; () banked
  1524  001610  51BB               	movf	set_vision@digit& (0+255),w,b
  1525  001612  ECA6  F017         	call	_lcd_gotoxy
  1526                           
  1527                           ;lcd_vision.c: 74: input = 18;
  1528  001616  0E12               	movlw	18
  1529  001618  0100               	movlb	0	; () banked
  1530  00161A  6FBD               	movwf	set_vision@input& (0+255),b
  1531  00161C  D000               	goto	l4025
  1532  00161E                     l4025:
  1533                           
  1534                           ; BSR set to: 0
  1535                           ;lcd_vision.c: 75: }
  1536                           ;lcd_vision.c: 76: input = read_keyboard();
  1537  00161E  ECE2  F007         	call	_read_keyboard	;wreg free
  1538  001622  0100               	movlb	0	; () banked
  1539  001624  6FBD               	movwf	set_vision@input& (0+255),b
  1540                           
  1541                           ; BSR set to: 0
  1542                           ;lcd_vision.c: 78: if(digit == 16){
  1543  001626  0E10               	movlw	16
  1544  001628  0100               	movlb	0	; () banked
  1545  00162A  19BB               	xorwf	set_vision@digit& (0+255),w,b
  1546  00162C  0100               	movlb	0	; () banked
  1547  00162E  11BC               	iorwf	(set_vision@digit+1)& (0+255),w,b
  1548  001630  A4D8               	btfss	status,2,c
  1549  001632  D00D               	goto	l4033
  1550                           
  1551                           ; BSR set to: 0
  1552                           ;lcd_vision.c: 79: if(checkPass(pass)){
  1553  001634  C0B9  F001         	movff	set_vision@pass,checkPass@pass
  1554  001638  C0BA  F002         	movff	set_vision@pass+1,checkPass@pass+1
  1555  00163C  ECDB  F017         	call	_checkPass	;wreg free
  1556  001640  0900               	iorlw	0
  1557  001642  B4D8               	btfsc	status,2,c
  1558  001644  D004               	goto	l4033
  1559                           
  1560                           ;lcd_vision.c: 80: state_alarm = ACTIVE;
  1561  001646  0E00               	movlw	0
  1562  001648  0100               	movlb	0	; () banked
  1563  00164A  6FD7               	movwf	_state_alarm& (0+255),b
  1564                           
  1565                           ; BSR set to: 0
  1566                           
  1567                           ; BSR set to: 0
  1568  00164C  D000               	goto	l4033
  1569  00164E                     l4033:
  1570  00164E  0E10               	movlw	16
  1571  001650  0100               	movlb	0	; () banked
  1572  001652  19BD               	xorwf	set_vision@input& (0+255),w,b
  1573  001654  B4D8               	btfsc	status,2,c
  1574  001656  0012               	return	
  1575                           
  1576                           ; BSR set to: 0
  1577  001658  0E0B               	movlw	11
  1578  00165A  0100               	movlb	0	; () banked
  1579  00165C  19BD               	xorwf	set_vision@input& (0+255),w,b
  1580  00165E  B4D8               	btfsc	status,2,c
  1581  001660  0012               	return	
  1582                           
  1583                           ; BSR set to: 0
  1584  001662  0E0C               	movlw	12
  1585  001664  0100               	movlb	0	; () banked
  1586  001666  19BD               	xorwf	set_vision@input& (0+255),w,b
  1587  001668  B4D8               	btfsc	status,2,c
  1588  00166A  0012               	return	
  1589                           
  1590                           ; BSR set to: 0
  1591  00166C  0E0D               	movlw	13
  1592  00166E  0100               	movlb	0	; () banked
  1593  001670  19BD               	xorwf	set_vision@input& (0+255),w,b
  1594  001672  B4D8               	btfsc	status,2,c
  1595  001674  0012               	return	
  1596                           
  1597                           ; BSR set to: 0
  1598  001676  0E10               	movlw	16
  1599  001678  0100               	movlb	0	; () banked
  1600  00167A  19BB               	xorwf	set_vision@digit& (0+255),w,b
  1601  00167C  0100               	movlb	0	; () banked
  1602  00167E  11BC               	iorwf	(set_vision@digit+1)& (0+255),w,b
  1603  001680  B4D8               	btfsc	status,2,c
  1604  001682  0012               	return	
  1605  001684  D758               	goto	l4007
  1606                           
  1607                           ; BSR set to: 0
  1608                           ;lcd_vision.c: 82: }
  1609                           ;lcd_vision.c: 83: }
  1610                           ;lcd_vision.c: 84: }
  1611                           ;lcd_vision.c: 86: break;
  1612                           
  1613                           ; BSR set to: 0
  1614  001686  0012               	return	
  1615  001688                     l4043:
  1616                           
  1617                           ; BSR set to: 0
  1618  001688  0EAE               	movlw	low STR_21
  1619  00168A  6E09               	movwf	lcd_putrs@ptr,c
  1620  00168C  0E0F               	movlw	high STR_21
  1621  00168E  6E0A               	movwf	lcd_putrs@ptr+1,c
  1622  001690  EC8C  F016         	call	_lcd_putrs	;wreg free
  1623                           
  1624                           ;lcd_vision.c: 88: twinkle();
  1625  001694  ECA7  F015         	call	_twinkle	;wreg free
  1626                           
  1627                           ;lcd_vision.c: 89: }
  1628  001698  0012               	return	
  1629  00169A                     l4047:
  1630  00169A  0100               	movlb	0	; () banked
  1631  00169C  51D7               	movf	_state_alarm& (0+255),w,b
  1632                           
  1633                           ; Switch size 1, requested type "space"
  1634                           ; Number of cases is 2, Range of values is 0 to 1
  1635                           ; switch strategies available:
  1636                           ; Name         Instructions Cycles
  1637                           ; simple_byte            7     4 (average)
  1638                           ;	Chosen strategy is simple_byte
  1639  00169E  0A00               	xorlw	0	; case 0
  1640  0016A0  B4D8               	btfsc	status,2,c
  1641  0016A2  D717               	goto	l3989
  1642  0016A4  0A01               	xorlw	1	; case 1
  1643  0016A6  B4D8               	btfsc	status,2,c
  1644  0016A8  D71B               	goto	l3991
  1645  0016AA  D7EE               	goto	l4043
  1646                           
  1647                           ; BSR set to: 0
  1648  0016AC  0012               	return		;funcret
  1649  0016AE                     __end_of_set_vision:
  1650                           	opt stack 0
  1651                           tblptru	equ	0xFF8
  1652                           tblptrh	equ	0xFF7
  1653                           tblptrl	equ	0xFF6
  1654                           tablat	equ	0xFF5
  1655                           postinc0	equ	0xFEE
  1656                           wreg	equ	0xFE8
  1657                           postdec1	equ	0xFE5
  1658                           fsr1l	equ	0xFE1
  1659                           status	equ	0xFD8
  1660                           
  1661 ;; *************** function _write_Date *****************
  1662 ;; Defined at:
  1663 ;;		line 12 in file "lcd_vision.c"
  1664 ;; Parameters:    Size  Location     Type
  1665 ;;		None
  1666 ;; Auto vars:     Size  Location     Type
  1667 ;;		None
  1668 ;; Return value:  Size  Location     Type
  1669 ;;		None               void
  1670 ;; Registers used:
  1671 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1672 ;; Tracked objects:
  1673 ;;		On entry : 0/0
  1674 ;;		On exit  : 0/0
  1675 ;;		Unchanged: 0/0
  1676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1680 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1681 ;;Total ram usage:        0 bytes
  1682 ;; Hardware stack levels used:    1
  1683 ;; Hardware stack levels required when called:    5
  1684 ;; This function calls:
  1685 ;;		_lcd_gotoxy
  1686 ;;		_lcd_putrs
  1687 ;;		_sprintf
  1688 ;; This function is called by:
  1689 ;;		_set_vision
  1690 ;; This function uses a non-reentrant model
  1691 ;;
  1692                           
  1693                           	psect	text2
  1694  002962                     __ptext2:
  1695                           	opt stack 0
  1696  002962                     _write_Date:
  1697                           	opt stack 24
  1698                           
  1699                           ;lcd_vision.c: 13: lcd_gotoxy(9,1);
  1700                           
  1701                           ;incstack = 0
  1702  002962  0E01               	movlw	1
  1703  002964  6E05               	movwf	lcd_gotoxy@y,c
  1704  002966  0E09               	movlw	9
  1705  002968  ECA6  F017         	call	_lcd_gotoxy
  1706                           
  1707                           ;lcd_vision.c: 14: sprintf(buffer2,"%02u/%02u/%02u",dia,mes,anio);
  1708  00296C  0E8C               	movlw	low _buffer2
  1709  00296E  6E0D               	movwf	sprintf@sp,c
  1710  002970  0E00               	movlw	high _buffer2
  1711  002972  6E0E               	movwf	sprintf@sp+1,c
  1712  002974  0E69               	movlw	low STR_14
  1713  002976  6E0F               	movwf	sprintf@f,c
  1714  002978  0E0F               	movlw	high STR_14
  1715  00297A  6E10               	movwf	sprintf@f+1,c
  1716  00297C  C0CD  F011         	movff	_dia,?_sprintf+4
  1717  002980  C0CE  F012         	movff	_dia+1,?_sprintf+5
  1718  002984  C05C  F013         	movff	_mes,?_sprintf+6
  1719  002988  C05D  F014         	movff	_mes+1,?_sprintf+7
  1720  00298C  C0CB  F015         	movff	_anio,?_sprintf+8
  1721  002990  C0CC  F016         	movff	_anio+1,?_sprintf+9
  1722  002994  EC2D  F009         	call	_sprintf	;wreg free
  1723                           
  1724                           ;lcd_vision.c: 15: lcd_putrs(buffer2);
  1725  002998  0E8C               	movlw	low _buffer2
  1726  00299A  6E09               	movwf	lcd_putrs@ptr,c
  1727  00299C  0E00               	movlw	high _buffer2
  1728  00299E  6E0A               	movwf	lcd_putrs@ptr+1,c
  1729  0029A0  EC8C  F016         	call	_lcd_putrs	;wreg free
  1730                           
  1731                           ;lcd_vision.c: 16: sprintf(buffer2,"%02u:%02u",hora,minuto);
  1732  0029A4  0E8C               	movlw	low _buffer2
  1733  0029A6  6E0D               	movwf	sprintf@sp,c
  1734  0029A8  0E00               	movlw	high _buffer2
  1735  0029AA  6E0E               	movwf	sprintf@sp+1,c
  1736  0029AC  0E9A               	movlw	low STR_15
  1737  0029AE  6E0F               	movwf	sprintf@f,c
  1738  0029B0  0E0F               	movlw	high STR_15
  1739  0029B2  6E10               	movwf	sprintf@f+1,c
  1740  0029B4  C0D1  F011         	movff	_hora,?_sprintf+4
  1741  0029B8  C0D2  F012         	movff	_hora+1,?_sprintf+5
  1742  0029BC  C0D3  F013         	movff	_minuto,?_sprintf+6
  1743  0029C0  C0D4  F014         	movff	_minuto+1,?_sprintf+7
  1744  0029C4  EC2D  F009         	call	_sprintf	;wreg free
  1745                           
  1746                           ;lcd_vision.c: 17: lcd_gotoxy(1,2);
  1747  0029C8  0E02               	movlw	2
  1748  0029CA  6E05               	movwf	lcd_gotoxy@y,c
  1749  0029CC  0E01               	movlw	1
  1750  0029CE  ECA6  F017         	call	_lcd_gotoxy
  1751                           
  1752                           ;lcd_vision.c: 18: lcd_putrs(buffer2);
  1753  0029D2  0E8C               	movlw	low _buffer2
  1754  0029D4  6E09               	movwf	lcd_putrs@ptr,c
  1755  0029D6  0E00               	movlw	high _buffer2
  1756  0029D8  6E0A               	movwf	lcd_putrs@ptr+1,c
  1757  0029DA  EC8C  F016         	call	_lcd_putrs	;wreg free
  1758  0029DE  0012               	return		;funcret
  1759  0029E0                     __end_of_write_Date:
  1760                           	opt stack 0
  1761                           tblptru	equ	0xFF8
  1762                           tblptrh	equ	0xFF7
  1763                           tblptrl	equ	0xFF6
  1764                           tablat	equ	0xFF5
  1765                           postinc0	equ	0xFEE
  1766                           wreg	equ	0xFE8
  1767                           postdec1	equ	0xFE5
  1768                           fsr1l	equ	0xFE1
  1769                           status	equ	0xFD8
  1770                           
  1771 ;; *************** function _twinkle *****************
  1772 ;; Defined at:
  1773 ;;		line 30 in file "lcd_vision.c"
  1774 ;; Parameters:    Size  Location     Type
  1775 ;;		None
  1776 ;; Auto vars:     Size  Location     Type
  1777 ;;  input           1   36[COMRAM] unsigned char 
  1778 ;; Return value:  Size  Location     Type
  1779 ;;		None               void
  1780 ;; Registers used:
  1781 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1782 ;; Tracked objects:
  1783 ;;		On entry : 0/0
  1784 ;;		On exit  : 0/0
  1785 ;;		Unchanged: 0/0
  1786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1788 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1790 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1791 ;;Total ram usage:        1 bytes
  1792 ;; Hardware stack levels used:    1
  1793 ;; Hardware stack levels required when called:    6
  1794 ;; This function calls:
  1795 ;;		__delay_s
  1796 ;;		_lcd_gotoxy
  1797 ;;		_lcd_putrs
  1798 ;;		_read_keyboard
  1799 ;; This function is called by:
  1800 ;;		_set_vision
  1801 ;; This function uses a non-reentrant model
  1802 ;;
  1803                           
  1804                           	psect	text3
  1805  002B4E                     __ptext3:
  1806                           	opt stack 0
  1807  002B4E                     _twinkle:
  1808                           	opt stack 23
  1809                           
  1810                           ;lcd_vision.c: 31: char input = 1;
  1811                           
  1812                           ;incstack = 0
  1813  002B4E  0E01               	movlw	1
  1814  002B50  D024               	goto	L1
  1815  002B52                     l3893:
  1816                           
  1817                           ;lcd_vision.c: 34: _delay_s(500);
  1818  002B52  0E01               	movlw	1
  1819  002B54  6E0A               	movwf	__delay_s@millis+1,c
  1820  002B56  0EF4               	movlw	244
  1821  002B58  6E09               	movwf	__delay_s@millis,c
  1822  002B5A  EC35  F016         	call	__delay_s	;wreg free
  1823                           
  1824                           ;lcd_vision.c: 35: lcd_gotoxy(7,2);
  1825  002B5E  0E02               	movlw	2
  1826  002B60  6E05               	movwf	lcd_gotoxy@y,c
  1827  002B62  0E07               	movlw	7
  1828  002B64  ECA6  F017         	call	_lcd_gotoxy
  1829                           
  1830                           ;lcd_vision.c: 36: lcd_putrs("WARNING!!!");
  1831  002B68  0E85               	movlw	low STR_16
  1832  002B6A  6E09               	movwf	lcd_putrs@ptr,c
  1833  002B6C  0E0F               	movlw	high STR_16
  1834  002B6E  6E0A               	movwf	lcd_putrs@ptr+1,c
  1835  002B70  EC8C  F016         	call	_lcd_putrs	;wreg free
  1836                           
  1837                           ;lcd_vision.c: 37: _delay_s(500);
  1838  002B74  0E01               	movlw	1
  1839  002B76  6E0A               	movwf	__delay_s@millis+1,c
  1840  002B78  0EF4               	movlw	244
  1841  002B7A  6E09               	movwf	__delay_s@millis,c
  1842  002B7C  EC35  F016         	call	__delay_s	;wreg free
  1843                           
  1844                           ;lcd_vision.c: 38: lcd_gotoxy(7,2);
  1845  002B80  0E02               	movlw	2
  1846  002B82  6E05               	movwf	lcd_gotoxy@y,c
  1847  002B84  0E07               	movlw	7
  1848  002B86  ECA6  F017         	call	_lcd_gotoxy
  1849                           
  1850                           ;lcd_vision.c: 39: lcd_putrs("          ");
  1851  002B8A  0E5E               	movlw	low (STR_1+22)
  1852  002B8C  6E09               	movwf	lcd_putrs@ptr,c
  1853  002B8E  0E0F               	movlw	high (STR_1+22)
  1854  002B90  6E0A               	movwf	lcd_putrs@ptr+1,c
  1855  002B92  EC8C  F016         	call	_lcd_putrs	;wreg free
  1856                           
  1857                           ;lcd_vision.c: 40: input = read_keyboard();
  1858  002B96  ECE2  F007         	call	_read_keyboard	;wreg free
  1859  002B9A                     L1:
  1860  002B9A  6E25               	movwf	twinkle@input,c
  1861  002B9C  D000               	goto	l3905
  1862  002B9E                     l3905:
  1863  002B9E  0E10               	movlw	16
  1864  002BA0  1825               	xorwf	twinkle@input,w,c
  1865  002BA2  A4D8               	btfss	status,2,c
  1866  002BA4  D7D6               	goto	l3893
  1867                           
  1868                           ;lcd_vision.c: 41: }
  1869                           ;lcd_vision.c: 44: state_alarm = ACTIVE;
  1870  002BA6  0E00               	movlw	0
  1871  002BA8  0100               	movlb	0	; () banked
  1872  002BAA  6FD7               	movwf	_state_alarm& (0+255),b
  1873                           
  1874                           ; BSR set to: 0
  1875  002BAC  0012               	return		;funcret
  1876  002BAE                     __end_of_twinkle:
  1877                           	opt stack 0
  1878                           tblptru	equ	0xFF8
  1879                           tblptrh	equ	0xFF7
  1880                           tblptrl	equ	0xFF6
  1881                           tablat	equ	0xFF5
  1882                           postinc0	equ	0xFEE
  1883                           wreg	equ	0xFE8
  1884                           postdec1	equ	0xFE5
  1885                           fsr1l	equ	0xFE1
  1886                           status	equ	0xFD8
  1887                           
  1888 ;; *************** function _read_keyboard *****************
  1889 ;; Defined at:
  1890 ;;		line 8 in file "keyboard.c"
  1891 ;; Parameters:    Size  Location     Type
  1892 ;;		None
  1893 ;; Auto vars:     Size  Location     Type
  1894 ;;		None
  1895 ;; Return value:  Size  Location     Type
  1896 ;;                  1    wreg      unsigned char 
  1897 ;; Registers used:
  1898 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1899 ;; Tracked objects:
  1900 ;;		On entry : 0/0
  1901 ;;		On exit  : 0/0
  1902 ;;		Unchanged: 0/0
  1903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1906 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1907 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1908 ;;Total ram usage:        1 bytes
  1909 ;; Hardware stack levels used:    1
  1910 ;; Hardware stack levels required when called:    5
  1911 ;; This function calls:
  1912 ;;		_lcd_putrs
  1913 ;;		_sprintf
  1914 ;; This function is called by:
  1915 ;;		_main
  1916 ;;		_twinkle
  1917 ;;		_set_vision
  1918 ;; This function uses a non-reentrant model
  1919 ;;
  1920                           
  1921                           	psect	text4
  1922  000FC4                     __ptext4:
  1923                           	opt stack 0
  1924  000FC4                     _read_keyboard:
  1925                           	opt stack 23
  1926                           
  1927                           ;keyboard.c: 9: LATAbits.LATA0=1;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=0;
  1928                           
  1929                           ; BSR set to: 0
  1930                           ;incstack = 0
  1931  000FC4  8089               	bsf	3977,0,c	;volatile
  1932  000FC6  9289               	bcf	3977,1,c	;volatile
  1933  000FC8  9489               	bcf	3977,2,c	;volatile
  1934  000FCA  9689               	bcf	3977,3,c	;volatile
  1935                           
  1936                           ;keyboard.c: 10: {
  1937                           ;keyboard.c: 11: if (PORTAbits.RA5==1){key=1;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA5==1){};}
  1938  000FCC  AA80               	btfss	3968,5,c	;volatile
  1939  000FCE  D018               	goto	l204
  1940  000FD0  0E01               	movlw	1
  1941  000FD2  6E5E               	movwf	_key,c
  1942  000FD4  0E8C               	movlw	low _buffer2
  1943  000FD6  6E0D               	movwf	sprintf@sp,c
  1944  000FD8  0E00               	movlw	high _buffer2
  1945  000FDA  6E0E               	movwf	sprintf@sp+1,c
  1946  000FDC  0EB6               	movlw	low STR_4
  1947  000FDE  6E0F               	movwf	sprintf@f,c
  1948  000FE0  0E0F               	movlw	high STR_4
  1949  000FE2  6E10               	movwf	sprintf@f+1,c
  1950  000FE4  C05E  F011         	movff	_key,?_sprintf+4
  1951  000FE8  6A12               	clrf	?_sprintf+5,c
  1952  000FEA  EC2D  F009         	call	_sprintf	;wreg free
  1953  000FEE  0E8C               	movlw	low _buffer2
  1954  000FF0  6E09               	movwf	lcd_putrs@ptr,c
  1955  000FF2  0E00               	movlw	high _buffer2
  1956  000FF4  6E0A               	movwf	lcd_putrs@ptr+1,c
  1957  000FF6  EC8C  F016         	call	_lcd_putrs	;wreg free
  1958  000FFA  D000               	goto	l205
  1959  000FFC                     l205:
  1960  000FFC  BA80               	btfsc	3968,5,c	;volatile
  1961  000FFE  D7FE               	goto	l205
  1962  001000                     l204:
  1963                           
  1964                           ;keyboard.c: 12: if (PORTAbits.RA7==1){key=2;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  1965  001000  AE80               	btfss	3968,7,c	;volatile
  1966  001002  D018               	goto	l208
  1967  001004  0E02               	movlw	2
  1968  001006  6E5E               	movwf	_key,c
  1969  001008  0E8C               	movlw	low _buffer2
  1970  00100A  6E0D               	movwf	sprintf@sp,c
  1971  00100C  0E00               	movlw	high _buffer2
  1972  00100E  6E0E               	movwf	sprintf@sp+1,c
  1973  001010  0EB6               	movlw	low STR_4
  1974  001012  6E0F               	movwf	sprintf@f,c
  1975  001014  0E0F               	movlw	high STR_4
  1976  001016  6E10               	movwf	sprintf@f+1,c
  1977  001018  C05E  F011         	movff	_key,?_sprintf+4
  1978  00101C  6A12               	clrf	?_sprintf+5,c
  1979  00101E  EC2D  F009         	call	_sprintf	;wreg free
  1980  001022  0E8C               	movlw	low _buffer2
  1981  001024  6E09               	movwf	lcd_putrs@ptr,c
  1982  001026  0E00               	movlw	high _buffer2
  1983  001028  6E0A               	movwf	lcd_putrs@ptr+1,c
  1984  00102A  EC8C  F016         	call	_lcd_putrs	;wreg free
  1985  00102E  D000               	goto	l209
  1986  001030                     l209:
  1987  001030  BE80               	btfsc	3968,7,c	;volatile
  1988  001032  D7FE               	goto	l209
  1989  001034                     l208:
  1990                           
  1991                           ;keyboard.c: 13: if (PORTAbits.RA6==1){key=3;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA6==1){};}
  1992  001034  AC80               	btfss	3968,6,c	;volatile
  1993  001036  D018               	goto	l212
  1994  001038  0E03               	movlw	3
  1995  00103A  6E5E               	movwf	_key,c
  1996  00103C  0E8C               	movlw	low _buffer2
  1997  00103E  6E0D               	movwf	sprintf@sp,c
  1998  001040  0E00               	movlw	high _buffer2
  1999  001042  6E0E               	movwf	sprintf@sp+1,c
  2000  001044  0EB6               	movlw	low STR_4
  2001  001046  6E0F               	movwf	sprintf@f,c
  2002  001048  0E0F               	movlw	high STR_4
  2003  00104A  6E10               	movwf	sprintf@f+1,c
  2004  00104C  C05E  F011         	movff	_key,?_sprintf+4
  2005  001050  6A12               	clrf	?_sprintf+5,c
  2006  001052  EC2D  F009         	call	_sprintf	;wreg free
  2007  001056  0E8C               	movlw	low _buffer2
  2008  001058  6E09               	movwf	lcd_putrs@ptr,c
  2009  00105A  0E00               	movlw	high _buffer2
  2010  00105C  6E0A               	movwf	lcd_putrs@ptr+1,c
  2011  00105E  EC8C  F016         	call	_lcd_putrs	;wreg free
  2012  001062  D000               	goto	l213
  2013  001064                     l213:
  2014  001064  BC80               	btfsc	3968,6,c	;volatile
  2015  001066  D7FE               	goto	l213
  2016  001068                     l212:
  2017                           
  2018                           ;keyboard.c: 14: if (PORTCbits.RC2==1){key=11; while(PORTCbits.RC2==1){};}
  2019  001068  A482               	btfss	3970,2,c	;volatile
  2020  00106A  D005               	goto	l216
  2021  00106C  0E0B               	movlw	11
  2022  00106E  6E5E               	movwf	_key,c
  2023  001070  D000               	goto	l217
  2024  001072                     l217:
  2025  001072  B482               	btfsc	3970,2,c	;volatile
  2026  001074  D7FE               	goto	l217
  2027  001076                     l216:
  2028                           
  2029                           ;keyboard.c: 15: }
  2030                           ;keyboard.c: 16: LATAbits.LATA0=0;LATAbits.LATA1=1;LATAbits.LATA2=0;LATAbits.LATA3=0;
  2031  001076  9089               	bcf	3977,0,c	;volatile
  2032  001078  8289               	bsf	3977,1,c	;volatile
  2033  00107A  9489               	bcf	3977,2,c	;volatile
  2034  00107C  9689               	bcf	3977,3,c	;volatile
  2035                           
  2036                           ;keyboard.c: 17: {
  2037                           ;keyboard.c: 18: if (PORTAbits.RA5==1){key=4;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA5==1){};}
  2038  00107E  AA80               	btfss	3968,5,c	;volatile
  2039  001080  D018               	goto	l220
  2040  001082  0E04               	movlw	4
  2041  001084  6E5E               	movwf	_key,c
  2042  001086  0E8C               	movlw	low _buffer2
  2043  001088  6E0D               	movwf	sprintf@sp,c
  2044  00108A  0E00               	movlw	high _buffer2
  2045  00108C  6E0E               	movwf	sprintf@sp+1,c
  2046  00108E  0EB6               	movlw	low STR_4
  2047  001090  6E0F               	movwf	sprintf@f,c
  2048  001092  0E0F               	movlw	high STR_4
  2049  001094  6E10               	movwf	sprintf@f+1,c
  2050  001096  C05E  F011         	movff	_key,?_sprintf+4
  2051  00109A  6A12               	clrf	?_sprintf+5,c
  2052  00109C  EC2D  F009         	call	_sprintf	;wreg free
  2053  0010A0  0E8C               	movlw	low _buffer2
  2054  0010A2  6E09               	movwf	lcd_putrs@ptr,c
  2055  0010A4  0E00               	movlw	high _buffer2
  2056  0010A6  6E0A               	movwf	lcd_putrs@ptr+1,c
  2057  0010A8  EC8C  F016         	call	_lcd_putrs	;wreg free
  2058  0010AC  D000               	goto	l221
  2059  0010AE                     l221:
  2060  0010AE  BA80               	btfsc	3968,5,c	;volatile
  2061  0010B0  D7FE               	goto	l221
  2062  0010B2                     l220:
  2063                           
  2064                           ;keyboard.c: 19: if (PORTAbits.RA7==1){key=5;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  2065  0010B2  AE80               	btfss	3968,7,c	;volatile
  2066  0010B4  D018               	goto	l224
  2067  0010B6  0E05               	movlw	5
  2068  0010B8  6E5E               	movwf	_key,c
  2069  0010BA  0E8C               	movlw	low _buffer2
  2070  0010BC  6E0D               	movwf	sprintf@sp,c
  2071  0010BE  0E00               	movlw	high _buffer2
  2072  0010C0  6E0E               	movwf	sprintf@sp+1,c
  2073  0010C2  0EB6               	movlw	low STR_4
  2074  0010C4  6E0F               	movwf	sprintf@f,c
  2075  0010C6  0E0F               	movlw	high STR_4
  2076  0010C8  6E10               	movwf	sprintf@f+1,c
  2077  0010CA  C05E  F011         	movff	_key,?_sprintf+4
  2078  0010CE  6A12               	clrf	?_sprintf+5,c
  2079  0010D0  EC2D  F009         	call	_sprintf	;wreg free
  2080  0010D4  0E8C               	movlw	low _buffer2
  2081  0010D6  6E09               	movwf	lcd_putrs@ptr,c
  2082  0010D8  0E00               	movlw	high _buffer2
  2083  0010DA  6E0A               	movwf	lcd_putrs@ptr+1,c
  2084  0010DC  EC8C  F016         	call	_lcd_putrs	;wreg free
  2085  0010E0  D000               	goto	l225
  2086  0010E2                     l225:
  2087  0010E2  BE80               	btfsc	3968,7,c	;volatile
  2088  0010E4  D7FE               	goto	l225
  2089  0010E6                     l224:
  2090                           
  2091                           ;keyboard.c: 20: if (PORTAbits.RA6==1){key=6;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA6==1){};}
  2092  0010E6  AC80               	btfss	3968,6,c	;volatile
  2093  0010E8  D018               	goto	l228
  2094  0010EA  0E06               	movlw	6
  2095  0010EC  6E5E               	movwf	_key,c
  2096  0010EE  0E8C               	movlw	low _buffer2
  2097  0010F0  6E0D               	movwf	sprintf@sp,c
  2098  0010F2  0E00               	movlw	high _buffer2
  2099  0010F4  6E0E               	movwf	sprintf@sp+1,c
  2100  0010F6  0EB6               	movlw	low STR_4
  2101  0010F8  6E0F               	movwf	sprintf@f,c
  2102  0010FA  0E0F               	movlw	high STR_4
  2103  0010FC  6E10               	movwf	sprintf@f+1,c
  2104  0010FE  C05E  F011         	movff	_key,?_sprintf+4
  2105  001102  6A12               	clrf	?_sprintf+5,c
  2106  001104  EC2D  F009         	call	_sprintf	;wreg free
  2107  001108  0E8C               	movlw	low _buffer2
  2108  00110A  6E09               	movwf	lcd_putrs@ptr,c
  2109  00110C  0E00               	movlw	high _buffer2
  2110  00110E  6E0A               	movwf	lcd_putrs@ptr+1,c
  2111  001110  EC8C  F016         	call	_lcd_putrs	;wreg free
  2112  001114  D000               	goto	l229
  2113  001116                     l229:
  2114  001116  BC80               	btfsc	3968,6,c	;volatile
  2115  001118  D7FE               	goto	l229
  2116  00111A                     l228:
  2117                           
  2118                           ;keyboard.c: 21: if (PORTCbits.RC2==1){key=12; while(PORTCbits.RC2==1){};}
  2119  00111A  A482               	btfss	3970,2,c	;volatile
  2120  00111C  D005               	goto	l232
  2121  00111E  0E0C               	movlw	12
  2122  001120  6E5E               	movwf	_key,c
  2123  001122  D000               	goto	l233
  2124  001124                     l233:
  2125  001124  B482               	btfsc	3970,2,c	;volatile
  2126  001126  D7FE               	goto	l233
  2127  001128                     l232:
  2128                           
  2129                           ;keyboard.c: 22: }
  2130                           ;keyboard.c: 23: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=1;LATAbits.LATA3=0;
  2131  001128  9089               	bcf	3977,0,c	;volatile
  2132  00112A  9289               	bcf	3977,1,c	;volatile
  2133  00112C  8489               	bsf	3977,2,c	;volatile
  2134  00112E  9689               	bcf	3977,3,c	;volatile
  2135                           
  2136                           ;keyboard.c: 24: {
  2137                           ;keyboard.c: 25: if (PORTAbits.RA5==1){key=7;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA5==1){};}
  2138  001130  AA80               	btfss	3968,5,c	;volatile
  2139  001132  D018               	goto	l236
  2140  001134  0E07               	movlw	7
  2141  001136  6E5E               	movwf	_key,c
  2142  001138  0E8C               	movlw	low _buffer2
  2143  00113A  6E0D               	movwf	sprintf@sp,c
  2144  00113C  0E00               	movlw	high _buffer2
  2145  00113E  6E0E               	movwf	sprintf@sp+1,c
  2146  001140  0EB6               	movlw	low STR_4
  2147  001142  6E0F               	movwf	sprintf@f,c
  2148  001144  0E0F               	movlw	high STR_4
  2149  001146  6E10               	movwf	sprintf@f+1,c
  2150  001148  C05E  F011         	movff	_key,?_sprintf+4
  2151  00114C  6A12               	clrf	?_sprintf+5,c
  2152  00114E  EC2D  F009         	call	_sprintf	;wreg free
  2153  001152  0E8C               	movlw	low _buffer2
  2154  001154  6E09               	movwf	lcd_putrs@ptr,c
  2155  001156  0E00               	movlw	high _buffer2
  2156  001158  6E0A               	movwf	lcd_putrs@ptr+1,c
  2157  00115A  EC8C  F016         	call	_lcd_putrs	;wreg free
  2158  00115E  D000               	goto	l237
  2159  001160                     l237:
  2160  001160  BA80               	btfsc	3968,5,c	;volatile
  2161  001162  D7FE               	goto	l237
  2162  001164                     l236:
  2163                           
  2164                           ;keyboard.c: 26: if (PORTAbits.RA7==1){key=8;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  2165  001164  AE80               	btfss	3968,7,c	;volatile
  2166  001166  D018               	goto	l240
  2167  001168  0E08               	movlw	8
  2168  00116A  6E5E               	movwf	_key,c
  2169  00116C  0E8C               	movlw	low _buffer2
  2170  00116E  6E0D               	movwf	sprintf@sp,c
  2171  001170  0E00               	movlw	high _buffer2
  2172  001172  6E0E               	movwf	sprintf@sp+1,c
  2173  001174  0EB6               	movlw	low STR_4
  2174  001176  6E0F               	movwf	sprintf@f,c
  2175  001178  0E0F               	movlw	high STR_4
  2176  00117A  6E10               	movwf	sprintf@f+1,c
  2177  00117C  C05E  F011         	movff	_key,?_sprintf+4
  2178  001180  6A12               	clrf	?_sprintf+5,c
  2179  001182  EC2D  F009         	call	_sprintf	;wreg free
  2180  001186  0E8C               	movlw	low _buffer2
  2181  001188  6E09               	movwf	lcd_putrs@ptr,c
  2182  00118A  0E00               	movlw	high _buffer2
  2183  00118C  6E0A               	movwf	lcd_putrs@ptr+1,c
  2184  00118E  EC8C  F016         	call	_lcd_putrs	;wreg free
  2185  001192  D000               	goto	l241
  2186  001194                     l241:
  2187  001194  BE80               	btfsc	3968,7,c	;volatile
  2188  001196  D7FE               	goto	l241
  2189  001198                     l240:
  2190                           
  2191                           ;keyboard.c: 27: if (PORTAbits.RA6==1){key=9;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA6==1){};}
  2192  001198  AC80               	btfss	3968,6,c	;volatile
  2193  00119A  D018               	goto	l244
  2194  00119C  0E09               	movlw	9
  2195  00119E  6E5E               	movwf	_key,c
  2196  0011A0  0E8C               	movlw	low _buffer2
  2197  0011A2  6E0D               	movwf	sprintf@sp,c
  2198  0011A4  0E00               	movlw	high _buffer2
  2199  0011A6  6E0E               	movwf	sprintf@sp+1,c
  2200  0011A8  0EB6               	movlw	low STR_4
  2201  0011AA  6E0F               	movwf	sprintf@f,c
  2202  0011AC  0E0F               	movlw	high STR_4
  2203  0011AE  6E10               	movwf	sprintf@f+1,c
  2204  0011B0  C05E  F011         	movff	_key,?_sprintf+4
  2205  0011B4  6A12               	clrf	?_sprintf+5,c
  2206  0011B6  EC2D  F009         	call	_sprintf	;wreg free
  2207  0011BA  0E8C               	movlw	low _buffer2
  2208  0011BC  6E09               	movwf	lcd_putrs@ptr,c
  2209  0011BE  0E00               	movlw	high _buffer2
  2210  0011C0  6E0A               	movwf	lcd_putrs@ptr+1,c
  2211  0011C2  EC8C  F016         	call	_lcd_putrs	;wreg free
  2212  0011C6  D000               	goto	l245
  2213  0011C8                     l245:
  2214  0011C8  BC80               	btfsc	3968,6,c	;volatile
  2215  0011CA  D7FE               	goto	l245
  2216  0011CC                     l244:
  2217                           
  2218                           ;keyboard.c: 28: if (PORTCbits.RC2==1){key=13; while(PORTCbits.RC2==1){};}
  2219  0011CC  A482               	btfss	3970,2,c	;volatile
  2220  0011CE  D005               	goto	l248
  2221  0011D0  0E0D               	movlw	13
  2222  0011D2  6E5E               	movwf	_key,c
  2223  0011D4  D000               	goto	l249
  2224  0011D6                     l249:
  2225  0011D6  B482               	btfsc	3970,2,c	;volatile
  2226  0011D8  D7FE               	goto	l249
  2227  0011DA                     l248:
  2228                           
  2229                           ;keyboard.c: 29: }
  2230                           ;keyboard.c: 30: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=1;
  2231  0011DA  9089               	bcf	3977,0,c	;volatile
  2232  0011DC  9289               	bcf	3977,1,c	;volatile
  2233  0011DE  9489               	bcf	3977,2,c	;volatile
  2234  0011E0  8689               	bsf	3977,3,c	;volatile
  2235                           
  2236                           ;keyboard.c: 31: {
  2237                           ;keyboard.c: 32: if (PORTAbits.RA5==1){key=14; while(PORTAbits.RA5==1){};}
  2238  0011E2  AA80               	btfss	3968,5,c	;volatile
  2239  0011E4  D005               	goto	l252
  2240  0011E6  0E0E               	movlw	14
  2241  0011E8  6E5E               	movwf	_key,c
  2242  0011EA  D000               	goto	l253
  2243  0011EC                     l253:
  2244  0011EC  BA80               	btfsc	3968,5,c	;volatile
  2245  0011EE  D7FE               	goto	l253
  2246  0011F0                     l252:
  2247                           
  2248                           ;keyboard.c: 33: if (PORTAbits.RA7==1){key=0;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  2249  0011F0  AE80               	btfss	3968,7,c	;volatile
  2250  0011F2  D018               	goto	l256
  2251  0011F4  0E00               	movlw	0
  2252  0011F6  6E5E               	movwf	_key,c
  2253  0011F8  0E8C               	movlw	low _buffer2
  2254  0011FA  6E0D               	movwf	sprintf@sp,c
  2255  0011FC  0E00               	movlw	high _buffer2
  2256  0011FE  6E0E               	movwf	sprintf@sp+1,c
  2257  001200  0EB6               	movlw	low STR_4
  2258  001202  6E0F               	movwf	sprintf@f,c
  2259  001204  0E0F               	movlw	high STR_4
  2260  001206  6E10               	movwf	sprintf@f+1,c
  2261  001208  C05E  F011         	movff	_key,?_sprintf+4
  2262  00120C  6A12               	clrf	?_sprintf+5,c
  2263  00120E  EC2D  F009         	call	_sprintf	;wreg free
  2264  001212  0E8C               	movlw	low _buffer2
  2265  001214  6E09               	movwf	lcd_putrs@ptr,c
  2266  001216  0E00               	movlw	high _buffer2
  2267  001218  6E0A               	movwf	lcd_putrs@ptr+1,c
  2268  00121A  EC8C  F016         	call	_lcd_putrs	;wreg free
  2269  00121E  D000               	goto	l257
  2270  001220                     l257:
  2271  001220  BE80               	btfsc	3968,7,c	;volatile
  2272  001222  D7FE               	goto	l257
  2273  001224                     l256:
  2274                           
  2275                           ;keyboard.c: 34: if (PORTAbits.RA6==1){key=15; while(PORTAbits.RA6==1){};}
  2276  001224  AC80               	btfss	3968,6,c	;volatile
  2277  001226  D005               	goto	l260
  2278  001228  0E0F               	movlw	15
  2279  00122A  6E5E               	movwf	_key,c
  2280  00122C  D000               	goto	l261
  2281  00122E                     l261:
  2282  00122E  BC80               	btfsc	3968,6,c	;volatile
  2283  001230  D7FE               	goto	l261
  2284  001232                     l260:
  2285                           
  2286                           ;keyboard.c: 35: if (PORTCbits.RC2==1){key=16; while(PORTCbits.RC2==1){};}
  2287  001232  A482               	btfss	3970,2,c	;volatile
  2288  001234  D007               	goto	l3563
  2289  001236  0E10               	movlw	16
  2290  001238  6E5E               	movwf	_key,c
  2291  00123A  D000               	goto	l265
  2292  00123C                     l265:
  2293  00123C  A482               	btfss	3970,2,c	;volatile
  2294  00123E  D002               	goto	l3563
  2295  001240  D7FD               	goto	l265
  2296  001242  D000               	goto	l3563
  2297  001244                     l3563:
  2298                           
  2299                           ;keyboard.c: 36: }
  2300                           ;keyboard.c: 37: _delay((unsigned long)((98)*(8000000/4000.0)));
  2301  001244  0EFF               	movlw	255
  2302  001246  6E24               	movwf	??_read_keyboard& (0+255),c
  2303  001248  0E8A               	movlw	138
  2304  00124A                     u4307:
  2305  00124A  2EE8               	decfsz	wreg,f,c
  2306  00124C  D7FE               	goto	u4307
  2307  00124E  2E24               	decfsz	??_read_keyboard& (0+255),f,c
  2308  001250  D7FC               	goto	u4307
  2309  001252  D000               	nop2	
  2310                           
  2311                           ;keyboard.c: 40: return key;
  2312  001254  505E               	movf	_key,w,c
  2313  001256  0012               	return	
  2314  001258  0012               	return		;funcret
  2315  00125A                     __end_of_read_keyboard:
  2316                           	opt stack 0
  2317                           tblptru	equ	0xFF8
  2318                           tblptrh	equ	0xFF7
  2319                           tblptrl	equ	0xFF6
  2320                           tablat	equ	0xFF5
  2321                           postinc0	equ	0xFEE
  2322                           wreg	equ	0xFE8
  2323                           postdec1	equ	0xFE5
  2324                           fsr1l	equ	0xFE1
  2325                           status	equ	0xFD8
  2326                           
  2327 ;; *************** function _sprintf *****************
  2328 ;; Defined at:
  2329 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2330 ;; Parameters:    Size  Location     Type
  2331 ;;  sp              2   12[COMRAM] PTR unsigned char 
  2332 ;;		 -> buffer2(20), 
  2333 ;;  f               2   14[COMRAM] PTR const unsigned char 
  2334 ;;		 -> STR_15(10), STR_14(15), STR_13(5), STR_12(5), 
  2335 ;;		 -> STR_11(5), STR_10(5), STR_9(5), STR_8(5), 
  2336 ;;		 -> STR_7(5), STR_6(5), STR_5(5), STR_4(5), 
  2337 ;; Auto vars:     Size  Location     Type
  2338 ;;  tmpval          4    0        struct .
  2339 ;;  cp              3    0        PTR const unsigned char 
  2340 ;;  width           2   32[COMRAM] int 
  2341 ;;  val             2   29[COMRAM] unsigned int 
  2342 ;;  ap              2   26[COMRAM] PTR void [1]
  2343 ;;		 -> ?_sprintf(2), 
  2344 ;;  len             2    0        unsigned int 
  2345 ;;  c               1   34[COMRAM] char 
  2346 ;;  prec            1   31[COMRAM] char 
  2347 ;;  flag            1   28[COMRAM] unsigned char 
  2348 ;; Return value:  Size  Location     Type
  2349 ;;                  2   12[COMRAM] int 
  2350 ;; Registers used:
  2351 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2352 ;; Tracked objects:
  2353 ;;		On entry : 0/0
  2354 ;;		On exit  : 0/0
  2355 ;;		Unchanged: 0/0
  2356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2357 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2358 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2359 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2360 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2361 ;;Total ram usage:       23 bytes
  2362 ;; Hardware stack levels used:    1
  2363 ;; Hardware stack levels required when called:    1
  2364 ;; This function calls:
  2365 ;;		___lwdiv
  2366 ;;		___lwmod
  2367 ;;		___wmul
  2368 ;;		_isdigit
  2369 ;; This function is called by:
  2370 ;;		_read_keyboard
  2371 ;;		_write_Date
  2372 ;; This function uses a non-reentrant model
  2373 ;;
  2374                           
  2375                           	psect	text5
  2376  00125A                     __ptext5:
  2377                           	opt stack 0
  2378  00125A                     _sprintf:
  2379                           	opt stack 27
  2380                           
  2381                           ;doprnt.c: 494: va_list ap;
  2382                           ;doprnt.c: 499: signed char c;
  2383                           ;doprnt.c: 501: int width;
  2384                           ;doprnt.c: 506: signed char prec;
  2385                           ;doprnt.c: 508: unsigned char flag;
  2386                           ;doprnt.c: 523: union {
  2387                           ;doprnt.c: 524: unsigned long vd;
  2388                           ;doprnt.c: 525: double integ;
  2389                           ;doprnt.c: 526: } tmpval;
  2390                           ;doprnt.c: 528: unsigned int val;
  2391                           ;doprnt.c: 529: unsigned len;
  2392                           ;doprnt.c: 530: const char * cp;
  2393                           ;doprnt.c: 533: *ap = __va_start();
  2394                           
  2395                           ;incstack = 0
  2396  00125A  0E11               	movlw	low (?_sprintf+4)
  2397  00125C  6E1B               	movwf	sprintf@ap,c
  2398  00125E  0E00               	movlw	high (?_sprintf+4)
  2399  001260  6E1C               	movwf	sprintf@ap+1,c
  2400                           
  2401                           ;doprnt.c: 536: while(c = *f++) {
  2402  001262  D117               	goto	l3293
  2403  001264                     l3211:
  2404                           
  2405                           ;doprnt.c: 538: if(c != '%')
  2406  001264  0E25               	movlw	37
  2407  001266  1823               	xorwf	sprintf@c,w,c
  2408  001268  B4D8               	btfsc	status,2,c
  2409  00126A  D009               	goto	l3217
  2410                           
  2411                           ;doprnt.c: 540: {
  2412                           ;doprnt.c: 541: ((*sp++ = (c)));
  2413  00126C  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2414  001270  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2415  001274  C023  FFDF         	movff	sprintf@c,indf2
  2416  001278  4A0D               	infsnz	sprintf@sp,f,c
  2417  00127A  2A0E               	incf	sprintf@sp+1,f,c
  2418                           
  2419                           ;doprnt.c: 542: continue;
  2420  00127C  D10A               	goto	l3293
  2421  00127E                     l3217:
  2422                           
  2423                           ;doprnt.c: 543: }
  2424                           ;doprnt.c: 546: width = 0;
  2425  00127E  0E00               	movlw	0
  2426  001280  6E22               	movwf	sprintf@width+1,c
  2427  001282  0E00               	movlw	0
  2428  001284  6E21               	movwf	sprintf@width,c
  2429                           
  2430                           ;doprnt.c: 548: flag = 0;
  2431  001286  0E00               	movlw	0
  2432  001288  6E1D               	movwf	sprintf@flag,c
  2433                           
  2434                           ;doprnt.c: 551: switch(*f) {
  2435                           
  2436                           ;doprnt.c: 550: for(;;) {
  2437  00128A  D005               	goto	l3223
  2438  00128C                     l3219:
  2439                           
  2440                           ;doprnt.c: 580: flag |= 0x04;
  2441  00128C  841D               	bsf	sprintf@flag,2,c
  2442                           
  2443                           ;doprnt.c: 581: f++;
  2444  00128E  4A0F               	infsnz	sprintf@f,f,c
  2445  001290  2A10               	incf	sprintf@f+1,f,c
  2446                           
  2447                           ;doprnt.c: 582: continue;
  2448  001292  D001               	goto	l3223
  2449                           
  2450                           ;doprnt.c: 584: }
  2451  001294  D00B               	goto	l3225
  2452  001296                     l3223:
  2453  001296  C00F  FFF6         	movff	sprintf@f,tblptrl
  2454  00129A  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2455  00129E                     	if	0	;tblptru may be non-zero
  2456  00129E                     	endif
  2457  00129E                     	if	0	;tblptru may be non-zero
  2458  00129E                     	endif
  2459  00129E  0008               	tblrd		*
  2460  0012A0  50F5               	movf	tablat,w,c
  2461                           
  2462                           ; Switch size 1, requested type "space"
  2463                           ; Number of cases is 1, Range of values is 48 to 48
  2464                           ; switch strategies available:
  2465                           ; Name         Instructions Cycles
  2466                           ; simple_byte            4     3 (average)
  2467                           ;	Chosen strategy is simple_byte
  2468  0012A2  0A30               	xorlw	48	; case 48
  2469  0012A4  B4D8               	btfsc	status,2,c
  2470  0012A6  D7F2               	goto	l3219
  2471                           
  2472                           ;doprnt.c: 585: break;
  2473  0012A8  D001               	goto	l3225
  2474                           
  2475                           ;doprnt.c: 586: }
  2476  0012AA  D7F5               	goto	l3223
  2477  0012AC                     l3225:
  2478                           
  2479                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2480  0012AC  C00F  FFF6         	movff	sprintf@f,tblptrl
  2481  0012B0  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2482  0012B4                     	if	0	;tblptru may be non-zero
  2483  0012B4                     	endif
  2484  0012B4                     	if	0	;tblptru may be non-zero
  2485  0012B4                     	endif
  2486  0012B4  0008               	tblrd		*
  2487  0012B6  50F5               	movf	tablat,w,c
  2488  0012B8  ECCA  F017         	call	_isdigit
  2489  0012BC  A0D8               	btfss	status,0,c
  2490  0012BE  D03A               	goto	l3241
  2491                           
  2492                           ;doprnt.c: 598: width = 0;
  2493  0012C0  0E00               	movlw	0
  2494  0012C2  6E22               	movwf	sprintf@width+1,c
  2495  0012C4  0E00               	movlw	0
  2496  0012C6  6E21               	movwf	sprintf@width,c
  2497  0012C8  D000               	goto	l3229
  2498  0012CA                     l3229:
  2499                           
  2500                           ;doprnt.c: 600: width *= 10;
  2501  0012CA  C021  F001         	movff	sprintf@width,___wmul@multiplier
  2502  0012CE  C022  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  2503  0012D2  0E00               	movlw	0
  2504  0012D4  6E04               	movwf	___wmul@multiplicand+1,c
  2505  0012D6  0E0A               	movlw	10
  2506  0012D8  6E03               	movwf	___wmul@multiplicand,c
  2507  0012DA  EC7F  F017         	call	___wmul	;wreg free
  2508  0012DE  C001  F021         	movff	?___wmul,sprintf@width
  2509  0012E2  C002  F022         	movff	?___wmul+1,sprintf@width+1
  2510                           
  2511                           ;doprnt.c: 601: width += *f++ - '0';
  2512  0012E6  0ED0               	movlw	208
  2513  0012E8  6E17               	movwf	??_sprintf& (0+255),c
  2514  0012EA  0EFF               	movlw	255
  2515  0012EC  6E18               	movwf	(??_sprintf+1)& (0+255),c
  2516  0012EE  C00F  FFF6         	movff	sprintf@f,tblptrl
  2517  0012F2  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2518  0012F6                     	if	0	;tblptru may be non-zero
  2519  0012F6                     	endif
  2520  0012F6                     	if	0	;tblptru may be non-zero
  2521  0012F6                     	endif
  2522  0012F6  0008               	tblrd		*
  2523  0012F8  50F5               	movf	tablat,w,c
  2524  0012FA  6E19               	movwf	(??_sprintf+2)& (0+255),c
  2525  0012FC  6A1A               	clrf	(??_sprintf+3)& (0+255),c
  2526  0012FE  5017               	movf	??_sprintf,w,c
  2527  001300  2619               	addwf	??_sprintf+2,f,c
  2528  001302  5018               	movf	??_sprintf+1,w,c
  2529  001304  221A               	addwfc	??_sprintf+3,f,c
  2530  001306  5019               	movf	??_sprintf+2,w,c
  2531  001308  2621               	addwf	sprintf@width,f,c
  2532  00130A  501A               	movf	??_sprintf+3,w,c
  2533  00130C  2222               	addwfc	sprintf@width+1,f,c
  2534  00130E  4A0F               	infsnz	sprintf@f,f,c
  2535  001310  2A10               	incf	sprintf@f+1,f,c
  2536                           
  2537                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2538  001312  C00F  FFF6         	movff	sprintf@f,tblptrl
  2539  001316  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2540  00131A                     	if	0	;tblptru may be non-zero
  2541  00131A                     	endif
  2542  00131A                     	if	0	;tblptru may be non-zero
  2543  00131A                     	endif
  2544  00131A  0008               	tblrd		*
  2545  00131C  50F5               	movf	tablat,w,c
  2546  00131E  ECCA  F017         	call	_isdigit
  2547  001322  A0D8               	btfss	status,0,c
  2548  001324  D007               	goto	l3241
  2549  001326  D7D1               	goto	l3229
  2550                           
  2551                           ;doprnt.c: 608: }
  2552                           ;doprnt.c: 635: switch(c = *f++) {
  2553  001328  D005               	goto	l3241
  2554                           
  2555                           ;doprnt.c: 638: goto alldone;
  2556                           
  2557                           ;doprnt.c: 637: case 0:
  2558  00132A  D0C1               	goto	l3295
  2559                           
  2560                           ;doprnt.c: 813: continue;
  2561                           
  2562                           ;doprnt.c: 802: default:
  2563  00132C  D0B2               	goto	l3293
  2564  00132E                     l3237:
  2565                           
  2566                           ;doprnt.c: 818: flag |= 0xC0;
  2567  00132E  0EC0               	movlw	192
  2568  001330  121D               	iorwf	sprintf@flag,f,c
  2569                           
  2570                           ;doprnt.c: 822: }
  2571                           
  2572                           ;doprnt.c: 819: break;
  2573  001332  D011               	goto	l3243
  2574  001334                     l3241:
  2575  001334  C00F  FFF6         	movff	sprintf@f,tblptrl
  2576  001338  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2577  00133C  4A0F               	infsnz	sprintf@f,f,c
  2578  00133E  2A10               	incf	sprintf@f+1,f,c
  2579  001340                     	if	0	;tblptru may be non-zero
  2580  001340                     	endif
  2581  001340                     	if	0	;tblptru may be non-zero
  2582  001340                     	endif
  2583  001340  0008               	tblrd		*
  2584  001342  CFF5 F023          	movff	tablat,sprintf@c
  2585  001346  5023               	movf	sprintf@c,w,c
  2586                           
  2587                           ; Switch size 1, requested type "space"
  2588                           ; Number of cases is 2, Range of values is 0 to 117
  2589                           ; switch strategies available:
  2590                           ; Name         Instructions Cycles
  2591                           ; simple_byte            7     4 (average)
  2592                           ;	Chosen strategy is simple_byte
  2593  001348  0A00               	xorlw	0	; case 0
  2594  00134A  B4D8               	btfsc	status,2,c
  2595  00134C  D0B0               	goto	l3295
  2596  00134E  0A75               	xorlw	117	; case 117
  2597  001350  B4D8               	btfsc	status,2,c
  2598  001352  D7ED               	goto	l3237
  2599  001354  D09E               	goto	l3293
  2600  001356                     l3243:
  2601                           
  2602                           ;doprnt.c: 1273: {
  2603                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2604  001356  C01B  FFD9         	movff	sprintf@ap,fsr2l
  2605  00135A  C01C  FFDA         	movff	sprintf@ap+1,fsr2h
  2606  00135E  CFDE F01E          	movff	postinc2,sprintf@val
  2607  001362  CFDD F01F          	movff	postdec2,sprintf@val+1
  2608  001366  0E02               	movlw	2
  2609  001368  261B               	addwf	sprintf@ap,f,c
  2610  00136A  0E00               	movlw	0
  2611  00136C  221C               	addwfc	sprintf@ap+1,f,c
  2612                           
  2613                           ;doprnt.c: 1287: }
  2614                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2615  00136E  0E01               	movlw	1
  2616  001370  6E23               	movwf	sprintf@c,c
  2617  001372                     l3249:
  2618  001372  0E05               	movlw	5
  2619  001374  1823               	xorwf	sprintf@c,w,c
  2620  001376  B4D8               	btfsc	status,2,c
  2621  001378  D016               	goto	l3261
  2622  00137A  D001               	goto	l3253
  2623  00137C  D014               	goto	l3261
  2624  00137E                     l3253:
  2625                           
  2626                           ;doprnt.c: 1306: if(val < dpowers[c])
  2627  00137E  5023               	movf	sprintf@c,w,c
  2628  001380  0D02               	mullw	2
  2629  001382  0E01               	movlw	low _dpowers
  2630  001384  24F3               	addwf	prodl,w,c
  2631  001386  6EF6               	movwf	tblptrl,c
  2632  001388  0E0F               	movlw	high _dpowers
  2633  00138A  20F4               	addwfc	prodh,w,c
  2634  00138C  6EF7               	movwf	tblptrh,c
  2635  00138E                     	if	0	;There are less than 3 active tblptr bytes
  2636  00138E                     	endif
  2637  00138E  0009               	tblrd		*+
  2638  001390  50F5               	movf	tablat,w,c
  2639  001392  5C1E               	subwf	sprintf@val,w,c
  2640  001394  0009               	tblrd		*+
  2641  001396  50F5               	movf	tablat,w,c
  2642  001398  581F               	subwfb	sprintf@val+1,w,c
  2643  00139A  A0D8               	btfss	status,0,c
  2644  00139C  D004               	goto	l3261
  2645  00139E  D001               	goto	l3257
  2646                           
  2647                           ;doprnt.c: 1307: break;
  2648  0013A0  D002               	goto	l3261
  2649  0013A2                     l3257:
  2650  0013A2  2A23               	incf	sprintf@c,f,c
  2651  0013A4  D7E6               	goto	l3249
  2652  0013A6                     l3261:
  2653                           
  2654                           ;doprnt.c: 1381: if(width > c)
  2655  0013A6  0E80               	movlw	128
  2656  0013A8  BE23               	btfsc	sprintf@c,7,c
  2657  0013AA  0E7F               	movlw	127
  2658  0013AC  6E17               	movwf	??_sprintf& (0+255),c
  2659  0013AE  5021               	movf	sprintf@width,w,c
  2660  0013B0  5C23               	subwf	sprintf@c,w,c
  2661  0013B2  5022               	movf	sprintf@width+1,w,c
  2662  0013B4  0A80               	xorlw	128
  2663  0013B6  5817               	subwfb	??_sprintf& (0+255),w,c
  2664  0013B8  B0D8               	btfsc	status,0,c
  2665  0013BA  D007               	goto	l3265
  2666                           
  2667                           ;doprnt.c: 1382: width -= c;
  2668  0013BC  5023               	movf	sprintf@c,w,c
  2669  0013BE  5E21               	subwf	sprintf@width,f,c
  2670  0013C0  0E00               	movlw	0
  2671  0013C2  BE23               	btfsc	sprintf@c,7,c
  2672  0013C4  0EFF               	movlw	255
  2673  0013C6  5A22               	subwfb	sprintf@width+1,f,c
  2674  0013C8  D005               	goto	l3267
  2675  0013CA                     l3265:
  2676                           
  2677                           ;doprnt.c: 1383: else
  2678                           ;doprnt.c: 1384: width = 0;
  2679  0013CA  0E00               	movlw	0
  2680  0013CC  6E22               	movwf	sprintf@width+1,c
  2681  0013CE  0E00               	movlw	0
  2682  0013D0  6E21               	movwf	sprintf@width,c
  2683  0013D2  D000               	goto	l3267
  2684  0013D4                     l3267:
  2685                           
  2686                           ;doprnt.c: 1387: if(flag & 0x04) {
  2687  0013D4  A41D               	btfss	sprintf@flag,2,c
  2688  0013D6  D015               	goto	l3277
  2689                           
  2690                           ;doprnt.c: 1415: if(width)
  2691  0013D8  5021               	movf	sprintf@width,w,c
  2692  0013DA  1022               	iorwf	sprintf@width+1,w,c
  2693  0013DC  B4D8               	btfsc	status,2,c
  2694  0013DE  D026               	goto	l651
  2695  0013E0                     l3271:
  2696                           
  2697                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  2698  0013E0  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2699  0013E4  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2700  0013E8  0E30               	movlw	48
  2701  0013EA  6EDF               	movwf	indf2,c
  2702  0013EC  4A0D               	infsnz	sprintf@sp,f,c
  2703  0013EE  2A0E               	incf	sprintf@sp+1,f,c
  2704                           
  2705                           ;doprnt.c: 1418: while(--width);
  2706  0013F0  0621               	decf	sprintf@width,f,c
  2707  0013F2  A0D8               	btfss	status,0,c
  2708  0013F4  0622               	decf	sprintf@width+1,f,c
  2709  0013F6  5021               	movf	sprintf@width,w,c
  2710  0013F8  1022               	iorwf	sprintf@width+1,w,c
  2711  0013FA  B4D8               	btfsc	status,2,c
  2712  0013FC  D017               	goto	l651
  2713  0013FE  D7F0               	goto	l3271
  2714                           
  2715                           ;doprnt.c: 1420: } else
  2716  001400  D015               	goto	l651
  2717  001402                     l3277:
  2718                           
  2719                           ;doprnt.c: 1422: {
  2720                           ;doprnt.c: 1424: if(width
  2721                           ;doprnt.c: 1428: )
  2722  001402  5021               	movf	sprintf@width,w,c
  2723  001404  1022               	iorwf	sprintf@width+1,w,c
  2724  001406  B4D8               	btfsc	status,2,c
  2725  001408  D011               	goto	l651
  2726  00140A                     l3279:
  2727                           
  2728                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  2729  00140A  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2730  00140E  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2731  001412  0E20               	movlw	32
  2732  001414  6EDF               	movwf	indf2,c
  2733  001416  4A0D               	infsnz	sprintf@sp,f,c
  2734  001418  2A0E               	incf	sprintf@sp+1,f,c
  2735                           
  2736                           ;doprnt.c: 1431: while(--width);
  2737  00141A  0621               	decf	sprintf@width,f,c
  2738  00141C  A0D8               	btfss	status,0,c
  2739  00141E  0622               	decf	sprintf@width+1,f,c
  2740  001420  5021               	movf	sprintf@width,w,c
  2741  001422  1022               	iorwf	sprintf@width+1,w,c
  2742  001424  B4D8               	btfsc	status,2,c
  2743  001426  D002               	goto	l651
  2744  001428  D7F0               	goto	l3279
  2745  00142A  D000               	goto	l651
  2746  00142C                     l651:
  2747                           
  2748                           ;doprnt.c: 1469: }
  2749                           ;doprnt.c: 1472: prec = c;
  2750  00142C  C023  F020         	movff	sprintf@c,sprintf@prec
  2751                           
  2752                           ;doprnt.c: 1474: while(prec--) {
  2753  001430  D02A               	goto	l3291
  2754  001432                     l3285:
  2755                           
  2756                           ;doprnt.c: 1478: {
  2757                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2758  001432  5020               	movf	sprintf@prec,w,c
  2759  001434  0D02               	mullw	2
  2760  001436  0E01               	movlw	low _dpowers
  2761  001438  24F3               	addwf	prodl,w,c
  2762  00143A  6EF6               	movwf	tblptrl,c
  2763  00143C  0E0F               	movlw	high _dpowers
  2764  00143E  20F4               	addwfc	prodh,w,c
  2765  001440  6EF7               	movwf	tblptrh,c
  2766  001442                     	if	0	;There are less than 3 active tblptr bytes
  2767  001442                     	endif
  2768  001442  0009               	tblrd		*+
  2769  001444  CFF5 F003          	movff	tablat,___lwdiv@divisor
  2770  001448  000A               	tblrd		*-
  2771  00144A  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  2772  00144E  C01E  F001         	movff	sprintf@val,___lwdiv@dividend
  2773  001452  C01F  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  2774  001456  EC07  F016         	call	___lwdiv	;wreg free
  2775  00145A  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  2776  00145E  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  2777  001462  0E00               	movlw	0
  2778  001464  6E0B               	movwf	___lwmod@divisor+1,c
  2779  001466  0E0A               	movlw	10
  2780  001468  6E0A               	movwf	___lwmod@divisor,c
  2781  00146A  ECB6  F016         	call	___lwmod	;wreg free
  2782  00146E  5008               	movf	?___lwmod,w,c
  2783  001470  0F30               	addlw	48
  2784  001472  6E23               	movwf	sprintf@c,c
  2785                           
  2786                           ;doprnt.c: 1523: }
  2787                           ;doprnt.c: 1524: ((*sp++ = (c)));
  2788  001474  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2789  001478  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2790  00147C  C023  FFDF         	movff	sprintf@c,indf2
  2791  001480  4A0D               	infsnz	sprintf@sp,f,c
  2792  001482  2A0E               	incf	sprintf@sp+1,f,c
  2793  001484  D000               	goto	l3291
  2794  001486                     l3291:
  2795  001486  0620               	decf	sprintf@prec,f,c
  2796  001488  2820               	incf	sprintf@prec,w,c
  2797  00148A  B4D8               	btfsc	status,2,c
  2798  00148C  D002               	goto	l3293
  2799  00148E  D7D1               	goto	l3285
  2800  001490  D000               	goto	l3293
  2801  001492                     l3293:
  2802  001492  C00F  FFF6         	movff	sprintf@f,tblptrl
  2803  001496  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2804  00149A  4A0F               	infsnz	sprintf@f,f,c
  2805  00149C  2A10               	incf	sprintf@f+1,f,c
  2806  00149E                     	if	0	;tblptru may be non-zero
  2807  00149E                     	endif
  2808  00149E                     	if	0	;tblptru may be non-zero
  2809  00149E                     	endif
  2810  00149E  0008               	tblrd		*
  2811  0014A0  CFF5 F023          	movff	tablat,sprintf@c
  2812  0014A4  5023               	movf	sprintf@c,w,c
  2813  0014A6  B4D8               	btfsc	status,2,c
  2814  0014A8  D002               	goto	l3295
  2815  0014AA  D6DC               	goto	l3211
  2816  0014AC  D000               	goto	l3295
  2817  0014AE                     l3295:
  2818                           
  2819                           ;doprnt.c: 1538: *sp = 0;
  2820  0014AE  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2821  0014B2  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2822  0014B6  0E00               	movlw	0
  2823  0014B8  6EDF               	movwf	indf2,c
  2824  0014BA  0012               	return	
  2825                           
  2826                           ;doprnt.c: 1540: return 0;
  2827                           ;	Return value of _sprintf is never used
  2828  0014BC  0012               	return		;funcret
  2829  0014BE                     __end_of_sprintf:
  2830                           	opt stack 0
  2831                           tblptru	equ	0xFF8
  2832                           tblptrh	equ	0xFF7
  2833                           tblptrl	equ	0xFF6
  2834                           tablat	equ	0xFF5
  2835                           prodh	equ	0xFF4
  2836                           prodl	equ	0xFF3
  2837                           postinc0	equ	0xFEE
  2838                           wreg	equ	0xFE8
  2839                           postdec1	equ	0xFE5
  2840                           fsr1l	equ	0xFE1
  2841                           indf2	equ	0xFDF
  2842                           postinc2	equ	0xFDE
  2843                           postdec2	equ	0xFDD
  2844                           fsr2h	equ	0xFDA
  2845                           fsr2l	equ	0xFD9
  2846                           status	equ	0xFD8
  2847                           
  2848 ;; *************** function _isdigit *****************
  2849 ;; Defined at:
  2850 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\isdigit.c"
  2851 ;; Parameters:    Size  Location     Type
  2852 ;;  c               1    wreg     unsigned char 
  2853 ;; Auto vars:     Size  Location     Type
  2854 ;;  c               1    2[COMRAM] unsigned char 
  2855 ;; Return value:  Size  Location     Type
  2856 ;;		None               void
  2857 ;; Registers used:
  2858 ;;		wreg, status,2, status,0
  2859 ;; Tracked objects:
  2860 ;;		On entry : 0/0
  2861 ;;		On exit  : 0/0
  2862 ;;		Unchanged: 0/0
  2863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2865 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2866 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2867 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2868 ;;Total ram usage:        3 bytes
  2869 ;; Hardware stack levels used:    1
  2870 ;; This function calls:
  2871 ;;		Nothing
  2872 ;; This function is called by:
  2873 ;;		_sprintf
  2874 ;; This function uses a non-reentrant model
  2875 ;;
  2876                           
  2877                           	psect	text6
  2878  002F94                     __ptext6:
  2879                           	opt stack 0
  2880  002F94                     _isdigit:
  2881                           	opt stack 27
  2882                           
  2883                           ;incstack = 0
  2884                           ;isdigit@c stored from wreg
  2885  002F94  6E03               	movwf	isdigit@c,c
  2886  002F96  0E00               	movlw	0
  2887  002F98  6E02               	movwf	_isdigit$2348,c
  2888  002F9A  0E3A               	movlw	58
  2889  002F9C  6003               	cpfslt	isdigit@c,c
  2890  002F9E  D006               	goto	l2935
  2891  002FA0  0E2F               	movlw	47
  2892  002FA2  6403               	cpfsgt	isdigit@c,c
  2893  002FA4  D003               	goto	l2935
  2894  002FA6  0E01               	movlw	1
  2895  002FA8  6E02               	movwf	_isdigit$2348,c
  2896  002FAA  D000               	goto	l2935
  2897  002FAC                     l2935:
  2898  002FAC  C002  F001         	movff	_isdigit$2348,??_isdigit
  2899  002FB0  3001               	rrcf	??_isdigit,w,c
  2900  002FB2  0012               	return	
  2901  002FB4  0012               	return		;funcret
  2902  002FB6                     __end_of_isdigit:
  2903                           	opt stack 0
  2904                           tblptru	equ	0xFF8
  2905                           tblptrh	equ	0xFF7
  2906                           tblptrl	equ	0xFF6
  2907                           tablat	equ	0xFF5
  2908                           prodh	equ	0xFF4
  2909                           prodl	equ	0xFF3
  2910                           postinc0	equ	0xFEE
  2911                           wreg	equ	0xFE8
  2912                           postdec1	equ	0xFE5
  2913                           fsr1l	equ	0xFE1
  2914                           indf2	equ	0xFDF
  2915                           postinc2	equ	0xFDE
  2916                           postdec2	equ	0xFDD
  2917                           fsr2h	equ	0xFDA
  2918                           fsr2l	equ	0xFD9
  2919                           status	equ	0xFD8
  2920                           
  2921 ;; *************** function ___lwmod *****************
  2922 ;; Defined at:
  2923 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lwmod.c"
  2924 ;; Parameters:    Size  Location     Type
  2925 ;;  dividend        2    7[COMRAM] unsigned int 
  2926 ;;  divisor         2    9[COMRAM] unsigned int 
  2927 ;; Auto vars:     Size  Location     Type
  2928 ;;  counter         1   11[COMRAM] unsigned char 
  2929 ;; Return value:  Size  Location     Type
  2930 ;;                  2    7[COMRAM] unsigned int 
  2931 ;; Registers used:
  2932 ;;		wreg, status,2, status,0
  2933 ;; Tracked objects:
  2934 ;;		On entry : 0/0
  2935 ;;		On exit  : 0/0
  2936 ;;		Unchanged: 0/0
  2937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2938 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2939 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2941 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2942 ;;Total ram usage:        5 bytes
  2943 ;; Hardware stack levels used:    1
  2944 ;; This function calls:
  2945 ;;		Nothing
  2946 ;; This function is called by:
  2947 ;;		_sprintf
  2948 ;; This function uses a non-reentrant model
  2949 ;;
  2950                           
  2951                           	psect	text7
  2952  002D6C                     __ptext7:
  2953                           	opt stack 0
  2954  002D6C                     ___lwmod:
  2955                           	opt stack 27
  2956                           
  2957                           ;incstack = 0
  2958  002D6C  500A               	movf	___lwmod@divisor,w,c
  2959  002D6E  100B               	iorwf	___lwmod@divisor+1,w,c
  2960  002D70  B4D8               	btfsc	status,2,c
  2961  002D72  D01D               	goto	l1305
  2962  002D74  0E01               	movlw	1
  2963  002D76  6E0C               	movwf	___lwmod@counter,c
  2964  002D78  D005               	goto	l3171
  2965  002D7A                     l3169:
  2966  002D7A  90D8               	bcf	status,0,c
  2967  002D7C  360A               	rlcf	___lwmod@divisor,f,c
  2968  002D7E  360B               	rlcf	___lwmod@divisor+1,f,c
  2969  002D80  2A0C               	incf	___lwmod@counter,f,c
  2970  002D82  D000               	goto	l3171
  2971  002D84                     l3171:
  2972  002D84  BE0B               	btfsc	___lwmod@divisor+1,7,c
  2973  002D86  D002               	goto	l3173
  2974  002D88  D7F8               	goto	l3169
  2975  002D8A  D000               	goto	l3173
  2976  002D8C                     l3173:
  2977  002D8C  500A               	movf	___lwmod@divisor,w,c
  2978  002D8E  5C08               	subwf	___lwmod@dividend,w,c
  2979  002D90  500B               	movf	___lwmod@divisor+1,w,c
  2980  002D92  5809               	subwfb	___lwmod@dividend+1,w,c
  2981  002D94  A0D8               	btfss	status,0,c
  2982  002D96  D005               	goto	l3177
  2983  002D98  500A               	movf	___lwmod@divisor,w,c
  2984  002D9A  5E08               	subwf	___lwmod@dividend,f,c
  2985  002D9C  500B               	movf	___lwmod@divisor+1,w,c
  2986  002D9E  5A09               	subwfb	___lwmod@dividend+1,f,c
  2987  002DA0  D000               	goto	l3177
  2988  002DA2                     l3177:
  2989  002DA2  90D8               	bcf	status,0,c
  2990  002DA4  320B               	rrcf	___lwmod@divisor+1,f,c
  2991  002DA6  320A               	rrcf	___lwmod@divisor,f,c
  2992  002DA8  2E0C               	decfsz	___lwmod@counter,f,c
  2993  002DAA  D7F0               	goto	l3173
  2994  002DAC  D000               	goto	l1305
  2995  002DAE                     l1305:
  2996  002DAE  C008  F008         	movff	___lwmod@dividend,?___lwmod
  2997  002DB2  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  2998  002DB6  0012               	return		;funcret
  2999  002DB8                     __end_of___lwmod:
  3000                           	opt stack 0
  3001                           tblptru	equ	0xFF8
  3002                           tblptrh	equ	0xFF7
  3003                           tblptrl	equ	0xFF6
  3004                           tablat	equ	0xFF5
  3005                           prodh	equ	0xFF4
  3006                           prodl	equ	0xFF3
  3007                           postinc0	equ	0xFEE
  3008                           wreg	equ	0xFE8
  3009                           postdec1	equ	0xFE5
  3010                           fsr1l	equ	0xFE1
  3011                           indf2	equ	0xFDF
  3012                           postinc2	equ	0xFDE
  3013                           postdec2	equ	0xFDD
  3014                           fsr2h	equ	0xFDA
  3015                           fsr2l	equ	0xFD9
  3016                           status	equ	0xFD8
  3017                           
  3018 ;; *************** function ___lwdiv *****************
  3019 ;; Defined at:
  3020 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  3021 ;; Parameters:    Size  Location     Type
  3022 ;;  dividend        2    0[COMRAM] unsigned int 
  3023 ;;  divisor         2    2[COMRAM] unsigned int 
  3024 ;; Auto vars:     Size  Location     Type
  3025 ;;  quotient        2    4[COMRAM] unsigned int 
  3026 ;;  counter         1    6[COMRAM] unsigned char 
  3027 ;; Return value:  Size  Location     Type
  3028 ;;                  2    0[COMRAM] unsigned int 
  3029 ;; Registers used:
  3030 ;;		wreg, status,2, status,0
  3031 ;; Tracked objects:
  3032 ;;		On entry : 0/0
  3033 ;;		On exit  : 0/0
  3034 ;;		Unchanged: 0/0
  3035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3036 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3037 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3039 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3040 ;;Total ram usage:        7 bytes
  3041 ;; Hardware stack levels used:    1
  3042 ;; This function calls:
  3043 ;;		Nothing
  3044 ;; This function is called by:
  3045 ;;		_sprintf
  3046 ;; This function uses a non-reentrant model
  3047 ;;
  3048                           
  3049                           	psect	text8
  3050  002C0E                     __ptext8:
  3051                           	opt stack 0
  3052  002C0E                     ___lwdiv:
  3053                           	opt stack 27
  3054                           
  3055                           ;incstack = 0
  3056  002C0E  0E00               	movlw	0
  3057  002C10  6E06               	movwf	___lwdiv@quotient+1,c
  3058  002C12  0E00               	movlw	0
  3059  002C14  6E05               	movwf	___lwdiv@quotient,c
  3060  002C16  5003               	movf	___lwdiv@divisor,w,c
  3061  002C18  1004               	iorwf	___lwdiv@divisor+1,w,c
  3062  002C1A  B4D8               	btfsc	status,2,c
  3063  002C1C  D021               	goto	l1295
  3064  002C1E  0E01               	movlw	1
  3065  002C20  6E07               	movwf	___lwdiv@counter,c
  3066  002C22  D005               	goto	l3151
  3067  002C24                     l3149:
  3068  002C24  90D8               	bcf	status,0,c
  3069  002C26  3603               	rlcf	___lwdiv@divisor,f,c
  3070  002C28  3604               	rlcf	___lwdiv@divisor+1,f,c
  3071  002C2A  2A07               	incf	___lwdiv@counter,f,c
  3072  002C2C  D000               	goto	l3151
  3073  002C2E                     l3151:
  3074  002C2E  BE04               	btfsc	___lwdiv@divisor+1,7,c
  3075  002C30  D002               	goto	l3153
  3076  002C32  D7F8               	goto	l3149
  3077  002C34  D000               	goto	l3153
  3078  002C36                     l3153:
  3079  002C36  90D8               	bcf	status,0,c
  3080  002C38  3605               	rlcf	___lwdiv@quotient,f,c
  3081  002C3A  3606               	rlcf	___lwdiv@quotient+1,f,c
  3082  002C3C  5003               	movf	___lwdiv@divisor,w,c
  3083  002C3E  5C01               	subwf	___lwdiv@dividend,w,c
  3084  002C40  5004               	movf	___lwdiv@divisor+1,w,c
  3085  002C42  5802               	subwfb	___lwdiv@dividend+1,w,c
  3086  002C44  A0D8               	btfss	status,0,c
  3087  002C46  D006               	goto	l3161
  3088  002C48  5003               	movf	___lwdiv@divisor,w,c
  3089  002C4A  5E01               	subwf	___lwdiv@dividend,f,c
  3090  002C4C  5004               	movf	___lwdiv@divisor+1,w,c
  3091  002C4E  5A02               	subwfb	___lwdiv@dividend+1,f,c
  3092  002C50  8005               	bsf	___lwdiv@quotient,0,c
  3093  002C52  D000               	goto	l3161
  3094  002C54                     l3161:
  3095  002C54  90D8               	bcf	status,0,c
  3096  002C56  3204               	rrcf	___lwdiv@divisor+1,f,c
  3097  002C58  3203               	rrcf	___lwdiv@divisor,f,c
  3098  002C5A  2E07               	decfsz	___lwdiv@counter,f,c
  3099  002C5C  D7EC               	goto	l3153
  3100  002C5E  D000               	goto	l1295
  3101  002C60                     l1295:
  3102  002C60  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  3103  002C64  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3104  002C68  0012               	return		;funcret
  3105  002C6A                     __end_of___lwdiv:
  3106                           	opt stack 0
  3107                           tblptru	equ	0xFF8
  3108                           tblptrh	equ	0xFF7
  3109                           tblptrl	equ	0xFF6
  3110                           tablat	equ	0xFF5
  3111                           prodh	equ	0xFF4
  3112                           prodl	equ	0xFF3
  3113                           postinc0	equ	0xFEE
  3114                           wreg	equ	0xFE8
  3115                           postdec1	equ	0xFE5
  3116                           fsr1l	equ	0xFE1
  3117                           indf2	equ	0xFDF
  3118                           postinc2	equ	0xFDE
  3119                           postdec2	equ	0xFDD
  3120                           fsr2h	equ	0xFDA
  3121                           fsr2l	equ	0xFD9
  3122                           status	equ	0xFD8
  3123                           
  3124 ;; *************** function _lcd_putrs *****************
  3125 ;; Defined at:
  3126 ;;		line 221 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3127 ;; Parameters:    Size  Location     Type
  3128 ;;  ptr             2    8[COMRAM] PTR const unsigned char 
  3129 ;;		 -> STR_21(8), STR_20(10), STR_19(4), STR_18(3), 
  3130 ;;		 -> STR_17(11), STR_16(11), buffer2(20), STR_3(10), 
  3131 ;;		 -> STR_2(13), STR_1(33), 
  3132 ;; Auto vars:     Size  Location     Type
  3133 ;;		None
  3134 ;; Return value:  Size  Location     Type
  3135 ;;		None               void
  3136 ;; Registers used:
  3137 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3138 ;; Tracked objects:
  3139 ;;		On entry : 0/0
  3140 ;;		On exit  : 0/0
  3141 ;;		Unchanged: 0/0
  3142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3143 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3146 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3147 ;;Total ram usage:        2 bytes
  3148 ;; Hardware stack levels used:    1
  3149 ;; Hardware stack levels required when called:    4
  3150 ;; This function calls:
  3151 ;;		_lcd_putc
  3152 ;; This function is called by:
  3153 ;;		_main
  3154 ;;		_read_keyboard
  3155 ;;		_write_Date
  3156 ;;		_twinkle
  3157 ;;		_set_vision
  3158 ;; This function uses a non-reentrant model
  3159 ;;
  3160                           
  3161                           	psect	text9
  3162  002D18                     __ptext9:
  3163                           	opt stack 0
  3164  002D18                     _lcd_putrs:
  3165                           	opt stack 24
  3166                           
  3167                           ;unmc_lcd_216.c: 223: while(*ptr){
  3168                           
  3169                           ;incstack = 0
  3170  002D18  D015               	goto	l3207
  3171  002D1A                     l3203:
  3172                           
  3173                           ;unmc_lcd_216.c: 224: lcd_putc(*ptr++);
  3174  002D1A  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  3175  002D1E  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  3176  002D22  6AF8               	clrf	tblptru,c
  3177  002D24  0E0E               	movlw	(high __ramtop+-1)
  3178  002D26  64F7               	cpfsgt	tblptrh,c
  3179  002D28  D003               	bra	u2827
  3180  002D2A  0008               	tblrd		*
  3181  002D2C  50F5               	movf	tablat,w,c
  3182  002D2E  D005               	bra	u2820
  3183  002D30                     u2827:
  3184  002D30  CFF6 FFE9          	movff	tblptrl,fsr0l
  3185  002D34  CFF7 FFEA          	movff	tblptrh,fsr0h
  3186  002D38  50EF               	movf	indf0,w,c
  3187  002D3A                     u2820:
  3188  002D3A  ECDC  F016         	call	_lcd_putc
  3189  002D3E  4A09               	infsnz	lcd_putrs@ptr,f,c
  3190  002D40  2A0A               	incf	lcd_putrs@ptr+1,f,c
  3191  002D42  D000               	goto	l3207
  3192  002D44                     l3207:
  3193  002D44  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  3194  002D48  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  3195  002D4C  6AF8               	clrf	tblptru,c
  3196  002D4E  0E0E               	movlw	(high __ramtop+-1)
  3197  002D50  64F7               	cpfsgt	tblptrh,c
  3198  002D52  D003               	bra	u2837
  3199  002D54  0008               	tblrd		*
  3200  002D56  50F5               	movf	tablat,w,c
  3201  002D58  D005               	bra	u2830
  3202  002D5A                     u2837:
  3203  002D5A  CFF6 FFE9          	movff	tblptrl,fsr0l
  3204  002D5E  CFF7 FFEA          	movff	tblptrh,fsr0h
  3205  002D62  50EF               	movf	indf0,w,c
  3206  002D64                     u2830:
  3207  002D64  0900               	iorlw	0
  3208  002D66  A4D8               	btfss	status,2,c
  3209  002D68  D7D8               	goto	l3203
  3210  002D6A  0012               	return		;funcret
  3211  002D6C                     __end_of_lcd_putrs:
  3212                           	opt stack 0
  3213                           tblptru	equ	0xFF8
  3214                           tblptrh	equ	0xFF7
  3215                           tblptrl	equ	0xFF6
  3216                           tablat	equ	0xFF5
  3217                           prodh	equ	0xFF4
  3218                           prodl	equ	0xFF3
  3219                           indf0	equ	0xFEF
  3220                           postinc0	equ	0xFEE
  3221                           fsr0h	equ	0xFEA
  3222                           fsr0l	equ	0xFE9
  3223                           wreg	equ	0xFE8
  3224                           postdec1	equ	0xFE5
  3225                           fsr1l	equ	0xFE1
  3226                           indf2	equ	0xFDF
  3227                           postinc2	equ	0xFDE
  3228                           postdec2	equ	0xFDD
  3229                           fsr2h	equ	0xFDA
  3230                           fsr2l	equ	0xFD9
  3231                           status	equ	0xFD8
  3232                           
  3233 ;; *************** function _lcd_putc *****************
  3234 ;; Defined at:
  3235 ;;		line 172 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3236 ;; Parameters:    Size  Location     Type
  3237 ;;  c               1    wreg     unsigned char 
  3238 ;; Auto vars:     Size  Location     Type
  3239 ;;  c               1    7[COMRAM] unsigned char 
  3240 ;; Return value:  Size  Location     Type
  3241 ;;		None               void
  3242 ;; Registers used:
  3243 ;;		wreg, status,2, status,0, cstack
  3244 ;; Tracked objects:
  3245 ;;		On entry : 0/0
  3246 ;;		On exit  : 0/0
  3247 ;;		Unchanged: 0/0
  3248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3250 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3252 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3253 ;;Total ram usage:        1 bytes
  3254 ;; Hardware stack levels used:    1
  3255 ;; Hardware stack levels required when called:    3
  3256 ;; This function calls:
  3257 ;;		_lcd_gotoxy
  3258 ;;		_lcd_send_byte
  3259 ;; This function is called by:
  3260 ;;		_lcd_putrs
  3261 ;;		_lcd_puts
  3262 ;; This function uses a non-reentrant model
  3263 ;;
  3264                           
  3265                           	psect	text10
  3266  002DB8                     __ptext10:
  3267                           	opt stack 0
  3268  002DB8                     _lcd_putc:
  3269                           	opt stack 24
  3270                           
  3271                           ;incstack = 0
  3272                           ;lcd_putc@c stored from wreg
  3273  002DB8  6E08               	movwf	lcd_putc@c,c
  3274                           
  3275                           ;unmc_lcd_216.c: 173: switch(c){
  3276  002DBA  D018               	goto	l2925
  3277  002DBC                     l2915:
  3278                           
  3279                           ;unmc_lcd_216.c: 175: lcd_send_byte(0,1);
  3280  002DBC  0E01               	movlw	1
  3281  002DBE  6E03               	movwf	lcd_send_byte@n,c
  3282  002DC0  0E00               	movlw	0
  3283  002DC2  EC66  F017         	call	_lcd_send_byte
  3284                           
  3285                           ;unmc_lcd_216.c: 176: break;
  3286  002DC6  0012               	return	
  3287  002DC8                     l2917:
  3288                           
  3289                           ;unmc_lcd_216.c: 178: lcd_gotoxy(1,2);
  3290  002DC8  0E02               	movlw	2
  3291  002DCA  6E05               	movwf	lcd_gotoxy@y,c
  3292  002DCC  0E01               	movlw	1
  3293  002DCE  ECA6  F017         	call	_lcd_gotoxy
  3294                           
  3295                           ;unmc_lcd_216.c: 179: break;
  3296  002DD2  0012               	return	
  3297  002DD4                     l2919:
  3298                           
  3299                           ;unmc_lcd_216.c: 181: lcd_send_byte(0,0x10);
  3300  002DD4  0E10               	movlw	16
  3301  002DD6  6E03               	movwf	lcd_send_byte@n,c
  3302  002DD8  0E00               	movlw	0
  3303  002DDA  EC66  F017         	call	_lcd_send_byte
  3304                           
  3305                           ;unmc_lcd_216.c: 182: break;
  3306  002DDE  0012               	return	
  3307  002DE0                     l2921:
  3308                           
  3309                           ;unmc_lcd_216.c: 184: lcd_send_byte(1,c);
  3310  002DE0  C008  F003         	movff	lcd_putc@c,lcd_send_byte@n
  3311  002DE4  0E01               	movlw	1
  3312  002DE6  EC66  F017         	call	_lcd_send_byte
  3313                           
  3314                           ;unmc_lcd_216.c: 186: }
  3315                           
  3316                           ;unmc_lcd_216.c: 185: break;
  3317  002DEA  0012               	return	
  3318  002DEC                     l2925:
  3319  002DEC  5008               	movf	lcd_putc@c,w,c
  3320                           
  3321                           ; Switch size 1, requested type "space"
  3322                           ; Number of cases is 3, Range of values is 8 to 12
  3323                           ; switch strategies available:
  3324                           ; Name         Instructions Cycles
  3325                           ; simple_byte           10     6 (average)
  3326                           ;	Chosen strategy is simple_byte
  3327  002DEE  0A08               	xorlw	8	; case 8
  3328  002DF0  B4D8               	btfsc	status,2,c
  3329  002DF2  D7F0               	goto	l2919
  3330  002DF4  0A02               	xorlw	2	; case 10
  3331  002DF6  B4D8               	btfsc	status,2,c
  3332  002DF8  D7E7               	goto	l2917
  3333  002DFA  0A06               	xorlw	6	; case 12
  3334  002DFC  B4D8               	btfsc	status,2,c
  3335  002DFE  D7DE               	goto	l2915
  3336  002E00  D7EF               	goto	l2921
  3337  002E02  0012               	return		;funcret
  3338  002E04                     __end_of_lcd_putc:
  3339                           	opt stack 0
  3340                           tblptru	equ	0xFF8
  3341                           tblptrh	equ	0xFF7
  3342                           tblptrl	equ	0xFF6
  3343                           tablat	equ	0xFF5
  3344                           prodh	equ	0xFF4
  3345                           prodl	equ	0xFF3
  3346                           indf0	equ	0xFEF
  3347                           postinc0	equ	0xFEE
  3348                           fsr0h	equ	0xFEA
  3349                           fsr0l	equ	0xFE9
  3350                           wreg	equ	0xFE8
  3351                           postdec1	equ	0xFE5
  3352                           fsr1l	equ	0xFE1
  3353                           indf2	equ	0xFDF
  3354                           postinc2	equ	0xFDE
  3355                           postdec2	equ	0xFDD
  3356                           fsr2h	equ	0xFDA
  3357                           fsr2l	equ	0xFD9
  3358                           status	equ	0xFD8
  3359                           
  3360 ;; *************** function _lcd_gotoxy *****************
  3361 ;; Defined at:
  3362 ;;		line 158 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3363 ;; Parameters:    Size  Location     Type
  3364 ;;  x               1    wreg     unsigned char 
  3365 ;;  y               1    4[COMRAM] unsigned char 
  3366 ;; Auto vars:     Size  Location     Type
  3367 ;;  x               1    5[COMRAM] unsigned char 
  3368 ;;  address         1    6[COMRAM] unsigned char 
  3369 ;; Return value:  Size  Location     Type
  3370 ;;		None               void
  3371 ;; Registers used:
  3372 ;;		wreg, status,2, status,0, cstack
  3373 ;; Tracked objects:
  3374 ;;		On entry : 0/0
  3375 ;;		On exit  : 0/0
  3376 ;;		Unchanged: 0/0
  3377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3378 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3379 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3381 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3382 ;;Total ram usage:        3 bytes
  3383 ;; Hardware stack levels used:    1
  3384 ;; Hardware stack levels required when called:    2
  3385 ;; This function calls:
  3386 ;;		_lcd_send_byte
  3387 ;; This function is called by:
  3388 ;;		_main
  3389 ;;		_lcd_putc
  3390 ;;		_write_Date
  3391 ;;		_twinkle
  3392 ;;		_set_vision
  3393 ;; This function uses a non-reentrant model
  3394 ;;
  3395                           
  3396                           	psect	text11
  3397  002F4C                     __ptext11:
  3398                           	opt stack 0
  3399  002F4C                     _lcd_gotoxy:
  3400                           	opt stack 24
  3401                           
  3402                           ;incstack = 0
  3403                           ;lcd_gotoxy@x stored from wreg
  3404  002F4C  6E06               	movwf	lcd_gotoxy@x,c
  3405                           
  3406                           ;unmc_lcd_216.c: 159: int8 address;
  3407                           ;unmc_lcd_216.c: 161: if(y != 1)
  3408  002F4E  0405               	decf	lcd_gotoxy@y,w,c
  3409  002F50  B4D8               	btfsc	status,2,c
  3410  002F52  D002               	goto	l2871
  3411                           
  3412                           ;unmc_lcd_216.c: 162: address = 0x40;
  3413  002F54  0E40               	movlw	64
  3414  002F56  D001               	goto	L2
  3415  002F58                     l2871:
  3416                           
  3417                           ;unmc_lcd_216.c: 163: else
  3418                           ;unmc_lcd_216.c: 164: address=0;
  3419  002F58  0E00               	movlw	0
  3420  002F5A                     L2:
  3421  002F5A  6E07               	movwf	lcd_gotoxy@address,c
  3422  002F5C  D000               	goto	l2873
  3423  002F5E                     l2873:
  3424                           
  3425                           ;unmc_lcd_216.c: 166: address += x-1;
  3426  002F5E  0406               	decf	lcd_gotoxy@x,w,c
  3427  002F60  2607               	addwf	lcd_gotoxy@address,f,c
  3428                           
  3429                           ;unmc_lcd_216.c: 167: lcd_send_byte(0, 0x80 | address);
  3430  002F62  5007               	movf	lcd_gotoxy@address,w,c
  3431  002F64  0980               	iorlw	128
  3432  002F66  6E03               	movwf	lcd_send_byte@n,c
  3433  002F68  0E00               	movlw	0
  3434  002F6A  EC66  F017         	call	_lcd_send_byte
  3435  002F6E  0012               	return		;funcret
  3436  002F70                     __end_of_lcd_gotoxy:
  3437                           	opt stack 0
  3438                           tblptru	equ	0xFF8
  3439                           tblptrh	equ	0xFF7
  3440                           tblptrl	equ	0xFF6
  3441                           tablat	equ	0xFF5
  3442                           prodh	equ	0xFF4
  3443                           prodl	equ	0xFF3
  3444                           indf0	equ	0xFEF
  3445                           postinc0	equ	0xFEE
  3446                           fsr0h	equ	0xFEA
  3447                           fsr0l	equ	0xFE9
  3448                           wreg	equ	0xFE8
  3449                           postdec1	equ	0xFE5
  3450                           fsr1l	equ	0xFE1
  3451                           indf2	equ	0xFDF
  3452                           postinc2	equ	0xFDE
  3453                           postdec2	equ	0xFDD
  3454                           fsr2h	equ	0xFDA
  3455                           fsr2l	equ	0xFD9
  3456                           status	equ	0xFD8
  3457                           
  3458 ;; *************** function __delay_s *****************
  3459 ;; Defined at:
  3460 ;;		line 21 in file "lcd_vision.c"
  3461 ;; Parameters:    Size  Location     Type
  3462 ;;  millis          2    8[COMRAM] int 
  3463 ;; Auto vars:     Size  Location     Type
  3464 ;;  index           2   13[COMRAM] short 
  3465 ;;  it              2   11[COMRAM] short 
  3466 ;; Return value:  Size  Location     Type
  3467 ;;		None               void
  3468 ;; Registers used:
  3469 ;;		wreg, status,2, status,0, cstack
  3470 ;; Tracked objects:
  3471 ;;		On entry : 0/0
  3472 ;;		On exit  : 0/0
  3473 ;;		Unchanged: 0/0
  3474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3475 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3476 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3477 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3478 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3479 ;;Total ram usage:        7 bytes
  3480 ;; Hardware stack levels used:    1
  3481 ;; Hardware stack levels required when called:    1
  3482 ;; This function calls:
  3483 ;;		___awdiv
  3484 ;; This function is called by:
  3485 ;;		_twinkle
  3486 ;; This function uses a non-reentrant model
  3487 ;;
  3488                           
  3489                           	psect	text12
  3490  002C6A                     __ptext12:
  3491                           	opt stack 0
  3492  002C6A                     __delay_s:
  3493                           	opt stack 27
  3494                           
  3495                           ;lcd_vision.c: 22: short it = millis/100;
  3496                           
  3497                           ;incstack = 0
  3498  002C6A  C009  F001         	movff	__delay_s@millis,___awdiv@dividend
  3499  002C6E  C00A  F002         	movff	__delay_s@millis+1,___awdiv@dividend+1
  3500  002C72  0E00               	movlw	0
  3501  002C74  6E04               	movwf	___awdiv@divisor+1,c
  3502  002C76  0E64               	movlw	100
  3503  002C78  6E03               	movwf	___awdiv@divisor,c
  3504  002C7A  ECDD  F013         	call	___awdiv	;wreg free
  3505  002C7E  C001  F00C         	movff	?___awdiv,__delay_s@it
  3506  002C82  C002  F00D         	movff	?___awdiv+1,__delay_s@it+1
  3507                           
  3508                           ;lcd_vision.c: 23: short index = 1;
  3509  002C86  0E00               	movlw	0
  3510  002C88  6E0F               	movwf	__delay_s@index+1,c
  3511  002C8A  0E01               	movlw	1
  3512  002C8C  6E0E               	movwf	__delay_s@index,c
  3513                           
  3514                           ;lcd_vision.c: 25: for(index = 1; index <= it; index++){
  3515  002C8E  0E00               	movlw	0
  3516  002C90  6E0F               	movwf	__delay_s@index+1,c
  3517  002C92  0E01               	movlw	1
  3518  002C94  6E0E               	movwf	__delay_s@index,c
  3519  002C96  D00A               	goto	l580
  3520  002C98                     l3711:
  3521                           
  3522                           ;lcd_vision.c: 26: _delay((unsigned long)((98)*(8000000/4000.0)));
  3523  002C98  0EFF               	movlw	255
  3524  002C9A  6E0B               	movwf	??__delay_s& (0+255),c
  3525  002C9C  0E8A               	movlw	138
  3526  002C9E                     u4317:
  3527  002C9E  2EE8               	decfsz	wreg,f,c
  3528  002CA0  D7FE               	goto	u4317
  3529  002CA2  2E0B               	decfsz	??__delay_s& (0+255),f,c
  3530  002CA4  D7FC               	goto	u4317
  3531  002CA6  D000               	nop2	
  3532  002CA8  4A0E               	infsnz	__delay_s@index,f,c
  3533  002CAA  2A0F               	incf	__delay_s@index+1,f,c
  3534  002CAC                     l580:
  3535  002CAC  500E               	movf	__delay_s@index,w,c
  3536  002CAE  5C0C               	subwf	__delay_s@it,w,c
  3537  002CB0  500D               	movf	__delay_s@it+1,w,c
  3538  002CB2  0A80               	xorlw	128
  3539  002CB4  6E0B               	movwf	??__delay_s& (0+255),c
  3540  002CB6  500F               	movf	__delay_s@index+1,w,c
  3541  002CB8  0A80               	xorlw	128
  3542  002CBA  580B               	subwfb	??__delay_s& (0+255),w,c
  3543  002CBC  B0D8               	btfsc	status,0,c
  3544  002CBE  D7EC               	goto	l3711
  3545  002CC0  0012               	return		;funcret
  3546  002CC2                     __end_of__delay_s:
  3547                           	opt stack 0
  3548                           tblptru	equ	0xFF8
  3549                           tblptrh	equ	0xFF7
  3550                           tblptrl	equ	0xFF6
  3551                           tablat	equ	0xFF5
  3552                           prodh	equ	0xFF4
  3553                           prodl	equ	0xFF3
  3554                           indf0	equ	0xFEF
  3555                           postinc0	equ	0xFEE
  3556                           fsr0h	equ	0xFEA
  3557                           fsr0l	equ	0xFE9
  3558                           wreg	equ	0xFE8
  3559                           postdec1	equ	0xFE5
  3560                           fsr1l	equ	0xFE1
  3561                           indf2	equ	0xFDF
  3562                           postinc2	equ	0xFDE
  3563                           postdec2	equ	0xFDD
  3564                           fsr2h	equ	0xFDA
  3565                           fsr2l	equ	0xFD9
  3566                           status	equ	0xFD8
  3567                           
  3568 ;; *************** function _pow *****************
  3569 ;; Defined at:
  3570 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\pow.c"
  3571 ;; Parameters:    Size  Location     Type
  3572 ;;  x               3   81[COMRAM] short 
  3573 ;;  y               3   84[COMRAM] short 
  3574 ;; Auto vars:     Size  Location     Type
  3575 ;;  yi              4    7[BANK0 ] unsigned long 
  3576 ;;  sign            1    6[BANK0 ] unsigned char 
  3577 ;; Return value:  Size  Location     Type
  3578 ;;                  3   81[COMRAM] unsigned char 
  3579 ;; Registers used:
  3580 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3581 ;; Tracked objects:
  3582 ;;		On entry : 0/0
  3583 ;;		On exit  : 0/0
  3584 ;;		Unchanged: 0/0
  3585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3586 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3587 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3589 ;;      Totals:         6      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3590 ;;Total ram usage:       17 bytes
  3591 ;; Hardware stack levels used:    1
  3592 ;; Hardware stack levels required when called:    4
  3593 ;; This function calls:
  3594 ;;		___ftge
  3595 ;;		___ftmul
  3596 ;;		___ftneg
  3597 ;;		___fttol
  3598 ;;		___lltoft
  3599 ;;		_exp
  3600 ;;		_log
  3601 ;; This function is called by:
  3602 ;;		_set_vision
  3603 ;; This function uses a non-reentrant model
  3604 ;;
  3605                           
  3606                           	psect	text13
  3607  001BF4                     __ptext13:
  3608                           	opt stack 0
  3609  001BF4                     _pow:
  3610                           	opt stack 25
  3611                           
  3612                           ;incstack = 0
  3613  001BF4  0E00               	movlw	0
  3614  001BF6  0100               	movlb	0	; () banked
  3615  001BF8  6FAE               	movwf	pow@sign& (0+255),b
  3616                           
  3617                           ; BSR set to: 0
  3618  001BFA  5052               	movf	pow@x,w,c
  3619  001BFC  1053               	iorwf	pow@x+1,w,c
  3620  001BFE  1054               	iorwf	pow@x+2,w,c
  3621  001C00  A4D8               	btfss	status,2,c
  3622  001C02  D01C               	goto	l3919
  3623                           
  3624                           ; BSR set to: 0
  3625  001C04  0E00               	movlw	0
  3626  001C06  6E01               	movwf	___ftge@ff1,c
  3627  001C08  0E00               	movlw	0
  3628  001C0A  6E02               	movwf	___ftge@ff1+1,c
  3629  001C0C  0E00               	movlw	0
  3630  001C0E  6E03               	movwf	___ftge@ff1+2,c
  3631  001C10  C055  F004         	movff	pow@y,___ftge@ff2
  3632  001C14  C056  F005         	movff	pow@y+1,___ftge@ff2+1
  3633  001C18  C057  F006         	movff	pow@y+2,___ftge@ff2+2
  3634  001C1C  EC92  F013         	call	___ftge	;wreg free
  3635  001C20  A0D8               	btfss	status,0,c
  3636  001C22  D005               	goto	l1332
  3637  001C24  0E00               	movlw	0
  3638  001C26  0100               	movlb	0	; () banked
  3639  001C28  6F83               	movwf	(_errno+1)& (0+255),b
  3640  001C2A  0E21               	movlw	33
  3641  001C2C  6F82               	movwf	_errno& (0+255),b
  3642  001C2E                     l1332:
  3643  001C2E  0E00               	movlw	0
  3644  001C30  6E52               	movwf	?_pow,c
  3645  001C32  0E00               	movlw	0
  3646  001C34  6E53               	movwf	?_pow+1,c
  3647  001C36  0E00               	movlw	0
  3648  001C38  6E54               	movwf	?_pow+2,c
  3649  001C3A  0012               	return	
  3650  001C3C                     l3919:
  3651  001C3C  5055               	movf	pow@y,w,c
  3652  001C3E  1056               	iorwf	pow@y+1,w,c
  3653  001C40  1057               	iorwf	pow@y+2,w,c
  3654  001C42  A4D8               	btfss	status,2,c
  3655  001C44  D007               	goto	l3925
  3656  001C46  0E00               	movlw	0
  3657  001C48  6E52               	movwf	?_pow,c
  3658  001C4A  0E80               	movlw	128
  3659  001C4C  6E53               	movwf	?_pow+1,c
  3660  001C4E  0E3F               	movlw	63
  3661  001C50  6E54               	movwf	?_pow+2,c
  3662  001C52  0012               	return	
  3663  001C54                     l3925:
  3664  001C54  AE54               	btfss	pow@x+2,7,c
  3665  001C56  D044               	goto	l3937
  3666  001C58  C055  F028         	movff	pow@y,___fttol@f1
  3667  001C5C  C056  F029         	movff	pow@y+1,___fttol@f1+1
  3668  001C60  C057  F02A         	movff	pow@y+2,___fttol@f1+2
  3669  001C64  EC74  F010         	call	___fttol	;wreg free
  3670  001C68  C028  F0AF         	movff	?___fttol,pow@yi
  3671  001C6C  C029  F0B0         	movff	?___fttol+1,pow@yi+1
  3672  001C70  C02A  F0B1         	movff	?___fttol+2,pow@yi+2
  3673  001C74  C02B  F0B2         	movff	?___fttol+3,pow@yi+3
  3674  001C78  C0AF  F009         	movff	pow@yi,___lltoft@c
  3675  001C7C  C0B0  F00A         	movff	pow@yi+1,___lltoft@c+1
  3676  001C80  C0B1  F00B         	movff	pow@yi+2,___lltoft@c+2
  3677  001C84  C0B2  F00C         	movff	pow@yi+3,___lltoft@c+3
  3678  001C88  ECD7  F015         	call	___lltoft	;wreg free
  3679  001C8C  5055               	movf	pow@y,w,c
  3680  001C8E  1809               	xorwf	?___lltoft,w,c
  3681  001C90  E107               	bnz	u4000
  3682  001C92  5056               	movf	pow@y+1,w,c
  3683  001C94  180A               	xorwf	?___lltoft+1,w,c
  3684  001C96  E104               	bnz	u4000
  3685  001C98  5057               	movf	pow@y+2,w,c
  3686  001C9A  180B               	xorwf	?___lltoft+2,w,c
  3687  001C9C  B4D8               	btfsc	status,2,c
  3688  001C9E  D00C               	goto	l3933
  3689  001CA0                     u4000:
  3690  001CA0  0E00               	movlw	0
  3691  001CA2  0100               	movlb	0	; () banked
  3692  001CA4  6F83               	movwf	(_errno+1)& (0+255),b
  3693  001CA6  0E21               	movlw	33
  3694  001CA8  6F82               	movwf	_errno& (0+255),b
  3695  001CAA  0E00               	movlw	0
  3696  001CAC  6E52               	movwf	?_pow,c
  3697  001CAE  0E00               	movlw	0
  3698  001CB0  6E53               	movwf	?_pow+1,c
  3699  001CB2  0E00               	movlw	0
  3700  001CB4  6E54               	movwf	?_pow+2,c
  3701                           
  3702                           ; BSR set to: 0
  3703  001CB6  0012               	return	
  3704  001CB8                     l3933:
  3705  001CB8  0100               	movlb	0	; () banked
  3706  001CBA  51AF               	movf	pow@yi& (0+255),w,b
  3707  001CBC  0B01               	andlw	1
  3708  001CBE  0100               	movlb	0	; () banked
  3709  001CC0  6FAE               	movwf	pow@sign& (0+255),b
  3710                           
  3711                           ; BSR set to: 0
  3712  001CC2  C052  F001         	movff	pow@x,___ftneg@f1
  3713  001CC6  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  3714  001CCA  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  3715  001CCE  ECB8  F017         	call	___ftneg	;wreg free
  3716  001CD2  C001  F052         	movff	?___ftneg,pow@x
  3717  001CD6  C002  F053         	movff	?___ftneg+1,pow@x+1
  3718  001CDA  C003  F054         	movff	?___ftneg+2,pow@x+2
  3719  001CDE  D000               	goto	l3937
  3720  001CE0                     l3937:
  3721  001CE0  C052  F034         	movff	pow@x,log@x
  3722  001CE4  C053  F035         	movff	pow@x+1,log@x+1
  3723  001CE8  C054  F036         	movff	pow@x+2,log@x+2
  3724  001CEC  EC5E  F00F         	call	_log	;wreg free
  3725  001CF0  C034  F0A8         	movff	?_log,_pow$2711
  3726  001CF4  C035  F0A9         	movff	?_log+1,_pow$2711+1
  3727  001CF8  C036  F0AA         	movff	?_log+2,_pow$2711+2
  3728  001CFC  C0A8  F00D         	movff	_pow$2711,___ftmul@f1
  3729  001D00  C0A9  F00E         	movff	_pow$2711+1,___ftmul@f1+1
  3730  001D04  C0AA  F00F         	movff	_pow$2711+2,___ftmul@f1+2
  3731  001D08  C055  F010         	movff	pow@y,___ftmul@f2
  3732  001D0C  C056  F011         	movff	pow@y+1,___ftmul@f2+1
  3733  001D10  C057  F012         	movff	pow@y+2,___ftmul@f2+2
  3734  001D14  ECF5  F010         	call	___ftmul	;wreg free
  3735  001D18  C00D  F0AB         	movff	?___ftmul,_pow$2712
  3736  001D1C  C00E  F0AC         	movff	?___ftmul+1,_pow$2712+1
  3737  001D20  C00F  F0AD         	movff	?___ftmul+2,_pow$2712+2
  3738  001D24  C0AB  F049         	movff	_pow$2712,exp@x
  3739  001D28  C0AC  F04A         	movff	_pow$2712+1,exp@x+1
  3740  001D2C  C0AD  F04B         	movff	_pow$2712+2,exp@x+2
  3741  001D30  EC57  F00B         	call	_exp	;wreg free
  3742  001D34  C049  F052         	movff	?_exp,pow@x
  3743  001D38  C04A  F053         	movff	?_exp+1,pow@x+1
  3744  001D3C  C04B  F054         	movff	?_exp+2,pow@x+2
  3745  001D40  0100               	movlb	0	; () banked
  3746  001D42  51AE               	movf	pow@sign& (0+255),w,b
  3747  001D44  0100               	movlb	0	; () banked
  3748  001D46  B4D8               	btfsc	status,2,c
  3749  001D48  D00F               	goto	l1337
  3750                           
  3751                           ; BSR set to: 0
  3752  001D4A  C052  F001         	movff	pow@x,___ftneg@f1
  3753  001D4E  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  3754  001D52  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  3755  001D56  ECB8  F017         	call	___ftneg	;wreg free
  3756  001D5A  C001  F052         	movff	?___ftneg,?_pow
  3757  001D5E  C002  F053         	movff	?___ftneg+1,?_pow+1
  3758  001D62  C003  F054         	movff	?___ftneg+2,?_pow+2
  3759  001D66  0012               	return	
  3760  001D68                     l1337:
  3761                           
  3762                           ; BSR set to: 0
  3763  001D68  C052  F052         	movff	pow@x,?_pow
  3764  001D6C  C053  F053         	movff	pow@x+1,?_pow+1
  3765  001D70  C054  F054         	movff	pow@x+2,?_pow+2
  3766  001D74  0012               	return		;funcret
  3767  001D76                     __end_of_pow:
  3768                           	opt stack 0
  3769                           tblptru	equ	0xFF8
  3770                           tblptrh	equ	0xFF7
  3771                           tblptrl	equ	0xFF6
  3772                           tablat	equ	0xFF5
  3773                           prodh	equ	0xFF4
  3774                           prodl	equ	0xFF3
  3775                           indf0	equ	0xFEF
  3776                           postinc0	equ	0xFEE
  3777                           fsr0h	equ	0xFEA
  3778                           fsr0l	equ	0xFE9
  3779                           wreg	equ	0xFE8
  3780                           postdec1	equ	0xFE5
  3781                           fsr1l	equ	0xFE1
  3782                           indf2	equ	0xFDF
  3783                           postinc2	equ	0xFDE
  3784                           postdec2	equ	0xFDD
  3785                           fsr2h	equ	0xFDA
  3786                           fsr2l	equ	0xFD9
  3787                           status	equ	0xFD8
  3788                           
  3789 ;; *************** function _log *****************
  3790 ;; Defined at:
  3791 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\log.c"
  3792 ;; Parameters:    Size  Location     Type
  3793 ;;  x               3   51[COMRAM] unsigned char 
  3794 ;; Auto vars:     Size  Location     Type
  3795 ;;  exponent        2   54[COMRAM] int 
  3796 ;; Return value:  Size  Location     Type
  3797 ;;                  3   51[COMRAM] int 
  3798 ;; Registers used:
  3799 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3800 ;; Tracked objects:
  3801 ;;		On entry : 0/0
  3802 ;;		On exit  : 0/0
  3803 ;;		Unchanged: 0/0
  3804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3805 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3806 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3808 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3809 ;;Total ram usage:        5 bytes
  3810 ;; Hardware stack levels used:    1
  3811 ;; Hardware stack levels required when called:    3
  3812 ;; This function calls:
  3813 ;;		___awtoft
  3814 ;;		___ftadd
  3815 ;;		___ftmul
  3816 ;;		_eval_poly
  3817 ;;		_frexp
  3818 ;; This function is called by:
  3819 ;;		_pow
  3820 ;; This function uses a non-reentrant model
  3821 ;;
  3822                           
  3823                           	psect	text14
  3824  001EBC                     __ptext14:
  3825                           	opt stack 0
  3826  001EBC                     _log:
  3827                           	opt stack 25
  3828                           
  3829                           ;incstack = 0
  3830  001EBC  AE36               	btfss	log@x+2,7,c
  3831  001EBE  D00C               	goto	l3731
  3832  001EC0  0E00               	movlw	0
  3833  001EC2  0100               	movlb	0	; () banked
  3834  001EC4  6F83               	movwf	(_errno+1)& (0+255),b
  3835  001EC6  0E21               	movlw	33
  3836  001EC8  6F82               	movwf	_errno& (0+255),b
  3837  001ECA  0E00               	movlw	0
  3838  001ECC  6E34               	movwf	?_log,c
  3839  001ECE  0E00               	movlw	0
  3840  001ED0  6E35               	movwf	?_log+1,c
  3841  001ED2  0E00               	movlw	0
  3842  001ED4  6E36               	movwf	?_log+2,c
  3843                           
  3844                           ; BSR set to: 0
  3845  001ED6  0012               	return	
  3846  001ED8                     l3731:
  3847  001ED8  5034               	movf	log@x,w,c
  3848  001EDA  1035               	iorwf	log@x+1,w,c
  3849  001EDC  1036               	iorwf	log@x+2,w,c
  3850  001EDE  A4D8               	btfss	status,2,c
  3851  001EE0  D00C               	goto	l3737
  3852  001EE2  0E00               	movlw	0
  3853  001EE4  0100               	movlb	0	; () banked
  3854  001EE6  6F83               	movwf	(_errno+1)& (0+255),b
  3855  001EE8  0E22               	movlw	34
  3856  001EEA  6F82               	movwf	_errno& (0+255),b
  3857  001EEC  0E00               	movlw	0
  3858  001EEE  6E34               	movwf	?_log,c
  3859  001EF0  0E00               	movlw	0
  3860  001EF2  6E35               	movwf	?_log+1,c
  3861  001EF4  0E00               	movlw	0
  3862  001EF6  6E36               	movwf	?_log+2,c
  3863                           
  3864                           ; BSR set to: 0
  3865  001EF8  0012               	return	
  3866  001EFA                     l3737:
  3867  001EFA  0E00               	movlw	0
  3868  001EFC  6E10               	movwf	___ftmul@f2,c
  3869  001EFE  0E00               	movlw	0
  3870  001F00  6E11               	movwf	___ftmul@f2+1,c
  3871  001F02  0E40               	movlw	64
  3872  001F04  6E12               	movwf	___ftmul@f2+2,c
  3873  001F06  0E37               	movlw	low log@exponent
  3874  001F08  6E04               	movwf	frexp@eptr,c
  3875  001F0A  0E00               	movlw	high log@exponent
  3876  001F0C  6E05               	movwf	frexp@eptr+1,c
  3877  001F0E  C034  F001         	movff	log@x,frexp@value
  3878  001F12  C035  F002         	movff	log@x+1,frexp@value+1
  3879  001F16  C036  F003         	movff	log@x+2,frexp@value+2
  3880  001F1A  EC28  F014         	call	_frexp	;wreg free
  3881  001F1E  C001  F00D         	movff	?_frexp,___ftmul@f1
  3882  001F22  C002  F00E         	movff	?_frexp+1,___ftmul@f1+1
  3883  001F26  C003  F00F         	movff	?_frexp+2,___ftmul@f1+2
  3884  001F2A  ECF5  F010         	call	___ftmul	;wreg free
  3885  001F2E  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  3886  001F32  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  3887  001F36  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  3888  001F3A  0E00               	movlw	0
  3889  001F3C  6E1F               	movwf	___ftadd@f2,c
  3890  001F3E  0E80               	movlw	128
  3891  001F40  6E20               	movwf	___ftadd@f2+1,c
  3892  001F42  0EBF               	movlw	191
  3893  001F44  6E21               	movwf	___ftadd@f2+2,c
  3894  001F46  EC4B  F00C         	call	___ftadd	;wreg free
  3895  001F4A  C01C  F034         	movff	?___ftadd,log@x
  3896  001F4E  C01D  F035         	movff	?___ftadd+1,log@x+1
  3897  001F52  C01E  F036         	movff	?___ftadd+2,log@x+2
  3898  001F56  0637               	decf	log@exponent,f,c
  3899  001F58  A0D8               	btfss	status,0,c
  3900  001F5A  0638               	decf	log@exponent+1,f,c
  3901  001F5C  C034  F028         	movff	log@x,eval_poly@x
  3902  001F60  C035  F029         	movff	log@x+1,eval_poly@x+1
  3903  001F64  C036  F02A         	movff	log@x+2,eval_poly@x+2
  3904  001F68  0E2D               	movlw	low log@coeff
  3905  001F6A  6E2B               	movwf	eval_poly@d,c
  3906  001F6C  0E0F               	movlw	high log@coeff
  3907  001F6E  6E2C               	movwf	eval_poly@d+1,c
  3908  001F70  0E00               	movlw	0
  3909  001F72  6E2E               	movwf	eval_poly@n+1,c
  3910  001F74  0E08               	movlw	8
  3911  001F76  6E2D               	movwf	eval_poly@n,c
  3912  001F78  ECC5  F012         	call	_eval_poly	;wreg free
  3913  001F7C  C028  F034         	movff	?_eval_poly,log@x
  3914  001F80  C029  F035         	movff	?_eval_poly+1,log@x+1
  3915  001F84  C02A  F036         	movff	?_eval_poly+2,log@x+2
  3916  001F88  0E72               	movlw	114
  3917  001F8A  6E10               	movwf	___ftmul@f2,c
  3918  001F8C  0E31               	movlw	49
  3919  001F8E  6E11               	movwf	___ftmul@f2+1,c
  3920  001F90  0E3F               	movlw	63
  3921  001F92  6E12               	movwf	___ftmul@f2+2,c
  3922  001F94  C037  F009         	movff	log@exponent,___awtoft@c
  3923  001F98  C038  F00A         	movff	log@exponent+1,___awtoft@c+1
  3924  001F9C  EC48  F017         	call	___awtoft	;wreg free
  3925  001FA0  C009  F00D         	movff	?___awtoft,___ftmul@f1
  3926  001FA4  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  3927  001FA8  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  3928  001FAC  ECF5  F010         	call	___ftmul	;wreg free
  3929  001FB0  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  3930  001FB4  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  3931  001FB8  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  3932  001FBC  C034  F01F         	movff	log@x,___ftadd@f2
  3933  001FC0  C035  F020         	movff	log@x+1,___ftadd@f2+1
  3934  001FC4  C036  F021         	movff	log@x+2,___ftadd@f2+2
  3935  001FC8  EC4B  F00C         	call	___ftadd	;wreg free
  3936  001FCC  C01C  F034         	movff	?___ftadd,?_log
  3937  001FD0  C01D  F035         	movff	?___ftadd+1,?_log+1
  3938  001FD4  C01E  F036         	movff	?___ftadd+2,?_log+2
  3939  001FD8  0012               	return	
  3940  001FDA  0012               	return		;funcret
  3941  001FDC                     __end_of_log:
  3942                           	opt stack 0
  3943                           tblptru	equ	0xFF8
  3944                           tblptrh	equ	0xFF7
  3945                           tblptrl	equ	0xFF6
  3946                           tablat	equ	0xFF5
  3947                           prodh	equ	0xFF4
  3948                           prodl	equ	0xFF3
  3949                           indf0	equ	0xFEF
  3950                           postinc0	equ	0xFEE
  3951                           fsr0h	equ	0xFEA
  3952                           fsr0l	equ	0xFE9
  3953                           wreg	equ	0xFE8
  3954                           postdec1	equ	0xFE5
  3955                           fsr1l	equ	0xFE1
  3956                           indf2	equ	0xFDF
  3957                           postinc2	equ	0xFDE
  3958                           postdec2	equ	0xFDD
  3959                           fsr2h	equ	0xFDA
  3960                           fsr2l	equ	0xFD9
  3961                           status	equ	0xFD8
  3962                           
  3963 ;; *************** function _exp *****************
  3964 ;; Defined at:
  3965 ;;		line 12 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\exp.c"
  3966 ;; Parameters:    Size  Location     Type
  3967 ;;  x               3   72[COMRAM] int 
  3968 ;; Auto vars:     Size  Location     Type
  3969 ;;  exponent        2   78[COMRAM] int 
  3970 ;;  sign            1   80[COMRAM] unsigned char 
  3971 ;; Return value:  Size  Location     Type
  3972 ;;                  3   72[COMRAM] unsigned char 
  3973 ;; Registers used:
  3974 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3975 ;; Tracked objects:
  3976 ;;		On entry : 0/0
  3977 ;;		On exit  : 0/0
  3978 ;;		Unchanged: 0/0
  3979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3980 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3981 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3983 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3984 ;;Total ram usage:        9 bytes
  3985 ;; Hardware stack levels used:    1
  3986 ;; Hardware stack levels required when called:    3
  3987 ;; This function calls:
  3988 ;;		___awtoft
  3989 ;;		___ftdiv
  3990 ;;		___ftge
  3991 ;;		___ftmul
  3992 ;;		___ftneg
  3993 ;;		___ftsub
  3994 ;;		___fttol
  3995 ;;		_eval_poly
  3996 ;;		_floor
  3997 ;;		_ldexp
  3998 ;; This function is called by:
  3999 ;;		_pow
  4000 ;; This function uses a non-reentrant model
  4001 ;;
  4002                           
  4003                           	psect	text15
  4004  0016AE                     __ptext15:
  4005                           	opt stack 0
  4006  0016AE                     _exp:
  4007                           	opt stack 25
  4008                           
  4009                           ;incstack = 0
  4010  0016AE  5049               	movf	exp@x,w,c
  4011  0016B0  104A               	iorwf	exp@x+1,w,c
  4012  0016B2  104B               	iorwf	exp@x+2,w,c
  4013  0016B4  A4D8               	btfss	status,2,c
  4014  0016B6  D007               	goto	l3753
  4015  0016B8  0E00               	movlw	0
  4016  0016BA  6E49               	movwf	?_exp,c
  4017  0016BC  0E80               	movlw	128
  4018  0016BE  6E4A               	movwf	?_exp+1,c
  4019  0016C0  0E3F               	movlw	63
  4020  0016C2  6E4B               	movwf	?_exp+2,c
  4021  0016C4  0012               	return	
  4022  0016C6                     l3753:
  4023  0016C6  0E72               	movlw	114
  4024  0016C8  6E01               	movwf	___ftge@ff1,c
  4025  0016CA  0E31               	movlw	49
  4026  0016CC  6E02               	movwf	___ftge@ff1+1,c
  4027  0016CE  0E44               	movlw	68
  4028  0016D0  6E03               	movwf	___ftge@ff1+2,c
  4029  0016D2  C049  F004         	movff	exp@x,___ftge@ff2
  4030  0016D6  C04A  F005         	movff	exp@x+1,___ftge@ff2+1
  4031  0016DA  C04B  F006         	movff	exp@x+2,___ftge@ff2+2
  4032  0016DE  EC92  F013         	call	___ftge	;wreg free
  4033  0016E2  B0D8               	btfsc	status,0,c
  4034  0016E4  D00C               	goto	l3759
  4035  0016E6  0E00               	movlw	0
  4036  0016E8  0100               	movlb	0	; () banked
  4037  0016EA  6F83               	movwf	(_errno+1)& (0+255),b
  4038  0016EC  0E22               	movlw	34
  4039  0016EE  6F82               	movwf	_errno& (0+255),b
  4040  0016F0  0EFF               	movlw	255
  4041  0016F2  6E49               	movwf	?_exp,c
  4042  0016F4  0E7F               	movlw	127
  4043  0016F6  6E4A               	movwf	?_exp+1,c
  4044  0016F8  0E7F               	movlw	127
  4045  0016FA  6E4B               	movwf	?_exp+2,c
  4046                           
  4047                           ; BSR set to: 0
  4048  0016FC  0012               	return	
  4049  0016FE                     l3759:
  4050  0016FE  C049  F001         	movff	exp@x,___ftge@ff1
  4051  001702  C04A  F002         	movff	exp@x+1,___ftge@ff1+1
  4052  001706  C04B  F003         	movff	exp@x+2,___ftge@ff1+2
  4053  00170A  0E49               	movlw	73
  4054  00170C  6E04               	movwf	___ftge@ff2,c
  4055  00170E  0E3A               	movlw	58
  4056  001710  6E05               	movwf	___ftge@ff2+1,c
  4057  001712  0EC4               	movlw	196
  4058  001714  6E06               	movwf	___ftge@ff2+2,c
  4059  001716  EC92  F013         	call	___ftge	;wreg free
  4060  00171A  B0D8               	btfsc	status,0,c
  4061  00171C  D00C               	goto	l3765
  4062  00171E  0E00               	movlw	0
  4063  001720  0100               	movlb	0	; () banked
  4064  001722  6F83               	movwf	(_errno+1)& (0+255),b
  4065  001724  0E22               	movlw	34
  4066  001726  6F82               	movwf	_errno& (0+255),b
  4067  001728  0E00               	movlw	0
  4068  00172A  6E49               	movwf	?_exp,c
  4069  00172C  0E00               	movlw	0
  4070  00172E  6E4A               	movwf	?_exp+1,c
  4071  001730  0E00               	movlw	0
  4072  001732  6E4B               	movwf	?_exp+2,c
  4073                           
  4074                           ; BSR set to: 0
  4075  001734  0012               	return	
  4076  001736                     l3765:
  4077  001736  AE4B               	btfss	exp@x+2,7,c
  4078  001738  D002               	goto	u3860
  4079  00173A  0E01               	movlw	1
  4080  00173C  D001               	goto	u3870
  4081  00173E                     u3860:
  4082  00173E  0E00               	movlw	0
  4083  001740                     u3870:
  4084  001740  6E51               	movwf	exp@sign,c
  4085  001742  5051               	movf	exp@sign,w,c
  4086  001744  B4D8               	btfsc	status,2,c
  4087  001746  D00E               	goto	l1356
  4088  001748  C049  F001         	movff	exp@x,___ftneg@f1
  4089  00174C  C04A  F002         	movff	exp@x+1,___ftneg@f1+1
  4090  001750  C04B  F003         	movff	exp@x+2,___ftneg@f1+2
  4091  001754  ECB8  F017         	call	___ftneg	;wreg free
  4092  001758  C001  F049         	movff	?___ftneg,exp@x
  4093  00175C  C002  F04A         	movff	?___ftneg+1,exp@x+1
  4094  001760  C003  F04B         	movff	?___ftneg+2,exp@x+2
  4095  001764                     l1356:
  4096  001764  C049  F00D         	movff	exp@x,___ftmul@f1
  4097  001768  C04A  F00E         	movff	exp@x+1,___ftmul@f1+1
  4098  00176C  C04B  F00F         	movff	exp@x+2,___ftmul@f1+2
  4099  001770  0EAA               	movlw	170
  4100  001772  6E10               	movwf	___ftmul@f2,c
  4101  001774  0EB8               	movlw	184
  4102  001776  6E11               	movwf	___ftmul@f2+1,c
  4103  001778  0E3F               	movlw	63
  4104  00177A  6E12               	movwf	___ftmul@f2+2,c
  4105  00177C  ECF5  F010         	call	___ftmul	;wreg free
  4106  001780  C00D  F049         	movff	?___ftmul,exp@x
  4107  001784  C00E  F04A         	movff	?___ftmul+1,exp@x+1
  4108  001788  C00F  F04B         	movff	?___ftmul+2,exp@x+2
  4109  00178C  C049  F041         	movff	exp@x,floor@x
  4110  001790  C04A  F042         	movff	exp@x+1,floor@x+1
  4111  001794  C04B  F043         	movff	exp@x+2,floor@x+2
  4112  001798  ECEC  F011         	call	_floor	;wreg free
  4113  00179C  C041  F04C         	movff	?_floor,_exp$2713
  4114  0017A0  C042  F04D         	movff	?_floor+1,_exp$2713+1
  4115  0017A4  C043  F04E         	movff	?_floor+2,_exp$2713+2
  4116  0017A8  C04C  F028         	movff	_exp$2713,___fttol@f1
  4117  0017AC  C04D  F029         	movff	_exp$2713+1,___fttol@f1+1
  4118  0017B0  C04E  F02A         	movff	_exp$2713+2,___fttol@f1+2
  4119  0017B4  EC74  F010         	call	___fttol	;wreg free
  4120  0017B8  C028  F04F         	movff	?___fttol,exp@exponent
  4121  0017BC  C029  F050         	movff	?___fttol+1,exp@exponent+1
  4122  0017C0  C049  F028         	movff	exp@x,___ftsub@f1
  4123  0017C4  C04A  F029         	movff	exp@x+1,___ftsub@f1+1
  4124  0017C8  C04B  F02A         	movff	exp@x+2,___ftsub@f1+2
  4125  0017CC  C04F  F009         	movff	exp@exponent,___awtoft@c
  4126  0017D0  C050  F00A         	movff	exp@exponent+1,___awtoft@c+1
  4127  0017D4  EC48  F017         	call	___awtoft	;wreg free
  4128  0017D8  C009  F02B         	movff	?___awtoft,___ftsub@f2
  4129  0017DC  C00A  F02C         	movff	?___awtoft+1,___ftsub@f2+1
  4130  0017E0  C00B  F02D         	movff	?___awtoft+2,___ftsub@f2+2
  4131  0017E4  EC26  F017         	call	___ftsub	;wreg free
  4132  0017E8  C028  F049         	movff	?___ftsub,exp@x
  4133  0017EC  C029  F04A         	movff	?___ftsub+1,exp@x+1
  4134  0017F0  C02A  F04B         	movff	?___ftsub+2,exp@x+2
  4135  0017F4  C049  F028         	movff	exp@x,eval_poly@x
  4136  0017F8  C04A  F029         	movff	exp@x+1,eval_poly@x+1
  4137  0017FC  C04B  F02A         	movff	exp@x+2,eval_poly@x+2
  4138  001800  0E0F               	movlw	low exp@coeff
  4139  001802  6E2B               	movwf	eval_poly@d,c
  4140  001804  0E0F               	movlw	high exp@coeff
  4141  001806  6E2C               	movwf	eval_poly@d+1,c
  4142  001808  0E00               	movlw	0
  4143  00180A  6E2E               	movwf	eval_poly@n+1,c
  4144  00180C  0E09               	movlw	9
  4145  00180E  6E2D               	movwf	eval_poly@n,c
  4146  001810  ECC5  F012         	call	_eval_poly	;wreg free
  4147  001814  C028  F034         	movff	?_eval_poly,ldexp@value
  4148  001818  C029  F035         	movff	?_eval_poly+1,ldexp@value+1
  4149  00181C  C02A  F036         	movff	?_eval_poly+2,ldexp@value+2
  4150  001820  C04F  F037         	movff	exp@exponent,ldexp@newexp
  4151  001824  C050  F038         	movff	exp@exponent+1,ldexp@newexp+1
  4152  001828  EC5B  F012         	call	_ldexp	;wreg free
  4153  00182C  C034  F049         	movff	?_ldexp,exp@x
  4154  001830  C035  F04A         	movff	?_ldexp+1,exp@x+1
  4155  001834  C036  F04B         	movff	?_ldexp+2,exp@x+2
  4156  001838  5051               	movf	exp@sign,w,c
  4157  00183A  B4D8               	btfsc	status,2,c
  4158  00183C  D025               	goto	l1357
  4159  00183E  2849               	incf	exp@x,w,c
  4160  001840  E10E               	bnz	l3787
  4161  001842  0E7F               	movlw	127
  4162  001844  184A               	xorwf	exp@x+1,w,c
  4163  001846  E10B               	bnz	l3787
  4164  001848  0E7F               	movlw	127
  4165  00184A  184B               	xorwf	exp@x+2,w,c
  4166  00184C  A4D8               	btfss	status,2,c
  4167  00184E  D007               	goto	l3787
  4168  001850  0E00               	movlw	0
  4169  001852  6E49               	movwf	?_exp,c
  4170  001854  0E00               	movlw	0
  4171  001856  6E4A               	movwf	?_exp+1,c
  4172  001858  0E00               	movlw	0
  4173  00185A  6E4B               	movwf	?_exp+2,c
  4174  00185C  0012               	return	
  4175  00185E                     l3787:
  4176  00185E  0E00               	movlw	0
  4177  001860  6E09               	movwf	___ftdiv@f1,c
  4178  001862  0E80               	movlw	128
  4179  001864  6E0A               	movwf	___ftdiv@f1+1,c
  4180  001866  0E3F               	movlw	63
  4181  001868  6E0B               	movwf	___ftdiv@f1+2,c
  4182  00186A  C049  F00C         	movff	exp@x,___ftdiv@f2
  4183  00186E  C04A  F00D         	movff	exp@x+1,___ftdiv@f2+1
  4184  001872  C04B  F00E         	movff	exp@x+2,___ftdiv@f2+2
  4185  001876  EC76  F011         	call	___ftdiv	;wreg free
  4186  00187A  C009  F049         	movff	?___ftdiv,?_exp
  4187  00187E  C00A  F04A         	movff	?___ftdiv+1,?_exp+1
  4188  001882  C00B  F04B         	movff	?___ftdiv+2,?_exp+2
  4189  001886  0012               	return	
  4190  001888                     l1357:
  4191  001888  C049  F049         	movff	exp@x,?_exp
  4192  00188C  C04A  F04A         	movff	exp@x+1,?_exp+1
  4193  001890  C04B  F04B         	movff	exp@x+2,?_exp+2
  4194  001894  0012               	return		;funcret
  4195  001896                     __end_of_exp:
  4196                           	opt stack 0
  4197                           tblptru	equ	0xFF8
  4198                           tblptrh	equ	0xFF7
  4199                           tblptrl	equ	0xFF6
  4200                           tablat	equ	0xFF5
  4201                           prodh	equ	0xFF4
  4202                           prodl	equ	0xFF3
  4203                           indf0	equ	0xFEF
  4204                           postinc0	equ	0xFEE
  4205                           fsr0h	equ	0xFEA
  4206                           fsr0l	equ	0xFE9
  4207                           wreg	equ	0xFE8
  4208                           postdec1	equ	0xFE5
  4209                           fsr1l	equ	0xFE1
  4210                           indf2	equ	0xFDF
  4211                           postinc2	equ	0xFDE
  4212                           postdec2	equ	0xFDD
  4213                           fsr2h	equ	0xFDA
  4214                           fsr2l	equ	0xFD9
  4215                           status	equ	0xFD8
  4216                           
  4217 ;; *************** function _ldexp *****************
  4218 ;; Defined at:
  4219 ;;		line 277 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\frexp.c"
  4220 ;; Parameters:    Size  Location     Type
  4221 ;;  value           3   51[COMRAM] unsigned char 
  4222 ;;  newexp          2   54[COMRAM] int 
  4223 ;; Auto vars:     Size  Location     Type
  4224 ;;		None
  4225 ;; Return value:  Size  Location     Type
  4226 ;;                  3   51[COMRAM] int 
  4227 ;; Registers used:
  4228 ;;		wreg, status,2, status,0
  4229 ;; Tracked objects:
  4230 ;;		On entry : 0/0
  4231 ;;		On exit  : 0/0
  4232 ;;		Unchanged: 0/0
  4233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4234 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4236 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4237 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4238 ;;Total ram usage:        7 bytes
  4239 ;; Hardware stack levels used:    1
  4240 ;; This function calls:
  4241 ;;		Nothing
  4242 ;; This function is called by:
  4243 ;;		_exp
  4244 ;; This function uses a non-reentrant model
  4245 ;;
  4246                           
  4247                           	psect	text16
  4248  0024B6                     __ptext16:
  4249                           	opt stack 0
  4250  0024B6                     _ldexp:
  4251                           	opt stack 27
  4252                           
  4253                           ;incstack = 0
  4254  0024B6  5034               	movf	ldexp@value,w,c
  4255  0024B8  1035               	iorwf	ldexp@value+1,w,c
  4256  0024BA  1036               	iorwf	ldexp@value+2,w,c
  4257  0024BC  A4D8               	btfss	status,2,c
  4258  0024BE  D007               	goto	l3457
  4259  0024C0  0E00               	movlw	0
  4260  0024C2  6E34               	movwf	?_ldexp,c
  4261  0024C4  0E00               	movlw	0
  4262  0024C6  6E35               	movwf	?_ldexp+1,c
  4263  0024C8  0E00               	movlw	0
  4264  0024CA  6E36               	movwf	?_ldexp+2,c
  4265  0024CC  0012               	return	
  4266  0024CE                     l3457:
  4267  0024CE  5036               	movf	ldexp@value+2,w,c
  4268  0024D0  0B7F               	andlw	127
  4269  0024D2  6E39               	movwf	??_ldexp& (0+255),c
  4270  0024D4  6A3A               	clrf	(??_ldexp+1)& (0+255),c
  4271  0024D6  90D8               	bcf	status,0,c
  4272  0024D8  3639               	rlcf	??_ldexp,f,c
  4273  0024DA  363A               	rlcf	??_ldexp+1,f,c
  4274  0024DC  5039               	movf	??_ldexp,w,c
  4275  0024DE  2637               	addwf	ldexp@newexp,f,c
  4276  0024E0  503A               	movf	??_ldexp+1,w,c
  4277  0024E2  2238               	addwfc	ldexp@newexp+1,f,c
  4278  0024E4  AE35               	btfss	ldexp@value+1,7,c
  4279  0024E6  D003               	goto	u3190
  4280  0024E8  6A39               	clrf	??_ldexp& (0+255),c
  4281  0024EA  2A39               	incf	??_ldexp& (0+255),f,c
  4282  0024EC  D001               	goto	u3198
  4283  0024EE                     u3190:
  4284  0024EE  6A39               	clrf	??_ldexp& (0+255),c
  4285  0024F0                     u3198:
  4286  0024F0  5039               	movf	??_ldexp,w,c
  4287  0024F2  2637               	addwf	ldexp@newexp,f,c
  4288  0024F4  0E00               	movlw	0
  4289  0024F6  2238               	addwfc	ldexp@newexp+1,f,c
  4290  0024F8  AE38               	btfss	ldexp@newexp+1,7,c
  4291  0024FA  D00D               	goto	l3465
  4292  0024FC  0E00               	movlw	0
  4293  0024FE  0100               	movlb	0	; () banked
  4294  002500  6F83               	movwf	(_errno+1)& (0+255),b
  4295  002502  0E22               	movlw	34
  4296  002504  6F82               	movwf	_errno& (0+255),b
  4297  002506  0E00               	movlw	0
  4298  002508  6E34               	movwf	?_ldexp,c
  4299  00250A  0E00               	movlw	0
  4300  00250C  6E35               	movwf	?_ldexp+1,c
  4301  00250E  0E00               	movlw	0
  4302  002510                     L3:
  4303  002510  6E36               	movwf	?_ldexp+2,c
  4304                           
  4305                           ; BSR set to: 0
  4306  002512  0012               	return	
  4307                           
  4308                           ; BSR set to: 0
  4309  002514  D032               	goto	l3483
  4310  002516                     l3465:
  4311  002516  BE38               	btfsc	ldexp@newexp+1,7,c
  4312  002518  D01A               	goto	l3481
  4313  00251A  0438               	decf	ldexp@newexp+1,w,c
  4314  00251C  A0D8               	btfss	status,0,c
  4315  00251E  D017               	goto	l3481
  4316  002520  0E00               	movlw	0
  4317  002522  0100               	movlb	0	; () banked
  4318  002524  6F83               	movwf	(_errno+1)& (0+255),b
  4319  002526  0E22               	movlw	34
  4320  002528  6F82               	movwf	_errno& (0+255),b
  4321                           
  4322                           ; BSR set to: 0
  4323  00252A  AE36               	btfss	ldexp@value+2,7,c
  4324  00252C  D008               	goto	l3477
  4325                           
  4326                           ; BSR set to: 0
  4327  00252E  0EFF               	movlw	255
  4328  002530  6E34               	movwf	?_ldexp,c
  4329  002532  0E7F               	movlw	127
  4330  002534  6E35               	movwf	?_ldexp+1,c
  4331  002536  0EFF               	movlw	255
  4332  002538  D7EB               	goto	L3
  4333                           
  4334                           ; BSR set to: 0
  4335  00253A  0012               	return	
  4336                           
  4337                           ; BSR set to: 0
  4338  00253C  D01E               	goto	l3483
  4339  00253E                     l3477:
  4340                           
  4341                           ; BSR set to: 0
  4342  00253E  0EFF               	movlw	255
  4343  002540  6E34               	movwf	?_ldexp,c
  4344  002542  0E7F               	movlw	127
  4345  002544  6E35               	movwf	?_ldexp+1,c
  4346  002546  0E7F               	movlw	127
  4347  002548  D7E3               	goto	L3
  4348                           
  4349                           ; BSR set to: 0
  4350  00254A  0012               	return	
  4351                           
  4352                           ; BSR set to: 0
  4353  00254C  D016               	goto	l3483
  4354  00254E                     l3481:
  4355  00254E  3438               	rlcf	ldexp@newexp+1,w,c
  4356  002550  3038               	rrcf	ldexp@newexp+1,w,c
  4357  002552  6E3A               	movwf	(??_ldexp+1)& (0+255),c
  4358  002554  3037               	rrcf	ldexp@newexp,w,c
  4359  002556  6E39               	movwf	??_ldexp& (0+255),c
  4360  002558  5036               	movf	ldexp@value+2,w,c
  4361  00255A  1839               	xorwf	??_ldexp,w,c
  4362  00255C  0B80               	andlw	-128
  4363  00255E  1839               	xorwf	??_ldexp,w,c
  4364  002560  6E36               	movwf	ldexp@value+2,c
  4365  002562  C037  F039         	movff	ldexp@newexp,??_ldexp
  4366  002566  0E01               	movlw	1
  4367  002568  1639               	andwf	??_ldexp,f,c
  4368  00256A  3239               	rrcf	??_ldexp,f,c
  4369  00256C  3239               	rrcf	??_ldexp,f,c
  4370  00256E  5035               	movf	ldexp@value+1,w,c
  4371  002570  1839               	xorwf	??_ldexp,w,c
  4372  002572  0B7F               	andlw	-129
  4373  002574  1839               	xorwf	??_ldexp,w,c
  4374  002576  6E35               	movwf	ldexp@value+1,c
  4375  002578  D000               	goto	l3483
  4376  00257A                     l3483:
  4377  00257A  C034  F034         	movff	ldexp@value,?_ldexp
  4378  00257E  C035  F035         	movff	ldexp@value+1,?_ldexp+1
  4379  002582  C036  F036         	movff	ldexp@value+2,?_ldexp+2
  4380  002586  0012               	return	
  4381  002588  0012               	return		;funcret
  4382  00258A                     __end_of_ldexp:
  4383                           	opt stack 0
  4384                           tblptru	equ	0xFF8
  4385                           tblptrh	equ	0xFF7
  4386                           tblptrl	equ	0xFF6
  4387                           tablat	equ	0xFF5
  4388                           prodh	equ	0xFF4
  4389                           prodl	equ	0xFF3
  4390                           indf0	equ	0xFEF
  4391                           postinc0	equ	0xFEE
  4392                           fsr0h	equ	0xFEA
  4393                           fsr0l	equ	0xFE9
  4394                           wreg	equ	0xFE8
  4395                           postdec1	equ	0xFE5
  4396                           fsr1l	equ	0xFE1
  4397                           indf2	equ	0xFDF
  4398                           postinc2	equ	0xFDE
  4399                           postdec2	equ	0xFDD
  4400                           fsr2h	equ	0xFDA
  4401                           fsr2l	equ	0xFD9
  4402                           status	equ	0xFD8
  4403                           
  4404 ;; *************** function _floor *****************
  4405 ;; Defined at:
  4406 ;;		line 13 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\floor.c"
  4407 ;; Parameters:    Size  Location     Type
  4408 ;;  x               3   64[COMRAM] int 
  4409 ;; Auto vars:     Size  Location     Type
  4410 ;;  i               3   67[COMRAM] int 
  4411 ;;  expon           2   70[COMRAM] int 
  4412 ;; Return value:  Size  Location     Type
  4413 ;;                  3   64[COMRAM] int 
  4414 ;; Registers used:
  4415 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4416 ;; Tracked objects:
  4417 ;;		On entry : 0/0
  4418 ;;		On exit  : 0/0
  4419 ;;		Unchanged: 0/0
  4420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4421 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4422 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4424 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4425 ;;Total ram usage:        8 bytes
  4426 ;; Hardware stack levels used:    1
  4427 ;; Hardware stack levels required when called:    2
  4428 ;; This function calls:
  4429 ;;		___altoft
  4430 ;;		___ftadd
  4431 ;;		___ftge
  4432 ;;		___fttol
  4433 ;;		_frexp
  4434 ;; This function is called by:
  4435 ;;		_exp
  4436 ;; This function uses a non-reentrant model
  4437 ;;
  4438                           
  4439                           	psect	text17
  4440  0023D8                     __ptext17:
  4441                           	opt stack 0
  4442  0023D8                     _floor:
  4443                           	opt stack 25
  4444                           
  4445                           ;incstack = 0
  4446  0023D8  C041  F001         	movff	floor@x,frexp@value
  4447  0023DC  C042  F002         	movff	floor@x+1,frexp@value+1
  4448  0023E0  C043  F003         	movff	floor@x+2,frexp@value+2
  4449  0023E4  0E47               	movlw	low floor@expon
  4450  0023E6  6E04               	movwf	frexp@eptr,c
  4451  0023E8  0E00               	movlw	high floor@expon
  4452  0023EA  6E05               	movwf	frexp@eptr+1,c
  4453  0023EC  EC28  F014         	call	_frexp	;wreg free
  4454  0023F0  AE48               	btfss	floor@expon+1,7,c
  4455  0023F2  D010               	goto	l3435
  4456  0023F4  AE43               	btfss	floor@x+2,7,c
  4457  0023F6  D007               	goto	l3431
  4458  0023F8  0E00               	movlw	0
  4459  0023FA  6E41               	movwf	?_floor,c
  4460  0023FC  0E80               	movlw	128
  4461  0023FE  6E42               	movwf	?_floor+1,c
  4462  002400  0EBF               	movlw	191
  4463  002402  6E43               	movwf	?_floor+2,c
  4464  002404  0012               	return	
  4465  002406                     l3431:
  4466  002406  0E00               	movlw	0
  4467  002408  6E41               	movwf	?_floor,c
  4468  00240A  0E00               	movlw	0
  4469  00240C  6E42               	movwf	?_floor+1,c
  4470  00240E  0E00               	movlw	0
  4471  002410  6E43               	movwf	?_floor+2,c
  4472  002412  0012               	return	
  4473  002414                     l3435:
  4474  002414  5048               	movf	floor@expon+1,w,c
  4475  002416  E104               	bnz	u3150
  4476  002418  0E15               	movlw	21
  4477  00241A  5C47               	subwf	floor@expon,w,c
  4478  00241C  A0D8               	btfss	status,0,c
  4479  00241E  D007               	goto	l3439
  4480  002420                     u3150:
  4481  002420  C041  F041         	movff	floor@x,?_floor
  4482  002424  C042  F042         	movff	floor@x+1,?_floor+1
  4483  002428  C043  F043         	movff	floor@x+2,?_floor+2
  4484  00242C  0012               	return	
  4485  00242E                     l3439:
  4486  00242E  C041  F028         	movff	floor@x,___fttol@f1
  4487  002432  C042  F029         	movff	floor@x+1,___fttol@f1+1
  4488  002436  C043  F02A         	movff	floor@x+2,___fttol@f1+2
  4489  00243A  EC74  F010         	call	___fttol	;wreg free
  4490  00243E  C028  F037         	movff	?___fttol,___altoft@c
  4491  002442  C029  F038         	movff	?___fttol+1,___altoft@c+1
  4492  002446  C02A  F039         	movff	?___fttol+2,___altoft@c+2
  4493  00244A  C02B  F03A         	movff	?___fttol+3,___altoft@c+3
  4494  00244E  EC2E  F015         	call	___altoft	;wreg free
  4495  002452  C037  F044         	movff	?___altoft,floor@i
  4496  002456  C038  F045         	movff	?___altoft+1,floor@i+1
  4497  00245A  C039  F046         	movff	?___altoft+2,floor@i+2
  4498  00245E  C041  F001         	movff	floor@x,___ftge@ff1
  4499  002462  C042  F002         	movff	floor@x+1,___ftge@ff1+1
  4500  002466  C043  F003         	movff	floor@x+2,___ftge@ff1+2
  4501  00246A  C044  F004         	movff	floor@i,___ftge@ff2
  4502  00246E  C045  F005         	movff	floor@i+1,___ftge@ff2+1
  4503  002472  C046  F006         	movff	floor@i+2,___ftge@ff2+2
  4504  002476  EC92  F013         	call	___ftge	;wreg free
  4505  00247A  B0D8               	btfsc	status,0,c
  4506  00247C  D015               	goto	l1367
  4507  00247E  C044  F01C         	movff	floor@i,___ftadd@f1
  4508  002482  C045  F01D         	movff	floor@i+1,___ftadd@f1+1
  4509  002486  C046  F01E         	movff	floor@i+2,___ftadd@f1+2
  4510  00248A  0E00               	movlw	0
  4511  00248C  6E1F               	movwf	___ftadd@f2,c
  4512  00248E  0E80               	movlw	128
  4513  002490  6E20               	movwf	___ftadd@f2+1,c
  4514  002492  0EBF               	movlw	191
  4515  002494  6E21               	movwf	___ftadd@f2+2,c
  4516  002496  EC4B  F00C         	call	___ftadd	;wreg free
  4517  00249A  C01C  F041         	movff	?___ftadd,?_floor
  4518  00249E  C01D  F042         	movff	?___ftadd+1,?_floor+1
  4519  0024A2  C01E  F043         	movff	?___ftadd+2,?_floor+2
  4520  0024A6  0012               	return	
  4521  0024A8                     l1367:
  4522  0024A8  C044  F041         	movff	floor@i,?_floor
  4523  0024AC  C045  F042         	movff	floor@i+1,?_floor+1
  4524  0024B0  C046  F043         	movff	floor@i+2,?_floor+2
  4525  0024B4  0012               	return		;funcret
  4526  0024B6                     __end_of_floor:
  4527                           	opt stack 0
  4528                           tblptru	equ	0xFF8
  4529                           tblptrh	equ	0xFF7
  4530                           tblptrl	equ	0xFF6
  4531                           tablat	equ	0xFF5
  4532                           prodh	equ	0xFF4
  4533                           prodl	equ	0xFF3
  4534                           indf0	equ	0xFEF
  4535                           postinc0	equ	0xFEE
  4536                           fsr0h	equ	0xFEA
  4537                           fsr0l	equ	0xFE9
  4538                           wreg	equ	0xFE8
  4539                           postdec1	equ	0xFE5
  4540                           fsr1l	equ	0xFE1
  4541                           indf2	equ	0xFDF
  4542                           postinc2	equ	0xFDE
  4543                           postdec2	equ	0xFDD
  4544                           fsr2h	equ	0xFDA
  4545                           fsr2l	equ	0xFD9
  4546                           status	equ	0xFD8
  4547                           
  4548 ;; *************** function _frexp *****************
  4549 ;; Defined at:
  4550 ;;		line 254 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\frexp.c"
  4551 ;; Parameters:    Size  Location     Type
  4552 ;;  value           3    0[COMRAM] int 
  4553 ;;  eptr            2    3[COMRAM] PTR int 
  4554 ;;		 -> log@exponent(2), floor@expon(2), 
  4555 ;; Auto vars:     Size  Location     Type
  4556 ;;		None
  4557 ;; Return value:  Size  Location     Type
  4558 ;;                  3    0[COMRAM] PTR int 
  4559 ;; Registers used:
  4560 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4561 ;; Tracked objects:
  4562 ;;		On entry : 0/0
  4563 ;;		On exit  : 0/0
  4564 ;;		Unchanged: 0/0
  4565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4566 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4568 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4569 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4570 ;;Total ram usage:        7 bytes
  4571 ;; Hardware stack levels used:    1
  4572 ;; This function calls:
  4573 ;;		Nothing
  4574 ;; This function is called by:
  4575 ;;		_floor
  4576 ;;		_log
  4577 ;; This function uses a non-reentrant model
  4578 ;;
  4579                           
  4580                           	psect	text18
  4581  002850                     __ptext18:
  4582                           	opt stack 0
  4583  002850                     _frexp:
  4584                           	opt stack 27
  4585                           
  4586                           ;incstack = 0
  4587  002850  5001               	movf	frexp@value,w,c
  4588  002852  1002               	iorwf	frexp@value+1,w,c
  4589  002854  1003               	iorwf	frexp@value+2,w,c
  4590  002856  A4D8               	btfss	status,2,c
  4591  002858  D00F               	goto	l3189
  4592  00285A  C004  FFD9         	movff	frexp@eptr,fsr2l
  4593  00285E  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  4594  002862  0E00               	movlw	0
  4595  002864  6EDE               	movwf	postinc2,c
  4596  002866  0E00               	movlw	0
  4597  002868  6EDD               	movwf	postdec2,c
  4598  00286A  0E00               	movlw	0
  4599  00286C  6E01               	movwf	?_frexp,c
  4600  00286E  0E00               	movlw	0
  4601  002870  6E02               	movwf	?_frexp+1,c
  4602  002872  0E00               	movlw	0
  4603  002874  6E03               	movwf	?_frexp+2,c
  4604  002876  0012               	return	
  4605  002878                     l3189:
  4606  002878  5003               	movf	frexp@value+2,w,c
  4607  00287A  0B7F               	andlw	127
  4608  00287C  6E06               	movwf	??_frexp& (0+255),c
  4609  00287E  6A07               	clrf	(??_frexp+1)& (0+255),c
  4610  002880  90D8               	bcf	status,0,c
  4611  002882  3606               	rlcf	??_frexp,f,c
  4612  002884  3607               	rlcf	??_frexp+1,f,c
  4613  002886  C004  FFD9         	movff	frexp@eptr,fsr2l
  4614  00288A  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  4615  00288E  C006  FFDE         	movff	??_frexp,postinc2
  4616  002892  C007  FFDD         	movff	??_frexp+1,postdec2
  4617  002896  AE02               	btfss	frexp@value+1,7,c
  4618  002898  D003               	goto	u2810
  4619  00289A  6A06               	clrf	??_frexp& (0+255),c
  4620  00289C  2A06               	incf	??_frexp& (0+255),f,c
  4621  00289E  D001               	goto	u2818
  4622  0028A0                     u2810:
  4623  0028A0  6A06               	clrf	??_frexp& (0+255),c
  4624  0028A2                     u2818:
  4625  0028A2  5006               	movf	??_frexp,w,c
  4626  0028A4  C004  FFD9         	movff	frexp@eptr,fsr2l
  4627  0028A8  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  4628  0028AC  12DE               	iorwf	postinc2,f,c
  4629  0028AE  0E00               	movlw	0
  4630  0028B0  12DD               	iorwf	postdec2,f,c
  4631  0028B2  C004  FFD9         	movff	frexp@eptr,fsr2l
  4632  0028B6  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  4633  0028BA  0E82               	movlw	130
  4634  0028BC  26DE               	addwf	postinc2,f,c
  4635  0028BE  0EFF               	movlw	255
  4636  0028C0  22DD               	addwfc	postdec2,f,c
  4637  0028C2  8003               	bsf	frexp@value+2,0,c
  4638  0028C4  8203               	bsf	frexp@value+2,1,c
  4639  0028C6  8403               	bsf	frexp@value+2,2,c
  4640  0028C8  8603               	bsf	frexp@value+2,3,c
  4641  0028CA  8803               	bsf	frexp@value+2,4,c
  4642  0028CC  8A03               	bsf	frexp@value+2,5,c
  4643  0028CE  9C03               	bcf	frexp@value+2,6,c
  4644  0028D0  9E02               	bcf	frexp@value+1,7,c
  4645  0028D2  C001  F001         	movff	frexp@value,?_frexp
  4646  0028D6  C002  F002         	movff	frexp@value+1,?_frexp+1
  4647  0028DA  C003  F003         	movff	frexp@value+2,?_frexp+2
  4648  0028DE  0012               	return	
  4649  0028E0  0012               	return		;funcret
  4650  0028E2                     __end_of_frexp:
  4651                           	opt stack 0
  4652                           tblptru	equ	0xFF8
  4653                           tblptrh	equ	0xFF7
  4654                           tblptrl	equ	0xFF6
  4655                           tablat	equ	0xFF5
  4656                           prodh	equ	0xFF4
  4657                           prodl	equ	0xFF3
  4658                           indf0	equ	0xFEF
  4659                           postinc0	equ	0xFEE
  4660                           fsr0h	equ	0xFEA
  4661                           fsr0l	equ	0xFE9
  4662                           wreg	equ	0xFE8
  4663                           postdec1	equ	0xFE5
  4664                           fsr1l	equ	0xFE1
  4665                           indf2	equ	0xFDF
  4666                           postinc2	equ	0xFDE
  4667                           postdec2	equ	0xFDD
  4668                           fsr2h	equ	0xFDA
  4669                           fsr2l	equ	0xFD9
  4670                           status	equ	0xFD8
  4671                           
  4672 ;; *************** function ___fttol *****************
  4673 ;; Defined at:
  4674 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\fttol.c"
  4675 ;; Parameters:    Size  Location     Type
  4676 ;;  f1              3   39[COMRAM] float 
  4677 ;; Auto vars:     Size  Location     Type
  4678 ;;  lval            4   49[COMRAM] unsigned long 
  4679 ;;  exp1            1   53[COMRAM] unsigned char 
  4680 ;;  sign1           1   48[COMRAM] unsigned char 
  4681 ;; Return value:  Size  Location     Type
  4682 ;;                  4   39[COMRAM] long 
  4683 ;; Registers used:
  4684 ;;		wreg, status,2, status,0
  4685 ;; Tracked objects:
  4686 ;;		On entry : 0/0
  4687 ;;		On exit  : 0/0
  4688 ;;		Unchanged: 0/0
  4689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4690 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4691 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4692 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4693 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4694 ;;Total ram usage:       15 bytes
  4695 ;; Hardware stack levels used:    1
  4696 ;; This function calls:
  4697 ;;		Nothing
  4698 ;; This function is called by:
  4699 ;;		_set_vision
  4700 ;;		_pow
  4701 ;;		_exp
  4702 ;;		_floor
  4703 ;; This function uses a non-reentrant model
  4704 ;;
  4705                           
  4706                           	psect	text19
  4707  0020E8                     __ptext19:
  4708                           	opt stack 0
  4709  0020E8                     ___fttol:
  4710                           	opt stack 26
  4711                           
  4712                           ;incstack = 0
  4713  0020E8  C02A  F02C         	movff	___fttol@f1+2,??___fttol
  4714  0020EC  6A2D               	clrf	(??___fttol+1)& (0+255),c
  4715  0020EE  6A2E               	clrf	(??___fttol+2)& (0+255),c
  4716  0020F0  3429               	rlcf	___fttol@f1+1,w,c
  4717  0020F2  362C               	rlcf	??___fttol& (0+255),f,c
  4718  0020F4  E301               	bnc	u2661
  4719  0020F6  802D               	bsf	(??___fttol+1)& (0+255),0,c
  4720  0020F8                     u2661:
  4721  0020F8  502C               	movf	??___fttol,w,c
  4722  0020FA  6E36               	movwf	___fttol@exp1,c
  4723  0020FC  5036               	movf	___fttol@exp1,w,c
  4724  0020FE  A4D8               	btfss	status,2,c
  4725  002100  D009               	goto	l3103
  4726  002102  0E00               	movlw	0
  4727  002104  6E28               	movwf	?___fttol,c
  4728  002106  0E00               	movlw	0
  4729  002108  6E29               	movwf	?___fttol+1,c
  4730  00210A  0E00               	movlw	0
  4731  00210C  6E2A               	movwf	?___fttol+2,c
  4732  00210E  0E00               	movlw	0
  4733  002110  6E2B               	movwf	?___fttol+3,c
  4734  002112  0012               	return	
  4735  002114                     l3103:
  4736  002114  0E17               	movlw	23
  4737  002116  6E2C               	movwf	??___fttol& (0+255),c
  4738  002118  C028  F02D         	movff	___fttol@f1,??___fttol+1
  4739  00211C  C029  F02E         	movff	___fttol@f1+1,??___fttol+2
  4740  002120  C02A  F02F         	movff	___fttol@f1+2,??___fttol+3
  4741  002124  282C               	incf	??___fttol,w,c
  4742  002126  6E30               	movwf	(??___fttol+4)& (0+255),c
  4743  002128  D004               	goto	u2680
  4744  00212A                     u2685:
  4745  00212A  90D8               	bcf	status,0,c
  4746  00212C  322F               	rrcf	??___fttol+3,f,c
  4747  00212E  322E               	rrcf	??___fttol+2,f,c
  4748  002130  322D               	rrcf	??___fttol+1,f,c
  4749  002132                     u2680:
  4750  002132  2E30               	decfsz	(??___fttol+4)& (0+255),f,c
  4751  002134  D7FA               	goto	u2685
  4752  002136  502D               	movf	??___fttol+1,w,c
  4753  002138  6E31               	movwf	___fttol@sign1,c
  4754  00213A  8E29               	bsf	___fttol@f1+1,7,c
  4755  00213C  0EFF               	movlw	255
  4756  00213E  1628               	andwf	___fttol@f1,f,c
  4757  002140  0EFF               	movlw	255
  4758  002142  1629               	andwf	___fttol@f1+1,f,c
  4759  002144  0E00               	movlw	0
  4760  002146  162A               	andwf	___fttol@f1+2,f,c
  4761  002148  5028               	movf	___fttol@f1,w,c
  4762  00214A  6E32               	movwf	___fttol@lval,c
  4763  00214C  5029               	movf	___fttol@f1+1,w,c
  4764  00214E  6E33               	movwf	___fttol@lval+1,c
  4765  002150  502A               	movf	___fttol@f1+2,w,c
  4766  002152  6E34               	movwf	___fttol@lval+2,c
  4767  002154  6A35               	clrf	___fttol@lval+3,c
  4768  002156  0E8E               	movlw	142
  4769  002158  5E36               	subwf	___fttol@exp1,f,c
  4770  00215A  AE36               	btfss	___fttol@exp1,7,c
  4771  00215C  D017               	goto	l3125
  4772  00215E  5036               	movf	___fttol@exp1,w,c
  4773  002160  0A80               	xorlw	128
  4774  002162  0F8F               	addlw	143
  4775  002164  B0D8               	btfsc	status,0,c
  4776  002166  D00A               	goto	l3121
  4777  002168  0E00               	movlw	0
  4778  00216A  6E28               	movwf	?___fttol,c
  4779  00216C  0E00               	movlw	0
  4780  00216E  6E29               	movwf	?___fttol+1,c
  4781  002170  0E00               	movlw	0
  4782  002172  6E2A               	movwf	?___fttol+2,c
  4783  002174  0E00               	movlw	0
  4784  002176  6E2B               	movwf	?___fttol+3,c
  4785  002178  0012               	return	
  4786  00217A  D000               	goto	l3121
  4787  00217C                     l3121:
  4788  00217C  90D8               	bcf	status,0,c
  4789  00217E  3235               	rrcf	___fttol@lval+3,f,c
  4790  002180  3234               	rrcf	___fttol@lval+2,f,c
  4791  002182  3233               	rrcf	___fttol@lval+1,f,c
  4792  002184  3232               	rrcf	___fttol@lval,f,c
  4793  002186  3E36               	incfsz	___fttol@exp1,f,c
  4794  002188  D7F9               	goto	l3121
  4795  00218A  D019               	goto	l3135
  4796  00218C                     l3125:
  4797  00218C  0E17               	movlw	23
  4798  00218E  6436               	cpfsgt	___fttol@exp1,c
  4799  002190  D011               	goto	l3133
  4800  002192  0E00               	movlw	0
  4801  002194  6E28               	movwf	?___fttol,c
  4802  002196  0E00               	movlw	0
  4803  002198  6E29               	movwf	?___fttol+1,c
  4804  00219A  0E00               	movlw	0
  4805  00219C  6E2A               	movwf	?___fttol+2,c
  4806  00219E  0E00               	movlw	0
  4807  0021A0  6E2B               	movwf	?___fttol+3,c
  4808  0021A2  0012               	return	
  4809  0021A4  D007               	goto	l3133
  4810  0021A6                     l3131:
  4811  0021A6  90D8               	bcf	status,0,c
  4812  0021A8  3632               	rlcf	___fttol@lval,f,c
  4813  0021AA  3633               	rlcf	___fttol@lval+1,f,c
  4814  0021AC  3634               	rlcf	___fttol@lval+2,f,c
  4815  0021AE  3635               	rlcf	___fttol@lval+3,f,c
  4816  0021B0  0636               	decf	___fttol@exp1,f,c
  4817  0021B2  D000               	goto	l3133
  4818  0021B4                     l3133:
  4819  0021B4  5036               	movf	___fttol@exp1,w,c
  4820  0021B6  B4D8               	btfsc	status,2,c
  4821  0021B8  D002               	goto	l3135
  4822  0021BA  D7F5               	goto	l3131
  4823  0021BC  D000               	goto	l3135
  4824  0021BE                     l3135:
  4825  0021BE  5031               	movf	___fttol@sign1,w,c
  4826  0021C0  B4D8               	btfsc	status,2,c
  4827  0021C2  D009               	goto	l3139
  4828  0021C4  1E35               	comf	___fttol@lval+3,f,c
  4829  0021C6  1E34               	comf	___fttol@lval+2,f,c
  4830  0021C8  1E33               	comf	___fttol@lval+1,f,c
  4831  0021CA  6C32               	negf	___fttol@lval,c
  4832  0021CC  0E00               	movlw	0
  4833  0021CE  2233               	addwfc	___fttol@lval+1,f,c
  4834  0021D0  2234               	addwfc	___fttol@lval+2,f,c
  4835  0021D2  2235               	addwfc	___fttol@lval+3,f,c
  4836  0021D4  D000               	goto	l3139
  4837  0021D6                     l3139:
  4838  0021D6  C032  F028         	movff	___fttol@lval,?___fttol
  4839  0021DA  C033  F029         	movff	___fttol@lval+1,?___fttol+1
  4840  0021DE  C034  F02A         	movff	___fttol@lval+2,?___fttol+2
  4841  0021E2  C035  F02B         	movff	___fttol@lval+3,?___fttol+3
  4842  0021E6  0012               	return	
  4843  0021E8  0012               	return		;funcret
  4844  0021EA                     __end_of___fttol:
  4845                           	opt stack 0
  4846                           tblptru	equ	0xFF8
  4847                           tblptrh	equ	0xFF7
  4848                           tblptrl	equ	0xFF6
  4849                           tablat	equ	0xFF5
  4850                           prodh	equ	0xFF4
  4851                           prodl	equ	0xFF3
  4852                           indf0	equ	0xFEF
  4853                           postinc0	equ	0xFEE
  4854                           fsr0h	equ	0xFEA
  4855                           fsr0l	equ	0xFE9
  4856                           wreg	equ	0xFE8
  4857                           postdec1	equ	0xFE5
  4858                           fsr1l	equ	0xFE1
  4859                           indf2	equ	0xFDF
  4860                           postinc2	equ	0xFDE
  4861                           postdec2	equ	0xFDD
  4862                           fsr2h	equ	0xFDA
  4863                           fsr2l	equ	0xFD9
  4864                           status	equ	0xFD8
  4865                           
  4866 ;; *************** function ___ftge *****************
  4867 ;; Defined at:
  4868 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\ftge.c"
  4869 ;; Parameters:    Size  Location     Type
  4870 ;;  ff1             3    0[COMRAM] float 
  4871 ;;  ff2             3    3[COMRAM] float 
  4872 ;; Auto vars:     Size  Location     Type
  4873 ;;		None
  4874 ;; Return value:  Size  Location     Type
  4875 ;;		None               void
  4876 ;; Registers used:
  4877 ;;		wreg, status,2, status,0
  4878 ;; Tracked objects:
  4879 ;;		On entry : 0/0
  4880 ;;		On exit  : 0/0
  4881 ;;		Unchanged: 0/0
  4882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4883 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4884 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4885 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4886 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4887 ;;Total ram usage:        9 bytes
  4888 ;; Hardware stack levels used:    1
  4889 ;; This function calls:
  4890 ;;		Nothing
  4891 ;; This function is called by:
  4892 ;;		_pow
  4893 ;;		_exp
  4894 ;;		_floor
  4895 ;; This function uses a non-reentrant model
  4896 ;;
  4897                           
  4898                           	psect	text20
  4899  002724                     __ptext20:
  4900                           	opt stack 0
  4901  002724                     ___ftge:
  4902                           	opt stack 26
  4903                           
  4904                           ;incstack = 0
  4905  002724  AE03               	btfss	___ftge@ff1+2,7,c
  4906  002726  D017               	goto	l3083
  4907  002728  C001  F007         	movff	___ftge@ff1,??___ftge
  4908  00272C  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  4909  002730  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  4910  002734  1E07               	comf	??___ftge,f,c
  4911  002736  1E08               	comf	??___ftge+1,f,c
  4912  002738  1E09               	comf	??___ftge+2,f,c
  4913  00273A  2A07               	incf	??___ftge,f,c
  4914  00273C  0E00               	movlw	0
  4915  00273E  2208               	addwfc	??___ftge+1,f,c
  4916  002740  2209               	addwfc	??___ftge+2,f,c
  4917  002742  0E00               	movlw	0
  4918  002744  2407               	addwf	??___ftge,w,c
  4919  002746  6E01               	movwf	___ftge@ff1,c
  4920  002748  0E00               	movlw	0
  4921  00274A  2008               	addwfc	??___ftge+1,w,c
  4922  00274C  6E02               	movwf	___ftge@ff1+1,c
  4923  00274E  0E80               	movlw	128
  4924  002750  2009               	addwfc	??___ftge+2,w,c
  4925  002752  6E03               	movwf	___ftge@ff1+2,c
  4926  002754  D000               	goto	l3083
  4927  002756                     l3083:
  4928  002756  AE06               	btfss	___ftge@ff2+2,7,c
  4929  002758  D017               	goto	l3087
  4930  00275A  C004  F007         	movff	___ftge@ff2,??___ftge
  4931  00275E  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  4932  002762  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  4933  002766  1E07               	comf	??___ftge,f,c
  4934  002768  1E08               	comf	??___ftge+1,f,c
  4935  00276A  1E09               	comf	??___ftge+2,f,c
  4936  00276C  2A07               	incf	??___ftge,f,c
  4937  00276E  0E00               	movlw	0
  4938  002770  2208               	addwfc	??___ftge+1,f,c
  4939  002772  2209               	addwfc	??___ftge+2,f,c
  4940  002774  0E00               	movlw	0
  4941  002776  2407               	addwf	??___ftge,w,c
  4942  002778  6E04               	movwf	___ftge@ff2,c
  4943  00277A  0E00               	movlw	0
  4944  00277C  2008               	addwfc	??___ftge+1,w,c
  4945  00277E  6E05               	movwf	___ftge@ff2+1,c
  4946  002780  0E80               	movlw	128
  4947  002782  2009               	addwfc	??___ftge+2,w,c
  4948  002784  6E06               	movwf	___ftge@ff2+2,c
  4949  002786  D000               	goto	l3087
  4950  002788                     l3087:
  4951  002788  0E00               	movlw	0
  4952  00278A  1A01               	xorwf	___ftge@ff1,f,c
  4953  00278C  0E00               	movlw	0
  4954  00278E  1A02               	xorwf	___ftge@ff1+1,f,c
  4955  002790  0E80               	movlw	128
  4956  002792  1A03               	xorwf	___ftge@ff1+2,f,c
  4957  002794  0E00               	movlw	0
  4958  002796  1A04               	xorwf	___ftge@ff2,f,c
  4959  002798  0E00               	movlw	0
  4960  00279A  1A05               	xorwf	___ftge@ff2+1,f,c
  4961  00279C  0E80               	movlw	128
  4962  00279E  1A06               	xorwf	___ftge@ff2+2,f,c
  4963  0027A0  5004               	movf	___ftge@ff2,w,c
  4964  0027A2  5C01               	subwf	___ftge@ff1,w,c
  4965  0027A4  5005               	movf	___ftge@ff2+1,w,c
  4966  0027A6  5802               	subwfb	___ftge@ff1+1,w,c
  4967  0027A8  5006               	movf	___ftge@ff2+2,w,c
  4968  0027AA  5803               	subwfb	___ftge@ff1+2,w,c
  4969  0027AC  B0D8               	btfsc	status,0,c
  4970  0027AE  D002               	goto	l3093
  4971  0027B0  90D8               	bcf	status,0,c
  4972  0027B2  0012               	return	
  4973  0027B4                     l3093:
  4974  0027B4  80D8               	bsf	status,0,c
  4975  0027B6  0012               	return	
  4976  0027B8  0012               	return		;funcret
  4977  0027BA                     __end_of___ftge:
  4978                           	opt stack 0
  4979                           tblptru	equ	0xFF8
  4980                           tblptrh	equ	0xFF7
  4981                           tblptrl	equ	0xFF6
  4982                           tablat	equ	0xFF5
  4983                           prodh	equ	0xFF4
  4984                           prodl	equ	0xFF3
  4985                           indf0	equ	0xFEF
  4986                           postinc0	equ	0xFEE
  4987                           fsr0h	equ	0xFEA
  4988                           fsr0l	equ	0xFE9
  4989                           wreg	equ	0xFE8
  4990                           postdec1	equ	0xFE5
  4991                           fsr1l	equ	0xFE1
  4992                           indf2	equ	0xFDF
  4993                           postinc2	equ	0xFDE
  4994                           postdec2	equ	0xFDD
  4995                           fsr2h	equ	0xFDA
  4996                           fsr2l	equ	0xFD9
  4997                           status	equ	0xFD8
  4998                           
  4999 ;; *************** function ___altoft *****************
  5000 ;; Defined at:
  5001 ;;		line 42 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\altoft.c"
  5002 ;; Parameters:    Size  Location     Type
  5003 ;;  c               4   54[COMRAM] long 
  5004 ;; Auto vars:     Size  Location     Type
  5005 ;;  sign            1   63[COMRAM] unsigned char 
  5006 ;;  exp             1   62[COMRAM] unsigned char 
  5007 ;; Return value:  Size  Location     Type
  5008 ;;                  3   54[COMRAM] float 
  5009 ;; Registers used:
  5010 ;;		wreg, status,2, status,0, cstack
  5011 ;; Tracked objects:
  5012 ;;		On entry : 0/0
  5013 ;;		On exit  : 0/0
  5014 ;;		Unchanged: 0/0
  5015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5016 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5017 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5018 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5019 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5020 ;;Total ram usage:       10 bytes
  5021 ;; Hardware stack levels used:    1
  5022 ;; Hardware stack levels required when called:    1
  5023 ;; This function calls:
  5024 ;;		___ftpack
  5025 ;; This function is called by:
  5026 ;;		_floor
  5027 ;; This function uses a non-reentrant model
  5028 ;;
  5029                           
  5030                           	psect	text21
  5031  002A5C                     __ptext21:
  5032                           	opt stack 0
  5033  002A5C                     ___altoft:
  5034                           	opt stack 25
  5035                           
  5036                           ;incstack = 0
  5037  002A5C  0E00               	movlw	0
  5038  002A5E  6E40               	movwf	___altoft@sign,c
  5039  002A60  0E8E               	movlw	142
  5040  002A62  6E3F               	movwf	___altoft@exp,c
  5041  002A64  AE3A               	btfss	___altoft@c+3,7,c
  5042  002A66  D012               	goto	l2955
  5043  002A68  1E3A               	comf	___altoft@c+3,f,c
  5044  002A6A  1E39               	comf	___altoft@c+2,f,c
  5045  002A6C  1E38               	comf	___altoft@c+1,f,c
  5046  002A6E  6C37               	negf	___altoft@c,c
  5047  002A70  0E00               	movlw	0
  5048  002A72  2238               	addwfc	___altoft@c+1,f,c
  5049  002A74  2239               	addwfc	___altoft@c+2,f,c
  5050  002A76  223A               	addwfc	___altoft@c+3,f,c
  5051  002A78  0E01               	movlw	1
  5052  002A7A  6E40               	movwf	___altoft@sign,c
  5053  002A7C  D007               	goto	l2955
  5054  002A7E                     l2953:
  5055  002A7E  90D8               	bcf	status,0,c
  5056  002A80  323A               	rrcf	___altoft@c+3,f,c
  5057  002A82  3239               	rrcf	___altoft@c+2,f,c
  5058  002A84  3238               	rrcf	___altoft@c+1,f,c
  5059  002A86  3237               	rrcf	___altoft@c,f,c
  5060  002A88  2A3F               	incf	___altoft@exp,f,c
  5061  002A8A  D000               	goto	l2955
  5062  002A8C                     l2955:
  5063  002A8C  0E00               	movlw	0
  5064  002A8E  1437               	andwf	___altoft@c,w,c
  5065  002A90  6E3B               	movwf	??___altoft& (0+255),c
  5066  002A92  0E00               	movlw	0
  5067  002A94  1438               	andwf	___altoft@c+1,w,c
  5068  002A96  6E3C               	movwf	(??___altoft+1)& (0+255),c
  5069  002A98  0E00               	movlw	0
  5070  002A9A  1439               	andwf	___altoft@c+2,w,c
  5071  002A9C  6E3D               	movwf	(??___altoft+2)& (0+255),c
  5072  002A9E  0EFF               	movlw	255
  5073  002AA0  143A               	andwf	___altoft@c+3,w,c
  5074  002AA2  6E3E               	movwf	(??___altoft+3)& (0+255),c
  5075  002AA4  503B               	movf	??___altoft,w,c
  5076  002AA6  103C               	iorwf	??___altoft+1,w,c
  5077  002AA8  103D               	iorwf	??___altoft+2,w,c
  5078  002AAA  103E               	iorwf	??___altoft+3,w,c
  5079  002AAC  A4D8               	btfss	status,2,c
  5080  002AAE  D7E7               	goto	l2953
  5081  002AB0  C037  F001         	movff	___altoft@c,___ftpack@arg
  5082  002AB4  C038  F002         	movff	___altoft@c+1,___ftpack@arg+1
  5083  002AB8  C039  F003         	movff	___altoft@c+2,___ftpack@arg+2
  5084  002ABC  C03F  F004         	movff	___altoft@exp,___ftpack@exp
  5085  002AC0  C040  F005         	movff	___altoft@sign,___ftpack@sign
  5086  002AC4  EC2F  F013         	call	___ftpack	;wreg free
  5087  002AC8  C001  F037         	movff	?___ftpack,?___altoft
  5088  002ACC  C002  F038         	movff	?___ftpack+1,?___altoft+1
  5089  002AD0  C003  F039         	movff	?___ftpack+2,?___altoft+2
  5090  002AD4  0012               	return	
  5091  002AD6  0012               	return		;funcret
  5092  002AD8                     __end_of___altoft:
  5093                           	opt stack 0
  5094                           tblptru	equ	0xFF8
  5095                           tblptrh	equ	0xFF7
  5096                           tblptrl	equ	0xFF6
  5097                           tablat	equ	0xFF5
  5098                           prodh	equ	0xFF4
  5099                           prodl	equ	0xFF3
  5100                           indf0	equ	0xFEF
  5101                           postinc0	equ	0xFEE
  5102                           fsr0h	equ	0xFEA
  5103                           fsr0l	equ	0xFE9
  5104                           wreg	equ	0xFE8
  5105                           postdec1	equ	0xFE5
  5106                           fsr1l	equ	0xFE1
  5107                           indf2	equ	0xFDF
  5108                           postinc2	equ	0xFDE
  5109                           postdec2	equ	0xFDD
  5110                           fsr2h	equ	0xFDA
  5111                           fsr2l	equ	0xFD9
  5112                           status	equ	0xFD8
  5113                           
  5114 ;; *************** function _eval_poly *****************
  5115 ;; Defined at:
  5116 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\evalpoly.c"
  5117 ;; Parameters:    Size  Location     Type
  5118 ;;  x               3   39[COMRAM] float 
  5119 ;;  d               2   42[COMRAM] PTR const 
  5120 ;;		 -> log@coeff(27), exp@coeff(30), 
  5121 ;;  n               2   44[COMRAM] int 
  5122 ;; Auto vars:     Size  Location     Type
  5123 ;;  res             3   48[COMRAM] int 
  5124 ;; Return value:  Size  Location     Type
  5125 ;;                  3   39[COMRAM] int 
  5126 ;; Registers used:
  5127 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5128 ;; Tracked objects:
  5129 ;;		On entry : 0/0
  5130 ;;		On exit  : 0/0
  5131 ;;		Unchanged: 0/0
  5132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5133 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5134 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5135 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5136 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5137 ;;Total ram usage:       12 bytes
  5138 ;; Hardware stack levels used:    1
  5139 ;; Hardware stack levels required when called:    2
  5140 ;; This function calls:
  5141 ;;		___ftadd
  5142 ;;		___ftmul
  5143 ;;		___wmul
  5144 ;; This function is called by:
  5145 ;;		_exp
  5146 ;;		_log
  5147 ;; This function uses a non-reentrant model
  5148 ;;
  5149                           
  5150                           	psect	text22
  5151  00258A                     __ptext22:
  5152                           	opt stack 0
  5153  00258A                     _eval_poly:
  5154                           	opt stack 25
  5155                           
  5156                           ;incstack = 0
  5157  00258A  C02D  F001         	movff	eval_poly@n,___wmul@multiplier
  5158  00258E  C02E  F002         	movff	eval_poly@n+1,___wmul@multiplier+1
  5159  002592  0E00               	movlw	0
  5160  002594  6E04               	movwf	___wmul@multiplicand+1,c
  5161  002596  0E03               	movlw	3
  5162  002598  6E03               	movwf	___wmul@multiplicand,c
  5163  00259A  EC7F  F017         	call	___wmul	;wreg free
  5164  00259E  C02B  F02F         	movff	eval_poly@d,??_eval_poly
  5165  0025A2  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
  5166  0025A6  5001               	movf	?___wmul,w,c
  5167  0025A8  262F               	addwf	??_eval_poly,f,c
  5168  0025AA  5002               	movf	?___wmul+1,w,c
  5169  0025AC  2230               	addwfc	??_eval_poly+1,f,c
  5170  0025AE  C02F  FFF6         	movff	??_eval_poly,tblptrl
  5171  0025B2  C030  FFF7         	movff	??_eval_poly+1,tblptrh
  5172  0025B6                     	if	0	;tblptru may be non-zero
  5173  0025B6                     	endif
  5174  0025B6                     	if	0	;tblptru may be non-zero
  5175  0025B6                     	endif
  5176  0025B6  0009               	tblrd		*+
  5177  0025B8  CFF5 F031          	movff	tablat,eval_poly@res
  5178  0025BC  0009               	tblrd		*+
  5179  0025BE  CFF5 F032          	movff	tablat,eval_poly@res+1
  5180  0025C2  000A               	tblrd		*-
  5181  0025C4  CFF5 F033          	movff	tablat,eval_poly@res+2
  5182  0025C8  D03F               	goto	l3449
  5183  0025CA                     l3447:
  5184  0025CA  C031  F010         	movff	eval_poly@res,___ftmul@f2
  5185  0025CE  C032  F011         	movff	eval_poly@res+1,___ftmul@f2+1
  5186  0025D2  C033  F012         	movff	eval_poly@res+2,___ftmul@f2+2
  5187  0025D6  C028  F00D         	movff	eval_poly@x,___ftmul@f1
  5188  0025DA  C029  F00E         	movff	eval_poly@x+1,___ftmul@f1+1
  5189  0025DE  C02A  F00F         	movff	eval_poly@x+2,___ftmul@f1+2
  5190  0025E2  ECF5  F010         	call	___ftmul	;wreg free
  5191  0025E6  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  5192  0025EA  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  5193  0025EE  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  5194  0025F2  0E00               	movlw	0
  5195  0025F4  6E04               	movwf	___wmul@multiplicand+1,c
  5196  0025F6  0E03               	movlw	3
  5197  0025F8  6E03               	movwf	___wmul@multiplicand,c
  5198  0025FA  062D               	decf	eval_poly@n,f,c
  5199  0025FC  A0D8               	btfss	status,0,c
  5200  0025FE  062E               	decf	eval_poly@n+1,f,c
  5201  002600  C02D  F001         	movff	eval_poly@n,___wmul@multiplier
  5202  002604  C02E  F002         	movff	eval_poly@n+1,___wmul@multiplier+1
  5203  002608  EC7F  F017         	call	___wmul	;wreg free
  5204  00260C  C02B  F02F         	movff	eval_poly@d,??_eval_poly
  5205  002610  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
  5206  002614  5001               	movf	?___wmul,w,c
  5207  002616  262F               	addwf	??_eval_poly,f,c
  5208  002618  5002               	movf	?___wmul+1,w,c
  5209  00261A  2230               	addwfc	??_eval_poly+1,f,c
  5210  00261C  C02F  FFF6         	movff	??_eval_poly,tblptrl
  5211  002620  C030  FFF7         	movff	??_eval_poly+1,tblptrh
  5212  002624                     	if	0	;tblptru may be non-zero
  5213  002624                     	endif
  5214  002624                     	if	0	;tblptru may be non-zero
  5215  002624                     	endif
  5216  002624  0009               	tblrd		*+
  5217  002626  CFF5 F01F          	movff	tablat,___ftadd@f2
  5218  00262A  0009               	tblrd		*+
  5219  00262C  CFF5 F020          	movff	tablat,___ftadd@f2+1
  5220  002630  000A               	tblrd		*-
  5221  002632  CFF5 F021          	movff	tablat,___ftadd@f2+2
  5222  002636  EC4B  F00C         	call	___ftadd	;wreg free
  5223  00263A  C01C  F031         	movff	?___ftadd,eval_poly@res
  5224  00263E  C01D  F032         	movff	?___ftadd+1,eval_poly@res+1
  5225  002642  C01E  F033         	movff	?___ftadd+2,eval_poly@res+2
  5226  002646  D000               	goto	l3449
  5227  002648                     l3449:
  5228  002648  502D               	movf	eval_poly@n,w,c
  5229  00264A  102E               	iorwf	eval_poly@n+1,w,c
  5230  00264C  A4D8               	btfss	status,2,c
  5231  00264E  D7BD               	goto	l3447
  5232  002650  C031  F028         	movff	eval_poly@res,?_eval_poly
  5233  002654  C032  F029         	movff	eval_poly@res+1,?_eval_poly+1
  5234  002658  C033  F02A         	movff	eval_poly@res+2,?_eval_poly+2
  5235  00265C  0012               	return		;funcret
  5236  00265E                     __end_of_eval_poly:
  5237                           	opt stack 0
  5238                           tblptru	equ	0xFF8
  5239                           tblptrh	equ	0xFF7
  5240                           tblptrl	equ	0xFF6
  5241                           tablat	equ	0xFF5
  5242                           prodh	equ	0xFF4
  5243                           prodl	equ	0xFF3
  5244                           indf0	equ	0xFEF
  5245                           postinc0	equ	0xFEE
  5246                           fsr0h	equ	0xFEA
  5247                           fsr0l	equ	0xFE9
  5248                           wreg	equ	0xFE8
  5249                           postdec1	equ	0xFE5
  5250                           fsr1l	equ	0xFE1
  5251                           indf2	equ	0xFDF
  5252                           postinc2	equ	0xFDE
  5253                           postdec2	equ	0xFDD
  5254                           fsr2h	equ	0xFDA
  5255                           fsr2l	equ	0xFD9
  5256                           status	equ	0xFD8
  5257                           
  5258 ;; *************** function ___wmul *****************
  5259 ;; Defined at:
  5260 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\Umul16.c"
  5261 ;; Parameters:    Size  Location     Type
  5262 ;;  multiplier      2    0[COMRAM] unsigned int 
  5263 ;;  multiplicand    2    2[COMRAM] unsigned int 
  5264 ;; Auto vars:     Size  Location     Type
  5265 ;;  product         2    4[COMRAM] unsigned int 
  5266 ;; Return value:  Size  Location     Type
  5267 ;;                  2    0[COMRAM] unsigned int 
  5268 ;; Registers used:
  5269 ;;		wreg, status,2, status,0, prodl, prodh
  5270 ;; Tracked objects:
  5271 ;;		On entry : 0/0
  5272 ;;		On exit  : 0/0
  5273 ;;		Unchanged: 0/0
  5274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5275 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5276 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5278 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5279 ;;Total ram usage:        6 bytes
  5280 ;; Hardware stack levels used:    1
  5281 ;; This function calls:
  5282 ;;		Nothing
  5283 ;; This function is called by:
  5284 ;;		_sprintf
  5285 ;;		_eval_poly
  5286 ;; This function uses a non-reentrant model
  5287 ;;
  5288                           
  5289                           	psect	text23
  5290  002EFE                     __ptext23:
  5291                           	opt stack 0
  5292  002EFE                     ___wmul:
  5293                           	opt stack 27
  5294                           
  5295                           ;incstack = 0
  5296  002EFE  5001               	movf	___wmul@multiplier,w,c
  5297  002F00  0203               	mulwf	___wmul@multiplicand,c
  5298  002F02  CFF3 F005          	movff	prodl,___wmul@product
  5299  002F06  CFF4 F006          	movff	prodh,___wmul@product+1
  5300  002F0A  5001               	movf	___wmul@multiplier,w,c
  5301  002F0C  0204               	mulwf	___wmul@multiplicand+1,c
  5302  002F0E  50F3               	movf	prodl,w,c
  5303  002F10  2606               	addwf	___wmul@product+1,f,c
  5304  002F12  5002               	movf	___wmul@multiplier+1,w,c
  5305  002F14  0203               	mulwf	___wmul@multiplicand,c
  5306  002F16  50F3               	movf	prodl,w,c
  5307  002F18  2606               	addwf	___wmul@product+1,f,c
  5308  002F1A  C005  F001         	movff	___wmul@product,?___wmul
  5309  002F1E  C006  F002         	movff	___wmul@product+1,?___wmul+1
  5310  002F22  0012               	return	
  5311  002F24  0012               	return		;funcret
  5312  002F26                     __end_of___wmul:
  5313                           	opt stack 0
  5314                           tblptru	equ	0xFF8
  5315                           tblptrh	equ	0xFF7
  5316                           tblptrl	equ	0xFF6
  5317                           tablat	equ	0xFF5
  5318                           prodh	equ	0xFF4
  5319                           prodl	equ	0xFF3
  5320                           indf0	equ	0xFEF
  5321                           postinc0	equ	0xFEE
  5322                           fsr0h	equ	0xFEA
  5323                           fsr0l	equ	0xFE9
  5324                           wreg	equ	0xFE8
  5325                           postdec1	equ	0xFE5
  5326                           fsr1l	equ	0xFE1
  5327                           indf2	equ	0xFDF
  5328                           postinc2	equ	0xFDE
  5329                           postdec2	equ	0xFDD
  5330                           fsr2h	equ	0xFDA
  5331                           fsr2l	equ	0xFD9
  5332                           status	equ	0xFD8
  5333                           
  5334 ;; *************** function ___ftmul *****************
  5335 ;; Defined at:
  5336 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\ftmul.c"
  5337 ;; Parameters:    Size  Location     Type
  5338 ;;  f1              3   12[COMRAM] float 
  5339 ;;  f2              3   15[COMRAM] float 
  5340 ;; Auto vars:     Size  Location     Type
  5341 ;;  f3_as_produc    3   22[COMRAM] unsigned um
  5342 ;;  sign            1   26[COMRAM] unsigned char 
  5343 ;;  cntr            1   25[COMRAM] unsigned char 
  5344 ;;  exp             1   21[COMRAM] unsigned char 
  5345 ;; Return value:  Size  Location     Type
  5346 ;;                  3   12[COMRAM] float 
  5347 ;; Registers used:
  5348 ;;		wreg, status,2, status,0, cstack
  5349 ;; Tracked objects:
  5350 ;;		On entry : 0/0
  5351 ;;		On exit  : 0/0
  5352 ;;		Unchanged: 0/0
  5353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5354 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5355 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5356 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5357 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5358 ;;Total ram usage:       15 bytes
  5359 ;; Hardware stack levels used:    1
  5360 ;; Hardware stack levels required when called:    1
  5361 ;; This function calls:
  5362 ;;		___ftpack
  5363 ;; This function is called by:
  5364 ;;		_set_vision
  5365 ;;		_pow
  5366 ;;		_exp
  5367 ;;		_log
  5368 ;;		_eval_poly
  5369 ;; This function uses a non-reentrant model
  5370 ;;
  5371                           
  5372                           	psect	text24
  5373  0021EA                     __ptext24:
  5374                           	opt stack 0
  5375  0021EA                     ___ftmul:
  5376                           	opt stack 25
  5377                           
  5378                           ;incstack = 0
  5379  0021EA  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
  5380  0021EE  6A14               	clrf	(??___ftmul+1)& (0+255),c
  5381  0021F0  6A15               	clrf	(??___ftmul+2)& (0+255),c
  5382  0021F2  340E               	rlcf	___ftmul@f1+1,w,c
  5383  0021F4  3613               	rlcf	??___ftmul& (0+255),f,c
  5384  0021F6  E301               	bnc	u2571
  5385  0021F8  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  5386  0021FA                     u2571:
  5387  0021FA  5013               	movf	??___ftmul,w,c
  5388  0021FC  6E16               	movwf	___ftmul@exp,c
  5389  0021FE  5016               	movf	___ftmul@exp,w,c
  5390  002200  A4D8               	btfss	status,2,c
  5391  002202  D007               	goto	l3037
  5392  002204  0E00               	movlw	0
  5393  002206  6E0D               	movwf	?___ftmul,c
  5394  002208  0E00               	movlw	0
  5395  00220A  6E0E               	movwf	?___ftmul+1,c
  5396  00220C  0E00               	movlw	0
  5397  00220E  6E0F               	movwf	?___ftmul+2,c
  5398  002210  0012               	return	
  5399  002212                     l3037:
  5400  002212  C012  F013         	movff	___ftmul@f2+2,??___ftmul
  5401  002216  6A14               	clrf	(??___ftmul+1)& (0+255),c
  5402  002218  6A15               	clrf	(??___ftmul+2)& (0+255),c
  5403  00221A  3411               	rlcf	___ftmul@f2+1,w,c
  5404  00221C  3613               	rlcf	??___ftmul& (0+255),f,c
  5405  00221E  E301               	bnc	u2591
  5406  002220  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  5407  002222                     u2591:
  5408  002222  5013               	movf	??___ftmul,w,c
  5409  002224  6E1B               	movwf	___ftmul@sign,c
  5410  002226  501B               	movf	___ftmul@sign,w,c
  5411  002228  A4D8               	btfss	status,2,c
  5412  00222A  D007               	goto	l3043
  5413  00222C  0E00               	movlw	0
  5414  00222E  6E0D               	movwf	?___ftmul,c
  5415  002230  0E00               	movlw	0
  5416  002232  6E0E               	movwf	?___ftmul+1,c
  5417  002234  0E00               	movlw	0
  5418  002236  6E0F               	movwf	?___ftmul+2,c
  5419  002238  0012               	return	
  5420  00223A                     l3043:
  5421  00223A  501B               	movf	___ftmul@sign,w,c
  5422  00223C  0F7B               	addlw	123
  5423  00223E  2616               	addwf	___ftmul@exp,f,c
  5424  002240  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
  5425  002244  5012               	movf	___ftmul@f2+2,w,c
  5426  002246  1A1B               	xorwf	___ftmul@sign,f,c
  5427  002248  0E80               	movlw	128
  5428  00224A  161B               	andwf	___ftmul@sign,f,c
  5429  00224C  8E0E               	bsf	___ftmul@f1+1,7,c
  5430  00224E  8E11               	bsf	___ftmul@f2+1,7,c
  5431  002250  0EFF               	movlw	255
  5432  002252  1610               	andwf	___ftmul@f2,f,c
  5433  002254  0EFF               	movlw	255
  5434  002256  1611               	andwf	___ftmul@f2+1,f,c
  5435  002258  0E00               	movlw	0
  5436  00225A  1612               	andwf	___ftmul@f2+2,f,c
  5437  00225C  0E00               	movlw	0
  5438  00225E  6E17               	movwf	___ftmul@f3_as_product,c
  5439  002260  0E00               	movlw	0
  5440  002262  6E18               	movwf	___ftmul@f3_as_product+1,c
  5441  002264  0E00               	movlw	0
  5442  002266  6E19               	movwf	___ftmul@f3_as_product+2,c
  5443  002268  0E07               	movlw	7
  5444  00226A  6E1A               	movwf	___ftmul@cntr,c
  5445  00226C  D000               	goto	l3057
  5446  00226E                     l3057:
  5447  00226E  A00D               	btfss	___ftmul@f1,0,c
  5448  002270  D007               	goto	l3061
  5449  002272  5010               	movf	___ftmul@f2,w,c
  5450  002274  2617               	addwf	___ftmul@f3_as_product,f,c
  5451  002276  5011               	movf	___ftmul@f2+1,w,c
  5452  002278  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  5453  00227A  5012               	movf	___ftmul@f2+2,w,c
  5454  00227C  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  5455  00227E  D000               	goto	l3061
  5456  002280                     l3061:
  5457  002280  90D8               	bcf	status,0,c
  5458  002282  320F               	rrcf	___ftmul@f1+2,f,c
  5459  002284  320E               	rrcf	___ftmul@f1+1,f,c
  5460  002286  320D               	rrcf	___ftmul@f1,f,c
  5461  002288  90D8               	bcf	status,0,c
  5462  00228A  3610               	rlcf	___ftmul@f2,f,c
  5463  00228C  3611               	rlcf	___ftmul@f2+1,f,c
  5464  00228E  3612               	rlcf	___ftmul@f2+2,f,c
  5465  002290  2E1A               	decfsz	___ftmul@cntr,f,c
  5466  002292  D7ED               	goto	l3057
  5467  002294  D000               	goto	l3065
  5468  002296                     l3065:
  5469  002296  0E09               	movlw	9
  5470  002298  6E1A               	movwf	___ftmul@cntr,c
  5471  00229A  D000               	goto	l3067
  5472  00229C                     l3067:
  5473  00229C  A00D               	btfss	___ftmul@f1,0,c
  5474  00229E  D007               	goto	l3071
  5475  0022A0  5010               	movf	___ftmul@f2,w,c
  5476  0022A2  2617               	addwf	___ftmul@f3_as_product,f,c
  5477  0022A4  5011               	movf	___ftmul@f2+1,w,c
  5478  0022A6  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  5479  0022A8  5012               	movf	___ftmul@f2+2,w,c
  5480  0022AA  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  5481  0022AC  D000               	goto	l3071
  5482  0022AE                     l3071:
  5483  0022AE  90D8               	bcf	status,0,c
  5484  0022B0  320F               	rrcf	___ftmul@f1+2,f,c
  5485  0022B2  320E               	rrcf	___ftmul@f1+1,f,c
  5486  0022B4  320D               	rrcf	___ftmul@f1,f,c
  5487  0022B6  90D8               	bcf	status,0,c
  5488  0022B8  3219               	rrcf	___ftmul@f3_as_product+2,f,c
  5489  0022BA  3218               	rrcf	___ftmul@f3_as_product+1,f,c
  5490  0022BC  3217               	rrcf	___ftmul@f3_as_product,f,c
  5491  0022BE  2E1A               	decfsz	___ftmul@cntr,f,c
  5492  0022C0  D7ED               	goto	l3067
  5493  0022C2  D000               	goto	l3075
  5494  0022C4                     l3075:
  5495  0022C4  C017  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  5496  0022C8  C018  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5497  0022CC  C019  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5498  0022D0  C016  F004         	movff	___ftmul@exp,___ftpack@exp
  5499  0022D4  C01B  F005         	movff	___ftmul@sign,___ftpack@sign
  5500  0022D8  EC2F  F013         	call	___ftpack	;wreg free
  5501  0022DC  C001  F00D         	movff	?___ftpack,?___ftmul
  5502  0022E0  C002  F00E         	movff	?___ftpack+1,?___ftmul+1
  5503  0022E4  C003  F00F         	movff	?___ftpack+2,?___ftmul+2
  5504  0022E8  0012               	return	
  5505  0022EA  0012               	return		;funcret
  5506  0022EC                     __end_of___ftmul:
  5507                           	opt stack 0
  5508                           tblptru	equ	0xFF8
  5509                           tblptrh	equ	0xFF7
  5510                           tblptrl	equ	0xFF6
  5511                           tablat	equ	0xFF5
  5512                           prodh	equ	0xFF4
  5513                           prodl	equ	0xFF3
  5514                           indf0	equ	0xFEF
  5515                           postinc0	equ	0xFEE
  5516                           fsr0h	equ	0xFEA
  5517                           fsr0l	equ	0xFE9
  5518                           wreg	equ	0xFE8
  5519                           postdec1	equ	0xFE5
  5520                           fsr1l	equ	0xFE1
  5521                           indf2	equ	0xFDF
  5522                           postinc2	equ	0xFDE
  5523                           postdec2	equ	0xFDD
  5524                           fsr2h	equ	0xFDA
  5525                           fsr2l	equ	0xFD9
  5526                           status	equ	0xFD8
  5527                           
  5528 ;; *************** function ___ftsub *****************
  5529 ;; Defined at:
  5530 ;;		line 20 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\ftsub.c"
  5531 ;; Parameters:    Size  Location     Type
  5532 ;;  f1              3   39[COMRAM] float 
  5533 ;;  f2              3   42[COMRAM] float 
  5534 ;; Auto vars:     Size  Location     Type
  5535 ;;		None
  5536 ;; Return value:  Size  Location     Type
  5537 ;;                  3   39[COMRAM] float 
  5538 ;; Registers used:
  5539 ;;		wreg, status,2, status,0, cstack
  5540 ;; Tracked objects:
  5541 ;;		On entry : 0/0
  5542 ;;		On exit  : 0/0
  5543 ;;		Unchanged: 0/0
  5544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5545 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5548 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5549 ;;Total ram usage:        6 bytes
  5550 ;; Hardware stack levels used:    1
  5551 ;; Hardware stack levels required when called:    2
  5552 ;; This function calls:
  5553 ;;		___ftadd
  5554 ;; This function is called by:
  5555 ;;		_exp
  5556 ;; This function uses a non-reentrant model
  5557 ;;
  5558                           
  5559                           	psect	text25
  5560  002E4C                     __ptext25:
  5561                           	opt stack 0
  5562  002E4C                     ___ftsub:
  5563                           	opt stack 25
  5564                           
  5565                           ;incstack = 0
  5566  002E4C  502B               	movf	___ftsub@f2,w,c
  5567  002E4E  102C               	iorwf	___ftsub@f2+1,w,c
  5568  002E50  102D               	iorwf	___ftsub@f2+2,w,c
  5569  002E52  B4D8               	btfsc	status,2,c
  5570  002E54  D007               	goto	l3357
  5571  002E56  0E00               	movlw	0
  5572  002E58  1A2B               	xorwf	___ftsub@f2,f,c
  5573  002E5A  0E00               	movlw	0
  5574  002E5C  1A2C               	xorwf	___ftsub@f2+1,f,c
  5575  002E5E  0E80               	movlw	128
  5576  002E60  1A2D               	xorwf	___ftsub@f2+2,f,c
  5577  002E62  D000               	goto	l3357
  5578  002E64                     l3357:
  5579  002E64  C028  F01C         	movff	___ftsub@f1,___ftadd@f1
  5580  002E68  C029  F01D         	movff	___ftsub@f1+1,___ftadd@f1+1
  5581  002E6C  C02A  F01E         	movff	___ftsub@f1+2,___ftadd@f1+2
  5582  002E70  C02B  F01F         	movff	___ftsub@f2,___ftadd@f2
  5583  002E74  C02C  F020         	movff	___ftsub@f2+1,___ftadd@f2+1
  5584  002E78  C02D  F021         	movff	___ftsub@f2+2,___ftadd@f2+2
  5585  002E7C  EC4B  F00C         	call	___ftadd	;wreg free
  5586  002E80  C01C  F028         	movff	?___ftadd,?___ftsub
  5587  002E84  C01D  F029         	movff	?___ftadd+1,?___ftsub+1
  5588  002E88  C01E  F02A         	movff	?___ftadd+2,?___ftsub+2
  5589  002E8C  0012               	return	
  5590  002E8E  0012               	return		;funcret
  5591  002E90                     __end_of___ftsub:
  5592                           	opt stack 0
  5593                           tblptru	equ	0xFF8
  5594                           tblptrh	equ	0xFF7
  5595                           tblptrl	equ	0xFF6
  5596                           tablat	equ	0xFF5
  5597                           prodh	equ	0xFF4
  5598                           prodl	equ	0xFF3
  5599                           indf0	equ	0xFEF
  5600                           postinc0	equ	0xFEE
  5601                           fsr0h	equ	0xFEA
  5602                           fsr0l	equ	0xFE9
  5603                           wreg	equ	0xFE8
  5604                           postdec1	equ	0xFE5
  5605                           fsr1l	equ	0xFE1
  5606                           indf2	equ	0xFDF
  5607                           postinc2	equ	0xFDE
  5608                           postdec2	equ	0xFDD
  5609                           fsr2h	equ	0xFDA
  5610                           fsr2l	equ	0xFD9
  5611                           status	equ	0xFD8
  5612                           
  5613 ;; *************** function ___ftadd *****************
  5614 ;; Defined at:
  5615 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\ftadd.c"
  5616 ;; Parameters:    Size  Location     Type
  5617 ;;  f1              3   27[COMRAM] float 
  5618 ;;  f2              3   30[COMRAM] float 
  5619 ;; Auto vars:     Size  Location     Type
  5620 ;;  exp1            1   38[COMRAM] unsigned char 
  5621 ;;  exp2            1   37[COMRAM] unsigned char 
  5622 ;;  sign            1   36[COMRAM] unsigned char 
  5623 ;; Return value:  Size  Location     Type
  5624 ;;                  3   27[COMRAM] float 
  5625 ;; Registers used:
  5626 ;;		wreg, status,2, status,0, cstack
  5627 ;; Tracked objects:
  5628 ;;		On entry : 0/0
  5629 ;;		On exit  : 0/0
  5630 ;;		Unchanged: 0/0
  5631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5632 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5633 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5634 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5635 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5636 ;;Total ram usage:       12 bytes
  5637 ;; Hardware stack levels used:    1
  5638 ;; Hardware stack levels required when called:    1
  5639 ;; This function calls:
  5640 ;;		___ftpack
  5641 ;; This function is called by:
  5642 ;;		_set_vision
  5643 ;;		___ftsub
  5644 ;;		_floor
  5645 ;;		_log
  5646 ;;		_eval_poly
  5647 ;; This function uses a non-reentrant model
  5648 ;;
  5649                           
  5650                           	psect	text26
  5651  001896                     __ptext26:
  5652                           	opt stack 0
  5653  001896                     ___ftadd:
  5654                           	opt stack 25
  5655                           
  5656                           ;incstack = 0
  5657  001896  C01E  F022         	movff	___ftadd@f1+2,??___ftadd
  5658  00189A  6A23               	clrf	(??___ftadd+1)& (0+255),c
  5659  00189C  6A24               	clrf	(??___ftadd+2)& (0+255),c
  5660  00189E  341D               	rlcf	___ftadd@f1+1,w,c
  5661  0018A0  3622               	rlcf	??___ftadd& (0+255),f,c
  5662  0018A2  E301               	bnc	u2361
  5663  0018A4  8023               	bsf	(??___ftadd+1)& (0+255),0,c
  5664  0018A6                     u2361:
  5665  0018A6  5022               	movf	??___ftadd,w,c
  5666  0018A8  6E27               	movwf	___ftadd@exp1,c
  5667  0018AA  C021  F022         	movff	___ftadd@f2+2,??___ftadd
  5668  0018AE  6A23               	clrf	(??___ftadd+1)& (0+255),c
  5669  0018B0  6A24               	clrf	(??___ftadd+2)& (0+255),c
  5670  0018B2  3420               	rlcf	___ftadd@f2+1,w,c
  5671  0018B4  3622               	rlcf	??___ftadd& (0+255),f,c
  5672  0018B6  E301               	bnc	u2371
  5673  0018B8  8023               	bsf	(??___ftadd+1)& (0+255),0,c
  5674  0018BA                     u2371:
  5675  0018BA  5022               	movf	??___ftadd,w,c
  5676  0018BC  6E26               	movwf	___ftadd@exp2,c
  5677  0018BE  5027               	movf	___ftadd@exp1,w,c
  5678  0018C0  B4D8               	btfsc	status,2,c
  5679  0018C2  D00B               	goto	l1120
  5680  0018C4  5026               	movf	___ftadd@exp2,w,c
  5681  0018C6  5C27               	subwf	___ftadd@exp1,w,c
  5682  0018C8  B0D8               	btfsc	status,0,c
  5683  0018CA  D00E               	goto	l2969
  5684  0018CC  5027               	movf	___ftadd@exp1,w,c
  5685  0018CE  0800               	sublw	0
  5686  0018D0  2426               	addwf	___ftadd@exp2,w,c
  5687  0018D2  6E22               	movwf	??___ftadd& (0+255),c
  5688  0018D4  0E18               	movlw	24
  5689  0018D6  6422               	cpfsgt	??___ftadd,c
  5690  0018D8  D007               	goto	l2969
  5691  0018DA                     l1120:
  5692  0018DA  C01F  F01C         	movff	___ftadd@f2,?___ftadd
  5693  0018DE  C020  F01D         	movff	___ftadd@f2+1,?___ftadd+1
  5694  0018E2  C021  F01E         	movff	___ftadd@f2+2,?___ftadd+2
  5695  0018E6  0012               	return	
  5696  0018E8                     l2969:
  5697  0018E8  5026               	movf	___ftadd@exp2,w,c
  5698  0018EA  B4D8               	btfsc	status,2,c
  5699  0018EC  D00B               	goto	l1124
  5700  0018EE  5027               	movf	___ftadd@exp1,w,c
  5701  0018F0  5C26               	subwf	___ftadd@exp2,w,c
  5702  0018F2  B0D8               	btfsc	status,0,c
  5703  0018F4  D00E               	goto	l2975
  5704  0018F6  5026               	movf	___ftadd@exp2,w,c
  5705  0018F8  0800               	sublw	0
  5706  0018FA  2427               	addwf	___ftadd@exp1,w,c
  5707  0018FC  6E22               	movwf	??___ftadd& (0+255),c
  5708  0018FE  0E18               	movlw	24
  5709  001900  6422               	cpfsgt	??___ftadd,c
  5710  001902  D007               	goto	l2975
  5711  001904                     l1124:
  5712  001904  C01C  F01C         	movff	___ftadd@f1,?___ftadd
  5713  001908  C01D  F01D         	movff	___ftadd@f1+1,?___ftadd+1
  5714  00190C  C01E  F01E         	movff	___ftadd@f1+2,?___ftadd+2
  5715  001910  0012               	return	
  5716  001912                     l2975:
  5717  001912  0E06               	movlw	6
  5718  001914  6E25               	movwf	___ftadd@sign,c
  5719  001916  AE1E               	btfss	___ftadd@f1+2,7,c
  5720  001918  D002               	goto	l2981
  5721  00191A  8E25               	bsf	___ftadd@sign,7,c
  5722  00191C  D000               	goto	l2981
  5723  00191E                     l2981:
  5724  00191E  BE21               	btfsc	___ftadd@f2+2,7,c
  5725  001920  8C25               	bsf	___ftadd@sign,6,c
  5726  001922  8E1D               	bsf	___ftadd@f1+1,7,c
  5727  001924  0EFF               	movlw	255
  5728  001926  161C               	andwf	___ftadd@f1,f,c
  5729  001928  0EFF               	movlw	255
  5730  00192A  161D               	andwf	___ftadd@f1+1,f,c
  5731  00192C  0E00               	movlw	0
  5732  00192E  161E               	andwf	___ftadd@f1+2,f,c
  5733  001930  8E20               	bsf	___ftadd@f2+1,7,c
  5734  001932  0EFF               	movlw	255
  5735  001934  161F               	andwf	___ftadd@f2,f,c
  5736  001936  0EFF               	movlw	255
  5737  001938  1620               	andwf	___ftadd@f2+1,f,c
  5738  00193A  0E00               	movlw	0
  5739  00193C  1621               	andwf	___ftadd@f2+2,f,c
  5740  00193E  5026               	movf	___ftadd@exp2,w,c
  5741  001940  5C27               	subwf	___ftadd@exp1,w,c
  5742  001942  B0D8               	btfsc	status,0,c
  5743  001944  D01E               	goto	l3001
  5744  001946                     l2991:
  5745  001946  90D8               	bcf	status,0,c
  5746  001948  361F               	rlcf	___ftadd@f2,f,c
  5747  00194A  3620               	rlcf	___ftadd@f2+1,f,c
  5748  00194C  3621               	rlcf	___ftadd@f2+2,f,c
  5749  00194E  0626               	decf	___ftadd@exp2,f,c
  5750  001950  5027               	movf	___ftadd@exp1,w,c
  5751  001952  1826               	xorwf	___ftadd@exp2,w,c
  5752  001954  B4D8               	btfsc	status,2,c
  5753  001956  D00F               	goto	l2999
  5754  001958  0625               	decf	___ftadd@sign,f,c
  5755  00195A  C025  F022         	movff	___ftadd@sign,??___ftadd
  5756  00195E  0E07               	movlw	7
  5757  001960  1622               	andwf	??___ftadd,f,c
  5758  001962  B4D8               	btfsc	status,2,c
  5759  001964  D008               	goto	l2999
  5760  001966  D7EF               	goto	l2991
  5761  001968  D006               	goto	l2999
  5762  00196A                     l2997:
  5763  00196A  90D8               	bcf	status,0,c
  5764  00196C  321E               	rrcf	___ftadd@f1+2,f,c
  5765  00196E  321D               	rrcf	___ftadd@f1+1,f,c
  5766  001970  321C               	rrcf	___ftadd@f1,f,c
  5767  001972  2A27               	incf	___ftadd@exp1,f,c
  5768  001974  D000               	goto	l2999
  5769  001976                     l2999:
  5770  001976  5026               	movf	___ftadd@exp2,w,c
  5771  001978  1827               	xorwf	___ftadd@exp1,w,c
  5772  00197A  B4D8               	btfsc	status,2,c
  5773  00197C  D024               	goto	l1135
  5774  00197E  D7F5               	goto	l2997
  5775  001980  D022               	goto	l1135
  5776  001982                     l3001:
  5777  001982  5027               	movf	___ftadd@exp1,w,c
  5778  001984  5C26               	subwf	___ftadd@exp2,w,c
  5779  001986  B0D8               	btfsc	status,0,c
  5780  001988  D01E               	goto	l1135
  5781  00198A                     l3003:
  5782  00198A  90D8               	bcf	status,0,c
  5783  00198C  361C               	rlcf	___ftadd@f1,f,c
  5784  00198E  361D               	rlcf	___ftadd@f1+1,f,c
  5785  001990  361E               	rlcf	___ftadd@f1+2,f,c
  5786  001992  0627               	decf	___ftadd@exp1,f,c
  5787  001994  5027               	movf	___ftadd@exp1,w,c
  5788  001996  1826               	xorwf	___ftadd@exp2,w,c
  5789  001998  B4D8               	btfsc	status,2,c
  5790  00199A  D00F               	goto	l3011
  5791  00199C  0625               	decf	___ftadd@sign,f,c
  5792  00199E  C025  F022         	movff	___ftadd@sign,??___ftadd
  5793  0019A2  0E07               	movlw	7
  5794  0019A4  1622               	andwf	??___ftadd,f,c
  5795  0019A6  B4D8               	btfsc	status,2,c
  5796  0019A8  D008               	goto	l3011
  5797  0019AA  D7EF               	goto	l3003
  5798  0019AC  D006               	goto	l3011
  5799  0019AE                     l3009:
  5800  0019AE  90D8               	bcf	status,0,c
  5801  0019B0  3221               	rrcf	___ftadd@f2+2,f,c
  5802  0019B2  3220               	rrcf	___ftadd@f2+1,f,c
  5803  0019B4  321F               	rrcf	___ftadd@f2,f,c
  5804  0019B6  2A26               	incf	___ftadd@exp2,f,c
  5805  0019B8  D000               	goto	l3011
  5806  0019BA                     l3011:
  5807  0019BA  5026               	movf	___ftadd@exp2,w,c
  5808  0019BC  1827               	xorwf	___ftadd@exp1,w,c
  5809  0019BE  B4D8               	btfsc	status,2,c
  5810  0019C0  D002               	goto	l1135
  5811  0019C2  D7F5               	goto	l3009
  5812  0019C4  D000               	goto	l1135
  5813  0019C6                     l1135:
  5814  0019C6  AE25               	btfss	___ftadd@sign,7,c
  5815  0019C8  D00C               	goto	l1144
  5816  0019CA  0EFF               	movlw	255
  5817  0019CC  1A1C               	xorwf	___ftadd@f1,f,c
  5818  0019CE  0EFF               	movlw	255
  5819  0019D0  1A1D               	xorwf	___ftadd@f1+1,f,c
  5820  0019D2  0EFF               	movlw	255
  5821  0019D4  1A1E               	xorwf	___ftadd@f1+2,f,c
  5822  0019D6  0E01               	movlw	1
  5823  0019D8  261C               	addwf	___ftadd@f1,f,c
  5824  0019DA  0E00               	movlw	0
  5825  0019DC  221D               	addwfc	___ftadd@f1+1,f,c
  5826  0019DE  0E00               	movlw	0
  5827  0019E0  221E               	addwfc	___ftadd@f1+2,f,c
  5828  0019E2                     l1144:
  5829  0019E2  AC25               	btfss	___ftadd@sign,6,c
  5830  0019E4  D00D               	goto	l3017
  5831  0019E6  0EFF               	movlw	255
  5832  0019E8  1A1F               	xorwf	___ftadd@f2,f,c
  5833  0019EA  0EFF               	movlw	255
  5834  0019EC  1A20               	xorwf	___ftadd@f2+1,f,c
  5835  0019EE  0EFF               	movlw	255
  5836  0019F0  1A21               	xorwf	___ftadd@f2+2,f,c
  5837  0019F2  0E01               	movlw	1
  5838  0019F4  261F               	addwf	___ftadd@f2,f,c
  5839  0019F6  0E00               	movlw	0
  5840  0019F8  2220               	addwfc	___ftadd@f2+1,f,c
  5841  0019FA  0E00               	movlw	0
  5842  0019FC  2221               	addwfc	___ftadd@f2+2,f,c
  5843  0019FE  D000               	goto	l3017
  5844  001A00                     l3017:
  5845  001A00  0E00               	movlw	0
  5846  001A02  6E25               	movwf	___ftadd@sign,c
  5847  001A04  501C               	movf	___ftadd@f1,w,c
  5848  001A06  261F               	addwf	___ftadd@f2,f,c
  5849  001A08  501D               	movf	___ftadd@f1+1,w,c
  5850  001A0A  2220               	addwfc	___ftadd@f2+1,f,c
  5851  001A0C  501E               	movf	___ftadd@f1+2,w,c
  5852  001A0E  2221               	addwfc	___ftadd@f2+2,f,c
  5853  001A10  AE21               	btfss	___ftadd@f2+2,7,c
  5854  001A12  D00F               	goto	l3027
  5855  001A14  0EFF               	movlw	255
  5856  001A16  1A1F               	xorwf	___ftadd@f2,f,c
  5857  001A18  0EFF               	movlw	255
  5858  001A1A  1A20               	xorwf	___ftadd@f2+1,f,c
  5859  001A1C  0EFF               	movlw	255
  5860  001A1E  1A21               	xorwf	___ftadd@f2+2,f,c
  5861  001A20  0E01               	movlw	1
  5862  001A22  261F               	addwf	___ftadd@f2,f,c
  5863  001A24  0E00               	movlw	0
  5864  001A26  2220               	addwfc	___ftadd@f2+1,f,c
  5865  001A28  0E00               	movlw	0
  5866  001A2A  2221               	addwfc	___ftadd@f2+2,f,c
  5867  001A2C  0E01               	movlw	1
  5868  001A2E  6E25               	movwf	___ftadd@sign,c
  5869  001A30  D000               	goto	l3027
  5870  001A32                     l3027:
  5871  001A32  C01F  F001         	movff	___ftadd@f2,___ftpack@arg
  5872  001A36  C020  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  5873  001A3A  C021  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  5874  001A3E  C027  F004         	movff	___ftadd@exp1,___ftpack@exp
  5875  001A42  C025  F005         	movff	___ftadd@sign,___ftpack@sign
  5876  001A46  EC2F  F013         	call	___ftpack	;wreg free
  5877  001A4A  C001  F01C         	movff	?___ftpack,?___ftadd
  5878  001A4E  C002  F01D         	movff	?___ftpack+1,?___ftadd+1
  5879  001A52  C003  F01E         	movff	?___ftpack+2,?___ftadd+2
  5880  001A56  0012               	return	
  5881  001A58  0012               	return		;funcret
  5882  001A5A                     __end_of___ftadd:
  5883                           	opt stack 0
  5884                           tblptru	equ	0xFF8
  5885                           tblptrh	equ	0xFF7
  5886                           tblptrl	equ	0xFF6
  5887                           tablat	equ	0xFF5
  5888                           prodh	equ	0xFF4
  5889                           prodl	equ	0xFF3
  5890                           indf0	equ	0xFEF
  5891                           postinc0	equ	0xFEE
  5892                           fsr0h	equ	0xFEA
  5893                           fsr0l	equ	0xFE9
  5894                           wreg	equ	0xFE8
  5895                           postdec1	equ	0xFE5
  5896                           fsr1l	equ	0xFE1
  5897                           indf2	equ	0xFDF
  5898                           postinc2	equ	0xFDE
  5899                           postdec2	equ	0xFDD
  5900                           fsr2h	equ	0xFDA
  5901                           fsr2l	equ	0xFD9
  5902                           status	equ	0xFD8
  5903                           
  5904 ;; *************** function ___ftneg *****************
  5905 ;; Defined at:
  5906 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\ftneg.c"
  5907 ;; Parameters:    Size  Location     Type
  5908 ;;  f1              3    0[COMRAM] float 
  5909 ;; Auto vars:     Size  Location     Type
  5910 ;;		None
  5911 ;; Return value:  Size  Location     Type
  5912 ;;                  3    0[COMRAM] float 
  5913 ;; Registers used:
  5914 ;;		wreg, status,2, status,0
  5915 ;; Tracked objects:
  5916 ;;		On entry : 0/0
  5917 ;;		On exit  : 0/0
  5918 ;;		Unchanged: 0/0
  5919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5920 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5923 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5924 ;;Total ram usage:        3 bytes
  5925 ;; Hardware stack levels used:    1
  5926 ;; This function calls:
  5927 ;;		Nothing
  5928 ;; This function is called by:
  5929 ;;		_pow
  5930 ;;		_exp
  5931 ;; This function uses a non-reentrant model
  5932 ;;
  5933                           
  5934                           	psect	text27
  5935  002F70                     __ptext27:
  5936                           	opt stack 0
  5937  002F70                     ___ftneg:
  5938                           	opt stack 27
  5939                           
  5940                           ;incstack = 0
  5941  002F70  5001               	movf	___ftneg@f1,w,c
  5942  002F72  1002               	iorwf	___ftneg@f1+1,w,c
  5943  002F74  1003               	iorwf	___ftneg@f1+2,w,c
  5944  002F76  B4D8               	btfsc	status,2,c
  5945  002F78  D006               	goto	l1177
  5946  002F7A  0E00               	movlw	0
  5947  002F7C  1A01               	xorwf	___ftneg@f1,f,c
  5948  002F7E  0E00               	movlw	0
  5949  002F80  1A02               	xorwf	___ftneg@f1+1,f,c
  5950  002F82  0E80               	movlw	128
  5951  002F84  1A03               	xorwf	___ftneg@f1+2,f,c
  5952  002F86                     l1177:
  5953  002F86  C001  F001         	movff	___ftneg@f1,?___ftneg
  5954  002F8A  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  5955  002F8E  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  5956  002F92  0012               	return		;funcret
  5957  002F94                     __end_of___ftneg:
  5958                           	opt stack 0
  5959                           tblptru	equ	0xFF8
  5960                           tblptrh	equ	0xFF7
  5961                           tblptrl	equ	0xFF6
  5962                           tablat	equ	0xFF5
  5963                           prodh	equ	0xFF4
  5964                           prodl	equ	0xFF3
  5965                           indf0	equ	0xFEF
  5966                           postinc0	equ	0xFEE
  5967                           fsr0h	equ	0xFEA
  5968                           fsr0l	equ	0xFE9
  5969                           wreg	equ	0xFE8
  5970                           postdec1	equ	0xFE5
  5971                           fsr1l	equ	0xFE1
  5972                           indf2	equ	0xFDF
  5973                           postinc2	equ	0xFDE
  5974                           postdec2	equ	0xFDD
  5975                           fsr2h	equ	0xFDA
  5976                           fsr2l	equ	0xFD9
  5977                           status	equ	0xFD8
  5978                           
  5979 ;; *************** function ___ftdiv *****************
  5980 ;; Defined at:
  5981 ;;		line 54 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  5982 ;; Parameters:    Size  Location     Type
  5983 ;;  f1              3    8[COMRAM] float 
  5984 ;;  f2              3   11[COMRAM] float 
  5985 ;; Auto vars:     Size  Location     Type
  5986 ;;  f3              3   18[COMRAM] float 
  5987 ;;  sign            1   22[COMRAM] unsigned char 
  5988 ;;  exp             1   21[COMRAM] unsigned char 
  5989 ;;  cntr            1   17[COMRAM] unsigned char 
  5990 ;; Return value:  Size  Location     Type
  5991 ;;                  3    8[COMRAM] float 
  5992 ;; Registers used:
  5993 ;;		wreg, status,2, status,0, cstack
  5994 ;; Tracked objects:
  5995 ;;		On entry : 0/0
  5996 ;;		On exit  : 0/0
  5997 ;;		Unchanged: 0/0
  5998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5999 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6000 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6001 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6002 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6003 ;;Total ram usage:       15 bytes
  6004 ;; Hardware stack levels used:    1
  6005 ;; Hardware stack levels required when called:    1
  6006 ;; This function calls:
  6007 ;;		___ftpack
  6008 ;; This function is called by:
  6009 ;;		_exp
  6010 ;; This function uses a non-reentrant model
  6011 ;;
  6012                           
  6013                           	psect	text28
  6014  0022EC                     __ptext28:
  6015                           	opt stack 0
  6016  0022EC                     ___ftdiv:
  6017                           	opt stack 26
  6018                           
  6019                           ;incstack = 0
  6020  0022EC  C00B  F00F         	movff	___ftdiv@f1+2,??___ftdiv
  6021  0022F0  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  6022  0022F2  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  6023  0022F4  340A               	rlcf	___ftdiv@f1+1,w,c
  6024  0022F6  360F               	rlcf	??___ftdiv& (0+255),f,c
  6025  0022F8  E301               	bnc	u2991
  6026  0022FA  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  6027  0022FC                     u2991:
  6028  0022FC  500F               	movf	??___ftdiv,w,c
  6029  0022FE  6E16               	movwf	___ftdiv@exp,c
  6030  002300  5016               	movf	___ftdiv@exp,w,c
  6031  002302  A4D8               	btfss	status,2,c
  6032  002304  D007               	goto	l3313
  6033  002306  0E00               	movlw	0
  6034  002308  6E09               	movwf	?___ftdiv,c
  6035  00230A  0E00               	movlw	0
  6036  00230C  6E0A               	movwf	?___ftdiv+1,c
  6037  00230E  0E00               	movlw	0
  6038  002310  6E0B               	movwf	?___ftdiv+2,c
  6039  002312  0012               	return	
  6040  002314                     l3313:
  6041  002314  C00E  F00F         	movff	___ftdiv@f2+2,??___ftdiv
  6042  002318  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  6043  00231A  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  6044  00231C  340D               	rlcf	___ftdiv@f2+1,w,c
  6045  00231E  360F               	rlcf	??___ftdiv& (0+255),f,c
  6046  002320  E301               	bnc	u3011
  6047  002322  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  6048  002324                     u3011:
  6049  002324  500F               	movf	??___ftdiv,w,c
  6050  002326  6E17               	movwf	___ftdiv@sign,c
  6051  002328  5017               	movf	___ftdiv@sign,w,c
  6052  00232A  A4D8               	btfss	status,2,c
  6053  00232C  D007               	goto	l3319
  6054  00232E  0E00               	movlw	0
  6055  002330  6E09               	movwf	?___ftdiv,c
  6056  002332  0E00               	movlw	0
  6057  002334  6E0A               	movwf	?___ftdiv+1,c
  6058  002336  0E00               	movlw	0
  6059  002338  6E0B               	movwf	?___ftdiv+2,c
  6060  00233A  0012               	return	
  6061  00233C                     l3319:
  6062  00233C  0E00               	movlw	0
  6063  00233E  6E13               	movwf	___ftdiv@f3,c
  6064  002340  0E00               	movlw	0
  6065  002342  6E14               	movwf	___ftdiv@f3+1,c
  6066  002344  0E00               	movlw	0
  6067  002346  6E15               	movwf	___ftdiv@f3+2,c
  6068  002348  5017               	movf	___ftdiv@sign,w,c
  6069  00234A  0F89               	addlw	137
  6070  00234C  5E16               	subwf	___ftdiv@exp,f,c
  6071  00234E  C00B  F017         	movff	___ftdiv@f1+2,___ftdiv@sign
  6072  002352  500E               	movf	___ftdiv@f2+2,w,c
  6073  002354  1A17               	xorwf	___ftdiv@sign,f,c
  6074  002356  0E80               	movlw	128
  6075  002358  1617               	andwf	___ftdiv@sign,f,c
  6076  00235A  8E0A               	bsf	___ftdiv@f1+1,7,c
  6077  00235C  0EFF               	movlw	255
  6078  00235E  1609               	andwf	___ftdiv@f1,f,c
  6079  002360  0EFF               	movlw	255
  6080  002362  160A               	andwf	___ftdiv@f1+1,f,c
  6081  002364  0E00               	movlw	0
  6082  002366  160B               	andwf	___ftdiv@f1+2,f,c
  6083  002368  8E0D               	bsf	___ftdiv@f2+1,7,c
  6084  00236A  0EFF               	movlw	255
  6085  00236C  160C               	andwf	___ftdiv@f2,f,c
  6086  00236E  0EFF               	movlw	255
  6087  002370  160D               	andwf	___ftdiv@f2+1,f,c
  6088  002372  0E00               	movlw	0
  6089  002374  160E               	andwf	___ftdiv@f2+2,f,c
  6090  002376  0E18               	movlw	24
  6091  002378  6E12               	movwf	___ftdiv@cntr,c
  6092  00237A  D000               	goto	l3339
  6093  00237C                     l3339:
  6094  00237C  90D8               	bcf	status,0,c
  6095  00237E  3613               	rlcf	___ftdiv@f3,f,c
  6096  002380  3614               	rlcf	___ftdiv@f3+1,f,c
  6097  002382  3615               	rlcf	___ftdiv@f3+2,f,c
  6098  002384  500C               	movf	___ftdiv@f2,w,c
  6099  002386  5C09               	subwf	___ftdiv@f1,w,c
  6100  002388  500D               	movf	___ftdiv@f2+1,w,c
  6101  00238A  580A               	subwfb	___ftdiv@f1+1,w,c
  6102  00238C  500E               	movf	___ftdiv@f2+2,w,c
  6103  00238E  580B               	subwfb	___ftdiv@f1+2,w,c
  6104  002390  A0D8               	btfss	status,0,c
  6105  002392  D007               	goto	l1155
  6106  002394  500C               	movf	___ftdiv@f2,w,c
  6107  002396  5E09               	subwf	___ftdiv@f1,f,c
  6108  002398  500D               	movf	___ftdiv@f2+1,w,c
  6109  00239A  5A0A               	subwfb	___ftdiv@f1+1,f,c
  6110  00239C  500E               	movf	___ftdiv@f2+2,w,c
  6111  00239E  5A0B               	subwfb	___ftdiv@f1+2,f,c
  6112  0023A0  8013               	bsf	___ftdiv@f3,0,c
  6113  0023A2                     l1155:
  6114  0023A2  90D8               	bcf	status,0,c
  6115  0023A4  3609               	rlcf	___ftdiv@f1,f,c
  6116  0023A6  360A               	rlcf	___ftdiv@f1+1,f,c
  6117  0023A8  360B               	rlcf	___ftdiv@f1+2,f,c
  6118  0023AA  2E12               	decfsz	___ftdiv@cntr,f,c
  6119  0023AC  D7E7               	goto	l3339
  6120  0023AE  D000               	goto	l3349
  6121  0023B0                     l3349:
  6122  0023B0  C013  F001         	movff	___ftdiv@f3,___ftpack@arg
  6123  0023B4  C014  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6124  0023B8  C015  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6125  0023BC  C016  F004         	movff	___ftdiv@exp,___ftpack@exp
  6126  0023C0  C017  F005         	movff	___ftdiv@sign,___ftpack@sign
  6127  0023C4  EC2F  F013         	call	___ftpack	;wreg free
  6128  0023C8  C001  F009         	movff	?___ftpack,?___ftdiv
  6129  0023CC  C002  F00A         	movff	?___ftpack+1,?___ftdiv+1
  6130  0023D0  C003  F00B         	movff	?___ftpack+2,?___ftdiv+2
  6131  0023D4  0012               	return	
  6132  0023D6  0012               	return		;funcret
  6133  0023D8                     __end_of___ftdiv:
  6134                           	opt stack 0
  6135                           tblptru	equ	0xFF8
  6136                           tblptrh	equ	0xFF7
  6137                           tblptrl	equ	0xFF6
  6138                           tablat	equ	0xFF5
  6139                           prodh	equ	0xFF4
  6140                           prodl	equ	0xFF3
  6141                           indf0	equ	0xFEF
  6142                           postinc0	equ	0xFEE
  6143                           fsr0h	equ	0xFEA
  6144                           fsr0l	equ	0xFE9
  6145                           wreg	equ	0xFE8
  6146                           postdec1	equ	0xFE5
  6147                           fsr1l	equ	0xFE1
  6148                           indf2	equ	0xFDF
  6149                           postinc2	equ	0xFDE
  6150                           postdec2	equ	0xFDD
  6151                           fsr2h	equ	0xFDA
  6152                           fsr2l	equ	0xFD9
  6153                           status	equ	0xFD8
  6154                           
  6155 ;; *************** function ___awtoft *****************
  6156 ;; Defined at:
  6157 ;;		line 32 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\awtoft.c"
  6158 ;; Parameters:    Size  Location     Type
  6159 ;;  c               2    8[COMRAM] int 
  6160 ;; Auto vars:     Size  Location     Type
  6161 ;;  sign            1   11[COMRAM] unsigned char 
  6162 ;; Return value:  Size  Location     Type
  6163 ;;                  3    8[COMRAM] float 
  6164 ;; Registers used:
  6165 ;;		wreg, status,2, status,0, cstack
  6166 ;; Tracked objects:
  6167 ;;		On entry : 0/0
  6168 ;;		On exit  : 0/0
  6169 ;;		Unchanged: 0/0
  6170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6171 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6172 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6174 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6175 ;;Total ram usage:        4 bytes
  6176 ;; Hardware stack levels used:    1
  6177 ;; Hardware stack levels required when called:    1
  6178 ;; This function calls:
  6179 ;;		___ftpack
  6180 ;; This function is called by:
  6181 ;;		_set_vision
  6182 ;;		_exp
  6183 ;;		_log
  6184 ;; This function uses a non-reentrant model
  6185 ;;
  6186                           
  6187                           	psect	text29
  6188  002E90                     __ptext29:
  6189                           	opt stack 0
  6190  002E90                     ___awtoft:
  6191                           	opt stack 26
  6192                           
  6193                           ;incstack = 0
  6194  002E90  0E00               	movlw	0
  6195  002E92  6E0C               	movwf	___awtoft@sign,c
  6196  002E94  AE0A               	btfss	___awtoft@c+1,7,c
  6197  002E96  D007               	goto	l3413
  6198  002E98  6C09               	negf	___awtoft@c,c
  6199  002E9A  1E0A               	comf	___awtoft@c+1,f,c
  6200  002E9C  B0D8               	btfsc	status,0,c
  6201  002E9E  2A0A               	incf	___awtoft@c+1,f,c
  6202  002EA0  0E01               	movlw	1
  6203  002EA2  6E0C               	movwf	___awtoft@sign,c
  6204  002EA4  D000               	goto	l3413
  6205  002EA6                     l3413:
  6206  002EA6  C009  F001         	movff	___awtoft@c,___ftpack@arg
  6207  002EAA  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  6208  002EAE  6A03               	clrf	___ftpack@arg+2,c
  6209  002EB0  0E8E               	movlw	142
  6210  002EB2  6E04               	movwf	___ftpack@exp,c
  6211  002EB4  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  6212  002EB8  EC2F  F013         	call	___ftpack	;wreg free
  6213  002EBC  C001  F009         	movff	?___ftpack,?___awtoft
  6214  002EC0  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  6215  002EC4  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  6216  002EC8  0012               	return	
  6217  002ECA  0012               	return		;funcret
  6218  002ECC                     __end_of___awtoft:
  6219                           	opt stack 0
  6220                           tblptru	equ	0xFF8
  6221                           tblptrh	equ	0xFF7
  6222                           tblptrl	equ	0xFF6
  6223                           tablat	equ	0xFF5
  6224                           prodh	equ	0xFF4
  6225                           prodl	equ	0xFF3
  6226                           indf0	equ	0xFEF
  6227                           postinc0	equ	0xFEE
  6228                           fsr0h	equ	0xFEA
  6229                           fsr0l	equ	0xFE9
  6230                           wreg	equ	0xFE8
  6231                           postdec1	equ	0xFE5
  6232                           fsr1l	equ	0xFE1
  6233                           indf2	equ	0xFDF
  6234                           postinc2	equ	0xFDE
  6235                           postdec2	equ	0xFDD
  6236                           fsr2h	equ	0xFDA
  6237                           fsr2l	equ	0xFD9
  6238                           status	equ	0xFD8
  6239                           
  6240 ;; *************** function ___lltoft *****************
  6241 ;; Defined at:
  6242 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lltoft.c"
  6243 ;; Parameters:    Size  Location     Type
  6244 ;;  c               4    8[COMRAM] unsigned long 
  6245 ;; Auto vars:     Size  Location     Type
  6246 ;;  exp             1   16[COMRAM] unsigned char 
  6247 ;; Return value:  Size  Location     Type
  6248 ;;                  3    8[COMRAM] float 
  6249 ;; Registers used:
  6250 ;;		wreg, status,2, status,0, cstack
  6251 ;; Tracked objects:
  6252 ;;		On entry : 0/0
  6253 ;;		On exit  : 0/0
  6254 ;;		Unchanged: 0/0
  6255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6256 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6257 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6258 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6259 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6260 ;;Total ram usage:        9 bytes
  6261 ;; Hardware stack levels used:    1
  6262 ;; Hardware stack levels required when called:    1
  6263 ;; This function calls:
  6264 ;;		___ftpack
  6265 ;; This function is called by:
  6266 ;;		_pow
  6267 ;; This function uses a non-reentrant model
  6268 ;;
  6269                           
  6270                           	psect	text30
  6271  002BAE                     __ptext30:
  6272                           	opt stack 0
  6273  002BAE                     ___lltoft:
  6274                           	opt stack 27
  6275                           
  6276                           ;incstack = 0
  6277  002BAE  0E8E               	movlw	142
  6278  002BB0  6E11               	movwf	___lltoft@exp,c
  6279  002BB2  D007               	goto	l3719
  6280  002BB4                     l3717:
  6281  002BB4  90D8               	bcf	status,0,c
  6282  002BB6  320C               	rrcf	___lltoft@c+3,f,c
  6283  002BB8  320B               	rrcf	___lltoft@c+2,f,c
  6284  002BBA  320A               	rrcf	___lltoft@c+1,f,c
  6285  002BBC  3209               	rrcf	___lltoft@c,f,c
  6286  002BBE  2A11               	incf	___lltoft@exp,f,c
  6287  002BC0  D000               	goto	l3719
  6288  002BC2                     l3719:
  6289  002BC2  0E00               	movlw	0
  6290  002BC4  1409               	andwf	___lltoft@c,w,c
  6291  002BC6  6E0D               	movwf	??___lltoft& (0+255),c
  6292  002BC8  0E00               	movlw	0
  6293  002BCA  140A               	andwf	___lltoft@c+1,w,c
  6294  002BCC  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  6295  002BCE  0E00               	movlw	0
  6296  002BD0  140B               	andwf	___lltoft@c+2,w,c
  6297  002BD2  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  6298  002BD4  0EFF               	movlw	255
  6299  002BD6  140C               	andwf	___lltoft@c+3,w,c
  6300  002BD8  6E10               	movwf	(??___lltoft+3)& (0+255),c
  6301  002BDA  500D               	movf	??___lltoft,w,c
  6302  002BDC  100E               	iorwf	??___lltoft+1,w,c
  6303  002BDE  100F               	iorwf	??___lltoft+2,w,c
  6304  002BE0  1010               	iorwf	??___lltoft+3,w,c
  6305  002BE2  A4D8               	btfss	status,2,c
  6306  002BE4  D7E7               	goto	l3717
  6307  002BE6  C009  F001         	movff	___lltoft@c,___ftpack@arg
  6308  002BEA  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  6309  002BEE  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  6310  002BF2  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  6311  002BF6  0E00               	movlw	0
  6312  002BF8  6E05               	movwf	___ftpack@sign,c
  6313  002BFA  EC2F  F013         	call	___ftpack	;wreg free
  6314  002BFE  C001  F009         	movff	?___ftpack,?___lltoft
  6315  002C02  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  6316  002C06  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  6317  002C0A  0012               	return	
  6318  002C0C  0012               	return		;funcret
  6319  002C0E                     __end_of___lltoft:
  6320                           	opt stack 0
  6321                           tblptru	equ	0xFF8
  6322                           tblptrh	equ	0xFF7
  6323                           tblptrl	equ	0xFF6
  6324                           tablat	equ	0xFF5
  6325                           prodh	equ	0xFF4
  6326                           prodl	equ	0xFF3
  6327                           indf0	equ	0xFEF
  6328                           postinc0	equ	0xFEE
  6329                           fsr0h	equ	0xFEA
  6330                           fsr0l	equ	0xFE9
  6331                           wreg	equ	0xFE8
  6332                           postdec1	equ	0xFE5
  6333                           fsr1l	equ	0xFE1
  6334                           indf2	equ	0xFDF
  6335                           postinc2	equ	0xFDE
  6336                           postdec2	equ	0xFDD
  6337                           fsr2h	equ	0xFDA
  6338                           fsr2l	equ	0xFD9
  6339                           status	equ	0xFD8
  6340                           
  6341 ;; *************** function _lcd_setcursor_vb *****************
  6342 ;; Defined at:
  6343 ;;		line 210 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  6344 ;; Parameters:    Size  Location     Type
  6345 ;;  visible         1    wreg     unsigned char 
  6346 ;;  blink           1    4[COMRAM] unsigned char 
  6347 ;; Auto vars:     Size  Location     Type
  6348 ;;  visible         1    5[COMRAM] unsigned char 
  6349 ;; Return value:  Size  Location     Type
  6350 ;;		None               void
  6351 ;; Registers used:
  6352 ;;		wreg, status,2, status,0, cstack
  6353 ;; Tracked objects:
  6354 ;;		On entry : 0/0
  6355 ;;		On exit  : 0/0
  6356 ;;		Unchanged: 0/0
  6357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6358 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6359 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6361 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6362 ;;Total ram usage:        2 bytes
  6363 ;; Hardware stack levels used:    1
  6364 ;; Hardware stack levels required when called:    2
  6365 ;; This function calls:
  6366 ;;		_lcd_send_byte
  6367 ;; This function is called by:
  6368 ;;		_set_vision
  6369 ;;		_jumpIfNotNumber
  6370 ;; This function uses a non-reentrant model
  6371 ;;
  6372                           
  6373                           	psect	text31
  6374  002FE8                     __ptext31:
  6375                           	opt stack 0
  6376  002FE8                     _lcd_setcursor_vb:
  6377                           	opt stack 27
  6378                           
  6379                           ;incstack = 0
  6380                           ;lcd_setcursor_vb@visible stored from wreg
  6381  002FE8  6E06               	movwf	lcd_setcursor_vb@visible,c
  6382                           
  6383                           ;unmc_lcd_216.c: 211: lcd_send_byte(0, 0xC|(visible<<1)|blink);
  6384  002FEA  5006               	movf	lcd_setcursor_vb@visible,w,c
  6385  002FEC  2406               	addwf	lcd_setcursor_vb@visible,w,c
  6386  002FEE  1005               	iorwf	lcd_setcursor_vb@blink,w,c
  6387  002FF0  090C               	iorlw	12
  6388  002FF2  6E03               	movwf	lcd_send_byte@n,c
  6389  002FF4  0E00               	movlw	0
  6390  002FF6  EC66  F017         	call	_lcd_send_byte
  6391  002FFA  0012               	return		;funcret
  6392  002FFC                     __end_of_lcd_setcursor_vb:
  6393                           	opt stack 0
  6394                           tblptru	equ	0xFF8
  6395                           tblptrh	equ	0xFF7
  6396                           tblptrl	equ	0xFF6
  6397                           tablat	equ	0xFF5
  6398                           prodh	equ	0xFF4
  6399                           prodl	equ	0xFF3
  6400                           indf0	equ	0xFEF
  6401                           postinc0	equ	0xFEE
  6402                           fsr0h	equ	0xFEA
  6403                           fsr0l	equ	0xFE9
  6404                           wreg	equ	0xFE8
  6405                           postdec1	equ	0xFE5
  6406                           fsr1l	equ	0xFE1
  6407                           indf2	equ	0xFDF
  6408                           postinc2	equ	0xFDE
  6409                           postdec2	equ	0xFDD
  6410                           fsr2h	equ	0xFDA
  6411                           fsr2l	equ	0xFD9
  6412                           status	equ	0xFD8
  6413                           
  6414 ;; *************** function _clear_keyboard *****************
  6415 ;; Defined at:
  6416 ;;		line 4 in file "keyboard.c"
  6417 ;; Parameters:    Size  Location     Type
  6418 ;;		None
  6419 ;; Auto vars:     Size  Location     Type
  6420 ;;		None
  6421 ;; Return value:  Size  Location     Type
  6422 ;;		None               void
  6423 ;; Registers used:
  6424 ;;		wreg, status,2
  6425 ;; Tracked objects:
  6426 ;;		On entry : 0/0
  6427 ;;		On exit  : 0/0
  6428 ;;		Unchanged: 0/0
  6429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6433 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6434 ;;Total ram usage:        0 bytes
  6435 ;; Hardware stack levels used:    1
  6436 ;; This function calls:
  6437 ;;		Nothing
  6438 ;; This function is called by:
  6439 ;;		_set_vision
  6440 ;; This function uses a non-reentrant model
  6441 ;;
  6442                           
  6443                           	psect	text32
  6444  003056                     __ptext32:
  6445                           	opt stack 0
  6446  003056                     _clear_keyboard:
  6447                           	opt stack 29
  6448                           
  6449                           ;keyboard.c: 5: key = 18;
  6450                           
  6451                           ;incstack = 0
  6452  003056  0E12               	movlw	18
  6453  003058  6E5E               	movwf	_key,c
  6454  00305A  0012               	return		;funcret
  6455  00305C                     __end_of_clear_keyboard:
  6456                           	opt stack 0
  6457                           tblptru	equ	0xFF8
  6458                           tblptrh	equ	0xFF7
  6459                           tblptrl	equ	0xFF6
  6460                           tablat	equ	0xFF5
  6461                           prodh	equ	0xFF4
  6462                           prodl	equ	0xFF3
  6463                           indf0	equ	0xFEF
  6464                           postinc0	equ	0xFEE
  6465                           fsr0h	equ	0xFEA
  6466                           fsr0l	equ	0xFE9
  6467                           wreg	equ	0xFE8
  6468                           postdec1	equ	0xFE5
  6469                           fsr1l	equ	0xFE1
  6470                           indf2	equ	0xFDF
  6471                           postinc2	equ	0xFDE
  6472                           postdec2	equ	0xFDD
  6473                           fsr2h	equ	0xFDA
  6474                           fsr2l	equ	0xFD9
  6475                           status	equ	0xFD8
  6476                           
  6477 ;; *************** function _clear *****************
  6478 ;; Defined at:
  6479 ;;		line 7 in file "lcd_vision.c"
  6480 ;; Parameters:    Size  Location     Type
  6481 ;;		None
  6482 ;; Auto vars:     Size  Location     Type
  6483 ;;		None
  6484 ;; Return value:  Size  Location     Type
  6485 ;;		None               void
  6486 ;; Registers used:
  6487 ;;		wreg, status,2, status,0, cstack
  6488 ;; Tracked objects:
  6489 ;;		On entry : 0/0
  6490 ;;		On exit  : 0/0
  6491 ;;		Unchanged: 0/0
  6492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6495 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6496 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6497 ;;Total ram usage:        1 bytes
  6498 ;; Hardware stack levels used:    1
  6499 ;; Hardware stack levels required when called:    3
  6500 ;; This function calls:
  6501 ;;		_lcd_comand
  6502 ;; This function is called by:
  6503 ;;		_set_vision
  6504 ;; This function uses a non-reentrant model
  6505 ;;
  6506                           
  6507                           	psect	text33
  6508  002FD2                     __ptext33:
  6509                           	opt stack 0
  6510  002FD2                     _clear:
  6511                           	opt stack 26
  6512                           
  6513                           ;lcd_vision.c: 8: lcd_comand(0b00000001);
  6514                           
  6515                           ;incstack = 0
  6516  002FD2  0E01               	movlw	1
  6517  002FD4  EC19  F018         	call	_lcd_comand
  6518                           
  6519                           ;lcd_vision.c: 9: _delay((unsigned long)((5)*(8000000/4000.0)));
  6520  002FD8  0E0D               	movlw	13
  6521  002FDA  6E06               	movwf	??_clear& (0+255),c
  6522  002FDC  0EFC               	movlw	252
  6523  002FDE                     u4327:
  6524  002FDE  2EE8               	decfsz	wreg,f,c
  6525  002FE0  D7FE               	goto	u4327
  6526  002FE2  2E06               	decfsz	??_clear& (0+255),f,c
  6527  002FE4  D7FC               	goto	u4327
  6528  002FE6  0012               	return		;funcret
  6529  002FE8                     __end_of_clear:
  6530                           	opt stack 0
  6531                           tblptru	equ	0xFF8
  6532                           tblptrh	equ	0xFF7
  6533                           tblptrl	equ	0xFF6
  6534                           tablat	equ	0xFF5
  6535                           prodh	equ	0xFF4
  6536                           prodl	equ	0xFF3
  6537                           indf0	equ	0xFEF
  6538                           postinc0	equ	0xFEE
  6539                           fsr0h	equ	0xFEA
  6540                           fsr0l	equ	0xFE9
  6541                           wreg	equ	0xFE8
  6542                           postdec1	equ	0xFE5
  6543                           fsr1l	equ	0xFE1
  6544                           indf2	equ	0xFDF
  6545                           postinc2	equ	0xFDE
  6546                           postdec2	equ	0xFDD
  6547                           fsr2h	equ	0xFDA
  6548                           fsr2l	equ	0xFD9
  6549                           status	equ	0xFD8
  6550                           
  6551 ;; *************** function _checkPass *****************
  6552 ;; Defined at:
  6553 ;;		line 3 in file "config.c"
  6554 ;; Parameters:    Size  Location     Type
  6555 ;;  pass            2    0[COMRAM] int 
  6556 ;; Auto vars:     Size  Location     Type
  6557 ;;		None
  6558 ;; Return value:  Size  Location     Type
  6559 ;;                  1    wreg      unsigned char 
  6560 ;; Registers used:
  6561 ;;		wreg, status,2, status,0
  6562 ;; Tracked objects:
  6563 ;;		On entry : 0/0
  6564 ;;		On exit  : 0/0
  6565 ;;		Unchanged: 0/0
  6566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6567 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6570 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6571 ;;Total ram usage:        2 bytes
  6572 ;; Hardware stack levels used:    1
  6573 ;; This function calls:
  6574 ;;		Nothing
  6575 ;; This function is called by:
  6576 ;;		_set_vision
  6577 ;; This function uses a non-reentrant model
  6578 ;;
  6579                           
  6580                           	psect	text34
  6581  002FB6                     __ptext34:
  6582                           	opt stack 0
  6583  002FB6                     _checkPass:
  6584                           	opt stack 29
  6585                           
  6586                           ;config.c: 4: return password == pass;
  6587                           
  6588                           ;incstack = 0
  6589  002FB6  5001               	movf	checkPass@pass,w,c
  6590  002FB8  0100               	movlb	0	; () banked
  6591  002FBA  19D5               	xorwf	_password& (0+255),w,b
  6592  002FBC  E107               	bnz	u4020
  6593  002FBE  5002               	movf	checkPass@pass+1,w,c
  6594  002FC0  0100               	movlb	0	; () banked
  6595  002FC2  19D6               	xorwf	(_password+1)& (0+255),w,b
  6596  002FC4  A4D8               	btfss	status,2,c
  6597  002FC6  D002               	goto	u4020
  6598  002FC8  0E01               	movlw	1
  6599  002FCA  0012               	return	
  6600  002FCC                     u4020:
  6601  002FCC  0E00               	movlw	0
  6602  002FCE  0012               	return	
  6603                           
  6604                           ; BSR set to: 0
  6605                           
  6606                           ; BSR set to: 0
  6607  002FD0  0012               	return		;funcret
  6608  002FD2                     __end_of_checkPass:
  6609                           	opt stack 0
  6610                           tblptru	equ	0xFF8
  6611                           tblptrh	equ	0xFF7
  6612                           tblptrl	equ	0xFF6
  6613                           tablat	equ	0xFF5
  6614                           prodh	equ	0xFF4
  6615                           prodl	equ	0xFF3
  6616                           indf0	equ	0xFEF
  6617                           postinc0	equ	0xFEE
  6618                           fsr0h	equ	0xFEA
  6619                           fsr0l	equ	0xFE9
  6620                           wreg	equ	0xFE8
  6621                           postdec1	equ	0xFE5
  6622                           fsr1l	equ	0xFE1
  6623                           indf2	equ	0xFDF
  6624                           postinc2	equ	0xFDE
  6625                           postdec2	equ	0xFDD
  6626                           fsr2h	equ	0xFDA
  6627                           fsr2l	equ	0xFD9
  6628                           status	equ	0xFD8
  6629                           
  6630 ;; *************** function ___lbtoft *****************
  6631 ;; Defined at:
  6632 ;;		line 27 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lbtoft.c"
  6633 ;; Parameters:    Size  Location     Type
  6634 ;;  c               1    wreg     unsigned char 
  6635 ;; Auto vars:     Size  Location     Type
  6636 ;;  c               1   11[COMRAM] unsigned char 
  6637 ;; Return value:  Size  Location     Type
  6638 ;;                  3    8[COMRAM] float 
  6639 ;; Registers used:
  6640 ;;		wreg, status,2, status,0, cstack
  6641 ;; Tracked objects:
  6642 ;;		On entry : 0/0
  6643 ;;		On exit  : 0/0
  6644 ;;		Unchanged: 0/0
  6645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6646 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6647 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6649 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6650 ;;Total ram usage:        4 bytes
  6651 ;; Hardware stack levels used:    1
  6652 ;; Hardware stack levels required when called:    1
  6653 ;; This function calls:
  6654 ;;		___ftpack
  6655 ;; This function is called by:
  6656 ;;		_set_vision
  6657 ;; This function uses a non-reentrant model
  6658 ;;
  6659                           
  6660                           	psect	text35
  6661  002F26                     __ptext35:
  6662                           	opt stack 0
  6663  002F26                     ___lbtoft:
  6664                           	opt stack 28
  6665                           
  6666                           ; BSR set to: 0
  6667                           ;incstack = 0
  6668                           ;___lbtoft@c stored from wreg
  6669  002F26  6E0C               	movwf	___lbtoft@c,c
  6670  002F28  500C               	movf	___lbtoft@c,w,c
  6671  002F2A  6E01               	movwf	___ftpack@arg,c
  6672  002F2C  6A02               	clrf	___ftpack@arg+1,c
  6673  002F2E  6A03               	clrf	___ftpack@arg+2,c
  6674  002F30  0E8E               	movlw	142
  6675  002F32  6E04               	movwf	___ftpack@exp,c
  6676  002F34  0E00               	movlw	0
  6677  002F36  6E05               	movwf	___ftpack@sign,c
  6678  002F38  EC2F  F013         	call	___ftpack	;wreg free
  6679  002F3C  C001  F009         	movff	?___ftpack,?___lbtoft
  6680  002F40  C002  F00A         	movff	?___ftpack+1,?___lbtoft+1
  6681  002F44  C003  F00B         	movff	?___ftpack+2,?___lbtoft+2
  6682  002F48  0012               	return	
  6683  002F4A  0012               	return		;funcret
  6684  002F4C                     __end_of___lbtoft:
  6685                           	opt stack 0
  6686                           tblptru	equ	0xFF8
  6687                           tblptrh	equ	0xFF7
  6688                           tblptrl	equ	0xFF6
  6689                           tablat	equ	0xFF5
  6690                           prodh	equ	0xFF4
  6691                           prodl	equ	0xFF3
  6692                           indf0	equ	0xFEF
  6693                           postinc0	equ	0xFEE
  6694                           fsr0h	equ	0xFEA
  6695                           fsr0l	equ	0xFE9
  6696                           wreg	equ	0xFE8
  6697                           postdec1	equ	0xFE5
  6698                           fsr1l	equ	0xFE1
  6699                           indf2	equ	0xFDF
  6700                           postinc2	equ	0xFDE
  6701                           postdec2	equ	0xFDD
  6702                           fsr2h	equ	0xFDA
  6703                           fsr2l	equ	0xFD9
  6704                           status	equ	0xFD8
  6705                           
  6706 ;; *************** function ___ftpack *****************
  6707 ;; Defined at:
  6708 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\float.c"
  6709 ;; Parameters:    Size  Location     Type
  6710 ;;  arg             3    0[COMRAM] unsigned um
  6711 ;;  exp             1    3[COMRAM] unsigned char 
  6712 ;;  sign            1    4[COMRAM] unsigned char 
  6713 ;; Auto vars:     Size  Location     Type
  6714 ;;		None
  6715 ;; Return value:  Size  Location     Type
  6716 ;;                  3    0[COMRAM] float 
  6717 ;; Registers used:
  6718 ;;		wreg, status,2, status,0
  6719 ;; Tracked objects:
  6720 ;;		On entry : 0/0
  6721 ;;		On exit  : 0/0
  6722 ;;		Unchanged: 0/0
  6723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6724 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6726 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6727 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6728 ;;Total ram usage:        8 bytes
  6729 ;; Hardware stack levels used:    1
  6730 ;; This function calls:
  6731 ;;		Nothing
  6732 ;; This function is called by:
  6733 ;;		___altoft
  6734 ;;		___awtoft
  6735 ;;		___ftadd
  6736 ;;		___ftdiv
  6737 ;;		___ftmul
  6738 ;;		___lbtoft
  6739 ;;		___lltoft
  6740 ;; This function uses a non-reentrant model
  6741 ;;
  6742                           
  6743                           	psect	text36
  6744  00265E                     __ptext36:
  6745                           	opt stack 0
  6746  00265E                     ___ftpack:
  6747                           	opt stack 25
  6748                           
  6749                           ;incstack = 0
  6750  00265E  5004               	movf	___ftpack@exp,w,c
  6751  002660  B4D8               	btfsc	status,2,c
  6752  002662  D005               	goto	l2881
  6753  002664  5001               	movf	___ftpack@arg,w,c
  6754  002666  1002               	iorwf	___ftpack@arg+1,w,c
  6755  002668  1003               	iorwf	___ftpack@arg+2,w,c
  6756  00266A  A4D8               	btfss	status,2,c
  6757  00266C  D00E               	goto	l2887
  6758  00266E                     l2881:
  6759  00266E  0E00               	movlw	0
  6760  002670  6E01               	movwf	?___ftpack,c
  6761  002672  0E00               	movlw	0
  6762  002674  6E02               	movwf	?___ftpack+1,c
  6763  002676  0E00               	movlw	0
  6764  002678  6E03               	movwf	?___ftpack+2,c
  6765  00267A  0012               	return	
  6766  00267C  D006               	goto	l2887
  6767  00267E                     l2885:
  6768  00267E  2A04               	incf	___ftpack@exp,f,c
  6769  002680  90D8               	bcf	status,0,c
  6770  002682  3203               	rrcf	___ftpack@arg+2,f,c
  6771  002684  3202               	rrcf	___ftpack@arg+1,f,c
  6772  002686  3201               	rrcf	___ftpack@arg,f,c
  6773  002688  D000               	goto	l2887
  6774  00268A                     l2887:
  6775  00268A  0E00               	movlw	0
  6776  00268C  1401               	andwf	___ftpack@arg,w,c
  6777  00268E  6E06               	movwf	??___ftpack& (0+255),c
  6778  002690  0E00               	movlw	0
  6779  002692  1402               	andwf	___ftpack@arg+1,w,c
  6780  002694  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6781  002696  0EFE               	movlw	254
  6782  002698  1403               	andwf	___ftpack@arg+2,w,c
  6783  00269A  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6784  00269C  5006               	movf	??___ftpack,w,c
  6785  00269E  1007               	iorwf	??___ftpack+1,w,c
  6786  0026A0  1008               	iorwf	??___ftpack+2,w,c
  6787  0026A2  B4D8               	btfsc	status,2,c
  6788  0026A4  D00E               	goto	l2893
  6789  0026A6  D7EB               	goto	l2885
  6790  0026A8  D00C               	goto	l2893
  6791  0026AA                     l2889:
  6792  0026AA  2A04               	incf	___ftpack@exp,f,c
  6793  0026AC  0E01               	movlw	1
  6794  0026AE  2601               	addwf	___ftpack@arg,f,c
  6795  0026B0  0E00               	movlw	0
  6796  0026B2  2202               	addwfc	___ftpack@arg+1,f,c
  6797  0026B4  0E00               	movlw	0
  6798  0026B6  2203               	addwfc	___ftpack@arg+2,f,c
  6799  0026B8  90D8               	bcf	status,0,c
  6800  0026BA  3203               	rrcf	___ftpack@arg+2,f,c
  6801  0026BC  3202               	rrcf	___ftpack@arg+1,f,c
  6802  0026BE  3201               	rrcf	___ftpack@arg,f,c
  6803  0026C0  D000               	goto	l2893
  6804  0026C2                     l2893:
  6805  0026C2  0E00               	movlw	0
  6806  0026C4  1401               	andwf	___ftpack@arg,w,c
  6807  0026C6  6E06               	movwf	??___ftpack& (0+255),c
  6808  0026C8  0E00               	movlw	0
  6809  0026CA  1402               	andwf	___ftpack@arg+1,w,c
  6810  0026CC  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6811  0026CE  0EFF               	movlw	255
  6812  0026D0  1403               	andwf	___ftpack@arg+2,w,c
  6813  0026D2  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6814  0026D4  5006               	movf	??___ftpack,w,c
  6815  0026D6  1007               	iorwf	??___ftpack+1,w,c
  6816  0026D8  1008               	iorwf	??___ftpack+2,w,c
  6817  0026DA  B4D8               	btfsc	status,2,c
  6818  0026DC  D008               	goto	l2897
  6819  0026DE  D7E5               	goto	l2889
  6820  0026E0  D006               	goto	l2897
  6821  0026E2                     l2895:
  6822  0026E2  0604               	decf	___ftpack@exp,f,c
  6823  0026E4  90D8               	bcf	status,0,c
  6824  0026E6  3601               	rlcf	___ftpack@arg,f,c
  6825  0026E8  3602               	rlcf	___ftpack@arg+1,f,c
  6826  0026EA  3603               	rlcf	___ftpack@arg+2,f,c
  6827  0026EC  D000               	goto	l2897
  6828  0026EE                     l2897:
  6829  0026EE  BE02               	btfsc	___ftpack@arg+1,7,c
  6830  0026F0  D004               	goto	l1091
  6831  0026F2  0E02               	movlw	2
  6832  0026F4  6004               	cpfslt	___ftpack@exp,c
  6833  0026F6  D7F5               	goto	l2895
  6834  0026F8  D000               	goto	l1091
  6835  0026FA                     l1091:
  6836  0026FA  B004               	btfsc	___ftpack@exp,0,c
  6837  0026FC  D002               	goto	l2903
  6838  0026FE  9E02               	bcf	___ftpack@arg+1,7,c
  6839  002700  D000               	goto	l2903
  6840  002702                     l2903:
  6841  002702  90D8               	bcf	status,0,c
  6842  002704  3204               	rrcf	___ftpack@exp,f,c
  6843  002706  5004               	movf	___ftpack@exp,w,c
  6844  002708  1203               	iorwf	___ftpack@arg+2,f,c
  6845  00270A  5005               	movf	___ftpack@sign,w,c
  6846  00270C  B4D8               	btfsc	status,2,c
  6847  00270E  D002               	goto	l2909
  6848  002710  8E03               	bsf	___ftpack@arg+2,7,c
  6849  002712  D000               	goto	l2909
  6850  002714                     l2909:
  6851  002714  C001  F001         	movff	___ftpack@arg,?___ftpack
  6852  002718  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6853  00271C  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6854  002720  0012               	return	
  6855  002722  0012               	return		;funcret
  6856  002724                     __end_of___ftpack:
  6857                           	opt stack 0
  6858                           tblptru	equ	0xFF8
  6859                           tblptrh	equ	0xFF7
  6860                           tblptrl	equ	0xFF6
  6861                           tablat	equ	0xFF5
  6862                           prodh	equ	0xFF4
  6863                           prodl	equ	0xFF3
  6864                           indf0	equ	0xFEF
  6865                           postinc0	equ	0xFEE
  6866                           fsr0h	equ	0xFEA
  6867                           fsr0l	equ	0xFE9
  6868                           wreg	equ	0xFE8
  6869                           postdec1	equ	0xFE5
  6870                           fsr1l	equ	0xFE1
  6871                           indf2	equ	0xFDF
  6872                           postinc2	equ	0xFDE
  6873                           postdec2	equ	0xFDD
  6874                           fsr2h	equ	0xFDA
  6875                           fsr2l	equ	0xFD9
  6876                           status	equ	0xFD8
  6877                           
  6878 ;; *************** function _caratula *****************
  6879 ;; Defined at:
  6880 ;;		line 31 in file "main.c"
  6881 ;; Parameters:    Size  Location     Type
  6882 ;;		None
  6883 ;; Auto vars:     Size  Location     Type
  6884 ;;		None
  6885 ;; Return value:  Size  Location     Type
  6886 ;;		None               void
  6887 ;; Registers used:
  6888 ;;		wreg, status,2, status,0, cstack
  6889 ;; Tracked objects:
  6890 ;;		On entry : 0/0
  6891 ;;		On exit  : 0/0
  6892 ;;		Unchanged: 0/0
  6893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6897 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6898 ;;Total ram usage:        0 bytes
  6899 ;; Hardware stack levels used:    1
  6900 ;; Hardware stack levels required when called:    3
  6901 ;; This function calls:
  6902 ;;		_lcd_comand
  6903 ;; This function is called by:
  6904 ;;		_main
  6905 ;; This function uses a non-reentrant model
  6906 ;;
  6907                           
  6908                           	psect	text37
  6909  00304E                     __ptext37:
  6910                           	opt stack 0
  6911  00304E                     _caratula:
  6912                           	opt stack 27
  6913                           
  6914                           ;main.c: 33: lcd_comand(0b00001100);
  6915                           
  6916                           ;incstack = 0
  6917  00304E  0E0C               	movlw	12
  6918  003050  EC19  F018         	call	_lcd_comand
  6919  003054  0012               	return		;funcret
  6920  003056                     __end_of_caratula:
  6921                           	opt stack 0
  6922                           tblptru	equ	0xFF8
  6923                           tblptrh	equ	0xFF7
  6924                           tblptrl	equ	0xFF6
  6925                           tablat	equ	0xFF5
  6926                           prodh	equ	0xFF4
  6927                           prodl	equ	0xFF3
  6928                           indf0	equ	0xFEF
  6929                           postinc0	equ	0xFEE
  6930                           fsr0h	equ	0xFEA
  6931                           fsr0l	equ	0xFE9
  6932                           wreg	equ	0xFE8
  6933                           postdec1	equ	0xFE5
  6934                           fsr1l	equ	0xFE1
  6935                           indf2	equ	0xFDF
  6936                           postinc2	equ	0xFDE
  6937                           postdec2	equ	0xFDD
  6938                           fsr2h	equ	0xFDA
  6939                           fsr2l	equ	0xFD9
  6940                           status	equ	0xFD8
  6941                           
  6942 ;; *************** function _Setup *****************
  6943 ;; Defined at:
  6944 ;;		line 51 in file "main.c"
  6945 ;; Parameters:    Size  Location     Type
  6946 ;;		None
  6947 ;; Auto vars:     Size  Location     Type
  6948 ;;		None
  6949 ;; Return value:  Size  Location     Type
  6950 ;;		None               void
  6951 ;; Registers used:
  6952 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6953 ;; Tracked objects:
  6954 ;;		On entry : 0/0
  6955 ;;		On exit  : 0/0
  6956 ;;		Unchanged: 0/0
  6957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6961 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6962 ;;Total ram usage:        0 bytes
  6963 ;; Hardware stack levels used:    1
  6964 ;; Hardware stack levels required when called:    3
  6965 ;; This function calls:
  6966 ;;		_Write_RTC
  6967 ;;		_lcd_comand
  6968 ;;		_lcd_init
  6969 ;; This function is called by:
  6970 ;;		_main
  6971 ;; This function uses a non-reentrant model
  6972 ;;
  6973                           
  6974                           	psect	text38
  6975  002E04                     __ptext38:
  6976                           	opt stack 0
  6977  002E04                     _Setup:
  6978                           	opt stack 27
  6979                           
  6980                           ;main.c: 53: OSCTUNEbits.INTSRC=1;
  6981                           
  6982                           ;incstack = 0
  6983  002E04  8E9B               	bsf	3995,7,c	;volatile
  6984                           
  6985                           ;main.c: 54: OSCTUNEbits.PLLEN=0;
  6986  002E06  9C9B               	bcf	3995,6,c	;volatile
  6987                           
  6988                           ;main.c: 55: OSCCONbits.IRCF0=1;
  6989  002E08  88D3               	bsf	4051,4,c	;volatile
  6990                           
  6991                           ;main.c: 56: OSCCONbits.IRCF1=1;
  6992  002E0A  8AD3               	bsf	4051,5,c	;volatile
  6993                           
  6994                           ;main.c: 57: OSCCONbits.IRCF2=1;
  6995  002E0C  8CD3               	bsf	4051,6,c	;volatile
  6996                           
  6997                           ;main.c: 58: OSCCONbits.SCS0=0;
  6998  002E0E  90D3               	bcf	4051,0,c	;volatile
  6999                           
  7000                           ;main.c: 59: OSCCONbits.SCS1=0;
  7001  002E10  92D3               	bcf	4051,1,c	;volatile
  7002                           
  7003                           ;main.c: 60: TRISA = 0b11110000;
  7004  002E12  0EF0               	movlw	240
  7005  002E14  6E92               	movwf	3986,c	;volatile
  7006                           
  7007                           ;main.c: 61: TRISB = 0;
  7008  002E16  0E00               	movlw	0
  7009  002E18  6E93               	movwf	3987,c	;volatile
  7010                           
  7011                           ;main.c: 62: TRISC = 0b0110111;
  7012  002E1A  0E37               	movlw	55
  7013  002E1C  6E94               	movwf	3988,c	;volatile
  7014                           
  7015                           ;main.c: 66: ANCON0=0b11111111;
  7016  002E1E  010F               	movlb	15	; () banked
  7017  002E20  6948               	setf	72,b	;volatile
  7018                           
  7019                           ; BSR set to: 15
  7020                           ;main.c: 68: ANCON1=0b11111111;
  7021  002E22  010F               	movlb	15	; () banked
  7022  002E24  6949               	setf	73,b	;volatile
  7023                           
  7024                           ;main.c: 69: ADCON0=0b00101101;
  7025  002E26  0E2D               	movlw	45
  7026  002E28  6EC2               	movwf	4034,c	;volatile
  7027                           
  7028                           ;main.c: 70: ADCON1=0b00010000;
  7029  002E2A  0E10               	movlw	16
  7030  002E2C  6EC1               	movwf	4033,c	;volatile
  7031                           
  7032                           ; BSR set to: 15
  7033                           ;main.c: 71: RTCCFGbits.RTCEN=1;
  7034  002E2E  010F               	movlb	15	; () banked
  7035  002E30  8F3F               	bsf	63,7,b	;volatile
  7036                           
  7037                           ; BSR set to: 15
  7038                           ;main.c: 72: RTCCFGbits.RTCWREN=1;
  7039  002E32  010F               	movlb	15	; () banked
  7040  002E34  8B3F               	bsf	63,5,b	;volatile
  7041                           
  7042                           ; BSR set to: 15
  7043                           ;main.c: 73: T1CONbits.T1OSCEN=1;
  7044  002E36  86CD               	bsf	4045,3,c	;volatile
  7045                           
  7046                           ; BSR set to: 15
  7047                           ;main.c: 74: Write_RTC();
  7048  002E38  EC2D  F00D         	call	_Write_RTC	;wreg free
  7049                           
  7050                           ;main.c: 75: lcd_init();
  7051  002E3C  EC71  F014         	call	_lcd_init	;wreg free
  7052                           
  7053                           ;main.c: 76: lcd_comand(0b00001100);
  7054  002E40  0E0C               	movlw	12
  7055  002E42  EC19  F018         	call	_lcd_comand
  7056                           
  7057                           ;main.c: 77: LATBbits.LATB1 = 1;;
  7058  002E46  828A               	bsf	3978,1,c	;volatile
  7059                           
  7060                           ;main.c: 78: LATBbits.LATB0 = 1;;
  7061  002E48  808A               	bsf	3978,0,c	;volatile
  7062  002E4A  0012               	return		;funcret
  7063  002E4C                     __end_of_Setup:
  7064                           	opt stack 0
  7065                           tblptru	equ	0xFF8
  7066                           tblptrh	equ	0xFF7
  7067                           tblptrl	equ	0xFF6
  7068                           tablat	equ	0xFF5
  7069                           prodh	equ	0xFF4
  7070                           prodl	equ	0xFF3
  7071                           indf0	equ	0xFEF
  7072                           postinc0	equ	0xFEE
  7073                           fsr0h	equ	0xFEA
  7074                           fsr0l	equ	0xFE9
  7075                           wreg	equ	0xFE8
  7076                           postdec1	equ	0xFE5
  7077                           fsr1l	equ	0xFE1
  7078                           indf2	equ	0xFDF
  7079                           postinc2	equ	0xFDE
  7080                           postdec2	equ	0xFDD
  7081                           fsr2h	equ	0xFDA
  7082                           fsr2l	equ	0xFD9
  7083                           status	equ	0xFD8
  7084                           
  7085 ;; *************** function _lcd_init *****************
  7086 ;; Defined at:
  7087 ;;		line 119 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  7088 ;; Parameters:    Size  Location     Type
  7089 ;;		None
  7090 ;; Auto vars:     Size  Location     Type
  7091 ;;  i               1    4[COMRAM] unsigned char 
  7092 ;; Return value:  Size  Location     Type
  7093 ;;		None               void
  7094 ;; Registers used:
  7095 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7096 ;; Tracked objects:
  7097 ;;		On entry : 0/0
  7098 ;;		On exit  : 0/0
  7099 ;;		Unchanged: 0/0
  7100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7102 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7104 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7105 ;;Total ram usage:        1 bytes
  7106 ;; Hardware stack levels used:    1
  7107 ;; Hardware stack levels required when called:    2
  7108 ;; This function calls:
  7109 ;;		_Delay1KTCYx
  7110 ;;		_lcd_send_byte
  7111 ;;		_lcd_send_nibble
  7112 ;; This function is called by:
  7113 ;;		_Setup
  7114 ;; This function uses a non-reentrant model
  7115 ;;
  7116                           
  7117                           	psect	text39
  7118  0028E2                     __ptext39:
  7119                           	opt stack 0
  7120  0028E2                     _lcd_init:
  7121                           	opt stack 27
  7122                           
  7123                           ;unmc_lcd_216.c: 120: int8 i;
  7124                           ;unmc_lcd_216.c: 122: TRISBbits.TRISB3=0;
  7125                           
  7126                           ;incstack = 0
  7127  0028E2  9693               	bcf	3987,3,c	;volatile
  7128                           
  7129                           ;unmc_lcd_216.c: 123: TRISBbits.TRISB2=0;
  7130  0028E4  9493               	bcf	3987,2,c	;volatile
  7131                           
  7132                           ;unmc_lcd_216.c: 128: LATBbits.LATB3=0;
  7133  0028E6  968A               	bcf	3978,3,c	;volatile
  7134                           
  7135                           ;unmc_lcd_216.c: 129: LATBbits.LATB2=0;
  7136  0028E8  948A               	bcf	3978,2,c	;volatile
  7137                           
  7138                           ;unmc_lcd_216.c: 134: TRISBbits.TRISB4=0;
  7139  0028EA  9893               	bcf	3987,4,c	;volatile
  7140                           
  7141                           ;unmc_lcd_216.c: 135: TRISBbits.TRISB5=0;
  7142  0028EC  9A93               	bcf	3987,5,c	;volatile
  7143                           
  7144                           ;unmc_lcd_216.c: 136: TRISBbits.TRISB6=0;
  7145  0028EE  9C93               	bcf	3987,6,c	;volatile
  7146                           
  7147                           ;unmc_lcd_216.c: 137: TRISBbits.TRISB7=0;
  7148  0028F0  9E93               	bcf	3987,7,c	;volatile
  7149                           
  7150                           ;unmc_lcd_216.c: 139: Delay1KTCYx(8000000UL/800000UL);
  7151  0028F2  0E0A               	movlw	10
  7152  0028F4  ECFE  F017         	call	_Delay1KTCYx
  7153                           
  7154                           ;unmc_lcd_216.c: 140: Delay1KTCYx(8000000UL/800000UL);
  7155  0028F8  0E0A               	movlw	10
  7156  0028FA  ECFE  F017         	call	_Delay1KTCYx
  7157                           
  7158                           ;unmc_lcd_216.c: 141: Delay1KTCYx(8000000UL/800000UL);
  7159  0028FE  0E0A               	movlw	10
  7160  002900  ECFE  F017         	call	_Delay1KTCYx
  7161                           
  7162                           ;unmc_lcd_216.c: 143: for(i=0 ;i < 3; i++){
  7163  002904  0E00               	movlw	0
  7164  002906  6E05               	movwf	lcd_init@i,c
  7165  002908                     l3847:
  7166  002908  0E02               	movlw	2
  7167  00290A  6405               	cpfsgt	lcd_init@i,c
  7168  00290C  D001               	goto	l3851
  7169  00290E  D008               	goto	l3857
  7170  002910                     l3851:
  7171                           
  7172                           ;unmc_lcd_216.c: 144: lcd_send_nibble(0x03);
  7173  002910  0E03               	movlw	3
  7174  002912  EC6C  F015         	call	_lcd_send_nibble
  7175                           
  7176                           ;unmc_lcd_216.c: 145: Delay1KTCYx(8000000UL/800000UL);
  7177  002916  0E0A               	movlw	10
  7178  002918  ECFE  F017         	call	_Delay1KTCYx
  7179  00291C  2A05               	incf	lcd_init@i,f,c
  7180  00291E  D7F4               	goto	l3847
  7181  002920                     l3857:
  7182                           
  7183                           ;unmc_lcd_216.c: 146: }
  7184                           ;unmc_lcd_216.c: 148: lcd_send_nibble(0x02);
  7185  002920  0E02               	movlw	2
  7186  002922  EC6C  F015         	call	_lcd_send_nibble
  7187                           
  7188                           ;unmc_lcd_216.c: 150: for(i=0; i < sizeof(LCD_INIT_STRING); i++){
  7189  002926  0E00               	movlw	0
  7190  002928  6E05               	movwf	lcd_init@i,c
  7191  00292A  0E03               	movlw	3
  7192  00292C  6405               	cpfsgt	lcd_init@i,c
  7193  00292E  D002               	goto	l3865
  7194  002930  0012               	return	
  7195  002932  0012               	return	
  7196  002934                     l3865:
  7197                           
  7198                           ;unmc_lcd_216.c: 151: lcd_send_byte(0, LCD_INIT_STRING[i]);
  7199  002934  5005               	movf	lcd_init@i,w,c
  7200  002936  0D01               	mullw	1
  7201  002938  0E0B               	movlw	low _LCD_INIT_STRING
  7202  00293A  24F3               	addwf	prodl,w,c
  7203  00293C  6EF6               	movwf	tblptrl,c
  7204  00293E  0E0F               	movlw	high _LCD_INIT_STRING
  7205  002940  20F4               	addwfc	prodh,w,c
  7206  002942  6EF7               	movwf	tblptrh,c
  7207  002944                     	if	0	;There are less than 3 active tblptr bytes
  7208  002944                     	endif
  7209  002944  0008               	tblrd		*
  7210  002946  CFF5 F003          	movff	tablat,lcd_send_byte@n
  7211  00294A  0E00               	movlw	0
  7212  00294C  EC66  F017         	call	_lcd_send_byte
  7213                           
  7214                           ;unmc_lcd_216.c: 153: Delay1KTCYx(8000000UL/800000UL);
  7215  002950  0E0A               	movlw	10
  7216  002952  ECFE  F017         	call	_Delay1KTCYx
  7217  002956  2A05               	incf	lcd_init@i,f,c
  7218  002958  0E03               	movlw	3
  7219  00295A  6405               	cpfsgt	lcd_init@i,c
  7220  00295C  D7EB               	goto	l3865
  7221  00295E  0012               	return	
  7222  002960  0012               	return		;funcret
  7223  002962                     __end_of_lcd_init:
  7224                           	opt stack 0
  7225                           tblptru	equ	0xFF8
  7226                           tblptrh	equ	0xFF7
  7227                           tblptrl	equ	0xFF6
  7228                           tablat	equ	0xFF5
  7229                           prodh	equ	0xFF4
  7230                           prodl	equ	0xFF3
  7231                           indf0	equ	0xFEF
  7232                           postinc0	equ	0xFEE
  7233                           fsr0h	equ	0xFEA
  7234                           fsr0l	equ	0xFE9
  7235                           wreg	equ	0xFE8
  7236                           postdec1	equ	0xFE5
  7237                           fsr1l	equ	0xFE1
  7238                           indf2	equ	0xFDF
  7239                           postinc2	equ	0xFDE
  7240                           postdec2	equ	0xFDD
  7241                           fsr2h	equ	0xFDA
  7242                           fsr2l	equ	0xFD9
  7243                           status	equ	0xFD8
  7244                           
  7245 ;; *************** function _Delay1KTCYx *****************
  7246 ;; Defined at:
  7247 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\d1ktcyx.c"
  7248 ;; Parameters:    Size  Location     Type
  7249 ;;  unit            1    wreg     unsigned char 
  7250 ;; Auto vars:     Size  Location     Type
  7251 ;;  unit            1    0[COMRAM] unsigned char 
  7252 ;; Return value:  Size  Location     Type
  7253 ;;		None               void
  7254 ;; Registers used:
  7255 ;;		wreg
  7256 ;; Tracked objects:
  7257 ;;		On entry : 0/0
  7258 ;;		On exit  : 0/0
  7259 ;;		Unchanged: 0/0
  7260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7262 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7264 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7265 ;;Total ram usage:        1 bytes
  7266 ;; Hardware stack levels used:    1
  7267 ;; This function calls:
  7268 ;;		Nothing
  7269 ;; This function is called by:
  7270 ;;		_lcd_init
  7271 ;;		_DelayPORXLCD
  7272 ;; This function uses a non-reentrant model
  7273 ;;
  7274                           
  7275                           	psect	text40
  7276  002FFC                     __ptext40:
  7277                           	opt stack 0
  7278  002FFC                     _Delay1KTCYx:
  7279                           	opt stack 28
  7280                           
  7281                           ;incstack = 0
  7282                           ;Delay1KTCYx@unit stored from wreg
  7283  002FFC  6E01               	movwf	Delay1KTCYx@unit,c
  7284  002FFE  0EFA               	movlw	250
  7285  003000                     u4337:
  7286  003000  F000               	nop	
  7287  003002  2EE8               	decfsz	wreg,f,c
  7288  003004  D7FD               	goto	u4337
  7289  003006  2E01               	decfsz	Delay1KTCYx@unit,f,c
  7290  003008  D7FA               	goto	l2203
  7291  00300A  0012               	return	
  7292  00300C  0012               	return		;funcret
  7293  00300E                     __end_of_Delay1KTCYx:
  7294                           	opt stack 0
  7295                           tblptru	equ	0xFF8
  7296                           tblptrh	equ	0xFF7
  7297                           tblptrl	equ	0xFF6
  7298                           tablat	equ	0xFF5
  7299                           prodh	equ	0xFF4
  7300                           prodl	equ	0xFF3
  7301                           indf0	equ	0xFEF
  7302                           postinc0	equ	0xFEE
  7303                           fsr0h	equ	0xFEA
  7304                           fsr0l	equ	0xFE9
  7305                           wreg	equ	0xFE8
  7306                           postdec1	equ	0xFE5
  7307                           fsr1l	equ	0xFE1
  7308                           indf2	equ	0xFDF
  7309                           postinc2	equ	0xFDE
  7310                           postdec2	equ	0xFDD
  7311                           fsr2h	equ	0xFDA
  7312                           fsr2l	equ	0xFD9
  7313                           status	equ	0xFD8
  7314                           
  7315 ;; *************** function _lcd_comand *****************
  7316 ;; Defined at:
  7317 ;;		line 189 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  7318 ;; Parameters:    Size  Location     Type
  7319 ;;  d               1    wreg     unsigned char 
  7320 ;; Auto vars:     Size  Location     Type
  7321 ;;  d               1    4[COMRAM] unsigned char 
  7322 ;; Return value:  Size  Location     Type
  7323 ;;		None               void
  7324 ;; Registers used:
  7325 ;;		wreg, status,2, status,0, cstack
  7326 ;; Tracked objects:
  7327 ;;		On entry : 0/0
  7328 ;;		On exit  : 0/0
  7329 ;;		Unchanged: 0/0
  7330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7332 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7334 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7335 ;;Total ram usage:        1 bytes
  7336 ;; Hardware stack levels used:    1
  7337 ;; Hardware stack levels required when called:    2
  7338 ;; This function calls:
  7339 ;;		_lcd_send_byte
  7340 ;; This function is called by:
  7341 ;;		_caratula
  7342 ;;		_Setup
  7343 ;;		_clear
  7344 ;; This function uses a non-reentrant model
  7345 ;;
  7346                           
  7347                           	psect	text41
  7348  003032                     __ptext41:
  7349                           	opt stack 0
  7350  003032                     _lcd_comand:
  7351                           	opt stack 26
  7352                           
  7353                           ;incstack = 0
  7354                           ;lcd_comand@d stored from wreg
  7355  003032  6E05               	movwf	lcd_comand@d,c
  7356                           
  7357                           ;unmc_lcd_216.c: 190: lcd_send_byte(0,d);
  7358  003034  C005  F003         	movff	lcd_comand@d,lcd_send_byte@n
  7359  003038  0E00               	movlw	0
  7360  00303A  EC66  F017         	call	_lcd_send_byte
  7361  00303E  0012               	return		;funcret
  7362  003040                     __end_of_lcd_comand:
  7363                           	opt stack 0
  7364                           tblptru	equ	0xFF8
  7365                           tblptrh	equ	0xFF7
  7366                           tblptrl	equ	0xFF6
  7367                           tablat	equ	0xFF5
  7368                           prodh	equ	0xFF4
  7369                           prodl	equ	0xFF3
  7370                           indf0	equ	0xFEF
  7371                           postinc0	equ	0xFEE
  7372                           fsr0h	equ	0xFEA
  7373                           fsr0l	equ	0xFE9
  7374                           wreg	equ	0xFE8
  7375                           postdec1	equ	0xFE5
  7376                           fsr1l	equ	0xFE1
  7377                           indf2	equ	0xFDF
  7378                           postinc2	equ	0xFDE
  7379                           postdec2	equ	0xFDD
  7380                           fsr2h	equ	0xFDA
  7381                           fsr2l	equ	0xFD9
  7382                           status	equ	0xFD8
  7383                           
  7384 ;; *************** function _lcd_send_byte *****************
  7385 ;; Defined at:
  7386 ;;		line 86 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  7387 ;; Parameters:    Size  Location     Type
  7388 ;;  address         1    wreg     unsigned char 
  7389 ;;  n               1    2[COMRAM] unsigned char 
  7390 ;; Auto vars:     Size  Location     Type
  7391 ;;  address         1    3[COMRAM] unsigned char 
  7392 ;; Return value:  Size  Location     Type
  7393 ;;		None               void
  7394 ;; Registers used:
  7395 ;;		wreg, status,2, status,0, cstack
  7396 ;; Tracked objects:
  7397 ;;		On entry : 0/0
  7398 ;;		On exit  : 0/0
  7399 ;;		Unchanged: 0/0
  7400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7401 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7402 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7404 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7405 ;;Total ram usage:        2 bytes
  7406 ;; Hardware stack levels used:    1
  7407 ;; Hardware stack levels required when called:    1
  7408 ;; This function calls:
  7409 ;;		_Delay100TCYx
  7410 ;;		_lcd_send_nibble
  7411 ;; This function is called by:
  7412 ;;		_lcd_init
  7413 ;;		_lcd_gotoxy
  7414 ;;		_lcd_putc
  7415 ;;		_lcd_comand
  7416 ;;		_lcd_setcursor_vb
  7417 ;; This function uses a non-reentrant model
  7418 ;;
  7419                           
  7420                           	psect	text42
  7421  002ECC                     __ptext42:
  7422                           	opt stack 0
  7423  002ECC                     _lcd_send_byte:
  7424                           	opt stack 25
  7425                           
  7426                           ;incstack = 0
  7427                           ;lcd_send_byte@address stored from wreg
  7428  002ECC  6E04               	movwf	lcd_send_byte@address,c
  7429                           
  7430                           ;unmc_lcd_216.c: 88: LATBbits.LATB3=0;
  7431  002ECE  968A               	bcf	3978,3,c	;volatile
  7432                           
  7433                           ;unmc_lcd_216.c: 93: Delay100TCYx(8000000UL/4000000UL);
  7434  002ED0  0E02               	movlw	2
  7435  002ED2  EC07  F018         	call	_Delay100TCYx
  7436                           
  7437                           ;unmc_lcd_216.c: 96: TRISBbits.TRISB4=0;
  7438  002ED6  9893               	bcf	3987,4,c	;volatile
  7439                           
  7440                           ;unmc_lcd_216.c: 97: TRISBbits.TRISB5=0;
  7441  002ED8  9A93               	bcf	3987,5,c	;volatile
  7442                           
  7443                           ;unmc_lcd_216.c: 98: TRISBbits.TRISB6=0;
  7444  002EDA  9C93               	bcf	3987,6,c	;volatile
  7445                           
  7446                           ;unmc_lcd_216.c: 99: TRISBbits.TRISB7=0;
  7447  002EDC  9E93               	bcf	3987,7,c	;volatile
  7448                           
  7449                           ;unmc_lcd_216.c: 101: if(address)
  7450  002EDE  5004               	movf	lcd_send_byte@address,w,c
  7451  002EE0  B4D8               	btfsc	status,2,c
  7452  002EE2  D002               	goto	l75
  7453                           
  7454                           ;unmc_lcd_216.c: 102: LATBbits.LATB3=1;
  7455  002EE4  868A               	bsf	3978,3,c	;volatile
  7456  002EE6  D001               	goto	l76
  7457  002EE8                     l75:
  7458                           
  7459                           ;unmc_lcd_216.c: 103: else
  7460                           ;unmc_lcd_216.c: 104: LATBbits.LATB3=0;
  7461  002EE8  968A               	bcf	3978,3,c	;volatile
  7462  002EEA                     l76:
  7463                           
  7464                           ;unmc_lcd_216.c: 106: __nop();
  7465  002EEA  F000               	nop	
  7466                           
  7467                           ;unmc_lcd_216.c: 113: lcd_send_nibble(n >> 4);
  7468  002EEC  3803               	swapf	lcd_send_byte@n,w,c
  7469  002EEE  0B0F               	andlw	15
  7470  002EF0  EC6C  F015         	call	_lcd_send_nibble
  7471                           
  7472                           ;unmc_lcd_216.c: 114: lcd_send_nibble(n & 0xf);
  7473  002EF4  5003               	movf	lcd_send_byte@n,w,c
  7474  002EF6  0B0F               	andlw	15
  7475  002EF8  EC6C  F015         	call	_lcd_send_nibble
  7476  002EFC  0012               	return		;funcret
  7477  002EFE                     __end_of_lcd_send_byte:
  7478                           	opt stack 0
  7479                           tblptru	equ	0xFF8
  7480                           tblptrh	equ	0xFF7
  7481                           tblptrl	equ	0xFF6
  7482                           tablat	equ	0xFF5
  7483                           prodh	equ	0xFF4
  7484                           prodl	equ	0xFF3
  7485                           indf0	equ	0xFEF
  7486                           postinc0	equ	0xFEE
  7487                           fsr0h	equ	0xFEA
  7488                           fsr0l	equ	0xFE9
  7489                           wreg	equ	0xFE8
  7490                           postdec1	equ	0xFE5
  7491                           fsr1l	equ	0xFE1
  7492                           indf2	equ	0xFDF
  7493                           postinc2	equ	0xFDE
  7494                           postdec2	equ	0xFDD
  7495                           fsr2h	equ	0xFDA
  7496                           fsr2l	equ	0xFD9
  7497                           status	equ	0xFD8
  7498                           
  7499 ;; *************** function _lcd_send_nibble *****************
  7500 ;; Defined at:
  7501 ;;		line 25 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  7502 ;; Parameters:    Size  Location     Type
  7503 ;;  nibble          1    wreg     unsigned char 
  7504 ;; Auto vars:     Size  Location     Type
  7505 ;;  nibble          1    1[COMRAM] unsigned char 
  7506 ;; Return value:  Size  Location     Type
  7507 ;;		None               void
  7508 ;; Registers used:
  7509 ;;		wreg, status,2, status,0
  7510 ;; Tracked objects:
  7511 ;;		On entry : 0/0
  7512 ;;		On exit  : 0/0
  7513 ;;		Unchanged: 0/0
  7514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7516 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7517 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7518 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7519 ;;Total ram usage:        2 bytes
  7520 ;; Hardware stack levels used:    1
  7521 ;; This function calls:
  7522 ;;		Nothing
  7523 ;; This function is called by:
  7524 ;;		_lcd_send_byte
  7525 ;;		_lcd_init
  7526 ;; This function uses a non-reentrant model
  7527 ;;
  7528                           
  7529                           	psect	text43
  7530  002AD8                     __ptext43:
  7531                           	opt stack 0
  7532  002AD8                     _lcd_send_nibble:
  7533                           	opt stack 25
  7534                           
  7535                           ;incstack = 0
  7536                           ;lcd_send_nibble@nibble stored from wreg
  7537  002AD8  6E02               	movwf	lcd_send_nibble@nibble,c
  7538                           
  7539                           ;unmc_lcd_216.c: 27: LATBbits.LATB4=!!(nibble & 0x01);
  7540  002ADA  A002               	btfss	lcd_send_nibble@nibble,0,c
  7541  002ADC  D003               	goto	u2140
  7542  002ADE  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  7543  002AE0  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  7544  002AE2  D001               	goto	u2158
  7545  002AE4                     u2140:
  7546  002AE4  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  7547  002AE6                     u2158:
  7548  002AE6  3A01               	swapf	??_lcd_send_nibble,f,c
  7549  002AE8  508A               	movf	3978,w,c	;volatile
  7550  002AEA  1801               	xorwf	??_lcd_send_nibble,w,c
  7551  002AEC  0BEF               	andlw	-17
  7552  002AEE  1801               	xorwf	??_lcd_send_nibble,w,c
  7553  002AF0  6E8A               	movwf	3978,c	;volatile
  7554                           
  7555                           ;unmc_lcd_216.c: 28: LATBbits.LATB5=!!(nibble & 0x02);
  7556  002AF2  A202               	btfss	lcd_send_nibble@nibble,1,c
  7557  002AF4  D003               	goto	u2160
  7558  002AF6  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  7559  002AF8  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  7560  002AFA  D001               	goto	u2178
  7561  002AFC                     u2160:
  7562  002AFC  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  7563  002AFE                     u2178:
  7564  002AFE  3A01               	swapf	??_lcd_send_nibble,f,c
  7565  002B00  4601               	rlncf	??_lcd_send_nibble,f,c
  7566  002B02  508A               	movf	3978,w,c	;volatile
  7567  002B04  1801               	xorwf	??_lcd_send_nibble,w,c
  7568  002B06  0BDF               	andlw	-33
  7569  002B08  1801               	xorwf	??_lcd_send_nibble,w,c
  7570  002B0A  6E8A               	movwf	3978,c	;volatile
  7571                           
  7572                           ;unmc_lcd_216.c: 29: LATBbits.LATB6=!!(nibble & 0x04);
  7573  002B0C  A402               	btfss	lcd_send_nibble@nibble,2,c
  7574  002B0E  D003               	goto	u2180
  7575  002B10  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  7576  002B12  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  7577  002B14  D001               	goto	u2198
  7578  002B16                     u2180:
  7579  002B16  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  7580  002B18                     u2198:
  7581  002B18  3A01               	swapf	??_lcd_send_nibble,f,c
  7582  002B1A  4601               	rlncf	??_lcd_send_nibble,f,c
  7583  002B1C  4601               	rlncf	??_lcd_send_nibble,f,c
  7584  002B1E  508A               	movf	3978,w,c	;volatile
  7585  002B20  1801               	xorwf	??_lcd_send_nibble,w,c
  7586  002B22  0BBF               	andlw	-65
  7587  002B24  1801               	xorwf	??_lcd_send_nibble,w,c
  7588  002B26  6E8A               	movwf	3978,c	;volatile
  7589                           
  7590                           ;unmc_lcd_216.c: 30: LATBbits.LATB7=!!(nibble & 0x08);
  7591  002B28  A602               	btfss	lcd_send_nibble@nibble,3,c
  7592  002B2A  D003               	goto	u2200
  7593  002B2C  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  7594  002B2E  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  7595  002B30  D001               	goto	u2218
  7596  002B32                     u2200:
  7597  002B32  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  7598  002B34                     u2218:
  7599  002B34  3201               	rrcf	??_lcd_send_nibble,f,c
  7600  002B36  3201               	rrcf	??_lcd_send_nibble,f,c
  7601  002B38  508A               	movf	3978,w,c	;volatile
  7602  002B3A  1801               	xorwf	??_lcd_send_nibble,w,c
  7603  002B3C  0B7F               	andlw	-129
  7604  002B3E  1801               	xorwf	??_lcd_send_nibble,w,c
  7605  002B40  6E8A               	movwf	3978,c	;volatile
  7606                           
  7607                           ;unmc_lcd_216.c: 32: __nop();
  7608  002B42  F000               	nop	
  7609                           
  7610                           ;unmc_lcd_216.c: 33: LATBbits.LATB2=1;
  7611  002B44  848A               	bsf	3978,2,c	;volatile
  7612                           
  7613                           ;unmc_lcd_216.c: 34: __nop();__nop();
  7614  002B46  F000               	nop	
  7615  002B48  F000               	nop	
  7616                           
  7617                           ;unmc_lcd_216.c: 35: LATBbits.LATB2=0;
  7618  002B4A  948A               	bcf	3978,2,c	;volatile
  7619  002B4C  0012               	return		;funcret
  7620  002B4E                     __end_of_lcd_send_nibble:
  7621                           	opt stack 0
  7622                           tblptru	equ	0xFF8
  7623                           tblptrh	equ	0xFF7
  7624                           tblptrl	equ	0xFF6
  7625                           tablat	equ	0xFF5
  7626                           prodh	equ	0xFF4
  7627                           prodl	equ	0xFF3
  7628                           indf0	equ	0xFEF
  7629                           postinc0	equ	0xFEE
  7630                           fsr0h	equ	0xFEA
  7631                           fsr0l	equ	0xFE9
  7632                           wreg	equ	0xFE8
  7633                           postdec1	equ	0xFE5
  7634                           fsr1l	equ	0xFE1
  7635                           indf2	equ	0xFDF
  7636                           postinc2	equ	0xFDE
  7637                           postdec2	equ	0xFDD
  7638                           fsr2h	equ	0xFDA
  7639                           fsr2l	equ	0xFD9
  7640                           status	equ	0xFD8
  7641                           
  7642 ;; *************** function _Delay100TCYx *****************
  7643 ;; Defined at:
  7644 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\d100tcyx.c"
  7645 ;; Parameters:    Size  Location     Type
  7646 ;;  unit            1    wreg     unsigned char 
  7647 ;; Auto vars:     Size  Location     Type
  7648 ;;  unit            1    0[COMRAM] unsigned char 
  7649 ;; Return value:  Size  Location     Type
  7650 ;;		None               void
  7651 ;; Registers used:
  7652 ;;		wreg
  7653 ;; Tracked objects:
  7654 ;;		On entry : 0/0
  7655 ;;		On exit  : 0/0
  7656 ;;		Unchanged: 0/0
  7657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7659 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7661 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7662 ;;Total ram usage:        1 bytes
  7663 ;; Hardware stack levels used:    1
  7664 ;; This function calls:
  7665 ;;		Nothing
  7666 ;; This function is called by:
  7667 ;;		_lcd_send_byte
  7668 ;; This function uses a non-reentrant model
  7669 ;;
  7670                           
  7671                           	psect	text44
  7672  00300E                     __ptext44:
  7673                           	opt stack 0
  7674  00300E                     _Delay100TCYx:
  7675                           	opt stack 25
  7676                           
  7677                           ;incstack = 0
  7678                           ;Delay100TCYx@unit stored from wreg
  7679  00300E  6E01               	movwf	Delay100TCYx@unit,c
  7680  003010  0E21               	movlw	33
  7681  003012                     u4347:
  7682  003012  2EE8               	decfsz	wreg,f,c
  7683  003014  D7FE               	goto	u4347
  7684  003016  F000               	nop	
  7685  003018  2E01               	decfsz	Delay100TCYx@unit,f,c
  7686  00301A  D7FA               	goto	l2845
  7687  00301C  0012               	return	
  7688  00301E  0012               	return		;funcret
  7689  003020                     __end_of_Delay100TCYx:
  7690                           	opt stack 0
  7691                           tblptru	equ	0xFF8
  7692                           tblptrh	equ	0xFF7
  7693                           tblptrl	equ	0xFF6
  7694                           tablat	equ	0xFF5
  7695                           prodh	equ	0xFF4
  7696                           prodl	equ	0xFF3
  7697                           indf0	equ	0xFEF
  7698                           postinc0	equ	0xFEE
  7699                           fsr0h	equ	0xFEA
  7700                           fsr0l	equ	0xFE9
  7701                           wreg	equ	0xFE8
  7702                           postdec1	equ	0xFE5
  7703                           fsr1l	equ	0xFE1
  7704                           indf2	equ	0xFDF
  7705                           postinc2	equ	0xFDE
  7706                           postdec2	equ	0xFDD
  7707                           fsr2h	equ	0xFDA
  7708                           fsr2l	equ	0xFD9
  7709                           status	equ	0xFD8
  7710                           
  7711 ;; *************** function _Write_RTC *****************
  7712 ;; Defined at:
  7713 ;;		line 22 in file "../../Program Files/Unimic/unmc_01/sources/unmc_rtcc_01.c"
  7714 ;; Parameters:    Size  Location     Type
  7715 ;;		None
  7716 ;; Auto vars:     Size  Location     Type
  7717 ;;		None
  7718 ;; Return value:  Size  Location     Type
  7719 ;;                  2   26[None  ] int 
  7720 ;; Registers used:
  7721 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7722 ;; Tracked objects:
  7723 ;;		On entry : 0/0
  7724 ;;		On exit  : 0/0
  7725 ;;		Unchanged: 0/0
  7726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7730 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7731 ;;Total ram usage:        0 bytes
  7732 ;; Hardware stack levels used:    1
  7733 ;; Hardware stack levels required when called:    2
  7734 ;; This function calls:
  7735 ;;		_RtccWrOn
  7736 ;;		_RtccWriteDate
  7737 ;;		_RtccWriteTime
  7738 ;;		___awdiv
  7739 ;; This function is called by:
  7740 ;;		_Setup
  7741 ;;		_setClock
  7742 ;; This function uses a non-reentrant model
  7743 ;;
  7744                           
  7745                           	psect	text45
  7746  001A5A                     __ptext45:
  7747                           	opt stack 0
  7748  001A5A                     _Write_RTC:
  7749                           	opt stack 27
  7750                           
  7751                           ;unmc_rtcc_01.c: 24: RtccWrOn();
  7752                           
  7753                           ;incstack = 0
  7754  001A5A  EC10  F018         	call	_RtccWrOn	;wreg free
  7755                           
  7756                           ;unmc_rtcc_01.c: 26: PIE3bits.RTCCIE=1;
  7757  001A5E  80A3               	bsf	4003,0,c	;volatile
  7758                           
  7759                           ;unmc_rtcc_01.c: 27: segundo_d=segundo/10;
  7760  001A60  C08A  F001         	movff	_segundo,___awdiv@dividend
  7761  001A64  C08B  F002         	movff	_segundo+1,___awdiv@dividend+1
  7762  001A68  0E00               	movlw	0
  7763  001A6A  6E04               	movwf	___awdiv@divisor+1,c
  7764  001A6C  0E0A               	movlw	10
  7765  001A6E  6E03               	movwf	___awdiv@divisor,c
  7766  001A70  ECDD  F013         	call	___awdiv	;wreg free
  7767  001A74  5001               	movf	?___awdiv,w,c
  7768  001A76  0100               	movlb	0	; () banked
  7769  001A78  6FC9               	movwf	_segundo_d& (0+255),b
  7770                           
  7771                           ; BSR set to: 0
  7772                           ;unmc_rtcc_01.c: 28: segundo_u=segundo-segundo_d*10;
  7773  001A7A  0100               	movlb	0	; () banked
  7774  001A7C  51C9               	movf	_segundo_d& (0+255),w,b
  7775  001A7E  0D0A               	mullw	10
  7776  001A80  50F3               	movf	prodl,w,c
  7777  001A82  0800               	sublw	0
  7778  001A84  0100               	movlb	0	; () banked
  7779  001A86  258A               	addwf	_segundo& (0+255),w,b
  7780  001A88  0100               	movlb	0	; () banked
  7781  001A8A  6FCA               	movwf	_segundo_u& (0+255),b
  7782                           
  7783                           ; BSR set to: 0
  7784                           ;unmc_rtcc_01.c: 29: RtccTime.f.sec =segundo_d*16+segundo_u;
  7785  001A8C  0100               	movlb	0	; () banked
  7786  001A8E  51C9               	movf	_segundo_d& (0+255),w,b
  7787  001A90  0D10               	mullw	16
  7788  001A92  50F3               	movf	prodl,w,c
  7789  001A94  0100               	movlb	0	; () banked
  7790  001A96  25CA               	addwf	_segundo_u& (0+255),w,b
  7791  001A98  0100               	movlb	0	; () banked
  7792  001A9A  6FA5               	movwf	(_RtccTime+1)& (0+255),b
  7793                           
  7794                           ; BSR set to: 0
  7795                           ;unmc_rtcc_01.c: 30: minuto_d=minuto/10;
  7796  001A9C  C0D3  F001         	movff	_minuto,___awdiv@dividend
  7797  001AA0  C0D4  F002         	movff	_minuto+1,___awdiv@dividend+1
  7798  001AA4  0E00               	movlw	0
  7799  001AA6  6E04               	movwf	___awdiv@divisor+1,c
  7800  001AA8  0E0A               	movlw	10
  7801  001AAA  6E03               	movwf	___awdiv@divisor,c
  7802  001AAC  ECDD  F013         	call	___awdiv	;wreg free
  7803  001AB0  5001               	movf	?___awdiv,w,c
  7804  001AB2  0100               	movlb	0	; () banked
  7805  001AB4  6FC7               	movwf	_minuto_d& (0+255),b
  7806                           
  7807                           ; BSR set to: 0
  7808                           ;unmc_rtcc_01.c: 31: minuto_u=minuto-minuto_d*10;
  7809  001AB6  0100               	movlb	0	; () banked
  7810  001AB8  51C7               	movf	_minuto_d& (0+255),w,b
  7811  001ABA  0D0A               	mullw	10
  7812  001ABC  50F3               	movf	prodl,w,c
  7813  001ABE  0800               	sublw	0
  7814  001AC0  0100               	movlb	0	; () banked
  7815  001AC2  25D3               	addwf	_minuto& (0+255),w,b
  7816  001AC4  0100               	movlb	0	; () banked
  7817  001AC6  6FC8               	movwf	_minuto_u& (0+255),b
  7818                           
  7819                           ; BSR set to: 0
  7820                           ;unmc_rtcc_01.c: 32: RtccTime.f.min =minuto_d*16+minuto_u;
  7821  001AC8  0100               	movlb	0	; () banked
  7822  001ACA  51C7               	movf	_minuto_d& (0+255),w,b
  7823  001ACC  0D10               	mullw	16
  7824  001ACE  50F3               	movf	prodl,w,c
  7825  001AD0  0100               	movlb	0	; () banked
  7826  001AD2  25C8               	addwf	_minuto_u& (0+255),w,b
  7827  001AD4  0100               	movlb	0	; () banked
  7828  001AD6  6FA6               	movwf	(_RtccTime+2)& (0+255),b
  7829                           
  7830                           ; BSR set to: 0
  7831                           ;unmc_rtcc_01.c: 33: hora_d=hora/10;
  7832  001AD8  C0D1  F001         	movff	_hora,___awdiv@dividend
  7833  001ADC  C0D2  F002         	movff	_hora+1,___awdiv@dividend+1
  7834  001AE0  0E00               	movlw	0
  7835  001AE2  6E04               	movwf	___awdiv@divisor+1,c
  7836  001AE4  0E0A               	movlw	10
  7837  001AE6  6E03               	movwf	___awdiv@divisor,c
  7838  001AE8  ECDD  F013         	call	___awdiv	;wreg free
  7839  001AEC  5001               	movf	?___awdiv,w,c
  7840  001AEE  0100               	movlb	0	; () banked
  7841  001AF0  6FC3               	movwf	_hora_d& (0+255),b
  7842                           
  7843                           ; BSR set to: 0
  7844                           ;unmc_rtcc_01.c: 34: hora_u=hora-hora_d*10;
  7845  001AF2  0100               	movlb	0	; () banked
  7846  001AF4  51C3               	movf	_hora_d& (0+255),w,b
  7847  001AF6  0D0A               	mullw	10
  7848  001AF8  50F3               	movf	prodl,w,c
  7849  001AFA  0800               	sublw	0
  7850  001AFC  0100               	movlb	0	; () banked
  7851  001AFE  25D1               	addwf	_hora& (0+255),w,b
  7852  001B00  0100               	movlb	0	; () banked
  7853  001B02  6FC4               	movwf	_hora_u& (0+255),b
  7854                           
  7855                           ; BSR set to: 0
  7856                           ;unmc_rtcc_01.c: 35: RtccTime.f.hour=hora_d*16+hora_u;
  7857  001B04  0100               	movlb	0	; () banked
  7858  001B06  51C3               	movf	_hora_d& (0+255),w,b
  7859  001B08  0D10               	mullw	16
  7860  001B0A  50F3               	movf	prodl,w,c
  7861  001B0C  0100               	movlb	0	; () banked
  7862  001B0E  25C4               	addwf	_hora_u& (0+255),w,b
  7863  001B10  0100               	movlb	0	; () banked
  7864  001B12  6FA7               	movwf	(_RtccTime+3)& (0+255),b
  7865                           
  7866                           ; BSR set to: 0
  7867                           ;unmc_rtcc_01.c: 36: anio_d=anio/10;
  7868  001B14  C0CB  F001         	movff	_anio,___awdiv@dividend
  7869  001B18  C0CC  F002         	movff	_anio+1,___awdiv@dividend+1
  7870  001B1C  0E00               	movlw	0
  7871  001B1E  6E04               	movwf	___awdiv@divisor+1,c
  7872  001B20  0E0A               	movlw	10
  7873  001B22  6E03               	movwf	___awdiv@divisor,c
  7874  001B24  ECDD  F013         	call	___awdiv	;wreg free
  7875  001B28  5001               	movf	?___awdiv,w,c
  7876  001B2A  0100               	movlb	0	; () banked
  7877  001B2C  6FBE               	movwf	_anio_d& (0+255),b
  7878                           
  7879                           ; BSR set to: 0
  7880                           ;unmc_rtcc_01.c: 37: anio_u=anio-anio_d*10;
  7881  001B2E  0100               	movlb	0	; () banked
  7882  001B30  51BE               	movf	_anio_d& (0+255),w,b
  7883  001B32  0D0A               	mullw	10
  7884  001B34  50F3               	movf	prodl,w,c
  7885  001B36  0800               	sublw	0
  7886  001B38  0100               	movlb	0	; () banked
  7887  001B3A  25CB               	addwf	_anio& (0+255),w,b
  7888  001B3C  0100               	movlb	0	; () banked
  7889  001B3E  6FBF               	movwf	_anio_u& (0+255),b
  7890                           
  7891                           ; BSR set to: 0
  7892                           ;unmc_rtcc_01.c: 38: RtccDate.f.year=anio_d*16+anio_u;
  7893  001B40  0100               	movlb	0	; () banked
  7894  001B42  51BE               	movf	_anio_d& (0+255),w,b
  7895  001B44  0D10               	mullw	16
  7896  001B46  50F3               	movf	prodl,w,c
  7897  001B48  0100               	movlb	0	; () banked
  7898  001B4A  25BF               	addwf	_anio_u& (0+255),w,b
  7899  001B4C  0100               	movlb	0	; () banked
  7900  001B4E  6FA3               	movwf	(_RtccDate+3)& (0+255),b
  7901                           
  7902                           ; BSR set to: 0
  7903                           ;unmc_rtcc_01.c: 39: mes_d=mes/10;
  7904  001B50  C05C  F001         	movff	_mes,___awdiv@dividend
  7905  001B54  C05D  F002         	movff	_mes+1,___awdiv@dividend+1
  7906  001B58  0E00               	movlw	0
  7907  001B5A  6E04               	movwf	___awdiv@divisor+1,c
  7908  001B5C  0E0A               	movlw	10
  7909  001B5E  6E03               	movwf	___awdiv@divisor,c
  7910  001B60  ECDD  F013         	call	___awdiv	;wreg free
  7911  001B64  5001               	movf	?___awdiv,w,c
  7912  001B66  0100               	movlb	0	; () banked
  7913  001B68  6FC5               	movwf	_mes_d& (0+255),b
  7914                           
  7915                           ; BSR set to: 0
  7916                           ;unmc_rtcc_01.c: 40: mes_u=mes-mes_d*10;
  7917  001B6A  0100               	movlb	0	; () banked
  7918  001B6C  51C5               	movf	_mes_d& (0+255),w,b
  7919  001B6E  0D0A               	mullw	10
  7920  001B70  50F3               	movf	prodl,w,c
  7921  001B72  0800               	sublw	0
  7922  001B74  245C               	addwf	_mes,w,c
  7923  001B76  0100               	movlb	0	; () banked
  7924  001B78  6FC6               	movwf	_mes_u& (0+255),b
  7925                           
  7926                           ; BSR set to: 0
  7927                           ;unmc_rtcc_01.c: 41: RtccDate.f.mon=mes_d*16+mes_u;
  7928  001B7A  0100               	movlb	0	; () banked
  7929  001B7C  51C5               	movf	_mes_d& (0+255),w,b
  7930  001B7E  0D10               	mullw	16
  7931  001B80  50F3               	movf	prodl,w,c
  7932  001B82  0100               	movlb	0	; () banked
  7933  001B84  25C6               	addwf	_mes_u& (0+255),w,b
  7934  001B86  0100               	movlb	0	; () banked
  7935  001B88  6FA2               	movwf	(_RtccDate+2)& (0+255),b
  7936                           
  7937                           ; BSR set to: 0
  7938                           ;unmc_rtcc_01.c: 42: fecha_d=dia/10;
  7939  001B8A  C0CD  F001         	movff	_dia,___awdiv@dividend
  7940  001B8E  C0CE  F002         	movff	_dia+1,___awdiv@dividend+1
  7941  001B92  0E00               	movlw	0
  7942  001B94  6E04               	movwf	___awdiv@divisor+1,c
  7943  001B96  0E0A               	movlw	10
  7944  001B98  6E03               	movwf	___awdiv@divisor,c
  7945  001B9A  ECDD  F013         	call	___awdiv	;wreg free
  7946  001B9E  5001               	movf	?___awdiv,w,c
  7947  001BA0  0100               	movlb	0	; () banked
  7948  001BA2  6FC1               	movwf	_fecha_d& (0+255),b
  7949                           
  7950                           ; BSR set to: 0
  7951                           ;unmc_rtcc_01.c: 43: fecha_u=dia-fecha_d*10;
  7952  001BA4  0100               	movlb	0	; () banked
  7953  001BA6  51C1               	movf	_fecha_d& (0+255),w,b
  7954  001BA8  0D0A               	mullw	10
  7955  001BAA  50F3               	movf	prodl,w,c
  7956  001BAC  0800               	sublw	0
  7957  001BAE  0100               	movlb	0	; () banked
  7958  001BB0  25CD               	addwf	_dia& (0+255),w,b
  7959  001BB2  0100               	movlb	0	; () banked
  7960  001BB4  6FC2               	movwf	_fecha_u& (0+255),b
  7961                           
  7962                           ; BSR set to: 0
  7963                           ;unmc_rtcc_01.c: 44: RtccDate.f.mday=fecha_d*16+fecha_u;
  7964  001BB6  0100               	movlb	0	; () banked
  7965  001BB8  51C1               	movf	_fecha_d& (0+255),w,b
  7966  001BBA  0D10               	mullw	16
  7967  001BBC  50F3               	movf	prodl,w,c
  7968  001BBE  0100               	movlb	0	; () banked
  7969  001BC0  25C2               	addwf	_fecha_u& (0+255),w,b
  7970  001BC2  0100               	movlb	0	; () banked
  7971  001BC4  6FA1               	movwf	(_RtccDate+1)& (0+255),b
  7972                           
  7973                           ; BSR set to: 0
  7974                           ;unmc_rtcc_01.c: 45: dia_semana=diasem;
  7975  001BC6  C0CF  F0C0         	movff	_diasem,_dia_semana
  7976                           
  7977                           ; BSR set to: 0
  7978                           ;unmc_rtcc_01.c: 46: RtccDate.f.wday =diasem;
  7979  001BCA  C0CF  F0A0         	movff	_diasem,_RtccDate
  7980                           
  7981                           ; BSR set to: 0
  7982                           ;unmc_rtcc_01.c: 47: RtccWriteTime(&RtccTime,1);
  7983  001BCE  0EA4               	movlw	low _RtccTime
  7984  001BD0  6E01               	movwf	RtccWriteTime@pTm,c
  7985  001BD2  0E00               	movlw	high _RtccTime
  7986  001BD4  6E02               	movwf	RtccWriteTime@pTm+1,c
  7987  001BD6  0E01               	movlw	1
  7988  001BD8  6E03               	movwf	RtccWriteTime@di,c
  7989  001BDA  ECEE  F00F         	call	_RtccWriteTime	;wreg free
  7990                           
  7991                           ;unmc_rtcc_01.c: 48: RtccWriteDate(&RtccDate,1);
  7992  001BDE  0EA0               	movlw	low _RtccDate
  7993  001BE0  6E01               	movwf	RtccWriteDate@pDt,c
  7994  001BE2  0E00               	movlw	high _RtccDate
  7995  001BE4  6E02               	movwf	RtccWriteDate@pDt+1,c
  7996  001BE6  0E01               	movlw	1
  7997  001BE8  6E03               	movwf	RtccWriteDate@di,c
  7998  001BEA  ECBB  F00E         	call	_RtccWriteDate	;wreg free
  7999                           
  8000                           ;unmc_rtcc_01.c: 49: (RTCCFGbits.RTCEN=1);
  8001  001BEE  010F               	movlb	15	; () banked
  8002  001BF0  8F3F               	bsf	63,7,b	;volatile
  8003                           
  8004                           ; BSR set to: 15
  8005  001BF2  0012               	return		;funcret
  8006  001BF4                     __end_of_Write_RTC:
  8007                           	opt stack 0
  8008                           tblptru	equ	0xFF8
  8009                           tblptrh	equ	0xFF7
  8010                           tblptrl	equ	0xFF6
  8011                           tablat	equ	0xFF5
  8012                           prodh	equ	0xFF4
  8013                           prodl	equ	0xFF3
  8014                           indf0	equ	0xFEF
  8015                           postinc0	equ	0xFEE
  8016                           fsr0h	equ	0xFEA
  8017                           fsr0l	equ	0xFE9
  8018                           wreg	equ	0xFE8
  8019                           postdec1	equ	0xFE5
  8020                           fsr1l	equ	0xFE1
  8021                           indf2	equ	0xFDF
  8022                           postinc2	equ	0xFDE
  8023                           postdec2	equ	0xFDD
  8024                           fsr2h	equ	0xFDA
  8025                           fsr2l	equ	0xFD9
  8026                           status	equ	0xFD8
  8027                           
  8028 ;; *************** function ___awdiv *****************
  8029 ;; Defined at:
  8030 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\awdiv.c"
  8031 ;; Parameters:    Size  Location     Type
  8032 ;;  dividend        2    0[COMRAM] int 
  8033 ;;  divisor         2    2[COMRAM] int 
  8034 ;; Auto vars:     Size  Location     Type
  8035 ;;  quotient        2    6[COMRAM] int 
  8036 ;;  sign            1    5[COMRAM] unsigned char 
  8037 ;;  counter         1    4[COMRAM] unsigned char 
  8038 ;; Return value:  Size  Location     Type
  8039 ;;                  2    0[COMRAM] int 
  8040 ;; Registers used:
  8041 ;;		wreg, status,2, status,0
  8042 ;; Tracked objects:
  8043 ;;		On entry : 0/0
  8044 ;;		On exit  : 0/0
  8045 ;;		Unchanged: 0/0
  8046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8047 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8048 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8050 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8051 ;;Total ram usage:        8 bytes
  8052 ;; Hardware stack levels used:    1
  8053 ;; This function calls:
  8054 ;;		Nothing
  8055 ;; This function is called by:
  8056 ;;		_Write_RTC
  8057 ;;		__delay_s
  8058 ;; This function uses a non-reentrant model
  8059 ;;
  8060                           
  8061                           	psect	text46
  8062  0027BA                     __ptext46:
  8063                           	opt stack 0
  8064  0027BA                     ___awdiv:
  8065                           	opt stack 27
  8066                           
  8067                           ; BSR set to: 15
  8068                           ;incstack = 0
  8069  0027BA  0E00               	movlw	0
  8070  0027BC  6E06               	movwf	___awdiv@sign,c
  8071  0027BE  AE04               	btfss	___awdiv@divisor+1,7,c
  8072  0027C0  D007               	goto	l3369
  8073  0027C2  6C03               	negf	___awdiv@divisor,c
  8074  0027C4  1E04               	comf	___awdiv@divisor+1,f,c
  8075  0027C6  B0D8               	btfsc	status,0,c
  8076  0027C8  2A04               	incf	___awdiv@divisor+1,f,c
  8077  0027CA  0E01               	movlw	1
  8078  0027CC  6E06               	movwf	___awdiv@sign,c
  8079  0027CE  D000               	goto	l3369
  8080  0027D0                     l3369:
  8081  0027D0  AE02               	btfss	___awdiv@dividend+1,7,c
  8082  0027D2  D007               	goto	l3375
  8083  0027D4  6C01               	negf	___awdiv@dividend,c
  8084  0027D6  1E02               	comf	___awdiv@dividend+1,f,c
  8085  0027D8  B0D8               	btfsc	status,0,c
  8086  0027DA  2A02               	incf	___awdiv@dividend+1,f,c
  8087  0027DC  0E01               	movlw	1
  8088  0027DE  1A06               	xorwf	___awdiv@sign,f,c
  8089  0027E0  D000               	goto	l3375
  8090  0027E2                     l3375:
  8091  0027E2  0E00               	movlw	0
  8092  0027E4  6E08               	movwf	___awdiv@quotient+1,c
  8093  0027E6  0E00               	movlw	0
  8094  0027E8  6E07               	movwf	___awdiv@quotient,c
  8095  0027EA  5003               	movf	___awdiv@divisor,w,c
  8096  0027EC  1004               	iorwf	___awdiv@divisor+1,w,c
  8097  0027EE  B4D8               	btfsc	status,2,c
  8098  0027F0  D021               	goto	l3397
  8099  0027F2  0E01               	movlw	1
  8100  0027F4  6E05               	movwf	___awdiv@counter,c
  8101  0027F6  D005               	goto	l3383
  8102  0027F8                     l3381:
  8103  0027F8  90D8               	bcf	status,0,c
  8104  0027FA  3603               	rlcf	___awdiv@divisor,f,c
  8105  0027FC  3604               	rlcf	___awdiv@divisor+1,f,c
  8106  0027FE  2A05               	incf	___awdiv@counter,f,c
  8107  002800  D000               	goto	l3383
  8108  002802                     l3383:
  8109  002802  BE04               	btfsc	___awdiv@divisor+1,7,c
  8110  002804  D002               	goto	l3385
  8111  002806  D7F8               	goto	l3381
  8112  002808  D000               	goto	l3385
  8113  00280A                     l3385:
  8114  00280A  90D8               	bcf	status,0,c
  8115  00280C  3607               	rlcf	___awdiv@quotient,f,c
  8116  00280E  3608               	rlcf	___awdiv@quotient+1,f,c
  8117  002810  5003               	movf	___awdiv@divisor,w,c
  8118  002812  5C01               	subwf	___awdiv@dividend,w,c
  8119  002814  5004               	movf	___awdiv@divisor+1,w,c
  8120  002816  5802               	subwfb	___awdiv@dividend+1,w,c
  8121  002818  A0D8               	btfss	status,0,c
  8122  00281A  D006               	goto	l3393
  8123  00281C  5003               	movf	___awdiv@divisor,w,c
  8124  00281E  5E01               	subwf	___awdiv@dividend,f,c
  8125  002820  5004               	movf	___awdiv@divisor+1,w,c
  8126  002822  5A02               	subwfb	___awdiv@dividend+1,f,c
  8127  002824  8007               	bsf	___awdiv@quotient,0,c
  8128  002826  D000               	goto	l3393
  8129  002828                     l3393:
  8130  002828  90D8               	bcf	status,0,c
  8131  00282A  3204               	rrcf	___awdiv@divisor+1,f,c
  8132  00282C  3203               	rrcf	___awdiv@divisor,f,c
  8133  00282E  2E05               	decfsz	___awdiv@counter,f,c
  8134  002830  D7EC               	goto	l3385
  8135  002832  D000               	goto	l3397
  8136  002834                     l3397:
  8137  002834  5006               	movf	___awdiv@sign,w,c
  8138  002836  B4D8               	btfsc	status,2,c
  8139  002838  D005               	goto	l3401
  8140  00283A  6C07               	negf	___awdiv@quotient,c
  8141  00283C  1E08               	comf	___awdiv@quotient+1,f,c
  8142  00283E  B0D8               	btfsc	status,0,c
  8143  002840  2A08               	incf	___awdiv@quotient+1,f,c
  8144  002842  D000               	goto	l3401
  8145  002844                     l3401:
  8146  002844  C007  F001         	movff	___awdiv@quotient,?___awdiv
  8147  002848  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  8148  00284C  0012               	return	
  8149  00284E  0012               	return		;funcret
  8150  002850                     __end_of___awdiv:
  8151                           	opt stack 0
  8152                           tblptru	equ	0xFF8
  8153                           tblptrh	equ	0xFF7
  8154                           tblptrl	equ	0xFF6
  8155                           tablat	equ	0xFF5
  8156                           prodh	equ	0xFF4
  8157                           prodl	equ	0xFF3
  8158                           indf0	equ	0xFEF
  8159                           postinc0	equ	0xFEE
  8160                           fsr0h	equ	0xFEA
  8161                           fsr0l	equ	0xFE9
  8162                           wreg	equ	0xFE8
  8163                           postdec1	equ	0xFE5
  8164                           fsr1l	equ	0xFE1
  8165                           indf2	equ	0xFDF
  8166                           postinc2	equ	0xFDE
  8167                           postdec2	equ	0xFDD
  8168                           fsr2h	equ	0xFDA
  8169                           fsr2l	equ	0xFD9
  8170                           status	equ	0xFD8
  8171                           
  8172 ;; *************** function _RtccWriteTime *****************
  8173 ;; Defined at:
  8174 ;;		line 34 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteTime.c"
  8175 ;; Parameters:    Size  Location     Type
  8176 ;;  pTm             2    0[COMRAM] PTR const struct .
  8177 ;;		 -> RtccTime(4), 
  8178 ;;  di              1    2[COMRAM] enum E7121
  8179 ;; Auto vars:     Size  Location     Type
  8180 ;;  tempHourWDay    2    9[COMRAM] struct .
  8181 ;;  tempMinSec      2    7[COMRAM] struct .
  8182 ;;  wasWrEn         1    6[COMRAM] enum E7121
  8183 ;;  wasAlrm         1    5[COMRAM] enum E7121
  8184 ;;  wasOn           1    4[COMRAM] enum E7121
  8185 ;; Return value:  Size  Location     Type
  8186 ;;                  1    wreg      enum E7121
  8187 ;; Registers used:
  8188 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8189 ;; Tracked objects:
  8190 ;;		On entry : 0/0
  8191 ;;		On exit  : 0/0
  8192 ;;		Unchanged: 0/0
  8193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8194 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8195 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8196 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8197 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8198 ;;Total ram usage:       11 bytes
  8199 ;; Hardware stack levels used:    1
  8200 ;; Hardware stack levels required when called:    1
  8201 ;; This function calls:
  8202 ;;		_RtccWrOn
  8203 ;; This function is called by:
  8204 ;;		_Write_RTC
  8205 ;; This function uses a non-reentrant model
  8206 ;;
  8207                           
  8208                           	psect	text47
  8209  001FDC                     __ptext47:
  8210                           	opt stack 0
  8211  001FDC                     _RtccWriteTime:
  8212                           	opt stack 27
  8213                           
  8214                           ;incstack = 0
  8215  001FDC  0E00               	movlw	0
  8216  001FDE  6E06               	movwf	RtccWriteTime@wasAlrm,c
  8217  001FE0  EE20 F002          	lfsr	2,2
  8218  001FE4  5001               	movf	RtccWriteTime@pTm,w,c
  8219  001FE6  26D9               	addwf	fsr2l,f,c
  8220  001FE8  5002               	movf	RtccWriteTime@pTm+1,w,c
  8221  001FEA  22DA               	addwfc	fsr2h,f,c
  8222  001FEC  0E5A               	movlw	90
  8223  001FEE  60DF               	cpfslt	indf2,c
  8224  001FF0  0012               	return	
  8225  001FF2  EE20 F001          	lfsr	2,1
  8226  001FF6  5001               	movf	RtccWriteTime@pTm,w,c
  8227  001FF8  26D9               	addwf	fsr2l,f,c
  8228  001FFA  5002               	movf	RtccWriteTime@pTm+1,w,c
  8229  001FFC  22DA               	addwfc	fsr2h,f,c
  8230  001FFE  0E5A               	movlw	90
  8231  002000  60DF               	cpfslt	indf2,c
  8232  002002  0012               	return	
  8233  002004  EE20 F003          	lfsr	2,3
  8234  002008  5001               	movf	RtccWriteTime@pTm,w,c
  8235  00200A  26D9               	addwf	fsr2l,f,c
  8236  00200C  5002               	movf	RtccWriteTime@pTm+1,w,c
  8237  00200E  22DA               	addwfc	fsr2h,f,c
  8238  002010  0E24               	movlw	36
  8239  002012  64DF               	cpfsgt	indf2,c
  8240  002014  D002               	goto	l3577
  8241  002016  0012               	return	
  8242                           
  8243                           ;	Return value of _RtccWriteTime is never used
  8244  002018  0012               	return	
  8245  00201A                     l3577:
  8246  00201A  EE20 F002          	lfsr	2,2
  8247  00201E  5001               	movf	RtccWriteTime@pTm,w,c
  8248  002020  26D9               	addwf	fsr2l,f,c
  8249  002022  5002               	movf	RtccWriteTime@pTm+1,w,c
  8250  002024  22DA               	addwfc	fsr2h,f,c
  8251  002026  50DF               	movf	indf2,w,c
  8252  002028  6E09               	movwf	RtccWriteTime@tempMinSec+1,c
  8253  00202A  EE20 F001          	lfsr	2,1
  8254  00202E  5001               	movf	RtccWriteTime@pTm,w,c
  8255  002030  26D9               	addwf	fsr2l,f,c
  8256  002032  5002               	movf	RtccWriteTime@pTm+1,w,c
  8257  002034  22DA               	addwfc	fsr2h,f,c
  8258  002036  50DF               	movf	indf2,w,c
  8259  002038  6E08               	movwf	RtccWriteTime@tempMinSec,c
  8260  00203A  5003               	movf	RtccWriteTime@di,w,c
  8261  00203C  B4D8               	btfsc	status,2,c
  8262  00203E  D002               	goto	l3583
  8263  002040  9CF2               	bcf	intcon,6,c	;volatile
  8264  002042  D000               	goto	l3583
  8265  002044                     l3583:
  8266  002044  0E00               	movlw	0
  8267  002046  BB3F               	btfsc	63,5,b	;volatile
  8268  002048  0E01               	movlw	1
  8269  00204A  6E07               	movwf	RtccWriteTime@wasWrEn,c
  8270  00204C  5007               	movf	RtccWriteTime@wasWrEn,w,c
  8271  00204E  A4D8               	btfss	status,2,c
  8272  002050  D003               	goto	l3587
  8273  002052  EC10  F018         	call	_RtccWrOn	;wreg free
  8274  002056  D000               	goto	l3587
  8275  002058                     l3587:
  8276  002058  0E00               	movlw	0
  8277  00205A  BF3F               	btfsc	63,7,b	;volatile
  8278  00205C  0E01               	movlw	1
  8279  00205E  6E05               	movwf	RtccWriteTime@wasOn,c
  8280  002060  5005               	movf	RtccWriteTime@wasOn,w,c
  8281  002062  B4D8               	btfsc	status,2,c
  8282  002064  D007               	goto	l3593
  8283  002066  0E00               	movlw	0
  8284  002068  BE91               	btfsc	3985,7,c	;volatile
  8285  00206A  0E01               	movlw	1
  8286  00206C  6E06               	movwf	RtccWriteTime@wasAlrm,c
  8287  00206E  010F               	movlb	15	; () banked
  8288  002070  9F3F               	bcf	63,7,b	;volatile
  8289  002072  D000               	goto	l3593
  8290  002074                     l3593:
  8291  002074  0EFC               	movlw	252
  8292  002076  010F               	movlb	15	; () banked
  8293  002078  173F               	andwf	63,f,b	;volatile
  8294  00207A  010F               	movlb	15	; () banked
  8295  00207C  813F               	bsf	63,0,b	;volatile
  8296                           
  8297                           ; BSR set to: 15
  8298  00207E  CF98 F00A          	movff	3992,RtccWriteTime@tempHourWDay	;volatile
  8299                           
  8300                           ; BSR set to: 15
  8301  002082  CF99 F00B          	movff	3993,RtccWriteTime@tempHourWDay+1	;volatile
  8302                           
  8303                           ; BSR set to: 15
  8304  002086  EE20 F003          	lfsr	2,3
  8305  00208A  5001               	movf	RtccWriteTime@pTm,w,c
  8306  00208C  26D9               	addwf	fsr2l,f,c
  8307  00208E  5002               	movf	RtccWriteTime@pTm+1,w,c
  8308  002090  22DA               	addwfc	fsr2h,f,c
  8309  002092  50DF               	movf	indf2,w,c
  8310  002094  6E0A               	movwf	RtccWriteTime@tempHourWDay,c
  8311                           
  8312                           ; BSR set to: 15
  8313  002096  0EFC               	movlw	252
  8314  002098  010F               	movlb	15	; () banked
  8315  00209A  173F               	andwf	63,f,b	;volatile
  8316                           
  8317                           ; BSR set to: 15
  8318  00209C  010F               	movlb	15	; () banked
  8319  00209E  813F               	bsf	63,0,b	;volatile
  8320                           
  8321                           ; BSR set to: 15
  8322  0020A0  C00A  FF98         	movff	RtccWriteTime@tempHourWDay,3992	;volatile
  8323                           
  8324                           ; BSR set to: 15
  8325  0020A4  C00B  FF99         	movff	RtccWriteTime@tempHourWDay+1,3993	;volatile
  8326                           
  8327                           ; BSR set to: 15
  8328  0020A8  C008  FF98         	movff	RtccWriteTime@tempMinSec,3992	;volatile
  8329                           
  8330                           ; BSR set to: 15
  8331  0020AC  C009  FF99         	movff	RtccWriteTime@tempMinSec+1,3993	;volatile
  8332                           
  8333                           ; BSR set to: 15
  8334  0020B0  5005               	movf	RtccWriteTime@wasOn,w,c
  8335  0020B2  B4D8               	btfsc	status,2,c
  8336  0020B4  D00D               	goto	l3625
  8337                           
  8338                           ; BSR set to: 15
  8339  0020B6  010F               	movlb	15	; () banked
  8340  0020B8  8F3F               	bsf	63,7,b	;volatile
  8341                           
  8342                           ; BSR set to: 15
  8343  0020BA  5006               	movf	RtccWriteTime@wasAlrm,w,c
  8344  0020BC  B4D8               	btfsc	status,2,c
  8345  0020BE  D002               	goto	l3621
  8346                           
  8347                           ; BSR set to: 15
  8348  0020C0  8E91               	bsf	3985,7,c	;volatile
  8349  0020C2  D000               	goto	l3621
  8350  0020C4                     l3621:
  8351                           
  8352                           ; BSR set to: 15
  8353  0020C4  5007               	movf	RtccWriteTime@wasWrEn,w,c
  8354  0020C6  B4D8               	btfsc	status,2,c
  8355  0020C8  D009               	goto	l3629
  8356                           
  8357                           ; BSR set to: 15
  8358  0020CA  EC10  F018         	call	_RtccWrOn	;wreg free
  8359  0020CE  D006               	goto	l3629
  8360  0020D0                     l3625:
  8361  0020D0  5007               	movf	RtccWriteTime@wasWrEn,w,c
  8362  0020D2  A4D8               	btfss	status,2,c
  8363  0020D4  D003               	goto	l3629
  8364  0020D6  010F               	movlb	15	; () banked
  8365  0020D8  9B3F               	bcf	63,5,b	;volatile
  8366                           
  8367                           ; BSR set to: 15
  8368  0020DA  D000               	goto	l3629
  8369  0020DC                     l3629:
  8370  0020DC  5003               	movf	RtccWriteTime@di,w,c
  8371  0020DE  B4D8               	btfsc	status,2,c
  8372  0020E0  0012               	return	
  8373  0020E2  8CF2               	bsf	intcon,6,c	;volatile
  8374  0020E4  0012               	return	
  8375                           
  8376                           ;	Return value of _RtccWriteTime is never used
  8377  0020E6  0012               	return		;funcret
  8378  0020E8                     __end_of_RtccWriteTime:
  8379                           	opt stack 0
  8380                           tblptru	equ	0xFF8
  8381                           tblptrh	equ	0xFF7
  8382                           tblptrl	equ	0xFF6
  8383                           tablat	equ	0xFF5
  8384                           prodh	equ	0xFF4
  8385                           prodl	equ	0xFF3
  8386                           intcon	equ	0xFF2
  8387                           indf0	equ	0xFEF
  8388                           postinc0	equ	0xFEE
  8389                           fsr0h	equ	0xFEA
  8390                           fsr0l	equ	0xFE9
  8391                           wreg	equ	0xFE8
  8392                           postdec1	equ	0xFE5
  8393                           fsr1l	equ	0xFE1
  8394                           indf2	equ	0xFDF
  8395                           postinc2	equ	0xFDE
  8396                           postdec2	equ	0xFDD
  8397                           fsr2h	equ	0xFDA
  8398                           fsr2l	equ	0xFD9
  8399                           status	equ	0xFD8
  8400                           
  8401 ;; *************** function _RtccWriteDate *****************
  8402 ;; Defined at:
  8403 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteDate.c"
  8404 ;; Parameters:    Size  Location     Type
  8405 ;;  pDt             2    0[COMRAM] PTR const struct .
  8406 ;;		 -> RtccDate(4), 
  8407 ;;  di              1    2[COMRAM] enum E7121
  8408 ;; Auto vars:     Size  Location     Type
  8409 ;;  tempHourWDay    2   11[COMRAM] struct .
  8410 ;;  tempDayMonth    2    9[COMRAM] struct .
  8411 ;;  tempYear        2    6[COMRAM] struct .
  8412 ;;  wasWrEn         1    8[COMRAM] enum E7121
  8413 ;;  wasAlrm         1    5[COMRAM] enum E7121
  8414 ;;  wasOn           1    4[COMRAM] enum E7121
  8415 ;; Return value:  Size  Location     Type
  8416 ;;                  1    wreg      enum E7121
  8417 ;; Registers used:
  8418 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8419 ;; Tracked objects:
  8420 ;;		On entry : 0/0
  8421 ;;		On exit  : 0/0
  8422 ;;		Unchanged: 0/0
  8423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8424 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8425 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8426 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8427 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8428 ;;Total ram usage:       13 bytes
  8429 ;; Hardware stack levels used:    1
  8430 ;; Hardware stack levels required when called:    1
  8431 ;; This function calls:
  8432 ;;		_RtccWrOn
  8433 ;; This function is called by:
  8434 ;;		_Write_RTC
  8435 ;; This function uses a non-reentrant model
  8436 ;;
  8437                           
  8438                           	psect	text48
  8439  001D76                     __ptext48:
  8440                           	opt stack 0
  8441  001D76                     _RtccWriteDate:
  8442                           	opt stack 27
  8443                           
  8444                           ;incstack = 0
  8445  001D76  0E00               	movlw	0
  8446  001D78  6E06               	movwf	RtccWriteDate@wasAlrm,c
  8447  001D7A  EE20 F002          	lfsr	2,2
  8448  001D7E  5001               	movf	RtccWriteDate@pDt,w,c
  8449  001D80  26D9               	addwf	fsr2l,f,c
  8450  001D82  5002               	movf	RtccWriteDate@pDt+1,w,c
  8451  001D84  22DA               	addwfc	fsr2h,f,c
  8452  001D86  0E13               	movlw	19
  8453  001D88  60DF               	cpfslt	indf2,c
  8454  001D8A  0012               	return	
  8455  001D8C  EE20 F002          	lfsr	2,2
  8456  001D90  5001               	movf	RtccWriteDate@pDt,w,c
  8457  001D92  26D9               	addwf	fsr2l,f,c
  8458  001D94  5002               	movf	RtccWriteDate@pDt+1,w,c
  8459  001D96  22DA               	addwfc	fsr2h,f,c
  8460  001D98  50DF               	movf	indf2,w,c
  8461  001D9A  B4D8               	btfsc	status,2,c
  8462  001D9C  0012               	return	
  8463  001D9E  EE20 F001          	lfsr	2,1
  8464  001DA2  5001               	movf	RtccWriteDate@pDt,w,c
  8465  001DA4  26D9               	addwf	fsr2l,f,c
  8466  001DA6  5002               	movf	RtccWriteDate@pDt+1,w,c
  8467  001DA8  22DA               	addwfc	fsr2h,f,c
  8468  001DAA  0E32               	movlw	50
  8469  001DAC  60DF               	cpfslt	indf2,c
  8470  001DAE  0012               	return	
  8471  001DB0  EE20 F001          	lfsr	2,1
  8472  001DB4  5001               	movf	RtccWriteDate@pDt,w,c
  8473  001DB6  26D9               	addwf	fsr2l,f,c
  8474  001DB8  5002               	movf	RtccWriteDate@pDt+1,w,c
  8475  001DBA  22DA               	addwfc	fsr2h,f,c
  8476  001DBC  50DF               	movf	indf2,w,c
  8477  001DBE  B4D8               	btfsc	status,2,c
  8478  001DC0  0012               	return	
  8479  001DC2  EE20 F003          	lfsr	2,3
  8480  001DC6  5001               	movf	RtccWriteDate@pDt,w,c
  8481  001DC8  26D9               	addwf	fsr2l,f,c
  8482  001DCA  5002               	movf	RtccWriteDate@pDt+1,w,c
  8483  001DCC  22DA               	addwfc	fsr2h,f,c
  8484  001DCE  0E99               	movlw	153
  8485  001DD0  64DF               	cpfsgt	indf2,c
  8486  001DD2  D002               	goto	l3645
  8487  001DD4  0012               	return	
  8488                           
  8489                           ;	Return value of _RtccWriteDate is never used
  8490  001DD6  0012               	return	
  8491  001DD8                     l3645:
  8492  001DD8  EE20 F003          	lfsr	2,3
  8493  001DDC  5001               	movf	RtccWriteDate@pDt,w,c
  8494  001DDE  26D9               	addwf	fsr2l,f,c
  8495  001DE0  5002               	movf	RtccWriteDate@pDt+1,w,c
  8496  001DE2  22DA               	addwfc	fsr2h,f,c
  8497  001DE4  50DF               	movf	indf2,w,c
  8498  001DE6  6E07               	movwf	RtccWriteDate@tempYear,c
  8499  001DE8  EE20 F001          	lfsr	2,1
  8500  001DEC  5001               	movf	RtccWriteDate@pDt,w,c
  8501  001DEE  26D9               	addwf	fsr2l,f,c
  8502  001DF0  5002               	movf	RtccWriteDate@pDt+1,w,c
  8503  001DF2  22DA               	addwfc	fsr2h,f,c
  8504  001DF4  50DF               	movf	indf2,w,c
  8505  001DF6  6E0A               	movwf	RtccWriteDate@tempDayMonth,c
  8506  001DF8  EE20 F002          	lfsr	2,2
  8507  001DFC  5001               	movf	RtccWriteDate@pDt,w,c
  8508  001DFE  26D9               	addwf	fsr2l,f,c
  8509  001E00  5002               	movf	RtccWriteDate@pDt+1,w,c
  8510  001E02  22DA               	addwfc	fsr2h,f,c
  8511  001E04  50DF               	movf	indf2,w,c
  8512  001E06  6E0B               	movwf	RtccWriteDate@tempDayMonth+1,c
  8513  001E08  5003               	movf	RtccWriteDate@di,w,c
  8514  001E0A  B4D8               	btfsc	status,2,c
  8515  001E0C  D002               	goto	l3651
  8516  001E0E  9CF2               	bcf	intcon,6,c	;volatile
  8517  001E10  D000               	goto	l3651
  8518  001E12                     l3651:
  8519  001E12  0E00               	movlw	0
  8520  001E14  BB3F               	btfsc	63,5,b	;volatile
  8521  001E16  0E01               	movlw	1
  8522  001E18  6E09               	movwf	RtccWriteDate@wasWrEn,c
  8523  001E1A  5009               	movf	RtccWriteDate@wasWrEn,w,c
  8524  001E1C  A4D8               	btfss	status,2,c
  8525  001E1E  D003               	goto	l3655
  8526  001E20  EC10  F018         	call	_RtccWrOn	;wreg free
  8527  001E24  D000               	goto	l3655
  8528  001E26                     l3655:
  8529  001E26  0E00               	movlw	0
  8530  001E28  BF3F               	btfsc	63,7,b	;volatile
  8531  001E2A  0E01               	movlw	1
  8532  001E2C  6E05               	movwf	RtccWriteDate@wasOn,c
  8533  001E2E  5005               	movf	RtccWriteDate@wasOn,w,c
  8534  001E30  B4D8               	btfsc	status,2,c
  8535  001E32  D007               	goto	l3661
  8536  001E34  0E00               	movlw	0
  8537  001E36  BE91               	btfsc	3985,7,c	;volatile
  8538  001E38  0E01               	movlw	1
  8539  001E3A  6E06               	movwf	RtccWriteDate@wasAlrm,c
  8540  001E3C  010F               	movlb	15	; () banked
  8541  001E3E  9F3F               	bcf	63,7,b	;volatile
  8542  001E40  D000               	goto	l3661
  8543  001E42                     l3661:
  8544  001E42  0EFC               	movlw	252
  8545  001E44  010F               	movlb	15	; () banked
  8546  001E46  173F               	andwf	63,f,b	;volatile
  8547  001E48  010F               	movlb	15	; () banked
  8548  001E4A  813F               	bsf	63,0,b	;volatile
  8549                           
  8550                           ; BSR set to: 15
  8551  001E4C  CF98 F00C          	movff	3992,RtccWriteDate@tempHourWDay	;volatile
  8552                           
  8553                           ; BSR set to: 15
  8554  001E50  CF99 F00D          	movff	3993,RtccWriteDate@tempHourWDay+1	;volatile
  8555                           
  8556                           ; BSR set to: 15
  8557  001E54  C001  FFD9         	movff	RtccWriteDate@pDt,fsr2l
  8558  001E58  C002  FFDA         	movff	RtccWriteDate@pDt+1,fsr2h
  8559  001E5C  50DF               	movf	indf2,w,c
  8560  001E5E  6E0D               	movwf	RtccWriteDate@tempHourWDay+1,c
  8561                           
  8562                           ; BSR set to: 15
  8563  001E60  0EFC               	movlw	252
  8564  001E62  010F               	movlb	15	; () banked
  8565  001E64  173F               	andwf	63,f,b	;volatile
  8566                           
  8567                           ; BSR set to: 15
  8568  001E66  0E03               	movlw	3
  8569  001E68  010F               	movlb	15	; () banked
  8570  001E6A  133F               	iorwf	63,f,b	;volatile
  8571                           
  8572                           ; BSR set to: 15
  8573  001E6C  C007  FF98         	movff	RtccWriteDate@tempYear,3992	;volatile
  8574                           
  8575                           ; BSR set to: 15
  8576  001E70  C008  FF99         	movff	RtccWriteDate@tempYear+1,3993	;volatile
  8577                           
  8578                           ; BSR set to: 15
  8579  001E74  C00A  FF98         	movff	RtccWriteDate@tempDayMonth,3992	;volatile
  8580                           
  8581                           ; BSR set to: 15
  8582  001E78  C00B  FF99         	movff	RtccWriteDate@tempDayMonth+1,3993	;volatile
  8583                           
  8584                           ; BSR set to: 15
  8585  001E7C  C00C  FF98         	movff	RtccWriteDate@tempHourWDay,3992	;volatile
  8586                           
  8587                           ; BSR set to: 15
  8588  001E80  C00D  FF99         	movff	RtccWriteDate@tempHourWDay+1,3993	;volatile
  8589                           
  8590                           ; BSR set to: 15
  8591  001E84  5005               	movf	RtccWriteDate@wasOn,w,c
  8592  001E86  B4D8               	btfsc	status,2,c
  8593  001E88  D00D               	goto	l3697
  8594                           
  8595                           ; BSR set to: 15
  8596  001E8A  010F               	movlb	15	; () banked
  8597  001E8C  8F3F               	bsf	63,7,b	;volatile
  8598                           
  8599                           ; BSR set to: 15
  8600  001E8E  5006               	movf	RtccWriteDate@wasAlrm,w,c
  8601  001E90  B4D8               	btfsc	status,2,c
  8602  001E92  D002               	goto	l3693
  8603                           
  8604                           ; BSR set to: 15
  8605  001E94  8E91               	bsf	3985,7,c	;volatile
  8606  001E96  D000               	goto	l3693
  8607  001E98                     l3693:
  8608                           
  8609                           ; BSR set to: 15
  8610  001E98  5009               	movf	RtccWriteDate@wasWrEn,w,c
  8611  001E9A  B4D8               	btfsc	status,2,c
  8612  001E9C  D009               	goto	l3701
  8613                           
  8614                           ; BSR set to: 15
  8615  001E9E  EC10  F018         	call	_RtccWrOn	;wreg free
  8616  001EA2  D006               	goto	l3701
  8617  001EA4                     l3697:
  8618  001EA4  5009               	movf	RtccWriteDate@wasWrEn,w,c
  8619  001EA6  A4D8               	btfss	status,2,c
  8620  001EA8  D003               	goto	l3701
  8621  001EAA  010F               	movlb	15	; () banked
  8622  001EAC  9B3F               	bcf	63,5,b	;volatile
  8623                           
  8624                           ; BSR set to: 15
  8625  001EAE  D000               	goto	l3701
  8626  001EB0                     l3701:
  8627  001EB0  5003               	movf	RtccWriteDate@di,w,c
  8628  001EB2  B4D8               	btfsc	status,2,c
  8629  001EB4  0012               	return	
  8630  001EB6  9CF2               	bcf	intcon,6,c	;volatile
  8631  001EB8  0012               	return	
  8632                           
  8633                           ;	Return value of _RtccWriteDate is never used
  8634  001EBA  0012               	return		;funcret
  8635  001EBC                     __end_of_RtccWriteDate:
  8636                           	opt stack 0
  8637                           tblptru	equ	0xFF8
  8638                           tblptrh	equ	0xFF7
  8639                           tblptrl	equ	0xFF6
  8640                           tablat	equ	0xFF5
  8641                           prodh	equ	0xFF4
  8642                           prodl	equ	0xFF3
  8643                           intcon	equ	0xFF2
  8644                           indf0	equ	0xFEF
  8645                           postinc0	equ	0xFEE
  8646                           fsr0h	equ	0xFEA
  8647                           fsr0l	equ	0xFE9
  8648                           wreg	equ	0xFE8
  8649                           postdec1	equ	0xFE5
  8650                           fsr1l	equ	0xFE1
  8651                           indf2	equ	0xFDF
  8652                           postinc2	equ	0xFDE
  8653                           postdec2	equ	0xFDD
  8654                           fsr2h	equ	0xFDA
  8655                           fsr2l	equ	0xFD9
  8656                           status	equ	0xFD8
  8657                           
  8658 ;; *************** function _RtccWrOn *****************
  8659 ;; Defined at:
  8660 ;;		line 21 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWrOn.c"
  8661 ;; Parameters:    Size  Location     Type
  8662 ;;		None
  8663 ;; Auto vars:     Size  Location     Type
  8664 ;;  data            2    0        unsigned int 
  8665 ;; Return value:  Size  Location     Type
  8666 ;;		None               void
  8667 ;; Registers used:
  8668 ;;		wreg, status,2
  8669 ;; Tracked objects:
  8670 ;;		On entry : 0/0
  8671 ;;		On exit  : 0/0
  8672 ;;		Unchanged: 0/0
  8673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8677 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8678 ;;Total ram usage:        0 bytes
  8679 ;; Hardware stack levels used:    1
  8680 ;; This function calls:
  8681 ;;		Nothing
  8682 ;; This function is called by:
  8683 ;;		_Write_RTC
  8684 ;;		_RtccWriteDate
  8685 ;;		_RtccWriteTime
  8686 ;; This function uses a non-reentrant model
  8687 ;;
  8688                           
  8689                           	psect	text49
  8690  003020                     __ptext49:
  8691                           	opt stack 0
  8692  003020                     _RtccWrOn:
  8693                           	opt stack 27
  8694                           
  8695                           ;incstack = 0
  8696  003020  9CF2               	bcf	intcon,6,c	;volatile
  8697  003022  0E55               	movlw	85
  8698  003024  6EA7               	movwf	4007,c	;volatile
  8699  003026  0EAA               	movlw	170
  8700  003028  6EA7               	movwf	4007,c	;volatile
  8701  00302A  010F               	movlb	15	; () banked
  8702  00302C  8B3F               	bsf	63,5,b	;volatile
  8703                           
  8704                           ; BSR set to: 15
  8705  00302E  8CF2               	bsf	intcon,6,c	;volatile
  8706                           
  8707                           ; BSR set to: 15
  8708  003030  0012               	return		;funcret
  8709  003032                     __end_of_RtccWrOn:
  8710                           	opt stack 0
  8711                           tblptru	equ	0xFF8
  8712                           tblptrh	equ	0xFF7
  8713                           tblptrl	equ	0xFF6
  8714                           tablat	equ	0xFF5
  8715                           prodh	equ	0xFF4
  8716                           prodl	equ	0xFF3
  8717                           intcon	equ	0xFF2
  8718                           indf0	equ	0xFEF
  8719                           postinc0	equ	0xFEE
  8720                           fsr0h	equ	0xFEA
  8721                           fsr0l	equ	0xFE9
  8722                           wreg	equ	0xFE8
  8723                           postdec1	equ	0xFE5
  8724                           fsr1l	equ	0xFE1
  8725                           indf2	equ	0xFDF
  8726                           postinc2	equ	0xFDE
  8727                           postdec2	equ	0xFDD
  8728                           fsr2h	equ	0xFDA
  8729                           fsr2l	equ	0xFD9
  8730                           status	equ	0xFD8
  8731                           tblptru	equ	0xFF8
  8732                           tblptrh	equ	0xFF7
  8733                           tblptrl	equ	0xFF6
  8734                           tablat	equ	0xFF5
  8735                           prodh	equ	0xFF4
  8736                           prodl	equ	0xFF3
  8737                           intcon	equ	0xFF2
  8738                           indf0	equ	0xFEF
  8739                           postinc0	equ	0xFEE
  8740                           fsr0h	equ	0xFEA
  8741                           fsr0l	equ	0xFE9
  8742                           wreg	equ	0xFE8
  8743                           postdec1	equ	0xFE5
  8744                           fsr1l	equ	0xFE1
  8745                           indf2	equ	0xFDF
  8746                           postinc2	equ	0xFDE
  8747                           postdec2	equ	0xFDD
  8748                           fsr2h	equ	0xFDA
  8749                           fsr2l	equ	0xFD9
  8750                           status	equ	0xFD8
  8751                           
  8752                           	psect	rparam
  8753  0000                     tblptru	equ	0xFF8
  8754                           tblptrh	equ	0xFF7
  8755                           tblptrl	equ	0xFF6
  8756                           tablat	equ	0xFF5
  8757                           prodh	equ	0xFF4
  8758                           prodl	equ	0xFF3
  8759                           intcon	equ	0xFF2
  8760                           indf0	equ	0xFEF
  8761                           postinc0	equ	0xFEE
  8762                           fsr0h	equ	0xFEA
  8763                           fsr0l	equ	0xFE9
  8764                           wreg	equ	0xFE8
  8765                           postdec1	equ	0xFE5
  8766                           fsr1l	equ	0xFE1
  8767                           indf2	equ	0xFDF
  8768                           postinc2	equ	0xFDE
  8769                           postdec2	equ	0xFDD
  8770                           fsr2h	equ	0xFDA
  8771                           fsr2l	equ	0xFD9
  8772                           status	equ	0xFD8


Data Sizes:
    Strings     122
    Constant    71
    Data        16
    BSS         72
    Persistent  13
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     91      95
    BANK0           160     22     120
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    RtccWriteTime@pTm	PTR const struct . size(2) Largest target is 4
		 -> RtccTime(BANK0[4]), 

    RtccWriteDate@pDt	PTR const struct . size(2) Largest target is 4
		 -> RtccDate(BANK0[4]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_15(CODE[10]), STR_14(CODE[15]), STR_13(CODE[5]), STR_12(CODE[5]), 
		 -> STR_11(CODE[5]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), 
		 -> STR_7(CODE[5]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> buffer2(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    lcd_putrs@ptr	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_21(CODE[8]), STR_20(CODE[10]), STR_19(CODE[4]), STR_18(CODE[3]), 
		 -> STR_17(CODE[11]), STR_16(CODE[11]), buffer2(BANK0[20]), STR_3(CODE[10]), 
		 -> STR_2(CODE[13]), STR_1(CODE[33]), 


Critical Paths under _main in COMRAM

    _main->_set_vision
    _set_vision->_pow
    _write_Date->_sprintf
    _twinkle->_read_keyboard
    _read_keyboard->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcd_putrs->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    __delay_s->___awdiv
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftadd
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___awtoft
    ___ftmul->___lbtoft
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    _lcd_setcursor_vb->_lcd_send_byte
    _clear->_lcd_comand
    ___lbtoft->___ftpack
    _caratula->_lcd_comand
    _lcd_init->_lcd_send_byte
    _lcd_comand->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _Write_RTC->_RtccWriteDate

Critical Paths under _main in BANK0

    _main->_set_vision
    _set_vision->_pow

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  123476
                                             89 COMRAM     2     2      0
                              _Setup
                           _caratula
                         _lcd_gotoxy
                          _lcd_putrs
                      _read_keyboard
                         _set_vision
 ---------------------------------------------------------------------------------
 (1) _set_vision                                          13    13      0  106965
                                             87 COMRAM     2     2      0
                                             11 BANK0     11    11      0
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                           ___lbtoft
                          _checkPass
                              _clear
                     _clear_keyboard
                         _lcd_gotoxy
                          _lcd_putrs
                   _lcd_setcursor_vb
                                _pow
                      _read_keyboard
                            _twinkle
                         _write_Date
 ---------------------------------------------------------------------------------
 (2) _write_Date                                           0     0      0    8431
                         _lcd_gotoxy
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _twinkle                                              1     1      0   13367
                                             36 COMRAM     1     1      0
                           __delay_s
                         _lcd_gotoxy
                          _lcd_putrs
                      _read_keyboard
 ---------------------------------------------------------------------------------
 (3) _read_keyboard                                        1     1      0    6970
                                             35 COMRAM     1     1      0
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             32    22     10    3452
                                             12 COMRAM    23    13     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcd_putrs                                            2     0      2    3518
                                              8 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (4) _lcd_putc                                             1     1      0    2129
                                              7 COMRAM     1     1      0
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (5) _lcd_gotoxy                                           3     2      1    1461
                                              4 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (3) __delay_s                                             7     5      2    1394
                                              8 COMRAM     7     5      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _pow                                                 17    11      6   58696
                                             81 COMRAM     6     0      6
                                              0 BANK0     11    11      0
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  5     2      3   19163
                                             51 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                  9     6      3   31848
                                             72 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                                7     2      5     376
                                             51 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (4) _floor                                                8     5      3    8237
                                             64 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                7     2      5     480
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             15    11      4     508
                                             39 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftge                                               9     3      6     648
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (5) ___altoft                                            10     6      4    2389
                                             54 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           12     5      7    8487
                                             39 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     543
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             15     9      6    3485
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    4194
                                             39 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    3897
                                             27 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     237
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    2697
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    2534
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2320
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _lcd_setcursor_vb                                     2     1      1     796
                                              4 COMRAM     2     1      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (2) _clear_keyboard                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _clear                                                1     1      0     646
                                              5 COMRAM     1     1      0
                         _lcd_comand
 ---------------------------------------------------------------------------------
 (2) _checkPass                                            2     0      2      86
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             4     1      3    2209
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    2187
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _caratula                                             0     0      0     646
                         _lcd_comand
 ---------------------------------------------------------------------------------
 (1) _Setup                                                0     0      0    3892
                          _Write_RTC
                         _lcd_comand
                           _lcd_init
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             1     1      0     841
                                              4 COMRAM     1     1      0
                        _Delay1KTCYx
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _lcd_comand                                           1     1      0     646
                                              4 COMRAM     1     1      0
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (5) _lcd_send_byte                                        2     1      1     624
                                              2 COMRAM     2     1      1
                       _Delay100TCYx
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (6) _lcd_send_nibble                                      2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _Delay100TCYx                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Write_RTC                                            0     0      0    2405
                           _RtccWrOn
                      _RtccWriteDate
                      _RtccWriteTime
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1196
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _RtccWriteTime                                       11     8      3     537
                                              0 COMRAM    11     8      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (3) _RtccWriteDate                                       13    10      3     672
                                              0 COMRAM    13    10      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (4) _RtccWrOn                                             2     2      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Setup
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_init
       _Delay1KTCYx
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
       _lcd_send_nibble
   _caratula
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
   _lcd_gotoxy
     _lcd_send_byte
       _Delay100TCYx
       _lcd_send_nibble
   _lcd_putrs
     _lcd_putc
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
   _read_keyboard
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _set_vision
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
       _frexp (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___lbtoft (ARG)
         ___ftpack
     ___lbtoft
       ___ftpack
     _checkPass
     _clear
       _lcd_comand
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _clear_keyboard
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _lcd_setcursor_vb
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lbtoft (ARG)
             ___ftpack
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lbtoft (ARG)
                 ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lbtoft (ARG)
               ___ftpack
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _frexp
     _read_keyboard
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _twinkle
       __delay_s
         ___awdiv
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _read_keyboard
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _write_Date
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     16      78       5       75.0%
BITCOMRAM           5F      0       1       0        1.1%
COMRAM              5F     5B      5F       1      100.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D7       6        0.0%
DATA                 0      0      D7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Sep 06 20:08:35 2016

             ___altoft@exp 003F                          _a 007C                          _b 007E  
                        _c 0080                          _i 0084                          _j 0086  
                        _k 0088              ___altoft@sign 0040                _state_alarm 00D7  
                       l75 2EE8                         l76 2EEA             ?_lcd_send_byte 0003  
             ___awdiv@sign 0006        ___wmul@multiplicand 0003                lcd_comand@d 0005  
             __CFG_CP0$OFF 000000               ___ftadd@exp1 0027               ___ftadd@exp2 0026  
             ___ftadd@sign 0025                        l220 10B2                        l212 1068  
                      l204 1000                        l221 10AE                        l213 1064  
                      l205 0FFC                        l240 1198                        l232 1128  
                      l224 10E6                        l216 1076                        l208 1034  
                      l241 1194                        l233 1124                        l225 10E2  
                      l217 1072                        l209 1030                        l260 1232  
                      l252 11F0                        l244 11CC                        l236 1164  
                      l228 111A                        l261 122E                        l253 11EC  
                      l245 11C8                        l237 1160                        l229 1116  
                      l256 1224                        l248 11DA                        l265 123C  
                      l257 1220                        l249 11D6                        l651 142C  
                      l580 2CAC                        _dia 00CD                        _key 005E  
                      _mes 005C                        _exp 16AE                        _log 1EBC  
                      _pow 1BF4                        wreg 000FE8                lcd_gotoxy@x 0006  
              lcd_gotoxy@y 0005               ___ftdiv@cntr 0012               ___ftdiv@sign 0017  
                     l1120 18DA                       l1124 1904                       l1135 19C6  
                     l1144 19E2                       l3001 1982                       l1305 2DAE  
                     l2203 2FFE                       l1091 26FA                       l1155 23A2  
                     l3011 19BA                       l3003 198A                       l1332 1C2E  
                     l3103 2114                       l1177 2F86                       l3017 1A00  
                     l3009 19AE                       l3121 217C                       l1337 1D68  
                     l3027 1A32                       l3043 223A                       l3131 21A6  
                     l3203 2D1A                       l3211 1264                       l1356 1764  
                     l3061 2280                       l3037 2212                       l3133 21B4  
                     l3125 218C                       l1357 1888                       l3071 22AE  
                     l3135 21BE                       l1367 24A8                       l3207 2D44  
                     l3151 2C2E                       l1295 2C60                       l3223 1296  
                     l4007 1536                       l3401 2844                       l3313 2314  
                     l3065 2296                       l3057 226E                       l3161 2C54  
                     l3153 2C36                       l3241 1334                       l3225 12AC  
                     l3217 127E                       l4025 161E                       l4033 164E  
                     l3075 22C4                       l3067 229C                       l3083 2756  
                     l3139 21D6                       l3171 2D84                       l3243 1356  
                     l3219 128C                       l4043 1688                       l3413 2EA6  
                     l3093 27B4                       l3149 2C24                       l3173 2D8C  
                     l3261 13A6                       l3253 137E                       l3237 132E  
                     l3229 12CA                       l4053 29EA                       l3319 233C  
                     l3087 2788                       l3431 2406                       l3271 13E0  
                     l4047 169A                       l3177 2DA2                       l3169 2D7A  
                     l3265 13CA                       l3257 13A2                       l3249 1372  
                     l3339 237C                       l3435 2414                       l3291 1486  
                     l3267 13D4                       l3701 1EB0                       l3621 20C4  
                     l3381 27F8                       l3349 23B0                       l3357 2E64  
                     l3189 2878                       l3285 1432                       l3277 1402  
                     l3293 1492                       l3383 2802                       l3375 27E2  
                     l2903 2702                       l3447 25CA                       l3439 242E  
                     l3711 2C98                       l3279 140A                       l3295 14AE  
                     l3625 20D0                       l3393 2828                       l3385 280A  
                     l3369 27D0                       l3449 2648                       l3481 254E  
                     l3465 2516                       l3457 24CE                       l2921 2DE0  
                     l3651 1E12                       l3483 257A                       l3731 1ED8  
                     l2915 2DBC                       l3563 1244                       l3661 1E42  
                     l3645 1DD8                       l3629 20DC                       l3397 2834  
                     l2845 3010                       l2909 2714                       l3717 2BB4  
                     l3477 253E                       l2917 2DC8                       l2925 2DEC  
                     l3655 1E26                       l3583 2044                       l3719 2BC2  
                     l2871 2F58                       l2919 2DD4                       l2935 2FAC  
                     l3593 2074                       l3577 201A                       l2881 266E  
                     l2953 2A7E                       l3753 16C6                       l3737 1EFA  
                     l2873 2F5E                       l3905 2B9E                       l3587 2058  
                     l3851 2910                       l2955 2A8C                       l3693 1E98  
                     l2893 26C2                       l2885 267E                       l2981 191E  
                     l3765 1736                       l3933 1CB8                       l3925 1C54  
                     l3847 2908                       l2895 26E2                       l2887 268A  
                     l2991 1946                       l2975 1912                       l3759 16FE  
                     l3919 1C3C                       l3697 1EA4                       l3865 2934  
                     l3857 2920                       l2897 26EE                       l2889 26AA  
                     l2969 18E8                       l3937 1CE0                       l3787 185E  
                     ?_exp 0049                       l2997 196A                       l3893 2B52  
                     ?_log 0034                       l2999 1976                       l3991 14E0  
                     l3989 14D2                       ?_pow 0052                       STR_1 0F48  
                     STR_2 0F78                       STR_3 0FA4                       STR_4 0FB6  
                     STR_5 0FB6                       STR_6 0FB6                       STR_7 0FB6  
                     STR_8 0FB6                       STR_9 0FB6                       u2200 2B32  
                     u3011 2324                       u2140 2AE4                       u2160 2AFC  
                     u4000 1CA0                       u2218 2B34                       u2180 2B16  
                     u4020 2FCC                       u2158 2AE6                       u3150 2420  
                     u2361 18A6                       u2178 2AFE                       u2371 18BA  
                     u2198 2B18                       u3190 24EE                       u2810 28A0  
                     u2571 21FA                       u4307 124A                       u2820 2D3A  
                     u2661 20F8                       u4317 2C9E                       u3198 24F0  
                     u2830 2D64                       u4327 2FDE                       u2591 2222  
                     u2680 2132                       u4337 3000                       u2818 28A2  
                     u4347 3012                       u2827 2D30                       u2685 212A  
                     u2837 2D5A                       u4297 2A4C                       u3860 173E  
                     u3870 1740                       u2991 22FC           ?_lcd_send_nibble 0001  
                     _anio 00CB                       _flag 02F8                       _main 29E0  
                     _hora 00D1               ___ftpack@arg 0001               ___ftpack@exp 0004  
                     fsr0h 000FEA                       indf0 000FEF                       fsr0l 000FE9  
                     fsr2h 000FDA                       fsr1l 000FE1                       indf2 000FDF  
                     fsr2l 000FD9                       exp@x 0049                       log@x 0034  
            __CFG_T1DIG$ON 000000                       pow@x 0052                       pow@y 0055  
                     prodh 000FF4                       prodl 000FF3                       start 0000  
            __CFG_IESO$OFF 000000               ___ftmul@cntr 001A               ___param_bank 000010  
             ___ftmul@sign 001B               ___fttol@exp1 0036                      ??_exp 004C  
                    ??_log 0037               ___fttol@lval 0032                      ??_pow 0058  
              _Delay1KTCYx 2FFC              __CFG_PLLDIV$1 000000                      ?_main 0001  
          __end_of___awdiv 2850            __end_of___ftadd 1A5A                      STR_10 0FB6  
                    STR_11 0FB6                      STR_12 0FB6                      STR_20 0F90  
                    STR_13 0FB6                      STR_21 0FAE                      STR_14 0F69  
                    STR_15 0F9A                      STR_16 0F85                      STR_17 0F5E  
                    STR_18 0FBF                      STR_19 0FBB      __size_of_Delay100TCYx 0012  
          __end_of___ftdiv 23D8            __end_of___ftneg 2F94            __end_of___ftmul 22EC  
          ___awdiv@divisor 0003            __end_of___ftsub 2E90            __end_of___fttol 21EA  
          __end_of___lwdiv 2C6A            __end_of___lwmod 2DB8            ___awdiv@counter 0005  
                    _TRISA 000F92                      _TRISB 000F93                      _TRISC 000F94  
             ___lltoft@exp 0011             __CFG_FCMEN$OFF 000000                      _Setup 2E04  
            ___awtoft@sign 000C                      _clear 2FD2            __end_of_dpowers 0F0B  
                    _floor 23D8                      _ldexp 24B6                      _frexp 2850  
                    _mes_d 00C5                      _errno 0082                      _mes_u 00C6  
          __end_of_isdigit 2FB6              ___ftpack@sign 0005             __pbitbssCOMRAM 02F8  
                    tablat 000FF5                      pow@yi 00AF               lcd_putrs@ptr 0009  
                    status 000FD8            __end_of_sprintf 14BE            __end_of_twinkle 2BAE  
              exp@exponent 004F    __CFG_DSWDTOSC$INTOSCREF 000000                ldexp@newexp 0037  
  __size_of_clear_keyboard 0006            __initialization 2CC2                log@exponent 0037  
             _Delay100TCYx 300E               __end_of_main 2A5C            ??_lcd_send_byte 0004  
          _set_vision$2710 00B6            _set_vision$2709 00B3                     ??_main 005A  
            ___fttol@sign1 0031              __activetblptr 000002           __end_of_RtccWrOn 3032  
                   ?_Setup 0001                     ?_clear 0001                     _ADCON0 000FC2  
                   _ADCON1 000FC1                     ?_floor 0041                     ?_ldexp 0034  
                   ?_frexp 0001           __end_of___altoft 2AD8                     _EECON2 000FA7  
                   _ANCON0 000F48                     _ANCON1 000F49           ___awdiv@dividend 0001  
         __end_of___awtoft 2ECC           __end_of___ftpack 2724           __end_of___lbtoft 2F4C  
         __end_of__delay_s 2CC2           __end_of___lltoft 2C0E             __CFG_WDTEN$OFF 000000  
         RtccWriteDate@pDt 0001                     _RTCCFG 000F3F             __CFG_WPCFG$OFF 000000  
         __end_of_caratula 3056             __CFG_WPDIS$OFF 000000             __CFG_XINST$OFF 000000  
         __end_of_lcd_init 2962           __end_of_lcd_putc 2E04                     ___ftge 2724  
        ?_lcd_setcursor_vb 0005                     ___wmul 2EFE                  ??___awdiv 0005  
                ??___ftadd 0022             __CFG_STVREN$ON 000000                  ??___ftdiv 000F  
                ??___ftneg 0004                     _diasem 00CF                  ??___ftmul 0013  
                   _anio_d 00BE                  ??___ftsub 002E                  ??___fttol 002C  
                   _anio_u 00BF                  ??___lwdiv 0005                  ??___lwmod 000C  
       ??_lcd_setcursor_vb 0006                     _hora_d 00C3                     _hora_u 00C4  
                   clear_0 2CC8           ___awdiv@quotient 0007                     _minuto 00D3  
    __end_of_RtccWriteDate 1EBC      __end_of_RtccWriteTime 20E8              checkPass@pass 0001  
                   floor@i 0044                     floor@x 0041      ___ftmul@f3_as_product 0017  
         RtccWriteTime@pTm 0001               __pdataCOMRAM 005C                  ??_isdigit 0001  
             __mediumconst 0000                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8                  ??_sprintf 0017                  ??_twinkle 0025  
   __size_of_read_keyboard 0296           __end_ofexp@coeff 0F2D           __end_oflog@coeff 0F48  
               __accesstop 0060    __end_of__initialization 2D0E                 ___altoft@c 0037  
               ___ftadd@f1 001C                 ___ftadd@f2 001F         __size_of_Write_RTC 019A  
               ___ftge@ff1 0001                 ___ftge@ff2 0004               eval_poly@res 0031  
            ___rparam_used 000001                 ___ftdiv@f1 0009                 ___ftdiv@f2 000C  
               ___ftdiv@f3 0013                 ___ftneg@f1 0001                 ___awtoft@c 0009  
               ___lbtoft@c 000C                 ___ftmul@f1 000D                 ___ftmul@f2 0010  
               ___ftsub@f1 0028                 ___ftsub@f2 002B                 ___fttol@f1 0028  
           __pcstackCOMRAM 0001              __end_of_Setup 2E4C               __pidataBANK0 3040  
       __size_of_checkPass 001C              __end_of_clear 2FE8                 ___lltoft@c 0009  
            __end_of_floor 24B6              __end_of_ldexp 258A              __end_of_frexp 28E2  
          __CFG_DSWDTPS$G2 000000            __CFG_OSC$INTOSC 000000                    ??_Setup 000E  
        lcd_gotoxy@address 0007                    ??_clear 0006         __size_of_lcd_putrs 0054  
                  ??_floor 0044                    ??_ldexp 0039                    ??_frexp 0006  
             sprintf@width 0021                 __pbssBANK0 0060         __size_of_eval_poly 00D4  
               _dia_semana 00C0  RtccWriteTime@tempHourWDay 000A             _clear_keyboard 3056  
                ?_RtccWrOn 0001             lcd_send_byte@n 0003                    ?___ftge 0001  
                  ?___wmul 0001              _read_keyboard 0FC4               ?_Delay1KTCYx 0001  
                ?___altoft 0037                  ?___awtoft 0009                  ?___ftpack 0001  
                ?___lbtoft 0009                  ?__delay_s 0009                  ?___lltoft 0009  
        __end_of_Write_RTC 1BF4             __delay_s@index 000E                 _lcd_comand 3032  
                ?_caratula 0001                 _lcd_gotoxy 2F4C                    _RTCVALH 000F99  
                  _RTCVALL 000F98                  ?_lcd_init 0001          __end_of_checkPass 2FD2  
                ?_lcd_putc 0001     __end_of_clear_keyboard 305C                    __Hparam 0000  
                  __Lparam 0000   __size_of_lcd_send_nibble 0076                 ??_RtccWrOn 0001  
          __size_of___ftge 0096                    ___awdiv 27BA                    ___ftadd 1896  
        __end_of_lcd_putrs 2D6C                    ___ftdiv 22EC             ?_read_keyboard 0001  
                  ___ftneg 2F70            __size_of___wmul 0028                    ___ftmul 21EA  
                  ___ftsub 2E4C                    ___fttol 20E8                    ___lwdiv 2C0E  
                  ___lwmod 2D6C               __psmallconst 0F00                 ??___altoft 003B  
              _RtccTimeVal 0078                    __pcinit 2CC2                    _fecha_d 00C1  
                  _fecha_u 00C2                 ??___awtoft 000C                 ??___ftpack 0006  
               ??___lbtoft 000C          __end_of_eval_poly 265E                    __ramtop 0F00  
               ??__delay_s 000B                 ??___lltoft 000D            set_vision@digit 00BB  
                  __ptext0 29E0                    __ptext1 14BE                    __ptext2 2962  
                  __ptext3 2B4E                    __ptext4 0FC4                    __ptext5 125A  
                  __ptext6 2F94                    __ptext7 2D6C                    __ptext8 2C0E  
                  __ptext9 2D18                    _buffer2 008C            set_vision@input 00BD  
                _T1CONbits 000FCD                    _dpowers 0F01               __size_of_exp 01E8  
             __size_of_log 0120                    _isdigit 2F94               __size_of_pow 0182  
               ??_caratula 0006                    _segundo 008A                    _sprintf 125A  
               ??_lcd_init 0005                 ??_lcd_putc 0008                    _twinkle 2B4E  
     end_of_initialization 2D0E                    exp@sign 0051       lcd_send_byte@address 0004  
            __Lmediumconst 0000            ?_clear_keyboard 0001                    pow@sign 00AE  
             twinkle@input 0025                    postdec1 000FE5                    postdec2 000FDD  
                  postinc0 000FEE                    postinc2 000FDE                 _set_vision 14BE  
    __end_of_lcd_send_byte 2EFE                  _PORTAbits 000F80                  _PORTCbits 000F82  
         __CFG_DSBOREN$OFF 000000                ?_lcd_comand 0001           __CFG_CPUDIV$OSC1 000000  
                _TRISBbits 000F93                ?_lcd_gotoxy 0005  __size_of_lcd_setcursor_vb 0014  
          _LCD_INIT_STRING 0F0B                ___ftdiv@exp 0016           __CFG_IOL1WAY$OFF 000000  
RtccWriteDate@tempDayMonth 000A        __CFG_MSSP7B_EN$MSK7 000000                ___ftmul@exp 0016  
          ??_read_keyboard 0024           Delay100TCYx@unit 0001                 _write_Date 2962  
           __end_of___ftge 27BA                __delay_s@it 000C             __end_of___wmul 2F26  
            __pidataCOMRAM 305C  RtccWriteDate@tempHourWDay 000C          ??_lcd_send_nibble 0001  
     __size_of_Delay1KTCYx 0012           __CFG_DSWDTEN$OFF 000000                 floor@expon 0047  
      start_initialization 2CC2                 eval_poly@d 002B                 eval_poly@n 002D  
               eval_poly@x 0028                 ldexp@value 0034                __end_of_exp 1896  
              __end_of_log 1FDC                __end_of_pow 1D76                 frexp@value 0001  
     RtccWriteTime@wasAlrm 0006       RtccWriteTime@wasWrEn 0007     __size_of_RtccWriteDate 0146  
          RtccWriteDate@di 0003     __size_of_RtccWriteTime 010C        __size_of_lcd_comand 000E  
                 ??___ftge 0007        __size_of_lcd_gotoxy 0024                   ??___wmul 0005  
              ?_set_vision 0001                __pdataBANK0 00CB          __size_of_RtccWrOn 0012  
          RtccWriteTime@di 0003           __CFG_LPT1OSC$OFF 000000          __size_of___altoft 007C  
              _ALRMCFGbits 000F91    __end_of_LCD_INIT_STRING 0F0F          __size_of___awtoft 003C  
        __size_of___ftpack 00C6          __size_of___lbtoft 0026          __size_of__delay_s 0058  
        __size_of___lltoft 0060              __pcstackBANK0 00A8                  _Write_RTC 1A5A  
             _isdigit$2348 0002          __size_of_caratula 0008            Delay1KTCYx@unit 0001  
        __size_of_lcd_init 0080                sprintf@flag 001D          __size_of_lcd_putc 004C  
              sprintf@prec 0020                  _checkPass 2FB6                  __pnvBANK0 00BE  
         ___lwdiv@dividend 0001              ?_Delay100TCYx 0001                   ?___awdiv 0001  
                 ?___ftadd 001C                   ?___ftdiv 0009                   ?___ftneg 0001  
                 ?___ftmul 000D                   ?___ftsub 0028                   ?___fttol 0028  
                 ?___lwdiv 0001                ?_write_Date 0001                   ?___lwmod 0008  
  RtccWriteTime@tempMinSec 0008                  _lcd_putrs 2D18    lcd_setcursor_vb@visible 0006  
            _RtccWriteDate 1D76                __smallconst 0F00              _RtccWriteTime 1FDC  
                 ?_isdigit 0001                  _eval_poly 258A       __CFG_RTCOSC$T1OSCREF 000000  
         _lcd_setcursor_vb 2FE8             __size_of_Setup 0048                 ?_Write_RTC 0001  
         ___lwdiv@quotient 0005             __size_of_clear 0016           ??_clear_keyboard 0001  
                 ?_sprintf 000D             __size_of_floor 00DE             __size_of_ldexp 00D4  
           __size_of_frexp 0092                   ?_twinkle 0001             set_vision@pass 00B9  
      __size_of_set_vision 01F0           _RtccAlrmTimeDate 0060             ___wmul@product 0005  
          __delay_s@millis 0009                   _LATAbits 000F89                   _LATBbits 000F8A  
               ?_checkPass 0001                   _PIE3bits 000FA3                  _segundo_d 00C9  
           ??_Delay100TCYx 0001                  _segundo_u 00CA           __CFG_WDTPS$32768 000000  
       RtccWriteDate@wasOn 0005         _Rtcc_read_TimeDate 0070             ?_RtccWriteDate 0001  
               ?_lcd_putrs 0009          ___wmul@multiplier 0001             ?_RtccWriteTime 0001  
                lcd_init@i 0005               ??_lcd_comand 0005                 ?_eval_poly 0028  
                main@input 005B                  lcd_putc@c 0008               ??_lcd_gotoxy 0006  
                copy_data0 2CE4        __size_of_write_Date 007E                  frexp@eptr 0004  
          _lcd_send_nibble 2AD8                   __Hrparam 0000                   _RtccDate 00A0  
                 __Lrparam 0000                   _RtccTime 00A4                   _RtccWrOn 3020  
       __end_of_lcd_comand 3040         __end_of_lcd_gotoxy 2F70           __size_of___awdiv 0096  
         __size_of___ftadd 01C4           __size_of___ftdiv 00EC           __size_of___ftneg 0024  
                 ___altoft 2A5C           __size_of___ftmul 0102           __size_of___ftsub 0044  
         __size_of___fttol 0102           __size_of___lwdiv 005C           __size_of___lwmod 004C  
                 ___awtoft 2E90                   ___ftpack 265E                   ___lbtoft 2F26  
                 __delay_s 2C6A                   ___lltoft 2BAE               _RtccTimeDate 0068  
                 _exp$2713 004C                 sprintf@val 001E                   _caratula 304E  
         __size_of_isdigit 0022            ___lwdiv@divisor 0003                ??_Write_RTC 000E  
          ___lwdiv@counter 0007                   __ptext10 2DB8                   __ptext11 2F4C  
                 __ptext20 2724                   __ptext12 2C6A                   __ptext21 2A5C  
                 __ptext13 1BF4                   __ptext30 2BAE                   __ptext22 258A  
                 __ptext14 1EBC                   __ptext31 2FE8                   __ptext23 2EFE  
                 __ptext15 16AE                   __ptext40 2FFC                   __ptext32 3056  
                 __ptext24 21EA                   __ptext16 24B6                   __ptext41 3032  
                 __ptext33 2FD2                   __ptext25 2E4C                   __ptext17 23D8  
                 __ptext42 2ECC                   __ptext34 2FB6                   __ptext26 1896  
                 __ptext18 2850                   __ptext43 2AD8                   __ptext35 2F26  
                 __ptext27 2F70                   __ptext19 20E8                   __ptext44 300E  
                 __ptext36 265E                   __ptext28 22EC                   __ptext45 1A5A  
                 __ptext37 304E                   __ptext29 2E90                   __ptext46 27BA  
                 __ptext38 2E04                   __ptext47 1FDC                   __ptext39 28E2  
                 __ptext48 1D76                   __ptext49 3020                   _lcd_init 28E2  
                 _lcd_putc 2DB8                   _pow$2711 00A8                   _pow$2712 00AB  
         __size_of_sprintf 0264           __size_of_twinkle 0060     __size_of_lcd_send_byte 0032  
            __size_of_main 007C                ??_checkPass 0003                   _minuto_d 00C7  
                 _minuto_u 00C8                   _password 00D5               ??_set_vision 0058  
    __end_of_read_keyboard 125A              ??_Delay1KTCYx 0001            ??_RtccWriteDate 0004  
          ??_RtccWriteTime 0004                ??_lcd_putrs 000B                   exp@coeff 0F0F  
                 log@coeff 0F2D                _OSCTUNEbits 000F9B                 _INTCONbits 000FF2  
              ??_eval_poly 002F         RtccWriteTime@wasOn 0005       __end_of_Delay100TCYx 3020  
                 isdigit@c 0003                  sprintf@ap 001B    __end_of_lcd_send_nibble 2B4E  
                sprintf@sp 000D         __end_of_set_vision 16AE      lcd_setcursor_vb@blink 0005  
         ___lwmod@dividend 0008                 _OSCCONbits 000FD3   __end_of_lcd_setcursor_vb 2FFC  
    RtccWriteDate@tempYear 0007               ??_write_Date 0024              _lcd_send_byte 2ECC  
               _RTCCFGbits 000F3F                   sprintf@c 0023                   sprintf@f 000F  
          ___lwmod@divisor 000A        __end_of_Delay1KTCYx 300E            ___lwmod@counter 000C  
     RtccWriteDate@wasAlrm 0006       RtccWriteDate@wasWrEn 0009         __end_of_write_Date 29E0  
    lcd_send_nibble@nibble 0002  
