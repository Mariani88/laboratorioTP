

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Sep 13 19:28:40 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	text64,global,reloc=2,class=CODE,delta=1
    79                           	psect	text65,global,reloc=2,class=CODE,delta=1
    80                           	psect	text66,global,reloc=2,class=CODE,delta=1
    81                           	psect	text67,global,reloc=2,class=CODE,delta=1
    82                           	psect	text68,global,reloc=2,class=CODE,delta=1
    83                           	psect	text69,global,reloc=2,class=CODE,delta=1
    84                           	psect	text70,global,reloc=2,class=CODE,delta=1
    85                           	psect	text71,global,reloc=2,class=CODE,delta=1
    86                           	psect	text72,global,reloc=2,class=CODE,delta=1
    87                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    88                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    89  0000                     
    90                           	psect	idataBANK0
    91  003A5A                     __pidataBANK0:
    92                           	opt stack 0
    93                           
    94                           ;initializer for _anio
    95  003A5A  000F               	dw	15
    96                           
    97                           ;initializer for _dia
    98  003A5C  0008               	dw	8
    99                           
   100                           ;initializer for _diasem
   101  003A5E  0003               	dw	3
   102                           
   103                           ;initializer for _hora
   104  003A60  0012               	dw	18
   105                           
   106                           ;initializer for _mes
   107  003A62  0009               	dw	9
   108                           
   109                           ;initializer for _minuto
   110  003A64  001E               	dw	30
   111                           
   112                           ;initializer for _password
   113  003A66  04D2               	dw	1234
   114                           
   115                           ;initializer for _menu
   116  003A68  01                 	db	1
   117                           
   118                           ;initializer for _state_alarm
   119  003A69  01                 	db	1
   120                           
   121                           	psect	smallconst
   122  000F00                     __psmallconst:
   123                           	opt stack 0
   124  000F00  00                 	db	0
   125  000F01                     _dpowers:
   126                           	opt stack 0
   127  000F01  0001               	dw	1
   128  000F03  000A               	dw	10
   129  000F05  0064               	dw	100
   130  000F07  03E8               	dw	1000
   131  000F09  2710               	dw	10000
   132  000F0B                     __end_of_dpowers:
   133                           	opt stack 0
   134  000F0B                     _LCD_INIT_STRING:
   135                           	opt stack 0
   136  000F0B  28                 	db	40
   137  000F0C  0C                 	db	12
   138  000F0D  01                 	db	1
   139  000F0E  06                 	db	6
   140  000F0F                     __end_of_LCD_INIT_STRING:
   141                           	opt stack 0
   142  000F0F                     exp@coeff:
   143                           	opt stack 0
   144  000F0F  00                 	db	0
   145  000F10  80                 	db	128
   146  000F11  3F                 	db	63
   147  000F12  72                 	db	114
   148  000F13  31                 	db	49
   149  000F14  3F                 	db	63
   150  000F15  FE                 	db	254
   151  000F16  75                 	db	117
   152  000F17  3E                 	db	62
   153  000F18  58                 	db	88
   154  000F19  63                 	db	99
   155  000F1A  3D                 	db	61
   156  000F1B  95                 	db	149
   157  000F1C  1D                 	db	29
   158  000F1D  3C                 	db	60
   159  000F1E  C5                 	db	197
   160  000F1F  AE                 	db	174
   161  000F20  3A                 	db	58
   162  000F21  79                 	db	121
   163  000F22  21                 	db	33
   164  000F23  39                 	db	57
   165  000F24  94                 	db	148
   166  000F25  80                 	db	128
   167  000F26  37                 	db	55
   168  000F27  93                 	db	147
   169  000F28  A7                 	db	167
   170  000F29  35                 	db	53
   171  000F2A  56                 	db	86
   172  000F2B  15                 	db	21
   173  000F2C  34                 	db	52
   174  000F2D                     __end_ofexp@coeff:
   175                           	opt stack 0
   176  000F2D                     log@coeff:
   177                           	opt stack 0
   178  000F2D  00                 	db	0
   179  000F2E  00                 	db	0
   180  000F2F  00                 	db	0
   181  000F30  00                 	db	0
   182  000F31  80                 	db	128
   183  000F32  3F                 	db	63
   184  000F33  F0                 	db	240
   185  000F34  FF                 	db	255
   186  000F35  BE                 	db	190
   187  000F36  E2                 	db	226
   188  000F37  A9                 	db	169
   189  000F38  3E                 	db	62
   190  000F39  83                 	db	131
   191  000F3A  76                 	db	118
   192  000F3B  BE                 	db	190
   193  000F3C  AE                 	db	174
   194  000F3D  2B                 	db	43
   195  000F3E  3E                 	db	62
   196  000F3F  3C                 	db	60
   197  000F40  C3                 	db	195
   198  000F41  BD                 	db	189
   199  000F42  D2                 	db	210
   200  000F43  13                 	db	19
   201  000F44  3D                 	db	61
   202  000F45  78                 	db	120
   203  000F46  D3                 	db	211
   204  000F47  BB                 	db	187
   205  000F48                     __end_oflog@coeff:
   206                           	opt stack 0
   207  000F48                     STR_22:
   208                           
   209                           ; BSR set to: 15
   210  000F48  6E                 	db	110	;'n'
   211  000F49  6F                 	db	111	;'o'
   212  000F4A  74                 	db	116	;'t'
   213  000F4B  68                 	db	104	;'h'
   214  000F4C  69                 	db	105	;'i'
   215  000F4D  6E                 	db	110	;'n'
   216  000F4E  67                 	db	103	;'g'
   217  000F4F  20                 	db	32
   218  000F50  63                 	db	99	;'c'
   219  000F51  68                 	db	104	;'h'
   220  000F52  61                 	db	97	;'a'
   221  000F53  6E                 	db	110	;'n'
   222  000F54  67                 	db	103	;'g'
   223  000F55  65                 	db	101	;'e'
   224  000F56  64                 	db	100	;'d'
   225  000F57  00                 	db	0
   226  000F58                     STR_21:
   227                           
   228                           ; BSR set to: 15
   229  000F58  6F                 	db	111	;'o'
   230  000F59  6C                 	db	108	;'l'
   231  000F5A  64                 	db	100	;'d'
   232  000F5B  20                 	db	32
   233  000F5C  70                 	db	112	;'p'
   234  000F5D  61                 	db	97	;'a'
   235  000F5E  73                 	db	115	;'s'
   236  000F5F  73                 	db	115	;'s'
   237  000F60  20                 	db	32
   238  000F61  77                 	db	119	;'w'
   239  000F62  72                 	db	114	;'r'
   240  000F63  6F                 	db	111	;'o'
   241  000F64  6E                 	db	110	;'n'
   242  000F65  67                 	db	103	;'g'
   243  000F66  00                 	db	0
   244  000F67                     STR_11:
   245                           
   246                           ; BSR set to: 15
   247  000F67  25                 	db	37
   248  000F68  30                 	db	48	;'0'
   249  000F69  32                 	db	50	;'2'
   250  000F6A  75                 	db	117	;'u'
   251  000F6B  2F                 	db	47
   252  000F6C  25                 	db	37
   253  000F6D  30                 	db	48	;'0'
   254  000F6E  32                 	db	50	;'2'
   255  000F6F  75                 	db	117	;'u'
   256  000F70  2F                 	db	47
   257  000F71  25                 	db	37
   258  000F72  30                 	db	48	;'0'
   259  000F73  32                 	db	50	;'2'
   260  000F74  75                 	db	117	;'u'
   261  000F75  00                 	db	0
   262  000F76                     STR_23:
   263                           
   264                           ; BSR set to: 15
   265  000F76  4F                 	db	79	;'O'
   266  000F77  6C                 	db	108	;'l'
   267  000F78  64                 	db	100	;'d'
   268  000F79  20                 	db	32
   269  000F7A  70                 	db	112	;'p'
   270  000F7B  61                 	db	97	;'a'
   271  000F7C  73                 	db	115	;'s'
   272  000F7D  73                 	db	115	;'s'
   273  000F7E  3A                 	db	58	;':'
   274  000F7F  5F                 	db	95	;'_'
   275  000F80  5F                 	db	95	;'_'
   276  000F81  5F                 	db	95	;'_'
   277  000F82  5F                 	db	95	;'_'
   278  000F83  00                 	db	0
   279  000F84                     STR_24:
   280                           
   281                           ; BSR set to: 15
   282  000F84  4E                 	db	78	;'N'
   283  000F85  65                 	db	101	;'e'
   284  000F86  77                 	db	119	;'w'
   285  000F87  20                 	db	32
   286  000F88  70                 	db	112	;'p'
   287  000F89  61                 	db	97	;'a'
   288  000F8A  73                 	db	115	;'s'
   289  000F8B  73                 	db	115	;'s'
   290  000F8C  3A                 	db	58	;':'
   291  000F8D  5F                 	db	95	;'_'
   292  000F8E  5F                 	db	95	;'_'
   293  000F8F  5F                 	db	95	;'_'
   294  000F90  5F                 	db	95	;'_'
   295  000F91  00                 	db	0
   296  000F92                     STR_19:
   297                           
   298                           ; BSR set to: 15
   299  000F92  70                 	db	112	;'p'
   300  000F93  61                 	db	97	;'a'
   301  000F94  73                 	db	115	;'s'
   302  000F95  73                 	db	115	;'s'
   303  000F96  20                 	db	32
   304  000F97  73                 	db	115	;'s'
   305  000F98  75                 	db	117	;'u'
   306  000F99  63                 	db	99	;'c'
   307  000F9A  63                 	db	99	;'c'
   308  000F9B  65                 	db	101	;'e'
   309  000F9C  73                 	db	115	;'s'
   310  000F9D  73                 	db	115	;'s'
   311  000F9E  00                 	db	0
   312  000F9F                     STR_14:
   313                           
   314                           ; BSR set to: 15
   315  000F9F  20                 	db	32
   316  000FA0  20                 	db	32
   317  000FA1  20                 	db	32
   318  000FA2  20                 	db	32
   319  000FA3  20                 	db	32
   320  000FA4  20                 	db	32
   321  000FA5  20                 	db	32
   322  000FA6  20                 	db	32
   323  000FA7  20                 	db	32
   324  000FA8  20                 	db	32
   325  000FA9  00                 	db	0
   326  000FAA                     STR_13:
   327                           
   328                           ; BSR set to: 15
   329  000FAA  57                 	db	87	;'W'
   330  000FAB  41                 	db	65	;'A'
   331  000FAC  52                 	db	82	;'R'
   332  000FAD  4E                 	db	78	;'N'
   333  000FAE  49                 	db	73	;'I'
   334  000FAF  4E                 	db	78	;'N'
   335  000FB0  47                 	db	71	;'G'
   336  000FB1  21                 	db	33
   337  000FB2  21                 	db	33
   338  000FB3  21                 	db	33
   339  000FB4  00                 	db	0
   340  000FB5                     STR_12:
   341                           
   342                           ; BSR set to: 15
   343  000FB5  25                 	db	37
   344  000FB6  30                 	db	48	;'0'
   345  000FB7  32                 	db	50	;'2'
   346  000FB8  75                 	db	117	;'u'
   347  000FB9  3A                 	db	58	;':'
   348  000FBA  25                 	db	37
   349  000FBB  30                 	db	48	;'0'
   350  000FBC  32                 	db	50	;'2'
   351  000FBD  75                 	db	117	;'u'
   352  000FBE  00                 	db	0
   353  000FBF                     STR_25:
   354                           
   355                           ; BSR set to: 15
   356  000FBF  53                 	db	83	;'S'
   357  000FC0  65                 	db	101	;'e'
   358  000FC1  6E                 	db	110	;'n'
   359  000FC2  73                 	db	115	;'s'
   360  000FC3  6F                 	db	111	;'o'
   361  000FC4  72                 	db	114	;'r'
   362  000FC5  3A                 	db	58	;':'
   363  000FC6  20                 	db	32
   364  000FC7  00                 	db	0
   365  000FC8                     STR_18:
   366                           
   367                           ; BSR set to: 15
   368  000FC8  54                 	db	84	;'T'
   369  000FC9  52                 	db	82	;'R'
   370  000FCA  49                 	db	73	;'I'
   371  000FCB  47                 	db	71	;'G'
   372  000FCC  47                 	db	71	;'G'
   373  000FCD  45                 	db	69	;'E'
   374  000FCE  44                 	db	68	;'D'
   375  000FCF  00                 	db	0
   376  000FD0                     STR_27:
   377                           
   378                           ; BSR set to: 15
   379  000FD0  44                 	db	68	;'D'
   380  000FD1  61                 	db	97	;'a'
   381  000FD2  74                 	db	116	;'t'
   382  000FD3  65                 	db	101	;'e'
   383  000FD4  3A                 	db	58	;':'
   384  000FD5  00                 	db	0
   385  000FD6                     STR_1:
   386                           
   387                           ; BSR set to: 15
   388  000FD6  25                 	db	37
   389  000FD7  30                 	db	48	;'0'
   390  000FD8  31                 	db	49	;'1'
   391  000FD9  75                 	db	117	;'u'
   392  000FDA  00                 	db	0
   393  000FDB                     STR_17:
   394                           
   395                           ; BSR set to: 15
   396  000FDB  4F                 	db	79	;'O'
   397  000FDC  46                 	db	70	;'F'
   398  000FDD  46                 	db	70	;'F'
   399  000FDE  00                 	db	0
   400  000FDF                     STR_16:
   401                           
   402                           ; BSR set to: 15
   403  000FDF  4F                 	db	79	;'O'
   404  000FE0  4E                 	db	78	;'N'
   405  000FE1  00                 	db	0
   406  0000                     
   407                           ; #config settings
   408  000FE2  00                 	db	0	; dummy byte at the end
   409  0000                     
   410                           	psect	nvBANK0
   411  0000DA                     __pnvBANK0:
   412                           	opt stack 0
   413  0000DA                     _anio_d:
   414                           	opt stack 0
   415  0000DA                     	ds	1
   416  0000DB                     _anio_u:
   417                           	opt stack 0
   418  0000DB                     	ds	1
   419  0000DC                     _dia_semana:
   420                           	opt stack 0
   421  0000DC                     	ds	1
   422  0000DD                     _fecha_d:
   423                           	opt stack 0
   424  0000DD                     	ds	1
   425  0000DE                     _fecha_u:
   426                           	opt stack 0
   427  0000DE                     	ds	1
   428  0000DF                     _hora_d:
   429                           	opt stack 0
   430  0000DF                     	ds	1
   431  0000E0                     _hora_u:
   432                           	opt stack 0
   433  0000E0                     	ds	1
   434  0000E1                     _mes_d:
   435                           	opt stack 0
   436  0000E1                     	ds	1
   437  0000E2                     _mes_u:
   438                           	opt stack 0
   439  0000E2                     	ds	1
   440  0000E3                     _minuto_d:
   441                           	opt stack 0
   442  0000E3                     	ds	1
   443  0000E4                     _minuto_u:
   444                           	opt stack 0
   445  0000E4                     	ds	1
   446  0000E5                     _segundo_d:
   447                           	opt stack 0
   448  0000E5                     	ds	1
   449  0000E6                     _segundo_u:
   450                           	opt stack 0
   451  0000E6                     	ds	1
   452  0000                     _ANCON0	set	3912
   453  0000                     _ANCON1	set	3913
   454  0000                     _RTCCFG	set	3903
   455  0000                     _RTCCFGbits	set	3903
   456  0000                     _ADCON0	set	4034
   457  0000                     _ADCON1	set	4033
   458  0000                     _ALRMCFGbits	set	3985
   459  0000                     _EECON2	set	4007
   460  0000                     _INTCONbits	set	4082
   461  0000                     _LATAbits	set	3977
   462  0000                     _LATBbits	set	3978
   463  0000                     _OSCCONbits	set	4051
   464  0000                     _OSCTUNEbits	set	3995
   465  0000                     _PIE3bits	set	4003
   466  0000                     _PORTAbits	set	3968
   467  0000                     _PORTCbits	set	3970
   468  0000                     _RTCVALH	set	3993
   469  0000                     _RTCVALL	set	3992
   470  0000                     _T1CONbits	set	4045
   471  0000                     _TRISA	set	3986
   472  0000                     _TRISB	set	3987
   473  0000                     _TRISBbits	set	3987
   474  0000                     _TRISC	set	3988
   475                           
   476                           	psect	cinit
   477  003798                     __pcinit:
   478                           	opt stack 0
   479  003798                     start_initialization:
   480                           	opt stack 0
   481  003798                     __initialization:
   482                           	opt stack 0
   483                           
   484                           ; Clear objects allocated to BITBANK0 (1 bytes)
   485  003798  0100               	movlb	0
   486  00379A  6BE7               	clrf	(__pbitbssBANK0/(0+8))& (0+255),b
   487                           
   488                           ; Clear objects allocated to BANK0 (84 bytes)
   489  00379C  EE00  F060         	lfsr	0,__pbssBANK0
   490  0037A0  0E54               	movlw	84
   491  0037A2                     clear_0:
   492  0037A2  6AEE               	clrf	postinc0,c
   493  0037A4  06E8               	decf	wreg,f,c
   494  0037A6  E1FD               	bnz	clear_0
   495                           
   496                           ; Initialize objects allocated to BANK0 (16 bytes)
   497                           ; load TBLPTR registers with __pidataBANK0
   498  0037A8  0E5A               	movlw	low __pidataBANK0
   499  0037AA  6EF6               	movwf	tblptrl,c
   500  0037AC  0E3A               	movlw	high __pidataBANK0
   501  0037AE  6EF7               	movwf	tblptrh,c
   502  0037B0  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   503  0037B2  6EF8               	movwf	tblptru,c
   504  0037B4  EE00  F0CA         	lfsr	0,__pdataBANK0
   505  0037B8  EE10 F010          	lfsr	1,16
   506  0037BC                     copy_data0:
   507  0037BC  0009               	tblrd		*+
   508  0037BE  CFF5 FFEE          	movff	tablat,postinc0
   509  0037C2  50E5               	movf	postdec1,w,c
   510  0037C4  50E1               	movf	fsr1l,w,c
   511  0037C6  E1FA               	bnz	copy_data0
   512  0037C8                     end_of_initialization:
   513                           	opt stack 0
   514  0037C8                     __end_of__initialization:
   515                           	opt stack 0
   516  0037C8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   517  0037CA  6EF8               	movwf	tblptru,c
   518  0037CC  0100               	movlb	0
   519  0037CE  EF02  F01C         	goto	_main	;jump to C main() function
   520                           tblptru	equ	0xFF8
   521                           tblptrh	equ	0xFF7
   522                           tblptrl	equ	0xFF6
   523                           tablat	equ	0xFF5
   524                           postinc0	equ	0xFEE
   525                           wreg	equ	0xFE8
   526                           postdec1	equ	0xFE5
   527                           fsr1l	equ	0xFE1
   528                           
   529                           	psect	bitbssBANK0
   530  000738                     __pbitbssBANK0:
   531                           	opt stack 0
   532  000738                     _flag:
   533                           	opt stack 0
   534  000738                     	ds	1
   535                           tblptru	equ	0xFF8
   536                           tblptrh	equ	0xFF7
   537                           tblptrl	equ	0xFF6
   538                           tablat	equ	0xFF5
   539                           postinc0	equ	0xFEE
   540                           wreg	equ	0xFE8
   541                           postdec1	equ	0xFE5
   542                           fsr1l	equ	0xFE1
   543                           
   544                           	psect	bssBANK0
   545  000060                     __pbssBANK0:
   546                           	opt stack 0
   547  000060                     _RtccAlrmTimeDate:
   548                           	opt stack 0
   549  000060                     	ds	8
   550  000068                     _RtccTimeDate:
   551                           	opt stack 0
   552  000068                     	ds	8
   553  000070                     _Rtcc_read_TimeDate:
   554                           	opt stack 0
   555  000070                     	ds	8
   556  000078                     _RtccTimeVal:
   557                           	opt stack 0
   558  000078                     	ds	4
   559  00007C                     _a:
   560                           	opt stack 0
   561  00007C                     	ds	2
   562  00007E                     _b:
   563                           	opt stack 0
   564  00007E                     	ds	2
   565  000080                     _c:
   566                           	opt stack 0
   567  000080                     	ds	2
   568  000082                     _diaDisparo:
   569                           	opt stack 0
   570  000082                     	ds	2
   571  000084                     _errno:
   572                           	opt stack 0
   573  000084                     	ds	2
   574  000086                     _horaDisparo:
   575                           	opt stack 0
   576  000086                     	ds	2
   577  000088                     _i:
   578                           	opt stack 0
   579  000088                     	ds	2
   580  00008A                     _j:
   581                           	opt stack 0
   582  00008A                     	ds	2
   583  00008C                     _k:
   584                           	opt stack 0
   585  00008C                     	ds	2
   586  00008E                     _mesDisparo:
   587                           	opt stack 0
   588  00008E                     	ds	2
   589  000090                     _minDisparo:
   590                           	opt stack 0
   591  000090                     	ds	2
   592  000092                     _newpass:
   593                           	opt stack 0
   594  000092                     	ds	2
   595  000094                     _segundo:
   596                           	opt stack 0
   597  000094                     	ds	2
   598  000096                     _key:
   599                           	opt stack 0
   600  000096                     	ds	1
   601  000097                     _sensorDisparado:
   602                           	opt stack 0
   603  000097                     	ds	1
   604  000098                     _buffer2:
   605                           	opt stack 0
   606  000098                     	ds	20
   607  0000AC                     _RtccDate:
   608                           	opt stack 0
   609  0000AC                     	ds	4
   610  0000B0                     _RtccTime:
   611                           	opt stack 0
   612  0000B0                     	ds	4
   613                           tblptru	equ	0xFF8
   614                           tblptrh	equ	0xFF7
   615                           tblptrl	equ	0xFF6
   616                           tablat	equ	0xFF5
   617                           postinc0	equ	0xFEE
   618                           wreg	equ	0xFE8
   619                           postdec1	equ	0xFE5
   620                           fsr1l	equ	0xFE1
   621                           
   622                           	psect	dataBANK0
   623  0000CA                     __pdataBANK0:
   624                           	opt stack 0
   625  0000CA                     _anio:
   626                           	opt stack 0
   627  0000CA                     	ds	2
   628  0000CC                     _dia:
   629                           	opt stack 0
   630  0000CC                     	ds	2
   631  0000CE                     _diasem:
   632                           	opt stack 0
   633  0000CE                     	ds	2
   634  0000D0                     _hora:
   635                           	opt stack 0
   636  0000D0                     	ds	2
   637  0000D2                     _mes:
   638                           	opt stack 0
   639  0000D2                     	ds	2
   640  0000D4                     _minuto:
   641                           	opt stack 0
   642  0000D4                     	ds	2
   643  0000D6                     _password:
   644                           	opt stack 0
   645  0000D6                     	ds	2
   646  0000D8                     _menu:
   647                           	opt stack 0
   648  0000D8                     	ds	1
   649  0000D9                     _state_alarm:
   650                           	opt stack 0
   651  0000D9                     	ds	1
   652                           tblptru	equ	0xFF8
   653                           tblptrh	equ	0xFF7
   654                           tblptrl	equ	0xFF6
   655                           tablat	equ	0xFF5
   656                           postinc0	equ	0xFEE
   657                           wreg	equ	0xFE8
   658                           postdec1	equ	0xFE5
   659                           fsr1l	equ	0xFE1
   660                           
   661                           	psect	cstackBANK0
   662  0000B4                     __pcstackBANK0:
   663                           	opt stack 0
   664  0000B4                     _pow$3118:
   665                           	opt stack 0
   666                           
   667                           ; 3 bytes @ 0x0
   668  0000B4                     	ds	3
   669  0000B7                     _pow$3119:
   670                           	opt stack 0
   671                           
   672                           ; 3 bytes @ 0x3
   673  0000B7                     	ds	3
   674  0000BA                     pow@sign:
   675                           	opt stack 0
   676                           
   677                           ; 1 bytes @ 0x6
   678  0000BA                     	ds	1
   679  0000BB                     pow@yi:
   680                           	opt stack 0
   681                           
   682                           ; 4 bytes @ 0x7
   683  0000BB                     	ds	4
   684  0000BF                     _obtain_pass$3112:
   685                           	opt stack 0
   686  0000BF                     _input_old_pass$3114:
   687                           	opt stack 0
   688  0000BF                     _input_new_pass$3116:
   689                           	opt stack 0
   690                           
   691                           ; 3 bytes @ 0xB
   692  0000BF                     	ds	3
   693  0000C2                     _obtain_pass$3113:
   694                           	opt stack 0
   695  0000C2                     _input_old_pass$3115:
   696                           	opt stack 0
   697  0000C2                     _input_new_pass$3117:
   698                           	opt stack 0
   699                           
   700                           ; 3 bytes @ 0xE
   701  0000C2                     	ds	3
   702  0000C5                     input_new_pass@input:
   703                           	opt stack 0
   704  0000C5                     input_password@pass:
   705                           	opt stack 0
   706  0000C5                     input_old_pass@pass:
   707                           	opt stack 0
   708                           
   709                           ; 2 bytes @ 0x11
   710  0000C5                     	ds	1
   711  0000C6                     input_new_pass@digit:
   712                           	opt stack 0
   713                           
   714                           ; 2 bytes @ 0x12
   715  0000C6                     	ds	1
   716  0000C7                     input_password@input:
   717                           	opt stack 0
   718  0000C7                     input_old_pass@input:
   719                           	opt stack 0
   720                           
   721                           ; 1 bytes @ 0x13
   722  0000C7                     	ds	1
   723  0000C8                     input_password@digit:
   724                           	opt stack 0
   725  0000C8                     input_old_pass@digit:
   726                           	opt stack 0
   727                           
   728                           ; 2 bytes @ 0x14
   729  0000C8                     	ds	2
   730                           tblptru	equ	0xFF8
   731                           tblptrh	equ	0xFF7
   732                           tblptrl	equ	0xFF6
   733                           tablat	equ	0xFF5
   734                           postinc0	equ	0xFEE
   735                           wreg	equ	0xFE8
   736                           postdec1	equ	0xFE5
   737                           fsr1l	equ	0xFE1
   738                           
   739                           	psect	cstackCOMRAM
   740  000001                     __pcstackCOMRAM:
   741                           	opt stack 0
   742  000001                     ??_isdigit:
   743  000001                     ??_lcd_send_nibble:
   744  000001                     ?___wmul:
   745                           	opt stack 0
   746  000001                     ?___awdiv:
   747                           	opt stack 0
   748  000001                     ?___lwdiv:
   749                           	opt stack 0
   750  000001                     ?___ftpack:
   751                           	opt stack 0
   752  000001                     ?_frexp:
   753                           	opt stack 0
   754  000001                     ?___ftneg:
   755                           	opt stack 0
   756  000001                     _is_not_letter$1340:
   757                           	opt stack 0
   758  000001                     Delay100TCYx@unit:
   759                           	opt stack 0
   760  000001                     Delay1KTCYx@unit:
   761                           	opt stack 0
   762  000001                     evalueChanceOfRaw@x:
   763                           	opt stack 0
   764  000001                     not_fill_pass@digit:
   765                           	opt stack 0
   766  000001                     checkPass@pass:
   767                           	opt stack 0
   768  000001                     changePass@pass:
   769                           	opt stack 0
   770  000001                     RtccReadDate@pDt:
   771                           	opt stack 0
   772  000001                     RtccReadTime@pTm:
   773                           	opt stack 0
   774  000001                     RtccWriteDate@pDt:
   775                           	opt stack 0
   776  000001                     RtccWriteTime@pTm:
   777                           	opt stack 0
   778  000001                     ___wmul@multiplier:
   779                           	opt stack 0
   780  000001                     ___awdiv@dividend:
   781                           	opt stack 0
   782  000001                     ___lwdiv@dividend:
   783                           	opt stack 0
   784  000001                     ___ftpack@arg:
   785                           	opt stack 0
   786  000001                     ___ftge@ff1:
   787                           	opt stack 0
   788  000001                     ___ftneg@f1:
   789                           	opt stack 0
   790  000001                     frexp@value:
   791                           	opt stack 0
   792                           
   793                           ; 3 bytes @ 0x0
   794  000001                     	ds	1
   795  000002                     lcd_send_nibble@nibble:
   796                           	opt stack 0
   797  000002                     is_not_letter@input:
   798                           	opt stack 0
   799  000002                     _isdigit$2721:
   800                           	opt stack 0
   801                           
   802                           ; 1 bytes @ 0x1
   803  000002                     	ds	1
   804  000003                     lcd_send_byte@n:
   805                           	opt stack 0
   806  000003                     RtccWriteDate@di:
   807                           	opt stack 0
   808  000003                     RtccWriteTime@di:
   809                           	opt stack 0
   810  000003                     isdigit@c:
   811                           	opt stack 0
   812  000003                     evalueChanceOfRaw@y:
   813                           	opt stack 0
   814  000003                     review_code@digit:
   815                           	opt stack 0
   816  000003                     ___wmul@multiplicand:
   817                           	opt stack 0
   818  000003                     ___awdiv@divisor:
   819                           	opt stack 0
   820  000003                     ___lwdiv@divisor:
   821                           	opt stack 0
   822  000003                     RtccReadDate@rTD1:
   823                           	opt stack 0
   824  000003                     RtccReadTime@rTD1:
   825                           	opt stack 0
   826                           
   827                           ; 8 bytes @ 0x2
   828  000003                     	ds	1
   829  000004                     lcd_send_byte@address:
   830                           	opt stack 0
   831  000004                     ___ftpack@exp:
   832                           	opt stack 0
   833  000004                     frexp@eptr:
   834                           	opt stack 0
   835  000004                     ___ftge@ff2:
   836                           	opt stack 0
   837                           
   838                           ; 3 bytes @ 0x3
   839  000004                     	ds	1
   840  000005                     lcd_init@i:
   841                           	opt stack 0
   842  000005                     lcd_gotoxy@y:
   843                           	opt stack 0
   844  000005                     lcd_comand@d:
   845                           	opt stack 0
   846  000005                     lcd_setcursor_vb@blink:
   847                           	opt stack 0
   848  000005                     RtccWriteDate@wasOn:
   849                           	opt stack 0
   850  000005                     RtccWriteTime@wasOn:
   851                           	opt stack 0
   852  000005                     ___awdiv@counter:
   853                           	opt stack 0
   854  000005                     ___ftpack@sign:
   855                           	opt stack 0
   856  000005                     review_code@pass:
   857                           	opt stack 0
   858  000005                     ___wmul@product:
   859                           	opt stack 0
   860  000005                     ___lwdiv@quotient:
   861                           	opt stack 0
   862                           
   863                           ; 2 bytes @ 0x4
   864  000005                     	ds	1
   865  000006                     ??___ftpack:
   866  000006                     ??_frexp:
   867  000006                     ??_clear:
   868  000006                     lcd_gotoxy@x:
   869                           	opt stack 0
   870  000006                     lcd_setcursor_vb@visible:
   871                           	opt stack 0
   872  000006                     RtccWriteDate@wasAlrm:
   873                           	opt stack 0
   874  000006                     RtccWriteTime@wasAlrm:
   875                           	opt stack 0
   876  000006                     ___awdiv@sign:
   877                           	opt stack 0
   878                           
   879                           ; 1 bytes @ 0x5
   880  000006                     	ds	1
   881  000007                     ??___ftge:
   882  000007                     lcd_gotoxy@address:
   883                           	opt stack 0
   884  000007                     RtccWriteTime@wasWrEn:
   885                           	opt stack 0
   886  000007                     ___lwdiv@counter:
   887                           	opt stack 0
   888  000007                     RtccWriteDate@tempYear:
   889                           	opt stack 0
   890  000007                     ___awdiv@quotient:
   891                           	opt stack 0
   892                           
   893                           ; 2 bytes @ 0x6
   894  000007                     	ds	1
   895  000008                     ?___lwmod:
   896                           	opt stack 0
   897  000008                     lcd_putc@c:
   898                           	opt stack 0
   899  000008                     next_code@digit:
   900                           	opt stack 0
   901  000008                     RtccWriteTime@tempMinSec:
   902                           	opt stack 0
   903  000008                     ___lwmod@dividend:
   904                           	opt stack 0
   905                           
   906                           ; 2 bytes @ 0x7
   907  000008                     	ds	1
   908  000009                     ?___ftdiv:
   909                           	opt stack 0
   910  000009                     ?___awtoft:
   911                           	opt stack 0
   912  000009                     ?___lbtoft:
   913                           	opt stack 0
   914  000009                     ?___lltoft:
   915                           	opt stack 0
   916  000009                     RtccWriteDate@wasWrEn:
   917                           	opt stack 0
   918  000009                     lcd_putrs@ptr:
   919                           	opt stack 0
   920  000009                     __delay_s@millis:
   921                           	opt stack 0
   922  000009                     ___awtoft@c:
   923                           	opt stack 0
   924  000009                     ___ftdiv@f1:
   925                           	opt stack 0
   926  000009                     ___lltoft@c:
   927                           	opt stack 0
   928                           
   929                           ; 4 bytes @ 0x8
   930  000009                     	ds	1
   931  00000A                     next_code@input:
   932                           	opt stack 0
   933  00000A                     RtccWriteDate@tempDayMonth:
   934                           	opt stack 0
   935  00000A                     RtccWriteTime@tempHourWDay:
   936                           	opt stack 0
   937  00000A                     ___lwmod@divisor:
   938                           	opt stack 0
   939                           
   940                           ; 2 bytes @ 0x9
   941  00000A                     	ds	1
   942  00000B                     ??__delay_s:
   943  00000B                     set_desactive_vision@digit:
   944                           	opt stack 0
   945  00000B                     RtccReadDate@rTD0:
   946                           	opt stack 0
   947  00000B                     RtccReadTime@rTD0:
   948                           	opt stack 0
   949                           
   950                           ; 8 bytes @ 0xA
   951  00000B                     	ds	1
   952  00000C                     ??_next_code:
   953  00000C                     ___awtoft@sign:
   954                           	opt stack 0
   955  00000C                     ___lbtoft@c:
   956                           	opt stack 0
   957  00000C                     ___lwmod@counter:
   958                           	opt stack 0
   959  00000C                     __delay_s@it:
   960                           	opt stack 0
   961  00000C                     RtccWriteDate@tempHourWDay:
   962                           	opt stack 0
   963  00000C                     ___ftdiv@f2:
   964                           	opt stack 0
   965                           
   966                           ; 3 bytes @ 0xB
   967  00000C                     	ds	1
   968  00000D                     ??___lltoft:
   969  00000D                     ?_sprintf:
   970                           	opt stack 0
   971  00000D                     ?___ftmul:
   972                           	opt stack 0
   973  00000D                     sprintf@sp:
   974                           	opt stack 0
   975  00000D                     ___ftmul@f1:
   976                           	opt stack 0
   977                           
   978                           ; 3 bytes @ 0xC
   979  00000D                     	ds	1
   980  00000E                     ??_setClock:
   981  00000E                     __delay_s@index:
   982                           	opt stack 0
   983                           
   984                           ; 2 bytes @ 0xD
   985  00000E                     	ds	1
   986  00000F                     ??___ftdiv:
   987  00000F                     setClock@x:
   988                           	opt stack 0
   989  00000F                     sprintf@f:
   990                           	opt stack 0
   991                           
   992                           ; 2 bytes @ 0xE
   993  00000F                     	ds	1
   994  000010                     ___ftmul@f2:
   995                           	opt stack 0
   996                           
   997                           ; 3 bytes @ 0xF
   998  000010                     	ds	1
   999  000011                     ___lltoft@exp:
  1000                           	opt stack 0
  1001                           
  1002                           ; 1 bytes @ 0x10
  1003  000011                     	ds	1
  1004  000012                     ___ftdiv@cntr:
  1005                           	opt stack 0
  1006                           
  1007                           ; 1 bytes @ 0x11
  1008  000012                     	ds	1
  1009  000013                     ??___ftmul:
  1010  000013                     dispararSensor@sensor:
  1011                           	opt stack 0
  1012  000013                     ___ftdiv@f3:
  1013                           	opt stack 0
  1014                           
  1015                           ; 3 bytes @ 0x12
  1016  000013                     	ds	2
  1017  000015                     
  1018                           ; 0 bytes @ 0x14
  1019  000015                     	ds	1
  1020  000016                     ___ftdiv@exp:
  1021                           	opt stack 0
  1022  000016                     ___ftmul@exp:
  1023                           	opt stack 0
  1024                           
  1025                           ; 1 bytes @ 0x15
  1026  000016                     	ds	1
  1027  000017                     ??_sprintf:
  1028  000017                     ___ftdiv@sign:
  1029                           	opt stack 0
  1030  000017                     ___ftmul@f3_as_product:
  1031                           	opt stack 0
  1032                           
  1033                           ; 3 bytes @ 0x16
  1034  000017                     	ds	3
  1035  00001A                     ___ftmul@cntr:
  1036                           	opt stack 0
  1037                           
  1038                           ; 1 bytes @ 0x19
  1039  00001A                     	ds	1
  1040  00001B                     ___ftmul@sign:
  1041                           	opt stack 0
  1042  00001B                     sprintf@ap:
  1043                           	opt stack 0
  1044                           
  1045                           ; 2 bytes @ 0x1A
  1046  00001B                     	ds	1
  1047  00001C                     ?___ftadd:
  1048                           	opt stack 0
  1049  00001C                     ___ftadd@f1:
  1050                           	opt stack 0
  1051                           
  1052                           ; 3 bytes @ 0x1B
  1053  00001C                     	ds	1
  1054  00001D                     sprintf@flag:
  1055                           	opt stack 0
  1056                           
  1057                           ; 1 bytes @ 0x1C
  1058  00001D                     	ds	1
  1059  00001E                     sprintf@val:
  1060                           	opt stack 0
  1061                           
  1062                           ; 2 bytes @ 0x1D
  1063  00001E                     	ds	1
  1064  00001F                     ___ftadd@f2:
  1065                           	opt stack 0
  1066                           
  1067                           ; 3 bytes @ 0x1E
  1068  00001F                     	ds	1
  1069  000020                     sprintf@prec:
  1070                           	opt stack 0
  1071                           
  1072                           ; 1 bytes @ 0x1F
  1073  000020                     	ds	1
  1074  000021                     sprintf@width:
  1075                           	opt stack 0
  1076                           
  1077                           ; 2 bytes @ 0x20
  1078  000021                     	ds	1
  1079  000022                     ??___ftadd:
  1080                           
  1081                           ; 0 bytes @ 0x21
  1082  000022                     	ds	1
  1083  000023                     sprintf@c:
  1084                           	opt stack 0
  1085                           
  1086                           ; 1 bytes @ 0x22
  1087  000023                     	ds	1
  1088  000024                     ??_read_keyboard:
  1089                           
  1090                           ; 0 bytes @ 0x23
  1091  000024                     	ds	1
  1092  000025                     ??_configurar_reloj:
  1093  000025                     twinkle@input:
  1094                           	opt stack 0
  1095  000025                     ver_info@input:
  1096                           	opt stack 0
  1097  000025                     ___ftadd@sign:
  1098                           	opt stack 0
  1099                           
  1100                           ; 1 bytes @ 0x24
  1101  000025                     	ds	1
  1102  000026                     configurar_reloj@input:
  1103                           	opt stack 0
  1104  000026                     ___ftadd@exp2:
  1105                           	opt stack 0
  1106                           
  1107                           ; 1 bytes @ 0x25
  1108  000026                     	ds	1
  1109  000027                     configurar_reloj@y:
  1110                           	opt stack 0
  1111  000027                     ___ftadd@exp1:
  1112                           	opt stack 0
  1113                           
  1114                           ; 1 bytes @ 0x26
  1115  000027                     	ds	1
  1116  000028                     ?___ftsub:
  1117                           	opt stack 0
  1118  000028                     ?_eval_poly:
  1119                           	opt stack 0
  1120  000028                     ?___fttol:
  1121                           	opt stack 0
  1122  000028                     configurar_reloj@x:
  1123                           	opt stack 0
  1124  000028                     ___ftsub@f1:
  1125                           	opt stack 0
  1126  000028                     ___fttol@f1:
  1127                           	opt stack 0
  1128  000028                     eval_poly@x:
  1129                           	opt stack 0
  1130                           
  1131                           ; 3 bytes @ 0x27
  1132  000028                     	ds	3
  1133  00002B                     eval_poly@d:
  1134                           	opt stack 0
  1135  00002B                     ___ftsub@f2:
  1136                           	opt stack 0
  1137                           
  1138                           ; 3 bytes @ 0x2A
  1139  00002B                     	ds	1
  1140  00002C                     ??___fttol:
  1141                           
  1142                           ; 0 bytes @ 0x2B
  1143  00002C                     	ds	1
  1144  00002D                     eval_poly@n:
  1145                           	opt stack 0
  1146                           
  1147                           ; 2 bytes @ 0x2C
  1148  00002D                     	ds	1
  1149  00002E                     
  1150                           ; 0 bytes @ 0x2D
  1151  00002E                     	ds	1
  1152  00002F                     ??_eval_poly:
  1153                           
  1154                           ; 0 bytes @ 0x2E
  1155  00002F                     	ds	2
  1156  000031                     ___fttol@sign1:
  1157                           	opt stack 0
  1158  000031                     eval_poly@res:
  1159                           	opt stack 0
  1160                           
  1161                           ; 3 bytes @ 0x30
  1162  000031                     	ds	1
  1163  000032                     ___fttol@lval:
  1164                           	opt stack 0
  1165                           
  1166                           ; 4 bytes @ 0x31
  1167  000032                     	ds	2
  1168  000034                     ?_log:
  1169                           	opt stack 0
  1170  000034                     ?_ldexp:
  1171                           	opt stack 0
  1172  000034                     ldexp@value:
  1173                           	opt stack 0
  1174  000034                     log@x:
  1175                           	opt stack 0
  1176                           
  1177                           ; 3 bytes @ 0x33
  1178  000034                     	ds	2
  1179  000036                     ___fttol@exp1:
  1180                           	opt stack 0
  1181                           
  1182                           ; 1 bytes @ 0x35
  1183  000036                     	ds	1
  1184  000037                     ?___altoft:
  1185                           	opt stack 0
  1186  000037                     ldexp@newexp:
  1187                           	opt stack 0
  1188  000037                     log@exponent:
  1189                           	opt stack 0
  1190  000037                     ___altoft@c:
  1191                           	opt stack 0
  1192                           
  1193                           ; 4 bytes @ 0x36
  1194  000037                     	ds	2
  1195  000039                     ??_ldexp:
  1196                           
  1197                           ; 0 bytes @ 0x38
  1198  000039                     	ds	2
  1199  00003B                     ??___altoft:
  1200                           
  1201                           ; 0 bytes @ 0x3A
  1202  00003B                     	ds	4
  1203  00003F                     ___altoft@exp:
  1204                           	opt stack 0
  1205                           
  1206                           ; 1 bytes @ 0x3E
  1207  00003F                     	ds	1
  1208  000040                     ___altoft@sign:
  1209                           	opt stack 0
  1210                           
  1211                           ; 1 bytes @ 0x3F
  1212  000040                     	ds	1
  1213  000041                     ?_floor:
  1214                           	opt stack 0
  1215  000041                     floor@x:
  1216                           	opt stack 0
  1217                           
  1218                           ; 3 bytes @ 0x40
  1219  000041                     	ds	3
  1220  000044                     floor@i:
  1221                           	opt stack 0
  1222                           
  1223                           ; 3 bytes @ 0x43
  1224  000044                     	ds	3
  1225  000047                     floor@expon:
  1226                           	opt stack 0
  1227                           
  1228                           ; 2 bytes @ 0x46
  1229  000047                     	ds	2
  1230  000049                     ?_exp:
  1231                           	opt stack 0
  1232  000049                     exp@x:
  1233                           	opt stack 0
  1234                           
  1235                           ; 3 bytes @ 0x48
  1236  000049                     	ds	3
  1237  00004C                     _exp$3120:
  1238                           	opt stack 0
  1239                           
  1240                           ; 3 bytes @ 0x4B
  1241  00004C                     	ds	3
  1242  00004F                     exp@exponent:
  1243                           	opt stack 0
  1244                           
  1245                           ; 2 bytes @ 0x4E
  1246  00004F                     	ds	2
  1247  000051                     exp@sign:
  1248                           	opt stack 0
  1249                           
  1250                           ; 1 bytes @ 0x50
  1251  000051                     	ds	1
  1252  000052                     ?_pow:
  1253                           	opt stack 0
  1254  000052                     pow@x:
  1255                           	opt stack 0
  1256                           
  1257                           ; 3 bytes @ 0x51
  1258  000052                     	ds	3
  1259  000055                     pow@y:
  1260                           	opt stack 0
  1261                           
  1262                           ; 3 bytes @ 0x54
  1263  000055                     	ds	3
  1264  000058                     ??_input_old_pass:
  1265  000058                     ??_input_new_pass:
  1266  000058                     ?_obtain_pass:
  1267                           	opt stack 0
  1268  000058                     obtain_pass@pass:
  1269                           	opt stack 0
  1270                           
  1271                           ; 2 bytes @ 0x57
  1272  000058                     	ds	2
  1273  00005A                     obtain_pass@input:
  1274                           	opt stack 0
  1275  00005A                     ver_opcion_cambio@old_correct:
  1276                           	opt stack 0
  1277                           
  1278                           ; 1 bytes @ 0x59
  1279  00005A                     	ds	1
  1280  00005B                     ver_opcion_cambio@input:
  1281                           	opt stack 0
  1282  00005B                     obtain_pass@digit:
  1283                           	opt stack 0
  1284                           
  1285                           ; 2 bytes @ 0x5A
  1286  00005B                     	ds	1
  1287  00005C                     
  1288                           ; 0 bytes @ 0x5B
  1289  00005C                     	ds	1
  1290  00005D                     ??_obtain_pass:
  1291                           
  1292                           ; 0 bytes @ 0x5C
  1293  00005D                     	ds	2
  1294  00005F                     ??_main:
  1295  00005F                     
  1296                           ; 0 bytes @ 0x5E
  1297  00005F                     	ds	1
  1298                           tblptru	equ	0xFF8
  1299                           tblptrh	equ	0xFF7
  1300                           tblptrl	equ	0xFF6
  1301                           tablat	equ	0xFF5
  1302                           postinc0	equ	0xFEE
  1303                           wreg	equ	0xFE8
  1304                           postdec1	equ	0xFE5
  1305                           fsr1l	equ	0xFE1
  1306                           
  1307 ;;
  1308 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1309 ;;
  1310 ;; *************** function _main *****************
  1311 ;; Defined at:
  1312 ;;		line 88 in file "main.c"
  1313 ;; Parameters:    Size  Location     Type
  1314 ;;		None
  1315 ;; Auto vars:     Size  Location     Type
  1316 ;;		None
  1317 ;; Return value:  Size  Location     Type
  1318 ;;                  2  130[None  ] int 
  1319 ;; Registers used:
  1320 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1321 ;; Tracked objects:
  1322 ;;		On entry : 0/0
  1323 ;;		On exit  : 0/0
  1324 ;;		Unchanged: 0/0
  1325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1328 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1329 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1330 ;;Total ram usage:        1 bytes
  1331 ;; Hardware stack levels required when called:    9
  1332 ;; This function calls:
  1333 ;;		_Read_RTC
  1334 ;;		_Setup
  1335 ;;		_caratula
  1336 ;;		_select_menu
  1337 ;;		_set_vision
  1338 ;; This function is called by:
  1339 ;;		Startup code after reset
  1340 ;; This function uses a non-reentrant model
  1341 ;;
  1342                           
  1343                           	psect	text0
  1344  003804                     __ptext0:
  1345                           	opt stack 0
  1346  003804                     _main:
  1347                           	opt stack 22
  1348                           
  1349                           ;main.c: 89: Setup();
  1350                           
  1351                           ; BSR set to: 15
  1352                           ;incstack = 0
  1353  003804  EC2B  F01B         	call	_Setup	;wreg free
  1354                           
  1355                           ;main.c: 90: caratula();
  1356  003808  EC45  F01D         	call	_caratula	;wreg free
  1357  00380C  D000               	goto	l5091
  1358  00380E                     l5091:
  1359                           
  1360                           ;main.c: 92: Read_RTC();
  1361  00380E  EC89  F00E         	call	_Read_RTC	;wreg free
  1362                           
  1363                           ;main.c: 93: caratula();
  1364  003812  EC45  F01D         	call	_caratula	;wreg free
  1365                           
  1366                           ;main.c: 95: select_menu();
  1367  003816  ECF6  F015         	call	_select_menu	;wreg free
  1368                           
  1369                           ;main.c: 96: set_vision();
  1370  00381A  EC6E  F019         	call	_set_vision	;wreg free
  1371                           
  1372                           ;main.c: 97: _delay((unsigned long)((98)*(8000000/4000.0)));
  1373  00381E  0EFF               	movlw	255
  1374  003820  6E5F               	movwf	??_main& (0+255),c
  1375  003822  0E8A               	movlw	138
  1376  003824                     u4697:
  1377  003824  2EE8               	decfsz	wreg,f,c
  1378  003826  D7FE               	goto	u4697
  1379  003828  2E5F               	decfsz	??_main& (0+255),f,c
  1380  00382A  D7FC               	goto	u4697
  1381  00382C  D000               	nop2	
  1382  00382E  D7EF               	goto	l5091
  1383                           
  1384                           ;main.c: 98: }
  1385                           ;main.c: 100: return 0;
  1386                           ;	Return value of _main is never used
  1387  003830  EF00  F000         	goto	start
  1388  003834                     __end_of_main:
  1389                           	opt stack 0
  1390                           tblptru	equ	0xFF8
  1391                           tblptrh	equ	0xFF7
  1392                           tblptrl	equ	0xFF6
  1393                           tablat	equ	0xFF5
  1394                           postinc0	equ	0xFEE
  1395                           wreg	equ	0xFE8
  1396                           postdec1	equ	0xFE5
  1397                           fsr1l	equ	0xFE1
  1398                           
  1399 ;; *************** function _set_vision *****************
  1400 ;; Defined at:
  1401 ;;		line 116 in file "lcd_vision.c"
  1402 ;; Parameters:    Size  Location     Type
  1403 ;;		None
  1404 ;; Auto vars:     Size  Location     Type
  1405 ;;		None
  1406 ;; Return value:  Size  Location     Type
  1407 ;;		None               void
  1408 ;; Registers used:
  1409 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1410 ;; Tracked objects:
  1411 ;;		On entry : 0/0
  1412 ;;		On exit  : 0/0
  1413 ;;		Unchanged: 0/0
  1414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1418 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1419 ;;Total ram usage:        0 bytes
  1420 ;; Hardware stack levels used:    1
  1421 ;; Hardware stack levels required when called:    7
  1422 ;; This function calls:
  1423 ;;		_clear
  1424 ;;		_input_password
  1425 ;;		_lcd_gotoxy
  1426 ;;		_lcd_putrs
  1427 ;;		_twinkle
  1428 ;;		_write_Date
  1429 ;; This function is called by:
  1430 ;;		_main
  1431 ;; This function uses a non-reentrant model
  1432 ;;
  1433                           
  1434                           	psect	text1
  1435  0032DC                     __ptext1:
  1436                           	opt stack 0
  1437  0032DC                     _set_vision:
  1438                           	opt stack 23
  1439                           
  1440                           ;lcd_vision.c: 117: clear();
  1441                           
  1442                           ;incstack = 0
  1443  0032DC  ECF3  F01C         	call	_clear	;wreg free
  1444                           
  1445                           ;lcd_vision.c: 118: write_Date();
  1446  0032E0  ECF7  F017         	call	_write_Date	;wreg free
  1447                           
  1448                           ;lcd_vision.c: 119: lcd_gotoxy(1,1);
  1449  0032E4  0E01               	movlw	1
  1450  0032E6  6E05               	movwf	lcd_gotoxy@y,c
  1451  0032E8  0E01               	movlw	1
  1452  0032EA  ECC2  F01C         	call	_lcd_gotoxy
  1453                           
  1454                           ;lcd_vision.c: 121: switch (state_alarm){
  1455  0032EE  D01F               	goto	l5085
  1456  0032F0                     l5067:
  1457  0032F0  0EDF               	movlw	low STR_16
  1458  0032F2  6E09               	movwf	lcd_putrs@ptr,c
  1459  0032F4  0E0F               	movlw	high STR_16
  1460  0032F6  6E0A               	movwf	lcd_putrs@ptr+1,c
  1461  0032F8  EC8F  F01A         	call	_lcd_putrs	;wreg free
  1462                           
  1463                           ;lcd_vision.c: 123: LATBbits.LATB0 = 1;;
  1464  0032FC  808A               	bsf	3978,0,c	;volatile
  1465                           
  1466                           ;lcd_vision.c: 124: input_password();
  1467  0032FE  EC69  F017         	call	_input_password	;wreg free
  1468                           
  1469                           ;lcd_vision.c: 125: break;
  1470  003302  0012               	return	
  1471  003304                     l5073:
  1472  003304  0EDB               	movlw	low STR_17
  1473  003306  6E09               	movwf	lcd_putrs@ptr,c
  1474  003308  0E0F               	movlw	high STR_17
  1475  00330A  6E0A               	movwf	lcd_putrs@ptr+1,c
  1476  00330C  EC8F  F01A         	call	_lcd_putrs	;wreg free
  1477                           
  1478                           ;lcd_vision.c: 128: LATBbits.LATB0 = 0;;
  1479  003310  908A               	bcf	3978,0,c	;volatile
  1480                           
  1481                           ;lcd_vision.c: 129: input_password();
  1482  003312  EC69  F017         	call	_input_password	;wreg free
  1483                           
  1484                           ;lcd_vision.c: 131: break;
  1485  003316  0012               	return	
  1486  003318                     l5079:
  1487  003318  0EC8               	movlw	low STR_18
  1488  00331A  6E09               	movwf	lcd_putrs@ptr,c
  1489  00331C  0E0F               	movlw	high STR_18
  1490  00331E  6E0A               	movwf	lcd_putrs@ptr+1,c
  1491  003320  EC8F  F01A         	call	_lcd_putrs	;wreg free
  1492                           
  1493                           ;lcd_vision.c: 133: twinkle();
  1494  003324  ECA1  F019         	call	_twinkle	;wreg free
  1495                           
  1496                           ;lcd_vision.c: 134: input_password();
  1497  003328  EC69  F017         	call	_input_password	;wreg free
  1498                           
  1499                           ;lcd_vision.c: 135: }
  1500  00332C  0012               	return	
  1501  00332E                     l5085:
  1502  00332E  0100               	movlb	0	; () banked
  1503  003330  51D9               	movf	_state_alarm& (0+255),w,b
  1504                           
  1505                           ; Switch size 1, requested type "space"
  1506                           ; Number of cases is 2, Range of values is 0 to 1
  1507                           ; switch strategies available:
  1508                           ; Name         Instructions Cycles
  1509                           ; simple_byte            7     4 (average)
  1510                           ;	Chosen strategy is simple_byte
  1511  003332  0A00               	xorlw	0	; case 0
  1512  003334  B4D8               	btfsc	status,2,c
  1513  003336  D7DC               	goto	l5067
  1514  003338  0A01               	xorlw	1	; case 1
  1515  00333A  B4D8               	btfsc	status,2,c
  1516  00333C  D7E3               	goto	l5073
  1517  00333E  D7EC               	goto	l5079
  1518                           
  1519                           ; BSR set to: 0
  1520  003340  0012               	return		;funcret
  1521  003342                     __end_of_set_vision:
  1522                           	opt stack 0
  1523                           tblptru	equ	0xFF8
  1524                           tblptrh	equ	0xFF7
  1525                           tblptrl	equ	0xFF6
  1526                           tablat	equ	0xFF5
  1527                           postinc0	equ	0xFEE
  1528                           wreg	equ	0xFE8
  1529                           postdec1	equ	0xFE5
  1530                           fsr1l	equ	0xFE1
  1531                           status	equ	0xFD8
  1532                           
  1533 ;; *************** function _twinkle *****************
  1534 ;; Defined at:
  1535 ;;		line 75 in file "lcd_vision.c"
  1536 ;; Parameters:    Size  Location     Type
  1537 ;;		None
  1538 ;; Auto vars:     Size  Location     Type
  1539 ;;  input           1   36[COMRAM] unsigned char 
  1540 ;; Return value:  Size  Location     Type
  1541 ;;		None               void
  1542 ;; Registers used:
  1543 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1544 ;; Tracked objects:
  1545 ;;		On entry : 0/0
  1546 ;;		On exit  : 0/0
  1547 ;;		Unchanged: 0/0
  1548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1550 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1552 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1553 ;;Total ram usage:        1 bytes
  1554 ;; Hardware stack levels used:    1
  1555 ;; Hardware stack levels required when called:    6
  1556 ;; This function calls:
  1557 ;;		__delay_s
  1558 ;;		_clear_keyboard
  1559 ;;		_lcd_gotoxy
  1560 ;;		_lcd_putrs
  1561 ;;		_read_keyboard
  1562 ;; This function is called by:
  1563 ;;		_set_vision
  1564 ;; This function uses a non-reentrant model
  1565 ;;
  1566                           
  1567                           	psect	text2
  1568  003342                     __ptext2:
  1569                           	opt stack 0
  1570  003342                     _twinkle:
  1571                           	opt stack 23
  1572                           
  1573                           ;lcd_vision.c: 76: char input = 1;
  1574                           
  1575                           ;incstack = 0
  1576  003342  0E01               	movlw	1
  1577  003344  D028               	goto	L1
  1578  003346                     l4895:
  1579                           
  1580                           ;lcd_vision.c: 79: _delay_s(200);
  1581  003346  0E00               	movlw	0
  1582  003348  6E0A               	movwf	__delay_s@millis+1,c
  1583  00334A  0EC8               	movlw	200
  1584  00334C  6E09               	movwf	__delay_s@millis,c
  1585  00334E  EC63  F01A         	call	__delay_s	;wreg free
  1586                           
  1587                           ;lcd_vision.c: 80: lcd_gotoxy(7,2);
  1588  003352  0E02               	movlw	2
  1589  003354  6E05               	movwf	lcd_gotoxy@y,c
  1590  003356  0E07               	movlw	7
  1591  003358  ECC2  F01C         	call	_lcd_gotoxy
  1592                           
  1593                           ;lcd_vision.c: 81: LATBbits.LATB1 = 0;;
  1594  00335C  928A               	bcf	3978,1,c	;volatile
  1595                           
  1596                           ;lcd_vision.c: 82: LATBbits.LATB0 = 1;;
  1597  00335E  808A               	bsf	3978,0,c	;volatile
  1598                           
  1599                           ;lcd_vision.c: 83: lcd_putrs("WARNING!!!");
  1600  003360  0EAA               	movlw	low STR_13
  1601  003362  6E09               	movwf	lcd_putrs@ptr,c
  1602  003364  0E0F               	movlw	high STR_13
  1603  003366  6E0A               	movwf	lcd_putrs@ptr+1,c
  1604  003368  EC8F  F01A         	call	_lcd_putrs	;wreg free
  1605                           
  1606                           ;lcd_vision.c: 84: _delay_s(200);
  1607  00336C  0E00               	movlw	0
  1608  00336E  6E0A               	movwf	__delay_s@millis+1,c
  1609  003370  0EC8               	movlw	200
  1610  003372  6E09               	movwf	__delay_s@millis,c
  1611  003374  EC63  F01A         	call	__delay_s	;wreg free
  1612                           
  1613                           ;lcd_vision.c: 85: LATBbits.LATB0 = 0;;
  1614  003378  908A               	bcf	3978,0,c	;volatile
  1615                           
  1616                           ;lcd_vision.c: 86: LATBbits.LATB1 = 1;;
  1617  00337A  828A               	bsf	3978,1,c	;volatile
  1618                           
  1619                           ;lcd_vision.c: 87: lcd_gotoxy(7,2);
  1620  00337C  0E02               	movlw	2
  1621  00337E  6E05               	movwf	lcd_gotoxy@y,c
  1622  003380  0E07               	movlw	7
  1623  003382  ECC2  F01C         	call	_lcd_gotoxy
  1624                           
  1625                           ;lcd_vision.c: 88: lcd_putrs("          ");
  1626  003386  0E9F               	movlw	low STR_14
  1627  003388  6E09               	movwf	lcd_putrs@ptr,c
  1628  00338A  0E0F               	movlw	high STR_14
  1629  00338C  6E0A               	movwf	lcd_putrs@ptr+1,c
  1630  00338E  EC8F  F01A         	call	_lcd_putrs	;wreg free
  1631                           
  1632                           ;lcd_vision.c: 89: input = read_keyboard();
  1633  003392  ECF2  F007         	call	_read_keyboard	;wreg free
  1634  003396                     L1:
  1635  003396  6E25               	movwf	twinkle@input,c
  1636  003398  D000               	goto	l4915
  1637  00339A                     l4915:
  1638  00339A  0E10               	movlw	16
  1639  00339C  1825               	xorwf	twinkle@input,w,c
  1640  00339E  A4D8               	btfss	status,2,c
  1641  0033A0  D7D2               	goto	l4895
  1642                           
  1643                           ;lcd_vision.c: 90: }
  1644                           ;lcd_vision.c: 91: clear_keyboard();
  1645  0033A2  EC41  F01D         	call	_clear_keyboard	;wreg free
  1646  0033A6  0012               	return		;funcret
  1647  0033A8                     __end_of_twinkle:
  1648                           	opt stack 0
  1649                           tblptru	equ	0xFF8
  1650                           tblptrh	equ	0xFF7
  1651                           tblptrl	equ	0xFF6
  1652                           tablat	equ	0xFF5
  1653                           postinc0	equ	0xFEE
  1654                           wreg	equ	0xFE8
  1655                           postdec1	equ	0xFE5
  1656                           fsr1l	equ	0xFE1
  1657                           status	equ	0xFD8
  1658                           
  1659 ;; *************** function _input_password *****************
  1660 ;; Defined at:
  1661 ;;		line 101 in file "lcd_vision.c"
  1662 ;; Parameters:    Size  Location     Type
  1663 ;;		None
  1664 ;; Auto vars:     Size  Location     Type
  1665 ;;  digit           2   20[BANK0 ] short 
  1666 ;;  pass            2   17[BANK0 ] int 
  1667 ;;  input           1   19[BANK0 ] unsigned char 
  1668 ;; Return value:  Size  Location     Type
  1669 ;;		None               void
  1670 ;; Registers used:
  1671 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1672 ;; Tracked objects:
  1673 ;;		On entry : 0/0
  1674 ;;		On exit  : 0/0
  1675 ;;		Unchanged: 0/0
  1676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1678 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1680 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1681 ;;Total ram usage:        5 bytes
  1682 ;; Hardware stack levels used:    1
  1683 ;; Hardware stack levels required when called:    6
  1684 ;; This function calls:
  1685 ;;		_is_not_letter
  1686 ;;		_not_fill_pass
  1687 ;;		_obtain_pass
  1688 ;;		_read_keyboard
  1689 ;;		_review_code
  1690 ;;		_set_desactive_vision
  1691 ;; This function is called by:
  1692 ;;		_set_vision
  1693 ;; This function uses a non-reentrant model
  1694 ;;
  1695                           
  1696                           	psect	text3
  1697  002ED2                     __ptext3:
  1698                           	opt stack 0
  1699  002ED2                     _input_password:
  1700                           	opt stack 23
  1701                           
  1702                           ;lcd_vision.c: 102: short digit = 12;
  1703                           
  1704                           ;incstack = 0
  1705  002ED2  0E00               	movlw	0
  1706  002ED4  0100               	movlb	0	; () banked
  1707  002ED6  6FC9               	movwf	(input_password@digit+1)& (0+255),b
  1708  002ED8  0E0C               	movlw	12
  1709  002EDA  6FC8               	movwf	input_password@digit& (0+255),b
  1710                           
  1711                           ;lcd_vision.c: 103: int pass = 0;
  1712  002EDC  0E00               	movlw	0
  1713  002EDE  0100               	movlb	0	; () banked
  1714  002EE0  6FC6               	movwf	(input_password@pass+1)& (0+255),b
  1715  002EE2  0E00               	movlw	0
  1716  002EE4  6FC5               	movwf	input_password@pass& (0+255),b
  1717                           
  1718                           ; BSR set to: 0
  1719                           ;lcd_vision.c: 105: set_desactive_vision(digit);
  1720  002EE6  C0C8  F00B         	movff	input_password@digit,set_desactive_vision@digit
  1721  002EEA  C0C9  F00C         	movff	input_password@digit+1,set_desactive_vision@digit+1
  1722  002EEE  EC61  F01C         	call	_set_desactive_vision	;wreg free
  1723                           
  1724                           ;lcd_vision.c: 106: char input = read_keyboard();
  1725  002EF2  ECF2  F007         	call	_read_keyboard	;wreg free
  1726  002EF6  0100               	movlb	0	; () banked
  1727  002EF8  6FC7               	movwf	input_password@input& (0+255),b
  1728                           
  1729                           ;lcd_vision.c: 108: while(is_not_letter(input) && not_fill_pass(digit)){
  1730  002EFA  D01F               	goto	l4931
  1731  002EFC                     l4925:
  1732                           
  1733                           ;lcd_vision.c: 109: pass = obtain_pass(pass,input,&digit);
  1734  002EFC  C0C5  F058         	movff	input_password@pass,obtain_pass@pass
  1735  002F00  C0C6  F059         	movff	input_password@pass+1,obtain_pass@pass+1
  1736  002F04  C0C7  F05A         	movff	input_password@input,obtain_pass@input
  1737  002F08  0EC8               	movlw	low input_password@digit
  1738  002F0A  6E5B               	movwf	obtain_pass@digit,c
  1739  002F0C  0E00               	movlw	high input_password@digit
  1740  002F0E  6E5C               	movwf	obtain_pass@digit+1,c
  1741  002F10  EC84  F012         	call	_obtain_pass	;wreg free
  1742  002F14  C058  F0C5         	movff	?_obtain_pass,input_password@pass
  1743  002F18  C059  F0C6         	movff	?_obtain_pass+1,input_password@pass+1
  1744                           
  1745                           ;lcd_vision.c: 110: input = read_keyboard();
  1746  002F1C  ECF2  F007         	call	_read_keyboard	;wreg free
  1747  002F20  0100               	movlb	0	; () banked
  1748  002F22  6FC7               	movwf	input_password@input& (0+255),b
  1749                           
  1750                           ; BSR set to: 0
  1751                           ;lcd_vision.c: 111: review_code(digit, pass);
  1752  002F24  C0C8  F003         	movff	input_password@digit,review_code@digit
  1753  002F28  C0C9  F004         	movff	input_password@digit+1,review_code@digit+1
  1754  002F2C  C0C5  F005         	movff	input_password@pass,review_code@pass
  1755  002F30  C0C6  F006         	movff	input_password@pass+1,review_code@pass+1
  1756  002F34  EC9E  F01C         	call	_review_code	;wreg free
  1757  002F38  D000               	goto	l4931
  1758  002F3A                     l4931:
  1759  002F3A  0100               	movlb	0	; () banked
  1760  002F3C  51C7               	movf	input_password@input& (0+255),w,b
  1761  002F3E  EC1A  F01C         	call	_is_not_letter
  1762  002F42  0900               	iorlw	0
  1763  002F44  B4D8               	btfsc	status,2,c
  1764  002F46  0012               	return	
  1765  002F48  C0C8  F001         	movff	input_password@digit,not_fill_pass@digit
  1766  002F4C  C0C9  F002         	movff	input_password@digit+1,not_fill_pass@digit+1
  1767  002F50  ECFE  F01C         	call	_not_fill_pass	;wreg free
  1768  002F54  0900               	iorlw	0
  1769  002F56  B4D8               	btfsc	status,2,c
  1770  002F58  0012               	return	
  1771  002F5A  D7D0               	goto	l4925
  1772  002F5C  0012               	return	
  1773  002F5E  0012               	return		;funcret
  1774  002F60                     __end_of_input_password:
  1775                           	opt stack 0
  1776                           tblptru	equ	0xFF8
  1777                           tblptrh	equ	0xFF7
  1778                           tblptrl	equ	0xFF6
  1779                           tablat	equ	0xFF5
  1780                           postinc0	equ	0xFEE
  1781                           wreg	equ	0xFE8
  1782                           postdec1	equ	0xFE5
  1783                           fsr1l	equ	0xFE1
  1784                           status	equ	0xFD8
  1785                           
  1786 ;; *************** function _set_desactive_vision *****************
  1787 ;; Defined at:
  1788 ;;		line 94 in file "lcd_vision.c"
  1789 ;; Parameters:    Size  Location     Type
  1790 ;;  digit           2   10[COMRAM] short 
  1791 ;; Auto vars:     Size  Location     Type
  1792 ;;		None
  1793 ;; Return value:  Size  Location     Type
  1794 ;;		None               void
  1795 ;; Registers used:
  1796 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1797 ;; Tracked objects:
  1798 ;;		On entry : 0/0
  1799 ;;		On exit  : 0/0
  1800 ;;		Unchanged: 0/0
  1801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1802 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1805 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1806 ;;Total ram usage:        2 bytes
  1807 ;; Hardware stack levels used:    1
  1808 ;; Hardware stack levels required when called:    5
  1809 ;; This function calls:
  1810 ;;		_lcd_gotoxy
  1811 ;;		_lcd_putrs
  1812 ;;		_lcd_setcursor_vb
  1813 ;; This function is called by:
  1814 ;;		_input_password
  1815 ;; This function uses a non-reentrant model
  1816 ;;
  1817                           
  1818                           	psect	text4
  1819  0038C2                     __ptext4:
  1820                           	opt stack 0
  1821  0038C2                     _set_desactive_vision:
  1822                           	opt stack 23
  1823                           
  1824                           ;lcd_vision.c: 95: lcd_gotoxy(7,2);
  1825                           
  1826                           ;incstack = 0
  1827  0038C2  0E02               	movlw	2
  1828  0038C4  6E05               	movwf	lcd_gotoxy@y,c
  1829  0038C6  0E07               	movlw	7
  1830  0038C8  ECC2  F01C         	call	_lcd_gotoxy
  1831                           
  1832                           ;lcd_vision.c: 96: lcd_putrs("pass:____");
  1833  0038CC  0E7A               	movlw	low (STR_23+4)
  1834  0038CE  6E09               	movwf	lcd_putrs@ptr,c
  1835  0038D0  0E0F               	movlw	high (STR_23+4)
  1836  0038D2  6E0A               	movwf	lcd_putrs@ptr+1,c
  1837  0038D4  EC8F  F01A         	call	_lcd_putrs	;wreg free
  1838                           
  1839                           ;lcd_vision.c: 97: lcd_gotoxy(digit,2);
  1840  0038D8  0E02               	movlw	2
  1841  0038DA  6E05               	movwf	lcd_gotoxy@y,c
  1842  0038DC  500B               	movf	set_desactive_vision@digit,w,c
  1843  0038DE  ECC2  F01C         	call	_lcd_gotoxy
  1844                           
  1845                           ;lcd_vision.c: 98: lcd_setcursor_vb(1,1);
  1846  0038E2  0E01               	movlw	1
  1847  0038E4  6E05               	movwf	lcd_setcursor_vb@blink,c
  1848  0038E6  0E01               	movlw	1
  1849  0038E8  EC08  F01D         	call	_lcd_setcursor_vb
  1850  0038EC  0012               	return		;funcret
  1851  0038EE                     __end_of_set_desactive_vision:
  1852                           	opt stack 0
  1853                           tblptru	equ	0xFF8
  1854                           tblptrh	equ	0xFF7
  1855                           tblptrl	equ	0xFF6
  1856                           tablat	equ	0xFF5
  1857                           postinc0	equ	0xFEE
  1858                           wreg	equ	0xFE8
  1859                           postdec1	equ	0xFE5
  1860                           fsr1l	equ	0xFE1
  1861                           status	equ	0xFD8
  1862                           
  1863 ;; *************** function _review_code *****************
  1864 ;; Defined at:
  1865 ;;		line 57 in file "lcd_vision.c"
  1866 ;; Parameters:    Size  Location     Type
  1867 ;;  digit           2    2[COMRAM] short 
  1868 ;;  pass            2    4[COMRAM] int 
  1869 ;; Auto vars:     Size  Location     Type
  1870 ;;		None
  1871 ;; Return value:  Size  Location     Type
  1872 ;;		None               void
  1873 ;; Registers used:
  1874 ;;		wreg, status,2, status,0, cstack
  1875 ;; Tracked objects:
  1876 ;;		On entry : 0/0
  1877 ;;		On exit  : 0/0
  1878 ;;		Unchanged: 0/0
  1879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1880 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1883 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1884 ;;Total ram usage:        4 bytes
  1885 ;; Hardware stack levels used:    1
  1886 ;; Hardware stack levels required when called:    1
  1887 ;; This function calls:
  1888 ;;		_change_state
  1889 ;;		_checkPass
  1890 ;; This function is called by:
  1891 ;;		_input_password
  1892 ;; This function uses a non-reentrant model
  1893 ;;
  1894                           
  1895                           	psect	text5
  1896  00393C                     __ptext5:
  1897                           	opt stack 0
  1898  00393C                     _review_code:
  1899                           	opt stack 27
  1900                           
  1901                           ;lcd_vision.c: 58: if(digit == 16){
  1902                           
  1903                           ;incstack = 0
  1904  00393C  0E10               	movlw	16
  1905  00393E  1803               	xorwf	review_code@digit,w,c
  1906  003940  1004               	iorwf	review_code@digit+1,w,c
  1907  003942  A4D8               	btfss	status,2,c
  1908  003944  0012               	return	
  1909                           
  1910                           ;lcd_vision.c: 59: if(checkPass(pass)){
  1911  003946  C005  F001         	movff	review_code@pass,checkPass@pass
  1912  00394A  C006  F002         	movff	review_code@pass+1,checkPass@pass+1
  1913  00394E  ECE5  F01C         	call	_checkPass	;wreg free
  1914  003952  0900               	iorlw	0
  1915  003954  B4D8               	btfsc	status,2,c
  1916  003956  0012               	return	
  1917                           
  1918                           ;lcd_vision.c: 60: change_state();
  1919  003958  EC4A  F01C         	call	_change_state	;wreg free
  1920  00395C  0012               	return	
  1921  00395E  0012               	return		;funcret
  1922  003960                     __end_of_review_code:
  1923                           	opt stack 0
  1924                           tblptru	equ	0xFF8
  1925                           tblptrh	equ	0xFF7
  1926                           tblptrl	equ	0xFF6
  1927                           tablat	equ	0xFF5
  1928                           postinc0	equ	0xFEE
  1929                           wreg	equ	0xFE8
  1930                           postdec1	equ	0xFE5
  1931                           fsr1l	equ	0xFE1
  1932                           status	equ	0xFD8
  1933                           
  1934 ;; *************** function _change_state *****************
  1935 ;; Defined at:
  1936 ;;		line 47 in file "lcd_vision.c"
  1937 ;; Parameters:    Size  Location     Type
  1938 ;;		None
  1939 ;; Auto vars:     Size  Location     Type
  1940 ;;		None
  1941 ;; Return value:  Size  Location     Type
  1942 ;;		None               void
  1943 ;; Registers used:
  1944 ;;		wreg, status,2, status,0
  1945 ;; Tracked objects:
  1946 ;;		On entry : 0/0
  1947 ;;		On exit  : 0/0
  1948 ;;		Unchanged: 0/0
  1949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1953 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1954 ;;Total ram usage:        0 bytes
  1955 ;; Hardware stack levels used:    1
  1956 ;; This function calls:
  1957 ;;		Nothing
  1958 ;; This function is called by:
  1959 ;;		_review_code
  1960 ;; This function uses a non-reentrant model
  1961 ;;
  1962                           
  1963                           	psect	text6
  1964  003894                     __ptext6:
  1965                           	opt stack 0
  1966  003894                     _change_state:
  1967                           	opt stack 27
  1968                           
  1969                           ;lcd_vision.c: 48: switch (state_alarm){
  1970                           
  1971                           ;incstack = 0
  1972  003894  D00C               	goto	l4503
  1973  003896                     l4497:
  1974  003896  0E00               	movlw	0
  1975  003898  0100               	movlb	0	; () banked
  1976  00389A  6FD9               	movwf	_state_alarm& (0+255),b
  1977                           
  1978                           ;lcd_vision.c: 50: break;
  1979  00389C  0012               	return	
  1980  00389E                     l4499:
  1981                           
  1982                           ; BSR set to: 0
  1983  00389E  0E01               	movlw	1
  1984  0038A0  0100               	movlb	0	; () banked
  1985  0038A2  6FD9               	movwf	_state_alarm& (0+255),b
  1986                           
  1987                           ;lcd_vision.c: 52: break;
  1988  0038A4  0012               	return	
  1989  0038A6                     l4501:
  1990                           
  1991                           ; BSR set to: 0
  1992  0038A6  0E01               	movlw	1
  1993  0038A8  0100               	movlb	0	; () banked
  1994  0038AA  6FD9               	movwf	_state_alarm& (0+255),b
  1995                           
  1996                           ;lcd_vision.c: 54: }
  1997  0038AC  0012               	return	
  1998  0038AE                     l4503:
  1999  0038AE  0100               	movlb	0	; () banked
  2000  0038B0  51D9               	movf	_state_alarm& (0+255),w,b
  2001                           
  2002                           ; Switch size 1, requested type "space"
  2003                           ; Number of cases is 2, Range of values is 0 to 1
  2004                           ; switch strategies available:
  2005                           ; Name         Instructions Cycles
  2006                           ; simple_byte            7     4 (average)
  2007                           ;	Chosen strategy is simple_byte
  2008  0038B2  0A00               	xorlw	0	; case 0
  2009  0038B4  B4D8               	btfsc	status,2,c
  2010  0038B6  D7F3               	goto	l4499
  2011  0038B8  0A01               	xorlw	1	; case 1
  2012  0038BA  B4D8               	btfsc	status,2,c
  2013  0038BC  D7EC               	goto	l4497
  2014  0038BE  D7F3               	goto	l4501
  2015                           
  2016                           ; BSR set to: 0
  2017                           
  2018                           ; BSR set to: 0
  2019  0038C0  0012               	return		;funcret
  2020  0038C2                     __end_of_change_state:
  2021                           	opt stack 0
  2022                           tblptru	equ	0xFF8
  2023                           tblptrh	equ	0xFF7
  2024                           tblptrl	equ	0xFF6
  2025                           tablat	equ	0xFF5
  2026                           postinc0	equ	0xFEE
  2027                           wreg	equ	0xFE8
  2028                           postdec1	equ	0xFE5
  2029                           fsr1l	equ	0xFE1
  2030                           status	equ	0xFD8
  2031                           
  2032 ;; *************** function _obtain_pass *****************
  2033 ;; Defined at:
  2034 ;;		line 65 in file "lcd_vision.c"
  2035 ;; Parameters:    Size  Location     Type
  2036 ;;  pass            2   87[COMRAM] int 
  2037 ;;  input           1   89[COMRAM] unsigned char 
  2038 ;;  digit           2   90[COMRAM] PTR short 
  2039 ;;		 -> input_password@digit(2), 
  2040 ;; Auto vars:     Size  Location     Type
  2041 ;;		None
  2042 ;; Return value:  Size  Location     Type
  2043 ;;                  2   87[COMRAM] int 
  2044 ;; Registers used:
  2045 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2046 ;; Tracked objects:
  2047 ;;		On entry : 0/0
  2048 ;;		On exit  : 0/0
  2049 ;;		Unchanged: 0/0
  2050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2051 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2052 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2053 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2054 ;;      Totals:         7       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2055 ;;Total ram usage:       13 bytes
  2056 ;; Hardware stack levels used:    1
  2057 ;; Hardware stack levels required when called:    5
  2058 ;; This function calls:
  2059 ;;		___awtoft
  2060 ;;		___ftadd
  2061 ;;		___ftmul
  2062 ;;		___fttol
  2063 ;;		___lbtoft
  2064 ;;		_next_code
  2065 ;;		_pow
  2066 ;; This function is called by:
  2067 ;;		_input_password
  2068 ;; This function uses a non-reentrant model
  2069 ;;
  2070                           
  2071                           	psect	text7
  2072  002508                     __ptext7:
  2073                           	opt stack 0
  2074  002508                     _obtain_pass:
  2075                           	opt stack 23
  2076                           
  2077                           ;lcd_vision.c: 67: if(0<input && input<10){
  2078                           
  2079                           ; BSR set to: 0
  2080                           ;incstack = 0
  2081  002508  505A               	movf	obtain_pass@input,w,c
  2082  00250A  B4D8               	btfsc	status,2,c
  2083  00250C  D06D               	goto	l4741
  2084  00250E  0E0A               	movlw	10
  2085  002510  605A               	cpfslt	obtain_pass@input,c
  2086  002512  D06A               	goto	l4741
  2087                           
  2088                           ;lcd_vision.c: 68: pass = pass + input * pow(10, 15 - *digit);
  2089  002514  C05B  FFD9         	movff	obtain_pass@digit,fsr2l
  2090  002518  C05C  FFDA         	movff	obtain_pass@digit+1,fsr2h
  2091  00251C  CFDE F05D          	movff	postinc2,??_obtain_pass
  2092  002520  CFDD F05E          	movff	postdec2,??_obtain_pass+1
  2093  002524  1E5D               	comf	??_obtain_pass,f,c
  2094  002526  1E5E               	comf	??_obtain_pass+1,f,c
  2095  002528  4A5D               	infsnz	??_obtain_pass,f,c
  2096  00252A  2A5E               	incf	??_obtain_pass+1,f,c
  2097  00252C  0E0F               	movlw	15
  2098  00252E  245D               	addwf	??_obtain_pass,w,c
  2099  002530  6E09               	movwf	___awtoft@c,c
  2100  002532  0E00               	movlw	0
  2101  002534  205E               	addwfc	??_obtain_pass+1,w,c
  2102  002536  6E0A               	movwf	___awtoft@c+1,c
  2103  002538  ECAE  F01B         	call	___awtoft	;wreg free
  2104  00253C  C009  F0BF         	movff	?___awtoft,_obtain_pass$3112
  2105  002540  C00A  F0C0         	movff	?___awtoft+1,_obtain_pass$3112+1
  2106  002544  C00B  F0C1         	movff	?___awtoft+2,_obtain_pass$3112+2
  2107                           
  2108                           ;lcd_vision.c: 68: pass = pass + input * pow(10, 15 - *digit);
  2109  002548  C0BF  F055         	movff	_obtain_pass$3112,pow@y
  2110  00254C  C0C0  F056         	movff	_obtain_pass$3112+1,pow@y+1
  2111  002550  C0C1  F057         	movff	_obtain_pass$3112+2,pow@y+2
  2112  002554  0E00               	movlw	0
  2113  002556  6E52               	movwf	pow@x,c
  2114  002558  0E20               	movlw	32
  2115  00255A  6E53               	movwf	pow@x+1,c
  2116  00255C  0E41               	movlw	65
  2117  00255E  6E54               	movwf	pow@x+2,c
  2118  002560  EC24  F00D         	call	_pow	;wreg free
  2119  002564  C052  F0C2         	movff	?_pow,_obtain_pass$3113
  2120  002568  C053  F0C3         	movff	?_pow+1,_obtain_pass$3113+1
  2121  00256C  C054  F0C4         	movff	?_pow+2,_obtain_pass$3113+2
  2122                           
  2123                           ;lcd_vision.c: 68: pass = pass + input * pow(10, 15 - *digit);
  2124  002570  C0C2  F010         	movff	_obtain_pass$3113,___ftmul@f2
  2125  002574  C0C3  F011         	movff	_obtain_pass$3113+1,___ftmul@f2+1
  2126  002578  C0C4  F012         	movff	_obtain_pass$3113+2,___ftmul@f2+2
  2127  00257C  505A               	movf	obtain_pass@input,w,c
  2128  00257E  EC8B  F01C         	call	___lbtoft
  2129  002582  C009  F00D         	movff	?___lbtoft,___ftmul@f1
  2130  002586  C00A  F00E         	movff	?___lbtoft+1,___ftmul@f1+1
  2131  00258A  C00B  F00F         	movff	?___lbtoft+2,___ftmul@f1+2
  2132  00258E  EC03  F012         	call	___ftmul	;wreg free
  2133  002592  C00D  F01F         	movff	?___ftmul,___ftadd@f2
  2134  002596  C00E  F020         	movff	?___ftmul+1,___ftadd@f2+1
  2135  00259A  C00F  F021         	movff	?___ftmul+2,___ftadd@f2+2
  2136  00259E  C058  F009         	movff	obtain_pass@pass,___awtoft@c
  2137  0025A2  C059  F00A         	movff	obtain_pass@pass+1,___awtoft@c+1
  2138  0025A6  ECAE  F01B         	call	___awtoft	;wreg free
  2139  0025AA  C009  F01C         	movff	?___awtoft,___ftadd@f1
  2140  0025AE  C00A  F01D         	movff	?___awtoft+1,___ftadd@f1+1
  2141  0025B2  C00B  F01E         	movff	?___awtoft+2,___ftadd@f1+2
  2142  0025B6  EC74  F00B         	call	___ftadd	;wreg free
  2143  0025BA  C01C  F028         	movff	?___ftadd,___fttol@f1
  2144  0025BE  C01D  F029         	movff	?___ftadd+1,___fttol@f1+1
  2145  0025C2  C01E  F02A         	movff	?___ftadd+2,___fttol@f1+2
  2146  0025C6  EC82  F011         	call	___fttol	;wreg free
  2147  0025CA  C028  F058         	movff	?___fttol,obtain_pass@pass
  2148  0025CE  C029  F059         	movff	?___fttol+1,obtain_pass@pass+1
  2149                           
  2150                           ;lcd_vision.c: 69: next_code(digit, &input);
  2151  0025D2  C05B  F008         	movff	obtain_pass@digit,next_code@digit
  2152  0025D6  C05C  F009         	movff	obtain_pass@digit+1,next_code@digit+1
  2153  0025DA  0E5A               	movlw	low obtain_pass@input
  2154  0025DC  6E0A               	movwf	next_code@input,c
  2155  0025DE  0E00               	movlw	high obtain_pass@input
  2156  0025E0  6E0B               	movwf	next_code@input+1,c
  2157  0025E2  ECB9  F01A         	call	_next_code	;wreg free
  2158  0025E6  D000               	goto	l4741
  2159  0025E8                     l4741:
  2160                           
  2161                           ;lcd_vision.c: 70: }
  2162                           ;lcd_vision.c: 71: return pass;
  2163  0025E8  C058  F058         	movff	obtain_pass@pass,?_obtain_pass
  2164  0025EC  C059  F059         	movff	obtain_pass@pass+1,?_obtain_pass+1
  2165  0025F0  0012               	return	
  2166  0025F2  0012               	return		;funcret
  2167  0025F4                     __end_of_obtain_pass:
  2168                           	opt stack 0
  2169                           tblptru	equ	0xFF8
  2170                           tblptrh	equ	0xFF7
  2171                           tblptrl	equ	0xFF6
  2172                           tablat	equ	0xFF5
  2173                           postinc0	equ	0xFEE
  2174                           wreg	equ	0xFE8
  2175                           postdec1	equ	0xFE5
  2176                           fsr1l	equ	0xFE1
  2177                           postinc2	equ	0xFDE
  2178                           postdec2	equ	0xFDD
  2179                           fsr2h	equ	0xFDA
  2180                           fsr2l	equ	0xFD9
  2181                           status	equ	0xFD8
  2182                           
  2183 ;; *************** function _next_code *****************
  2184 ;; Defined at:
  2185 ;;		line 40 in file "lcd_vision.c"
  2186 ;; Parameters:    Size  Location     Type
  2187 ;;  digit           2    7[COMRAM] PTR short 
  2188 ;;		 -> input_password@digit(2), 
  2189 ;;  input           2    9[COMRAM] PTR unsigned char 
  2190 ;;		 -> obtain_pass@input(1), 
  2191 ;; Auto vars:     Size  Location     Type
  2192 ;;		None
  2193 ;; Return value:  Size  Location     Type
  2194 ;;		None               void
  2195 ;; Registers used:
  2196 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2197 ;; Tracked objects:
  2198 ;;		On entry : 0/0
  2199 ;;		On exit  : 0/0
  2200 ;;		Unchanged: 0/0
  2201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2202 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2203 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2204 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2205 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2206 ;;Total ram usage:        6 bytes
  2207 ;; Hardware stack levels used:    1
  2208 ;; Hardware stack levels required when called:    3
  2209 ;; This function calls:
  2210 ;;		_clear_keyboard
  2211 ;;		_lcd_gotoxy
  2212 ;; This function is called by:
  2213 ;;		_obtain_pass
  2214 ;; This function uses a non-reentrant model
  2215 ;;
  2216                           
  2217                           	psect	text8
  2218  003572                     __ptext8:
  2219                           	opt stack 0
  2220  003572                     _next_code:
  2221                           	opt stack 24
  2222                           
  2223                           ;lcd_vision.c: 41: clear_keyboard();
  2224                           
  2225                           ;incstack = 0
  2226  003572  EC41  F01D         	call	_clear_keyboard	;wreg free
  2227                           
  2228                           ;lcd_vision.c: 42: *digit = *digit + 1;
  2229  003576  C008  FFD9         	movff	next_code@digit,fsr2l
  2230  00357A  C009  FFDA         	movff	next_code@digit+1,fsr2h
  2231  00357E  CFDE F00C          	movff	postinc2,??_next_code
  2232  003582  CFDD F00D          	movff	postdec2,??_next_code+1
  2233  003586  0E01               	movlw	1
  2234  003588  260C               	addwf	??_next_code,f,c
  2235  00358A  0E00               	movlw	0
  2236  00358C  220D               	addwfc	??_next_code+1,f,c
  2237  00358E  C008  FFD9         	movff	next_code@digit,fsr2l
  2238  003592  C009  FFDA         	movff	next_code@digit+1,fsr2h
  2239  003596  C00C  FFDE         	movff	??_next_code,postinc2
  2240  00359A  C00D  FFDD         	movff	??_next_code+1,postdec2
  2241                           
  2242                           ;lcd_vision.c: 43: lcd_gotoxy(*digit, 2);
  2243  00359E  0E02               	movlw	2
  2244  0035A0  6E05               	movwf	lcd_gotoxy@y,c
  2245  0035A2  C008  FFD9         	movff	next_code@digit,fsr2l
  2246  0035A6  C009  FFDA         	movff	next_code@digit+1,fsr2h
  2247  0035AA  50DF               	movf	indf2,w,c
  2248  0035AC  ECC2  F01C         	call	_lcd_gotoxy
  2249                           
  2250                           ;lcd_vision.c: 44: *input = 18;
  2251  0035B0  C00A  FFD9         	movff	next_code@input,fsr2l
  2252  0035B4  C00B  FFDA         	movff	next_code@input+1,fsr2h
  2253  0035B8  0E12               	movlw	18
  2254  0035BA  6EDF               	movwf	indf2,c
  2255  0035BC  0012               	return		;funcret
  2256  0035BE                     __end_of_next_code:
  2257                           	opt stack 0
  2258                           tblptru	equ	0xFF8
  2259                           tblptrh	equ	0xFF7
  2260                           tblptrl	equ	0xFF6
  2261                           tablat	equ	0xFF5
  2262                           postinc0	equ	0xFEE
  2263                           wreg	equ	0xFE8
  2264                           postdec1	equ	0xFE5
  2265                           fsr1l	equ	0xFE1
  2266                           indf2	equ	0xFDF
  2267                           postinc2	equ	0xFDE
  2268                           postdec2	equ	0xFDD
  2269                           fsr2h	equ	0xFDA
  2270                           fsr2l	equ	0xFD9
  2271                           status	equ	0xFD8
  2272                           
  2273 ;; *************** function _is_not_letter *****************
  2274 ;; Defined at:
  2275 ;;		line 31 in file "lcd_vision.c"
  2276 ;; Parameters:    Size  Location     Type
  2277 ;;  input           1    wreg     unsigned char 
  2278 ;; Auto vars:     Size  Location     Type
  2279 ;;  input           1    1[COMRAM] unsigned char 
  2280 ;; Return value:  Size  Location     Type
  2281 ;;                  1    wreg      unsigned char 
  2282 ;; Registers used:
  2283 ;;		wreg, status,2, status,0
  2284 ;; Tracked objects:
  2285 ;;		On entry : 0/0
  2286 ;;		On exit  : 0/0
  2287 ;;		Unchanged: 0/0
  2288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2290 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2292 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2293 ;;Total ram usage:        2 bytes
  2294 ;; Hardware stack levels used:    1
  2295 ;; This function calls:
  2296 ;;		Nothing
  2297 ;; This function is called by:
  2298 ;;		_input_password
  2299 ;; This function uses a non-reentrant model
  2300 ;;
  2301                           
  2302                           	psect	text9
  2303  003834                     __ptext9:
  2304                           	opt stack 0
  2305  003834                     _is_not_letter:
  2306                           	opt stack 28
  2307                           
  2308                           ;incstack = 0
  2309                           ;is_not_letter@input stored from wreg
  2310  003834  6E02               	movwf	is_not_letter@input,c
  2311                           
  2312                           ;lcd_vision.c: 32: return input != 16 && input != 11 && input !=12 && input!=13;
  2313  003836  0E00               	movlw	0
  2314  003838  6E01               	movwf	_is_not_letter$1340,c
  2315  00383A  0E10               	movlw	16
  2316  00383C  1802               	xorwf	is_not_letter@input,w,c
  2317  00383E  B4D8               	btfsc	status,2,c
  2318  003840  D00E               	goto	l621
  2319  003842  0E0B               	movlw	11
  2320  003844  1802               	xorwf	is_not_letter@input,w,c
  2321  003846  B4D8               	btfsc	status,2,c
  2322  003848  D00A               	goto	l621
  2323  00384A  0E0C               	movlw	12
  2324  00384C  1802               	xorwf	is_not_letter@input,w,c
  2325  00384E  B4D8               	btfsc	status,2,c
  2326  003850  D006               	goto	l621
  2327  003852  0E0D               	movlw	13
  2328  003854  1802               	xorwf	is_not_letter@input,w,c
  2329  003856  B4D8               	btfsc	status,2,c
  2330  003858  D002               	goto	l621
  2331  00385A  0E01               	movlw	1
  2332  00385C  6E01               	movwf	_is_not_letter$1340,c
  2333  00385E                     l621:
  2334  00385E  5001               	movf	_is_not_letter$1340,w,c
  2335  003860  0012               	return	
  2336  003862  0012               	return		;funcret
  2337  003864                     __end_of_is_not_letter:
  2338                           	opt stack 0
  2339                           tblptru	equ	0xFF8
  2340                           tblptrh	equ	0xFF7
  2341                           tblptrl	equ	0xFF6
  2342                           tablat	equ	0xFF5
  2343                           postinc0	equ	0xFEE
  2344                           wreg	equ	0xFE8
  2345                           postdec1	equ	0xFE5
  2346                           fsr1l	equ	0xFE1
  2347                           indf2	equ	0xFDF
  2348                           postinc2	equ	0xFDE
  2349                           postdec2	equ	0xFDD
  2350                           fsr2h	equ	0xFDA
  2351                           fsr2l	equ	0xFD9
  2352                           status	equ	0xFD8
  2353                           
  2354 ;; *************** function _select_menu *****************
  2355 ;; Defined at:
  2356 ;;		line 127 in file "menu.c"
  2357 ;; Parameters:    Size  Location     Type
  2358 ;;		None
  2359 ;; Auto vars:     Size  Location     Type
  2360 ;;		None
  2361 ;; Return value:  Size  Location     Type
  2362 ;;                  2   34[None  ] int 
  2363 ;; Registers used:
  2364 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2365 ;; Tracked objects:
  2366 ;;		On entry : 0/0
  2367 ;;		On exit  : 0/0
  2368 ;;		Unchanged: 0/0
  2369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2371 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2373 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2374 ;;Total ram usage:        0 bytes
  2375 ;; Hardware stack levels used:    1
  2376 ;; Hardware stack levels required when called:    8
  2377 ;; This function calls:
  2378 ;;		_configurar_reloj
  2379 ;;		_dispararSensor
  2380 ;;		_read_keyboard
  2381 ;;		_ver_info
  2382 ;;		_ver_opcion_cambio
  2383 ;; This function is called by:
  2384 ;;		_main
  2385 ;; This function uses a non-reentrant model
  2386 ;;
  2387                           
  2388                           	psect	text10
  2389  002BEC                     __ptext10:
  2390                           	opt stack 0
  2391  002BEC                     _select_menu:
  2392                           	opt stack 22
  2393                           
  2394                           ;menu.c: 128: if (state_alarm == DESACTIVE){
  2395                           
  2396                           ;incstack = 0
  2397  002BEC  0100               	movlb	0	; () banked
  2398  002BEE  05D9               	decf	_state_alarm& (0+255),w,b
  2399  002BF0  A4D8               	btfss	status,2,c
  2400  002BF2  D01A               	goto	l5047
  2401                           
  2402                           ; BSR set to: 0
  2403                           ;menu.c: 129: menu = read_keyboard();
  2404  002BF4  ECF2  F007         	call	_read_keyboard	;wreg free
  2405  002BF8  0100               	movlb	0	; () banked
  2406  002BFA  6FD8               	movwf	_menu& (0+255),b
  2407                           
  2408                           ;menu.c: 130: switch (menu){
  2409  002BFC  D009               	goto	l5045
  2410  002BFE                     l5039:
  2411                           
  2412                           ; BSR set to: 0
  2413  002BFE  EC3B  F018         	call	_ver_opcion_cambio	;wreg free
  2414                           
  2415                           ;menu.c: 132: break;
  2416  002C02  D03C               	goto	l5059
  2417  002C04                     l5041:
  2418  002C04  EC21  F017         	call	_configurar_reloj	;wreg free
  2419                           
  2420                           ;menu.c: 134: break;
  2421  002C08  D039               	goto	l5059
  2422  002C0A                     l5043:
  2423  002C0A  EC50  F014         	call	_ver_info	;wreg free
  2424                           
  2425                           ;menu.c: 138: }
  2426                           
  2427                           ;menu.c: 137: default: ;
  2428                           
  2429                           ;menu.c: 136: break;
  2430  002C0E  D036               	goto	l5059
  2431  002C10                     l5045:
  2432  002C10  0100               	movlb	0	; () banked
  2433  002C12  51D8               	movf	_menu& (0+255),w,b
  2434                           
  2435                           ; Switch size 1, requested type "space"
  2436                           ; Number of cases is 3, Range of values is 11 to 13
  2437                           ; switch strategies available:
  2438                           ; Name         Instructions Cycles
  2439                           ; simple_byte           10     6 (average)
  2440                           ;	Chosen strategy is simple_byte
  2441  002C14  0A0B               	xorlw	11	; case 11
  2442  002C16  B4D8               	btfsc	status,2,c
  2443  002C18  D7F2               	goto	l5039
  2444  002C1A  0A07               	xorlw	7	; case 12
  2445  002C1C  B4D8               	btfsc	status,2,c
  2446  002C1E  D7F2               	goto	l5041
  2447  002C20  0A01               	xorlw	1	; case 13
  2448  002C22  B4D8               	btfsc	status,2,c
  2449  002C24  D7F2               	goto	l5043
  2450                           
  2451                           ; BSR set to: 0
  2452                           ;menu.c: 139: }else{
  2453  002C26  D02A               	goto	l5059
  2454  002C28                     l5047:
  2455                           
  2456                           ; BSR set to: 0
  2457                           ;menu.c: 140: if (state_alarm == ACTIVE){
  2458  002C28  0100               	movlb	0	; () banked
  2459  002C2A  51D9               	movf	_state_alarm& (0+255),w,b
  2460  002C2C  A4D8               	btfss	status,2,c
  2461  002C2E  D026               	goto	l5059
  2462                           
  2463                           ; BSR set to: 0
  2464                           ;menu.c: 141: menu = read_keyboard();
  2465  002C30  ECF2  F007         	call	_read_keyboard	;wreg free
  2466  002C34  0100               	movlb	0	; () banked
  2467  002C36  6FD8               	movwf	_menu& (0+255),b
  2468                           
  2469                           ;menu.c: 142: switch (menu){
  2470  002C38  D015               	goto	l5057
  2471  002C3A                     l5051:
  2472                           
  2473                           ; BSR set to: 0
  2474  002C3A  0E00               	movlw	0
  2475  002C3C  6E14               	movwf	dispararSensor@sensor+1,c
  2476  002C3E  0E01               	movlw	1
  2477  002C40  6E13               	movwf	dispararSensor@sensor,c
  2478  002C42  EC32  F01C         	call	_dispararSensor	;wreg free
  2479                           
  2480                           ;menu.c: 144: break;
  2481  002C46  D01A               	goto	l5059
  2482  002C48                     l5053:
  2483  002C48  0E00               	movlw	0
  2484  002C4A  6E14               	movwf	dispararSensor@sensor+1,c
  2485  002C4C  0E02               	movlw	2
  2486  002C4E  6E13               	movwf	dispararSensor@sensor,c
  2487  002C50  EC32  F01C         	call	_dispararSensor	;wreg free
  2488                           
  2489                           ;menu.c: 146: break;
  2490  002C54  D013               	goto	l5059
  2491  002C56                     l5055:
  2492  002C56  0E00               	movlw	0
  2493  002C58  6E14               	movwf	dispararSensor@sensor+1,c
  2494  002C5A  0E03               	movlw	3
  2495  002C5C  6E13               	movwf	dispararSensor@sensor,c
  2496  002C5E  EC32  F01C         	call	_dispararSensor	;wreg free
  2497                           
  2498                           ;menu.c: 150: }
  2499                           
  2500                           ;menu.c: 149: default: ;
  2501                           
  2502                           ;menu.c: 148: break;
  2503  002C62  D00C               	goto	l5059
  2504  002C64                     l5057:
  2505  002C64  0100               	movlb	0	; () banked
  2506  002C66  51D8               	movf	_menu& (0+255),w,b
  2507                           
  2508                           ; Switch size 1, requested type "space"
  2509                           ; Number of cases is 3, Range of values is 11 to 13
  2510                           ; switch strategies available:
  2511                           ; Name         Instructions Cycles
  2512                           ; simple_byte           10     6 (average)
  2513                           ;	Chosen strategy is simple_byte
  2514  002C68  0A0B               	xorlw	11	; case 11
  2515  002C6A  B4D8               	btfsc	status,2,c
  2516  002C6C  D7E6               	goto	l5051
  2517  002C6E  0A07               	xorlw	7	; case 12
  2518  002C70  B4D8               	btfsc	status,2,c
  2519  002C72  D7EA               	goto	l5053
  2520  002C74  0A01               	xorlw	1	; case 13
  2521  002C76  B4D8               	btfsc	status,2,c
  2522  002C78  D7EE               	goto	l5055
  2523                           
  2524                           ; BSR set to: 0
  2525                           
  2526                           ; BSR set to: 0
  2527  002C7A  D000               	goto	l5059
  2528  002C7C                     l5059:
  2529                           
  2530                           ;menu.c: 151: }
  2531                           ;menu.c: 152: }
  2532                           ;menu.c: 153: menu = 18;
  2533  002C7C  0E12               	movlw	18
  2534  002C7E  0100               	movlb	0	; () banked
  2535  002C80  6FD8               	movwf	_menu& (0+255),b
  2536                           
  2537                           ; BSR set to: 0
  2538  002C82  0012               	return		;funcret
  2539  002C84                     __end_of_select_menu:
  2540                           	opt stack 0
  2541                           tblptru	equ	0xFF8
  2542                           tblptrh	equ	0xFF7
  2543                           tblptrl	equ	0xFF6
  2544                           tablat	equ	0xFF5
  2545                           postinc0	equ	0xFEE
  2546                           wreg	equ	0xFE8
  2547                           postdec1	equ	0xFE5
  2548                           fsr1l	equ	0xFE1
  2549                           indf2	equ	0xFDF
  2550                           postinc2	equ	0xFDE
  2551                           postdec2	equ	0xFDD
  2552                           fsr2h	equ	0xFDA
  2553                           fsr2l	equ	0xFD9
  2554                           status	equ	0xFD8
  2555                           
  2556 ;; *************** function _ver_opcion_cambio *****************
  2557 ;; Defined at:
  2558 ;;		line 71 in file "menu.c"
  2559 ;; Parameters:    Size  Location     Type
  2560 ;;		None
  2561 ;; Auto vars:     Size  Location     Type
  2562 ;;  input           1   90[COMRAM] unsigned char 
  2563 ;;  old_correct     1   89[COMRAM] unsigned char 
  2564 ;; Return value:  Size  Location     Type
  2565 ;;		None               void
  2566 ;; Registers used:
  2567 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2568 ;; Tracked objects:
  2569 ;;		On entry : 0/0
  2570 ;;		On exit  : 0/0
  2571 ;;		Unchanged: 0/0
  2572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2574 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2576 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2577 ;;Total ram usage:        2 bytes
  2578 ;; Hardware stack levels used:    1
  2579 ;; Hardware stack levels required when called:    7
  2580 ;; This function calls:
  2581 ;;		_changePass
  2582 ;;		_clear
  2583 ;;		_input_new_pass
  2584 ;;		_input_old_pass
  2585 ;;		_lcd_gotoxy
  2586 ;;		_lcd_putrs
  2587 ;;		_read_keyboard
  2588 ;;		_show_error
  2589 ;;		_show_success
  2590 ;; This function is called by:
  2591 ;;		_select_menu
  2592 ;; This function uses a non-reentrant model
  2593 ;;
  2594                           
  2595                           	psect	text11
  2596  003076                     __ptext11:
  2597                           	opt stack 0
  2598  003076                     _ver_opcion_cambio:
  2599                           	opt stack 22
  2600                           
  2601                           ;menu.c: 72: clear();
  2602                           
  2603                           ; BSR set to: 0
  2604                           ;incstack = 0
  2605  003076  ECF3  F01C         	call	_clear	;wreg free
  2606                           
  2607                           ;menu.c: 73: bool old_correct = 0;
  2608  00307A  0E00               	movlw	0
  2609  00307C  6E5A               	movwf	ver_opcion_cambio@old_correct,c
  2610                           
  2611                           ;menu.c: 74: lcd_gotoxy(2,1);
  2612  00307E  0E01               	movlw	1
  2613  003080  6E05               	movwf	lcd_gotoxy@y,c
  2614  003082  0E02               	movlw	2
  2615  003084  ECC2  F01C         	call	_lcd_gotoxy
  2616                           
  2617                           ;menu.c: 75: lcd_putrs("Old pass:____");
  2618  003088  0E76               	movlw	low STR_23
  2619  00308A  6E09               	movwf	lcd_putrs@ptr,c
  2620  00308C  0E0F               	movlw	high STR_23
  2621  00308E  6E0A               	movwf	lcd_putrs@ptr+1,c
  2622  003090  EC8F  F01A         	call	_lcd_putrs	;wreg free
  2623                           
  2624                           ;menu.c: 76: lcd_gotoxy(2,2);
  2625  003094  0E02               	movlw	2
  2626  003096  6E05               	movwf	lcd_gotoxy@y,c
  2627  003098  0E02               	movlw	2
  2628  00309A  ECC2  F01C         	call	_lcd_gotoxy
  2629                           
  2630                           ;menu.c: 77: lcd_putrs("New pass:____");
  2631  00309E  0E84               	movlw	low STR_24
  2632  0030A0  6E09               	movwf	lcd_putrs@ptr,c
  2633  0030A2  0E0F               	movlw	high STR_24
  2634  0030A4  6E0A               	movwf	lcd_putrs@ptr+1,c
  2635  0030A6  EC8F  F01A         	call	_lcd_putrs	;wreg free
  2636                           
  2637                           ;menu.c: 78: lcd_gotoxy(11,1);
  2638  0030AA  0E01               	movlw	1
  2639  0030AC  6E05               	movwf	lcd_gotoxy@y,c
  2640  0030AE  0E0B               	movlw	11
  2641  0030B0  ECC2  F01C         	call	_lcd_gotoxy
  2642                           
  2643                           ;menu.c: 79: old_correct = input_old_pass();
  2644  0030B4  ECE5  F00D         	call	_input_old_pass	;wreg free
  2645  0030B8  6E5A               	movwf	ver_opcion_cambio@old_correct,c
  2646                           
  2647                           ;menu.c: 80: lcd_gotoxy(11,2);
  2648  0030BA  0E02               	movlw	2
  2649  0030BC  6E05               	movwf	lcd_gotoxy@y,c
  2650  0030BE  0E0B               	movlw	11
  2651  0030C0  ECC2  F01C         	call	_lcd_gotoxy
  2652                           
  2653                           ;menu.c: 81: input_new_pass();
  2654  0030C4  ECCF  F00F         	call	_input_new_pass	;wreg free
  2655                           
  2656                           ;menu.c: 82: char input = 0;
  2657  0030C8  0E00               	movlw	0
  2658  0030CA  D002               	goto	L2
  2659  0030CC                     l4957:
  2660                           
  2661                           ;menu.c: 84: input = read_keyboard();
  2662  0030CC  ECF2  F007         	call	_read_keyboard	;wreg free
  2663  0030D0                     L2:
  2664  0030D0  6E5B               	movwf	ver_opcion_cambio@input,c
  2665  0030D2  D000               	goto	l4959
  2666  0030D4                     l4959:
  2667  0030D4  0E10               	movlw	16
  2668  0030D6  185B               	xorwf	ver_opcion_cambio@input,w,c
  2669  0030D8  A4D8               	btfss	status,2,c
  2670  0030DA  D7F8               	goto	l4957
  2671                           
  2672                           ;menu.c: 85: }
  2673                           ;menu.c: 86: if (old_correct)
  2674  0030DC  505A               	movf	ver_opcion_cambio@old_correct,w,c
  2675  0030DE  B4D8               	btfsc	status,2,c
  2676  0030E0  D009               	goto	l4967
  2677                           
  2678                           ;menu.c: 87: {
  2679                           ;menu.c: 88: changePass(newpass);
  2680  0030E2  C092  F001         	movff	_newpass,changePass@pass
  2681  0030E6  C093  F002         	movff	_newpass+1,changePass@pass+1
  2682  0030EA  EC3C  F01D         	call	_changePass	;wreg free
  2683                           
  2684                           ;menu.c: 89: show_success();
  2685  0030EE  EC70  F01B         	call	_show_success	;wreg free
  2686                           
  2687                           ;menu.c: 90: }else{
  2688  0030F2  0012               	return	
  2689  0030F4                     l4967:
  2690                           
  2691                           ;menu.c: 91: show_error();
  2692  0030F4  EC8F  F01B         	call	_show_error	;wreg free
  2693  0030F8  0012               	return	
  2694  0030FA  0012               	return		;funcret
  2695  0030FC                     __end_of_ver_opcion_cambio:
  2696                           	opt stack 0
  2697                           tblptru	equ	0xFF8
  2698                           tblptrh	equ	0xFF7
  2699                           tblptrl	equ	0xFF6
  2700                           tablat	equ	0xFF5
  2701                           postinc0	equ	0xFEE
  2702                           wreg	equ	0xFE8
  2703                           postdec1	equ	0xFE5
  2704                           fsr1l	equ	0xFE1
  2705                           indf2	equ	0xFDF
  2706                           postinc2	equ	0xFDE
  2707                           postdec2	equ	0xFDD
  2708                           fsr2h	equ	0xFDA
  2709                           fsr2l	equ	0xFD9
  2710                           status	equ	0xFD8
  2711                           
  2712 ;; *************** function _show_success *****************
  2713 ;; Defined at:
  2714 ;;		line 36 in file "menu.c"
  2715 ;; Parameters:    Size  Location     Type
  2716 ;;		None
  2717 ;; Auto vars:     Size  Location     Type
  2718 ;;		None
  2719 ;; Return value:  Size  Location     Type
  2720 ;;		None               void
  2721 ;; Registers used:
  2722 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2723 ;; Tracked objects:
  2724 ;;		On entry : 0/0
  2725 ;;		On exit  : 0/0
  2726 ;;		Unchanged: 0/0
  2727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2730 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2731 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2732 ;;Total ram usage:        0 bytes
  2733 ;; Hardware stack levels used:    1
  2734 ;; Hardware stack levels required when called:    5
  2735 ;; This function calls:
  2736 ;;		__delay_s
  2737 ;;		_clear
  2738 ;;		_lcd_gotoxy
  2739 ;;		_lcd_putrs
  2740 ;; This function is called by:
  2741 ;;		_ver_opcion_cambio
  2742 ;; This function uses a non-reentrant model
  2743 ;;
  2744                           
  2745                           	psect	text12
  2746  0036E0                     __ptext12:
  2747                           	opt stack 0
  2748  0036E0                     _show_success:
  2749                           	opt stack 23
  2750                           
  2751                           ;menu.c: 37: clear();
  2752                           
  2753                           ;incstack = 0
  2754  0036E0  ECF3  F01C         	call	_clear	;wreg free
  2755                           
  2756                           ;menu.c: 38: lcd_gotoxy(1,1);
  2757  0036E4  0E01               	movlw	1
  2758  0036E6  6E05               	movwf	lcd_gotoxy@y,c
  2759  0036E8  0E01               	movlw	1
  2760  0036EA  ECC2  F01C         	call	_lcd_gotoxy
  2761                           
  2762                           ;menu.c: 39: lcd_putrs("pass success");
  2763  0036EE  0E92               	movlw	low STR_19
  2764  0036F0  6E09               	movwf	lcd_putrs@ptr,c
  2765  0036F2  0E0F               	movlw	high STR_19
  2766  0036F4  6E0A               	movwf	lcd_putrs@ptr+1,c
  2767  0036F6  EC8F  F01A         	call	_lcd_putrs	;wreg free
  2768                           
  2769                           ;menu.c: 40: lcd_gotoxy(1,2);
  2770  0036FA  0E02               	movlw	2
  2771  0036FC  6E05               	movwf	lcd_gotoxy@y,c
  2772  0036FE  0E01               	movlw	1
  2773  003700  ECC2  F01C         	call	_lcd_gotoxy
  2774                           
  2775                           ;menu.c: 41: lcd_putrs("changed");
  2776  003704  0E50               	movlw	low (STR_22+8)
  2777  003706  6E09               	movwf	lcd_putrs@ptr,c
  2778  003708  0E0F               	movlw	high (STR_22+8)
  2779  00370A  6E0A               	movwf	lcd_putrs@ptr+1,c
  2780  00370C  EC8F  F01A         	call	_lcd_putrs	;wreg free
  2781                           
  2782                           ;menu.c: 42: _delay_s(1000);
  2783  003710  0E03               	movlw	3
  2784  003712  6E0A               	movwf	__delay_s@millis+1,c
  2785  003714  0EE8               	movlw	232
  2786  003716  6E09               	movwf	__delay_s@millis,c
  2787  003718  EC63  F01A         	call	__delay_s	;wreg free
  2788  00371C  0012               	return		;funcret
  2789  00371E                     __end_of_show_success:
  2790                           	opt stack 0
  2791                           tblptru	equ	0xFF8
  2792                           tblptrh	equ	0xFF7
  2793                           tblptrl	equ	0xFF6
  2794                           tablat	equ	0xFF5
  2795                           postinc0	equ	0xFEE
  2796                           wreg	equ	0xFE8
  2797                           postdec1	equ	0xFE5
  2798                           fsr1l	equ	0xFE1
  2799                           indf2	equ	0xFDF
  2800                           postinc2	equ	0xFDE
  2801                           postdec2	equ	0xFDD
  2802                           fsr2h	equ	0xFDA
  2803                           fsr2l	equ	0xFD9
  2804                           status	equ	0xFD8
  2805                           
  2806 ;; *************** function _show_error *****************
  2807 ;; Defined at:
  2808 ;;		line 45 in file "menu.c"
  2809 ;; Parameters:    Size  Location     Type
  2810 ;;		None
  2811 ;; Auto vars:     Size  Location     Type
  2812 ;;		None
  2813 ;; Return value:  Size  Location     Type
  2814 ;;		None               void
  2815 ;; Registers used:
  2816 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2817 ;; Tracked objects:
  2818 ;;		On entry : 0/0
  2819 ;;		On exit  : 0/0
  2820 ;;		Unchanged: 0/0
  2821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2825 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2826 ;;Total ram usage:        0 bytes
  2827 ;; Hardware stack levels used:    1
  2828 ;; Hardware stack levels required when called:    5
  2829 ;; This function calls:
  2830 ;;		__delay_s
  2831 ;;		_clear
  2832 ;;		_lcd_gotoxy
  2833 ;;		_lcd_putrs
  2834 ;; This function is called by:
  2835 ;;		_ver_opcion_cambio
  2836 ;; This function uses a non-reentrant model
  2837 ;;
  2838                           
  2839                           	psect	text13
  2840  00371E                     __ptext13:
  2841                           	opt stack 0
  2842  00371E                     _show_error:
  2843                           	opt stack 23
  2844                           
  2845                           ;menu.c: 46: clear();
  2846                           
  2847                           ;incstack = 0
  2848  00371E  ECF3  F01C         	call	_clear	;wreg free
  2849                           
  2850                           ;menu.c: 47: lcd_gotoxy(1,1);
  2851  003722  0E01               	movlw	1
  2852  003724  6E05               	movwf	lcd_gotoxy@y,c
  2853  003726  0E01               	movlw	1
  2854  003728  ECC2  F01C         	call	_lcd_gotoxy
  2855                           
  2856                           ;menu.c: 48: lcd_putrs("old pass wrong");
  2857  00372C  0E58               	movlw	low STR_21
  2858  00372E  6E09               	movwf	lcd_putrs@ptr,c
  2859  003730  0E0F               	movlw	high STR_21
  2860  003732  6E0A               	movwf	lcd_putrs@ptr+1,c
  2861  003734  EC8F  F01A         	call	_lcd_putrs	;wreg free
  2862                           
  2863                           ;menu.c: 49: lcd_gotoxy(1,2);
  2864  003738  0E02               	movlw	2
  2865  00373A  6E05               	movwf	lcd_gotoxy@y,c
  2866  00373C  0E01               	movlw	1
  2867  00373E  ECC2  F01C         	call	_lcd_gotoxy
  2868                           
  2869                           ;menu.c: 50: lcd_putrs("nothing changed");
  2870  003742  0E48               	movlw	low STR_22
  2871  003744  6E09               	movwf	lcd_putrs@ptr,c
  2872  003746  0E0F               	movlw	high STR_22
  2873  003748  6E0A               	movwf	lcd_putrs@ptr+1,c
  2874  00374A  EC8F  F01A         	call	_lcd_putrs	;wreg free
  2875                           
  2876                           ;menu.c: 51: _delay_s(1000);
  2877  00374E  0E03               	movlw	3
  2878  003750  6E0A               	movwf	__delay_s@millis+1,c
  2879  003752  0EE8               	movlw	232
  2880  003754  6E09               	movwf	__delay_s@millis,c
  2881  003756  EC63  F01A         	call	__delay_s	;wreg free
  2882  00375A  0012               	return		;funcret
  2883  00375C                     __end_of_show_error:
  2884                           	opt stack 0
  2885                           tblptru	equ	0xFF8
  2886                           tblptrh	equ	0xFF7
  2887                           tblptrl	equ	0xFF6
  2888                           tablat	equ	0xFF5
  2889                           postinc0	equ	0xFEE
  2890                           wreg	equ	0xFE8
  2891                           postdec1	equ	0xFE5
  2892                           fsr1l	equ	0xFE1
  2893                           indf2	equ	0xFDF
  2894                           postinc2	equ	0xFDE
  2895                           postdec2	equ	0xFDD
  2896                           fsr2h	equ	0xFDA
  2897                           fsr2l	equ	0xFD9
  2898                           status	equ	0xFD8
  2899                           
  2900 ;; *************** function _input_old_pass *****************
  2901 ;; Defined at:
  2902 ;;		line 17 in file "menu.c"
  2903 ;; Parameters:    Size  Location     Type
  2904 ;;		None
  2905 ;; Auto vars:     Size  Location     Type
  2906 ;;  digit           2   20[BANK0 ] short 
  2907 ;;  pass            2   17[BANK0 ] int 
  2908 ;;  input           1   19[BANK0 ] unsigned char 
  2909 ;; Return value:  Size  Location     Type
  2910 ;;                  1    wreg      unsigned char 
  2911 ;; Registers used:
  2912 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2913 ;; Tracked objects:
  2914 ;;		On entry : 0/0
  2915 ;;		On exit  : 0/0
  2916 ;;		Unchanged: 0/0
  2917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2919 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2920 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2921 ;;      Totals:         2      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2922 ;;Total ram usage:       13 bytes
  2923 ;; Hardware stack levels used:    1
  2924 ;; Hardware stack levels required when called:    6
  2925 ;; This function calls:
  2926 ;;		___awtoft
  2927 ;;		___ftadd
  2928 ;;		___ftmul
  2929 ;;		___fttol
  2930 ;;		___lbtoft
  2931 ;;		__delay_s
  2932 ;;		_checkPass
  2933 ;;		_clear_keyboard
  2934 ;;		_lcd_gotoxy
  2935 ;;		_not_fill_pass
  2936 ;;		_pow
  2937 ;;		_read_keyboard
  2938 ;; This function is called by:
  2939 ;;		_ver_opcion_cambio
  2940 ;; This function uses a non-reentrant model
  2941 ;;
  2942                           
  2943                           	psect	text14
  2944  001BCA                     __ptext14:
  2945                           	opt stack 0
  2946  001BCA                     _input_old_pass:
  2947                           	opt stack 22
  2948                           
  2949                           ;menu.c: 18: short digit = 12;
  2950                           
  2951                           ;incstack = 0
  2952  001BCA  0E00               	movlw	0
  2953  001BCC  0100               	movlb	0	; () banked
  2954  001BCE  6FC9               	movwf	(input_old_pass@digit+1)& (0+255),b
  2955  001BD0  0E0C               	movlw	12
  2956  001BD2  6FC8               	movwf	input_old_pass@digit& (0+255),b
  2957                           
  2958                           ;menu.c: 19: int pass = 0;
  2959  001BD4  0E00               	movlw	0
  2960  001BD6  0100               	movlb	0	; () banked
  2961  001BD8  6FC6               	movwf	(input_old_pass@pass+1)& (0+255),b
  2962  001BDA  0E00               	movlw	0
  2963  001BDC  6FC5               	movwf	input_old_pass@pass& (0+255),b
  2964                           
  2965                           ; BSR set to: 0
  2966                           ;menu.c: 20: char input = read_keyboard();
  2967  001BDE  ECF2  F007         	call	_read_keyboard	;wreg free
  2968  001BE2  D083               	goto	L3
  2969  001BE4                     l4759:
  2970                           
  2971                           ;menu.c: 22: if(0<input && input<10){
  2972  001BE4  0100               	movlb	0	; () banked
  2973  001BE6  51C7               	movf	input_old_pass@input& (0+255),w,b
  2974  001BE8  0100               	movlb	0	; () banked
  2975  001BEA  B4D8               	btfsc	status,2,c
  2976  001BEC  D07C               	goto	l4779
  2977                           
  2978                           ; BSR set to: 0
  2979  001BEE  0E0A               	movlw	10
  2980  001BF0  0100               	movlb	0	; () banked
  2981  001BF2  61C7               	cpfslt	input_old_pass@input& (0+255),b
  2982  001BF4  D078               	goto	l4779
  2983                           
  2984                           ; BSR set to: 0
  2985                           ;menu.c: 23: pass = pass + input * pow(10, 15 - digit);
  2986  001BF6  C0C8  F058         	movff	input_old_pass@digit,??_input_old_pass
  2987  001BFA  C0C9  F059         	movff	input_old_pass@digit+1,??_input_old_pass+1
  2988  001BFE  1E58               	comf	??_input_old_pass,f,c
  2989  001C00  1E59               	comf	??_input_old_pass+1,f,c
  2990  001C02  4A58               	infsnz	??_input_old_pass,f,c
  2991  001C04  2A59               	incf	??_input_old_pass+1,f,c
  2992  001C06  0E0F               	movlw	15
  2993  001C08  2458               	addwf	??_input_old_pass,w,c
  2994  001C0A  6E09               	movwf	___awtoft@c,c
  2995  001C0C  0E00               	movlw	0
  2996  001C0E  2059               	addwfc	??_input_old_pass+1,w,c
  2997  001C10  6E0A               	movwf	___awtoft@c+1,c
  2998  001C12  ECAE  F01B         	call	___awtoft	;wreg free
  2999  001C16  C009  F0BF         	movff	?___awtoft,_input_old_pass$3114
  3000  001C1A  C00A  F0C0         	movff	?___awtoft+1,_input_old_pass$3114+1
  3001  001C1E  C00B  F0C1         	movff	?___awtoft+2,_input_old_pass$3114+2
  3002                           
  3003                           ;menu.c: 23: pass = pass + input * pow(10, 15 - digit);
  3004  001C22  C0BF  F055         	movff	_input_old_pass$3114,pow@y
  3005  001C26  C0C0  F056         	movff	_input_old_pass$3114+1,pow@y+1
  3006  001C2A  C0C1  F057         	movff	_input_old_pass$3114+2,pow@y+2
  3007  001C2E  0E00               	movlw	0
  3008  001C30  6E52               	movwf	pow@x,c
  3009  001C32  0E20               	movlw	32
  3010  001C34  6E53               	movwf	pow@x+1,c
  3011  001C36  0E41               	movlw	65
  3012  001C38  6E54               	movwf	pow@x+2,c
  3013  001C3A  EC24  F00D         	call	_pow	;wreg free
  3014  001C3E  C052  F0C2         	movff	?_pow,_input_old_pass$3115
  3015  001C42  C053  F0C3         	movff	?_pow+1,_input_old_pass$3115+1
  3016  001C46  C054  F0C4         	movff	?_pow+2,_input_old_pass$3115+2
  3017                           
  3018                           ;menu.c: 23: pass = pass + input * pow(10, 15 - digit);
  3019  001C4A  C0C2  F010         	movff	_input_old_pass$3115,___ftmul@f2
  3020  001C4E  C0C3  F011         	movff	_input_old_pass$3115+1,___ftmul@f2+1
  3021  001C52  C0C4  F012         	movff	_input_old_pass$3115+2,___ftmul@f2+2
  3022  001C56  0100               	movlb	0	; () banked
  3023  001C58  51C7               	movf	input_old_pass@input& (0+255),w,b
  3024  001C5A  EC8B  F01C         	call	___lbtoft
  3025  001C5E  C009  F00D         	movff	?___lbtoft,___ftmul@f1
  3026  001C62  C00A  F00E         	movff	?___lbtoft+1,___ftmul@f1+1
  3027  001C66  C00B  F00F         	movff	?___lbtoft+2,___ftmul@f1+2
  3028  001C6A  EC03  F012         	call	___ftmul	;wreg free
  3029  001C6E  C00D  F01F         	movff	?___ftmul,___ftadd@f2
  3030  001C72  C00E  F020         	movff	?___ftmul+1,___ftadd@f2+1
  3031  001C76  C00F  F021         	movff	?___ftmul+2,___ftadd@f2+2
  3032  001C7A  C0C5  F009         	movff	input_old_pass@pass,___awtoft@c
  3033  001C7E  C0C6  F00A         	movff	input_old_pass@pass+1,___awtoft@c+1
  3034  001C82  ECAE  F01B         	call	___awtoft	;wreg free
  3035  001C86  C009  F01C         	movff	?___awtoft,___ftadd@f1
  3036  001C8A  C00A  F01D         	movff	?___awtoft+1,___ftadd@f1+1
  3037  001C8E  C00B  F01E         	movff	?___awtoft+2,___ftadd@f1+2
  3038  001C92  EC74  F00B         	call	___ftadd	;wreg free
  3039  001C96  C01C  F028         	movff	?___ftadd,___fttol@f1
  3040  001C9A  C01D  F029         	movff	?___ftadd+1,___fttol@f1+1
  3041  001C9E  C01E  F02A         	movff	?___ftadd+2,___fttol@f1+2
  3042  001CA2  EC82  F011         	call	___fttol	;wreg free
  3043  001CA6  C028  F0C5         	movff	?___fttol,input_old_pass@pass
  3044  001CAA  C029  F0C6         	movff	?___fttol+1,input_old_pass@pass+1
  3045                           
  3046                           ;menu.c: 24: lcd_gotoxy(digit,1);
  3047  001CAE  0E01               	movlw	1
  3048  001CB0  6E05               	movwf	lcd_gotoxy@y,c
  3049  001CB2  0100               	movlb	0	; () banked
  3050  001CB4  51C8               	movf	input_old_pass@digit& (0+255),w,b
  3051  001CB6  ECC2  F01C         	call	_lcd_gotoxy
  3052                           
  3053                           ;menu.c: 25: _delay_s(50);
  3054  001CBA  0E00               	movlw	0
  3055  001CBC  6E0A               	movwf	__delay_s@millis+1,c
  3056  001CBE  0E32               	movlw	50
  3057  001CC0  6E09               	movwf	__delay_s@millis,c
  3058  001CC2  EC63  F01A         	call	__delay_s	;wreg free
  3059                           
  3060                           ;menu.c: 26: clear_keyboard();
  3061  001CC6  EC41  F01D         	call	_clear_keyboard	;wreg free
  3062                           
  3063                           ;menu.c: 27: digit = digit +1;
  3064  001CCA  0E01               	movlw	1
  3065  001CCC  0100               	movlb	0	; () banked
  3066  001CCE  25C8               	addwf	input_old_pass@digit& (0+255),w,b
  3067  001CD0  0100               	movlb	0	; () banked
  3068  001CD2  6FC8               	movwf	input_old_pass@digit& (0+255),b
  3069  001CD4  0E00               	movlw	0
  3070  001CD6  0100               	movlb	0	; () banked
  3071  001CD8  21C9               	addwfc	(input_old_pass@digit+1)& (0+255),w,b
  3072  001CDA  0100               	movlb	0	; () banked
  3073  001CDC  6FC9               	movwf	(input_old_pass@digit+1)& (0+255),b
  3074                           
  3075                           ; BSR set to: 0
  3076                           ;menu.c: 28: input = 18;
  3077  001CDE  0E12               	movlw	18
  3078  001CE0  0100               	movlb	0	; () banked
  3079  001CE2  6FC7               	movwf	input_old_pass@input& (0+255),b
  3080  001CE4  D000               	goto	l4779
  3081  001CE6                     l4779:
  3082                           
  3083                           ; BSR set to: 0
  3084                           ;menu.c: 29: }
  3085                           ;menu.c: 31: input = read_keyboard();
  3086  001CE6  ECF2  F007         	call	_read_keyboard	;wreg free
  3087  001CEA                     L3:
  3088  001CEA  0100               	movlb	0	; () banked
  3089  001CEC  6FC7               	movwf	input_old_pass@input& (0+255),b
  3090  001CEE  D000               	goto	l4781
  3091  001CF0                     l4781:
  3092                           
  3093                           ; BSR set to: 0
  3094  001CF0  C0C8  F001         	movff	input_old_pass@digit,not_fill_pass@digit
  3095  001CF4  C0C9  F002         	movff	input_old_pass@digit+1,not_fill_pass@digit+1
  3096  001CF8  ECFE  F01C         	call	_not_fill_pass	;wreg free
  3097  001CFC  0900               	iorlw	0
  3098  001CFE  A4D8               	btfss	status,2,c
  3099  001D00  D771               	goto	l4759
  3100                           
  3101                           ;menu.c: 32: }
  3102                           ;menu.c: 33: return checkPass(pass);
  3103  001D02  C0C5  F001         	movff	input_old_pass@pass,checkPass@pass
  3104  001D06  C0C6  F002         	movff	input_old_pass@pass+1,checkPass@pass+1
  3105  001D0A  ECE5  F01C         	call	_checkPass	;wreg free
  3106  001D0E  0012               	return	
  3107  001D10  0012               	return		;funcret
  3108  001D12                     __end_of_input_old_pass:
  3109                           	opt stack 0
  3110                           tblptru	equ	0xFF8
  3111                           tblptrh	equ	0xFF7
  3112                           tblptrl	equ	0xFF6
  3113                           tablat	equ	0xFF5
  3114                           postinc0	equ	0xFEE
  3115                           wreg	equ	0xFE8
  3116                           postdec1	equ	0xFE5
  3117                           fsr1l	equ	0xFE1
  3118                           indf2	equ	0xFDF
  3119                           postinc2	equ	0xFDE
  3120                           postdec2	equ	0xFDD
  3121                           fsr2h	equ	0xFDA
  3122                           fsr2l	equ	0xFD9
  3123                           status	equ	0xFD8
  3124                           
  3125 ;; *************** function _checkPass *****************
  3126 ;; Defined at:
  3127 ;;		line 3 in file "config.c"
  3128 ;; Parameters:    Size  Location     Type
  3129 ;;  pass            2    0[COMRAM] int 
  3130 ;; Auto vars:     Size  Location     Type
  3131 ;;		None
  3132 ;; Return value:  Size  Location     Type
  3133 ;;                  1    wreg      unsigned char 
  3134 ;; Registers used:
  3135 ;;		wreg, status,2, status,0
  3136 ;; Tracked objects:
  3137 ;;		On entry : 0/0
  3138 ;;		On exit  : 0/0
  3139 ;;		Unchanged: 0/0
  3140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3141 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3144 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3145 ;;Total ram usage:        2 bytes
  3146 ;; Hardware stack levels used:    1
  3147 ;; This function calls:
  3148 ;;		Nothing
  3149 ;; This function is called by:
  3150 ;;		_review_code
  3151 ;;		_input_old_pass
  3152 ;; This function uses a non-reentrant model
  3153 ;;
  3154                           
  3155                           	psect	text15
  3156  0039CA                     __ptext15:
  3157                           	opt stack 0
  3158  0039CA                     _checkPass:
  3159                           	opt stack 27
  3160                           
  3161                           ;config.c: 4: return password == pass;
  3162                           
  3163                           ;incstack = 0
  3164  0039CA  5001               	movf	checkPass@pass,w,c
  3165  0039CC  0100               	movlb	0	; () banked
  3166  0039CE  19D6               	xorwf	_password& (0+255),w,b
  3167  0039D0  E107               	bnz	u4140
  3168  0039D2  5002               	movf	checkPass@pass+1,w,c
  3169  0039D4  0100               	movlb	0	; () banked
  3170  0039D6  19D7               	xorwf	(_password+1)& (0+255),w,b
  3171  0039D8  A4D8               	btfss	status,2,c
  3172  0039DA  D002               	goto	u4140
  3173  0039DC  0E01               	movlw	1
  3174  0039DE  0012               	return	
  3175  0039E0                     u4140:
  3176  0039E0  0E00               	movlw	0
  3177  0039E2  0012               	return	
  3178                           
  3179                           ; BSR set to: 0
  3180                           
  3181                           ; BSR set to: 0
  3182  0039E4  0012               	return		;funcret
  3183  0039E6                     __end_of_checkPass:
  3184                           	opt stack 0
  3185                           tblptru	equ	0xFF8
  3186                           tblptrh	equ	0xFF7
  3187                           tblptrl	equ	0xFF6
  3188                           tablat	equ	0xFF5
  3189                           postinc0	equ	0xFEE
  3190                           wreg	equ	0xFE8
  3191                           postdec1	equ	0xFE5
  3192                           fsr1l	equ	0xFE1
  3193                           indf2	equ	0xFDF
  3194                           postinc2	equ	0xFDE
  3195                           postdec2	equ	0xFDD
  3196                           fsr2h	equ	0xFDA
  3197                           fsr2l	equ	0xFD9
  3198                           status	equ	0xFD8
  3199                           
  3200 ;; *************** function _input_new_pass *****************
  3201 ;; Defined at:
  3202 ;;		line 54 in file "menu.c"
  3203 ;; Parameters:    Size  Location     Type
  3204 ;;		None
  3205 ;; Auto vars:     Size  Location     Type
  3206 ;;  digit           2   18[BANK0 ] short 
  3207 ;;  input           1   17[BANK0 ] unsigned char 
  3208 ;; Return value:  Size  Location     Type
  3209 ;;		None               void
  3210 ;; Registers used:
  3211 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3212 ;; Tracked objects:
  3213 ;;		On entry : 0/0
  3214 ;;		On exit  : 0/0
  3215 ;;		Unchanged: 0/0
  3216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3218 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3219 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3220 ;;      Totals:         2       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3221 ;;Total ram usage:       11 bytes
  3222 ;; Hardware stack levels used:    1
  3223 ;; Hardware stack levels required when called:    6
  3224 ;; This function calls:
  3225 ;;		___awtoft
  3226 ;;		___ftadd
  3227 ;;		___ftmul
  3228 ;;		___fttol
  3229 ;;		___lbtoft
  3230 ;;		__delay_s
  3231 ;;		_clear_keyboard
  3232 ;;		_lcd_gotoxy
  3233 ;;		_not_fill_pass
  3234 ;;		_pow
  3235 ;;		_read_keyboard
  3236 ;; This function is called by:
  3237 ;;		_ver_opcion_cambio
  3238 ;; This function uses a non-reentrant model
  3239 ;;
  3240                           
  3241                           	psect	text16
  3242  001F9E                     __ptext16:
  3243                           	opt stack 0
  3244  001F9E                     _input_new_pass:
  3245                           	opt stack 22
  3246                           
  3247                           ;menu.c: 55: short digit = 12;
  3248                           
  3249                           ; BSR set to: 0
  3250                           ;incstack = 0
  3251  001F9E  0E00               	movlw	0
  3252  001FA0  0100               	movlb	0	; () banked
  3253  001FA2  6FC7               	movwf	(input_new_pass@digit+1)& (0+255),b
  3254  001FA4  0E0C               	movlw	12
  3255  001FA6  6FC6               	movwf	input_new_pass@digit& (0+255),b
  3256                           
  3257                           ;menu.c: 56: newpass = 0;
  3258  001FA8  0E00               	movlw	0
  3259  001FAA  0100               	movlb	0	; () banked
  3260  001FAC  6F93               	movwf	(_newpass+1)& (0+255),b
  3261  001FAE  0E00               	movlw	0
  3262  001FB0  6F92               	movwf	_newpass& (0+255),b
  3263                           
  3264                           ; BSR set to: 0
  3265                           ;menu.c: 57: char input = read_keyboard();
  3266  001FB2  ECF2  F007         	call	_read_keyboard	;wreg free
  3267  001FB6  D083               	goto	L4
  3268  001FB8                     l4807:
  3269                           
  3270                           ;menu.c: 59: if(0<input && input<10){
  3271  001FB8  0100               	movlb	0	; () banked
  3272  001FBA  51C5               	movf	input_new_pass@input& (0+255),w,b
  3273  001FBC  0100               	movlb	0	; () banked
  3274  001FBE  B4D8               	btfsc	status,2,c
  3275  001FC0  D07C               	goto	l4827
  3276                           
  3277                           ; BSR set to: 0
  3278  001FC2  0E0A               	movlw	10
  3279  001FC4  0100               	movlb	0	; () banked
  3280  001FC6  61C5               	cpfslt	input_new_pass@input& (0+255),b
  3281  001FC8  D078               	goto	l4827
  3282                           
  3283                           ; BSR set to: 0
  3284                           ;menu.c: 60: newpass = newpass + input * pow(10, 15 - digit);
  3285  001FCA  C0C6  F058         	movff	input_new_pass@digit,??_input_new_pass
  3286  001FCE  C0C7  F059         	movff	input_new_pass@digit+1,??_input_new_pass+1
  3287  001FD2  1E58               	comf	??_input_new_pass,f,c
  3288  001FD4  1E59               	comf	??_input_new_pass+1,f,c
  3289  001FD6  4A58               	infsnz	??_input_new_pass,f,c
  3290  001FD8  2A59               	incf	??_input_new_pass+1,f,c
  3291  001FDA  0E0F               	movlw	15
  3292  001FDC  2458               	addwf	??_input_new_pass,w,c
  3293  001FDE  6E09               	movwf	___awtoft@c,c
  3294  001FE0  0E00               	movlw	0
  3295  001FE2  2059               	addwfc	??_input_new_pass+1,w,c
  3296  001FE4  6E0A               	movwf	___awtoft@c+1,c
  3297  001FE6  ECAE  F01B         	call	___awtoft	;wreg free
  3298  001FEA  C009  F0BF         	movff	?___awtoft,_input_new_pass$3116
  3299  001FEE  C00A  F0C0         	movff	?___awtoft+1,_input_new_pass$3116+1
  3300  001FF2  C00B  F0C1         	movff	?___awtoft+2,_input_new_pass$3116+2
  3301                           
  3302                           ;menu.c: 60: newpass = newpass + input * pow(10, 15 - digit);
  3303  001FF6  C0BF  F055         	movff	_input_new_pass$3116,pow@y
  3304  001FFA  C0C0  F056         	movff	_input_new_pass$3116+1,pow@y+1
  3305  001FFE  C0C1  F057         	movff	_input_new_pass$3116+2,pow@y+2
  3306  002002  0E00               	movlw	0
  3307  002004  6E52               	movwf	pow@x,c
  3308  002006  0E20               	movlw	32
  3309  002008  6E53               	movwf	pow@x+1,c
  3310  00200A  0E41               	movlw	65
  3311  00200C  6E54               	movwf	pow@x+2,c
  3312  00200E  EC24  F00D         	call	_pow	;wreg free
  3313  002012  C052  F0C2         	movff	?_pow,_input_new_pass$3117
  3314  002016  C053  F0C3         	movff	?_pow+1,_input_new_pass$3117+1
  3315  00201A  C054  F0C4         	movff	?_pow+2,_input_new_pass$3117+2
  3316                           
  3317                           ;menu.c: 60: newpass = newpass + input * pow(10, 15 - digit);
  3318  00201E  C0C2  F010         	movff	_input_new_pass$3117,___ftmul@f2
  3319  002022  C0C3  F011         	movff	_input_new_pass$3117+1,___ftmul@f2+1
  3320  002026  C0C4  F012         	movff	_input_new_pass$3117+2,___ftmul@f2+2
  3321  00202A  0100               	movlb	0	; () banked
  3322  00202C  51C5               	movf	input_new_pass@input& (0+255),w,b
  3323  00202E  EC8B  F01C         	call	___lbtoft
  3324  002032  C009  F00D         	movff	?___lbtoft,___ftmul@f1
  3325  002036  C00A  F00E         	movff	?___lbtoft+1,___ftmul@f1+1
  3326  00203A  C00B  F00F         	movff	?___lbtoft+2,___ftmul@f1+2
  3327  00203E  EC03  F012         	call	___ftmul	;wreg free
  3328  002042  C00D  F01F         	movff	?___ftmul,___ftadd@f2
  3329  002046  C00E  F020         	movff	?___ftmul+1,___ftadd@f2+1
  3330  00204A  C00F  F021         	movff	?___ftmul+2,___ftadd@f2+2
  3331  00204E  C092  F009         	movff	_newpass,___awtoft@c
  3332  002052  C093  F00A         	movff	_newpass+1,___awtoft@c+1
  3333  002056  ECAE  F01B         	call	___awtoft	;wreg free
  3334  00205A  C009  F01C         	movff	?___awtoft,___ftadd@f1
  3335  00205E  C00A  F01D         	movff	?___awtoft+1,___ftadd@f1+1
  3336  002062  C00B  F01E         	movff	?___awtoft+2,___ftadd@f1+2
  3337  002066  EC74  F00B         	call	___ftadd	;wreg free
  3338  00206A  C01C  F028         	movff	?___ftadd,___fttol@f1
  3339  00206E  C01D  F029         	movff	?___ftadd+1,___fttol@f1+1
  3340  002072  C01E  F02A         	movff	?___ftadd+2,___fttol@f1+2
  3341  002076  EC82  F011         	call	___fttol	;wreg free
  3342  00207A  C028  F092         	movff	?___fttol,_newpass
  3343  00207E  C029  F093         	movff	?___fttol+1,_newpass+1
  3344                           
  3345                           ;menu.c: 61: lcd_gotoxy(digit,2);
  3346  002082  0E02               	movlw	2
  3347  002084  6E05               	movwf	lcd_gotoxy@y,c
  3348  002086  0100               	movlb	0	; () banked
  3349  002088  51C6               	movf	input_new_pass@digit& (0+255),w,b
  3350  00208A  ECC2  F01C         	call	_lcd_gotoxy
  3351                           
  3352                           ;menu.c: 62: _delay_s(50);
  3353  00208E  0E00               	movlw	0
  3354  002090  6E0A               	movwf	__delay_s@millis+1,c
  3355  002092  0E32               	movlw	50
  3356  002094  6E09               	movwf	__delay_s@millis,c
  3357  002096  EC63  F01A         	call	__delay_s	;wreg free
  3358                           
  3359                           ;menu.c: 63: clear_keyboard();
  3360  00209A  EC41  F01D         	call	_clear_keyboard	;wreg free
  3361                           
  3362                           ;menu.c: 64: digit = digit +1;
  3363  00209E  0E01               	movlw	1
  3364  0020A0  0100               	movlb	0	; () banked
  3365  0020A2  25C6               	addwf	input_new_pass@digit& (0+255),w,b
  3366  0020A4  0100               	movlb	0	; () banked
  3367  0020A6  6FC6               	movwf	input_new_pass@digit& (0+255),b
  3368  0020A8  0E00               	movlw	0
  3369  0020AA  0100               	movlb	0	; () banked
  3370  0020AC  21C7               	addwfc	(input_new_pass@digit+1)& (0+255),w,b
  3371  0020AE  0100               	movlb	0	; () banked
  3372  0020B0  6FC7               	movwf	(input_new_pass@digit+1)& (0+255),b
  3373                           
  3374                           ; BSR set to: 0
  3375                           ;menu.c: 65: input = 18;
  3376  0020B2  0E12               	movlw	18
  3377  0020B4  0100               	movlb	0	; () banked
  3378  0020B6  6FC5               	movwf	input_new_pass@input& (0+255),b
  3379  0020B8  D000               	goto	l4827
  3380  0020BA                     l4827:
  3381                           
  3382                           ; BSR set to: 0
  3383                           ;menu.c: 66: }
  3384                           ;menu.c: 67: input = read_keyboard();
  3385  0020BA  ECF2  F007         	call	_read_keyboard	;wreg free
  3386  0020BE                     L4:
  3387  0020BE  0100               	movlb	0	; () banked
  3388  0020C0  6FC5               	movwf	input_new_pass@input& (0+255),b
  3389  0020C2  D000               	goto	l4829
  3390  0020C4                     l4829:
  3391                           
  3392                           ; BSR set to: 0
  3393  0020C4  C0C6  F001         	movff	input_new_pass@digit,not_fill_pass@digit
  3394  0020C8  C0C7  F002         	movff	input_new_pass@digit+1,not_fill_pass@digit+1
  3395  0020CC  ECFE  F01C         	call	_not_fill_pass	;wreg free
  3396  0020D0  0900               	iorlw	0
  3397  0020D2  A4D8               	btfss	status,2,c
  3398  0020D4  D771               	goto	l4807
  3399  0020D6  0012               	return		;funcret
  3400  0020D8                     __end_of_input_new_pass:
  3401                           	opt stack 0
  3402                           tblptru	equ	0xFF8
  3403                           tblptrh	equ	0xFF7
  3404                           tblptrl	equ	0xFF6
  3405                           tablat	equ	0xFF5
  3406                           postinc0	equ	0xFEE
  3407                           wreg	equ	0xFE8
  3408                           postdec1	equ	0xFE5
  3409                           fsr1l	equ	0xFE1
  3410                           indf2	equ	0xFDF
  3411                           postinc2	equ	0xFDE
  3412                           postdec2	equ	0xFDD
  3413                           fsr2h	equ	0xFDA
  3414                           fsr2l	equ	0xFD9
  3415                           status	equ	0xFD8
  3416                           
  3417 ;; *************** function _pow *****************
  3418 ;; Defined at:
  3419 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\pow.c"
  3420 ;; Parameters:    Size  Location     Type
  3421 ;;  x               3   81[COMRAM] unsigned char 
  3422 ;;  y               3   84[COMRAM] unsigned char 
  3423 ;; Auto vars:     Size  Location     Type
  3424 ;;  yi              4    7[BANK0 ] unsigned long 
  3425 ;;  sign            1    6[BANK0 ] unsigned char 
  3426 ;; Return value:  Size  Location     Type
  3427 ;;                  3   81[COMRAM] unsigned char 
  3428 ;; Registers used:
  3429 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3430 ;; Tracked objects:
  3431 ;;		On entry : 0/0
  3432 ;;		On exit  : 0/0
  3433 ;;		Unchanged: 0/0
  3434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3435 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3436 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3438 ;;      Totals:         6      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3439 ;;Total ram usage:       17 bytes
  3440 ;; Hardware stack levels used:    1
  3441 ;; Hardware stack levels required when called:    4
  3442 ;; This function calls:
  3443 ;;		___ftge
  3444 ;;		___ftmul
  3445 ;;		___ftneg
  3446 ;;		___fttol
  3447 ;;		___lltoft
  3448 ;;		_exp
  3449 ;;		_log
  3450 ;; This function is called by:
  3451 ;;		_obtain_pass
  3452 ;;		_input_old_pass
  3453 ;;		_input_new_pass
  3454 ;; This function uses a non-reentrant model
  3455 ;;
  3456                           
  3457                           	psect	text17
  3458  001A48                     __ptext17:
  3459                           	opt stack 0
  3460  001A48                     _pow:
  3461                           	opt stack 23
  3462                           
  3463                           ;incstack = 0
  3464  001A48  0E00               	movlw	0
  3465  001A4A  0100               	movlb	0	; () banked
  3466  001A4C  6FBA               	movwf	pow@sign& (0+255),b
  3467                           
  3468                           ; BSR set to: 0
  3469  001A4E  5052               	movf	pow@x,w,c
  3470  001A50  1053               	iorwf	pow@x+1,w,c
  3471  001A52  1054               	iorwf	pow@x+2,w,c
  3472  001A54  A4D8               	btfss	status,2,c
  3473  001A56  D01C               	goto	l4519
  3474                           
  3475                           ; BSR set to: 0
  3476  001A58  0E00               	movlw	0
  3477  001A5A  6E01               	movwf	___ftge@ff1,c
  3478  001A5C  0E00               	movlw	0
  3479  001A5E  6E02               	movwf	___ftge@ff1+1,c
  3480  001A60  0E00               	movlw	0
  3481  001A62  6E03               	movwf	___ftge@ff1+2,c
  3482  001A64  C055  F004         	movff	pow@y,___ftge@ff2
  3483  001A68  C056  F005         	movff	pow@y+1,___ftge@ff2+1
  3484  001A6C  C057  F006         	movff	pow@y+2,___ftge@ff2+2
  3485  001A70  EC42  F016         	call	___ftge	;wreg free
  3486  001A74  A0D8               	btfss	status,0,c
  3487  001A76  D005               	goto	l1664
  3488  001A78  0E00               	movlw	0
  3489  001A7A  0100               	movlb	0	; () banked
  3490  001A7C  6F85               	movwf	(_errno+1)& (0+255),b
  3491  001A7E  0E21               	movlw	33
  3492  001A80  6F84               	movwf	_errno& (0+255),b
  3493  001A82                     l1664:
  3494  001A82  0E00               	movlw	0
  3495  001A84  6E52               	movwf	?_pow,c
  3496  001A86  0E00               	movlw	0
  3497  001A88  6E53               	movwf	?_pow+1,c
  3498  001A8A  0E00               	movlw	0
  3499  001A8C  6E54               	movwf	?_pow+2,c
  3500  001A8E  0012               	return	
  3501  001A90                     l4519:
  3502  001A90  5055               	movf	pow@y,w,c
  3503  001A92  1056               	iorwf	pow@y+1,w,c
  3504  001A94  1057               	iorwf	pow@y+2,w,c
  3505  001A96  A4D8               	btfss	status,2,c
  3506  001A98  D007               	goto	l4525
  3507  001A9A  0E00               	movlw	0
  3508  001A9C  6E52               	movwf	?_pow,c
  3509  001A9E  0E80               	movlw	128
  3510  001AA0  6E53               	movwf	?_pow+1,c
  3511  001AA2  0E3F               	movlw	63
  3512  001AA4  6E54               	movwf	?_pow+2,c
  3513  001AA6  0012               	return	
  3514  001AA8                     l4525:
  3515  001AA8  AE54               	btfss	pow@x+2,7,c
  3516  001AAA  D044               	goto	l4537
  3517  001AAC  C055  F028         	movff	pow@y,___fttol@f1
  3518  001AB0  C056  F029         	movff	pow@y+1,___fttol@f1+1
  3519  001AB4  C057  F02A         	movff	pow@y+2,___fttol@f1+2
  3520  001AB8  EC82  F011         	call	___fttol	;wreg free
  3521  001ABC  C028  F0BB         	movff	?___fttol,pow@yi
  3522  001AC0  C029  F0BC         	movff	?___fttol+1,pow@yi+1
  3523  001AC4  C02A  F0BD         	movff	?___fttol+2,pow@yi+2
  3524  001AC8  C02B  F0BE         	movff	?___fttol+3,pow@yi+3
  3525  001ACC  C0BB  F009         	movff	pow@yi,___lltoft@c
  3526  001AD0  C0BC  F00A         	movff	pow@yi+1,___lltoft@c+1
  3527  001AD4  C0BD  F00B         	movff	pow@yi+2,___lltoft@c+2
  3528  001AD8  C0BE  F00C         	movff	pow@yi+3,___lltoft@c+3
  3529  001ADC  EC05  F01A         	call	___lltoft	;wreg free
  3530  001AE0  5055               	movf	pow@y,w,c
  3531  001AE2  1809               	xorwf	?___lltoft,w,c
  3532  001AE4  E107               	bnz	u4200
  3533  001AE6  5056               	movf	pow@y+1,w,c
  3534  001AE8  180A               	xorwf	?___lltoft+1,w,c
  3535  001AEA  E104               	bnz	u4200
  3536  001AEC  5057               	movf	pow@y+2,w,c
  3537  001AEE  180B               	xorwf	?___lltoft+2,w,c
  3538  001AF0  B4D8               	btfsc	status,2,c
  3539  001AF2  D00C               	goto	l4533
  3540  001AF4                     u4200:
  3541  001AF4  0E00               	movlw	0
  3542  001AF6  0100               	movlb	0	; () banked
  3543  001AF8  6F85               	movwf	(_errno+1)& (0+255),b
  3544  001AFA  0E21               	movlw	33
  3545  001AFC  6F84               	movwf	_errno& (0+255),b
  3546  001AFE  0E00               	movlw	0
  3547  001B00  6E52               	movwf	?_pow,c
  3548  001B02  0E00               	movlw	0
  3549  001B04  6E53               	movwf	?_pow+1,c
  3550  001B06  0E00               	movlw	0
  3551  001B08  6E54               	movwf	?_pow+2,c
  3552                           
  3553                           ; BSR set to: 0
  3554  001B0A  0012               	return	
  3555  001B0C                     l4533:
  3556  001B0C  0100               	movlb	0	; () banked
  3557  001B0E  51BB               	movf	pow@yi& (0+255),w,b
  3558  001B10  0B01               	andlw	1
  3559  001B12  0100               	movlb	0	; () banked
  3560  001B14  6FBA               	movwf	pow@sign& (0+255),b
  3561                           
  3562                           ; BSR set to: 0
  3563  001B16  C052  F001         	movff	pow@x,___ftneg@f1
  3564  001B1A  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  3565  001B1E  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  3566  001B22  ECB0  F01C         	call	___ftneg	;wreg free
  3567  001B26  C001  F052         	movff	?___ftneg,pow@x
  3568  001B2A  C002  F053         	movff	?___ftneg+1,pow@x+1
  3569  001B2E  C003  F054         	movff	?___ftneg+2,pow@x+2
  3570  001B32  D000               	goto	l4537
  3571  001B34                     l4537:
  3572  001B34  C052  F034         	movff	pow@x,log@x
  3573  001B38  C053  F035         	movff	pow@x+1,log@x+1
  3574  001B3C  C054  F036         	movff	pow@x+2,log@x+2
  3575  001B40  EC6C  F010         	call	_log	;wreg free
  3576  001B44  C034  F0B4         	movff	?_log,_pow$3118
  3577  001B48  C035  F0B5         	movff	?_log+1,_pow$3118+1
  3578  001B4C  C036  F0B6         	movff	?_log+2,_pow$3118+2
  3579  001B50  C0B4  F00D         	movff	_pow$3118,___ftmul@f1
  3580  001B54  C0B5  F00E         	movff	_pow$3118+1,___ftmul@f1+1
  3581  001B58  C0B6  F00F         	movff	_pow$3118+2,___ftmul@f1+2
  3582  001B5C  C055  F010         	movff	pow@y,___ftmul@f2
  3583  001B60  C056  F011         	movff	pow@y+1,___ftmul@f2+1
  3584  001B64  C057  F012         	movff	pow@y+2,___ftmul@f2+2
  3585  001B68  EC03  F012         	call	___ftmul	;wreg free
  3586  001B6C  C00D  F0B7         	movff	?___ftmul,_pow$3119
  3587  001B70  C00E  F0B8         	movff	?___ftmul+1,_pow$3119+1
  3588  001B74  C00F  F0B9         	movff	?___ftmul+2,_pow$3119+2
  3589  001B78  C0B7  F049         	movff	_pow$3119,exp@x
  3590  001B7C  C0B8  F04A         	movff	_pow$3119+1,exp@x+1
  3591  001B80  C0B9  F04B         	movff	_pow$3119+2,exp@x+2
  3592  001B84  EC80  F00A         	call	_exp	;wreg free
  3593  001B88  C049  F052         	movff	?_exp,pow@x
  3594  001B8C  C04A  F053         	movff	?_exp+1,pow@x+1
  3595  001B90  C04B  F054         	movff	?_exp+2,pow@x+2
  3596  001B94  0100               	movlb	0	; () banked
  3597  001B96  51BA               	movf	pow@sign& (0+255),w,b
  3598  001B98  0100               	movlb	0	; () banked
  3599  001B9A  B4D8               	btfsc	status,2,c
  3600  001B9C  D00F               	goto	l1669
  3601                           
  3602                           ; BSR set to: 0
  3603  001B9E  C052  F001         	movff	pow@x,___ftneg@f1
  3604  001BA2  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  3605  001BA6  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  3606  001BAA  ECB0  F01C         	call	___ftneg	;wreg free
  3607  001BAE  C001  F052         	movff	?___ftneg,?_pow
  3608  001BB2  C002  F053         	movff	?___ftneg+1,?_pow+1
  3609  001BB6  C003  F054         	movff	?___ftneg+2,?_pow+2
  3610  001BBA  0012               	return	
  3611  001BBC                     l1669:
  3612                           
  3613                           ; BSR set to: 0
  3614  001BBC  C052  F052         	movff	pow@x,?_pow
  3615  001BC0  C053  F053         	movff	pow@x+1,?_pow+1
  3616  001BC4  C054  F054         	movff	pow@x+2,?_pow+2
  3617  001BC8  0012               	return		;funcret
  3618  001BCA                     __end_of_pow:
  3619                           	opt stack 0
  3620                           tblptru	equ	0xFF8
  3621                           tblptrh	equ	0xFF7
  3622                           tblptrl	equ	0xFF6
  3623                           tablat	equ	0xFF5
  3624                           postinc0	equ	0xFEE
  3625                           wreg	equ	0xFE8
  3626                           postdec1	equ	0xFE5
  3627                           fsr1l	equ	0xFE1
  3628                           indf2	equ	0xFDF
  3629                           postinc2	equ	0xFDE
  3630                           postdec2	equ	0xFDD
  3631                           fsr2h	equ	0xFDA
  3632                           fsr2l	equ	0xFD9
  3633                           status	equ	0xFD8
  3634                           
  3635 ;; *************** function _log *****************
  3636 ;; Defined at:
  3637 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\log.c"
  3638 ;; Parameters:    Size  Location     Type
  3639 ;;  x               3   51[COMRAM] unsigned char 
  3640 ;; Auto vars:     Size  Location     Type
  3641 ;;  exponent        2   54[COMRAM] int 
  3642 ;; Return value:  Size  Location     Type
  3643 ;;                  3   51[COMRAM] int 
  3644 ;; Registers used:
  3645 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3646 ;; Tracked objects:
  3647 ;;		On entry : 0/0
  3648 ;;		On exit  : 0/0
  3649 ;;		Unchanged: 0/0
  3650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3651 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3652 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3654 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3655 ;;Total ram usage:        5 bytes
  3656 ;; Hardware stack levels used:    1
  3657 ;; Hardware stack levels required when called:    3
  3658 ;; This function calls:
  3659 ;;		___awtoft
  3660 ;;		___ftadd
  3661 ;;		___ftmul
  3662 ;;		_eval_poly
  3663 ;;		_frexp
  3664 ;; This function is called by:
  3665 ;;		_pow
  3666 ;; This function uses a non-reentrant model
  3667 ;;
  3668                           
  3669                           	psect	text18
  3670  0020D8                     __ptext18:
  3671                           	opt stack 0
  3672  0020D8                     _log:
  3673                           	opt stack 23
  3674                           
  3675                           ;incstack = 0
  3676  0020D8  AE36               	btfss	log@x+2,7,c
  3677  0020DA  D00C               	goto	l4277
  3678  0020DC  0E00               	movlw	0
  3679  0020DE  0100               	movlb	0	; () banked
  3680  0020E0  6F85               	movwf	(_errno+1)& (0+255),b
  3681  0020E2  0E21               	movlw	33
  3682  0020E4  6F84               	movwf	_errno& (0+255),b
  3683  0020E6  0E00               	movlw	0
  3684  0020E8  6E34               	movwf	?_log,c
  3685  0020EA  0E00               	movlw	0
  3686  0020EC  6E35               	movwf	?_log+1,c
  3687  0020EE  0E00               	movlw	0
  3688  0020F0  6E36               	movwf	?_log+2,c
  3689                           
  3690                           ; BSR set to: 0
  3691  0020F2  0012               	return	
  3692  0020F4                     l4277:
  3693  0020F4  5034               	movf	log@x,w,c
  3694  0020F6  1035               	iorwf	log@x+1,w,c
  3695  0020F8  1036               	iorwf	log@x+2,w,c
  3696  0020FA  A4D8               	btfss	status,2,c
  3697  0020FC  D00C               	goto	l4283
  3698  0020FE  0E00               	movlw	0
  3699  002100  0100               	movlb	0	; () banked
  3700  002102  6F85               	movwf	(_errno+1)& (0+255),b
  3701  002104  0E22               	movlw	34
  3702  002106  6F84               	movwf	_errno& (0+255),b
  3703  002108  0E00               	movlw	0
  3704  00210A  6E34               	movwf	?_log,c
  3705  00210C  0E00               	movlw	0
  3706  00210E  6E35               	movwf	?_log+1,c
  3707  002110  0E00               	movlw	0
  3708  002112  6E36               	movwf	?_log+2,c
  3709                           
  3710                           ; BSR set to: 0
  3711  002114  0012               	return	
  3712  002116                     l4283:
  3713  002116  0E00               	movlw	0
  3714  002118  6E10               	movwf	___ftmul@f2,c
  3715  00211A  0E00               	movlw	0
  3716  00211C  6E11               	movwf	___ftmul@f2+1,c
  3717  00211E  0E40               	movlw	64
  3718  002120  6E12               	movwf	___ftmul@f2+2,c
  3719  002122  0E37               	movlw	low log@exponent
  3720  002124  6E04               	movwf	frexp@eptr,c
  3721  002126  0E00               	movlw	high log@exponent
  3722  002128  6E05               	movwf	frexp@eptr+1,c
  3723  00212A  C034  F001         	movff	log@x,frexp@value
  3724  00212E  C035  F002         	movff	log@x+1,frexp@value+1
  3725  002132  C036  F003         	movff	log@x+2,frexp@value+2
  3726  002136  ECD8  F016         	call	_frexp	;wreg free
  3727  00213A  C001  F00D         	movff	?_frexp,___ftmul@f1
  3728  00213E  C002  F00E         	movff	?_frexp+1,___ftmul@f1+1
  3729  002142  C003  F00F         	movff	?_frexp+2,___ftmul@f1+2
  3730  002146  EC03  F012         	call	___ftmul	;wreg free
  3731  00214A  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  3732  00214E  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  3733  002152  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  3734  002156  0E00               	movlw	0
  3735  002158  6E1F               	movwf	___ftadd@f2,c
  3736  00215A  0E80               	movlw	128
  3737  00215C  6E20               	movwf	___ftadd@f2+1,c
  3738  00215E  0EBF               	movlw	191
  3739  002160  6E21               	movwf	___ftadd@f2+2,c
  3740  002162  EC74  F00B         	call	___ftadd	;wreg free
  3741  002166  C01C  F034         	movff	?___ftadd,log@x
  3742  00216A  C01D  F035         	movff	?___ftadd+1,log@x+1
  3743  00216E  C01E  F036         	movff	?___ftadd+2,log@x+2
  3744  002172  0637               	decf	log@exponent,f,c
  3745  002174  A0D8               	btfss	status,0,c
  3746  002176  0638               	decf	log@exponent+1,f,c
  3747  002178  C034  F028         	movff	log@x,eval_poly@x
  3748  00217C  C035  F029         	movff	log@x+1,eval_poly@x+1
  3749  002180  C036  F02A         	movff	log@x+2,eval_poly@x+2
  3750  002184  0E2D               	movlw	low log@coeff
  3751  002186  6E2B               	movwf	eval_poly@d,c
  3752  002188  0E0F               	movlw	high log@coeff
  3753  00218A  6E2C               	movwf	eval_poly@d+1,c
  3754  00218C  0E00               	movlw	0
  3755  00218E  6E2E               	movwf	eval_poly@n+1,c
  3756  002190  0E08               	movlw	8
  3757  002192  6E2D               	movwf	eval_poly@n,c
  3758  002194  EC29  F015         	call	_eval_poly	;wreg free
  3759  002198  C028  F034         	movff	?_eval_poly,log@x
  3760  00219C  C029  F035         	movff	?_eval_poly+1,log@x+1
  3761  0021A0  C02A  F036         	movff	?_eval_poly+2,log@x+2
  3762  0021A4  0E72               	movlw	114
  3763  0021A6  6E10               	movwf	___ftmul@f2,c
  3764  0021A8  0E31               	movlw	49
  3765  0021AA  6E11               	movwf	___ftmul@f2+1,c
  3766  0021AC  0E3F               	movlw	63
  3767  0021AE  6E12               	movwf	___ftmul@f2+2,c
  3768  0021B0  C037  F009         	movff	log@exponent,___awtoft@c
  3769  0021B4  C038  F00A         	movff	log@exponent+1,___awtoft@c+1
  3770  0021B8  ECAE  F01B         	call	___awtoft	;wreg free
  3771  0021BC  C009  F00D         	movff	?___awtoft,___ftmul@f1
  3772  0021C0  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  3773  0021C4  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  3774  0021C8  EC03  F012         	call	___ftmul	;wreg free
  3775  0021CC  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  3776  0021D0  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  3777  0021D4  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  3778  0021D8  C034  F01F         	movff	log@x,___ftadd@f2
  3779  0021DC  C035  F020         	movff	log@x+1,___ftadd@f2+1
  3780  0021E0  C036  F021         	movff	log@x+2,___ftadd@f2+2
  3781  0021E4  EC74  F00B         	call	___ftadd	;wreg free
  3782  0021E8  C01C  F034         	movff	?___ftadd,?_log
  3783  0021EC  C01D  F035         	movff	?___ftadd+1,?_log+1
  3784  0021F0  C01E  F036         	movff	?___ftadd+2,?_log+2
  3785  0021F4  0012               	return	
  3786  0021F6  0012               	return		;funcret
  3787  0021F8                     __end_of_log:
  3788                           	opt stack 0
  3789                           tblptru	equ	0xFF8
  3790                           tblptrh	equ	0xFF7
  3791                           tblptrl	equ	0xFF6
  3792                           tablat	equ	0xFF5
  3793                           postinc0	equ	0xFEE
  3794                           wreg	equ	0xFE8
  3795                           postdec1	equ	0xFE5
  3796                           fsr1l	equ	0xFE1
  3797                           indf2	equ	0xFDF
  3798                           postinc2	equ	0xFDE
  3799                           postdec2	equ	0xFDD
  3800                           fsr2h	equ	0xFDA
  3801                           fsr2l	equ	0xFD9
  3802                           status	equ	0xFD8
  3803                           
  3804 ;; *************** function _exp *****************
  3805 ;; Defined at:
  3806 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\exp.c"
  3807 ;; Parameters:    Size  Location     Type
  3808 ;;  x               3   72[COMRAM] int 
  3809 ;; Auto vars:     Size  Location     Type
  3810 ;;  exponent        2   78[COMRAM] int 
  3811 ;;  sign            1   80[COMRAM] unsigned char 
  3812 ;; Return value:  Size  Location     Type
  3813 ;;                  3   72[COMRAM] unsigned char 
  3814 ;; Registers used:
  3815 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3816 ;; Tracked objects:
  3817 ;;		On entry : 0/0
  3818 ;;		On exit  : 0/0
  3819 ;;		Unchanged: 0/0
  3820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3821 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3822 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3824 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3825 ;;Total ram usage:        9 bytes
  3826 ;; Hardware stack levels used:    1
  3827 ;; Hardware stack levels required when called:    3
  3828 ;; This function calls:
  3829 ;;		___awtoft
  3830 ;;		___ftdiv
  3831 ;;		___ftge
  3832 ;;		___ftmul
  3833 ;;		___ftneg
  3834 ;;		___ftsub
  3835 ;;		___fttol
  3836 ;;		_eval_poly
  3837 ;;		_floor
  3838 ;;		_ldexp
  3839 ;; This function is called by:
  3840 ;;		_pow
  3841 ;; This function uses a non-reentrant model
  3842 ;;
  3843                           
  3844                           	psect	text19
  3845  001500                     __ptext19:
  3846                           	opt stack 0
  3847  001500                     _exp:
  3848                           	opt stack 23
  3849                           
  3850                           ;incstack = 0
  3851  001500  5049               	movf	exp@x,w,c
  3852  001502  104A               	iorwf	exp@x+1,w,c
  3853  001504  104B               	iorwf	exp@x+2,w,c
  3854  001506  A4D8               	btfss	status,2,c
  3855  001508  D007               	goto	l4299
  3856  00150A  0E00               	movlw	0
  3857  00150C  6E49               	movwf	?_exp,c
  3858  00150E  0E80               	movlw	128
  3859  001510  6E4A               	movwf	?_exp+1,c
  3860  001512  0E3F               	movlw	63
  3861  001514  6E4B               	movwf	?_exp+2,c
  3862  001516  0012               	return	
  3863  001518                     l4299:
  3864  001518  0E72               	movlw	114
  3865  00151A  6E01               	movwf	___ftge@ff1,c
  3866  00151C  0E31               	movlw	49
  3867  00151E  6E02               	movwf	___ftge@ff1+1,c
  3868  001520  0E44               	movlw	68
  3869  001522  6E03               	movwf	___ftge@ff1+2,c
  3870  001524  C049  F004         	movff	exp@x,___ftge@ff2
  3871  001528  C04A  F005         	movff	exp@x+1,___ftge@ff2+1
  3872  00152C  C04B  F006         	movff	exp@x+2,___ftge@ff2+2
  3873  001530  EC42  F016         	call	___ftge	;wreg free
  3874  001534  B0D8               	btfsc	status,0,c
  3875  001536  D00C               	goto	l4305
  3876  001538  0E00               	movlw	0
  3877  00153A  0100               	movlb	0	; () banked
  3878  00153C  6F85               	movwf	(_errno+1)& (0+255),b
  3879  00153E  0E22               	movlw	34
  3880  001540  6F84               	movwf	_errno& (0+255),b
  3881  001542  0EFF               	movlw	255
  3882  001544  6E49               	movwf	?_exp,c
  3883  001546  0E7F               	movlw	127
  3884  001548  6E4A               	movwf	?_exp+1,c
  3885  00154A  0E7F               	movlw	127
  3886  00154C  6E4B               	movwf	?_exp+2,c
  3887                           
  3888                           ; BSR set to: 0
  3889  00154E  0012               	return	
  3890  001550                     l4305:
  3891  001550  C049  F001         	movff	exp@x,___ftge@ff1
  3892  001554  C04A  F002         	movff	exp@x+1,___ftge@ff1+1
  3893  001558  C04B  F003         	movff	exp@x+2,___ftge@ff1+2
  3894  00155C  0E49               	movlw	73
  3895  00155E  6E04               	movwf	___ftge@ff2,c
  3896  001560  0E3A               	movlw	58
  3897  001562  6E05               	movwf	___ftge@ff2+1,c
  3898  001564  0EC4               	movlw	196
  3899  001566  6E06               	movwf	___ftge@ff2+2,c
  3900  001568  EC42  F016         	call	___ftge	;wreg free
  3901  00156C  B0D8               	btfsc	status,0,c
  3902  00156E  D00C               	goto	l4311
  3903  001570  0E00               	movlw	0
  3904  001572  0100               	movlb	0	; () banked
  3905  001574  6F85               	movwf	(_errno+1)& (0+255),b
  3906  001576  0E22               	movlw	34
  3907  001578  6F84               	movwf	_errno& (0+255),b
  3908  00157A  0E00               	movlw	0
  3909  00157C  6E49               	movwf	?_exp,c
  3910  00157E  0E00               	movlw	0
  3911  001580  6E4A               	movwf	?_exp+1,c
  3912  001582  0E00               	movlw	0
  3913  001584  6E4B               	movwf	?_exp+2,c
  3914                           
  3915                           ; BSR set to: 0
  3916  001586  0012               	return	
  3917  001588                     l4311:
  3918  001588  AE4B               	btfss	exp@x+2,7,c
  3919  00158A  D002               	goto	u3740
  3920  00158C  0E01               	movlw	1
  3921  00158E  D001               	goto	u3750
  3922  001590                     u3740:
  3923  001590  0E00               	movlw	0
  3924  001592                     u3750:
  3925  001592  6E51               	movwf	exp@sign,c
  3926  001594  5051               	movf	exp@sign,w,c
  3927  001596  B4D8               	btfsc	status,2,c
  3928  001598  D00E               	goto	l1688
  3929  00159A  C049  F001         	movff	exp@x,___ftneg@f1
  3930  00159E  C04A  F002         	movff	exp@x+1,___ftneg@f1+1
  3931  0015A2  C04B  F003         	movff	exp@x+2,___ftneg@f1+2
  3932  0015A6  ECB0  F01C         	call	___ftneg	;wreg free
  3933  0015AA  C001  F049         	movff	?___ftneg,exp@x
  3934  0015AE  C002  F04A         	movff	?___ftneg+1,exp@x+1
  3935  0015B2  C003  F04B         	movff	?___ftneg+2,exp@x+2
  3936  0015B6                     l1688:
  3937  0015B6  C049  F00D         	movff	exp@x,___ftmul@f1
  3938  0015BA  C04A  F00E         	movff	exp@x+1,___ftmul@f1+1
  3939  0015BE  C04B  F00F         	movff	exp@x+2,___ftmul@f1+2
  3940  0015C2  0EAA               	movlw	170
  3941  0015C4  6E10               	movwf	___ftmul@f2,c
  3942  0015C6  0EB8               	movlw	184
  3943  0015C8  6E11               	movwf	___ftmul@f2+1,c
  3944  0015CA  0E3F               	movlw	63
  3945  0015CC  6E12               	movwf	___ftmul@f2+2,c
  3946  0015CE  EC03  F012         	call	___ftmul	;wreg free
  3947  0015D2  C00D  F049         	movff	?___ftmul,exp@x
  3948  0015D6  C00E  F04A         	movff	?___ftmul+1,exp@x+1
  3949  0015DA  C00F  F04B         	movff	?___ftmul+2,exp@x+2
  3950  0015DE  C049  F041         	movff	exp@x,floor@x
  3951  0015E2  C04A  F042         	movff	exp@x+1,floor@x+1
  3952  0015E6  C04B  F043         	movff	exp@x+2,floor@x+2
  3953  0015EA  ECE1  F013         	call	_floor	;wreg free
  3954  0015EE  C041  F04C         	movff	?_floor,_exp$3120
  3955  0015F2  C042  F04D         	movff	?_floor+1,_exp$3120+1
  3956  0015F6  C043  F04E         	movff	?_floor+2,_exp$3120+2
  3957  0015FA  C04C  F028         	movff	_exp$3120,___fttol@f1
  3958  0015FE  C04D  F029         	movff	_exp$3120+1,___fttol@f1+1
  3959  001602  C04E  F02A         	movff	_exp$3120+2,___fttol@f1+2
  3960  001606  EC82  F011         	call	___fttol	;wreg free
  3961  00160A  C028  F04F         	movff	?___fttol,exp@exponent
  3962  00160E  C029  F050         	movff	?___fttol+1,exp@exponent+1
  3963  001612  C049  F028         	movff	exp@x,___ftsub@f1
  3964  001616  C04A  F029         	movff	exp@x+1,___ftsub@f1+1
  3965  00161A  C04B  F02A         	movff	exp@x+2,___ftsub@f1+2
  3966  00161E  C04F  F009         	movff	exp@exponent,___awtoft@c
  3967  001622  C050  F00A         	movff	exp@exponent+1,___awtoft@c+1
  3968  001626  ECAE  F01B         	call	___awtoft	;wreg free
  3969  00162A  C009  F02B         	movff	?___awtoft,___ftsub@f2
  3970  00162E  C00A  F02C         	movff	?___awtoft+1,___ftsub@f2+1
  3971  001632  C00B  F02D         	movff	?___awtoft+2,___ftsub@f2+2
  3972  001636  EC4E  F01B         	call	___ftsub	;wreg free
  3973  00163A  C028  F049         	movff	?___ftsub,exp@x
  3974  00163E  C029  F04A         	movff	?___ftsub+1,exp@x+1
  3975  001642  C02A  F04B         	movff	?___ftsub+2,exp@x+2
  3976  001646  C049  F028         	movff	exp@x,eval_poly@x
  3977  00164A  C04A  F029         	movff	exp@x+1,eval_poly@x+1
  3978  00164E  C04B  F02A         	movff	exp@x+2,eval_poly@x+2
  3979  001652  0E0F               	movlw	low exp@coeff
  3980  001654  6E2B               	movwf	eval_poly@d,c
  3981  001656  0E0F               	movlw	high exp@coeff
  3982  001658  6E2C               	movwf	eval_poly@d+1,c
  3983  00165A  0E00               	movlw	0
  3984  00165C  6E2E               	movwf	eval_poly@n+1,c
  3985  00165E  0E09               	movlw	9
  3986  001660  6E2D               	movwf	eval_poly@n,c
  3987  001662  EC29  F015         	call	_eval_poly	;wreg free
  3988  001666  C028  F034         	movff	?_eval_poly,ldexp@value
  3989  00166A  C029  F035         	movff	?_eval_poly+1,ldexp@value+1
  3990  00166E  C02A  F036         	movff	?_eval_poly+2,ldexp@value+2
  3991  001672  C04F  F037         	movff	exp@exponent,ldexp@newexp
  3992  001676  C050  F038         	movff	exp@exponent+1,ldexp@newexp+1
  3993  00167A  ECBF  F014         	call	_ldexp	;wreg free
  3994  00167E  C034  F049         	movff	?_ldexp,exp@x
  3995  001682  C035  F04A         	movff	?_ldexp+1,exp@x+1
  3996  001686  C036  F04B         	movff	?_ldexp+2,exp@x+2
  3997  00168A  5051               	movf	exp@sign,w,c
  3998  00168C  B4D8               	btfsc	status,2,c
  3999  00168E  D025               	goto	l1689
  4000  001690  2849               	incf	exp@x,w,c
  4001  001692  E10E               	bnz	l4333
  4002  001694  0E7F               	movlw	127
  4003  001696  184A               	xorwf	exp@x+1,w,c
  4004  001698  E10B               	bnz	l4333
  4005  00169A  0E7F               	movlw	127
  4006  00169C  184B               	xorwf	exp@x+2,w,c
  4007  00169E  A4D8               	btfss	status,2,c
  4008  0016A0  D007               	goto	l4333
  4009  0016A2  0E00               	movlw	0
  4010  0016A4  6E49               	movwf	?_exp,c
  4011  0016A6  0E00               	movlw	0
  4012  0016A8  6E4A               	movwf	?_exp+1,c
  4013  0016AA  0E00               	movlw	0
  4014  0016AC  6E4B               	movwf	?_exp+2,c
  4015  0016AE  0012               	return	
  4016  0016B0                     l4333:
  4017  0016B0  0E00               	movlw	0
  4018  0016B2  6E09               	movwf	___ftdiv@f1,c
  4019  0016B4  0E80               	movlw	128
  4020  0016B6  6E0A               	movwf	___ftdiv@f1+1,c
  4021  0016B8  0E3F               	movlw	63
  4022  0016BA  6E0B               	movwf	___ftdiv@f1+2,c
  4023  0016BC  C049  F00C         	movff	exp@x,___ftdiv@f2
  4024  0016C0  C04A  F00D         	movff	exp@x+1,___ftdiv@f2+1
  4025  0016C4  C04B  F00E         	movff	exp@x+2,___ftdiv@f2+2
  4026  0016C8  ECFA  F012         	call	___ftdiv	;wreg free
  4027  0016CC  C009  F049         	movff	?___ftdiv,?_exp
  4028  0016D0  C00A  F04A         	movff	?___ftdiv+1,?_exp+1
  4029  0016D4  C00B  F04B         	movff	?___ftdiv+2,?_exp+2
  4030  0016D8  0012               	return	
  4031  0016DA                     l1689:
  4032  0016DA  C049  F049         	movff	exp@x,?_exp
  4033  0016DE  C04A  F04A         	movff	exp@x+1,?_exp+1
  4034  0016E2  C04B  F04B         	movff	exp@x+2,?_exp+2
  4035  0016E6  0012               	return		;funcret
  4036  0016E8                     __end_of_exp:
  4037                           	opt stack 0
  4038                           tblptru	equ	0xFF8
  4039                           tblptrh	equ	0xFF7
  4040                           tblptrl	equ	0xFF6
  4041                           tablat	equ	0xFF5
  4042                           postinc0	equ	0xFEE
  4043                           wreg	equ	0xFE8
  4044                           postdec1	equ	0xFE5
  4045                           fsr1l	equ	0xFE1
  4046                           indf2	equ	0xFDF
  4047                           postinc2	equ	0xFDE
  4048                           postdec2	equ	0xFDD
  4049                           fsr2h	equ	0xFDA
  4050                           fsr2l	equ	0xFD9
  4051                           status	equ	0xFD8
  4052                           
  4053 ;; *************** function _ldexp *****************
  4054 ;; Defined at:
  4055 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  4056 ;; Parameters:    Size  Location     Type
  4057 ;;  value           3   51[COMRAM] unsigned char 
  4058 ;;  newexp          2   54[COMRAM] int 
  4059 ;; Auto vars:     Size  Location     Type
  4060 ;;		None
  4061 ;; Return value:  Size  Location     Type
  4062 ;;                  3   51[COMRAM] int 
  4063 ;; Registers used:
  4064 ;;		wreg, status,2, status,0
  4065 ;; Tracked objects:
  4066 ;;		On entry : 0/0
  4067 ;;		On exit  : 0/0
  4068 ;;		Unchanged: 0/0
  4069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4070 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4072 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4073 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4074 ;;Total ram usage:        7 bytes
  4075 ;; Hardware stack levels used:    1
  4076 ;; This function calls:
  4077 ;;		Nothing
  4078 ;; This function is called by:
  4079 ;;		_exp
  4080 ;; This function uses a non-reentrant model
  4081 ;;
  4082                           
  4083                           	psect	text20
  4084  00297E                     __ptext20:
  4085                           	opt stack 0
  4086  00297E                     _ldexp:
  4087                           	opt stack 25
  4088                           
  4089                           ;incstack = 0
  4090  00297E  5034               	movf	ldexp@value,w,c
  4091  002980  1035               	iorwf	ldexp@value+1,w,c
  4092  002982  1036               	iorwf	ldexp@value+2,w,c
  4093  002984  A4D8               	btfss	status,2,c
  4094  002986  D007               	goto	l3949
  4095  002988  0E00               	movlw	0
  4096  00298A  6E34               	movwf	?_ldexp,c
  4097  00298C  0E00               	movlw	0
  4098  00298E  6E35               	movwf	?_ldexp+1,c
  4099  002990  0E00               	movlw	0
  4100  002992  6E36               	movwf	?_ldexp+2,c
  4101  002994  0012               	return	
  4102  002996                     l3949:
  4103  002996  5036               	movf	ldexp@value+2,w,c
  4104  002998  0B7F               	andlw	127
  4105  00299A  6E39               	movwf	??_ldexp& (0+255),c
  4106  00299C  6A3A               	clrf	(??_ldexp+1)& (0+255),c
  4107  00299E  90D8               	bcf	status,0,c
  4108  0029A0  3639               	rlcf	??_ldexp,f,c
  4109  0029A2  363A               	rlcf	??_ldexp+1,f,c
  4110  0029A4  5039               	movf	??_ldexp,w,c
  4111  0029A6  2637               	addwf	ldexp@newexp,f,c
  4112  0029A8  503A               	movf	??_ldexp+1,w,c
  4113  0029AA  2238               	addwfc	ldexp@newexp+1,f,c
  4114  0029AC  AE35               	btfss	ldexp@value+1,7,c
  4115  0029AE  D003               	goto	u3170
  4116  0029B0  6A39               	clrf	??_ldexp& (0+255),c
  4117  0029B2  2A39               	incf	??_ldexp& (0+255),f,c
  4118  0029B4  D001               	goto	u3178
  4119  0029B6                     u3170:
  4120  0029B6  6A39               	clrf	??_ldexp& (0+255),c
  4121  0029B8                     u3178:
  4122  0029B8  5039               	movf	??_ldexp,w,c
  4123  0029BA  2637               	addwf	ldexp@newexp,f,c
  4124  0029BC  0E00               	movlw	0
  4125  0029BE  2238               	addwfc	ldexp@newexp+1,f,c
  4126  0029C0  AE38               	btfss	ldexp@newexp+1,7,c
  4127  0029C2  D00D               	goto	l3957
  4128  0029C4  0E00               	movlw	0
  4129  0029C6  0100               	movlb	0	; () banked
  4130  0029C8  6F85               	movwf	(_errno+1)& (0+255),b
  4131  0029CA  0E22               	movlw	34
  4132  0029CC  6F84               	movwf	_errno& (0+255),b
  4133  0029CE  0E00               	movlw	0
  4134  0029D0  6E34               	movwf	?_ldexp,c
  4135  0029D2  0E00               	movlw	0
  4136  0029D4  6E35               	movwf	?_ldexp+1,c
  4137  0029D6  0E00               	movlw	0
  4138  0029D8                     L5:
  4139  0029D8  6E36               	movwf	?_ldexp+2,c
  4140                           
  4141                           ; BSR set to: 0
  4142  0029DA  0012               	return	
  4143                           
  4144                           ; BSR set to: 0
  4145  0029DC  D032               	goto	l3975
  4146  0029DE                     l3957:
  4147  0029DE  BE38               	btfsc	ldexp@newexp+1,7,c
  4148  0029E0  D01A               	goto	l3973
  4149  0029E2  0438               	decf	ldexp@newexp+1,w,c
  4150  0029E4  A0D8               	btfss	status,0,c
  4151  0029E6  D017               	goto	l3973
  4152  0029E8  0E00               	movlw	0
  4153  0029EA  0100               	movlb	0	; () banked
  4154  0029EC  6F85               	movwf	(_errno+1)& (0+255),b
  4155  0029EE  0E22               	movlw	34
  4156  0029F0  6F84               	movwf	_errno& (0+255),b
  4157                           
  4158                           ; BSR set to: 0
  4159  0029F2  AE36               	btfss	ldexp@value+2,7,c
  4160  0029F4  D008               	goto	l3969
  4161                           
  4162                           ; BSR set to: 0
  4163  0029F6  0EFF               	movlw	255
  4164  0029F8  6E34               	movwf	?_ldexp,c
  4165  0029FA  0E7F               	movlw	127
  4166  0029FC  6E35               	movwf	?_ldexp+1,c
  4167  0029FE  0EFF               	movlw	255
  4168  002A00  D7EB               	goto	L5
  4169                           
  4170                           ; BSR set to: 0
  4171  002A02  0012               	return	
  4172                           
  4173                           ; BSR set to: 0
  4174  002A04  D01E               	goto	l3975
  4175  002A06                     l3969:
  4176                           
  4177                           ; BSR set to: 0
  4178  002A06  0EFF               	movlw	255
  4179  002A08  6E34               	movwf	?_ldexp,c
  4180  002A0A  0E7F               	movlw	127
  4181  002A0C  6E35               	movwf	?_ldexp+1,c
  4182  002A0E  0E7F               	movlw	127
  4183  002A10  D7E3               	goto	L5
  4184                           
  4185                           ; BSR set to: 0
  4186  002A12  0012               	return	
  4187                           
  4188                           ; BSR set to: 0
  4189  002A14  D016               	goto	l3975
  4190  002A16                     l3973:
  4191  002A16  3438               	rlcf	ldexp@newexp+1,w,c
  4192  002A18  3038               	rrcf	ldexp@newexp+1,w,c
  4193  002A1A  6E3A               	movwf	(??_ldexp+1)& (0+255),c
  4194  002A1C  3037               	rrcf	ldexp@newexp,w,c
  4195  002A1E  6E39               	movwf	??_ldexp& (0+255),c
  4196  002A20  5036               	movf	ldexp@value+2,w,c
  4197  002A22  1839               	xorwf	??_ldexp,w,c
  4198  002A24  0B80               	andlw	-128
  4199  002A26  1839               	xorwf	??_ldexp,w,c
  4200  002A28  6E36               	movwf	ldexp@value+2,c
  4201  002A2A  C037  F039         	movff	ldexp@newexp,??_ldexp
  4202  002A2E  0E01               	movlw	1
  4203  002A30  1639               	andwf	??_ldexp,f,c
  4204  002A32  3239               	rrcf	??_ldexp,f,c
  4205  002A34  3239               	rrcf	??_ldexp,f,c
  4206  002A36  5035               	movf	ldexp@value+1,w,c
  4207  002A38  1839               	xorwf	??_ldexp,w,c
  4208  002A3A  0B7F               	andlw	-129
  4209  002A3C  1839               	xorwf	??_ldexp,w,c
  4210  002A3E  6E35               	movwf	ldexp@value+1,c
  4211  002A40  D000               	goto	l3975
  4212  002A42                     l3975:
  4213  002A42  C034  F034         	movff	ldexp@value,?_ldexp
  4214  002A46  C035  F035         	movff	ldexp@value+1,?_ldexp+1
  4215  002A4A  C036  F036         	movff	ldexp@value+2,?_ldexp+2
  4216  002A4E  0012               	return	
  4217  002A50  0012               	return		;funcret
  4218  002A52                     __end_of_ldexp:
  4219                           	opt stack 0
  4220                           tblptru	equ	0xFF8
  4221                           tblptrh	equ	0xFF7
  4222                           tblptrl	equ	0xFF6
  4223                           tablat	equ	0xFF5
  4224                           postinc0	equ	0xFEE
  4225                           wreg	equ	0xFE8
  4226                           postdec1	equ	0xFE5
  4227                           fsr1l	equ	0xFE1
  4228                           indf2	equ	0xFDF
  4229                           postinc2	equ	0xFDE
  4230                           postdec2	equ	0xFDD
  4231                           fsr2h	equ	0xFDA
  4232                           fsr2l	equ	0xFD9
  4233                           status	equ	0xFD8
  4234                           
  4235 ;; *************** function _floor *****************
  4236 ;; Defined at:
  4237 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\floor.c"
  4238 ;; Parameters:    Size  Location     Type
  4239 ;;  x               3   64[COMRAM] int 
  4240 ;; Auto vars:     Size  Location     Type
  4241 ;;  i               3   67[COMRAM] int 
  4242 ;;  expon           2   70[COMRAM] int 
  4243 ;; Return value:  Size  Location     Type
  4244 ;;                  3   64[COMRAM] int 
  4245 ;; Registers used:
  4246 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4247 ;; Tracked objects:
  4248 ;;		On entry : 0/0
  4249 ;;		On exit  : 0/0
  4250 ;;		Unchanged: 0/0
  4251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4252 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4253 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4255 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4256 ;;Total ram usage:        8 bytes
  4257 ;; Hardware stack levels used:    1
  4258 ;; Hardware stack levels required when called:    2
  4259 ;; This function calls:
  4260 ;;		___altoft
  4261 ;;		___ftadd
  4262 ;;		___ftge
  4263 ;;		___fttol
  4264 ;;		_frexp
  4265 ;; This function is called by:
  4266 ;;		_exp
  4267 ;; This function uses a non-reentrant model
  4268 ;;
  4269                           
  4270                           	psect	text21
  4271  0027C2                     __ptext21:
  4272                           	opt stack 0
  4273  0027C2                     _floor:
  4274                           	opt stack 23
  4275                           
  4276                           ;incstack = 0
  4277  0027C2  C041  F001         	movff	floor@x,frexp@value
  4278  0027C6  C042  F002         	movff	floor@x+1,frexp@value+1
  4279  0027CA  C043  F003         	movff	floor@x+2,frexp@value+2
  4280  0027CE  0E47               	movlw	low floor@expon
  4281  0027D0  6E04               	movwf	frexp@eptr,c
  4282  0027D2  0E00               	movlw	high floor@expon
  4283  0027D4  6E05               	movwf	frexp@eptr+1,c
  4284  0027D6  ECD8  F016         	call	_frexp	;wreg free
  4285  0027DA  AE48               	btfss	floor@expon+1,7,c
  4286  0027DC  D010               	goto	l3927
  4287  0027DE  AE43               	btfss	floor@x+2,7,c
  4288  0027E0  D007               	goto	l3923
  4289  0027E2  0E00               	movlw	0
  4290  0027E4  6E41               	movwf	?_floor,c
  4291  0027E6  0E80               	movlw	128
  4292  0027E8  6E42               	movwf	?_floor+1,c
  4293  0027EA  0EBF               	movlw	191
  4294  0027EC  6E43               	movwf	?_floor+2,c
  4295  0027EE  0012               	return	
  4296  0027F0                     l3923:
  4297  0027F0  0E00               	movlw	0
  4298  0027F2  6E41               	movwf	?_floor,c
  4299  0027F4  0E00               	movlw	0
  4300  0027F6  6E42               	movwf	?_floor+1,c
  4301  0027F8  0E00               	movlw	0
  4302  0027FA  6E43               	movwf	?_floor+2,c
  4303  0027FC  0012               	return	
  4304  0027FE                     l3927:
  4305  0027FE  5048               	movf	floor@expon+1,w,c
  4306  002800  E104               	bnz	u3130
  4307  002802  0E15               	movlw	21
  4308  002804  5C47               	subwf	floor@expon,w,c
  4309  002806  A0D8               	btfss	status,0,c
  4310  002808  D007               	goto	l3931
  4311  00280A                     u3130:
  4312  00280A  C041  F041         	movff	floor@x,?_floor
  4313  00280E  C042  F042         	movff	floor@x+1,?_floor+1
  4314  002812  C043  F043         	movff	floor@x+2,?_floor+2
  4315  002816  0012               	return	
  4316  002818                     l3931:
  4317  002818  C041  F028         	movff	floor@x,___fttol@f1
  4318  00281C  C042  F029         	movff	floor@x+1,___fttol@f1+1
  4319  002820  C043  F02A         	movff	floor@x+2,___fttol@f1+2
  4320  002824  EC82  F011         	call	___fttol	;wreg free
  4321  002828  C028  F037         	movff	?___fttol,___altoft@c
  4322  00282C  C029  F038         	movff	?___fttol+1,___altoft@c+1
  4323  002830  C02A  F039         	movff	?___fttol+2,___altoft@c+2
  4324  002834  C02B  F03A         	movff	?___fttol+3,___altoft@c+3
  4325  002838  ECBE  F018         	call	___altoft	;wreg free
  4326  00283C  C037  F044         	movff	?___altoft,floor@i
  4327  002840  C038  F045         	movff	?___altoft+1,floor@i+1
  4328  002844  C039  F046         	movff	?___altoft+2,floor@i+2
  4329  002848  C041  F001         	movff	floor@x,___ftge@ff1
  4330  00284C  C042  F002         	movff	floor@x+1,___ftge@ff1+1
  4331  002850  C043  F003         	movff	floor@x+2,___ftge@ff1+2
  4332  002854  C044  F004         	movff	floor@i,___ftge@ff2
  4333  002858  C045  F005         	movff	floor@i+1,___ftge@ff2+1
  4334  00285C  C046  F006         	movff	floor@i+2,___ftge@ff2+2
  4335  002860  EC42  F016         	call	___ftge	;wreg free
  4336  002864  B0D8               	btfsc	status,0,c
  4337  002866  D015               	goto	l1699
  4338  002868  C044  F01C         	movff	floor@i,___ftadd@f1
  4339  00286C  C045  F01D         	movff	floor@i+1,___ftadd@f1+1
  4340  002870  C046  F01E         	movff	floor@i+2,___ftadd@f1+2
  4341  002874  0E00               	movlw	0
  4342  002876  6E1F               	movwf	___ftadd@f2,c
  4343  002878  0E80               	movlw	128
  4344  00287A  6E20               	movwf	___ftadd@f2+1,c
  4345  00287C  0EBF               	movlw	191
  4346  00287E  6E21               	movwf	___ftadd@f2+2,c
  4347  002880  EC74  F00B         	call	___ftadd	;wreg free
  4348  002884  C01C  F041         	movff	?___ftadd,?_floor
  4349  002888  C01D  F042         	movff	?___ftadd+1,?_floor+1
  4350  00288C  C01E  F043         	movff	?___ftadd+2,?_floor+2
  4351  002890  0012               	return	
  4352  002892                     l1699:
  4353  002892  C044  F041         	movff	floor@i,?_floor
  4354  002896  C045  F042         	movff	floor@i+1,?_floor+1
  4355  00289A  C046  F043         	movff	floor@i+2,?_floor+2
  4356  00289E  0012               	return		;funcret
  4357  0028A0                     __end_of_floor:
  4358                           	opt stack 0
  4359                           tblptru	equ	0xFF8
  4360                           tblptrh	equ	0xFF7
  4361                           tblptrl	equ	0xFF6
  4362                           tablat	equ	0xFF5
  4363                           postinc0	equ	0xFEE
  4364                           wreg	equ	0xFE8
  4365                           postdec1	equ	0xFE5
  4366                           fsr1l	equ	0xFE1
  4367                           indf2	equ	0xFDF
  4368                           postinc2	equ	0xFDE
  4369                           postdec2	equ	0xFDD
  4370                           fsr2h	equ	0xFDA
  4371                           fsr2l	equ	0xFD9
  4372                           status	equ	0xFD8
  4373                           
  4374 ;; *************** function _frexp *****************
  4375 ;; Defined at:
  4376 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  4377 ;; Parameters:    Size  Location     Type
  4378 ;;  value           3    0[COMRAM] int 
  4379 ;;  eptr            2    3[COMRAM] PTR int 
  4380 ;;		 -> log@exponent(2), floor@expon(2), 
  4381 ;; Auto vars:     Size  Location     Type
  4382 ;;		None
  4383 ;; Return value:  Size  Location     Type
  4384 ;;                  3    0[COMRAM] PTR int 
  4385 ;; Registers used:
  4386 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4387 ;; Tracked objects:
  4388 ;;		On entry : 0/0
  4389 ;;		On exit  : 0/0
  4390 ;;		Unchanged: 0/0
  4391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4392 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4394 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4395 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4396 ;;Total ram usage:        7 bytes
  4397 ;; Hardware stack levels used:    1
  4398 ;; This function calls:
  4399 ;;		Nothing
  4400 ;; This function is called by:
  4401 ;;		_floor
  4402 ;;		_log
  4403 ;; This function uses a non-reentrant model
  4404 ;;
  4405                           
  4406                           	psect	text22
  4407  002DB0                     __ptext22:
  4408                           	opt stack 0
  4409  002DB0                     _frexp:
  4410                           	opt stack 25
  4411                           
  4412                           ;incstack = 0
  4413  002DB0  5001               	movf	frexp@value,w,c
  4414  002DB2  1002               	iorwf	frexp@value+1,w,c
  4415  002DB4  1003               	iorwf	frexp@value+2,w,c
  4416  002DB6  A4D8               	btfss	status,2,c
  4417  002DB8  D00F               	goto	l3759
  4418  002DBA  C004  FFD9         	movff	frexp@eptr,fsr2l
  4419  002DBE  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  4420  002DC2  0E00               	movlw	0
  4421  002DC4  6EDE               	movwf	postinc2,c
  4422  002DC6  0E00               	movlw	0
  4423  002DC8  6EDD               	movwf	postdec2,c
  4424  002DCA  0E00               	movlw	0
  4425  002DCC  6E01               	movwf	?_frexp,c
  4426  002DCE  0E00               	movlw	0
  4427  002DD0  6E02               	movwf	?_frexp+1,c
  4428  002DD2  0E00               	movlw	0
  4429  002DD4  6E03               	movwf	?_frexp+2,c
  4430  002DD6  0012               	return	
  4431  002DD8                     l3759:
  4432  002DD8  5003               	movf	frexp@value+2,w,c
  4433  002DDA  0B7F               	andlw	127
  4434  002DDC  6E06               	movwf	??_frexp& (0+255),c
  4435  002DDE  6A07               	clrf	(??_frexp+1)& (0+255),c
  4436  002DE0  90D8               	bcf	status,0,c
  4437  002DE2  3606               	rlcf	??_frexp,f,c
  4438  002DE4  3607               	rlcf	??_frexp+1,f,c
  4439  002DE6  C004  FFD9         	movff	frexp@eptr,fsr2l
  4440  002DEA  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  4441  002DEE  C006  FFDE         	movff	??_frexp,postinc2
  4442  002DF2  C007  FFDD         	movff	??_frexp+1,postdec2
  4443  002DF6  AE02               	btfss	frexp@value+1,7,c
  4444  002DF8  D003               	goto	u2940
  4445  002DFA  6A06               	clrf	??_frexp& (0+255),c
  4446  002DFC  2A06               	incf	??_frexp& (0+255),f,c
  4447  002DFE  D001               	goto	u2948
  4448  002E00                     u2940:
  4449  002E00  6A06               	clrf	??_frexp& (0+255),c
  4450  002E02                     u2948:
  4451  002E02  5006               	movf	??_frexp,w,c
  4452  002E04  C004  FFD9         	movff	frexp@eptr,fsr2l
  4453  002E08  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  4454  002E0C  12DE               	iorwf	postinc2,f,c
  4455  002E0E  0E00               	movlw	0
  4456  002E10  12DD               	iorwf	postdec2,f,c
  4457  002E12  C004  FFD9         	movff	frexp@eptr,fsr2l
  4458  002E16  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  4459  002E1A  0E82               	movlw	130
  4460  002E1C  26DE               	addwf	postinc2,f,c
  4461  002E1E  0EFF               	movlw	255
  4462  002E20  22DD               	addwfc	postdec2,f,c
  4463  002E22  8003               	bsf	frexp@value+2,0,c
  4464  002E24  8203               	bsf	frexp@value+2,1,c
  4465  002E26  8403               	bsf	frexp@value+2,2,c
  4466  002E28  8603               	bsf	frexp@value+2,3,c
  4467  002E2A  8803               	bsf	frexp@value+2,4,c
  4468  002E2C  8A03               	bsf	frexp@value+2,5,c
  4469  002E2E  9C03               	bcf	frexp@value+2,6,c
  4470  002E30  9E02               	bcf	frexp@value+1,7,c
  4471  002E32  C001  F001         	movff	frexp@value,?_frexp
  4472  002E36  C002  F002         	movff	frexp@value+1,?_frexp+1
  4473  002E3A  C003  F003         	movff	frexp@value+2,?_frexp+2
  4474  002E3E  0012               	return	
  4475  002E40  0012               	return		;funcret
  4476  002E42                     __end_of_frexp:
  4477                           	opt stack 0
  4478                           tblptru	equ	0xFF8
  4479                           tblptrh	equ	0xFF7
  4480                           tblptrl	equ	0xFF6
  4481                           tablat	equ	0xFF5
  4482                           postinc0	equ	0xFEE
  4483                           wreg	equ	0xFE8
  4484                           postdec1	equ	0xFE5
  4485                           fsr1l	equ	0xFE1
  4486                           indf2	equ	0xFDF
  4487                           postinc2	equ	0xFDE
  4488                           postdec2	equ	0xFDD
  4489                           fsr2h	equ	0xFDA
  4490                           fsr2l	equ	0xFD9
  4491                           status	equ	0xFD8
  4492                           
  4493 ;; *************** function ___fttol *****************
  4494 ;; Defined at:
  4495 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  4496 ;; Parameters:    Size  Location     Type
  4497 ;;  f1              3   39[COMRAM] float 
  4498 ;; Auto vars:     Size  Location     Type
  4499 ;;  lval            4   49[COMRAM] unsigned long 
  4500 ;;  exp1            1   53[COMRAM] unsigned char 
  4501 ;;  sign1           1   48[COMRAM] unsigned char 
  4502 ;; Return value:  Size  Location     Type
  4503 ;;                  4   39[COMRAM] long 
  4504 ;; Registers used:
  4505 ;;		wreg, status,2, status,0
  4506 ;; Tracked objects:
  4507 ;;		On entry : 0/0
  4508 ;;		On exit  : 0/0
  4509 ;;		Unchanged: 0/0
  4510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4511 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4512 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4513 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4514 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4515 ;;Total ram usage:       15 bytes
  4516 ;; Hardware stack levels used:    1
  4517 ;; This function calls:
  4518 ;;		Nothing
  4519 ;; This function is called by:
  4520 ;;		_obtain_pass
  4521 ;;		_input_old_pass
  4522 ;;		_input_new_pass
  4523 ;;		_pow
  4524 ;;		_exp
  4525 ;;		_floor
  4526 ;; This function uses a non-reentrant model
  4527 ;;
  4528                           
  4529                           	psect	text23
  4530  002304                     __ptext23:
  4531                           	opt stack 0
  4532  002304                     ___fttol:
  4533                           	opt stack 24
  4534                           
  4535                           ;incstack = 0
  4536  002304  C02A  F02C         	movff	___fttol@f1+2,??___fttol
  4537  002308  6A2D               	clrf	(??___fttol+1)& (0+255),c
  4538  00230A  6A2E               	clrf	(??___fttol+2)& (0+255),c
  4539  00230C  3429               	rlcf	___fttol@f1+1,w,c
  4540  00230E  362C               	rlcf	??___fttol& (0+255),f,c
  4541  002310  E301               	bnc	u2851
  4542  002312  802D               	bsf	(??___fttol+1)& (0+255),0,c
  4543  002314                     u2851:
  4544  002314  502C               	movf	??___fttol,w,c
  4545  002316  6E36               	movwf	___fttol@exp1,c
  4546  002318  5036               	movf	___fttol@exp1,w,c
  4547  00231A  A4D8               	btfss	status,2,c
  4548  00231C  D009               	goto	l3711
  4549  00231E  0E00               	movlw	0
  4550  002320  6E28               	movwf	?___fttol,c
  4551  002322  0E00               	movlw	0
  4552  002324  6E29               	movwf	?___fttol+1,c
  4553  002326  0E00               	movlw	0
  4554  002328  6E2A               	movwf	?___fttol+2,c
  4555  00232A  0E00               	movlw	0
  4556  00232C  6E2B               	movwf	?___fttol+3,c
  4557  00232E  0012               	return	
  4558  002330                     l3711:
  4559  002330  0E17               	movlw	23
  4560  002332  6E2C               	movwf	??___fttol& (0+255),c
  4561  002334  C028  F02D         	movff	___fttol@f1,??___fttol+1
  4562  002338  C029  F02E         	movff	___fttol@f1+1,??___fttol+2
  4563  00233C  C02A  F02F         	movff	___fttol@f1+2,??___fttol+3
  4564  002340  282C               	incf	??___fttol,w,c
  4565  002342  6E30               	movwf	(??___fttol+4)& (0+255),c
  4566  002344  D004               	goto	u2870
  4567  002346                     u2875:
  4568  002346  90D8               	bcf	status,0,c
  4569  002348  322F               	rrcf	??___fttol+3,f,c
  4570  00234A  322E               	rrcf	??___fttol+2,f,c
  4571  00234C  322D               	rrcf	??___fttol+1,f,c
  4572  00234E                     u2870:
  4573  00234E  2E30               	decfsz	(??___fttol+4)& (0+255),f,c
  4574  002350  D7FA               	goto	u2875
  4575  002352  502D               	movf	??___fttol+1,w,c
  4576  002354  6E31               	movwf	___fttol@sign1,c
  4577  002356  8E29               	bsf	___fttol@f1+1,7,c
  4578  002358  0EFF               	movlw	255
  4579  00235A  1628               	andwf	___fttol@f1,f,c
  4580  00235C  0EFF               	movlw	255
  4581  00235E  1629               	andwf	___fttol@f1+1,f,c
  4582  002360  0E00               	movlw	0
  4583  002362  162A               	andwf	___fttol@f1+2,f,c
  4584  002364  5028               	movf	___fttol@f1,w,c
  4585  002366  6E32               	movwf	___fttol@lval,c
  4586  002368  5029               	movf	___fttol@f1+1,w,c
  4587  00236A  6E33               	movwf	___fttol@lval+1,c
  4588  00236C  502A               	movf	___fttol@f1+2,w,c
  4589  00236E  6E34               	movwf	___fttol@lval+2,c
  4590  002370  6A35               	clrf	___fttol@lval+3,c
  4591  002372  0E8E               	movlw	142
  4592  002374  5E36               	subwf	___fttol@exp1,f,c
  4593  002376  AE36               	btfss	___fttol@exp1,7,c
  4594  002378  D017               	goto	l3733
  4595  00237A  5036               	movf	___fttol@exp1,w,c
  4596  00237C  0A80               	xorlw	128
  4597  00237E  0F8F               	addlw	143
  4598  002380  B0D8               	btfsc	status,0,c
  4599  002382  D00A               	goto	l3729
  4600  002384  0E00               	movlw	0
  4601  002386  6E28               	movwf	?___fttol,c
  4602  002388  0E00               	movlw	0
  4603  00238A  6E29               	movwf	?___fttol+1,c
  4604  00238C  0E00               	movlw	0
  4605  00238E  6E2A               	movwf	?___fttol+2,c
  4606  002390  0E00               	movlw	0
  4607  002392  6E2B               	movwf	?___fttol+3,c
  4608  002394  0012               	return	
  4609  002396  D000               	goto	l3729
  4610  002398                     l3729:
  4611  002398  90D8               	bcf	status,0,c
  4612  00239A  3235               	rrcf	___fttol@lval+3,f,c
  4613  00239C  3234               	rrcf	___fttol@lval+2,f,c
  4614  00239E  3233               	rrcf	___fttol@lval+1,f,c
  4615  0023A0  3232               	rrcf	___fttol@lval,f,c
  4616  0023A2  3E36               	incfsz	___fttol@exp1,f,c
  4617  0023A4  D7F9               	goto	l3729
  4618  0023A6  D019               	goto	l3743
  4619  0023A8                     l3733:
  4620  0023A8  0E17               	movlw	23
  4621  0023AA  6436               	cpfsgt	___fttol@exp1,c
  4622  0023AC  D011               	goto	l3741
  4623  0023AE  0E00               	movlw	0
  4624  0023B0  6E28               	movwf	?___fttol,c
  4625  0023B2  0E00               	movlw	0
  4626  0023B4  6E29               	movwf	?___fttol+1,c
  4627  0023B6  0E00               	movlw	0
  4628  0023B8  6E2A               	movwf	?___fttol+2,c
  4629  0023BA  0E00               	movlw	0
  4630  0023BC  6E2B               	movwf	?___fttol+3,c
  4631  0023BE  0012               	return	
  4632  0023C0  D007               	goto	l3741
  4633  0023C2                     l3739:
  4634  0023C2  90D8               	bcf	status,0,c
  4635  0023C4  3632               	rlcf	___fttol@lval,f,c
  4636  0023C6  3633               	rlcf	___fttol@lval+1,f,c
  4637  0023C8  3634               	rlcf	___fttol@lval+2,f,c
  4638  0023CA  3635               	rlcf	___fttol@lval+3,f,c
  4639  0023CC  0636               	decf	___fttol@exp1,f,c
  4640  0023CE  D000               	goto	l3741
  4641  0023D0                     l3741:
  4642  0023D0  5036               	movf	___fttol@exp1,w,c
  4643  0023D2  B4D8               	btfsc	status,2,c
  4644  0023D4  D002               	goto	l3743
  4645  0023D6  D7F5               	goto	l3739
  4646  0023D8  D000               	goto	l3743
  4647  0023DA                     l3743:
  4648  0023DA  5031               	movf	___fttol@sign1,w,c
  4649  0023DC  B4D8               	btfsc	status,2,c
  4650  0023DE  D009               	goto	l3747
  4651  0023E0  1E35               	comf	___fttol@lval+3,f,c
  4652  0023E2  1E34               	comf	___fttol@lval+2,f,c
  4653  0023E4  1E33               	comf	___fttol@lval+1,f,c
  4654  0023E6  6C32               	negf	___fttol@lval,c
  4655  0023E8  0E00               	movlw	0
  4656  0023EA  2233               	addwfc	___fttol@lval+1,f,c
  4657  0023EC  2234               	addwfc	___fttol@lval+2,f,c
  4658  0023EE  2235               	addwfc	___fttol@lval+3,f,c
  4659  0023F0  D000               	goto	l3747
  4660  0023F2                     l3747:
  4661  0023F2  C032  F028         	movff	___fttol@lval,?___fttol
  4662  0023F6  C033  F029         	movff	___fttol@lval+1,?___fttol+1
  4663  0023FA  C034  F02A         	movff	___fttol@lval+2,?___fttol+2
  4664  0023FE  C035  F02B         	movff	___fttol@lval+3,?___fttol+3
  4665  002402  0012               	return	
  4666  002404  0012               	return		;funcret
  4667  002406                     __end_of___fttol:
  4668                           	opt stack 0
  4669                           tblptru	equ	0xFF8
  4670                           tblptrh	equ	0xFF7
  4671                           tblptrl	equ	0xFF6
  4672                           tablat	equ	0xFF5
  4673                           postinc0	equ	0xFEE
  4674                           wreg	equ	0xFE8
  4675                           postdec1	equ	0xFE5
  4676                           fsr1l	equ	0xFE1
  4677                           indf2	equ	0xFDF
  4678                           postinc2	equ	0xFDE
  4679                           postdec2	equ	0xFDD
  4680                           fsr2h	equ	0xFDA
  4681                           fsr2l	equ	0xFD9
  4682                           status	equ	0xFD8
  4683                           
  4684 ;; *************** function ___ftge *****************
  4685 ;; Defined at:
  4686 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  4687 ;; Parameters:    Size  Location     Type
  4688 ;;  ff1             3    0[COMRAM] float 
  4689 ;;  ff2             3    3[COMRAM] float 
  4690 ;; Auto vars:     Size  Location     Type
  4691 ;;		None
  4692 ;; Return value:  Size  Location     Type
  4693 ;;		None               void
  4694 ;; Registers used:
  4695 ;;		wreg, status,2, status,0
  4696 ;; Tracked objects:
  4697 ;;		On entry : 0/0
  4698 ;;		On exit  : 0/0
  4699 ;;		Unchanged: 0/0
  4700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4701 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4703 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4704 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4705 ;;Total ram usage:        9 bytes
  4706 ;; Hardware stack levels used:    1
  4707 ;; This function calls:
  4708 ;;		Nothing
  4709 ;; This function is called by:
  4710 ;;		_pow
  4711 ;;		_exp
  4712 ;;		_floor
  4713 ;; This function uses a non-reentrant model
  4714 ;;
  4715                           
  4716                           	psect	text24
  4717  002C84                     __ptext24:
  4718                           	opt stack 0
  4719  002C84                     ___ftge:
  4720                           	opt stack 24
  4721                           
  4722                           ;incstack = 0
  4723  002C84  AE03               	btfss	___ftge@ff1+2,7,c
  4724  002C86  D017               	goto	l3691
  4725  002C88  C001  F007         	movff	___ftge@ff1,??___ftge
  4726  002C8C  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  4727  002C90  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  4728  002C94  1E07               	comf	??___ftge,f,c
  4729  002C96  1E08               	comf	??___ftge+1,f,c
  4730  002C98  1E09               	comf	??___ftge+2,f,c
  4731  002C9A  2A07               	incf	??___ftge,f,c
  4732  002C9C  0E00               	movlw	0
  4733  002C9E  2208               	addwfc	??___ftge+1,f,c
  4734  002CA0  2209               	addwfc	??___ftge+2,f,c
  4735  002CA2  0E00               	movlw	0
  4736  002CA4  2407               	addwf	??___ftge,w,c
  4737  002CA6  6E01               	movwf	___ftge@ff1,c
  4738  002CA8  0E00               	movlw	0
  4739  002CAA  2008               	addwfc	??___ftge+1,w,c
  4740  002CAC  6E02               	movwf	___ftge@ff1+1,c
  4741  002CAE  0E80               	movlw	128
  4742  002CB0  2009               	addwfc	??___ftge+2,w,c
  4743  002CB2  6E03               	movwf	___ftge@ff1+2,c
  4744  002CB4  D000               	goto	l3691
  4745  002CB6                     l3691:
  4746  002CB6  AE06               	btfss	___ftge@ff2+2,7,c
  4747  002CB8  D017               	goto	l3695
  4748  002CBA  C004  F007         	movff	___ftge@ff2,??___ftge
  4749  002CBE  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  4750  002CC2  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  4751  002CC6  1E07               	comf	??___ftge,f,c
  4752  002CC8  1E08               	comf	??___ftge+1,f,c
  4753  002CCA  1E09               	comf	??___ftge+2,f,c
  4754  002CCC  2A07               	incf	??___ftge,f,c
  4755  002CCE  0E00               	movlw	0
  4756  002CD0  2208               	addwfc	??___ftge+1,f,c
  4757  002CD2  2209               	addwfc	??___ftge+2,f,c
  4758  002CD4  0E00               	movlw	0
  4759  002CD6  2407               	addwf	??___ftge,w,c
  4760  002CD8  6E04               	movwf	___ftge@ff2,c
  4761  002CDA  0E00               	movlw	0
  4762  002CDC  2008               	addwfc	??___ftge+1,w,c
  4763  002CDE  6E05               	movwf	___ftge@ff2+1,c
  4764  002CE0  0E80               	movlw	128
  4765  002CE2  2009               	addwfc	??___ftge+2,w,c
  4766  002CE4  6E06               	movwf	___ftge@ff2+2,c
  4767  002CE6  D000               	goto	l3695
  4768  002CE8                     l3695:
  4769  002CE8  0E00               	movlw	0
  4770  002CEA  1A01               	xorwf	___ftge@ff1,f,c
  4771  002CEC  0E00               	movlw	0
  4772  002CEE  1A02               	xorwf	___ftge@ff1+1,f,c
  4773  002CF0  0E80               	movlw	128
  4774  002CF2  1A03               	xorwf	___ftge@ff1+2,f,c
  4775  002CF4  0E00               	movlw	0
  4776  002CF6  1A04               	xorwf	___ftge@ff2,f,c
  4777  002CF8  0E00               	movlw	0
  4778  002CFA  1A05               	xorwf	___ftge@ff2+1,f,c
  4779  002CFC  0E80               	movlw	128
  4780  002CFE  1A06               	xorwf	___ftge@ff2+2,f,c
  4781  002D00  5004               	movf	___ftge@ff2,w,c
  4782  002D02  5C01               	subwf	___ftge@ff1,w,c
  4783  002D04  5005               	movf	___ftge@ff2+1,w,c
  4784  002D06  5802               	subwfb	___ftge@ff1+1,w,c
  4785  002D08  5006               	movf	___ftge@ff2+2,w,c
  4786  002D0A  5803               	subwfb	___ftge@ff1+2,w,c
  4787  002D0C  B0D8               	btfsc	status,0,c
  4788  002D0E  D002               	goto	l3701
  4789  002D10  90D8               	bcf	status,0,c
  4790  002D12  0012               	return	
  4791  002D14                     l3701:
  4792  002D14  80D8               	bsf	status,0,c
  4793  002D16  0012               	return	
  4794  002D18  0012               	return		;funcret
  4795  002D1A                     __end_of___ftge:
  4796                           	opt stack 0
  4797                           tblptru	equ	0xFF8
  4798                           tblptrh	equ	0xFF7
  4799                           tblptrl	equ	0xFF6
  4800                           tablat	equ	0xFF5
  4801                           postinc0	equ	0xFEE
  4802                           wreg	equ	0xFE8
  4803                           postdec1	equ	0xFE5
  4804                           fsr1l	equ	0xFE1
  4805                           indf2	equ	0xFDF
  4806                           postinc2	equ	0xFDE
  4807                           postdec2	equ	0xFDD
  4808                           fsr2h	equ	0xFDA
  4809                           fsr2l	equ	0xFD9
  4810                           status	equ	0xFD8
  4811                           
  4812 ;; *************** function ___altoft *****************
  4813 ;; Defined at:
  4814 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\altoft.c"
  4815 ;; Parameters:    Size  Location     Type
  4816 ;;  c               4   54[COMRAM] long 
  4817 ;; Auto vars:     Size  Location     Type
  4818 ;;  sign            1   63[COMRAM] unsigned char 
  4819 ;;  exp             1   62[COMRAM] unsigned char 
  4820 ;; Return value:  Size  Location     Type
  4821 ;;                  3   54[COMRAM] float 
  4822 ;; Registers used:
  4823 ;;		wreg, status,2, status,0, cstack
  4824 ;; Tracked objects:
  4825 ;;		On entry : 0/0
  4826 ;;		On exit  : 0/0
  4827 ;;		Unchanged: 0/0
  4828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4829 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4830 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4831 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4832 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4833 ;;Total ram usage:       10 bytes
  4834 ;; Hardware stack levels used:    1
  4835 ;; Hardware stack levels required when called:    1
  4836 ;; This function calls:
  4837 ;;		___ftpack
  4838 ;; This function is called by:
  4839 ;;		_floor
  4840 ;; This function uses a non-reentrant model
  4841 ;;
  4842                           
  4843                           	psect	text25
  4844  00317C                     __ptext25:
  4845                           	opt stack 0
  4846  00317C                     ___altoft:
  4847                           	opt stack 23
  4848                           
  4849                           ;incstack = 0
  4850  00317C  0E00               	movlw	0
  4851  00317E  6E40               	movwf	___altoft@sign,c
  4852  003180  0E8E               	movlw	142
  4853  003182  6E3F               	movwf	___altoft@exp,c
  4854  003184  AE3A               	btfss	___altoft@c+3,7,c
  4855  003186  D012               	goto	l3563
  4856  003188  1E3A               	comf	___altoft@c+3,f,c
  4857  00318A  1E39               	comf	___altoft@c+2,f,c
  4858  00318C  1E38               	comf	___altoft@c+1,f,c
  4859  00318E  6C37               	negf	___altoft@c,c
  4860  003190  0E00               	movlw	0
  4861  003192  2238               	addwfc	___altoft@c+1,f,c
  4862  003194  2239               	addwfc	___altoft@c+2,f,c
  4863  003196  223A               	addwfc	___altoft@c+3,f,c
  4864  003198  0E01               	movlw	1
  4865  00319A  6E40               	movwf	___altoft@sign,c
  4866  00319C  D007               	goto	l3563
  4867  00319E                     l3561:
  4868  00319E  90D8               	bcf	status,0,c
  4869  0031A0  323A               	rrcf	___altoft@c+3,f,c
  4870  0031A2  3239               	rrcf	___altoft@c+2,f,c
  4871  0031A4  3238               	rrcf	___altoft@c+1,f,c
  4872  0031A6  3237               	rrcf	___altoft@c,f,c
  4873  0031A8  2A3F               	incf	___altoft@exp,f,c
  4874  0031AA  D000               	goto	l3563
  4875  0031AC                     l3563:
  4876  0031AC  0E00               	movlw	0
  4877  0031AE  1437               	andwf	___altoft@c,w,c
  4878  0031B0  6E3B               	movwf	??___altoft& (0+255),c
  4879  0031B2  0E00               	movlw	0
  4880  0031B4  1438               	andwf	___altoft@c+1,w,c
  4881  0031B6  6E3C               	movwf	(??___altoft+1)& (0+255),c
  4882  0031B8  0E00               	movlw	0
  4883  0031BA  1439               	andwf	___altoft@c+2,w,c
  4884  0031BC  6E3D               	movwf	(??___altoft+2)& (0+255),c
  4885  0031BE  0EFF               	movlw	255
  4886  0031C0  143A               	andwf	___altoft@c+3,w,c
  4887  0031C2  6E3E               	movwf	(??___altoft+3)& (0+255),c
  4888  0031C4  503B               	movf	??___altoft,w,c
  4889  0031C6  103C               	iorwf	??___altoft+1,w,c
  4890  0031C8  103D               	iorwf	??___altoft+2,w,c
  4891  0031CA  103E               	iorwf	??___altoft+3,w,c
  4892  0031CC  A4D8               	btfss	status,2,c
  4893  0031CE  D7E7               	goto	l3561
  4894  0031D0  C037  F001         	movff	___altoft@c,___ftpack@arg
  4895  0031D4  C038  F002         	movff	___altoft@c+1,___ftpack@arg+1
  4896  0031D8  C039  F003         	movff	___altoft@c+2,___ftpack@arg+2
  4897  0031DC  C03F  F004         	movff	___altoft@exp,___ftpack@exp
  4898  0031E0  C040  F005         	movff	___altoft@sign,___ftpack@sign
  4899  0031E4  EC93  F015         	call	___ftpack	;wreg free
  4900  0031E8  C001  F037         	movff	?___ftpack,?___altoft
  4901  0031EC  C002  F038         	movff	?___ftpack+1,?___altoft+1
  4902  0031F0  C003  F039         	movff	?___ftpack+2,?___altoft+2
  4903  0031F4  0012               	return	
  4904  0031F6  0012               	return		;funcret
  4905  0031F8                     __end_of___altoft:
  4906                           	opt stack 0
  4907                           tblptru	equ	0xFF8
  4908                           tblptrh	equ	0xFF7
  4909                           tblptrl	equ	0xFF6
  4910                           tablat	equ	0xFF5
  4911                           postinc0	equ	0xFEE
  4912                           wreg	equ	0xFE8
  4913                           postdec1	equ	0xFE5
  4914                           fsr1l	equ	0xFE1
  4915                           indf2	equ	0xFDF
  4916                           postinc2	equ	0xFDE
  4917                           postdec2	equ	0xFDD
  4918                           fsr2h	equ	0xFDA
  4919                           fsr2l	equ	0xFD9
  4920                           status	equ	0xFD8
  4921                           
  4922 ;; *************** function _eval_poly *****************
  4923 ;; Defined at:
  4924 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\evalpoly.c"
  4925 ;; Parameters:    Size  Location     Type
  4926 ;;  x               3   39[COMRAM] float 
  4927 ;;  d               2   42[COMRAM] PTR const 
  4928 ;;		 -> log@coeff(27), exp@coeff(30), 
  4929 ;;  n               2   44[COMRAM] int 
  4930 ;; Auto vars:     Size  Location     Type
  4931 ;;  res             3   48[COMRAM] int 
  4932 ;; Return value:  Size  Location     Type
  4933 ;;                  3   39[COMRAM] int 
  4934 ;; Registers used:
  4935 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4936 ;; Tracked objects:
  4937 ;;		On entry : 0/0
  4938 ;;		On exit  : 0/0
  4939 ;;		Unchanged: 0/0
  4940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4941 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4942 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4943 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4944 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4945 ;;Total ram usage:       12 bytes
  4946 ;; Hardware stack levels used:    1
  4947 ;; Hardware stack levels required when called:    2
  4948 ;; This function calls:
  4949 ;;		___ftadd
  4950 ;;		___ftmul
  4951 ;;		___wmul
  4952 ;; This function is called by:
  4953 ;;		_exp
  4954 ;;		_log
  4955 ;; This function uses a non-reentrant model
  4956 ;;
  4957                           
  4958                           	psect	text26
  4959  002A52                     __ptext26:
  4960                           	opt stack 0
  4961  002A52                     _eval_poly:
  4962                           	opt stack 23
  4963                           
  4964                           ;incstack = 0
  4965  002A52  C02D  F001         	movff	eval_poly@n,___wmul@multiplier
  4966  002A56  C02E  F002         	movff	eval_poly@n+1,___wmul@multiplier+1
  4967  002A5A  0E00               	movlw	0
  4968  002A5C  6E04               	movwf	___wmul@multiplicand+1,c
  4969  002A5E  0E03               	movlw	3
  4970  002A60  6E03               	movwf	___wmul@multiplicand,c
  4971  002A62  EC77  F01C         	call	___wmul	;wreg free
  4972  002A66  C02B  F02F         	movff	eval_poly@d,??_eval_poly
  4973  002A6A  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
  4974  002A6E  5001               	movf	?___wmul,w,c
  4975  002A70  262F               	addwf	??_eval_poly,f,c
  4976  002A72  5002               	movf	?___wmul+1,w,c
  4977  002A74  2230               	addwfc	??_eval_poly+1,f,c
  4978  002A76  C02F  FFF6         	movff	??_eval_poly,tblptrl
  4979  002A7A  C030  FFF7         	movff	??_eval_poly+1,tblptrh
  4980  002A7E                     	if	0	;tblptru may be non-zero
  4981  002A7E                     	endif
  4982  002A7E                     	if	0	;tblptru may be non-zero
  4983  002A7E                     	endif
  4984  002A7E  0009               	tblrd		*+
  4985  002A80  CFF5 F031          	movff	tablat,eval_poly@res
  4986  002A84  0009               	tblrd		*+
  4987  002A86  CFF5 F032          	movff	tablat,eval_poly@res+1
  4988  002A8A  000A               	tblrd		*-
  4989  002A8C  CFF5 F033          	movff	tablat,eval_poly@res+2
  4990  002A90  D03F               	goto	l3941
  4991  002A92                     l3939:
  4992  002A92  C031  F010         	movff	eval_poly@res,___ftmul@f2
  4993  002A96  C032  F011         	movff	eval_poly@res+1,___ftmul@f2+1
  4994  002A9A  C033  F012         	movff	eval_poly@res+2,___ftmul@f2+2
  4995  002A9E  C028  F00D         	movff	eval_poly@x,___ftmul@f1
  4996  002AA2  C029  F00E         	movff	eval_poly@x+1,___ftmul@f1+1
  4997  002AA6  C02A  F00F         	movff	eval_poly@x+2,___ftmul@f1+2
  4998  002AAA  EC03  F012         	call	___ftmul	;wreg free
  4999  002AAE  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  5000  002AB2  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  5001  002AB6  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  5002  002ABA  0E00               	movlw	0
  5003  002ABC  6E04               	movwf	___wmul@multiplicand+1,c
  5004  002ABE  0E03               	movlw	3
  5005  002AC0  6E03               	movwf	___wmul@multiplicand,c
  5006  002AC2  062D               	decf	eval_poly@n,f,c
  5007  002AC4  A0D8               	btfss	status,0,c
  5008  002AC6  062E               	decf	eval_poly@n+1,f,c
  5009  002AC8  C02D  F001         	movff	eval_poly@n,___wmul@multiplier
  5010  002ACC  C02E  F002         	movff	eval_poly@n+1,___wmul@multiplier+1
  5011  002AD0  EC77  F01C         	call	___wmul	;wreg free
  5012  002AD4  C02B  F02F         	movff	eval_poly@d,??_eval_poly
  5013  002AD8  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
  5014  002ADC  5001               	movf	?___wmul,w,c
  5015  002ADE  262F               	addwf	??_eval_poly,f,c
  5016  002AE0  5002               	movf	?___wmul+1,w,c
  5017  002AE2  2230               	addwfc	??_eval_poly+1,f,c
  5018  002AE4  C02F  FFF6         	movff	??_eval_poly,tblptrl
  5019  002AE8  C030  FFF7         	movff	??_eval_poly+1,tblptrh
  5020  002AEC                     	if	0	;tblptru may be non-zero
  5021  002AEC                     	endif
  5022  002AEC                     	if	0	;tblptru may be non-zero
  5023  002AEC                     	endif
  5024  002AEC  0009               	tblrd		*+
  5025  002AEE  CFF5 F01F          	movff	tablat,___ftadd@f2
  5026  002AF2  0009               	tblrd		*+
  5027  002AF4  CFF5 F020          	movff	tablat,___ftadd@f2+1
  5028  002AF8  000A               	tblrd		*-
  5029  002AFA  CFF5 F021          	movff	tablat,___ftadd@f2+2
  5030  002AFE  EC74  F00B         	call	___ftadd	;wreg free
  5031  002B02  C01C  F031         	movff	?___ftadd,eval_poly@res
  5032  002B06  C01D  F032         	movff	?___ftadd+1,eval_poly@res+1
  5033  002B0A  C01E  F033         	movff	?___ftadd+2,eval_poly@res+2
  5034  002B0E  D000               	goto	l3941
  5035  002B10                     l3941:
  5036  002B10  502D               	movf	eval_poly@n,w,c
  5037  002B12  102E               	iorwf	eval_poly@n+1,w,c
  5038  002B14  A4D8               	btfss	status,2,c
  5039  002B16  D7BD               	goto	l3939
  5040  002B18  C031  F028         	movff	eval_poly@res,?_eval_poly
  5041  002B1C  C032  F029         	movff	eval_poly@res+1,?_eval_poly+1
  5042  002B20  C033  F02A         	movff	eval_poly@res+2,?_eval_poly+2
  5043  002B24  0012               	return		;funcret
  5044  002B26                     __end_of_eval_poly:
  5045                           	opt stack 0
  5046                           tblptru	equ	0xFF8
  5047                           tblptrh	equ	0xFF7
  5048                           tblptrl	equ	0xFF6
  5049                           tablat	equ	0xFF5
  5050                           postinc0	equ	0xFEE
  5051                           wreg	equ	0xFE8
  5052                           postdec1	equ	0xFE5
  5053                           fsr1l	equ	0xFE1
  5054                           indf2	equ	0xFDF
  5055                           postinc2	equ	0xFDE
  5056                           postdec2	equ	0xFDD
  5057                           fsr2h	equ	0xFDA
  5058                           fsr2l	equ	0xFD9
  5059                           status	equ	0xFD8
  5060                           
  5061 ;; *************** function ___ftmul *****************
  5062 ;; Defined at:
  5063 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  5064 ;; Parameters:    Size  Location     Type
  5065 ;;  f1              3   12[COMRAM] float 
  5066 ;;  f2              3   15[COMRAM] float 
  5067 ;; Auto vars:     Size  Location     Type
  5068 ;;  f3_as_produc    3   22[COMRAM] unsigned um
  5069 ;;  sign            1   26[COMRAM] unsigned char 
  5070 ;;  cntr            1   25[COMRAM] unsigned char 
  5071 ;;  exp             1   21[COMRAM] unsigned char 
  5072 ;; Return value:  Size  Location     Type
  5073 ;;                  3   12[COMRAM] float 
  5074 ;; Registers used:
  5075 ;;		wreg, status,2, status,0, cstack
  5076 ;; Tracked objects:
  5077 ;;		On entry : 0/0
  5078 ;;		On exit  : 0/0
  5079 ;;		Unchanged: 0/0
  5080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5081 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5082 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5083 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5084 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5085 ;;Total ram usage:       15 bytes
  5086 ;; Hardware stack levels used:    1
  5087 ;; Hardware stack levels required when called:    1
  5088 ;; This function calls:
  5089 ;;		___ftpack
  5090 ;; This function is called by:
  5091 ;;		_obtain_pass
  5092 ;;		_input_old_pass
  5093 ;;		_input_new_pass
  5094 ;;		_pow
  5095 ;;		_exp
  5096 ;;		_log
  5097 ;;		_eval_poly
  5098 ;; This function uses a non-reentrant model
  5099 ;;
  5100                           
  5101                           	psect	text27
  5102  002406                     __ptext27:
  5103                           	opt stack 0
  5104  002406                     ___ftmul:
  5105                           	opt stack 23
  5106                           
  5107                           ;incstack = 0
  5108  002406  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
  5109  00240A  6A14               	clrf	(??___ftmul+1)& (0+255),c
  5110  00240C  6A15               	clrf	(??___ftmul+2)& (0+255),c
  5111  00240E  340E               	rlcf	___ftmul@f1+1,w,c
  5112  002410  3613               	rlcf	??___ftmul& (0+255),f,c
  5113  002412  E301               	bnc	u2761
  5114  002414  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  5115  002416                     u2761:
  5116  002416  5013               	movf	??___ftmul,w,c
  5117  002418  6E16               	movwf	___ftmul@exp,c
  5118  00241A  5016               	movf	___ftmul@exp,w,c
  5119  00241C  A4D8               	btfss	status,2,c
  5120  00241E  D007               	goto	l3645
  5121  002420  0E00               	movlw	0
  5122  002422  6E0D               	movwf	?___ftmul,c
  5123  002424  0E00               	movlw	0
  5124  002426  6E0E               	movwf	?___ftmul+1,c
  5125  002428  0E00               	movlw	0
  5126  00242A  6E0F               	movwf	?___ftmul+2,c
  5127  00242C  0012               	return	
  5128  00242E                     l3645:
  5129  00242E  C012  F013         	movff	___ftmul@f2+2,??___ftmul
  5130  002432  6A14               	clrf	(??___ftmul+1)& (0+255),c
  5131  002434  6A15               	clrf	(??___ftmul+2)& (0+255),c
  5132  002436  3411               	rlcf	___ftmul@f2+1,w,c
  5133  002438  3613               	rlcf	??___ftmul& (0+255),f,c
  5134  00243A  E301               	bnc	u2781
  5135  00243C  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  5136  00243E                     u2781:
  5137  00243E  5013               	movf	??___ftmul,w,c
  5138  002440  6E1B               	movwf	___ftmul@sign,c
  5139  002442  501B               	movf	___ftmul@sign,w,c
  5140  002444  A4D8               	btfss	status,2,c
  5141  002446  D007               	goto	l3651
  5142  002448  0E00               	movlw	0
  5143  00244A  6E0D               	movwf	?___ftmul,c
  5144  00244C  0E00               	movlw	0
  5145  00244E  6E0E               	movwf	?___ftmul+1,c
  5146  002450  0E00               	movlw	0
  5147  002452  6E0F               	movwf	?___ftmul+2,c
  5148  002454  0012               	return	
  5149  002456                     l3651:
  5150  002456  501B               	movf	___ftmul@sign,w,c
  5151  002458  0F7B               	addlw	123
  5152  00245A  2616               	addwf	___ftmul@exp,f,c
  5153  00245C  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
  5154  002460  5012               	movf	___ftmul@f2+2,w,c
  5155  002462  1A1B               	xorwf	___ftmul@sign,f,c
  5156  002464  0E80               	movlw	128
  5157  002466  161B               	andwf	___ftmul@sign,f,c
  5158  002468  8E0E               	bsf	___ftmul@f1+1,7,c
  5159  00246A  8E11               	bsf	___ftmul@f2+1,7,c
  5160  00246C  0EFF               	movlw	255
  5161  00246E  1610               	andwf	___ftmul@f2,f,c
  5162  002470  0EFF               	movlw	255
  5163  002472  1611               	andwf	___ftmul@f2+1,f,c
  5164  002474  0E00               	movlw	0
  5165  002476  1612               	andwf	___ftmul@f2+2,f,c
  5166  002478  0E00               	movlw	0
  5167  00247A  6E17               	movwf	___ftmul@f3_as_product,c
  5168  00247C  0E00               	movlw	0
  5169  00247E  6E18               	movwf	___ftmul@f3_as_product+1,c
  5170  002480  0E00               	movlw	0
  5171  002482  6E19               	movwf	___ftmul@f3_as_product+2,c
  5172  002484  0E07               	movlw	7
  5173  002486  6E1A               	movwf	___ftmul@cntr,c
  5174  002488  D000               	goto	l3665
  5175  00248A                     l3665:
  5176  00248A  A00D               	btfss	___ftmul@f1,0,c
  5177  00248C  D007               	goto	l3669
  5178  00248E  5010               	movf	___ftmul@f2,w,c
  5179  002490  2617               	addwf	___ftmul@f3_as_product,f,c
  5180  002492  5011               	movf	___ftmul@f2+1,w,c
  5181  002494  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  5182  002496  5012               	movf	___ftmul@f2+2,w,c
  5183  002498  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  5184  00249A  D000               	goto	l3669
  5185  00249C                     l3669:
  5186  00249C  90D8               	bcf	status,0,c
  5187  00249E  320F               	rrcf	___ftmul@f1+2,f,c
  5188  0024A0  320E               	rrcf	___ftmul@f1+1,f,c
  5189  0024A2  320D               	rrcf	___ftmul@f1,f,c
  5190  0024A4  90D8               	bcf	status,0,c
  5191  0024A6  3610               	rlcf	___ftmul@f2,f,c
  5192  0024A8  3611               	rlcf	___ftmul@f2+1,f,c
  5193  0024AA  3612               	rlcf	___ftmul@f2+2,f,c
  5194  0024AC  2E1A               	decfsz	___ftmul@cntr,f,c
  5195  0024AE  D7ED               	goto	l3665
  5196  0024B0  D000               	goto	l3673
  5197  0024B2                     l3673:
  5198  0024B2  0E09               	movlw	9
  5199  0024B4  6E1A               	movwf	___ftmul@cntr,c
  5200  0024B6  D000               	goto	l3675
  5201  0024B8                     l3675:
  5202  0024B8  A00D               	btfss	___ftmul@f1,0,c
  5203  0024BA  D007               	goto	l3679
  5204  0024BC  5010               	movf	___ftmul@f2,w,c
  5205  0024BE  2617               	addwf	___ftmul@f3_as_product,f,c
  5206  0024C0  5011               	movf	___ftmul@f2+1,w,c
  5207  0024C2  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  5208  0024C4  5012               	movf	___ftmul@f2+2,w,c
  5209  0024C6  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  5210  0024C8  D000               	goto	l3679
  5211  0024CA                     l3679:
  5212  0024CA  90D8               	bcf	status,0,c
  5213  0024CC  320F               	rrcf	___ftmul@f1+2,f,c
  5214  0024CE  320E               	rrcf	___ftmul@f1+1,f,c
  5215  0024D0  320D               	rrcf	___ftmul@f1,f,c
  5216  0024D2  90D8               	bcf	status,0,c
  5217  0024D4  3219               	rrcf	___ftmul@f3_as_product+2,f,c
  5218  0024D6  3218               	rrcf	___ftmul@f3_as_product+1,f,c
  5219  0024D8  3217               	rrcf	___ftmul@f3_as_product,f,c
  5220  0024DA  2E1A               	decfsz	___ftmul@cntr,f,c
  5221  0024DC  D7ED               	goto	l3675
  5222  0024DE  D000               	goto	l3683
  5223  0024E0                     l3683:
  5224  0024E0  C017  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  5225  0024E4  C018  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5226  0024E8  C019  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5227  0024EC  C016  F004         	movff	___ftmul@exp,___ftpack@exp
  5228  0024F0  C01B  F005         	movff	___ftmul@sign,___ftpack@sign
  5229  0024F4  EC93  F015         	call	___ftpack	;wreg free
  5230  0024F8  C001  F00D         	movff	?___ftpack,?___ftmul
  5231  0024FC  C002  F00E         	movff	?___ftpack+1,?___ftmul+1
  5232  002500  C003  F00F         	movff	?___ftpack+2,?___ftmul+2
  5233  002504  0012               	return	
  5234  002506  0012               	return		;funcret
  5235  002508                     __end_of___ftmul:
  5236                           	opt stack 0
  5237                           tblptru	equ	0xFF8
  5238                           tblptrh	equ	0xFF7
  5239                           tblptrl	equ	0xFF6
  5240                           tablat	equ	0xFF5
  5241                           postinc0	equ	0xFEE
  5242                           wreg	equ	0xFE8
  5243                           postdec1	equ	0xFE5
  5244                           fsr1l	equ	0xFE1
  5245                           indf2	equ	0xFDF
  5246                           postinc2	equ	0xFDE
  5247                           postdec2	equ	0xFDD
  5248                           fsr2h	equ	0xFDA
  5249                           fsr2l	equ	0xFD9
  5250                           status	equ	0xFD8
  5251                           
  5252 ;; *************** function ___ftsub *****************
  5253 ;; Defined at:
  5254 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
  5255 ;; Parameters:    Size  Location     Type
  5256 ;;  f1              3   39[COMRAM] float 
  5257 ;;  f2              3   42[COMRAM] float 
  5258 ;; Auto vars:     Size  Location     Type
  5259 ;;		None
  5260 ;; Return value:  Size  Location     Type
  5261 ;;                  3   39[COMRAM] float 
  5262 ;; Registers used:
  5263 ;;		wreg, status,2, status,0, cstack
  5264 ;; Tracked objects:
  5265 ;;		On entry : 0/0
  5266 ;;		On exit  : 0/0
  5267 ;;		Unchanged: 0/0
  5268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5269 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5272 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5273 ;;Total ram usage:        6 bytes
  5274 ;; Hardware stack levels used:    1
  5275 ;; Hardware stack levels required when called:    2
  5276 ;; This function calls:
  5277 ;;		___ftadd
  5278 ;; This function is called by:
  5279 ;;		_exp
  5280 ;; This function uses a non-reentrant model
  5281 ;;
  5282                           
  5283                           	psect	text28
  5284  00369C                     __ptext28:
  5285                           	opt stack 0
  5286  00369C                     ___ftsub:
  5287                           	opt stack 23
  5288                           
  5289                           ;incstack = 0
  5290  00369C  502B               	movf	___ftsub@f2,w,c
  5291  00369E  102C               	iorwf	___ftsub@f2+1,w,c
  5292  0036A0  102D               	iorwf	___ftsub@f2+2,w,c
  5293  0036A2  B4D8               	btfsc	status,2,c
  5294  0036A4  D007               	goto	l3855
  5295  0036A6  0E00               	movlw	0
  5296  0036A8  1A2B               	xorwf	___ftsub@f2,f,c
  5297  0036AA  0E00               	movlw	0
  5298  0036AC  1A2C               	xorwf	___ftsub@f2+1,f,c
  5299  0036AE  0E80               	movlw	128
  5300  0036B0  1A2D               	xorwf	___ftsub@f2+2,f,c
  5301  0036B2  D000               	goto	l3855
  5302  0036B4                     l3855:
  5303  0036B4  C028  F01C         	movff	___ftsub@f1,___ftadd@f1
  5304  0036B8  C029  F01D         	movff	___ftsub@f1+1,___ftadd@f1+1
  5305  0036BC  C02A  F01E         	movff	___ftsub@f1+2,___ftadd@f1+2
  5306  0036C0  C02B  F01F         	movff	___ftsub@f2,___ftadd@f2
  5307  0036C4  C02C  F020         	movff	___ftsub@f2+1,___ftadd@f2+1
  5308  0036C8  C02D  F021         	movff	___ftsub@f2+2,___ftadd@f2+2
  5309  0036CC  EC74  F00B         	call	___ftadd	;wreg free
  5310  0036D0  C01C  F028         	movff	?___ftadd,?___ftsub
  5311  0036D4  C01D  F029         	movff	?___ftadd+1,?___ftsub+1
  5312  0036D8  C01E  F02A         	movff	?___ftadd+2,?___ftsub+2
  5313  0036DC  0012               	return	
  5314  0036DE  0012               	return		;funcret
  5315  0036E0                     __end_of___ftsub:
  5316                           	opt stack 0
  5317                           tblptru	equ	0xFF8
  5318                           tblptrh	equ	0xFF7
  5319                           tblptrl	equ	0xFF6
  5320                           tablat	equ	0xFF5
  5321                           postinc0	equ	0xFEE
  5322                           wreg	equ	0xFE8
  5323                           postdec1	equ	0xFE5
  5324                           fsr1l	equ	0xFE1
  5325                           indf2	equ	0xFDF
  5326                           postinc2	equ	0xFDE
  5327                           postdec2	equ	0xFDD
  5328                           fsr2h	equ	0xFDA
  5329                           fsr2l	equ	0xFD9
  5330                           status	equ	0xFD8
  5331                           
  5332 ;; *************** function ___ftadd *****************
  5333 ;; Defined at:
  5334 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
  5335 ;; Parameters:    Size  Location     Type
  5336 ;;  f1              3   27[COMRAM] float 
  5337 ;;  f2              3   30[COMRAM] float 
  5338 ;; Auto vars:     Size  Location     Type
  5339 ;;  exp1            1   38[COMRAM] unsigned char 
  5340 ;;  exp2            1   37[COMRAM] unsigned char 
  5341 ;;  sign            1   36[COMRAM] unsigned char 
  5342 ;; Return value:  Size  Location     Type
  5343 ;;                  3   27[COMRAM] float 
  5344 ;; Registers used:
  5345 ;;		wreg, status,2, status,0, cstack
  5346 ;; Tracked objects:
  5347 ;;		On entry : 0/0
  5348 ;;		On exit  : 0/0
  5349 ;;		Unchanged: 0/0
  5350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5351 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5352 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5353 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5354 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5355 ;;Total ram usage:       12 bytes
  5356 ;; Hardware stack levels used:    1
  5357 ;; Hardware stack levels required when called:    1
  5358 ;; This function calls:
  5359 ;;		___ftpack
  5360 ;; This function is called by:
  5361 ;;		_obtain_pass
  5362 ;;		_input_old_pass
  5363 ;;		_input_new_pass
  5364 ;;		___ftsub
  5365 ;;		_floor
  5366 ;;		_log
  5367 ;;		_eval_poly
  5368 ;; This function uses a non-reentrant model
  5369 ;;
  5370                           
  5371                           	psect	text29
  5372  0016E8                     __ptext29:
  5373                           	opt stack 0
  5374  0016E8                     ___ftadd:
  5375                           	opt stack 23
  5376                           
  5377                           ;incstack = 0
  5378  0016E8  C01E  F022         	movff	___ftadd@f1+2,??___ftadd
  5379  0016EC  6A23               	clrf	(??___ftadd+1)& (0+255),c
  5380  0016EE  6A24               	clrf	(??___ftadd+2)& (0+255),c
  5381  0016F0  341D               	rlcf	___ftadd@f1+1,w,c
  5382  0016F2  3622               	rlcf	??___ftadd& (0+255),f,c
  5383  0016F4  E301               	bnc	u2551
  5384  0016F6  8023               	bsf	(??___ftadd+1)& (0+255),0,c
  5385  0016F8                     u2551:
  5386  0016F8  5022               	movf	??___ftadd,w,c
  5387  0016FA  6E27               	movwf	___ftadd@exp1,c
  5388  0016FC  C021  F022         	movff	___ftadd@f2+2,??___ftadd
  5389  001700  6A23               	clrf	(??___ftadd+1)& (0+255),c
  5390  001702  6A24               	clrf	(??___ftadd+2)& (0+255),c
  5391  001704  3420               	rlcf	___ftadd@f2+1,w,c
  5392  001706  3622               	rlcf	??___ftadd& (0+255),f,c
  5393  001708  E301               	bnc	u2561
  5394  00170A  8023               	bsf	(??___ftadd+1)& (0+255),0,c
  5395  00170C                     u2561:
  5396  00170C  5022               	movf	??___ftadd,w,c
  5397  00170E  6E26               	movwf	___ftadd@exp2,c
  5398  001710  5027               	movf	___ftadd@exp1,w,c
  5399  001712  B4D8               	btfsc	status,2,c
  5400  001714  D00B               	goto	l1452
  5401  001716  5026               	movf	___ftadd@exp2,w,c
  5402  001718  5C27               	subwf	___ftadd@exp1,w,c
  5403  00171A  B0D8               	btfsc	status,0,c
  5404  00171C  D00E               	goto	l3577
  5405  00171E  5027               	movf	___ftadd@exp1,w,c
  5406  001720  0800               	sublw	0
  5407  001722  2426               	addwf	___ftadd@exp2,w,c
  5408  001724  6E22               	movwf	??___ftadd& (0+255),c
  5409  001726  0E18               	movlw	24
  5410  001728  6422               	cpfsgt	??___ftadd,c
  5411  00172A  D007               	goto	l3577
  5412  00172C                     l1452:
  5413  00172C  C01F  F01C         	movff	___ftadd@f2,?___ftadd
  5414  001730  C020  F01D         	movff	___ftadd@f2+1,?___ftadd+1
  5415  001734  C021  F01E         	movff	___ftadd@f2+2,?___ftadd+2
  5416  001738  0012               	return	
  5417  00173A                     l3577:
  5418  00173A  5026               	movf	___ftadd@exp2,w,c
  5419  00173C  B4D8               	btfsc	status,2,c
  5420  00173E  D00B               	goto	l1456
  5421  001740  5027               	movf	___ftadd@exp1,w,c
  5422  001742  5C26               	subwf	___ftadd@exp2,w,c
  5423  001744  B0D8               	btfsc	status,0,c
  5424  001746  D00E               	goto	l3583
  5425  001748  5026               	movf	___ftadd@exp2,w,c
  5426  00174A  0800               	sublw	0
  5427  00174C  2427               	addwf	___ftadd@exp1,w,c
  5428  00174E  6E22               	movwf	??___ftadd& (0+255),c
  5429  001750  0E18               	movlw	24
  5430  001752  6422               	cpfsgt	??___ftadd,c
  5431  001754  D007               	goto	l3583
  5432  001756                     l1456:
  5433  001756  C01C  F01C         	movff	___ftadd@f1,?___ftadd
  5434  00175A  C01D  F01D         	movff	___ftadd@f1+1,?___ftadd+1
  5435  00175E  C01E  F01E         	movff	___ftadd@f1+2,?___ftadd+2
  5436  001762  0012               	return	
  5437  001764                     l3583:
  5438  001764  0E06               	movlw	6
  5439  001766  6E25               	movwf	___ftadd@sign,c
  5440  001768  AE1E               	btfss	___ftadd@f1+2,7,c
  5441  00176A  D002               	goto	l3589
  5442  00176C  8E25               	bsf	___ftadd@sign,7,c
  5443  00176E  D000               	goto	l3589
  5444  001770                     l3589:
  5445  001770  BE21               	btfsc	___ftadd@f2+2,7,c
  5446  001772  8C25               	bsf	___ftadd@sign,6,c
  5447  001774  8E1D               	bsf	___ftadd@f1+1,7,c
  5448  001776  0EFF               	movlw	255
  5449  001778  161C               	andwf	___ftadd@f1,f,c
  5450  00177A  0EFF               	movlw	255
  5451  00177C  161D               	andwf	___ftadd@f1+1,f,c
  5452  00177E  0E00               	movlw	0
  5453  001780  161E               	andwf	___ftadd@f1+2,f,c
  5454  001782  8E20               	bsf	___ftadd@f2+1,7,c
  5455  001784  0EFF               	movlw	255
  5456  001786  161F               	andwf	___ftadd@f2,f,c
  5457  001788  0EFF               	movlw	255
  5458  00178A  1620               	andwf	___ftadd@f2+1,f,c
  5459  00178C  0E00               	movlw	0
  5460  00178E  1621               	andwf	___ftadd@f2+2,f,c
  5461  001790  5026               	movf	___ftadd@exp2,w,c
  5462  001792  5C27               	subwf	___ftadd@exp1,w,c
  5463  001794  B0D8               	btfsc	status,0,c
  5464  001796  D01E               	goto	l3609
  5465  001798                     l3599:
  5466  001798  90D8               	bcf	status,0,c
  5467  00179A  361F               	rlcf	___ftadd@f2,f,c
  5468  00179C  3620               	rlcf	___ftadd@f2+1,f,c
  5469  00179E  3621               	rlcf	___ftadd@f2+2,f,c
  5470  0017A0  0626               	decf	___ftadd@exp2,f,c
  5471  0017A2  5027               	movf	___ftadd@exp1,w,c
  5472  0017A4  1826               	xorwf	___ftadd@exp2,w,c
  5473  0017A6  B4D8               	btfsc	status,2,c
  5474  0017A8  D00F               	goto	l3607
  5475  0017AA  0625               	decf	___ftadd@sign,f,c
  5476  0017AC  C025  F022         	movff	___ftadd@sign,??___ftadd
  5477  0017B0  0E07               	movlw	7
  5478  0017B2  1622               	andwf	??___ftadd,f,c
  5479  0017B4  B4D8               	btfsc	status,2,c
  5480  0017B6  D008               	goto	l3607
  5481  0017B8  D7EF               	goto	l3599
  5482  0017BA  D006               	goto	l3607
  5483  0017BC                     l3605:
  5484  0017BC  90D8               	bcf	status,0,c
  5485  0017BE  321E               	rrcf	___ftadd@f1+2,f,c
  5486  0017C0  321D               	rrcf	___ftadd@f1+1,f,c
  5487  0017C2  321C               	rrcf	___ftadd@f1,f,c
  5488  0017C4  2A27               	incf	___ftadd@exp1,f,c
  5489  0017C6  D000               	goto	l3607
  5490  0017C8                     l3607:
  5491  0017C8  5026               	movf	___ftadd@exp2,w,c
  5492  0017CA  1827               	xorwf	___ftadd@exp1,w,c
  5493  0017CC  B4D8               	btfsc	status,2,c
  5494  0017CE  D024               	goto	l1467
  5495  0017D0  D7F5               	goto	l3605
  5496  0017D2  D022               	goto	l1467
  5497  0017D4                     l3609:
  5498  0017D4  5027               	movf	___ftadd@exp1,w,c
  5499  0017D6  5C26               	subwf	___ftadd@exp2,w,c
  5500  0017D8  B0D8               	btfsc	status,0,c
  5501  0017DA  D01E               	goto	l1467
  5502  0017DC                     l3611:
  5503  0017DC  90D8               	bcf	status,0,c
  5504  0017DE  361C               	rlcf	___ftadd@f1,f,c
  5505  0017E0  361D               	rlcf	___ftadd@f1+1,f,c
  5506  0017E2  361E               	rlcf	___ftadd@f1+2,f,c
  5507  0017E4  0627               	decf	___ftadd@exp1,f,c
  5508  0017E6  5027               	movf	___ftadd@exp1,w,c
  5509  0017E8  1826               	xorwf	___ftadd@exp2,w,c
  5510  0017EA  B4D8               	btfsc	status,2,c
  5511  0017EC  D00F               	goto	l3619
  5512  0017EE  0625               	decf	___ftadd@sign,f,c
  5513  0017F0  C025  F022         	movff	___ftadd@sign,??___ftadd
  5514  0017F4  0E07               	movlw	7
  5515  0017F6  1622               	andwf	??___ftadd,f,c
  5516  0017F8  B4D8               	btfsc	status,2,c
  5517  0017FA  D008               	goto	l3619
  5518  0017FC  D7EF               	goto	l3611
  5519  0017FE  D006               	goto	l3619
  5520  001800                     l3617:
  5521  001800  90D8               	bcf	status,0,c
  5522  001802  3221               	rrcf	___ftadd@f2+2,f,c
  5523  001804  3220               	rrcf	___ftadd@f2+1,f,c
  5524  001806  321F               	rrcf	___ftadd@f2,f,c
  5525  001808  2A26               	incf	___ftadd@exp2,f,c
  5526  00180A  D000               	goto	l3619
  5527  00180C                     l3619:
  5528  00180C  5026               	movf	___ftadd@exp2,w,c
  5529  00180E  1827               	xorwf	___ftadd@exp1,w,c
  5530  001810  B4D8               	btfsc	status,2,c
  5531  001812  D002               	goto	l1467
  5532  001814  D7F5               	goto	l3617
  5533  001816  D000               	goto	l1467
  5534  001818                     l1467:
  5535  001818  AE25               	btfss	___ftadd@sign,7,c
  5536  00181A  D00C               	goto	l1476
  5537  00181C  0EFF               	movlw	255
  5538  00181E  1A1C               	xorwf	___ftadd@f1,f,c
  5539  001820  0EFF               	movlw	255
  5540  001822  1A1D               	xorwf	___ftadd@f1+1,f,c
  5541  001824  0EFF               	movlw	255
  5542  001826  1A1E               	xorwf	___ftadd@f1+2,f,c
  5543  001828  0E01               	movlw	1
  5544  00182A  261C               	addwf	___ftadd@f1,f,c
  5545  00182C  0E00               	movlw	0
  5546  00182E  221D               	addwfc	___ftadd@f1+1,f,c
  5547  001830  0E00               	movlw	0
  5548  001832  221E               	addwfc	___ftadd@f1+2,f,c
  5549  001834                     l1476:
  5550  001834  AC25               	btfss	___ftadd@sign,6,c
  5551  001836  D00D               	goto	l3625
  5552  001838  0EFF               	movlw	255
  5553  00183A  1A1F               	xorwf	___ftadd@f2,f,c
  5554  00183C  0EFF               	movlw	255
  5555  00183E  1A20               	xorwf	___ftadd@f2+1,f,c
  5556  001840  0EFF               	movlw	255
  5557  001842  1A21               	xorwf	___ftadd@f2+2,f,c
  5558  001844  0E01               	movlw	1
  5559  001846  261F               	addwf	___ftadd@f2,f,c
  5560  001848  0E00               	movlw	0
  5561  00184A  2220               	addwfc	___ftadd@f2+1,f,c
  5562  00184C  0E00               	movlw	0
  5563  00184E  2221               	addwfc	___ftadd@f2+2,f,c
  5564  001850  D000               	goto	l3625
  5565  001852                     l3625:
  5566  001852  0E00               	movlw	0
  5567  001854  6E25               	movwf	___ftadd@sign,c
  5568  001856  501C               	movf	___ftadd@f1,w,c
  5569  001858  261F               	addwf	___ftadd@f2,f,c
  5570  00185A  501D               	movf	___ftadd@f1+1,w,c
  5571  00185C  2220               	addwfc	___ftadd@f2+1,f,c
  5572  00185E  501E               	movf	___ftadd@f1+2,w,c
  5573  001860  2221               	addwfc	___ftadd@f2+2,f,c
  5574  001862  AE21               	btfss	___ftadd@f2+2,7,c
  5575  001864  D00F               	goto	l3635
  5576  001866  0EFF               	movlw	255
  5577  001868  1A1F               	xorwf	___ftadd@f2,f,c
  5578  00186A  0EFF               	movlw	255
  5579  00186C  1A20               	xorwf	___ftadd@f2+1,f,c
  5580  00186E  0EFF               	movlw	255
  5581  001870  1A21               	xorwf	___ftadd@f2+2,f,c
  5582  001872  0E01               	movlw	1
  5583  001874  261F               	addwf	___ftadd@f2,f,c
  5584  001876  0E00               	movlw	0
  5585  001878  2220               	addwfc	___ftadd@f2+1,f,c
  5586  00187A  0E00               	movlw	0
  5587  00187C  2221               	addwfc	___ftadd@f2+2,f,c
  5588  00187E  0E01               	movlw	1
  5589  001880  6E25               	movwf	___ftadd@sign,c
  5590  001882  D000               	goto	l3635
  5591  001884                     l3635:
  5592  001884  C01F  F001         	movff	___ftadd@f2,___ftpack@arg
  5593  001888  C020  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  5594  00188C  C021  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  5595  001890  C027  F004         	movff	___ftadd@exp1,___ftpack@exp
  5596  001894  C025  F005         	movff	___ftadd@sign,___ftpack@sign
  5597  001898  EC93  F015         	call	___ftpack	;wreg free
  5598  00189C  C001  F01C         	movff	?___ftpack,?___ftadd
  5599  0018A0  C002  F01D         	movff	?___ftpack+1,?___ftadd+1
  5600  0018A4  C003  F01E         	movff	?___ftpack+2,?___ftadd+2
  5601  0018A8  0012               	return	
  5602  0018AA  0012               	return		;funcret
  5603  0018AC                     __end_of___ftadd:
  5604                           	opt stack 0
  5605                           tblptru	equ	0xFF8
  5606                           tblptrh	equ	0xFF7
  5607                           tblptrl	equ	0xFF6
  5608                           tablat	equ	0xFF5
  5609                           postinc0	equ	0xFEE
  5610                           wreg	equ	0xFE8
  5611                           postdec1	equ	0xFE5
  5612                           fsr1l	equ	0xFE1
  5613                           indf2	equ	0xFDF
  5614                           postinc2	equ	0xFDE
  5615                           postdec2	equ	0xFDD
  5616                           fsr2h	equ	0xFDA
  5617                           fsr2l	equ	0xFD9
  5618                           status	equ	0xFD8
  5619                           
  5620 ;; *************** function ___ftneg *****************
  5621 ;; Defined at:
  5622 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftneg.c"
  5623 ;; Parameters:    Size  Location     Type
  5624 ;;  f1              3    0[COMRAM] float 
  5625 ;; Auto vars:     Size  Location     Type
  5626 ;;		None
  5627 ;; Return value:  Size  Location     Type
  5628 ;;                  3    0[COMRAM] float 
  5629 ;; Registers used:
  5630 ;;		wreg, status,2, status,0
  5631 ;; Tracked objects:
  5632 ;;		On entry : 0/0
  5633 ;;		On exit  : 0/0
  5634 ;;		Unchanged: 0/0
  5635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5636 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5639 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5640 ;;Total ram usage:        3 bytes
  5641 ;; Hardware stack levels used:    1
  5642 ;; This function calls:
  5643 ;;		Nothing
  5644 ;; This function is called by:
  5645 ;;		_pow
  5646 ;;		_exp
  5647 ;; This function uses a non-reentrant model
  5648 ;;
  5649                           
  5650                           	psect	text30
  5651  003960                     __ptext30:
  5652                           	opt stack 0
  5653  003960                     ___ftneg:
  5654                           	opt stack 25
  5655                           
  5656                           ;incstack = 0
  5657  003960  5001               	movf	___ftneg@f1,w,c
  5658  003962  1002               	iorwf	___ftneg@f1+1,w,c
  5659  003964  1003               	iorwf	___ftneg@f1+2,w,c
  5660  003966  B4D8               	btfsc	status,2,c
  5661  003968  D006               	goto	l1509
  5662  00396A  0E00               	movlw	0
  5663  00396C  1A01               	xorwf	___ftneg@f1,f,c
  5664  00396E  0E00               	movlw	0
  5665  003970  1A02               	xorwf	___ftneg@f1+1,f,c
  5666  003972  0E80               	movlw	128
  5667  003974  1A03               	xorwf	___ftneg@f1+2,f,c
  5668  003976                     l1509:
  5669  003976  C001  F001         	movff	___ftneg@f1,?___ftneg
  5670  00397A  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  5671  00397E  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  5672  003982  0012               	return		;funcret
  5673  003984                     __end_of___ftneg:
  5674                           	opt stack 0
  5675                           tblptru	equ	0xFF8
  5676                           tblptrh	equ	0xFF7
  5677                           tblptrl	equ	0xFF6
  5678                           tablat	equ	0xFF5
  5679                           postinc0	equ	0xFEE
  5680                           wreg	equ	0xFE8
  5681                           postdec1	equ	0xFE5
  5682                           fsr1l	equ	0xFE1
  5683                           indf2	equ	0xFDF
  5684                           postinc2	equ	0xFDE
  5685                           postdec2	equ	0xFDD
  5686                           fsr2h	equ	0xFDA
  5687                           fsr2l	equ	0xFD9
  5688                           status	equ	0xFD8
  5689                           
  5690 ;; *************** function ___ftdiv *****************
  5691 ;; Defined at:
  5692 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  5693 ;; Parameters:    Size  Location     Type
  5694 ;;  f1              3    8[COMRAM] float 
  5695 ;;  f2              3   11[COMRAM] float 
  5696 ;; Auto vars:     Size  Location     Type
  5697 ;;  f3              3   18[COMRAM] float 
  5698 ;;  sign            1   22[COMRAM] unsigned char 
  5699 ;;  exp             1   21[COMRAM] unsigned char 
  5700 ;;  cntr            1   17[COMRAM] unsigned char 
  5701 ;; Return value:  Size  Location     Type
  5702 ;;                  3    8[COMRAM] float 
  5703 ;; Registers used:
  5704 ;;		wreg, status,2, status,0, cstack
  5705 ;; Tracked objects:
  5706 ;;		On entry : 0/0
  5707 ;;		On exit  : 0/0
  5708 ;;		Unchanged: 0/0
  5709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5710 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5711 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5712 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5713 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5714 ;;Total ram usage:       15 bytes
  5715 ;; Hardware stack levels used:    1
  5716 ;; Hardware stack levels required when called:    1
  5717 ;; This function calls:
  5718 ;;		___ftpack
  5719 ;; This function is called by:
  5720 ;;		_exp
  5721 ;; This function uses a non-reentrant model
  5722 ;;
  5723                           
  5724                           	psect	text31
  5725  0025F4                     __ptext31:
  5726                           	opt stack 0
  5727  0025F4                     ___ftdiv:
  5728                           	opt stack 24
  5729                           
  5730                           ;incstack = 0
  5731  0025F4  C00B  F00F         	movff	___ftdiv@f1+2,??___ftdiv
  5732  0025F8  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  5733  0025FA  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  5734  0025FC  340A               	rlcf	___ftdiv@f1+1,w,c
  5735  0025FE  360F               	rlcf	??___ftdiv& (0+255),f,c
  5736  002600  E301               	bnc	u2971
  5737  002602  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  5738  002604                     u2971:
  5739  002604  500F               	movf	??___ftdiv,w,c
  5740  002606  6E16               	movwf	___ftdiv@exp,c
  5741  002608  5016               	movf	___ftdiv@exp,w,c
  5742  00260A  A4D8               	btfss	status,2,c
  5743  00260C  D007               	goto	l3811
  5744  00260E  0E00               	movlw	0
  5745  002610  6E09               	movwf	?___ftdiv,c
  5746  002612  0E00               	movlw	0
  5747  002614  6E0A               	movwf	?___ftdiv+1,c
  5748  002616  0E00               	movlw	0
  5749  002618  6E0B               	movwf	?___ftdiv+2,c
  5750  00261A  0012               	return	
  5751  00261C                     l3811:
  5752  00261C  C00E  F00F         	movff	___ftdiv@f2+2,??___ftdiv
  5753  002620  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  5754  002622  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  5755  002624  340D               	rlcf	___ftdiv@f2+1,w,c
  5756  002626  360F               	rlcf	??___ftdiv& (0+255),f,c
  5757  002628  E301               	bnc	u2991
  5758  00262A  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  5759  00262C                     u2991:
  5760  00262C  500F               	movf	??___ftdiv,w,c
  5761  00262E  6E17               	movwf	___ftdiv@sign,c
  5762  002630  5017               	movf	___ftdiv@sign,w,c
  5763  002632  A4D8               	btfss	status,2,c
  5764  002634  D007               	goto	l3817
  5765  002636  0E00               	movlw	0
  5766  002638  6E09               	movwf	?___ftdiv,c
  5767  00263A  0E00               	movlw	0
  5768  00263C  6E0A               	movwf	?___ftdiv+1,c
  5769  00263E  0E00               	movlw	0
  5770  002640  6E0B               	movwf	?___ftdiv+2,c
  5771  002642  0012               	return	
  5772  002644                     l3817:
  5773  002644  0E00               	movlw	0
  5774  002646  6E13               	movwf	___ftdiv@f3,c
  5775  002648  0E00               	movlw	0
  5776  00264A  6E14               	movwf	___ftdiv@f3+1,c
  5777  00264C  0E00               	movlw	0
  5778  00264E  6E15               	movwf	___ftdiv@f3+2,c
  5779  002650  5017               	movf	___ftdiv@sign,w,c
  5780  002652  0F89               	addlw	137
  5781  002654  5E16               	subwf	___ftdiv@exp,f,c
  5782  002656  C00B  F017         	movff	___ftdiv@f1+2,___ftdiv@sign
  5783  00265A  500E               	movf	___ftdiv@f2+2,w,c
  5784  00265C  1A17               	xorwf	___ftdiv@sign,f,c
  5785  00265E  0E80               	movlw	128
  5786  002660  1617               	andwf	___ftdiv@sign,f,c
  5787  002662  8E0A               	bsf	___ftdiv@f1+1,7,c
  5788  002664  0EFF               	movlw	255
  5789  002666  1609               	andwf	___ftdiv@f1,f,c
  5790  002668  0EFF               	movlw	255
  5791  00266A  160A               	andwf	___ftdiv@f1+1,f,c
  5792  00266C  0E00               	movlw	0
  5793  00266E  160B               	andwf	___ftdiv@f1+2,f,c
  5794  002670  8E0D               	bsf	___ftdiv@f2+1,7,c
  5795  002672  0EFF               	movlw	255
  5796  002674  160C               	andwf	___ftdiv@f2,f,c
  5797  002676  0EFF               	movlw	255
  5798  002678  160D               	andwf	___ftdiv@f2+1,f,c
  5799  00267A  0E00               	movlw	0
  5800  00267C  160E               	andwf	___ftdiv@f2+2,f,c
  5801  00267E  0E18               	movlw	24
  5802  002680  6E12               	movwf	___ftdiv@cntr,c
  5803  002682  D000               	goto	l3837
  5804  002684                     l3837:
  5805  002684  90D8               	bcf	status,0,c
  5806  002686  3613               	rlcf	___ftdiv@f3,f,c
  5807  002688  3614               	rlcf	___ftdiv@f3+1,f,c
  5808  00268A  3615               	rlcf	___ftdiv@f3+2,f,c
  5809  00268C  500C               	movf	___ftdiv@f2,w,c
  5810  00268E  5C09               	subwf	___ftdiv@f1,w,c
  5811  002690  500D               	movf	___ftdiv@f2+1,w,c
  5812  002692  580A               	subwfb	___ftdiv@f1+1,w,c
  5813  002694  500E               	movf	___ftdiv@f2+2,w,c
  5814  002696  580B               	subwfb	___ftdiv@f1+2,w,c
  5815  002698  A0D8               	btfss	status,0,c
  5816  00269A  D007               	goto	l1487
  5817  00269C  500C               	movf	___ftdiv@f2,w,c
  5818  00269E  5E09               	subwf	___ftdiv@f1,f,c
  5819  0026A0  500D               	movf	___ftdiv@f2+1,w,c
  5820  0026A2  5A0A               	subwfb	___ftdiv@f1+1,f,c
  5821  0026A4  500E               	movf	___ftdiv@f2+2,w,c
  5822  0026A6  5A0B               	subwfb	___ftdiv@f1+2,f,c
  5823  0026A8  8013               	bsf	___ftdiv@f3,0,c
  5824  0026AA                     l1487:
  5825  0026AA  90D8               	bcf	status,0,c
  5826  0026AC  3609               	rlcf	___ftdiv@f1,f,c
  5827  0026AE  360A               	rlcf	___ftdiv@f1+1,f,c
  5828  0026B0  360B               	rlcf	___ftdiv@f1+2,f,c
  5829  0026B2  2E12               	decfsz	___ftdiv@cntr,f,c
  5830  0026B4  D7E7               	goto	l3837
  5831  0026B6  D000               	goto	l3847
  5832  0026B8                     l3847:
  5833  0026B8  C013  F001         	movff	___ftdiv@f3,___ftpack@arg
  5834  0026BC  C014  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5835  0026C0  C015  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5836  0026C4  C016  F004         	movff	___ftdiv@exp,___ftpack@exp
  5837  0026C8  C017  F005         	movff	___ftdiv@sign,___ftpack@sign
  5838  0026CC  EC93  F015         	call	___ftpack	;wreg free
  5839  0026D0  C001  F009         	movff	?___ftpack,?___ftdiv
  5840  0026D4  C002  F00A         	movff	?___ftpack+1,?___ftdiv+1
  5841  0026D8  C003  F00B         	movff	?___ftpack+2,?___ftdiv+2
  5842  0026DC  0012               	return	
  5843  0026DE  0012               	return		;funcret
  5844  0026E0                     __end_of___ftdiv:
  5845                           	opt stack 0
  5846                           tblptru	equ	0xFF8
  5847                           tblptrh	equ	0xFF7
  5848                           tblptrl	equ	0xFF6
  5849                           tablat	equ	0xFF5
  5850                           postinc0	equ	0xFEE
  5851                           wreg	equ	0xFE8
  5852                           postdec1	equ	0xFE5
  5853                           fsr1l	equ	0xFE1
  5854                           indf2	equ	0xFDF
  5855                           postinc2	equ	0xFDE
  5856                           postdec2	equ	0xFDD
  5857                           fsr2h	equ	0xFDA
  5858                           fsr2l	equ	0xFD9
  5859                           status	equ	0xFD8
  5860                           
  5861 ;; *************** function ___awtoft *****************
  5862 ;; Defined at:
  5863 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  5864 ;; Parameters:    Size  Location     Type
  5865 ;;  c               2    8[COMRAM] int 
  5866 ;; Auto vars:     Size  Location     Type
  5867 ;;  sign            1   11[COMRAM] unsigned char 
  5868 ;; Return value:  Size  Location     Type
  5869 ;;                  3    8[COMRAM] float 
  5870 ;; Registers used:
  5871 ;;		wreg, status,2, status,0, cstack
  5872 ;; Tracked objects:
  5873 ;;		On entry : 0/0
  5874 ;;		On exit  : 0/0
  5875 ;;		Unchanged: 0/0
  5876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5877 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5878 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5880 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5881 ;;Total ram usage:        4 bytes
  5882 ;; Hardware stack levels used:    1
  5883 ;; Hardware stack levels required when called:    1
  5884 ;; This function calls:
  5885 ;;		___ftpack
  5886 ;; This function is called by:
  5887 ;;		_obtain_pass
  5888 ;;		_input_old_pass
  5889 ;;		_input_new_pass
  5890 ;;		_exp
  5891 ;;		_log
  5892 ;; This function uses a non-reentrant model
  5893 ;;
  5894                           
  5895                           	psect	text32
  5896  00375C                     __ptext32:
  5897                           	opt stack 0
  5898  00375C                     ___awtoft:
  5899                           	opt stack 24
  5900                           
  5901                           ;incstack = 0
  5902  00375C  0E00               	movlw	0
  5903  00375E  6E0C               	movwf	___awtoft@sign,c
  5904  003760  AE0A               	btfss	___awtoft@c+1,7,c
  5905  003762  D007               	goto	l3867
  5906  003764  6C09               	negf	___awtoft@c,c
  5907  003766  1E0A               	comf	___awtoft@c+1,f,c
  5908  003768  B0D8               	btfsc	status,0,c
  5909  00376A  2A0A               	incf	___awtoft@c+1,f,c
  5910  00376C  0E01               	movlw	1
  5911  00376E  6E0C               	movwf	___awtoft@sign,c
  5912  003770  D000               	goto	l3867
  5913  003772                     l3867:
  5914  003772  C009  F001         	movff	___awtoft@c,___ftpack@arg
  5915  003776  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  5916  00377A  6A03               	clrf	___ftpack@arg+2,c
  5917  00377C  0E8E               	movlw	142
  5918  00377E  6E04               	movwf	___ftpack@exp,c
  5919  003780  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  5920  003784  EC93  F015         	call	___ftpack	;wreg free
  5921  003788  C001  F009         	movff	?___ftpack,?___awtoft
  5922  00378C  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  5923  003790  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  5924  003794  0012               	return	
  5925  003796  0012               	return		;funcret
  5926  003798                     __end_of___awtoft:
  5927                           	opt stack 0
  5928                           tblptru	equ	0xFF8
  5929                           tblptrh	equ	0xFF7
  5930                           tblptrl	equ	0xFF6
  5931                           tablat	equ	0xFF5
  5932                           postinc0	equ	0xFEE
  5933                           wreg	equ	0xFE8
  5934                           postdec1	equ	0xFE5
  5935                           fsr1l	equ	0xFE1
  5936                           indf2	equ	0xFDF
  5937                           postinc2	equ	0xFDE
  5938                           postdec2	equ	0xFDD
  5939                           fsr2h	equ	0xFDA
  5940                           fsr2l	equ	0xFD9
  5941                           status	equ	0xFD8
  5942                           
  5943 ;; *************** function ___lltoft *****************
  5944 ;; Defined at:
  5945 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
  5946 ;; Parameters:    Size  Location     Type
  5947 ;;  c               4    8[COMRAM] unsigned long 
  5948 ;; Auto vars:     Size  Location     Type
  5949 ;;  exp             1   16[COMRAM] unsigned char 
  5950 ;; Return value:  Size  Location     Type
  5951 ;;                  3    8[COMRAM] float 
  5952 ;; Registers used:
  5953 ;;		wreg, status,2, status,0, cstack
  5954 ;; Tracked objects:
  5955 ;;		On entry : 0/0
  5956 ;;		On exit  : 0/0
  5957 ;;		Unchanged: 0/0
  5958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5959 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5960 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5961 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5962 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5963 ;;Total ram usage:        9 bytes
  5964 ;; Hardware stack levels used:    1
  5965 ;; Hardware stack levels required when called:    1
  5966 ;; This function calls:
  5967 ;;		___ftpack
  5968 ;; This function is called by:
  5969 ;;		_pow
  5970 ;; This function uses a non-reentrant model
  5971 ;;
  5972                           
  5973                           	psect	text33
  5974  00340A                     __ptext33:
  5975                           	opt stack 0
  5976  00340A                     ___lltoft:
  5977                           	opt stack 25
  5978                           
  5979                           ;incstack = 0
  5980  00340A  0E8E               	movlw	142
  5981  00340C  6E11               	movwf	___lltoft@exp,c
  5982  00340E  D007               	goto	l4265
  5983  003410                     l4263:
  5984  003410  90D8               	bcf	status,0,c
  5985  003412  320C               	rrcf	___lltoft@c+3,f,c
  5986  003414  320B               	rrcf	___lltoft@c+2,f,c
  5987  003416  320A               	rrcf	___lltoft@c+1,f,c
  5988  003418  3209               	rrcf	___lltoft@c,f,c
  5989  00341A  2A11               	incf	___lltoft@exp,f,c
  5990  00341C  D000               	goto	l4265
  5991  00341E                     l4265:
  5992  00341E  0E00               	movlw	0
  5993  003420  1409               	andwf	___lltoft@c,w,c
  5994  003422  6E0D               	movwf	??___lltoft& (0+255),c
  5995  003424  0E00               	movlw	0
  5996  003426  140A               	andwf	___lltoft@c+1,w,c
  5997  003428  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  5998  00342A  0E00               	movlw	0
  5999  00342C  140B               	andwf	___lltoft@c+2,w,c
  6000  00342E  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  6001  003430  0EFF               	movlw	255
  6002  003432  140C               	andwf	___lltoft@c+3,w,c
  6003  003434  6E10               	movwf	(??___lltoft+3)& (0+255),c
  6004  003436  500D               	movf	??___lltoft,w,c
  6005  003438  100E               	iorwf	??___lltoft+1,w,c
  6006  00343A  100F               	iorwf	??___lltoft+2,w,c
  6007  00343C  1010               	iorwf	??___lltoft+3,w,c
  6008  00343E  A4D8               	btfss	status,2,c
  6009  003440  D7E7               	goto	l4263
  6010  003442  C009  F001         	movff	___lltoft@c,___ftpack@arg
  6011  003446  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  6012  00344A  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  6013  00344E  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  6014  003452  0E00               	movlw	0
  6015  003454  6E05               	movwf	___ftpack@sign,c
  6016  003456  EC93  F015         	call	___ftpack	;wreg free
  6017  00345A  C001  F009         	movff	?___ftpack,?___lltoft
  6018  00345E  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  6019  003462  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  6020  003466  0012               	return	
  6021  003468  0012               	return		;funcret
  6022  00346A                     __end_of___lltoft:
  6023                           	opt stack 0
  6024                           tblptru	equ	0xFF8
  6025                           tblptrh	equ	0xFF7
  6026                           tblptrl	equ	0xFF6
  6027                           tablat	equ	0xFF5
  6028                           postinc0	equ	0xFEE
  6029                           wreg	equ	0xFE8
  6030                           postdec1	equ	0xFE5
  6031                           fsr1l	equ	0xFE1
  6032                           indf2	equ	0xFDF
  6033                           postinc2	equ	0xFDE
  6034                           postdec2	equ	0xFDD
  6035                           fsr2h	equ	0xFDA
  6036                           fsr2l	equ	0xFD9
  6037                           status	equ	0xFD8
  6038                           
  6039 ;; *************** function _not_fill_pass *****************
  6040 ;; Defined at:
  6041 ;;		line 35 in file "lcd_vision.c"
  6042 ;; Parameters:    Size  Location     Type
  6043 ;;  digit           2    0[COMRAM] short 
  6044 ;; Auto vars:     Size  Location     Type
  6045 ;;		None
  6046 ;; Return value:  Size  Location     Type
  6047 ;;                  1    wreg      unsigned char 
  6048 ;; Registers used:
  6049 ;;		wreg, status,2, status,0
  6050 ;; Tracked objects:
  6051 ;;		On entry : 0/0
  6052 ;;		On exit  : 0/0
  6053 ;;		Unchanged: 0/0
  6054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6055 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6058 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6059 ;;Total ram usage:        2 bytes
  6060 ;; Hardware stack levels used:    1
  6061 ;; This function calls:
  6062 ;;		Nothing
  6063 ;; This function is called by:
  6064 ;;		_input_password
  6065 ;;		_input_old_pass
  6066 ;;		_input_new_pass
  6067 ;; This function uses a non-reentrant model
  6068 ;;
  6069                           
  6070                           	psect	text34
  6071  0039FC                     __ptext34:
  6072                           	opt stack 0
  6073  0039FC                     _not_fill_pass:
  6074                           	opt stack 28
  6075                           
  6076                           ;lcd_vision.c: 36: return digit !=16;
  6077                           
  6078                           ;incstack = 0
  6079  0039FC  0E10               	movlw	16
  6080  0039FE  1801               	xorwf	not_fill_pass@digit,w,c
  6081  003A00  1002               	iorwf	not_fill_pass@digit+1,w,c
  6082  003A02  B4D8               	btfsc	status,2,c
  6083  003A04  D002               	goto	u4120
  6084  003A06  0E01               	movlw	1
  6085  003A08  0012               	return	
  6086  003A0A                     u4120:
  6087  003A0A  0E00               	movlw	0
  6088  003A0C  0012               	return	
  6089  003A0E  0012               	return		;funcret
  6090  003A10                     __end_of_not_fill_pass:
  6091                           	opt stack 0
  6092                           tblptru	equ	0xFF8
  6093                           tblptrh	equ	0xFF7
  6094                           tblptrl	equ	0xFF6
  6095                           tablat	equ	0xFF5
  6096                           postinc0	equ	0xFEE
  6097                           wreg	equ	0xFE8
  6098                           postdec1	equ	0xFE5
  6099                           fsr1l	equ	0xFE1
  6100                           indf2	equ	0xFDF
  6101                           postinc2	equ	0xFDE
  6102                           postdec2	equ	0xFDD
  6103                           fsr2h	equ	0xFDA
  6104                           fsr2l	equ	0xFD9
  6105                           status	equ	0xFD8
  6106                           
  6107 ;; *************** function _clear_keyboard *****************
  6108 ;; Defined at:
  6109 ;;		line 4 in file "keyboard.c"
  6110 ;; Parameters:    Size  Location     Type
  6111 ;;		None
  6112 ;; Auto vars:     Size  Location     Type
  6113 ;;		None
  6114 ;; Return value:  Size  Location     Type
  6115 ;;		None               void
  6116 ;; Registers used:
  6117 ;;		wreg, status,2
  6118 ;; Tracked objects:
  6119 ;;		On entry : 0/0
  6120 ;;		On exit  : 0/0
  6121 ;;		Unchanged: 0/0
  6122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6126 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6127 ;;Total ram usage:        0 bytes
  6128 ;; Hardware stack levels used:    1
  6129 ;; This function calls:
  6130 ;;		Nothing
  6131 ;; This function is called by:
  6132 ;;		_next_code
  6133 ;;		_twinkle
  6134 ;;		_input_old_pass
  6135 ;;		_input_new_pass
  6136 ;; This function uses a non-reentrant model
  6137 ;;
  6138                           
  6139                           	psect	text35
  6140  003A82                     __ptext35:
  6141                           	opt stack 0
  6142  003A82                     _clear_keyboard:
  6143                           	opt stack 28
  6144                           
  6145                           ;keyboard.c: 5: key = 18;
  6146                           
  6147                           ;incstack = 0
  6148  003A82  0E12               	movlw	18
  6149  003A84  0100               	movlb	0	; () banked
  6150  003A86  6F96               	movwf	_key& (0+255),b
  6151                           
  6152                           ; BSR set to: 0
  6153  003A88  0012               	return		;funcret
  6154  003A8A                     __end_of_clear_keyboard:
  6155                           	opt stack 0
  6156                           tblptru	equ	0xFF8
  6157                           tblptrh	equ	0xFF7
  6158                           tblptrl	equ	0xFF6
  6159                           tablat	equ	0xFF5
  6160                           postinc0	equ	0xFEE
  6161                           wreg	equ	0xFE8
  6162                           postdec1	equ	0xFE5
  6163                           fsr1l	equ	0xFE1
  6164                           indf2	equ	0xFDF
  6165                           postinc2	equ	0xFDE
  6166                           postdec2	equ	0xFDD
  6167                           fsr2h	equ	0xFDA
  6168                           fsr2l	equ	0xFD9
  6169                           status	equ	0xFD8
  6170                           
  6171 ;; *************** function __delay_s *****************
  6172 ;; Defined at:
  6173 ;;		line 22 in file "lcd_vision.c"
  6174 ;; Parameters:    Size  Location     Type
  6175 ;;  millis          2    8[COMRAM] int 
  6176 ;; Auto vars:     Size  Location     Type
  6177 ;;  index           2   13[COMRAM] short 
  6178 ;;  it              2   11[COMRAM] short 
  6179 ;; Return value:  Size  Location     Type
  6180 ;;		None               void
  6181 ;; Registers used:
  6182 ;;		wreg, status,2, status,0, cstack
  6183 ;; Tracked objects:
  6184 ;;		On entry : 0/0
  6185 ;;		On exit  : 0/0
  6186 ;;		Unchanged: 0/0
  6187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6188 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6189 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6190 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6191 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6192 ;;Total ram usage:        7 bytes
  6193 ;; Hardware stack levels used:    1
  6194 ;; Hardware stack levels required when called:    1
  6195 ;; This function calls:
  6196 ;;		___awdiv
  6197 ;; This function is called by:
  6198 ;;		_twinkle
  6199 ;;		_input_old_pass
  6200 ;;		_show_success
  6201 ;;		_show_error
  6202 ;;		_input_new_pass
  6203 ;; This function uses a non-reentrant model
  6204 ;;
  6205                           
  6206                           	psect	text36
  6207  0034C6                     __ptext36:
  6208                           	opt stack 0
  6209  0034C6                     __delay_s:
  6210                           	opt stack 27
  6211                           
  6212                           ;lcd_vision.c: 23: short it = millis/100;
  6213                           
  6214                           ; BSR set to: 0
  6215                           ;incstack = 0
  6216  0034C6  C009  F001         	movff	__delay_s@millis,___awdiv@dividend
  6217  0034CA  C00A  F002         	movff	__delay_s@millis+1,___awdiv@dividend+1
  6218  0034CE  0E00               	movlw	0
  6219  0034D0  6E04               	movwf	___awdiv@divisor+1,c
  6220  0034D2  0E64               	movlw	100
  6221  0034D4  6E03               	movwf	___awdiv@divisor,c
  6222  0034D6  EC8D  F016         	call	___awdiv	;wreg free
  6223  0034DA  C001  F00C         	movff	?___awdiv,__delay_s@it
  6224  0034DE  C002  F00D         	movff	?___awdiv+1,__delay_s@it+1
  6225                           
  6226                           ;lcd_vision.c: 24: short index = 1;
  6227  0034E2  0E00               	movlw	0
  6228  0034E4  6E0F               	movwf	__delay_s@index+1,c
  6229  0034E6  0E01               	movlw	1
  6230  0034E8  6E0E               	movwf	__delay_s@index,c
  6231                           
  6232                           ;lcd_vision.c: 26: for(index = 1; index <= it; index++){
  6233  0034EA  0E00               	movlw	0
  6234  0034EC  6E0F               	movwf	__delay_s@index+1,c
  6235  0034EE  0E01               	movlw	1
  6236  0034F0  6E0E               	movwf	__delay_s@index,c
  6237  0034F2  D00A               	goto	l614
  6238  0034F4                     l4479:
  6239                           
  6240                           ;lcd_vision.c: 27: _delay((unsigned long)((98)*(8000000/4000.0)));
  6241  0034F4  0EFF               	movlw	255
  6242  0034F6  6E0B               	movwf	??__delay_s& (0+255),c
  6243  0034F8  0E8A               	movlw	138
  6244  0034FA                     u4707:
  6245  0034FA  2EE8               	decfsz	wreg,f,c
  6246  0034FC  D7FE               	goto	u4707
  6247  0034FE  2E0B               	decfsz	??__delay_s& (0+255),f,c
  6248  003500  D7FC               	goto	u4707
  6249  003502  D000               	nop2	
  6250  003504  4A0E               	infsnz	__delay_s@index,f,c
  6251  003506  2A0F               	incf	__delay_s@index+1,f,c
  6252  003508                     l614:
  6253  003508  500E               	movf	__delay_s@index,w,c
  6254  00350A  5C0C               	subwf	__delay_s@it,w,c
  6255  00350C  500D               	movf	__delay_s@it+1,w,c
  6256  00350E  0A80               	xorlw	128
  6257  003510  6E0B               	movwf	??__delay_s& (0+255),c
  6258  003512  500F               	movf	__delay_s@index+1,w,c
  6259  003514  0A80               	xorlw	128
  6260  003516  580B               	subwfb	??__delay_s& (0+255),w,c
  6261  003518  B0D8               	btfsc	status,0,c
  6262  00351A  D7EC               	goto	l4479
  6263  00351C  0012               	return		;funcret
  6264  00351E                     __end_of__delay_s:
  6265                           	opt stack 0
  6266                           tblptru	equ	0xFF8
  6267                           tblptrh	equ	0xFF7
  6268                           tblptrl	equ	0xFF6
  6269                           tablat	equ	0xFF5
  6270                           postinc0	equ	0xFEE
  6271                           wreg	equ	0xFE8
  6272                           postdec1	equ	0xFE5
  6273                           fsr1l	equ	0xFE1
  6274                           indf2	equ	0xFDF
  6275                           postinc2	equ	0xFDE
  6276                           postdec2	equ	0xFDD
  6277                           fsr2h	equ	0xFDA
  6278                           fsr2l	equ	0xFD9
  6279                           status	equ	0xFD8
  6280                           
  6281 ;; *************** function ___lbtoft *****************
  6282 ;; Defined at:
  6283 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbtoft.c"
  6284 ;; Parameters:    Size  Location     Type
  6285 ;;  c               1    wreg     unsigned char 
  6286 ;; Auto vars:     Size  Location     Type
  6287 ;;  c               1   11[COMRAM] unsigned char 
  6288 ;; Return value:  Size  Location     Type
  6289 ;;                  3    8[COMRAM] float 
  6290 ;; Registers used:
  6291 ;;		wreg, status,2, status,0, cstack
  6292 ;; Tracked objects:
  6293 ;;		On entry : 0/0
  6294 ;;		On exit  : 0/0
  6295 ;;		Unchanged: 0/0
  6296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6297 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6298 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6300 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6301 ;;Total ram usage:        4 bytes
  6302 ;; Hardware stack levels used:    1
  6303 ;; Hardware stack levels required when called:    1
  6304 ;; This function calls:
  6305 ;;		___ftpack
  6306 ;; This function is called by:
  6307 ;;		_obtain_pass
  6308 ;;		_input_old_pass
  6309 ;;		_input_new_pass
  6310 ;; This function uses a non-reentrant model
  6311 ;;
  6312                           
  6313                           	psect	text37
  6314  003916                     __ptext37:
  6315                           	opt stack 0
  6316  003916                     ___lbtoft:
  6317                           	opt stack 26
  6318                           
  6319                           ;incstack = 0
  6320                           ;___lbtoft@c stored from wreg
  6321  003916  6E0C               	movwf	___lbtoft@c,c
  6322  003918  500C               	movf	___lbtoft@c,w,c
  6323  00391A  6E01               	movwf	___ftpack@arg,c
  6324  00391C  6A02               	clrf	___ftpack@arg+1,c
  6325  00391E  6A03               	clrf	___ftpack@arg+2,c
  6326  003920  0E8E               	movlw	142
  6327  003922  6E04               	movwf	___ftpack@exp,c
  6328  003924  0E00               	movlw	0
  6329  003926  6E05               	movwf	___ftpack@sign,c
  6330  003928  EC93  F015         	call	___ftpack	;wreg free
  6331  00392C  C001  F009         	movff	?___ftpack,?___lbtoft
  6332  003930  C002  F00A         	movff	?___ftpack+1,?___lbtoft+1
  6333  003934  C003  F00B         	movff	?___ftpack+2,?___lbtoft+2
  6334  003938  0012               	return	
  6335  00393A  0012               	return		;funcret
  6336  00393C                     __end_of___lbtoft:
  6337                           	opt stack 0
  6338                           tblptru	equ	0xFF8
  6339                           tblptrh	equ	0xFF7
  6340                           tblptrl	equ	0xFF6
  6341                           tablat	equ	0xFF5
  6342                           postinc0	equ	0xFEE
  6343                           wreg	equ	0xFE8
  6344                           postdec1	equ	0xFE5
  6345                           fsr1l	equ	0xFE1
  6346                           indf2	equ	0xFDF
  6347                           postinc2	equ	0xFDE
  6348                           postdec2	equ	0xFDD
  6349                           fsr2h	equ	0xFDA
  6350                           fsr2l	equ	0xFD9
  6351                           status	equ	0xFD8
  6352                           
  6353 ;; *************** function ___ftpack *****************
  6354 ;; Defined at:
  6355 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  6356 ;; Parameters:    Size  Location     Type
  6357 ;;  arg             3    0[COMRAM] unsigned um
  6358 ;;  exp             1    3[COMRAM] unsigned char 
  6359 ;;  sign            1    4[COMRAM] unsigned char 
  6360 ;; Auto vars:     Size  Location     Type
  6361 ;;		None
  6362 ;; Return value:  Size  Location     Type
  6363 ;;                  3    0[COMRAM] float 
  6364 ;; Registers used:
  6365 ;;		wreg, status,2, status,0
  6366 ;; Tracked objects:
  6367 ;;		On entry : 0/0
  6368 ;;		On exit  : 0/0
  6369 ;;		Unchanged: 0/0
  6370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6371 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6373 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6374 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6375 ;;Total ram usage:        8 bytes
  6376 ;; Hardware stack levels used:    1
  6377 ;; This function calls:
  6378 ;;		Nothing
  6379 ;; This function is called by:
  6380 ;;		___altoft
  6381 ;;		___awtoft
  6382 ;;		___ftadd
  6383 ;;		___ftdiv
  6384 ;;		___ftmul
  6385 ;;		___lbtoft
  6386 ;;		___lltoft
  6387 ;; This function uses a non-reentrant model
  6388 ;;
  6389                           
  6390                           	psect	text38
  6391  002B26                     __ptext38:
  6392                           	opt stack 0
  6393  002B26                     ___ftpack:
  6394                           	opt stack 23
  6395                           
  6396                           ;incstack = 0
  6397  002B26  5004               	movf	___ftpack@exp,w,c
  6398  002B28  B4D8               	btfsc	status,2,c
  6399  002B2A  D005               	goto	l3505
  6400  002B2C  5001               	movf	___ftpack@arg,w,c
  6401  002B2E  1002               	iorwf	___ftpack@arg+1,w,c
  6402  002B30  1003               	iorwf	___ftpack@arg+2,w,c
  6403  002B32  A4D8               	btfss	status,2,c
  6404  002B34  D00E               	goto	l3511
  6405  002B36                     l3505:
  6406  002B36  0E00               	movlw	0
  6407  002B38  6E01               	movwf	?___ftpack,c
  6408  002B3A  0E00               	movlw	0
  6409  002B3C  6E02               	movwf	?___ftpack+1,c
  6410  002B3E  0E00               	movlw	0
  6411  002B40  6E03               	movwf	?___ftpack+2,c
  6412  002B42  0012               	return	
  6413  002B44  D006               	goto	l3511
  6414  002B46                     l3509:
  6415  002B46  2A04               	incf	___ftpack@exp,f,c
  6416  002B48  90D8               	bcf	status,0,c
  6417  002B4A  3203               	rrcf	___ftpack@arg+2,f,c
  6418  002B4C  3202               	rrcf	___ftpack@arg+1,f,c
  6419  002B4E  3201               	rrcf	___ftpack@arg,f,c
  6420  002B50  D000               	goto	l3511
  6421  002B52                     l3511:
  6422  002B52  0E00               	movlw	0
  6423  002B54  1401               	andwf	___ftpack@arg,w,c
  6424  002B56  6E06               	movwf	??___ftpack& (0+255),c
  6425  002B58  0E00               	movlw	0
  6426  002B5A  1402               	andwf	___ftpack@arg+1,w,c
  6427  002B5C  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6428  002B5E  0EFE               	movlw	254
  6429  002B60  1403               	andwf	___ftpack@arg+2,w,c
  6430  002B62  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6431  002B64  5006               	movf	??___ftpack,w,c
  6432  002B66  1007               	iorwf	??___ftpack+1,w,c
  6433  002B68  1008               	iorwf	??___ftpack+2,w,c
  6434  002B6A  B4D8               	btfsc	status,2,c
  6435  002B6C  D00E               	goto	l3517
  6436  002B6E  D7EB               	goto	l3509
  6437  002B70  D00C               	goto	l3517
  6438  002B72                     l3513:
  6439  002B72  2A04               	incf	___ftpack@exp,f,c
  6440  002B74  0E01               	movlw	1
  6441  002B76  2601               	addwf	___ftpack@arg,f,c
  6442  002B78  0E00               	movlw	0
  6443  002B7A  2202               	addwfc	___ftpack@arg+1,f,c
  6444  002B7C  0E00               	movlw	0
  6445  002B7E  2203               	addwfc	___ftpack@arg+2,f,c
  6446  002B80  90D8               	bcf	status,0,c
  6447  002B82  3203               	rrcf	___ftpack@arg+2,f,c
  6448  002B84  3202               	rrcf	___ftpack@arg+1,f,c
  6449  002B86  3201               	rrcf	___ftpack@arg,f,c
  6450  002B88  D000               	goto	l3517
  6451  002B8A                     l3517:
  6452  002B8A  0E00               	movlw	0
  6453  002B8C  1401               	andwf	___ftpack@arg,w,c
  6454  002B8E  6E06               	movwf	??___ftpack& (0+255),c
  6455  002B90  0E00               	movlw	0
  6456  002B92  1402               	andwf	___ftpack@arg+1,w,c
  6457  002B94  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6458  002B96  0EFF               	movlw	255
  6459  002B98  1403               	andwf	___ftpack@arg+2,w,c
  6460  002B9A  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6461  002B9C  5006               	movf	??___ftpack,w,c
  6462  002B9E  1007               	iorwf	??___ftpack+1,w,c
  6463  002BA0  1008               	iorwf	??___ftpack+2,w,c
  6464  002BA2  B4D8               	btfsc	status,2,c
  6465  002BA4  D008               	goto	l3521
  6466  002BA6  D7E5               	goto	l3513
  6467  002BA8  D006               	goto	l3521
  6468  002BAA                     l3519:
  6469  002BAA  0604               	decf	___ftpack@exp,f,c
  6470  002BAC  90D8               	bcf	status,0,c
  6471  002BAE  3601               	rlcf	___ftpack@arg,f,c
  6472  002BB0  3602               	rlcf	___ftpack@arg+1,f,c
  6473  002BB2  3603               	rlcf	___ftpack@arg+2,f,c
  6474  002BB4  D000               	goto	l3521
  6475  002BB6                     l3521:
  6476  002BB6  BE02               	btfsc	___ftpack@arg+1,7,c
  6477  002BB8  D004               	goto	l1423
  6478  002BBA  0E02               	movlw	2
  6479  002BBC  6004               	cpfslt	___ftpack@exp,c
  6480  002BBE  D7F5               	goto	l3519
  6481  002BC0  D000               	goto	l1423
  6482  002BC2                     l1423:
  6483  002BC2  B004               	btfsc	___ftpack@exp,0,c
  6484  002BC4  D002               	goto	l3527
  6485  002BC6  9E02               	bcf	___ftpack@arg+1,7,c
  6486  002BC8  D000               	goto	l3527
  6487  002BCA                     l3527:
  6488  002BCA  90D8               	bcf	status,0,c
  6489  002BCC  3204               	rrcf	___ftpack@exp,f,c
  6490  002BCE  5004               	movf	___ftpack@exp,w,c
  6491  002BD0  1203               	iorwf	___ftpack@arg+2,f,c
  6492  002BD2  5005               	movf	___ftpack@sign,w,c
  6493  002BD4  B4D8               	btfsc	status,2,c
  6494  002BD6  D002               	goto	l3533
  6495  002BD8  8E03               	bsf	___ftpack@arg+2,7,c
  6496  002BDA  D000               	goto	l3533
  6497  002BDC                     l3533:
  6498  002BDC  C001  F001         	movff	___ftpack@arg,?___ftpack
  6499  002BE0  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6500  002BE4  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6501  002BE8  0012               	return	
  6502  002BEA  0012               	return		;funcret
  6503  002BEC                     __end_of___ftpack:
  6504                           	opt stack 0
  6505                           tblptru	equ	0xFF8
  6506                           tblptrh	equ	0xFF7
  6507                           tblptrl	equ	0xFF6
  6508                           tablat	equ	0xFF5
  6509                           postinc0	equ	0xFEE
  6510                           wreg	equ	0xFE8
  6511                           postdec1	equ	0xFE5
  6512                           fsr1l	equ	0xFE1
  6513                           indf2	equ	0xFDF
  6514                           postinc2	equ	0xFDE
  6515                           postdec2	equ	0xFDD
  6516                           fsr2h	equ	0xFDA
  6517                           fsr2l	equ	0xFD9
  6518                           status	equ	0xFD8
  6519                           
  6520 ;; *************** function _changePass *****************
  6521 ;; Defined at:
  6522 ;;		line 7 in file "config.c"
  6523 ;; Parameters:    Size  Location     Type
  6524 ;;  pass            2    0[COMRAM] int 
  6525 ;; Auto vars:     Size  Location     Type
  6526 ;;		None
  6527 ;; Return value:  Size  Location     Type
  6528 ;;		None               void
  6529 ;; Registers used:
  6530 ;;		None
  6531 ;; Tracked objects:
  6532 ;;		On entry : 0/0
  6533 ;;		On exit  : 0/0
  6534 ;;		Unchanged: 0/0
  6535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6536 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6539 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6540 ;;Total ram usage:        2 bytes
  6541 ;; Hardware stack levels used:    1
  6542 ;; This function calls:
  6543 ;;		Nothing
  6544 ;; This function is called by:
  6545 ;;		_ver_opcion_cambio
  6546 ;; This function uses a non-reentrant model
  6547 ;;
  6548                           
  6549                           	psect	text39
  6550  003A78                     __ptext39:
  6551                           	opt stack 0
  6552  003A78                     _changePass:
  6553                           	opt stack 28
  6554                           
  6555                           ;config.c: 8: password = pass;
  6556                           
  6557                           ;incstack = 0
  6558  003A78  C001  F0D6         	movff	changePass@pass,_password
  6559  003A7C  C002  F0D7         	movff	changePass@pass+1,_password+1
  6560  003A80  0012               	return		;funcret
  6561  003A82                     __end_of_changePass:
  6562                           	opt stack 0
  6563                           tblptru	equ	0xFF8
  6564                           tblptrh	equ	0xFF7
  6565                           tblptrl	equ	0xFF6
  6566                           tablat	equ	0xFF5
  6567                           postinc0	equ	0xFEE
  6568                           wreg	equ	0xFE8
  6569                           postdec1	equ	0xFE5
  6570                           fsr1l	equ	0xFE1
  6571                           indf2	equ	0xFDF
  6572                           postinc2	equ	0xFDE
  6573                           postdec2	equ	0xFDD
  6574                           fsr2h	equ	0xFDA
  6575                           fsr2l	equ	0xFD9
  6576                           status	equ	0xFD8
  6577                           
  6578 ;; *************** function _ver_info *****************
  6579 ;; Defined at:
  6580 ;;		line 95 in file "menu.c"
  6581 ;; Parameters:    Size  Location     Type
  6582 ;;		None
  6583 ;; Auto vars:     Size  Location     Type
  6584 ;;  input           1   36[COMRAM] unsigned char 
  6585 ;; Return value:  Size  Location     Type
  6586 ;;		None               void
  6587 ;; Registers used:
  6588 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6589 ;; Tracked objects:
  6590 ;;		On entry : 0/0
  6591 ;;		On exit  : 0/0
  6592 ;;		Unchanged: 0/0
  6593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6595 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6597 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6598 ;;Total ram usage:        1 bytes
  6599 ;; Hardware stack levels used:    1
  6600 ;; Hardware stack levels required when called:    6
  6601 ;; This function calls:
  6602 ;;		_clear
  6603 ;;		_lcd_gotoxy
  6604 ;;		_lcd_putrs
  6605 ;;		_read_keyboard
  6606 ;;		_sprintf
  6607 ;; This function is called by:
  6608 ;;		_select_menu
  6609 ;; This function uses a non-reentrant model
  6610 ;;
  6611                           
  6612                           	psect	text40
  6613  0028A0                     __ptext40:
  6614                           	opt stack 0
  6615  0028A0                     _ver_info:
  6616                           	opt stack 23
  6617                           
  6618                           ;menu.c: 96: clear();
  6619                           
  6620                           ;incstack = 0
  6621  0028A0  ECF3  F01C         	call	_clear	;wreg free
  6622                           
  6623                           ;menu.c: 97: char input = 18;
  6624  0028A4  0E12               	movlw	18
  6625  0028A6  D061               	goto	L6
  6626  0028A8                     l4973:
  6627                           
  6628                           ;menu.c: 99: lcd_gotoxy(1,1);
  6629  0028A8  0E01               	movlw	1
  6630  0028AA  6E05               	movwf	lcd_gotoxy@y,c
  6631  0028AC  0E01               	movlw	1
  6632  0028AE  ECC2  F01C         	call	_lcd_gotoxy
  6633                           
  6634                           ;menu.c: 100: lcd_putrs("Sensor: ");
  6635  0028B2  0EBF               	movlw	low STR_25
  6636  0028B4  6E09               	movwf	lcd_putrs@ptr,c
  6637  0028B6  0E0F               	movlw	high STR_25
  6638  0028B8  6E0A               	movwf	lcd_putrs@ptr+1,c
  6639  0028BA  EC8F  F01A         	call	_lcd_putrs	;wreg free
  6640                           
  6641                           ;menu.c: 101: sprintf(buffer2,"%02u",sensorDisparado);
  6642  0028BE  0E98               	movlw	low _buffer2
  6643  0028C0  6E0D               	movwf	sprintf@sp,c
  6644  0028C2  0E00               	movlw	high _buffer2
  6645  0028C4  6E0E               	movwf	sprintf@sp+1,c
  6646  0028C6  0E71               	movlw	low (STR_11+10)
  6647  0028C8  6E0F               	movwf	sprintf@f,c
  6648  0028CA  0E0F               	movlw	high (STR_11+10)
  6649  0028CC  6E10               	movwf	sprintf@f+1,c
  6650  0028CE  C097  F011         	movff	_sensorDisparado,?_sprintf+4
  6651  0028D2  6A12               	clrf	?_sprintf+5,c
  6652  0028D4  EC4E  F009         	call	_sprintf	;wreg free
  6653                           
  6654                           ;menu.c: 102: lcd_putrs(buffer2);
  6655  0028D8  0E98               	movlw	low _buffer2
  6656  0028DA  6E09               	movwf	lcd_putrs@ptr,c
  6657  0028DC  0E00               	movlw	high _buffer2
  6658  0028DE  6E0A               	movwf	lcd_putrs@ptr+1,c
  6659  0028E0  EC8F  F01A         	call	_lcd_putrs	;wreg free
  6660                           
  6661                           ;menu.c: 103: lcd_gotoxy(1,2);
  6662  0028E4  0E02               	movlw	2
  6663  0028E6  6E05               	movwf	lcd_gotoxy@y,c
  6664  0028E8  0E01               	movlw	1
  6665  0028EA  ECC2  F01C         	call	_lcd_gotoxy
  6666                           
  6667                           ;menu.c: 104: lcd_putrs("Date:");
  6668  0028EE  0ED0               	movlw	low STR_27
  6669  0028F0  6E09               	movwf	lcd_putrs@ptr,c
  6670  0028F2  0E0F               	movlw	high STR_27
  6671  0028F4  6E0A               	movwf	lcd_putrs@ptr+1,c
  6672  0028F6  EC8F  F01A         	call	_lcd_putrs	;wreg free
  6673                           
  6674                           ;menu.c: 105: sprintf(buffer2,"%02u/%02u",diaDisparo,mesDisparo);
  6675  0028FA  0E98               	movlw	low _buffer2
  6676  0028FC  6E0D               	movwf	sprintf@sp,c
  6677  0028FE  0E00               	movlw	high _buffer2
  6678  002900  6E0E               	movwf	sprintf@sp+1,c
  6679  002902  0E6C               	movlw	low (STR_11+5)
  6680  002904  6E0F               	movwf	sprintf@f,c
  6681  002906  0E0F               	movlw	high (STR_11+5)
  6682  002908  6E10               	movwf	sprintf@f+1,c
  6683  00290A  C082  F011         	movff	_diaDisparo,?_sprintf+4
  6684  00290E  C083  F012         	movff	_diaDisparo+1,?_sprintf+5
  6685  002912  C08E  F013         	movff	_mesDisparo,?_sprintf+6
  6686  002916  C08F  F014         	movff	_mesDisparo+1,?_sprintf+7
  6687  00291A  EC4E  F009         	call	_sprintf	;wreg free
  6688                           
  6689                           ;menu.c: 106: lcd_putrs(buffer2);
  6690  00291E  0E98               	movlw	low _buffer2
  6691  002920  6E09               	movwf	lcd_putrs@ptr,c
  6692  002922  0E00               	movlw	high _buffer2
  6693  002924  6E0A               	movwf	lcd_putrs@ptr+1,c
  6694  002926  EC8F  F01A         	call	_lcd_putrs	;wreg free
  6695                           
  6696                           ;menu.c: 107: lcd_putrs(" ");
  6697  00292A  0EA8               	movlw	low (STR_14+9)
  6698  00292C  6E09               	movwf	lcd_putrs@ptr,c
  6699  00292E  0E0F               	movlw	high (STR_14+9)
  6700  002930  6E0A               	movwf	lcd_putrs@ptr+1,c
  6701  002932  EC8F  F01A         	call	_lcd_putrs	;wreg free
  6702                           
  6703                           ;menu.c: 108: sprintf(buffer2,"%02u:%02u",horaDisparo,minDisparo);
  6704  002936  0E98               	movlw	low _buffer2
  6705  002938  6E0D               	movwf	sprintf@sp,c
  6706  00293A  0E00               	movlw	high _buffer2
  6707  00293C  6E0E               	movwf	sprintf@sp+1,c
  6708  00293E  0EB5               	movlw	low STR_12
  6709  002940  6E0F               	movwf	sprintf@f,c
  6710  002942  0E0F               	movlw	high STR_12
  6711  002944  6E10               	movwf	sprintf@f+1,c
  6712  002946  C086  F011         	movff	_horaDisparo,?_sprintf+4
  6713  00294A  C087  F012         	movff	_horaDisparo+1,?_sprintf+5
  6714  00294E  C090  F013         	movff	_minDisparo,?_sprintf+6
  6715  002952  C091  F014         	movff	_minDisparo+1,?_sprintf+7
  6716  002956  EC4E  F009         	call	_sprintf	;wreg free
  6717                           
  6718                           ;menu.c: 109: lcd_putrs(buffer2);
  6719  00295A  0E98               	movlw	low _buffer2
  6720  00295C  6E09               	movwf	lcd_putrs@ptr,c
  6721  00295E  0E00               	movlw	high _buffer2
  6722  002960  6E0A               	movwf	lcd_putrs@ptr+1,c
  6723  002962  EC8F  F01A         	call	_lcd_putrs	;wreg free
  6724                           
  6725                           ;menu.c: 110: input = read_keyboard();
  6726  002966  ECF2  F007         	call	_read_keyboard	;wreg free
  6727  00296A                     L6:
  6728  00296A  6E25               	movwf	ver_info@input,c
  6729  00296C  D000               	goto	l4993
  6730  00296E                     l4993:
  6731  00296E  0E10               	movlw	16
  6732  002970  1825               	xorwf	ver_info@input,w,c
  6733  002972  A4D8               	btfss	status,2,c
  6734  002974  D799               	goto	l4973
  6735                           
  6736                           ;menu.c: 111: }
  6737                           ;menu.c: 112: menu = 18;
  6738  002976  0E12               	movlw	18
  6739  002978  0100               	movlb	0	; () banked
  6740  00297A  6FD8               	movwf	_menu& (0+255),b
  6741                           
  6742                           ; BSR set to: 0
  6743  00297C  0012               	return		;funcret
  6744  00297E                     __end_of_ver_info:
  6745                           	opt stack 0
  6746                           tblptru	equ	0xFF8
  6747                           tblptrh	equ	0xFF7
  6748                           tblptrl	equ	0xFF6
  6749                           tablat	equ	0xFF5
  6750                           postinc0	equ	0xFEE
  6751                           wreg	equ	0xFE8
  6752                           postdec1	equ	0xFE5
  6753                           fsr1l	equ	0xFE1
  6754                           indf2	equ	0xFDF
  6755                           postinc2	equ	0xFDE
  6756                           postdec2	equ	0xFDD
  6757                           fsr2h	equ	0xFDA
  6758                           fsr2l	equ	0xFD9
  6759                           status	equ	0xFD8
  6760                           
  6761 ;; *************** function _clear *****************
  6762 ;; Defined at:
  6763 ;;		line 7 in file "lcd_vision.c"
  6764 ;; Parameters:    Size  Location     Type
  6765 ;;		None
  6766 ;; Auto vars:     Size  Location     Type
  6767 ;;		None
  6768 ;; Return value:  Size  Location     Type
  6769 ;;		None               void
  6770 ;; Registers used:
  6771 ;;		wreg, status,2, status,0, cstack
  6772 ;; Tracked objects:
  6773 ;;		On entry : 0/0
  6774 ;;		On exit  : 0/0
  6775 ;;		Unchanged: 0/0
  6776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6779 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6780 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6781 ;;Total ram usage:        1 bytes
  6782 ;; Hardware stack levels used:    1
  6783 ;; Hardware stack levels required when called:    3
  6784 ;; This function calls:
  6785 ;;		_lcd_comand
  6786 ;; This function is called by:
  6787 ;;		_set_vision
  6788 ;;		_show_success
  6789 ;;		_show_error
  6790 ;;		_ver_opcion_cambio
  6791 ;;		_ver_info
  6792 ;; This function uses a non-reentrant model
  6793 ;;
  6794                           
  6795                           	psect	text41
  6796  0039E6                     __ptext41:
  6797                           	opt stack 0
  6798  0039E6                     _clear:
  6799                           	opt stack 26
  6800                           
  6801                           ;lcd_vision.c: 8: lcd_comand(0b00000001);
  6802                           
  6803                           ; BSR set to: 0
  6804                           ;incstack = 0
  6805  0039E6  0E01               	movlw	1
  6806  0039E8  EC35  F01D         	call	_lcd_comand
  6807                           
  6808                           ;lcd_vision.c: 9: _delay((unsigned long)((5)*(8000000/4000.0)));
  6809  0039EC  0E0D               	movlw	13
  6810  0039EE  6E06               	movwf	??_clear& (0+255),c
  6811  0039F0  0EFC               	movlw	252
  6812  0039F2                     u4717:
  6813  0039F2  2EE8               	decfsz	wreg,f,c
  6814  0039F4  D7FE               	goto	u4717
  6815  0039F6  2E06               	decfsz	??_clear& (0+255),f,c
  6816  0039F8  D7FC               	goto	u4717
  6817  0039FA  0012               	return		;funcret
  6818  0039FC                     __end_of_clear:
  6819                           	opt stack 0
  6820                           tblptru	equ	0xFF8
  6821                           tblptrh	equ	0xFF7
  6822                           tblptrl	equ	0xFF6
  6823                           tablat	equ	0xFF5
  6824                           postinc0	equ	0xFEE
  6825                           wreg	equ	0xFE8
  6826                           postdec1	equ	0xFE5
  6827                           fsr1l	equ	0xFE1
  6828                           indf2	equ	0xFDF
  6829                           postinc2	equ	0xFDE
  6830                           postdec2	equ	0xFDD
  6831                           fsr2h	equ	0xFDA
  6832                           fsr2l	equ	0xFD9
  6833                           status	equ	0xFD8
  6834                           
  6835 ;; *************** function _dispararSensor *****************
  6836 ;; Defined at:
  6837 ;;		line 116 in file "menu.c"
  6838 ;; Parameters:    Size  Location     Type
  6839 ;;  sensor          2   18[COMRAM] int 
  6840 ;; Auto vars:     Size  Location     Type
  6841 ;;		None
  6842 ;; Return value:  Size  Location     Type
  6843 ;;		None               void
  6844 ;; Registers used:
  6845 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6846 ;; Tracked objects:
  6847 ;;		On entry : 0/0
  6848 ;;		On exit  : 0/0
  6849 ;;		Unchanged: 0/0
  6850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6851 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6854 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6855 ;;Total ram usage:        2 bytes
  6856 ;; Hardware stack levels used:    1
  6857 ;; Hardware stack levels required when called:    2
  6858 ;; This function calls:
  6859 ;;		_Read_RTC
  6860 ;; This function is called by:
  6861 ;;		_select_menu
  6862 ;; This function uses a non-reentrant model
  6863 ;;
  6864                           
  6865                           	psect	text42
  6866  003864                     __ptext42:
  6867                           	opt stack 0
  6868  003864                     _dispararSensor:
  6869                           	opt stack 27
  6870                           
  6871                           ;menu.c: 117: Read_RTC();
  6872                           
  6873                           ;incstack = 0
  6874  003864  EC89  F00E         	call	_Read_RTC	;wreg free
  6875                           
  6876                           ;menu.c: 118: state_alarm = TRIGGED;
  6877  003868  0E02               	movlw	2
  6878  00386A  0100               	movlb	0	; () banked
  6879  00386C  6FD9               	movwf	_state_alarm& (0+255),b
  6880                           
  6881                           ; BSR set to: 0
  6882                           ;menu.c: 119: sensorDisparado = sensor;
  6883  00386E  C013  F097         	movff	dispararSensor@sensor,_sensorDisparado
  6884                           
  6885                           ; BSR set to: 0
  6886                           ;menu.c: 120: diaDisparo = dia;
  6887  003872  C0CC  F082         	movff	_dia,_diaDisparo
  6888  003876  C0CD  F083         	movff	_dia+1,_diaDisparo+1
  6889                           
  6890                           ; BSR set to: 0
  6891                           ;menu.c: 121: mesDisparo = mes;
  6892  00387A  C0D2  F08E         	movff	_mes,_mesDisparo
  6893  00387E  C0D3  F08F         	movff	_mes+1,_mesDisparo+1
  6894                           
  6895                           ; BSR set to: 0
  6896                           ;menu.c: 122: horaDisparo = hora;
  6897  003882  C0D0  F086         	movff	_hora,_horaDisparo
  6898  003886  C0D1  F087         	movff	_hora+1,_horaDisparo+1
  6899                           
  6900                           ; BSR set to: 0
  6901                           ;menu.c: 123: minDisparo = minuto;
  6902  00388A  C0D4  F090         	movff	_minuto,_minDisparo
  6903  00388E  C0D5  F091         	movff	_minuto+1,_minDisparo+1
  6904                           
  6905                           ; BSR set to: 0
  6906  003892  0012               	return		;funcret
  6907  003894                     __end_of_dispararSensor:
  6908                           	opt stack 0
  6909                           tblptru	equ	0xFF8
  6910                           tblptrh	equ	0xFF7
  6911                           tblptrl	equ	0xFF6
  6912                           tablat	equ	0xFF5
  6913                           postinc0	equ	0xFEE
  6914                           wreg	equ	0xFE8
  6915                           postdec1	equ	0xFE5
  6916                           fsr1l	equ	0xFE1
  6917                           indf2	equ	0xFDF
  6918                           postinc2	equ	0xFDE
  6919                           postdec2	equ	0xFDD
  6920                           fsr2h	equ	0xFDA
  6921                           fsr2l	equ	0xFD9
  6922                           status	equ	0xFD8
  6923                           
  6924 ;; *************** function _configurar_reloj *****************
  6925 ;; Defined at:
  6926 ;;		line 76 in file "reloj.c"
  6927 ;; Parameters:    Size  Location     Type
  6928 ;;		None
  6929 ;; Auto vars:     Size  Location     Type
  6930 ;;  x               1   39[COMRAM] unsigned char 
  6931 ;;  y               1   38[COMRAM] unsigned char 
  6932 ;;  input           1   37[COMRAM] unsigned char 
  6933 ;; Return value:  Size  Location     Type
  6934 ;;		None               void
  6935 ;; Registers used:
  6936 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6937 ;; Tracked objects:
  6938 ;;		On entry : 0/0
  6939 ;;		On exit  : 0/0
  6940 ;;		Unchanged: 0/0
  6941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6943 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6944 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6945 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6946 ;;Total ram usage:        4 bytes
  6947 ;; Hardware stack levels used:    1
  6948 ;; Hardware stack levels required when called:    6
  6949 ;; This function calls:
  6950 ;;		_Read_RTC
  6951 ;;		_evalueChanceOfRaw
  6952 ;;		_lcd_gotoxy
  6953 ;;		_lcd_setcursor_vb
  6954 ;;		_read_keyboard
  6955 ;;		_setClock
  6956 ;;		_write_Date
  6957 ;; This function is called by:
  6958 ;;		_select_menu
  6959 ;; This function uses a non-reentrant model
  6960 ;;
  6961                           
  6962                           	psect	text43
  6963  002E42                     __ptext43:
  6964                           	opt stack 0
  6965  002E42                     _configurar_reloj:
  6966                           	opt stack 23
  6967                           
  6968                           ;reloj.c: 77: char input = 18;
  6969                           
  6970                           ; BSR set to: 0
  6971                           ;incstack = 0
  6972  002E42  0E12               	movlw	18
  6973  002E44  6E26               	movwf	configurar_reloj@input,c
  6974                           
  6975                           ;reloj.c: 78: int8 x = 10;
  6976  002E46  0E0A               	movlw	10
  6977  002E48  6E28               	movwf	configurar_reloj@x,c
  6978                           
  6979                           ;reloj.c: 79: int8 y = 1;
  6980  002E4A  0E01               	movlw	1
  6981  002E4C  6E27               	movwf	configurar_reloj@y,c
  6982                           
  6983                           ;reloj.c: 81: while(input != 16){
  6984  002E4E  D03C               	goto	l4891
  6985  002E50                     l4865:
  6986                           
  6987                           ;reloj.c: 82: Read_RTC();
  6988  002E50  EC89  F00E         	call	_Read_RTC	;wreg free
  6989                           
  6990                           ;reloj.c: 83: lcd_setcursor_vb(1,1);
  6991  002E54  0E01               	movlw	1
  6992  002E56  6E05               	movwf	lcd_setcursor_vb@blink,c
  6993  002E58  0E01               	movlw	1
  6994  002E5A  EC08  F01D         	call	_lcd_setcursor_vb
  6995                           
  6996                           ;reloj.c: 84: lcd_gotoxy(x,y);
  6997  002E5E  C027  F005         	movff	configurar_reloj@y,lcd_gotoxy@y
  6998  002E62  5028               	movf	configurar_reloj@x,w,c
  6999  002E64  ECC2  F01C         	call	_lcd_gotoxy
  7000                           
  7001                           ;reloj.c: 85: if(PORTCbits.RC5 == 0)
  7002  002E68  BA82               	btfsc	3970,5,c	;volatile
  7003  002E6A  D01A               	goto	l4881
  7004                           
  7005                           ;reloj.c: 86: {
  7006                           ;reloj.c: 87: x=x+3;
  7007  002E6C  5028               	movf	configurar_reloj@x,w,c
  7008  002E6E  0F03               	addlw	3
  7009  002E70  6E28               	movwf	configurar_reloj@x,c
  7010                           
  7011                           ;reloj.c: 89: _delay((unsigned long)((50)*(8000000/4000.0)));
  7012  002E72  0E82               	movlw	130
  7013  002E74  6E25               	movwf	??_configurar_reloj& (0+255),c
  7014  002E76  0EDE               	movlw	222
  7015  002E78                     u4727:
  7016  002E78  2EE8               	decfsz	wreg,f,c
  7017  002E7A  D7FE               	goto	u4727
  7018  002E7C  2E25               	decfsz	??_configurar_reloj& (0+255),f,c
  7019  002E7E  D7FC               	goto	u4727
  7020                           
  7021                           ;reloj.c: 91: evalueChanceOfRaw(&x,&y);
  7022  002E80  0E28               	movlw	low configurar_reloj@x
  7023  002E82  6E01               	movwf	evalueChanceOfRaw@x,c
  7024  002E84  0E00               	movlw	high configurar_reloj@x
  7025  002E86  6E02               	movwf	evalueChanceOfRaw@x+1,c
  7026  002E88  0E27               	movlw	low configurar_reloj@y
  7027  002E8A  6E03               	movwf	evalueChanceOfRaw@y,c
  7028  002E8C  0E00               	movlw	high configurar_reloj@y
  7029  002E8E  6E04               	movwf	evalueChanceOfRaw@y+1,c
  7030  002E90  ECD4  F019         	call	_evalueChanceOfRaw	;wreg free
  7031                           
  7032                           ;reloj.c: 92: lcd_gotoxy(x,y);
  7033  002E94  C027  F005         	movff	configurar_reloj@y,lcd_gotoxy@y
  7034  002E98  5028               	movf	configurar_reloj@x,w,c
  7035  002E9A  ECC2  F01C         	call	_lcd_gotoxy
  7036  002E9E  D000               	goto	l4881
  7037  002EA0                     l4881:
  7038                           
  7039                           ;reloj.c: 93: }
  7040                           ;reloj.c: 95: if(PORTCbits.RC4 == 0){
  7041  002EA0  B882               	btfsc	3970,4,c	;volatile
  7042  002EA2  D006               	goto	l4887
  7043                           
  7044                           ;reloj.c: 96: setClock(x);
  7045  002EA4  5028               	movf	configurar_reloj@x,w,c
  7046  002EA6  EC70  F013         	call	_setClock
  7047                           
  7048                           ;reloj.c: 97: write_Date();
  7049  002EAA  ECF7  F017         	call	_write_Date	;wreg free
  7050  002EAE  D000               	goto	l4887
  7051  002EB0                     l4887:
  7052                           
  7053                           ;reloj.c: 98: }
  7054                           ;reloj.c: 99: input = read_keyboard();
  7055  002EB0  ECF2  F007         	call	_read_keyboard	;wreg free
  7056  002EB4  6E26               	movwf	configurar_reloj@input,c
  7057                           
  7058                           ;reloj.c: 100: _delay((unsigned long)((98)*(8000000/4000.0)));
  7059  002EB6  0EFF               	movlw	255
  7060  002EB8  6E25               	movwf	??_configurar_reloj& (0+255),c
  7061  002EBA  0E8A               	movlw	138
  7062  002EBC                     u4737:
  7063  002EBC  2EE8               	decfsz	wreg,f,c
  7064  002EBE  D7FE               	goto	u4737
  7065  002EC0  2E25               	decfsz	??_configurar_reloj& (0+255),f,c
  7066  002EC2  D7FC               	goto	u4737
  7067  002EC4  D000               	nop2	
  7068  002EC6  D000               	goto	l4891
  7069  002EC8                     l4891:
  7070  002EC8  0E10               	movlw	16
  7071  002ECA  1826               	xorwf	configurar_reloj@input,w,c
  7072  002ECC  A4D8               	btfss	status,2,c
  7073  002ECE  D7C0               	goto	l4865
  7074  002ED0  0012               	return		;funcret
  7075  002ED2                     __end_of_configurar_reloj:
  7076                           	opt stack 0
  7077                           tblptru	equ	0xFF8
  7078                           tblptrh	equ	0xFF7
  7079                           tblptrl	equ	0xFF6
  7080                           tablat	equ	0xFF5
  7081                           postinc0	equ	0xFEE
  7082                           wreg	equ	0xFE8
  7083                           postdec1	equ	0xFE5
  7084                           fsr1l	equ	0xFE1
  7085                           indf2	equ	0xFDF
  7086                           postinc2	equ	0xFDE
  7087                           postdec2	equ	0xFDD
  7088                           fsr2h	equ	0xFDA
  7089                           fsr2l	equ	0xFD9
  7090                           status	equ	0xFD8
  7091                           
  7092 ;; *************** function _write_Date *****************
  7093 ;; Defined at:
  7094 ;;		line 12 in file "lcd_vision.c"
  7095 ;; Parameters:    Size  Location     Type
  7096 ;;		None
  7097 ;; Auto vars:     Size  Location     Type
  7098 ;;		None
  7099 ;; Return value:  Size  Location     Type
  7100 ;;                  2  371[None  ] int 
  7101 ;; Registers used:
  7102 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7103 ;; Tracked objects:
  7104 ;;		On entry : 0/0
  7105 ;;		On exit  : 0/0
  7106 ;;		Unchanged: 0/0
  7107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7111 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7112 ;;Total ram usage:        0 bytes
  7113 ;; Hardware stack levels used:    1
  7114 ;; Hardware stack levels required when called:    5
  7115 ;; This function calls:
  7116 ;;		_lcd_gotoxy
  7117 ;;		_lcd_putrs
  7118 ;;		_lcd_setcursor_vb
  7119 ;;		_sprintf
  7120 ;; This function is called by:
  7121 ;;		_configurar_reloj
  7122 ;;		_set_vision
  7123 ;; This function uses a non-reentrant model
  7124 ;;
  7125                           
  7126                           	psect	text44
  7127  002FEE                     __ptext44:
  7128                           	opt stack 0
  7129  002FEE                     _write_Date:
  7130                           	opt stack 24
  7131                           
  7132                           ;lcd_vision.c: 13: lcd_setcursor_vb(0,0);
  7133                           
  7134                           ;incstack = 0
  7135  002FEE  0E00               	movlw	0
  7136  002FF0  6E05               	movwf	lcd_setcursor_vb@blink,c
  7137  002FF2  0E00               	movlw	0
  7138  002FF4  EC08  F01D         	call	_lcd_setcursor_vb
  7139                           
  7140                           ;lcd_vision.c: 14: lcd_gotoxy(9,1);
  7141  002FF8  0E01               	movlw	1
  7142  002FFA  6E05               	movwf	lcd_gotoxy@y,c
  7143  002FFC  0E09               	movlw	9
  7144  002FFE  ECC2  F01C         	call	_lcd_gotoxy
  7145                           
  7146                           ;lcd_vision.c: 15: sprintf(buffer2,"%02u/%02u/%02u",dia,mes,anio);
  7147  003002  0E98               	movlw	low _buffer2
  7148  003004  6E0D               	movwf	sprintf@sp,c
  7149  003006  0E00               	movlw	high _buffer2
  7150  003008  6E0E               	movwf	sprintf@sp+1,c
  7151  00300A  0E67               	movlw	low STR_11
  7152  00300C  6E0F               	movwf	sprintf@f,c
  7153  00300E  0E0F               	movlw	high STR_11
  7154  003010  6E10               	movwf	sprintf@f+1,c
  7155  003012  C0CC  F011         	movff	_dia,?_sprintf+4
  7156  003016  C0CD  F012         	movff	_dia+1,?_sprintf+5
  7157  00301A  C0D2  F013         	movff	_mes,?_sprintf+6
  7158  00301E  C0D3  F014         	movff	_mes+1,?_sprintf+7
  7159  003022  C0CA  F015         	movff	_anio,?_sprintf+8
  7160  003026  C0CB  F016         	movff	_anio+1,?_sprintf+9
  7161  00302A  EC4E  F009         	call	_sprintf	;wreg free
  7162                           
  7163                           ;lcd_vision.c: 16: lcd_putrs(buffer2);
  7164  00302E  0E98               	movlw	low _buffer2
  7165  003030  6E09               	movwf	lcd_putrs@ptr,c
  7166  003032  0E00               	movlw	high _buffer2
  7167  003034  6E0A               	movwf	lcd_putrs@ptr+1,c
  7168  003036  EC8F  F01A         	call	_lcd_putrs	;wreg free
  7169                           
  7170                           ;lcd_vision.c: 17: sprintf(buffer2,"%02u:%02u",hora,minuto);
  7171  00303A  0E98               	movlw	low _buffer2
  7172  00303C  6E0D               	movwf	sprintf@sp,c
  7173  00303E  0E00               	movlw	high _buffer2
  7174  003040  6E0E               	movwf	sprintf@sp+1,c
  7175  003042  0EB5               	movlw	low STR_12
  7176  003044  6E0F               	movwf	sprintf@f,c
  7177  003046  0E0F               	movlw	high STR_12
  7178  003048  6E10               	movwf	sprintf@f+1,c
  7179  00304A  C0D0  F011         	movff	_hora,?_sprintf+4
  7180  00304E  C0D1  F012         	movff	_hora+1,?_sprintf+5
  7181  003052  C0D4  F013         	movff	_minuto,?_sprintf+6
  7182  003056  C0D5  F014         	movff	_minuto+1,?_sprintf+7
  7183  00305A  EC4E  F009         	call	_sprintf	;wreg free
  7184                           
  7185                           ;lcd_vision.c: 18: lcd_gotoxy(1,2);
  7186  00305E  0E02               	movlw	2
  7187  003060  6E05               	movwf	lcd_gotoxy@y,c
  7188  003062  0E01               	movlw	1
  7189  003064  ECC2  F01C         	call	_lcd_gotoxy
  7190                           
  7191                           ;lcd_vision.c: 19: lcd_putrs(buffer2);
  7192  003068  0E98               	movlw	low _buffer2
  7193  00306A  6E09               	movwf	lcd_putrs@ptr,c
  7194  00306C  0E00               	movlw	high _buffer2
  7195  00306E  6E0A               	movwf	lcd_putrs@ptr+1,c
  7196  003070  EC8F  F01A         	call	_lcd_putrs	;wreg free
  7197  003074  0012               	return		;funcret
  7198  003076                     __end_of_write_Date:
  7199                           	opt stack 0
  7200                           tblptru	equ	0xFF8
  7201                           tblptrh	equ	0xFF7
  7202                           tblptrl	equ	0xFF6
  7203                           tablat	equ	0xFF5
  7204                           postinc0	equ	0xFEE
  7205                           wreg	equ	0xFE8
  7206                           postdec1	equ	0xFE5
  7207                           fsr1l	equ	0xFE1
  7208                           indf2	equ	0xFDF
  7209                           postinc2	equ	0xFDE
  7210                           postdec2	equ	0xFDD
  7211                           fsr2h	equ	0xFDA
  7212                           fsr2l	equ	0xFD9
  7213                           status	equ	0xFD8
  7214                           
  7215 ;; *************** function _lcd_setcursor_vb *****************
  7216 ;; Defined at:
  7217 ;;		line 210 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  7218 ;; Parameters:    Size  Location     Type
  7219 ;;  visible         1    wreg     unsigned char 
  7220 ;;  blink           1    4[COMRAM] unsigned char 
  7221 ;; Auto vars:     Size  Location     Type
  7222 ;;  visible         1    5[COMRAM] unsigned char 
  7223 ;; Return value:  Size  Location     Type
  7224 ;;		None               void
  7225 ;; Registers used:
  7226 ;;		wreg, status,2, status,0, cstack
  7227 ;; Tracked objects:
  7228 ;;		On entry : 0/0
  7229 ;;		On exit  : 0/0
  7230 ;;		Unchanged: 0/0
  7231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7232 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7233 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7235 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7236 ;;Total ram usage:        2 bytes
  7237 ;; Hardware stack levels used:    1
  7238 ;; Hardware stack levels required when called:    2
  7239 ;; This function calls:
  7240 ;;		_lcd_send_byte
  7241 ;; This function is called by:
  7242 ;;		_configurar_reloj
  7243 ;;		_write_Date
  7244 ;;		_set_desactive_vision
  7245 ;;		_jumpIfNotNumber
  7246 ;; This function uses a non-reentrant model
  7247 ;;
  7248                           
  7249                           	psect	text45
  7250  003A10                     __ptext45:
  7251                           	opt stack 0
  7252  003A10                     _lcd_setcursor_vb:
  7253                           	opt stack 26
  7254                           
  7255                           ;incstack = 0
  7256                           ;lcd_setcursor_vb@visible stored from wreg
  7257  003A10  6E06               	movwf	lcd_setcursor_vb@visible,c
  7258                           
  7259                           ;unmc_lcd_216.c: 211: lcd_send_byte(0, 0xC|(visible<<1)|blink);
  7260  003A12  5006               	movf	lcd_setcursor_vb@visible,w,c
  7261  003A14  2406               	addwf	lcd_setcursor_vb@visible,w,c
  7262  003A16  1005               	iorwf	lcd_setcursor_vb@blink,w,c
  7263  003A18  090C               	iorlw	12
  7264  003A1A  6E03               	movwf	lcd_send_byte@n,c
  7265  003A1C  0E00               	movlw	0
  7266  003A1E  ECE9  F01B         	call	_lcd_send_byte
  7267  003A22  0012               	return		;funcret
  7268  003A24                     __end_of_lcd_setcursor_vb:
  7269                           	opt stack 0
  7270                           tblptru	equ	0xFF8
  7271                           tblptrh	equ	0xFF7
  7272                           tblptrl	equ	0xFF6
  7273                           tablat	equ	0xFF5
  7274                           postinc0	equ	0xFEE
  7275                           wreg	equ	0xFE8
  7276                           postdec1	equ	0xFE5
  7277                           fsr1l	equ	0xFE1
  7278                           indf2	equ	0xFDF
  7279                           postinc2	equ	0xFDE
  7280                           postdec2	equ	0xFDD
  7281                           fsr2h	equ	0xFDA
  7282                           fsr2l	equ	0xFD9
  7283                           status	equ	0xFD8
  7284                           
  7285 ;; *************** function _setClock *****************
  7286 ;; Defined at:
  7287 ;;		line 38 in file "reloj.c"
  7288 ;; Parameters:    Size  Location     Type
  7289 ;;  x               1    wreg     unsigned char 
  7290 ;; Auto vars:     Size  Location     Type
  7291 ;;  x               1   14[COMRAM] unsigned char 
  7292 ;; Return value:  Size  Location     Type
  7293 ;;		None               void
  7294 ;; Registers used:
  7295 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7296 ;; Tracked objects:
  7297 ;;		On entry : 0/0
  7298 ;;		On exit  : 0/0
  7299 ;;		Unchanged: 0/0
  7300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7302 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7303 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7304 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7305 ;;Total ram usage:        2 bytes
  7306 ;; Hardware stack levels used:    1
  7307 ;; Hardware stack levels required when called:    3
  7308 ;; This function calls:
  7309 ;;		_Write_RTC
  7310 ;; This function is called by:
  7311 ;;		_configurar_reloj
  7312 ;; This function uses a non-reentrant model
  7313 ;;
  7314                           
  7315                           	psect	text46
  7316  0026E0                     __ptext46:
  7317                           	opt stack 0
  7318  0026E0                     _setClock:
  7319                           	opt stack 25
  7320                           
  7321                           ;incstack = 0
  7322                           ;setClock@x stored from wreg
  7323  0026E0  6E0F               	movwf	setClock@x,c
  7324                           
  7325                           ;reloj.c: 39: switch (x) {
  7326  0026E2  D054               	goto	l4693
  7327  0026E4                     l4665:
  7328                           
  7329                           ;reloj.c: 41: dia++;
  7330  0026E4  0100               	movlb	0	; () banked
  7331  0026E6  4BCC               	infsnz	_dia& (0+255),f,b
  7332  0026E8  2BCD               	incf	(_dia+1)& (0+255),f,b
  7333                           
  7334                           ; BSR set to: 0
  7335                           ;reloj.c: 42: if(dia > 31){
  7336  0026EA  0100               	movlb	0	; () banked
  7337  0026EC  BFCD               	btfsc	(_dia+1)& (0+255),7,b
  7338  0026EE  D05F               	goto	l4695
  7339  0026F0  0100               	movlb	0	; () banked
  7340  0026F2  51CD               	movf	(_dia+1)& (0+255),w,b
  7341  0026F4  E105               	bnz	u4270
  7342  0026F6  0E20               	movlw	32
  7343  0026F8  0100               	movlb	0	; () banked
  7344  0026FA  5DCC               	subwf	_dia& (0+255),w,b
  7345  0026FC  A0D8               	btfss	status,0,c
  7346  0026FE  D057               	goto	l4695
  7347  002700                     u4270:
  7348                           
  7349                           ; BSR set to: 0
  7350                           ;reloj.c: 43: dia = 1;
  7351  002700  0E00               	movlw	0
  7352  002702  0100               	movlb	0	; () banked
  7353  002704  6FCD               	movwf	(_dia+1)& (0+255),b
  7354  002706  0E01               	movlw	1
  7355  002708  6FCC               	movwf	_dia& (0+255),b
  7356                           
  7357                           ; BSR set to: 0
  7358                           ;reloj.c: 44: }
  7359                           ;reloj.c: 45: break;
  7360  00270A  D051               	goto	l4695
  7361  00270C                     l4671:
  7362                           
  7363                           ;reloj.c: 47: mes++;
  7364  00270C  0100               	movlb	0	; () banked
  7365  00270E  4BD2               	infsnz	_mes& (0+255),f,b
  7366  002710  2BD3               	incf	(_mes+1)& (0+255),f,b
  7367                           
  7368                           ; BSR set to: 0
  7369                           ;reloj.c: 48: if(mes > 12){
  7370  002712  0100               	movlb	0	; () banked
  7371  002714  BFD3               	btfsc	(_mes+1)& (0+255),7,b
  7372  002716  D04B               	goto	l4695
  7373  002718  0100               	movlb	0	; () banked
  7374  00271A  51D3               	movf	(_mes+1)& (0+255),w,b
  7375  00271C  E105               	bnz	u4280
  7376  00271E  0E0D               	movlw	13
  7377  002720  0100               	movlb	0	; () banked
  7378  002722  5DD2               	subwf	_mes& (0+255),w,b
  7379  002724  A0D8               	btfss	status,0,c
  7380  002726  D043               	goto	l4695
  7381  002728                     u4280:
  7382                           
  7383                           ; BSR set to: 0
  7384                           ;reloj.c: 49: mes = 1;
  7385  002728  0E00               	movlw	0
  7386  00272A  0100               	movlb	0	; () banked
  7387  00272C  6FD3               	movwf	(_mes+1)& (0+255),b
  7388  00272E  0E01               	movlw	1
  7389  002730  6FD2               	movwf	_mes& (0+255),b
  7390                           
  7391                           ; BSR set to: 0
  7392                           ;reloj.c: 50: }
  7393                           ;reloj.c: 51: break;
  7394  002732  D03D               	goto	l4695
  7395  002734                     l4677:
  7396                           
  7397                           ;reloj.c: 53: anio++;
  7398  002734  0100               	movlb	0	; () banked
  7399  002736  4BCA               	infsnz	_anio& (0+255),f,b
  7400  002738  2BCB               	incf	(_anio+1)& (0+255),f,b
  7401                           
  7402                           ;reloj.c: 54: break;
  7403  00273A  D039               	goto	l4695
  7404  00273C                     l4679:
  7405                           
  7406                           ;reloj.c: 56: hora++;
  7407  00273C  0100               	movlb	0	; () banked
  7408  00273E  4BD0               	infsnz	_hora& (0+255),f,b
  7409  002740  2BD1               	incf	(_hora+1)& (0+255),f,b
  7410                           
  7411                           ; BSR set to: 0
  7412                           ;reloj.c: 57: if(hora > 23){
  7413  002742  0100               	movlb	0	; () banked
  7414  002744  BFD1               	btfsc	(_hora+1)& (0+255),7,b
  7415  002746  D033               	goto	l4695
  7416  002748  0100               	movlb	0	; () banked
  7417  00274A  51D1               	movf	(_hora+1)& (0+255),w,b
  7418  00274C  E105               	bnz	u4290
  7419  00274E  0E18               	movlw	24
  7420  002750  0100               	movlb	0	; () banked
  7421  002752  5DD0               	subwf	_hora& (0+255),w,b
  7422  002754  A0D8               	btfss	status,0,c
  7423  002756  D02B               	goto	l4695
  7424  002758                     u4290:
  7425                           
  7426                           ; BSR set to: 0
  7427                           ;reloj.c: 58: hora = 0;
  7428  002758  0E00               	movlw	0
  7429  00275A  0100               	movlb	0	; () banked
  7430  00275C  6FD1               	movwf	(_hora+1)& (0+255),b
  7431  00275E  0E00               	movlw	0
  7432  002760  6FD0               	movwf	_hora& (0+255),b
  7433                           
  7434                           ; BSR set to: 0
  7435                           ;reloj.c: 59: }
  7436                           ;reloj.c: 60: break;
  7437  002762  D025               	goto	l4695
  7438  002764                     l4685:
  7439                           
  7440                           ;reloj.c: 62: minuto++;
  7441  002764  0100               	movlb	0	; () banked
  7442  002766  4BD4               	infsnz	_minuto& (0+255),f,b
  7443  002768  2BD5               	incf	(_minuto+1)& (0+255),f,b
  7444                           
  7445                           ; BSR set to: 0
  7446                           ;reloj.c: 63: if(minuto > 59){
  7447  00276A  0100               	movlb	0	; () banked
  7448  00276C  BFD5               	btfsc	(_minuto+1)& (0+255),7,b
  7449  00276E  D01F               	goto	l4695
  7450  002770  0100               	movlb	0	; () banked
  7451  002772  51D5               	movf	(_minuto+1)& (0+255),w,b
  7452  002774  E105               	bnz	u4300
  7453  002776  0E3C               	movlw	60
  7454  002778  0100               	movlb	0	; () banked
  7455  00277A  5DD4               	subwf	_minuto& (0+255),w,b
  7456  00277C  A0D8               	btfss	status,0,c
  7457  00277E  D017               	goto	l4695
  7458  002780                     u4300:
  7459                           
  7460                           ; BSR set to: 0
  7461                           ;reloj.c: 64: minuto = 0;
  7462  002780  0E00               	movlw	0
  7463  002782  0100               	movlb	0	; () banked
  7464  002784  6FD5               	movwf	(_minuto+1)& (0+255),b
  7465  002786  0E00               	movlw	0
  7466  002788  6FD4               	movwf	_minuto& (0+255),b
  7467                           
  7468                           ; BSR set to: 0
  7469                           ;reloj.c: 69: }
  7470                           
  7471                           ; BSR set to: 0
  7472                           ;reloj.c: 68: break;
  7473                           
  7474                           ;reloj.c: 67: default:
  7475                           
  7476                           ; BSR set to: 0
  7477                           ;reloj.c: 65: }
  7478                           ;reloj.c: 66: break;
  7479  00278A  D011               	goto	l4695
  7480  00278C                     l4693:
  7481  00278C  500F               	movf	setClock@x,w,c
  7482                           
  7483                           ; Switch size 1, requested type "space"
  7484                           ; Number of cases is 5, Range of values is 2 to 16
  7485                           ; switch strategies available:
  7486                           ; Name         Instructions Cycles
  7487                           ; simple_byte           16     9 (average)
  7488                           ;	Chosen strategy is simple_byte
  7489  00278E  0A02               	xorlw	2	; case 2
  7490  002790  B4D8               	btfsc	status,2,c
  7491  002792  D7D4               	goto	l4679
  7492  002794  0A07               	xorlw	7	; case 5
  7493  002796  B4D8               	btfsc	status,2,c
  7494  002798  D7E5               	goto	l4685
  7495  00279A  0A0F               	xorlw	15	; case 10
  7496  00279C  B4D8               	btfsc	status,2,c
  7497  00279E  D7A2               	goto	l4665
  7498  0027A0  0A07               	xorlw	7	; case 13
  7499  0027A2  B4D8               	btfsc	status,2,c
  7500  0027A4  D7B3               	goto	l4671
  7501  0027A6  0A1D               	xorlw	29	; case 16
  7502  0027A8  B4D8               	btfsc	status,2,c
  7503  0027AA  D7C4               	goto	l4677
  7504  0027AC  D000               	goto	l4695
  7505  0027AE                     l4695:
  7506                           
  7507                           ;reloj.c: 70: Write_RTC();
  7508  0027AE  EC56  F00C         	call	_Write_RTC	;wreg free
  7509                           
  7510                           ;reloj.c: 71: _delay((unsigned long)((50)*(8000000/4000.0)));
  7511  0027B2  0E82               	movlw	130
  7512  0027B4  6E0E               	movwf	??_setClock& (0+255),c
  7513  0027B6  0EDE               	movlw	222
  7514  0027B8                     u4747:
  7515  0027B8  2EE8               	decfsz	wreg,f,c
  7516  0027BA  D7FE               	goto	u4747
  7517  0027BC  2E0E               	decfsz	??_setClock& (0+255),f,c
  7518  0027BE  D7FC               	goto	u4747
  7519  0027C0  0012               	return		;funcret
  7520  0027C2                     __end_of_setClock:
  7521                           	opt stack 0
  7522                           tblptru	equ	0xFF8
  7523                           tblptrh	equ	0xFF7
  7524                           tblptrl	equ	0xFF6
  7525                           tablat	equ	0xFF5
  7526                           postinc0	equ	0xFEE
  7527                           wreg	equ	0xFE8
  7528                           postdec1	equ	0xFE5
  7529                           fsr1l	equ	0xFE1
  7530                           indf2	equ	0xFDF
  7531                           postinc2	equ	0xFDE
  7532                           postdec2	equ	0xFDD
  7533                           fsr2h	equ	0xFDA
  7534                           fsr2l	equ	0xFD9
  7535                           status	equ	0xFD8
  7536                           
  7537 ;; *************** function _read_keyboard *****************
  7538 ;; Defined at:
  7539 ;;		line 8 in file "keyboard.c"
  7540 ;; Parameters:    Size  Location     Type
  7541 ;;		None
  7542 ;; Auto vars:     Size  Location     Type
  7543 ;;		None
  7544 ;; Return value:  Size  Location     Type
  7545 ;;                  1    wreg      unsigned char 
  7546 ;; Registers used:
  7547 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7548 ;; Tracked objects:
  7549 ;;		On entry : 0/0
  7550 ;;		On exit  : 0/0
  7551 ;;		Unchanged: 0/0
  7552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7555 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7556 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7557 ;;Total ram usage:        1 bytes
  7558 ;; Hardware stack levels used:    1
  7559 ;; Hardware stack levels required when called:    5
  7560 ;; This function calls:
  7561 ;;		_lcd_putrs
  7562 ;;		_sprintf
  7563 ;; This function is called by:
  7564 ;;		_configurar_reloj
  7565 ;;		_twinkle
  7566 ;;		_input_password
  7567 ;;		_input_old_pass
  7568 ;;		_input_new_pass
  7569 ;;		_ver_opcion_cambio
  7570 ;;		_ver_info
  7571 ;;		_select_menu
  7572 ;; This function uses a non-reentrant model
  7573 ;;
  7574                           
  7575                           	psect	text47
  7576  000FE4                     __ptext47:
  7577                           	opt stack 0
  7578  000FE4                     _read_keyboard:
  7579                           	opt stack 23
  7580                           
  7581                           ;keyboard.c: 9: LATAbits.LATA0=1;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=0;
  7582                           
  7583                           ;incstack = 0
  7584  000FE4  8089               	bsf	3977,0,c	;volatile
  7585  000FE6  9289               	bcf	3977,1,c	;volatile
  7586  000FE8  9489               	bcf	3977,2,c	;volatile
  7587  000FEA  9689               	bcf	3977,3,c	;volatile
  7588                           
  7589                           ;keyboard.c: 10: {
  7590                           ;keyboard.c: 11: if (PORTAbits.RA5==1){key=1;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA5==1){};}
  7591  000FEC  AA80               	btfss	3968,5,c	;volatile
  7592  000FEE  D019               	goto	l293
  7593  000FF0  0E01               	movlw	1
  7594  000FF2  0100               	movlb	0	; () banked
  7595  000FF4  6F96               	movwf	_key& (0+255),b
  7596                           
  7597                           ; BSR set to: 0
  7598  000FF6  0E98               	movlw	low _buffer2
  7599  000FF8  6E0D               	movwf	sprintf@sp,c
  7600  000FFA  0E00               	movlw	high _buffer2
  7601  000FFC  6E0E               	movwf	sprintf@sp+1,c
  7602  000FFE  0ED6               	movlw	low STR_1
  7603  001000  6E0F               	movwf	sprintf@f,c
  7604  001002  0E0F               	movlw	high STR_1
  7605  001004  6E10               	movwf	sprintf@f+1,c
  7606  001006  C096  F011         	movff	_key,?_sprintf+4
  7607  00100A  6A12               	clrf	?_sprintf+5,c
  7608  00100C  EC4E  F009         	call	_sprintf	;wreg free
  7609  001010  0E98               	movlw	low _buffer2
  7610  001012  6E09               	movwf	lcd_putrs@ptr,c
  7611  001014  0E00               	movlw	high _buffer2
  7612  001016  6E0A               	movwf	lcd_putrs@ptr+1,c
  7613  001018  EC8F  F01A         	call	_lcd_putrs	;wreg free
  7614  00101C  D000               	goto	l294
  7615  00101E                     l294:
  7616  00101E  BA80               	btfsc	3968,5,c	;volatile
  7617  001020  D7FE               	goto	l294
  7618  001022                     l293:
  7619                           
  7620                           ;keyboard.c: 12: if (PORTAbits.RA7==1){key=2;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  7621  001022  AE80               	btfss	3968,7,c	;volatile
  7622  001024  D019               	goto	l297
  7623  001026  0E02               	movlw	2
  7624  001028  0100               	movlb	0	; () banked
  7625  00102A  6F96               	movwf	_key& (0+255),b
  7626                           
  7627                           ; BSR set to: 0
  7628  00102C  0E98               	movlw	low _buffer2
  7629  00102E  6E0D               	movwf	sprintf@sp,c
  7630  001030  0E00               	movlw	high _buffer2
  7631  001032  6E0E               	movwf	sprintf@sp+1,c
  7632  001034  0ED6               	movlw	low STR_1
  7633  001036  6E0F               	movwf	sprintf@f,c
  7634  001038  0E0F               	movlw	high STR_1
  7635  00103A  6E10               	movwf	sprintf@f+1,c
  7636  00103C  C096  F011         	movff	_key,?_sprintf+4
  7637  001040  6A12               	clrf	?_sprintf+5,c
  7638  001042  EC4E  F009         	call	_sprintf	;wreg free
  7639  001046  0E98               	movlw	low _buffer2
  7640  001048  6E09               	movwf	lcd_putrs@ptr,c
  7641  00104A  0E00               	movlw	high _buffer2
  7642  00104C  6E0A               	movwf	lcd_putrs@ptr+1,c
  7643  00104E  EC8F  F01A         	call	_lcd_putrs	;wreg free
  7644  001052  D000               	goto	l298
  7645  001054                     l298:
  7646  001054  BE80               	btfsc	3968,7,c	;volatile
  7647  001056  D7FE               	goto	l298
  7648  001058                     l297:
  7649                           
  7650                           ;keyboard.c: 13: if (PORTAbits.RA6==1){key=3;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA6==1){};}
  7651  001058  AC80               	btfss	3968,6,c	;volatile
  7652  00105A  D019               	goto	l301
  7653  00105C  0E03               	movlw	3
  7654  00105E  0100               	movlb	0	; () banked
  7655  001060  6F96               	movwf	_key& (0+255),b
  7656                           
  7657                           ; BSR set to: 0
  7658  001062  0E98               	movlw	low _buffer2
  7659  001064  6E0D               	movwf	sprintf@sp,c
  7660  001066  0E00               	movlw	high _buffer2
  7661  001068  6E0E               	movwf	sprintf@sp+1,c
  7662  00106A  0ED6               	movlw	low STR_1
  7663  00106C  6E0F               	movwf	sprintf@f,c
  7664  00106E  0E0F               	movlw	high STR_1
  7665  001070  6E10               	movwf	sprintf@f+1,c
  7666  001072  C096  F011         	movff	_key,?_sprintf+4
  7667  001076  6A12               	clrf	?_sprintf+5,c
  7668  001078  EC4E  F009         	call	_sprintf	;wreg free
  7669  00107C  0E98               	movlw	low _buffer2
  7670  00107E  6E09               	movwf	lcd_putrs@ptr,c
  7671  001080  0E00               	movlw	high _buffer2
  7672  001082  6E0A               	movwf	lcd_putrs@ptr+1,c
  7673  001084  EC8F  F01A         	call	_lcd_putrs	;wreg free
  7674  001088  D000               	goto	l302
  7675  00108A                     l302:
  7676  00108A  BC80               	btfsc	3968,6,c	;volatile
  7677  00108C  D7FE               	goto	l302
  7678  00108E                     l301:
  7679                           
  7680                           ;keyboard.c: 14: if (PORTCbits.RC2==1){key=11; while(PORTCbits.RC2==1){};}
  7681  00108E  A482               	btfss	3970,2,c	;volatile
  7682  001090  D006               	goto	l305
  7683  001092  0E0B               	movlw	11
  7684  001094  0100               	movlb	0	; () banked
  7685  001096  6F96               	movwf	_key& (0+255),b
  7686  001098  D000               	goto	l306
  7687  00109A                     l306:
  7688  00109A  B482               	btfsc	3970,2,c	;volatile
  7689  00109C  D7FE               	goto	l306
  7690  00109E                     l305:
  7691                           
  7692                           ;keyboard.c: 15: }
  7693                           ;keyboard.c: 16: LATAbits.LATA0=0;LATAbits.LATA1=1;LATAbits.LATA2=0;LATAbits.LATA3=0;
  7694  00109E  9089               	bcf	3977,0,c	;volatile
  7695  0010A0  8289               	bsf	3977,1,c	;volatile
  7696  0010A2  9489               	bcf	3977,2,c	;volatile
  7697  0010A4  9689               	bcf	3977,3,c	;volatile
  7698                           
  7699                           ;keyboard.c: 17: {
  7700                           ;keyboard.c: 18: if (PORTAbits.RA5==1){key=4;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA5==1){};}
  7701  0010A6  AA80               	btfss	3968,5,c	;volatile
  7702  0010A8  D019               	goto	l309
  7703  0010AA  0E04               	movlw	4
  7704  0010AC  0100               	movlb	0	; () banked
  7705  0010AE  6F96               	movwf	_key& (0+255),b
  7706                           
  7707                           ; BSR set to: 0
  7708  0010B0  0E98               	movlw	low _buffer2
  7709  0010B2  6E0D               	movwf	sprintf@sp,c
  7710  0010B4  0E00               	movlw	high _buffer2
  7711  0010B6  6E0E               	movwf	sprintf@sp+1,c
  7712  0010B8  0ED6               	movlw	low STR_1
  7713  0010BA  6E0F               	movwf	sprintf@f,c
  7714  0010BC  0E0F               	movlw	high STR_1
  7715  0010BE  6E10               	movwf	sprintf@f+1,c
  7716  0010C0  C096  F011         	movff	_key,?_sprintf+4
  7717  0010C4  6A12               	clrf	?_sprintf+5,c
  7718  0010C6  EC4E  F009         	call	_sprintf	;wreg free
  7719  0010CA  0E98               	movlw	low _buffer2
  7720  0010CC  6E09               	movwf	lcd_putrs@ptr,c
  7721  0010CE  0E00               	movlw	high _buffer2
  7722  0010D0  6E0A               	movwf	lcd_putrs@ptr+1,c
  7723  0010D2  EC8F  F01A         	call	_lcd_putrs	;wreg free
  7724  0010D6  D000               	goto	l310
  7725  0010D8                     l310:
  7726  0010D8  BA80               	btfsc	3968,5,c	;volatile
  7727  0010DA  D7FE               	goto	l310
  7728  0010DC                     l309:
  7729                           
  7730                           ;keyboard.c: 19: if (PORTAbits.RA7==1){key=5;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  7731  0010DC  AE80               	btfss	3968,7,c	;volatile
  7732  0010DE  D019               	goto	l313
  7733  0010E0  0E05               	movlw	5
  7734  0010E2  0100               	movlb	0	; () banked
  7735  0010E4  6F96               	movwf	_key& (0+255),b
  7736                           
  7737                           ; BSR set to: 0
  7738  0010E6  0E98               	movlw	low _buffer2
  7739  0010E8  6E0D               	movwf	sprintf@sp,c
  7740  0010EA  0E00               	movlw	high _buffer2
  7741  0010EC  6E0E               	movwf	sprintf@sp+1,c
  7742  0010EE  0ED6               	movlw	low STR_1
  7743  0010F0  6E0F               	movwf	sprintf@f,c
  7744  0010F2  0E0F               	movlw	high STR_1
  7745  0010F4  6E10               	movwf	sprintf@f+1,c
  7746  0010F6  C096  F011         	movff	_key,?_sprintf+4
  7747  0010FA  6A12               	clrf	?_sprintf+5,c
  7748  0010FC  EC4E  F009         	call	_sprintf	;wreg free
  7749  001100  0E98               	movlw	low _buffer2
  7750  001102  6E09               	movwf	lcd_putrs@ptr,c
  7751  001104  0E00               	movlw	high _buffer2
  7752  001106  6E0A               	movwf	lcd_putrs@ptr+1,c
  7753  001108  EC8F  F01A         	call	_lcd_putrs	;wreg free
  7754  00110C  D000               	goto	l314
  7755  00110E                     l314:
  7756  00110E  BE80               	btfsc	3968,7,c	;volatile
  7757  001110  D7FE               	goto	l314
  7758  001112                     l313:
  7759                           
  7760                           ;keyboard.c: 20: if (PORTAbits.RA6==1){key=6;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA6==1){};}
  7761  001112  AC80               	btfss	3968,6,c	;volatile
  7762  001114  D019               	goto	l317
  7763  001116  0E06               	movlw	6
  7764  001118  0100               	movlb	0	; () banked
  7765  00111A  6F96               	movwf	_key& (0+255),b
  7766                           
  7767                           ; BSR set to: 0
  7768  00111C  0E98               	movlw	low _buffer2
  7769  00111E  6E0D               	movwf	sprintf@sp,c
  7770  001120  0E00               	movlw	high _buffer2
  7771  001122  6E0E               	movwf	sprintf@sp+1,c
  7772  001124  0ED6               	movlw	low STR_1
  7773  001126  6E0F               	movwf	sprintf@f,c
  7774  001128  0E0F               	movlw	high STR_1
  7775  00112A  6E10               	movwf	sprintf@f+1,c
  7776  00112C  C096  F011         	movff	_key,?_sprintf+4
  7777  001130  6A12               	clrf	?_sprintf+5,c
  7778  001132  EC4E  F009         	call	_sprintf	;wreg free
  7779  001136  0E98               	movlw	low _buffer2
  7780  001138  6E09               	movwf	lcd_putrs@ptr,c
  7781  00113A  0E00               	movlw	high _buffer2
  7782  00113C  6E0A               	movwf	lcd_putrs@ptr+1,c
  7783  00113E  EC8F  F01A         	call	_lcd_putrs	;wreg free
  7784  001142  D000               	goto	l318
  7785  001144                     l318:
  7786  001144  BC80               	btfsc	3968,6,c	;volatile
  7787  001146  D7FE               	goto	l318
  7788  001148                     l317:
  7789                           
  7790                           ;keyboard.c: 21: if (PORTCbits.RC2==1){key=12; while(PORTCbits.RC2==1){};}
  7791  001148  A482               	btfss	3970,2,c	;volatile
  7792  00114A  D006               	goto	l321
  7793  00114C  0E0C               	movlw	12
  7794  00114E  0100               	movlb	0	; () banked
  7795  001150  6F96               	movwf	_key& (0+255),b
  7796  001152  D000               	goto	l322
  7797  001154                     l322:
  7798  001154  B482               	btfsc	3970,2,c	;volatile
  7799  001156  D7FE               	goto	l322
  7800  001158                     l321:
  7801                           
  7802                           ;keyboard.c: 22: }
  7803                           ;keyboard.c: 23: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=1;LATAbits.LATA3=0;
  7804  001158  9089               	bcf	3977,0,c	;volatile
  7805  00115A  9289               	bcf	3977,1,c	;volatile
  7806  00115C  8489               	bsf	3977,2,c	;volatile
  7807  00115E  9689               	bcf	3977,3,c	;volatile
  7808                           
  7809                           ;keyboard.c: 24: {
  7810                           ;keyboard.c: 25: if (PORTAbits.RA5==1){key=7;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA5==1){};}
  7811  001160  AA80               	btfss	3968,5,c	;volatile
  7812  001162  D019               	goto	l325
  7813  001164  0E07               	movlw	7
  7814  001166  0100               	movlb	0	; () banked
  7815  001168  6F96               	movwf	_key& (0+255),b
  7816                           
  7817                           ; BSR set to: 0
  7818  00116A  0E98               	movlw	low _buffer2
  7819  00116C  6E0D               	movwf	sprintf@sp,c
  7820  00116E  0E00               	movlw	high _buffer2
  7821  001170  6E0E               	movwf	sprintf@sp+1,c
  7822  001172  0ED6               	movlw	low STR_1
  7823  001174  6E0F               	movwf	sprintf@f,c
  7824  001176  0E0F               	movlw	high STR_1
  7825  001178  6E10               	movwf	sprintf@f+1,c
  7826  00117A  C096  F011         	movff	_key,?_sprintf+4
  7827  00117E  6A12               	clrf	?_sprintf+5,c
  7828  001180  EC4E  F009         	call	_sprintf	;wreg free
  7829  001184  0E98               	movlw	low _buffer2
  7830  001186  6E09               	movwf	lcd_putrs@ptr,c
  7831  001188  0E00               	movlw	high _buffer2
  7832  00118A  6E0A               	movwf	lcd_putrs@ptr+1,c
  7833  00118C  EC8F  F01A         	call	_lcd_putrs	;wreg free
  7834  001190  D000               	goto	l326
  7835  001192                     l326:
  7836  001192  BA80               	btfsc	3968,5,c	;volatile
  7837  001194  D7FE               	goto	l326
  7838  001196                     l325:
  7839                           
  7840                           ;keyboard.c: 26: if (PORTAbits.RA7==1){key=8;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  7841  001196  AE80               	btfss	3968,7,c	;volatile
  7842  001198  D019               	goto	l329
  7843  00119A  0E08               	movlw	8
  7844  00119C  0100               	movlb	0	; () banked
  7845  00119E  6F96               	movwf	_key& (0+255),b
  7846                           
  7847                           ; BSR set to: 0
  7848  0011A0  0E98               	movlw	low _buffer2
  7849  0011A2  6E0D               	movwf	sprintf@sp,c
  7850  0011A4  0E00               	movlw	high _buffer2
  7851  0011A6  6E0E               	movwf	sprintf@sp+1,c
  7852  0011A8  0ED6               	movlw	low STR_1
  7853  0011AA  6E0F               	movwf	sprintf@f,c
  7854  0011AC  0E0F               	movlw	high STR_1
  7855  0011AE  6E10               	movwf	sprintf@f+1,c
  7856  0011B0  C096  F011         	movff	_key,?_sprintf+4
  7857  0011B4  6A12               	clrf	?_sprintf+5,c
  7858  0011B6  EC4E  F009         	call	_sprintf	;wreg free
  7859  0011BA  0E98               	movlw	low _buffer2
  7860  0011BC  6E09               	movwf	lcd_putrs@ptr,c
  7861  0011BE  0E00               	movlw	high _buffer2
  7862  0011C0  6E0A               	movwf	lcd_putrs@ptr+1,c
  7863  0011C2  EC8F  F01A         	call	_lcd_putrs	;wreg free
  7864  0011C6  D000               	goto	l330
  7865  0011C8                     l330:
  7866  0011C8  BE80               	btfsc	3968,7,c	;volatile
  7867  0011CA  D7FE               	goto	l330
  7868  0011CC                     l329:
  7869                           
  7870                           ;keyboard.c: 27: if (PORTAbits.RA6==1){key=9;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA6==1){};}
  7871  0011CC  AC80               	btfss	3968,6,c	;volatile
  7872  0011CE  D019               	goto	l333
  7873  0011D0  0E09               	movlw	9
  7874  0011D2  0100               	movlb	0	; () banked
  7875  0011D4  6F96               	movwf	_key& (0+255),b
  7876                           
  7877                           ; BSR set to: 0
  7878  0011D6  0E98               	movlw	low _buffer2
  7879  0011D8  6E0D               	movwf	sprintf@sp,c
  7880  0011DA  0E00               	movlw	high _buffer2
  7881  0011DC  6E0E               	movwf	sprintf@sp+1,c
  7882  0011DE  0ED6               	movlw	low STR_1
  7883  0011E0  6E0F               	movwf	sprintf@f,c
  7884  0011E2  0E0F               	movlw	high STR_1
  7885  0011E4  6E10               	movwf	sprintf@f+1,c
  7886  0011E6  C096  F011         	movff	_key,?_sprintf+4
  7887  0011EA  6A12               	clrf	?_sprintf+5,c
  7888  0011EC  EC4E  F009         	call	_sprintf	;wreg free
  7889  0011F0  0E98               	movlw	low _buffer2
  7890  0011F2  6E09               	movwf	lcd_putrs@ptr,c
  7891  0011F4  0E00               	movlw	high _buffer2
  7892  0011F6  6E0A               	movwf	lcd_putrs@ptr+1,c
  7893  0011F8  EC8F  F01A         	call	_lcd_putrs	;wreg free
  7894  0011FC  D000               	goto	l334
  7895  0011FE                     l334:
  7896  0011FE  BC80               	btfsc	3968,6,c	;volatile
  7897  001200  D7FE               	goto	l334
  7898  001202                     l333:
  7899                           
  7900                           ;keyboard.c: 28: if (PORTCbits.RC2==1){key=13; while(PORTCbits.RC2==1){};}
  7901  001202  A482               	btfss	3970,2,c	;volatile
  7902  001204  D006               	goto	l337
  7903  001206  0E0D               	movlw	13
  7904  001208  0100               	movlb	0	; () banked
  7905  00120A  6F96               	movwf	_key& (0+255),b
  7906  00120C  D000               	goto	l338
  7907  00120E                     l338:
  7908  00120E  B482               	btfsc	3970,2,c	;volatile
  7909  001210  D7FE               	goto	l338
  7910  001212                     l337:
  7911                           
  7912                           ;keyboard.c: 29: }
  7913                           ;keyboard.c: 30: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=1;
  7914  001212  9089               	bcf	3977,0,c	;volatile
  7915  001214  9289               	bcf	3977,1,c	;volatile
  7916  001216  9489               	bcf	3977,2,c	;volatile
  7917  001218  8689               	bsf	3977,3,c	;volatile
  7918                           
  7919                           ;keyboard.c: 31: {
  7920                           ;keyboard.c: 32: if (PORTAbits.RA5==1){key=14; while(PORTAbits.RA5==1){};}
  7921  00121A  AA80               	btfss	3968,5,c	;volatile
  7922  00121C  D006               	goto	l341
  7923  00121E  0E0E               	movlw	14
  7924  001220  0100               	movlb	0	; () banked
  7925  001222  6F96               	movwf	_key& (0+255),b
  7926  001224  D000               	goto	l342
  7927  001226                     l342:
  7928  001226  BA80               	btfsc	3968,5,c	;volatile
  7929  001228  D7FE               	goto	l342
  7930  00122A                     l341:
  7931                           
  7932                           ;keyboard.c: 33: if (PORTAbits.RA7==1){key=0;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  7933  00122A  AE80               	btfss	3968,7,c	;volatile
  7934  00122C  D019               	goto	l345
  7935  00122E  0E00               	movlw	0
  7936  001230  0100               	movlb	0	; () banked
  7937  001232  6F96               	movwf	_key& (0+255),b
  7938                           
  7939                           ; BSR set to: 0
  7940  001234  0E98               	movlw	low _buffer2
  7941  001236  6E0D               	movwf	sprintf@sp,c
  7942  001238  0E00               	movlw	high _buffer2
  7943  00123A  6E0E               	movwf	sprintf@sp+1,c
  7944  00123C  0ED6               	movlw	low STR_1
  7945  00123E  6E0F               	movwf	sprintf@f,c
  7946  001240  0E0F               	movlw	high STR_1
  7947  001242  6E10               	movwf	sprintf@f+1,c
  7948  001244  C096  F011         	movff	_key,?_sprintf+4
  7949  001248  6A12               	clrf	?_sprintf+5,c
  7950  00124A  EC4E  F009         	call	_sprintf	;wreg free
  7951  00124E  0E98               	movlw	low _buffer2
  7952  001250  6E09               	movwf	lcd_putrs@ptr,c
  7953  001252  0E00               	movlw	high _buffer2
  7954  001254  6E0A               	movwf	lcd_putrs@ptr+1,c
  7955  001256  EC8F  F01A         	call	_lcd_putrs	;wreg free
  7956  00125A  D000               	goto	l346
  7957  00125C                     l346:
  7958  00125C  BE80               	btfsc	3968,7,c	;volatile
  7959  00125E  D7FE               	goto	l346
  7960  001260                     l345:
  7961                           
  7962                           ;keyboard.c: 34: if (PORTAbits.RA6==1){key=15; while(PORTAbits.RA6==1){};}
  7963  001260  AC80               	btfss	3968,6,c	;volatile
  7964  001262  D006               	goto	l349
  7965  001264  0E0F               	movlw	15
  7966  001266  0100               	movlb	0	; () banked
  7967  001268  6F96               	movwf	_key& (0+255),b
  7968  00126A  D000               	goto	l350
  7969  00126C                     l350:
  7970  00126C  BC80               	btfsc	3968,6,c	;volatile
  7971  00126E  D7FE               	goto	l350
  7972  001270                     l349:
  7973                           
  7974                           ;keyboard.c: 35: if (PORTCbits.RC2==1){key=16; while(PORTCbits.RC2==1){};}
  7975  001270  A482               	btfss	3970,2,c	;volatile
  7976  001272  D008               	goto	l4463
  7977  001274  0E10               	movlw	16
  7978  001276  0100               	movlb	0	; () banked
  7979  001278  6F96               	movwf	_key& (0+255),b
  7980  00127A  D000               	goto	l354
  7981  00127C                     l354:
  7982  00127C  A482               	btfss	3970,2,c	;volatile
  7983  00127E  D002               	goto	l4463
  7984  001280  D7FD               	goto	l354
  7985  001282  D000               	goto	l4463
  7986  001284                     l4463:
  7987                           
  7988                           ;keyboard.c: 36: }
  7989                           ;keyboard.c: 37: _delay((unsigned long)((98)*(8000000/4000.0)));
  7990  001284  0EFF               	movlw	255
  7991  001286  6E24               	movwf	??_read_keyboard& (0+255),c
  7992  001288  0E8A               	movlw	138
  7993  00128A                     u4757:
  7994  00128A  2EE8               	decfsz	wreg,f,c
  7995  00128C  D7FE               	goto	u4757
  7996  00128E  2E24               	decfsz	??_read_keyboard& (0+255),f,c
  7997  001290  D7FC               	goto	u4757
  7998  001292  D000               	nop2	
  7999                           
  8000                           ;keyboard.c: 40: return key;
  8001  001294  0100               	movlb	0	; () banked
  8002  001296  5196               	movf	_key& (0+255),w,b
  8003  001298  0012               	return	
  8004                           
  8005                           ; BSR set to: 0
  8006                           
  8007                           ; BSR set to: 0
  8008  00129A  0012               	return		;funcret
  8009  00129C                     __end_of_read_keyboard:
  8010                           	opt stack 0
  8011                           tblptru	equ	0xFF8
  8012                           tblptrh	equ	0xFF7
  8013                           tblptrl	equ	0xFF6
  8014                           tablat	equ	0xFF5
  8015                           postinc0	equ	0xFEE
  8016                           wreg	equ	0xFE8
  8017                           postdec1	equ	0xFE5
  8018                           fsr1l	equ	0xFE1
  8019                           indf2	equ	0xFDF
  8020                           postinc2	equ	0xFDE
  8021                           postdec2	equ	0xFDD
  8022                           fsr2h	equ	0xFDA
  8023                           fsr2l	equ	0xFD9
  8024                           status	equ	0xFD8
  8025                           
  8026 ;; *************** function _sprintf *****************
  8027 ;; Defined at:
  8028 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  8029 ;; Parameters:    Size  Location     Type
  8030 ;;  sp              2   12[COMRAM] PTR unsigned char 
  8031 ;;		 -> buffer2(20), 
  8032 ;;  f               2   14[COMRAM] PTR const unsigned char 
  8033 ;;		 -> STR_30(10), STR_28(10), STR_26(5), STR_12(10), 
  8034 ;;		 -> STR_11(15), STR_10(5), STR_9(5), STR_8(5), 
  8035 ;;		 -> STR_7(5), STR_6(5), STR_5(5), STR_4(5), 
  8036 ;;		 -> STR_3(5), STR_2(5), STR_1(5), 
  8037 ;; Auto vars:     Size  Location     Type
  8038 ;;  tmpval          4    0        struct .
  8039 ;;  cp              3    0        PTR const unsigned char 
  8040 ;;  width           2   32[COMRAM] int 
  8041 ;;  val             2   29[COMRAM] unsigned int 
  8042 ;;  ap              2   26[COMRAM] PTR void [1]
  8043 ;;		 -> ?_sprintf(2), 
  8044 ;;  len             2    0        unsigned int 
  8045 ;;  c               1   34[COMRAM] char 
  8046 ;;  prec            1   31[COMRAM] char 
  8047 ;;  flag            1   28[COMRAM] unsigned char 
  8048 ;; Return value:  Size  Location     Type
  8049 ;;                  2   12[COMRAM] int 
  8050 ;; Registers used:
  8051 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8052 ;; Tracked objects:
  8053 ;;		On entry : 0/0
  8054 ;;		On exit  : 0/0
  8055 ;;		Unchanged: 0/0
  8056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8057 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8058 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8059 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8060 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8061 ;;Total ram usage:       23 bytes
  8062 ;; Hardware stack levels used:    1
  8063 ;; Hardware stack levels required when called:    1
  8064 ;; This function calls:
  8065 ;;		___lwdiv
  8066 ;;		___lwmod
  8067 ;;		___wmul
  8068 ;;		_isdigit
  8069 ;; This function is called by:
  8070 ;;		_read_keyboard
  8071 ;;		_write_Date
  8072 ;;		_ver_info
  8073 ;; This function uses a non-reentrant model
  8074 ;;
  8075                           
  8076                           	psect	text48
  8077  00129C                     __ptext48:
  8078                           	opt stack 0
  8079  00129C                     _sprintf:
  8080                           	opt stack 27
  8081                           
  8082                           ;doprnt.c: 494: va_list ap;
  8083                           ;doprnt.c: 499: signed char c;
  8084                           ;doprnt.c: 501: int width;
  8085                           ;doprnt.c: 506: signed char prec;
  8086                           ;doprnt.c: 508: unsigned char flag;
  8087                           ;doprnt.c: 523: union {
  8088                           ;doprnt.c: 524: unsigned long vd;
  8089                           ;doprnt.c: 525: double integ;
  8090                           ;doprnt.c: 526: } tmpval;
  8091                           ;doprnt.c: 528: unsigned int val;
  8092                           ;doprnt.c: 529: unsigned len;
  8093                           ;doprnt.c: 530: const char * cp;
  8094                           ;doprnt.c: 533: *ap = __va_start();
  8095                           
  8096                           ; BSR set to: 0
  8097                           ;incstack = 0
  8098  00129C  0E11               	movlw	low (?_sprintf+4)
  8099  00129E  6E1B               	movwf	sprintf@ap,c
  8100  0012A0  0E00               	movlw	high (?_sprintf+4)
  8101  0012A2  6E1C               	movwf	sprintf@ap+1,c
  8102                           
  8103                           ;doprnt.c: 536: while(c = *f++) {
  8104  0012A4  D117               	goto	l4075
  8105  0012A6                     l3993:
  8106                           
  8107                           ;doprnt.c: 538: if(c != '%')
  8108  0012A6  0E25               	movlw	37
  8109  0012A8  1823               	xorwf	sprintf@c,w,c
  8110  0012AA  B4D8               	btfsc	status,2,c
  8111  0012AC  D009               	goto	l3999
  8112                           
  8113                           ;doprnt.c: 540: {
  8114                           ;doprnt.c: 541: ((*sp++ = (c)));
  8115  0012AE  C00D  FFD9         	movff	sprintf@sp,fsr2l
  8116  0012B2  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  8117  0012B6  C023  FFDF         	movff	sprintf@c,indf2
  8118  0012BA  4A0D               	infsnz	sprintf@sp,f,c
  8119  0012BC  2A0E               	incf	sprintf@sp+1,f,c
  8120                           
  8121                           ;doprnt.c: 542: continue;
  8122  0012BE  D10A               	goto	l4075
  8123  0012C0                     l3999:
  8124                           
  8125                           ;doprnt.c: 543: }
  8126                           ;doprnt.c: 546: width = 0;
  8127  0012C0  0E00               	movlw	0
  8128  0012C2  6E22               	movwf	sprintf@width+1,c
  8129  0012C4  0E00               	movlw	0
  8130  0012C6  6E21               	movwf	sprintf@width,c
  8131                           
  8132                           ;doprnt.c: 548: flag = 0;
  8133  0012C8  0E00               	movlw	0
  8134  0012CA  6E1D               	movwf	sprintf@flag,c
  8135                           
  8136                           ;doprnt.c: 551: switch(*f) {
  8137                           
  8138                           ;doprnt.c: 550: for(;;) {
  8139  0012CC  D005               	goto	l4005
  8140  0012CE                     l4001:
  8141                           
  8142                           ;doprnt.c: 580: flag |= 0x04;
  8143  0012CE  841D               	bsf	sprintf@flag,2,c
  8144                           
  8145                           ;doprnt.c: 581: f++;
  8146  0012D0  4A0F               	infsnz	sprintf@f,f,c
  8147  0012D2  2A10               	incf	sprintf@f+1,f,c
  8148                           
  8149                           ;doprnt.c: 582: continue;
  8150  0012D4  D001               	goto	l4005
  8151                           
  8152                           ;doprnt.c: 584: }
  8153  0012D6  D00B               	goto	l4007
  8154  0012D8                     l4005:
  8155  0012D8  C00F  FFF6         	movff	sprintf@f,tblptrl
  8156  0012DC  C010  FFF7         	movff	sprintf@f+1,tblptrh
  8157  0012E0                     	if	0	;tblptru may be non-zero
  8158  0012E0                     	endif
  8159  0012E0                     	if	0	;tblptru may be non-zero
  8160  0012E0                     	endif
  8161  0012E0  0008               	tblrd		*
  8162  0012E2  50F5               	movf	tablat,w,c
  8163                           
  8164                           ; Switch size 1, requested type "space"
  8165                           ; Number of cases is 1, Range of values is 48 to 48
  8166                           ; switch strategies available:
  8167                           ; Name         Instructions Cycles
  8168                           ; simple_byte            4     3 (average)
  8169                           ;	Chosen strategy is simple_byte
  8170  0012E4  0A30               	xorlw	48	; case 48
  8171  0012E6  B4D8               	btfsc	status,2,c
  8172  0012E8  D7F2               	goto	l4001
  8173                           
  8174                           ;doprnt.c: 585: break;
  8175  0012EA  D001               	goto	l4007
  8176                           
  8177                           ;doprnt.c: 586: }
  8178  0012EC  D7F5               	goto	l4005
  8179  0012EE                     l4007:
  8180                           
  8181                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  8182  0012EE  C00F  FFF6         	movff	sprintf@f,tblptrl
  8183  0012F2  C010  FFF7         	movff	sprintf@f+1,tblptrh
  8184  0012F6                     	if	0	;tblptru may be non-zero
  8185  0012F6                     	endif
  8186  0012F6                     	if	0	;tblptru may be non-zero
  8187  0012F6                     	endif
  8188  0012F6  0008               	tblrd		*
  8189  0012F8  50F5               	movf	tablat,w,c
  8190  0012FA  ECD4  F01C         	call	_isdigit
  8191  0012FE  A0D8               	btfss	status,0,c
  8192  001300  D03A               	goto	l4023
  8193                           
  8194                           ;doprnt.c: 598: width = 0;
  8195  001302  0E00               	movlw	0
  8196  001304  6E22               	movwf	sprintf@width+1,c
  8197  001306  0E00               	movlw	0
  8198  001308  6E21               	movwf	sprintf@width,c
  8199  00130A  D000               	goto	l4011
  8200  00130C                     l4011:
  8201                           
  8202                           ;doprnt.c: 600: width *= 10;
  8203  00130C  C021  F001         	movff	sprintf@width,___wmul@multiplier
  8204  001310  C022  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  8205  001314  0E00               	movlw	0
  8206  001316  6E04               	movwf	___wmul@multiplicand+1,c
  8207  001318  0E0A               	movlw	10
  8208  00131A  6E03               	movwf	___wmul@multiplicand,c
  8209  00131C  EC77  F01C         	call	___wmul	;wreg free
  8210  001320  C001  F021         	movff	?___wmul,sprintf@width
  8211  001324  C002  F022         	movff	?___wmul+1,sprintf@width+1
  8212                           
  8213                           ;doprnt.c: 601: width += *f++ - '0';
  8214  001328  0ED0               	movlw	208
  8215  00132A  6E17               	movwf	??_sprintf& (0+255),c
  8216  00132C  0EFF               	movlw	255
  8217  00132E  6E18               	movwf	(??_sprintf+1)& (0+255),c
  8218  001330  C00F  FFF6         	movff	sprintf@f,tblptrl
  8219  001334  C010  FFF7         	movff	sprintf@f+1,tblptrh
  8220  001338                     	if	0	;tblptru may be non-zero
  8221  001338                     	endif
  8222  001338                     	if	0	;tblptru may be non-zero
  8223  001338                     	endif
  8224  001338  0008               	tblrd		*
  8225  00133A  50F5               	movf	tablat,w,c
  8226  00133C  6E19               	movwf	(??_sprintf+2)& (0+255),c
  8227  00133E  6A1A               	clrf	(??_sprintf+3)& (0+255),c
  8228  001340  5017               	movf	??_sprintf,w,c
  8229  001342  2619               	addwf	??_sprintf+2,f,c
  8230  001344  5018               	movf	??_sprintf+1,w,c
  8231  001346  221A               	addwfc	??_sprintf+3,f,c
  8232  001348  5019               	movf	??_sprintf+2,w,c
  8233  00134A  2621               	addwf	sprintf@width,f,c
  8234  00134C  501A               	movf	??_sprintf+3,w,c
  8235  00134E  2222               	addwfc	sprintf@width+1,f,c
  8236  001350  4A0F               	infsnz	sprintf@f,f,c
  8237  001352  2A10               	incf	sprintf@f+1,f,c
  8238                           
  8239                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  8240  001354  C00F  FFF6         	movff	sprintf@f,tblptrl
  8241  001358  C010  FFF7         	movff	sprintf@f+1,tblptrh
  8242  00135C                     	if	0	;tblptru may be non-zero
  8243  00135C                     	endif
  8244  00135C                     	if	0	;tblptru may be non-zero
  8245  00135C                     	endif
  8246  00135C  0008               	tblrd		*
  8247  00135E  50F5               	movf	tablat,w,c
  8248  001360  ECD4  F01C         	call	_isdigit
  8249  001364  A0D8               	btfss	status,0,c
  8250  001366  D007               	goto	l4023
  8251  001368  D7D1               	goto	l4011
  8252                           
  8253                           ;doprnt.c: 608: }
  8254                           ;doprnt.c: 635: switch(c = *f++) {
  8255  00136A  D005               	goto	l4023
  8256                           
  8257                           ;doprnt.c: 638: goto alldone;
  8258                           
  8259                           ;doprnt.c: 637: case 0:
  8260  00136C  D0C1               	goto	l4077
  8261                           
  8262                           ;doprnt.c: 813: continue;
  8263                           
  8264                           ;doprnt.c: 802: default:
  8265  00136E  D0B2               	goto	l4075
  8266  001370                     l4019:
  8267                           
  8268                           ;doprnt.c: 818: flag |= 0xC0;
  8269  001370  0EC0               	movlw	192
  8270  001372  121D               	iorwf	sprintf@flag,f,c
  8271                           
  8272                           ;doprnt.c: 822: }
  8273                           
  8274                           ;doprnt.c: 819: break;
  8275  001374  D011               	goto	l4025
  8276  001376                     l4023:
  8277  001376  C00F  FFF6         	movff	sprintf@f,tblptrl
  8278  00137A  C010  FFF7         	movff	sprintf@f+1,tblptrh
  8279  00137E  4A0F               	infsnz	sprintf@f,f,c
  8280  001380  2A10               	incf	sprintf@f+1,f,c
  8281  001382                     	if	0	;tblptru may be non-zero
  8282  001382                     	endif
  8283  001382                     	if	0	;tblptru may be non-zero
  8284  001382                     	endif
  8285  001382  0008               	tblrd		*
  8286  001384  CFF5 F023          	movff	tablat,sprintf@c
  8287  001388  5023               	movf	sprintf@c,w,c
  8288                           
  8289                           ; Switch size 1, requested type "space"
  8290                           ; Number of cases is 2, Range of values is 0 to 117
  8291                           ; switch strategies available:
  8292                           ; Name         Instructions Cycles
  8293                           ; simple_byte            7     4 (average)
  8294                           ;	Chosen strategy is simple_byte
  8295  00138A  0A00               	xorlw	0	; case 0
  8296  00138C  B4D8               	btfsc	status,2,c
  8297  00138E  D0B0               	goto	l4077
  8298  001390  0A75               	xorlw	117	; case 117
  8299  001392  B4D8               	btfsc	status,2,c
  8300  001394  D7ED               	goto	l4019
  8301  001396  D09E               	goto	l4075
  8302  001398                     l4025:
  8303                           
  8304                           ;doprnt.c: 1273: {
  8305                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  8306  001398  C01B  FFD9         	movff	sprintf@ap,fsr2l
  8307  00139C  C01C  FFDA         	movff	sprintf@ap+1,fsr2h
  8308  0013A0  CFDE F01E          	movff	postinc2,sprintf@val
  8309  0013A4  CFDD F01F          	movff	postdec2,sprintf@val+1
  8310  0013A8  0E02               	movlw	2
  8311  0013AA  261B               	addwf	sprintf@ap,f,c
  8312  0013AC  0E00               	movlw	0
  8313  0013AE  221C               	addwfc	sprintf@ap+1,f,c
  8314                           
  8315                           ;doprnt.c: 1287: }
  8316                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8317  0013B0  0E01               	movlw	1
  8318  0013B2  6E23               	movwf	sprintf@c,c
  8319  0013B4                     l4031:
  8320  0013B4  0E05               	movlw	5
  8321  0013B6  1823               	xorwf	sprintf@c,w,c
  8322  0013B8  B4D8               	btfsc	status,2,c
  8323  0013BA  D016               	goto	l4043
  8324  0013BC  D001               	goto	l4035
  8325  0013BE  D014               	goto	l4043
  8326  0013C0                     l4035:
  8327                           
  8328                           ;doprnt.c: 1306: if(val < dpowers[c])
  8329  0013C0  5023               	movf	sprintf@c,w,c
  8330  0013C2  0D02               	mullw	2
  8331  0013C4  0E01               	movlw	low _dpowers
  8332  0013C6  24F3               	addwf	prodl,w,c
  8333  0013C8  6EF6               	movwf	tblptrl,c
  8334  0013CA  0E0F               	movlw	high _dpowers
  8335  0013CC  20F4               	addwfc	prodh,w,c
  8336  0013CE  6EF7               	movwf	tblptrh,c
  8337  0013D0                     	if	0	;There are less than 3 active tblptr bytes
  8338  0013D0                     	endif
  8339  0013D0  0009               	tblrd		*+
  8340  0013D2  50F5               	movf	tablat,w,c
  8341  0013D4  5C1E               	subwf	sprintf@val,w,c
  8342  0013D6  0009               	tblrd		*+
  8343  0013D8  50F5               	movf	tablat,w,c
  8344  0013DA  581F               	subwfb	sprintf@val+1,w,c
  8345  0013DC  A0D8               	btfss	status,0,c
  8346  0013DE  D004               	goto	l4043
  8347  0013E0  D001               	goto	l4039
  8348                           
  8349                           ;doprnt.c: 1307: break;
  8350  0013E2  D002               	goto	l4043
  8351  0013E4                     l4039:
  8352  0013E4  2A23               	incf	sprintf@c,f,c
  8353  0013E6  D7E6               	goto	l4031
  8354  0013E8                     l4043:
  8355                           
  8356                           ;doprnt.c: 1381: if(width > c)
  8357  0013E8  0E80               	movlw	128
  8358  0013EA  BE23               	btfsc	sprintf@c,7,c
  8359  0013EC  0E7F               	movlw	127
  8360  0013EE  6E17               	movwf	??_sprintf& (0+255),c
  8361  0013F0  5021               	movf	sprintf@width,w,c
  8362  0013F2  5C23               	subwf	sprintf@c,w,c
  8363  0013F4  5022               	movf	sprintf@width+1,w,c
  8364  0013F6  0A80               	xorlw	128
  8365  0013F8  5817               	subwfb	??_sprintf& (0+255),w,c
  8366  0013FA  B0D8               	btfsc	status,0,c
  8367  0013FC  D007               	goto	l4047
  8368                           
  8369                           ;doprnt.c: 1382: width -= c;
  8370  0013FE  5023               	movf	sprintf@c,w,c
  8371  001400  5E21               	subwf	sprintf@width,f,c
  8372  001402  0E00               	movlw	0
  8373  001404  BE23               	btfsc	sprintf@c,7,c
  8374  001406  0EFF               	movlw	255
  8375  001408  5A22               	subwfb	sprintf@width+1,f,c
  8376  00140A  D005               	goto	l4049
  8377  00140C                     l4047:
  8378                           
  8379                           ;doprnt.c: 1383: else
  8380                           ;doprnt.c: 1384: width = 0;
  8381  00140C  0E00               	movlw	0
  8382  00140E  6E22               	movwf	sprintf@width+1,c
  8383  001410  0E00               	movlw	0
  8384  001412  6E21               	movwf	sprintf@width,c
  8385  001414  D000               	goto	l4049
  8386  001416                     l4049:
  8387                           
  8388                           ;doprnt.c: 1387: if(flag & 0x04) {
  8389  001416  A41D               	btfss	sprintf@flag,2,c
  8390  001418  D015               	goto	l4059
  8391                           
  8392                           ;doprnt.c: 1415: if(width)
  8393  00141A  5021               	movf	sprintf@width,w,c
  8394  00141C  1022               	iorwf	sprintf@width+1,w,c
  8395  00141E  B4D8               	btfsc	status,2,c
  8396  001420  D026               	goto	l983
  8397  001422                     l4053:
  8398                           
  8399                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  8400  001422  C00D  FFD9         	movff	sprintf@sp,fsr2l
  8401  001426  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  8402  00142A  0E30               	movlw	48
  8403  00142C  6EDF               	movwf	indf2,c
  8404  00142E  4A0D               	infsnz	sprintf@sp,f,c
  8405  001430  2A0E               	incf	sprintf@sp+1,f,c
  8406                           
  8407                           ;doprnt.c: 1418: while(--width);
  8408  001432  0621               	decf	sprintf@width,f,c
  8409  001434  A0D8               	btfss	status,0,c
  8410  001436  0622               	decf	sprintf@width+1,f,c
  8411  001438  5021               	movf	sprintf@width,w,c
  8412  00143A  1022               	iorwf	sprintf@width+1,w,c
  8413  00143C  B4D8               	btfsc	status,2,c
  8414  00143E  D017               	goto	l983
  8415  001440  D7F0               	goto	l4053
  8416                           
  8417                           ;doprnt.c: 1420: } else
  8418  001442  D015               	goto	l983
  8419  001444                     l4059:
  8420                           
  8421                           ;doprnt.c: 1422: {
  8422                           ;doprnt.c: 1424: if(width
  8423                           ;doprnt.c: 1428: )
  8424  001444  5021               	movf	sprintf@width,w,c
  8425  001446  1022               	iorwf	sprintf@width+1,w,c
  8426  001448  B4D8               	btfsc	status,2,c
  8427  00144A  D011               	goto	l983
  8428  00144C                     l4061:
  8429                           
  8430                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  8431  00144C  C00D  FFD9         	movff	sprintf@sp,fsr2l
  8432  001450  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  8433  001454  0E20               	movlw	32
  8434  001456  6EDF               	movwf	indf2,c
  8435  001458  4A0D               	infsnz	sprintf@sp,f,c
  8436  00145A  2A0E               	incf	sprintf@sp+1,f,c
  8437                           
  8438                           ;doprnt.c: 1431: while(--width);
  8439  00145C  0621               	decf	sprintf@width,f,c
  8440  00145E  A0D8               	btfss	status,0,c
  8441  001460  0622               	decf	sprintf@width+1,f,c
  8442  001462  5021               	movf	sprintf@width,w,c
  8443  001464  1022               	iorwf	sprintf@width+1,w,c
  8444  001466  B4D8               	btfsc	status,2,c
  8445  001468  D002               	goto	l983
  8446  00146A  D7F0               	goto	l4061
  8447  00146C  D000               	goto	l983
  8448  00146E                     l983:
  8449                           
  8450                           ;doprnt.c: 1469: }
  8451                           ;doprnt.c: 1472: prec = c;
  8452  00146E  C023  F020         	movff	sprintf@c,sprintf@prec
  8453                           
  8454                           ;doprnt.c: 1474: while(prec--) {
  8455  001472  D02A               	goto	l4073
  8456  001474                     l4067:
  8457                           
  8458                           ;doprnt.c: 1478: {
  8459                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8460  001474  5020               	movf	sprintf@prec,w,c
  8461  001476  0D02               	mullw	2
  8462  001478  0E01               	movlw	low _dpowers
  8463  00147A  24F3               	addwf	prodl,w,c
  8464  00147C  6EF6               	movwf	tblptrl,c
  8465  00147E  0E0F               	movlw	high _dpowers
  8466  001480  20F4               	addwfc	prodh,w,c
  8467  001482  6EF7               	movwf	tblptrh,c
  8468  001484                     	if	0	;There are less than 3 active tblptr bytes
  8469  001484                     	endif
  8470  001484  0009               	tblrd		*+
  8471  001486  CFF5 F003          	movff	tablat,___lwdiv@divisor
  8472  00148A  000A               	tblrd		*-
  8473  00148C  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  8474  001490  C01E  F001         	movff	sprintf@val,___lwdiv@dividend
  8475  001494  C01F  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  8476  001498  EC35  F01A         	call	___lwdiv	;wreg free
  8477  00149C  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  8478  0014A0  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  8479  0014A4  0E00               	movlw	0
  8480  0014A6  6E0B               	movwf	___lwmod@divisor+1,c
  8481  0014A8  0E0A               	movlw	10
  8482  0014AA  6E0A               	movwf	___lwmod@divisor,c
  8483  0014AC  ECDF  F01A         	call	___lwmod	;wreg free
  8484  0014B0  5008               	movf	?___lwmod,w,c
  8485  0014B2  0F30               	addlw	48
  8486  0014B4  6E23               	movwf	sprintf@c,c
  8487                           
  8488                           ;doprnt.c: 1523: }
  8489                           ;doprnt.c: 1524: ((*sp++ = (c)));
  8490  0014B6  C00D  FFD9         	movff	sprintf@sp,fsr2l
  8491  0014BA  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  8492  0014BE  C023  FFDF         	movff	sprintf@c,indf2
  8493  0014C2  4A0D               	infsnz	sprintf@sp,f,c
  8494  0014C4  2A0E               	incf	sprintf@sp+1,f,c
  8495  0014C6  D000               	goto	l4073
  8496  0014C8                     l4073:
  8497  0014C8  0620               	decf	sprintf@prec,f,c
  8498  0014CA  2820               	incf	sprintf@prec,w,c
  8499  0014CC  B4D8               	btfsc	status,2,c
  8500  0014CE  D002               	goto	l4075
  8501  0014D0  D7D1               	goto	l4067
  8502  0014D2  D000               	goto	l4075
  8503  0014D4                     l4075:
  8504  0014D4  C00F  FFF6         	movff	sprintf@f,tblptrl
  8505  0014D8  C010  FFF7         	movff	sprintf@f+1,tblptrh
  8506  0014DC  4A0F               	infsnz	sprintf@f,f,c
  8507  0014DE  2A10               	incf	sprintf@f+1,f,c
  8508  0014E0                     	if	0	;tblptru may be non-zero
  8509  0014E0                     	endif
  8510  0014E0                     	if	0	;tblptru may be non-zero
  8511  0014E0                     	endif
  8512  0014E0  0008               	tblrd		*
  8513  0014E2  CFF5 F023          	movff	tablat,sprintf@c
  8514  0014E6  5023               	movf	sprintf@c,w,c
  8515  0014E8  B4D8               	btfsc	status,2,c
  8516  0014EA  D002               	goto	l4077
  8517  0014EC  D6DC               	goto	l3993
  8518  0014EE  D000               	goto	l4077
  8519  0014F0                     l4077:
  8520                           
  8521                           ;doprnt.c: 1538: *sp = 0;
  8522  0014F0  C00D  FFD9         	movff	sprintf@sp,fsr2l
  8523  0014F4  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  8524  0014F8  0E00               	movlw	0
  8525  0014FA  6EDF               	movwf	indf2,c
  8526  0014FC  0012               	return	
  8527                           
  8528                           ;doprnt.c: 1540: return 0;
  8529                           ;	Return value of _sprintf is never used
  8530  0014FE  0012               	return		;funcret
  8531  001500                     __end_of_sprintf:
  8532                           	opt stack 0
  8533                           tblptru	equ	0xFF8
  8534                           tblptrh	equ	0xFF7
  8535                           tblptrl	equ	0xFF6
  8536                           tablat	equ	0xFF5
  8537                           prodh	equ	0xFF4
  8538                           prodl	equ	0xFF3
  8539                           postinc0	equ	0xFEE
  8540                           wreg	equ	0xFE8
  8541                           postdec1	equ	0xFE5
  8542                           fsr1l	equ	0xFE1
  8543                           indf2	equ	0xFDF
  8544                           postinc2	equ	0xFDE
  8545                           postdec2	equ	0xFDD
  8546                           fsr2h	equ	0xFDA
  8547                           fsr2l	equ	0xFD9
  8548                           status	equ	0xFD8
  8549                           
  8550 ;; *************** function _isdigit *****************
  8551 ;; Defined at:
  8552 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  8553 ;; Parameters:    Size  Location     Type
  8554 ;;  c               1    wreg     unsigned char 
  8555 ;; Auto vars:     Size  Location     Type
  8556 ;;  c               1    2[COMRAM] unsigned char 
  8557 ;; Return value:  Size  Location     Type
  8558 ;;		None               void
  8559 ;; Registers used:
  8560 ;;		wreg, status,2, status,0
  8561 ;; Tracked objects:
  8562 ;;		On entry : 0/0
  8563 ;;		On exit  : 0/0
  8564 ;;		Unchanged: 0/0
  8565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8567 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8568 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8569 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8570 ;;Total ram usage:        3 bytes
  8571 ;; Hardware stack levels used:    1
  8572 ;; This function calls:
  8573 ;;		Nothing
  8574 ;; This function is called by:
  8575 ;;		_sprintf
  8576 ;; This function uses a non-reentrant model
  8577 ;;
  8578                           
  8579                           	psect	text49
  8580  0039A8                     __ptext49:
  8581                           	opt stack 0
  8582  0039A8                     _isdigit:
  8583                           	opt stack 27
  8584                           
  8585                           ;incstack = 0
  8586                           ;isdigit@c stored from wreg
  8587  0039A8  6E03               	movwf	isdigit@c,c
  8588  0039AA  0E00               	movlw	0
  8589  0039AC  6E02               	movwf	_isdigit$2721,c
  8590  0039AE  0E3A               	movlw	58
  8591  0039B0  6003               	cpfslt	isdigit@c,c
  8592  0039B2  D006               	goto	l3801
  8593  0039B4  0E2F               	movlw	47
  8594  0039B6  6403               	cpfsgt	isdigit@c,c
  8595  0039B8  D003               	goto	l3801
  8596  0039BA  0E01               	movlw	1
  8597  0039BC  6E02               	movwf	_isdigit$2721,c
  8598  0039BE  D000               	goto	l3801
  8599  0039C0                     l3801:
  8600  0039C0  C002  F001         	movff	_isdigit$2721,??_isdigit
  8601  0039C4  3001               	rrcf	??_isdigit,w,c
  8602  0039C6  0012               	return	
  8603  0039C8  0012               	return		;funcret
  8604  0039CA                     __end_of_isdigit:
  8605                           	opt stack 0
  8606                           tblptru	equ	0xFF8
  8607                           tblptrh	equ	0xFF7
  8608                           tblptrl	equ	0xFF6
  8609                           tablat	equ	0xFF5
  8610                           prodh	equ	0xFF4
  8611                           prodl	equ	0xFF3
  8612                           postinc0	equ	0xFEE
  8613                           wreg	equ	0xFE8
  8614                           postdec1	equ	0xFE5
  8615                           fsr1l	equ	0xFE1
  8616                           indf2	equ	0xFDF
  8617                           postinc2	equ	0xFDE
  8618                           postdec2	equ	0xFDD
  8619                           fsr2h	equ	0xFDA
  8620                           fsr2l	equ	0xFD9
  8621                           status	equ	0xFD8
  8622                           
  8623 ;; *************** function ___wmul *****************
  8624 ;; Defined at:
  8625 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  8626 ;; Parameters:    Size  Location     Type
  8627 ;;  multiplier      2    0[COMRAM] unsigned int 
  8628 ;;  multiplicand    2    2[COMRAM] unsigned int 
  8629 ;; Auto vars:     Size  Location     Type
  8630 ;;  product         2    4[COMRAM] unsigned int 
  8631 ;; Return value:  Size  Location     Type
  8632 ;;                  2    0[COMRAM] unsigned int 
  8633 ;; Registers used:
  8634 ;;		wreg, status,2, status,0, prodl, prodh
  8635 ;; Tracked objects:
  8636 ;;		On entry : 0/0
  8637 ;;		On exit  : 0/0
  8638 ;;		Unchanged: 0/0
  8639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8640 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8641 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8643 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8644 ;;Total ram usage:        6 bytes
  8645 ;; Hardware stack levels used:    1
  8646 ;; This function calls:
  8647 ;;		Nothing
  8648 ;; This function is called by:
  8649 ;;		_sprintf
  8650 ;;		_eval_poly
  8651 ;; This function uses a non-reentrant model
  8652 ;;
  8653                           
  8654                           	psect	text50
  8655  0038EE                     __ptext50:
  8656                           	opt stack 0
  8657  0038EE                     ___wmul:
  8658                           	opt stack 27
  8659                           
  8660                           ;incstack = 0
  8661  0038EE  5001               	movf	___wmul@multiplier,w,c
  8662  0038F0  0203               	mulwf	___wmul@multiplicand,c
  8663  0038F2  CFF3 F005          	movff	prodl,___wmul@product
  8664  0038F6  CFF4 F006          	movff	prodh,___wmul@product+1
  8665  0038FA  5001               	movf	___wmul@multiplier,w,c
  8666  0038FC  0204               	mulwf	___wmul@multiplicand+1,c
  8667  0038FE  50F3               	movf	prodl,w,c
  8668  003900  2606               	addwf	___wmul@product+1,f,c
  8669  003902  5002               	movf	___wmul@multiplier+1,w,c
  8670  003904  0203               	mulwf	___wmul@multiplicand,c
  8671  003906  50F3               	movf	prodl,w,c
  8672  003908  2606               	addwf	___wmul@product+1,f,c
  8673  00390A  C005  F001         	movff	___wmul@product,?___wmul
  8674  00390E  C006  F002         	movff	___wmul@product+1,?___wmul+1
  8675  003912  0012               	return	
  8676  003914  0012               	return		;funcret
  8677  003916                     __end_of___wmul:
  8678                           	opt stack 0
  8679                           tblptru	equ	0xFF8
  8680                           tblptrh	equ	0xFF7
  8681                           tblptrl	equ	0xFF6
  8682                           tablat	equ	0xFF5
  8683                           prodh	equ	0xFF4
  8684                           prodl	equ	0xFF3
  8685                           postinc0	equ	0xFEE
  8686                           wreg	equ	0xFE8
  8687                           postdec1	equ	0xFE5
  8688                           fsr1l	equ	0xFE1
  8689                           indf2	equ	0xFDF
  8690                           postinc2	equ	0xFDE
  8691                           postdec2	equ	0xFDD
  8692                           fsr2h	equ	0xFDA
  8693                           fsr2l	equ	0xFD9
  8694                           status	equ	0xFD8
  8695                           
  8696 ;; *************** function ___lwmod *****************
  8697 ;; Defined at:
  8698 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  8699 ;; Parameters:    Size  Location     Type
  8700 ;;  dividend        2    7[COMRAM] unsigned int 
  8701 ;;  divisor         2    9[COMRAM] unsigned int 
  8702 ;; Auto vars:     Size  Location     Type
  8703 ;;  counter         1   11[COMRAM] unsigned char 
  8704 ;; Return value:  Size  Location     Type
  8705 ;;                  2    7[COMRAM] unsigned int 
  8706 ;; Registers used:
  8707 ;;		wreg, status,2, status,0
  8708 ;; Tracked objects:
  8709 ;;		On entry : 0/0
  8710 ;;		On exit  : 0/0
  8711 ;;		Unchanged: 0/0
  8712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8713 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8714 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8716 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8717 ;;Total ram usage:        5 bytes
  8718 ;; Hardware stack levels used:    1
  8719 ;; This function calls:
  8720 ;;		Nothing
  8721 ;; This function is called by:
  8722 ;;		_sprintf
  8723 ;; This function uses a non-reentrant model
  8724 ;;
  8725                           
  8726                           	psect	text51
  8727  0035BE                     __ptext51:
  8728                           	opt stack 0
  8729  0035BE                     ___lwmod:
  8730                           	opt stack 27
  8731                           
  8732                           ;incstack = 0
  8733  0035BE  500A               	movf	___lwmod@divisor,w,c
  8734  0035C0  100B               	iorwf	___lwmod@divisor+1,w,c
  8735  0035C2  B4D8               	btfsc	status,2,c
  8736  0035C4  D01D               	goto	l1637
  8737  0035C6  0E01               	movlw	1
  8738  0035C8  6E0C               	movwf	___lwmod@counter,c
  8739  0035CA  D005               	goto	l3903
  8740  0035CC                     l3901:
  8741  0035CC  90D8               	bcf	status,0,c
  8742  0035CE  360A               	rlcf	___lwmod@divisor,f,c
  8743  0035D0  360B               	rlcf	___lwmod@divisor+1,f,c
  8744  0035D2  2A0C               	incf	___lwmod@counter,f,c
  8745  0035D4  D000               	goto	l3903
  8746  0035D6                     l3903:
  8747  0035D6  BE0B               	btfsc	___lwmod@divisor+1,7,c
  8748  0035D8  D002               	goto	l3905
  8749  0035DA  D7F8               	goto	l3901
  8750  0035DC  D000               	goto	l3905
  8751  0035DE                     l3905:
  8752  0035DE  500A               	movf	___lwmod@divisor,w,c
  8753  0035E0  5C08               	subwf	___lwmod@dividend,w,c
  8754  0035E2  500B               	movf	___lwmod@divisor+1,w,c
  8755  0035E4  5809               	subwfb	___lwmod@dividend+1,w,c
  8756  0035E6  A0D8               	btfss	status,0,c
  8757  0035E8  D005               	goto	l3909
  8758  0035EA  500A               	movf	___lwmod@divisor,w,c
  8759  0035EC  5E08               	subwf	___lwmod@dividend,f,c
  8760  0035EE  500B               	movf	___lwmod@divisor+1,w,c
  8761  0035F0  5A09               	subwfb	___lwmod@dividend+1,f,c
  8762  0035F2  D000               	goto	l3909
  8763  0035F4                     l3909:
  8764  0035F4  90D8               	bcf	status,0,c
  8765  0035F6  320B               	rrcf	___lwmod@divisor+1,f,c
  8766  0035F8  320A               	rrcf	___lwmod@divisor,f,c
  8767  0035FA  2E0C               	decfsz	___lwmod@counter,f,c
  8768  0035FC  D7F0               	goto	l3905
  8769  0035FE  D000               	goto	l1637
  8770  003600                     l1637:
  8771  003600  C008  F008         	movff	___lwmod@dividend,?___lwmod
  8772  003604  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  8773  003608  0012               	return		;funcret
  8774  00360A                     __end_of___lwmod:
  8775                           	opt stack 0
  8776                           tblptru	equ	0xFF8
  8777                           tblptrh	equ	0xFF7
  8778                           tblptrl	equ	0xFF6
  8779                           tablat	equ	0xFF5
  8780                           prodh	equ	0xFF4
  8781                           prodl	equ	0xFF3
  8782                           postinc0	equ	0xFEE
  8783                           wreg	equ	0xFE8
  8784                           postdec1	equ	0xFE5
  8785                           fsr1l	equ	0xFE1
  8786                           indf2	equ	0xFDF
  8787                           postinc2	equ	0xFDE
  8788                           postdec2	equ	0xFDD
  8789                           fsr2h	equ	0xFDA
  8790                           fsr2l	equ	0xFD9
  8791                           status	equ	0xFD8
  8792                           
  8793 ;; *************** function ___lwdiv *****************
  8794 ;; Defined at:
  8795 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  8796 ;; Parameters:    Size  Location     Type
  8797 ;;  dividend        2    0[COMRAM] unsigned int 
  8798 ;;  divisor         2    2[COMRAM] unsigned int 
  8799 ;; Auto vars:     Size  Location     Type
  8800 ;;  quotient        2    4[COMRAM] unsigned int 
  8801 ;;  counter         1    6[COMRAM] unsigned char 
  8802 ;; Return value:  Size  Location     Type
  8803 ;;                  2    0[COMRAM] unsigned int 
  8804 ;; Registers used:
  8805 ;;		wreg, status,2, status,0
  8806 ;; Tracked objects:
  8807 ;;		On entry : 0/0
  8808 ;;		On exit  : 0/0
  8809 ;;		Unchanged: 0/0
  8810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8811 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8812 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8814 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8815 ;;Total ram usage:        7 bytes
  8816 ;; Hardware stack levels used:    1
  8817 ;; This function calls:
  8818 ;;		Nothing
  8819 ;; This function is called by:
  8820 ;;		_sprintf
  8821 ;; This function uses a non-reentrant model
  8822 ;;
  8823                           
  8824                           	psect	text52
  8825  00346A                     __ptext52:
  8826                           	opt stack 0
  8827  00346A                     ___lwdiv:
  8828                           	opt stack 27
  8829                           
  8830                           ;incstack = 0
  8831  00346A  0E00               	movlw	0
  8832  00346C  6E06               	movwf	___lwdiv@quotient+1,c
  8833  00346E  0E00               	movlw	0
  8834  003470  6E05               	movwf	___lwdiv@quotient,c
  8835  003472  5003               	movf	___lwdiv@divisor,w,c
  8836  003474  1004               	iorwf	___lwdiv@divisor+1,w,c
  8837  003476  B4D8               	btfsc	status,2,c
  8838  003478  D021               	goto	l1627
  8839  00347A  0E01               	movlw	1
  8840  00347C  6E07               	movwf	___lwdiv@counter,c
  8841  00347E  D005               	goto	l3883
  8842  003480                     l3881:
  8843  003480  90D8               	bcf	status,0,c
  8844  003482  3603               	rlcf	___lwdiv@divisor,f,c
  8845  003484  3604               	rlcf	___lwdiv@divisor+1,f,c
  8846  003486  2A07               	incf	___lwdiv@counter,f,c
  8847  003488  D000               	goto	l3883
  8848  00348A                     l3883:
  8849  00348A  BE04               	btfsc	___lwdiv@divisor+1,7,c
  8850  00348C  D002               	goto	l3885
  8851  00348E  D7F8               	goto	l3881
  8852  003490  D000               	goto	l3885
  8853  003492                     l3885:
  8854  003492  90D8               	bcf	status,0,c
  8855  003494  3605               	rlcf	___lwdiv@quotient,f,c
  8856  003496  3606               	rlcf	___lwdiv@quotient+1,f,c
  8857  003498  5003               	movf	___lwdiv@divisor,w,c
  8858  00349A  5C01               	subwf	___lwdiv@dividend,w,c
  8859  00349C  5004               	movf	___lwdiv@divisor+1,w,c
  8860  00349E  5802               	subwfb	___lwdiv@dividend+1,w,c
  8861  0034A0  A0D8               	btfss	status,0,c
  8862  0034A2  D006               	goto	l3893
  8863  0034A4  5003               	movf	___lwdiv@divisor,w,c
  8864  0034A6  5E01               	subwf	___lwdiv@dividend,f,c
  8865  0034A8  5004               	movf	___lwdiv@divisor+1,w,c
  8866  0034AA  5A02               	subwfb	___lwdiv@dividend+1,f,c
  8867  0034AC  8005               	bsf	___lwdiv@quotient,0,c
  8868  0034AE  D000               	goto	l3893
  8869  0034B0                     l3893:
  8870  0034B0  90D8               	bcf	status,0,c
  8871  0034B2  3204               	rrcf	___lwdiv@divisor+1,f,c
  8872  0034B4  3203               	rrcf	___lwdiv@divisor,f,c
  8873  0034B6  2E07               	decfsz	___lwdiv@counter,f,c
  8874  0034B8  D7EC               	goto	l3885
  8875  0034BA  D000               	goto	l1627
  8876  0034BC                     l1627:
  8877  0034BC  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  8878  0034C0  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8879  0034C4  0012               	return		;funcret
  8880  0034C6                     __end_of___lwdiv:
  8881                           	opt stack 0
  8882                           tblptru	equ	0xFF8
  8883                           tblptrh	equ	0xFF7
  8884                           tblptrl	equ	0xFF6
  8885                           tablat	equ	0xFF5
  8886                           prodh	equ	0xFF4
  8887                           prodl	equ	0xFF3
  8888                           postinc0	equ	0xFEE
  8889                           wreg	equ	0xFE8
  8890                           postdec1	equ	0xFE5
  8891                           fsr1l	equ	0xFE1
  8892                           indf2	equ	0xFDF
  8893                           postinc2	equ	0xFDE
  8894                           postdec2	equ	0xFDD
  8895                           fsr2h	equ	0xFDA
  8896                           fsr2l	equ	0xFD9
  8897                           status	equ	0xFD8
  8898                           
  8899 ;; *************** function _lcd_putrs *****************
  8900 ;; Defined at:
  8901 ;;		line 221 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  8902 ;; Parameters:    Size  Location     Type
  8903 ;;  ptr             2    8[COMRAM] PTR const unsigned char 
  8904 ;;		 -> STR_29(2), STR_27(6), STR_25(9), STR_24(14), 
  8905 ;;		 -> STR_23(14), STR_22(16), STR_21(15), STR_20(8), 
  8906 ;;		 -> STR_19(13), STR_18(8), STR_17(4), STR_16(3), 
  8907 ;;		 -> STR_15(10), STR_14(11), STR_13(11), buffer2(20), 
  8908 ;; Auto vars:     Size  Location     Type
  8909 ;;		None
  8910 ;; Return value:  Size  Location     Type
  8911 ;;		None               void
  8912 ;; Registers used:
  8913 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8914 ;; Tracked objects:
  8915 ;;		On entry : 0/0
  8916 ;;		On exit  : 0/0
  8917 ;;		Unchanged: 0/0
  8918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8919 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8922 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8923 ;;Total ram usage:        2 bytes
  8924 ;; Hardware stack levels used:    1
  8925 ;; Hardware stack levels required when called:    4
  8926 ;; This function calls:
  8927 ;;		_lcd_putc
  8928 ;; This function is called by:
  8929 ;;		_read_keyboard
  8930 ;;		_write_Date
  8931 ;;		_twinkle
  8932 ;;		_set_desactive_vision
  8933 ;;		_set_vision
  8934 ;;		_show_success
  8935 ;;		_show_error
  8936 ;;		_ver_opcion_cambio
  8937 ;;		_ver_info
  8938 ;; This function uses a non-reentrant model
  8939 ;;
  8940                           
  8941                           	psect	text53
  8942  00351E                     __ptext53:
  8943                           	opt stack 0
  8944  00351E                     _lcd_putrs:
  8945                           	opt stack 24
  8946                           
  8947                           ;unmc_lcd_216.c: 223: while(*ptr){
  8948                           
  8949                           ;incstack = 0
  8950  00351E  D015               	goto	l3987
  8951  003520                     l3983:
  8952                           
  8953                           ;unmc_lcd_216.c: 224: lcd_putc(*ptr++);
  8954  003520  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  8955  003524  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  8956  003528  6AF8               	clrf	tblptru,c
  8957  00352A  0E0E               	movlw	(high __ramtop+-1)
  8958  00352C  64F7               	cpfsgt	tblptrh,c
  8959  00352E  D003               	bra	u3217
  8960  003530  0008               	tblrd		*
  8961  003532  50F5               	movf	tablat,w,c
  8962  003534  D005               	bra	u3210
  8963  003536                     u3217:
  8964  003536  CFF6 FFE9          	movff	tblptrl,fsr0l
  8965  00353A  CFF7 FFEA          	movff	tblptrh,fsr0h
  8966  00353E  50EF               	movf	indf0,w,c
  8967  003540                     u3210:
  8968  003540  EC05  F01B         	call	_lcd_putc
  8969  003544  4A09               	infsnz	lcd_putrs@ptr,f,c
  8970  003546  2A0A               	incf	lcd_putrs@ptr+1,f,c
  8971  003548  D000               	goto	l3987
  8972  00354A                     l3987:
  8973  00354A  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  8974  00354E  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  8975  003552  6AF8               	clrf	tblptru,c
  8976  003554  0E0E               	movlw	(high __ramtop+-1)
  8977  003556  64F7               	cpfsgt	tblptrh,c
  8978  003558  D003               	bra	u3227
  8979  00355A  0008               	tblrd		*
  8980  00355C  50F5               	movf	tablat,w,c
  8981  00355E  D005               	bra	u3220
  8982  003560                     u3227:
  8983  003560  CFF6 FFE9          	movff	tblptrl,fsr0l
  8984  003564  CFF7 FFEA          	movff	tblptrh,fsr0h
  8985  003568  50EF               	movf	indf0,w,c
  8986  00356A                     u3220:
  8987  00356A  0900               	iorlw	0
  8988  00356C  A4D8               	btfss	status,2,c
  8989  00356E  D7D8               	goto	l3983
  8990  003570  0012               	return		;funcret
  8991  003572                     __end_of_lcd_putrs:
  8992                           	opt stack 0
  8993                           tblptru	equ	0xFF8
  8994                           tblptrh	equ	0xFF7
  8995                           tblptrl	equ	0xFF6
  8996                           tablat	equ	0xFF5
  8997                           prodh	equ	0xFF4
  8998                           prodl	equ	0xFF3
  8999                           indf0	equ	0xFEF
  9000                           postinc0	equ	0xFEE
  9001                           fsr0h	equ	0xFEA
  9002                           fsr0l	equ	0xFE9
  9003                           wreg	equ	0xFE8
  9004                           postdec1	equ	0xFE5
  9005                           fsr1l	equ	0xFE1
  9006                           indf2	equ	0xFDF
  9007                           postinc2	equ	0xFDE
  9008                           postdec2	equ	0xFDD
  9009                           fsr2h	equ	0xFDA
  9010                           fsr2l	equ	0xFD9
  9011                           status	equ	0xFD8
  9012                           
  9013 ;; *************** function _lcd_putc *****************
  9014 ;; Defined at:
  9015 ;;		line 172 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  9016 ;; Parameters:    Size  Location     Type
  9017 ;;  c               1    wreg     unsigned char 
  9018 ;; Auto vars:     Size  Location     Type
  9019 ;;  c               1    7[COMRAM] unsigned char 
  9020 ;; Return value:  Size  Location     Type
  9021 ;;		None               void
  9022 ;; Registers used:
  9023 ;;		wreg, status,2, status,0, cstack
  9024 ;; Tracked objects:
  9025 ;;		On entry : 0/0
  9026 ;;		On exit  : 0/0
  9027 ;;		Unchanged: 0/0
  9028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9030 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9032 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9033 ;;Total ram usage:        1 bytes
  9034 ;; Hardware stack levels used:    1
  9035 ;; Hardware stack levels required when called:    3
  9036 ;; This function calls:
  9037 ;;		_lcd_gotoxy
  9038 ;;		_lcd_send_byte
  9039 ;; This function is called by:
  9040 ;;		_lcd_putrs
  9041 ;;		_lcd_puts
  9042 ;; This function uses a non-reentrant model
  9043 ;;
  9044                           
  9045                           	psect	text54
  9046  00360A                     __ptext54:
  9047                           	opt stack 0
  9048  00360A                     _lcd_putc:
  9049                           	opt stack 24
  9050                           
  9051                           ;incstack = 0
  9052                           ;lcd_putc@c stored from wreg
  9053  00360A  6E08               	movwf	lcd_putc@c,c
  9054                           
  9055                           ;unmc_lcd_216.c: 173: switch(c){
  9056  00360C  D018               	goto	l3783
  9057  00360E                     l3773:
  9058                           
  9059                           ;unmc_lcd_216.c: 175: lcd_send_byte(0,1);
  9060  00360E  0E01               	movlw	1
  9061  003610  6E03               	movwf	lcd_send_byte@n,c
  9062  003612  0E00               	movlw	0
  9063  003614  ECE9  F01B         	call	_lcd_send_byte
  9064                           
  9065                           ;unmc_lcd_216.c: 176: break;
  9066  003618  0012               	return	
  9067  00361A                     l3775:
  9068                           
  9069                           ;unmc_lcd_216.c: 178: lcd_gotoxy(1,2);
  9070  00361A  0E02               	movlw	2
  9071  00361C  6E05               	movwf	lcd_gotoxy@y,c
  9072  00361E  0E01               	movlw	1
  9073  003620  ECC2  F01C         	call	_lcd_gotoxy
  9074                           
  9075                           ;unmc_lcd_216.c: 179: break;
  9076  003624  0012               	return	
  9077  003626                     l3777:
  9078                           
  9079                           ;unmc_lcd_216.c: 181: lcd_send_byte(0,0x10);
  9080  003626  0E10               	movlw	16
  9081  003628  6E03               	movwf	lcd_send_byte@n,c
  9082  00362A  0E00               	movlw	0
  9083  00362C  ECE9  F01B         	call	_lcd_send_byte
  9084                           
  9085                           ;unmc_lcd_216.c: 182: break;
  9086  003630  0012               	return	
  9087  003632                     l3779:
  9088                           
  9089                           ;unmc_lcd_216.c: 184: lcd_send_byte(1,c);
  9090  003632  C008  F003         	movff	lcd_putc@c,lcd_send_byte@n
  9091  003636  0E01               	movlw	1
  9092  003638  ECE9  F01B         	call	_lcd_send_byte
  9093                           
  9094                           ;unmc_lcd_216.c: 186: }
  9095                           
  9096                           ;unmc_lcd_216.c: 185: break;
  9097  00363C  0012               	return	
  9098  00363E                     l3783:
  9099  00363E  5008               	movf	lcd_putc@c,w,c
  9100                           
  9101                           ; Switch size 1, requested type "space"
  9102                           ; Number of cases is 3, Range of values is 8 to 12
  9103                           ; switch strategies available:
  9104                           ; Name         Instructions Cycles
  9105                           ; simple_byte           10     6 (average)
  9106                           ;	Chosen strategy is simple_byte
  9107  003640  0A08               	xorlw	8	; case 8
  9108  003642  B4D8               	btfsc	status,2,c
  9109  003644  D7F0               	goto	l3777
  9110  003646  0A02               	xorlw	2	; case 10
  9111  003648  B4D8               	btfsc	status,2,c
  9112  00364A  D7E7               	goto	l3775
  9113  00364C  0A06               	xorlw	6	; case 12
  9114  00364E  B4D8               	btfsc	status,2,c
  9115  003650  D7DE               	goto	l3773
  9116  003652  D7EF               	goto	l3779
  9117  003654  0012               	return		;funcret
  9118  003656                     __end_of_lcd_putc:
  9119                           	opt stack 0
  9120                           tblptru	equ	0xFF8
  9121                           tblptrh	equ	0xFF7
  9122                           tblptrl	equ	0xFF6
  9123                           tablat	equ	0xFF5
  9124                           prodh	equ	0xFF4
  9125                           prodl	equ	0xFF3
  9126                           indf0	equ	0xFEF
  9127                           postinc0	equ	0xFEE
  9128                           fsr0h	equ	0xFEA
  9129                           fsr0l	equ	0xFE9
  9130                           wreg	equ	0xFE8
  9131                           postdec1	equ	0xFE5
  9132                           fsr1l	equ	0xFE1
  9133                           indf2	equ	0xFDF
  9134                           postinc2	equ	0xFDE
  9135                           postdec2	equ	0xFDD
  9136                           fsr2h	equ	0xFDA
  9137                           fsr2l	equ	0xFD9
  9138                           status	equ	0xFD8
  9139                           
  9140 ;; *************** function _lcd_gotoxy *****************
  9141 ;; Defined at:
  9142 ;;		line 158 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  9143 ;; Parameters:    Size  Location     Type
  9144 ;;  x               1    wreg     unsigned char 
  9145 ;;  y               1    4[COMRAM] unsigned char 
  9146 ;; Auto vars:     Size  Location     Type
  9147 ;;  x               1    5[COMRAM] unsigned char 
  9148 ;;  address         1    6[COMRAM] unsigned char 
  9149 ;; Return value:  Size  Location     Type
  9150 ;;		None               void
  9151 ;; Registers used:
  9152 ;;		wreg, status,2, status,0, cstack
  9153 ;; Tracked objects:
  9154 ;;		On entry : 0/0
  9155 ;;		On exit  : 0/0
  9156 ;;		Unchanged: 0/0
  9157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9158 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9159 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9161 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9162 ;;Total ram usage:        3 bytes
  9163 ;; Hardware stack levels used:    1
  9164 ;; Hardware stack levels required when called:    2
  9165 ;; This function calls:
  9166 ;;		_lcd_send_byte
  9167 ;; This function is called by:
  9168 ;;		_lcd_putc
  9169 ;;		_configurar_reloj
  9170 ;;		_write_Date
  9171 ;;		_next_code
  9172 ;;		_twinkle
  9173 ;;		_set_desactive_vision
  9174 ;;		_set_vision
  9175 ;;		_input_old_pass
  9176 ;;		_show_success
  9177 ;;		_show_error
  9178 ;;		_input_new_pass
  9179 ;;		_ver_opcion_cambio
  9180 ;;		_ver_info
  9181 ;; This function uses a non-reentrant model
  9182 ;;
  9183                           
  9184                           	psect	text55
  9185  003984                     __ptext55:
  9186                           	opt stack 0
  9187  003984                     _lcd_gotoxy:
  9188                           	opt stack 24
  9189                           
  9190                           ;incstack = 0
  9191                           ;lcd_gotoxy@x stored from wreg
  9192  003984  6E06               	movwf	lcd_gotoxy@x,c
  9193                           
  9194                           ;unmc_lcd_216.c: 159: int8 address;
  9195                           ;unmc_lcd_216.c: 161: if(y != 1)
  9196  003986  0405               	decf	lcd_gotoxy@y,w,c
  9197  003988  B4D8               	btfsc	status,2,c
  9198  00398A  D002               	goto	l3541
  9199                           
  9200                           ;unmc_lcd_216.c: 162: address = 0x40;
  9201  00398C  0E40               	movlw	64
  9202  00398E  D001               	goto	L7
  9203  003990                     l3541:
  9204                           
  9205                           ;unmc_lcd_216.c: 163: else
  9206                           ;unmc_lcd_216.c: 164: address=0;
  9207  003990  0E00               	movlw	0
  9208  003992                     L7:
  9209  003992  6E07               	movwf	lcd_gotoxy@address,c
  9210  003994  D000               	goto	l3543
  9211  003996                     l3543:
  9212                           
  9213                           ;unmc_lcd_216.c: 166: address += x-1;
  9214  003996  0406               	decf	lcd_gotoxy@x,w,c
  9215  003998  2607               	addwf	lcd_gotoxy@address,f,c
  9216                           
  9217                           ;unmc_lcd_216.c: 167: lcd_send_byte(0, 0x80 | address);
  9218  00399A  5007               	movf	lcd_gotoxy@address,w,c
  9219  00399C  0980               	iorlw	128
  9220  00399E  6E03               	movwf	lcd_send_byte@n,c
  9221  0039A0  0E00               	movlw	0
  9222  0039A2  ECE9  F01B         	call	_lcd_send_byte
  9223  0039A6  0012               	return		;funcret
  9224  0039A8                     __end_of_lcd_gotoxy:
  9225                           	opt stack 0
  9226                           tblptru	equ	0xFF8
  9227                           tblptrh	equ	0xFF7
  9228                           tblptrl	equ	0xFF6
  9229                           tablat	equ	0xFF5
  9230                           prodh	equ	0xFF4
  9231                           prodl	equ	0xFF3
  9232                           indf0	equ	0xFEF
  9233                           postinc0	equ	0xFEE
  9234                           fsr0h	equ	0xFEA
  9235                           fsr0l	equ	0xFE9
  9236                           wreg	equ	0xFE8
  9237                           postdec1	equ	0xFE5
  9238                           fsr1l	equ	0xFE1
  9239                           indf2	equ	0xFDF
  9240                           postinc2	equ	0xFDE
  9241                           postdec2	equ	0xFDD
  9242                           fsr2h	equ	0xFDA
  9243                           fsr2l	equ	0xFD9
  9244                           status	equ	0xFD8
  9245                           
  9246 ;; *************** function _evalueChanceOfRaw *****************
  9247 ;; Defined at:
  9248 ;;		line 5 in file "reloj.c"
  9249 ;; Parameters:    Size  Location     Type
  9250 ;;  x               2    0[COMRAM] PTR unsigned char 
  9251 ;;		 -> configurar_reloj@x(1), 
  9252 ;;  y               2    2[COMRAM] PTR unsigned char 
  9253 ;;		 -> configurar_reloj@y(1), 
  9254 ;; Auto vars:     Size  Location     Type
  9255 ;;		None
  9256 ;; Return value:  Size  Location     Type
  9257 ;;		None               void
  9258 ;; Registers used:
  9259 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9260 ;; Tracked objects:
  9261 ;;		On entry : 0/0
  9262 ;;		On exit  : 0/0
  9263 ;;		Unchanged: 0/0
  9264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9265 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9267 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9268 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9269 ;;Total ram usage:        5 bytes
  9270 ;; Hardware stack levels used:    1
  9271 ;; This function calls:
  9272 ;;		Nothing
  9273 ;; This function is called by:
  9274 ;;		_configurar_reloj
  9275 ;; This function uses a non-reentrant model
  9276 ;;
  9277                           
  9278                           	psect	text56
  9279  0033A8                     __ptext56:
  9280                           	opt stack 0
  9281  0033A8                     _evalueChanceOfRaw:
  9282                           	opt stack 28
  9283                           
  9284                           ;reloj.c: 6: if (*x > 16){
  9285                           
  9286                           ;incstack = 0
  9287  0033A8  C001  FFD9         	movff	evalueChanceOfRaw@x,fsr2l
  9288  0033AC  C002  FFDA         	movff	evalueChanceOfRaw@x+1,fsr2h
  9289  0033B0  0E10               	movlw	16
  9290  0033B2  64DF               	cpfsgt	indf2,c
  9291  0033B4  D00D               	goto	l4657
  9292                           
  9293                           ;reloj.c: 7: *x = 2;
  9294  0033B6  C001  FFD9         	movff	evalueChanceOfRaw@x,fsr2l
  9295  0033BA  C002  FFDA         	movff	evalueChanceOfRaw@x+1,fsr2h
  9296  0033BE  0E02               	movlw	2
  9297  0033C0  6EDF               	movwf	indf2,c
  9298                           
  9299                           ;reloj.c: 8: *y = 2;
  9300  0033C2  C003  FFD9         	movff	evalueChanceOfRaw@y,fsr2l
  9301  0033C6  C004  FFDA         	movff	evalueChanceOfRaw@y+1,fsr2h
  9302  0033CA  0E02               	movlw	2
  9303  0033CC  6EDF               	movwf	indf2,c
  9304  0033CE  D000               	goto	l4657
  9305  0033D0                     l4657:
  9306                           
  9307                           ;reloj.c: 9: }
  9308                           ;reloj.c: 11: if(*y == 2 && *x > 5){
  9309  0033D0  C003  FFD9         	movff	evalueChanceOfRaw@y,fsr2l
  9310  0033D4  C004  FFDA         	movff	evalueChanceOfRaw@y+1,fsr2h
  9311  0033D8  0E02               	movlw	2
  9312  0033DA  18DE               	xorwf	postinc2,w,c
  9313  0033DC  A4D8               	btfss	status,2,c
  9314  0033DE  0012               	return	
  9315  0033E0  C001  FFD9         	movff	evalueChanceOfRaw@x,fsr2l
  9316  0033E4  C002  FFDA         	movff	evalueChanceOfRaw@x+1,fsr2h
  9317  0033E8  0E05               	movlw	5
  9318  0033EA  64DF               	cpfsgt	indf2,c
  9319  0033EC  0012               	return	
  9320                           
  9321                           ;reloj.c: 13: *y = 1;
  9322  0033EE  C003  FFD9         	movff	evalueChanceOfRaw@y,fsr2l
  9323  0033F2  C004  FFDA         	movff	evalueChanceOfRaw@y+1,fsr2h
  9324  0033F6  0E01               	movlw	1
  9325  0033F8  6EDF               	movwf	indf2,c
  9326                           
  9327                           ;reloj.c: 14: *x = 10;
  9328  0033FA  C001  FFD9         	movff	evalueChanceOfRaw@x,fsr2l
  9329  0033FE  C002  FFDA         	movff	evalueChanceOfRaw@x+1,fsr2h
  9330  003402  0E0A               	movlw	10
  9331  003404  6EDF               	movwf	indf2,c
  9332  003406  0012               	return	
  9333  003408  0012               	return		;funcret
  9334  00340A                     __end_of_evalueChanceOfRaw:
  9335                           	opt stack 0
  9336                           tblptru	equ	0xFF8
  9337                           tblptrh	equ	0xFF7
  9338                           tblptrl	equ	0xFF6
  9339                           tablat	equ	0xFF5
  9340                           prodh	equ	0xFF4
  9341                           prodl	equ	0xFF3
  9342                           indf0	equ	0xFEF
  9343                           postinc0	equ	0xFEE
  9344                           fsr0h	equ	0xFEA
  9345                           fsr0l	equ	0xFE9
  9346                           wreg	equ	0xFE8
  9347                           postdec1	equ	0xFE5
  9348                           fsr1l	equ	0xFE1
  9349                           indf2	equ	0xFDF
  9350                           postinc2	equ	0xFDE
  9351                           postdec2	equ	0xFDD
  9352                           fsr2h	equ	0xFDA
  9353                           fsr2l	equ	0xFD9
  9354                           status	equ	0xFD8
  9355                           
  9356 ;; *************** function _Read_RTC *****************
  9357 ;; Defined at:
  9358 ;;		line 59 in file "Unimic/sources/unmc_rtcc_01.c"
  9359 ;; Parameters:    Size  Location     Type
  9360 ;;		None
  9361 ;; Auto vars:     Size  Location     Type
  9362 ;;		None
  9363 ;; Return value:  Size  Location     Type
  9364 ;;                  2   32[None  ] int 
  9365 ;; Registers used:
  9366 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9367 ;; Tracked objects:
  9368 ;;		On entry : 0/0
  9369 ;;		On exit  : 0/0
  9370 ;;		Unchanged: 0/0
  9371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9375 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9376 ;;Total ram usage:        0 bytes
  9377 ;; Hardware stack levels used:    1
  9378 ;; Hardware stack levels required when called:    1
  9379 ;; This function calls:
  9380 ;;		_RtccReadDate
  9381 ;;		_RtccReadTime
  9382 ;; This function is called by:
  9383 ;;		_main
  9384 ;;		_configurar_reloj
  9385 ;;		_dispararSensor
  9386 ;; This function uses a non-reentrant model
  9387 ;;
  9388                           
  9389                           	psect	text57
  9390  001D12                     __ptext57:
  9391                           	opt stack 0
  9392  001D12                     _Read_RTC:
  9393                           	opt stack 27
  9394                           
  9395                           ;unmc_rtcc_01.c: 62: RtccReadTime(&RtccTime);
  9396                           
  9397                           ;incstack = 0
  9398  001D12  0EB0               	movlw	low _RtccTime
  9399  001D14  6E01               	movwf	RtccReadTime@pTm,c
  9400  001D16  0E00               	movlw	high _RtccTime
  9401  001D18  6E02               	movwf	RtccReadTime@pTm+1,c
  9402  001D1A  EC37  F019         	call	_RtccReadTime	;wreg free
  9403                           
  9404                           ;unmc_rtcc_01.c: 63: segundo_u=(RtccTime.f.sec & 0x0F);
  9405  001D1E  0100               	movlb	0	; () banked
  9406  001D20  51B1               	movf	(_RtccTime+1)& (0+255),w,b
  9407  001D22  0B0F               	andlw	15
  9408  001D24  0100               	movlb	0	; () banked
  9409  001D26  6FE6               	movwf	_segundo_u& (0+255),b
  9410                           
  9411                           ; BSR set to: 0
  9412                           ;unmc_rtcc_01.c: 64: segundo_d=((RtccTime.f.sec & 0xF0)>>4);
  9413  001D28  0100               	movlb	0	; () banked
  9414  001D2A  39B1               	swapf	(_RtccTime+1)& (0+255),w,b
  9415  001D2C  0B0F               	andlw	15
  9416  001D2E  0B0F               	andlw	15
  9417  001D30  0100               	movlb	0	; () banked
  9418  001D32  6FE5               	movwf	_segundo_d& (0+255),b
  9419                           
  9420                           ; BSR set to: 0
  9421                           ;unmc_rtcc_01.c: 65: minuto_u=(RtccTime.f.min & 0x0F);
  9422  001D34  0100               	movlb	0	; () banked
  9423  001D36  51B2               	movf	(_RtccTime+2)& (0+255),w,b
  9424  001D38  0B0F               	andlw	15
  9425  001D3A  0100               	movlb	0	; () banked
  9426  001D3C  6FE4               	movwf	_minuto_u& (0+255),b
  9427                           
  9428                           ; BSR set to: 0
  9429                           ;unmc_rtcc_01.c: 66: minuto_d=((RtccTime.f.min & 0xF0)>>4);
  9430  001D3E  0100               	movlb	0	; () banked
  9431  001D40  39B2               	swapf	(_RtccTime+2)& (0+255),w,b
  9432  001D42  0B0F               	andlw	15
  9433  001D44  0B0F               	andlw	15
  9434  001D46  0100               	movlb	0	; () banked
  9435  001D48  6FE3               	movwf	_minuto_d& (0+255),b
  9436                           
  9437                           ; BSR set to: 0
  9438                           ;unmc_rtcc_01.c: 67: hora_u=(RtccTime.f.hour & 0x0F);
  9439  001D4A  0100               	movlb	0	; () banked
  9440  001D4C  51B3               	movf	(_RtccTime+3)& (0+255),w,b
  9441  001D4E  0B0F               	andlw	15
  9442  001D50  0100               	movlb	0	; () banked
  9443  001D52  6FE0               	movwf	_hora_u& (0+255),b
  9444                           
  9445                           ; BSR set to: 0
  9446                           ;unmc_rtcc_01.c: 68: hora_d=((RtccTime.f.hour & 0xF0)>>4);
  9447  001D54  0100               	movlb	0	; () banked
  9448  001D56  39B3               	swapf	(_RtccTime+3)& (0+255),w,b
  9449  001D58  0B0F               	andlw	15
  9450  001D5A  0B0F               	andlw	15
  9451  001D5C  0100               	movlb	0	; () banked
  9452  001D5E  6FDF               	movwf	_hora_d& (0+255),b
  9453                           
  9454                           ;unmc_rtcc_01.c: 69: RtccReadDate(&RtccDate);
  9455  001D60  0EAC               	movlw	low _RtccDate
  9456  001D62  6E01               	movwf	RtccReadDate@pDt,c
  9457  001D64  0E00               	movlw	high _RtccDate
  9458  001D66  6E02               	movwf	RtccReadDate@pDt+1,c
  9459  001D68  ECB0  F017         	call	_RtccReadDate	;wreg free
  9460                           
  9461                           ;unmc_rtcc_01.c: 70: fecha_u=(RtccDate.f.mday & 0x0F);
  9462  001D6C  0100               	movlb	0	; () banked
  9463  001D6E  51AD               	movf	(_RtccDate+1)& (0+255),w,b
  9464  001D70  0B0F               	andlw	15
  9465  001D72  0100               	movlb	0	; () banked
  9466  001D74  6FDE               	movwf	_fecha_u& (0+255),b
  9467                           
  9468                           ; BSR set to: 0
  9469                           ;unmc_rtcc_01.c: 71: fecha_d=((RtccDate.f.mday & 0xF0)>>4);
  9470  001D76  0100               	movlb	0	; () banked
  9471  001D78  39AD               	swapf	(_RtccDate+1)& (0+255),w,b
  9472  001D7A  0B0F               	andlw	15
  9473  001D7C  0B0F               	andlw	15
  9474  001D7E  0100               	movlb	0	; () banked
  9475  001D80  6FDD               	movwf	_fecha_d& (0+255),b
  9476                           
  9477                           ; BSR set to: 0
  9478                           ;unmc_rtcc_01.c: 72: mes_u=(RtccDate.f.mon & 0x0F);
  9479  001D82  0100               	movlb	0	; () banked
  9480  001D84  51AE               	movf	(_RtccDate+2)& (0+255),w,b
  9481  001D86  0B0F               	andlw	15
  9482  001D88  0100               	movlb	0	; () banked
  9483  001D8A  6FE2               	movwf	_mes_u& (0+255),b
  9484                           
  9485                           ; BSR set to: 0
  9486                           ;unmc_rtcc_01.c: 73: mes_d=((RtccDate.f.mon & 0xF0)>>4);
  9487  001D8C  0100               	movlb	0	; () banked
  9488  001D8E  39AE               	swapf	(_RtccDate+2)& (0+255),w,b
  9489  001D90  0B0F               	andlw	15
  9490  001D92  0B0F               	andlw	15
  9491  001D94  0100               	movlb	0	; () banked
  9492  001D96  6FE1               	movwf	_mes_d& (0+255),b
  9493                           
  9494                           ; BSR set to: 0
  9495                           ;unmc_rtcc_01.c: 74: dia_semana=RtccDate.f.wday;
  9496  001D98  C0AC  F0DC         	movff	_RtccDate,_dia_semana
  9497                           
  9498                           ; BSR set to: 0
  9499                           ;unmc_rtcc_01.c: 75: anio_u=(RtccDate.f.year & 0x0F);
  9500  001D9C  0100               	movlb	0	; () banked
  9501  001D9E  51AF               	movf	(_RtccDate+3)& (0+255),w,b
  9502  001DA0  0B0F               	andlw	15
  9503  001DA2  0100               	movlb	0	; () banked
  9504  001DA4  6FDB               	movwf	_anio_u& (0+255),b
  9505                           
  9506                           ; BSR set to: 0
  9507                           ;unmc_rtcc_01.c: 76: anio_d=((RtccDate.f.year & 0xF0)>>4);
  9508  001DA6  0100               	movlb	0	; () banked
  9509  001DA8  39AF               	swapf	(_RtccDate+3)& (0+255),w,b
  9510  001DAA  0B0F               	andlw	15
  9511  001DAC  0B0F               	andlw	15
  9512  001DAE  0100               	movlb	0	; () banked
  9513  001DB0  6FDA               	movwf	_anio_d& (0+255),b
  9514                           
  9515                           ; BSR set to: 0
  9516                           ;unmc_rtcc_01.c: 78: segundo=segundo_d*10+segundo_u;
  9517  001DB2  0100               	movlb	0	; () banked
  9518  001DB4  51E5               	movf	_segundo_d& (0+255),w,b
  9519  001DB6  0D0A               	mullw	10
  9520  001DB8  0100               	movlb	0	; () banked
  9521  001DBA  51E6               	movf	_segundo_u& (0+255),w,b
  9522  001DBC  24F3               	addwf	prodl,w,c
  9523  001DBE  0100               	movlb	0	; () banked
  9524  001DC0  6F94               	movwf	_segundo& (0+255),b
  9525  001DC2  0100               	movlb	0	; () banked
  9526  001DC4  0E00               	movlw	0
  9527  001DC6  20F4               	addwfc	prodh,w,c
  9528  001DC8  0100               	movlb	0	; () banked
  9529  001DCA  6F95               	movwf	(_segundo+1)& (0+255),b
  9530                           
  9531                           ; BSR set to: 0
  9532                           ;unmc_rtcc_01.c: 79: minuto=minuto_d*10+minuto_u;
  9533  001DCC  0100               	movlb	0	; () banked
  9534  001DCE  51E3               	movf	_minuto_d& (0+255),w,b
  9535  001DD0  0D0A               	mullw	10
  9536  001DD2  0100               	movlb	0	; () banked
  9537  001DD4  51E4               	movf	_minuto_u& (0+255),w,b
  9538  001DD6  24F3               	addwf	prodl,w,c
  9539  001DD8  0100               	movlb	0	; () banked
  9540  001DDA  6FD4               	movwf	_minuto& (0+255),b
  9541  001DDC  0100               	movlb	0	; () banked
  9542  001DDE  0E00               	movlw	0
  9543  001DE0  20F4               	addwfc	prodh,w,c
  9544  001DE2  0100               	movlb	0	; () banked
  9545  001DE4  6FD5               	movwf	(_minuto+1)& (0+255),b
  9546                           
  9547                           ; BSR set to: 0
  9548                           ;unmc_rtcc_01.c: 80: hora=hora_d*10+hora_u;
  9549  001DE6  0100               	movlb	0	; () banked
  9550  001DE8  51DF               	movf	_hora_d& (0+255),w,b
  9551  001DEA  0D0A               	mullw	10
  9552  001DEC  0100               	movlb	0	; () banked
  9553  001DEE  51E0               	movf	_hora_u& (0+255),w,b
  9554  001DF0  24F3               	addwf	prodl,w,c
  9555  001DF2  0100               	movlb	0	; () banked
  9556  001DF4  6FD0               	movwf	_hora& (0+255),b
  9557  001DF6  0100               	movlb	0	; () banked
  9558  001DF8  0E00               	movlw	0
  9559  001DFA  20F4               	addwfc	prodh,w,c
  9560  001DFC  0100               	movlb	0	; () banked
  9561  001DFE  6FD1               	movwf	(_hora+1)& (0+255),b
  9562                           
  9563                           ; BSR set to: 0
  9564                           ;unmc_rtcc_01.c: 81: dia=fecha_d*10+fecha_u;
  9565  001E00  0100               	movlb	0	; () banked
  9566  001E02  51DD               	movf	_fecha_d& (0+255),w,b
  9567  001E04  0D0A               	mullw	10
  9568  001E06  0100               	movlb	0	; () banked
  9569  001E08  51DE               	movf	_fecha_u& (0+255),w,b
  9570  001E0A  24F3               	addwf	prodl,w,c
  9571  001E0C  0100               	movlb	0	; () banked
  9572  001E0E  6FCC               	movwf	_dia& (0+255),b
  9573  001E10  0100               	movlb	0	; () banked
  9574  001E12  0E00               	movlw	0
  9575  001E14  20F4               	addwfc	prodh,w,c
  9576  001E16  0100               	movlb	0	; () banked
  9577  001E18  6FCD               	movwf	(_dia+1)& (0+255),b
  9578                           
  9579                           ; BSR set to: 0
  9580                           ;unmc_rtcc_01.c: 82: diasem=dia_semana;
  9581  001E1A  C0DC  F0CE         	movff	_dia_semana,_diasem
  9582  001E1E  0100               	movlb	0	; () banked
  9583  001E20  6BCF               	clrf	(_diasem+1)& (0+255),b
  9584                           
  9585                           ; BSR set to: 0
  9586                           ;unmc_rtcc_01.c: 83: mes=mes_d*10+mes_u;
  9587  001E22  0100               	movlb	0	; () banked
  9588  001E24  51E1               	movf	_mes_d& (0+255),w,b
  9589  001E26  0D0A               	mullw	10
  9590  001E28  0100               	movlb	0	; () banked
  9591  001E2A  51E2               	movf	_mes_u& (0+255),w,b
  9592  001E2C  24F3               	addwf	prodl,w,c
  9593  001E2E  0100               	movlb	0	; () banked
  9594  001E30  6FD2               	movwf	_mes& (0+255),b
  9595  001E32  0100               	movlb	0	; () banked
  9596  001E34  0E00               	movlw	0
  9597  001E36  20F4               	addwfc	prodh,w,c
  9598  001E38  0100               	movlb	0	; () banked
  9599  001E3A  6FD3               	movwf	(_mes+1)& (0+255),b
  9600                           
  9601                           ; BSR set to: 0
  9602                           ;unmc_rtcc_01.c: 84: anio=anio_d*10+anio_u;
  9603  001E3C  0100               	movlb	0	; () banked
  9604  001E3E  51DA               	movf	_anio_d& (0+255),w,b
  9605  001E40  0D0A               	mullw	10
  9606  001E42  0100               	movlb	0	; () banked
  9607  001E44  51DB               	movf	_anio_u& (0+255),w,b
  9608  001E46  24F3               	addwf	prodl,w,c
  9609  001E48  0100               	movlb	0	; () banked
  9610  001E4A  6FCA               	movwf	_anio& (0+255),b
  9611  001E4C  0100               	movlb	0	; () banked
  9612  001E4E  0E00               	movlw	0
  9613  001E50  20F4               	addwfc	prodh,w,c
  9614  001E52  0100               	movlb	0	; () banked
  9615  001E54  6FCB               	movwf	(_anio+1)& (0+255),b
  9616                           
  9617                           ; BSR set to: 0
  9618  001E56  0012               	return		;funcret
  9619  001E58                     __end_of_Read_RTC:
  9620                           	opt stack 0
  9621                           tblptru	equ	0xFF8
  9622                           tblptrh	equ	0xFF7
  9623                           tblptrl	equ	0xFF6
  9624                           tablat	equ	0xFF5
  9625                           prodh	equ	0xFF4
  9626                           prodl	equ	0xFF3
  9627                           indf0	equ	0xFEF
  9628                           postinc0	equ	0xFEE
  9629                           fsr0h	equ	0xFEA
  9630                           fsr0l	equ	0xFE9
  9631                           wreg	equ	0xFE8
  9632                           postdec1	equ	0xFE5
  9633                           fsr1l	equ	0xFE1
  9634                           indf2	equ	0xFDF
  9635                           postinc2	equ	0xFDE
  9636                           postdec2	equ	0xFDD
  9637                           fsr2h	equ	0xFDA
  9638                           fsr2l	equ	0xFD9
  9639                           status	equ	0xFD8
  9640                           
  9641 ;; *************** function _RtccReadTime *****************
  9642 ;; Defined at:
  9643 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadTime.c"
  9644 ;; Parameters:    Size  Location     Type
  9645 ;;  pTm             2    0[COMRAM] PTR struct .
  9646 ;;		 -> RtccTime(4), 
  9647 ;; Auto vars:     Size  Location     Type
  9648 ;;  rTD0            8   10[COMRAM] struct .
  9649 ;;  rTD1            8    2[COMRAM] struct .
  9650 ;; Return value:  Size  Location     Type
  9651 ;;		None               void
  9652 ;; Registers used:
  9653 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9654 ;; Tracked objects:
  9655 ;;		On entry : 0/0
  9656 ;;		On exit  : 0/0
  9657 ;;		Unchanged: 0/0
  9658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9659 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9660 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9662 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9663 ;;Total ram usage:       18 bytes
  9664 ;; Hardware stack levels used:    1
  9665 ;; This function calls:
  9666 ;;		Nothing
  9667 ;; This function is called by:
  9668 ;;		_Read_RTC
  9669 ;; This function uses a non-reentrant model
  9670 ;;
  9671                           
  9672                           	psect	text58
  9673  00326E                     __ptext58:
  9674                           	opt stack 0
  9675  00326E                     _RtccReadTime:
  9676                           	opt stack 27
  9677  00326E  0EFC               	movlw	252
  9678  003270  010F               	movlb	15	; () banked
  9679  003272  173F               	andwf	63,f,b	;volatile
  9680                           
  9681                           ; BSR set to: 15
  9682  003274  010F               	movlb	15	; () banked
  9683  003276  813F               	bsf	63,0,b	;volatile
  9684                           
  9685                           ; BSR set to: 15
  9686  003278  CF98 F00F          	movff	3992,RtccReadTime@rTD0+4	;volatile
  9687                           
  9688                           ; BSR set to: 15
  9689  00327C  CF99 F010          	movff	3993,RtccReadTime@rTD0+5	;volatile
  9690                           
  9691                           ; BSR set to: 15
  9692  003280  CF98 F011          	movff	3992,RtccReadTime@rTD0+6	;volatile
  9693                           
  9694                           ; BSR set to: 15
  9695  003284  CF99 F012          	movff	3993,RtccReadTime@rTD0+7	;volatile
  9696                           
  9697                           ; BSR set to: 15
  9698  003288  0EFC               	movlw	252
  9699  00328A  010F               	movlb	15	; () banked
  9700  00328C  173F               	andwf	63,f,b	;volatile
  9701  00328E  010F               	movlb	15	; () banked
  9702  003290  813F               	bsf	63,0,b	;volatile
  9703                           
  9704                           ; BSR set to: 15
  9705  003292  CF98 F007          	movff	3992,RtccReadTime@rTD1+4	;volatile
  9706                           
  9707                           ; BSR set to: 15
  9708  003296  CF99 F008          	movff	3993,RtccReadTime@rTD1+5	;volatile
  9709                           
  9710                           ; BSR set to: 15
  9711  00329A  CF98 F009          	movff	3992,RtccReadTime@rTD1+6	;volatile
  9712                           
  9713                           ; BSR set to: 15
  9714  00329E  CF99 F00A          	movff	3993,RtccReadTime@rTD1+7	;volatile
  9715                           
  9716                           ; BSR set to: 15
  9717  0032A2  5009               	movf	RtccReadTime@rTD1+6,w,c
  9718  0032A4  1811               	xorwf	RtccReadTime@rTD0+6,w,c
  9719  0032A6  A4D8               	btfss	status,2,c
  9720  0032A8  D7E2               	goto	l4549
  9721                           
  9722                           ; BSR set to: 15
  9723                           
  9724                           ; BSR set to: 15
  9725  0032AA  EE20 F003          	lfsr	2,3
  9726  0032AE  5001               	movf	RtccReadTime@pTm,w,c
  9727  0032B0  26D9               	addwf	fsr2l,f,c
  9728  0032B2  5002               	movf	RtccReadTime@pTm+1,w,c
  9729  0032B4  22DA               	addwfc	fsr2h,f,c
  9730  0032B6  C00F  FFDF         	movff	RtccReadTime@rTD0+4,indf2
  9731  0032BA  EE20 F002          	lfsr	2,2
  9732  0032BE  5001               	movf	RtccReadTime@pTm,w,c
  9733  0032C0  26D9               	addwf	fsr2l,f,c
  9734  0032C2  5002               	movf	RtccReadTime@pTm+1,w,c
  9735  0032C4  22DA               	addwfc	fsr2h,f,c
  9736  0032C6  C012  FFDF         	movff	RtccReadTime@rTD0+7,indf2
  9737  0032CA  EE20 F001          	lfsr	2,1
  9738  0032CE  5001               	movf	RtccReadTime@pTm,w,c
  9739  0032D0  26D9               	addwf	fsr2l,f,c
  9740  0032D2  5002               	movf	RtccReadTime@pTm+1,w,c
  9741  0032D4  22DA               	addwfc	fsr2h,f,c
  9742  0032D6  C011  FFDF         	movff	RtccReadTime@rTD0+6,indf2
  9743                           
  9744                           ; BSR set to: 15
  9745  0032DA  0012               	return		;funcret
  9746  0032DC                     __end_of_RtccReadTime:
  9747                           	opt stack 0
  9748                           tblptru	equ	0xFF8
  9749                           tblptrh	equ	0xFF7
  9750                           tblptrl	equ	0xFF6
  9751                           tablat	equ	0xFF5
  9752                           prodh	equ	0xFF4
  9753                           prodl	equ	0xFF3
  9754                           indf0	equ	0xFEF
  9755                           postinc0	equ	0xFEE
  9756                           fsr0h	equ	0xFEA
  9757                           fsr0l	equ	0xFE9
  9758                           wreg	equ	0xFE8
  9759                           postdec1	equ	0xFE5
  9760                           fsr1l	equ	0xFE1
  9761                           indf2	equ	0xFDF
  9762                           postinc2	equ	0xFDE
  9763                           postdec2	equ	0xFDD
  9764                           fsr2h	equ	0xFDA
  9765                           fsr2l	equ	0xFD9
  9766                           status	equ	0xFD8
  9767                           
  9768 ;; *************** function _RtccReadDate *****************
  9769 ;; Defined at:
  9770 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadDate.c"
  9771 ;; Parameters:    Size  Location     Type
  9772 ;;  pDt             2    0[COMRAM] PTR struct .
  9773 ;;		 -> RtccDate(4), 
  9774 ;; Auto vars:     Size  Location     Type
  9775 ;;  rTD0            8   10[COMRAM] struct .
  9776 ;;  rTD1            8    2[COMRAM] struct .
  9777 ;; Return value:  Size  Location     Type
  9778 ;;		None               void
  9779 ;; Registers used:
  9780 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9781 ;; Tracked objects:
  9782 ;;		On entry : 0/0
  9783 ;;		On exit  : 0/0
  9784 ;;		Unchanged: 0/0
  9785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9786 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9787 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9789 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9790 ;;Total ram usage:       18 bytes
  9791 ;; Hardware stack levels used:    1
  9792 ;; This function calls:
  9793 ;;		Nothing
  9794 ;; This function is called by:
  9795 ;;		_Read_RTC
  9796 ;; This function uses a non-reentrant model
  9797 ;;
  9798                           
  9799                           	psect	text59
  9800  002F60                     __ptext59:
  9801                           	opt stack 0
  9802  002F60                     _RtccReadDate:
  9803                           	opt stack 27
  9804  002F60  0EFC               	movlw	252
  9805  002F62  010F               	movlb	15	; () banked
  9806  002F64  173F               	andwf	63,f,b	;volatile
  9807  002F66  0E03               	movlw	3
  9808  002F68  010F               	movlb	15	; () banked
  9809  002F6A  133F               	iorwf	63,f,b	;volatile
  9810                           
  9811                           ; BSR set to: 15
  9812  002F6C  CF98 F00B          	movff	3992,RtccReadDate@rTD0	;volatile
  9813                           
  9814                           ; BSR set to: 15
  9815  002F70  CF99 F00C          	movff	3993,RtccReadDate@rTD0+1	;volatile
  9816                           
  9817                           ; BSR set to: 15
  9818  002F74  CF98 F00D          	movff	3992,RtccReadDate@rTD0+2	;volatile
  9819                           
  9820                           ; BSR set to: 15
  9821  002F78  CF99 F00E          	movff	3993,RtccReadDate@rTD0+3	;volatile
  9822                           
  9823                           ; BSR set to: 15
  9824  002F7C  CF98 F00F          	movff	3992,RtccReadDate@rTD0+4	;volatile
  9825                           
  9826                           ; BSR set to: 15
  9827  002F80  CF99 F010          	movff	3993,RtccReadDate@rTD0+5	;volatile
  9828  002F84  0EFC               	movlw	252
  9829  002F86  010F               	movlb	15	; () banked
  9830  002F88  173F               	andwf	63,f,b	;volatile
  9831  002F8A  0E03               	movlw	3
  9832  002F8C  010F               	movlb	15	; () banked
  9833  002F8E  133F               	iorwf	63,f,b	;volatile
  9834                           
  9835                           ; BSR set to: 15
  9836  002F90  CF98 F003          	movff	3992,RtccReadDate@rTD1	;volatile
  9837                           
  9838                           ; BSR set to: 15
  9839  002F94  CF99 F004          	movff	3993,RtccReadDate@rTD1+1	;volatile
  9840                           
  9841                           ; BSR set to: 15
  9842  002F98  CF98 F005          	movff	3992,RtccReadDate@rTD1+2	;volatile
  9843                           
  9844                           ; BSR set to: 15
  9845  002F9C  CF99 F006          	movff	3993,RtccReadDate@rTD1+3	;volatile
  9846                           
  9847                           ; BSR set to: 15
  9848  002FA0  CF98 F007          	movff	3992,RtccReadDate@rTD1+4	;volatile
  9849                           
  9850                           ; BSR set to: 15
  9851  002FA4  CF99 F008          	movff	3993,RtccReadDate@rTD1+5	;volatile
  9852  002FA8  5005               	movf	RtccReadDate@rTD1+2,w,c
  9853  002FAA  180D               	xorwf	RtccReadDate@rTD0+2,w,c
  9854  002FAC  A4D8               	btfss	status,2,c
  9855  002FAE  D7D8               	goto	l4575
  9856                           
  9857                           ; BSR set to: 15
  9858                           
  9859                           ; BSR set to: 15
  9860  002FB0  EE20 F001          	lfsr	2,1
  9861  002FB4  5001               	movf	RtccReadDate@pDt,w,c
  9862  002FB6  26D9               	addwf	fsr2l,f,c
  9863  002FB8  5002               	movf	RtccReadDate@pDt+1,w,c
  9864  002FBA  22DA               	addwfc	fsr2h,f,c
  9865  002FBC  C00D  FFDF         	movff	RtccReadDate@rTD0+2,indf2
  9866  002FC0  EE20 F002          	lfsr	2,2
  9867  002FC4  5001               	movf	RtccReadDate@pDt,w,c
  9868  002FC6  26D9               	addwf	fsr2l,f,c
  9869  002FC8  5002               	movf	RtccReadDate@pDt+1,w,c
  9870  002FCA  22DA               	addwfc	fsr2h,f,c
  9871  002FCC  C00E  FFDF         	movff	RtccReadDate@rTD0+3,indf2
  9872                           
  9873                           ; BSR set to: 15
  9874  002FD0  C001  FFD9         	movff	RtccReadDate@pDt,fsr2l
  9875  002FD4  C002  FFDA         	movff	RtccReadDate@pDt+1,fsr2h
  9876  002FD8  C010  FFDF         	movff	RtccReadDate@rTD0+5,indf2
  9877                           
  9878                           ; BSR set to: 15
  9879  002FDC  EE20 F003          	lfsr	2,3
  9880  002FE0  5001               	movf	RtccReadDate@pDt,w,c
  9881  002FE2  26D9               	addwf	fsr2l,f,c
  9882  002FE4  5002               	movf	RtccReadDate@pDt+1,w,c
  9883  002FE6  22DA               	addwfc	fsr2h,f,c
  9884  002FE8  C00B  FFDF         	movff	RtccReadDate@rTD0,indf2
  9885                           
  9886                           ; BSR set to: 15
  9887  002FEC  0012               	return		;funcret
  9888  002FEE                     __end_of_RtccReadDate:
  9889                           	opt stack 0
  9890                           tblptru	equ	0xFF8
  9891                           tblptrh	equ	0xFF7
  9892                           tblptrl	equ	0xFF6
  9893                           tablat	equ	0xFF5
  9894                           prodh	equ	0xFF4
  9895                           prodl	equ	0xFF3
  9896                           indf0	equ	0xFEF
  9897                           postinc0	equ	0xFEE
  9898                           fsr0h	equ	0xFEA
  9899                           fsr0l	equ	0xFE9
  9900                           wreg	equ	0xFE8
  9901                           postdec1	equ	0xFE5
  9902                           fsr1l	equ	0xFE1
  9903                           indf2	equ	0xFDF
  9904                           postinc2	equ	0xFDE
  9905                           postdec2	equ	0xFDD
  9906                           fsr2h	equ	0xFDA
  9907                           fsr2l	equ	0xFD9
  9908                           status	equ	0xFD8
  9909                           
  9910 ;; *************** function _caratula *****************
  9911 ;; Defined at:
  9912 ;;		line 32 in file "main.c"
  9913 ;; Parameters:    Size  Location     Type
  9914 ;;		None
  9915 ;; Auto vars:     Size  Location     Type
  9916 ;;		None
  9917 ;; Return value:  Size  Location     Type
  9918 ;;		None               void
  9919 ;; Registers used:
  9920 ;;		wreg, status,2, status,0, cstack
  9921 ;; Tracked objects:
  9922 ;;		On entry : 0/0
  9923 ;;		On exit  : 0/0
  9924 ;;		Unchanged: 0/0
  9925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9929 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9930 ;;Total ram usage:        0 bytes
  9931 ;; Hardware stack levels used:    1
  9932 ;; Hardware stack levels required when called:    3
  9933 ;; This function calls:
  9934 ;;		_lcd_comand
  9935 ;; This function is called by:
  9936 ;;		_main
  9937 ;; This function uses a non-reentrant model
  9938 ;;
  9939                           
  9940                           	psect	text60
  9941  003A8A                     __ptext60:
  9942                           	opt stack 0
  9943  003A8A                     _caratula:
  9944                           	opt stack 27
  9945                           
  9946                           ;main.c: 34: lcd_comand(0b00001100);
  9947                           
  9948                           ; BSR set to: 15
  9949                           ;incstack = 0
  9950  003A8A  0E0C               	movlw	12
  9951  003A8C  EC35  F01D         	call	_lcd_comand
  9952  003A90  0012               	return		;funcret
  9953  003A92                     __end_of_caratula:
  9954                           	opt stack 0
  9955                           tblptru	equ	0xFF8
  9956                           tblptrh	equ	0xFF7
  9957                           tblptrl	equ	0xFF6
  9958                           tablat	equ	0xFF5
  9959                           prodh	equ	0xFF4
  9960                           prodl	equ	0xFF3
  9961                           indf0	equ	0xFEF
  9962                           postinc0	equ	0xFEE
  9963                           fsr0h	equ	0xFEA
  9964                           fsr0l	equ	0xFE9
  9965                           wreg	equ	0xFE8
  9966                           postdec1	equ	0xFE5
  9967                           fsr1l	equ	0xFE1
  9968                           indf2	equ	0xFDF
  9969                           postinc2	equ	0xFDE
  9970                           postdec2	equ	0xFDD
  9971                           fsr2h	equ	0xFDA
  9972                           fsr2l	equ	0xFD9
  9973                           status	equ	0xFD8
  9974                           
  9975 ;; *************** function _Setup *****************
  9976 ;; Defined at:
  9977 ;;		line 52 in file "main.c"
  9978 ;; Parameters:    Size  Location     Type
  9979 ;;		None
  9980 ;; Auto vars:     Size  Location     Type
  9981 ;;		None
  9982 ;; Return value:  Size  Location     Type
  9983 ;;		None               void
  9984 ;; Registers used:
  9985 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9986 ;; Tracked objects:
  9987 ;;		On entry : 0/0
  9988 ;;		On exit  : 0/0
  9989 ;;		Unchanged: 0/0
  9990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9994 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9995 ;;Total ram usage:        0 bytes
  9996 ;; Hardware stack levels used:    1
  9997 ;; Hardware stack levels required when called:    3
  9998 ;; This function calls:
  9999 ;;		_Write_RTC
 10000 ;;		_lcd_comand
 10001 ;;		_lcd_init
 10002 ;; This function is called by:
 10003 ;;		_main
 10004 ;; This function uses a non-reentrant model
 10005 ;;
 10006                           
 10007                           	psect	text61
 10008  003656                     __ptext61:
 10009                           	opt stack 0
 10010  003656                     _Setup:
 10011                           	opt stack 27
 10012                           
 10013                           ;main.c: 54: OSCTUNEbits.INTSRC=1;
 10014                           
 10015                           ;incstack = 0
 10016  003656  8E9B               	bsf	3995,7,c	;volatile
 10017                           
 10018                           ;main.c: 55: OSCTUNEbits.PLLEN=0;
 10019  003658  9C9B               	bcf	3995,6,c	;volatile
 10020                           
 10021                           ;main.c: 56: OSCCONbits.IRCF0=1;
 10022  00365A  88D3               	bsf	4051,4,c	;volatile
 10023                           
 10024                           ;main.c: 57: OSCCONbits.IRCF1=1;
 10025  00365C  8AD3               	bsf	4051,5,c	;volatile
 10026                           
 10027                           ;main.c: 58: OSCCONbits.IRCF2=1;
 10028  00365E  8CD3               	bsf	4051,6,c	;volatile
 10029                           
 10030                           ;main.c: 59: OSCCONbits.SCS0=0;
 10031  003660  90D3               	bcf	4051,0,c	;volatile
 10032                           
 10033                           ;main.c: 60: OSCCONbits.SCS1=0;
 10034  003662  92D3               	bcf	4051,1,c	;volatile
 10035                           
 10036                           ;main.c: 61: TRISA = 0b11110000;
 10037  003664  0EF0               	movlw	240
 10038  003666  6E92               	movwf	3986,c	;volatile
 10039                           
 10040                           ;main.c: 62: TRISB = 0;
 10041  003668  0E00               	movlw	0
 10042  00366A  6E93               	movwf	3987,c	;volatile
 10043                           
 10044                           ;main.c: 63: TRISC = 0b0110111;
 10045  00366C  0E37               	movlw	55
 10046  00366E  6E94               	movwf	3988,c	;volatile
 10047                           
 10048                           ;main.c: 67: ANCON0=0b11111111;
 10049  003670  010F               	movlb	15	; () banked
 10050  003672  6948               	setf	72,b	;volatile
 10051                           
 10052                           ; BSR set to: 15
 10053                           ;main.c: 69: ANCON1=0b11111111;
 10054  003674  010F               	movlb	15	; () banked
 10055  003676  6949               	setf	73,b	;volatile
 10056                           
 10057                           ;main.c: 70: ADCON0=0b00101101;
 10058  003678  0E2D               	movlw	45
 10059  00367A  6EC2               	movwf	4034,c	;volatile
 10060                           
 10061                           ;main.c: 71: ADCON1=0b00010000;
 10062  00367C  0E10               	movlw	16
 10063  00367E  6EC1               	movwf	4033,c	;volatile
 10064                           
 10065                           ; BSR set to: 15
 10066                           ;main.c: 72: RTCCFGbits.RTCEN=1;
 10067  003680  010F               	movlb	15	; () banked
 10068  003682  8F3F               	bsf	63,7,b	;volatile
 10069                           
 10070                           ; BSR set to: 15
 10071                           ;main.c: 73: RTCCFGbits.RTCWREN=1;
 10072  003684  010F               	movlb	15	; () banked
 10073  003686  8B3F               	bsf	63,5,b	;volatile
 10074                           
 10075                           ; BSR set to: 15
 10076                           ;main.c: 74: T1CONbits.T1OSCEN=1;
 10077  003688  86CD               	bsf	4045,3,c	;volatile
 10078                           
 10079                           ; BSR set to: 15
 10080                           ;main.c: 75: Write_RTC();
 10081  00368A  EC56  F00C         	call	_Write_RTC	;wreg free
 10082                           
 10083                           ;main.c: 76: lcd_init();
 10084  00368E  EC7E  F018         	call	_lcd_init	;wreg free
 10085                           
 10086                           ;main.c: 77: lcd_comand(0b00001100);
 10087  003692  0E0C               	movlw	12
 10088  003694  EC35  F01D         	call	_lcd_comand
 10089                           
 10090                           ;main.c: 78: LATBbits.LATB1 = 1;;
 10091  003698  828A               	bsf	3978,1,c	;volatile
 10092  00369A  0012               	return		;funcret
 10093  00369C                     __end_of_Setup:
 10094                           	opt stack 0
 10095                           tblptru	equ	0xFF8
 10096                           tblptrh	equ	0xFF7
 10097                           tblptrl	equ	0xFF6
 10098                           tablat	equ	0xFF5
 10099                           prodh	equ	0xFF4
 10100                           prodl	equ	0xFF3
 10101                           indf0	equ	0xFEF
 10102                           postinc0	equ	0xFEE
 10103                           fsr0h	equ	0xFEA
 10104                           fsr0l	equ	0xFE9
 10105                           wreg	equ	0xFE8
 10106                           postdec1	equ	0xFE5
 10107                           fsr1l	equ	0xFE1
 10108                           indf2	equ	0xFDF
 10109                           postinc2	equ	0xFDE
 10110                           postdec2	equ	0xFDD
 10111                           fsr2h	equ	0xFDA
 10112                           fsr2l	equ	0xFD9
 10113                           status	equ	0xFD8
 10114                           
 10115 ;; *************** function _lcd_init *****************
 10116 ;; Defined at:
 10117 ;;		line 119 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
 10118 ;; Parameters:    Size  Location     Type
 10119 ;;		None
 10120 ;; Auto vars:     Size  Location     Type
 10121 ;;  i               1    4[COMRAM] unsigned char 
 10122 ;; Return value:  Size  Location     Type
 10123 ;;		None               void
 10124 ;; Registers used:
 10125 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10126 ;; Tracked objects:
 10127 ;;		On entry : 0/0
 10128 ;;		On exit  : 0/0
 10129 ;;		Unchanged: 0/0
 10130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10132 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10134 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10135 ;;Total ram usage:        1 bytes
 10136 ;; Hardware stack levels used:    1
 10137 ;; Hardware stack levels required when called:    2
 10138 ;; This function calls:
 10139 ;;		_Delay1KTCYx
 10140 ;;		_lcd_send_byte
 10141 ;;		_lcd_send_nibble
 10142 ;; This function is called by:
 10143 ;;		_Setup
 10144 ;; This function uses a non-reentrant model
 10145 ;;
 10146                           
 10147                           	psect	text62
 10148  0030FC                     __ptext62:
 10149                           	opt stack 0
 10150  0030FC                     _lcd_init:
 10151                           	opt stack 27
 10152                           
 10153                           ;unmc_lcd_216.c: 120: int8 i;
 10154                           ;unmc_lcd_216.c: 122: TRISBbits.TRISB3=0;
 10155                           
 10156                           ;incstack = 0
 10157  0030FC  9693               	bcf	3987,3,c	;volatile
 10158                           
 10159                           ;unmc_lcd_216.c: 123: TRISBbits.TRISB2=0;
 10160  0030FE  9493               	bcf	3987,2,c	;volatile
 10161                           
 10162                           ;unmc_lcd_216.c: 128: LATBbits.LATB3=0;
 10163  003100  968A               	bcf	3978,3,c	;volatile
 10164                           
 10165                           ;unmc_lcd_216.c: 129: LATBbits.LATB2=0;
 10166  003102  948A               	bcf	3978,2,c	;volatile
 10167                           
 10168                           ;unmc_lcd_216.c: 134: TRISBbits.TRISB4=0;
 10169  003104  9893               	bcf	3987,4,c	;volatile
 10170                           
 10171                           ;unmc_lcd_216.c: 135: TRISBbits.TRISB5=0;
 10172  003106  9A93               	bcf	3987,5,c	;volatile
 10173                           
 10174                           ;unmc_lcd_216.c: 136: TRISBbits.TRISB6=0;
 10175  003108  9C93               	bcf	3987,6,c	;volatile
 10176                           
 10177                           ;unmc_lcd_216.c: 137: TRISBbits.TRISB7=0;
 10178  00310A  9E93               	bcf	3987,7,c	;volatile
 10179                           
 10180                           ;unmc_lcd_216.c: 139: Delay1KTCYx(8000000UL/800000UL);
 10181  00310C  0E0A               	movlw	10
 10182  00310E  EC12  F01D         	call	_Delay1KTCYx
 10183                           
 10184                           ;unmc_lcd_216.c: 140: Delay1KTCYx(8000000UL/800000UL);
 10185  003112  0E0A               	movlw	10
 10186  003114  EC12  F01D         	call	_Delay1KTCYx
 10187                           
 10188                           ;unmc_lcd_216.c: 141: Delay1KTCYx(8000000UL/800000UL);
 10189  003118  0E0A               	movlw	10
 10190  00311A  EC12  F01D         	call	_Delay1KTCYx
 10191                           
 10192                           ;unmc_lcd_216.c: 143: for(i=0 ;i < 3; i++){
 10193  00311E  0E00               	movlw	0
 10194  003120  6E05               	movwf	lcd_init@i,c
 10195  003122                     l4837:
 10196  003122  0E02               	movlw	2
 10197  003124  6405               	cpfsgt	lcd_init@i,c
 10198  003126  D001               	goto	l4841
 10199  003128  D008               	goto	l4847
 10200  00312A                     l4841:
 10201                           
 10202                           ;unmc_lcd_216.c: 144: lcd_send_nibble(0x03);
 10203  00312A  0E03               	movlw	3
 10204  00312C  ECFC  F018         	call	_lcd_send_nibble
 10205                           
 10206                           ;unmc_lcd_216.c: 145: Delay1KTCYx(8000000UL/800000UL);
 10207  003130  0E0A               	movlw	10
 10208  003132  EC12  F01D         	call	_Delay1KTCYx
 10209  003136  2A05               	incf	lcd_init@i,f,c
 10210  003138  D7F4               	goto	l4837
 10211  00313A                     l4847:
 10212                           
 10213                           ;unmc_lcd_216.c: 146: }
 10214                           ;unmc_lcd_216.c: 148: lcd_send_nibble(0x02);
 10215  00313A  0E02               	movlw	2
 10216  00313C  ECFC  F018         	call	_lcd_send_nibble
 10217                           
 10218                           ;unmc_lcd_216.c: 150: for(i=0; i < sizeof(LCD_INIT_STRING); i++){
 10219  003140  0E00               	movlw	0
 10220  003142  6E05               	movwf	lcd_init@i,c
 10221  003144  0E03               	movlw	3
 10222  003146  6405               	cpfsgt	lcd_init@i,c
 10223  003148  D002               	goto	l4855
 10224  00314A  0012               	return	
 10225  00314C  0012               	return	
 10226  00314E                     l4855:
 10227                           
 10228                           ;unmc_lcd_216.c: 151: lcd_send_byte(0, LCD_INIT_STRING[i]);
 10229  00314E  5005               	movf	lcd_init@i,w,c
 10230  003150  0D01               	mullw	1
 10231  003152  0E0B               	movlw	low _LCD_INIT_STRING
 10232  003154  24F3               	addwf	prodl,w,c
 10233  003156  6EF6               	movwf	tblptrl,c
 10234  003158  0E0F               	movlw	high _LCD_INIT_STRING
 10235  00315A  20F4               	addwfc	prodh,w,c
 10236  00315C  6EF7               	movwf	tblptrh,c
 10237  00315E                     	if	0	;There are less than 3 active tblptr bytes
 10238  00315E                     	endif
 10239  00315E  0008               	tblrd		*
 10240  003160  CFF5 F003          	movff	tablat,lcd_send_byte@n
 10241  003164  0E00               	movlw	0
 10242  003166  ECE9  F01B         	call	_lcd_send_byte
 10243                           
 10244                           ;unmc_lcd_216.c: 153: Delay1KTCYx(8000000UL/800000UL);
 10245  00316A  0E0A               	movlw	10
 10246  00316C  EC12  F01D         	call	_Delay1KTCYx
 10247  003170  2A05               	incf	lcd_init@i,f,c
 10248  003172  0E03               	movlw	3
 10249  003174  6405               	cpfsgt	lcd_init@i,c
 10250  003176  D7EB               	goto	l4855
 10251  003178  0012               	return	
 10252  00317A  0012               	return		;funcret
 10253  00317C                     __end_of_lcd_init:
 10254                           	opt stack 0
 10255                           tblptru	equ	0xFF8
 10256                           tblptrh	equ	0xFF7
 10257                           tblptrl	equ	0xFF6
 10258                           tablat	equ	0xFF5
 10259                           prodh	equ	0xFF4
 10260                           prodl	equ	0xFF3
 10261                           indf0	equ	0xFEF
 10262                           postinc0	equ	0xFEE
 10263                           fsr0h	equ	0xFEA
 10264                           fsr0l	equ	0xFE9
 10265                           wreg	equ	0xFE8
 10266                           postdec1	equ	0xFE5
 10267                           fsr1l	equ	0xFE1
 10268                           indf2	equ	0xFDF
 10269                           postinc2	equ	0xFDE
 10270                           postdec2	equ	0xFDD
 10271                           fsr2h	equ	0xFDA
 10272                           fsr2l	equ	0xFD9
 10273                           status	equ	0xFD8
 10274                           
 10275 ;; *************** function _Delay1KTCYx *****************
 10276 ;; Defined at:
 10277 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d1ktcyx.c"
 10278 ;; Parameters:    Size  Location     Type
 10279 ;;  unit            1    wreg     unsigned char 
 10280 ;; Auto vars:     Size  Location     Type
 10281 ;;  unit            1    0[COMRAM] unsigned char 
 10282 ;; Return value:  Size  Location     Type
 10283 ;;		None               void
 10284 ;; Registers used:
 10285 ;;		wreg
 10286 ;; Tracked objects:
 10287 ;;		On entry : 0/0
 10288 ;;		On exit  : 0/0
 10289 ;;		Unchanged: 0/0
 10290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10292 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10294 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10295 ;;Total ram usage:        1 bytes
 10296 ;; Hardware stack levels used:    1
 10297 ;; This function calls:
 10298 ;;		Nothing
 10299 ;; This function is called by:
 10300 ;;		_lcd_init
 10301 ;;		_DelayPORXLCD
 10302 ;; This function uses a non-reentrant model
 10303 ;;
 10304                           
 10305                           	psect	text63
 10306  003A24                     __ptext63:
 10307                           	opt stack 0
 10308  003A24                     _Delay1KTCYx:
 10309                           	opt stack 28
 10310                           
 10311                           ;incstack = 0
 10312                           ;Delay1KTCYx@unit stored from wreg
 10313  003A24  6E01               	movwf	Delay1KTCYx@unit,c
 10314  003A26  0EFA               	movlw	250
 10315  003A28                     u4767:
 10316  003A28  F000               	nop	
 10317  003A2A  2EE8               	decfsz	wreg,f,c
 10318  003A2C  D7FD               	goto	u4767
 10319  003A2E  2E01               	decfsz	Delay1KTCYx@unit,f,c
 10320  003A30  D7FA               	goto	l2985
 10321  003A32  0012               	return	
 10322  003A34  0012               	return		;funcret
 10323  003A36                     __end_of_Delay1KTCYx:
 10324                           	opt stack 0
 10325                           tblptru	equ	0xFF8
 10326                           tblptrh	equ	0xFF7
 10327                           tblptrl	equ	0xFF6
 10328                           tablat	equ	0xFF5
 10329                           prodh	equ	0xFF4
 10330                           prodl	equ	0xFF3
 10331                           indf0	equ	0xFEF
 10332                           postinc0	equ	0xFEE
 10333                           fsr0h	equ	0xFEA
 10334                           fsr0l	equ	0xFE9
 10335                           wreg	equ	0xFE8
 10336                           postdec1	equ	0xFE5
 10337                           fsr1l	equ	0xFE1
 10338                           indf2	equ	0xFDF
 10339                           postinc2	equ	0xFDE
 10340                           postdec2	equ	0xFDD
 10341                           fsr2h	equ	0xFDA
 10342                           fsr2l	equ	0xFD9
 10343                           status	equ	0xFD8
 10344                           
 10345 ;; *************** function _lcd_comand *****************
 10346 ;; Defined at:
 10347 ;;		line 189 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
 10348 ;; Parameters:    Size  Location     Type
 10349 ;;  d               1    wreg     unsigned char 
 10350 ;; Auto vars:     Size  Location     Type
 10351 ;;  d               1    4[COMRAM] unsigned char 
 10352 ;; Return value:  Size  Location     Type
 10353 ;;		None               void
 10354 ;; Registers used:
 10355 ;;		wreg, status,2, status,0, cstack
 10356 ;; Tracked objects:
 10357 ;;		On entry : 0/0
 10358 ;;		On exit  : 0/0
 10359 ;;		Unchanged: 0/0
 10360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10362 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10364 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10365 ;;Total ram usage:        1 bytes
 10366 ;; Hardware stack levels used:    1
 10367 ;; Hardware stack levels required when called:    2
 10368 ;; This function calls:
 10369 ;;		_lcd_send_byte
 10370 ;; This function is called by:
 10371 ;;		_caratula
 10372 ;;		_Setup
 10373 ;;		_clear
 10374 ;; This function uses a non-reentrant model
 10375 ;;
 10376                           
 10377                           	psect	text64
 10378  003A6A                     __ptext64:
 10379                           	opt stack 0
 10380  003A6A                     _lcd_comand:
 10381                           	opt stack 26
 10382                           
 10383                           ;incstack = 0
 10384                           ;lcd_comand@d stored from wreg
 10385  003A6A  6E05               	movwf	lcd_comand@d,c
 10386                           
 10387                           ;unmc_lcd_216.c: 190: lcd_send_byte(0,d);
 10388  003A6C  C005  F003         	movff	lcd_comand@d,lcd_send_byte@n
 10389  003A70  0E00               	movlw	0
 10390  003A72  ECE9  F01B         	call	_lcd_send_byte
 10391  003A76  0012               	return		;funcret
 10392  003A78                     __end_of_lcd_comand:
 10393                           	opt stack 0
 10394                           tblptru	equ	0xFF8
 10395                           tblptrh	equ	0xFF7
 10396                           tblptrl	equ	0xFF6
 10397                           tablat	equ	0xFF5
 10398                           prodh	equ	0xFF4
 10399                           prodl	equ	0xFF3
 10400                           indf0	equ	0xFEF
 10401                           postinc0	equ	0xFEE
 10402                           fsr0h	equ	0xFEA
 10403                           fsr0l	equ	0xFE9
 10404                           wreg	equ	0xFE8
 10405                           postdec1	equ	0xFE5
 10406                           fsr1l	equ	0xFE1
 10407                           indf2	equ	0xFDF
 10408                           postinc2	equ	0xFDE
 10409                           postdec2	equ	0xFDD
 10410                           fsr2h	equ	0xFDA
 10411                           fsr2l	equ	0xFD9
 10412                           status	equ	0xFD8
 10413                           
 10414 ;; *************** function _lcd_send_byte *****************
 10415 ;; Defined at:
 10416 ;;		line 86 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
 10417 ;; Parameters:    Size  Location     Type
 10418 ;;  address         1    wreg     unsigned char 
 10419 ;;  n               1    2[COMRAM] unsigned char 
 10420 ;; Auto vars:     Size  Location     Type
 10421 ;;  address         1    3[COMRAM] unsigned char 
 10422 ;; Return value:  Size  Location     Type
 10423 ;;		None               void
 10424 ;; Registers used:
 10425 ;;		wreg, status,2, status,0, cstack
 10426 ;; Tracked objects:
 10427 ;;		On entry : 0/0
 10428 ;;		On exit  : 0/0
 10429 ;;		Unchanged: 0/0
 10430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10431 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10432 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10434 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10435 ;;Total ram usage:        2 bytes
 10436 ;; Hardware stack levels used:    1
 10437 ;; Hardware stack levels required when called:    1
 10438 ;; This function calls:
 10439 ;;		_Delay100TCYx
 10440 ;;		_lcd_send_nibble
 10441 ;; This function is called by:
 10442 ;;		_lcd_init
 10443 ;;		_lcd_gotoxy
 10444 ;;		_lcd_putc
 10445 ;;		_lcd_comand
 10446 ;;		_lcd_setcursor_vb
 10447 ;; This function uses a non-reentrant model
 10448 ;;
 10449                           
 10450                           	psect	text65
 10451  0037D2                     __ptext65:
 10452                           	opt stack 0
 10453  0037D2                     _lcd_send_byte:
 10454                           	opt stack 26
 10455                           
 10456                           ;incstack = 0
 10457                           ;lcd_send_byte@address stored from wreg
 10458  0037D2  6E04               	movwf	lcd_send_byte@address,c
 10459                           
 10460                           ;unmc_lcd_216.c: 88: LATBbits.LATB3=0;
 10461  0037D4  968A               	bcf	3978,3,c	;volatile
 10462                           
 10463                           ;unmc_lcd_216.c: 93: Delay100TCYx(8000000UL/4000000UL);
 10464  0037D6  0E02               	movlw	2
 10465  0037D8  EC1B  F01D         	call	_Delay100TCYx
 10466                           
 10467                           ;unmc_lcd_216.c: 96: TRISBbits.TRISB4=0;
 10468  0037DC  9893               	bcf	3987,4,c	;volatile
 10469                           
 10470                           ;unmc_lcd_216.c: 97: TRISBbits.TRISB5=0;
 10471  0037DE  9A93               	bcf	3987,5,c	;volatile
 10472                           
 10473                           ;unmc_lcd_216.c: 98: TRISBbits.TRISB6=0;
 10474  0037E0  9C93               	bcf	3987,6,c	;volatile
 10475                           
 10476                           ;unmc_lcd_216.c: 99: TRISBbits.TRISB7=0;
 10477  0037E2  9E93               	bcf	3987,7,c	;volatile
 10478                           
 10479                           ;unmc_lcd_216.c: 101: if(address)
 10480  0037E4  5004               	movf	lcd_send_byte@address,w,c
 10481  0037E6  B4D8               	btfsc	status,2,c
 10482  0037E8  D002               	goto	l152
 10483                           
 10484                           ;unmc_lcd_216.c: 102: LATBbits.LATB3=1;
 10485  0037EA  868A               	bsf	3978,3,c	;volatile
 10486  0037EC  D001               	goto	l153
 10487  0037EE                     l152:
 10488                           
 10489                           ;unmc_lcd_216.c: 103: else
 10490                           ;unmc_lcd_216.c: 104: LATBbits.LATB3=0;
 10491  0037EE  968A               	bcf	3978,3,c	;volatile
 10492  0037F0                     l153:
 10493                           
 10494                           ;unmc_lcd_216.c: 106: __nop();
 10495  0037F0  F000               	nop	
 10496                           
 10497                           ;unmc_lcd_216.c: 113: lcd_send_nibble(n >> 4);
 10498  0037F2  3803               	swapf	lcd_send_byte@n,w,c
 10499  0037F4  0B0F               	andlw	15
 10500  0037F6  ECFC  F018         	call	_lcd_send_nibble
 10501                           
 10502                           ;unmc_lcd_216.c: 114: lcd_send_nibble(n & 0xf);
 10503  0037FA  5003               	movf	lcd_send_byte@n,w,c
 10504  0037FC  0B0F               	andlw	15
 10505  0037FE  ECFC  F018         	call	_lcd_send_nibble
 10506  003802  0012               	return		;funcret
 10507  003804                     __end_of_lcd_send_byte:
 10508                           	opt stack 0
 10509                           tblptru	equ	0xFF8
 10510                           tblptrh	equ	0xFF7
 10511                           tblptrl	equ	0xFF6
 10512                           tablat	equ	0xFF5
 10513                           prodh	equ	0xFF4
 10514                           prodl	equ	0xFF3
 10515                           indf0	equ	0xFEF
 10516                           postinc0	equ	0xFEE
 10517                           fsr0h	equ	0xFEA
 10518                           fsr0l	equ	0xFE9
 10519                           wreg	equ	0xFE8
 10520                           postdec1	equ	0xFE5
 10521                           fsr1l	equ	0xFE1
 10522                           indf2	equ	0xFDF
 10523                           postinc2	equ	0xFDE
 10524                           postdec2	equ	0xFDD
 10525                           fsr2h	equ	0xFDA
 10526                           fsr2l	equ	0xFD9
 10527                           status	equ	0xFD8
 10528                           
 10529 ;; *************** function _lcd_send_nibble *****************
 10530 ;; Defined at:
 10531 ;;		line 25 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
 10532 ;; Parameters:    Size  Location     Type
 10533 ;;  nibble          1    wreg     unsigned char 
 10534 ;; Auto vars:     Size  Location     Type
 10535 ;;  nibble          1    1[COMRAM] unsigned char 
 10536 ;; Return value:  Size  Location     Type
 10537 ;;		None               void
 10538 ;; Registers used:
 10539 ;;		wreg, status,2, status,0
 10540 ;; Tracked objects:
 10541 ;;		On entry : 0/0
 10542 ;;		On exit  : 0/0
 10543 ;;		Unchanged: 0/0
 10544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10546 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10547 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10548 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10549 ;;Total ram usage:        2 bytes
 10550 ;; Hardware stack levels used:    1
 10551 ;; This function calls:
 10552 ;;		Nothing
 10553 ;; This function is called by:
 10554 ;;		_lcd_send_byte
 10555 ;;		_lcd_init
 10556 ;; This function uses a non-reentrant model
 10557 ;;
 10558                           
 10559                           	psect	text66
 10560  0031F8                     __ptext66:
 10561                           	opt stack 0
 10562  0031F8                     _lcd_send_nibble:
 10563                           	opt stack 26
 10564                           
 10565                           ;incstack = 0
 10566                           ;lcd_send_nibble@nibble stored from wreg
 10567  0031F8  6E02               	movwf	lcd_send_nibble@nibble,c
 10568                           
 10569                           ;unmc_lcd_216.c: 27: LATBbits.LATB4=!!(nibble & 0x01);
 10570  0031FA  A002               	btfss	lcd_send_nibble@nibble,0,c
 10571  0031FC  D003               	goto	u2350
 10572  0031FE  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10573  003200  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
 10574  003202  D001               	goto	u2368
 10575  003204                     u2350:
 10576  003204  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10577  003206                     u2368:
 10578  003206  3A01               	swapf	??_lcd_send_nibble,f,c
 10579  003208  508A               	movf	3978,w,c	;volatile
 10580  00320A  1801               	xorwf	??_lcd_send_nibble,w,c
 10581  00320C  0BEF               	andlw	-17
 10582  00320E  1801               	xorwf	??_lcd_send_nibble,w,c
 10583  003210  6E8A               	movwf	3978,c	;volatile
 10584                           
 10585                           ;unmc_lcd_216.c: 28: LATBbits.LATB5=!!(nibble & 0x02);
 10586  003212  A202               	btfss	lcd_send_nibble@nibble,1,c
 10587  003214  D003               	goto	u2370
 10588  003216  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10589  003218  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
 10590  00321A  D001               	goto	u2388
 10591  00321C                     u2370:
 10592  00321C  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10593  00321E                     u2388:
 10594  00321E  3A01               	swapf	??_lcd_send_nibble,f,c
 10595  003220  4601               	rlncf	??_lcd_send_nibble,f,c
 10596  003222  508A               	movf	3978,w,c	;volatile
 10597  003224  1801               	xorwf	??_lcd_send_nibble,w,c
 10598  003226  0BDF               	andlw	-33
 10599  003228  1801               	xorwf	??_lcd_send_nibble,w,c
 10600  00322A  6E8A               	movwf	3978,c	;volatile
 10601                           
 10602                           ;unmc_lcd_216.c: 29: LATBbits.LATB6=!!(nibble & 0x04);
 10603  00322C  A402               	btfss	lcd_send_nibble@nibble,2,c
 10604  00322E  D003               	goto	u2390
 10605  003230  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10606  003232  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
 10607  003234  D001               	goto	u2408
 10608  003236                     u2390:
 10609  003236  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10610  003238                     u2408:
 10611  003238  3A01               	swapf	??_lcd_send_nibble,f,c
 10612  00323A  4601               	rlncf	??_lcd_send_nibble,f,c
 10613  00323C  4601               	rlncf	??_lcd_send_nibble,f,c
 10614  00323E  508A               	movf	3978,w,c	;volatile
 10615  003240  1801               	xorwf	??_lcd_send_nibble,w,c
 10616  003242  0BBF               	andlw	-65
 10617  003244  1801               	xorwf	??_lcd_send_nibble,w,c
 10618  003246  6E8A               	movwf	3978,c	;volatile
 10619                           
 10620                           ;unmc_lcd_216.c: 30: LATBbits.LATB7=!!(nibble & 0x08);
 10621  003248  A602               	btfss	lcd_send_nibble@nibble,3,c
 10622  00324A  D003               	goto	u2410
 10623  00324C  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10624  00324E  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
 10625  003250  D001               	goto	u2428
 10626  003252                     u2410:
 10627  003252  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10628  003254                     u2428:
 10629  003254  3201               	rrcf	??_lcd_send_nibble,f,c
 10630  003256  3201               	rrcf	??_lcd_send_nibble,f,c
 10631  003258  508A               	movf	3978,w,c	;volatile
 10632  00325A  1801               	xorwf	??_lcd_send_nibble,w,c
 10633  00325C  0B7F               	andlw	-129
 10634  00325E  1801               	xorwf	??_lcd_send_nibble,w,c
 10635  003260  6E8A               	movwf	3978,c	;volatile
 10636                           
 10637                           ;unmc_lcd_216.c: 32: __nop();
 10638  003262  F000               	nop	
 10639                           
 10640                           ;unmc_lcd_216.c: 33: LATBbits.LATB2=1;
 10641  003264  848A               	bsf	3978,2,c	;volatile
 10642                           
 10643                           ;unmc_lcd_216.c: 34: __nop();__nop();
 10644  003266  F000               	nop	
 10645  003268  F000               	nop	
 10646                           
 10647                           ;unmc_lcd_216.c: 35: LATBbits.LATB2=0;
 10648  00326A  948A               	bcf	3978,2,c	;volatile
 10649  00326C  0012               	return		;funcret
 10650  00326E                     __end_of_lcd_send_nibble:
 10651                           	opt stack 0
 10652                           tblptru	equ	0xFF8
 10653                           tblptrh	equ	0xFF7
 10654                           tblptrl	equ	0xFF6
 10655                           tablat	equ	0xFF5
 10656                           prodh	equ	0xFF4
 10657                           prodl	equ	0xFF3
 10658                           indf0	equ	0xFEF
 10659                           postinc0	equ	0xFEE
 10660                           fsr0h	equ	0xFEA
 10661                           fsr0l	equ	0xFE9
 10662                           wreg	equ	0xFE8
 10663                           postdec1	equ	0xFE5
 10664                           fsr1l	equ	0xFE1
 10665                           indf2	equ	0xFDF
 10666                           postinc2	equ	0xFDE
 10667                           postdec2	equ	0xFDD
 10668                           fsr2h	equ	0xFDA
 10669                           fsr2l	equ	0xFD9
 10670                           status	equ	0xFD8
 10671                           
 10672 ;; *************** function _Delay100TCYx *****************
 10673 ;; Defined at:
 10674 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d100tcyx.c"
 10675 ;; Parameters:    Size  Location     Type
 10676 ;;  unit            1    wreg     unsigned char 
 10677 ;; Auto vars:     Size  Location     Type
 10678 ;;  unit            1    0[COMRAM] unsigned char 
 10679 ;; Return value:  Size  Location     Type
 10680 ;;                  2  140[None  ] int 
 10681 ;; Registers used:
 10682 ;;		wreg
 10683 ;; Tracked objects:
 10684 ;;		On entry : 0/0
 10685 ;;		On exit  : 0/0
 10686 ;;		Unchanged: 0/0
 10687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10689 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10691 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10692 ;;Total ram usage:        1 bytes
 10693 ;; Hardware stack levels used:    1
 10694 ;; This function calls:
 10695 ;;		Nothing
 10696 ;; This function is called by:
 10697 ;;		_lcd_send_byte
 10698 ;; This function uses a non-reentrant model
 10699 ;;
 10700                           
 10701                           	psect	text67
 10702  003A36                     __ptext67:
 10703                           	opt stack 0
 10704  003A36                     _Delay100TCYx:
 10705                           	opt stack 26
 10706                           
 10707                           ;incstack = 0
 10708                           ;Delay100TCYx@unit stored from wreg
 10709  003A36  6E01               	movwf	Delay100TCYx@unit,c
 10710  003A38  0E21               	movlw	33
 10711  003A3A                     u4777:
 10712  003A3A  2EE8               	decfsz	wreg,f,c
 10713  003A3C  D7FE               	goto	u4777
 10714  003A3E  F000               	nop	
 10715  003A40  2E01               	decfsz	Delay100TCYx@unit,f,c
 10716  003A42  D7FA               	goto	l3479
 10717  003A44  0012               	return	
 10718  003A46  0012               	return		;funcret
 10719  003A48                     __end_of_Delay100TCYx:
 10720                           	opt stack 0
 10721                           tblptru	equ	0xFF8
 10722                           tblptrh	equ	0xFF7
 10723                           tblptrl	equ	0xFF6
 10724                           tablat	equ	0xFF5
 10725                           prodh	equ	0xFF4
 10726                           prodl	equ	0xFF3
 10727                           indf0	equ	0xFEF
 10728                           postinc0	equ	0xFEE
 10729                           fsr0h	equ	0xFEA
 10730                           fsr0l	equ	0xFE9
 10731                           wreg	equ	0xFE8
 10732                           postdec1	equ	0xFE5
 10733                           fsr1l	equ	0xFE1
 10734                           indf2	equ	0xFDF
 10735                           postinc2	equ	0xFDE
 10736                           postdec2	equ	0xFDD
 10737                           fsr2h	equ	0xFDA
 10738                           fsr2l	equ	0xFD9
 10739                           status	equ	0xFD8
 10740                           
 10741 ;; *************** function _Write_RTC *****************
 10742 ;; Defined at:
 10743 ;;		line 22 in file "Unimic/sources/unmc_rtcc_01.c"
 10744 ;; Parameters:    Size  Location     Type
 10745 ;;		None
 10746 ;; Auto vars:     Size  Location     Type
 10747 ;;		None
 10748 ;; Return value:  Size  Location     Type
 10749 ;;                  2   26[None  ] int 
 10750 ;; Registers used:
 10751 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10752 ;; Tracked objects:
 10753 ;;		On entry : 0/0
 10754 ;;		On exit  : 0/0
 10755 ;;		Unchanged: 0/0
 10756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10760 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10761 ;;Total ram usage:        0 bytes
 10762 ;; Hardware stack levels used:    1
 10763 ;; Hardware stack levels required when called:    2
 10764 ;; This function calls:
 10765 ;;		_RtccWrOn
 10766 ;;		_RtccWriteDate
 10767 ;;		_RtccWriteTime
 10768 ;;		___awdiv
 10769 ;; This function is called by:
 10770 ;;		_Setup
 10771 ;;		_setClock
 10772 ;; This function uses a non-reentrant model
 10773 ;;
 10774                           
 10775                           	psect	text68
 10776  0018AC                     __ptext68:
 10777                           	opt stack 0
 10778  0018AC                     _Write_RTC:
 10779                           	opt stack 25
 10780                           
 10781                           ;unmc_rtcc_01.c: 24: RtccWrOn();
 10782                           
 10783                           ;incstack = 0
 10784  0018AC  EC24  F01D         	call	_RtccWrOn	;wreg free
 10785                           
 10786                           ;unmc_rtcc_01.c: 26: PIE3bits.RTCCIE=1;
 10787  0018B0  80A3               	bsf	4003,0,c	;volatile
 10788                           
 10789                           ;unmc_rtcc_01.c: 27: segundo_d=segundo/10;
 10790  0018B2  C094  F001         	movff	_segundo,___awdiv@dividend
 10791  0018B6  C095  F002         	movff	_segundo+1,___awdiv@dividend+1
 10792  0018BA  0E00               	movlw	0
 10793  0018BC  6E04               	movwf	___awdiv@divisor+1,c
 10794  0018BE  0E0A               	movlw	10
 10795  0018C0  6E03               	movwf	___awdiv@divisor,c
 10796  0018C2  EC8D  F016         	call	___awdiv	;wreg free
 10797  0018C6  5001               	movf	?___awdiv,w,c
 10798  0018C8  0100               	movlb	0	; () banked
 10799  0018CA  6FE5               	movwf	_segundo_d& (0+255),b
 10800                           
 10801                           ; BSR set to: 0
 10802                           ;unmc_rtcc_01.c: 28: segundo_u=segundo-segundo_d*10;
 10803  0018CC  0100               	movlb	0	; () banked
 10804  0018CE  51E5               	movf	_segundo_d& (0+255),w,b
 10805  0018D0  0D0A               	mullw	10
 10806  0018D2  50F3               	movf	prodl,w,c
 10807  0018D4  0800               	sublw	0
 10808  0018D6  0100               	movlb	0	; () banked
 10809  0018D8  2594               	addwf	_segundo& (0+255),w,b
 10810  0018DA  0100               	movlb	0	; () banked
 10811  0018DC  6FE6               	movwf	_segundo_u& (0+255),b
 10812                           
 10813                           ; BSR set to: 0
 10814                           ;unmc_rtcc_01.c: 29: RtccTime.f.sec =segundo_d*16+segundo_u;
 10815  0018DE  0100               	movlb	0	; () banked
 10816  0018E0  51E5               	movf	_segundo_d& (0+255),w,b
 10817  0018E2  0D10               	mullw	16
 10818  0018E4  50F3               	movf	prodl,w,c
 10819  0018E6  0100               	movlb	0	; () banked
 10820  0018E8  25E6               	addwf	_segundo_u& (0+255),w,b
 10821  0018EA  0100               	movlb	0	; () banked
 10822  0018EC  6FB1               	movwf	(_RtccTime+1)& (0+255),b
 10823                           
 10824                           ; BSR set to: 0
 10825                           ;unmc_rtcc_01.c: 30: minuto_d=minuto/10;
 10826  0018EE  C0D4  F001         	movff	_minuto,___awdiv@dividend
 10827  0018F2  C0D5  F002         	movff	_minuto+1,___awdiv@dividend+1
 10828  0018F6  0E00               	movlw	0
 10829  0018F8  6E04               	movwf	___awdiv@divisor+1,c
 10830  0018FA  0E0A               	movlw	10
 10831  0018FC  6E03               	movwf	___awdiv@divisor,c
 10832  0018FE  EC8D  F016         	call	___awdiv	;wreg free
 10833  001902  5001               	movf	?___awdiv,w,c
 10834  001904  0100               	movlb	0	; () banked
 10835  001906  6FE3               	movwf	_minuto_d& (0+255),b
 10836                           
 10837                           ; BSR set to: 0
 10838                           ;unmc_rtcc_01.c: 31: minuto_u=minuto-minuto_d*10;
 10839  001908  0100               	movlb	0	; () banked
 10840  00190A  51E3               	movf	_minuto_d& (0+255),w,b
 10841  00190C  0D0A               	mullw	10
 10842  00190E  50F3               	movf	prodl,w,c
 10843  001910  0800               	sublw	0
 10844  001912  0100               	movlb	0	; () banked
 10845  001914  25D4               	addwf	_minuto& (0+255),w,b
 10846  001916  0100               	movlb	0	; () banked
 10847  001918  6FE4               	movwf	_minuto_u& (0+255),b
 10848                           
 10849                           ; BSR set to: 0
 10850                           ;unmc_rtcc_01.c: 32: RtccTime.f.min =minuto_d*16+minuto_u;
 10851  00191A  0100               	movlb	0	; () banked
 10852  00191C  51E3               	movf	_minuto_d& (0+255),w,b
 10853  00191E  0D10               	mullw	16
 10854  001920  50F3               	movf	prodl,w,c
 10855  001922  0100               	movlb	0	; () banked
 10856  001924  25E4               	addwf	_minuto_u& (0+255),w,b
 10857  001926  0100               	movlb	0	; () banked
 10858  001928  6FB2               	movwf	(_RtccTime+2)& (0+255),b
 10859                           
 10860                           ; BSR set to: 0
 10861                           ;unmc_rtcc_01.c: 33: hora_d=hora/10;
 10862  00192A  C0D0  F001         	movff	_hora,___awdiv@dividend
 10863  00192E  C0D1  F002         	movff	_hora+1,___awdiv@dividend+1
 10864  001932  0E00               	movlw	0
 10865  001934  6E04               	movwf	___awdiv@divisor+1,c
 10866  001936  0E0A               	movlw	10
 10867  001938  6E03               	movwf	___awdiv@divisor,c
 10868  00193A  EC8D  F016         	call	___awdiv	;wreg free
 10869  00193E  5001               	movf	?___awdiv,w,c
 10870  001940  0100               	movlb	0	; () banked
 10871  001942  6FDF               	movwf	_hora_d& (0+255),b
 10872                           
 10873                           ; BSR set to: 0
 10874                           ;unmc_rtcc_01.c: 34: hora_u=hora-hora_d*10;
 10875  001944  0100               	movlb	0	; () banked
 10876  001946  51DF               	movf	_hora_d& (0+255),w,b
 10877  001948  0D0A               	mullw	10
 10878  00194A  50F3               	movf	prodl,w,c
 10879  00194C  0800               	sublw	0
 10880  00194E  0100               	movlb	0	; () banked
 10881  001950  25D0               	addwf	_hora& (0+255),w,b
 10882  001952  0100               	movlb	0	; () banked
 10883  001954  6FE0               	movwf	_hora_u& (0+255),b
 10884                           
 10885                           ; BSR set to: 0
 10886                           ;unmc_rtcc_01.c: 35: RtccTime.f.hour=hora_d*16+hora_u;
 10887  001956  0100               	movlb	0	; () banked
 10888  001958  51DF               	movf	_hora_d& (0+255),w,b
 10889  00195A  0D10               	mullw	16
 10890  00195C  50F3               	movf	prodl,w,c
 10891  00195E  0100               	movlb	0	; () banked
 10892  001960  25E0               	addwf	_hora_u& (0+255),w,b
 10893  001962  0100               	movlb	0	; () banked
 10894  001964  6FB3               	movwf	(_RtccTime+3)& (0+255),b
 10895                           
 10896                           ; BSR set to: 0
 10897                           ;unmc_rtcc_01.c: 36: anio_d=anio/10;
 10898  001966  C0CA  F001         	movff	_anio,___awdiv@dividend
 10899  00196A  C0CB  F002         	movff	_anio+1,___awdiv@dividend+1
 10900  00196E  0E00               	movlw	0
 10901  001970  6E04               	movwf	___awdiv@divisor+1,c
 10902  001972  0E0A               	movlw	10
 10903  001974  6E03               	movwf	___awdiv@divisor,c
 10904  001976  EC8D  F016         	call	___awdiv	;wreg free
 10905  00197A  5001               	movf	?___awdiv,w,c
 10906  00197C  0100               	movlb	0	; () banked
 10907  00197E  6FDA               	movwf	_anio_d& (0+255),b
 10908                           
 10909                           ; BSR set to: 0
 10910                           ;unmc_rtcc_01.c: 37: anio_u=anio-anio_d*10;
 10911  001980  0100               	movlb	0	; () banked
 10912  001982  51DA               	movf	_anio_d& (0+255),w,b
 10913  001984  0D0A               	mullw	10
 10914  001986  50F3               	movf	prodl,w,c
 10915  001988  0800               	sublw	0
 10916  00198A  0100               	movlb	0	; () banked
 10917  00198C  25CA               	addwf	_anio& (0+255),w,b
 10918  00198E  0100               	movlb	0	; () banked
 10919  001990  6FDB               	movwf	_anio_u& (0+255),b
 10920                           
 10921                           ; BSR set to: 0
 10922                           ;unmc_rtcc_01.c: 38: RtccDate.f.year=anio_d*16+anio_u;
 10923  001992  0100               	movlb	0	; () banked
 10924  001994  51DA               	movf	_anio_d& (0+255),w,b
 10925  001996  0D10               	mullw	16
 10926  001998  50F3               	movf	prodl,w,c
 10927  00199A  0100               	movlb	0	; () banked
 10928  00199C  25DB               	addwf	_anio_u& (0+255),w,b
 10929  00199E  0100               	movlb	0	; () banked
 10930  0019A0  6FAF               	movwf	(_RtccDate+3)& (0+255),b
 10931                           
 10932                           ; BSR set to: 0
 10933                           ;unmc_rtcc_01.c: 39: mes_d=mes/10;
 10934  0019A2  C0D2  F001         	movff	_mes,___awdiv@dividend
 10935  0019A6  C0D3  F002         	movff	_mes+1,___awdiv@dividend+1
 10936  0019AA  0E00               	movlw	0
 10937  0019AC  6E04               	movwf	___awdiv@divisor+1,c
 10938  0019AE  0E0A               	movlw	10
 10939  0019B0  6E03               	movwf	___awdiv@divisor,c
 10940  0019B2  EC8D  F016         	call	___awdiv	;wreg free
 10941  0019B6  5001               	movf	?___awdiv,w,c
 10942  0019B8  0100               	movlb	0	; () banked
 10943  0019BA  6FE1               	movwf	_mes_d& (0+255),b
 10944                           
 10945                           ; BSR set to: 0
 10946                           ;unmc_rtcc_01.c: 40: mes_u=mes-mes_d*10;
 10947  0019BC  0100               	movlb	0	; () banked
 10948  0019BE  51E1               	movf	_mes_d& (0+255),w,b
 10949  0019C0  0D0A               	mullw	10
 10950  0019C2  50F3               	movf	prodl,w,c
 10951  0019C4  0800               	sublw	0
 10952  0019C6  0100               	movlb	0	; () banked
 10953  0019C8  25D2               	addwf	_mes& (0+255),w,b
 10954  0019CA  0100               	movlb	0	; () banked
 10955  0019CC  6FE2               	movwf	_mes_u& (0+255),b
 10956                           
 10957                           ; BSR set to: 0
 10958                           ;unmc_rtcc_01.c: 41: RtccDate.f.mon=mes_d*16+mes_u;
 10959  0019CE  0100               	movlb	0	; () banked
 10960  0019D0  51E1               	movf	_mes_d& (0+255),w,b
 10961  0019D2  0D10               	mullw	16
 10962  0019D4  50F3               	movf	prodl,w,c
 10963  0019D6  0100               	movlb	0	; () banked
 10964  0019D8  25E2               	addwf	_mes_u& (0+255),w,b
 10965  0019DA  0100               	movlb	0	; () banked
 10966  0019DC  6FAE               	movwf	(_RtccDate+2)& (0+255),b
 10967                           
 10968                           ; BSR set to: 0
 10969                           ;unmc_rtcc_01.c: 42: fecha_d=dia/10;
 10970  0019DE  C0CC  F001         	movff	_dia,___awdiv@dividend
 10971  0019E2  C0CD  F002         	movff	_dia+1,___awdiv@dividend+1
 10972  0019E6  0E00               	movlw	0
 10973  0019E8  6E04               	movwf	___awdiv@divisor+1,c
 10974  0019EA  0E0A               	movlw	10
 10975  0019EC  6E03               	movwf	___awdiv@divisor,c
 10976  0019EE  EC8D  F016         	call	___awdiv	;wreg free
 10977  0019F2  5001               	movf	?___awdiv,w,c
 10978  0019F4  0100               	movlb	0	; () banked
 10979  0019F6  6FDD               	movwf	_fecha_d& (0+255),b
 10980                           
 10981                           ; BSR set to: 0
 10982                           ;unmc_rtcc_01.c: 43: fecha_u=dia-fecha_d*10;
 10983  0019F8  0100               	movlb	0	; () banked
 10984  0019FA  51DD               	movf	_fecha_d& (0+255),w,b
 10985  0019FC  0D0A               	mullw	10
 10986  0019FE  50F3               	movf	prodl,w,c
 10987  001A00  0800               	sublw	0
 10988  001A02  0100               	movlb	0	; () banked
 10989  001A04  25CC               	addwf	_dia& (0+255),w,b
 10990  001A06  0100               	movlb	0	; () banked
 10991  001A08  6FDE               	movwf	_fecha_u& (0+255),b
 10992                           
 10993                           ; BSR set to: 0
 10994                           ;unmc_rtcc_01.c: 44: RtccDate.f.mday=fecha_d*16+fecha_u;
 10995  001A0A  0100               	movlb	0	; () banked
 10996  001A0C  51DD               	movf	_fecha_d& (0+255),w,b
 10997  001A0E  0D10               	mullw	16
 10998  001A10  50F3               	movf	prodl,w,c
 10999  001A12  0100               	movlb	0	; () banked
 11000  001A14  25DE               	addwf	_fecha_u& (0+255),w,b
 11001  001A16  0100               	movlb	0	; () banked
 11002  001A18  6FAD               	movwf	(_RtccDate+1)& (0+255),b
 11003                           
 11004                           ; BSR set to: 0
 11005                           ;unmc_rtcc_01.c: 45: dia_semana=diasem;
 11006  001A1A  C0CE  F0DC         	movff	_diasem,_dia_semana
 11007                           
 11008                           ; BSR set to: 0
 11009                           ;unmc_rtcc_01.c: 46: RtccDate.f.wday =diasem;
 11010  001A1E  C0CE  F0AC         	movff	_diasem,_RtccDate
 11011                           
 11012                           ; BSR set to: 0
 11013                           ;unmc_rtcc_01.c: 47: RtccWriteTime(&RtccTime,1);
 11014  001A22  0EB0               	movlw	low _RtccTime
 11015  001A24  6E01               	movwf	RtccWriteTime@pTm,c
 11016  001A26  0E00               	movlw	high _RtccTime
 11017  001A28  6E02               	movwf	RtccWriteTime@pTm+1,c
 11018  001A2A  0E01               	movlw	1
 11019  001A2C  6E03               	movwf	RtccWriteTime@di,c
 11020  001A2E  ECFC  F010         	call	_RtccWriteTime	;wreg free
 11021                           
 11022                           ;unmc_rtcc_01.c: 48: RtccWriteDate(&RtccDate,1);
 11023  001A32  0EAC               	movlw	low _RtccDate
 11024  001A34  6E01               	movwf	RtccWriteDate@pDt,c
 11025  001A36  0E00               	movlw	high _RtccDate
 11026  001A38  6E02               	movwf	RtccWriteDate@pDt+1,c
 11027  001A3A  0E01               	movlw	1
 11028  001A3C  6E03               	movwf	RtccWriteDate@di,c
 11029  001A3E  EC2C  F00F         	call	_RtccWriteDate	;wreg free
 11030                           
 11031                           ;unmc_rtcc_01.c: 49: (RTCCFGbits.RTCEN=1);
 11032  001A42  010F               	movlb	15	; () banked
 11033  001A44  8F3F               	bsf	63,7,b	;volatile
 11034                           
 11035                           ; BSR set to: 15
 11036  001A46  0012               	return		;funcret
 11037  001A48                     __end_of_Write_RTC:
 11038                           	opt stack 0
 11039                           tblptru	equ	0xFF8
 11040                           tblptrh	equ	0xFF7
 11041                           tblptrl	equ	0xFF6
 11042                           tablat	equ	0xFF5
 11043                           prodh	equ	0xFF4
 11044                           prodl	equ	0xFF3
 11045                           indf0	equ	0xFEF
 11046                           postinc0	equ	0xFEE
 11047                           fsr0h	equ	0xFEA
 11048                           fsr0l	equ	0xFE9
 11049                           wreg	equ	0xFE8
 11050                           postdec1	equ	0xFE5
 11051                           fsr1l	equ	0xFE1
 11052                           indf2	equ	0xFDF
 11053                           postinc2	equ	0xFDE
 11054                           postdec2	equ	0xFDD
 11055                           fsr2h	equ	0xFDA
 11056                           fsr2l	equ	0xFD9
 11057                           status	equ	0xFD8
 11058                           
 11059 ;; *************** function ___awdiv *****************
 11060 ;; Defined at:
 11061 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
 11062 ;; Parameters:    Size  Location     Type
 11063 ;;  dividend        2    0[COMRAM] int 
 11064 ;;  divisor         2    2[COMRAM] int 
 11065 ;; Auto vars:     Size  Location     Type
 11066 ;;  quotient        2    6[COMRAM] int 
 11067 ;;  sign            1    5[COMRAM] unsigned char 
 11068 ;;  counter         1    4[COMRAM] unsigned char 
 11069 ;; Return value:  Size  Location     Type
 11070 ;;                  2    0[COMRAM] int 
 11071 ;; Registers used:
 11072 ;;		wreg, status,2, status,0
 11073 ;; Tracked objects:
 11074 ;;		On entry : 0/0
 11075 ;;		On exit  : 0/0
 11076 ;;		Unchanged: 0/0
 11077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11078 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11079 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11081 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11082 ;;Total ram usage:        8 bytes
 11083 ;; Hardware stack levels used:    1
 11084 ;; This function calls:
 11085 ;;		Nothing
 11086 ;; This function is called by:
 11087 ;;		__delay_s
 11088 ;;		_Write_RTC
 11089 ;; This function uses a non-reentrant model
 11090 ;;
 11091                           
 11092                           	psect	text69
 11093  002D1A                     __ptext69:
 11094                           	opt stack 0
 11095  002D1A                     ___awdiv:
 11096                           	opt stack 27
 11097                           
 11098                           ; BSR set to: 15
 11099                           ;incstack = 0
 11100  002D1A  0E00               	movlw	0
 11101  002D1C  6E06               	movwf	___awdiv@sign,c
 11102  002D1E  AE04               	btfss	___awdiv@divisor+1,7,c
 11103  002D20  D007               	goto	l4225
 11104  002D22  6C03               	negf	___awdiv@divisor,c
 11105  002D24  1E04               	comf	___awdiv@divisor+1,f,c
 11106  002D26  B0D8               	btfsc	status,0,c
 11107  002D28  2A04               	incf	___awdiv@divisor+1,f,c
 11108  002D2A  0E01               	movlw	1
 11109  002D2C  6E06               	movwf	___awdiv@sign,c
 11110  002D2E  D000               	goto	l4225
 11111  002D30                     l4225:
 11112  002D30  AE02               	btfss	___awdiv@dividend+1,7,c
 11113  002D32  D007               	goto	l4231
 11114  002D34  6C01               	negf	___awdiv@dividend,c
 11115  002D36  1E02               	comf	___awdiv@dividend+1,f,c
 11116  002D38  B0D8               	btfsc	status,0,c
 11117  002D3A  2A02               	incf	___awdiv@dividend+1,f,c
 11118  002D3C  0E01               	movlw	1
 11119  002D3E  1A06               	xorwf	___awdiv@sign,f,c
 11120  002D40  D000               	goto	l4231
 11121  002D42                     l4231:
 11122  002D42  0E00               	movlw	0
 11123  002D44  6E08               	movwf	___awdiv@quotient+1,c
 11124  002D46  0E00               	movlw	0
 11125  002D48  6E07               	movwf	___awdiv@quotient,c
 11126  002D4A  5003               	movf	___awdiv@divisor,w,c
 11127  002D4C  1004               	iorwf	___awdiv@divisor+1,w,c
 11128  002D4E  B4D8               	btfsc	status,2,c
 11129  002D50  D021               	goto	l4253
 11130  002D52  0E01               	movlw	1
 11131  002D54  6E05               	movwf	___awdiv@counter,c
 11132  002D56  D005               	goto	l4239
 11133  002D58                     l4237:
 11134  002D58  90D8               	bcf	status,0,c
 11135  002D5A  3603               	rlcf	___awdiv@divisor,f,c
 11136  002D5C  3604               	rlcf	___awdiv@divisor+1,f,c
 11137  002D5E  2A05               	incf	___awdiv@counter,f,c
 11138  002D60  D000               	goto	l4239
 11139  002D62                     l4239:
 11140  002D62  BE04               	btfsc	___awdiv@divisor+1,7,c
 11141  002D64  D002               	goto	l4241
 11142  002D66  D7F8               	goto	l4237
 11143  002D68  D000               	goto	l4241
 11144  002D6A                     l4241:
 11145  002D6A  90D8               	bcf	status,0,c
 11146  002D6C  3607               	rlcf	___awdiv@quotient,f,c
 11147  002D6E  3608               	rlcf	___awdiv@quotient+1,f,c
 11148  002D70  5003               	movf	___awdiv@divisor,w,c
 11149  002D72  5C01               	subwf	___awdiv@dividend,w,c
 11150  002D74  5004               	movf	___awdiv@divisor+1,w,c
 11151  002D76  5802               	subwfb	___awdiv@dividend+1,w,c
 11152  002D78  A0D8               	btfss	status,0,c
 11153  002D7A  D006               	goto	l4249
 11154  002D7C  5003               	movf	___awdiv@divisor,w,c
 11155  002D7E  5E01               	subwf	___awdiv@dividend,f,c
 11156  002D80  5004               	movf	___awdiv@divisor+1,w,c
 11157  002D82  5A02               	subwfb	___awdiv@dividend+1,f,c
 11158  002D84  8007               	bsf	___awdiv@quotient,0,c
 11159  002D86  D000               	goto	l4249
 11160  002D88                     l4249:
 11161  002D88  90D8               	bcf	status,0,c
 11162  002D8A  3204               	rrcf	___awdiv@divisor+1,f,c
 11163  002D8C  3203               	rrcf	___awdiv@divisor,f,c
 11164  002D8E  2E05               	decfsz	___awdiv@counter,f,c
 11165  002D90  D7EC               	goto	l4241
 11166  002D92  D000               	goto	l4253
 11167  002D94                     l4253:
 11168  002D94  5006               	movf	___awdiv@sign,w,c
 11169  002D96  B4D8               	btfsc	status,2,c
 11170  002D98  D005               	goto	l4257
 11171  002D9A  6C07               	negf	___awdiv@quotient,c
 11172  002D9C  1E08               	comf	___awdiv@quotient+1,f,c
 11173  002D9E  B0D8               	btfsc	status,0,c
 11174  002DA0  2A08               	incf	___awdiv@quotient+1,f,c
 11175  002DA2  D000               	goto	l4257
 11176  002DA4                     l4257:
 11177  002DA4  C007  F001         	movff	___awdiv@quotient,?___awdiv
 11178  002DA8  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
 11179  002DAC  0012               	return	
 11180  002DAE  0012               	return		;funcret
 11181  002DB0                     __end_of___awdiv:
 11182                           	opt stack 0
 11183                           tblptru	equ	0xFF8
 11184                           tblptrh	equ	0xFF7
 11185                           tblptrl	equ	0xFF6
 11186                           tablat	equ	0xFF5
 11187                           prodh	equ	0xFF4
 11188                           prodl	equ	0xFF3
 11189                           indf0	equ	0xFEF
 11190                           postinc0	equ	0xFEE
 11191                           fsr0h	equ	0xFEA
 11192                           fsr0l	equ	0xFE9
 11193                           wreg	equ	0xFE8
 11194                           postdec1	equ	0xFE5
 11195                           fsr1l	equ	0xFE1
 11196                           indf2	equ	0xFDF
 11197                           postinc2	equ	0xFDE
 11198                           postdec2	equ	0xFDD
 11199                           fsr2h	equ	0xFDA
 11200                           fsr2l	equ	0xFD9
 11201                           status	equ	0xFD8
 11202                           
 11203 ;; *************** function _RtccWriteTime *****************
 11204 ;; Defined at:
 11205 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteTime.c"
 11206 ;; Parameters:    Size  Location     Type
 11207 ;;  pTm             2    0[COMRAM] PTR const struct .
 11208 ;;		 -> RtccTime(4), 
 11209 ;;  di              1    2[COMRAM] enum E7121
 11210 ;; Auto vars:     Size  Location     Type
 11211 ;;  tempHourWDay    2    9[COMRAM] struct .
 11212 ;;  tempMinSec      2    7[COMRAM] struct .
 11213 ;;  wasWrEn         1    6[COMRAM] enum E7121
 11214 ;;  wasAlrm         1    5[COMRAM] enum E7121
 11215 ;;  wasOn           1    4[COMRAM] enum E7121
 11216 ;; Return value:  Size  Location     Type
 11217 ;;                  1    wreg      enum E7121
 11218 ;; Registers used:
 11219 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11220 ;; Tracked objects:
 11221 ;;		On entry : 0/0
 11222 ;;		On exit  : 0/0
 11223 ;;		Unchanged: 0/0
 11224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11225 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11226 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11227 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11228 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11229 ;;Total ram usage:       11 bytes
 11230 ;; Hardware stack levels used:    1
 11231 ;; Hardware stack levels required when called:    1
 11232 ;; This function calls:
 11233 ;;		_RtccWrOn
 11234 ;; This function is called by:
 11235 ;;		_Write_RTC
 11236 ;; This function uses a non-reentrant model
 11237 ;;
 11238                           
 11239                           	psect	text70
 11240  0021F8                     __ptext70:
 11241                           	opt stack 0
 11242  0021F8                     _RtccWriteTime:
 11243                           	opt stack 25
 11244                           
 11245                           ;incstack = 0
 11246  0021F8  0E00               	movlw	0
 11247  0021FA  6E06               	movwf	RtccWriteTime@wasAlrm,c
 11248  0021FC  EE20 F002          	lfsr	2,2
 11249  002200  5001               	movf	RtccWriteTime@pTm,w,c
 11250  002202  26D9               	addwf	fsr2l,f,c
 11251  002204  5002               	movf	RtccWriteTime@pTm+1,w,c
 11252  002206  22DA               	addwfc	fsr2h,f,c
 11253  002208  0E5A               	movlw	90
 11254  00220A  60DF               	cpfslt	indf2,c
 11255  00220C  0012               	return	
 11256  00220E  EE20 F001          	lfsr	2,1
 11257  002212  5001               	movf	RtccWriteTime@pTm,w,c
 11258  002214  26D9               	addwf	fsr2l,f,c
 11259  002216  5002               	movf	RtccWriteTime@pTm+1,w,c
 11260  002218  22DA               	addwfc	fsr2h,f,c
 11261  00221A  0E5A               	movlw	90
 11262  00221C  60DF               	cpfslt	indf2,c
 11263  00221E  0012               	return	
 11264  002220  EE20 F003          	lfsr	2,3
 11265  002224  5001               	movf	RtccWriteTime@pTm,w,c
 11266  002226  26D9               	addwf	fsr2l,f,c
 11267  002228  5002               	movf	RtccWriteTime@pTm+1,w,c
 11268  00222A  22DA               	addwfc	fsr2h,f,c
 11269  00222C  0E24               	movlw	36
 11270  00222E  64DF               	cpfsgt	indf2,c
 11271  002230  D002               	goto	l4089
 11272  002232  0012               	return	
 11273                           
 11274                           ;	Return value of _RtccWriteTime is never used
 11275  002234  0012               	return	
 11276  002236                     l4089:
 11277  002236  EE20 F002          	lfsr	2,2
 11278  00223A  5001               	movf	RtccWriteTime@pTm,w,c
 11279  00223C  26D9               	addwf	fsr2l,f,c
 11280  00223E  5002               	movf	RtccWriteTime@pTm+1,w,c
 11281  002240  22DA               	addwfc	fsr2h,f,c
 11282  002242  50DF               	movf	indf2,w,c
 11283  002244  6E09               	movwf	RtccWriteTime@tempMinSec+1,c
 11284  002246  EE20 F001          	lfsr	2,1
 11285  00224A  5001               	movf	RtccWriteTime@pTm,w,c
 11286  00224C  26D9               	addwf	fsr2l,f,c
 11287  00224E  5002               	movf	RtccWriteTime@pTm+1,w,c
 11288  002250  22DA               	addwfc	fsr2h,f,c
 11289  002252  50DF               	movf	indf2,w,c
 11290  002254  6E08               	movwf	RtccWriteTime@tempMinSec,c
 11291  002256  5003               	movf	RtccWriteTime@di,w,c
 11292  002258  B4D8               	btfsc	status,2,c
 11293  00225A  D002               	goto	l4095
 11294  00225C  9CF2               	bcf	intcon,6,c	;volatile
 11295  00225E  D000               	goto	l4095
 11296  002260                     l4095:
 11297  002260  0E00               	movlw	0
 11298  002262  BB3F               	btfsc	63,5,b	;volatile
 11299  002264  0E01               	movlw	1
 11300  002266  6E07               	movwf	RtccWriteTime@wasWrEn,c
 11301  002268  5007               	movf	RtccWriteTime@wasWrEn,w,c
 11302  00226A  A4D8               	btfss	status,2,c
 11303  00226C  D003               	goto	l4099
 11304  00226E  EC24  F01D         	call	_RtccWrOn	;wreg free
 11305  002272  D000               	goto	l4099
 11306  002274                     l4099:
 11307  002274  0E00               	movlw	0
 11308  002276  BF3F               	btfsc	63,7,b	;volatile
 11309  002278  0E01               	movlw	1
 11310  00227A  6E05               	movwf	RtccWriteTime@wasOn,c
 11311  00227C  5005               	movf	RtccWriteTime@wasOn,w,c
 11312  00227E  B4D8               	btfsc	status,2,c
 11313  002280  D007               	goto	l4105
 11314  002282  0E00               	movlw	0
 11315  002284  BE91               	btfsc	3985,7,c	;volatile
 11316  002286  0E01               	movlw	1
 11317  002288  6E06               	movwf	RtccWriteTime@wasAlrm,c
 11318  00228A  010F               	movlb	15	; () banked
 11319  00228C  9F3F               	bcf	63,7,b	;volatile
 11320  00228E  D000               	goto	l4105
 11321  002290                     l4105:
 11322  002290  0EFC               	movlw	252
 11323  002292  010F               	movlb	15	; () banked
 11324  002294  173F               	andwf	63,f,b	;volatile
 11325  002296  010F               	movlb	15	; () banked
 11326  002298  813F               	bsf	63,0,b	;volatile
 11327                           
 11328                           ; BSR set to: 15
 11329  00229A  CF98 F00A          	movff	3992,RtccWriteTime@tempHourWDay	;volatile
 11330                           
 11331                           ; BSR set to: 15
 11332  00229E  CF99 F00B          	movff	3993,RtccWriteTime@tempHourWDay+1	;volatile
 11333                           
 11334                           ; BSR set to: 15
 11335  0022A2  EE20 F003          	lfsr	2,3
 11336  0022A6  5001               	movf	RtccWriteTime@pTm,w,c
 11337  0022A8  26D9               	addwf	fsr2l,f,c
 11338  0022AA  5002               	movf	RtccWriteTime@pTm+1,w,c
 11339  0022AC  22DA               	addwfc	fsr2h,f,c
 11340  0022AE  50DF               	movf	indf2,w,c
 11341  0022B0  6E0A               	movwf	RtccWriteTime@tempHourWDay,c
 11342                           
 11343                           ; BSR set to: 15
 11344  0022B2  0EFC               	movlw	252
 11345  0022B4  010F               	movlb	15	; () banked
 11346  0022B6  173F               	andwf	63,f,b	;volatile
 11347                           
 11348                           ; BSR set to: 15
 11349  0022B8  010F               	movlb	15	; () banked
 11350  0022BA  813F               	bsf	63,0,b	;volatile
 11351                           
 11352                           ; BSR set to: 15
 11353  0022BC  C00A  FF98         	movff	RtccWriteTime@tempHourWDay,3992	;volatile
 11354                           
 11355                           ; BSR set to: 15
 11356  0022C0  C00B  FF99         	movff	RtccWriteTime@tempHourWDay+1,3993	;volatile
 11357                           
 11358                           ; BSR set to: 15
 11359  0022C4  C008  FF98         	movff	RtccWriteTime@tempMinSec,3992	;volatile
 11360                           
 11361                           ; BSR set to: 15
 11362  0022C8  C009  FF99         	movff	RtccWriteTime@tempMinSec+1,3993	;volatile
 11363                           
 11364                           ; BSR set to: 15
 11365  0022CC  5005               	movf	RtccWriteTime@wasOn,w,c
 11366  0022CE  B4D8               	btfsc	status,2,c
 11367  0022D0  D00D               	goto	l4137
 11368                           
 11369                           ; BSR set to: 15
 11370  0022D2  010F               	movlb	15	; () banked
 11371  0022D4  8F3F               	bsf	63,7,b	;volatile
 11372                           
 11373                           ; BSR set to: 15
 11374  0022D6  5006               	movf	RtccWriteTime@wasAlrm,w,c
 11375  0022D8  B4D8               	btfsc	status,2,c
 11376  0022DA  D002               	goto	l4133
 11377                           
 11378                           ; BSR set to: 15
 11379  0022DC  8E91               	bsf	3985,7,c	;volatile
 11380  0022DE  D000               	goto	l4133
 11381  0022E0                     l4133:
 11382                           
 11383                           ; BSR set to: 15
 11384  0022E0  5007               	movf	RtccWriteTime@wasWrEn,w,c
 11385  0022E2  B4D8               	btfsc	status,2,c
 11386  0022E4  D009               	goto	l4141
 11387                           
 11388                           ; BSR set to: 15
 11389  0022E6  EC24  F01D         	call	_RtccWrOn	;wreg free
 11390  0022EA  D006               	goto	l4141
 11391  0022EC                     l4137:
 11392  0022EC  5007               	movf	RtccWriteTime@wasWrEn,w,c
 11393  0022EE  A4D8               	btfss	status,2,c
 11394  0022F0  D003               	goto	l4141
 11395  0022F2  010F               	movlb	15	; () banked
 11396  0022F4  9B3F               	bcf	63,5,b	;volatile
 11397                           
 11398                           ; BSR set to: 15
 11399  0022F6  D000               	goto	l4141
 11400  0022F8                     l4141:
 11401  0022F8  5003               	movf	RtccWriteTime@di,w,c
 11402  0022FA  B4D8               	btfsc	status,2,c
 11403  0022FC  0012               	return	
 11404  0022FE  8CF2               	bsf	intcon,6,c	;volatile
 11405  002300  0012               	return	
 11406                           
 11407                           ;	Return value of _RtccWriteTime is never used
 11408  002302  0012               	return		;funcret
 11409  002304                     __end_of_RtccWriteTime:
 11410                           	opt stack 0
 11411                           tblptru	equ	0xFF8
 11412                           tblptrh	equ	0xFF7
 11413                           tblptrl	equ	0xFF6
 11414                           tablat	equ	0xFF5
 11415                           prodh	equ	0xFF4
 11416                           prodl	equ	0xFF3
 11417                           intcon	equ	0xFF2
 11418                           indf0	equ	0xFEF
 11419                           postinc0	equ	0xFEE
 11420                           fsr0h	equ	0xFEA
 11421                           fsr0l	equ	0xFE9
 11422                           wreg	equ	0xFE8
 11423                           postdec1	equ	0xFE5
 11424                           fsr1l	equ	0xFE1
 11425                           indf2	equ	0xFDF
 11426                           postinc2	equ	0xFDE
 11427                           postdec2	equ	0xFDD
 11428                           fsr2h	equ	0xFDA
 11429                           fsr2l	equ	0xFD9
 11430                           status	equ	0xFD8
 11431                           
 11432 ;; *************** function _RtccWriteDate *****************
 11433 ;; Defined at:
 11434 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteDate.c"
 11435 ;; Parameters:    Size  Location     Type
 11436 ;;  pDt             2    0[COMRAM] PTR const struct .
 11437 ;;		 -> RtccDate(4), 
 11438 ;;  di              1    2[COMRAM] enum E7121
 11439 ;; Auto vars:     Size  Location     Type
 11440 ;;  tempHourWDay    2   11[COMRAM] struct .
 11441 ;;  tempDayMonth    2    9[COMRAM] struct .
 11442 ;;  tempYear        2    6[COMRAM] struct .
 11443 ;;  wasWrEn         1    8[COMRAM] enum E7121
 11444 ;;  wasAlrm         1    5[COMRAM] enum E7121
 11445 ;;  wasOn           1    4[COMRAM] enum E7121
 11446 ;; Return value:  Size  Location     Type
 11447 ;;                  1    wreg      enum E7121
 11448 ;; Registers used:
 11449 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11450 ;; Tracked objects:
 11451 ;;		On entry : 0/0
 11452 ;;		On exit  : 0/0
 11453 ;;		Unchanged: 0/0
 11454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11455 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11456 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11457 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11458 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11459 ;;Total ram usage:       13 bytes
 11460 ;; Hardware stack levels used:    1
 11461 ;; Hardware stack levels required when called:    1
 11462 ;; This function calls:
 11463 ;;		_RtccWrOn
 11464 ;; This function is called by:
 11465 ;;		_Write_RTC
 11466 ;; This function uses a non-reentrant model
 11467 ;;
 11468                           
 11469                           	psect	text71
 11470  001E58                     __ptext71:
 11471                           	opt stack 0
 11472  001E58                     _RtccWriteDate:
 11473                           	opt stack 25
 11474                           
 11475                           ;incstack = 0
 11476  001E58  0E00               	movlw	0
 11477  001E5A  6E06               	movwf	RtccWriteDate@wasAlrm,c
 11478  001E5C  EE20 F002          	lfsr	2,2
 11479  001E60  5001               	movf	RtccWriteDate@pDt,w,c
 11480  001E62  26D9               	addwf	fsr2l,f,c
 11481  001E64  5002               	movf	RtccWriteDate@pDt+1,w,c
 11482  001E66  22DA               	addwfc	fsr2h,f,c
 11483  001E68  0E13               	movlw	19
 11484  001E6A  60DF               	cpfslt	indf2,c
 11485  001E6C  0012               	return	
 11486  001E6E  EE20 F002          	lfsr	2,2
 11487  001E72  5001               	movf	RtccWriteDate@pDt,w,c
 11488  001E74  26D9               	addwf	fsr2l,f,c
 11489  001E76  5002               	movf	RtccWriteDate@pDt+1,w,c
 11490  001E78  22DA               	addwfc	fsr2h,f,c
 11491  001E7A  50DF               	movf	indf2,w,c
 11492  001E7C  B4D8               	btfsc	status,2,c
 11493  001E7E  0012               	return	
 11494  001E80  EE20 F001          	lfsr	2,1
 11495  001E84  5001               	movf	RtccWriteDate@pDt,w,c
 11496  001E86  26D9               	addwf	fsr2l,f,c
 11497  001E88  5002               	movf	RtccWriteDate@pDt+1,w,c
 11498  001E8A  22DA               	addwfc	fsr2h,f,c
 11499  001E8C  0E32               	movlw	50
 11500  001E8E  60DF               	cpfslt	indf2,c
 11501  001E90  0012               	return	
 11502  001E92  EE20 F001          	lfsr	2,1
 11503  001E96  5001               	movf	RtccWriteDate@pDt,w,c
 11504  001E98  26D9               	addwf	fsr2l,f,c
 11505  001E9A  5002               	movf	RtccWriteDate@pDt+1,w,c
 11506  001E9C  22DA               	addwfc	fsr2h,f,c
 11507  001E9E  50DF               	movf	indf2,w,c
 11508  001EA0  B4D8               	btfsc	status,2,c
 11509  001EA2  0012               	return	
 11510  001EA4  EE20 F003          	lfsr	2,3
 11511  001EA8  5001               	movf	RtccWriteDate@pDt,w,c
 11512  001EAA  26D9               	addwf	fsr2l,f,c
 11513  001EAC  5002               	movf	RtccWriteDate@pDt+1,w,c
 11514  001EAE  22DA               	addwfc	fsr2h,f,c
 11515  001EB0  0E99               	movlw	153
 11516  001EB2  64DF               	cpfsgt	indf2,c
 11517  001EB4  D002               	goto	l4157
 11518  001EB6  0012               	return	
 11519                           
 11520                           ;	Return value of _RtccWriteDate is never used
 11521  001EB8  0012               	return	
 11522  001EBA                     l4157:
 11523  001EBA  EE20 F003          	lfsr	2,3
 11524  001EBE  5001               	movf	RtccWriteDate@pDt,w,c
 11525  001EC0  26D9               	addwf	fsr2l,f,c
 11526  001EC2  5002               	movf	RtccWriteDate@pDt+1,w,c
 11527  001EC4  22DA               	addwfc	fsr2h,f,c
 11528  001EC6  50DF               	movf	indf2,w,c
 11529  001EC8  6E07               	movwf	RtccWriteDate@tempYear,c
 11530  001ECA  EE20 F001          	lfsr	2,1
 11531  001ECE  5001               	movf	RtccWriteDate@pDt,w,c
 11532  001ED0  26D9               	addwf	fsr2l,f,c
 11533  001ED2  5002               	movf	RtccWriteDate@pDt+1,w,c
 11534  001ED4  22DA               	addwfc	fsr2h,f,c
 11535  001ED6  50DF               	movf	indf2,w,c
 11536  001ED8  6E0A               	movwf	RtccWriteDate@tempDayMonth,c
 11537  001EDA  EE20 F002          	lfsr	2,2
 11538  001EDE  5001               	movf	RtccWriteDate@pDt,w,c
 11539  001EE0  26D9               	addwf	fsr2l,f,c
 11540  001EE2  5002               	movf	RtccWriteDate@pDt+1,w,c
 11541  001EE4  22DA               	addwfc	fsr2h,f,c
 11542  001EE6  50DF               	movf	indf2,w,c
 11543  001EE8  6E0B               	movwf	RtccWriteDate@tempDayMonth+1,c
 11544  001EEA  5003               	movf	RtccWriteDate@di,w,c
 11545  001EEC  B4D8               	btfsc	status,2,c
 11546  001EEE  D002               	goto	l4163
 11547  001EF0  9CF2               	bcf	intcon,6,c	;volatile
 11548  001EF2  D000               	goto	l4163
 11549  001EF4                     l4163:
 11550  001EF4  0E00               	movlw	0
 11551  001EF6  BB3F               	btfsc	63,5,b	;volatile
 11552  001EF8  0E01               	movlw	1
 11553  001EFA  6E09               	movwf	RtccWriteDate@wasWrEn,c
 11554  001EFC  5009               	movf	RtccWriteDate@wasWrEn,w,c
 11555  001EFE  A4D8               	btfss	status,2,c
 11556  001F00  D003               	goto	l4167
 11557  001F02  EC24  F01D         	call	_RtccWrOn	;wreg free
 11558  001F06  D000               	goto	l4167
 11559  001F08                     l4167:
 11560  001F08  0E00               	movlw	0
 11561  001F0A  BF3F               	btfsc	63,7,b	;volatile
 11562  001F0C  0E01               	movlw	1
 11563  001F0E  6E05               	movwf	RtccWriteDate@wasOn,c
 11564  001F10  5005               	movf	RtccWriteDate@wasOn,w,c
 11565  001F12  B4D8               	btfsc	status,2,c
 11566  001F14  D007               	goto	l4173
 11567  001F16  0E00               	movlw	0
 11568  001F18  BE91               	btfsc	3985,7,c	;volatile
 11569  001F1A  0E01               	movlw	1
 11570  001F1C  6E06               	movwf	RtccWriteDate@wasAlrm,c
 11571  001F1E  010F               	movlb	15	; () banked
 11572  001F20  9F3F               	bcf	63,7,b	;volatile
 11573  001F22  D000               	goto	l4173
 11574  001F24                     l4173:
 11575  001F24  0EFC               	movlw	252
 11576  001F26  010F               	movlb	15	; () banked
 11577  001F28  173F               	andwf	63,f,b	;volatile
 11578  001F2A  010F               	movlb	15	; () banked
 11579  001F2C  813F               	bsf	63,0,b	;volatile
 11580                           
 11581                           ; BSR set to: 15
 11582  001F2E  CF98 F00C          	movff	3992,RtccWriteDate@tempHourWDay	;volatile
 11583                           
 11584                           ; BSR set to: 15
 11585  001F32  CF99 F00D          	movff	3993,RtccWriteDate@tempHourWDay+1	;volatile
 11586                           
 11587                           ; BSR set to: 15
 11588  001F36  C001  FFD9         	movff	RtccWriteDate@pDt,fsr2l
 11589  001F3A  C002  FFDA         	movff	RtccWriteDate@pDt+1,fsr2h
 11590  001F3E  50DF               	movf	indf2,w,c
 11591  001F40  6E0D               	movwf	RtccWriteDate@tempHourWDay+1,c
 11592                           
 11593                           ; BSR set to: 15
 11594  001F42  0EFC               	movlw	252
 11595  001F44  010F               	movlb	15	; () banked
 11596  001F46  173F               	andwf	63,f,b	;volatile
 11597                           
 11598                           ; BSR set to: 15
 11599  001F48  0E03               	movlw	3
 11600  001F4A  010F               	movlb	15	; () banked
 11601  001F4C  133F               	iorwf	63,f,b	;volatile
 11602                           
 11603                           ; BSR set to: 15
 11604  001F4E  C007  FF98         	movff	RtccWriteDate@tempYear,3992	;volatile
 11605                           
 11606                           ; BSR set to: 15
 11607  001F52  C008  FF99         	movff	RtccWriteDate@tempYear+1,3993	;volatile
 11608                           
 11609                           ; BSR set to: 15
 11610  001F56  C00A  FF98         	movff	RtccWriteDate@tempDayMonth,3992	;volatile
 11611                           
 11612                           ; BSR set to: 15
 11613  001F5A  C00B  FF99         	movff	RtccWriteDate@tempDayMonth+1,3993	;volatile
 11614                           
 11615                           ; BSR set to: 15
 11616  001F5E  C00C  FF98         	movff	RtccWriteDate@tempHourWDay,3992	;volatile
 11617                           
 11618                           ; BSR set to: 15
 11619  001F62  C00D  FF99         	movff	RtccWriteDate@tempHourWDay+1,3993	;volatile
 11620                           
 11621                           ; BSR set to: 15
 11622  001F66  5005               	movf	RtccWriteDate@wasOn,w,c
 11623  001F68  B4D8               	btfsc	status,2,c
 11624  001F6A  D00D               	goto	l4209
 11625                           
 11626                           ; BSR set to: 15
 11627  001F6C  010F               	movlb	15	; () banked
 11628  001F6E  8F3F               	bsf	63,7,b	;volatile
 11629                           
 11630                           ; BSR set to: 15
 11631  001F70  5006               	movf	RtccWriteDate@wasAlrm,w,c
 11632  001F72  B4D8               	btfsc	status,2,c
 11633  001F74  D002               	goto	l4205
 11634                           
 11635                           ; BSR set to: 15
 11636  001F76  8E91               	bsf	3985,7,c	;volatile
 11637  001F78  D000               	goto	l4205
 11638  001F7A                     l4205:
 11639                           
 11640                           ; BSR set to: 15
 11641  001F7A  5009               	movf	RtccWriteDate@wasWrEn,w,c
 11642  001F7C  B4D8               	btfsc	status,2,c
 11643  001F7E  D009               	goto	l4213
 11644                           
 11645                           ; BSR set to: 15
 11646  001F80  EC24  F01D         	call	_RtccWrOn	;wreg free
 11647  001F84  D006               	goto	l4213
 11648  001F86                     l4209:
 11649  001F86  5009               	movf	RtccWriteDate@wasWrEn,w,c
 11650  001F88  A4D8               	btfss	status,2,c
 11651  001F8A  D003               	goto	l4213
 11652  001F8C  010F               	movlb	15	; () banked
 11653  001F8E  9B3F               	bcf	63,5,b	;volatile
 11654                           
 11655                           ; BSR set to: 15
 11656  001F90  D000               	goto	l4213
 11657  001F92                     l4213:
 11658  001F92  5003               	movf	RtccWriteDate@di,w,c
 11659  001F94  B4D8               	btfsc	status,2,c
 11660  001F96  0012               	return	
 11661  001F98  9CF2               	bcf	intcon,6,c	;volatile
 11662  001F9A  0012               	return	
 11663                           
 11664                           ;	Return value of _RtccWriteDate is never used
 11665  001F9C  0012               	return		;funcret
 11666  001F9E                     __end_of_RtccWriteDate:
 11667                           	opt stack 0
 11668                           tblptru	equ	0xFF8
 11669                           tblptrh	equ	0xFF7
 11670                           tblptrl	equ	0xFF6
 11671                           tablat	equ	0xFF5
 11672                           prodh	equ	0xFF4
 11673                           prodl	equ	0xFF3
 11674                           intcon	equ	0xFF2
 11675                           indf0	equ	0xFEF
 11676                           postinc0	equ	0xFEE
 11677                           fsr0h	equ	0xFEA
 11678                           fsr0l	equ	0xFE9
 11679                           wreg	equ	0xFE8
 11680                           postdec1	equ	0xFE5
 11681                           fsr1l	equ	0xFE1
 11682                           indf2	equ	0xFDF
 11683                           postinc2	equ	0xFDE
 11684                           postdec2	equ	0xFDD
 11685                           fsr2h	equ	0xFDA
 11686                           fsr2l	equ	0xFD9
 11687                           status	equ	0xFD8
 11688                           
 11689 ;; *************** function _RtccWrOn *****************
 11690 ;; Defined at:
 11691 ;;		line 21 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWrOn.c"
 11692 ;; Parameters:    Size  Location     Type
 11693 ;;		None
 11694 ;; Auto vars:     Size  Location     Type
 11695 ;;  data            2    0        unsigned int 
 11696 ;; Return value:  Size  Location     Type
 11697 ;;		None               void
 11698 ;; Registers used:
 11699 ;;		wreg, status,2
 11700 ;; Tracked objects:
 11701 ;;		On entry : 0/0
 11702 ;;		On exit  : 0/0
 11703 ;;		Unchanged: 0/0
 11704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11708 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11709 ;;Total ram usage:        0 bytes
 11710 ;; Hardware stack levels used:    1
 11711 ;; This function calls:
 11712 ;;		Nothing
 11713 ;; This function is called by:
 11714 ;;		_Write_RTC
 11715 ;;		_RtccWriteDate
 11716 ;;		_RtccWriteTime
 11717 ;; This function uses a non-reentrant model
 11718 ;;
 11719                           
 11720                           	psect	text72
 11721  003A48                     __ptext72:
 11722                           	opt stack 0
 11723  003A48                     _RtccWrOn:
 11724                           	opt stack 25
 11725                           
 11726                           ;incstack = 0
 11727  003A48  9CF2               	bcf	intcon,6,c	;volatile
 11728  003A4A  0E55               	movlw	85
 11729  003A4C  6EA7               	movwf	4007,c	;volatile
 11730  003A4E  0EAA               	movlw	170
 11731  003A50  6EA7               	movwf	4007,c	;volatile
 11732  003A52  010F               	movlb	15	; () banked
 11733  003A54  8B3F               	bsf	63,5,b	;volatile
 11734                           
 11735                           ; BSR set to: 15
 11736  003A56  8CF2               	bsf	intcon,6,c	;volatile
 11737                           
 11738                           ; BSR set to: 15
 11739  003A58  0012               	return		;funcret
 11740  003A5A                     __end_of_RtccWrOn:
 11741                           	opt stack 0
 11742                           tblptru	equ	0xFF8
 11743                           tblptrh	equ	0xFF7
 11744                           tblptrl	equ	0xFF6
 11745                           tablat	equ	0xFF5
 11746                           prodh	equ	0xFF4
 11747                           prodl	equ	0xFF3
 11748                           intcon	equ	0xFF2
 11749                           indf0	equ	0xFEF
 11750                           postinc0	equ	0xFEE
 11751                           fsr0h	equ	0xFEA
 11752                           fsr0l	equ	0xFE9
 11753                           wreg	equ	0xFE8
 11754                           postdec1	equ	0xFE5
 11755                           fsr1l	equ	0xFE1
 11756                           indf2	equ	0xFDF
 11757                           postinc2	equ	0xFDE
 11758                           postdec2	equ	0xFDD
 11759                           fsr2h	equ	0xFDA
 11760                           fsr2l	equ	0xFD9
 11761                           status	equ	0xFD8
 11762                           tblptru	equ	0xFF8
 11763                           tblptrh	equ	0xFF7
 11764                           tblptrl	equ	0xFF6
 11765                           tablat	equ	0xFF5
 11766                           prodh	equ	0xFF4
 11767                           prodl	equ	0xFF3
 11768                           intcon	equ	0xFF2
 11769                           indf0	equ	0xFEF
 11770                           postinc0	equ	0xFEE
 11771                           fsr0h	equ	0xFEA
 11772                           fsr0l	equ	0xFE9
 11773                           wreg	equ	0xFE8
 11774                           postdec1	equ	0xFE5
 11775                           fsr1l	equ	0xFE1
 11776                           indf2	equ	0xFDF
 11777                           postinc2	equ	0xFDE
 11778                           postdec2	equ	0xFDD
 11779                           fsr2h	equ	0xFDA
 11780                           fsr2l	equ	0xFD9
 11781                           status	equ	0xFD8
 11782                           
 11783                           	psect	rparam
 11784  0000                     tblptru	equ	0xFF8
 11785                           tblptrh	equ	0xFF7
 11786                           tblptrl	equ	0xFF6
 11787                           tablat	equ	0xFF5
 11788                           prodh	equ	0xFF4
 11789                           prodl	equ	0xFF3
 11790                           intcon	equ	0xFF2
 11791                           indf0	equ	0xFEF
 11792                           postinc0	equ	0xFEE
 11793                           fsr0h	equ	0xFEA
 11794                           fsr0l	equ	0xFE9
 11795                           wreg	equ	0xFE8
 11796                           postdec1	equ	0xFE5
 11797                           fsr1l	equ	0xFE1
 11798                           indf2	equ	0xFDF
 11799                           postinc2	equ	0xFDE
 11800                           postdec2	equ	0xFDD
 11801                           fsr2h	equ	0xFDA
 11802                           fsr2l	equ	0xFD9
 11803                           status	equ	0xFD8


Data Sizes:
    Strings     154
    Constant    71
    Data        16
    BSS         84
    Persistent  13
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160     22     136
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    RtccWriteTime@pTm	PTR const struct . size(2) Largest target is 4
		 -> RtccTime(BANK0[4]), 

    RtccWriteDate@pDt	PTR const struct . size(2) Largest target is 4
		 -> RtccDate(BANK0[4]), 

    RtccReadTime@pTm	PTR struct . size(2) Largest target is 4
		 -> RtccTime(BANK0[4]), 

    RtccReadDate@pDt	PTR struct . size(2) Largest target is 4
		 -> RtccDate(BANK0[4]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_30(CODE[10]), STR_28(CODE[10]), STR_26(CODE[5]), STR_12(CODE[10]), 
		 -> STR_11(CODE[15]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), 
		 -> STR_7(CODE[5]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), 
		 -> STR_3(CODE[5]), STR_2(CODE[5]), STR_1(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> buffer2(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    obtain_pass@digit	PTR short  size(2) Largest target is 2
		 -> input_password@digit(BANK0[2]), 

    next_code@input	PTR unsigned char  size(2) Largest target is 1
		 -> obtain_pass@input(COMRAM[1]), 

    next_code@digit	PTR short  size(2) Largest target is 2
		 -> input_password@digit(BANK0[2]), 

    evalueChanceOfRaw@y	PTR unsigned char  size(2) Largest target is 1
		 -> configurar_reloj@y(COMRAM[1]), 

    evalueChanceOfRaw@x	PTR unsigned char  size(2) Largest target is 1
		 -> configurar_reloj@x(COMRAM[1]), 

    lcd_putrs@ptr	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_29(CODE[2]), STR_27(CODE[6]), STR_25(CODE[9]), STR_24(CODE[14]), 
		 -> STR_23(CODE[14]), STR_22(CODE[16]), STR_21(CODE[15]), STR_20(CODE[8]), 
		 -> STR_19(CODE[13]), STR_18(CODE[8]), STR_17(CODE[4]), STR_16(CODE[3]), 
		 -> STR_15(CODE[10]), STR_14(CODE[11]), STR_13(CODE[11]), buffer2(BANK0[20]), 


Critical Paths under _main in COMRAM

    _twinkle->_read_keyboard
    _input_password->_obtain_pass
    _set_desactive_vision->_lcd_putrs
    _review_code->_checkPass
    _obtain_pass->_pow
    _next_code->_lcd_gotoxy
    _select_menu->_ver_opcion_cambio
    _ver_opcion_cambio->_input_new_pass
    _ver_opcion_cambio->_input_old_pass
    _show_success->__delay_s
    _show_error->__delay_s
    _input_old_pass->_pow
    _input_new_pass->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftadd
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___awtoft
    ___ftmul->___lbtoft
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    __delay_s->___awdiv
    ___lbtoft->___ftpack
    _ver_info->_read_keyboard
    _clear->_lcd_comand
    _configurar_reloj->_read_keyboard
    _write_Date->_sprintf
    _lcd_setcursor_vb->_lcd_send_byte
    _read_keyboard->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcd_putrs->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _Read_RTC->_RtccReadDate
    _Read_RTC->_RtccReadTime
    _caratula->_lcd_comand
    _lcd_init->_lcd_send_byte
    _lcd_comand->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _Write_RTC->_RtccWriteDate

Critical Paths under _main in BANK0

    _set_vision->_input_password
    _input_password->_obtain_pass
    _obtain_pass->_pow
    _ver_opcion_cambio->_input_old_pass
    _input_old_pass->_pow
    _input_new_pass->_pow

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  408242
                                             94 COMRAM     1     1      0
                           _Read_RTC
                              _Setup
                           _caratula
                        _select_menu
                         _set_vision
 ---------------------------------------------------------------------------------
 (1) _set_vision                                           0     0      0  132779
                              _clear
                     _input_password
                         _lcd_gotoxy
                          _lcd_putrs
                            _twinkle
                         _write_Date
 ---------------------------------------------------------------------------------
 (2) _twinkle                                              1     1      0   17271
                                             36 COMRAM     1     1      0
                           __delay_s
                     _clear_keyboard
                         _lcd_gotoxy
                          _lcd_putrs
                      _read_keyboard
 ---------------------------------------------------------------------------------
 (2) _input_password                                       5     5      0   96176
                                             17 BANK0      5     5      0
                      _is_not_letter
                      _not_fill_pass
                        _obtain_pass
                      _read_keyboard
                        _review_code
               _set_desactive_vision
 ---------------------------------------------------------------------------------
 (3) _set_desactive_vision                                 2     0      2    7973
                                             10 COMRAM     2     0      2
                         _lcd_gotoxy
                          _lcd_putrs
                   _lcd_setcursor_vb
 ---------------------------------------------------------------------------------
 (3) _review_code                                          4     0      4     322
                                              2 COMRAM     4     0      4
                       _change_state
                          _checkPass
 ---------------------------------------------------------------------------------
 (4) _change_state                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _obtain_pass                                         13     8      5   78735
                                             87 COMRAM     7     2      5
                                             11 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                           ___lbtoft
                          _next_code
                                _pow
 ---------------------------------------------------------------------------------
 (4) _next_code                                            6     2      4    2381
                                              7 COMRAM     6     2      4
                     _clear_keyboard
                         _lcd_gotoxy
 ---------------------------------------------------------------------------------
 (3) _is_not_letter                                        2     2      0     112
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _select_menu                                          0     0      0  269957
                   _configurar_reloj
                     _dispararSensor
                      _read_keyboard
                           _ver_info
                  _ver_opcion_cambio
 ---------------------------------------------------------------------------------
 (2) _ver_opcion_cambio                                    2     2      0  212701
                                             89 COMRAM     2     2      0
                         _changePass
                              _clear
                     _input_new_pass
                     _input_old_pass
                         _lcd_gotoxy
                          _lcd_putrs
                      _read_keyboard
                         _show_error
                       _show_success
 ---------------------------------------------------------------------------------
 (3) _show_success                                         0     0      0    9259
                           __delay_s
                              _clear
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (3) _show_error                                           0     0      0    9259
                           __delay_s
                              _clear
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (3) _input_old_pass                                      13    13      0   89001
                                             87 COMRAM     2     2      0
                                             11 BANK0     11    11      0
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                           ___lbtoft
                           __delay_s
                          _checkPass
                     _clear_keyboard
                         _lcd_gotoxy
                      _not_fill_pass
                                _pow
                      _read_keyboard
 ---------------------------------------------------------------------------------
 (4) _checkPass                                            2     0      2     150
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _input_new_pass                                      11    11      0   88805
                                             87 COMRAM     2     2      0
                                             11 BANK0      9     9      0
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                           ___lbtoft
                           __delay_s
                     _clear_keyboard
                         _lcd_gotoxy
                      _not_fill_pass
                                _pow
                      _read_keyboard
 ---------------------------------------------------------------------------------
 (4) _pow                                                 17    11      6   62408
                                             81 COMRAM     6     0      6
                                              0 BANK0     11    11      0
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (5) _log                                                  5     2      3   20443
                                             51 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _exp                                                  9     6      3   33640
                                             72 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (6) _ldexp                                                7     2      5     376
                                             51 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (6) _floor                                                8     5      3    8621
                                             64 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _frexp                                                7     2      5     480
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             15    11      4     636
                                             39 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftge                                               9     3      6     648
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (7) ___altoft                                            10     6      4    2389
                                             54 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (6) _eval_poly                                           12     5      7    8999
                                             39 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             15     9      6    3741
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftsub                                              6     0      6    4450
                                             39 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             12     6      6    4153
                                             27 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftneg                                              3     0      3     237
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             15     9      6    2697
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             4     1      3    2790
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___lltoft                                             9     5      4    2320
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _not_fill_pass                                        2     0      2     214
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _clear_keyboard                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) __delay_s                                             7     5      2    1650
                                              8 COMRAM     7     5      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___lbtoft                                             4     1      3    2209
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2187
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) _changePass                                           2     0      2      86
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ver_info                                             1     1      0   20103
                                             36 COMRAM     1     1      0
                              _clear
                         _lcd_gotoxy
                          _lcd_putrs
                      _read_keyboard
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _clear                                                1     1      0     646
                                              5 COMRAM     1     1      0
                         _lcd_comand
 ---------------------------------------------------------------------------------
 (2) _dispararSensor                                       2     0      2    1182
                                             18 COMRAM     2     0      2
                           _Read_RTC
 ---------------------------------------------------------------------------------
 (2) _configurar_reloj                                     4     4      0   27337
                                             36 COMRAM     4     4      0
                           _Read_RTC
                  _evalueChanceOfRaw
                         _lcd_gotoxy
                   _lcd_setcursor_vb
                      _read_keyboard
                           _setClock
                         _write_Date
 ---------------------------------------------------------------------------------
 (2) _write_Date                                           0     0      0   11723
                         _lcd_gotoxy
                          _lcd_putrs
                   _lcd_setcursor_vb
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _lcd_setcursor_vb                                     2     1      1     924
                                              4 COMRAM     2     1      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (3) _setClock                                             2     2      0    2427
                                             13 COMRAM     2     2      0
                          _Write_RTC
 ---------------------------------------------------------------------------------
 (3) _read_keyboard                                        1     1      0    8634
                                             35 COMRAM     1     1      0
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             32    22     10    3836
                                             12 COMRAM    23    13     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     543
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcd_putrs                                            2     0      2    4798
                                              8 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (4) _lcd_putc                                             1     1      0    2833
                                              7 COMRAM     1     1      0
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (5) _lcd_gotoxy                                           3     2      1    2165
                                              4 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (3) _evalueChanceOfRaw                                    5     1      4     282
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) _Read_RTC                                             0     0      0     968
                       _RtccReadDate
                       _RtccReadTime
 ---------------------------------------------------------------------------------
 (4) _RtccReadTime                                        18    16      2     437
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (4) _RtccReadDate                                        18    16      2     531
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (1) _caratula                                             0     0      0     646
                         _lcd_comand
 ---------------------------------------------------------------------------------
 (1) _Setup                                                0     0      0    3892
                          _Write_RTC
                         _lcd_comand
                           _lcd_init
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             1     1      0     841
                                              4 COMRAM     1     1      0
                        _Delay1KTCYx
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _lcd_comand                                           1     1      0     646
                                              4 COMRAM     1     1      0
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (4) _lcd_send_byte                                        2     1      1     624
                                              2 COMRAM     2     1      1
                       _Delay100TCYx
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (5) _lcd_send_nibble                                      2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _Delay100TCYx                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Write_RTC                                            0     0      0    2405
                           _RtccWrOn
                      _RtccWriteDate
                      _RtccWriteTime
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1196
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (5) _RtccWriteTime                                       11     8      3     537
                                              0 COMRAM    11     8      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (5) _RtccWriteDate                                       13    10      3     672
                                              0 COMRAM    13    10      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (6) _RtccWrOn                                             2     2      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Read_RTC
     _RtccReadDate
     _RtccReadTime
   _Setup
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_init
       _Delay1KTCYx
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
       _lcd_send_nibble
   _caratula
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
   _select_menu
     _configurar_reloj
       _Read_RTC
         _RtccReadDate
         _RtccReadTime
       _evalueChanceOfRaw
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_setcursor_vb
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _read_keyboard
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _setClock
         _Write_RTC
           _RtccWrOn
           _RtccWriteDate
             _RtccWrOn
           _RtccWriteTime
             _RtccWrOn
           ___awdiv
       _write_Date
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _lcd_setcursor_vb
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _dispararSensor
       _Read_RTC
         _RtccReadDate
         _RtccReadTime
     _read_keyboard
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _ver_info
       _clear
         _lcd_comand
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _read_keyboard
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _ver_opcion_cambio
       _changePass
       _clear
         _lcd_comand
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _input_new_pass
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___lbtoft
           ___ftpack
         __delay_s
           ___awdiv
         _clear_keyboard
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _not_fill_pass
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
         _read_keyboard
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
       _input_old_pass
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___lbtoft
           ___ftpack
         __delay_s
           ___awdiv
         _checkPass
         _clear_keyboard
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _not_fill_pass
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
         _read_keyboard
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _read_keyboard
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _show_error
         __delay_s
           ___awdiv
         _clear
           _lcd_comand
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
       _show_success
         __delay_s
           ___awdiv
         _clear
           _lcd_comand
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
   _set_vision
     _clear
       _lcd_comand
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _input_password
       _is_not_letter
       _not_fill_pass
       _obtain_pass
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___lbtoft
           ___ftpack
         _next_code
           _clear_keyboard
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
       _read_keyboard
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _review_code
         _change_state
         _checkPass
       _set_desactive_vision
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _lcd_setcursor_vb
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _twinkle
       __delay_s
         ___awdiv
       _clear_keyboard
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _read_keyboard
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _write_Date
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _lcd_setcursor_vb
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       1       4        0.6%
BANK0               A0     16      88       5       85.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E7       6        0.0%
DATA                 0      0      E7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Sep 13 19:28:40 2016

                 ___altoft@exp 003F                              _a 007C                              _b 007E  
                            _c 0080                              _i 0088                              _j 008A  
                            _k 008C                 _input_old_pass 1BCA                 _input_new_pass 1F9E  
                ___altoft@sign 0040                    _state_alarm 00D9                 ?_lcd_send_byte 0003  
                 ___awdiv@sign 0006            ___wmul@multiplicand 0003                 _input_password 2ED2  
                  lcd_comand@d 0005                   __CFG_CP0$OFF 000000                   ___ftadd@exp1 0027  
                 ___ftadd@exp2 0026                   ___ftadd@sign 0025                            l301 108E  
                          l310 10D8                            l302 108A                            l152 37EE  
                          l153 37F0                            l321 1158                            l313 1112  
                          l305 109E                            l330 11C8                            l322 1154  
                          l314 110E                            l306 109A                            l341 122A  
                          l333 1202                            l325 1196                            l317 1148  
                          l309 10DC                            l350 126C                            l342 1226  
                          l334 11FE                            l326 1192                            l318 1144  
                          l345 1260                            l337 1212                            l329 11CC  
                          l354 127C                            l346 125C                            l338 120E  
                          l349 1270                            l293 1022                            l621 385E  
                          l294 101E                            l614 3508                            l297 1058  
                          l298 1054                            l983 146E                            _dia 00CC  
              ?_dispararSensor 0013                            _key 0096                            _mes 00D2  
                          _exp 1500                            _log 20D8                            _pow 1A48  
                          wreg 000FE8           __end_of_change_state 38C2                RtccReadDate@pDt 0001  
                  lcd_gotoxy@x 0006                    lcd_gotoxy@y 0005                   ___ftdiv@cntr 0012  
                 ___ftdiv@sign 0017                           l1423 2BC2                           l4001 12CE  
                         l4011 130C                           l1452 172C                           l4005 12D8  
                         l1509 3976                           l4031 13B4                           l4023 1376  
                         l4007 12EE                           l1456 1756                           l4105 2290  
                         l4025 1398                           l1627 34BC                           l4043 13E8  
                         l4035 13C0                           l4019 1370                           l1467 1818  
                         l1476 1834                           l4213 1F92                           l4205 1F7A  
                         l4141 22F8                           l4133 22E0                           l1637 3600  
                         l4061 144C                           l4053 1422                           l4231 2D42  
                         l4047 140C                           l4039 13E4                           l3511 2B52  
                         l1487 26AA                           l4311 1588                           l1664 1A82  
                         l4209 1F86                           l4137 22EC                           l4241 2D6A  
                         l4225 2D30                           l4073 14C8                           l4049 1416  
                         l3521 2BB6                           l3513 2B72                           l3505 2B36  
                         l4305 1550                           l5041 2C04                           l4163 1EF4  
                         l4067 1474                           l4059 1444                           l4075 14D4  
                         l3611 17DC                           l5051 2C3A                           l5043 2C0A  
                         l4173 1F24                           l4157 1EBA                           l4237 2D58  
                         l4253 2D94                           l3541 3990                           l4077 14F0  
                         l3533 2BDC                           l3517 2B8A                           l3509 2B46  
                         l3605 17BC                           l3701 2D14                           l4333 16B0  
                         l1669 1BBC                           l5053 2C48                           l5045 2C10  
                         l4501 38A6                           l4167 1F08                           l4095 2260  
                         l4239 2D62                           l3543 3996                           l3527 2BCA  
                         l3519 2BAA                           l4263 3410                           l3607 17C8  
                         l3711 2330                           l5055 2C56                           l5039 2BFE  
                         l5047 2C28                           l4503 38AE                           l1688 15B6  
                         l4089 2236                           l4257 2DA4                           l4249 2D88  
                         l3801 39C0                           l4265 341E                           l3625 1852  
                         l3617 1800                           l3609 17D4                           l3561 319E  
                         l1689 16DA                           l5057 2C64                           l5073 3304  
                         l4099 2274                           l3811 261C                           l3635 1884  
                         l3619 180C                           l3651 2456                           l3563 31AC  
                         l1699 2892                           l4283 2116                           l5059 2C7C  
                         l5067 32F0                           l5091 380E                           l3901 35CC  
                         l3645 242E                           l3741 23D0                           l3733 23A8  
                         l4277 20F4                           l4533 1B0C                           l4525 1AA8  
                         l5085 332E                           l3479 3A38                           l3903 35D6  
                         l4463 1284                           l3583 1764                           l3743 23DA  
                         l4519 1A90                           l5079 3318                           l3905 35DE  
                         l3817 2644                           l3577 173A                           l3673 24B2  
                         l3665 248A                           l3729 2398                           l4537 1B34  
                         l3683 24E0                           l3675 24B8                           l3691 2CB6  
                         l3747 23F2                           l3739 23C2                           l3931 2818  
                         l3923 27F0                           l4299 1518                           l4549 326E  
                         l3773 360E                           l3909 35F4                           l3837 2684  
                         l3589 1770                           l3669 249C                           l3941 2B10  
                         l4741 25E8                           l4575 2F60                           l3775 361A  
                         l3783 363E                           l4671 270C                           l4479 34F4  
                         l3847 26B8                           l3599 1798                           l3855 36B4  
                         l3679 24CA                           l3695 2CE8                           l3759 2DD8  
                         l3927 27FE                           l4807 1FB8                           l2985 3A26  
                         l4841 312A                           l4657 33D0                           l3777 3626  
                         l3881 3480                           l4665 26E4                           l4497 3896  
                         l3779 3632                           l3883 348A                           l3867 3772  
                         l3939 2A92                           l4827 20BA                           l4499 389E  
                         l4931 2F3A                           l4915 339A                           ?_exp 0049  
                         l4837 3122                           l3893 34B0                           l3885 3492  
                         l4685 2764                           l4677 2734                           l4693 278C  
                         l3973 2A16                           l3957 29DE                           l3949 2996  
                         l4829 20C4                           l4781 1CF0                           l4925 2EFC  
                         ?_log 0034                           l4855 314E                           l4847 313A  
                         l3983 3520                           l4679 273C                           l4695 27AE  
                         l3975 2A42                           l4759 1BE4                           l3993 12A6  
                         l4881 2EA0                           l4865 2E50                           l3969 2A06  
                         l3987 354A                           l4891 2EC8                           l4779 1CE6  
                         l4973 28A8                           l4957 30CC                           l3999 12C0  
                         l4887 2EB0                           l4967 30F4                           l4959 30D4  
                         l4895 3346                           l4993 296E                           ?_pow 0052  
                         STR_1 0FD6                           STR_2 0FD6                           STR_3 0FD6  
                         STR_4 0FD6                           STR_5 0FD6                           STR_6 0FD6  
                         STR_7 0FD6                           STR_8 0FD6                           STR_9 0FD6  
                         u2410 3252                           u3210 3540                           u3130 280A  
                         u3220 356A                           u2350 3204                           u2408 3238  
                         u4120 3A0A                           u4200 1AF4                           u3217 3536  
                         u2370 321C                           u3170 29B6                           u3227 3560  
                         u2428 3254                           u4300 2780                           u4140 39E0  
                         u2390 3236                           u2551 16F8                           u2368 3206  
                         u2561 170C                           u3178 29B8                           u2388 321E  
                         u4270 2700                           u4280 2728                           u2761 2416  
                         u4290 2758                           u2851 2314                           u2940 2E00  
                         u3740 1590                           u2781 243E                           u2870 234E  
                         u3750 1592                           u4707 34FA                           u2971 2604  
                         u2875 2346                           u2948 2E02                           u4717 39F2  
                         u4727 2E78                           u2991 262C                           u4737 2EBC  
                         u4747 27B8                           u4757 128A                           u4767 3A28  
                         u4777 3A3A                           u4697 3824               ?_lcd_send_nibble 0001  
                         _anio 00CA                           _flag 0738                           _main 3804  
                         _hora 00D0                   ___ftpack@arg 0001                           _menu 00D8  
                 ___ftpack@exp 0004                           fsr0h 000FEA                           indf0 000FEF  
                         fsr0l 000FE9                           fsr2h 000FDA                           fsr1l 000FE1  
                         indf2 000FDF                           fsr2l 000FD9                           exp@x 0049  
                         log@x 0034                  __CFG_T1DIG$ON 000000                           pow@x 0052  
                         pow@y 0055                           prodh 000FF4                           prodl 000FF3  
                         start 0000                  __CFG_IESO$OFF 000000               RtccReadDate@rTD0 000B  
             RtccReadDate@rTD1 0003                  ver_info@input 0025                   ___ftmul@cntr 001A  
       __end_of_input_old_pass 1D12         __end_of_input_new_pass 20D8                   ___param_bank 000010  
                 ___ftmul@sign 001B                RtccReadTime@pTm 0001         __end_of_input_password 2F60  
              obtain_pass@pass 0058                   ___fttol@exp1 0036                          ??_exp 004C  
                        ??_log 0037                   ___fttol@lval 0032                          ??_pow 0058  
                  _Delay1KTCYx 3A24                  __CFG_PLLDIV$1 000000                          ?_main 0001  
              __end_of___awdiv 2DB0                __end_of___ftadd 18AC                          STR_10 0FD6  
                        STR_11 0F67                          STR_20 0F50                          STR_12 0FB5  
                        STR_13 0FAA                          STR_21 0F58                          STR_30 0FB5  
                        STR_14 0F9F                          STR_22 0F48                          STR_15 0F7A  
                        STR_23 0F76                          STR_16 0FDF                          STR_24 0F84  
                        STR_17 0FDB                          STR_25 0FBF                          STR_26 0F71  
                        STR_18 0FC8                          STR_27 0FD0                          STR_19 0F92  
                        STR_28 0F6C                          STR_29 0FA8          __size_of_Delay100TCYx 0012  
              __end_of___ftdiv 26E0                __end_of___ftneg 3984                __end_of___ftmul 2508  
              ___awdiv@divisor 0003                __end_of___ftsub 36E0                __end_of___fttol 2406  
              __end_of___lwdiv 34C6                __end_of___lwmod 360A                ___awdiv@counter 0005  
                        _TRISA 000F92                          _TRISB 000F93                          _TRISC 000F94  
           input_password@pass 00C5                   ___lltoft@exp 0011                 __CFG_FCMEN$OFF 000000  
   __size_of_ver_opcion_cambio 0086                          _Setup 3656                  ___awtoft@sign 000C  
                        _clear 39E6                __end_of_dpowers 0F0B                          _floor 27C2  
                        _ldexp 297E                          _frexp 2DB0                          _mes_d 00E1  
                        _errno 0084                          _mes_u 00E2                __end_of_isdigit 39CA  
                ___ftpack@sign 0005                   ?_obtain_pass 0058                          tablat 000FF5  
                        pow@yi 00BB                   lcd_putrs@ptr 0009                          status 000FD8  
              __end_of_sprintf 1500              ?_configurar_reloj 0001                __end_of_twinkle 33A8  
                  exp@exponent 004F             ??_configurar_reloj 0025        __CFG_DSWDTOSC$INTOSCREF 000000  
                  ldexp@newexp 0037        __size_of_clear_keyboard 0008                __initialization 3798  
              ?_input_old_pass 0001                ?_input_new_pass 0001                    log@exponent 0037  
                 _Delay100TCYx 3A36                   __end_of_main 3834                ??_lcd_send_byte 0004  
             RtccReadTime@rTD0 000B               RtccReadTime@rTD1 0003                ?_input_password 0001  
             __end_of_Read_RTC 1E58               obtain_pass@digit 005B               obtain_pass@input 005A  
         _set_desactive_vision 38C2                         ??_main 005F                  ___fttol@sign1 0031  
                __activetblptr 000002             is_not_letter@input 0002               __end_of_RtccWrOn 3A5A  
                       ?_Setup 0001                         ?_clear 0001                         _ADCON0 000FC2  
                       _ADCON1 000FC1                         ?_floor 0041                         ?_ldexp 0034  
                       ?_frexp 0001               __end_of___altoft 31F8                   ?_select_menu 0001  
                       _EECON2 000FA7                         _ANCON0 000F48                         _ANCON1 000F49  
             ___awdiv@dividend 0001               __end_of___awtoft 3798               __end_of___ftpack 2BEC  
             __end_of___lbtoft 393C               __end_of__delay_s 351E               __end_of___lltoft 346A  
               __CFG_WDTEN$OFF 000000               RtccWriteDate@pDt 0001                         _RTCCFG 000F3F  
               __CFG_WPCFG$OFF 000000            input_password@digit 00C8            input_password@input 00C7  
             __end_of_caratula 3A92                 __CFG_WPDIS$OFF 000000                 __CFG_XINST$OFF 000000  
             __end_of_lcd_init 317C               __end_of_lcd_putc 3656                         ___ftge 2C84  
            ?_lcd_setcursor_vb 0005                         ___wmul 38EE                      ??___awdiv 0005  
                    ??___ftadd 0022                 __CFG_STVREN$ON 000000                      ??___ftdiv 000F  
                    ??___ftneg 0004                         _diasem 00CE                      ??___ftmul 0013  
                       _anio_d 00DA                      ??___ftsub 002E                      ??___fttol 002C  
                       _anio_u 00DB                      ??___lwdiv 0005                      ??___lwmod 000C  
                 ?_review_code 0003             ??_lcd_setcursor_vb 0006                         _hora_d 00DF  
                       _hora_u 00E0                _sensorDisparado 0097                         clear_0 37A2  
             ___awdiv@quotient 0007                         _minuto 00D4          ?_set_desactive_vision 000B  
        __size_of_change_state 002E          __end_of_RtccWriteDate 1F9E               __end_of_setClock 27C2  
        __end_of_RtccWriteTime 2304                  checkPass@pass 0001                         floor@i 0044  
                       floor@x 0041          ___ftmul@f3_as_product 0017               RtccWriteTime@pTm 0001  
                    ??_isdigit 0001                   __mediumconst 0000               __end_of_ver_info 297E  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
       __size_of_is_not_letter 0030                      ??_sprintf 0017                      ??_twinkle 0025  
       __size_of_read_keyboard 02B8          __end_of_not_fill_pass 3A10               __end_ofexp@coeff 0F2D  
             __end_oflog@coeff 0F48                     __accesstop 0060        __end_of__initialization 37C8  
                   ___altoft@c 0037                     ___ftadd@f1 001C                     ___ftadd@f2 001F  
           __size_of_Write_RTC 019C                     ___ftge@ff1 0001                     ___ftge@ff2 0004  
                 eval_poly@res 0031                  ___rparam_used 000001                     ___ftdiv@f1 0009  
                   ___ftdiv@f2 000C                     ___ftdiv@f3 0013                     ___ftneg@f1 0001  
          _input_old_pass$3114 00BF            _input_old_pass$3115 00C2                     ___awtoft@c 0009  
                   ___lbtoft@c 000C                   _change_state 3894                     ___ftmul@f1 000D  
                   ___ftmul@f2 0010                     ___ftsub@f1 0028                     ___ftsub@f2 002B  
                   ___fttol@f1 0028                 __pcstackCOMRAM 0001                  __end_of_Setup 369C  
                 __pidataBANK0 3A5A             __size_of_checkPass 001C                  __end_of_clear 39FC  
                   ___lltoft@c 0009                  __end_of_floor 28A0                  __end_of_ldexp 2A52  
                __end_of_frexp 2E42               ??_dispararSensor 0015            _input_new_pass$3116 00BF  
          _input_new_pass$3117 00C2              _evalueChanceOfRaw 33A8                __CFG_DSWDTPS$G2 000000  
           ?_evalueChanceOfRaw 0001                     _diaDisparo 0082                review_code@pass 0005  
              __CFG_OSC$INTOSC 000000                        ??_Setup 000E            ??_evalueChanceOfRaw 0005  
            lcd_gotoxy@address 0007                        ??_clear 0006             __size_of_lcd_putrs 0054  
                      ??_floor 0044                        ??_ldexp 0039                        ??_frexp 0006  
                 sprintf@width 0021                     __pbssBANK0 0060                     _changePass 3A78  
           __size_of_eval_poly 00D4                      ?_Read_RTC 0001           __size_of_obtain_pass 00EC  
                   _dia_semana 00DC      RtccWriteTime@tempHourWDay 000A                 _clear_keyboard 3A82  
                    ?_RtccWrOn 0001                 lcd_send_byte@n 0003                  _is_not_letter 3834  
                      ?___ftge 0001      __end_of_evalueChanceOfRaw 340A                        ?___wmul 0001  
                ?_RtccReadDate 0001             __size_of_next_code 004C         ??_set_desactive_vision 000D  
                ?_RtccReadTime 0001                  _read_keyboard 0FE4                   ?_Delay1KTCYx 0001  
                    ?___altoft 0037                      ?___awtoft 0009                      ?___ftpack 0001  
                    ?___lbtoft 0009                      ?__delay_s 0009                      ?___lltoft 0009  
            __end_of_Write_RTC 1A48                 __delay_s@index 000E                     _lcd_comand 3A6A  
                    ?_caratula 0001                     _lcd_gotoxy 3984                        _RTCVALH 000F99  
                      _RTCVALL 000F98                      ?_lcd_init 0001              __end_of_checkPass 39E6  
                    ?_lcd_putc 0001                     ??_Read_RTC 0013           __size_of_select_menu 0098  
             ??_input_old_pass 0058         __end_of_clear_keyboard 3A8A               ??_input_new_pass 0058  
                   _mesDisparo 008E               ??_input_password 005F                      ?_setClock 0001  
                   _minDisparo 0090         ver_opcion_cambio@input 005B                        __Hparam 0000  
                      __Lparam 0000                 ?_is_not_letter 0001       __size_of_lcd_send_nibble 0076  
                   ??_RtccWrOn 0001                 ??_RtccReadDate 0003                      ?_ver_info 0001  
              __size_of___ftge 0096                 ??_RtccReadTime 0003                        ___awdiv 2D1A  
                      ___ftadd 16E8              __end_of_lcd_putrs 3572                        ___ftdiv 25F4  
               ?_read_keyboard 0001                        ___ftneg 3960                __size_of___wmul 0028  
                      ___ftmul 2406                        ___ftsub 369C                        ___fttol 2304  
                      ___lwdiv 346A                        ___lwmod 35BE                   __psmallconst 0F00  
                   ??___altoft 003B                    _RtccTimeVal 0078                        __pcinit 3798  
                      _fecha_d 00DD                        _fecha_u 00DE                     ??___awtoft 000C  
                   ??___ftpack 0006                     ??___lbtoft 000C              __end_of_eval_poly 2B26  
                      __ramtop 0F00      __size_of_configurar_reloj 0090                     ??__delay_s 000B  
                   ??___lltoft 000D                        __ptext0 3804                        __ptext1 32DC  
                      __ptext2 3342                        __ptext3 2ED2                        __ptext4 38C2  
                      __ptext5 393C                        __ptext6 3894                        __ptext7 2508  
                      __ptext8 3572                        __ptext9 3834           __size_of_review_code 0024  
                      _buffer2 0098                      _T1CONbits 000FCD                        _dpowers 0F01  
                 __size_of_exp 01E8                   __size_of_log 0120                        _isdigit 39A8  
                 __size_of_pow 0182                     ??_caratula 0006                        _newpass 0092  
                      _segundo 0094                        _sprintf 129C                     ??_lcd_init 0005  
                   ??_lcd_putc 0008                        _twinkle 3342           end_of_initialization 37C8  
            __end_of_next_code 35BE                        exp@sign 0051                    ?_changePass 0001  
         lcd_send_byte@address 0004                  __Lmediumconst 0000                ?_clear_keyboard 0001  
                   ??_setClock 000E                        pow@sign 00BA     __size_of_evalueChanceOfRaw 0062  
                 twinkle@input 0025                        postdec1 000FE5                        postdec2 000FDD  
                   ??_ver_info 0025                        postinc0 000FEE                        postinc2 000FDE  
                   _set_vision 32DC          __end_of_lcd_send_byte 3804                      _PORTAbits 000F80  
                    _PORTCbits 000F82               __CFG_DSBOREN$OFF 000000                     _show_error 371E  
                  ?_lcd_comand 0001               __CFG_CPUDIV$OSC1 000000                  ?_show_success 0001  
                    _TRISBbits 000F93                    ?_lcd_gotoxy 0005      __size_of_lcd_setcursor_vb 0014  
              _LCD_INIT_STRING 0F0B                    ___ftdiv@exp 0016               __CFG_IOL1WAY$OFF 000000  
    RtccWriteDate@tempDayMonth 000A                ??_is_not_letter 0001            __CFG_MSSP7B_EN$MSK7 000000  
                  ___ftmul@exp 0016                ??_read_keyboard 0024               Delay100TCYx@unit 0001  
                   _write_Date 2FEE                 __end_of___ftge 2D1A                    __delay_s@it 000C  
               __end_of___wmul 3916      RtccWriteDate@tempHourWDay 000C      set_desactive_vision@digit 000B  
          __size_of_changePass 000A             not_fill_pass@digit 0001              ??_lcd_send_nibble 0001  
                __pbitbssBANK0 0738           __size_of_Delay1KTCYx 0012               __CFG_DSWDTEN$OFF 000000  
                   floor@expon 0047                 changePass@pass 0001                 ??_show_success 0010  
          start_initialization 3798                     eval_poly@d 002B                     eval_poly@n 002D  
                   eval_poly@x 0028                     ldexp@value 0034                    __end_of_exp 16E8  
                  __end_of_log 21F8                    __end_of_pow 1BCA           __end_of_RtccReadDate 2FEE  
         __end_of_RtccReadTime 32DC               review_code@digit 0003                     frexp@value 0001  
         RtccWriteTime@wasAlrm 0006           RtccWriteTime@wasWrEn 0007         __size_of_RtccWriteDate 0146  
              RtccWriteDate@di 0003         __size_of_RtccWriteTime 010C              __size_of_Read_RTC 0146  
          __size_of_lcd_comand 000E                       ??___ftge 0007            __size_of_lcd_gotoxy 0024  
                     ??___wmul 0005                    ?_set_vision 0001                    __pdataBANK0 00CA  
            __size_of_RtccWrOn 0012                RtccWriteTime@di 0003               __CFG_LPT1OSC$OFF 000000  
             _configurar_reloj 2E42         __size_of_not_fill_pass 0014                    ?_show_error 0001  
            __size_of___altoft 007C                    _ALRMCFGbits 000F91        __end_of_LCD_INIT_STRING 0F0F  
            __size_of___awtoft 003C              __size_of___ftpack 00C6              __size_of___lbtoft 0026  
        configurar_reloj@input 0026              __size_of__delay_s 0058              __size_of___lltoft 0060  
                __pcstackBANK0 00B4                      _Write_RTC 18AC                   _isdigit$2721 0002  
            __size_of_caratula 0008                  ??_obtain_pass 005D                Delay1KTCYx@unit 0001  
            __size_of_lcd_init 0080                    sprintf@flag 001D              __size_of_lcd_putc 004C  
                  sprintf@prec 0020                      _checkPass 39CA                      __pnvBANK0 00DA  
             ___lwdiv@dividend 0001                  ?_Delay100TCYx 0001              __size_of_setClock 00E2  
                     ?___awdiv 0001                       ?___ftadd 001C                       ?___ftdiv 0009  
                     ?___ftneg 0001                       ?___ftmul 000D                       ?___ftsub 0028  
                     ?___fttol 0028                       ?___lwdiv 0001                    ?_write_Date 0001  
                     ?___lwmod 0008              __size_of_ver_info 00DE        RtccWriteTime@tempMinSec 0008  
__size_of_set_desactive_vision 002C                      _lcd_putrs 351E        lcd_setcursor_vb@visible 0006  
                _RtccWriteDate 1E58                    __smallconst 0F00                  _RtccWriteTime 21F8  
                     ?_isdigit 0001                      _eval_poly 2A52           __CFG_RTCOSC$T1OSCREF 000000  
             _lcd_setcursor_vb 3A10                 __size_of_Setup 0046                     ?_Write_RTC 0001  
      __size_of_dispararSensor 0030               ___lwdiv@quotient 0005                  ??_select_menu 005C  
               __size_of_clear 0016               ??_clear_keyboard 0001                       ?_sprintf 000D  
               __size_of_floor 00DE                 __size_of_ldexp 00D4                 __size_of_frexp 0092  
                     ?_twinkle 0001                   ??_changePass 0003            __size_of_set_vision 0066  
             _RtccAlrmTimeDate 0060                  _not_fill_pass 39FC                 ___wmul@product 0005  
              __delay_s@millis 0009                       _LATAbits 000F89                       _LATBbits 000F8A  
                   ?_checkPass 0001                      _next_code 3572                       _PIE3bits 000FA3  
          __end_of_obtain_pass 25F4            __size_of_show_error 003E                      _segundo_d 00E5  
               ??_Delay100TCYx 0001                      _segundo_u 00E6           __end_of_show_success 371E  
             __CFG_WDTPS$32768 000000             _is_not_letter$1340 0001                  ??_review_code 0007  
           RtccWriteDate@wasOn 0005             _Rtcc_read_TimeDate 0070           dispararSensor@sensor 0013  
               ?_RtccWriteDate 0001                     ?_lcd_putrs 0009              ___wmul@multiplier 0001  
           __end_of_changePass 3A82                 ?_RtccWriteTime 0001             evalueChanceOfRaw@x 0001  
           evalueChanceOfRaw@y 0003                      lcd_init@i 0005          __size_of_RtccReadDate 008E  
                 ??_lcd_comand 0005                     ?_eval_poly 0028                      lcd_putc@c 0008  
        __size_of_RtccReadTime 006E                   ??_lcd_gotoxy 0006                      copy_data0 37BC  
               ?_not_fill_pass 0001            __size_of_write_Date 0088                       _Read_RTC 1D12  
            configurar_reloj@x 0028              configurar_reloj@y 0027                     ?_next_code 0008  
                  _horaDisparo 0086            __end_of_select_menu 2C84                      frexp@eptr 0004  
              _lcd_send_nibble 31F8                       __Hrparam 0000                  ?_change_state 0001  
                     _RtccDate 00AC                       __Lrparam 0000                       _RtccTime 00B0  
                     _RtccWrOn 3A48             __end_of_lcd_comand 3A78             __end_of_lcd_gotoxy 39A8  
                 _RtccReadDate 2F60               __size_of___awdiv 0096        __size_of_input_old_pass 0148  
             __size_of___ftadd 01C4                   _RtccReadTime 326E        __size_of_input_new_pass 013A  
             __size_of___ftdiv 00EC               __size_of___ftneg 0024                       ___altoft 317C  
             __size_of___ftmul 0102               __size_of___ftsub 0044               __size_of___fttol 0102  
             __size_of___lwdiv 005C               __size_of___lwmod 004C                       ___awtoft 375C  
                     ___ftpack 2B26                       ___lbtoft 3916        __size_of_input_password 008E  
                     __delay_s 34C6                       ___lltoft 340A                   _RtccTimeDate 0068  
                     _exp$3120 004C            __end_of_review_code 3960                     sprintf@val 001E  
                    setClock@x 000F                       _caratula 3A8A               __size_of_isdigit 0022  
              ___lwdiv@divisor 0003                    ??_Write_RTC 000E                ___lwdiv@counter 0007  
                     __ptext10 2BEC                       __ptext11 3076                       __ptext20 297E  
                     __ptext12 36E0                       __ptext21 27C2                       __ptext13 371E  
                     __ptext30 3960                       __ptext22 2DB0                       __ptext14 1BCA  
                     __ptext31 25F4                       __ptext23 2304                       __ptext15 39CA  
                     __ptext40 28A0                       __ptext32 375C                       __ptext24 2C84  
                     __ptext16 1F9E                       __ptext41 39E6                       __ptext33 340A  
                     __ptext25 317C                       __ptext17 1A48                       __ptext50 38EE  
                     __ptext42 3864                       __ptext34 39FC                       __ptext26 2A52  
                     __ptext18 20D8                       __ptext51 35BE                       __ptext43 2E42  
                     __ptext35 3A82                       __ptext27 2406                       __ptext19 1500  
                     __ptext60 3A8A                       __ptext52 346A                       __ptext44 2FEE  
                     __ptext36 34C6                       __ptext28 369C                       __ptext61 3656  
                     __ptext53 351E                       __ptext45 3A10                       __ptext37 3916  
                     __ptext29 16E8                       __ptext70 21F8                       __ptext62 30FC  
                     __ptext54 360A                       __ptext46 26E0                       __ptext38 2B26  
                     __ptext71 1E58                       __ptext63 3A24                       __ptext55 3984  
                     __ptext47 0FE4                       __ptext39 3A78                       __ptext72 3A48  
                     __ptext64 3A6A                       __ptext56 33A8                       __ptext48 129C  
                     __ptext65 37D2                       __ptext57 1D12                       __ptext49 39A8  
                     __ptext66 31F8                       __ptext58 326E                       __ptext67 3A36  
                     __ptext59 2F60                       __ptext68 18AC                       __ptext69 2D1A  
                     _lcd_init 30FC                       _lcd_putc 360A                       _pow$3118 00B4  
                     _pow$3119 00B7                    _obtain_pass 2508                 next_code@digit 0008  
             __size_of_sprintf 0264               __size_of_twinkle 0066                 next_code@input 000A  
          input_old_pass@digit 00C8         __size_of_lcd_send_byte 0032       __end_of_configurar_reloj 2ED2  
          input_old_pass@input 00C7                  __size_of_main 0030                    ??_checkPass 0003  
                     _setClock 26E0                 ??_change_state 0001                       _minuto_d 00E3  
                     _minuto_u 00E4                       _password 00D6          __end_of_is_not_letter 3864  
                     _ver_info 28A0                   ??_set_vision 005F          __end_of_read_keyboard 129C  
                ??_Delay1KTCYx 0001                ??_RtccWriteDate 0004                ??_RtccWriteTime 0004  
          input_new_pass@digit 00C6                    ??_lcd_putrs 000B            input_new_pass@input 00C5  
                 ??_show_error 0010                       exp@coeff 0F0F                       log@coeff 0F2D  
                  _OSCTUNEbits 000F9B                     _INTCONbits 000FF2                    ??_eval_poly 002F  
           RtccWriteTime@wasOn 0005                 _dispararSensor 3864           __end_of_Delay100TCYx 3A48  
                     isdigit@c 0003                ??_not_fill_pass 0003                    _select_menu 2BEC  
            _ver_opcion_cambio 3076                      sprintf@ap 001B        __end_of_lcd_send_nibble 326E  
                    sprintf@sp 000D             __end_of_set_vision 3342             ?_ver_opcion_cambio 0001  
        lcd_setcursor_vb@blink 0005          __size_of_show_success 003E               ___lwmod@dividend 0008  
                  ??_next_code 000C   ver_opcion_cambio@old_correct 005A             input_old_pass@pass 00C5  
           __end_of_show_error 375C                     _OSCCONbits 000FD3            ??_ver_opcion_cambio 005A  
     __end_of_lcd_setcursor_vb 3A24          RtccWriteDate@tempYear 0007                   ??_write_Date 0024  
                  _review_code 393C                  _lcd_send_byte 37D2                     _RTCCFGbits 000F3F  
                     sprintf@c 0023                       sprintf@f 000F         __end_of_dispararSensor 3894  
              ___lwmod@divisor 000A            __end_of_Delay1KTCYx 3A36                ___lwmod@counter 000C  
         RtccWriteDate@wasAlrm 0006      __end_of_ver_opcion_cambio 30FC                   _show_success 36E0  
         RtccWriteDate@wasWrEn 0009               _obtain_pass$3112 00BF               _obtain_pass$3113 00C2  
 __end_of_set_desactive_vision 38EE             __end_of_write_Date 3076          lcd_send_nibble@nibble 0002  
