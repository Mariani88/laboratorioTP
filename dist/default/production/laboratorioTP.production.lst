

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Sep 01 19:00:39 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    39  0000                     
    40                           	psect	idataCOMRAM
    41  001D2A                     __pidataCOMRAM:
    42                           	opt stack 0
    43                           
    44                           ;initializer for _anio
    45  001D2A  000F               	dw	15
    46                           
    47                           ;initializer for _dia
    48  001D2C  0008               	dw	8
    49                           
    50                           ;initializer for _diasem
    51  001D2E  0003               	dw	3
    52                           
    53                           ;initializer for _hora
    54  001D30  0012               	dw	18
    55                           
    56                           ;initializer for _mes
    57  001D32  0009               	dw	9
    58                           
    59                           ;initializer for _minuto
    60  001D34  001E               	dw	30
    61                           
    62                           	psect	smallconst
    63  000F00                     __psmallconst:
    64                           	opt stack 0
    65  000F00  00                 	db	0
    66  000F01                     _dpowers:
    67                           	opt stack 0
    68  000F01  0001               	dw	1
    69  000F03  000A               	dw	10
    70  000F05  0064               	dw	100
    71  000F07  03E8               	dw	1000
    72  000F09  2710               	dw	10000
    73  000F0B                     __end_of_dpowers:
    74                           	opt stack 0
    75  000F0B                     _LCD_INIT_STRING:
    76                           	opt stack 0
    77  000F0B  28                 	db	40
    78  000F0C  0C                 	db	12
    79  000F0D  01                 	db	1
    80  000F0E  06                 	db	6
    81  000F0F                     __end_of_LCD_INIT_STRING:
    82                           	opt stack 0
    83  000F0F                     STR_18:
    84                           
    85                           ; BSR set to: 15
    86  000F0F  20                 	db	32
    87  000F10  20                 	db	32
    88  000F11  20                 	db	32
    89  000F12  20                 	db	32
    90  000F13  20                 	db	32
    91  000F14  20                 	db	32
    92  000F15  20                 	db	32
    93  000F16  20                 	db	32
    94  000F17  20                 	db	32
    95  000F18  20                 	db	32
    96  000F19  20                 	db	32
    97  000F1A  20                 	db	32
    98  000F1B  20                 	db	32
    99  000F1C  20                 	db	32
   100  000F1D  20                 	db	32
   101  000F1E  20                 	db	32
   102  000F1F  20                 	db	32
   103  000F20  20                 	db	32
   104  000F21  20                 	db	32
   105  000F22  20                 	db	32
   106  000F23  20                 	db	32
   107  000F24  20                 	db	32
   108  000F25  20                 	db	32
   109  000F26  20                 	db	32
   110  000F27  20                 	db	32
   111  000F28  20                 	db	32
   112  000F29  20                 	db	32
   113  000F2A  20                 	db	32
   114  000F2B  20                 	db	32
   115  000F2C  20                 	db	32
   116  000F2D  20                 	db	32
   117  000F2E  20                 	db	32
   118  000F2F  00                 	db	0
   119  000F30                     STR_17:
   120                           
   121                           ; BSR set to: 15
   122  000F30  55                 	db	85	;'U'
   123  000F31  4E                 	db	78	;'N'
   124  000F32  49                 	db	73	;'I'
   125  000F33  4D                 	db	77	;'M'
   126  000F34  49                 	db	73	;'I'
   127  000F35  43                 	db	67	;'C'
   128  000F36  20                 	db	32
   129  000F37  20                 	db	32
   130  000F38  54                 	db	84	;'T'
   131  000F39  45                 	db	69	;'E'
   132  000F3A  43                 	db	67	;'C'
   133  000F3B  4C                 	db	76	;'L'
   134  000F3C  41                 	db	65	;'A'
   135  000F3D  44                 	db	68	;'D'
   136  000F3E  4F                 	db	79	;'O'
   137  000F3F  20                 	db	32
   138  000F40  00                 	db	0
   139  000F41                     STR_19:
   140                           
   141                           ; BSR set to: 15
   142  000F41  6E                 	db	110	;'n'
   143  000F42  75                 	db	117	;'u'
   144  000F43  6C                 	db	108	;'l'
   145  000F44  6C                 	db	108	;'l'
   146  000F45  20                 	db	32
   147  000F46  70                 	db	112	;'p'
   148  000F47  6F                 	db	111	;'o'
   149  000F48  69                 	db	105	;'i'
   150  000F49  6E                 	db	110	;'n'
   151  000F4A  74                 	db	116	;'t'
   152  000F4B  65                 	db	101	;'e'
   153  000F4C  72                 	db	114	;'r'
   154  000F4D  00                 	db	0
   155  000F4E                     STR_20:
   156                           
   157                           ; BSR set to: 15
   158  000F4E  65                 	db	101	;'e'
   159  000F4F  78                 	db	120	;'x'
   160  000F50  63                 	db	99	;'c'
   161  000F51  65                 	db	101	;'e'
   162  000F52  70                 	db	112	;'p'
   163  000F53  74                 	db	116	;'t'
   164  000F54  69                 	db	105	;'i'
   165  000F55  6F                 	db	111	;'o'
   166  000F56  6E                 	db	110	;'n'
   167  000F57  00                 	db	0
   168  000F58                     STR_1:
   169                           
   170                           ; BSR set to: 15
   171  000F58  25                 	db	37
   172  000F59  30                 	db	48	;'0'
   173  000F5A  31                 	db	49	;'1'
   174  000F5B  75                 	db	117	;'u'
   175  000F5C  00                 	db	0
   176  000F5D                     STR_15:
   177                           
   178                           ; BSR set to: 15
   179  000F5D  23                 	db	35
   180  000F5E  00                 	db	0
   181  000F5F                     STR_13:
   182                           
   183                           ; BSR set to: 15
   184  000F5F  2A                 	db	42
   185  000F60  00                 	db	0
   186  000F61                     STR_4:
   187                           
   188                           ; BSR set to: 15
   189  000F61  41                 	db	65	;'A'
   190  000F62  00                 	db	0
   191  000F63                     STR_8:
   192                           
   193                           ; BSR set to: 15
   194  000F63  42                 	db	66	;'B'
   195  000F64  00                 	db	0
   196  000F65                     STR_12:
   197                           
   198                           ; BSR set to: 15
   199  000F65  43                 	db	67	;'C'
   200  000F66  00                 	db	0
   201  000F67                     STR_16:
   202                           
   203                           ; BSR set to: 15
   204  000F67  44                 	db	68	;'D'
   205  000F68  00                 	db	0
   206  0000                     
   207                           ; #config settings
   208  000F69  00                 	db	0	; dummy byte at the end
   209  0000                     
   210                           	psect	nvCOMRAM
   211  000046                     __pnvCOMRAM:
   212                           	opt stack 0
   213  000046                     _anio_d:
   214                           	opt stack 0
   215  000046                     	ds	1
   216  000047                     _anio_u:
   217                           	opt stack 0
   218  000047                     	ds	1
   219  000048                     _dia_semana:
   220                           	opt stack 0
   221  000048                     	ds	1
   222  000049                     _fecha_d:
   223                           	opt stack 0
   224  000049                     	ds	1
   225  00004A                     _fecha_u:
   226                           	opt stack 0
   227  00004A                     	ds	1
   228  00004B                     _hora_d:
   229                           	opt stack 0
   230  00004B                     	ds	1
   231  00004C                     _hora_u:
   232                           	opt stack 0
   233  00004C                     	ds	1
   234  00004D                     _mes_d:
   235                           	opt stack 0
   236  00004D                     	ds	1
   237  00004E                     _mes_u:
   238                           	opt stack 0
   239  00004E                     	ds	1
   240  00004F                     _minuto_d:
   241                           	opt stack 0
   242  00004F                     	ds	1
   243  000050                     _minuto_u:
   244                           	opt stack 0
   245  000050                     	ds	1
   246  000051                     _segundo_d:
   247                           	opt stack 0
   248  000051                     	ds	1
   249  000052                     _segundo_u:
   250                           	opt stack 0
   251  000052                     	ds	1
   252  0000                     _ANCON0	set	3912
   253  0000                     _ANCON1	set	3913
   254  0000                     _RTCCFG	set	3903
   255  0000                     _RTCCFGbits	set	3903
   256  0000                     _ADCON0	set	4034
   257  0000                     _ADCON1	set	4033
   258  0000                     _ALRMCFGbits	set	3985
   259  0000                     _EECON2	set	4007
   260  0000                     _INTCONbits	set	4082
   261  0000                     _LATAbits	set	3977
   262  0000                     _LATBbits	set	3978
   263  0000                     _OSCCONbits	set	4051
   264  0000                     _OSCTUNEbits	set	3995
   265  0000                     _PIE3bits	set	4003
   266  0000                     _PORTAbits	set	3968
   267  0000                     _PORTCbits	set	3970
   268  0000                     _RTCVALH	set	3993
   269  0000                     _RTCVALL	set	3992
   270  0000                     _T1CONbits	set	4045
   271  0000                     _TRISA	set	3986
   272  0000                     _TRISB	set	3987
   273  0000                     _TRISBbits	set	3987
   274  0000                     _TRISC	set	3988
   275                           
   276                           	psect	cinit
   277  001BDA                     __pcinit:
   278                           	opt stack 0
   279  001BDA                     start_initialization:
   280                           	opt stack 0
   281  001BDA                     __initialization:
   282                           	opt stack 0
   283                           
   284                           ; Clear objects allocated to BANK0 (36 bytes)
   285  001BDA  EE00  F060         	lfsr	0,__pbssBANK0
   286  001BDE  0E24               	movlw	36
   287  001BE0                     clear_0:
   288  001BE0  6AEE               	clrf	postinc0,c
   289  001BE2  06E8               	decf	wreg,f,c
   290  001BE4  E1FD               	bnz	clear_0
   291                           
   292                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   293  001BE6  6A5F               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   294                           
   295                           ; Clear objects allocated to COMRAM (35 bytes)
   296  001BE8  EE00  F001         	lfsr	0,__pbssCOMRAM
   297  001BEC  0E23               	movlw	35
   298  001BEE                     clear_1:
   299  001BEE  6AEE               	clrf	postinc0,c
   300  001BF0  06E8               	decf	wreg,f,c
   301  001BF2  E1FD               	bnz	clear_1
   302                           
   303                           ; Initialize objects allocated to COMRAM (12 bytes)
   304                           ; load TBLPTR registers with __pidataCOMRAM
   305  001BF4  0E2A               	movlw	low __pidataCOMRAM
   306  001BF6  6EF6               	movwf	tblptrl,c
   307  001BF8  0E1D               	movlw	high __pidataCOMRAM
   308  001BFA  6EF7               	movwf	tblptrh,c
   309  001BFC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   310  001BFE  6EF8               	movwf	tblptru,c
   311  001C00  EE00  F053         	lfsr	0,__pdataCOMRAM
   312  001C04  EE10 F00C          	lfsr	1,12
   313  001C08                     copy_data0:
   314  001C08  0009               	tblrd		*+
   315  001C0A  CFF5 FFEE          	movff	tablat,postinc0
   316  001C0E  50E5               	movf	postdec1,w,c
   317  001C10  50E1               	movf	fsr1l,w,c
   318  001C12  E1FA               	bnz	copy_data0
   319  001C14                     end_of_initialization:
   320                           	opt stack 0
   321  001C14                     __end_of__initialization:
   322                           	opt stack 0
   323  001C14  0E00               	movlw	low (__Lmediumconst shr (0+16))
   324  001C16  6EF8               	movwf	tblptru,c
   325  001C18  0100               	movlb	0
   326  001C1A  EFAE  F00C         	goto	_main	;jump to C main() function
   327                           tblptru	equ	0xFF8
   328                           tblptrh	equ	0xFF7
   329                           tblptrl	equ	0xFF6
   330                           tablat	equ	0xFF5
   331                           postinc0	equ	0xFEE
   332                           wreg	equ	0xFE8
   333                           postdec1	equ	0xFE5
   334                           fsr1l	equ	0xFE1
   335                           
   336                           	psect	bitbssCOMRAM
   337  0002F8                     __pbitbssCOMRAM:
   338                           	opt stack 0
   339  0002F8                     _flag:
   340                           	opt stack 0
   341  0002F8                     	ds	1
   342                           tblptru	equ	0xFF8
   343                           tblptrh	equ	0xFF7
   344                           tblptrl	equ	0xFF6
   345                           tablat	equ	0xFF5
   346                           postinc0	equ	0xFEE
   347                           wreg	equ	0xFE8
   348                           postdec1	equ	0xFE5
   349                           fsr1l	equ	0xFE1
   350                           
   351                           	psect	bssCOMRAM
   352  000001                     __pbssCOMRAM:
   353                           	opt stack 0
   354  000001                     _RtccTimeDate:
   355                           	opt stack 0
   356  000001                     	ds	8
   357  000009                     _RtccTimeVal:
   358                           	opt stack 0
   359  000009                     	ds	4
   360  00000D                     _a:
   361                           	opt stack 0
   362  00000D                     	ds	2
   363  00000F                     _b:
   364                           	opt stack 0
   365  00000F                     	ds	2
   366  000011                     _c:
   367                           	opt stack 0
   368  000011                     	ds	2
   369  000013                     _i:
   370                           	opt stack 0
   371  000013                     	ds	2
   372  000015                     _j:
   373                           	opt stack 0
   374  000015                     	ds	2
   375  000017                     _k:
   376                           	opt stack 0
   377  000017                     	ds	2
   378  000019                     _segundo:
   379                           	opt stack 0
   380  000019                     	ds	2
   381  00001B                     _key:
   382                           	opt stack 0
   383  00001B                     	ds	1
   384  00001C                     _RtccDate:
   385                           	opt stack 0
   386  00001C                     	ds	4
   387  000020                     _RtccTime:
   388                           	opt stack 0
   389  000020                     	ds	4
   390                           tblptru	equ	0xFF8
   391                           tblptrh	equ	0xFF7
   392                           tblptrl	equ	0xFF6
   393                           tablat	equ	0xFF5
   394                           postinc0	equ	0xFEE
   395                           wreg	equ	0xFE8
   396                           postdec1	equ	0xFE5
   397                           fsr1l	equ	0xFE1
   398                           
   399                           	psect	dataCOMRAM
   400  000053                     __pdataCOMRAM:
   401                           	opt stack 0
   402  000053                     _anio:
   403                           	opt stack 0
   404  000053                     	ds	2
   405  000055                     _dia:
   406                           	opt stack 0
   407  000055                     	ds	2
   408  000057                     _diasem:
   409                           	opt stack 0
   410  000057                     	ds	2
   411  000059                     _hora:
   412                           	opt stack 0
   413  000059                     	ds	2
   414  00005B                     _mes:
   415                           	opt stack 0
   416  00005B                     	ds	2
   417  00005D                     _minuto:
   418                           	opt stack 0
   419  00005D                     	ds	2
   420                           tblptru	equ	0xFF8
   421                           tblptrh	equ	0xFF7
   422                           tblptrl	equ	0xFF6
   423                           tablat	equ	0xFF5
   424                           postinc0	equ	0xFEE
   425                           wreg	equ	0xFE8
   426                           postdec1	equ	0xFE5
   427                           fsr1l	equ	0xFE1
   428                           
   429                           	psect	bssBANK0
   430  000060                     __pbssBANK0:
   431                           	opt stack 0
   432  000060                     _RtccAlrmTimeDate:
   433                           	opt stack 0
   434  000060                     	ds	8
   435  000068                     _Rtcc_read_TimeDate:
   436                           	opt stack 0
   437  000068                     	ds	8
   438  000070                     _buffer2:
   439                           	opt stack 0
   440  000070                     	ds	20
   441                           tblptru	equ	0xFF8
   442                           tblptrh	equ	0xFF7
   443                           tblptrl	equ	0xFF6
   444                           tablat	equ	0xFF5
   445                           postinc0	equ	0xFEE
   446                           wreg	equ	0xFE8
   447                           postdec1	equ	0xFE5
   448                           fsr1l	equ	0xFE1
   449                           
   450                           	psect	cstackCOMRAM
   451  000024                     __pcstackCOMRAM:
   452                           	opt stack 0
   453  000024                     ??_isdigit:
   454  000024                     ??_lcd_send_nibble:
   455  000024                     ?___wmul:
   456                           	opt stack 0
   457  000024                     ?___awdiv:
   458                           	opt stack 0
   459  000024                     ?___lwdiv:
   460                           	opt stack 0
   461  000024                     Delay100TCYx@unit:
   462                           	opt stack 0
   463  000024                     Delay1KTCYx@unit:
   464                           	opt stack 0
   465  000024                     RtccWriteDate@pDt:
   466                           	opt stack 0
   467  000024                     RtccWriteTime@pTm:
   468                           	opt stack 0
   469  000024                     ___wmul@multiplier:
   470                           	opt stack 0
   471  000024                     ___awdiv@dividend:
   472                           	opt stack 0
   473  000024                     ___lwdiv@dividend:
   474                           	opt stack 0
   475                           
   476                           ; 2 bytes @ 0x0
   477  000024                     	ds	1
   478  000025                     lcd_send_nibble@nibble:
   479                           	opt stack 0
   480  000025                     _isdigit$2206:
   481                           	opt stack 0
   482                           
   483                           ; 1 bytes @ 0x1
   484  000025                     	ds	1
   485  000026                     lcd_send_byte@n:
   486                           	opt stack 0
   487  000026                     RtccWriteDate@di:
   488                           	opt stack 0
   489  000026                     RtccWriteTime@di:
   490                           	opt stack 0
   491  000026                     isdigit@c:
   492                           	opt stack 0
   493  000026                     ___wmul@multiplicand:
   494                           	opt stack 0
   495  000026                     ___awdiv@divisor:
   496                           	opt stack 0
   497  000026                     ___lwdiv@divisor:
   498                           	opt stack 0
   499                           
   500                           ; 2 bytes @ 0x2
   501  000026                     	ds	1
   502  000027                     lcd_send_byte@address:
   503                           	opt stack 0
   504                           
   505                           ; 1 bytes @ 0x3
   506  000027                     	ds	1
   507  000028                     lcd_init@i:
   508                           	opt stack 0
   509  000028                     lcd_gotoxy@y:
   510                           	opt stack 0
   511  000028                     lcd_comand@d:
   512                           	opt stack 0
   513  000028                     RtccWriteDate@wasOn:
   514                           	opt stack 0
   515  000028                     RtccWriteTime@wasOn:
   516                           	opt stack 0
   517  000028                     ___awdiv@counter:
   518                           	opt stack 0
   519  000028                     ___wmul@product:
   520                           	opt stack 0
   521  000028                     ___lwdiv@quotient:
   522                           	opt stack 0
   523                           
   524                           ; 2 bytes @ 0x4
   525  000028                     	ds	1
   526  000029                     lcd_gotoxy@x:
   527                           	opt stack 0
   528  000029                     RtccWriteDate@wasAlrm:
   529                           	opt stack 0
   530  000029                     RtccWriteTime@wasAlrm:
   531                           	opt stack 0
   532  000029                     ___awdiv@sign:
   533                           	opt stack 0
   534                           
   535                           ; 1 bytes @ 0x5
   536  000029                     	ds	1
   537  00002A                     lcd_gotoxy@address:
   538                           	opt stack 0
   539  00002A                     RtccWriteTime@wasWrEn:
   540                           	opt stack 0
   541  00002A                     ___lwdiv@counter:
   542                           	opt stack 0
   543  00002A                     RtccWriteDate@tempYear:
   544                           	opt stack 0
   545  00002A                     ___awdiv@quotient:
   546                           	opt stack 0
   547                           
   548                           ; 2 bytes @ 0x6
   549  00002A                     	ds	1
   550  00002B                     ?___lwmod:
   551                           	opt stack 0
   552  00002B                     lcd_putc@c:
   553                           	opt stack 0
   554  00002B                     RtccWriteTime@tempMinSec:
   555                           	opt stack 0
   556  00002B                     ___lwmod@dividend:
   557                           	opt stack 0
   558                           
   559                           ; 2 bytes @ 0x7
   560  00002B                     	ds	1
   561  00002C                     RtccWriteDate@wasWrEn:
   562                           	opt stack 0
   563  00002C                     lcd_putrs@ptr:
   564                           	opt stack 0
   565                           
   566                           ; 2 bytes @ 0x8
   567  00002C                     	ds	1
   568  00002D                     RtccWriteDate@tempDayMonth:
   569                           	opt stack 0
   570  00002D                     RtccWriteTime@tempHourWDay:
   571                           	opt stack 0
   572  00002D                     ___lwmod@divisor:
   573                           	opt stack 0
   574                           
   575                           ; 2 bytes @ 0x9
   576  00002D                     	ds	1
   577  00002E                     
   578                           ; 0 bytes @ 0xA
   579  00002E                     	ds	1
   580  00002F                     ___lwmod@counter:
   581                           	opt stack 0
   582  00002F                     RtccWriteDate@tempHourWDay:
   583                           	opt stack 0
   584                           
   585                           ; 2 bytes @ 0xB
   586  00002F                     	ds	1
   587  000030                     ?_sprintf:
   588                           	opt stack 0
   589  000030                     sprintf@sp:
   590                           	opt stack 0
   591                           
   592                           ; 2 bytes @ 0xC
   593  000030                     	ds	1
   594  000031                     
   595                           ; 0 bytes @ 0xD
   596  000031                     	ds	1
   597  000032                     sprintf@f:
   598                           	opt stack 0
   599                           
   600                           ; 2 bytes @ 0xE
   601  000032                     	ds	4
   602  000036                     ??_sprintf:
   603                           
   604                           ; 0 bytes @ 0x12
   605  000036                     	ds	4
   606  00003A                     sprintf@ap:
   607                           	opt stack 0
   608                           
   609                           ; 2 bytes @ 0x16
   610  00003A                     	ds	2
   611  00003C                     sprintf@flag:
   612                           	opt stack 0
   613                           
   614                           ; 1 bytes @ 0x18
   615  00003C                     	ds	1
   616  00003D                     sprintf@val:
   617                           	opt stack 0
   618                           
   619                           ; 2 bytes @ 0x19
   620  00003D                     	ds	2
   621  00003F                     sprintf@prec:
   622                           	opt stack 0
   623                           
   624                           ; 1 bytes @ 0x1B
   625  00003F                     	ds	1
   626  000040                     sprintf@width:
   627                           	opt stack 0
   628                           
   629                           ; 2 bytes @ 0x1C
   630  000040                     	ds	2
   631  000042                     sprintf@c:
   632                           	opt stack 0
   633                           
   634                           ; 1 bytes @ 0x1E
   635  000042                     	ds	1
   636  000043                     ??_read_keyboard:
   637                           
   638                           ; 0 bytes @ 0x1F
   639  000043                     	ds	1
   640  000044                     ??_main:
   641                           
   642                           ; 0 bytes @ 0x20
   643  000044                     	ds	1
   644  000045                     main@input:
   645                           	opt stack 0
   646                           
   647                           ; 1 bytes @ 0x21
   648  000045                     	ds	1
   649                           tblptru	equ	0xFF8
   650                           tblptrh	equ	0xFF7
   651                           tblptrl	equ	0xFF6
   652                           tablat	equ	0xFF5
   653                           postinc0	equ	0xFEE
   654                           wreg	equ	0xFE8
   655                           postdec1	equ	0xFE5
   656                           fsr1l	equ	0xFE1
   657                           
   658 ;;
   659 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   660 ;;
   661 ;; *************** function _main *****************
   662 ;; Defined at:
   663 ;;		line 97 in file "main.c"
   664 ;; Parameters:    Size  Location     Type
   665 ;;		None
   666 ;; Auto vars:     Size  Location     Type
   667 ;;  input           1   33[COMRAM] unsigned char 
   668 ;; Return value:  Size  Location     Type
   669 ;;                  2  465[None  ] int 
   670 ;; Registers used:
   671 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   672 ;; Tracked objects:
   673 ;;		On entry : 0/0
   674 ;;		On exit  : 0/0
   675 ;;		Unchanged: 0/0
   676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   678 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   679 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   680 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   681 ;;Total ram usage:        2 bytes
   682 ;; Hardware stack levels required when called:    6
   683 ;; This function calls:
   684 ;;		_Setup
   685 ;;		_caratula
   686 ;;		_lcd_gotoxy
   687 ;;		_lcd_putrs
   688 ;;		_read_keyboard
   689 ;; This function is called by:
   690 ;;		Startup code after reset
   691 ;; This function uses a non-reentrant model
   692 ;;
   693                           
   694                           	psect	text0
   695  00195C                     __ptext0:
   696                           	opt stack 0
   697  00195C                     _main:
   698                           	opt stack 25
   699                           
   700                           ;main.c: 98: Setup();
   701                           
   702                           ; BSR set to: 15
   703                           ;incstack = 0
   704  00195C  ECC9  F00D         	call	_Setup	;wreg free
   705                           
   706                           ;main.c: 99: caratula();
   707  001960  EC3C  F00E         	call	_caratula	;wreg free
   708  001964  D000               	goto	l2645
   709  001966                     l2645:
   710                           
   711                           ;main.c: 106: char input = read_keyboard();
   712  001966  ECB5  F007         	call	_read_keyboard	;wreg free
   713  00196A  6E45               	movwf	main@input,c
   714                           
   715                           ;main.c: 108: if (input == 16){
   716  00196C  0E10               	movlw	16
   717  00196E  1845               	xorwf	main@input,w,c
   718  001970  A4D8               	btfss	status,2,c
   719  001972  D7F9               	goto	l2645
   720                           
   721                           ;main.c: 109: lcd_gotoxy(1,1);
   722  001974  0E01               	movlw	1
   723  001976  6E28               	movwf	lcd_gotoxy@y,c
   724  001978  0E01               	movlw	1
   725  00197A  EC50  F00E         	call	_lcd_gotoxy
   726                           
   727                           ;main.c: 110: lcd_putrs("                                ");
   728  00197E  0E0F               	movlw	low STR_18
   729  001980  6E2C               	movwf	lcd_putrs@ptr,c
   730  001982  0E0F               	movlw	high STR_18
   731  001984  6E2D               	movwf	lcd_putrs@ptr+1,c
   732  001986  EC53  F00D         	call	_lcd_putrs	;wreg free
   733                           
   734                           ;main.c: 111: lcd_gotoxy(1,1);
   735  00198A  0E01               	movlw	1
   736  00198C  6E28               	movwf	lcd_gotoxy@y,c
   737  00198E  0E01               	movlw	1
   738  001990  EC50  F00E         	call	_lcd_gotoxy
   739                           
   740                           ;main.c: 112: lcd_putrs("null pointer");
   741  001994  0E41               	movlw	low STR_19
   742  001996  6E2C               	movwf	lcd_putrs@ptr,c
   743  001998  0E0F               	movlw	high STR_19
   744  00199A  6E2D               	movwf	lcd_putrs@ptr+1,c
   745  00199C  EC53  F00D         	call	_lcd_putrs	;wreg free
   746                           
   747                           ;main.c: 113: lcd_gotoxy(1,2);
   748  0019A0  0E02               	movlw	2
   749  0019A2  6E28               	movwf	lcd_gotoxy@y,c
   750  0019A4  0E01               	movlw	1
   751  0019A6  EC50  F00E         	call	_lcd_gotoxy
   752                           
   753                           ;main.c: 114: lcd_putrs("exception");
   754  0019AA  0E4E               	movlw	low STR_20
   755  0019AC  6E2C               	movwf	lcd_putrs@ptr,c
   756  0019AE  0E0F               	movlw	high STR_20
   757  0019B0  6E2D               	movwf	lcd_putrs@ptr+1,c
   758  0019B2  EC53  F00D         	call	_lcd_putrs	;wreg free
   759                           
   760                           ;main.c: 115: input = 0;
   761  0019B6  0E00               	movlw	0
   762  0019B8  6E45               	movwf	main@input,c
   763                           
   764                           ;main.c: 116: key = 0;
   765  0019BA  0E00               	movlw	0
   766  0019BC  6E1B               	movwf	_key,c
   767                           
   768                           ;main.c: 117: _delay((unsigned long)((98)*(8000000/4000.0)));
   769  0019BE  0EFF               	movlw	255
   770  0019C0  6E44               	movwf	??_main& (0+255),c
   771  0019C2  0E8A               	movlw	138
   772  0019C4                     u2317:
   773  0019C4  2EE8               	decfsz	wreg,f,c
   774  0019C6  D7FE               	goto	u2317
   775  0019C8  2E44               	decfsz	??_main& (0+255),f,c
   776  0019CA  D7FC               	goto	u2317
   777  0019CC  D000               	nop2	
   778  0019CE  D7CB               	goto	l2645
   779                           
   780                           ;main.c: 118: }
   781                           ;main.c: 119: }
   782                           ;main.c: 121: return 0;
   783                           ;	Return value of _main is never used
   784  0019D0  EF00  F000         	goto	start
   785  0019D4                     __end_of_main:
   786                           	opt stack 0
   787                           tblptru	equ	0xFF8
   788                           tblptrh	equ	0xFF7
   789                           tblptrl	equ	0xFF6
   790                           tablat	equ	0xFF5
   791                           postinc0	equ	0xFEE
   792                           wreg	equ	0xFE8
   793                           postdec1	equ	0xFE5
   794                           fsr1l	equ	0xFE1
   795                           status	equ	0xFD8
   796                           
   797 ;; *************** function _read_keyboard *****************
   798 ;; Defined at:
   799 ;;		line 4 in file "../Program Files/Unimic/unmc_01/sources/keyboard.c"
   800 ;; Parameters:    Size  Location     Type
   801 ;;		None
   802 ;; Auto vars:     Size  Location     Type
   803 ;;		None
   804 ;; Return value:  Size  Location     Type
   805 ;;                  1    wreg      unsigned char 
   806 ;; Registers used:
   807 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   808 ;; Tracked objects:
   809 ;;		On entry : 0/0
   810 ;;		On exit  : 0/0
   811 ;;		Unchanged: 0/0
   812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   815 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   816 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   817 ;;Total ram usage:        1 bytes
   818 ;; Hardware stack levels used:    1
   819 ;; Hardware stack levels required when called:    5
   820 ;; This function calls:
   821 ;;		_lcd_putrs
   822 ;;		_sprintf
   823 ;; This function is called by:
   824 ;;		_main
   825 ;; This function uses a non-reentrant model
   826 ;;
   827                           
   828                           	psect	text1
   829  000F6A                     __ptext1:
   830                           	opt stack 0
   831  000F6A                     _read_keyboard:
   832                           	opt stack 25
   833                           
   834                           ;keyboard.c: 5: LATAbits.LATA0=1;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=0;
   835                           
   836                           ;incstack = 0
   837  000F6A  8089               	bsf	3977,0,c	;volatile
   838  000F6C  9289               	bcf	3977,1,c	;volatile
   839  000F6E  9489               	bcf	3977,2,c	;volatile
   840  000F70  9689               	bcf	3977,3,c	;volatile
   841                           
   842                           ;keyboard.c: 6: {
   843                           ;keyboard.c: 7: if (PORTAbits.RA5==1){key=1;sprintf(buffer2,"%01u",key);lcd_putrs(buffer
      +                          2);while(PORTAbits.RA5==1){};}
   844  000F72  AA80               	btfss	3968,5,c	;volatile
   845  000F74  D018               	goto	l144
   846  000F76  0E01               	movlw	1
   847  000F78  6E1B               	movwf	_key,c
   848  000F7A  0E70               	movlw	low _buffer2
   849  000F7C  6E30               	movwf	sprintf@sp,c
   850  000F7E  0E00               	movlw	high _buffer2
   851  000F80  6E31               	movwf	sprintf@sp+1,c
   852  000F82  0E58               	movlw	low STR_1
   853  000F84  6E32               	movwf	sprintf@f,c
   854  000F86  0E0F               	movlw	high STR_1
   855  000F88  6E33               	movwf	sprintf@f+1,c
   856  000F8A  C01B  F034         	movff	_key,?_sprintf+4
   857  000F8E  6A35               	clrf	?_sprintf+5,c
   858  000F90  EC24  F009         	call	_sprintf	;wreg free
   859  000F94  0E70               	movlw	low _buffer2
   860  000F96  6E2C               	movwf	lcd_putrs@ptr,c
   861  000F98  0E00               	movlw	high _buffer2
   862  000F9A  6E2D               	movwf	lcd_putrs@ptr+1,c
   863  000F9C  EC53  F00D         	call	_lcd_putrs	;wreg free
   864  000FA0  D000               	goto	l145
   865  000FA2                     l145:
   866  000FA2  BA80               	btfsc	3968,5,c	;volatile
   867  000FA4  D7FE               	goto	l145
   868  000FA6                     l144:
   869                           
   870                           ;keyboard.c: 8: if (PORTAbits.RA7==1){key=2;sprintf(buffer2,"%01u",key);lcd_putrs(buffer
      +                          2);while(PORTAbits.RA7==1){};}
   871  000FA6  AE80               	btfss	3968,7,c	;volatile
   872  000FA8  D018               	goto	l148
   873  000FAA  0E02               	movlw	2
   874  000FAC  6E1B               	movwf	_key,c
   875  000FAE  0E70               	movlw	low _buffer2
   876  000FB0  6E30               	movwf	sprintf@sp,c
   877  000FB2  0E00               	movlw	high _buffer2
   878  000FB4  6E31               	movwf	sprintf@sp+1,c
   879  000FB6  0E58               	movlw	low STR_1
   880  000FB8  6E32               	movwf	sprintf@f,c
   881  000FBA  0E0F               	movlw	high STR_1
   882  000FBC  6E33               	movwf	sprintf@f+1,c
   883  000FBE  C01B  F034         	movff	_key,?_sprintf+4
   884  000FC2  6A35               	clrf	?_sprintf+5,c
   885  000FC4  EC24  F009         	call	_sprintf	;wreg free
   886  000FC8  0E70               	movlw	low _buffer2
   887  000FCA  6E2C               	movwf	lcd_putrs@ptr,c
   888  000FCC  0E00               	movlw	high _buffer2
   889  000FCE  6E2D               	movwf	lcd_putrs@ptr+1,c
   890  000FD0  EC53  F00D         	call	_lcd_putrs	;wreg free
   891  000FD4  D000               	goto	l149
   892  000FD6                     l149:
   893  000FD6  BE80               	btfsc	3968,7,c	;volatile
   894  000FD8  D7FE               	goto	l149
   895  000FDA                     l148:
   896                           
   897                           ;keyboard.c: 9: if (PORTAbits.RA6==1){key=3;sprintf(buffer2,"%01u",key);lcd_putrs(buffer
      +                          2);while(PORTAbits.RA6==1){};}
   898  000FDA  AC80               	btfss	3968,6,c	;volatile
   899  000FDC  D018               	goto	l152
   900  000FDE  0E03               	movlw	3
   901  000FE0  6E1B               	movwf	_key,c
   902  000FE2  0E70               	movlw	low _buffer2
   903  000FE4  6E30               	movwf	sprintf@sp,c
   904  000FE6  0E00               	movlw	high _buffer2
   905  000FE8  6E31               	movwf	sprintf@sp+1,c
   906  000FEA  0E58               	movlw	low STR_1
   907  000FEC  6E32               	movwf	sprintf@f,c
   908  000FEE  0E0F               	movlw	high STR_1
   909  000FF0  6E33               	movwf	sprintf@f+1,c
   910  000FF2  C01B  F034         	movff	_key,?_sprintf+4
   911  000FF6  6A35               	clrf	?_sprintf+5,c
   912  000FF8  EC24  F009         	call	_sprintf	;wreg free
   913  000FFC  0E70               	movlw	low _buffer2
   914  000FFE  6E2C               	movwf	lcd_putrs@ptr,c
   915  001000  0E00               	movlw	high _buffer2
   916  001002  6E2D               	movwf	lcd_putrs@ptr+1,c
   917  001004  EC53  F00D         	call	_lcd_putrs	;wreg free
   918  001008  D000               	goto	l153
   919  00100A                     l153:
   920  00100A  BC80               	btfsc	3968,6,c	;volatile
   921  00100C  D7FE               	goto	l153
   922  00100E                     l152:
   923                           
   924                           ;keyboard.c: 10: if (PORTCbits.RC2==1){key=11;lcd_putrs("A");while(PORTCbits.RC2==1){};}
   925  00100E  A482               	btfss	3970,2,c	;volatile
   926  001010  D00B               	goto	l156
   927  001012  0E0B               	movlw	11
   928  001014  6E1B               	movwf	_key,c
   929  001016  0E61               	movlw	low STR_4
   930  001018  6E2C               	movwf	lcd_putrs@ptr,c
   931  00101A  0E0F               	movlw	high STR_4
   932  00101C  6E2D               	movwf	lcd_putrs@ptr+1,c
   933  00101E  EC53  F00D         	call	_lcd_putrs	;wreg free
   934  001022  D000               	goto	l157
   935  001024                     l157:
   936  001024  B482               	btfsc	3970,2,c	;volatile
   937  001026  D7FE               	goto	l157
   938  001028                     l156:
   939                           
   940                           ;keyboard.c: 11: }
   941                           ;keyboard.c: 12: LATAbits.LATA0=0;LATAbits.LATA1=1;LATAbits.LATA2=0;LATAbits.LATA3=0;
   942  001028  9089               	bcf	3977,0,c	;volatile
   943  00102A  8289               	bsf	3977,1,c	;volatile
   944  00102C  9489               	bcf	3977,2,c	;volatile
   945  00102E  9689               	bcf	3977,3,c	;volatile
   946                           
   947                           ;keyboard.c: 13: {
   948                           ;keyboard.c: 14: if (PORTAbits.RA5==1){key=4;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA5==1){};}
   949  001030  AA80               	btfss	3968,5,c	;volatile
   950  001032  D018               	goto	l160
   951  001034  0E04               	movlw	4
   952  001036  6E1B               	movwf	_key,c
   953  001038  0E70               	movlw	low _buffer2
   954  00103A  6E30               	movwf	sprintf@sp,c
   955  00103C  0E00               	movlw	high _buffer2
   956  00103E  6E31               	movwf	sprintf@sp+1,c
   957  001040  0E58               	movlw	low STR_1
   958  001042  6E32               	movwf	sprintf@f,c
   959  001044  0E0F               	movlw	high STR_1
   960  001046  6E33               	movwf	sprintf@f+1,c
   961  001048  C01B  F034         	movff	_key,?_sprintf+4
   962  00104C  6A35               	clrf	?_sprintf+5,c
   963  00104E  EC24  F009         	call	_sprintf	;wreg free
   964  001052  0E70               	movlw	low _buffer2
   965  001054  6E2C               	movwf	lcd_putrs@ptr,c
   966  001056  0E00               	movlw	high _buffer2
   967  001058  6E2D               	movwf	lcd_putrs@ptr+1,c
   968  00105A  EC53  F00D         	call	_lcd_putrs	;wreg free
   969  00105E  D000               	goto	l161
   970  001060                     l161:
   971  001060  BA80               	btfsc	3968,5,c	;volatile
   972  001062  D7FE               	goto	l161
   973  001064                     l160:
   974                           
   975                           ;keyboard.c: 15: if (PORTAbits.RA7==1){key=5;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
   976  001064  AE80               	btfss	3968,7,c	;volatile
   977  001066  D018               	goto	l164
   978  001068  0E05               	movlw	5
   979  00106A  6E1B               	movwf	_key,c
   980  00106C  0E70               	movlw	low _buffer2
   981  00106E  6E30               	movwf	sprintf@sp,c
   982  001070  0E00               	movlw	high _buffer2
   983  001072  6E31               	movwf	sprintf@sp+1,c
   984  001074  0E58               	movlw	low STR_1
   985  001076  6E32               	movwf	sprintf@f,c
   986  001078  0E0F               	movlw	high STR_1
   987  00107A  6E33               	movwf	sprintf@f+1,c
   988  00107C  C01B  F034         	movff	_key,?_sprintf+4
   989  001080  6A35               	clrf	?_sprintf+5,c
   990  001082  EC24  F009         	call	_sprintf	;wreg free
   991  001086  0E70               	movlw	low _buffer2
   992  001088  6E2C               	movwf	lcd_putrs@ptr,c
   993  00108A  0E00               	movlw	high _buffer2
   994  00108C  6E2D               	movwf	lcd_putrs@ptr+1,c
   995  00108E  EC53  F00D         	call	_lcd_putrs	;wreg free
   996  001092  D000               	goto	l165
   997  001094                     l165:
   998  001094  BE80               	btfsc	3968,7,c	;volatile
   999  001096  D7FE               	goto	l165
  1000  001098                     l164:
  1001                           
  1002                           ;keyboard.c: 16: if (PORTAbits.RA6==1){key=6;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA6==1){};}
  1003  001098  AC80               	btfss	3968,6,c	;volatile
  1004  00109A  D018               	goto	l168
  1005  00109C  0E06               	movlw	6
  1006  00109E  6E1B               	movwf	_key,c
  1007  0010A0  0E70               	movlw	low _buffer2
  1008  0010A2  6E30               	movwf	sprintf@sp,c
  1009  0010A4  0E00               	movlw	high _buffer2
  1010  0010A6  6E31               	movwf	sprintf@sp+1,c
  1011  0010A8  0E58               	movlw	low STR_1
  1012  0010AA  6E32               	movwf	sprintf@f,c
  1013  0010AC  0E0F               	movlw	high STR_1
  1014  0010AE  6E33               	movwf	sprintf@f+1,c
  1015  0010B0  C01B  F034         	movff	_key,?_sprintf+4
  1016  0010B4  6A35               	clrf	?_sprintf+5,c
  1017  0010B6  EC24  F009         	call	_sprintf	;wreg free
  1018  0010BA  0E70               	movlw	low _buffer2
  1019  0010BC  6E2C               	movwf	lcd_putrs@ptr,c
  1020  0010BE  0E00               	movlw	high _buffer2
  1021  0010C0  6E2D               	movwf	lcd_putrs@ptr+1,c
  1022  0010C2  EC53  F00D         	call	_lcd_putrs	;wreg free
  1023  0010C6  D000               	goto	l169
  1024  0010C8                     l169:
  1025  0010C8  BC80               	btfsc	3968,6,c	;volatile
  1026  0010CA  D7FE               	goto	l169
  1027  0010CC                     l168:
  1028                           
  1029                           ;keyboard.c: 17: if (PORTCbits.RC2==1){key=12;lcd_putrs("B");while(PORTCbits.RC2==1){};}
  1030  0010CC  A482               	btfss	3970,2,c	;volatile
  1031  0010CE  D00B               	goto	l172
  1032  0010D0  0E0C               	movlw	12
  1033  0010D2  6E1B               	movwf	_key,c
  1034  0010D4  0E63               	movlw	low STR_8
  1035  0010D6  6E2C               	movwf	lcd_putrs@ptr,c
  1036  0010D8  0E0F               	movlw	high STR_8
  1037  0010DA  6E2D               	movwf	lcd_putrs@ptr+1,c
  1038  0010DC  EC53  F00D         	call	_lcd_putrs	;wreg free
  1039  0010E0  D000               	goto	l173
  1040  0010E2                     l173:
  1041  0010E2  B482               	btfsc	3970,2,c	;volatile
  1042  0010E4  D7FE               	goto	l173
  1043  0010E6                     l172:
  1044                           
  1045                           ;keyboard.c: 18: }
  1046                           ;keyboard.c: 19: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=1;LATAbits.LATA3=0;
  1047  0010E6  9089               	bcf	3977,0,c	;volatile
  1048  0010E8  9289               	bcf	3977,1,c	;volatile
  1049  0010EA  8489               	bsf	3977,2,c	;volatile
  1050  0010EC  9689               	bcf	3977,3,c	;volatile
  1051                           
  1052                           ;keyboard.c: 20: {
  1053                           ;keyboard.c: 21: if (PORTAbits.RA5==1){key=7;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA5==1){};}
  1054  0010EE  AA80               	btfss	3968,5,c	;volatile
  1055  0010F0  D018               	goto	l176
  1056  0010F2  0E07               	movlw	7
  1057  0010F4  6E1B               	movwf	_key,c
  1058  0010F6  0E70               	movlw	low _buffer2
  1059  0010F8  6E30               	movwf	sprintf@sp,c
  1060  0010FA  0E00               	movlw	high _buffer2
  1061  0010FC  6E31               	movwf	sprintf@sp+1,c
  1062  0010FE  0E58               	movlw	low STR_1
  1063  001100  6E32               	movwf	sprintf@f,c
  1064  001102  0E0F               	movlw	high STR_1
  1065  001104  6E33               	movwf	sprintf@f+1,c
  1066  001106  C01B  F034         	movff	_key,?_sprintf+4
  1067  00110A  6A35               	clrf	?_sprintf+5,c
  1068  00110C  EC24  F009         	call	_sprintf	;wreg free
  1069  001110  0E70               	movlw	low _buffer2
  1070  001112  6E2C               	movwf	lcd_putrs@ptr,c
  1071  001114  0E00               	movlw	high _buffer2
  1072  001116  6E2D               	movwf	lcd_putrs@ptr+1,c
  1073  001118  EC53  F00D         	call	_lcd_putrs	;wreg free
  1074  00111C  D000               	goto	l177
  1075  00111E                     l177:
  1076  00111E  BA80               	btfsc	3968,5,c	;volatile
  1077  001120  D7FE               	goto	l177
  1078  001122                     l176:
  1079                           
  1080                           ;keyboard.c: 22: if (PORTAbits.RA7==1){key=8;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  1081  001122  AE80               	btfss	3968,7,c	;volatile
  1082  001124  D018               	goto	l180
  1083  001126  0E08               	movlw	8
  1084  001128  6E1B               	movwf	_key,c
  1085  00112A  0E70               	movlw	low _buffer2
  1086  00112C  6E30               	movwf	sprintf@sp,c
  1087  00112E  0E00               	movlw	high _buffer2
  1088  001130  6E31               	movwf	sprintf@sp+1,c
  1089  001132  0E58               	movlw	low STR_1
  1090  001134  6E32               	movwf	sprintf@f,c
  1091  001136  0E0F               	movlw	high STR_1
  1092  001138  6E33               	movwf	sprintf@f+1,c
  1093  00113A  C01B  F034         	movff	_key,?_sprintf+4
  1094  00113E  6A35               	clrf	?_sprintf+5,c
  1095  001140  EC24  F009         	call	_sprintf	;wreg free
  1096  001144  0E70               	movlw	low _buffer2
  1097  001146  6E2C               	movwf	lcd_putrs@ptr,c
  1098  001148  0E00               	movlw	high _buffer2
  1099  00114A  6E2D               	movwf	lcd_putrs@ptr+1,c
  1100  00114C  EC53  F00D         	call	_lcd_putrs	;wreg free
  1101  001150  D000               	goto	l181
  1102  001152                     l181:
  1103  001152  BE80               	btfsc	3968,7,c	;volatile
  1104  001154  D7FE               	goto	l181
  1105  001156                     l180:
  1106                           
  1107                           ;keyboard.c: 23: if (PORTAbits.RA6==1){key=9;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA6==1){};}
  1108  001156  AC80               	btfss	3968,6,c	;volatile
  1109  001158  D018               	goto	l184
  1110  00115A  0E09               	movlw	9
  1111  00115C  6E1B               	movwf	_key,c
  1112  00115E  0E70               	movlw	low _buffer2
  1113  001160  6E30               	movwf	sprintf@sp,c
  1114  001162  0E00               	movlw	high _buffer2
  1115  001164  6E31               	movwf	sprintf@sp+1,c
  1116  001166  0E58               	movlw	low STR_1
  1117  001168  6E32               	movwf	sprintf@f,c
  1118  00116A  0E0F               	movlw	high STR_1
  1119  00116C  6E33               	movwf	sprintf@f+1,c
  1120  00116E  C01B  F034         	movff	_key,?_sprintf+4
  1121  001172  6A35               	clrf	?_sprintf+5,c
  1122  001174  EC24  F009         	call	_sprintf	;wreg free
  1123  001178  0E70               	movlw	low _buffer2
  1124  00117A  6E2C               	movwf	lcd_putrs@ptr,c
  1125  00117C  0E00               	movlw	high _buffer2
  1126  00117E  6E2D               	movwf	lcd_putrs@ptr+1,c
  1127  001180  EC53  F00D         	call	_lcd_putrs	;wreg free
  1128  001184  D000               	goto	l185
  1129  001186                     l185:
  1130  001186  BC80               	btfsc	3968,6,c	;volatile
  1131  001188  D7FE               	goto	l185
  1132  00118A                     l184:
  1133                           
  1134                           ;keyboard.c: 24: if (PORTCbits.RC2==1){key=13;lcd_putrs("C");while(PORTCbits.RC2==1){};}
  1135  00118A  A482               	btfss	3970,2,c	;volatile
  1136  00118C  D00B               	goto	l188
  1137  00118E  0E0D               	movlw	13
  1138  001190  6E1B               	movwf	_key,c
  1139  001192  0E65               	movlw	low STR_12
  1140  001194  6E2C               	movwf	lcd_putrs@ptr,c
  1141  001196  0E0F               	movlw	high STR_12
  1142  001198  6E2D               	movwf	lcd_putrs@ptr+1,c
  1143  00119A  EC53  F00D         	call	_lcd_putrs	;wreg free
  1144  00119E  D000               	goto	l189
  1145  0011A0                     l189:
  1146  0011A0  B482               	btfsc	3970,2,c	;volatile
  1147  0011A2  D7FE               	goto	l189
  1148  0011A4                     l188:
  1149                           
  1150                           ;keyboard.c: 25: }
  1151                           ;keyboard.c: 26: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=1;
  1152  0011A4  9089               	bcf	3977,0,c	;volatile
  1153  0011A6  9289               	bcf	3977,1,c	;volatile
  1154  0011A8  9489               	bcf	3977,2,c	;volatile
  1155  0011AA  8689               	bsf	3977,3,c	;volatile
  1156                           
  1157                           ;keyboard.c: 27: {
  1158                           ;keyboard.c: 28: if (PORTAbits.RA5==1){key=14;lcd_putrs("*");while(PORTAbits.RA5==1){};}
  1159  0011AC  AA80               	btfss	3968,5,c	;volatile
  1160  0011AE  D00B               	goto	l192
  1161  0011B0  0E0E               	movlw	14
  1162  0011B2  6E1B               	movwf	_key,c
  1163  0011B4  0E5F               	movlw	low STR_13
  1164  0011B6  6E2C               	movwf	lcd_putrs@ptr,c
  1165  0011B8  0E0F               	movlw	high STR_13
  1166  0011BA  6E2D               	movwf	lcd_putrs@ptr+1,c
  1167  0011BC  EC53  F00D         	call	_lcd_putrs	;wreg free
  1168  0011C0  D000               	goto	l193
  1169  0011C2                     l193:
  1170  0011C2  BA80               	btfsc	3968,5,c	;volatile
  1171  0011C4  D7FE               	goto	l193
  1172  0011C6                     l192:
  1173                           
  1174                           ;keyboard.c: 29: if (PORTAbits.RA7==1){key=0;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  1175  0011C6  AE80               	btfss	3968,7,c	;volatile
  1176  0011C8  D018               	goto	l196
  1177  0011CA  0E00               	movlw	0
  1178  0011CC  6E1B               	movwf	_key,c
  1179  0011CE  0E70               	movlw	low _buffer2
  1180  0011D0  6E30               	movwf	sprintf@sp,c
  1181  0011D2  0E00               	movlw	high _buffer2
  1182  0011D4  6E31               	movwf	sprintf@sp+1,c
  1183  0011D6  0E58               	movlw	low STR_1
  1184  0011D8  6E32               	movwf	sprintf@f,c
  1185  0011DA  0E0F               	movlw	high STR_1
  1186  0011DC  6E33               	movwf	sprintf@f+1,c
  1187  0011DE  C01B  F034         	movff	_key,?_sprintf+4
  1188  0011E2  6A35               	clrf	?_sprintf+5,c
  1189  0011E4  EC24  F009         	call	_sprintf	;wreg free
  1190  0011E8  0E70               	movlw	low _buffer2
  1191  0011EA  6E2C               	movwf	lcd_putrs@ptr,c
  1192  0011EC  0E00               	movlw	high _buffer2
  1193  0011EE  6E2D               	movwf	lcd_putrs@ptr+1,c
  1194  0011F0  EC53  F00D         	call	_lcd_putrs	;wreg free
  1195  0011F4  D000               	goto	l197
  1196  0011F6                     l197:
  1197  0011F6  BE80               	btfsc	3968,7,c	;volatile
  1198  0011F8  D7FE               	goto	l197
  1199  0011FA                     l196:
  1200                           
  1201                           ;keyboard.c: 30: if (PORTAbits.RA6==1){key=15;lcd_putrs("#");while(PORTAbits.RA6==1){};}
  1202  0011FA  AC80               	btfss	3968,6,c	;volatile
  1203  0011FC  D00B               	goto	l200
  1204  0011FE  0E0F               	movlw	15
  1205  001200  6E1B               	movwf	_key,c
  1206  001202  0E5D               	movlw	low STR_15
  1207  001204  6E2C               	movwf	lcd_putrs@ptr,c
  1208  001206  0E0F               	movlw	high STR_15
  1209  001208  6E2D               	movwf	lcd_putrs@ptr+1,c
  1210  00120A  EC53  F00D         	call	_lcd_putrs	;wreg free
  1211  00120E  D000               	goto	l201
  1212  001210                     l201:
  1213  001210  BC80               	btfsc	3968,6,c	;volatile
  1214  001212  D7FE               	goto	l201
  1215  001214                     l200:
  1216                           
  1217                           ;keyboard.c: 31: if (PORTCbits.RC2==1){key=16;lcd_putrs("D");while(PORTCbits.RC2==1){};}
  1218  001214  A482               	btfss	3970,2,c	;volatile
  1219  001216  D00D               	goto	l2543
  1220  001218  0E10               	movlw	16
  1221  00121A  6E1B               	movwf	_key,c
  1222  00121C  0E67               	movlw	low STR_16
  1223  00121E  6E2C               	movwf	lcd_putrs@ptr,c
  1224  001220  0E0F               	movlw	high STR_16
  1225  001222  6E2D               	movwf	lcd_putrs@ptr+1,c
  1226  001224  EC53  F00D         	call	_lcd_putrs	;wreg free
  1227  001228  D000               	goto	l205
  1228  00122A                     l205:
  1229  00122A  A482               	btfss	3970,2,c	;volatile
  1230  00122C  D002               	goto	l2543
  1231  00122E  D7FD               	goto	l205
  1232  001230  D000               	goto	l2543
  1233  001232                     l2543:
  1234                           
  1235                           ;keyboard.c: 32: }
  1236                           ;keyboard.c: 33: _delay((unsigned long)((98)*(8000000/4000.0)));
  1237  001232  0EFF               	movlw	255
  1238  001234  6E43               	movwf	??_read_keyboard& (0+255),c
  1239  001236  0E8A               	movlw	138
  1240  001238                     u2327:
  1241  001238  2EE8               	decfsz	wreg,f,c
  1242  00123A  D7FE               	goto	u2327
  1243  00123C  2E43               	decfsz	??_read_keyboard& (0+255),f,c
  1244  00123E  D7FC               	goto	u2327
  1245  001240  D000               	nop2	
  1246                           
  1247                           ;keyboard.c: 36: return key;
  1248  001242  501B               	movf	_key,w,c
  1249  001244  0012               	return	
  1250  001246  0012               	return		;funcret
  1251  001248                     __end_of_read_keyboard:
  1252                           	opt stack 0
  1253                           tblptru	equ	0xFF8
  1254                           tblptrh	equ	0xFF7
  1255                           tblptrl	equ	0xFF6
  1256                           tablat	equ	0xFF5
  1257                           postinc0	equ	0xFEE
  1258                           wreg	equ	0xFE8
  1259                           postdec1	equ	0xFE5
  1260                           fsr1l	equ	0xFE1
  1261                           status	equ	0xFD8
  1262                           
  1263 ;; *************** function _sprintf *****************
  1264 ;; Defined at:
  1265 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\doprnt.c"
  1266 ;; Parameters:    Size  Location     Type
  1267 ;;  sp              2   12[COMRAM] PTR unsigned char 
  1268 ;;		 -> buffer2(20), 
  1269 ;;  f               2   14[COMRAM] PTR const unsigned char 
  1270 ;;		 -> STR_14(5), STR_11(5), STR_10(5), STR_9(5), 
  1271 ;;		 -> STR_7(5), STR_6(5), STR_5(5), STR_3(5), 
  1272 ;;		 -> STR_2(5), STR_1(5), 
  1273 ;; Auto vars:     Size  Location     Type
  1274 ;;  tmpval          4    0        struct .
  1275 ;;  cp              3    0        PTR const unsigned char 
  1276 ;;  width           2   28[COMRAM] int 
  1277 ;;  val             2   25[COMRAM] unsigned int 
  1278 ;;  ap              2   22[COMRAM] PTR void [1]
  1279 ;;		 -> ?_sprintf(2), 
  1280 ;;  len             2    0        unsigned int 
  1281 ;;  c               1   30[COMRAM] char 
  1282 ;;  prec            1   27[COMRAM] char 
  1283 ;;  flag            1   24[COMRAM] unsigned char 
  1284 ;; Return value:  Size  Location     Type
  1285 ;;                  2   12[COMRAM] int 
  1286 ;; Registers used:
  1287 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1288 ;; Tracked objects:
  1289 ;;		On entry : 0/0
  1290 ;;		On exit  : 0/0
  1291 ;;		Unchanged: 0/0
  1292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1293 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1294 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1295 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1296 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1297 ;;Total ram usage:       19 bytes
  1298 ;; Hardware stack levels used:    1
  1299 ;; Hardware stack levels required when called:    1
  1300 ;; This function calls:
  1301 ;;		___lwdiv
  1302 ;;		___lwmod
  1303 ;;		___wmul
  1304 ;;		_isdigit
  1305 ;; This function is called by:
  1306 ;;		_read_keyboard
  1307 ;; This function uses a non-reentrant model
  1308 ;;
  1309                           
  1310                           	psect	text2
  1311  001248                     __ptext2:
  1312                           	opt stack 0
  1313  001248                     _sprintf:
  1314                           	opt stack 28
  1315                           
  1316                           ;doprnt.c: 494: va_list ap;
  1317                           ;doprnt.c: 499: signed char c;
  1318                           ;doprnt.c: 501: int width;
  1319                           ;doprnt.c: 506: signed char prec;
  1320                           ;doprnt.c: 508: unsigned char flag;
  1321                           ;doprnt.c: 523: union {
  1322                           ;doprnt.c: 524: unsigned long vd;
  1323                           ;doprnt.c: 525: double integ;
  1324                           ;doprnt.c: 526: } tmpval;
  1325                           ;doprnt.c: 528: unsigned int val;
  1326                           ;doprnt.c: 529: unsigned len;
  1327                           ;doprnt.c: 530: const char * cp;
  1328                           ;doprnt.c: 533: *ap = __va_start();
  1329                           
  1330                           ;incstack = 0
  1331  001248  0E34               	movlw	low (?_sprintf+4)
  1332  00124A  6E3A               	movwf	sprintf@ap,c
  1333  00124C  0E00               	movlw	high (?_sprintf+4)
  1334  00124E  6E3B               	movwf	sprintf@ap+1,c
  1335                           
  1336                           ;doprnt.c: 536: while(c = *f++) {
  1337  001250  D117               	goto	l2399
  1338  001252                     l2317:
  1339                           
  1340                           ;doprnt.c: 538: if(c != '%')
  1341  001252  0E25               	movlw	37
  1342  001254  1842               	xorwf	sprintf@c,w,c
  1343  001256  B4D8               	btfsc	status,2,c
  1344  001258  D009               	goto	l2323
  1345                           
  1346                           ;doprnt.c: 540: {
  1347                           ;doprnt.c: 541: ((*sp++ = (c)));
  1348  00125A  C030  FFD9         	movff	sprintf@sp,fsr2l
  1349  00125E  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  1350  001262  C042  FFDF         	movff	sprintf@c,indf2
  1351  001266  4A30               	infsnz	sprintf@sp,f,c
  1352  001268  2A31               	incf	sprintf@sp+1,f,c
  1353                           
  1354                           ;doprnt.c: 542: continue;
  1355  00126A  D10A               	goto	l2399
  1356  00126C                     l2323:
  1357                           
  1358                           ;doprnt.c: 543: }
  1359                           ;doprnt.c: 546: width = 0;
  1360  00126C  0E00               	movlw	0
  1361  00126E  6E41               	movwf	sprintf@width+1,c
  1362  001270  0E00               	movlw	0
  1363  001272  6E40               	movwf	sprintf@width,c
  1364                           
  1365                           ;doprnt.c: 548: flag = 0;
  1366  001274  0E00               	movlw	0
  1367  001276  6E3C               	movwf	sprintf@flag,c
  1368                           
  1369                           ;doprnt.c: 551: switch(*f) {
  1370                           
  1371                           ;doprnt.c: 550: for(;;) {
  1372  001278  D005               	goto	l2329
  1373  00127A                     l2325:
  1374                           
  1375                           ;doprnt.c: 580: flag |= 0x04;
  1376  00127A  843C               	bsf	sprintf@flag,2,c
  1377                           
  1378                           ;doprnt.c: 581: f++;
  1379  00127C  4A32               	infsnz	sprintf@f,f,c
  1380  00127E  2A33               	incf	sprintf@f+1,f,c
  1381                           
  1382                           ;doprnt.c: 582: continue;
  1383  001280  D001               	goto	l2329
  1384                           
  1385                           ;doprnt.c: 584: }
  1386  001282  D00B               	goto	l2331
  1387  001284                     l2329:
  1388  001284  C032  FFF6         	movff	sprintf@f,tblptrl
  1389  001288  C033  FFF7         	movff	sprintf@f+1,tblptrh
  1390  00128C                     	if	0	;tblptru may be non-zero
  1391  00128C                     	endif
  1392  00128C                     	if	0	;tblptru may be non-zero
  1393  00128C                     	endif
  1394  00128C  0008               	tblrd		*
  1395  00128E  50F5               	movf	tablat,w,c
  1396                           
  1397                           ; Switch size 1, requested type "space"
  1398                           ; Number of cases is 1, Range of values is 48 to 48
  1399                           ; switch strategies available:
  1400                           ; Name         Instructions Cycles
  1401                           ; simple_byte            4     3 (average)
  1402                           ;	Chosen strategy is simple_byte
  1403  001290  0A30               	xorlw	48	; case 48
  1404  001292  B4D8               	btfsc	status,2,c
  1405  001294  D7F2               	goto	l2325
  1406                           
  1407                           ;doprnt.c: 585: break;
  1408  001296  D001               	goto	l2331
  1409                           
  1410                           ;doprnt.c: 586: }
  1411  001298  D7F5               	goto	l2329
  1412  00129A                     l2331:
  1413                           
  1414                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1415  00129A  C032  FFF6         	movff	sprintf@f,tblptrl
  1416  00129E  C033  FFF7         	movff	sprintf@f+1,tblptrh
  1417  0012A2                     	if	0	;tblptru may be non-zero
  1418  0012A2                     	endif
  1419  0012A2                     	if	0	;tblptru may be non-zero
  1420  0012A2                     	endif
  1421  0012A2  0008               	tblrd		*
  1422  0012A4  50F5               	movf	tablat,w,c
  1423  0012A6  EC62  F00E         	call	_isdigit
  1424  0012AA  A0D8               	btfss	status,0,c
  1425  0012AC  D03A               	goto	l2347
  1426                           
  1427                           ;doprnt.c: 598: width = 0;
  1428  0012AE  0E00               	movlw	0
  1429  0012B0  6E41               	movwf	sprintf@width+1,c
  1430  0012B2  0E00               	movlw	0
  1431  0012B4  6E40               	movwf	sprintf@width,c
  1432  0012B6  D000               	goto	l2335
  1433  0012B8                     l2335:
  1434                           
  1435                           ;doprnt.c: 600: width *= 10;
  1436  0012B8  C040  F024         	movff	sprintf@width,___wmul@multiplier
  1437  0012BC  C041  F025         	movff	sprintf@width+1,___wmul@multiplier+1
  1438  0012C0  0E00               	movlw	0
  1439  0012C2  6E27               	movwf	___wmul@multiplicand+1,c
  1440  0012C4  0E0A               	movlw	10
  1441  0012C6  6E26               	movwf	___wmul@multiplicand,c
  1442  0012C8  EC28  F00E         	call	___wmul	;wreg free
  1443  0012CC  C024  F040         	movff	?___wmul,sprintf@width
  1444  0012D0  C025  F041         	movff	?___wmul+1,sprintf@width+1
  1445                           
  1446                           ;doprnt.c: 601: width += *f++ - '0';
  1447  0012D4  0ED0               	movlw	208
  1448  0012D6  6E36               	movwf	??_sprintf& (0+255),c
  1449  0012D8  0EFF               	movlw	255
  1450  0012DA  6E37               	movwf	(??_sprintf+1)& (0+255),c
  1451  0012DC  C032  FFF6         	movff	sprintf@f,tblptrl
  1452  0012E0  C033  FFF7         	movff	sprintf@f+1,tblptrh
  1453  0012E4                     	if	0	;tblptru may be non-zero
  1454  0012E4                     	endif
  1455  0012E4                     	if	0	;tblptru may be non-zero
  1456  0012E4                     	endif
  1457  0012E4  0008               	tblrd		*
  1458  0012E6  50F5               	movf	tablat,w,c
  1459  0012E8  6E38               	movwf	(??_sprintf+2)& (0+255),c
  1460  0012EA  6A39               	clrf	(??_sprintf+3)& (0+255),c
  1461  0012EC  5036               	movf	??_sprintf,w,c
  1462  0012EE  2638               	addwf	??_sprintf+2,f,c
  1463  0012F0  5037               	movf	??_sprintf+1,w,c
  1464  0012F2  2239               	addwfc	??_sprintf+3,f,c
  1465  0012F4  5038               	movf	??_sprintf+2,w,c
  1466  0012F6  2640               	addwf	sprintf@width,f,c
  1467  0012F8  5039               	movf	??_sprintf+3,w,c
  1468  0012FA  2241               	addwfc	sprintf@width+1,f,c
  1469  0012FC  4A32               	infsnz	sprintf@f,f,c
  1470  0012FE  2A33               	incf	sprintf@f+1,f,c
  1471                           
  1472                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1473  001300  C032  FFF6         	movff	sprintf@f,tblptrl
  1474  001304  C033  FFF7         	movff	sprintf@f+1,tblptrh
  1475  001308                     	if	0	;tblptru may be non-zero
  1476  001308                     	endif
  1477  001308                     	if	0	;tblptru may be non-zero
  1478  001308                     	endif
  1479  001308  0008               	tblrd		*
  1480  00130A  50F5               	movf	tablat,w,c
  1481  00130C  EC62  F00E         	call	_isdigit
  1482  001310  A0D8               	btfss	status,0,c
  1483  001312  D007               	goto	l2347
  1484  001314  D7D1               	goto	l2335
  1485                           
  1486                           ;doprnt.c: 608: }
  1487                           ;doprnt.c: 635: switch(c = *f++) {
  1488  001316  D005               	goto	l2347
  1489                           
  1490                           ;doprnt.c: 638: goto alldone;
  1491                           
  1492                           ;doprnt.c: 637: case 0:
  1493  001318  D0C1               	goto	l2401
  1494                           
  1495                           ;doprnt.c: 813: continue;
  1496                           
  1497                           ;doprnt.c: 802: default:
  1498  00131A  D0B2               	goto	l2399
  1499  00131C                     l2343:
  1500                           
  1501                           ;doprnt.c: 818: flag |= 0xC0;
  1502  00131C  0EC0               	movlw	192
  1503  00131E  123C               	iorwf	sprintf@flag,f,c
  1504                           
  1505                           ;doprnt.c: 822: }
  1506                           
  1507                           ;doprnt.c: 819: break;
  1508  001320  D011               	goto	l2349
  1509  001322                     l2347:
  1510  001322  C032  FFF6         	movff	sprintf@f,tblptrl
  1511  001326  C033  FFF7         	movff	sprintf@f+1,tblptrh
  1512  00132A  4A32               	infsnz	sprintf@f,f,c
  1513  00132C  2A33               	incf	sprintf@f+1,f,c
  1514  00132E                     	if	0	;tblptru may be non-zero
  1515  00132E                     	endif
  1516  00132E                     	if	0	;tblptru may be non-zero
  1517  00132E                     	endif
  1518  00132E  0008               	tblrd		*
  1519  001330  CFF5 F042          	movff	tablat,sprintf@c
  1520  001334  5042               	movf	sprintf@c,w,c
  1521                           
  1522                           ; Switch size 1, requested type "space"
  1523                           ; Number of cases is 2, Range of values is 0 to 117
  1524                           ; switch strategies available:
  1525                           ; Name         Instructions Cycles
  1526                           ; simple_byte            7     4 (average)
  1527                           ;	Chosen strategy is simple_byte
  1528  001336  0A00               	xorlw	0	; case 0
  1529  001338  B4D8               	btfsc	status,2,c
  1530  00133A  D0B0               	goto	l2401
  1531  00133C  0A75               	xorlw	117	; case 117
  1532  00133E  B4D8               	btfsc	status,2,c
  1533  001340  D7ED               	goto	l2343
  1534  001342  D09E               	goto	l2399
  1535  001344                     l2349:
  1536                           
  1537                           ;doprnt.c: 1273: {
  1538                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1539  001344  C03A  FFD9         	movff	sprintf@ap,fsr2l
  1540  001348  C03B  FFDA         	movff	sprintf@ap+1,fsr2h
  1541  00134C  CFDE F03D          	movff	postinc2,sprintf@val
  1542  001350  CFDD F03E          	movff	postdec2,sprintf@val+1
  1543  001354  0E02               	movlw	2
  1544  001356  263A               	addwf	sprintf@ap,f,c
  1545  001358  0E00               	movlw	0
  1546  00135A  223B               	addwfc	sprintf@ap+1,f,c
  1547                           
  1548                           ;doprnt.c: 1287: }
  1549                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1550  00135C  0E01               	movlw	1
  1551  00135E  6E42               	movwf	sprintf@c,c
  1552  001360                     l2355:
  1553  001360  0E05               	movlw	5
  1554  001362  1842               	xorwf	sprintf@c,w,c
  1555  001364  B4D8               	btfsc	status,2,c
  1556  001366  D016               	goto	l2367
  1557  001368  D001               	goto	l2359
  1558  00136A  D014               	goto	l2367
  1559  00136C                     l2359:
  1560                           
  1561                           ;doprnt.c: 1306: if(val < dpowers[c])
  1562  00136C  5042               	movf	sprintf@c,w,c
  1563  00136E  0D02               	mullw	2
  1564  001370  0E01               	movlw	low _dpowers
  1565  001372  24F3               	addwf	prodl,w,c
  1566  001374  6EF6               	movwf	tblptrl,c
  1567  001376  0E0F               	movlw	high _dpowers
  1568  001378  20F4               	addwfc	prodh,w,c
  1569  00137A  6EF7               	movwf	tblptrh,c
  1570  00137C                     	if	0	;There are less than 3 active tblptr bytes
  1571  00137C                     	endif
  1572  00137C  0009               	tblrd		*+
  1573  00137E  50F5               	movf	tablat,w,c
  1574  001380  5C3D               	subwf	sprintf@val,w,c
  1575  001382  0009               	tblrd		*+
  1576  001384  50F5               	movf	tablat,w,c
  1577  001386  583E               	subwfb	sprintf@val+1,w,c
  1578  001388  A0D8               	btfss	status,0,c
  1579  00138A  D004               	goto	l2367
  1580  00138C  D001               	goto	l2363
  1581                           
  1582                           ;doprnt.c: 1307: break;
  1583  00138E  D002               	goto	l2367
  1584  001390                     l2363:
  1585  001390  2A42               	incf	sprintf@c,f,c
  1586  001392  D7E6               	goto	l2355
  1587  001394                     l2367:
  1588                           
  1589                           ;doprnt.c: 1381: if(width > c)
  1590  001394  0E80               	movlw	128
  1591  001396  BE42               	btfsc	sprintf@c,7,c
  1592  001398  0E7F               	movlw	127
  1593  00139A  6E36               	movwf	??_sprintf& (0+255),c
  1594  00139C  5040               	movf	sprintf@width,w,c
  1595  00139E  5C42               	subwf	sprintf@c,w,c
  1596  0013A0  5041               	movf	sprintf@width+1,w,c
  1597  0013A2  0A80               	xorlw	128
  1598  0013A4  5836               	subwfb	??_sprintf& (0+255),w,c
  1599  0013A6  B0D8               	btfsc	status,0,c
  1600  0013A8  D007               	goto	l2371
  1601                           
  1602                           ;doprnt.c: 1382: width -= c;
  1603  0013AA  5042               	movf	sprintf@c,w,c
  1604  0013AC  5E40               	subwf	sprintf@width,f,c
  1605  0013AE  0E00               	movlw	0
  1606  0013B0  BE42               	btfsc	sprintf@c,7,c
  1607  0013B2  0EFF               	movlw	255
  1608  0013B4  5A41               	subwfb	sprintf@width+1,f,c
  1609  0013B6  D005               	goto	l2373
  1610  0013B8                     l2371:
  1611                           
  1612                           ;doprnt.c: 1383: else
  1613                           ;doprnt.c: 1384: width = 0;
  1614  0013B8  0E00               	movlw	0
  1615  0013BA  6E41               	movwf	sprintf@width+1,c
  1616  0013BC  0E00               	movlw	0
  1617  0013BE  6E40               	movwf	sprintf@width,c
  1618  0013C0  D000               	goto	l2373
  1619  0013C2                     l2373:
  1620                           
  1621                           ;doprnt.c: 1387: if(flag & 0x04) {
  1622  0013C2  A43C               	btfss	sprintf@flag,2,c
  1623  0013C4  D015               	goto	l2383
  1624                           
  1625                           ;doprnt.c: 1415: if(width)
  1626  0013C6  5040               	movf	sprintf@width,w,c
  1627  0013C8  1041               	iorwf	sprintf@width+1,w,c
  1628  0013CA  B4D8               	btfsc	status,2,c
  1629  0013CC  D026               	goto	l508
  1630  0013CE                     l2377:
  1631                           
  1632                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  1633  0013CE  C030  FFD9         	movff	sprintf@sp,fsr2l
  1634  0013D2  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  1635  0013D6  0E30               	movlw	48
  1636  0013D8  6EDF               	movwf	indf2,c
  1637  0013DA  4A30               	infsnz	sprintf@sp,f,c
  1638  0013DC  2A31               	incf	sprintf@sp+1,f,c
  1639                           
  1640                           ;doprnt.c: 1418: while(--width);
  1641  0013DE  0640               	decf	sprintf@width,f,c
  1642  0013E0  A0D8               	btfss	status,0,c
  1643  0013E2  0641               	decf	sprintf@width+1,f,c
  1644  0013E4  5040               	movf	sprintf@width,w,c
  1645  0013E6  1041               	iorwf	sprintf@width+1,w,c
  1646  0013E8  B4D8               	btfsc	status,2,c
  1647  0013EA  D017               	goto	l508
  1648  0013EC  D7F0               	goto	l2377
  1649                           
  1650                           ;doprnt.c: 1420: } else
  1651  0013EE  D015               	goto	l508
  1652  0013F0                     l2383:
  1653                           
  1654                           ;doprnt.c: 1422: {
  1655                           ;doprnt.c: 1424: if(width
  1656                           ;doprnt.c: 1428: )
  1657  0013F0  5040               	movf	sprintf@width,w,c
  1658  0013F2  1041               	iorwf	sprintf@width+1,w,c
  1659  0013F4  B4D8               	btfsc	status,2,c
  1660  0013F6  D011               	goto	l508
  1661  0013F8                     l2385:
  1662                           
  1663                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  1664  0013F8  C030  FFD9         	movff	sprintf@sp,fsr2l
  1665  0013FC  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  1666  001400  0E20               	movlw	32
  1667  001402  6EDF               	movwf	indf2,c
  1668  001404  4A30               	infsnz	sprintf@sp,f,c
  1669  001406  2A31               	incf	sprintf@sp+1,f,c
  1670                           
  1671                           ;doprnt.c: 1431: while(--width);
  1672  001408  0640               	decf	sprintf@width,f,c
  1673  00140A  A0D8               	btfss	status,0,c
  1674  00140C  0641               	decf	sprintf@width+1,f,c
  1675  00140E  5040               	movf	sprintf@width,w,c
  1676  001410  1041               	iorwf	sprintf@width+1,w,c
  1677  001412  B4D8               	btfsc	status,2,c
  1678  001414  D002               	goto	l508
  1679  001416  D7F0               	goto	l2385
  1680  001418  D000               	goto	l508
  1681  00141A                     l508:
  1682                           
  1683                           ;doprnt.c: 1469: }
  1684                           ;doprnt.c: 1472: prec = c;
  1685  00141A  C042  F03F         	movff	sprintf@c,sprintf@prec
  1686                           
  1687                           ;doprnt.c: 1474: while(prec--) {
  1688  00141E  D02A               	goto	l2397
  1689  001420                     l2391:
  1690                           
  1691                           ;doprnt.c: 1478: {
  1692                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1693  001420  503F               	movf	sprintf@prec,w,c
  1694  001422  0D02               	mullw	2
  1695  001424  0E01               	movlw	low _dpowers
  1696  001426  24F3               	addwf	prodl,w,c
  1697  001428  6EF6               	movwf	tblptrl,c
  1698  00142A  0E0F               	movlw	high _dpowers
  1699  00142C  20F4               	addwfc	prodh,w,c
  1700  00142E  6EF7               	movwf	tblptrh,c
  1701  001430                     	if	0	;There are less than 3 active tblptr bytes
  1702  001430                     	endif
  1703  001430  0009               	tblrd		*+
  1704  001432  CFF5 F026          	movff	tablat,___lwdiv@divisor
  1705  001436  000A               	tblrd		*-
  1706  001438  CFF5 F027          	movff	tablat,___lwdiv@divisor+1
  1707  00143C  C03D  F024         	movff	sprintf@val,___lwdiv@dividend
  1708  001440  C03E  F025         	movff	sprintf@val+1,___lwdiv@dividend+1
  1709  001444  EC25  F00D         	call	___lwdiv	;wreg free
  1710  001448  C024  F02B         	movff	?___lwdiv,___lwmod@dividend
  1711  00144C  C025  F02C         	movff	?___lwdiv+1,___lwmod@dividend+1
  1712  001450  0E00               	movlw	0
  1713  001452  6E2E               	movwf	___lwmod@divisor+1,c
  1714  001454  0E0A               	movlw	10
  1715  001456  6E2D               	movwf	___lwmod@divisor,c
  1716  001458  EC7D  F00D         	call	___lwmod	;wreg free
  1717  00145C  502B               	movf	?___lwmod,w,c
  1718  00145E  0F30               	addlw	48
  1719  001460  6E42               	movwf	sprintf@c,c
  1720                           
  1721                           ;doprnt.c: 1523: }
  1722                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1723  001462  C030  FFD9         	movff	sprintf@sp,fsr2l
  1724  001466  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  1725  00146A  C042  FFDF         	movff	sprintf@c,indf2
  1726  00146E  4A30               	infsnz	sprintf@sp,f,c
  1727  001470  2A31               	incf	sprintf@sp+1,f,c
  1728  001472  D000               	goto	l2397
  1729  001474                     l2397:
  1730  001474  063F               	decf	sprintf@prec,f,c
  1731  001476  283F               	incf	sprintf@prec,w,c
  1732  001478  B4D8               	btfsc	status,2,c
  1733  00147A  D002               	goto	l2399
  1734  00147C  D7D1               	goto	l2391
  1735  00147E  D000               	goto	l2399
  1736  001480                     l2399:
  1737  001480  C032  FFF6         	movff	sprintf@f,tblptrl
  1738  001484  C033  FFF7         	movff	sprintf@f+1,tblptrh
  1739  001488  4A32               	infsnz	sprintf@f,f,c
  1740  00148A  2A33               	incf	sprintf@f+1,f,c
  1741  00148C                     	if	0	;tblptru may be non-zero
  1742  00148C                     	endif
  1743  00148C                     	if	0	;tblptru may be non-zero
  1744  00148C                     	endif
  1745  00148C  0008               	tblrd		*
  1746  00148E  CFF5 F042          	movff	tablat,sprintf@c
  1747  001492  5042               	movf	sprintf@c,w,c
  1748  001494  B4D8               	btfsc	status,2,c
  1749  001496  D002               	goto	l2401
  1750  001498  D6DC               	goto	l2317
  1751  00149A  D000               	goto	l2401
  1752  00149C                     l2401:
  1753                           
  1754                           ;doprnt.c: 1538: *sp = 0;
  1755  00149C  C030  FFD9         	movff	sprintf@sp,fsr2l
  1756  0014A0  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  1757  0014A4  0E00               	movlw	0
  1758  0014A6  6EDF               	movwf	indf2,c
  1759  0014A8  0012               	return	
  1760                           
  1761                           ;doprnt.c: 1540: return 0;
  1762                           ;	Return value of _sprintf is never used
  1763  0014AA  0012               	return		;funcret
  1764  0014AC                     __end_of_sprintf:
  1765                           	opt stack 0
  1766                           tblptru	equ	0xFF8
  1767                           tblptrh	equ	0xFF7
  1768                           tblptrl	equ	0xFF6
  1769                           tablat	equ	0xFF5
  1770                           prodh	equ	0xFF4
  1771                           prodl	equ	0xFF3
  1772                           postinc0	equ	0xFEE
  1773                           wreg	equ	0xFE8
  1774                           postdec1	equ	0xFE5
  1775                           fsr1l	equ	0xFE1
  1776                           indf2	equ	0xFDF
  1777                           postinc2	equ	0xFDE
  1778                           postdec2	equ	0xFDD
  1779                           fsr2h	equ	0xFDA
  1780                           fsr2l	equ	0xFD9
  1781                           status	equ	0xFD8
  1782                           
  1783 ;; *************** function _isdigit *****************
  1784 ;; Defined at:
  1785 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\isdigit.c"
  1786 ;; Parameters:    Size  Location     Type
  1787 ;;  c               1    wreg     unsigned char 
  1788 ;; Auto vars:     Size  Location     Type
  1789 ;;  c               1    2[COMRAM] unsigned char 
  1790 ;; Return value:  Size  Location     Type
  1791 ;;		None               void
  1792 ;; Registers used:
  1793 ;;		wreg, status,2, status,0
  1794 ;; Tracked objects:
  1795 ;;		On entry : 0/0
  1796 ;;		On exit  : 0/0
  1797 ;;		Unchanged: 0/0
  1798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1800 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1801 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1802 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1803 ;;Total ram usage:        3 bytes
  1804 ;; Hardware stack levels used:    1
  1805 ;; This function calls:
  1806 ;;		Nothing
  1807 ;; This function is called by:
  1808 ;;		_sprintf
  1809 ;; This function uses a non-reentrant model
  1810 ;;
  1811                           
  1812                           	psect	text3
  1813  001CC4                     __ptext3:
  1814                           	opt stack 0
  1815  001CC4                     _isdigit:
  1816                           	opt stack 28
  1817                           
  1818                           ;incstack = 0
  1819                           ;isdigit@c stored from wreg
  1820  001CC4  6E26               	movwf	isdigit@c,c
  1821  001CC6  0E00               	movlw	0
  1822  001CC8  6E25               	movwf	_isdigit$2206,c
  1823  001CCA  0E3A               	movlw	58
  1824  001CCC  6026               	cpfslt	isdigit@c,c
  1825  001CCE  D006               	goto	l2181
  1826  001CD0  0E2F               	movlw	47
  1827  001CD2  6426               	cpfsgt	isdigit@c,c
  1828  001CD4  D003               	goto	l2181
  1829  001CD6  0E01               	movlw	1
  1830  001CD8  6E25               	movwf	_isdigit$2206,c
  1831  001CDA  D000               	goto	l2181
  1832  001CDC                     l2181:
  1833  001CDC  C025  F024         	movff	_isdigit$2206,??_isdigit
  1834  001CE0  3024               	rrcf	??_isdigit,w,c
  1835  001CE2  0012               	return	
  1836  001CE4  0012               	return		;funcret
  1837  001CE6                     __end_of_isdigit:
  1838                           	opt stack 0
  1839                           tblptru	equ	0xFF8
  1840                           tblptrh	equ	0xFF7
  1841                           tblptrl	equ	0xFF6
  1842                           tablat	equ	0xFF5
  1843                           prodh	equ	0xFF4
  1844                           prodl	equ	0xFF3
  1845                           postinc0	equ	0xFEE
  1846                           wreg	equ	0xFE8
  1847                           postdec1	equ	0xFE5
  1848                           fsr1l	equ	0xFE1
  1849                           indf2	equ	0xFDF
  1850                           postinc2	equ	0xFDE
  1851                           postdec2	equ	0xFDD
  1852                           fsr2h	equ	0xFDA
  1853                           fsr2l	equ	0xFD9
  1854                           status	equ	0xFD8
  1855                           
  1856 ;; *************** function ___wmul *****************
  1857 ;; Defined at:
  1858 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\Umul16.c"
  1859 ;; Parameters:    Size  Location     Type
  1860 ;;  multiplier      2    0[COMRAM] unsigned int 
  1861 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1862 ;; Auto vars:     Size  Location     Type
  1863 ;;  product         2    4[COMRAM] unsigned int 
  1864 ;; Return value:  Size  Location     Type
  1865 ;;                  2    0[COMRAM] unsigned int 
  1866 ;; Registers used:
  1867 ;;		wreg, status,2, status,0, prodl, prodh
  1868 ;; Tracked objects:
  1869 ;;		On entry : 0/0
  1870 ;;		On exit  : 0/0
  1871 ;;		Unchanged: 0/0
  1872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1873 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1874 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1876 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1877 ;;Total ram usage:        6 bytes
  1878 ;; Hardware stack levels used:    1
  1879 ;; This function calls:
  1880 ;;		Nothing
  1881 ;; This function is called by:
  1882 ;;		_sprintf
  1883 ;; This function uses a non-reentrant model
  1884 ;;
  1885                           
  1886                           	psect	text4
  1887  001C50                     __ptext4:
  1888                           	opt stack 0
  1889  001C50                     ___wmul:
  1890                           	opt stack 28
  1891                           
  1892                           ;incstack = 0
  1893  001C50  5024               	movf	___wmul@multiplier,w,c
  1894  001C52  0226               	mulwf	___wmul@multiplicand,c
  1895  001C54  CFF3 F028          	movff	prodl,___wmul@product
  1896  001C58  CFF4 F029          	movff	prodh,___wmul@product+1
  1897  001C5C  5024               	movf	___wmul@multiplier,w,c
  1898  001C5E  0227               	mulwf	___wmul@multiplicand+1,c
  1899  001C60  50F3               	movf	prodl,w,c
  1900  001C62  2629               	addwf	___wmul@product+1,f,c
  1901  001C64  5025               	movf	___wmul@multiplier+1,w,c
  1902  001C66  0226               	mulwf	___wmul@multiplicand,c
  1903  001C68  50F3               	movf	prodl,w,c
  1904  001C6A  2629               	addwf	___wmul@product+1,f,c
  1905  001C6C  C028  F024         	movff	___wmul@product,?___wmul
  1906  001C70  C029  F025         	movff	___wmul@product+1,?___wmul+1
  1907  001C74  0012               	return	
  1908  001C76  0012               	return		;funcret
  1909  001C78                     __end_of___wmul:
  1910                           	opt stack 0
  1911                           tblptru	equ	0xFF8
  1912                           tblptrh	equ	0xFF7
  1913                           tblptrl	equ	0xFF6
  1914                           tablat	equ	0xFF5
  1915                           prodh	equ	0xFF4
  1916                           prodl	equ	0xFF3
  1917                           postinc0	equ	0xFEE
  1918                           wreg	equ	0xFE8
  1919                           postdec1	equ	0xFE5
  1920                           fsr1l	equ	0xFE1
  1921                           indf2	equ	0xFDF
  1922                           postinc2	equ	0xFDE
  1923                           postdec2	equ	0xFDD
  1924                           fsr2h	equ	0xFDA
  1925                           fsr2l	equ	0xFD9
  1926                           status	equ	0xFD8
  1927                           
  1928 ;; *************** function ___lwmod *****************
  1929 ;; Defined at:
  1930 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lwmod.c"
  1931 ;; Parameters:    Size  Location     Type
  1932 ;;  dividend        2    7[COMRAM] unsigned int 
  1933 ;;  divisor         2    9[COMRAM] unsigned int 
  1934 ;; Auto vars:     Size  Location     Type
  1935 ;;  counter         1   11[COMRAM] unsigned char 
  1936 ;; Return value:  Size  Location     Type
  1937 ;;                  2    7[COMRAM] unsigned int 
  1938 ;; Registers used:
  1939 ;;		wreg, status,2, status,0
  1940 ;; Tracked objects:
  1941 ;;		On entry : 0/0
  1942 ;;		On exit  : 0/0
  1943 ;;		Unchanged: 0/0
  1944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1945 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1946 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1948 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1949 ;;Total ram usage:        5 bytes
  1950 ;; Hardware stack levels used:    1
  1951 ;; This function calls:
  1952 ;;		Nothing
  1953 ;; This function is called by:
  1954 ;;		_sprintf
  1955 ;; This function uses a non-reentrant model
  1956 ;;
  1957                           
  1958                           	psect	text5
  1959  001AFA                     __ptext5:
  1960                           	opt stack 0
  1961  001AFA                     ___lwmod:
  1962                           	opt stack 28
  1963                           
  1964                           ;incstack = 0
  1965  001AFA  502D               	movf	___lwmod@divisor,w,c
  1966  001AFC  102E               	iorwf	___lwmod@divisor+1,w,c
  1967  001AFE  B4D8               	btfsc	status,2,c
  1968  001B00  D01D               	goto	l1162
  1969  001B02  0E01               	movlw	1
  1970  001B04  6E2F               	movwf	___lwmod@counter,c
  1971  001B06  D005               	goto	l2263
  1972  001B08                     l2261:
  1973  001B08  90D8               	bcf	status,0,c
  1974  001B0A  362D               	rlcf	___lwmod@divisor,f,c
  1975  001B0C  362E               	rlcf	___lwmod@divisor+1,f,c
  1976  001B0E  2A2F               	incf	___lwmod@counter,f,c
  1977  001B10  D000               	goto	l2263
  1978  001B12                     l2263:
  1979  001B12  BE2E               	btfsc	___lwmod@divisor+1,7,c
  1980  001B14  D002               	goto	l2265
  1981  001B16  D7F8               	goto	l2261
  1982  001B18  D000               	goto	l2265
  1983  001B1A                     l2265:
  1984  001B1A  502D               	movf	___lwmod@divisor,w,c
  1985  001B1C  5C2B               	subwf	___lwmod@dividend,w,c
  1986  001B1E  502E               	movf	___lwmod@divisor+1,w,c
  1987  001B20  582C               	subwfb	___lwmod@dividend+1,w,c
  1988  001B22  A0D8               	btfss	status,0,c
  1989  001B24  D005               	goto	l2269
  1990  001B26  502D               	movf	___lwmod@divisor,w,c
  1991  001B28  5E2B               	subwf	___lwmod@dividend,f,c
  1992  001B2A  502E               	movf	___lwmod@divisor+1,w,c
  1993  001B2C  5A2C               	subwfb	___lwmod@dividend+1,f,c
  1994  001B2E  D000               	goto	l2269
  1995  001B30                     l2269:
  1996  001B30  90D8               	bcf	status,0,c
  1997  001B32  322E               	rrcf	___lwmod@divisor+1,f,c
  1998  001B34  322D               	rrcf	___lwmod@divisor,f,c
  1999  001B36  2E2F               	decfsz	___lwmod@counter,f,c
  2000  001B38  D7F0               	goto	l2265
  2001  001B3A  D000               	goto	l1162
  2002  001B3C                     l1162:
  2003  001B3C  C02B  F02B         	movff	___lwmod@dividend,?___lwmod
  2004  001B40  C02C  F02C         	movff	___lwmod@dividend+1,?___lwmod+1
  2005  001B44  0012               	return		;funcret
  2006  001B46                     __end_of___lwmod:
  2007                           	opt stack 0
  2008                           tblptru	equ	0xFF8
  2009                           tblptrh	equ	0xFF7
  2010                           tblptrl	equ	0xFF6
  2011                           tablat	equ	0xFF5
  2012                           prodh	equ	0xFF4
  2013                           prodl	equ	0xFF3
  2014                           postinc0	equ	0xFEE
  2015                           wreg	equ	0xFE8
  2016                           postdec1	equ	0xFE5
  2017                           fsr1l	equ	0xFE1
  2018                           indf2	equ	0xFDF
  2019                           postinc2	equ	0xFDE
  2020                           postdec2	equ	0xFDD
  2021                           fsr2h	equ	0xFDA
  2022                           fsr2l	equ	0xFD9
  2023                           status	equ	0xFD8
  2024                           
  2025 ;; *************** function ___lwdiv *****************
  2026 ;; Defined at:
  2027 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  2028 ;; Parameters:    Size  Location     Type
  2029 ;;  dividend        2    0[COMRAM] unsigned int 
  2030 ;;  divisor         2    2[COMRAM] unsigned int 
  2031 ;; Auto vars:     Size  Location     Type
  2032 ;;  quotient        2    4[COMRAM] unsigned int 
  2033 ;;  counter         1    6[COMRAM] unsigned char 
  2034 ;; Return value:  Size  Location     Type
  2035 ;;                  2    0[COMRAM] unsigned int 
  2036 ;; Registers used:
  2037 ;;		wreg, status,2, status,0
  2038 ;; Tracked objects:
  2039 ;;		On entry : 0/0
  2040 ;;		On exit  : 0/0
  2041 ;;		Unchanged: 0/0
  2042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2043 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2044 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2046 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2047 ;;Total ram usage:        7 bytes
  2048 ;; Hardware stack levels used:    1
  2049 ;; This function calls:
  2050 ;;		Nothing
  2051 ;; This function is called by:
  2052 ;;		_sprintf
  2053 ;; This function uses a non-reentrant model
  2054 ;;
  2055                           
  2056                           	psect	text6
  2057  001A4A                     __ptext6:
  2058                           	opt stack 0
  2059  001A4A                     ___lwdiv:
  2060                           	opt stack 28
  2061                           
  2062                           ;incstack = 0
  2063  001A4A  0E00               	movlw	0
  2064  001A4C  6E29               	movwf	___lwdiv@quotient+1,c
  2065  001A4E  0E00               	movlw	0
  2066  001A50  6E28               	movwf	___lwdiv@quotient,c
  2067  001A52  5026               	movf	___lwdiv@divisor,w,c
  2068  001A54  1027               	iorwf	___lwdiv@divisor+1,w,c
  2069  001A56  B4D8               	btfsc	status,2,c
  2070  001A58  D021               	goto	l1152
  2071  001A5A  0E01               	movlw	1
  2072  001A5C  6E2A               	movwf	___lwdiv@counter,c
  2073  001A5E  D005               	goto	l2243
  2074  001A60                     l2241:
  2075  001A60  90D8               	bcf	status,0,c
  2076  001A62  3626               	rlcf	___lwdiv@divisor,f,c
  2077  001A64  3627               	rlcf	___lwdiv@divisor+1,f,c
  2078  001A66  2A2A               	incf	___lwdiv@counter,f,c
  2079  001A68  D000               	goto	l2243
  2080  001A6A                     l2243:
  2081  001A6A  BE27               	btfsc	___lwdiv@divisor+1,7,c
  2082  001A6C  D002               	goto	l2245
  2083  001A6E  D7F8               	goto	l2241
  2084  001A70  D000               	goto	l2245
  2085  001A72                     l2245:
  2086  001A72  90D8               	bcf	status,0,c
  2087  001A74  3628               	rlcf	___lwdiv@quotient,f,c
  2088  001A76  3629               	rlcf	___lwdiv@quotient+1,f,c
  2089  001A78  5026               	movf	___lwdiv@divisor,w,c
  2090  001A7A  5C24               	subwf	___lwdiv@dividend,w,c
  2091  001A7C  5027               	movf	___lwdiv@divisor+1,w,c
  2092  001A7E  5825               	subwfb	___lwdiv@dividend+1,w,c
  2093  001A80  A0D8               	btfss	status,0,c
  2094  001A82  D006               	goto	l2253
  2095  001A84  5026               	movf	___lwdiv@divisor,w,c
  2096  001A86  5E24               	subwf	___lwdiv@dividend,f,c
  2097  001A88  5027               	movf	___lwdiv@divisor+1,w,c
  2098  001A8A  5A25               	subwfb	___lwdiv@dividend+1,f,c
  2099  001A8C  8028               	bsf	___lwdiv@quotient,0,c
  2100  001A8E  D000               	goto	l2253
  2101  001A90                     l2253:
  2102  001A90  90D8               	bcf	status,0,c
  2103  001A92  3227               	rrcf	___lwdiv@divisor+1,f,c
  2104  001A94  3226               	rrcf	___lwdiv@divisor,f,c
  2105  001A96  2E2A               	decfsz	___lwdiv@counter,f,c
  2106  001A98  D7EC               	goto	l2245
  2107  001A9A  D000               	goto	l1152
  2108  001A9C                     l1152:
  2109  001A9C  C028  F024         	movff	___lwdiv@quotient,?___lwdiv
  2110  001AA0  C029  F025         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2111  001AA4  0012               	return		;funcret
  2112  001AA6                     __end_of___lwdiv:
  2113                           	opt stack 0
  2114                           tblptru	equ	0xFF8
  2115                           tblptrh	equ	0xFF7
  2116                           tblptrl	equ	0xFF6
  2117                           tablat	equ	0xFF5
  2118                           prodh	equ	0xFF4
  2119                           prodl	equ	0xFF3
  2120                           postinc0	equ	0xFEE
  2121                           wreg	equ	0xFE8
  2122                           postdec1	equ	0xFE5
  2123                           fsr1l	equ	0xFE1
  2124                           indf2	equ	0xFDF
  2125                           postinc2	equ	0xFDE
  2126                           postdec2	equ	0xFDD
  2127                           fsr2h	equ	0xFDA
  2128                           fsr2l	equ	0xFD9
  2129                           status	equ	0xFD8
  2130                           
  2131 ;; *************** function _caratula *****************
  2132 ;; Defined at:
  2133 ;;		line 39 in file "main.c"
  2134 ;; Parameters:    Size  Location     Type
  2135 ;;		None
  2136 ;; Auto vars:     Size  Location     Type
  2137 ;;		None
  2138 ;; Return value:  Size  Location     Type
  2139 ;;		None               void
  2140 ;; Registers used:
  2141 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2142 ;; Tracked objects:
  2143 ;;		On entry : 0/0
  2144 ;;		On exit  : 0/0
  2145 ;;		Unchanged: 0/0
  2146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2148 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2150 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2151 ;;Total ram usage:        0 bytes
  2152 ;; Hardware stack levels used:    1
  2153 ;; Hardware stack levels required when called:    5
  2154 ;; This function calls:
  2155 ;;		_lcd_comand
  2156 ;;		_lcd_gotoxy
  2157 ;;		_lcd_putrs
  2158 ;; This function is called by:
  2159 ;;		_main
  2160 ;; This function uses a non-reentrant model
  2161 ;;
  2162                           
  2163                           	psect	text7
  2164  001C78                     __ptext7:
  2165                           	opt stack 0
  2166  001C78                     _caratula:
  2167                           	opt stack 25
  2168                           
  2169                           ;main.c: 41: lcd_comand(0b00001100);
  2170                           
  2171                           ;incstack = 0
  2172  001C78  0E0C               	movlw	12
  2173  001C7A  EC8E  F00E         	call	_lcd_comand
  2174                           
  2175                           ;main.c: 42: lcd_gotoxy(1,1);
  2176  001C7E  0E01               	movlw	1
  2177  001C80  6E28               	movwf	lcd_gotoxy@y,c
  2178  001C82  0E01               	movlw	1
  2179  001C84  EC50  F00E         	call	_lcd_gotoxy
  2180                           
  2181                           ;main.c: 43: lcd_putrs("UNIMIC  TECLADO ");
  2182  001C88  0E30               	movlw	low STR_17
  2183  001C8A  6E2C               	movwf	lcd_putrs@ptr,c
  2184  001C8C  0E0F               	movlw	high STR_17
  2185  001C8E  6E2D               	movwf	lcd_putrs@ptr+1,c
  2186  001C90  EC53  F00D         	call	_lcd_putrs	;wreg free
  2187                           
  2188                           ;main.c: 48: lcd_gotoxy(1,2);
  2189  001C94  0E02               	movlw	2
  2190  001C96  6E28               	movwf	lcd_gotoxy@y,c
  2191  001C98  0E01               	movlw	1
  2192  001C9A  EC50  F00E         	call	_lcd_gotoxy
  2193  001C9E  0012               	return		;funcret
  2194  001CA0                     __end_of_caratula:
  2195                           	opt stack 0
  2196                           tblptru	equ	0xFF8
  2197                           tblptrh	equ	0xFF7
  2198                           tblptrl	equ	0xFF6
  2199                           tablat	equ	0xFF5
  2200                           prodh	equ	0xFF4
  2201                           prodl	equ	0xFF3
  2202                           postinc0	equ	0xFEE
  2203                           wreg	equ	0xFE8
  2204                           postdec1	equ	0xFE5
  2205                           fsr1l	equ	0xFE1
  2206                           indf2	equ	0xFDF
  2207                           postinc2	equ	0xFDE
  2208                           postdec2	equ	0xFDD
  2209                           fsr2h	equ	0xFDA
  2210                           fsr2l	equ	0xFD9
  2211                           status	equ	0xFD8
  2212                           
  2213 ;; *************** function _lcd_putrs *****************
  2214 ;; Defined at:
  2215 ;;		line 221 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2216 ;; Parameters:    Size  Location     Type
  2217 ;;  ptr             2    8[COMRAM] PTR const unsigned char 
  2218 ;;		 -> STR_20(10), STR_19(13), STR_18(33), STR_17(17), 
  2219 ;;		 -> STR_16(2), STR_15(2), STR_13(2), STR_12(2), 
  2220 ;;		 -> STR_8(2), STR_4(2), buffer2(20), 
  2221 ;; Auto vars:     Size  Location     Type
  2222 ;;		None
  2223 ;; Return value:  Size  Location     Type
  2224 ;;		None               void
  2225 ;; Registers used:
  2226 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2227 ;; Tracked objects:
  2228 ;;		On entry : 0/0
  2229 ;;		On exit  : 0/0
  2230 ;;		Unchanged: 0/0
  2231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2232 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2235 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2236 ;;Total ram usage:        2 bytes
  2237 ;; Hardware stack levels used:    1
  2238 ;; Hardware stack levels required when called:    4
  2239 ;; This function calls:
  2240 ;;		_lcd_putc
  2241 ;; This function is called by:
  2242 ;;		_read_keyboard
  2243 ;;		_caratula
  2244 ;;		_main
  2245 ;; This function uses a non-reentrant model
  2246 ;;
  2247                           
  2248                           	psect	text8
  2249  001AA6                     __ptext8:
  2250                           	opt stack 0
  2251  001AA6                     _lcd_putrs:
  2252                           	opt stack 25
  2253                           
  2254                           ;unmc_lcd_216.c: 223: while(*ptr){
  2255                           
  2256                           ;incstack = 0
  2257  001AA6  D015               	goto	l2313
  2258  001AA8                     l2309:
  2259                           
  2260                           ;unmc_lcd_216.c: 224: lcd_putc(*ptr++);
  2261  001AA8  C02C  FFF6         	movff	lcd_putrs@ptr,tblptrl
  2262  001AAC  C02D  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  2263  001AB0  6AF8               	clrf	tblptru,c
  2264  001AB2  0E0E               	movlw	(high __ramtop+-1)
  2265  001AB4  64F7               	cpfsgt	tblptrh,c
  2266  001AB6  D003               	bra	u1687
  2267  001AB8  0008               	tblrd		*
  2268  001ABA  50F5               	movf	tablat,w,c
  2269  001ABC  D005               	bra	u1680
  2270  001ABE                     u1687:
  2271  001ABE  CFF6 FFE9          	movff	tblptrl,fsr0l
  2272  001AC2  CFF7 FFEA          	movff	tblptrh,fsr0h
  2273  001AC6  50EF               	movf	indf0,w,c
  2274  001AC8                     u1680:
  2275  001AC8  ECA3  F00D         	call	_lcd_putc
  2276  001ACC  4A2C               	infsnz	lcd_putrs@ptr,f,c
  2277  001ACE  2A2D               	incf	lcd_putrs@ptr+1,f,c
  2278  001AD0  D000               	goto	l2313
  2279  001AD2                     l2313:
  2280  001AD2  C02C  FFF6         	movff	lcd_putrs@ptr,tblptrl
  2281  001AD6  C02D  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  2282  001ADA  6AF8               	clrf	tblptru,c
  2283  001ADC  0E0E               	movlw	(high __ramtop+-1)
  2284  001ADE  64F7               	cpfsgt	tblptrh,c
  2285  001AE0  D003               	bra	u1697
  2286  001AE2  0008               	tblrd		*
  2287  001AE4  50F5               	movf	tablat,w,c
  2288  001AE6  D005               	bra	u1690
  2289  001AE8                     u1697:
  2290  001AE8  CFF6 FFE9          	movff	tblptrl,fsr0l
  2291  001AEC  CFF7 FFEA          	movff	tblptrh,fsr0h
  2292  001AF0  50EF               	movf	indf0,w,c
  2293  001AF2                     u1690:
  2294  001AF2  0900               	iorlw	0
  2295  001AF4  A4D8               	btfss	status,2,c
  2296  001AF6  D7D8               	goto	l2309
  2297  001AF8  0012               	return		;funcret
  2298  001AFA                     __end_of_lcd_putrs:
  2299                           	opt stack 0
  2300                           tblptru	equ	0xFF8
  2301                           tblptrh	equ	0xFF7
  2302                           tblptrl	equ	0xFF6
  2303                           tablat	equ	0xFF5
  2304                           prodh	equ	0xFF4
  2305                           prodl	equ	0xFF3
  2306                           indf0	equ	0xFEF
  2307                           postinc0	equ	0xFEE
  2308                           fsr0h	equ	0xFEA
  2309                           fsr0l	equ	0xFE9
  2310                           wreg	equ	0xFE8
  2311                           postdec1	equ	0xFE5
  2312                           fsr1l	equ	0xFE1
  2313                           indf2	equ	0xFDF
  2314                           postinc2	equ	0xFDE
  2315                           postdec2	equ	0xFDD
  2316                           fsr2h	equ	0xFDA
  2317                           fsr2l	equ	0xFD9
  2318                           status	equ	0xFD8
  2319                           
  2320 ;; *************** function _lcd_putc *****************
  2321 ;; Defined at:
  2322 ;;		line 172 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2323 ;; Parameters:    Size  Location     Type
  2324 ;;  c               1    wreg     unsigned char 
  2325 ;; Auto vars:     Size  Location     Type
  2326 ;;  c               1    7[COMRAM] unsigned char 
  2327 ;; Return value:  Size  Location     Type
  2328 ;;		None               void
  2329 ;; Registers used:
  2330 ;;		wreg, status,2, status,0, cstack
  2331 ;; Tracked objects:
  2332 ;;		On entry : 0/0
  2333 ;;		On exit  : 0/0
  2334 ;;		Unchanged: 0/0
  2335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2337 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2339 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2340 ;;Total ram usage:        1 bytes
  2341 ;; Hardware stack levels used:    1
  2342 ;; Hardware stack levels required when called:    3
  2343 ;; This function calls:
  2344 ;;		_lcd_gotoxy
  2345 ;;		_lcd_send_byte
  2346 ;; This function is called by:
  2347 ;;		_lcd_putrs
  2348 ;;		_lcd_puts
  2349 ;; This function uses a non-reentrant model
  2350 ;;
  2351                           
  2352                           	psect	text9
  2353  001B46                     __ptext9:
  2354                           	opt stack 0
  2355  001B46                     _lcd_putc:
  2356                           	opt stack 25
  2357                           
  2358                           ;incstack = 0
  2359                           ;lcd_putc@c stored from wreg
  2360  001B46  6E2B               	movwf	lcd_putc@c,c
  2361                           
  2362                           ;unmc_lcd_216.c: 173: switch(c){
  2363  001B48  D018               	goto	l2035
  2364  001B4A                     l2025:
  2365                           
  2366                           ;unmc_lcd_216.c: 175: lcd_send_byte(0,1);
  2367  001B4A  0E01               	movlw	1
  2368  001B4C  6E26               	movwf	lcd_send_byte@n,c
  2369  001B4E  0E00               	movlw	0
  2370  001B50  EC0F  F00E         	call	_lcd_send_byte
  2371                           
  2372                           ;unmc_lcd_216.c: 176: break;
  2373  001B54  0012               	return	
  2374  001B56                     l2027:
  2375                           
  2376                           ;unmc_lcd_216.c: 178: lcd_gotoxy(1,2);
  2377  001B56  0E02               	movlw	2
  2378  001B58  6E28               	movwf	lcd_gotoxy@y,c
  2379  001B5A  0E01               	movlw	1
  2380  001B5C  EC50  F00E         	call	_lcd_gotoxy
  2381                           
  2382                           ;unmc_lcd_216.c: 179: break;
  2383  001B60  0012               	return	
  2384  001B62                     l2029:
  2385                           
  2386                           ;unmc_lcd_216.c: 181: lcd_send_byte(0,0x10);
  2387  001B62  0E10               	movlw	16
  2388  001B64  6E26               	movwf	lcd_send_byte@n,c
  2389  001B66  0E00               	movlw	0
  2390  001B68  EC0F  F00E         	call	_lcd_send_byte
  2391                           
  2392                           ;unmc_lcd_216.c: 182: break;
  2393  001B6C  0012               	return	
  2394  001B6E                     l2031:
  2395                           
  2396                           ;unmc_lcd_216.c: 184: lcd_send_byte(1,c);
  2397  001B6E  C02B  F026         	movff	lcd_putc@c,lcd_send_byte@n
  2398  001B72  0E01               	movlw	1
  2399  001B74  EC0F  F00E         	call	_lcd_send_byte
  2400                           
  2401                           ;unmc_lcd_216.c: 186: }
  2402                           
  2403                           ;unmc_lcd_216.c: 185: break;
  2404  001B78  0012               	return	
  2405  001B7A                     l2035:
  2406  001B7A  502B               	movf	lcd_putc@c,w,c
  2407                           
  2408                           ; Switch size 1, requested type "space"
  2409                           ; Number of cases is 3, Range of values is 8 to 12
  2410                           ; switch strategies available:
  2411                           ; Name         Instructions Cycles
  2412                           ; simple_byte           10     6 (average)
  2413                           ;	Chosen strategy is simple_byte
  2414  001B7C  0A08               	xorlw	8	; case 8
  2415  001B7E  B4D8               	btfsc	status,2,c
  2416  001B80  D7F0               	goto	l2029
  2417  001B82  0A02               	xorlw	2	; case 10
  2418  001B84  B4D8               	btfsc	status,2,c
  2419  001B86  D7E7               	goto	l2027
  2420  001B88  0A06               	xorlw	6	; case 12
  2421  001B8A  B4D8               	btfsc	status,2,c
  2422  001B8C  D7DE               	goto	l2025
  2423  001B8E  D7EF               	goto	l2031
  2424  001B90  0012               	return		;funcret
  2425  001B92                     __end_of_lcd_putc:
  2426                           	opt stack 0
  2427                           tblptru	equ	0xFF8
  2428                           tblptrh	equ	0xFF7
  2429                           tblptrl	equ	0xFF6
  2430                           tablat	equ	0xFF5
  2431                           prodh	equ	0xFF4
  2432                           prodl	equ	0xFF3
  2433                           indf0	equ	0xFEF
  2434                           postinc0	equ	0xFEE
  2435                           fsr0h	equ	0xFEA
  2436                           fsr0l	equ	0xFE9
  2437                           wreg	equ	0xFE8
  2438                           postdec1	equ	0xFE5
  2439                           fsr1l	equ	0xFE1
  2440                           indf2	equ	0xFDF
  2441                           postinc2	equ	0xFDE
  2442                           postdec2	equ	0xFDD
  2443                           fsr2h	equ	0xFDA
  2444                           fsr2l	equ	0xFD9
  2445                           status	equ	0xFD8
  2446                           
  2447 ;; *************** function _lcd_gotoxy *****************
  2448 ;; Defined at:
  2449 ;;		line 158 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2450 ;; Parameters:    Size  Location     Type
  2451 ;;  x               1    wreg     unsigned char 
  2452 ;;  y               1    4[COMRAM] unsigned char 
  2453 ;; Auto vars:     Size  Location     Type
  2454 ;;  x               1    5[COMRAM] unsigned char 
  2455 ;;  address         1    6[COMRAM] unsigned char 
  2456 ;; Return value:  Size  Location     Type
  2457 ;;		None               void
  2458 ;; Registers used:
  2459 ;;		wreg, status,2, status,0, cstack
  2460 ;; Tracked objects:
  2461 ;;		On entry : 0/0
  2462 ;;		On exit  : 0/0
  2463 ;;		Unchanged: 0/0
  2464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2465 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2466 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2468 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2469 ;;Total ram usage:        3 bytes
  2470 ;; Hardware stack levels used:    1
  2471 ;; Hardware stack levels required when called:    2
  2472 ;; This function calls:
  2473 ;;		_lcd_send_byte
  2474 ;; This function is called by:
  2475 ;;		_lcd_putc
  2476 ;;		_caratula
  2477 ;;		_main
  2478 ;; This function uses a non-reentrant model
  2479 ;;
  2480                           
  2481                           	psect	text10
  2482  001CA0                     __ptext10:
  2483                           	opt stack 0
  2484  001CA0                     _lcd_gotoxy:
  2485                           	opt stack 25
  2486                           
  2487                           ;incstack = 0
  2488                           ;lcd_gotoxy@x stored from wreg
  2489  001CA0  6E29               	movwf	lcd_gotoxy@x,c
  2490                           
  2491                           ;unmc_lcd_216.c: 159: int8 address;
  2492                           ;unmc_lcd_216.c: 161: if(y != 1)
  2493  001CA2  0428               	decf	lcd_gotoxy@y,w,c
  2494  001CA4  B4D8               	btfsc	status,2,c
  2495  001CA6  D002               	goto	l2017
  2496                           
  2497                           ;unmc_lcd_216.c: 162: address = 0x40;
  2498  001CA8  0E40               	movlw	64
  2499  001CAA  D001               	goto	L1
  2500  001CAC                     l2017:
  2501                           
  2502                           ;unmc_lcd_216.c: 163: else
  2503                           ;unmc_lcd_216.c: 164: address=0;
  2504  001CAC  0E00               	movlw	0
  2505  001CAE                     L1:
  2506  001CAE  6E2A               	movwf	lcd_gotoxy@address,c
  2507  001CB0  D000               	goto	l2019
  2508  001CB2                     l2019:
  2509                           
  2510                           ;unmc_lcd_216.c: 166: address += x-1;
  2511  001CB2  0429               	decf	lcd_gotoxy@x,w,c
  2512  001CB4  262A               	addwf	lcd_gotoxy@address,f,c
  2513                           
  2514                           ;unmc_lcd_216.c: 167: lcd_send_byte(0, 0x80 | address);
  2515  001CB6  502A               	movf	lcd_gotoxy@address,w,c
  2516  001CB8  0980               	iorlw	128
  2517  001CBA  6E26               	movwf	lcd_send_byte@n,c
  2518  001CBC  0E00               	movlw	0
  2519  001CBE  EC0F  F00E         	call	_lcd_send_byte
  2520  001CC2  0012               	return		;funcret
  2521  001CC4                     __end_of_lcd_gotoxy:
  2522                           	opt stack 0
  2523                           tblptru	equ	0xFF8
  2524                           tblptrh	equ	0xFF7
  2525                           tblptrl	equ	0xFF6
  2526                           tablat	equ	0xFF5
  2527                           prodh	equ	0xFF4
  2528                           prodl	equ	0xFF3
  2529                           indf0	equ	0xFEF
  2530                           postinc0	equ	0xFEE
  2531                           fsr0h	equ	0xFEA
  2532                           fsr0l	equ	0xFE9
  2533                           wreg	equ	0xFE8
  2534                           postdec1	equ	0xFE5
  2535                           fsr1l	equ	0xFE1
  2536                           indf2	equ	0xFDF
  2537                           postinc2	equ	0xFDE
  2538                           postdec2	equ	0xFDD
  2539                           fsr2h	equ	0xFDA
  2540                           fsr2l	equ	0xFD9
  2541                           status	equ	0xFD8
  2542                           
  2543 ;; *************** function _Setup *****************
  2544 ;; Defined at:
  2545 ;;		line 59 in file "main.c"
  2546 ;; Parameters:    Size  Location     Type
  2547 ;;		None
  2548 ;; Auto vars:     Size  Location     Type
  2549 ;;		None
  2550 ;; Return value:  Size  Location     Type
  2551 ;;		None               void
  2552 ;; Registers used:
  2553 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2554 ;; Tracked objects:
  2555 ;;		On entry : 0/0
  2556 ;;		On exit  : 0/0
  2557 ;;		Unchanged: 0/0
  2558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2560 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2562 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2563 ;;Total ram usage:        0 bytes
  2564 ;; Hardware stack levels used:    1
  2565 ;; Hardware stack levels required when called:    3
  2566 ;; This function calls:
  2567 ;;		_Write_RTC
  2568 ;;		_lcd_comand
  2569 ;;		_lcd_init
  2570 ;; This function is called by:
  2571 ;;		_main
  2572 ;; This function uses a non-reentrant model
  2573 ;;
  2574                           
  2575                           	psect	text11
  2576  001B92                     __ptext11:
  2577                           	opt stack 0
  2578  001B92                     _Setup:
  2579                           	opt stack 27
  2580                           
  2581                           ;main.c: 61: OSCTUNEbits.INTSRC=1;
  2582                           
  2583                           ;incstack = 0
  2584  001B92  8E9B               	bsf	3995,7,c	;volatile
  2585                           
  2586                           ;main.c: 62: OSCTUNEbits.PLLEN=0;
  2587  001B94  9C9B               	bcf	3995,6,c	;volatile
  2588                           
  2589                           ;main.c: 63: OSCCONbits.IRCF0=1;
  2590  001B96  88D3               	bsf	4051,4,c	;volatile
  2591                           
  2592                           ;main.c: 64: OSCCONbits.IRCF1=1;
  2593  001B98  8AD3               	bsf	4051,5,c	;volatile
  2594                           
  2595                           ;main.c: 65: OSCCONbits.IRCF2=1;
  2596  001B9A  8CD3               	bsf	4051,6,c	;volatile
  2597                           
  2598                           ;main.c: 66: OSCCONbits.SCS0=0;
  2599  001B9C  90D3               	bcf	4051,0,c	;volatile
  2600                           
  2601                           ;main.c: 67: OSCCONbits.SCS1=0;
  2602  001B9E  92D3               	bcf	4051,1,c	;volatile
  2603                           
  2604                           ;main.c: 68: TRISA = 0b11110000;
  2605  001BA0  0EF0               	movlw	240
  2606  001BA2  6E92               	movwf	3986,c	;volatile
  2607                           
  2608                           ;main.c: 69: TRISB = 0;
  2609  001BA4  0E00               	movlw	0
  2610  001BA6  6E93               	movwf	3987,c	;volatile
  2611                           
  2612                           ;main.c: 70: TRISC = 0b00000111;
  2613  001BA8  0E07               	movlw	7
  2614  001BAA  6E94               	movwf	3988,c	;volatile
  2615                           
  2616                           ;main.c: 74: ANCON0=0b11111111;
  2617  001BAC  010F               	movlb	15	; () banked
  2618  001BAE  6948               	setf	72,b	;volatile
  2619                           
  2620                           ; BSR set to: 15
  2621                           ;main.c: 76: ANCON1=0b11111111;
  2622  001BB0  010F               	movlb	15	; () banked
  2623  001BB2  6949               	setf	73,b	;volatile
  2624                           
  2625                           ;main.c: 77: ADCON0=0b00101101;
  2626  001BB4  0E2D               	movlw	45
  2627  001BB6  6EC2               	movwf	4034,c	;volatile
  2628                           
  2629                           ;main.c: 78: ADCON1=0b00010000;
  2630  001BB8  0E10               	movlw	16
  2631  001BBA  6EC1               	movwf	4033,c	;volatile
  2632                           
  2633                           ; BSR set to: 15
  2634                           ;main.c: 79: RTCCFGbits.RTCEN=1;
  2635  001BBC  010F               	movlb	15	; () banked
  2636  001BBE  8F3F               	bsf	63,7,b	;volatile
  2637                           
  2638                           ; BSR set to: 15
  2639                           ;main.c: 80: RTCCFGbits.RTCWREN=1;
  2640  001BC0  010F               	movlb	15	; () banked
  2641  001BC2  8B3F               	bsf	63,5,b	;volatile
  2642                           
  2643                           ; BSR set to: 15
  2644                           ;main.c: 81: T1CONbits.T1OSCEN=1;
  2645  001BC4  86CD               	bsf	4045,3,c	;volatile
  2646                           
  2647                           ; BSR set to: 15
  2648                           ;main.c: 82: Write_RTC();
  2649  001BC6  EC56  F00A         	call	_Write_RTC	;wreg free
  2650                           
  2651                           ;main.c: 83: lcd_init();
  2652  001BCA  EC6E  F00C         	call	_lcd_init	;wreg free
  2653                           
  2654                           ;main.c: 84: lcd_comand(0b00001100);
  2655  001BCE  0E0C               	movlw	12
  2656  001BD0  EC8E  F00E         	call	_lcd_comand
  2657                           
  2658                           ;main.c: 85: LATBbits.LATB1 = 1;;
  2659  001BD4  828A               	bsf	3978,1,c	;volatile
  2660                           
  2661                           ;main.c: 86: LATBbits.LATB0 = 1;;
  2662  001BD6  808A               	bsf	3978,0,c	;volatile
  2663  001BD8  0012               	return		;funcret
  2664  001BDA                     __end_of_Setup:
  2665                           	opt stack 0
  2666                           tblptru	equ	0xFF8
  2667                           tblptrh	equ	0xFF7
  2668                           tblptrl	equ	0xFF6
  2669                           tablat	equ	0xFF5
  2670                           prodh	equ	0xFF4
  2671                           prodl	equ	0xFF3
  2672                           indf0	equ	0xFEF
  2673                           postinc0	equ	0xFEE
  2674                           fsr0h	equ	0xFEA
  2675                           fsr0l	equ	0xFE9
  2676                           wreg	equ	0xFE8
  2677                           postdec1	equ	0xFE5
  2678                           fsr1l	equ	0xFE1
  2679                           indf2	equ	0xFDF
  2680                           postinc2	equ	0xFDE
  2681                           postdec2	equ	0xFDD
  2682                           fsr2h	equ	0xFDA
  2683                           fsr2l	equ	0xFD9
  2684                           status	equ	0xFD8
  2685                           
  2686 ;; *************** function _lcd_init *****************
  2687 ;; Defined at:
  2688 ;;		line 119 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2689 ;; Parameters:    Size  Location     Type
  2690 ;;		None
  2691 ;; Auto vars:     Size  Location     Type
  2692 ;;  i               1    4[COMRAM] unsigned char 
  2693 ;; Return value:  Size  Location     Type
  2694 ;;		None               void
  2695 ;; Registers used:
  2696 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2697 ;; Tracked objects:
  2698 ;;		On entry : 0/0
  2699 ;;		On exit  : 0/0
  2700 ;;		Unchanged: 0/0
  2701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2703 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2705 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2706 ;;Total ram usage:        1 bytes
  2707 ;; Hardware stack levels used:    1
  2708 ;; Hardware stack levels required when called:    2
  2709 ;; This function calls:
  2710 ;;		_Delay1KTCYx
  2711 ;;		_lcd_send_byte
  2712 ;;		_lcd_send_nibble
  2713 ;; This function is called by:
  2714 ;;		_Setup
  2715 ;; This function uses a non-reentrant model
  2716 ;;
  2717                           
  2718                           	psect	text12
  2719  0018DC                     __ptext12:
  2720                           	opt stack 0
  2721  0018DC                     _lcd_init:
  2722                           	opt stack 27
  2723                           
  2724                           ;unmc_lcd_216.c: 120: int8 i;
  2725                           ;unmc_lcd_216.c: 122: TRISBbits.TRISB3=0;
  2726                           
  2727                           ;incstack = 0
  2728  0018DC  9693               	bcf	3987,3,c	;volatile
  2729                           
  2730                           ;unmc_lcd_216.c: 123: TRISBbits.TRISB2=0;
  2731  0018DE  9493               	bcf	3987,2,c	;volatile
  2732                           
  2733                           ;unmc_lcd_216.c: 128: LATBbits.LATB3=0;
  2734  0018E0  968A               	bcf	3978,3,c	;volatile
  2735                           
  2736                           ;unmc_lcd_216.c: 129: LATBbits.LATB2=0;
  2737  0018E2  948A               	bcf	3978,2,c	;volatile
  2738                           
  2739                           ;unmc_lcd_216.c: 134: TRISBbits.TRISB4=0;
  2740  0018E4  9893               	bcf	3987,4,c	;volatile
  2741                           
  2742                           ;unmc_lcd_216.c: 135: TRISBbits.TRISB5=0;
  2743  0018E6  9A93               	bcf	3987,5,c	;volatile
  2744                           
  2745                           ;unmc_lcd_216.c: 136: TRISBbits.TRISB6=0;
  2746  0018E8  9C93               	bcf	3987,6,c	;volatile
  2747                           
  2748                           ;unmc_lcd_216.c: 137: TRISBbits.TRISB7=0;
  2749  0018EA  9E93               	bcf	3987,7,c	;volatile
  2750                           
  2751                           ;unmc_lcd_216.c: 139: Delay1KTCYx(8000000UL/800000UL);
  2752  0018EC  0E0A               	movlw	10
  2753  0018EE  EC73  F00E         	call	_Delay1KTCYx
  2754                           
  2755                           ;unmc_lcd_216.c: 140: Delay1KTCYx(8000000UL/800000UL);
  2756  0018F2  0E0A               	movlw	10
  2757  0018F4  EC73  F00E         	call	_Delay1KTCYx
  2758                           
  2759                           ;unmc_lcd_216.c: 141: Delay1KTCYx(8000000UL/800000UL);
  2760  0018F8  0E0A               	movlw	10
  2761  0018FA  EC73  F00E         	call	_Delay1KTCYx
  2762                           
  2763                           ;unmc_lcd_216.c: 143: for(i=0 ;i < 3; i++){
  2764  0018FE  0E00               	movlw	0
  2765  001900  6E28               	movwf	lcd_init@i,c
  2766  001902                     l2279:
  2767  001902  0E02               	movlw	2
  2768  001904  6428               	cpfsgt	lcd_init@i,c
  2769  001906  D001               	goto	l2283
  2770  001908  D008               	goto	l2289
  2771  00190A                     l2283:
  2772                           
  2773                           ;unmc_lcd_216.c: 144: lcd_send_nibble(0x03);
  2774  00190A  0E03               	movlw	3
  2775  00190C  ECEA  F00C         	call	_lcd_send_nibble
  2776                           
  2777                           ;unmc_lcd_216.c: 145: Delay1KTCYx(8000000UL/800000UL);
  2778  001910  0E0A               	movlw	10
  2779  001912  EC73  F00E         	call	_Delay1KTCYx
  2780  001916  2A28               	incf	lcd_init@i,f,c
  2781  001918  D7F4               	goto	l2279
  2782  00191A                     l2289:
  2783                           
  2784                           ;unmc_lcd_216.c: 146: }
  2785                           ;unmc_lcd_216.c: 148: lcd_send_nibble(0x02);
  2786  00191A  0E02               	movlw	2
  2787  00191C  ECEA  F00C         	call	_lcd_send_nibble
  2788                           
  2789                           ;unmc_lcd_216.c: 150: for(i=0; i < sizeof(LCD_INIT_STRING); i++){
  2790  001920  0E00               	movlw	0
  2791  001922  6E28               	movwf	lcd_init@i,c
  2792  001924  0E03               	movlw	3
  2793  001926  6428               	cpfsgt	lcd_init@i,c
  2794  001928  D002               	goto	l2297
  2795  00192A  0012               	return	
  2796  00192C  0012               	return	
  2797  00192E                     l2297:
  2798                           
  2799                           ;unmc_lcd_216.c: 151: lcd_send_byte(0, LCD_INIT_STRING[i]);
  2800  00192E  5028               	movf	lcd_init@i,w,c
  2801  001930  0D01               	mullw	1
  2802  001932  0E0B               	movlw	low _LCD_INIT_STRING
  2803  001934  24F3               	addwf	prodl,w,c
  2804  001936  6EF6               	movwf	tblptrl,c
  2805  001938  0E0F               	movlw	high _LCD_INIT_STRING
  2806  00193A  20F4               	addwfc	prodh,w,c
  2807  00193C  6EF7               	movwf	tblptrh,c
  2808  00193E                     	if	0	;There are less than 3 active tblptr bytes
  2809  00193E                     	endif
  2810  00193E  0008               	tblrd		*
  2811  001940  CFF5 F026          	movff	tablat,lcd_send_byte@n
  2812  001944  0E00               	movlw	0
  2813  001946  EC0F  F00E         	call	_lcd_send_byte
  2814                           
  2815                           ;unmc_lcd_216.c: 153: Delay1KTCYx(8000000UL/800000UL);
  2816  00194A  0E0A               	movlw	10
  2817  00194C  EC73  F00E         	call	_Delay1KTCYx
  2818  001950  2A28               	incf	lcd_init@i,f,c
  2819  001952  0E03               	movlw	3
  2820  001954  6428               	cpfsgt	lcd_init@i,c
  2821  001956  D7EB               	goto	l2297
  2822  001958  0012               	return	
  2823  00195A  0012               	return		;funcret
  2824  00195C                     __end_of_lcd_init:
  2825                           	opt stack 0
  2826                           tblptru	equ	0xFF8
  2827                           tblptrh	equ	0xFF7
  2828                           tblptrl	equ	0xFF6
  2829                           tablat	equ	0xFF5
  2830                           prodh	equ	0xFF4
  2831                           prodl	equ	0xFF3
  2832                           indf0	equ	0xFEF
  2833                           postinc0	equ	0xFEE
  2834                           fsr0h	equ	0xFEA
  2835                           fsr0l	equ	0xFE9
  2836                           wreg	equ	0xFE8
  2837                           postdec1	equ	0xFE5
  2838                           fsr1l	equ	0xFE1
  2839                           indf2	equ	0xFDF
  2840                           postinc2	equ	0xFDE
  2841                           postdec2	equ	0xFDD
  2842                           fsr2h	equ	0xFDA
  2843                           fsr2l	equ	0xFD9
  2844                           status	equ	0xFD8
  2845                           
  2846 ;; *************** function _Delay1KTCYx *****************
  2847 ;; Defined at:
  2848 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\d1ktcyx.c"
  2849 ;; Parameters:    Size  Location     Type
  2850 ;;  unit            1    wreg     unsigned char 
  2851 ;; Auto vars:     Size  Location     Type
  2852 ;;  unit            1    0[COMRAM] unsigned char 
  2853 ;; Return value:  Size  Location     Type
  2854 ;;		None               void
  2855 ;; Registers used:
  2856 ;;		wreg
  2857 ;; Tracked objects:
  2858 ;;		On entry : 0/0
  2859 ;;		On exit  : 0/0
  2860 ;;		Unchanged: 0/0
  2861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2863 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2865 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2866 ;;Total ram usage:        1 bytes
  2867 ;; Hardware stack levels used:    1
  2868 ;; This function calls:
  2869 ;;		Nothing
  2870 ;; This function is called by:
  2871 ;;		_lcd_init
  2872 ;;		_DelayPORXLCD
  2873 ;; This function uses a non-reentrant model
  2874 ;;
  2875                           
  2876                           	psect	text13
  2877  001CE6                     __ptext13:
  2878                           	opt stack 0
  2879  001CE6                     _Delay1KTCYx:
  2880                           	opt stack 28
  2881                           
  2882                           ;incstack = 0
  2883                           ;Delay1KTCYx@unit stored from wreg
  2884  001CE6  6E24               	movwf	Delay1KTCYx@unit,c
  2885  001CE8  0EFA               	movlw	250
  2886  001CEA                     u2337:
  2887  001CEA  F000               	nop	
  2888  001CEC  2EE8               	decfsz	wreg,f,c
  2889  001CEE  D7FD               	goto	u2337
  2890  001CF0  2E24               	decfsz	Delay1KTCYx@unit,f,c
  2891  001CF2  D7FA               	goto	l1281
  2892  001CF4  0012               	return	
  2893  001CF6  0012               	return		;funcret
  2894  001CF8                     __end_of_Delay1KTCYx:
  2895                           	opt stack 0
  2896                           tblptru	equ	0xFF8
  2897                           tblptrh	equ	0xFF7
  2898                           tblptrl	equ	0xFF6
  2899                           tablat	equ	0xFF5
  2900                           prodh	equ	0xFF4
  2901                           prodl	equ	0xFF3
  2902                           indf0	equ	0xFEF
  2903                           postinc0	equ	0xFEE
  2904                           fsr0h	equ	0xFEA
  2905                           fsr0l	equ	0xFE9
  2906                           wreg	equ	0xFE8
  2907                           postdec1	equ	0xFE5
  2908                           fsr1l	equ	0xFE1
  2909                           indf2	equ	0xFDF
  2910                           postinc2	equ	0xFDE
  2911                           postdec2	equ	0xFDD
  2912                           fsr2h	equ	0xFDA
  2913                           fsr2l	equ	0xFD9
  2914                           status	equ	0xFD8
  2915                           
  2916 ;; *************** function _lcd_comand *****************
  2917 ;; Defined at:
  2918 ;;		line 189 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2919 ;; Parameters:    Size  Location     Type
  2920 ;;  d               1    wreg     unsigned char 
  2921 ;; Auto vars:     Size  Location     Type
  2922 ;;  d               1    4[COMRAM] unsigned char 
  2923 ;; Return value:  Size  Location     Type
  2924 ;;		None               void
  2925 ;; Registers used:
  2926 ;;		wreg, status,2, status,0, cstack
  2927 ;; Tracked objects:
  2928 ;;		On entry : 0/0
  2929 ;;		On exit  : 0/0
  2930 ;;		Unchanged: 0/0
  2931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2933 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2935 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2936 ;;Total ram usage:        1 bytes
  2937 ;; Hardware stack levels used:    1
  2938 ;; Hardware stack levels required when called:    2
  2939 ;; This function calls:
  2940 ;;		_lcd_send_byte
  2941 ;; This function is called by:
  2942 ;;		_caratula
  2943 ;;		_Setup
  2944 ;; This function uses a non-reentrant model
  2945 ;;
  2946                           
  2947                           	psect	text14
  2948  001D1C                     __ptext14:
  2949                           	opt stack 0
  2950  001D1C                     _lcd_comand:
  2951                           	opt stack 27
  2952                           
  2953                           ;incstack = 0
  2954                           ;lcd_comand@d stored from wreg
  2955  001D1C  6E28               	movwf	lcd_comand@d,c
  2956                           
  2957                           ;unmc_lcd_216.c: 190: lcd_send_byte(0,d);
  2958  001D1E  C028  F026         	movff	lcd_comand@d,lcd_send_byte@n
  2959  001D22  0E00               	movlw	0
  2960  001D24  EC0F  F00E         	call	_lcd_send_byte
  2961  001D28  0012               	return		;funcret
  2962  001D2A                     __end_of_lcd_comand:
  2963                           	opt stack 0
  2964                           tblptru	equ	0xFF8
  2965                           tblptrh	equ	0xFF7
  2966                           tblptrl	equ	0xFF6
  2967                           tablat	equ	0xFF5
  2968                           prodh	equ	0xFF4
  2969                           prodl	equ	0xFF3
  2970                           indf0	equ	0xFEF
  2971                           postinc0	equ	0xFEE
  2972                           fsr0h	equ	0xFEA
  2973                           fsr0l	equ	0xFE9
  2974                           wreg	equ	0xFE8
  2975                           postdec1	equ	0xFE5
  2976                           fsr1l	equ	0xFE1
  2977                           indf2	equ	0xFDF
  2978                           postinc2	equ	0xFDE
  2979                           postdec2	equ	0xFDD
  2980                           fsr2h	equ	0xFDA
  2981                           fsr2l	equ	0xFD9
  2982                           status	equ	0xFD8
  2983                           
  2984 ;; *************** function _lcd_send_byte *****************
  2985 ;; Defined at:
  2986 ;;		line 86 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2987 ;; Parameters:    Size  Location     Type
  2988 ;;  address         1    wreg     unsigned char 
  2989 ;;  n               1    2[COMRAM] unsigned char 
  2990 ;; Auto vars:     Size  Location     Type
  2991 ;;  address         1    3[COMRAM] unsigned char 
  2992 ;; Return value:  Size  Location     Type
  2993 ;;		None               void
  2994 ;; Registers used:
  2995 ;;		wreg, status,2, status,0, cstack
  2996 ;; Tracked objects:
  2997 ;;		On entry : 0/0
  2998 ;;		On exit  : 0/0
  2999 ;;		Unchanged: 0/0
  3000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3001 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3002 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3004 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3005 ;;Total ram usage:        2 bytes
  3006 ;; Hardware stack levels used:    1
  3007 ;; Hardware stack levels required when called:    1
  3008 ;; This function calls:
  3009 ;;		_Delay100TCYx
  3010 ;;		_lcd_send_nibble
  3011 ;; This function is called by:
  3012 ;;		_lcd_init
  3013 ;;		_lcd_gotoxy
  3014 ;;		_lcd_putc
  3015 ;;		_lcd_comand
  3016 ;;		_lcd_setcursor_vb
  3017 ;; This function uses a non-reentrant model
  3018 ;;
  3019                           
  3020                           	psect	text15
  3021  001C1E                     __ptext15:
  3022                           	opt stack 0
  3023  001C1E                     _lcd_send_byte:
  3024                           	opt stack 26
  3025                           
  3026                           ;incstack = 0
  3027                           ;lcd_send_byte@address stored from wreg
  3028  001C1E  6E27               	movwf	lcd_send_byte@address,c
  3029                           
  3030                           ;unmc_lcd_216.c: 88: LATBbits.LATB3=0;
  3031  001C20  968A               	bcf	3978,3,c	;volatile
  3032                           
  3033                           ;unmc_lcd_216.c: 93: Delay100TCYx(8000000UL/4000000UL);
  3034  001C22  0E02               	movlw	2
  3035  001C24  EC7C  F00E         	call	_Delay100TCYx
  3036                           
  3037                           ;unmc_lcd_216.c: 96: TRISBbits.TRISB4=0;
  3038  001C28  9893               	bcf	3987,4,c	;volatile
  3039                           
  3040                           ;unmc_lcd_216.c: 97: TRISBbits.TRISB5=0;
  3041  001C2A  9A93               	bcf	3987,5,c	;volatile
  3042                           
  3043                           ;unmc_lcd_216.c: 98: TRISBbits.TRISB6=0;
  3044  001C2C  9C93               	bcf	3987,6,c	;volatile
  3045                           
  3046                           ;unmc_lcd_216.c: 99: TRISBbits.TRISB7=0;
  3047  001C2E  9E93               	bcf	3987,7,c	;volatile
  3048                           
  3049                           ;unmc_lcd_216.c: 101: if(address)
  3050  001C30  5027               	movf	lcd_send_byte@address,w,c
  3051  001C32  B4D8               	btfsc	status,2,c
  3052  001C34  D002               	goto	l18
  3053                           
  3054                           ;unmc_lcd_216.c: 102: LATBbits.LATB3=1;
  3055  001C36  868A               	bsf	3978,3,c	;volatile
  3056  001C38  D001               	goto	l19
  3057  001C3A                     l18:
  3058                           
  3059                           ;unmc_lcd_216.c: 103: else
  3060                           ;unmc_lcd_216.c: 104: LATBbits.LATB3=0;
  3061  001C3A  968A               	bcf	3978,3,c	;volatile
  3062  001C3C                     l19:
  3063                           
  3064                           ;unmc_lcd_216.c: 106: __nop();
  3065  001C3C  F000               	nop	
  3066                           
  3067                           ;unmc_lcd_216.c: 113: lcd_send_nibble(n >> 4);
  3068  001C3E  3826               	swapf	lcd_send_byte@n,w,c
  3069  001C40  0B0F               	andlw	15
  3070  001C42  ECEA  F00C         	call	_lcd_send_nibble
  3071                           
  3072                           ;unmc_lcd_216.c: 114: lcd_send_nibble(n & 0xf);
  3073  001C46  5026               	movf	lcd_send_byte@n,w,c
  3074  001C48  0B0F               	andlw	15
  3075  001C4A  ECEA  F00C         	call	_lcd_send_nibble
  3076  001C4E  0012               	return		;funcret
  3077  001C50                     __end_of_lcd_send_byte:
  3078                           	opt stack 0
  3079                           tblptru	equ	0xFF8
  3080                           tblptrh	equ	0xFF7
  3081                           tblptrl	equ	0xFF6
  3082                           tablat	equ	0xFF5
  3083                           prodh	equ	0xFF4
  3084                           prodl	equ	0xFF3
  3085                           indf0	equ	0xFEF
  3086                           postinc0	equ	0xFEE
  3087                           fsr0h	equ	0xFEA
  3088                           fsr0l	equ	0xFE9
  3089                           wreg	equ	0xFE8
  3090                           postdec1	equ	0xFE5
  3091                           fsr1l	equ	0xFE1
  3092                           indf2	equ	0xFDF
  3093                           postinc2	equ	0xFDE
  3094                           postdec2	equ	0xFDD
  3095                           fsr2h	equ	0xFDA
  3096                           fsr2l	equ	0xFD9
  3097                           status	equ	0xFD8
  3098                           
  3099 ;; *************** function _lcd_send_nibble *****************
  3100 ;; Defined at:
  3101 ;;		line 25 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3102 ;; Parameters:    Size  Location     Type
  3103 ;;  nibble          1    wreg     unsigned char 
  3104 ;; Auto vars:     Size  Location     Type
  3105 ;;  nibble          1    1[COMRAM] unsigned char 
  3106 ;; Return value:  Size  Location     Type
  3107 ;;		None               void
  3108 ;; Registers used:
  3109 ;;		wreg, status,2, status,0
  3110 ;; Tracked objects:
  3111 ;;		On entry : 0/0
  3112 ;;		On exit  : 0/0
  3113 ;;		Unchanged: 0/0
  3114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3116 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3117 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3118 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3119 ;;Total ram usage:        2 bytes
  3120 ;; Hardware stack levels used:    1
  3121 ;; This function calls:
  3122 ;;		Nothing
  3123 ;; This function is called by:
  3124 ;;		_lcd_send_byte
  3125 ;;		_lcd_init
  3126 ;; This function uses a non-reentrant model
  3127 ;;
  3128                           
  3129                           	psect	text16
  3130  0019D4                     __ptext16:
  3131                           	opt stack 0
  3132  0019D4                     _lcd_send_nibble:
  3133                           	opt stack 26
  3134                           
  3135                           ;incstack = 0
  3136                           ;lcd_send_nibble@nibble stored from wreg
  3137  0019D4  6E25               	movwf	lcd_send_nibble@nibble,c
  3138                           
  3139                           ;unmc_lcd_216.c: 27: LATBbits.LATB4=!!(nibble & 0x01);
  3140  0019D6  A025               	btfss	lcd_send_nibble@nibble,0,c
  3141  0019D8  D003               	goto	u1160
  3142  0019DA  6A24               	clrf	??_lcd_send_nibble& (0+255),c
  3143  0019DC  2A24               	incf	??_lcd_send_nibble& (0+255),f,c
  3144  0019DE  D001               	goto	u1178
  3145  0019E0                     u1160:
  3146  0019E0  6A24               	clrf	??_lcd_send_nibble& (0+255),c
  3147  0019E2                     u1178:
  3148  0019E2  3A24               	swapf	??_lcd_send_nibble,f,c
  3149  0019E4  508A               	movf	3978,w,c	;volatile
  3150  0019E6  1824               	xorwf	??_lcd_send_nibble,w,c
  3151  0019E8  0BEF               	andlw	-17
  3152  0019EA  1824               	xorwf	??_lcd_send_nibble,w,c
  3153  0019EC  6E8A               	movwf	3978,c	;volatile
  3154                           
  3155                           ;unmc_lcd_216.c: 28: LATBbits.LATB5=!!(nibble & 0x02);
  3156  0019EE  A225               	btfss	lcd_send_nibble@nibble,1,c
  3157  0019F0  D003               	goto	u1180
  3158  0019F2  6A24               	clrf	??_lcd_send_nibble& (0+255),c
  3159  0019F4  2A24               	incf	??_lcd_send_nibble& (0+255),f,c
  3160  0019F6  D001               	goto	u1198
  3161  0019F8                     u1180:
  3162  0019F8  6A24               	clrf	??_lcd_send_nibble& (0+255),c
  3163  0019FA                     u1198:
  3164  0019FA  3A24               	swapf	??_lcd_send_nibble,f,c
  3165  0019FC  4624               	rlncf	??_lcd_send_nibble,f,c
  3166  0019FE  508A               	movf	3978,w,c	;volatile
  3167  001A00  1824               	xorwf	??_lcd_send_nibble,w,c
  3168  001A02  0BDF               	andlw	-33
  3169  001A04  1824               	xorwf	??_lcd_send_nibble,w,c
  3170  001A06  6E8A               	movwf	3978,c	;volatile
  3171                           
  3172                           ;unmc_lcd_216.c: 29: LATBbits.LATB6=!!(nibble & 0x04);
  3173  001A08  A425               	btfss	lcd_send_nibble@nibble,2,c
  3174  001A0A  D003               	goto	u1200
  3175  001A0C  6A24               	clrf	??_lcd_send_nibble& (0+255),c
  3176  001A0E  2A24               	incf	??_lcd_send_nibble& (0+255),f,c
  3177  001A10  D001               	goto	u1218
  3178  001A12                     u1200:
  3179  001A12  6A24               	clrf	??_lcd_send_nibble& (0+255),c
  3180  001A14                     u1218:
  3181  001A14  3A24               	swapf	??_lcd_send_nibble,f,c
  3182  001A16  4624               	rlncf	??_lcd_send_nibble,f,c
  3183  001A18  4624               	rlncf	??_lcd_send_nibble,f,c
  3184  001A1A  508A               	movf	3978,w,c	;volatile
  3185  001A1C  1824               	xorwf	??_lcd_send_nibble,w,c
  3186  001A1E  0BBF               	andlw	-65
  3187  001A20  1824               	xorwf	??_lcd_send_nibble,w,c
  3188  001A22  6E8A               	movwf	3978,c	;volatile
  3189                           
  3190                           ;unmc_lcd_216.c: 30: LATBbits.LATB7=!!(nibble & 0x08);
  3191  001A24  A625               	btfss	lcd_send_nibble@nibble,3,c
  3192  001A26  D003               	goto	u1220
  3193  001A28  6A24               	clrf	??_lcd_send_nibble& (0+255),c
  3194  001A2A  2A24               	incf	??_lcd_send_nibble& (0+255),f,c
  3195  001A2C  D001               	goto	u1238
  3196  001A2E                     u1220:
  3197  001A2E  6A24               	clrf	??_lcd_send_nibble& (0+255),c
  3198  001A30                     u1238:
  3199  001A30  3224               	rrcf	??_lcd_send_nibble,f,c
  3200  001A32  3224               	rrcf	??_lcd_send_nibble,f,c
  3201  001A34  508A               	movf	3978,w,c	;volatile
  3202  001A36  1824               	xorwf	??_lcd_send_nibble,w,c
  3203  001A38  0B7F               	andlw	-129
  3204  001A3A  1824               	xorwf	??_lcd_send_nibble,w,c
  3205  001A3C  6E8A               	movwf	3978,c	;volatile
  3206                           
  3207                           ;unmc_lcd_216.c: 32: __nop();
  3208  001A3E  F000               	nop	
  3209                           
  3210                           ;unmc_lcd_216.c: 33: LATBbits.LATB2=1;
  3211  001A40  848A               	bsf	3978,2,c	;volatile
  3212                           
  3213                           ;unmc_lcd_216.c: 34: __nop();__nop();
  3214  001A42  F000               	nop	
  3215  001A44  F000               	nop	
  3216                           
  3217                           ;unmc_lcd_216.c: 35: LATBbits.LATB2=0;
  3218  001A46  948A               	bcf	3978,2,c	;volatile
  3219  001A48  0012               	return		;funcret
  3220  001A4A                     __end_of_lcd_send_nibble:
  3221                           	opt stack 0
  3222                           tblptru	equ	0xFF8
  3223                           tblptrh	equ	0xFF7
  3224                           tblptrl	equ	0xFF6
  3225                           tablat	equ	0xFF5
  3226                           prodh	equ	0xFF4
  3227                           prodl	equ	0xFF3
  3228                           indf0	equ	0xFEF
  3229                           postinc0	equ	0xFEE
  3230                           fsr0h	equ	0xFEA
  3231                           fsr0l	equ	0xFE9
  3232                           wreg	equ	0xFE8
  3233                           postdec1	equ	0xFE5
  3234                           fsr1l	equ	0xFE1
  3235                           indf2	equ	0xFDF
  3236                           postinc2	equ	0xFDE
  3237                           postdec2	equ	0xFDD
  3238                           fsr2h	equ	0xFDA
  3239                           fsr2l	equ	0xFD9
  3240                           status	equ	0xFD8
  3241                           
  3242 ;; *************** function _Delay100TCYx *****************
  3243 ;; Defined at:
  3244 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\d100tcyx.c"
  3245 ;; Parameters:    Size  Location     Type
  3246 ;;  unit            1    wreg     unsigned char 
  3247 ;; Auto vars:     Size  Location     Type
  3248 ;;  unit            1    0[COMRAM] unsigned char 
  3249 ;; Return value:  Size  Location     Type
  3250 ;;		None               void
  3251 ;; Registers used:
  3252 ;;		wreg
  3253 ;; Tracked objects:
  3254 ;;		On entry : 0/0
  3255 ;;		On exit  : 0/0
  3256 ;;		Unchanged: 0/0
  3257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3259 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3261 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3262 ;;Total ram usage:        1 bytes
  3263 ;; Hardware stack levels used:    1
  3264 ;; This function calls:
  3265 ;;		Nothing
  3266 ;; This function is called by:
  3267 ;;		_lcd_send_byte
  3268 ;; This function uses a non-reentrant model
  3269 ;;
  3270                           
  3271                           	psect	text17
  3272  001CF8                     __ptext17:
  3273                           	opt stack 0
  3274  001CF8                     _Delay100TCYx:
  3275                           	opt stack 26
  3276                           
  3277                           ;incstack = 0
  3278                           ;Delay100TCYx@unit stored from wreg
  3279  001CF8  6E24               	movwf	Delay100TCYx@unit,c
  3280  001CFA  0E21               	movlw	33
  3281  001CFC                     u2347:
  3282  001CFC  2EE8               	decfsz	wreg,f,c
  3283  001CFE  D7FE               	goto	u2347
  3284  001D00  F000               	nop	
  3285  001D02  2E24               	decfsz	Delay100TCYx@unit,f,c
  3286  001D04  D7FA               	goto	l1991
  3287  001D06  0012               	return	
  3288  001D08  0012               	return		;funcret
  3289  001D0A                     __end_of_Delay100TCYx:
  3290                           	opt stack 0
  3291                           tblptru	equ	0xFF8
  3292                           tblptrh	equ	0xFF7
  3293                           tblptrl	equ	0xFF6
  3294                           tablat	equ	0xFF5
  3295                           prodh	equ	0xFF4
  3296                           prodl	equ	0xFF3
  3297                           indf0	equ	0xFEF
  3298                           postinc0	equ	0xFEE
  3299                           fsr0h	equ	0xFEA
  3300                           fsr0l	equ	0xFE9
  3301                           wreg	equ	0xFE8
  3302                           postdec1	equ	0xFE5
  3303                           fsr1l	equ	0xFE1
  3304                           indf2	equ	0xFDF
  3305                           postinc2	equ	0xFDE
  3306                           postdec2	equ	0xFDD
  3307                           fsr2h	equ	0xFDA
  3308                           fsr2l	equ	0xFD9
  3309                           status	equ	0xFD8
  3310                           
  3311 ;; *************** function _Write_RTC *****************
  3312 ;; Defined at:
  3313 ;;		line 22 in file "../Program Files/Unimic/unmc_01/sources/unmc_rtcc_01.c"
  3314 ;; Parameters:    Size  Location     Type
  3315 ;;		None
  3316 ;; Auto vars:     Size  Location     Type
  3317 ;;		None
  3318 ;; Return value:  Size  Location     Type
  3319 ;;		None               void
  3320 ;; Registers used:
  3321 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3322 ;; Tracked objects:
  3323 ;;		On entry : 0/0
  3324 ;;		On exit  : 0/0
  3325 ;;		Unchanged: 0/0
  3326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3330 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3331 ;;Total ram usage:        0 bytes
  3332 ;; Hardware stack levels used:    1
  3333 ;; Hardware stack levels required when called:    2
  3334 ;; This function calls:
  3335 ;;		_RtccWrOn
  3336 ;;		_RtccWriteDate
  3337 ;;		_RtccWriteTime
  3338 ;;		___awdiv
  3339 ;; This function is called by:
  3340 ;;		_Setup
  3341 ;;		_setClock
  3342 ;; This function uses a non-reentrant model
  3343 ;;
  3344                           
  3345                           	psect	text18
  3346  0014AC                     __ptext18:
  3347                           	opt stack 0
  3348  0014AC                     _Write_RTC:
  3349                           	opt stack 27
  3350                           
  3351                           ;unmc_rtcc_01.c: 24: RtccWrOn();
  3352                           
  3353                           ;incstack = 0
  3354  0014AC  EC85  F00E         	call	_RtccWrOn	;wreg free
  3355                           
  3356                           ;unmc_rtcc_01.c: 26: PIE3bits.RTCCIE=1;
  3357  0014B0  80A3               	bsf	4003,0,c	;volatile
  3358                           
  3359                           ;unmc_rtcc_01.c: 27: segundo_d=segundo/10;
  3360  0014B2  C019  F024         	movff	_segundo,___awdiv@dividend
  3361  0014B6  C01A  F025         	movff	_segundo+1,___awdiv@dividend+1
  3362  0014BA  0E00               	movlw	0
  3363  0014BC  6E27               	movwf	___awdiv@divisor+1,c
  3364  0014BE  0E0A               	movlw	10
  3365  0014C0  6E26               	movwf	___awdiv@divisor,c
  3366  0014C2  EC23  F00C         	call	___awdiv	;wreg free
  3367  0014C6  5024               	movf	?___awdiv,w,c
  3368  0014C8  6E51               	movwf	_segundo_d,c
  3369                           
  3370                           ;unmc_rtcc_01.c: 28: segundo_u=segundo-segundo_d*10;
  3371  0014CA  5051               	movf	_segundo_d,w,c
  3372  0014CC  0D0A               	mullw	10
  3373  0014CE  50F3               	movf	prodl,w,c
  3374  0014D0  0800               	sublw	0
  3375  0014D2  2419               	addwf	_segundo,w,c
  3376  0014D4  6E52               	movwf	_segundo_u,c
  3377                           
  3378                           ;unmc_rtcc_01.c: 29: RtccTime.f.sec =segundo_d*16+segundo_u;
  3379  0014D6  5051               	movf	_segundo_d,w,c
  3380  0014D8  0D10               	mullw	16
  3381  0014DA  50F3               	movf	prodl,w,c
  3382  0014DC  2452               	addwf	_segundo_u,w,c
  3383  0014DE  6E21               	movwf	_RtccTime+1,c
  3384                           
  3385                           ;unmc_rtcc_01.c: 30: minuto_d=minuto/10;
  3386  0014E0  C05D  F024         	movff	_minuto,___awdiv@dividend
  3387  0014E4  C05E  F025         	movff	_minuto+1,___awdiv@dividend+1
  3388  0014E8  0E00               	movlw	0
  3389  0014EA  6E27               	movwf	___awdiv@divisor+1,c
  3390  0014EC  0E0A               	movlw	10
  3391  0014EE  6E26               	movwf	___awdiv@divisor,c
  3392  0014F0  EC23  F00C         	call	___awdiv	;wreg free
  3393  0014F4  5024               	movf	?___awdiv,w,c
  3394  0014F6  6E4F               	movwf	_minuto_d,c
  3395                           
  3396                           ;unmc_rtcc_01.c: 31: minuto_u=minuto-minuto_d*10;
  3397  0014F8  504F               	movf	_minuto_d,w,c
  3398  0014FA  0D0A               	mullw	10
  3399  0014FC  50F3               	movf	prodl,w,c
  3400  0014FE  0800               	sublw	0
  3401  001500  245D               	addwf	_minuto,w,c
  3402  001502  6E50               	movwf	_minuto_u,c
  3403                           
  3404                           ;unmc_rtcc_01.c: 32: RtccTime.f.min =minuto_d*16+minuto_u;
  3405  001504  504F               	movf	_minuto_d,w,c
  3406  001506  0D10               	mullw	16
  3407  001508  50F3               	movf	prodl,w,c
  3408  00150A  2450               	addwf	_minuto_u,w,c
  3409  00150C  6E22               	movwf	_RtccTime+2,c
  3410                           
  3411                           ;unmc_rtcc_01.c: 33: hora_d=hora/10;
  3412  00150E  C059  F024         	movff	_hora,___awdiv@dividend
  3413  001512  C05A  F025         	movff	_hora+1,___awdiv@dividend+1
  3414  001516  0E00               	movlw	0
  3415  001518  6E27               	movwf	___awdiv@divisor+1,c
  3416  00151A  0E0A               	movlw	10
  3417  00151C  6E26               	movwf	___awdiv@divisor,c
  3418  00151E  EC23  F00C         	call	___awdiv	;wreg free
  3419  001522  5024               	movf	?___awdiv,w,c
  3420  001524  6E4B               	movwf	_hora_d,c
  3421                           
  3422                           ;unmc_rtcc_01.c: 34: hora_u=hora-hora_d*10;
  3423  001526  504B               	movf	_hora_d,w,c
  3424  001528  0D0A               	mullw	10
  3425  00152A  50F3               	movf	prodl,w,c
  3426  00152C  0800               	sublw	0
  3427  00152E  2459               	addwf	_hora,w,c
  3428  001530  6E4C               	movwf	_hora_u,c
  3429                           
  3430                           ;unmc_rtcc_01.c: 35: RtccTime.f.hour=hora_d*16+hora_u;
  3431  001532  504B               	movf	_hora_d,w,c
  3432  001534  0D10               	mullw	16
  3433  001536  50F3               	movf	prodl,w,c
  3434  001538  244C               	addwf	_hora_u,w,c
  3435  00153A  6E23               	movwf	_RtccTime+3,c
  3436                           
  3437                           ;unmc_rtcc_01.c: 36: anio_d=anio/10;
  3438  00153C  C053  F024         	movff	_anio,___awdiv@dividend
  3439  001540  C054  F025         	movff	_anio+1,___awdiv@dividend+1
  3440  001544  0E00               	movlw	0
  3441  001546  6E27               	movwf	___awdiv@divisor+1,c
  3442  001548  0E0A               	movlw	10
  3443  00154A  6E26               	movwf	___awdiv@divisor,c
  3444  00154C  EC23  F00C         	call	___awdiv	;wreg free
  3445  001550  5024               	movf	?___awdiv,w,c
  3446  001552  6E46               	movwf	_anio_d,c
  3447                           
  3448                           ;unmc_rtcc_01.c: 37: anio_u=anio-anio_d*10;
  3449  001554  5046               	movf	_anio_d,w,c
  3450  001556  0D0A               	mullw	10
  3451  001558  50F3               	movf	prodl,w,c
  3452  00155A  0800               	sublw	0
  3453  00155C  2453               	addwf	_anio,w,c
  3454  00155E  6E47               	movwf	_anio_u,c
  3455                           
  3456                           ;unmc_rtcc_01.c: 38: RtccDate.f.year=anio_d*16+anio_u;
  3457  001560  5046               	movf	_anio_d,w,c
  3458  001562  0D10               	mullw	16
  3459  001564  50F3               	movf	prodl,w,c
  3460  001566  2447               	addwf	_anio_u,w,c
  3461  001568  6E1F               	movwf	_RtccDate+3,c
  3462                           
  3463                           ;unmc_rtcc_01.c: 39: mes_d=mes/10;
  3464  00156A  C05B  F024         	movff	_mes,___awdiv@dividend
  3465  00156E  C05C  F025         	movff	_mes+1,___awdiv@dividend+1
  3466  001572  0E00               	movlw	0
  3467  001574  6E27               	movwf	___awdiv@divisor+1,c
  3468  001576  0E0A               	movlw	10
  3469  001578  6E26               	movwf	___awdiv@divisor,c
  3470  00157A  EC23  F00C         	call	___awdiv	;wreg free
  3471  00157E  5024               	movf	?___awdiv,w,c
  3472  001580  6E4D               	movwf	_mes_d,c
  3473                           
  3474                           ;unmc_rtcc_01.c: 40: mes_u=mes-mes_d*10;
  3475  001582  504D               	movf	_mes_d,w,c
  3476  001584  0D0A               	mullw	10
  3477  001586  50F3               	movf	prodl,w,c
  3478  001588  0800               	sublw	0
  3479  00158A  245B               	addwf	_mes,w,c
  3480  00158C  6E4E               	movwf	_mes_u,c
  3481                           
  3482                           ;unmc_rtcc_01.c: 41: RtccDate.f.mon=mes_d*16+mes_u;
  3483  00158E  504D               	movf	_mes_d,w,c
  3484  001590  0D10               	mullw	16
  3485  001592  50F3               	movf	prodl,w,c
  3486  001594  244E               	addwf	_mes_u,w,c
  3487  001596  6E1E               	movwf	_RtccDate+2,c
  3488                           
  3489                           ;unmc_rtcc_01.c: 42: fecha_d=dia/10;
  3490  001598  C055  F024         	movff	_dia,___awdiv@dividend
  3491  00159C  C056  F025         	movff	_dia+1,___awdiv@dividend+1
  3492  0015A0  0E00               	movlw	0
  3493  0015A2  6E27               	movwf	___awdiv@divisor+1,c
  3494  0015A4  0E0A               	movlw	10
  3495  0015A6  6E26               	movwf	___awdiv@divisor,c
  3496  0015A8  EC23  F00C         	call	___awdiv	;wreg free
  3497  0015AC  5024               	movf	?___awdiv,w,c
  3498  0015AE  6E49               	movwf	_fecha_d,c
  3499                           
  3500                           ;unmc_rtcc_01.c: 43: fecha_u=dia-fecha_d*10;
  3501  0015B0  5049               	movf	_fecha_d,w,c
  3502  0015B2  0D0A               	mullw	10
  3503  0015B4  50F3               	movf	prodl,w,c
  3504  0015B6  0800               	sublw	0
  3505  0015B8  2455               	addwf	_dia,w,c
  3506  0015BA  6E4A               	movwf	_fecha_u,c
  3507                           
  3508                           ;unmc_rtcc_01.c: 44: RtccDate.f.mday=fecha_d*16+fecha_u;
  3509  0015BC  5049               	movf	_fecha_d,w,c
  3510  0015BE  0D10               	mullw	16
  3511  0015C0  50F3               	movf	prodl,w,c
  3512  0015C2  244A               	addwf	_fecha_u,w,c
  3513  0015C4  6E1D               	movwf	_RtccDate+1,c
  3514                           
  3515                           ;unmc_rtcc_01.c: 45: dia_semana=diasem;
  3516  0015C6  C057  F048         	movff	_diasem,_dia_semana
  3517                           
  3518                           ;unmc_rtcc_01.c: 46: RtccDate.f.wday =diasem;
  3519  0015CA  C057  F01C         	movff	_diasem,_RtccDate
  3520                           
  3521                           ;unmc_rtcc_01.c: 47: RtccWriteTime(&RtccTime,1);
  3522  0015CE  0E20               	movlw	low _RtccTime
  3523  0015D0  6E24               	movwf	RtccWriteTime@pTm,c
  3524  0015D2  0E00               	movlw	high _RtccTime
  3525  0015D4  6E25               	movwf	RtccWriteTime@pTm+1,c
  3526  0015D6  0E01               	movlw	1
  3527  0015D8  6E26               	movwf	RtccWriteTime@di,c
  3528  0015DA  EC9D  F00B         	call	_RtccWriteTime	;wreg free
  3529                           
  3530                           ;unmc_rtcc_01.c: 48: RtccWriteDate(&RtccDate,1);
  3531  0015DE  0E1C               	movlw	low _RtccDate
  3532  0015E0  6E24               	movwf	RtccWriteDate@pDt,c
  3533  0015E2  0E00               	movlw	high _RtccDate
  3534  0015E4  6E25               	movwf	RtccWriteDate@pDt+1,c
  3535  0015E6  0E01               	movlw	1
  3536  0015E8  6E26               	movwf	RtccWriteDate@di,c
  3537  0015EA  ECFA  F00A         	call	_RtccWriteDate	;wreg free
  3538                           
  3539                           ;unmc_rtcc_01.c: 49: (RTCCFGbits.RTCEN=1);
  3540  0015EE  010F               	movlb	15	; () banked
  3541  0015F0  8F3F               	bsf	63,7,b	;volatile
  3542                           
  3543                           ; BSR set to: 15
  3544  0015F2  0012               	return		;funcret
  3545  0015F4                     __end_of_Write_RTC:
  3546                           	opt stack 0
  3547                           tblptru	equ	0xFF8
  3548                           tblptrh	equ	0xFF7
  3549                           tblptrl	equ	0xFF6
  3550                           tablat	equ	0xFF5
  3551                           prodh	equ	0xFF4
  3552                           prodl	equ	0xFF3
  3553                           indf0	equ	0xFEF
  3554                           postinc0	equ	0xFEE
  3555                           fsr0h	equ	0xFEA
  3556                           fsr0l	equ	0xFE9
  3557                           wreg	equ	0xFE8
  3558                           postdec1	equ	0xFE5
  3559                           fsr1l	equ	0xFE1
  3560                           indf2	equ	0xFDF
  3561                           postinc2	equ	0xFDE
  3562                           postdec2	equ	0xFDD
  3563                           fsr2h	equ	0xFDA
  3564                           fsr2l	equ	0xFD9
  3565                           status	equ	0xFD8
  3566                           
  3567 ;; *************** function ___awdiv *****************
  3568 ;; Defined at:
  3569 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\awdiv.c"
  3570 ;; Parameters:    Size  Location     Type
  3571 ;;  dividend        2    0[COMRAM] int 
  3572 ;;  divisor         2    2[COMRAM] int 
  3573 ;; Auto vars:     Size  Location     Type
  3574 ;;  quotient        2    6[COMRAM] int 
  3575 ;;  sign            1    5[COMRAM] unsigned char 
  3576 ;;  counter         1    4[COMRAM] unsigned char 
  3577 ;; Return value:  Size  Location     Type
  3578 ;;                  2    0[COMRAM] int 
  3579 ;; Registers used:
  3580 ;;		wreg, status,2, status,0
  3581 ;; Tracked objects:
  3582 ;;		On entry : 0/0
  3583 ;;		On exit  : 0/0
  3584 ;;		Unchanged: 0/0
  3585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3586 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3587 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3589 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3590 ;;Total ram usage:        8 bytes
  3591 ;; Hardware stack levels used:    1
  3592 ;; This function calls:
  3593 ;;		Nothing
  3594 ;; This function is called by:
  3595 ;;		_Write_RTC
  3596 ;; This function uses a non-reentrant model
  3597 ;;
  3598                           
  3599                           	psect	text19
  3600  001846                     __ptext19:
  3601                           	opt stack 0
  3602  001846                     ___awdiv:
  3603                           	opt stack 28
  3604                           
  3605                           ; BSR set to: 15
  3606                           ;incstack = 0
  3607  001846  0E00               	movlw	0
  3608  001848  6E29               	movwf	___awdiv@sign,c
  3609  00184A  AE27               	btfss	___awdiv@divisor+1,7,c
  3610  00184C  D007               	goto	l2199
  3611  00184E  6C26               	negf	___awdiv@divisor,c
  3612  001850  1E27               	comf	___awdiv@divisor+1,f,c
  3613  001852  B0D8               	btfsc	status,0,c
  3614  001854  2A27               	incf	___awdiv@divisor+1,f,c
  3615  001856  0E01               	movlw	1
  3616  001858  6E29               	movwf	___awdiv@sign,c
  3617  00185A  D000               	goto	l2199
  3618  00185C                     l2199:
  3619  00185C  AE25               	btfss	___awdiv@dividend+1,7,c
  3620  00185E  D007               	goto	l2205
  3621  001860  6C24               	negf	___awdiv@dividend,c
  3622  001862  1E25               	comf	___awdiv@dividend+1,f,c
  3623  001864  B0D8               	btfsc	status,0,c
  3624  001866  2A25               	incf	___awdiv@dividend+1,f,c
  3625  001868  0E01               	movlw	1
  3626  00186A  1A29               	xorwf	___awdiv@sign,f,c
  3627  00186C  D000               	goto	l2205
  3628  00186E                     l2205:
  3629  00186E  0E00               	movlw	0
  3630  001870  6E2B               	movwf	___awdiv@quotient+1,c
  3631  001872  0E00               	movlw	0
  3632  001874  6E2A               	movwf	___awdiv@quotient,c
  3633  001876  5026               	movf	___awdiv@divisor,w,c
  3634  001878  1027               	iorwf	___awdiv@divisor+1,w,c
  3635  00187A  B4D8               	btfsc	status,2,c
  3636  00187C  D021               	goto	l2227
  3637  00187E  0E01               	movlw	1
  3638  001880  6E28               	movwf	___awdiv@counter,c
  3639  001882  D005               	goto	l2213
  3640  001884                     l2211:
  3641  001884  90D8               	bcf	status,0,c
  3642  001886  3626               	rlcf	___awdiv@divisor,f,c
  3643  001888  3627               	rlcf	___awdiv@divisor+1,f,c
  3644  00188A  2A28               	incf	___awdiv@counter,f,c
  3645  00188C  D000               	goto	l2213
  3646  00188E                     l2213:
  3647  00188E  BE27               	btfsc	___awdiv@divisor+1,7,c
  3648  001890  D002               	goto	l2215
  3649  001892  D7F8               	goto	l2211
  3650  001894  D000               	goto	l2215
  3651  001896                     l2215:
  3652  001896  90D8               	bcf	status,0,c
  3653  001898  362A               	rlcf	___awdiv@quotient,f,c
  3654  00189A  362B               	rlcf	___awdiv@quotient+1,f,c
  3655  00189C  5026               	movf	___awdiv@divisor,w,c
  3656  00189E  5C24               	subwf	___awdiv@dividend,w,c
  3657  0018A0  5027               	movf	___awdiv@divisor+1,w,c
  3658  0018A2  5825               	subwfb	___awdiv@dividend+1,w,c
  3659  0018A4  A0D8               	btfss	status,0,c
  3660  0018A6  D006               	goto	l2223
  3661  0018A8  5026               	movf	___awdiv@divisor,w,c
  3662  0018AA  5E24               	subwf	___awdiv@dividend,f,c
  3663  0018AC  5027               	movf	___awdiv@divisor+1,w,c
  3664  0018AE  5A25               	subwfb	___awdiv@dividend+1,f,c
  3665  0018B0  802A               	bsf	___awdiv@quotient,0,c
  3666  0018B2  D000               	goto	l2223
  3667  0018B4                     l2223:
  3668  0018B4  90D8               	bcf	status,0,c
  3669  0018B6  3227               	rrcf	___awdiv@divisor+1,f,c
  3670  0018B8  3226               	rrcf	___awdiv@divisor,f,c
  3671  0018BA  2E28               	decfsz	___awdiv@counter,f,c
  3672  0018BC  D7EC               	goto	l2215
  3673  0018BE  D000               	goto	l2227
  3674  0018C0                     l2227:
  3675  0018C0  5029               	movf	___awdiv@sign,w,c
  3676  0018C2  B4D8               	btfsc	status,2,c
  3677  0018C4  D005               	goto	l2231
  3678  0018C6  6C2A               	negf	___awdiv@quotient,c
  3679  0018C8  1E2B               	comf	___awdiv@quotient+1,f,c
  3680  0018CA  B0D8               	btfsc	status,0,c
  3681  0018CC  2A2B               	incf	___awdiv@quotient+1,f,c
  3682  0018CE  D000               	goto	l2231
  3683  0018D0                     l2231:
  3684  0018D0  C02A  F024         	movff	___awdiv@quotient,?___awdiv
  3685  0018D4  C02B  F025         	movff	___awdiv@quotient+1,?___awdiv+1
  3686  0018D8  0012               	return	
  3687  0018DA  0012               	return		;funcret
  3688  0018DC                     __end_of___awdiv:
  3689                           	opt stack 0
  3690                           tblptru	equ	0xFF8
  3691                           tblptrh	equ	0xFF7
  3692                           tblptrl	equ	0xFF6
  3693                           tablat	equ	0xFF5
  3694                           prodh	equ	0xFF4
  3695                           prodl	equ	0xFF3
  3696                           indf0	equ	0xFEF
  3697                           postinc0	equ	0xFEE
  3698                           fsr0h	equ	0xFEA
  3699                           fsr0l	equ	0xFE9
  3700                           wreg	equ	0xFE8
  3701                           postdec1	equ	0xFE5
  3702                           fsr1l	equ	0xFE1
  3703                           indf2	equ	0xFDF
  3704                           postinc2	equ	0xFDE
  3705                           postdec2	equ	0xFDD
  3706                           fsr2h	equ	0xFDA
  3707                           fsr2l	equ	0xFD9
  3708                           status	equ	0xFD8
  3709                           
  3710 ;; *************** function _RtccWriteTime *****************
  3711 ;; Defined at:
  3712 ;;		line 34 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteTime.c"
  3713 ;; Parameters:    Size  Location     Type
  3714 ;;  pTm             2    0[COMRAM] PTR const struct .
  3715 ;;		 -> RtccTime(4), 
  3716 ;;  di              1    2[COMRAM] enum E7121
  3717 ;; Auto vars:     Size  Location     Type
  3718 ;;  tempHourWDay    2    9[COMRAM] struct .
  3719 ;;  tempMinSec      2    7[COMRAM] struct .
  3720 ;;  wasWrEn         1    6[COMRAM] enum E7121
  3721 ;;  wasAlrm         1    5[COMRAM] enum E7121
  3722 ;;  wasOn           1    4[COMRAM] enum E7121
  3723 ;; Return value:  Size  Location     Type
  3724 ;;                  1    wreg      enum E7121
  3725 ;; Registers used:
  3726 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3727 ;; Tracked objects:
  3728 ;;		On entry : 0/0
  3729 ;;		On exit  : 0/0
  3730 ;;		Unchanged: 0/0
  3731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3732 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3733 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3734 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3735 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3736 ;;Total ram usage:       11 bytes
  3737 ;; Hardware stack levels used:    1
  3738 ;; Hardware stack levels required when called:    1
  3739 ;; This function calls:
  3740 ;;		_RtccWrOn
  3741 ;; This function is called by:
  3742 ;;		_Write_RTC
  3743 ;; This function uses a non-reentrant model
  3744 ;;
  3745                           
  3746                           	psect	text20
  3747  00173A                     __ptext20:
  3748                           	opt stack 0
  3749  00173A                     _RtccWriteTime:
  3750                           	opt stack 27
  3751                           
  3752                           ;incstack = 0
  3753  00173A  0E00               	movlw	0
  3754  00173C  6E29               	movwf	RtccWriteTime@wasAlrm,c
  3755  00173E  EE20 F002          	lfsr	2,2
  3756  001742  5024               	movf	RtccWriteTime@pTm,w,c
  3757  001744  26D9               	addwf	fsr2l,f,c
  3758  001746  5025               	movf	RtccWriteTime@pTm+1,w,c
  3759  001748  22DA               	addwfc	fsr2h,f,c
  3760  00174A  0E5A               	movlw	90
  3761  00174C  60DF               	cpfslt	indf2,c
  3762  00174E  0012               	return	
  3763  001750  EE20 F001          	lfsr	2,1
  3764  001754  5024               	movf	RtccWriteTime@pTm,w,c
  3765  001756  26D9               	addwf	fsr2l,f,c
  3766  001758  5025               	movf	RtccWriteTime@pTm+1,w,c
  3767  00175A  22DA               	addwfc	fsr2h,f,c
  3768  00175C  0E5A               	movlw	90
  3769  00175E  60DF               	cpfslt	indf2,c
  3770  001760  0012               	return	
  3771  001762  EE20 F003          	lfsr	2,3
  3772  001766  5024               	movf	RtccWriteTime@pTm,w,c
  3773  001768  26D9               	addwf	fsr2l,f,c
  3774  00176A  5025               	movf	RtccWriteTime@pTm+1,w,c
  3775  00176C  22DA               	addwfc	fsr2h,f,c
  3776  00176E  0E24               	movlw	36
  3777  001770  64DF               	cpfsgt	indf2,c
  3778  001772  D002               	goto	l2045
  3779  001774  0012               	return	
  3780                           
  3781                           ;	Return value of _RtccWriteTime is never used
  3782  001776  0012               	return	
  3783  001778                     l2045:
  3784  001778  EE20 F002          	lfsr	2,2
  3785  00177C  5024               	movf	RtccWriteTime@pTm,w,c
  3786  00177E  26D9               	addwf	fsr2l,f,c
  3787  001780  5025               	movf	RtccWriteTime@pTm+1,w,c
  3788  001782  22DA               	addwfc	fsr2h,f,c
  3789  001784  50DF               	movf	indf2,w,c
  3790  001786  6E2C               	movwf	RtccWriteTime@tempMinSec+1,c
  3791  001788  EE20 F001          	lfsr	2,1
  3792  00178C  5024               	movf	RtccWriteTime@pTm,w,c
  3793  00178E  26D9               	addwf	fsr2l,f,c
  3794  001790  5025               	movf	RtccWriteTime@pTm+1,w,c
  3795  001792  22DA               	addwfc	fsr2h,f,c
  3796  001794  50DF               	movf	indf2,w,c
  3797  001796  6E2B               	movwf	RtccWriteTime@tempMinSec,c
  3798  001798  5026               	movf	RtccWriteTime@di,w,c
  3799  00179A  B4D8               	btfsc	status,2,c
  3800  00179C  D002               	goto	l2051
  3801  00179E  9CF2               	bcf	intcon,6,c	;volatile
  3802  0017A0  D000               	goto	l2051
  3803  0017A2                     l2051:
  3804  0017A2  0E00               	movlw	0
  3805  0017A4  BB3F               	btfsc	63,5,b	;volatile
  3806  0017A6  0E01               	movlw	1
  3807  0017A8  6E2A               	movwf	RtccWriteTime@wasWrEn,c
  3808  0017AA  502A               	movf	RtccWriteTime@wasWrEn,w,c
  3809  0017AC  A4D8               	btfss	status,2,c
  3810  0017AE  D003               	goto	l2055
  3811  0017B0  EC85  F00E         	call	_RtccWrOn	;wreg free
  3812  0017B4  D000               	goto	l2055
  3813  0017B6                     l2055:
  3814  0017B6  0E00               	movlw	0
  3815  0017B8  BF3F               	btfsc	63,7,b	;volatile
  3816  0017BA  0E01               	movlw	1
  3817  0017BC  6E28               	movwf	RtccWriteTime@wasOn,c
  3818  0017BE  5028               	movf	RtccWriteTime@wasOn,w,c
  3819  0017C0  B4D8               	btfsc	status,2,c
  3820  0017C2  D007               	goto	l2061
  3821  0017C4  0E00               	movlw	0
  3822  0017C6  BE91               	btfsc	3985,7,c	;volatile
  3823  0017C8  0E01               	movlw	1
  3824  0017CA  6E29               	movwf	RtccWriteTime@wasAlrm,c
  3825  0017CC  010F               	movlb	15	; () banked
  3826  0017CE  9F3F               	bcf	63,7,b	;volatile
  3827  0017D0  D000               	goto	l2061
  3828  0017D2                     l2061:
  3829  0017D2  0EFC               	movlw	252
  3830  0017D4  010F               	movlb	15	; () banked
  3831  0017D6  173F               	andwf	63,f,b	;volatile
  3832  0017D8  010F               	movlb	15	; () banked
  3833  0017DA  813F               	bsf	63,0,b	;volatile
  3834                           
  3835                           ; BSR set to: 15
  3836  0017DC  CF98 F02D          	movff	3992,RtccWriteTime@tempHourWDay	;volatile
  3837                           
  3838                           ; BSR set to: 15
  3839  0017E0  CF99 F02E          	movff	3993,RtccWriteTime@tempHourWDay+1	;volatile
  3840                           
  3841                           ; BSR set to: 15
  3842  0017E4  EE20 F003          	lfsr	2,3
  3843  0017E8  5024               	movf	RtccWriteTime@pTm,w,c
  3844  0017EA  26D9               	addwf	fsr2l,f,c
  3845  0017EC  5025               	movf	RtccWriteTime@pTm+1,w,c
  3846  0017EE  22DA               	addwfc	fsr2h,f,c
  3847  0017F0  50DF               	movf	indf2,w,c
  3848  0017F2  6E2D               	movwf	RtccWriteTime@tempHourWDay,c
  3849                           
  3850                           ; BSR set to: 15
  3851  0017F4  0EFC               	movlw	252
  3852  0017F6  010F               	movlb	15	; () banked
  3853  0017F8  173F               	andwf	63,f,b	;volatile
  3854                           
  3855                           ; BSR set to: 15
  3856  0017FA  010F               	movlb	15	; () banked
  3857  0017FC  813F               	bsf	63,0,b	;volatile
  3858                           
  3859                           ; BSR set to: 15
  3860  0017FE  C02D  FF98         	movff	RtccWriteTime@tempHourWDay,3992	;volatile
  3861                           
  3862                           ; BSR set to: 15
  3863  001802  C02E  FF99         	movff	RtccWriteTime@tempHourWDay+1,3993	;volatile
  3864                           
  3865                           ; BSR set to: 15
  3866  001806  C02B  FF98         	movff	RtccWriteTime@tempMinSec,3992	;volatile
  3867                           
  3868                           ; BSR set to: 15
  3869  00180A  C02C  FF99         	movff	RtccWriteTime@tempMinSec+1,3993	;volatile
  3870                           
  3871                           ; BSR set to: 15
  3872  00180E  5028               	movf	RtccWriteTime@wasOn,w,c
  3873  001810  B4D8               	btfsc	status,2,c
  3874  001812  D00D               	goto	l2093
  3875                           
  3876                           ; BSR set to: 15
  3877  001814  010F               	movlb	15	; () banked
  3878  001816  8F3F               	bsf	63,7,b	;volatile
  3879                           
  3880                           ; BSR set to: 15
  3881  001818  5029               	movf	RtccWriteTime@wasAlrm,w,c
  3882  00181A  B4D8               	btfsc	status,2,c
  3883  00181C  D002               	goto	l2089
  3884                           
  3885                           ; BSR set to: 15
  3886  00181E  8E91               	bsf	3985,7,c	;volatile
  3887  001820  D000               	goto	l2089
  3888  001822                     l2089:
  3889                           
  3890                           ; BSR set to: 15
  3891  001822  502A               	movf	RtccWriteTime@wasWrEn,w,c
  3892  001824  B4D8               	btfsc	status,2,c
  3893  001826  D009               	goto	l2097
  3894                           
  3895                           ; BSR set to: 15
  3896  001828  EC85  F00E         	call	_RtccWrOn	;wreg free
  3897  00182C  D006               	goto	l2097
  3898  00182E                     l2093:
  3899  00182E  502A               	movf	RtccWriteTime@wasWrEn,w,c
  3900  001830  A4D8               	btfss	status,2,c
  3901  001832  D003               	goto	l2097
  3902  001834  010F               	movlb	15	; () banked
  3903  001836  9B3F               	bcf	63,5,b	;volatile
  3904                           
  3905                           ; BSR set to: 15
  3906  001838  D000               	goto	l2097
  3907  00183A                     l2097:
  3908  00183A  5026               	movf	RtccWriteTime@di,w,c
  3909  00183C  B4D8               	btfsc	status,2,c
  3910  00183E  0012               	return	
  3911  001840  8CF2               	bsf	intcon,6,c	;volatile
  3912  001842  0012               	return	
  3913                           
  3914                           ;	Return value of _RtccWriteTime is never used
  3915  001844  0012               	return		;funcret
  3916  001846                     __end_of_RtccWriteTime:
  3917                           	opt stack 0
  3918                           tblptru	equ	0xFF8
  3919                           tblptrh	equ	0xFF7
  3920                           tblptrl	equ	0xFF6
  3921                           tablat	equ	0xFF5
  3922                           prodh	equ	0xFF4
  3923                           prodl	equ	0xFF3
  3924                           intcon	equ	0xFF2
  3925                           indf0	equ	0xFEF
  3926                           postinc0	equ	0xFEE
  3927                           fsr0h	equ	0xFEA
  3928                           fsr0l	equ	0xFE9
  3929                           wreg	equ	0xFE8
  3930                           postdec1	equ	0xFE5
  3931                           fsr1l	equ	0xFE1
  3932                           indf2	equ	0xFDF
  3933                           postinc2	equ	0xFDE
  3934                           postdec2	equ	0xFDD
  3935                           fsr2h	equ	0xFDA
  3936                           fsr2l	equ	0xFD9
  3937                           status	equ	0xFD8
  3938                           
  3939 ;; *************** function _RtccWriteDate *****************
  3940 ;; Defined at:
  3941 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteDate.c"
  3942 ;; Parameters:    Size  Location     Type
  3943 ;;  pDt             2    0[COMRAM] PTR const struct .
  3944 ;;		 -> RtccDate(4), 
  3945 ;;  di              1    2[COMRAM] enum E7121
  3946 ;; Auto vars:     Size  Location     Type
  3947 ;;  tempHourWDay    2   11[COMRAM] struct .
  3948 ;;  tempDayMonth    2    9[COMRAM] struct .
  3949 ;;  tempYear        2    6[COMRAM] struct .
  3950 ;;  wasWrEn         1    8[COMRAM] enum E7121
  3951 ;;  wasAlrm         1    5[COMRAM] enum E7121
  3952 ;;  wasOn           1    4[COMRAM] enum E7121
  3953 ;; Return value:  Size  Location     Type
  3954 ;;                  1    wreg      enum E7121
  3955 ;; Registers used:
  3956 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3957 ;; Tracked objects:
  3958 ;;		On entry : 0/0
  3959 ;;		On exit  : 0/0
  3960 ;;		Unchanged: 0/0
  3961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3962 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3963 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3964 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3965 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3966 ;;Total ram usage:       13 bytes
  3967 ;; Hardware stack levels used:    1
  3968 ;; Hardware stack levels required when called:    1
  3969 ;; This function calls:
  3970 ;;		_RtccWrOn
  3971 ;; This function is called by:
  3972 ;;		_Write_RTC
  3973 ;; This function uses a non-reentrant model
  3974 ;;
  3975                           
  3976                           	psect	text21
  3977  0015F4                     __ptext21:
  3978                           	opt stack 0
  3979  0015F4                     _RtccWriteDate:
  3980                           	opt stack 27
  3981                           
  3982                           ;incstack = 0
  3983  0015F4  0E00               	movlw	0
  3984  0015F6  6E29               	movwf	RtccWriteDate@wasAlrm,c
  3985  0015F8  EE20 F002          	lfsr	2,2
  3986  0015FC  5024               	movf	RtccWriteDate@pDt,w,c
  3987  0015FE  26D9               	addwf	fsr2l,f,c
  3988  001600  5025               	movf	RtccWriteDate@pDt+1,w,c
  3989  001602  22DA               	addwfc	fsr2h,f,c
  3990  001604  0E13               	movlw	19
  3991  001606  60DF               	cpfslt	indf2,c
  3992  001608  0012               	return	
  3993  00160A  EE20 F002          	lfsr	2,2
  3994  00160E  5024               	movf	RtccWriteDate@pDt,w,c
  3995  001610  26D9               	addwf	fsr2l,f,c
  3996  001612  5025               	movf	RtccWriteDate@pDt+1,w,c
  3997  001614  22DA               	addwfc	fsr2h,f,c
  3998  001616  50DF               	movf	indf2,w,c
  3999  001618  B4D8               	btfsc	status,2,c
  4000  00161A  0012               	return	
  4001  00161C  EE20 F001          	lfsr	2,1
  4002  001620  5024               	movf	RtccWriteDate@pDt,w,c
  4003  001622  26D9               	addwf	fsr2l,f,c
  4004  001624  5025               	movf	RtccWriteDate@pDt+1,w,c
  4005  001626  22DA               	addwfc	fsr2h,f,c
  4006  001628  0E32               	movlw	50
  4007  00162A  60DF               	cpfslt	indf2,c
  4008  00162C  0012               	return	
  4009  00162E  EE20 F001          	lfsr	2,1
  4010  001632  5024               	movf	RtccWriteDate@pDt,w,c
  4011  001634  26D9               	addwf	fsr2l,f,c
  4012  001636  5025               	movf	RtccWriteDate@pDt+1,w,c
  4013  001638  22DA               	addwfc	fsr2h,f,c
  4014  00163A  50DF               	movf	indf2,w,c
  4015  00163C  B4D8               	btfsc	status,2,c
  4016  00163E  0012               	return	
  4017  001640  EE20 F003          	lfsr	2,3
  4018  001644  5024               	movf	RtccWriteDate@pDt,w,c
  4019  001646  26D9               	addwf	fsr2l,f,c
  4020  001648  5025               	movf	RtccWriteDate@pDt+1,w,c
  4021  00164A  22DA               	addwfc	fsr2h,f,c
  4022  00164C  0E99               	movlw	153
  4023  00164E  64DF               	cpfsgt	indf2,c
  4024  001650  D002               	goto	l2113
  4025  001652  0012               	return	
  4026                           
  4027                           ;	Return value of _RtccWriteDate is never used
  4028  001654  0012               	return	
  4029  001656                     l2113:
  4030  001656  EE20 F003          	lfsr	2,3
  4031  00165A  5024               	movf	RtccWriteDate@pDt,w,c
  4032  00165C  26D9               	addwf	fsr2l,f,c
  4033  00165E  5025               	movf	RtccWriteDate@pDt+1,w,c
  4034  001660  22DA               	addwfc	fsr2h,f,c
  4035  001662  50DF               	movf	indf2,w,c
  4036  001664  6E2A               	movwf	RtccWriteDate@tempYear,c
  4037  001666  EE20 F001          	lfsr	2,1
  4038  00166A  5024               	movf	RtccWriteDate@pDt,w,c
  4039  00166C  26D9               	addwf	fsr2l,f,c
  4040  00166E  5025               	movf	RtccWriteDate@pDt+1,w,c
  4041  001670  22DA               	addwfc	fsr2h,f,c
  4042  001672  50DF               	movf	indf2,w,c
  4043  001674  6E2D               	movwf	RtccWriteDate@tempDayMonth,c
  4044  001676  EE20 F002          	lfsr	2,2
  4045  00167A  5024               	movf	RtccWriteDate@pDt,w,c
  4046  00167C  26D9               	addwf	fsr2l,f,c
  4047  00167E  5025               	movf	RtccWriteDate@pDt+1,w,c
  4048  001680  22DA               	addwfc	fsr2h,f,c
  4049  001682  50DF               	movf	indf2,w,c
  4050  001684  6E2E               	movwf	RtccWriteDate@tempDayMonth+1,c
  4051  001686  5026               	movf	RtccWriteDate@di,w,c
  4052  001688  B4D8               	btfsc	status,2,c
  4053  00168A  D002               	goto	l2119
  4054  00168C  9CF2               	bcf	intcon,6,c	;volatile
  4055  00168E  D000               	goto	l2119
  4056  001690                     l2119:
  4057  001690  0E00               	movlw	0
  4058  001692  BB3F               	btfsc	63,5,b	;volatile
  4059  001694  0E01               	movlw	1
  4060  001696  6E2C               	movwf	RtccWriteDate@wasWrEn,c
  4061  001698  502C               	movf	RtccWriteDate@wasWrEn,w,c
  4062  00169A  A4D8               	btfss	status,2,c
  4063  00169C  D003               	goto	l2123
  4064  00169E  EC85  F00E         	call	_RtccWrOn	;wreg free
  4065  0016A2  D000               	goto	l2123
  4066  0016A4                     l2123:
  4067  0016A4  0E00               	movlw	0
  4068  0016A6  BF3F               	btfsc	63,7,b	;volatile
  4069  0016A8  0E01               	movlw	1
  4070  0016AA  6E28               	movwf	RtccWriteDate@wasOn,c
  4071  0016AC  5028               	movf	RtccWriteDate@wasOn,w,c
  4072  0016AE  B4D8               	btfsc	status,2,c
  4073  0016B0  D007               	goto	l2129
  4074  0016B2  0E00               	movlw	0
  4075  0016B4  BE91               	btfsc	3985,7,c	;volatile
  4076  0016B6  0E01               	movlw	1
  4077  0016B8  6E29               	movwf	RtccWriteDate@wasAlrm,c
  4078  0016BA  010F               	movlb	15	; () banked
  4079  0016BC  9F3F               	bcf	63,7,b	;volatile
  4080  0016BE  D000               	goto	l2129
  4081  0016C0                     l2129:
  4082  0016C0  0EFC               	movlw	252
  4083  0016C2  010F               	movlb	15	; () banked
  4084  0016C4  173F               	andwf	63,f,b	;volatile
  4085  0016C6  010F               	movlb	15	; () banked
  4086  0016C8  813F               	bsf	63,0,b	;volatile
  4087                           
  4088                           ; BSR set to: 15
  4089  0016CA  CF98 F02F          	movff	3992,RtccWriteDate@tempHourWDay	;volatile
  4090                           
  4091                           ; BSR set to: 15
  4092  0016CE  CF99 F030          	movff	3993,RtccWriteDate@tempHourWDay+1	;volatile
  4093                           
  4094                           ; BSR set to: 15
  4095  0016D2  C024  FFD9         	movff	RtccWriteDate@pDt,fsr2l
  4096  0016D6  C025  FFDA         	movff	RtccWriteDate@pDt+1,fsr2h
  4097  0016DA  50DF               	movf	indf2,w,c
  4098  0016DC  6E30               	movwf	RtccWriteDate@tempHourWDay+1,c
  4099                           
  4100                           ; BSR set to: 15
  4101  0016DE  0EFC               	movlw	252
  4102  0016E0  010F               	movlb	15	; () banked
  4103  0016E2  173F               	andwf	63,f,b	;volatile
  4104                           
  4105                           ; BSR set to: 15
  4106  0016E4  0E03               	movlw	3
  4107  0016E6  010F               	movlb	15	; () banked
  4108  0016E8  133F               	iorwf	63,f,b	;volatile
  4109                           
  4110                           ; BSR set to: 15
  4111  0016EA  C02A  FF98         	movff	RtccWriteDate@tempYear,3992	;volatile
  4112                           
  4113                           ; BSR set to: 15
  4114  0016EE  C02B  FF99         	movff	RtccWriteDate@tempYear+1,3993	;volatile
  4115                           
  4116                           ; BSR set to: 15
  4117  0016F2  C02D  FF98         	movff	RtccWriteDate@tempDayMonth,3992	;volatile
  4118                           
  4119                           ; BSR set to: 15
  4120  0016F6  C02E  FF99         	movff	RtccWriteDate@tempDayMonth+1,3993	;volatile
  4121                           
  4122                           ; BSR set to: 15
  4123  0016FA  C02F  FF98         	movff	RtccWriteDate@tempHourWDay,3992	;volatile
  4124                           
  4125                           ; BSR set to: 15
  4126  0016FE  C030  FF99         	movff	RtccWriteDate@tempHourWDay+1,3993	;volatile
  4127                           
  4128                           ; BSR set to: 15
  4129  001702  5028               	movf	RtccWriteDate@wasOn,w,c
  4130  001704  B4D8               	btfsc	status,2,c
  4131  001706  D00D               	goto	l2165
  4132                           
  4133                           ; BSR set to: 15
  4134  001708  010F               	movlb	15	; () banked
  4135  00170A  8F3F               	bsf	63,7,b	;volatile
  4136                           
  4137                           ; BSR set to: 15
  4138  00170C  5029               	movf	RtccWriteDate@wasAlrm,w,c
  4139  00170E  B4D8               	btfsc	status,2,c
  4140  001710  D002               	goto	l2161
  4141                           
  4142                           ; BSR set to: 15
  4143  001712  8E91               	bsf	3985,7,c	;volatile
  4144  001714  D000               	goto	l2161
  4145  001716                     l2161:
  4146                           
  4147                           ; BSR set to: 15
  4148  001716  502C               	movf	RtccWriteDate@wasWrEn,w,c
  4149  001718  B4D8               	btfsc	status,2,c
  4150  00171A  D009               	goto	l2169
  4151                           
  4152                           ; BSR set to: 15
  4153  00171C  EC85  F00E         	call	_RtccWrOn	;wreg free
  4154  001720  D006               	goto	l2169
  4155  001722                     l2165:
  4156  001722  502C               	movf	RtccWriteDate@wasWrEn,w,c
  4157  001724  A4D8               	btfss	status,2,c
  4158  001726  D003               	goto	l2169
  4159  001728  010F               	movlb	15	; () banked
  4160  00172A  9B3F               	bcf	63,5,b	;volatile
  4161                           
  4162                           ; BSR set to: 15
  4163  00172C  D000               	goto	l2169
  4164  00172E                     l2169:
  4165  00172E  5026               	movf	RtccWriteDate@di,w,c
  4166  001730  B4D8               	btfsc	status,2,c
  4167  001732  0012               	return	
  4168  001734  9CF2               	bcf	intcon,6,c	;volatile
  4169  001736  0012               	return	
  4170                           
  4171                           ;	Return value of _RtccWriteDate is never used
  4172  001738  0012               	return		;funcret
  4173  00173A                     __end_of_RtccWriteDate:
  4174                           	opt stack 0
  4175                           tblptru	equ	0xFF8
  4176                           tblptrh	equ	0xFF7
  4177                           tblptrl	equ	0xFF6
  4178                           tablat	equ	0xFF5
  4179                           prodh	equ	0xFF4
  4180                           prodl	equ	0xFF3
  4181                           intcon	equ	0xFF2
  4182                           indf0	equ	0xFEF
  4183                           postinc0	equ	0xFEE
  4184                           fsr0h	equ	0xFEA
  4185                           fsr0l	equ	0xFE9
  4186                           wreg	equ	0xFE8
  4187                           postdec1	equ	0xFE5
  4188                           fsr1l	equ	0xFE1
  4189                           indf2	equ	0xFDF
  4190                           postinc2	equ	0xFDE
  4191                           postdec2	equ	0xFDD
  4192                           fsr2h	equ	0xFDA
  4193                           fsr2l	equ	0xFD9
  4194                           status	equ	0xFD8
  4195                           
  4196 ;; *************** function _RtccWrOn *****************
  4197 ;; Defined at:
  4198 ;;		line 21 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWrOn.c"
  4199 ;; Parameters:    Size  Location     Type
  4200 ;;		None
  4201 ;; Auto vars:     Size  Location     Type
  4202 ;;  data            2    0        unsigned int 
  4203 ;; Return value:  Size  Location     Type
  4204 ;;		None               void
  4205 ;; Registers used:
  4206 ;;		wreg, status,2
  4207 ;; Tracked objects:
  4208 ;;		On entry : 0/0
  4209 ;;		On exit  : 0/0
  4210 ;;		Unchanged: 0/0
  4211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4215 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4216 ;;Total ram usage:        0 bytes
  4217 ;; Hardware stack levels used:    1
  4218 ;; This function calls:
  4219 ;;		Nothing
  4220 ;; This function is called by:
  4221 ;;		_Write_RTC
  4222 ;;		_RtccWriteDate
  4223 ;;		_RtccWriteTime
  4224 ;; This function uses a non-reentrant model
  4225 ;;
  4226                           
  4227                           	psect	text22
  4228  001D0A                     __ptext22:
  4229                           	opt stack 0
  4230  001D0A                     _RtccWrOn:
  4231                           	opt stack 27
  4232                           
  4233                           ;incstack = 0
  4234  001D0A  9CF2               	bcf	intcon,6,c	;volatile
  4235  001D0C  0E55               	movlw	85
  4236  001D0E  6EA7               	movwf	4007,c	;volatile
  4237  001D10  0EAA               	movlw	170
  4238  001D12  6EA7               	movwf	4007,c	;volatile
  4239  001D14  010F               	movlb	15	; () banked
  4240  001D16  8B3F               	bsf	63,5,b	;volatile
  4241                           
  4242                           ; BSR set to: 15
  4243  001D18  8CF2               	bsf	intcon,6,c	;volatile
  4244                           
  4245                           ; BSR set to: 15
  4246  001D1A  0012               	return		;funcret
  4247  001D1C                     __end_of_RtccWrOn:
  4248                           	opt stack 0
  4249                           tblptru	equ	0xFF8
  4250                           tblptrh	equ	0xFF7
  4251                           tblptrl	equ	0xFF6
  4252                           tablat	equ	0xFF5
  4253                           prodh	equ	0xFF4
  4254                           prodl	equ	0xFF3
  4255                           intcon	equ	0xFF2
  4256                           indf0	equ	0xFEF
  4257                           postinc0	equ	0xFEE
  4258                           fsr0h	equ	0xFEA
  4259                           fsr0l	equ	0xFE9
  4260                           wreg	equ	0xFE8
  4261                           postdec1	equ	0xFE5
  4262                           fsr1l	equ	0xFE1
  4263                           indf2	equ	0xFDF
  4264                           postinc2	equ	0xFDE
  4265                           postdec2	equ	0xFDD
  4266                           fsr2h	equ	0xFDA
  4267                           fsr2l	equ	0xFD9
  4268                           status	equ	0xFD8
  4269                           tblptru	equ	0xFF8
  4270                           tblptrh	equ	0xFF7
  4271                           tblptrl	equ	0xFF6
  4272                           tablat	equ	0xFF5
  4273                           prodh	equ	0xFF4
  4274                           prodl	equ	0xFF3
  4275                           intcon	equ	0xFF2
  4276                           indf0	equ	0xFEF
  4277                           postinc0	equ	0xFEE
  4278                           fsr0h	equ	0xFEA
  4279                           fsr0l	equ	0xFE9
  4280                           wreg	equ	0xFE8
  4281                           postdec1	equ	0xFE5
  4282                           fsr1l	equ	0xFE1
  4283                           indf2	equ	0xFDF
  4284                           postinc2	equ	0xFDE
  4285                           postdec2	equ	0xFDD
  4286                           fsr2h	equ	0xFDA
  4287                           fsr2l	equ	0xFD9
  4288                           status	equ	0xFD8
  4289                           
  4290                           	psect	rparam
  4291  0000                     tblptru	equ	0xFF8
  4292                           tblptrh	equ	0xFF7
  4293                           tblptrl	equ	0xFF6
  4294                           tablat	equ	0xFF5
  4295                           prodh	equ	0xFF4
  4296                           prodl	equ	0xFF3
  4297                           intcon	equ	0xFF2
  4298                           indf0	equ	0xFEF
  4299                           postinc0	equ	0xFEE
  4300                           fsr0h	equ	0xFEA
  4301                           fsr0l	equ	0xFE9
  4302                           wreg	equ	0xFE8
  4303                           postdec1	equ	0xFE5
  4304                           fsr1l	equ	0xFE1
  4305                           indf2	equ	0xFDF
  4306                           postinc2	equ	0xFDE
  4307                           postdec2	equ	0xFDD
  4308                           fsr2h	equ	0xFDA
  4309                           fsr2l	equ	0xFD9
  4310                           status	equ	0xFD8


Data Sizes:
    Strings     90
    Constant    14
    Data        12
    BSS         71
    Persistent  13
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     34      95
    BANK0           160      0      36
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    RtccWriteTime@pTm	PTR const struct . size(2) Largest target is 4
		 -> RtccTime(COMRAM[4]), 

    RtccWriteDate@pDt	PTR const struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_14(CODE[5]), STR_11(CODE[5]), STR_10(CODE[5]), STR_9(CODE[5]), 
		 -> STR_7(CODE[5]), STR_6(CODE[5]), STR_5(CODE[5]), STR_3(CODE[5]), 
		 -> STR_2(CODE[5]), STR_1(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> buffer2(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    lcd_putrs@ptr	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_20(CODE[10]), STR_19(CODE[13]), STR_18(CODE[33]), STR_17(CODE[17]), 
		 -> STR_16(CODE[2]), STR_15(CODE[2]), STR_13(CODE[2]), STR_12(CODE[2]), 
		 -> STR_8(CODE[2]), STR_4(CODE[2]), buffer2(BANK0[20]), 


Critical Paths under _main in COMRAM

    _main->_read_keyboard
    _read_keyboard->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _caratula->_lcd_putrs
    _lcd_putrs->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_init->_lcd_send_byte
    _lcd_comand->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _Write_RTC->_RtccWriteDate

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   18738
                                             32 COMRAM     2     2      0
                              _Setup
                           _caratula
                         _lcd_gotoxy
                          _lcd_putrs
                      _read_keyboard
 ---------------------------------------------------------------------------------
 (1) _read_keyboard                                        1     1      0    6010
                                             31 COMRAM     1     1      0
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             28    22      6    2940
                                             12 COMRAM    19    13      6
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     287
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _caratula                                             0     0      0    4793
                         _lcd_comand
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (2) _lcd_putrs                                            2     0      2    3070
                                              8 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (3) _lcd_putc                                             1     1      0    1745
                                              7 COMRAM     1     1      0
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (4) _lcd_gotoxy                                           3     2      1    1077
                                              4 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) _Setup                                                0     0      0    3764
                          _Write_RTC
                         _lcd_comand
                           _lcd_init
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             1     1      0     841
                                              4 COMRAM     1     1      0
                        _Delay1KTCYx
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _lcd_comand                                           1     1      0     646
                                              4 COMRAM     1     1      0
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (4) _lcd_send_byte                                        2     1      1     624
                                              2 COMRAM     2     1      1
                       _Delay100TCYx
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (5) _lcd_send_nibble                                      2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _Delay100TCYx                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Write_RTC                                            0     0      0    2277
                           _RtccWrOn
                      _RtccWriteDate
                      _RtccWriteTime
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1068
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _RtccWriteTime                                       11     8      3     537
                                              0 COMRAM    11     8      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (3) _RtccWriteDate                                       13    10      3     672
                                              0 COMRAM    13    10      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (4) _RtccWrOn                                             2     2      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Setup
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_init
       _Delay1KTCYx
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
       _lcd_send_nibble
   _caratula
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
   _lcd_gotoxy
     _lcd_send_byte
       _Delay100TCYx
       _lcd_send_nibble
   _lcd_putrs
     _lcd_putc
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
   _read_keyboard
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      24       5       22.5%
BITCOMRAM           5F      0       1       0        1.1%
COMRAM              5F     22      5F       1      100.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      83       6        0.0%
DATA                 0      0      83       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Sep 01 19:00:39 2016

                        _a 000D                          _b 000F                          _c 0011  
                        _i 0013                          _j 0015                          _k 0017  
                       l18 1C3A                         l19 1C3C             ?_lcd_send_byte 0026  
             ___awdiv@sign 0029        ___wmul@multiplicand 0026                lcd_comand@d 0028  
             __CFG_CP0$OFF 000000                        l200 1214                        l201 1210  
                      l205 122A                        l160 1064                        l152 100E  
                      l144 0FA6                        l161 1060                        l153 100A  
                      l145 0FA2                        l180 1156                        l172 10E6  
                      l164 1098                        l156 1028                        l148 0FDA  
                      l181 1152                        l173 10E2                        l165 1094  
                      l157 1024                        l149 0FD6                        l192 11C6  
                      l184 118A                        l176 1122                        l168 10CC  
                      l193 11C2                        l185 1186                        l177 111E  
                      l169 10C8                        l508 141A                        l196 11FA  
                      l188 11A4                        l197 11F6                        l189 11A0  
                      _dia 0055                        _key 001B                        _mes 005B  
                      wreg 000FE8                lcd_gotoxy@x 0029                lcd_gotoxy@y 0028  
                     l2031 1B6E                       l1152 1A9C                       l2113 1656  
                     l2017 1CAC                       l2025 1B4A                       l1162 1B3C  
                     l2123 16A4                       l2051 17A2                       l2211 1884  
                     l2019 1CB2                       l2027 1B56                       l2035 1B7A  
                     l2061 17D2                       l2045 1778                       l2213 188E  
                     l2205 186E                       l2029 1B62                       l2119 1690  
                     l2055 17B6                       l2231 18D0                       l2223 18B4  
                     l2215 1896                       l2161 1716                       l2129 16C0  
                     l1281 1CE8                       l2313 1AD2                       l2241 1A60  
                     l2401 149C                       l2227 18C0                       l2243 1A6A  
                     l2331 129A                       l2323 126C                       l2165 1722  
                     l2093 182E                       l2309 1AA8                       l2253 1A90  
                     l2245 1A72                       l2261 1B08                       l2181 1CDC  
                     l2325 127A                       l2317 1252                       l2263 1B12  
                     l2343 131C                       l2335 12B8                       l2169 172E  
                     l2097 183A                       l2089 1822                       l2265 1B1A  
                     l2329 1284                       l2283 190A                       l2371 13B8  
                     l2363 1390                       l2355 1360                       l2347 1322  
                     l2269 1B30                       l2373 13C2                       l2349 1344  
                     l2199 185C                       l2279 1902                       l2391 1420  
                     l2383 13F0                       l2367 1394                       l2359 136C  
                     l2543 1232                       l2297 192E                       l2289 191A  
                     l2385 13F8                       l2377 13CE                       l2397 1474  
                     l2645 1966                       l2399 1480                       l1991 1CFA  
                     STR_1 0F58                       STR_2 0F58                       STR_3 0F58  
                     STR_4 0F61                       STR_5 0F58                       STR_6 0F58  
                     STR_7 0F58                       STR_8 0F63                       STR_9 0F58  
                     u1200 1A12                       u1220 1A2E                       u1160 19E0  
                     u1218 1A14                       u1180 19F8                       u1238 1A30  
                     u1178 19E2                       u2317 19C4                       u1198 19FA  
                     u2327 1238                       u2337 1CEA                       u2347 1CFC  
                     u1680 1AC8                       u1690 1AF2                       u1687 1ABE  
                     u1697 1AE8           ?_lcd_send_nibble 0024                       _anio 0053  
                     _flag 02F8                       _main 195C                       _hora 0059  
                     fsr0h 000FEA                       indf0 000FEF                       fsr0l 000FE9  
                     fsr2h 000FDA                       fsr1l 000FE1                       indf2 000FDF  
                     fsr2l 000FD9              __CFG_T1DIG$ON 000000                       prodh 000FF4  
                     prodl 000FF3                       start 0000              __CFG_IESO$OFF 000000  
             ___param_bank 000010                _Delay1KTCYx 1CE6              __CFG_PLLDIV$1 000000  
                    ?_main 0024            __end_of___awdiv 18DC                      STR_10 0F58  
                    STR_11 0F58                      STR_12 0F65                      STR_20 0F4E  
                    STR_13 0F5F                      STR_14 0F58                      STR_15 0F5D  
                    STR_16 0F67                      STR_17 0F30                      STR_18 0F0F  
                    STR_19 0F41      __size_of_Delay100TCYx 0012            ___awdiv@divisor 0026  
          __end_of___lwdiv 1AA6            __end_of___lwmod 1B46            ___awdiv@counter 0028  
                    _TRISA 000F92                      _TRISB 000F93                      _TRISC 000F94  
           __CFG_FCMEN$OFF 000000                      _Setup 1B92            __end_of_dpowers 0F0B  
                    _mes_d 004D                      _mes_u 004E            __end_of_isdigit 1CE6  
           __pbitbssCOMRAM 02F8                      tablat 000FF5               lcd_putrs@ptr 002C  
                    status 000FD8            __end_of_sprintf 14AC    __CFG_DSWDTOSC$INTOSCREF 000000  
          __initialization 1BDA               _Delay100TCYx 1CF8               __end_of_main 19D4  
          ??_lcd_send_byte 0027                     ??_main 0044              __activetblptr 000002  
         __end_of_RtccWrOn 1D1C                     ?_Setup 0024                     _ADCON0 000FC2  
                   _ADCON1 000FC1                     _EECON2 000FA7                     _ANCON0 000F48  
                   _ANCON1 000F49           ___awdiv@dividend 0024             __CFG_WDTEN$OFF 000000  
         RtccWriteDate@pDt 0024                     _RTCCFG 000F3F             __CFG_WPCFG$OFF 000000  
         __end_of_caratula 1CA0             __CFG_WPDIS$OFF 000000             __CFG_XINST$OFF 000000  
         __end_of_lcd_init 195C           __end_of_lcd_putc 1B92                     ___wmul 1C50  
                ??___awdiv 0028             __CFG_STVREN$ON 000000                     _diasem 0057  
                   _anio_d 0046                     _anio_u 0047                  ??___lwdiv 0028  
                ??___lwmod 002F                     _hora_d 004B                     _hora_u 004C  
                   clear_0 1BE0                     clear_1 1BEE           ___awdiv@quotient 002A  
                   _minuto 005D      __end_of_RtccWriteDate 173A      __end_of_RtccWriteTime 1846  
         RtccWriteTime@pTm 0024               __pdataCOMRAM 0053                  ??_isdigit 0024  
             __mediumconst 0000                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8                  ??_sprintf 0036     __size_of_read_keyboard 02DE  
               __accesstop 0060    __end_of__initialization 1C14         __size_of_Write_RTC 0148  
            ___rparam_used 000001             __pcstackCOMRAM 0024              __end_of_Setup 1BDA  
          __CFG_DSWDTPS$G2 000000            __CFG_OSC$INTOSC 000000                    ??_Setup 0031  
        lcd_gotoxy@address 002A         __size_of_lcd_putrs 0054               sprintf@width 0040  
               __pbssBANK0 0060                 _dia_semana 0048  RtccWriteTime@tempHourWDay 002D  
               __pnvCOMRAM 0046                  ?_RtccWrOn 0024             lcd_send_byte@n 0026  
                  ?___wmul 0024              _read_keyboard 0F6A               ?_Delay1KTCYx 0024  
        __end_of_Write_RTC 15F4                 _lcd_comand 1D1C                  ?_caratula 0024  
               _lcd_gotoxy 1CA0                    _RTCVALH 000F99                    _RTCVALL 000F98  
                ?_lcd_init 0024                  ?_lcd_putc 0024                    __Hparam 0000  
                  __Lparam 0000   __size_of_lcd_send_nibble 0076                 ??_RtccWrOn 0024  
                  ___awdiv 1846          __end_of_lcd_putrs 1AFA             ?_read_keyboard 0024  
          __size_of___wmul 0028                    ___lwdiv 1A4A                    ___lwmod 1AFA  
             __psmallconst 0F00                _RtccTimeVal 0009                    __pcinit 1BDA  
                  _fecha_d 0049                    _fecha_u 004A                    __ramtop 0F00  
                  __ptext0 195C                    __ptext1 0F6A                    __ptext2 1248  
                  __ptext3 1CC4                    __ptext4 1C50                    __ptext5 1AFA  
                  __ptext6 1A4A                    __ptext7 1C78                    __ptext8 1AA6  
                  __ptext9 1B46                    _buffer2 0070                  _T1CONbits 000FCD  
                  _dpowers 0F01                    _isdigit 1CC4                 ??_caratula 002E  
                  _segundo 0019                    _sprintf 1248                 ??_lcd_init 0028  
               ??_lcd_putc 002B       end_of_initialization 1C14       lcd_send_byte@address 0027  
            __Lmediumconst 0000                    postdec1 000FE5                    postdec2 000FDD  
                  postinc0 000FEE                    postinc2 000FDE      __end_of_lcd_send_byte 1C50  
                _PORTAbits 000F80                  _PORTCbits 000F82           __CFG_DSBOREN$OFF 000000  
              ?_lcd_comand 0024           __CFG_CPUDIV$OSC1 000000                  _TRISBbits 000F93  
              ?_lcd_gotoxy 0028            _LCD_INIT_STRING 0F0B           __CFG_IOL1WAY$OFF 000000  
RtccWriteDate@tempDayMonth 002D        __CFG_MSSP7B_EN$MSK7 000000            ??_read_keyboard 0043  
         Delay100TCYx@unit 0024             __end_of___wmul 1C78              __pidataCOMRAM 1D2A  
RtccWriteDate@tempHourWDay 002F          ??_lcd_send_nibble 0024       __size_of_Delay1KTCYx 0012  
         __CFG_DSWDTEN$OFF 000000        start_initialization 1BDA       RtccWriteTime@wasAlrm 0029  
     RtccWriteTime@wasWrEn 002A     __size_of_RtccWriteDate 0146            RtccWriteDate@di 0026  
   __size_of_RtccWriteTime 010C        __size_of_lcd_comand 000E        __size_of_lcd_gotoxy 0024  
                 ??___wmul 0028          __size_of_RtccWrOn 0012            RtccWriteTime@di 0026  
         __CFG_LPT1OSC$OFF 000000                _ALRMCFGbits 000F91    __end_of_LCD_INIT_STRING 0F0F  
              __pbssCOMRAM 0001                  _Write_RTC 14AC               _isdigit$2206 0025  
        __size_of_caratula 0028            Delay1KTCYx@unit 0024          __size_of_lcd_init 0080  
              sprintf@flag 003C          __size_of_lcd_putc 004C                sprintf@prec 003F  
         ___lwdiv@dividend 0024              ?_Delay100TCYx 0024                   ?___awdiv 0024  
                 ?___lwdiv 0024                   ?___lwmod 002B    RtccWriteTime@tempMinSec 002B  
                _lcd_putrs 1AA6              _RtccWriteDate 15F4                __smallconst 0F00  
            _RtccWriteTime 173A                   ?_isdigit 0024       __CFG_RTCOSC$T1OSCREF 000000  
           __size_of_Setup 0048                 ?_Write_RTC 0024           ___lwdiv@quotient 0028  
                 ?_sprintf 0030           _RtccAlrmTimeDate 0060             ___wmul@product 0028  
                 _LATAbits 000F89                   _LATBbits 000F8A                   _PIE3bits 000FA3  
                _segundo_d 0051             ??_Delay100TCYx 0024                  _segundo_u 0052  
         __CFG_WDTPS$32768 000000         RtccWriteDate@wasOn 0028         _Rtcc_read_TimeDate 0068  
           ?_RtccWriteDate 0024                 ?_lcd_putrs 002C          ___wmul@multiplier 0024  
           ?_RtccWriteTime 0024                  lcd_init@i 0028               ??_lcd_comand 0028  
                main@input 0045                  lcd_putc@c 002B               ??_lcd_gotoxy 0029  
                copy_data0 1C08            _lcd_send_nibble 19D4                   __Hrparam 0000  
                 _RtccDate 001C                   __Lrparam 0000                   _RtccTime 0020  
                 _RtccWrOn 1D0A         __end_of_lcd_comand 1D2A         __end_of_lcd_gotoxy 1CC4  
         __size_of___awdiv 0096           __size_of___lwdiv 005C           __size_of___lwmod 004C  
             _RtccTimeDate 0001                 sprintf@val 003D                   _caratula 1C78  
         __size_of_isdigit 0022            ___lwdiv@divisor 0026                ??_Write_RTC 0031  
          ___lwdiv@counter 002A                   __ptext10 1CA0                   __ptext11 1B92  
                 __ptext20 173A                   __ptext12 18DC                   __ptext21 15F4  
                 __ptext13 1CE6                   __ptext22 1D0A                   __ptext14 1D1C  
                 __ptext15 1C1E                   __ptext16 19D4                   __ptext17 1CF8  
                 __ptext18 14AC                   __ptext19 1846                   _lcd_init 18DC  
                 _lcd_putc 1B46           __size_of_sprintf 0264     __size_of_lcd_send_byte 0032  
            __size_of_main 0078                   _minuto_d 004F                   _minuto_u 0050  
    __end_of_read_keyboard 1248              ??_Delay1KTCYx 0024            ??_RtccWriteDate 0027  
          ??_RtccWriteTime 0027                ??_lcd_putrs 002E                _OSCTUNEbits 000F9B  
               _INTCONbits 000FF2         RtccWriteTime@wasOn 0028       __end_of_Delay100TCYx 1D0A  
                 isdigit@c 0026                  sprintf@ap 003A    __end_of_lcd_send_nibble 1A4A  
                sprintf@sp 0030           ___lwmod@dividend 002B                 _OSCCONbits 000FD3  
    RtccWriteDate@tempYear 002A              _lcd_send_byte 1C1E                 _RTCCFGbits 000F3F  
                 sprintf@c 0042                   sprintf@f 0032            ___lwmod@divisor 002D  
      __end_of_Delay1KTCYx 1CF8            ___lwmod@counter 002F       RtccWriteDate@wasAlrm 0029  
     RtccWriteDate@wasWrEn 002C      lcd_send_nibble@nibble 0025  
