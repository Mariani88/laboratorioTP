

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sun Sep 04 19:40:22 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    43                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    44  0000                     
    45                           	psect	idataCOMRAM
    46  001EE4                     __pidataCOMRAM:
    47                           	opt stack 0
    48                           
    49                           ;initializer for _anio
    50  001EE4  000F               	dw	15
    51                           
    52                           ;initializer for _dia
    53  001EE6  0008               	dw	8
    54                           
    55                           ;initializer for _diasem
    56  001EE8  0003               	dw	3
    57                           
    58                           ;initializer for _hora
    59  001EEA  0012               	dw	18
    60                           
    61                           ;initializer for _mes
    62  001EEC  0009               	dw	9
    63                           
    64                           ;initializer for _minuto
    65  001EEE  001E               	dw	30
    66                           
    67                           ;initializer for _state_alarm
    68  001EF0  01                 	db	1
    69                           
    70                           	psect	smallconst
    71  000F00                     __psmallconst:
    72                           	opt stack 0
    73  000F00  00                 	db	0
    74  000F01                     _dpowers:
    75                           	opt stack 0
    76  000F01  0001               	dw	1
    77  000F03  000A               	dw	10
    78  000F05  0064               	dw	100
    79  000F07  03E8               	dw	1000
    80  000F09  2710               	dw	10000
    81  000F0B                     __end_of_dpowers:
    82                           	opt stack 0
    83  000F0B                     _LCD_INIT_STRING:
    84                           	opt stack 0
    85  000F0B  28                 	db	40
    86  000F0C  0C                 	db	12
    87  000F0D  01                 	db	1
    88  000F0E  06                 	db	6
    89  000F0F                     __end_of_LCD_INIT_STRING:
    90                           	opt stack 0
    91  000F0F                     STR_1:
    92                           
    93                           ; BSR set to: 15
    94  000F0F  20                 	db	32
    95  000F10  20                 	db	32
    96  000F11  20                 	db	32
    97  000F12  20                 	db	32
    98  000F13  20                 	db	32
    99  000F14  20                 	db	32
   100  000F15  20                 	db	32
   101  000F16  20                 	db	32
   102  000F17  20                 	db	32
   103  000F18  20                 	db	32
   104  000F19  20                 	db	32
   105  000F1A  20                 	db	32
   106  000F1B  20                 	db	32
   107  000F1C  20                 	db	32
   108  000F1D  20                 	db	32
   109  000F1E  20                 	db	32
   110  000F1F  20                 	db	32
   111  000F20  20                 	db	32
   112  000F21  20                 	db	32
   113  000F22  20                 	db	32
   114  000F23  20                 	db	32
   115  000F24  20                 	db	32
   116  000F25  20                 	db	32
   117  000F26  20                 	db	32
   118  000F27  20                 	db	32
   119  000F28  20                 	db	32
   120  000F29  20                 	db	32
   121  000F2A  20                 	db	32
   122  000F2B  20                 	db	32
   123  000F2C  20                 	db	32
   124  000F2D  20                 	db	32
   125  000F2E  20                 	db	32
   126  000F2F  00                 	db	0
   127  000F30                     STR_20:
   128                           
   129                           ; BSR set to: 15
   130  000F30  25                 	db	37
   131  000F31  30                 	db	48	;'0'
   132  000F32  32                 	db	50	;'2'
   133  000F33  75                 	db	117	;'u'
   134  000F34  2F                 	db	47
   135  000F35  25                 	db	37
   136  000F36  30                 	db	48	;'0'
   137  000F37  32                 	db	50	;'2'
   138  000F38  75                 	db	117	;'u'
   139  000F39  2F                 	db	47
   140  000F3A  25                 	db	37
   141  000F3B  30                 	db	48	;'0'
   142  000F3C  32                 	db	50	;'2'
   143  000F3D  75                 	db	117	;'u'
   144  000F3E  00                 	db	0
   145  000F3F                     STR_2:
   146                           
   147                           ; BSR set to: 15
   148  000F3F  6E                 	db	110	;'n'
   149  000F40  75                 	db	117	;'u'
   150  000F41  6C                 	db	108	;'l'
   151  000F42  6C                 	db	108	;'l'
   152  000F43  20                 	db	32
   153  000F44  70                 	db	112	;'p'
   154  000F45  6F                 	db	111	;'o'
   155  000F46  69                 	db	105	;'i'
   156  000F47  6E                 	db	110	;'n'
   157  000F48  74                 	db	116	;'t'
   158  000F49  65                 	db	101	;'e'
   159  000F4A  72                 	db	114	;'r'
   160  000F4B  00                 	db	0
   161  000F4C                     STR_22:
   162                           
   163                           ; BSR set to: 15
   164  000F4C  57                 	db	87	;'W'
   165  000F4D  41                 	db	65	;'A'
   166  000F4E  52                 	db	82	;'R'
   167  000F4F  4E                 	db	78	;'N'
   168  000F50  49                 	db	73	;'I'
   169  000F51  4E                 	db	78	;'N'
   170  000F52  47                 	db	71	;'G'
   171  000F53  21                 	db	33
   172  000F54  21                 	db	33
   173  000F55  21                 	db	33
   174  000F56  00                 	db	0
   175  000F57                     STR_26:
   176                           
   177                           ; BSR set to: 15
   178  000F57  70                 	db	112	;'p'
   179  000F58  61                 	db	97	;'a'
   180  000F59  73                 	db	115	;'s'
   181  000F5A  73                 	db	115	;'s'
   182  000F5B  3A                 	db	58	;':'
   183  000F5C  5F                 	db	95	;'_'
   184  000F5D  5F                 	db	95	;'_'
   185  000F5E  5F                 	db	95	;'_'
   186  000F5F  5F                 	db	95	;'_'
   187  000F60  00                 	db	0
   188  000F61                     STR_21:
   189                           
   190                           ; BSR set to: 15
   191  000F61  25                 	db	37
   192  000F62  30                 	db	48	;'0'
   193  000F63  32                 	db	50	;'2'
   194  000F64  75                 	db	117	;'u'
   195  000F65  3A                 	db	58	;':'
   196  000F66  25                 	db	37
   197  000F67  30                 	db	48	;'0'
   198  000F68  32                 	db	50	;'2'
   199  000F69  75                 	db	117	;'u'
   200  000F6A  00                 	db	0
   201  000F6B                     STR_3:
   202                           
   203                           ; BSR set to: 15
   204  000F6B  65                 	db	101	;'e'
   205  000F6C  78                 	db	120	;'x'
   206  000F6D  63                 	db	99	;'c'
   207  000F6E  65                 	db	101	;'e'
   208  000F6F  70                 	db	112	;'p'
   209  000F70  74                 	db	116	;'t'
   210  000F71  69                 	db	105	;'i'
   211  000F72  6F                 	db	111	;'o'
   212  000F73  6E                 	db	110	;'n'
   213  000F74  00                 	db	0
   214  000F75                     STR_27:
   215                           
   216                           ; BSR set to: 15
   217  000F75  54                 	db	84	;'T'
   218  000F76  52                 	db	82	;'R'
   219  000F77  49                 	db	73	;'I'
   220  000F78  47                 	db	71	;'G'
   221  000F79  47                 	db	71	;'G'
   222  000F7A  45                 	db	69	;'E'
   223  000F7B  44                 	db	68	;'D'
   224  000F7C  00                 	db	0
   225  000F7D                     STR_4:
   226                           
   227                           ; BSR set to: 15
   228  000F7D  25                 	db	37
   229  000F7E  30                 	db	48	;'0'
   230  000F7F  31                 	db	49	;'1'
   231  000F80  75                 	db	117	;'u'
   232  000F81  00                 	db	0
   233  000F82                     STR_25:
   234                           
   235                           ; BSR set to: 15
   236  000F82  4F                 	db	79	;'O'
   237  000F83  46                 	db	70	;'F'
   238  000F84  46                 	db	70	;'F'
   239  000F85  00                 	db	0
   240  000F86                     STR_24:
   241                           
   242                           ; BSR set to: 15
   243  000F86  4F                 	db	79	;'O'
   244  000F87  4E                 	db	78	;'N'
   245  000F88  00                 	db	0
   246  000F89                     STR_18:
   247                           
   248                           ; BSR set to: 15
   249  000F89  23                 	db	35
   250  000F8A  00                 	db	0
   251  000F8B                     STR_16:
   252                           
   253                           ; BSR set to: 15
   254  000F8B  2A                 	db	42
   255  000F8C  00                 	db	0
   256  000F8D                     STR_7:
   257                           
   258                           ; BSR set to: 15
   259  000F8D  41                 	db	65	;'A'
   260  000F8E  00                 	db	0
   261  000F8F                     STR_11:
   262                           
   263                           ; BSR set to: 15
   264  000F8F  42                 	db	66	;'B'
   265  000F90  00                 	db	0
   266  000F91                     STR_15:
   267                           
   268                           ; BSR set to: 15
   269  000F91  43                 	db	67	;'C'
   270  000F92  00                 	db	0
   271  0000                     
   272                           ; #config settings
   273  000F93  00                 	db	0	; dummy byte at the end
   274  0000                     
   275                           	psect	nvCOMRAM
   276  000043                     __pnvCOMRAM:
   277                           	opt stack 0
   278  000043                     _anio_d:
   279                           	opt stack 0
   280  000043                     	ds	1
   281  000044                     _anio_u:
   282                           	opt stack 0
   283  000044                     	ds	1
   284  000045                     _dia_semana:
   285                           	opt stack 0
   286  000045                     	ds	1
   287  000046                     _fecha_d:
   288                           	opt stack 0
   289  000046                     	ds	1
   290  000047                     _fecha_u:
   291                           	opt stack 0
   292  000047                     	ds	1
   293  000048                     _hora_d:
   294                           	opt stack 0
   295  000048                     	ds	1
   296  000049                     _hora_u:
   297                           	opt stack 0
   298  000049                     	ds	1
   299  00004A                     _mes_d:
   300                           	opt stack 0
   301  00004A                     	ds	1
   302  00004B                     _mes_u:
   303                           	opt stack 0
   304  00004B                     	ds	1
   305  00004C                     _minuto_d:
   306                           	opt stack 0
   307  00004C                     	ds	1
   308  00004D                     _minuto_u:
   309                           	opt stack 0
   310  00004D                     	ds	1
   311  00004E                     _segundo_d:
   312                           	opt stack 0
   313  00004E                     	ds	1
   314  00004F                     _segundo_u:
   315                           	opt stack 0
   316  00004F                     	ds	1
   317  0000                     _ANCON0	set	3912
   318  0000                     _ANCON1	set	3913
   319  0000                     _RTCCFG	set	3903
   320  0000                     _RTCCFGbits	set	3903
   321  0000                     _ADCON0	set	4034
   322  0000                     _ADCON1	set	4033
   323  0000                     _ALRMCFGbits	set	3985
   324  0000                     _EECON2	set	4007
   325  0000                     _INTCONbits	set	4082
   326  0000                     _LATAbits	set	3977
   327  0000                     _LATBbits	set	3978
   328  0000                     _OSCCONbits	set	4051
   329  0000                     _OSCTUNEbits	set	3995
   330  0000                     _PIE3bits	set	4003
   331  0000                     _PORTAbits	set	3968
   332  0000                     _PORTCbits	set	3970
   333  0000                     _RTCVALH	set	3993
   334  0000                     _RTCVALL	set	3992
   335  0000                     _T1CONbits	set	4045
   336  0000                     _TRISA	set	3986
   337  0000                     _TRISB	set	3987
   338  0000                     _TRISBbits	set	3987
   339  0000                     _TRISC	set	3988
   340                           
   341                           	psect	cinit
   342  001DA6                     __pcinit:
   343                           	opt stack 0
   344  001DA6                     start_initialization:
   345                           	opt stack 0
   346  001DA6                     __initialization:
   347                           	opt stack 0
   348                           
   349                           ; Clear objects allocated to BANK0 (44 bytes)
   350  001DA6  EE00  F060         	lfsr	0,__pbssBANK0
   351  001DAA  0E2C               	movlw	44
   352  001DAC                     clear_0:
   353  001DAC  6AEE               	clrf	postinc0,c
   354  001DAE  06E8               	decf	wreg,f,c
   355  001DB0  E1FD               	bnz	clear_0
   356                           
   357                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   358  001DB2  6A5D               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   359                           
   360                           ; Clear objects allocated to COMRAM (27 bytes)
   361  001DB4  EE00  F028         	lfsr	0,__pbssCOMRAM
   362  001DB8  0E1B               	movlw	27
   363  001DBA                     clear_1:
   364  001DBA  6AEE               	clrf	postinc0,c
   365  001DBC  06E8               	decf	wreg,f,c
   366  001DBE  E1FD               	bnz	clear_1
   367                           
   368                           ; Initialize objects allocated to COMRAM (13 bytes)
   369                           ; load TBLPTR registers with __pidataCOMRAM
   370  001DC0  0EE4               	movlw	low __pidataCOMRAM
   371  001DC2  6EF6               	movwf	tblptrl,c
   372  001DC4  0E1E               	movlw	high __pidataCOMRAM
   373  001DC6  6EF7               	movwf	tblptrh,c
   374  001DC8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   375  001DCA  6EF8               	movwf	tblptru,c
   376  001DCC  EE00  F050         	lfsr	0,__pdataCOMRAM
   377  001DD0  EE10 F00D          	lfsr	1,13
   378  001DD4                     copy_data0:
   379  001DD4  0009               	tblrd		*+
   380  001DD6  CFF5 FFEE          	movff	tablat,postinc0
   381  001DDA  50E5               	movf	postdec1,w,c
   382  001DDC  50E1               	movf	fsr1l,w,c
   383  001DDE  E1FA               	bnz	copy_data0
   384  001DE0                     end_of_initialization:
   385                           	opt stack 0
   386  001DE0                     __end_of__initialization:
   387                           	opt stack 0
   388  001DE0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   389  001DE2  6EF8               	movwf	tblptru,c
   390  001DE4  0100               	movlb	0
   391  001DE6  EF02  F00D         	goto	_main	;jump to C main() function
   392                           tblptru	equ	0xFF8
   393                           tblptrh	equ	0xFF7
   394                           tblptrl	equ	0xFF6
   395                           tablat	equ	0xFF5
   396                           postinc0	equ	0xFEE
   397                           wreg	equ	0xFE8
   398                           postdec1	equ	0xFE5
   399                           fsr1l	equ	0xFE1
   400                           
   401                           	psect	bitbssCOMRAM
   402  0002E8                     __pbitbssCOMRAM:
   403                           	opt stack 0
   404  0002E8                     _flag:
   405                           	opt stack 0
   406  0002E8                     	ds	1
   407                           tblptru	equ	0xFF8
   408                           tblptrh	equ	0xFF7
   409                           tblptrl	equ	0xFF6
   410                           tablat	equ	0xFF5
   411                           postinc0	equ	0xFEE
   412                           wreg	equ	0xFE8
   413                           postdec1	equ	0xFE5
   414                           fsr1l	equ	0xFE1
   415                           
   416                           	psect	bssCOMRAM
   417  000028                     __pbssCOMRAM:
   418                           	opt stack 0
   419  000028                     _RtccTimeVal:
   420                           	opt stack 0
   421  000028                     	ds	4
   422  00002C                     _a:
   423                           	opt stack 0
   424  00002C                     	ds	2
   425  00002E                     _b:
   426                           	opt stack 0
   427  00002E                     	ds	2
   428  000030                     _c:
   429                           	opt stack 0
   430  000030                     	ds	2
   431  000032                     _i:
   432                           	opt stack 0
   433  000032                     	ds	2
   434  000034                     _j:
   435                           	opt stack 0
   436  000034                     	ds	2
   437  000036                     _k:
   438                           	opt stack 0
   439  000036                     	ds	2
   440  000038                     _segundo:
   441                           	opt stack 0
   442  000038                     	ds	2
   443  00003A                     _key:
   444                           	opt stack 0
   445  00003A                     	ds	1
   446  00003B                     _RtccDate:
   447                           	opt stack 0
   448  00003B                     	ds	4
   449  00003F                     _RtccTime:
   450                           	opt stack 0
   451  00003F                     	ds	4
   452                           tblptru	equ	0xFF8
   453                           tblptrh	equ	0xFF7
   454                           tblptrl	equ	0xFF6
   455                           tablat	equ	0xFF5
   456                           postinc0	equ	0xFEE
   457                           wreg	equ	0xFE8
   458                           postdec1	equ	0xFE5
   459                           fsr1l	equ	0xFE1
   460                           
   461                           	psect	dataCOMRAM
   462  000050                     __pdataCOMRAM:
   463                           	opt stack 0
   464  000050                     _anio:
   465                           	opt stack 0
   466  000050                     	ds	2
   467  000052                     _dia:
   468                           	opt stack 0
   469  000052                     	ds	2
   470  000054                     _diasem:
   471                           	opt stack 0
   472  000054                     	ds	2
   473  000056                     _hora:
   474                           	opt stack 0
   475  000056                     	ds	2
   476  000058                     _mes:
   477                           	opt stack 0
   478  000058                     	ds	2
   479  00005A                     _minuto:
   480                           	opt stack 0
   481  00005A                     	ds	2
   482  00005C                     _state_alarm:
   483                           	opt stack 0
   484  00005C                     	ds	1
   485                           tblptru	equ	0xFF8
   486                           tblptrh	equ	0xFF7
   487                           tblptrl	equ	0xFF6
   488                           tablat	equ	0xFF5
   489                           postinc0	equ	0xFEE
   490                           wreg	equ	0xFE8
   491                           postdec1	equ	0xFE5
   492                           fsr1l	equ	0xFE1
   493                           
   494                           	psect	bssBANK0
   495  000060                     __pbssBANK0:
   496                           	opt stack 0
   497  000060                     _RtccAlrmTimeDate:
   498                           	opt stack 0
   499  000060                     	ds	8
   500  000068                     _RtccTimeDate:
   501                           	opt stack 0
   502  000068                     	ds	8
   503  000070                     _Rtcc_read_TimeDate:
   504                           	opt stack 0
   505  000070                     	ds	8
   506  000078                     _buffer2:
   507                           	opt stack 0
   508  000078                     	ds	20
   509                           tblptru	equ	0xFF8
   510                           tblptrh	equ	0xFF7
   511                           tblptrl	equ	0xFF6
   512                           tablat	equ	0xFF5
   513                           postinc0	equ	0xFEE
   514                           wreg	equ	0xFE8
   515                           postdec1	equ	0xFE5
   516                           fsr1l	equ	0xFE1
   517                           
   518                           	psect	cstackCOMRAM
   519  000001                     __pcstackCOMRAM:
   520                           	opt stack 0
   521  000001                     ??_isdigit:
   522  000001                     ??_lcd_send_nibble:
   523  000001                     ?___wmul:
   524                           	opt stack 0
   525  000001                     ?___awdiv:
   526                           	opt stack 0
   527  000001                     ?___lwdiv:
   528                           	opt stack 0
   529  000001                     Delay100TCYx@unit:
   530                           	opt stack 0
   531  000001                     Delay1KTCYx@unit:
   532                           	opt stack 0
   533  000001                     RtccWriteDate@pDt:
   534                           	opt stack 0
   535  000001                     RtccWriteTime@pTm:
   536                           	opt stack 0
   537  000001                     ___wmul@multiplier:
   538                           	opt stack 0
   539  000001                     ___awdiv@dividend:
   540                           	opt stack 0
   541  000001                     ___lwdiv@dividend:
   542                           	opt stack 0
   543                           
   544                           ; 2 bytes @ 0x0
   545  000001                     	ds	1
   546  000002                     lcd_send_nibble@nibble:
   547                           	opt stack 0
   548  000002                     _isdigit$2330:
   549                           	opt stack 0
   550                           
   551                           ; 1 bytes @ 0x1
   552  000002                     	ds	1
   553  000003                     lcd_send_byte@n:
   554                           	opt stack 0
   555  000003                     RtccWriteDate@di:
   556                           	opt stack 0
   557  000003                     RtccWriteTime@di:
   558                           	opt stack 0
   559  000003                     isdigit@c:
   560                           	opt stack 0
   561  000003                     ___wmul@multiplicand:
   562                           	opt stack 0
   563  000003                     ___awdiv@divisor:
   564                           	opt stack 0
   565  000003                     ___lwdiv@divisor:
   566                           	opt stack 0
   567                           
   568                           ; 2 bytes @ 0x2
   569  000003                     	ds	1
   570  000004                     lcd_send_byte@address:
   571                           	opt stack 0
   572                           
   573                           ; 1 bytes @ 0x3
   574  000004                     	ds	1
   575  000005                     lcd_init@i:
   576                           	opt stack 0
   577  000005                     lcd_gotoxy@y:
   578                           	opt stack 0
   579  000005                     lcd_comand@d:
   580                           	opt stack 0
   581  000005                     RtccWriteDate@wasOn:
   582                           	opt stack 0
   583  000005                     RtccWriteTime@wasOn:
   584                           	opt stack 0
   585  000005                     ___awdiv@counter:
   586                           	opt stack 0
   587  000005                     ___wmul@product:
   588                           	opt stack 0
   589  000005                     ___lwdiv@quotient:
   590                           	opt stack 0
   591                           
   592                           ; 2 bytes @ 0x4
   593  000005                     	ds	1
   594  000006                     ??_clear:
   595  000006                     lcd_gotoxy@x:
   596                           	opt stack 0
   597  000006                     RtccWriteDate@wasAlrm:
   598                           	opt stack 0
   599  000006                     RtccWriteTime@wasAlrm:
   600                           	opt stack 0
   601  000006                     ___awdiv@sign:
   602                           	opt stack 0
   603                           
   604                           ; 1 bytes @ 0x5
   605  000006                     	ds	1
   606  000007                     lcd_gotoxy@address:
   607                           	opt stack 0
   608  000007                     RtccWriteTime@wasWrEn:
   609                           	opt stack 0
   610  000007                     ___lwdiv@counter:
   611                           	opt stack 0
   612  000007                     RtccWriteDate@tempYear:
   613                           	opt stack 0
   614  000007                     ___awdiv@quotient:
   615                           	opt stack 0
   616                           
   617                           ; 2 bytes @ 0x6
   618  000007                     	ds	1
   619  000008                     ?___lwmod:
   620                           	opt stack 0
   621  000008                     lcd_putc@c:
   622                           	opt stack 0
   623  000008                     RtccWriteTime@tempMinSec:
   624                           	opt stack 0
   625  000008                     ___lwmod@dividend:
   626                           	opt stack 0
   627                           
   628                           ; 2 bytes @ 0x7
   629  000008                     	ds	1
   630  000009                     RtccWriteDate@wasWrEn:
   631                           	opt stack 0
   632  000009                     lcd_putrs@ptr:
   633                           	opt stack 0
   634  000009                     __delay_s@millis:
   635                           	opt stack 0
   636                           
   637                           ; 2 bytes @ 0x8
   638  000009                     	ds	1
   639  00000A                     RtccWriteDate@tempDayMonth:
   640                           	opt stack 0
   641  00000A                     RtccWriteTime@tempHourWDay:
   642                           	opt stack 0
   643  00000A                     ___lwmod@divisor:
   644                           	opt stack 0
   645                           
   646                           ; 2 bytes @ 0x9
   647  00000A                     	ds	1
   648  00000B                     ??__delay_s:
   649                           
   650                           ; 0 bytes @ 0xA
   651  00000B                     	ds	1
   652  00000C                     ___lwmod@counter:
   653                           	opt stack 0
   654  00000C                     __delay_s@it:
   655                           	opt stack 0
   656  00000C                     RtccWriteDate@tempHourWDay:
   657                           	opt stack 0
   658                           
   659                           ; 2 bytes @ 0xB
   660  00000C                     	ds	1
   661  00000D                     ?_sprintf:
   662                           	opt stack 0
   663  00000D                     sprintf@sp:
   664                           	opt stack 0
   665                           
   666                           ; 2 bytes @ 0xC
   667  00000D                     	ds	1
   668  00000E                     __delay_s@index:
   669                           	opt stack 0
   670                           
   671                           ; 2 bytes @ 0xD
   672  00000E                     	ds	1
   673  00000F                     sprintf@f:
   674                           	opt stack 0
   675                           
   676                           ; 2 bytes @ 0xE
   677  00000F                     	ds	8
   678  000017                     ??_sprintf:
   679                           
   680                           ; 0 bytes @ 0x16
   681  000017                     	ds	4
   682  00001B                     sprintf@ap:
   683                           	opt stack 0
   684                           
   685                           ; 2 bytes @ 0x1A
   686  00001B                     	ds	2
   687  00001D                     sprintf@flag:
   688                           	opt stack 0
   689                           
   690                           ; 1 bytes @ 0x1C
   691  00001D                     	ds	1
   692  00001E                     sprintf@val:
   693                           	opt stack 0
   694                           
   695                           ; 2 bytes @ 0x1D
   696  00001E                     	ds	2
   697  000020                     sprintf@prec:
   698                           	opt stack 0
   699                           
   700                           ; 1 bytes @ 0x1F
   701  000020                     	ds	1
   702  000021                     sprintf@width:
   703                           	opt stack 0
   704                           
   705                           ; 2 bytes @ 0x20
   706  000021                     	ds	2
   707  000023                     sprintf@c:
   708                           	opt stack 0
   709                           
   710                           ; 1 bytes @ 0x22
   711  000023                     	ds	1
   712  000024                     ??_read_keyboard:
   713  000024                     
   714                           ; 0 bytes @ 0x23
   715  000024                     	ds	1
   716  000025                     twinkle@input:
   717                           	opt stack 0
   718                           
   719                           ; 1 bytes @ 0x24
   720  000025                     	ds	1
   721  000026                     ??_main:
   722                           
   723                           ; 0 bytes @ 0x25
   724  000026                     	ds	1
   725  000027                     main@input:
   726                           	opt stack 0
   727                           
   728                           ; 1 bytes @ 0x26
   729  000027                     	ds	1
   730                           tblptru	equ	0xFF8
   731                           tblptrh	equ	0xFF7
   732                           tblptrl	equ	0xFF6
   733                           tablat	equ	0xFF5
   734                           postinc0	equ	0xFEE
   735                           wreg	equ	0xFE8
   736                           postdec1	equ	0xFE5
   737                           fsr1l	equ	0xFE1
   738                           
   739 ;;
   740 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   741 ;;
   742 ;; *************** function _main *****************
   743 ;; Defined at:
   744 ;;		line 87 in file "main.c"
   745 ;; Parameters:    Size  Location     Type
   746 ;;		None
   747 ;; Auto vars:     Size  Location     Type
   748 ;;  input           1   38[COMRAM] unsigned char 
   749 ;; Return value:  Size  Location     Type
   750 ;;                  2   52[None  ] int 
   751 ;; Registers used:
   752 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   753 ;; Tracked objects:
   754 ;;		On entry : 0/0
   755 ;;		On exit  : 0/0
   756 ;;		Unchanged: 0/0
   757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   759 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   760 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   761 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   762 ;;Total ram usage:        2 bytes
   763 ;; Hardware stack levels required when called:    8
   764 ;; This function calls:
   765 ;;		_Setup
   766 ;;		_caratula
   767 ;;		_lcd_gotoxy
   768 ;;		_lcd_putrs
   769 ;;		_read_keyboard
   770 ;;		_set_vision
   771 ;; This function is called by:
   772 ;;		Startup code after reset
   773 ;; This function uses a non-reentrant model
   774 ;;
   775                           
   776                           	psect	text0
   777  001A04                     __ptext0:
   778                           	opt stack 0
   779  001A04                     _main:
   780                           	opt stack 23
   781                           
   782                           ;main.c: 88: Setup();
   783                           
   784                           ; BSR set to: 15
   785                           ;incstack = 0
   786  001A04  ECAF  F00E         	call	_Setup	;wreg free
   787                           
   788                           ;main.c: 89: caratula();
   789  001A08  EC79  F00F         	call	_caratula	;wreg free
   790  001A0C  D000               	goto	l2815
   791  001A0E                     l2815:
   792                           
   793                           ;main.c: 94: set_vision();
   794  001A0E  EC7B  F00D         	call	_set_vision	;wreg free
   795                           
   796                           ;main.c: 96: char input = read_keyboard();
   797  001A12  ECCA  F007         	call	_read_keyboard	;wreg free
   798  001A16  6E27               	movwf	main@input,c
   799                           
   800                           ;main.c: 98: if (input == 16){
   801  001A18  0E10               	movlw	16
   802  001A1A  1827               	xorwf	main@input,w,c
   803  001A1C  A4D8               	btfss	status,2,c
   804  001A1E  D7F7               	goto	l2815
   805                           
   806                           ;main.c: 99: lcd_gotoxy(1,1);
   807  001A20  0E01               	movlw	1
   808  001A22  6E05               	movwf	lcd_gotoxy@y,c
   809  001A24  0E01               	movlw	1
   810  001A26  EC22  F00F         	call	_lcd_gotoxy
   811                           
   812                           ;main.c: 100: lcd_putrs("                                ");
   813  001A2A  0E0F               	movlw	low STR_1
   814  001A2C  6E09               	movwf	lcd_putrs@ptr,c
   815  001A2E  0E0F               	movlw	high STR_1
   816  001A30  6E0A               	movwf	lcd_putrs@ptr+1,c
   817  001A32  EC39  F00E         	call	_lcd_putrs	;wreg free
   818                           
   819                           ;main.c: 101: lcd_gotoxy(1,1);
   820  001A36  0E01               	movlw	1
   821  001A38  6E05               	movwf	lcd_gotoxy@y,c
   822  001A3A  0E01               	movlw	1
   823  001A3C  EC22  F00F         	call	_lcd_gotoxy
   824                           
   825                           ;main.c: 102: lcd_putrs("null pointer");
   826  001A40  0E3F               	movlw	low STR_2
   827  001A42  6E09               	movwf	lcd_putrs@ptr,c
   828  001A44  0E0F               	movlw	high STR_2
   829  001A46  6E0A               	movwf	lcd_putrs@ptr+1,c
   830  001A48  EC39  F00E         	call	_lcd_putrs	;wreg free
   831                           
   832                           ;main.c: 103: lcd_gotoxy(1,2);
   833  001A4C  0E02               	movlw	2
   834  001A4E  6E05               	movwf	lcd_gotoxy@y,c
   835  001A50  0E01               	movlw	1
   836  001A52  EC22  F00F         	call	_lcd_gotoxy
   837                           
   838                           ;main.c: 104: lcd_putrs("exception");
   839  001A56  0E6B               	movlw	low STR_3
   840  001A58  6E09               	movwf	lcd_putrs@ptr,c
   841  001A5A  0E0F               	movlw	high STR_3
   842  001A5C  6E0A               	movwf	lcd_putrs@ptr+1,c
   843  001A5E  EC39  F00E         	call	_lcd_putrs	;wreg free
   844                           
   845                           ;main.c: 105: input = 0;
   846  001A62  0E00               	movlw	0
   847  001A64  6E27               	movwf	main@input,c
   848                           
   849                           ;main.c: 106: key = 0;
   850  001A66  0E00               	movlw	0
   851  001A68  6E3A               	movwf	_key,c
   852                           
   853                           ;main.c: 107: _delay((unsigned long)((98)*(8000000/4000.0)));
   854  001A6A  0EFF               	movlw	255
   855  001A6C  6E26               	movwf	??_main& (0+255),c
   856  001A6E  0E8A               	movlw	138
   857  001A70                     u2357:
   858  001A70  2EE8               	decfsz	wreg,f,c
   859  001A72  D7FE               	goto	u2357
   860  001A74  2E26               	decfsz	??_main& (0+255),f,c
   861  001A76  D7FC               	goto	u2357
   862  001A78  D000               	nop2	
   863  001A7A  D7C9               	goto	l2815
   864                           
   865                           ;main.c: 108: }
   866                           ;main.c: 109: }
   867                           ;main.c: 111: return 0;
   868                           ;	Return value of _main is never used
   869  001A7C  EF00  F000         	goto	start
   870  001A80                     __end_of_main:
   871                           	opt stack 0
   872                           tblptru	equ	0xFF8
   873                           tblptrh	equ	0xFF7
   874                           tblptrl	equ	0xFF6
   875                           tablat	equ	0xFF5
   876                           postinc0	equ	0xFEE
   877                           wreg	equ	0xFE8
   878                           postdec1	equ	0xFE5
   879                           fsr1l	equ	0xFE1
   880                           status	equ	0xFD8
   881                           
   882 ;; *************** function _set_vision *****************
   883 ;; Defined at:
   884 ;;		line 45 in file "lcd_vision.c"
   885 ;; Parameters:    Size  Location     Type
   886 ;;		None
   887 ;; Auto vars:     Size  Location     Type
   888 ;;		None
   889 ;; Return value:  Size  Location     Type
   890 ;;		None               void
   891 ;; Registers used:
   892 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   893 ;; Tracked objects:
   894 ;;		On entry : 0/0
   895 ;;		On exit  : 0/0
   896 ;;		Unchanged: 0/0
   897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   901 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   902 ;;Total ram usage:        0 bytes
   903 ;; Hardware stack levels used:    1
   904 ;; Hardware stack levels required when called:    7
   905 ;; This function calls:
   906 ;;		_clear
   907 ;;		_lcd_gotoxy
   908 ;;		_lcd_putrs
   909 ;;		_twinkle
   910 ;;		_write_Date
   911 ;; This function is called by:
   912 ;;		_main
   913 ;; This function uses a non-reentrant model
   914 ;;
   915                           
   916                           	psect	text1
   917  001AF6                     __ptext1:
   918                           	opt stack 0
   919  001AF6                     _set_vision:
   920                           	opt stack 23
   921                           
   922                           ;lcd_vision.c: 46: clear();
   923                           
   924                           ;incstack = 0
   925  001AF6  EC45  F00F         	call	_clear	;wreg free
   926                           
   927                           ;lcd_vision.c: 47: write_Date();
   928  001AFA  ECC3  F00C         	call	_write_Date	;wreg free
   929                           
   930                           ;lcd_vision.c: 48: lcd_gotoxy(1,1);
   931  001AFE  0E01               	movlw	1
   932  001B00  6E05               	movwf	lcd_gotoxy@y,c
   933  001B02  0E01               	movlw	1
   934  001B04  EC22  F00F         	call	_lcd_gotoxy
   935                           
   936                           ;lcd_vision.c: 50: switch (state_alarm){
   937  001B08  D022               	goto	l2807
   938  001B0A                     l2795:
   939  001B0A  0E86               	movlw	low STR_24
   940  001B0C  6E09               	movwf	lcd_putrs@ptr,c
   941  001B0E  0E0F               	movlw	high STR_24
   942  001B10  6E0A               	movwf	lcd_putrs@ptr+1,c
   943  001B12  EC39  F00E         	call	_lcd_putrs	;wreg free
   944                           
   945                           ;lcd_vision.c: 52: break;
   946  001B16  0012               	return	
   947  001B18                     l2797:
   948  001B18  0E82               	movlw	low STR_25
   949  001B1A  6E09               	movwf	lcd_putrs@ptr,c
   950  001B1C  0E0F               	movlw	high STR_25
   951  001B1E  6E0A               	movwf	lcd_putrs@ptr+1,c
   952  001B20  EC39  F00E         	call	_lcd_putrs	;wreg free
   953                           
   954                           ;lcd_vision.c: 54: lcd_gotoxy(7,2);
   955  001B24  0E02               	movlw	2
   956  001B26  6E05               	movwf	lcd_gotoxy@y,c
   957  001B28  0E07               	movlw	7
   958  001B2A  EC22  F00F         	call	_lcd_gotoxy
   959                           
   960                           ;lcd_vision.c: 55: lcd_putrs("pass:____");
   961  001B2E  0E57               	movlw	low STR_26
   962  001B30  6E09               	movwf	lcd_putrs@ptr,c
   963  001B32  0E0F               	movlw	high STR_26
   964  001B34  6E0A               	movwf	lcd_putrs@ptr+1,c
   965  001B36  EC39  F00E         	call	_lcd_putrs	;wreg free
   966                           
   967                           ;lcd_vision.c: 56: break;
   968  001B3A  0012               	return	
   969  001B3C                     l2803:
   970  001B3C  0E75               	movlw	low STR_27
   971  001B3E  6E09               	movwf	lcd_putrs@ptr,c
   972  001B40  0E0F               	movlw	high STR_27
   973  001B42  6E0A               	movwf	lcd_putrs@ptr+1,c
   974  001B44  EC39  F00E         	call	_lcd_putrs	;wreg free
   975                           
   976                           ;lcd_vision.c: 58: twinkle();
   977  001B48  ECB0  F00D         	call	_twinkle	;wreg free
   978                           
   979                           ;lcd_vision.c: 59: }
   980  001B4C  0012               	return	
   981  001B4E                     l2807:
   982  001B4E  505C               	movf	_state_alarm,w,c
   983                           
   984                           ; Switch size 1, requested type "space"
   985                           ; Number of cases is 2, Range of values is 0 to 1
   986                           ; switch strategies available:
   987                           ; Name         Instructions Cycles
   988                           ; simple_byte            7     4 (average)
   989                           ;	Chosen strategy is simple_byte
   990  001B50  0A00               	xorlw	0	; case 0
   991  001B52  B4D8               	btfsc	status,2,c
   992  001B54  D7DA               	goto	l2795
   993  001B56  0A01               	xorlw	1	; case 1
   994  001B58  B4D8               	btfsc	status,2,c
   995  001B5A  D7DE               	goto	l2797
   996  001B5C  D7EF               	goto	l2803
   997  001B5E  0012               	return		;funcret
   998  001B60                     __end_of_set_vision:
   999                           	opt stack 0
  1000                           tblptru	equ	0xFF8
  1001                           tblptrh	equ	0xFF7
  1002                           tblptrl	equ	0xFF6
  1003                           tablat	equ	0xFF5
  1004                           postinc0	equ	0xFEE
  1005                           wreg	equ	0xFE8
  1006                           postdec1	equ	0xFE5
  1007                           fsr1l	equ	0xFE1
  1008                           status	equ	0xFD8
  1009                           
  1010 ;; *************** function _write_Date *****************
  1011 ;; Defined at:
  1012 ;;		line 10 in file "lcd_vision.c"
  1013 ;; Parameters:    Size  Location     Type
  1014 ;;		None
  1015 ;; Auto vars:     Size  Location     Type
  1016 ;;		None
  1017 ;; Return value:  Size  Location     Type
  1018 ;;		None               void
  1019 ;; Registers used:
  1020 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1021 ;; Tracked objects:
  1022 ;;		On entry : 0/0
  1023 ;;		On exit  : 0/0
  1024 ;;		Unchanged: 0/0
  1025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1029 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1030 ;;Total ram usage:        0 bytes
  1031 ;; Hardware stack levels used:    1
  1032 ;; Hardware stack levels required when called:    5
  1033 ;; This function calls:
  1034 ;;		_lcd_gotoxy
  1035 ;;		_lcd_putrs
  1036 ;;		_sprintf
  1037 ;; This function is called by:
  1038 ;;		_set_vision
  1039 ;; This function uses a non-reentrant model
  1040 ;;
  1041                           
  1042                           	psect	text2
  1043  001986                     __ptext2:
  1044                           	opt stack 0
  1045  001986                     _write_Date:
  1046                           	opt stack 24
  1047                           
  1048                           ;lcd_vision.c: 11: lcd_gotoxy(9,1);
  1049                           
  1050                           ;incstack = 0
  1051  001986  0E01               	movlw	1
  1052  001988  6E05               	movwf	lcd_gotoxy@y,c
  1053  00198A  0E09               	movlw	9
  1054  00198C  EC22  F00F         	call	_lcd_gotoxy
  1055                           
  1056                           ;lcd_vision.c: 12: sprintf(buffer2,"%02u/%02u/%02u",dia,mes,anio);
  1057  001990  0E78               	movlw	low _buffer2
  1058  001992  6E0D               	movwf	sprintf@sp,c
  1059  001994  0E00               	movlw	high _buffer2
  1060  001996  6E0E               	movwf	sprintf@sp+1,c
  1061  001998  0E30               	movlw	low STR_20
  1062  00199A  6E0F               	movwf	sprintf@f,c
  1063  00199C  0E0F               	movlw	high STR_20
  1064  00199E  6E10               	movwf	sprintf@f+1,c
  1065  0019A0  C052  F011         	movff	_dia,?_sprintf+4
  1066  0019A4  C053  F012         	movff	_dia+1,?_sprintf+5
  1067  0019A8  C058  F013         	movff	_mes,?_sprintf+6
  1068  0019AC  C059  F014         	movff	_mes+1,?_sprintf+7
  1069  0019B0  C050  F015         	movff	_anio,?_sprintf+8
  1070  0019B4  C051  F016         	movff	_anio+1,?_sprintf+9
  1071  0019B8  EC39  F009         	call	_sprintf	;wreg free
  1072                           
  1073                           ;lcd_vision.c: 13: lcd_putrs(buffer2);
  1074  0019BC  0E78               	movlw	low _buffer2
  1075  0019BE  6E09               	movwf	lcd_putrs@ptr,c
  1076  0019C0  0E00               	movlw	high _buffer2
  1077  0019C2  6E0A               	movwf	lcd_putrs@ptr+1,c
  1078  0019C4  EC39  F00E         	call	_lcd_putrs	;wreg free
  1079                           
  1080                           ;lcd_vision.c: 14: sprintf(buffer2,"%02u:%02u",hora,minuto);
  1081  0019C8  0E78               	movlw	low _buffer2
  1082  0019CA  6E0D               	movwf	sprintf@sp,c
  1083  0019CC  0E00               	movlw	high _buffer2
  1084  0019CE  6E0E               	movwf	sprintf@sp+1,c
  1085  0019D0  0E61               	movlw	low STR_21
  1086  0019D2  6E0F               	movwf	sprintf@f,c
  1087  0019D4  0E0F               	movlw	high STR_21
  1088  0019D6  6E10               	movwf	sprintf@f+1,c
  1089  0019D8  C056  F011         	movff	_hora,?_sprintf+4
  1090  0019DC  C057  F012         	movff	_hora+1,?_sprintf+5
  1091  0019E0  C05A  F013         	movff	_minuto,?_sprintf+6
  1092  0019E4  C05B  F014         	movff	_minuto+1,?_sprintf+7
  1093  0019E8  EC39  F009         	call	_sprintf	;wreg free
  1094                           
  1095                           ;lcd_vision.c: 15: lcd_gotoxy(1,2);
  1096  0019EC  0E02               	movlw	2
  1097  0019EE  6E05               	movwf	lcd_gotoxy@y,c
  1098  0019F0  0E01               	movlw	1
  1099  0019F2  EC22  F00F         	call	_lcd_gotoxy
  1100                           
  1101                           ;lcd_vision.c: 16: lcd_putrs(buffer2);
  1102  0019F6  0E78               	movlw	low _buffer2
  1103  0019F8  6E09               	movwf	lcd_putrs@ptr,c
  1104  0019FA  0E00               	movlw	high _buffer2
  1105  0019FC  6E0A               	movwf	lcd_putrs@ptr+1,c
  1106  0019FE  EC39  F00E         	call	_lcd_putrs	;wreg free
  1107  001A02  0012               	return		;funcret
  1108  001A04                     __end_of_write_Date:
  1109                           	opt stack 0
  1110                           tblptru	equ	0xFF8
  1111                           tblptrh	equ	0xFF7
  1112                           tblptrl	equ	0xFF6
  1113                           tablat	equ	0xFF5
  1114                           postinc0	equ	0xFEE
  1115                           wreg	equ	0xFE8
  1116                           postdec1	equ	0xFE5
  1117                           fsr1l	equ	0xFE1
  1118                           status	equ	0xFD8
  1119                           
  1120 ;; *************** function _twinkle *****************
  1121 ;; Defined at:
  1122 ;;		line 28 in file "lcd_vision.c"
  1123 ;; Parameters:    Size  Location     Type
  1124 ;;		None
  1125 ;; Auto vars:     Size  Location     Type
  1126 ;;  input           1   36[COMRAM] unsigned char 
  1127 ;; Return value:  Size  Location     Type
  1128 ;;		None               void
  1129 ;; Registers used:
  1130 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1131 ;; Tracked objects:
  1132 ;;		On entry : 0/0
  1133 ;;		On exit  : 0/0
  1134 ;;		Unchanged: 0/0
  1135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1137 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1139 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1140 ;;Total ram usage:        1 bytes
  1141 ;; Hardware stack levels used:    1
  1142 ;; Hardware stack levels required when called:    6
  1143 ;; This function calls:
  1144 ;;		__delay_s
  1145 ;;		_lcd_gotoxy
  1146 ;;		_lcd_putrs
  1147 ;;		_read_keyboard
  1148 ;; This function is called by:
  1149 ;;		_set_vision
  1150 ;; This function uses a non-reentrant model
  1151 ;;
  1152                           
  1153                           	psect	text3
  1154  001B60                     __ptext3:
  1155                           	opt stack 0
  1156  001B60                     _twinkle:
  1157                           	opt stack 23
  1158                           
  1159                           ;lcd_vision.c: 29: char input = 1;
  1160                           
  1161                           ;incstack = 0
  1162  001B60  0E01               	movlw	1
  1163  001B62  D024               	goto	L1
  1164  001B64                     l2747:
  1165                           
  1166                           ;lcd_vision.c: 32: _delay_s(500);
  1167  001B64  0E01               	movlw	1
  1168  001B66  6E0A               	movwf	__delay_s@millis+1,c
  1169  001B68  0EF4               	movlw	244
  1170  001B6A  6E09               	movwf	__delay_s@millis,c
  1171  001B6C  EC0D  F00E         	call	__delay_s	;wreg free
  1172                           
  1173                           ;lcd_vision.c: 33: lcd_gotoxy(7,2);
  1174  001B70  0E02               	movlw	2
  1175  001B72  6E05               	movwf	lcd_gotoxy@y,c
  1176  001B74  0E07               	movlw	7
  1177  001B76  EC22  F00F         	call	_lcd_gotoxy
  1178                           
  1179                           ;lcd_vision.c: 34: lcd_putrs("WARNING!!!");
  1180  001B7A  0E4C               	movlw	low STR_22
  1181  001B7C  6E09               	movwf	lcd_putrs@ptr,c
  1182  001B7E  0E0F               	movlw	high STR_22
  1183  001B80  6E0A               	movwf	lcd_putrs@ptr+1,c
  1184  001B82  EC39  F00E         	call	_lcd_putrs	;wreg free
  1185                           
  1186                           ;lcd_vision.c: 35: _delay_s(500);
  1187  001B86  0E01               	movlw	1
  1188  001B88  6E0A               	movwf	__delay_s@millis+1,c
  1189  001B8A  0EF4               	movlw	244
  1190  001B8C  6E09               	movwf	__delay_s@millis,c
  1191  001B8E  EC0D  F00E         	call	__delay_s	;wreg free
  1192                           
  1193                           ;lcd_vision.c: 36: lcd_gotoxy(7,2);
  1194  001B92  0E02               	movlw	2
  1195  001B94  6E05               	movwf	lcd_gotoxy@y,c
  1196  001B96  0E07               	movlw	7
  1197  001B98  EC22  F00F         	call	_lcd_gotoxy
  1198                           
  1199                           ;lcd_vision.c: 37: lcd_putrs("          ");
  1200  001B9C  0E25               	movlw	low (STR_1+22)
  1201  001B9E  6E09               	movwf	lcd_putrs@ptr,c
  1202  001BA0  0E0F               	movlw	high (STR_1+22)
  1203  001BA2  6E0A               	movwf	lcd_putrs@ptr+1,c
  1204  001BA4  EC39  F00E         	call	_lcd_putrs	;wreg free
  1205                           
  1206                           ;lcd_vision.c: 38: input = read_keyboard();
  1207  001BA8  ECCA  F007         	call	_read_keyboard	;wreg free
  1208  001BAC                     L1:
  1209  001BAC  6E25               	movwf	twinkle@input,c
  1210  001BAE  D000               	goto	l2759
  1211  001BB0                     l2759:
  1212  001BB0  0E10               	movlw	16
  1213  001BB2  1825               	xorwf	twinkle@input,w,c
  1214  001BB4  A4D8               	btfss	status,2,c
  1215  001BB6  D7D6               	goto	l2747
  1216                           
  1217                           ;lcd_vision.c: 39: }
  1218                           ;lcd_vision.c: 42: state_alarm = ACTIVE;
  1219  001BB8  0E00               	movlw	0
  1220  001BBA  6E5C               	movwf	_state_alarm,c
  1221  001BBC  0012               	return		;funcret
  1222  001BBE                     __end_of_twinkle:
  1223                           	opt stack 0
  1224                           tblptru	equ	0xFF8
  1225                           tblptrh	equ	0xFF7
  1226                           tblptrl	equ	0xFF6
  1227                           tablat	equ	0xFF5
  1228                           postinc0	equ	0xFEE
  1229                           wreg	equ	0xFE8
  1230                           postdec1	equ	0xFE5
  1231                           fsr1l	equ	0xFE1
  1232                           status	equ	0xFD8
  1233                           
  1234 ;; *************** function _read_keyboard *****************
  1235 ;; Defined at:
  1236 ;;		line 4 in file "keyboard.c"
  1237 ;; Parameters:    Size  Location     Type
  1238 ;;		None
  1239 ;; Auto vars:     Size  Location     Type
  1240 ;;		None
  1241 ;; Return value:  Size  Location     Type
  1242 ;;                  1    wreg      unsigned char 
  1243 ;; Registers used:
  1244 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1245 ;; Tracked objects:
  1246 ;;		On entry : 0/0
  1247 ;;		On exit  : 0/0
  1248 ;;		Unchanged: 0/0
  1249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1251 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1252 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1253 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1254 ;;Total ram usage:        1 bytes
  1255 ;; Hardware stack levels used:    1
  1256 ;; Hardware stack levels required when called:    5
  1257 ;; This function calls:
  1258 ;;		_lcd_putrs
  1259 ;;		_sprintf
  1260 ;; This function is called by:
  1261 ;;		_main
  1262 ;;		_twinkle
  1263 ;; This function uses a non-reentrant model
  1264 ;;
  1265                           
  1266                           	psect	text4
  1267  000F94                     __ptext4:
  1268                           	opt stack 0
  1269  000F94                     _read_keyboard:
  1270                           	opt stack 23
  1271                           
  1272                           ;keyboard.c: 5: LATAbits.LATA0=1;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=0;
  1273                           
  1274                           ;incstack = 0
  1275  000F94  8089               	bsf	3977,0,c	;volatile
  1276  000F96  9289               	bcf	3977,1,c	;volatile
  1277  000F98  9489               	bcf	3977,2,c	;volatile
  1278  000F9A  9689               	bcf	3977,3,c	;volatile
  1279                           
  1280                           ;keyboard.c: 6: {
  1281                           ;keyboard.c: 7: if (PORTAbits.RA5==1){key=1;sprintf(buffer2,"%01u",key);lcd_putrs(buffer
      +                          2);while(PORTAbits.RA5==1){};}
  1282  000F9C  AA80               	btfss	3968,5,c	;volatile
  1283  000F9E  D018               	goto	l201
  1284  000FA0  0E01               	movlw	1
  1285  000FA2  6E3A               	movwf	_key,c
  1286  000FA4  0E78               	movlw	low _buffer2
  1287  000FA6  6E0D               	movwf	sprintf@sp,c
  1288  000FA8  0E00               	movlw	high _buffer2
  1289  000FAA  6E0E               	movwf	sprintf@sp+1,c
  1290  000FAC  0E7D               	movlw	low STR_4
  1291  000FAE  6E0F               	movwf	sprintf@f,c
  1292  000FB0  0E0F               	movlw	high STR_4
  1293  000FB2  6E10               	movwf	sprintf@f+1,c
  1294  000FB4  C03A  F011         	movff	_key,?_sprintf+4
  1295  000FB8  6A12               	clrf	?_sprintf+5,c
  1296  000FBA  EC39  F009         	call	_sprintf	;wreg free
  1297  000FBE  0E78               	movlw	low _buffer2
  1298  000FC0  6E09               	movwf	lcd_putrs@ptr,c
  1299  000FC2  0E00               	movlw	high _buffer2
  1300  000FC4  6E0A               	movwf	lcd_putrs@ptr+1,c
  1301  000FC6  EC39  F00E         	call	_lcd_putrs	;wreg free
  1302  000FCA  D000               	goto	l202
  1303  000FCC                     l202:
  1304  000FCC  BA80               	btfsc	3968,5,c	;volatile
  1305  000FCE  D7FE               	goto	l202
  1306  000FD0                     l201:
  1307                           
  1308                           ;keyboard.c: 8: if (PORTAbits.RA7==1){key=2;sprintf(buffer2,"%01u",key);lcd_putrs(buffer
      +                          2);while(PORTAbits.RA7==1){};}
  1309  000FD0  AE80               	btfss	3968,7,c	;volatile
  1310  000FD2  D018               	goto	l205
  1311  000FD4  0E02               	movlw	2
  1312  000FD6  6E3A               	movwf	_key,c
  1313  000FD8  0E78               	movlw	low _buffer2
  1314  000FDA  6E0D               	movwf	sprintf@sp,c
  1315  000FDC  0E00               	movlw	high _buffer2
  1316  000FDE  6E0E               	movwf	sprintf@sp+1,c
  1317  000FE0  0E7D               	movlw	low STR_4
  1318  000FE2  6E0F               	movwf	sprintf@f,c
  1319  000FE4  0E0F               	movlw	high STR_4
  1320  000FE6  6E10               	movwf	sprintf@f+1,c
  1321  000FE8  C03A  F011         	movff	_key,?_sprintf+4
  1322  000FEC  6A12               	clrf	?_sprintf+5,c
  1323  000FEE  EC39  F009         	call	_sprintf	;wreg free
  1324  000FF2  0E78               	movlw	low _buffer2
  1325  000FF4  6E09               	movwf	lcd_putrs@ptr,c
  1326  000FF6  0E00               	movlw	high _buffer2
  1327  000FF8  6E0A               	movwf	lcd_putrs@ptr+1,c
  1328  000FFA  EC39  F00E         	call	_lcd_putrs	;wreg free
  1329  000FFE  D000               	goto	l206
  1330  001000                     l206:
  1331  001000  BE80               	btfsc	3968,7,c	;volatile
  1332  001002  D7FE               	goto	l206
  1333  001004                     l205:
  1334                           
  1335                           ;keyboard.c: 9: if (PORTAbits.RA6==1){key=3;sprintf(buffer2,"%01u",key);lcd_putrs(buffer
      +                          2);while(PORTAbits.RA6==1){};}
  1336  001004  AC80               	btfss	3968,6,c	;volatile
  1337  001006  D018               	goto	l209
  1338  001008  0E03               	movlw	3
  1339  00100A  6E3A               	movwf	_key,c
  1340  00100C  0E78               	movlw	low _buffer2
  1341  00100E  6E0D               	movwf	sprintf@sp,c
  1342  001010  0E00               	movlw	high _buffer2
  1343  001012  6E0E               	movwf	sprintf@sp+1,c
  1344  001014  0E7D               	movlw	low STR_4
  1345  001016  6E0F               	movwf	sprintf@f,c
  1346  001018  0E0F               	movlw	high STR_4
  1347  00101A  6E10               	movwf	sprintf@f+1,c
  1348  00101C  C03A  F011         	movff	_key,?_sprintf+4
  1349  001020  6A12               	clrf	?_sprintf+5,c
  1350  001022  EC39  F009         	call	_sprintf	;wreg free
  1351  001026  0E78               	movlw	low _buffer2
  1352  001028  6E09               	movwf	lcd_putrs@ptr,c
  1353  00102A  0E00               	movlw	high _buffer2
  1354  00102C  6E0A               	movwf	lcd_putrs@ptr+1,c
  1355  00102E  EC39  F00E         	call	_lcd_putrs	;wreg free
  1356  001032  D000               	goto	l210
  1357  001034                     l210:
  1358  001034  BC80               	btfsc	3968,6,c	;volatile
  1359  001036  D7FE               	goto	l210
  1360  001038                     l209:
  1361                           
  1362                           ;keyboard.c: 10: if (PORTCbits.RC2==1){key=11;lcd_putrs("A");while(PORTCbits.RC2==1){};}
  1363  001038  A482               	btfss	3970,2,c	;volatile
  1364  00103A  D00B               	goto	l213
  1365  00103C  0E0B               	movlw	11
  1366  00103E  6E3A               	movwf	_key,c
  1367  001040  0E8D               	movlw	low STR_7
  1368  001042  6E09               	movwf	lcd_putrs@ptr,c
  1369  001044  0E0F               	movlw	high STR_7
  1370  001046  6E0A               	movwf	lcd_putrs@ptr+1,c
  1371  001048  EC39  F00E         	call	_lcd_putrs	;wreg free
  1372  00104C  D000               	goto	l214
  1373  00104E                     l214:
  1374  00104E  B482               	btfsc	3970,2,c	;volatile
  1375  001050  D7FE               	goto	l214
  1376  001052                     l213:
  1377                           
  1378                           ;keyboard.c: 11: }
  1379                           ;keyboard.c: 12: LATAbits.LATA0=0;LATAbits.LATA1=1;LATAbits.LATA2=0;LATAbits.LATA3=0;
  1380  001052  9089               	bcf	3977,0,c	;volatile
  1381  001054  8289               	bsf	3977,1,c	;volatile
  1382  001056  9489               	bcf	3977,2,c	;volatile
  1383  001058  9689               	bcf	3977,3,c	;volatile
  1384                           
  1385                           ;keyboard.c: 13: {
  1386                           ;keyboard.c: 14: if (PORTAbits.RA5==1){key=4;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA5==1){};}
  1387  00105A  AA80               	btfss	3968,5,c	;volatile
  1388  00105C  D018               	goto	l217
  1389  00105E  0E04               	movlw	4
  1390  001060  6E3A               	movwf	_key,c
  1391  001062  0E78               	movlw	low _buffer2
  1392  001064  6E0D               	movwf	sprintf@sp,c
  1393  001066  0E00               	movlw	high _buffer2
  1394  001068  6E0E               	movwf	sprintf@sp+1,c
  1395  00106A  0E7D               	movlw	low STR_4
  1396  00106C  6E0F               	movwf	sprintf@f,c
  1397  00106E  0E0F               	movlw	high STR_4
  1398  001070  6E10               	movwf	sprintf@f+1,c
  1399  001072  C03A  F011         	movff	_key,?_sprintf+4
  1400  001076  6A12               	clrf	?_sprintf+5,c
  1401  001078  EC39  F009         	call	_sprintf	;wreg free
  1402  00107C  0E78               	movlw	low _buffer2
  1403  00107E  6E09               	movwf	lcd_putrs@ptr,c
  1404  001080  0E00               	movlw	high _buffer2
  1405  001082  6E0A               	movwf	lcd_putrs@ptr+1,c
  1406  001084  EC39  F00E         	call	_lcd_putrs	;wreg free
  1407  001088  D000               	goto	l218
  1408  00108A                     l218:
  1409  00108A  BA80               	btfsc	3968,5,c	;volatile
  1410  00108C  D7FE               	goto	l218
  1411  00108E                     l217:
  1412                           
  1413                           ;keyboard.c: 15: if (PORTAbits.RA7==1){key=5;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  1414  00108E  AE80               	btfss	3968,7,c	;volatile
  1415  001090  D018               	goto	l221
  1416  001092  0E05               	movlw	5
  1417  001094  6E3A               	movwf	_key,c
  1418  001096  0E78               	movlw	low _buffer2
  1419  001098  6E0D               	movwf	sprintf@sp,c
  1420  00109A  0E00               	movlw	high _buffer2
  1421  00109C  6E0E               	movwf	sprintf@sp+1,c
  1422  00109E  0E7D               	movlw	low STR_4
  1423  0010A0  6E0F               	movwf	sprintf@f,c
  1424  0010A2  0E0F               	movlw	high STR_4
  1425  0010A4  6E10               	movwf	sprintf@f+1,c
  1426  0010A6  C03A  F011         	movff	_key,?_sprintf+4
  1427  0010AA  6A12               	clrf	?_sprintf+5,c
  1428  0010AC  EC39  F009         	call	_sprintf	;wreg free
  1429  0010B0  0E78               	movlw	low _buffer2
  1430  0010B2  6E09               	movwf	lcd_putrs@ptr,c
  1431  0010B4  0E00               	movlw	high _buffer2
  1432  0010B6  6E0A               	movwf	lcd_putrs@ptr+1,c
  1433  0010B8  EC39  F00E         	call	_lcd_putrs	;wreg free
  1434  0010BC  D000               	goto	l222
  1435  0010BE                     l222:
  1436  0010BE  BE80               	btfsc	3968,7,c	;volatile
  1437  0010C0  D7FE               	goto	l222
  1438  0010C2                     l221:
  1439                           
  1440                           ;keyboard.c: 16: if (PORTAbits.RA6==1){key=6;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA6==1){};}
  1441  0010C2  AC80               	btfss	3968,6,c	;volatile
  1442  0010C4  D018               	goto	l225
  1443  0010C6  0E06               	movlw	6
  1444  0010C8  6E3A               	movwf	_key,c
  1445  0010CA  0E78               	movlw	low _buffer2
  1446  0010CC  6E0D               	movwf	sprintf@sp,c
  1447  0010CE  0E00               	movlw	high _buffer2
  1448  0010D0  6E0E               	movwf	sprintf@sp+1,c
  1449  0010D2  0E7D               	movlw	low STR_4
  1450  0010D4  6E0F               	movwf	sprintf@f,c
  1451  0010D6  0E0F               	movlw	high STR_4
  1452  0010D8  6E10               	movwf	sprintf@f+1,c
  1453  0010DA  C03A  F011         	movff	_key,?_sprintf+4
  1454  0010DE  6A12               	clrf	?_sprintf+5,c
  1455  0010E0  EC39  F009         	call	_sprintf	;wreg free
  1456  0010E4  0E78               	movlw	low _buffer2
  1457  0010E6  6E09               	movwf	lcd_putrs@ptr,c
  1458  0010E8  0E00               	movlw	high _buffer2
  1459  0010EA  6E0A               	movwf	lcd_putrs@ptr+1,c
  1460  0010EC  EC39  F00E         	call	_lcd_putrs	;wreg free
  1461  0010F0  D000               	goto	l226
  1462  0010F2                     l226:
  1463  0010F2  BC80               	btfsc	3968,6,c	;volatile
  1464  0010F4  D7FE               	goto	l226
  1465  0010F6                     l225:
  1466                           
  1467                           ;keyboard.c: 17: if (PORTCbits.RC2==1){key=12;lcd_putrs("B");while(PORTCbits.RC2==1){};}
  1468  0010F6  A482               	btfss	3970,2,c	;volatile
  1469  0010F8  D00B               	goto	l229
  1470  0010FA  0E0C               	movlw	12
  1471  0010FC  6E3A               	movwf	_key,c
  1472  0010FE  0E8F               	movlw	low STR_11
  1473  001100  6E09               	movwf	lcd_putrs@ptr,c
  1474  001102  0E0F               	movlw	high STR_11
  1475  001104  6E0A               	movwf	lcd_putrs@ptr+1,c
  1476  001106  EC39  F00E         	call	_lcd_putrs	;wreg free
  1477  00110A  D000               	goto	l230
  1478  00110C                     l230:
  1479  00110C  B482               	btfsc	3970,2,c	;volatile
  1480  00110E  D7FE               	goto	l230
  1481  001110                     l229:
  1482                           
  1483                           ;keyboard.c: 18: }
  1484                           ;keyboard.c: 19: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=1;LATAbits.LATA3=0;
  1485  001110  9089               	bcf	3977,0,c	;volatile
  1486  001112  9289               	bcf	3977,1,c	;volatile
  1487  001114  8489               	bsf	3977,2,c	;volatile
  1488  001116  9689               	bcf	3977,3,c	;volatile
  1489                           
  1490                           ;keyboard.c: 20: {
  1491                           ;keyboard.c: 21: if (PORTAbits.RA5==1){key=7;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA5==1){};}
  1492  001118  AA80               	btfss	3968,5,c	;volatile
  1493  00111A  D018               	goto	l233
  1494  00111C  0E07               	movlw	7
  1495  00111E  6E3A               	movwf	_key,c
  1496  001120  0E78               	movlw	low _buffer2
  1497  001122  6E0D               	movwf	sprintf@sp,c
  1498  001124  0E00               	movlw	high _buffer2
  1499  001126  6E0E               	movwf	sprintf@sp+1,c
  1500  001128  0E7D               	movlw	low STR_4
  1501  00112A  6E0F               	movwf	sprintf@f,c
  1502  00112C  0E0F               	movlw	high STR_4
  1503  00112E  6E10               	movwf	sprintf@f+1,c
  1504  001130  C03A  F011         	movff	_key,?_sprintf+4
  1505  001134  6A12               	clrf	?_sprintf+5,c
  1506  001136  EC39  F009         	call	_sprintf	;wreg free
  1507  00113A  0E78               	movlw	low _buffer2
  1508  00113C  6E09               	movwf	lcd_putrs@ptr,c
  1509  00113E  0E00               	movlw	high _buffer2
  1510  001140  6E0A               	movwf	lcd_putrs@ptr+1,c
  1511  001142  EC39  F00E         	call	_lcd_putrs	;wreg free
  1512  001146  D000               	goto	l234
  1513  001148                     l234:
  1514  001148  BA80               	btfsc	3968,5,c	;volatile
  1515  00114A  D7FE               	goto	l234
  1516  00114C                     l233:
  1517                           
  1518                           ;keyboard.c: 22: if (PORTAbits.RA7==1){key=8;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  1519  00114C  AE80               	btfss	3968,7,c	;volatile
  1520  00114E  D018               	goto	l237
  1521  001150  0E08               	movlw	8
  1522  001152  6E3A               	movwf	_key,c
  1523  001154  0E78               	movlw	low _buffer2
  1524  001156  6E0D               	movwf	sprintf@sp,c
  1525  001158  0E00               	movlw	high _buffer2
  1526  00115A  6E0E               	movwf	sprintf@sp+1,c
  1527  00115C  0E7D               	movlw	low STR_4
  1528  00115E  6E0F               	movwf	sprintf@f,c
  1529  001160  0E0F               	movlw	high STR_4
  1530  001162  6E10               	movwf	sprintf@f+1,c
  1531  001164  C03A  F011         	movff	_key,?_sprintf+4
  1532  001168  6A12               	clrf	?_sprintf+5,c
  1533  00116A  EC39  F009         	call	_sprintf	;wreg free
  1534  00116E  0E78               	movlw	low _buffer2
  1535  001170  6E09               	movwf	lcd_putrs@ptr,c
  1536  001172  0E00               	movlw	high _buffer2
  1537  001174  6E0A               	movwf	lcd_putrs@ptr+1,c
  1538  001176  EC39  F00E         	call	_lcd_putrs	;wreg free
  1539  00117A  D000               	goto	l238
  1540  00117C                     l238:
  1541  00117C  BE80               	btfsc	3968,7,c	;volatile
  1542  00117E  D7FE               	goto	l238
  1543  001180                     l237:
  1544                           
  1545                           ;keyboard.c: 23: if (PORTAbits.RA6==1){key=9;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA6==1){};}
  1546  001180  AC80               	btfss	3968,6,c	;volatile
  1547  001182  D018               	goto	l241
  1548  001184  0E09               	movlw	9
  1549  001186  6E3A               	movwf	_key,c
  1550  001188  0E78               	movlw	low _buffer2
  1551  00118A  6E0D               	movwf	sprintf@sp,c
  1552  00118C  0E00               	movlw	high _buffer2
  1553  00118E  6E0E               	movwf	sprintf@sp+1,c
  1554  001190  0E7D               	movlw	low STR_4
  1555  001192  6E0F               	movwf	sprintf@f,c
  1556  001194  0E0F               	movlw	high STR_4
  1557  001196  6E10               	movwf	sprintf@f+1,c
  1558  001198  C03A  F011         	movff	_key,?_sprintf+4
  1559  00119C  6A12               	clrf	?_sprintf+5,c
  1560  00119E  EC39  F009         	call	_sprintf	;wreg free
  1561  0011A2  0E78               	movlw	low _buffer2
  1562  0011A4  6E09               	movwf	lcd_putrs@ptr,c
  1563  0011A6  0E00               	movlw	high _buffer2
  1564  0011A8  6E0A               	movwf	lcd_putrs@ptr+1,c
  1565  0011AA  EC39  F00E         	call	_lcd_putrs	;wreg free
  1566  0011AE  D000               	goto	l242
  1567  0011B0                     l242:
  1568  0011B0  BC80               	btfsc	3968,6,c	;volatile
  1569  0011B2  D7FE               	goto	l242
  1570  0011B4                     l241:
  1571                           
  1572                           ;keyboard.c: 24: if (PORTCbits.RC2==1){key=13;lcd_putrs("C");while(PORTCbits.RC2==1){};}
  1573  0011B4  A482               	btfss	3970,2,c	;volatile
  1574  0011B6  D00B               	goto	l245
  1575  0011B8  0E0D               	movlw	13
  1576  0011BA  6E3A               	movwf	_key,c
  1577  0011BC  0E91               	movlw	low STR_15
  1578  0011BE  6E09               	movwf	lcd_putrs@ptr,c
  1579  0011C0  0E0F               	movlw	high STR_15
  1580  0011C2  6E0A               	movwf	lcd_putrs@ptr+1,c
  1581  0011C4  EC39  F00E         	call	_lcd_putrs	;wreg free
  1582  0011C8  D000               	goto	l246
  1583  0011CA                     l246:
  1584  0011CA  B482               	btfsc	3970,2,c	;volatile
  1585  0011CC  D7FE               	goto	l246
  1586  0011CE                     l245:
  1587                           
  1588                           ;keyboard.c: 25: }
  1589                           ;keyboard.c: 26: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=1;
  1590  0011CE  9089               	bcf	3977,0,c	;volatile
  1591  0011D0  9289               	bcf	3977,1,c	;volatile
  1592  0011D2  9489               	bcf	3977,2,c	;volatile
  1593  0011D4  8689               	bsf	3977,3,c	;volatile
  1594                           
  1595                           ;keyboard.c: 27: {
  1596                           ;keyboard.c: 28: if (PORTAbits.RA5==1){key=14;lcd_putrs("*");while(PORTAbits.RA5==1){};}
  1597  0011D6  AA80               	btfss	3968,5,c	;volatile
  1598  0011D8  D00B               	goto	l249
  1599  0011DA  0E0E               	movlw	14
  1600  0011DC  6E3A               	movwf	_key,c
  1601  0011DE  0E8B               	movlw	low STR_16
  1602  0011E0  6E09               	movwf	lcd_putrs@ptr,c
  1603  0011E2  0E0F               	movlw	high STR_16
  1604  0011E4  6E0A               	movwf	lcd_putrs@ptr+1,c
  1605  0011E6  EC39  F00E         	call	_lcd_putrs	;wreg free
  1606  0011EA  D000               	goto	l250
  1607  0011EC                     l250:
  1608  0011EC  BA80               	btfsc	3968,5,c	;volatile
  1609  0011EE  D7FE               	goto	l250
  1610  0011F0                     l249:
  1611                           
  1612                           ;keyboard.c: 29: if (PORTAbits.RA7==1){key=0;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  1613  0011F0  AE80               	btfss	3968,7,c	;volatile
  1614  0011F2  D018               	goto	l253
  1615  0011F4  0E00               	movlw	0
  1616  0011F6  6E3A               	movwf	_key,c
  1617  0011F8  0E78               	movlw	low _buffer2
  1618  0011FA  6E0D               	movwf	sprintf@sp,c
  1619  0011FC  0E00               	movlw	high _buffer2
  1620  0011FE  6E0E               	movwf	sprintf@sp+1,c
  1621  001200  0E7D               	movlw	low STR_4
  1622  001202  6E0F               	movwf	sprintf@f,c
  1623  001204  0E0F               	movlw	high STR_4
  1624  001206  6E10               	movwf	sprintf@f+1,c
  1625  001208  C03A  F011         	movff	_key,?_sprintf+4
  1626  00120C  6A12               	clrf	?_sprintf+5,c
  1627  00120E  EC39  F009         	call	_sprintf	;wreg free
  1628  001212  0E78               	movlw	low _buffer2
  1629  001214  6E09               	movwf	lcd_putrs@ptr,c
  1630  001216  0E00               	movlw	high _buffer2
  1631  001218  6E0A               	movwf	lcd_putrs@ptr+1,c
  1632  00121A  EC39  F00E         	call	_lcd_putrs	;wreg free
  1633  00121E  D000               	goto	l254
  1634  001220                     l254:
  1635  001220  BE80               	btfsc	3968,7,c	;volatile
  1636  001222  D7FE               	goto	l254
  1637  001224                     l253:
  1638                           
  1639                           ;keyboard.c: 30: if (PORTAbits.RA6==1){key=15;lcd_putrs("#");while(PORTAbits.RA6==1){};}
  1640  001224  AC80               	btfss	3968,6,c	;volatile
  1641  001226  D00B               	goto	l257
  1642  001228  0E0F               	movlw	15
  1643  00122A  6E3A               	movwf	_key,c
  1644  00122C  0E89               	movlw	low STR_18
  1645  00122E  6E09               	movwf	lcd_putrs@ptr,c
  1646  001230  0E0F               	movlw	high STR_18
  1647  001232  6E0A               	movwf	lcd_putrs@ptr+1,c
  1648  001234  EC39  F00E         	call	_lcd_putrs	;wreg free
  1649  001238  D000               	goto	l258
  1650  00123A                     l258:
  1651  00123A  BC80               	btfsc	3968,6,c	;volatile
  1652  00123C  D7FE               	goto	l258
  1653  00123E                     l257:
  1654                           
  1655                           ;keyboard.c: 31: if (PORTCbits.RC2==1){key=16;lcd_putrs("D");while(PORTCbits.RC2==1){};}
  1656  00123E  A482               	btfss	3970,2,c	;volatile
  1657  001240  D00D               	goto	l2497
  1658  001242  0E10               	movlw	16
  1659  001244  6E3A               	movwf	_key,c
  1660  001246  0E7B               	movlw	low (STR_27+6)
  1661  001248  6E09               	movwf	lcd_putrs@ptr,c
  1662  00124A  0E0F               	movlw	high (STR_27+6)
  1663  00124C  6E0A               	movwf	lcd_putrs@ptr+1,c
  1664  00124E  EC39  F00E         	call	_lcd_putrs	;wreg free
  1665  001252  D000               	goto	l262
  1666  001254                     l262:
  1667  001254  A482               	btfss	3970,2,c	;volatile
  1668  001256  D002               	goto	l2497
  1669  001258  D7FD               	goto	l262
  1670  00125A  D000               	goto	l2497
  1671  00125C                     l2497:
  1672                           
  1673                           ;keyboard.c: 32: }
  1674                           ;keyboard.c: 33: _delay((unsigned long)((98)*(8000000/4000.0)));
  1675  00125C  0EFF               	movlw	255
  1676  00125E  6E24               	movwf	??_read_keyboard& (0+255),c
  1677  001260  0E8A               	movlw	138
  1678  001262                     u2367:
  1679  001262  2EE8               	decfsz	wreg,f,c
  1680  001264  D7FE               	goto	u2367
  1681  001266  2E24               	decfsz	??_read_keyboard& (0+255),f,c
  1682  001268  D7FC               	goto	u2367
  1683  00126A  D000               	nop2	
  1684                           
  1685                           ;keyboard.c: 36: return key;
  1686  00126C  503A               	movf	_key,w,c
  1687  00126E  0012               	return	
  1688  001270  0012               	return		;funcret
  1689  001272                     __end_of_read_keyboard:
  1690                           	opt stack 0
  1691                           tblptru	equ	0xFF8
  1692                           tblptrh	equ	0xFF7
  1693                           tblptrl	equ	0xFF6
  1694                           tablat	equ	0xFF5
  1695                           postinc0	equ	0xFEE
  1696                           wreg	equ	0xFE8
  1697                           postdec1	equ	0xFE5
  1698                           fsr1l	equ	0xFE1
  1699                           status	equ	0xFD8
  1700                           
  1701 ;; *************** function _sprintf *****************
  1702 ;; Defined at:
  1703 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\doprnt.c"
  1704 ;; Parameters:    Size  Location     Type
  1705 ;;  sp              2   12[COMRAM] PTR unsigned char 
  1706 ;;		 -> buffer2(20), 
  1707 ;;  f               2   14[COMRAM] PTR const unsigned char 
  1708 ;;		 -> STR_21(10), STR_20(15), STR_17(5), STR_14(5), 
  1709 ;;		 -> STR_13(5), STR_12(5), STR_10(5), STR_9(5), 
  1710 ;;		 -> STR_8(5), STR_6(5), STR_5(5), STR_4(5), 
  1711 ;; Auto vars:     Size  Location     Type
  1712 ;;  tmpval          4    0        struct .
  1713 ;;  cp              3    0        PTR const unsigned char 
  1714 ;;  width           2   32[COMRAM] int 
  1715 ;;  val             2   29[COMRAM] unsigned int 
  1716 ;;  ap              2   26[COMRAM] PTR void [1]
  1717 ;;		 -> ?_sprintf(2), 
  1718 ;;  len             2    0        unsigned int 
  1719 ;;  c               1   34[COMRAM] char 
  1720 ;;  prec            1   31[COMRAM] char 
  1721 ;;  flag            1   28[COMRAM] unsigned char 
  1722 ;; Return value:  Size  Location     Type
  1723 ;;                  2   12[COMRAM] int 
  1724 ;; Registers used:
  1725 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1726 ;; Tracked objects:
  1727 ;;		On entry : 0/0
  1728 ;;		On exit  : 0/0
  1729 ;;		Unchanged: 0/0
  1730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1731 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1732 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1733 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1734 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1735 ;;Total ram usage:       23 bytes
  1736 ;; Hardware stack levels used:    1
  1737 ;; Hardware stack levels required when called:    1
  1738 ;; This function calls:
  1739 ;;		___lwdiv
  1740 ;;		___lwmod
  1741 ;;		___wmul
  1742 ;;		_isdigit
  1743 ;; This function is called by:
  1744 ;;		_read_keyboard
  1745 ;;		_write_Date
  1746 ;; This function uses a non-reentrant model
  1747 ;;
  1748                           
  1749                           	psect	text5
  1750  001272                     __ptext5:
  1751                           	opt stack 0
  1752  001272                     _sprintf:
  1753                           	opt stack 27
  1754                           
  1755                           ;doprnt.c: 494: va_list ap;
  1756                           ;doprnt.c: 499: signed char c;
  1757                           ;doprnt.c: 501: int width;
  1758                           ;doprnt.c: 506: signed char prec;
  1759                           ;doprnt.c: 508: unsigned char flag;
  1760                           ;doprnt.c: 523: union {
  1761                           ;doprnt.c: 524: unsigned long vd;
  1762                           ;doprnt.c: 525: double integ;
  1763                           ;doprnt.c: 526: } tmpval;
  1764                           ;doprnt.c: 528: unsigned int val;
  1765                           ;doprnt.c: 529: unsigned len;
  1766                           ;doprnt.c: 530: const char * cp;
  1767                           ;doprnt.c: 533: *ap = __va_start();
  1768                           
  1769                           ;incstack = 0
  1770  001272  0E11               	movlw	low (?_sprintf+4)
  1771  001274  6E1B               	movwf	sprintf@ap,c
  1772  001276  0E00               	movlw	high (?_sprintf+4)
  1773  001278  6E1C               	movwf	sprintf@ap+1,c
  1774                           
  1775                           ;doprnt.c: 536: while(c = *f++) {
  1776  00127A  D117               	goto	l2359
  1777  00127C                     l2277:
  1778                           
  1779                           ;doprnt.c: 538: if(c != '%')
  1780  00127C  0E25               	movlw	37
  1781  00127E  1823               	xorwf	sprintf@c,w,c
  1782  001280  B4D8               	btfsc	status,2,c
  1783  001282  D009               	goto	l2283
  1784                           
  1785                           ;doprnt.c: 540: {
  1786                           ;doprnt.c: 541: ((*sp++ = (c)));
  1787  001284  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1788  001288  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1789  00128C  C023  FFDF         	movff	sprintf@c,indf2
  1790  001290  4A0D               	infsnz	sprintf@sp,f,c
  1791  001292  2A0E               	incf	sprintf@sp+1,f,c
  1792                           
  1793                           ;doprnt.c: 542: continue;
  1794  001294  D10A               	goto	l2359
  1795  001296                     l2283:
  1796                           
  1797                           ;doprnt.c: 543: }
  1798                           ;doprnt.c: 546: width = 0;
  1799  001296  0E00               	movlw	0
  1800  001298  6E22               	movwf	sprintf@width+1,c
  1801  00129A  0E00               	movlw	0
  1802  00129C  6E21               	movwf	sprintf@width,c
  1803                           
  1804                           ;doprnt.c: 548: flag = 0;
  1805  00129E  0E00               	movlw	0
  1806  0012A0  6E1D               	movwf	sprintf@flag,c
  1807                           
  1808                           ;doprnt.c: 551: switch(*f) {
  1809                           
  1810                           ;doprnt.c: 550: for(;;) {
  1811  0012A2  D005               	goto	l2289
  1812  0012A4                     l2285:
  1813                           
  1814                           ;doprnt.c: 580: flag |= 0x04;
  1815  0012A4  841D               	bsf	sprintf@flag,2,c
  1816                           
  1817                           ;doprnt.c: 581: f++;
  1818  0012A6  4A0F               	infsnz	sprintf@f,f,c
  1819  0012A8  2A10               	incf	sprintf@f+1,f,c
  1820                           
  1821                           ;doprnt.c: 582: continue;
  1822  0012AA  D001               	goto	l2289
  1823                           
  1824                           ;doprnt.c: 584: }
  1825  0012AC  D00B               	goto	l2291
  1826  0012AE                     l2289:
  1827  0012AE  C00F  FFF6         	movff	sprintf@f,tblptrl
  1828  0012B2  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1829  0012B6                     	if	0	;tblptru may be non-zero
  1830  0012B6                     	endif
  1831  0012B6                     	if	0	;tblptru may be non-zero
  1832  0012B6                     	endif
  1833  0012B6  0008               	tblrd		*
  1834  0012B8  50F5               	movf	tablat,w,c
  1835                           
  1836                           ; Switch size 1, requested type "space"
  1837                           ; Number of cases is 1, Range of values is 48 to 48
  1838                           ; switch strategies available:
  1839                           ; Name         Instructions Cycles
  1840                           ; simple_byte            4     3 (average)
  1841                           ;	Chosen strategy is simple_byte
  1842  0012BA  0A30               	xorlw	48	; case 48
  1843  0012BC  B4D8               	btfsc	status,2,c
  1844  0012BE  D7F2               	goto	l2285
  1845                           
  1846                           ;doprnt.c: 585: break;
  1847  0012C0  D001               	goto	l2291
  1848                           
  1849                           ;doprnt.c: 586: }
  1850  0012C2  D7F5               	goto	l2289
  1851  0012C4                     l2291:
  1852                           
  1853                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1854  0012C4  C00F  FFF6         	movff	sprintf@f,tblptrl
  1855  0012C8  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1856  0012CC                     	if	0	;tblptru may be non-zero
  1857  0012CC                     	endif
  1858  0012CC                     	if	0	;tblptru may be non-zero
  1859  0012CC                     	endif
  1860  0012CC  0008               	tblrd		*
  1861  0012CE  50F5               	movf	tablat,w,c
  1862  0012D0  EC34  F00F         	call	_isdigit
  1863  0012D4  A0D8               	btfss	status,0,c
  1864  0012D6  D03A               	goto	l2307
  1865                           
  1866                           ;doprnt.c: 598: width = 0;
  1867  0012D8  0E00               	movlw	0
  1868  0012DA  6E22               	movwf	sprintf@width+1,c
  1869  0012DC  0E00               	movlw	0
  1870  0012DE  6E21               	movwf	sprintf@width,c
  1871  0012E0  D000               	goto	l2295
  1872  0012E2                     l2295:
  1873                           
  1874                           ;doprnt.c: 600: width *= 10;
  1875  0012E2  C021  F001         	movff	sprintf@width,___wmul@multiplier
  1876  0012E6  C022  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  1877  0012EA  0E00               	movlw	0
  1878  0012EC  6E04               	movwf	___wmul@multiplicand+1,c
  1879  0012EE  0E0A               	movlw	10
  1880  0012F0  6E03               	movwf	___wmul@multiplicand,c
  1881  0012F2  EC0E  F00F         	call	___wmul	;wreg free
  1882  0012F6  C001  F021         	movff	?___wmul,sprintf@width
  1883  0012FA  C002  F022         	movff	?___wmul+1,sprintf@width+1
  1884                           
  1885                           ;doprnt.c: 601: width += *f++ - '0';
  1886  0012FE  0ED0               	movlw	208
  1887  001300  6E17               	movwf	??_sprintf& (0+255),c
  1888  001302  0EFF               	movlw	255
  1889  001304  6E18               	movwf	(??_sprintf+1)& (0+255),c
  1890  001306  C00F  FFF6         	movff	sprintf@f,tblptrl
  1891  00130A  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1892  00130E                     	if	0	;tblptru may be non-zero
  1893  00130E                     	endif
  1894  00130E                     	if	0	;tblptru may be non-zero
  1895  00130E                     	endif
  1896  00130E  0008               	tblrd		*
  1897  001310  50F5               	movf	tablat,w,c
  1898  001312  6E19               	movwf	(??_sprintf+2)& (0+255),c
  1899  001314  6A1A               	clrf	(??_sprintf+3)& (0+255),c
  1900  001316  5017               	movf	??_sprintf,w,c
  1901  001318  2619               	addwf	??_sprintf+2,f,c
  1902  00131A  5018               	movf	??_sprintf+1,w,c
  1903  00131C  221A               	addwfc	??_sprintf+3,f,c
  1904  00131E  5019               	movf	??_sprintf+2,w,c
  1905  001320  2621               	addwf	sprintf@width,f,c
  1906  001322  501A               	movf	??_sprintf+3,w,c
  1907  001324  2222               	addwfc	sprintf@width+1,f,c
  1908  001326  4A0F               	infsnz	sprintf@f,f,c
  1909  001328  2A10               	incf	sprintf@f+1,f,c
  1910                           
  1911                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1912  00132A  C00F  FFF6         	movff	sprintf@f,tblptrl
  1913  00132E  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1914  001332                     	if	0	;tblptru may be non-zero
  1915  001332                     	endif
  1916  001332                     	if	0	;tblptru may be non-zero
  1917  001332                     	endif
  1918  001332  0008               	tblrd		*
  1919  001334  50F5               	movf	tablat,w,c
  1920  001336  EC34  F00F         	call	_isdigit
  1921  00133A  A0D8               	btfss	status,0,c
  1922  00133C  D007               	goto	l2307
  1923  00133E  D7D1               	goto	l2295
  1924                           
  1925                           ;doprnt.c: 608: }
  1926                           ;doprnt.c: 635: switch(c = *f++) {
  1927  001340  D005               	goto	l2307
  1928                           
  1929                           ;doprnt.c: 638: goto alldone;
  1930                           
  1931                           ;doprnt.c: 637: case 0:
  1932  001342  D0C1               	goto	l2361
  1933                           
  1934                           ;doprnt.c: 813: continue;
  1935                           
  1936                           ;doprnt.c: 802: default:
  1937  001344  D0B2               	goto	l2359
  1938  001346                     l2303:
  1939                           
  1940                           ;doprnt.c: 818: flag |= 0xC0;
  1941  001346  0EC0               	movlw	192
  1942  001348  121D               	iorwf	sprintf@flag,f,c
  1943                           
  1944                           ;doprnt.c: 822: }
  1945                           
  1946                           ;doprnt.c: 819: break;
  1947  00134A  D011               	goto	l2309
  1948  00134C                     l2307:
  1949  00134C  C00F  FFF6         	movff	sprintf@f,tblptrl
  1950  001350  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1951  001354  4A0F               	infsnz	sprintf@f,f,c
  1952  001356  2A10               	incf	sprintf@f+1,f,c
  1953  001358                     	if	0	;tblptru may be non-zero
  1954  001358                     	endif
  1955  001358                     	if	0	;tblptru may be non-zero
  1956  001358                     	endif
  1957  001358  0008               	tblrd		*
  1958  00135A  CFF5 F023          	movff	tablat,sprintf@c
  1959  00135E  5023               	movf	sprintf@c,w,c
  1960                           
  1961                           ; Switch size 1, requested type "space"
  1962                           ; Number of cases is 2, Range of values is 0 to 117
  1963                           ; switch strategies available:
  1964                           ; Name         Instructions Cycles
  1965                           ; simple_byte            7     4 (average)
  1966                           ;	Chosen strategy is simple_byte
  1967  001360  0A00               	xorlw	0	; case 0
  1968  001362  B4D8               	btfsc	status,2,c
  1969  001364  D0B0               	goto	l2361
  1970  001366  0A75               	xorlw	117	; case 117
  1971  001368  B4D8               	btfsc	status,2,c
  1972  00136A  D7ED               	goto	l2303
  1973  00136C  D09E               	goto	l2359
  1974  00136E                     l2309:
  1975                           
  1976                           ;doprnt.c: 1273: {
  1977                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1978  00136E  C01B  FFD9         	movff	sprintf@ap,fsr2l
  1979  001372  C01C  FFDA         	movff	sprintf@ap+1,fsr2h
  1980  001376  CFDE F01E          	movff	postinc2,sprintf@val
  1981  00137A  CFDD F01F          	movff	postdec2,sprintf@val+1
  1982  00137E  0E02               	movlw	2
  1983  001380  261B               	addwf	sprintf@ap,f,c
  1984  001382  0E00               	movlw	0
  1985  001384  221C               	addwfc	sprintf@ap+1,f,c
  1986                           
  1987                           ;doprnt.c: 1287: }
  1988                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1989  001386  0E01               	movlw	1
  1990  001388  6E23               	movwf	sprintf@c,c
  1991  00138A                     l2315:
  1992  00138A  0E05               	movlw	5
  1993  00138C  1823               	xorwf	sprintf@c,w,c
  1994  00138E  B4D8               	btfsc	status,2,c
  1995  001390  D016               	goto	l2327
  1996  001392  D001               	goto	l2319
  1997  001394  D014               	goto	l2327
  1998  001396                     l2319:
  1999                           
  2000                           ;doprnt.c: 1306: if(val < dpowers[c])
  2001  001396  5023               	movf	sprintf@c,w,c
  2002  001398  0D02               	mullw	2
  2003  00139A  0E01               	movlw	low _dpowers
  2004  00139C  24F3               	addwf	prodl,w,c
  2005  00139E  6EF6               	movwf	tblptrl,c
  2006  0013A0  0E0F               	movlw	high _dpowers
  2007  0013A2  20F4               	addwfc	prodh,w,c
  2008  0013A4  6EF7               	movwf	tblptrh,c
  2009  0013A6                     	if	0	;There are less than 3 active tblptr bytes
  2010  0013A6                     	endif
  2011  0013A6  0009               	tblrd		*+
  2012  0013A8  50F5               	movf	tablat,w,c
  2013  0013AA  5C1E               	subwf	sprintf@val,w,c
  2014  0013AC  0009               	tblrd		*+
  2015  0013AE  50F5               	movf	tablat,w,c
  2016  0013B0  581F               	subwfb	sprintf@val+1,w,c
  2017  0013B2  A0D8               	btfss	status,0,c
  2018  0013B4  D004               	goto	l2327
  2019  0013B6  D001               	goto	l2323
  2020                           
  2021                           ;doprnt.c: 1307: break;
  2022  0013B8  D002               	goto	l2327
  2023  0013BA                     l2323:
  2024  0013BA  2A23               	incf	sprintf@c,f,c
  2025  0013BC  D7E6               	goto	l2315
  2026  0013BE                     l2327:
  2027                           
  2028                           ;doprnt.c: 1381: if(width > c)
  2029  0013BE  0E80               	movlw	128
  2030  0013C0  BE23               	btfsc	sprintf@c,7,c
  2031  0013C2  0E7F               	movlw	127
  2032  0013C4  6E17               	movwf	??_sprintf& (0+255),c
  2033  0013C6  5021               	movf	sprintf@width,w,c
  2034  0013C8  5C23               	subwf	sprintf@c,w,c
  2035  0013CA  5022               	movf	sprintf@width+1,w,c
  2036  0013CC  0A80               	xorlw	128
  2037  0013CE  5817               	subwfb	??_sprintf& (0+255),w,c
  2038  0013D0  B0D8               	btfsc	status,0,c
  2039  0013D2  D007               	goto	l2331
  2040                           
  2041                           ;doprnt.c: 1382: width -= c;
  2042  0013D4  5023               	movf	sprintf@c,w,c
  2043  0013D6  5E21               	subwf	sprintf@width,f,c
  2044  0013D8  0E00               	movlw	0
  2045  0013DA  BE23               	btfsc	sprintf@c,7,c
  2046  0013DC  0EFF               	movlw	255
  2047  0013DE  5A22               	subwfb	sprintf@width+1,f,c
  2048  0013E0  D005               	goto	l2333
  2049  0013E2                     l2331:
  2050                           
  2051                           ;doprnt.c: 1383: else
  2052                           ;doprnt.c: 1384: width = 0;
  2053  0013E2  0E00               	movlw	0
  2054  0013E4  6E22               	movwf	sprintf@width+1,c
  2055  0013E6  0E00               	movlw	0
  2056  0013E8  6E21               	movwf	sprintf@width,c
  2057  0013EA  D000               	goto	l2333
  2058  0013EC                     l2333:
  2059                           
  2060                           ;doprnt.c: 1387: if(flag & 0x04) {
  2061  0013EC  A41D               	btfss	sprintf@flag,2,c
  2062  0013EE  D015               	goto	l2343
  2063                           
  2064                           ;doprnt.c: 1415: if(width)
  2065  0013F0  5021               	movf	sprintf@width,w,c
  2066  0013F2  1022               	iorwf	sprintf@width+1,w,c
  2067  0013F4  B4D8               	btfsc	status,2,c
  2068  0013F6  D026               	goto	l622
  2069  0013F8                     l2337:
  2070                           
  2071                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  2072  0013F8  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2073  0013FC  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2074  001400  0E30               	movlw	48
  2075  001402  6EDF               	movwf	indf2,c
  2076  001404  4A0D               	infsnz	sprintf@sp,f,c
  2077  001406  2A0E               	incf	sprintf@sp+1,f,c
  2078                           
  2079                           ;doprnt.c: 1418: while(--width);
  2080  001408  0621               	decf	sprintf@width,f,c
  2081  00140A  A0D8               	btfss	status,0,c
  2082  00140C  0622               	decf	sprintf@width+1,f,c
  2083  00140E  5021               	movf	sprintf@width,w,c
  2084  001410  1022               	iorwf	sprintf@width+1,w,c
  2085  001412  B4D8               	btfsc	status,2,c
  2086  001414  D017               	goto	l622
  2087  001416  D7F0               	goto	l2337
  2088                           
  2089                           ;doprnt.c: 1420: } else
  2090  001418  D015               	goto	l622
  2091  00141A                     l2343:
  2092                           
  2093                           ;doprnt.c: 1422: {
  2094                           ;doprnt.c: 1424: if(width
  2095                           ;doprnt.c: 1428: )
  2096  00141A  5021               	movf	sprintf@width,w,c
  2097  00141C  1022               	iorwf	sprintf@width+1,w,c
  2098  00141E  B4D8               	btfsc	status,2,c
  2099  001420  D011               	goto	l622
  2100  001422                     l2345:
  2101                           
  2102                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  2103  001422  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2104  001426  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2105  00142A  0E20               	movlw	32
  2106  00142C  6EDF               	movwf	indf2,c
  2107  00142E  4A0D               	infsnz	sprintf@sp,f,c
  2108  001430  2A0E               	incf	sprintf@sp+1,f,c
  2109                           
  2110                           ;doprnt.c: 1431: while(--width);
  2111  001432  0621               	decf	sprintf@width,f,c
  2112  001434  A0D8               	btfss	status,0,c
  2113  001436  0622               	decf	sprintf@width+1,f,c
  2114  001438  5021               	movf	sprintf@width,w,c
  2115  00143A  1022               	iorwf	sprintf@width+1,w,c
  2116  00143C  B4D8               	btfsc	status,2,c
  2117  00143E  D002               	goto	l622
  2118  001440  D7F0               	goto	l2345
  2119  001442  D000               	goto	l622
  2120  001444                     l622:
  2121                           
  2122                           ;doprnt.c: 1469: }
  2123                           ;doprnt.c: 1472: prec = c;
  2124  001444  C023  F020         	movff	sprintf@c,sprintf@prec
  2125                           
  2126                           ;doprnt.c: 1474: while(prec--) {
  2127  001448  D02A               	goto	l2357
  2128  00144A                     l2351:
  2129                           
  2130                           ;doprnt.c: 1478: {
  2131                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2132  00144A  5020               	movf	sprintf@prec,w,c
  2133  00144C  0D02               	mullw	2
  2134  00144E  0E01               	movlw	low _dpowers
  2135  001450  24F3               	addwf	prodl,w,c
  2136  001452  6EF6               	movwf	tblptrl,c
  2137  001454  0E0F               	movlw	high _dpowers
  2138  001456  20F4               	addwfc	prodh,w,c
  2139  001458  6EF7               	movwf	tblptrh,c
  2140  00145A                     	if	0	;There are less than 3 active tblptr bytes
  2141  00145A                     	endif
  2142  00145A  0009               	tblrd		*+
  2143  00145C  CFF5 F003          	movff	tablat,___lwdiv@divisor
  2144  001460  000A               	tblrd		*-
  2145  001462  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  2146  001466  C01E  F001         	movff	sprintf@val,___lwdiv@dividend
  2147  00146A  C01F  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  2148  00146E  ECDF  F00D         	call	___lwdiv	;wreg free
  2149  001472  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  2150  001476  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  2151  00147A  0E00               	movlw	0
  2152  00147C  6E0B               	movwf	___lwmod@divisor+1,c
  2153  00147E  0E0A               	movlw	10
  2154  001480  6E0A               	movwf	___lwmod@divisor,c
  2155  001482  EC63  F00E         	call	___lwmod	;wreg free
  2156  001486  5008               	movf	?___lwmod,w,c
  2157  001488  0F30               	addlw	48
  2158  00148A  6E23               	movwf	sprintf@c,c
  2159                           
  2160                           ;doprnt.c: 1523: }
  2161                           ;doprnt.c: 1524: ((*sp++ = (c)));
  2162  00148C  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2163  001490  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2164  001494  C023  FFDF         	movff	sprintf@c,indf2
  2165  001498  4A0D               	infsnz	sprintf@sp,f,c
  2166  00149A  2A0E               	incf	sprintf@sp+1,f,c
  2167  00149C  D000               	goto	l2357
  2168  00149E                     l2357:
  2169  00149E  0620               	decf	sprintf@prec,f,c
  2170  0014A0  2820               	incf	sprintf@prec,w,c
  2171  0014A2  B4D8               	btfsc	status,2,c
  2172  0014A4  D002               	goto	l2359
  2173  0014A6  D7D1               	goto	l2351
  2174  0014A8  D000               	goto	l2359
  2175  0014AA                     l2359:
  2176  0014AA  C00F  FFF6         	movff	sprintf@f,tblptrl
  2177  0014AE  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2178  0014B2  4A0F               	infsnz	sprintf@f,f,c
  2179  0014B4  2A10               	incf	sprintf@f+1,f,c
  2180  0014B6                     	if	0	;tblptru may be non-zero
  2181  0014B6                     	endif
  2182  0014B6                     	if	0	;tblptru may be non-zero
  2183  0014B6                     	endif
  2184  0014B6  0008               	tblrd		*
  2185  0014B8  CFF5 F023          	movff	tablat,sprintf@c
  2186  0014BC  5023               	movf	sprintf@c,w,c
  2187  0014BE  B4D8               	btfsc	status,2,c
  2188  0014C0  D002               	goto	l2361
  2189  0014C2  D6DC               	goto	l2277
  2190  0014C4  D000               	goto	l2361
  2191  0014C6                     l2361:
  2192                           
  2193                           ;doprnt.c: 1538: *sp = 0;
  2194  0014C6  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2195  0014CA  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2196  0014CE  0E00               	movlw	0
  2197  0014D0  6EDF               	movwf	indf2,c
  2198  0014D2  0012               	return	
  2199                           
  2200                           ;doprnt.c: 1540: return 0;
  2201                           ;	Return value of _sprintf is never used
  2202  0014D4  0012               	return		;funcret
  2203  0014D6                     __end_of_sprintf:
  2204                           	opt stack 0
  2205                           tblptru	equ	0xFF8
  2206                           tblptrh	equ	0xFF7
  2207                           tblptrl	equ	0xFF6
  2208                           tablat	equ	0xFF5
  2209                           prodh	equ	0xFF4
  2210                           prodl	equ	0xFF3
  2211                           postinc0	equ	0xFEE
  2212                           wreg	equ	0xFE8
  2213                           postdec1	equ	0xFE5
  2214                           fsr1l	equ	0xFE1
  2215                           indf2	equ	0xFDF
  2216                           postinc2	equ	0xFDE
  2217                           postdec2	equ	0xFDD
  2218                           fsr2h	equ	0xFDA
  2219                           fsr2l	equ	0xFD9
  2220                           status	equ	0xFD8
  2221                           
  2222 ;; *************** function _isdigit *****************
  2223 ;; Defined at:
  2224 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\isdigit.c"
  2225 ;; Parameters:    Size  Location     Type
  2226 ;;  c               1    wreg     unsigned char 
  2227 ;; Auto vars:     Size  Location     Type
  2228 ;;  c               1    2[COMRAM] unsigned char 
  2229 ;; Return value:  Size  Location     Type
  2230 ;;		None               void
  2231 ;; Registers used:
  2232 ;;		wreg, status,2, status,0
  2233 ;; Tracked objects:
  2234 ;;		On entry : 0/0
  2235 ;;		On exit  : 0/0
  2236 ;;		Unchanged: 0/0
  2237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2239 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2240 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2241 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2242 ;;Total ram usage:        3 bytes
  2243 ;; Hardware stack levels used:    1
  2244 ;; This function calls:
  2245 ;;		Nothing
  2246 ;; This function is called by:
  2247 ;;		_sprintf
  2248 ;; This function uses a non-reentrant model
  2249 ;;
  2250                           
  2251                           	psect	text6
  2252  001E68                     __ptext6:
  2253                           	opt stack 0
  2254  001E68                     _isdigit:
  2255                           	opt stack 27
  2256                           
  2257                           ;incstack = 0
  2258                           ;isdigit@c stored from wreg
  2259  001E68  6E03               	movwf	isdigit@c,c
  2260  001E6A  0E00               	movlw	0
  2261  001E6C  6E02               	movwf	_isdigit$2330,c
  2262  001E6E  0E3A               	movlw	58
  2263  001E70  6003               	cpfslt	isdigit@c,c
  2264  001E72  D006               	goto	l2219
  2265  001E74  0E2F               	movlw	47
  2266  001E76  6403               	cpfsgt	isdigit@c,c
  2267  001E78  D003               	goto	l2219
  2268  001E7A  0E01               	movlw	1
  2269  001E7C  6E02               	movwf	_isdigit$2330,c
  2270  001E7E  D000               	goto	l2219
  2271  001E80                     l2219:
  2272  001E80  C002  F001         	movff	_isdigit$2330,??_isdigit
  2273  001E84  3001               	rrcf	??_isdigit,w,c
  2274  001E86  0012               	return	
  2275  001E88  0012               	return		;funcret
  2276  001E8A                     __end_of_isdigit:
  2277                           	opt stack 0
  2278                           tblptru	equ	0xFF8
  2279                           tblptrh	equ	0xFF7
  2280                           tblptrl	equ	0xFF6
  2281                           tablat	equ	0xFF5
  2282                           prodh	equ	0xFF4
  2283                           prodl	equ	0xFF3
  2284                           postinc0	equ	0xFEE
  2285                           wreg	equ	0xFE8
  2286                           postdec1	equ	0xFE5
  2287                           fsr1l	equ	0xFE1
  2288                           indf2	equ	0xFDF
  2289                           postinc2	equ	0xFDE
  2290                           postdec2	equ	0xFDD
  2291                           fsr2h	equ	0xFDA
  2292                           fsr2l	equ	0xFD9
  2293                           status	equ	0xFD8
  2294                           
  2295 ;; *************** function ___wmul *****************
  2296 ;; Defined at:
  2297 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\Umul16.c"
  2298 ;; Parameters:    Size  Location     Type
  2299 ;;  multiplier      2    0[COMRAM] unsigned int 
  2300 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2301 ;; Auto vars:     Size  Location     Type
  2302 ;;  product         2    4[COMRAM] unsigned int 
  2303 ;; Return value:  Size  Location     Type
  2304 ;;                  2    0[COMRAM] unsigned int 
  2305 ;; Registers used:
  2306 ;;		wreg, status,2, status,0, prodl, prodh
  2307 ;; Tracked objects:
  2308 ;;		On entry : 0/0
  2309 ;;		On exit  : 0/0
  2310 ;;		Unchanged: 0/0
  2311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2312 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2313 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2315 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2316 ;;Total ram usage:        6 bytes
  2317 ;; Hardware stack levels used:    1
  2318 ;; This function calls:
  2319 ;;		Nothing
  2320 ;; This function is called by:
  2321 ;;		_sprintf
  2322 ;; This function uses a non-reentrant model
  2323 ;;
  2324                           
  2325                           	psect	text7
  2326  001E1C                     __ptext7:
  2327                           	opt stack 0
  2328  001E1C                     ___wmul:
  2329                           	opt stack 27
  2330                           
  2331                           ;incstack = 0
  2332  001E1C  5001               	movf	___wmul@multiplier,w,c
  2333  001E1E  0203               	mulwf	___wmul@multiplicand,c
  2334  001E20  CFF3 F005          	movff	prodl,___wmul@product
  2335  001E24  CFF4 F006          	movff	prodh,___wmul@product+1
  2336  001E28  5001               	movf	___wmul@multiplier,w,c
  2337  001E2A  0204               	mulwf	___wmul@multiplicand+1,c
  2338  001E2C  50F3               	movf	prodl,w,c
  2339  001E2E  2606               	addwf	___wmul@product+1,f,c
  2340  001E30  5002               	movf	___wmul@multiplier+1,w,c
  2341  001E32  0203               	mulwf	___wmul@multiplicand,c
  2342  001E34  50F3               	movf	prodl,w,c
  2343  001E36  2606               	addwf	___wmul@product+1,f,c
  2344  001E38  C005  F001         	movff	___wmul@product,?___wmul
  2345  001E3C  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2346  001E40  0012               	return	
  2347  001E42  0012               	return		;funcret
  2348  001E44                     __end_of___wmul:
  2349                           	opt stack 0
  2350                           tblptru	equ	0xFF8
  2351                           tblptrh	equ	0xFF7
  2352                           tblptrl	equ	0xFF6
  2353                           tablat	equ	0xFF5
  2354                           prodh	equ	0xFF4
  2355                           prodl	equ	0xFF3
  2356                           postinc0	equ	0xFEE
  2357                           wreg	equ	0xFE8
  2358                           postdec1	equ	0xFE5
  2359                           fsr1l	equ	0xFE1
  2360                           indf2	equ	0xFDF
  2361                           postinc2	equ	0xFDE
  2362                           postdec2	equ	0xFDD
  2363                           fsr2h	equ	0xFDA
  2364                           fsr2l	equ	0xFD9
  2365                           status	equ	0xFD8
  2366                           
  2367 ;; *************** function ___lwmod *****************
  2368 ;; Defined at:
  2369 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lwmod.c"
  2370 ;; Parameters:    Size  Location     Type
  2371 ;;  dividend        2    7[COMRAM] unsigned int 
  2372 ;;  divisor         2    9[COMRAM] unsigned int 
  2373 ;; Auto vars:     Size  Location     Type
  2374 ;;  counter         1   11[COMRAM] unsigned char 
  2375 ;; Return value:  Size  Location     Type
  2376 ;;                  2    7[COMRAM] unsigned int 
  2377 ;; Registers used:
  2378 ;;		wreg, status,2, status,0
  2379 ;; Tracked objects:
  2380 ;;		On entry : 0/0
  2381 ;;		On exit  : 0/0
  2382 ;;		Unchanged: 0/0
  2383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2384 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2385 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2387 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2388 ;;Total ram usage:        5 bytes
  2389 ;; Hardware stack levels used:    1
  2390 ;; This function calls:
  2391 ;;		Nothing
  2392 ;; This function is called by:
  2393 ;;		_sprintf
  2394 ;; This function uses a non-reentrant model
  2395 ;;
  2396                           
  2397                           	psect	text8
  2398  001CC6                     __ptext8:
  2399                           	opt stack 0
  2400  001CC6                     ___lwmod:
  2401                           	opt stack 27
  2402                           
  2403                           ;incstack = 0
  2404  001CC6  500A               	movf	___lwmod@divisor,w,c
  2405  001CC8  100B               	iorwf	___lwmod@divisor+1,w,c
  2406  001CCA  B4D8               	btfsc	status,2,c
  2407  001CCC  D01D               	goto	l1276
  2408  001CCE  0E01               	movlw	1
  2409  001CD0  6E0C               	movwf	___lwmod@counter,c
  2410  001CD2  D005               	goto	l2257
  2411  001CD4                     l2255:
  2412  001CD4  90D8               	bcf	status,0,c
  2413  001CD6  360A               	rlcf	___lwmod@divisor,f,c
  2414  001CD8  360B               	rlcf	___lwmod@divisor+1,f,c
  2415  001CDA  2A0C               	incf	___lwmod@counter,f,c
  2416  001CDC  D000               	goto	l2257
  2417  001CDE                     l2257:
  2418  001CDE  BE0B               	btfsc	___lwmod@divisor+1,7,c
  2419  001CE0  D002               	goto	l2259
  2420  001CE2  D7F8               	goto	l2255
  2421  001CE4  D000               	goto	l2259
  2422  001CE6                     l2259:
  2423  001CE6  500A               	movf	___lwmod@divisor,w,c
  2424  001CE8  5C08               	subwf	___lwmod@dividend,w,c
  2425  001CEA  500B               	movf	___lwmod@divisor+1,w,c
  2426  001CEC  5809               	subwfb	___lwmod@dividend+1,w,c
  2427  001CEE  A0D8               	btfss	status,0,c
  2428  001CF0  D005               	goto	l2263
  2429  001CF2  500A               	movf	___lwmod@divisor,w,c
  2430  001CF4  5E08               	subwf	___lwmod@dividend,f,c
  2431  001CF6  500B               	movf	___lwmod@divisor+1,w,c
  2432  001CF8  5A09               	subwfb	___lwmod@dividend+1,f,c
  2433  001CFA  D000               	goto	l2263
  2434  001CFC                     l2263:
  2435  001CFC  90D8               	bcf	status,0,c
  2436  001CFE  320B               	rrcf	___lwmod@divisor+1,f,c
  2437  001D00  320A               	rrcf	___lwmod@divisor,f,c
  2438  001D02  2E0C               	decfsz	___lwmod@counter,f,c
  2439  001D04  D7F0               	goto	l2259
  2440  001D06  D000               	goto	l1276
  2441  001D08                     l1276:
  2442  001D08  C008  F008         	movff	___lwmod@dividend,?___lwmod
  2443  001D0C  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  2444  001D10  0012               	return		;funcret
  2445  001D12                     __end_of___lwmod:
  2446                           	opt stack 0
  2447                           tblptru	equ	0xFF8
  2448                           tblptrh	equ	0xFF7
  2449                           tblptrl	equ	0xFF6
  2450                           tablat	equ	0xFF5
  2451                           prodh	equ	0xFF4
  2452                           prodl	equ	0xFF3
  2453                           postinc0	equ	0xFEE
  2454                           wreg	equ	0xFE8
  2455                           postdec1	equ	0xFE5
  2456                           fsr1l	equ	0xFE1
  2457                           indf2	equ	0xFDF
  2458                           postinc2	equ	0xFDE
  2459                           postdec2	equ	0xFDD
  2460                           fsr2h	equ	0xFDA
  2461                           fsr2l	equ	0xFD9
  2462                           status	equ	0xFD8
  2463                           
  2464 ;; *************** function ___lwdiv *****************
  2465 ;; Defined at:
  2466 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  2467 ;; Parameters:    Size  Location     Type
  2468 ;;  dividend        2    0[COMRAM] unsigned int 
  2469 ;;  divisor         2    2[COMRAM] unsigned int 
  2470 ;; Auto vars:     Size  Location     Type
  2471 ;;  quotient        2    4[COMRAM] unsigned int 
  2472 ;;  counter         1    6[COMRAM] unsigned char 
  2473 ;; Return value:  Size  Location     Type
  2474 ;;                  2    0[COMRAM] unsigned int 
  2475 ;; Registers used:
  2476 ;;		wreg, status,2, status,0
  2477 ;; Tracked objects:
  2478 ;;		On entry : 0/0
  2479 ;;		On exit  : 0/0
  2480 ;;		Unchanged: 0/0
  2481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2482 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2483 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2485 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2486 ;;Total ram usage:        7 bytes
  2487 ;; Hardware stack levels used:    1
  2488 ;; This function calls:
  2489 ;;		Nothing
  2490 ;; This function is called by:
  2491 ;;		_sprintf
  2492 ;; This function uses a non-reentrant model
  2493 ;;
  2494                           
  2495                           	psect	text9
  2496  001BBE                     __ptext9:
  2497                           	opt stack 0
  2498  001BBE                     ___lwdiv:
  2499                           	opt stack 27
  2500                           
  2501                           ;incstack = 0
  2502  001BBE  0E00               	movlw	0
  2503  001BC0  6E06               	movwf	___lwdiv@quotient+1,c
  2504  001BC2  0E00               	movlw	0
  2505  001BC4  6E05               	movwf	___lwdiv@quotient,c
  2506  001BC6  5003               	movf	___lwdiv@divisor,w,c
  2507  001BC8  1004               	iorwf	___lwdiv@divisor+1,w,c
  2508  001BCA  B4D8               	btfsc	status,2,c
  2509  001BCC  D021               	goto	l1266
  2510  001BCE  0E01               	movlw	1
  2511  001BD0  6E07               	movwf	___lwdiv@counter,c
  2512  001BD2  D005               	goto	l2237
  2513  001BD4                     l2235:
  2514  001BD4  90D8               	bcf	status,0,c
  2515  001BD6  3603               	rlcf	___lwdiv@divisor,f,c
  2516  001BD8  3604               	rlcf	___lwdiv@divisor+1,f,c
  2517  001BDA  2A07               	incf	___lwdiv@counter,f,c
  2518  001BDC  D000               	goto	l2237
  2519  001BDE                     l2237:
  2520  001BDE  BE04               	btfsc	___lwdiv@divisor+1,7,c
  2521  001BE0  D002               	goto	l2239
  2522  001BE2  D7F8               	goto	l2235
  2523  001BE4  D000               	goto	l2239
  2524  001BE6                     l2239:
  2525  001BE6  90D8               	bcf	status,0,c
  2526  001BE8  3605               	rlcf	___lwdiv@quotient,f,c
  2527  001BEA  3606               	rlcf	___lwdiv@quotient+1,f,c
  2528  001BEC  5003               	movf	___lwdiv@divisor,w,c
  2529  001BEE  5C01               	subwf	___lwdiv@dividend,w,c
  2530  001BF0  5004               	movf	___lwdiv@divisor+1,w,c
  2531  001BF2  5802               	subwfb	___lwdiv@dividend+1,w,c
  2532  001BF4  A0D8               	btfss	status,0,c
  2533  001BF6  D006               	goto	l2247
  2534  001BF8  5003               	movf	___lwdiv@divisor,w,c
  2535  001BFA  5E01               	subwf	___lwdiv@dividend,f,c
  2536  001BFC  5004               	movf	___lwdiv@divisor+1,w,c
  2537  001BFE  5A02               	subwfb	___lwdiv@dividend+1,f,c
  2538  001C00  8005               	bsf	___lwdiv@quotient,0,c
  2539  001C02  D000               	goto	l2247
  2540  001C04                     l2247:
  2541  001C04  90D8               	bcf	status,0,c
  2542  001C06  3204               	rrcf	___lwdiv@divisor+1,f,c
  2543  001C08  3203               	rrcf	___lwdiv@divisor,f,c
  2544  001C0A  2E07               	decfsz	___lwdiv@counter,f,c
  2545  001C0C  D7EC               	goto	l2239
  2546  001C0E  D000               	goto	l1266
  2547  001C10                     l1266:
  2548  001C10  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  2549  001C14  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2550  001C18  0012               	return		;funcret
  2551  001C1A                     __end_of___lwdiv:
  2552                           	opt stack 0
  2553                           tblptru	equ	0xFF8
  2554                           tblptrh	equ	0xFF7
  2555                           tblptrl	equ	0xFF6
  2556                           tablat	equ	0xFF5
  2557                           prodh	equ	0xFF4
  2558                           prodl	equ	0xFF3
  2559                           postinc0	equ	0xFEE
  2560                           wreg	equ	0xFE8
  2561                           postdec1	equ	0xFE5
  2562                           fsr1l	equ	0xFE1
  2563                           indf2	equ	0xFDF
  2564                           postinc2	equ	0xFDE
  2565                           postdec2	equ	0xFDD
  2566                           fsr2h	equ	0xFDA
  2567                           fsr2l	equ	0xFD9
  2568                           status	equ	0xFD8
  2569                           
  2570 ;; *************** function _lcd_putrs *****************
  2571 ;; Defined at:
  2572 ;;		line 221 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2573 ;; Parameters:    Size  Location     Type
  2574 ;;  ptr             2    8[COMRAM] PTR const unsigned char 
  2575 ;;		 -> STR_27(8), STR_26(10), STR_25(4), STR_24(3), 
  2576 ;;		 -> STR_23(11), STR_22(11), STR_19(2), STR_18(2), 
  2577 ;;		 -> STR_16(2), STR_15(2), STR_11(2), STR_7(2), 
  2578 ;;		 -> buffer2(20), STR_3(10), STR_2(13), STR_1(33), 
  2579 ;; Auto vars:     Size  Location     Type
  2580 ;;		None
  2581 ;; Return value:  Size  Location     Type
  2582 ;;		None               void
  2583 ;; Registers used:
  2584 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2585 ;; Tracked objects:
  2586 ;;		On entry : 0/0
  2587 ;;		On exit  : 0/0
  2588 ;;		Unchanged: 0/0
  2589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2590 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2591 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2593 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2594 ;;Total ram usage:        2 bytes
  2595 ;; Hardware stack levels used:    1
  2596 ;; Hardware stack levels required when called:    4
  2597 ;; This function calls:
  2598 ;;		_lcd_putc
  2599 ;; This function is called by:
  2600 ;;		_main
  2601 ;;		_read_keyboard
  2602 ;;		_write_Date
  2603 ;;		_twinkle
  2604 ;;		_set_vision
  2605 ;; This function uses a non-reentrant model
  2606 ;;
  2607                           
  2608                           	psect	text10
  2609  001C72                     __ptext10:
  2610                           	opt stack 0
  2611  001C72                     _lcd_putrs:
  2612                           	opt stack 24
  2613                           
  2614                           ;unmc_lcd_216.c: 223: while(*ptr){
  2615                           
  2616                           ;incstack = 0
  2617  001C72  D015               	goto	l2273
  2618  001C74                     l2269:
  2619                           
  2620                           ;unmc_lcd_216.c: 224: lcd_putc(*ptr++);
  2621  001C74  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  2622  001C78  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  2623  001C7C  6AF8               	clrf	tblptru,c
  2624  001C7E  0E0E               	movlw	(high __ramtop+-1)
  2625  001C80  64F7               	cpfsgt	tblptrh,c
  2626  001C82  D003               	bra	u1367
  2627  001C84  0008               	tblrd		*
  2628  001C86  50F5               	movf	tablat,w,c
  2629  001C88  D005               	bra	u1360
  2630  001C8A                     u1367:
  2631  001C8A  CFF6 FFE9          	movff	tblptrl,fsr0l
  2632  001C8E  CFF7 FFEA          	movff	tblptrh,fsr0h
  2633  001C92  50EF               	movf	indf0,w,c
  2634  001C94                     u1360:
  2635  001C94  EC89  F00E         	call	_lcd_putc
  2636  001C98  4A09               	infsnz	lcd_putrs@ptr,f,c
  2637  001C9A  2A0A               	incf	lcd_putrs@ptr+1,f,c
  2638  001C9C  D000               	goto	l2273
  2639  001C9E                     l2273:
  2640  001C9E  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  2641  001CA2  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  2642  001CA6  6AF8               	clrf	tblptru,c
  2643  001CA8  0E0E               	movlw	(high __ramtop+-1)
  2644  001CAA  64F7               	cpfsgt	tblptrh,c
  2645  001CAC  D003               	bra	u1377
  2646  001CAE  0008               	tblrd		*
  2647  001CB0  50F5               	movf	tablat,w,c
  2648  001CB2  D005               	bra	u1370
  2649  001CB4                     u1377:
  2650  001CB4  CFF6 FFE9          	movff	tblptrl,fsr0l
  2651  001CB8  CFF7 FFEA          	movff	tblptrh,fsr0h
  2652  001CBC  50EF               	movf	indf0,w,c
  2653  001CBE                     u1370:
  2654  001CBE  0900               	iorlw	0
  2655  001CC0  A4D8               	btfss	status,2,c
  2656  001CC2  D7D8               	goto	l2269
  2657  001CC4  0012               	return		;funcret
  2658  001CC6                     __end_of_lcd_putrs:
  2659                           	opt stack 0
  2660                           tblptru	equ	0xFF8
  2661                           tblptrh	equ	0xFF7
  2662                           tblptrl	equ	0xFF6
  2663                           tablat	equ	0xFF5
  2664                           prodh	equ	0xFF4
  2665                           prodl	equ	0xFF3
  2666                           indf0	equ	0xFEF
  2667                           postinc0	equ	0xFEE
  2668                           fsr0h	equ	0xFEA
  2669                           fsr0l	equ	0xFE9
  2670                           wreg	equ	0xFE8
  2671                           postdec1	equ	0xFE5
  2672                           fsr1l	equ	0xFE1
  2673                           indf2	equ	0xFDF
  2674                           postinc2	equ	0xFDE
  2675                           postdec2	equ	0xFDD
  2676                           fsr2h	equ	0xFDA
  2677                           fsr2l	equ	0xFD9
  2678                           status	equ	0xFD8
  2679                           
  2680 ;; *************** function _lcd_putc *****************
  2681 ;; Defined at:
  2682 ;;		line 172 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2683 ;; Parameters:    Size  Location     Type
  2684 ;;  c               1    wreg     unsigned char 
  2685 ;; Auto vars:     Size  Location     Type
  2686 ;;  c               1    7[COMRAM] unsigned char 
  2687 ;; Return value:  Size  Location     Type
  2688 ;;		None               void
  2689 ;; Registers used:
  2690 ;;		wreg, status,2, status,0, cstack
  2691 ;; Tracked objects:
  2692 ;;		On entry : 0/0
  2693 ;;		On exit  : 0/0
  2694 ;;		Unchanged: 0/0
  2695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2697 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2699 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2700 ;;Total ram usage:        1 bytes
  2701 ;; Hardware stack levels used:    1
  2702 ;; Hardware stack levels required when called:    3
  2703 ;; This function calls:
  2704 ;;		_lcd_gotoxy
  2705 ;;		_lcd_send_byte
  2706 ;; This function is called by:
  2707 ;;		_lcd_putrs
  2708 ;;		_lcd_puts
  2709 ;; This function uses a non-reentrant model
  2710 ;;
  2711                           
  2712                           	psect	text11
  2713  001D12                     __ptext11:
  2714                           	opt stack 0
  2715  001D12                     _lcd_putc:
  2716                           	opt stack 24
  2717                           
  2718                           ;incstack = 0
  2719                           ;lcd_putc@c stored from wreg
  2720  001D12  6E08               	movwf	lcd_putc@c,c
  2721                           
  2722                           ;unmc_lcd_216.c: 173: switch(c){
  2723  001D14  D018               	goto	l2209
  2724  001D16                     l2199:
  2725                           
  2726                           ;unmc_lcd_216.c: 175: lcd_send_byte(0,1);
  2727  001D16  0E01               	movlw	1
  2728  001D18  6E03               	movwf	lcd_send_byte@n,c
  2729  001D1A  0E00               	movlw	0
  2730  001D1C  ECF5  F00E         	call	_lcd_send_byte
  2731                           
  2732                           ;unmc_lcd_216.c: 176: break;
  2733  001D20  0012               	return	
  2734  001D22                     l2201:
  2735                           
  2736                           ;unmc_lcd_216.c: 178: lcd_gotoxy(1,2);
  2737  001D22  0E02               	movlw	2
  2738  001D24  6E05               	movwf	lcd_gotoxy@y,c
  2739  001D26  0E01               	movlw	1
  2740  001D28  EC22  F00F         	call	_lcd_gotoxy
  2741                           
  2742                           ;unmc_lcd_216.c: 179: break;
  2743  001D2C  0012               	return	
  2744  001D2E                     l2203:
  2745                           
  2746                           ;unmc_lcd_216.c: 181: lcd_send_byte(0,0x10);
  2747  001D2E  0E10               	movlw	16
  2748  001D30  6E03               	movwf	lcd_send_byte@n,c
  2749  001D32  0E00               	movlw	0
  2750  001D34  ECF5  F00E         	call	_lcd_send_byte
  2751                           
  2752                           ;unmc_lcd_216.c: 182: break;
  2753  001D38  0012               	return	
  2754  001D3A                     l2205:
  2755                           
  2756                           ;unmc_lcd_216.c: 184: lcd_send_byte(1,c);
  2757  001D3A  C008  F003         	movff	lcd_putc@c,lcd_send_byte@n
  2758  001D3E  0E01               	movlw	1
  2759  001D40  ECF5  F00E         	call	_lcd_send_byte
  2760                           
  2761                           ;unmc_lcd_216.c: 186: }
  2762                           
  2763                           ;unmc_lcd_216.c: 185: break;
  2764  001D44  0012               	return	
  2765  001D46                     l2209:
  2766  001D46  5008               	movf	lcd_putc@c,w,c
  2767                           
  2768                           ; Switch size 1, requested type "space"
  2769                           ; Number of cases is 3, Range of values is 8 to 12
  2770                           ; switch strategies available:
  2771                           ; Name         Instructions Cycles
  2772                           ; simple_byte           10     6 (average)
  2773                           ;	Chosen strategy is simple_byte
  2774  001D48  0A08               	xorlw	8	; case 8
  2775  001D4A  B4D8               	btfsc	status,2,c
  2776  001D4C  D7F0               	goto	l2203
  2777  001D4E  0A02               	xorlw	2	; case 10
  2778  001D50  B4D8               	btfsc	status,2,c
  2779  001D52  D7E7               	goto	l2201
  2780  001D54  0A06               	xorlw	6	; case 12
  2781  001D56  B4D8               	btfsc	status,2,c
  2782  001D58  D7DE               	goto	l2199
  2783  001D5A  D7EF               	goto	l2205
  2784  001D5C  0012               	return		;funcret
  2785  001D5E                     __end_of_lcd_putc:
  2786                           	opt stack 0
  2787                           tblptru	equ	0xFF8
  2788                           tblptrh	equ	0xFF7
  2789                           tblptrl	equ	0xFF6
  2790                           tablat	equ	0xFF5
  2791                           prodh	equ	0xFF4
  2792                           prodl	equ	0xFF3
  2793                           indf0	equ	0xFEF
  2794                           postinc0	equ	0xFEE
  2795                           fsr0h	equ	0xFEA
  2796                           fsr0l	equ	0xFE9
  2797                           wreg	equ	0xFE8
  2798                           postdec1	equ	0xFE5
  2799                           fsr1l	equ	0xFE1
  2800                           indf2	equ	0xFDF
  2801                           postinc2	equ	0xFDE
  2802                           postdec2	equ	0xFDD
  2803                           fsr2h	equ	0xFDA
  2804                           fsr2l	equ	0xFD9
  2805                           status	equ	0xFD8
  2806                           
  2807 ;; *************** function _lcd_gotoxy *****************
  2808 ;; Defined at:
  2809 ;;		line 158 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2810 ;; Parameters:    Size  Location     Type
  2811 ;;  x               1    wreg     unsigned char 
  2812 ;;  y               1    4[COMRAM] unsigned char 
  2813 ;; Auto vars:     Size  Location     Type
  2814 ;;  x               1    5[COMRAM] unsigned char 
  2815 ;;  address         1    6[COMRAM] unsigned char 
  2816 ;; Return value:  Size  Location     Type
  2817 ;;		None               void
  2818 ;; Registers used:
  2819 ;;		wreg, status,2, status,0, cstack
  2820 ;; Tracked objects:
  2821 ;;		On entry : 0/0
  2822 ;;		On exit  : 0/0
  2823 ;;		Unchanged: 0/0
  2824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2825 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2826 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2828 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2829 ;;Total ram usage:        3 bytes
  2830 ;; Hardware stack levels used:    1
  2831 ;; Hardware stack levels required when called:    2
  2832 ;; This function calls:
  2833 ;;		_lcd_send_byte
  2834 ;; This function is called by:
  2835 ;;		_main
  2836 ;;		_lcd_putc
  2837 ;;		_write_Date
  2838 ;;		_twinkle
  2839 ;;		_set_vision
  2840 ;; This function uses a non-reentrant model
  2841 ;;
  2842                           
  2843                           	psect	text12
  2844  001E44                     __ptext12:
  2845                           	opt stack 0
  2846  001E44                     _lcd_gotoxy:
  2847                           	opt stack 24
  2848                           
  2849                           ;incstack = 0
  2850                           ;lcd_gotoxy@x stored from wreg
  2851  001E44  6E06               	movwf	lcd_gotoxy@x,c
  2852                           
  2853                           ;unmc_lcd_216.c: 159: int8 address;
  2854                           ;unmc_lcd_216.c: 161: if(y != 1)
  2855  001E46  0405               	decf	lcd_gotoxy@y,w,c
  2856  001E48  B4D8               	btfsc	status,2,c
  2857  001E4A  D002               	goto	l2191
  2858                           
  2859                           ;unmc_lcd_216.c: 162: address = 0x40;
  2860  001E4C  0E40               	movlw	64
  2861  001E4E  D001               	goto	L2
  2862  001E50                     l2191:
  2863                           
  2864                           ;unmc_lcd_216.c: 163: else
  2865                           ;unmc_lcd_216.c: 164: address=0;
  2866  001E50  0E00               	movlw	0
  2867  001E52                     L2:
  2868  001E52  6E07               	movwf	lcd_gotoxy@address,c
  2869  001E54  D000               	goto	l2193
  2870  001E56                     l2193:
  2871                           
  2872                           ;unmc_lcd_216.c: 166: address += x-1;
  2873  001E56  0406               	decf	lcd_gotoxy@x,w,c
  2874  001E58  2607               	addwf	lcd_gotoxy@address,f,c
  2875                           
  2876                           ;unmc_lcd_216.c: 167: lcd_send_byte(0, 0x80 | address);
  2877  001E5A  5007               	movf	lcd_gotoxy@address,w,c
  2878  001E5C  0980               	iorlw	128
  2879  001E5E  6E03               	movwf	lcd_send_byte@n,c
  2880  001E60  0E00               	movlw	0
  2881  001E62  ECF5  F00E         	call	_lcd_send_byte
  2882  001E66  0012               	return		;funcret
  2883  001E68                     __end_of_lcd_gotoxy:
  2884                           	opt stack 0
  2885                           tblptru	equ	0xFF8
  2886                           tblptrh	equ	0xFF7
  2887                           tblptrl	equ	0xFF6
  2888                           tablat	equ	0xFF5
  2889                           prodh	equ	0xFF4
  2890                           prodl	equ	0xFF3
  2891                           indf0	equ	0xFEF
  2892                           postinc0	equ	0xFEE
  2893                           fsr0h	equ	0xFEA
  2894                           fsr0l	equ	0xFE9
  2895                           wreg	equ	0xFE8
  2896                           postdec1	equ	0xFE5
  2897                           fsr1l	equ	0xFE1
  2898                           indf2	equ	0xFDF
  2899                           postinc2	equ	0xFDE
  2900                           postdec2	equ	0xFDD
  2901                           fsr2h	equ	0xFDA
  2902                           fsr2l	equ	0xFD9
  2903                           status	equ	0xFD8
  2904                           
  2905 ;; *************** function __delay_s *****************
  2906 ;; Defined at:
  2907 ;;		line 19 in file "lcd_vision.c"
  2908 ;; Parameters:    Size  Location     Type
  2909 ;;  millis          2    8[COMRAM] int 
  2910 ;; Auto vars:     Size  Location     Type
  2911 ;;  index           2   13[COMRAM] short 
  2912 ;;  it              2   11[COMRAM] short 
  2913 ;; Return value:  Size  Location     Type
  2914 ;;		None               void
  2915 ;; Registers used:
  2916 ;;		wreg, status,2, status,0, cstack
  2917 ;; Tracked objects:
  2918 ;;		On entry : 0/0
  2919 ;;		On exit  : 0/0
  2920 ;;		Unchanged: 0/0
  2921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2922 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2923 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2924 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2925 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2926 ;;Total ram usage:        7 bytes
  2927 ;; Hardware stack levels used:    1
  2928 ;; Hardware stack levels required when called:    1
  2929 ;; This function calls:
  2930 ;;		___awdiv
  2931 ;; This function is called by:
  2932 ;;		_twinkle
  2933 ;; This function uses a non-reentrant model
  2934 ;;
  2935                           
  2936                           	psect	text13
  2937  001C1A                     __ptext13:
  2938                           	opt stack 0
  2939  001C1A                     __delay_s:
  2940                           	opt stack 27
  2941                           
  2942                           ;lcd_vision.c: 20: short it = millis/100;
  2943                           
  2944                           ;incstack = 0
  2945  001C1A  C009  F001         	movff	__delay_s@millis,___awdiv@dividend
  2946  001C1E  C00A  F002         	movff	__delay_s@millis+1,___awdiv@dividend+1
  2947  001C22  0E00               	movlw	0
  2948  001C24  6E04               	movwf	___awdiv@divisor+1,c
  2949  001C26  0E64               	movlw	100
  2950  001C28  6E03               	movwf	___awdiv@divisor,c
  2951  001C2A  EC38  F00C         	call	___awdiv	;wreg free
  2952  001C2E  C001  F00C         	movff	?___awdiv,__delay_s@it
  2953  001C32  C002  F00D         	movff	?___awdiv+1,__delay_s@it+1
  2954                           
  2955                           ;lcd_vision.c: 21: short index = 1;
  2956  001C36  0E00               	movlw	0
  2957  001C38  6E0F               	movwf	__delay_s@index+1,c
  2958  001C3A  0E01               	movlw	1
  2959  001C3C  6E0E               	movwf	__delay_s@index,c
  2960                           
  2961                           ;lcd_vision.c: 23: for(index = 1; index <= it; index++){
  2962  001C3E  0E00               	movlw	0
  2963  001C40  6E0F               	movwf	__delay_s@index+1,c
  2964  001C42  0E01               	movlw	1
  2965  001C44  6E0E               	movwf	__delay_s@index,c
  2966  001C46  D00A               	goto	l567
  2967  001C48                     l2645:
  2968                           
  2969                           ;lcd_vision.c: 24: _delay((unsigned long)((98)*(8000000/4000.0)));
  2970  001C48  0EFF               	movlw	255
  2971  001C4A  6E0B               	movwf	??__delay_s& (0+255),c
  2972  001C4C  0E8A               	movlw	138
  2973  001C4E                     u2377:
  2974  001C4E  2EE8               	decfsz	wreg,f,c
  2975  001C50  D7FE               	goto	u2377
  2976  001C52  2E0B               	decfsz	??__delay_s& (0+255),f,c
  2977  001C54  D7FC               	goto	u2377
  2978  001C56  D000               	nop2	
  2979  001C58  4A0E               	infsnz	__delay_s@index,f,c
  2980  001C5A  2A0F               	incf	__delay_s@index+1,f,c
  2981  001C5C                     l567:
  2982  001C5C  500E               	movf	__delay_s@index,w,c
  2983  001C5E  5C0C               	subwf	__delay_s@it,w,c
  2984  001C60  500D               	movf	__delay_s@it+1,w,c
  2985  001C62  0A80               	xorlw	128
  2986  001C64  6E0B               	movwf	??__delay_s& (0+255),c
  2987  001C66  500F               	movf	__delay_s@index+1,w,c
  2988  001C68  0A80               	xorlw	128
  2989  001C6A  580B               	subwfb	??__delay_s& (0+255),w,c
  2990  001C6C  B0D8               	btfsc	status,0,c
  2991  001C6E  D7EC               	goto	l2645
  2992  001C70  0012               	return		;funcret
  2993  001C72                     __end_of__delay_s:
  2994                           	opt stack 0
  2995                           tblptru	equ	0xFF8
  2996                           tblptrh	equ	0xFF7
  2997                           tblptrl	equ	0xFF6
  2998                           tablat	equ	0xFF5
  2999                           prodh	equ	0xFF4
  3000                           prodl	equ	0xFF3
  3001                           indf0	equ	0xFEF
  3002                           postinc0	equ	0xFEE
  3003                           fsr0h	equ	0xFEA
  3004                           fsr0l	equ	0xFE9
  3005                           wreg	equ	0xFE8
  3006                           postdec1	equ	0xFE5
  3007                           fsr1l	equ	0xFE1
  3008                           indf2	equ	0xFDF
  3009                           postinc2	equ	0xFDE
  3010                           postdec2	equ	0xFDD
  3011                           fsr2h	equ	0xFDA
  3012                           fsr2l	equ	0xFD9
  3013                           status	equ	0xFD8
  3014                           
  3015 ;; *************** function _clear *****************
  3016 ;; Defined at:
  3017 ;;		line 5 in file "lcd_vision.c"
  3018 ;; Parameters:    Size  Location     Type
  3019 ;;		None
  3020 ;; Auto vars:     Size  Location     Type
  3021 ;;		None
  3022 ;; Return value:  Size  Location     Type
  3023 ;;		None               void
  3024 ;; Registers used:
  3025 ;;		wreg, status,2, status,0, cstack
  3026 ;; Tracked objects:
  3027 ;;		On entry : 0/0
  3028 ;;		On exit  : 0/0
  3029 ;;		Unchanged: 0/0
  3030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3033 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3034 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3035 ;;Total ram usage:        1 bytes
  3036 ;; Hardware stack levels used:    1
  3037 ;; Hardware stack levels required when called:    3
  3038 ;; This function calls:
  3039 ;;		_lcd_comand
  3040 ;; This function is called by:
  3041 ;;		_set_vision
  3042 ;; This function uses a non-reentrant model
  3043 ;;
  3044                           
  3045                           	psect	text14
  3046  001E8A                     __ptext14:
  3047                           	opt stack 0
  3048  001E8A                     _clear:
  3049                           	opt stack 26
  3050                           
  3051                           ;lcd_vision.c: 6: lcd_comand(0b00000001);
  3052                           
  3053                           ;incstack = 0
  3054  001E8A  0E01               	movlw	1
  3055  001E8C  EC6B  F00F         	call	_lcd_comand
  3056                           
  3057                           ;lcd_vision.c: 7: _delay((unsigned long)((5)*(8000000/4000.0)));
  3058  001E90  0E0D               	movlw	13
  3059  001E92  6E06               	movwf	??_clear& (0+255),c
  3060  001E94  0EFC               	movlw	252
  3061  001E96                     u2387:
  3062  001E96  2EE8               	decfsz	wreg,f,c
  3063  001E98  D7FE               	goto	u2387
  3064  001E9A  2E06               	decfsz	??_clear& (0+255),f,c
  3065  001E9C  D7FC               	goto	u2387
  3066  001E9E  0012               	return		;funcret
  3067  001EA0                     __end_of_clear:
  3068                           	opt stack 0
  3069                           tblptru	equ	0xFF8
  3070                           tblptrh	equ	0xFF7
  3071                           tblptrl	equ	0xFF6
  3072                           tablat	equ	0xFF5
  3073                           prodh	equ	0xFF4
  3074                           prodl	equ	0xFF3
  3075                           indf0	equ	0xFEF
  3076                           postinc0	equ	0xFEE
  3077                           fsr0h	equ	0xFEA
  3078                           fsr0l	equ	0xFE9
  3079                           wreg	equ	0xFE8
  3080                           postdec1	equ	0xFE5
  3081                           fsr1l	equ	0xFE1
  3082                           indf2	equ	0xFDF
  3083                           postinc2	equ	0xFDE
  3084                           postdec2	equ	0xFDD
  3085                           fsr2h	equ	0xFDA
  3086                           fsr2l	equ	0xFD9
  3087                           status	equ	0xFD8
  3088                           
  3089 ;; *************** function _caratula *****************
  3090 ;; Defined at:
  3091 ;;		line 31 in file "main.c"
  3092 ;; Parameters:    Size  Location     Type
  3093 ;;		None
  3094 ;; Auto vars:     Size  Location     Type
  3095 ;;		None
  3096 ;; Return value:  Size  Location     Type
  3097 ;;		None               void
  3098 ;; Registers used:
  3099 ;;		wreg, status,2, status,0, cstack
  3100 ;; Tracked objects:
  3101 ;;		On entry : 0/0
  3102 ;;		On exit  : 0/0
  3103 ;;		Unchanged: 0/0
  3104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3108 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3109 ;;Total ram usage:        0 bytes
  3110 ;; Hardware stack levels used:    1
  3111 ;; Hardware stack levels required when called:    3
  3112 ;; This function calls:
  3113 ;;		_lcd_comand
  3114 ;; This function is called by:
  3115 ;;		_main
  3116 ;; This function uses a non-reentrant model
  3117 ;;
  3118                           
  3119                           	psect	text15
  3120  001EF2                     __ptext15:
  3121                           	opt stack 0
  3122  001EF2                     _caratula:
  3123                           	opt stack 27
  3124                           
  3125                           ;main.c: 33: lcd_comand(0b00001100);
  3126                           
  3127                           ;incstack = 0
  3128  001EF2  0E0C               	movlw	12
  3129  001EF4  EC6B  F00F         	call	_lcd_comand
  3130  001EF8  0012               	return		;funcret
  3131  001EFA                     __end_of_caratula:
  3132                           	opt stack 0
  3133                           tblptru	equ	0xFF8
  3134                           tblptrh	equ	0xFF7
  3135                           tblptrl	equ	0xFF6
  3136                           tablat	equ	0xFF5
  3137                           prodh	equ	0xFF4
  3138                           prodl	equ	0xFF3
  3139                           indf0	equ	0xFEF
  3140                           postinc0	equ	0xFEE
  3141                           fsr0h	equ	0xFEA
  3142                           fsr0l	equ	0xFE9
  3143                           wreg	equ	0xFE8
  3144                           postdec1	equ	0xFE5
  3145                           fsr1l	equ	0xFE1
  3146                           indf2	equ	0xFDF
  3147                           postinc2	equ	0xFDE
  3148                           postdec2	equ	0xFDD
  3149                           fsr2h	equ	0xFDA
  3150                           fsr2l	equ	0xFD9
  3151                           status	equ	0xFD8
  3152                           
  3153 ;; *************** function _Setup *****************
  3154 ;; Defined at:
  3155 ;;		line 51 in file "main.c"
  3156 ;; Parameters:    Size  Location     Type
  3157 ;;		None
  3158 ;; Auto vars:     Size  Location     Type
  3159 ;;		None
  3160 ;; Return value:  Size  Location     Type
  3161 ;;		None               void
  3162 ;; Registers used:
  3163 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3164 ;; Tracked objects:
  3165 ;;		On entry : 0/0
  3166 ;;		On exit  : 0/0
  3167 ;;		Unchanged: 0/0
  3168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3172 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3173 ;;Total ram usage:        0 bytes
  3174 ;; Hardware stack levels used:    1
  3175 ;; Hardware stack levels required when called:    3
  3176 ;; This function calls:
  3177 ;;		_Write_RTC
  3178 ;;		_lcd_comand
  3179 ;;		_lcd_init
  3180 ;; This function is called by:
  3181 ;;		_main
  3182 ;; This function uses a non-reentrant model
  3183 ;;
  3184                           
  3185                           	psect	text16
  3186  001D5E                     __ptext16:
  3187                           	opt stack 0
  3188  001D5E                     _Setup:
  3189                           	opt stack 27
  3190                           
  3191                           ;main.c: 53: OSCTUNEbits.INTSRC=1;
  3192                           
  3193                           ;incstack = 0
  3194  001D5E  8E9B               	bsf	3995,7,c	;volatile
  3195                           
  3196                           ;main.c: 54: OSCTUNEbits.PLLEN=0;
  3197  001D60  9C9B               	bcf	3995,6,c	;volatile
  3198                           
  3199                           ;main.c: 55: OSCCONbits.IRCF0=1;
  3200  001D62  88D3               	bsf	4051,4,c	;volatile
  3201                           
  3202                           ;main.c: 56: OSCCONbits.IRCF1=1;
  3203  001D64  8AD3               	bsf	4051,5,c	;volatile
  3204                           
  3205                           ;main.c: 57: OSCCONbits.IRCF2=1;
  3206  001D66  8CD3               	bsf	4051,6,c	;volatile
  3207                           
  3208                           ;main.c: 58: OSCCONbits.SCS0=0;
  3209  001D68  90D3               	bcf	4051,0,c	;volatile
  3210                           
  3211                           ;main.c: 59: OSCCONbits.SCS1=0;
  3212  001D6A  92D3               	bcf	4051,1,c	;volatile
  3213                           
  3214                           ;main.c: 60: TRISA = 0b11110000;
  3215  001D6C  0EF0               	movlw	240
  3216  001D6E  6E92               	movwf	3986,c	;volatile
  3217                           
  3218                           ;main.c: 61: TRISB = 0;
  3219  001D70  0E00               	movlw	0
  3220  001D72  6E93               	movwf	3987,c	;volatile
  3221                           
  3222                           ;main.c: 62: TRISC = 0b00000111;
  3223  001D74  0E07               	movlw	7
  3224  001D76  6E94               	movwf	3988,c	;volatile
  3225                           
  3226                           ;main.c: 66: ANCON0=0b11111111;
  3227  001D78  010F               	movlb	15	; () banked
  3228  001D7A  6948               	setf	72,b	;volatile
  3229                           
  3230                           ; BSR set to: 15
  3231                           ;main.c: 68: ANCON1=0b11111111;
  3232  001D7C  010F               	movlb	15	; () banked
  3233  001D7E  6949               	setf	73,b	;volatile
  3234                           
  3235                           ;main.c: 69: ADCON0=0b00101101;
  3236  001D80  0E2D               	movlw	45
  3237  001D82  6EC2               	movwf	4034,c	;volatile
  3238                           
  3239                           ;main.c: 70: ADCON1=0b00010000;
  3240  001D84  0E10               	movlw	16
  3241  001D86  6EC1               	movwf	4033,c	;volatile
  3242                           
  3243                           ; BSR set to: 15
  3244                           ;main.c: 71: RTCCFGbits.RTCEN=1;
  3245  001D88  010F               	movlb	15	; () banked
  3246  001D8A  8F3F               	bsf	63,7,b	;volatile
  3247                           
  3248                           ; BSR set to: 15
  3249                           ;main.c: 72: RTCCFGbits.RTCWREN=1;
  3250  001D8C  010F               	movlb	15	; () banked
  3251  001D8E  8B3F               	bsf	63,5,b	;volatile
  3252                           
  3253                           ; BSR set to: 15
  3254                           ;main.c: 73: T1CONbits.T1OSCEN=1;
  3255  001D90  86CD               	bsf	4045,3,c	;volatile
  3256                           
  3257                           ; BSR set to: 15
  3258                           ;main.c: 74: Write_RTC();
  3259  001D92  EC6B  F00A         	call	_Write_RTC	;wreg free
  3260                           
  3261                           ;main.c: 75: lcd_init();
  3262  001D96  EC83  F00C         	call	_lcd_init	;wreg free
  3263                           
  3264                           ;main.c: 76: lcd_comand(0b00001100);
  3265  001D9A  0E0C               	movlw	12
  3266  001D9C  EC6B  F00F         	call	_lcd_comand
  3267                           
  3268                           ;main.c: 77: LATBbits.LATB1 = 1;;
  3269  001DA0  828A               	bsf	3978,1,c	;volatile
  3270                           
  3271                           ;main.c: 78: LATBbits.LATB0 = 1;;
  3272  001DA2  808A               	bsf	3978,0,c	;volatile
  3273  001DA4  0012               	return		;funcret
  3274  001DA6                     __end_of_Setup:
  3275                           	opt stack 0
  3276                           tblptru	equ	0xFF8
  3277                           tblptrh	equ	0xFF7
  3278                           tblptrl	equ	0xFF6
  3279                           tablat	equ	0xFF5
  3280                           prodh	equ	0xFF4
  3281                           prodl	equ	0xFF3
  3282                           indf0	equ	0xFEF
  3283                           postinc0	equ	0xFEE
  3284                           fsr0h	equ	0xFEA
  3285                           fsr0l	equ	0xFE9
  3286                           wreg	equ	0xFE8
  3287                           postdec1	equ	0xFE5
  3288                           fsr1l	equ	0xFE1
  3289                           indf2	equ	0xFDF
  3290                           postinc2	equ	0xFDE
  3291                           postdec2	equ	0xFDD
  3292                           fsr2h	equ	0xFDA
  3293                           fsr2l	equ	0xFD9
  3294                           status	equ	0xFD8
  3295                           
  3296 ;; *************** function _lcd_init *****************
  3297 ;; Defined at:
  3298 ;;		line 119 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3299 ;; Parameters:    Size  Location     Type
  3300 ;;		None
  3301 ;; Auto vars:     Size  Location     Type
  3302 ;;  i               1    4[COMRAM] unsigned char 
  3303 ;; Return value:  Size  Location     Type
  3304 ;;		None               void
  3305 ;; Registers used:
  3306 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3307 ;; Tracked objects:
  3308 ;;		On entry : 0/0
  3309 ;;		On exit  : 0/0
  3310 ;;		Unchanged: 0/0
  3311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3313 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3315 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3316 ;;Total ram usage:        1 bytes
  3317 ;; Hardware stack levels used:    1
  3318 ;; Hardware stack levels required when called:    2
  3319 ;; This function calls:
  3320 ;;		_Delay1KTCYx
  3321 ;;		_lcd_send_byte
  3322 ;;		_lcd_send_nibble
  3323 ;; This function is called by:
  3324 ;;		_Setup
  3325 ;; This function uses a non-reentrant model
  3326 ;;
  3327                           
  3328                           	psect	text17
  3329  001906                     __ptext17:
  3330                           	opt stack 0
  3331  001906                     _lcd_init:
  3332                           	opt stack 27
  3333                           
  3334                           ;unmc_lcd_216.c: 120: int8 i;
  3335                           ;unmc_lcd_216.c: 122: TRISBbits.TRISB3=0;
  3336                           
  3337                           ;incstack = 0
  3338  001906  9693               	bcf	3987,3,c	;volatile
  3339                           
  3340                           ;unmc_lcd_216.c: 123: TRISBbits.TRISB2=0;
  3341  001908  9493               	bcf	3987,2,c	;volatile
  3342                           
  3343                           ;unmc_lcd_216.c: 128: LATBbits.LATB3=0;
  3344  00190A  968A               	bcf	3978,3,c	;volatile
  3345                           
  3346                           ;unmc_lcd_216.c: 129: LATBbits.LATB2=0;
  3347  00190C  948A               	bcf	3978,2,c	;volatile
  3348                           
  3349                           ;unmc_lcd_216.c: 134: TRISBbits.TRISB4=0;
  3350  00190E  9893               	bcf	3987,4,c	;volatile
  3351                           
  3352                           ;unmc_lcd_216.c: 135: TRISBbits.TRISB5=0;
  3353  001910  9A93               	bcf	3987,5,c	;volatile
  3354                           
  3355                           ;unmc_lcd_216.c: 136: TRISBbits.TRISB6=0;
  3356  001912  9C93               	bcf	3987,6,c	;volatile
  3357                           
  3358                           ;unmc_lcd_216.c: 137: TRISBbits.TRISB7=0;
  3359  001914  9E93               	bcf	3987,7,c	;volatile
  3360                           
  3361                           ;unmc_lcd_216.c: 139: Delay1KTCYx(8000000UL/800000UL);
  3362  001916  0E0A               	movlw	10
  3363  001918  EC50  F00F         	call	_Delay1KTCYx
  3364                           
  3365                           ;unmc_lcd_216.c: 140: Delay1KTCYx(8000000UL/800000UL);
  3366  00191C  0E0A               	movlw	10
  3367  00191E  EC50  F00F         	call	_Delay1KTCYx
  3368                           
  3369                           ;unmc_lcd_216.c: 141: Delay1KTCYx(8000000UL/800000UL);
  3370  001922  0E0A               	movlw	10
  3371  001924  EC50  F00F         	call	_Delay1KTCYx
  3372                           
  3373                           ;unmc_lcd_216.c: 143: for(i=0 ;i < 3; i++){
  3374  001928  0E00               	movlw	0
  3375  00192A  6E05               	movwf	lcd_init@i,c
  3376  00192C                     l2705:
  3377  00192C  0E02               	movlw	2
  3378  00192E  6405               	cpfsgt	lcd_init@i,c
  3379  001930  D001               	goto	l2709
  3380  001932  D008               	goto	l2715
  3381  001934                     l2709:
  3382                           
  3383                           ;unmc_lcd_216.c: 144: lcd_send_nibble(0x03);
  3384  001934  0E03               	movlw	3
  3385  001936  EC40  F00D         	call	_lcd_send_nibble
  3386                           
  3387                           ;unmc_lcd_216.c: 145: Delay1KTCYx(8000000UL/800000UL);
  3388  00193A  0E0A               	movlw	10
  3389  00193C  EC50  F00F         	call	_Delay1KTCYx
  3390  001940  2A05               	incf	lcd_init@i,f,c
  3391  001942  D7F4               	goto	l2705
  3392  001944                     l2715:
  3393                           
  3394                           ;unmc_lcd_216.c: 146: }
  3395                           ;unmc_lcd_216.c: 148: lcd_send_nibble(0x02);
  3396  001944  0E02               	movlw	2
  3397  001946  EC40  F00D         	call	_lcd_send_nibble
  3398                           
  3399                           ;unmc_lcd_216.c: 150: for(i=0; i < sizeof(LCD_INIT_STRING); i++){
  3400  00194A  0E00               	movlw	0
  3401  00194C  6E05               	movwf	lcd_init@i,c
  3402  00194E  0E03               	movlw	3
  3403  001950  6405               	cpfsgt	lcd_init@i,c
  3404  001952  D002               	goto	l2723
  3405  001954  0012               	return	
  3406  001956  0012               	return	
  3407  001958                     l2723:
  3408                           
  3409                           ;unmc_lcd_216.c: 151: lcd_send_byte(0, LCD_INIT_STRING[i]);
  3410  001958  5005               	movf	lcd_init@i,w,c
  3411  00195A  0D01               	mullw	1
  3412  00195C  0E0B               	movlw	low _LCD_INIT_STRING
  3413  00195E  24F3               	addwf	prodl,w,c
  3414  001960  6EF6               	movwf	tblptrl,c
  3415  001962  0E0F               	movlw	high _LCD_INIT_STRING
  3416  001964  20F4               	addwfc	prodh,w,c
  3417  001966  6EF7               	movwf	tblptrh,c
  3418  001968                     	if	0	;There are less than 3 active tblptr bytes
  3419  001968                     	endif
  3420  001968  0008               	tblrd		*
  3421  00196A  CFF5 F003          	movff	tablat,lcd_send_byte@n
  3422  00196E  0E00               	movlw	0
  3423  001970  ECF5  F00E         	call	_lcd_send_byte
  3424                           
  3425                           ;unmc_lcd_216.c: 153: Delay1KTCYx(8000000UL/800000UL);
  3426  001974  0E0A               	movlw	10
  3427  001976  EC50  F00F         	call	_Delay1KTCYx
  3428  00197A  2A05               	incf	lcd_init@i,f,c
  3429  00197C  0E03               	movlw	3
  3430  00197E  6405               	cpfsgt	lcd_init@i,c
  3431  001980  D7EB               	goto	l2723
  3432  001982  0012               	return	
  3433  001984  0012               	return		;funcret
  3434  001986                     __end_of_lcd_init:
  3435                           	opt stack 0
  3436                           tblptru	equ	0xFF8
  3437                           tblptrh	equ	0xFF7
  3438                           tblptrl	equ	0xFF6
  3439                           tablat	equ	0xFF5
  3440                           prodh	equ	0xFF4
  3441                           prodl	equ	0xFF3
  3442                           indf0	equ	0xFEF
  3443                           postinc0	equ	0xFEE
  3444                           fsr0h	equ	0xFEA
  3445                           fsr0l	equ	0xFE9
  3446                           wreg	equ	0xFE8
  3447                           postdec1	equ	0xFE5
  3448                           fsr1l	equ	0xFE1
  3449                           indf2	equ	0xFDF
  3450                           postinc2	equ	0xFDE
  3451                           postdec2	equ	0xFDD
  3452                           fsr2h	equ	0xFDA
  3453                           fsr2l	equ	0xFD9
  3454                           status	equ	0xFD8
  3455                           
  3456 ;; *************** function _Delay1KTCYx *****************
  3457 ;; Defined at:
  3458 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\d1ktcyx.c"
  3459 ;; Parameters:    Size  Location     Type
  3460 ;;  unit            1    wreg     unsigned char 
  3461 ;; Auto vars:     Size  Location     Type
  3462 ;;  unit            1    0[COMRAM] unsigned char 
  3463 ;; Return value:  Size  Location     Type
  3464 ;;		None               void
  3465 ;; Registers used:
  3466 ;;		wreg
  3467 ;; Tracked objects:
  3468 ;;		On entry : 0/0
  3469 ;;		On exit  : 0/0
  3470 ;;		Unchanged: 0/0
  3471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3473 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3475 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3476 ;;Total ram usage:        1 bytes
  3477 ;; Hardware stack levels used:    1
  3478 ;; This function calls:
  3479 ;;		Nothing
  3480 ;; This function is called by:
  3481 ;;		_lcd_init
  3482 ;;		_DelayPORXLCD
  3483 ;; This function uses a non-reentrant model
  3484 ;;
  3485                           
  3486                           	psect	text18
  3487  001EA0                     __ptext18:
  3488                           	opt stack 0
  3489  001EA0                     _Delay1KTCYx:
  3490                           	opt stack 28
  3491                           
  3492                           ;incstack = 0
  3493                           ;Delay1KTCYx@unit stored from wreg
  3494  001EA0  6E01               	movwf	Delay1KTCYx@unit,c
  3495  001EA2  0EFA               	movlw	250
  3496  001EA4                     u2397:
  3497  001EA4  F000               	nop	
  3498  001EA6  2EE8               	decfsz	wreg,f,c
  3499  001EA8  D7FD               	goto	u2397
  3500  001EAA  2E01               	decfsz	Delay1KTCYx@unit,f,c
  3501  001EAC  D7FA               	goto	l1701
  3502  001EAE  0012               	return	
  3503  001EB0  0012               	return		;funcret
  3504  001EB2                     __end_of_Delay1KTCYx:
  3505                           	opt stack 0
  3506                           tblptru	equ	0xFF8
  3507                           tblptrh	equ	0xFF7
  3508                           tblptrl	equ	0xFF6
  3509                           tablat	equ	0xFF5
  3510                           prodh	equ	0xFF4
  3511                           prodl	equ	0xFF3
  3512                           indf0	equ	0xFEF
  3513                           postinc0	equ	0xFEE
  3514                           fsr0h	equ	0xFEA
  3515                           fsr0l	equ	0xFE9
  3516                           wreg	equ	0xFE8
  3517                           postdec1	equ	0xFE5
  3518                           fsr1l	equ	0xFE1
  3519                           indf2	equ	0xFDF
  3520                           postinc2	equ	0xFDE
  3521                           postdec2	equ	0xFDD
  3522                           fsr2h	equ	0xFDA
  3523                           fsr2l	equ	0xFD9
  3524                           status	equ	0xFD8
  3525                           
  3526 ;; *************** function _lcd_comand *****************
  3527 ;; Defined at:
  3528 ;;		line 189 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3529 ;; Parameters:    Size  Location     Type
  3530 ;;  d               1    wreg     unsigned char 
  3531 ;; Auto vars:     Size  Location     Type
  3532 ;;  d               1    4[COMRAM] unsigned char 
  3533 ;; Return value:  Size  Location     Type
  3534 ;;		None               void
  3535 ;; Registers used:
  3536 ;;		wreg, status,2, status,0, cstack
  3537 ;; Tracked objects:
  3538 ;;		On entry : 0/0
  3539 ;;		On exit  : 0/0
  3540 ;;		Unchanged: 0/0
  3541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3543 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3545 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3546 ;;Total ram usage:        1 bytes
  3547 ;; Hardware stack levels used:    1
  3548 ;; Hardware stack levels required when called:    2
  3549 ;; This function calls:
  3550 ;;		_lcd_send_byte
  3551 ;; This function is called by:
  3552 ;;		_caratula
  3553 ;;		_Setup
  3554 ;;		_clear
  3555 ;; This function uses a non-reentrant model
  3556 ;;
  3557                           
  3558                           	psect	text19
  3559  001ED6                     __ptext19:
  3560                           	opt stack 0
  3561  001ED6                     _lcd_comand:
  3562                           	opt stack 26
  3563                           
  3564                           ;incstack = 0
  3565                           ;lcd_comand@d stored from wreg
  3566  001ED6  6E05               	movwf	lcd_comand@d,c
  3567                           
  3568                           ;unmc_lcd_216.c: 190: lcd_send_byte(0,d);
  3569  001ED8  C005  F003         	movff	lcd_comand@d,lcd_send_byte@n
  3570  001EDC  0E00               	movlw	0
  3571  001EDE  ECF5  F00E         	call	_lcd_send_byte
  3572  001EE2  0012               	return		;funcret
  3573  001EE4                     __end_of_lcd_comand:
  3574                           	opt stack 0
  3575                           tblptru	equ	0xFF8
  3576                           tblptrh	equ	0xFF7
  3577                           tblptrl	equ	0xFF6
  3578                           tablat	equ	0xFF5
  3579                           prodh	equ	0xFF4
  3580                           prodl	equ	0xFF3
  3581                           indf0	equ	0xFEF
  3582                           postinc0	equ	0xFEE
  3583                           fsr0h	equ	0xFEA
  3584                           fsr0l	equ	0xFE9
  3585                           wreg	equ	0xFE8
  3586                           postdec1	equ	0xFE5
  3587                           fsr1l	equ	0xFE1
  3588                           indf2	equ	0xFDF
  3589                           postinc2	equ	0xFDE
  3590                           postdec2	equ	0xFDD
  3591                           fsr2h	equ	0xFDA
  3592                           fsr2l	equ	0xFD9
  3593                           status	equ	0xFD8
  3594                           
  3595 ;; *************** function _lcd_send_byte *****************
  3596 ;; Defined at:
  3597 ;;		line 86 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3598 ;; Parameters:    Size  Location     Type
  3599 ;;  address         1    wreg     unsigned char 
  3600 ;;  n               1    2[COMRAM] unsigned char 
  3601 ;; Auto vars:     Size  Location     Type
  3602 ;;  address         1    3[COMRAM] unsigned char 
  3603 ;; Return value:  Size  Location     Type
  3604 ;;		None               void
  3605 ;; Registers used:
  3606 ;;		wreg, status,2, status,0, cstack
  3607 ;; Tracked objects:
  3608 ;;		On entry : 0/0
  3609 ;;		On exit  : 0/0
  3610 ;;		Unchanged: 0/0
  3611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3612 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3613 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3615 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3616 ;;Total ram usage:        2 bytes
  3617 ;; Hardware stack levels used:    1
  3618 ;; Hardware stack levels required when called:    1
  3619 ;; This function calls:
  3620 ;;		_Delay100TCYx
  3621 ;;		_lcd_send_nibble
  3622 ;; This function is called by:
  3623 ;;		_lcd_init
  3624 ;;		_lcd_gotoxy
  3625 ;;		_lcd_putc
  3626 ;;		_lcd_comand
  3627 ;;		_lcd_setcursor_vb
  3628 ;; This function uses a non-reentrant model
  3629 ;;
  3630                           
  3631                           	psect	text20
  3632  001DEA                     __ptext20:
  3633                           	opt stack 0
  3634  001DEA                     _lcd_send_byte:
  3635                           	opt stack 25
  3636                           
  3637                           ;incstack = 0
  3638                           ;lcd_send_byte@address stored from wreg
  3639  001DEA  6E04               	movwf	lcd_send_byte@address,c
  3640                           
  3641                           ;unmc_lcd_216.c: 88: LATBbits.LATB3=0;
  3642  001DEC  968A               	bcf	3978,3,c	;volatile
  3643                           
  3644                           ;unmc_lcd_216.c: 93: Delay100TCYx(8000000UL/4000000UL);
  3645  001DEE  0E02               	movlw	2
  3646  001DF0  EC59  F00F         	call	_Delay100TCYx
  3647                           
  3648                           ;unmc_lcd_216.c: 96: TRISBbits.TRISB4=0;
  3649  001DF4  9893               	bcf	3987,4,c	;volatile
  3650                           
  3651                           ;unmc_lcd_216.c: 97: TRISBbits.TRISB5=0;
  3652  001DF6  9A93               	bcf	3987,5,c	;volatile
  3653                           
  3654                           ;unmc_lcd_216.c: 98: TRISBbits.TRISB6=0;
  3655  001DF8  9C93               	bcf	3987,6,c	;volatile
  3656                           
  3657                           ;unmc_lcd_216.c: 99: TRISBbits.TRISB7=0;
  3658  001DFA  9E93               	bcf	3987,7,c	;volatile
  3659                           
  3660                           ;unmc_lcd_216.c: 101: if(address)
  3661  001DFC  5004               	movf	lcd_send_byte@address,w,c
  3662  001DFE  B4D8               	btfsc	status,2,c
  3663  001E00  D002               	goto	l75
  3664                           
  3665                           ;unmc_lcd_216.c: 102: LATBbits.LATB3=1;
  3666  001E02  868A               	bsf	3978,3,c	;volatile
  3667  001E04  D001               	goto	l76
  3668  001E06                     l75:
  3669                           
  3670                           ;unmc_lcd_216.c: 103: else
  3671                           ;unmc_lcd_216.c: 104: LATBbits.LATB3=0;
  3672  001E06  968A               	bcf	3978,3,c	;volatile
  3673  001E08                     l76:
  3674                           
  3675                           ;unmc_lcd_216.c: 106: __nop();
  3676  001E08  F000               	nop	
  3677                           
  3678                           ;unmc_lcd_216.c: 113: lcd_send_nibble(n >> 4);
  3679  001E0A  3803               	swapf	lcd_send_byte@n,w,c
  3680  001E0C  0B0F               	andlw	15
  3681  001E0E  EC40  F00D         	call	_lcd_send_nibble
  3682                           
  3683                           ;unmc_lcd_216.c: 114: lcd_send_nibble(n & 0xf);
  3684  001E12  5003               	movf	lcd_send_byte@n,w,c
  3685  001E14  0B0F               	andlw	15
  3686  001E16  EC40  F00D         	call	_lcd_send_nibble
  3687  001E1A  0012               	return		;funcret
  3688  001E1C                     __end_of_lcd_send_byte:
  3689                           	opt stack 0
  3690                           tblptru	equ	0xFF8
  3691                           tblptrh	equ	0xFF7
  3692                           tblptrl	equ	0xFF6
  3693                           tablat	equ	0xFF5
  3694                           prodh	equ	0xFF4
  3695                           prodl	equ	0xFF3
  3696                           indf0	equ	0xFEF
  3697                           postinc0	equ	0xFEE
  3698                           fsr0h	equ	0xFEA
  3699                           fsr0l	equ	0xFE9
  3700                           wreg	equ	0xFE8
  3701                           postdec1	equ	0xFE5
  3702                           fsr1l	equ	0xFE1
  3703                           indf2	equ	0xFDF
  3704                           postinc2	equ	0xFDE
  3705                           postdec2	equ	0xFDD
  3706                           fsr2h	equ	0xFDA
  3707                           fsr2l	equ	0xFD9
  3708                           status	equ	0xFD8
  3709                           
  3710 ;; *************** function _lcd_send_nibble *****************
  3711 ;; Defined at:
  3712 ;;		line 25 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3713 ;; Parameters:    Size  Location     Type
  3714 ;;  nibble          1    wreg     unsigned char 
  3715 ;; Auto vars:     Size  Location     Type
  3716 ;;  nibble          1    1[COMRAM] unsigned char 
  3717 ;; Return value:  Size  Location     Type
  3718 ;;		None               void
  3719 ;; Registers used:
  3720 ;;		wreg, status,2, status,0
  3721 ;; Tracked objects:
  3722 ;;		On entry : 0/0
  3723 ;;		On exit  : 0/0
  3724 ;;		Unchanged: 0/0
  3725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3727 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3728 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3729 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3730 ;;Total ram usage:        2 bytes
  3731 ;; Hardware stack levels used:    1
  3732 ;; This function calls:
  3733 ;;		Nothing
  3734 ;; This function is called by:
  3735 ;;		_lcd_send_byte
  3736 ;;		_lcd_init
  3737 ;; This function uses a non-reentrant model
  3738 ;;
  3739                           
  3740                           	psect	text21
  3741  001A80                     __ptext21:
  3742                           	opt stack 0
  3743  001A80                     _lcd_send_nibble:
  3744                           	opt stack 25
  3745                           
  3746                           ;incstack = 0
  3747                           ;lcd_send_nibble@nibble stored from wreg
  3748  001A80  6E02               	movwf	lcd_send_nibble@nibble,c
  3749                           
  3750                           ;unmc_lcd_216.c: 27: LATBbits.LATB4=!!(nibble & 0x01);
  3751  001A82  A002               	btfss	lcd_send_nibble@nibble,0,c
  3752  001A84  D003               	goto	u1180
  3753  001A86  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3754  001A88  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  3755  001A8A  D001               	goto	u1198
  3756  001A8C                     u1180:
  3757  001A8C  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3758  001A8E                     u1198:
  3759  001A8E  3A01               	swapf	??_lcd_send_nibble,f,c
  3760  001A90  508A               	movf	3978,w,c	;volatile
  3761  001A92  1801               	xorwf	??_lcd_send_nibble,w,c
  3762  001A94  0BEF               	andlw	-17
  3763  001A96  1801               	xorwf	??_lcd_send_nibble,w,c
  3764  001A98  6E8A               	movwf	3978,c	;volatile
  3765                           
  3766                           ;unmc_lcd_216.c: 28: LATBbits.LATB5=!!(nibble & 0x02);
  3767  001A9A  A202               	btfss	lcd_send_nibble@nibble,1,c
  3768  001A9C  D003               	goto	u1200
  3769  001A9E  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3770  001AA0  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  3771  001AA2  D001               	goto	u1218
  3772  001AA4                     u1200:
  3773  001AA4  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3774  001AA6                     u1218:
  3775  001AA6  3A01               	swapf	??_lcd_send_nibble,f,c
  3776  001AA8  4601               	rlncf	??_lcd_send_nibble,f,c
  3777  001AAA  508A               	movf	3978,w,c	;volatile
  3778  001AAC  1801               	xorwf	??_lcd_send_nibble,w,c
  3779  001AAE  0BDF               	andlw	-33
  3780  001AB0  1801               	xorwf	??_lcd_send_nibble,w,c
  3781  001AB2  6E8A               	movwf	3978,c	;volatile
  3782                           
  3783                           ;unmc_lcd_216.c: 29: LATBbits.LATB6=!!(nibble & 0x04);
  3784  001AB4  A402               	btfss	lcd_send_nibble@nibble,2,c
  3785  001AB6  D003               	goto	u1220
  3786  001AB8  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3787  001ABA  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  3788  001ABC  D001               	goto	u1238
  3789  001ABE                     u1220:
  3790  001ABE  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3791  001AC0                     u1238:
  3792  001AC0  3A01               	swapf	??_lcd_send_nibble,f,c
  3793  001AC2  4601               	rlncf	??_lcd_send_nibble,f,c
  3794  001AC4  4601               	rlncf	??_lcd_send_nibble,f,c
  3795  001AC6  508A               	movf	3978,w,c	;volatile
  3796  001AC8  1801               	xorwf	??_lcd_send_nibble,w,c
  3797  001ACA  0BBF               	andlw	-65
  3798  001ACC  1801               	xorwf	??_lcd_send_nibble,w,c
  3799  001ACE  6E8A               	movwf	3978,c	;volatile
  3800                           
  3801                           ;unmc_lcd_216.c: 30: LATBbits.LATB7=!!(nibble & 0x08);
  3802  001AD0  A602               	btfss	lcd_send_nibble@nibble,3,c
  3803  001AD2  D003               	goto	u1240
  3804  001AD4  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3805  001AD6  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  3806  001AD8  D001               	goto	u1258
  3807  001ADA                     u1240:
  3808  001ADA  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3809  001ADC                     u1258:
  3810  001ADC  3201               	rrcf	??_lcd_send_nibble,f,c
  3811  001ADE  3201               	rrcf	??_lcd_send_nibble,f,c
  3812  001AE0  508A               	movf	3978,w,c	;volatile
  3813  001AE2  1801               	xorwf	??_lcd_send_nibble,w,c
  3814  001AE4  0B7F               	andlw	-129
  3815  001AE6  1801               	xorwf	??_lcd_send_nibble,w,c
  3816  001AE8  6E8A               	movwf	3978,c	;volatile
  3817                           
  3818                           ;unmc_lcd_216.c: 32: __nop();
  3819  001AEA  F000               	nop	
  3820                           
  3821                           ;unmc_lcd_216.c: 33: LATBbits.LATB2=1;
  3822  001AEC  848A               	bsf	3978,2,c	;volatile
  3823                           
  3824                           ;unmc_lcd_216.c: 34: __nop();__nop();
  3825  001AEE  F000               	nop	
  3826  001AF0  F000               	nop	
  3827                           
  3828                           ;unmc_lcd_216.c: 35: LATBbits.LATB2=0;
  3829  001AF2  948A               	bcf	3978,2,c	;volatile
  3830  001AF4  0012               	return		;funcret
  3831  001AF6                     __end_of_lcd_send_nibble:
  3832                           	opt stack 0
  3833                           tblptru	equ	0xFF8
  3834                           tblptrh	equ	0xFF7
  3835                           tblptrl	equ	0xFF6
  3836                           tablat	equ	0xFF5
  3837                           prodh	equ	0xFF4
  3838                           prodl	equ	0xFF3
  3839                           indf0	equ	0xFEF
  3840                           postinc0	equ	0xFEE
  3841                           fsr0h	equ	0xFEA
  3842                           fsr0l	equ	0xFE9
  3843                           wreg	equ	0xFE8
  3844                           postdec1	equ	0xFE5
  3845                           fsr1l	equ	0xFE1
  3846                           indf2	equ	0xFDF
  3847                           postinc2	equ	0xFDE
  3848                           postdec2	equ	0xFDD
  3849                           fsr2h	equ	0xFDA
  3850                           fsr2l	equ	0xFD9
  3851                           status	equ	0xFD8
  3852                           
  3853 ;; *************** function _Delay100TCYx *****************
  3854 ;; Defined at:
  3855 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\d100tcyx.c"
  3856 ;; Parameters:    Size  Location     Type
  3857 ;;  unit            1    wreg     unsigned char 
  3858 ;; Auto vars:     Size  Location     Type
  3859 ;;  unit            1    0[COMRAM] unsigned char 
  3860 ;; Return value:  Size  Location     Type
  3861 ;;		None               void
  3862 ;; Registers used:
  3863 ;;		wreg
  3864 ;; Tracked objects:
  3865 ;;		On entry : 0/0
  3866 ;;		On exit  : 0/0
  3867 ;;		Unchanged: 0/0
  3868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3870 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3872 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3873 ;;Total ram usage:        1 bytes
  3874 ;; Hardware stack levels used:    1
  3875 ;; This function calls:
  3876 ;;		Nothing
  3877 ;; This function is called by:
  3878 ;;		_lcd_send_byte
  3879 ;; This function uses a non-reentrant model
  3880 ;;
  3881                           
  3882                           	psect	text22
  3883  001EB2                     __ptext22:
  3884                           	opt stack 0
  3885  001EB2                     _Delay100TCYx:
  3886                           	opt stack 25
  3887                           
  3888                           ;incstack = 0
  3889                           ;Delay100TCYx@unit stored from wreg
  3890  001EB2  6E01               	movwf	Delay100TCYx@unit,c
  3891  001EB4  0E21               	movlw	33
  3892  001EB6                     u2407:
  3893  001EB6  2EE8               	decfsz	wreg,f,c
  3894  001EB8  D7FE               	goto	u2407
  3895  001EBA  F000               	nop	
  3896  001EBC  2E01               	decfsz	Delay100TCYx@unit,f,c
  3897  001EBE  D7FA               	goto	l2165
  3898  001EC0  0012               	return	
  3899  001EC2  0012               	return		;funcret
  3900  001EC4                     __end_of_Delay100TCYx:
  3901                           	opt stack 0
  3902                           tblptru	equ	0xFF8
  3903                           tblptrh	equ	0xFF7
  3904                           tblptrl	equ	0xFF6
  3905                           tablat	equ	0xFF5
  3906                           prodh	equ	0xFF4
  3907                           prodl	equ	0xFF3
  3908                           indf0	equ	0xFEF
  3909                           postinc0	equ	0xFEE
  3910                           fsr0h	equ	0xFEA
  3911                           fsr0l	equ	0xFE9
  3912                           wreg	equ	0xFE8
  3913                           postdec1	equ	0xFE5
  3914                           fsr1l	equ	0xFE1
  3915                           indf2	equ	0xFDF
  3916                           postinc2	equ	0xFDE
  3917                           postdec2	equ	0xFDD
  3918                           fsr2h	equ	0xFDA
  3919                           fsr2l	equ	0xFD9
  3920                           status	equ	0xFD8
  3921                           
  3922 ;; *************** function _Write_RTC *****************
  3923 ;; Defined at:
  3924 ;;		line 22 in file "../../Program Files/Unimic/unmc_01/sources/unmc_rtcc_01.c"
  3925 ;; Parameters:    Size  Location     Type
  3926 ;;		None
  3927 ;; Auto vars:     Size  Location     Type
  3928 ;;		None
  3929 ;; Return value:  Size  Location     Type
  3930 ;;                  2   26[None  ] int 
  3931 ;; Registers used:
  3932 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3933 ;; Tracked objects:
  3934 ;;		On entry : 0/0
  3935 ;;		On exit  : 0/0
  3936 ;;		Unchanged: 0/0
  3937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3941 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3942 ;;Total ram usage:        0 bytes
  3943 ;; Hardware stack levels used:    1
  3944 ;; Hardware stack levels required when called:    2
  3945 ;; This function calls:
  3946 ;;		_RtccWrOn
  3947 ;;		_RtccWriteDate
  3948 ;;		_RtccWriteTime
  3949 ;;		___awdiv
  3950 ;; This function is called by:
  3951 ;;		_Setup
  3952 ;;		_setClock
  3953 ;; This function uses a non-reentrant model
  3954 ;;
  3955                           
  3956                           	psect	text23
  3957  0014D6                     __ptext23:
  3958                           	opt stack 0
  3959  0014D6                     _Write_RTC:
  3960                           	opt stack 27
  3961                           
  3962                           ;unmc_rtcc_01.c: 24: RtccWrOn();
  3963                           
  3964                           ;incstack = 0
  3965  0014D6  EC62  F00F         	call	_RtccWrOn	;wreg free
  3966                           
  3967                           ;unmc_rtcc_01.c: 26: PIE3bits.RTCCIE=1;
  3968  0014DA  80A3               	bsf	4003,0,c	;volatile
  3969                           
  3970                           ;unmc_rtcc_01.c: 27: segundo_d=segundo/10;
  3971  0014DC  C038  F001         	movff	_segundo,___awdiv@dividend
  3972  0014E0  C039  F002         	movff	_segundo+1,___awdiv@dividend+1
  3973  0014E4  0E00               	movlw	0
  3974  0014E6  6E04               	movwf	___awdiv@divisor+1,c
  3975  0014E8  0E0A               	movlw	10
  3976  0014EA  6E03               	movwf	___awdiv@divisor,c
  3977  0014EC  EC38  F00C         	call	___awdiv	;wreg free
  3978  0014F0  5001               	movf	?___awdiv,w,c
  3979  0014F2  6E4E               	movwf	_segundo_d,c
  3980                           
  3981                           ;unmc_rtcc_01.c: 28: segundo_u=segundo-segundo_d*10;
  3982  0014F4  504E               	movf	_segundo_d,w,c
  3983  0014F6  0D0A               	mullw	10
  3984  0014F8  50F3               	movf	prodl,w,c
  3985  0014FA  0800               	sublw	0
  3986  0014FC  2438               	addwf	_segundo,w,c
  3987  0014FE  6E4F               	movwf	_segundo_u,c
  3988                           
  3989                           ;unmc_rtcc_01.c: 29: RtccTime.f.sec =segundo_d*16+segundo_u;
  3990  001500  504E               	movf	_segundo_d,w,c
  3991  001502  0D10               	mullw	16
  3992  001504  50F3               	movf	prodl,w,c
  3993  001506  244F               	addwf	_segundo_u,w,c
  3994  001508  6E40               	movwf	_RtccTime+1,c
  3995                           
  3996                           ;unmc_rtcc_01.c: 30: minuto_d=minuto/10;
  3997  00150A  C05A  F001         	movff	_minuto,___awdiv@dividend
  3998  00150E  C05B  F002         	movff	_minuto+1,___awdiv@dividend+1
  3999  001512  0E00               	movlw	0
  4000  001514  6E04               	movwf	___awdiv@divisor+1,c
  4001  001516  0E0A               	movlw	10
  4002  001518  6E03               	movwf	___awdiv@divisor,c
  4003  00151A  EC38  F00C         	call	___awdiv	;wreg free
  4004  00151E  5001               	movf	?___awdiv,w,c
  4005  001520  6E4C               	movwf	_minuto_d,c
  4006                           
  4007                           ;unmc_rtcc_01.c: 31: minuto_u=minuto-minuto_d*10;
  4008  001522  504C               	movf	_minuto_d,w,c
  4009  001524  0D0A               	mullw	10
  4010  001526  50F3               	movf	prodl,w,c
  4011  001528  0800               	sublw	0
  4012  00152A  245A               	addwf	_minuto,w,c
  4013  00152C  6E4D               	movwf	_minuto_u,c
  4014                           
  4015                           ;unmc_rtcc_01.c: 32: RtccTime.f.min =minuto_d*16+minuto_u;
  4016  00152E  504C               	movf	_minuto_d,w,c
  4017  001530  0D10               	mullw	16
  4018  001532  50F3               	movf	prodl,w,c
  4019  001534  244D               	addwf	_minuto_u,w,c
  4020  001536  6E41               	movwf	_RtccTime+2,c
  4021                           
  4022                           ;unmc_rtcc_01.c: 33: hora_d=hora/10;
  4023  001538  C056  F001         	movff	_hora,___awdiv@dividend
  4024  00153C  C057  F002         	movff	_hora+1,___awdiv@dividend+1
  4025  001540  0E00               	movlw	0
  4026  001542  6E04               	movwf	___awdiv@divisor+1,c
  4027  001544  0E0A               	movlw	10
  4028  001546  6E03               	movwf	___awdiv@divisor,c
  4029  001548  EC38  F00C         	call	___awdiv	;wreg free
  4030  00154C  5001               	movf	?___awdiv,w,c
  4031  00154E  6E48               	movwf	_hora_d,c
  4032                           
  4033                           ;unmc_rtcc_01.c: 34: hora_u=hora-hora_d*10;
  4034  001550  5048               	movf	_hora_d,w,c
  4035  001552  0D0A               	mullw	10
  4036  001554  50F3               	movf	prodl,w,c
  4037  001556  0800               	sublw	0
  4038  001558  2456               	addwf	_hora,w,c
  4039  00155A  6E49               	movwf	_hora_u,c
  4040                           
  4041                           ;unmc_rtcc_01.c: 35: RtccTime.f.hour=hora_d*16+hora_u;
  4042  00155C  5048               	movf	_hora_d,w,c
  4043  00155E  0D10               	mullw	16
  4044  001560  50F3               	movf	prodl,w,c
  4045  001562  2449               	addwf	_hora_u,w,c
  4046  001564  6E42               	movwf	_RtccTime+3,c
  4047                           
  4048                           ;unmc_rtcc_01.c: 36: anio_d=anio/10;
  4049  001566  C050  F001         	movff	_anio,___awdiv@dividend
  4050  00156A  C051  F002         	movff	_anio+1,___awdiv@dividend+1
  4051  00156E  0E00               	movlw	0
  4052  001570  6E04               	movwf	___awdiv@divisor+1,c
  4053  001572  0E0A               	movlw	10
  4054  001574  6E03               	movwf	___awdiv@divisor,c
  4055  001576  EC38  F00C         	call	___awdiv	;wreg free
  4056  00157A  5001               	movf	?___awdiv,w,c
  4057  00157C  6E43               	movwf	_anio_d,c
  4058                           
  4059                           ;unmc_rtcc_01.c: 37: anio_u=anio-anio_d*10;
  4060  00157E  5043               	movf	_anio_d,w,c
  4061  001580  0D0A               	mullw	10
  4062  001582  50F3               	movf	prodl,w,c
  4063  001584  0800               	sublw	0
  4064  001586  2450               	addwf	_anio,w,c
  4065  001588  6E44               	movwf	_anio_u,c
  4066                           
  4067                           ;unmc_rtcc_01.c: 38: RtccDate.f.year=anio_d*16+anio_u;
  4068  00158A  5043               	movf	_anio_d,w,c
  4069  00158C  0D10               	mullw	16
  4070  00158E  50F3               	movf	prodl,w,c
  4071  001590  2444               	addwf	_anio_u,w,c
  4072  001592  6E3E               	movwf	_RtccDate+3,c
  4073                           
  4074                           ;unmc_rtcc_01.c: 39: mes_d=mes/10;
  4075  001594  C058  F001         	movff	_mes,___awdiv@dividend
  4076  001598  C059  F002         	movff	_mes+1,___awdiv@dividend+1
  4077  00159C  0E00               	movlw	0
  4078  00159E  6E04               	movwf	___awdiv@divisor+1,c
  4079  0015A0  0E0A               	movlw	10
  4080  0015A2  6E03               	movwf	___awdiv@divisor,c
  4081  0015A4  EC38  F00C         	call	___awdiv	;wreg free
  4082  0015A8  5001               	movf	?___awdiv,w,c
  4083  0015AA  6E4A               	movwf	_mes_d,c
  4084                           
  4085                           ;unmc_rtcc_01.c: 40: mes_u=mes-mes_d*10;
  4086  0015AC  504A               	movf	_mes_d,w,c
  4087  0015AE  0D0A               	mullw	10
  4088  0015B0  50F3               	movf	prodl,w,c
  4089  0015B2  0800               	sublw	0
  4090  0015B4  2458               	addwf	_mes,w,c
  4091  0015B6  6E4B               	movwf	_mes_u,c
  4092                           
  4093                           ;unmc_rtcc_01.c: 41: RtccDate.f.mon=mes_d*16+mes_u;
  4094  0015B8  504A               	movf	_mes_d,w,c
  4095  0015BA  0D10               	mullw	16
  4096  0015BC  50F3               	movf	prodl,w,c
  4097  0015BE  244B               	addwf	_mes_u,w,c
  4098  0015C0  6E3D               	movwf	_RtccDate+2,c
  4099                           
  4100                           ;unmc_rtcc_01.c: 42: fecha_d=dia/10;
  4101  0015C2  C052  F001         	movff	_dia,___awdiv@dividend
  4102  0015C6  C053  F002         	movff	_dia+1,___awdiv@dividend+1
  4103  0015CA  0E00               	movlw	0
  4104  0015CC  6E04               	movwf	___awdiv@divisor+1,c
  4105  0015CE  0E0A               	movlw	10
  4106  0015D0  6E03               	movwf	___awdiv@divisor,c
  4107  0015D2  EC38  F00C         	call	___awdiv	;wreg free
  4108  0015D6  5001               	movf	?___awdiv,w,c
  4109  0015D8  6E46               	movwf	_fecha_d,c
  4110                           
  4111                           ;unmc_rtcc_01.c: 43: fecha_u=dia-fecha_d*10;
  4112  0015DA  5046               	movf	_fecha_d,w,c
  4113  0015DC  0D0A               	mullw	10
  4114  0015DE  50F3               	movf	prodl,w,c
  4115  0015E0  0800               	sublw	0
  4116  0015E2  2452               	addwf	_dia,w,c
  4117  0015E4  6E47               	movwf	_fecha_u,c
  4118                           
  4119                           ;unmc_rtcc_01.c: 44: RtccDate.f.mday=fecha_d*16+fecha_u;
  4120  0015E6  5046               	movf	_fecha_d,w,c
  4121  0015E8  0D10               	mullw	16
  4122  0015EA  50F3               	movf	prodl,w,c
  4123  0015EC  2447               	addwf	_fecha_u,w,c
  4124  0015EE  6E3C               	movwf	_RtccDate+1,c
  4125                           
  4126                           ;unmc_rtcc_01.c: 45: dia_semana=diasem;
  4127  0015F0  C054  F045         	movff	_diasem,_dia_semana
  4128                           
  4129                           ;unmc_rtcc_01.c: 46: RtccDate.f.wday =diasem;
  4130  0015F4  C054  F03B         	movff	_diasem,_RtccDate
  4131                           
  4132                           ;unmc_rtcc_01.c: 47: RtccWriteTime(&RtccTime,1);
  4133  0015F8  0E3F               	movlw	low _RtccTime
  4134  0015FA  6E01               	movwf	RtccWriteTime@pTm,c
  4135  0015FC  0E00               	movlw	high _RtccTime
  4136  0015FE  6E02               	movwf	RtccWriteTime@pTm+1,c
  4137  001600  0E01               	movlw	1
  4138  001602  6E03               	movwf	RtccWriteTime@di,c
  4139  001604  ECB2  F00B         	call	_RtccWriteTime	;wreg free
  4140                           
  4141                           ;unmc_rtcc_01.c: 48: RtccWriteDate(&RtccDate,1);
  4142  001608  0E3B               	movlw	low _RtccDate
  4143  00160A  6E01               	movwf	RtccWriteDate@pDt,c
  4144  00160C  0E00               	movlw	high _RtccDate
  4145  00160E  6E02               	movwf	RtccWriteDate@pDt+1,c
  4146  001610  0E01               	movlw	1
  4147  001612  6E03               	movwf	RtccWriteDate@di,c
  4148  001614  EC0F  F00B         	call	_RtccWriteDate	;wreg free
  4149                           
  4150                           ;unmc_rtcc_01.c: 49: (RTCCFGbits.RTCEN=1);
  4151  001618  010F               	movlb	15	; () banked
  4152  00161A  8F3F               	bsf	63,7,b	;volatile
  4153                           
  4154                           ; BSR set to: 15
  4155  00161C  0012               	return		;funcret
  4156  00161E                     __end_of_Write_RTC:
  4157                           	opt stack 0
  4158                           tblptru	equ	0xFF8
  4159                           tblptrh	equ	0xFF7
  4160                           tblptrl	equ	0xFF6
  4161                           tablat	equ	0xFF5
  4162                           prodh	equ	0xFF4
  4163                           prodl	equ	0xFF3
  4164                           indf0	equ	0xFEF
  4165                           postinc0	equ	0xFEE
  4166                           fsr0h	equ	0xFEA
  4167                           fsr0l	equ	0xFE9
  4168                           wreg	equ	0xFE8
  4169                           postdec1	equ	0xFE5
  4170                           fsr1l	equ	0xFE1
  4171                           indf2	equ	0xFDF
  4172                           postinc2	equ	0xFDE
  4173                           postdec2	equ	0xFDD
  4174                           fsr2h	equ	0xFDA
  4175                           fsr2l	equ	0xFD9
  4176                           status	equ	0xFD8
  4177                           
  4178 ;; *************** function ___awdiv *****************
  4179 ;; Defined at:
  4180 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\awdiv.c"
  4181 ;; Parameters:    Size  Location     Type
  4182 ;;  dividend        2    0[COMRAM] int 
  4183 ;;  divisor         2    2[COMRAM] int 
  4184 ;; Auto vars:     Size  Location     Type
  4185 ;;  quotient        2    6[COMRAM] int 
  4186 ;;  sign            1    5[COMRAM] unsigned char 
  4187 ;;  counter         1    4[COMRAM] unsigned char 
  4188 ;; Return value:  Size  Location     Type
  4189 ;;                  2    0[COMRAM] int 
  4190 ;; Registers used:
  4191 ;;		wreg, status,2, status,0
  4192 ;; Tracked objects:
  4193 ;;		On entry : 0/0
  4194 ;;		On exit  : 0/0
  4195 ;;		Unchanged: 0/0
  4196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4197 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4198 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4200 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4201 ;;Total ram usage:        8 bytes
  4202 ;; Hardware stack levels used:    1
  4203 ;; This function calls:
  4204 ;;		Nothing
  4205 ;; This function is called by:
  4206 ;;		_Write_RTC
  4207 ;;		__delay_s
  4208 ;; This function uses a non-reentrant model
  4209 ;;
  4210                           
  4211                           	psect	text24
  4212  001870                     __ptext24:
  4213                           	opt stack 0
  4214  001870                     ___awdiv:
  4215                           	opt stack 27
  4216                           
  4217                           ; BSR set to: 15
  4218                           ;incstack = 0
  4219  001870  0E00               	movlw	0
  4220  001872  6E06               	movwf	___awdiv@sign,c
  4221  001874  AE04               	btfss	___awdiv@divisor+1,7,c
  4222  001876  D007               	goto	l2373
  4223  001878  6C03               	negf	___awdiv@divisor,c
  4224  00187A  1E04               	comf	___awdiv@divisor+1,f,c
  4225  00187C  B0D8               	btfsc	status,0,c
  4226  00187E  2A04               	incf	___awdiv@divisor+1,f,c
  4227  001880  0E01               	movlw	1
  4228  001882  6E06               	movwf	___awdiv@sign,c
  4229  001884  D000               	goto	l2373
  4230  001886                     l2373:
  4231  001886  AE02               	btfss	___awdiv@dividend+1,7,c
  4232  001888  D007               	goto	l2379
  4233  00188A  6C01               	negf	___awdiv@dividend,c
  4234  00188C  1E02               	comf	___awdiv@dividend+1,f,c
  4235  00188E  B0D8               	btfsc	status,0,c
  4236  001890  2A02               	incf	___awdiv@dividend+1,f,c
  4237  001892  0E01               	movlw	1
  4238  001894  1A06               	xorwf	___awdiv@sign,f,c
  4239  001896  D000               	goto	l2379
  4240  001898                     l2379:
  4241  001898  0E00               	movlw	0
  4242  00189A  6E08               	movwf	___awdiv@quotient+1,c
  4243  00189C  0E00               	movlw	0
  4244  00189E  6E07               	movwf	___awdiv@quotient,c
  4245  0018A0  5003               	movf	___awdiv@divisor,w,c
  4246  0018A2  1004               	iorwf	___awdiv@divisor+1,w,c
  4247  0018A4  B4D8               	btfsc	status,2,c
  4248  0018A6  D021               	goto	l2401
  4249  0018A8  0E01               	movlw	1
  4250  0018AA  6E05               	movwf	___awdiv@counter,c
  4251  0018AC  D005               	goto	l2387
  4252  0018AE                     l2385:
  4253  0018AE  90D8               	bcf	status,0,c
  4254  0018B0  3603               	rlcf	___awdiv@divisor,f,c
  4255  0018B2  3604               	rlcf	___awdiv@divisor+1,f,c
  4256  0018B4  2A05               	incf	___awdiv@counter,f,c
  4257  0018B6  D000               	goto	l2387
  4258  0018B8                     l2387:
  4259  0018B8  BE04               	btfsc	___awdiv@divisor+1,7,c
  4260  0018BA  D002               	goto	l2389
  4261  0018BC  D7F8               	goto	l2385
  4262  0018BE  D000               	goto	l2389
  4263  0018C0                     l2389:
  4264  0018C0  90D8               	bcf	status,0,c
  4265  0018C2  3607               	rlcf	___awdiv@quotient,f,c
  4266  0018C4  3608               	rlcf	___awdiv@quotient+1,f,c
  4267  0018C6  5003               	movf	___awdiv@divisor,w,c
  4268  0018C8  5C01               	subwf	___awdiv@dividend,w,c
  4269  0018CA  5004               	movf	___awdiv@divisor+1,w,c
  4270  0018CC  5802               	subwfb	___awdiv@dividend+1,w,c
  4271  0018CE  A0D8               	btfss	status,0,c
  4272  0018D0  D006               	goto	l2397
  4273  0018D2  5003               	movf	___awdiv@divisor,w,c
  4274  0018D4  5E01               	subwf	___awdiv@dividend,f,c
  4275  0018D6  5004               	movf	___awdiv@divisor+1,w,c
  4276  0018D8  5A02               	subwfb	___awdiv@dividend+1,f,c
  4277  0018DA  8007               	bsf	___awdiv@quotient,0,c
  4278  0018DC  D000               	goto	l2397
  4279  0018DE                     l2397:
  4280  0018DE  90D8               	bcf	status,0,c
  4281  0018E0  3204               	rrcf	___awdiv@divisor+1,f,c
  4282  0018E2  3203               	rrcf	___awdiv@divisor,f,c
  4283  0018E4  2E05               	decfsz	___awdiv@counter,f,c
  4284  0018E6  D7EC               	goto	l2389
  4285  0018E8  D000               	goto	l2401
  4286  0018EA                     l2401:
  4287  0018EA  5006               	movf	___awdiv@sign,w,c
  4288  0018EC  B4D8               	btfsc	status,2,c
  4289  0018EE  D005               	goto	l2405
  4290  0018F0  6C07               	negf	___awdiv@quotient,c
  4291  0018F2  1E08               	comf	___awdiv@quotient+1,f,c
  4292  0018F4  B0D8               	btfsc	status,0,c
  4293  0018F6  2A08               	incf	___awdiv@quotient+1,f,c
  4294  0018F8  D000               	goto	l2405
  4295  0018FA                     l2405:
  4296  0018FA  C007  F001         	movff	___awdiv@quotient,?___awdiv
  4297  0018FE  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  4298  001902  0012               	return	
  4299  001904  0012               	return		;funcret
  4300  001906                     __end_of___awdiv:
  4301                           	opt stack 0
  4302                           tblptru	equ	0xFF8
  4303                           tblptrh	equ	0xFF7
  4304                           tblptrl	equ	0xFF6
  4305                           tablat	equ	0xFF5
  4306                           prodh	equ	0xFF4
  4307                           prodl	equ	0xFF3
  4308                           indf0	equ	0xFEF
  4309                           postinc0	equ	0xFEE
  4310                           fsr0h	equ	0xFEA
  4311                           fsr0l	equ	0xFE9
  4312                           wreg	equ	0xFE8
  4313                           postdec1	equ	0xFE5
  4314                           fsr1l	equ	0xFE1
  4315                           indf2	equ	0xFDF
  4316                           postinc2	equ	0xFDE
  4317                           postdec2	equ	0xFDD
  4318                           fsr2h	equ	0xFDA
  4319                           fsr2l	equ	0xFD9
  4320                           status	equ	0xFD8
  4321                           
  4322 ;; *************** function _RtccWriteTime *****************
  4323 ;; Defined at:
  4324 ;;		line 34 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteTime.c"
  4325 ;; Parameters:    Size  Location     Type
  4326 ;;  pTm             2    0[COMRAM] PTR const struct .
  4327 ;;		 -> RtccTime(4), 
  4328 ;;  di              1    2[COMRAM] enum E7121
  4329 ;; Auto vars:     Size  Location     Type
  4330 ;;  tempHourWDay    2    9[COMRAM] struct .
  4331 ;;  tempMinSec      2    7[COMRAM] struct .
  4332 ;;  wasWrEn         1    6[COMRAM] enum E7121
  4333 ;;  wasAlrm         1    5[COMRAM] enum E7121
  4334 ;;  wasOn           1    4[COMRAM] enum E7121
  4335 ;; Return value:  Size  Location     Type
  4336 ;;                  1    wreg      enum E7121
  4337 ;; Registers used:
  4338 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4339 ;; Tracked objects:
  4340 ;;		On entry : 0/0
  4341 ;;		On exit  : 0/0
  4342 ;;		Unchanged: 0/0
  4343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4344 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4345 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4346 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4347 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4348 ;;Total ram usage:       11 bytes
  4349 ;; Hardware stack levels used:    1
  4350 ;; Hardware stack levels required when called:    1
  4351 ;; This function calls:
  4352 ;;		_RtccWrOn
  4353 ;; This function is called by:
  4354 ;;		_Write_RTC
  4355 ;; This function uses a non-reentrant model
  4356 ;;
  4357                           
  4358                           	psect	text25
  4359  001764                     __ptext25:
  4360                           	opt stack 0
  4361  001764                     _RtccWriteTime:
  4362                           	opt stack 27
  4363                           
  4364                           ;incstack = 0
  4365  001764  0E00               	movlw	0
  4366  001766  6E06               	movwf	RtccWriteTime@wasAlrm,c
  4367  001768  EE20 F002          	lfsr	2,2
  4368  00176C  5001               	movf	RtccWriteTime@pTm,w,c
  4369  00176E  26D9               	addwf	fsr2l,f,c
  4370  001770  5002               	movf	RtccWriteTime@pTm+1,w,c
  4371  001772  22DA               	addwfc	fsr2h,f,c
  4372  001774  0E5A               	movlw	90
  4373  001776  60DF               	cpfslt	indf2,c
  4374  001778  0012               	return	
  4375  00177A  EE20 F001          	lfsr	2,1
  4376  00177E  5001               	movf	RtccWriteTime@pTm,w,c
  4377  001780  26D9               	addwf	fsr2l,f,c
  4378  001782  5002               	movf	RtccWriteTime@pTm+1,w,c
  4379  001784  22DA               	addwfc	fsr2h,f,c
  4380  001786  0E5A               	movlw	90
  4381  001788  60DF               	cpfslt	indf2,c
  4382  00178A  0012               	return	
  4383  00178C  EE20 F003          	lfsr	2,3
  4384  001790  5001               	movf	RtccWriteTime@pTm,w,c
  4385  001792  26D9               	addwf	fsr2l,f,c
  4386  001794  5002               	movf	RtccWriteTime@pTm+1,w,c
  4387  001796  22DA               	addwfc	fsr2h,f,c
  4388  001798  0E24               	movlw	36
  4389  00179A  64DF               	cpfsgt	indf2,c
  4390  00179C  D002               	goto	l2511
  4391  00179E  0012               	return	
  4392                           
  4393                           ;	Return value of _RtccWriteTime is never used
  4394  0017A0  0012               	return	
  4395  0017A2                     l2511:
  4396  0017A2  EE20 F002          	lfsr	2,2
  4397  0017A6  5001               	movf	RtccWriteTime@pTm,w,c
  4398  0017A8  26D9               	addwf	fsr2l,f,c
  4399  0017AA  5002               	movf	RtccWriteTime@pTm+1,w,c
  4400  0017AC  22DA               	addwfc	fsr2h,f,c
  4401  0017AE  50DF               	movf	indf2,w,c
  4402  0017B0  6E09               	movwf	RtccWriteTime@tempMinSec+1,c
  4403  0017B2  EE20 F001          	lfsr	2,1
  4404  0017B6  5001               	movf	RtccWriteTime@pTm,w,c
  4405  0017B8  26D9               	addwf	fsr2l,f,c
  4406  0017BA  5002               	movf	RtccWriteTime@pTm+1,w,c
  4407  0017BC  22DA               	addwfc	fsr2h,f,c
  4408  0017BE  50DF               	movf	indf2,w,c
  4409  0017C0  6E08               	movwf	RtccWriteTime@tempMinSec,c
  4410  0017C2  5003               	movf	RtccWriteTime@di,w,c
  4411  0017C4  B4D8               	btfsc	status,2,c
  4412  0017C6  D002               	goto	l2517
  4413  0017C8  9CF2               	bcf	intcon,6,c	;volatile
  4414  0017CA  D000               	goto	l2517
  4415  0017CC                     l2517:
  4416  0017CC  0E00               	movlw	0
  4417  0017CE  BB3F               	btfsc	63,5,b	;volatile
  4418  0017D0  0E01               	movlw	1
  4419  0017D2  6E07               	movwf	RtccWriteTime@wasWrEn,c
  4420  0017D4  5007               	movf	RtccWriteTime@wasWrEn,w,c
  4421  0017D6  A4D8               	btfss	status,2,c
  4422  0017D8  D003               	goto	l2521
  4423  0017DA  EC62  F00F         	call	_RtccWrOn	;wreg free
  4424  0017DE  D000               	goto	l2521
  4425  0017E0                     l2521:
  4426  0017E0  0E00               	movlw	0
  4427  0017E2  BF3F               	btfsc	63,7,b	;volatile
  4428  0017E4  0E01               	movlw	1
  4429  0017E6  6E05               	movwf	RtccWriteTime@wasOn,c
  4430  0017E8  5005               	movf	RtccWriteTime@wasOn,w,c
  4431  0017EA  B4D8               	btfsc	status,2,c
  4432  0017EC  D007               	goto	l2527
  4433  0017EE  0E00               	movlw	0
  4434  0017F0  BE91               	btfsc	3985,7,c	;volatile
  4435  0017F2  0E01               	movlw	1
  4436  0017F4  6E06               	movwf	RtccWriteTime@wasAlrm,c
  4437  0017F6  010F               	movlb	15	; () banked
  4438  0017F8  9F3F               	bcf	63,7,b	;volatile
  4439  0017FA  D000               	goto	l2527
  4440  0017FC                     l2527:
  4441  0017FC  0EFC               	movlw	252
  4442  0017FE  010F               	movlb	15	; () banked
  4443  001800  173F               	andwf	63,f,b	;volatile
  4444  001802  010F               	movlb	15	; () banked
  4445  001804  813F               	bsf	63,0,b	;volatile
  4446                           
  4447                           ; BSR set to: 15
  4448  001806  CF98 F00A          	movff	3992,RtccWriteTime@tempHourWDay	;volatile
  4449                           
  4450                           ; BSR set to: 15
  4451  00180A  CF99 F00B          	movff	3993,RtccWriteTime@tempHourWDay+1	;volatile
  4452                           
  4453                           ; BSR set to: 15
  4454  00180E  EE20 F003          	lfsr	2,3
  4455  001812  5001               	movf	RtccWriteTime@pTm,w,c
  4456  001814  26D9               	addwf	fsr2l,f,c
  4457  001816  5002               	movf	RtccWriteTime@pTm+1,w,c
  4458  001818  22DA               	addwfc	fsr2h,f,c
  4459  00181A  50DF               	movf	indf2,w,c
  4460  00181C  6E0A               	movwf	RtccWriteTime@tempHourWDay,c
  4461                           
  4462                           ; BSR set to: 15
  4463  00181E  0EFC               	movlw	252
  4464  001820  010F               	movlb	15	; () banked
  4465  001822  173F               	andwf	63,f,b	;volatile
  4466                           
  4467                           ; BSR set to: 15
  4468  001824  010F               	movlb	15	; () banked
  4469  001826  813F               	bsf	63,0,b	;volatile
  4470                           
  4471                           ; BSR set to: 15
  4472  001828  C00A  FF98         	movff	RtccWriteTime@tempHourWDay,3992	;volatile
  4473                           
  4474                           ; BSR set to: 15
  4475  00182C  C00B  FF99         	movff	RtccWriteTime@tempHourWDay+1,3993	;volatile
  4476                           
  4477                           ; BSR set to: 15
  4478  001830  C008  FF98         	movff	RtccWriteTime@tempMinSec,3992	;volatile
  4479                           
  4480                           ; BSR set to: 15
  4481  001834  C009  FF99         	movff	RtccWriteTime@tempMinSec+1,3993	;volatile
  4482                           
  4483                           ; BSR set to: 15
  4484  001838  5005               	movf	RtccWriteTime@wasOn,w,c
  4485  00183A  B4D8               	btfsc	status,2,c
  4486  00183C  D00D               	goto	l2559
  4487                           
  4488                           ; BSR set to: 15
  4489  00183E  010F               	movlb	15	; () banked
  4490  001840  8F3F               	bsf	63,7,b	;volatile
  4491                           
  4492                           ; BSR set to: 15
  4493  001842  5006               	movf	RtccWriteTime@wasAlrm,w,c
  4494  001844  B4D8               	btfsc	status,2,c
  4495  001846  D002               	goto	l2555
  4496                           
  4497                           ; BSR set to: 15
  4498  001848  8E91               	bsf	3985,7,c	;volatile
  4499  00184A  D000               	goto	l2555
  4500  00184C                     l2555:
  4501                           
  4502                           ; BSR set to: 15
  4503  00184C  5007               	movf	RtccWriteTime@wasWrEn,w,c
  4504  00184E  B4D8               	btfsc	status,2,c
  4505  001850  D009               	goto	l2563
  4506                           
  4507                           ; BSR set to: 15
  4508  001852  EC62  F00F         	call	_RtccWrOn	;wreg free
  4509  001856  D006               	goto	l2563
  4510  001858                     l2559:
  4511  001858  5007               	movf	RtccWriteTime@wasWrEn,w,c
  4512  00185A  A4D8               	btfss	status,2,c
  4513  00185C  D003               	goto	l2563
  4514  00185E  010F               	movlb	15	; () banked
  4515  001860  9B3F               	bcf	63,5,b	;volatile
  4516                           
  4517                           ; BSR set to: 15
  4518  001862  D000               	goto	l2563
  4519  001864                     l2563:
  4520  001864  5003               	movf	RtccWriteTime@di,w,c
  4521  001866  B4D8               	btfsc	status,2,c
  4522  001868  0012               	return	
  4523  00186A  8CF2               	bsf	intcon,6,c	;volatile
  4524  00186C  0012               	return	
  4525                           
  4526                           ;	Return value of _RtccWriteTime is never used
  4527  00186E  0012               	return		;funcret
  4528  001870                     __end_of_RtccWriteTime:
  4529                           	opt stack 0
  4530                           tblptru	equ	0xFF8
  4531                           tblptrh	equ	0xFF7
  4532                           tblptrl	equ	0xFF6
  4533                           tablat	equ	0xFF5
  4534                           prodh	equ	0xFF4
  4535                           prodl	equ	0xFF3
  4536                           intcon	equ	0xFF2
  4537                           indf0	equ	0xFEF
  4538                           postinc0	equ	0xFEE
  4539                           fsr0h	equ	0xFEA
  4540                           fsr0l	equ	0xFE9
  4541                           wreg	equ	0xFE8
  4542                           postdec1	equ	0xFE5
  4543                           fsr1l	equ	0xFE1
  4544                           indf2	equ	0xFDF
  4545                           postinc2	equ	0xFDE
  4546                           postdec2	equ	0xFDD
  4547                           fsr2h	equ	0xFDA
  4548                           fsr2l	equ	0xFD9
  4549                           status	equ	0xFD8
  4550                           
  4551 ;; *************** function _RtccWriteDate *****************
  4552 ;; Defined at:
  4553 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteDate.c"
  4554 ;; Parameters:    Size  Location     Type
  4555 ;;  pDt             2    0[COMRAM] PTR const struct .
  4556 ;;		 -> RtccDate(4), 
  4557 ;;  di              1    2[COMRAM] enum E7121
  4558 ;; Auto vars:     Size  Location     Type
  4559 ;;  tempHourWDay    2   11[COMRAM] struct .
  4560 ;;  tempDayMonth    2    9[COMRAM] struct .
  4561 ;;  tempYear        2    6[COMRAM] struct .
  4562 ;;  wasWrEn         1    8[COMRAM] enum E7121
  4563 ;;  wasAlrm         1    5[COMRAM] enum E7121
  4564 ;;  wasOn           1    4[COMRAM] enum E7121
  4565 ;; Return value:  Size  Location     Type
  4566 ;;                  1    wreg      enum E7121
  4567 ;; Registers used:
  4568 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4569 ;; Tracked objects:
  4570 ;;		On entry : 0/0
  4571 ;;		On exit  : 0/0
  4572 ;;		Unchanged: 0/0
  4573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4574 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4575 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4576 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4577 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4578 ;;Total ram usage:       13 bytes
  4579 ;; Hardware stack levels used:    1
  4580 ;; Hardware stack levels required when called:    1
  4581 ;; This function calls:
  4582 ;;		_RtccWrOn
  4583 ;; This function is called by:
  4584 ;;		_Write_RTC
  4585 ;; This function uses a non-reentrant model
  4586 ;;
  4587                           
  4588                           	psect	text26
  4589  00161E                     __ptext26:
  4590                           	opt stack 0
  4591  00161E                     _RtccWriteDate:
  4592                           	opt stack 27
  4593                           
  4594                           ;incstack = 0
  4595  00161E  0E00               	movlw	0
  4596  001620  6E06               	movwf	RtccWriteDate@wasAlrm,c
  4597  001622  EE20 F002          	lfsr	2,2
  4598  001626  5001               	movf	RtccWriteDate@pDt,w,c
  4599  001628  26D9               	addwf	fsr2l,f,c
  4600  00162A  5002               	movf	RtccWriteDate@pDt+1,w,c
  4601  00162C  22DA               	addwfc	fsr2h,f,c
  4602  00162E  0E13               	movlw	19
  4603  001630  60DF               	cpfslt	indf2,c
  4604  001632  0012               	return	
  4605  001634  EE20 F002          	lfsr	2,2
  4606  001638  5001               	movf	RtccWriteDate@pDt,w,c
  4607  00163A  26D9               	addwf	fsr2l,f,c
  4608  00163C  5002               	movf	RtccWriteDate@pDt+1,w,c
  4609  00163E  22DA               	addwfc	fsr2h,f,c
  4610  001640  50DF               	movf	indf2,w,c
  4611  001642  B4D8               	btfsc	status,2,c
  4612  001644  0012               	return	
  4613  001646  EE20 F001          	lfsr	2,1
  4614  00164A  5001               	movf	RtccWriteDate@pDt,w,c
  4615  00164C  26D9               	addwf	fsr2l,f,c
  4616  00164E  5002               	movf	RtccWriteDate@pDt+1,w,c
  4617  001650  22DA               	addwfc	fsr2h,f,c
  4618  001652  0E32               	movlw	50
  4619  001654  60DF               	cpfslt	indf2,c
  4620  001656  0012               	return	
  4621  001658  EE20 F001          	lfsr	2,1
  4622  00165C  5001               	movf	RtccWriteDate@pDt,w,c
  4623  00165E  26D9               	addwf	fsr2l,f,c
  4624  001660  5002               	movf	RtccWriteDate@pDt+1,w,c
  4625  001662  22DA               	addwfc	fsr2h,f,c
  4626  001664  50DF               	movf	indf2,w,c
  4627  001666  B4D8               	btfsc	status,2,c
  4628  001668  0012               	return	
  4629  00166A  EE20 F003          	lfsr	2,3
  4630  00166E  5001               	movf	RtccWriteDate@pDt,w,c
  4631  001670  26D9               	addwf	fsr2l,f,c
  4632  001672  5002               	movf	RtccWriteDate@pDt+1,w,c
  4633  001674  22DA               	addwfc	fsr2h,f,c
  4634  001676  0E99               	movlw	153
  4635  001678  64DF               	cpfsgt	indf2,c
  4636  00167A  D002               	goto	l2579
  4637  00167C  0012               	return	
  4638                           
  4639                           ;	Return value of _RtccWriteDate is never used
  4640  00167E  0012               	return	
  4641  001680                     l2579:
  4642  001680  EE20 F003          	lfsr	2,3
  4643  001684  5001               	movf	RtccWriteDate@pDt,w,c
  4644  001686  26D9               	addwf	fsr2l,f,c
  4645  001688  5002               	movf	RtccWriteDate@pDt+1,w,c
  4646  00168A  22DA               	addwfc	fsr2h,f,c
  4647  00168C  50DF               	movf	indf2,w,c
  4648  00168E  6E07               	movwf	RtccWriteDate@tempYear,c
  4649  001690  EE20 F001          	lfsr	2,1
  4650  001694  5001               	movf	RtccWriteDate@pDt,w,c
  4651  001696  26D9               	addwf	fsr2l,f,c
  4652  001698  5002               	movf	RtccWriteDate@pDt+1,w,c
  4653  00169A  22DA               	addwfc	fsr2h,f,c
  4654  00169C  50DF               	movf	indf2,w,c
  4655  00169E  6E0A               	movwf	RtccWriteDate@tempDayMonth,c
  4656  0016A0  EE20 F002          	lfsr	2,2
  4657  0016A4  5001               	movf	RtccWriteDate@pDt,w,c
  4658  0016A6  26D9               	addwf	fsr2l,f,c
  4659  0016A8  5002               	movf	RtccWriteDate@pDt+1,w,c
  4660  0016AA  22DA               	addwfc	fsr2h,f,c
  4661  0016AC  50DF               	movf	indf2,w,c
  4662  0016AE  6E0B               	movwf	RtccWriteDate@tempDayMonth+1,c
  4663  0016B0  5003               	movf	RtccWriteDate@di,w,c
  4664  0016B2  B4D8               	btfsc	status,2,c
  4665  0016B4  D002               	goto	l2585
  4666  0016B6  9CF2               	bcf	intcon,6,c	;volatile
  4667  0016B8  D000               	goto	l2585
  4668  0016BA                     l2585:
  4669  0016BA  0E00               	movlw	0
  4670  0016BC  BB3F               	btfsc	63,5,b	;volatile
  4671  0016BE  0E01               	movlw	1
  4672  0016C0  6E09               	movwf	RtccWriteDate@wasWrEn,c
  4673  0016C2  5009               	movf	RtccWriteDate@wasWrEn,w,c
  4674  0016C4  A4D8               	btfss	status,2,c
  4675  0016C6  D003               	goto	l2589
  4676  0016C8  EC62  F00F         	call	_RtccWrOn	;wreg free
  4677  0016CC  D000               	goto	l2589
  4678  0016CE                     l2589:
  4679  0016CE  0E00               	movlw	0
  4680  0016D0  BF3F               	btfsc	63,7,b	;volatile
  4681  0016D2  0E01               	movlw	1
  4682  0016D4  6E05               	movwf	RtccWriteDate@wasOn,c
  4683  0016D6  5005               	movf	RtccWriteDate@wasOn,w,c
  4684  0016D8  B4D8               	btfsc	status,2,c
  4685  0016DA  D007               	goto	l2595
  4686  0016DC  0E00               	movlw	0
  4687  0016DE  BE91               	btfsc	3985,7,c	;volatile
  4688  0016E0  0E01               	movlw	1
  4689  0016E2  6E06               	movwf	RtccWriteDate@wasAlrm,c
  4690  0016E4  010F               	movlb	15	; () banked
  4691  0016E6  9F3F               	bcf	63,7,b	;volatile
  4692  0016E8  D000               	goto	l2595
  4693  0016EA                     l2595:
  4694  0016EA  0EFC               	movlw	252
  4695  0016EC  010F               	movlb	15	; () banked
  4696  0016EE  173F               	andwf	63,f,b	;volatile
  4697  0016F0  010F               	movlb	15	; () banked
  4698  0016F2  813F               	bsf	63,0,b	;volatile
  4699                           
  4700                           ; BSR set to: 15
  4701  0016F4  CF98 F00C          	movff	3992,RtccWriteDate@tempHourWDay	;volatile
  4702                           
  4703                           ; BSR set to: 15
  4704  0016F8  CF99 F00D          	movff	3993,RtccWriteDate@tempHourWDay+1	;volatile
  4705                           
  4706                           ; BSR set to: 15
  4707  0016FC  C001  FFD9         	movff	RtccWriteDate@pDt,fsr2l
  4708  001700  C002  FFDA         	movff	RtccWriteDate@pDt+1,fsr2h
  4709  001704  50DF               	movf	indf2,w,c
  4710  001706  6E0D               	movwf	RtccWriteDate@tempHourWDay+1,c
  4711                           
  4712                           ; BSR set to: 15
  4713  001708  0EFC               	movlw	252
  4714  00170A  010F               	movlb	15	; () banked
  4715  00170C  173F               	andwf	63,f,b	;volatile
  4716                           
  4717                           ; BSR set to: 15
  4718  00170E  0E03               	movlw	3
  4719  001710  010F               	movlb	15	; () banked
  4720  001712  133F               	iorwf	63,f,b	;volatile
  4721                           
  4722                           ; BSR set to: 15
  4723  001714  C007  FF98         	movff	RtccWriteDate@tempYear,3992	;volatile
  4724                           
  4725                           ; BSR set to: 15
  4726  001718  C008  FF99         	movff	RtccWriteDate@tempYear+1,3993	;volatile
  4727                           
  4728                           ; BSR set to: 15
  4729  00171C  C00A  FF98         	movff	RtccWriteDate@tempDayMonth,3992	;volatile
  4730                           
  4731                           ; BSR set to: 15
  4732  001720  C00B  FF99         	movff	RtccWriteDate@tempDayMonth+1,3993	;volatile
  4733                           
  4734                           ; BSR set to: 15
  4735  001724  C00C  FF98         	movff	RtccWriteDate@tempHourWDay,3992	;volatile
  4736                           
  4737                           ; BSR set to: 15
  4738  001728  C00D  FF99         	movff	RtccWriteDate@tempHourWDay+1,3993	;volatile
  4739                           
  4740                           ; BSR set to: 15
  4741  00172C  5005               	movf	RtccWriteDate@wasOn,w,c
  4742  00172E  B4D8               	btfsc	status,2,c
  4743  001730  D00D               	goto	l2631
  4744                           
  4745                           ; BSR set to: 15
  4746  001732  010F               	movlb	15	; () banked
  4747  001734  8F3F               	bsf	63,7,b	;volatile
  4748                           
  4749                           ; BSR set to: 15
  4750  001736  5006               	movf	RtccWriteDate@wasAlrm,w,c
  4751  001738  B4D8               	btfsc	status,2,c
  4752  00173A  D002               	goto	l2627
  4753                           
  4754                           ; BSR set to: 15
  4755  00173C  8E91               	bsf	3985,7,c	;volatile
  4756  00173E  D000               	goto	l2627
  4757  001740                     l2627:
  4758                           
  4759                           ; BSR set to: 15
  4760  001740  5009               	movf	RtccWriteDate@wasWrEn,w,c
  4761  001742  B4D8               	btfsc	status,2,c
  4762  001744  D009               	goto	l2635
  4763                           
  4764                           ; BSR set to: 15
  4765  001746  EC62  F00F         	call	_RtccWrOn	;wreg free
  4766  00174A  D006               	goto	l2635
  4767  00174C                     l2631:
  4768  00174C  5009               	movf	RtccWriteDate@wasWrEn,w,c
  4769  00174E  A4D8               	btfss	status,2,c
  4770  001750  D003               	goto	l2635
  4771  001752  010F               	movlb	15	; () banked
  4772  001754  9B3F               	bcf	63,5,b	;volatile
  4773                           
  4774                           ; BSR set to: 15
  4775  001756  D000               	goto	l2635
  4776  001758                     l2635:
  4777  001758  5003               	movf	RtccWriteDate@di,w,c
  4778  00175A  B4D8               	btfsc	status,2,c
  4779  00175C  0012               	return	
  4780  00175E  9CF2               	bcf	intcon,6,c	;volatile
  4781  001760  0012               	return	
  4782                           
  4783                           ;	Return value of _RtccWriteDate is never used
  4784  001762  0012               	return		;funcret
  4785  001764                     __end_of_RtccWriteDate:
  4786                           	opt stack 0
  4787                           tblptru	equ	0xFF8
  4788                           tblptrh	equ	0xFF7
  4789                           tblptrl	equ	0xFF6
  4790                           tablat	equ	0xFF5
  4791                           prodh	equ	0xFF4
  4792                           prodl	equ	0xFF3
  4793                           intcon	equ	0xFF2
  4794                           indf0	equ	0xFEF
  4795                           postinc0	equ	0xFEE
  4796                           fsr0h	equ	0xFEA
  4797                           fsr0l	equ	0xFE9
  4798                           wreg	equ	0xFE8
  4799                           postdec1	equ	0xFE5
  4800                           fsr1l	equ	0xFE1
  4801                           indf2	equ	0xFDF
  4802                           postinc2	equ	0xFDE
  4803                           postdec2	equ	0xFDD
  4804                           fsr2h	equ	0xFDA
  4805                           fsr2l	equ	0xFD9
  4806                           status	equ	0xFD8
  4807                           
  4808 ;; *************** function _RtccWrOn *****************
  4809 ;; Defined at:
  4810 ;;		line 21 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWrOn.c"
  4811 ;; Parameters:    Size  Location     Type
  4812 ;;		None
  4813 ;; Auto vars:     Size  Location     Type
  4814 ;;  data            2    0        unsigned int 
  4815 ;; Return value:  Size  Location     Type
  4816 ;;		None               void
  4817 ;; Registers used:
  4818 ;;		wreg, status,2
  4819 ;; Tracked objects:
  4820 ;;		On entry : 0/0
  4821 ;;		On exit  : 0/0
  4822 ;;		Unchanged: 0/0
  4823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4827 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4828 ;;Total ram usage:        0 bytes
  4829 ;; Hardware stack levels used:    1
  4830 ;; This function calls:
  4831 ;;		Nothing
  4832 ;; This function is called by:
  4833 ;;		_Write_RTC
  4834 ;;		_RtccWriteDate
  4835 ;;		_RtccWriteTime
  4836 ;; This function uses a non-reentrant model
  4837 ;;
  4838                           
  4839                           	psect	text27
  4840  001EC4                     __ptext27:
  4841                           	opt stack 0
  4842  001EC4                     _RtccWrOn:
  4843                           	opt stack 27
  4844                           
  4845                           ;incstack = 0
  4846  001EC4  9CF2               	bcf	intcon,6,c	;volatile
  4847  001EC6  0E55               	movlw	85
  4848  001EC8  6EA7               	movwf	4007,c	;volatile
  4849  001ECA  0EAA               	movlw	170
  4850  001ECC  6EA7               	movwf	4007,c	;volatile
  4851  001ECE  010F               	movlb	15	; () banked
  4852  001ED0  8B3F               	bsf	63,5,b	;volatile
  4853                           
  4854                           ; BSR set to: 15
  4855  001ED2  8CF2               	bsf	intcon,6,c	;volatile
  4856                           
  4857                           ; BSR set to: 15
  4858  001ED4  0012               	return		;funcret
  4859  001ED6                     __end_of_RtccWrOn:
  4860                           	opt stack 0
  4861                           tblptru	equ	0xFF8
  4862                           tblptrh	equ	0xFF7
  4863                           tblptrl	equ	0xFF6
  4864                           tablat	equ	0xFF5
  4865                           prodh	equ	0xFF4
  4866                           prodl	equ	0xFF3
  4867                           intcon	equ	0xFF2
  4868                           indf0	equ	0xFEF
  4869                           postinc0	equ	0xFEE
  4870                           fsr0h	equ	0xFEA
  4871                           fsr0l	equ	0xFE9
  4872                           wreg	equ	0xFE8
  4873                           postdec1	equ	0xFE5
  4874                           fsr1l	equ	0xFE1
  4875                           indf2	equ	0xFDF
  4876                           postinc2	equ	0xFDE
  4877                           postdec2	equ	0xFDD
  4878                           fsr2h	equ	0xFDA
  4879                           fsr2l	equ	0xFD9
  4880                           status	equ	0xFD8
  4881                           tblptru	equ	0xFF8
  4882                           tblptrh	equ	0xFF7
  4883                           tblptrl	equ	0xFF6
  4884                           tablat	equ	0xFF5
  4885                           prodh	equ	0xFF4
  4886                           prodl	equ	0xFF3
  4887                           intcon	equ	0xFF2
  4888                           indf0	equ	0xFEF
  4889                           postinc0	equ	0xFEE
  4890                           fsr0h	equ	0xFEA
  4891                           fsr0l	equ	0xFE9
  4892                           wreg	equ	0xFE8
  4893                           postdec1	equ	0xFE5
  4894                           fsr1l	equ	0xFE1
  4895                           indf2	equ	0xFDF
  4896                           postinc2	equ	0xFDE
  4897                           postdec2	equ	0xFDD
  4898                           fsr2h	equ	0xFDA
  4899                           fsr2l	equ	0xFD9
  4900                           status	equ	0xFD8
  4901                           
  4902                           	psect	rparam
  4903  0000                     tblptru	equ	0xFF8
  4904                           tblptrh	equ	0xFF7
  4905                           tblptrl	equ	0xFF6
  4906                           tablat	equ	0xFF5
  4907                           prodh	equ	0xFF4
  4908                           prodl	equ	0xFF3
  4909                           intcon	equ	0xFF2
  4910                           indf0	equ	0xFEF
  4911                           postinc0	equ	0xFEE
  4912                           fsr0h	equ	0xFEA
  4913                           fsr0l	equ	0xFE9
  4914                           wreg	equ	0xFE8
  4915                           postdec1	equ	0xFE5
  4916                           fsr1l	equ	0xFE1
  4917                           indf2	equ	0xFDF
  4918                           postinc2	equ	0xFDE
  4919                           postdec2	equ	0xFDD
  4920                           fsr2h	equ	0xFDA
  4921                           fsr2l	equ	0xFD9
  4922                           status	equ	0xFD8


Data Sizes:
    Strings     132
    Constant    14
    Data        13
    BSS         71
    Persistent  13
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     39      93
    BANK0           160      0      44
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    RtccWriteTime@pTm	PTR const struct . size(2) Largest target is 4
		 -> RtccTime(COMRAM[4]), 

    RtccWriteDate@pDt	PTR const struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_21(CODE[10]), STR_20(CODE[15]), STR_17(CODE[5]), STR_14(CODE[5]), 
		 -> STR_13(CODE[5]), STR_12(CODE[5]), STR_10(CODE[5]), STR_9(CODE[5]), 
		 -> STR_8(CODE[5]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> buffer2(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    lcd_putrs@ptr	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_27(CODE[8]), STR_26(CODE[10]), STR_25(CODE[4]), STR_24(CODE[3]), 
		 -> STR_23(CODE[11]), STR_22(CODE[11]), STR_19(CODE[2]), STR_18(CODE[2]), 
		 -> STR_16(CODE[2]), STR_15(CODE[2]), STR_11(CODE[2]), STR_7(CODE[2]), 
		 -> buffer2(BANK0[20]), STR_3(CODE[10]), STR_2(CODE[13]), STR_1(CODE[33]), 


Critical Paths under _main in COMRAM

    _set_vision->_twinkle
    _write_Date->_sprintf
    _twinkle->_read_keyboard
    _read_keyboard->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcd_putrs->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    __delay_s->___awdiv
    _clear->_lcd_comand
    _caratula->_lcd_comand
    _lcd_init->_lcd_send_byte
    _lcd_comand->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _Write_RTC->_RtccWriteDate

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   44190
                                             37 COMRAM     2     2      0
                              _Setup
                           _caratula
                         _lcd_gotoxy
                          _lcd_putrs
                      _read_keyboard
                         _set_vision
 ---------------------------------------------------------------------------------
 (1) _set_vision                                           0     0      0   27551
                              _clear
                         _lcd_gotoxy
                          _lcd_putrs
                            _twinkle
                         _write_Date
 ---------------------------------------------------------------------------------
 (2) _write_Date                                           0     0      0    8303
                         _lcd_gotoxy
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _twinkle                                              1     1      0   13495
                                             36 COMRAM     1     1      0
                           __delay_s
                         _lcd_gotoxy
                          _lcd_putrs
                      _read_keyboard
 ---------------------------------------------------------------------------------
 (3) _read_keyboard                                        1     1      0    6970
                                             35 COMRAM     1     1      0
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             32    22     10    3196
                                             12 COMRAM    23    13     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     287
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcd_putrs                                            2     0      2    3774
                                              8 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (4) _lcd_putc                                             1     1      0    2001
                                              7 COMRAM     1     1      0
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (5) _lcd_gotoxy                                           3     2      1    1333
                                              4 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (3) __delay_s                                             7     5      2    1394
                                              8 COMRAM     7     5      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _clear                                                1     1      0     646
                                              5 COMRAM     1     1      0
                         _lcd_comand
 ---------------------------------------------------------------------------------
 (1) _caratula                                             0     0      0     646
                         _lcd_comand
 ---------------------------------------------------------------------------------
 (1) _Setup                                                0     0      0    3892
                          _Write_RTC
                         _lcd_comand
                           _lcd_init
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             1     1      0     841
                                              4 COMRAM     1     1      0
                        _Delay1KTCYx
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _lcd_comand                                           1     1      0     646
                                              4 COMRAM     1     1      0
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (5) _lcd_send_byte                                        2     1      1     624
                                              2 COMRAM     2     1      1
                       _Delay100TCYx
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (6) _lcd_send_nibble                                      2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _Delay100TCYx                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Write_RTC                                            0     0      0    2405
                           _RtccWrOn
                      _RtccWriteDate
                      _RtccWriteTime
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1196
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _RtccWriteTime                                       11     8      3     537
                                              0 COMRAM    11     8      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (3) _RtccWriteDate                                       13    10      3     672
                                              0 COMRAM    13    10      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (4) _RtccWrOn                                             2     2      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Setup
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_init
       _Delay1KTCYx
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
       _lcd_send_nibble
   _caratula
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
   _lcd_gotoxy
     _lcd_send_byte
       _Delay100TCYx
       _lcd_send_nibble
   _lcd_putrs
     _lcd_putc
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
   _read_keyboard
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _set_vision
     _clear
       _lcd_comand
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _twinkle
       __delay_s
         ___awdiv
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _read_keyboard
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _write_Date
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      2C       5       27.5%
BITCOMRAM           5F      0       1       0        1.1%
COMRAM              5F     27      5D       1       97.9%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      89       6        0.0%
DATA                 0      0      89       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sun Sep 04 19:40:22 2016

                        _a 002C                          _b 002E                          _c 0030  
                        _i 0032                          _j 0034                          _k 0036  
              _state_alarm 005C                         l75 1E06                         l76 1E08  
           ?_lcd_send_byte 0003               ___awdiv@sign 0006        ___wmul@multiplicand 0003  
              lcd_comand@d 0005               __CFG_CP0$OFF 000000                        l201 0FD0  
                      l210 1034                        l202 0FCC                        l221 10C2  
                      l213 1052                        l205 1004                        l230 110C  
                      l222 10BE                        l214 104E                        l206 1000  
                      l241 11B4                        l233 114C                        l225 10F6  
                      l217 108E                        l209 1038                        l250 11EC  
                      l242 11B0                        l234 1148                        l226 10F2  
                      l218 108A                        l253 1224                        l245 11CE  
                      l237 1180                        l229 1110                        l262 1254  
                      l254 1220                        l246 11CA                        l238 117C  
                      l257 123E                        l249 11F0                        l258 123A  
                      l622 1444                        l567 1C5C                        _dia 0052  
                      _key 003A                        _mes 0058                        wreg 000FE8  
              lcd_gotoxy@x 0006                lcd_gotoxy@y 0005                       l2201 1D22  
                     l2203 1D2E                       l2205 1D3A                       l2303 1346  
                     l2401 18EA                       l2209 1D46                       l1266 1C10  
                     l2235 1BD4                       l2219 1E80                       l2331 13E2  
                     l2323 13BA                       l2315 138A                       l2307 134C  
                     l1276 1D08                       l2405 18FA                       l2165 1EB4  
                     l1701 1EA2                       l2237 1BDE                       l2333 13EC  
                     l2309 136E                       l2511 17A2                       l2191 1E50  
                     l2247 1C04                       l2239 1BE6                       l2263 1CFC  
                     l2255 1CD4                       l2351 144A                       l2343 141A  
                     l2327 13BE                       l2319 1396                       l2521 17E0  
                     l2193 1E56                       l2273 1C9E                       l2257 1CDE  
                     l2345 1422                       l2337 13F8                       l2361 14C6  
                     l2259 1CE6                       l2291 12C4                       l2283 1296  
                     l2517 17CC                       l2373 1886                       l2269 1C74  
                     l2357 149E                       l2285 12A4                       l2277 127C  
                     l2631 174C                       l2527 17FC                       l2199 1D16  
                     l2295 12E2                       l2359 14AA                       l2385 18AE  
                     l2705 192C                       l2289 12AE                       l2635 1758  
                     l2627 1740                       l2563 1864                       l2555 184C  
                     l2387 18B8                       l2379 1898                       l2723 1958  
                     l2715 1944                       l2803 1B3C                       l2397 18DE  
                     l2389 18C0                       l2709 1934                       l2645 1C48  
                     l2559 1858                       l2807 1B4E                       l2815 1A0E  
                     l2585 16BA                       l2497 125C                       l2595 16EA  
                     l2579 1680                       l2747 1B64                       l2589 16CE  
                     l2759 1BB0                       l2795 1B0A                       l2797 1B18  
                     STR_1 0F0F                       STR_2 0F3F                       STR_3 0F6B  
                     STR_4 0F7D                       STR_5 0F7D                       STR_6 0F7D  
                     STR_7 0F8D                       STR_8 0F7D                       STR_9 0F7D  
                     u1200 1AA4                       u1220 1ABE                       u1240 1ADA  
                     u1218 1AA6                       u1180 1A8C                       u1238 1AC0  
                     u1360 1C94                       u1258 1ADC                       u1370 1CBE  
                     u1198 1A8E                       u2407 1EB6                       u1367 1C8A  
                     u1377 1CB4                       u2357 1A70                       u2367 1262  
                     u2377 1C4E                       u2387 1E96                       u2397 1EA4  
         ?_lcd_send_nibble 0001                       _anio 0050                       _flag 02E8  
                     _main 1A04                       _hora 0056                       fsr0h 000FEA  
                     indf0 000FEF                       fsr0l 000FE9                       fsr2h 000FDA  
                     fsr1l 000FE1                       indf2 000FDF                       fsr2l 000FD9  
            __CFG_T1DIG$ON 000000                       prodh 000FF4                       prodl 000FF3  
                     start 0000              __CFG_IESO$OFF 000000               ___param_bank 000010  
              _Delay1KTCYx 1EA0              __CFG_PLLDIV$1 000000                      ?_main 0001  
          __end_of___awdiv 1906                      STR_10 0F7D                      STR_11 0F8F  
                    STR_12 0F7D                      STR_20 0F30                      STR_13 0F7D  
                    STR_21 0F61                      STR_14 0F7D                      STR_22 0F4C  
                    STR_23 0F25                      STR_15 0F91                      STR_16 0F8B  
                    STR_24 0F86                      STR_17 0F7D                      STR_25 0F82  
                    STR_18 0F89                      STR_26 0F57                      STR_19 0F7B  
                    STR_27 0F75      __size_of_Delay100TCYx 0012            ___awdiv@divisor 0003  
          __end_of___lwdiv 1C1A            __end_of___lwmod 1D12            ___awdiv@counter 0005  
                    _TRISA 000F92                      _TRISB 000F93                      _TRISC 000F94  
           __CFG_FCMEN$OFF 000000                      _Setup 1D5E                      _clear 1E8A  
          __end_of_dpowers 0F0B                      _mes_d 004A                      _mes_u 004B  
          __end_of_isdigit 1E8A             __pbitbssCOMRAM 02E8                      tablat 000FF5  
             lcd_putrs@ptr 0009                      status 000FD8            __end_of_sprintf 14D6  
          __end_of_twinkle 1BBE    __CFG_DSWDTOSC$INTOSCREF 000000            __initialization 1DA6  
             _Delay100TCYx 1EB2               __end_of_main 1A80            ??_lcd_send_byte 0004  
                   ??_main 0026              __activetblptr 000002           __end_of_RtccWrOn 1ED6  
                   ?_Setup 0001                     ?_clear 0001                     _ADCON0 000FC2  
                   _ADCON1 000FC1                     _EECON2 000FA7                     _ANCON0 000F48  
                   _ANCON1 000F49           ___awdiv@dividend 0001           __end_of__delay_s 1C72  
           __CFG_WDTEN$OFF 000000           RtccWriteDate@pDt 0001                     _RTCCFG 000F3F  
           __CFG_WPCFG$OFF 000000           __end_of_caratula 1EFA             __CFG_WPDIS$OFF 000000  
           __CFG_XINST$OFF 000000           __end_of_lcd_init 1986           __end_of_lcd_putc 1D5E  
                   ___wmul 1E1C                  ??___awdiv 0005             __CFG_STVREN$ON 000000  
                   _diasem 0054                     _anio_d 0043                     _anio_u 0044  
                ??___lwdiv 0005                  ??___lwmod 000C                     _hora_d 0048  
                   _hora_u 0049                     clear_0 1DAC                     clear_1 1DBA  
         ___awdiv@quotient 0007                     _minuto 005A      __end_of_RtccWriteDate 1764  
    __end_of_RtccWriteTime 1870           RtccWriteTime@pTm 0001               __pdataCOMRAM 0050  
                ??_isdigit 0001               __mediumconst 0000                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8                  ??_sprintf 0017  
                ??_twinkle 0025     __size_of_read_keyboard 02DE                 __accesstop 0060  
  __end_of__initialization 1DE0         __size_of_Write_RTC 0148              ___rparam_used 000001  
           __pcstackCOMRAM 0001              __end_of_Setup 1DA6              __end_of_clear 1EA0  
          __CFG_DSWDTPS$G2 000000            __CFG_OSC$INTOSC 000000                    ??_Setup 000E  
        lcd_gotoxy@address 0007                    ??_clear 0006         __size_of_lcd_putrs 0054  
             sprintf@width 0021                 __pbssBANK0 0060                 _dia_semana 0045  
RtccWriteTime@tempHourWDay 000A                 __pnvCOMRAM 0043                  ?_RtccWrOn 0001  
           lcd_send_byte@n 0003                    ?___wmul 0001              _read_keyboard 0F94  
             ?_Delay1KTCYx 0001                  ?__delay_s 0009          __end_of_Write_RTC 161E  
           __delay_s@index 000E                 _lcd_comand 1ED6                  ?_caratula 0001  
               _lcd_gotoxy 1E44                    _RTCVALH 000F99                    _RTCVALL 000F98  
                ?_lcd_init 0001                  ?_lcd_putc 0001                    __Hparam 0000  
                  __Lparam 0000   __size_of_lcd_send_nibble 0076                 ??_RtccWrOn 0001  
                  ___awdiv 1870          __end_of_lcd_putrs 1CC6             ?_read_keyboard 0001  
          __size_of___wmul 0028                    ___lwdiv 1BBE                    ___lwmod 1CC6  
             __psmallconst 0F00                _RtccTimeVal 0028                    __pcinit 1DA6  
                  _fecha_d 0046                    _fecha_u 0047                    __ramtop 0F00  
               ??__delay_s 000B                    __ptext0 1A04                    __ptext1 1AF6  
                  __ptext2 1986                    __ptext3 1B60                    __ptext4 0F94  
                  __ptext5 1272                    __ptext6 1E68                    __ptext7 1E1C  
                  __ptext8 1CC6                    __ptext9 1BBE                    _buffer2 0078  
                _T1CONbits 000FCD                    _dpowers 0F01                    _isdigit 1E68  
               ??_caratula 0006                    _segundo 0038                    _sprintf 1272  
               ??_lcd_init 0005                 ??_lcd_putc 0008                    _twinkle 1B60  
     end_of_initialization 1DE0       lcd_send_byte@address 0004              __Lmediumconst 0000  
             twinkle@input 0025                    postdec1 000FE5                    postdec2 000FDD  
                  postinc0 000FEE                    postinc2 000FDE                 _set_vision 1AF6  
    __end_of_lcd_send_byte 1E1C                  _PORTAbits 000F80                  _PORTCbits 000F82  
         __CFG_DSBOREN$OFF 000000                ?_lcd_comand 0001           __CFG_CPUDIV$OSC1 000000  
                _TRISBbits 000F93                ?_lcd_gotoxy 0005            _LCD_INIT_STRING 0F0B  
         __CFG_IOL1WAY$OFF 000000  RtccWriteDate@tempDayMonth 000A        __CFG_MSSP7B_EN$MSK7 000000  
          ??_read_keyboard 0024           Delay100TCYx@unit 0001                 _write_Date 1986  
              __delay_s@it 000C             __end_of___wmul 1E44              __pidataCOMRAM 1EE4  
RtccWriteDate@tempHourWDay 000C          ??_lcd_send_nibble 0001       __size_of_Delay1KTCYx 0012  
         __CFG_DSWDTEN$OFF 000000        start_initialization 1DA6       RtccWriteTime@wasAlrm 0006  
     RtccWriteTime@wasWrEn 0007     __size_of_RtccWriteDate 0146            RtccWriteDate@di 0003  
   __size_of_RtccWriteTime 010C        __size_of_lcd_comand 000E        __size_of_lcd_gotoxy 0024  
                 ??___wmul 0005                ?_set_vision 0001          __size_of_RtccWrOn 0012  
          RtccWriteTime@di 0003           __CFG_LPT1OSC$OFF 000000                _ALRMCFGbits 000F91  
  __end_of_LCD_INIT_STRING 0F0F          __size_of__delay_s 0058                __pbssCOMRAM 0028  
                _Write_RTC 14D6               _isdigit$2330 0002          __size_of_caratula 0008  
          Delay1KTCYx@unit 0001          __size_of_lcd_init 0080                sprintf@flag 001D  
        __size_of_lcd_putc 004C                sprintf@prec 0020           ___lwdiv@dividend 0001  
            ?_Delay100TCYx 0001                   ?___awdiv 0001                   ?___lwdiv 0001  
              ?_write_Date 0001                   ?___lwmod 0008    RtccWriteTime@tempMinSec 0008  
                _lcd_putrs 1C72              _RtccWriteDate 161E                __smallconst 0F00  
            _RtccWriteTime 1764                   ?_isdigit 0001       __CFG_RTCOSC$T1OSCREF 000000  
           __size_of_Setup 0048                 ?_Write_RTC 0001           ___lwdiv@quotient 0005  
           __size_of_clear 0016                   ?_sprintf 000D                   ?_twinkle 0001  
      __size_of_set_vision 006A           _RtccAlrmTimeDate 0060             ___wmul@product 0005  
          __delay_s@millis 0009                   _LATAbits 000F89                   _LATBbits 000F8A  
                 _PIE3bits 000FA3                  _segundo_d 004E             ??_Delay100TCYx 0001  
                _segundo_u 004F           __CFG_WDTPS$32768 000000         RtccWriteDate@wasOn 0005  
       _Rtcc_read_TimeDate 0070             ?_RtccWriteDate 0001                 ?_lcd_putrs 0009  
        ___wmul@multiplier 0001             ?_RtccWriteTime 0001                  lcd_init@i 0005  
             ??_lcd_comand 0005                  main@input 0027                  lcd_putc@c 0008  
             ??_lcd_gotoxy 0006                  copy_data0 1DD4        __size_of_write_Date 007E  
          _lcd_send_nibble 1A80                   __Hrparam 0000                   _RtccDate 003B  
                 __Lrparam 0000                   _RtccTime 003F                   _RtccWrOn 1EC4  
       __end_of_lcd_comand 1EE4         __end_of_lcd_gotoxy 1E68           __size_of___awdiv 0096  
         __size_of___lwdiv 005C           __size_of___lwmod 004C                   __delay_s 1C1A  
             _RtccTimeDate 0068                 sprintf@val 001E                   _caratula 1EF2  
         __size_of_isdigit 0022            ___lwdiv@divisor 0003                ??_Write_RTC 000E  
          ___lwdiv@counter 0007                   __ptext10 1C72                   __ptext11 1D12  
                 __ptext20 1DEA                   __ptext12 1E44                   __ptext21 1A80  
                 __ptext13 1C1A                   __ptext22 1EB2                   __ptext14 1E8A  
                 __ptext23 14D6                   __ptext15 1EF2                   __ptext24 1870  
                 __ptext16 1D5E                   __ptext25 1764                   __ptext17 1906  
                 __ptext26 161E                   __ptext18 1EA0                   __ptext27 1EC4  
                 __ptext19 1ED6                   _lcd_init 1906                   _lcd_putc 1D12  
         __size_of_sprintf 0264           __size_of_twinkle 005E     __size_of_lcd_send_byte 0032  
            __size_of_main 007C                   _minuto_d 004C                   _minuto_u 004D  
             ??_set_vision 0026      __end_of_read_keyboard 1272              ??_Delay1KTCYx 0001  
          ??_RtccWriteDate 0004            ??_RtccWriteTime 0004                ??_lcd_putrs 000B  
              _OSCTUNEbits 000F9B                 _INTCONbits 000FF2         RtccWriteTime@wasOn 0005  
     __end_of_Delay100TCYx 1EC4                   isdigit@c 0003                  sprintf@ap 001B  
  __end_of_lcd_send_nibble 1AF6                  sprintf@sp 000D         __end_of_set_vision 1B60  
         ___lwmod@dividend 0008                 _OSCCONbits 000FD3      RtccWriteDate@tempYear 0007  
             ??_write_Date 0024              _lcd_send_byte 1DEA                 _RTCCFGbits 000F3F  
                 sprintf@c 0023                   sprintf@f 000F            ___lwmod@divisor 000A  
      __end_of_Delay1KTCYx 1EB2            ___lwmod@counter 000C       RtccWriteDate@wasAlrm 0006  
     RtccWriteDate@wasWrEn 0009         __end_of_write_Date 1A04      lcd_send_nibble@nibble 0002  
