

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Sep 08 19:17:36 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    71                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    72  0000                     
    73                           	psect	idataBANK0
    74  003100                     __pidataBANK0:
    75                           	opt stack 0
    76                           
    77                           ;initializer for _anio
    78  003100  000F               	dw	15
    79                           
    80                           ;initializer for _dia
    81  003102  0008               	dw	8
    82                           
    83                           ;initializer for _diasem
    84  003104  0003               	dw	3
    85                           
    86                           ;initializer for _hora
    87  003106  0012               	dw	18
    88                           
    89                           ;initializer for _mes
    90  003108  0009               	dw	9
    91                           
    92                           ;initializer for _minuto
    93  00310A  001E               	dw	30
    94                           
    95                           ;initializer for _password
    96  00310C  04D2               	dw	1234
    97                           
    98                           ;initializer for _key
    99  00310E  12                 	db	18
   100                           
   101                           ;initializer for _state_alarm
   102  00310F  01                 	db	1
   103                           
   104                           	psect	smallconst
   105  000F00                     __psmallconst:
   106                           	opt stack 0
   107  000F00  00                 	db	0
   108  000F01                     _dpowers:
   109                           	opt stack 0
   110  000F01  0001               	dw	1
   111  000F03  000A               	dw	10
   112  000F05  0064               	dw	100
   113  000F07  03E8               	dw	1000
   114  000F09  2710               	dw	10000
   115  000F0B                     __end_of_dpowers:
   116                           	opt stack 0
   117  000F0B                     _LCD_INIT_STRING:
   118                           	opt stack 0
   119  000F0B  28                 	db	40
   120  000F0C  0C                 	db	12
   121  000F0D  01                 	db	1
   122  000F0E  06                 	db	6
   123  000F0F                     __end_of_LCD_INIT_STRING:
   124                           	opt stack 0
   125  000F0F                     exp@coeff:
   126                           	opt stack 0
   127  000F0F  00                 	db	0
   128  000F10  80                 	db	128
   129  000F11  3F                 	db	63
   130  000F12  72                 	db	114
   131  000F13  31                 	db	49
   132  000F14  3F                 	db	63
   133  000F15  FE                 	db	254
   134  000F16  75                 	db	117
   135  000F17  3E                 	db	62
   136  000F18  58                 	db	88
   137  000F19  63                 	db	99
   138  000F1A  3D                 	db	61
   139  000F1B  95                 	db	149
   140  000F1C  1D                 	db	29
   141  000F1D  3C                 	db	60
   142  000F1E  C5                 	db	197
   143  000F1F  AE                 	db	174
   144  000F20  3A                 	db	58
   145  000F21  79                 	db	121
   146  000F22  21                 	db	33
   147  000F23  39                 	db	57
   148  000F24  94                 	db	148
   149  000F25  80                 	db	128
   150  000F26  37                 	db	55
   151  000F27  93                 	db	147
   152  000F28  A7                 	db	167
   153  000F29  35                 	db	53
   154  000F2A  56                 	db	86
   155  000F2B  15                 	db	21
   156  000F2C  34                 	db	52
   157  000F2D                     __end_ofexp@coeff:
   158                           	opt stack 0
   159  000F2D                     log@coeff:
   160                           	opt stack 0
   161  000F2D  00                 	db	0
   162  000F2E  00                 	db	0
   163  000F2F  00                 	db	0
   164  000F30  00                 	db	0
   165  000F31  80                 	db	128
   166  000F32  3F                 	db	63
   167  000F33  F0                 	db	240
   168  000F34  FF                 	db	255
   169  000F35  BE                 	db	190
   170  000F36  E2                 	db	226
   171  000F37  A9                 	db	169
   172  000F38  3E                 	db	62
   173  000F39  83                 	db	131
   174  000F3A  76                 	db	118
   175  000F3B  BE                 	db	190
   176  000F3C  AE                 	db	174
   177  000F3D  2B                 	db	43
   178  000F3E  3E                 	db	62
   179  000F3F  3C                 	db	60
   180  000F40  C3                 	db	195
   181  000F41  BD                 	db	189
   182  000F42  D2                 	db	210
   183  000F43  13                 	db	19
   184  000F44  3D                 	db	61
   185  000F45  78                 	db	120
   186  000F46  D3                 	db	211
   187  000F47  BB                 	db	187
   188  000F48                     __end_oflog@coeff:
   189                           	opt stack 0
   190  000F48                     STR_1:
   191                           
   192                           ; BSR set to: 15
   193  000F48  20                 	db	32
   194  000F49  20                 	db	32
   195  000F4A  20                 	db	32
   196  000F4B  20                 	db	32
   197  000F4C  20                 	db	32
   198  000F4D  20                 	db	32
   199  000F4E  20                 	db	32
   200  000F4F  20                 	db	32
   201  000F50  20                 	db	32
   202  000F51  20                 	db	32
   203  000F52  20                 	db	32
   204  000F53  20                 	db	32
   205  000F54  20                 	db	32
   206  000F55  20                 	db	32
   207  000F56  20                 	db	32
   208  000F57  20                 	db	32
   209  000F58  20                 	db	32
   210  000F59  20                 	db	32
   211  000F5A  20                 	db	32
   212  000F5B  20                 	db	32
   213  000F5C  20                 	db	32
   214  000F5D  20                 	db	32
   215  000F5E  20                 	db	32
   216  000F5F  20                 	db	32
   217  000F60  20                 	db	32
   218  000F61  20                 	db	32
   219  000F62  20                 	db	32
   220  000F63  20                 	db	32
   221  000F64  20                 	db	32
   222  000F65  20                 	db	32
   223  000F66  20                 	db	32
   224  000F67  20                 	db	32
   225  000F68  00                 	db	0
   226  000F69                     STR_14:
   227                           
   228                           ; BSR set to: 15
   229  000F69  25                 	db	37
   230  000F6A  30                 	db	48	;'0'
   231  000F6B  32                 	db	50	;'2'
   232  000F6C  75                 	db	117	;'u'
   233  000F6D  2F                 	db	47
   234  000F6E  25                 	db	37
   235  000F6F  30                 	db	48	;'0'
   236  000F70  32                 	db	50	;'2'
   237  000F71  75                 	db	117	;'u'
   238  000F72  2F                 	db	47
   239  000F73  25                 	db	37
   240  000F74  30                 	db	48	;'0'
   241  000F75  32                 	db	50	;'2'
   242  000F76  75                 	db	117	;'u'
   243  000F77  00                 	db	0
   244  000F78                     STR_2:
   245                           
   246                           ; BSR set to: 15
   247  000F78  6E                 	db	110	;'n'
   248  000F79  75                 	db	117	;'u'
   249  000F7A  6C                 	db	108	;'l'
   250  000F7B  6C                 	db	108	;'l'
   251  000F7C  20                 	db	32
   252  000F7D  70                 	db	112	;'p'
   253  000F7E  6F                 	db	111	;'o'
   254  000F7F  69                 	db	105	;'i'
   255  000F80  6E                 	db	110	;'n'
   256  000F81  74                 	db	116	;'t'
   257  000F82  65                 	db	101	;'e'
   258  000F83  72                 	db	114	;'r'
   259  000F84  00                 	db	0
   260  000F85                     STR_16:
   261                           
   262                           ; BSR set to: 15
   263  000F85  57                 	db	87	;'W'
   264  000F86  41                 	db	65	;'A'
   265  000F87  52                 	db	82	;'R'
   266  000F88  4E                 	db	78	;'N'
   267  000F89  49                 	db	73	;'I'
   268  000F8A  4E                 	db	78	;'N'
   269  000F8B  47                 	db	71	;'G'
   270  000F8C  21                 	db	33
   271  000F8D  21                 	db	33
   272  000F8E  21                 	db	33
   273  000F8F  00                 	db	0
   274  000F90                     STR_18:
   275                           
   276                           ; BSR set to: 15
   277  000F90  70                 	db	112	;'p'
   278  000F91  61                 	db	97	;'a'
   279  000F92  73                 	db	115	;'s'
   280  000F93  73                 	db	115	;'s'
   281  000F94  3A                 	db	58	;':'
   282  000F95  5F                 	db	95	;'_'
   283  000F96  5F                 	db	95	;'_'
   284  000F97  5F                 	db	95	;'_'
   285  000F98  5F                 	db	95	;'_'
   286  000F99  00                 	db	0
   287  000F9A                     STR_15:
   288                           
   289                           ; BSR set to: 15
   290  000F9A  25                 	db	37
   291  000F9B  30                 	db	48	;'0'
   292  000F9C  32                 	db	50	;'2'
   293  000F9D  75                 	db	117	;'u'
   294  000F9E  3A                 	db	58	;':'
   295  000F9F  25                 	db	37
   296  000FA0  30                 	db	48	;'0'
   297  000FA1  32                 	db	50	;'2'
   298  000FA2  75                 	db	117	;'u'
   299  000FA3  00                 	db	0
   300  000FA4                     STR_3:
   301                           
   302                           ; BSR set to: 15
   303  000FA4  65                 	db	101	;'e'
   304  000FA5  78                 	db	120	;'x'
   305  000FA6  63                 	db	99	;'c'
   306  000FA7  65                 	db	101	;'e'
   307  000FA8  70                 	db	112	;'p'
   308  000FA9  74                 	db	116	;'t'
   309  000FAA  69                 	db	105	;'i'
   310  000FAB  6F                 	db	111	;'o'
   311  000FAC  6E                 	db	110	;'n'
   312  000FAD  00                 	db	0
   313  000FAE                     STR_21:
   314                           
   315                           ; BSR set to: 15
   316  000FAE  54                 	db	84	;'T'
   317  000FAF  52                 	db	82	;'R'
   318  000FB0  49                 	db	73	;'I'
   319  000FB1  47                 	db	71	;'G'
   320  000FB2  47                 	db	71	;'G'
   321  000FB3  45                 	db	69	;'E'
   322  000FB4  44                 	db	68	;'D'
   323  000FB5  00                 	db	0
   324  000FB6                     STR_4:
   325                           
   326                           ; BSR set to: 15
   327  000FB6  25                 	db	37
   328  000FB7  30                 	db	48	;'0'
   329  000FB8  31                 	db	49	;'1'
   330  000FB9  75                 	db	117	;'u'
   331  000FBA  00                 	db	0
   332  000FBB                     STR_20:
   333                           
   334                           ; BSR set to: 15
   335  000FBB  4F                 	db	79	;'O'
   336  000FBC  46                 	db	70	;'F'
   337  000FBD  46                 	db	70	;'F'
   338  000FBE  00                 	db	0
   339  000FBF                     STR_19:
   340                           
   341                           ; BSR set to: 15
   342  000FBF  4F                 	db	79	;'O'
   343  000FC0  4E                 	db	78	;'N'
   344  000FC1  00                 	db	0
   345  0000                     
   346                           ; #config settings
   347  000FC2  00                 	db	0	; dummy byte at the end
   348  0000                     
   349                           	psect	nvBANK0
   350  0000CF                     __pnvBANK0:
   351                           	opt stack 0
   352  0000CF                     _anio_d:
   353                           	opt stack 0
   354  0000CF                     	ds	1
   355  0000D0                     _anio_u:
   356                           	opt stack 0
   357  0000D0                     	ds	1
   358  0000D1                     _dia_semana:
   359                           	opt stack 0
   360  0000D1                     	ds	1
   361  0000D2                     _fecha_d:
   362                           	opt stack 0
   363  0000D2                     	ds	1
   364  0000D3                     _fecha_u:
   365                           	opt stack 0
   366  0000D3                     	ds	1
   367  0000D4                     _hora_d:
   368                           	opt stack 0
   369  0000D4                     	ds	1
   370  0000D5                     _hora_u:
   371                           	opt stack 0
   372  0000D5                     	ds	1
   373  0000D6                     _mes_d:
   374                           	opt stack 0
   375  0000D6                     	ds	1
   376  0000D7                     _mes_u:
   377                           	opt stack 0
   378  0000D7                     	ds	1
   379  0000D8                     _minuto_d:
   380                           	opt stack 0
   381  0000D8                     	ds	1
   382  0000D9                     _minuto_u:
   383                           	opt stack 0
   384  0000D9                     	ds	1
   385  0000DA                     _segundo_d:
   386                           	opt stack 0
   387  0000DA                     	ds	1
   388  0000DB                     _segundo_u:
   389                           	opt stack 0
   390  0000DB                     	ds	1
   391  0000                     _ANCON0	set	3912
   392  0000                     _ANCON1	set	3913
   393  0000                     _RTCCFG	set	3903
   394  0000                     _RTCCFGbits	set	3903
   395  0000                     _ADCON0	set	4034
   396  0000                     _ADCON1	set	4033
   397  0000                     _ALRMCFGbits	set	3985
   398  0000                     _EECON2	set	4007
   399  0000                     _INTCONbits	set	4082
   400  0000                     _LATAbits	set	3977
   401  0000                     _LATBbits	set	3978
   402  0000                     _OSCCONbits	set	4051
   403  0000                     _OSCTUNEbits	set	3995
   404  0000                     _PIE3bits	set	4003
   405  0000                     _PORTAbits	set	3968
   406  0000                     _PORTCbits	set	3970
   407  0000                     _RTCVALH	set	3993
   408  0000                     _RTCVALL	set	3992
   409  0000                     _T1CONbits	set	4045
   410  0000                     _TRISA	set	3986
   411  0000                     _TRISB	set	3987
   412  0000                     _TRISBbits	set	3987
   413  0000                     _TRISC	set	3988
   414                           
   415                           	psect	cinit
   416  002ECA                     __pcinit:
   417                           	opt stack 0
   418  002ECA                     start_initialization:
   419                           	opt stack 0
   420  002ECA                     __initialization:
   421                           	opt stack 0
   422                           
   423                           ; Clear objects allocated to BITBANK0 (1 bytes)
   424  002ECA  0100               	movlb	0
   425  002ECC  6BDC               	clrf	(__pbitbssBANK0/(0+8))& (0+255),b
   426                           
   427                           ; Clear objects allocated to BANK0 (72 bytes)
   428  002ECE  EE00  F060         	lfsr	0,__pbssBANK0
   429  002ED2  0E48               	movlw	72
   430  002ED4                     clear_0:
   431  002ED4  6AEE               	clrf	postinc0,c
   432  002ED6  06E8               	decf	wreg,f,c
   433  002ED8  E1FD               	bnz	clear_0
   434                           
   435                           ; Initialize objects allocated to BANK0 (16 bytes)
   436                           ; load TBLPTR registers with __pidataBANK0
   437  002EDA  0E00               	movlw	low __pidataBANK0
   438  002EDC  6EF6               	movwf	tblptrl,c
   439  002EDE  0E31               	movlw	high __pidataBANK0
   440  002EE0  6EF7               	movwf	tblptrh,c
   441  002EE2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   442  002EE4  6EF8               	movwf	tblptru,c
   443  002EE6  EE00  F0BF         	lfsr	0,__pdataBANK0
   444  002EEA  EE10 F010          	lfsr	1,16
   445  002EEE                     copy_data0:
   446  002EEE  0009               	tblrd		*+
   447  002EF0  CFF5 FFEE          	movff	tablat,postinc0
   448  002EF4  50E5               	movf	postdec1,w,c
   449  002EF6  50E1               	movf	fsr1l,w,c
   450  002EF8  E1FA               	bnz	copy_data0
   451  002EFA                     end_of_initialization:
   452                           	opt stack 0
   453  002EFA                     __end_of__initialization:
   454                           	opt stack 0
   455  002EFA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   456  002EFC  6EF8               	movwf	tblptru,c
   457  002EFE  0100               	movlb	0
   458  002F00  EF71  F014         	goto	_main	;jump to C main() function
   459                           tblptru	equ	0xFF8
   460                           tblptrh	equ	0xFF7
   461                           tblptrl	equ	0xFF6
   462                           tablat	equ	0xFF5
   463                           postinc0	equ	0xFEE
   464                           wreg	equ	0xFE8
   465                           postdec1	equ	0xFE5
   466                           fsr1l	equ	0xFE1
   467                           
   468                           	psect	bitbssBANK0
   469  0006E0                     __pbitbssBANK0:
   470                           	opt stack 0
   471  0006E0                     _flag:
   472                           	opt stack 0
   473  0006E0                     	ds	1
   474                           tblptru	equ	0xFF8
   475                           tblptrh	equ	0xFF7
   476                           tblptrl	equ	0xFF6
   477                           tablat	equ	0xFF5
   478                           postinc0	equ	0xFEE
   479                           wreg	equ	0xFE8
   480                           postdec1	equ	0xFE5
   481                           fsr1l	equ	0xFE1
   482                           
   483                           	psect	bssBANK0
   484  000060                     __pbssBANK0:
   485                           	opt stack 0
   486  000060                     _RtccAlrmTimeDate:
   487                           	opt stack 0
   488  000060                     	ds	8
   489  000068                     _RtccTimeDate:
   490                           	opt stack 0
   491  000068                     	ds	8
   492  000070                     _Rtcc_read_TimeDate:
   493                           	opt stack 0
   494  000070                     	ds	8
   495  000078                     _RtccTimeVal:
   496                           	opt stack 0
   497  000078                     	ds	4
   498  00007C                     _a:
   499                           	opt stack 0
   500  00007C                     	ds	2
   501  00007E                     _b:
   502                           	opt stack 0
   503  00007E                     	ds	2
   504  000080                     _c:
   505                           	opt stack 0
   506  000080                     	ds	2
   507  000082                     _errno:
   508                           	opt stack 0
   509  000082                     	ds	2
   510  000084                     _i:
   511                           	opt stack 0
   512  000084                     	ds	2
   513  000086                     _j:
   514                           	opt stack 0
   515  000086                     	ds	2
   516  000088                     _k:
   517                           	opt stack 0
   518  000088                     	ds	2
   519  00008A                     _segundo:
   520                           	opt stack 0
   521  00008A                     	ds	2
   522  00008C                     _buffer2:
   523                           	opt stack 0
   524  00008C                     	ds	20
   525  0000A0                     _RtccDate:
   526                           	opt stack 0
   527  0000A0                     	ds	4
   528  0000A4                     _RtccTime:
   529                           	opt stack 0
   530  0000A4                     	ds	4
   531                           tblptru	equ	0xFF8
   532                           tblptrh	equ	0xFF7
   533                           tblptrl	equ	0xFF6
   534                           tablat	equ	0xFF5
   535                           postinc0	equ	0xFEE
   536                           wreg	equ	0xFE8
   537                           postdec1	equ	0xFE5
   538                           fsr1l	equ	0xFE1
   539                           
   540                           	psect	dataBANK0
   541  0000BF                     __pdataBANK0:
   542                           	opt stack 0
   543  0000BF                     _anio:
   544                           	opt stack 0
   545  0000BF                     	ds	2
   546  0000C1                     _dia:
   547                           	opt stack 0
   548  0000C1                     	ds	2
   549  0000C3                     _diasem:
   550                           	opt stack 0
   551  0000C3                     	ds	2
   552  0000C5                     _hora:
   553                           	opt stack 0
   554  0000C5                     	ds	2
   555  0000C7                     _mes:
   556                           	opt stack 0
   557  0000C7                     	ds	2
   558  0000C9                     _minuto:
   559                           	opt stack 0
   560  0000C9                     	ds	2
   561  0000CB                     _password:
   562                           	opt stack 0
   563  0000CB                     	ds	2
   564  0000CD                     _key:
   565                           	opt stack 0
   566  0000CD                     	ds	1
   567  0000CE                     _state_alarm:
   568                           	opt stack 0
   569  0000CE                     	ds	1
   570                           tblptru	equ	0xFF8
   571                           tblptrh	equ	0xFF7
   572                           tblptrl	equ	0xFF6
   573                           tablat	equ	0xFF5
   574                           postinc0	equ	0xFEE
   575                           wreg	equ	0xFE8
   576                           postdec1	equ	0xFE5
   577                           fsr1l	equ	0xFE1
   578                           
   579                           	psect	cstackBANK0
   580  0000A8                     __pcstackBANK0:
   581                           	opt stack 0
   582  0000A8                     _pow$2746:
   583                           	opt stack 0
   584                           
   585                           ; 3 bytes @ 0x0
   586  0000A8                     	ds	3
   587  0000AB                     _pow$2747:
   588                           	opt stack 0
   589                           
   590                           ; 3 bytes @ 0x3
   591  0000AB                     	ds	3
   592  0000AE                     pow@sign:
   593                           	opt stack 0
   594                           
   595                           ; 1 bytes @ 0x6
   596  0000AE                     	ds	1
   597  0000AF                     pow@yi:
   598                           	opt stack 0
   599                           
   600                           ; 4 bytes @ 0x7
   601  0000AF                     	ds	4
   602  0000B3                     _obtain_pass$2744:
   603                           	opt stack 0
   604                           
   605                           ; 3 bytes @ 0xB
   606  0000B3                     	ds	3
   607  0000B6                     _obtain_pass$2745:
   608                           	opt stack 0
   609                           
   610                           ; 3 bytes @ 0xE
   611  0000B6                     	ds	3
   612  0000B9                     set_vision@pass:
   613                           	opt stack 0
   614                           
   615                           ; 2 bytes @ 0x11
   616  0000B9                     	ds	2
   617  0000BB                     set_vision@input:
   618                           	opt stack 0
   619                           
   620                           ; 1 bytes @ 0x13
   621  0000BB                     	ds	1
   622  0000BC                     set_vision@digit:
   623                           	opt stack 0
   624                           
   625                           ; 2 bytes @ 0x14
   626  0000BC                     	ds	2
   627  0000BE                     main@input:
   628                           	opt stack 0
   629                           
   630                           ; 1 bytes @ 0x16
   631  0000BE                     	ds	1
   632                           tblptru	equ	0xFF8
   633                           tblptrh	equ	0xFF7
   634                           tblptrl	equ	0xFF6
   635                           tablat	equ	0xFF5
   636                           postinc0	equ	0xFEE
   637                           wreg	equ	0xFE8
   638                           postdec1	equ	0xFE5
   639                           fsr1l	equ	0xFE1
   640                           
   641                           	psect	cstackCOMRAM
   642  000001                     __pcstackCOMRAM:
   643                           	opt stack 0
   644  000001                     ??_isdigit:
   645  000001                     ??_lcd_send_nibble:
   646  000001                     ?___wmul:
   647                           	opt stack 0
   648  000001                     ?___awdiv:
   649                           	opt stack 0
   650  000001                     ?___lwdiv:
   651                           	opt stack 0
   652  000001                     ?___ftpack:
   653                           	opt stack 0
   654  000001                     ?_frexp:
   655                           	opt stack 0
   656  000001                     ?___ftneg:
   657                           	opt stack 0
   658  000001                     _is_not_letter$1329:
   659                           	opt stack 0
   660  000001                     Delay100TCYx@unit:
   661                           	opt stack 0
   662  000001                     Delay1KTCYx@unit:
   663                           	opt stack 0
   664  000001                     not_fill_pass@digit:
   665                           	opt stack 0
   666  000001                     checkPass@pass:
   667                           	opt stack 0
   668  000001                     RtccWriteDate@pDt:
   669                           	opt stack 0
   670  000001                     RtccWriteTime@pTm:
   671                           	opt stack 0
   672  000001                     ___wmul@multiplier:
   673                           	opt stack 0
   674  000001                     ___awdiv@dividend:
   675                           	opt stack 0
   676  000001                     ___lwdiv@dividend:
   677                           	opt stack 0
   678  000001                     ___ftpack@arg:
   679                           	opt stack 0
   680  000001                     ___ftge@ff1:
   681                           	opt stack 0
   682  000001                     ___ftneg@f1:
   683                           	opt stack 0
   684  000001                     frexp@value:
   685                           	opt stack 0
   686                           
   687                           ; 3 bytes @ 0x0
   688  000001                     	ds	1
   689  000002                     lcd_send_nibble@nibble:
   690                           	opt stack 0
   691  000002                     is_not_letter@input:
   692                           	opt stack 0
   693  000002                     _isdigit$2371:
   694                           	opt stack 0
   695                           
   696                           ; 1 bytes @ 0x1
   697  000002                     	ds	1
   698  000003                     lcd_send_byte@n:
   699                           	opt stack 0
   700  000003                     RtccWriteDate@di:
   701                           	opt stack 0
   702  000003                     RtccWriteTime@di:
   703                           	opt stack 0
   704  000003                     isdigit@c:
   705                           	opt stack 0
   706  000003                     review_code@digit:
   707                           	opt stack 0
   708  000003                     ___wmul@multiplicand:
   709                           	opt stack 0
   710  000003                     ___awdiv@divisor:
   711                           	opt stack 0
   712  000003                     ___lwdiv@divisor:
   713                           	opt stack 0
   714                           
   715                           ; 2 bytes @ 0x2
   716  000003                     	ds	1
   717  000004                     lcd_send_byte@address:
   718                           	opt stack 0
   719  000004                     ___ftpack@exp:
   720                           	opt stack 0
   721  000004                     frexp@eptr:
   722                           	opt stack 0
   723  000004                     ___ftge@ff2:
   724                           	opt stack 0
   725                           
   726                           ; 3 bytes @ 0x3
   727  000004                     	ds	1
   728  000005                     lcd_init@i:
   729                           	opt stack 0
   730  000005                     lcd_gotoxy@y:
   731                           	opt stack 0
   732  000005                     lcd_comand@d:
   733                           	opt stack 0
   734  000005                     lcd_setcursor_vb@blink:
   735                           	opt stack 0
   736  000005                     RtccWriteDate@wasOn:
   737                           	opt stack 0
   738  000005                     RtccWriteTime@wasOn:
   739                           	opt stack 0
   740  000005                     ___awdiv@counter:
   741                           	opt stack 0
   742  000005                     ___ftpack@sign:
   743                           	opt stack 0
   744  000005                     review_code@pass:
   745                           	opt stack 0
   746  000005                     ___wmul@product:
   747                           	opt stack 0
   748  000005                     ___lwdiv@quotient:
   749                           	opt stack 0
   750                           
   751                           ; 2 bytes @ 0x4
   752  000005                     	ds	1
   753  000006                     ??___ftpack:
   754  000006                     ??_frexp:
   755  000006                     ??_clear:
   756  000006                     lcd_gotoxy@x:
   757                           	opt stack 0
   758  000006                     lcd_setcursor_vb@visible:
   759                           	opt stack 0
   760  000006                     RtccWriteDate@wasAlrm:
   761                           	opt stack 0
   762  000006                     RtccWriteTime@wasAlrm:
   763                           	opt stack 0
   764  000006                     ___awdiv@sign:
   765                           	opt stack 0
   766                           
   767                           ; 1 bytes @ 0x5
   768  000006                     	ds	1
   769  000007                     ??___ftge:
   770  000007                     lcd_gotoxy@address:
   771                           	opt stack 0
   772  000007                     RtccWriteTime@wasWrEn:
   773                           	opt stack 0
   774  000007                     ___lwdiv@counter:
   775                           	opt stack 0
   776  000007                     RtccWriteDate@tempYear:
   777                           	opt stack 0
   778  000007                     ___awdiv@quotient:
   779                           	opt stack 0
   780                           
   781                           ; 2 bytes @ 0x6
   782  000007                     	ds	1
   783  000008                     ?___lwmod:
   784                           	opt stack 0
   785  000008                     lcd_putc@c:
   786                           	opt stack 0
   787  000008                     next_code@digit:
   788                           	opt stack 0
   789  000008                     RtccWriteTime@tempMinSec:
   790                           	opt stack 0
   791  000008                     ___lwmod@dividend:
   792                           	opt stack 0
   793                           
   794                           ; 2 bytes @ 0x7
   795  000008                     	ds	1
   796  000009                     ?___ftdiv:
   797                           	opt stack 0
   798  000009                     ?___awtoft:
   799                           	opt stack 0
   800  000009                     ?___lbtoft:
   801                           	opt stack 0
   802  000009                     ?___lltoft:
   803                           	opt stack 0
   804  000009                     RtccWriteDate@wasWrEn:
   805                           	opt stack 0
   806  000009                     lcd_putrs@ptr:
   807                           	opt stack 0
   808  000009                     __delay_s@millis:
   809                           	opt stack 0
   810  000009                     ___awtoft@c:
   811                           	opt stack 0
   812  000009                     ___ftdiv@f1:
   813                           	opt stack 0
   814  000009                     ___lltoft@c:
   815                           	opt stack 0
   816                           
   817                           ; 4 bytes @ 0x8
   818  000009                     	ds	1
   819  00000A                     next_code@input:
   820                           	opt stack 0
   821  00000A                     RtccWriteDate@tempDayMonth:
   822                           	opt stack 0
   823  00000A                     RtccWriteTime@tempHourWDay:
   824                           	opt stack 0
   825  00000A                     ___lwmod@divisor:
   826                           	opt stack 0
   827                           
   828                           ; 2 bytes @ 0x9
   829  00000A                     	ds	1
   830  00000B                     ??__delay_s:
   831  00000B                     set_desactive_vision@digit:
   832                           	opt stack 0
   833                           
   834                           ; 2 bytes @ 0xA
   835  00000B                     	ds	1
   836  00000C                     ??_next_code:
   837  00000C                     ___awtoft@sign:
   838                           	opt stack 0
   839  00000C                     ___lbtoft@c:
   840                           	opt stack 0
   841  00000C                     ___lwmod@counter:
   842                           	opt stack 0
   843  00000C                     __delay_s@it:
   844                           	opt stack 0
   845  00000C                     RtccWriteDate@tempHourWDay:
   846                           	opt stack 0
   847  00000C                     ___ftdiv@f2:
   848                           	opt stack 0
   849                           
   850                           ; 3 bytes @ 0xB
   851  00000C                     	ds	1
   852  00000D                     ??___lltoft:
   853  00000D                     ?_sprintf:
   854                           	opt stack 0
   855  00000D                     ?___ftmul:
   856                           	opt stack 0
   857  00000D                     sprintf@sp:
   858                           	opt stack 0
   859  00000D                     ___ftmul@f1:
   860                           	opt stack 0
   861                           
   862                           ; 3 bytes @ 0xC
   863  00000D                     	ds	1
   864  00000E                     __delay_s@index:
   865                           	opt stack 0
   866                           
   867                           ; 2 bytes @ 0xD
   868  00000E                     	ds	1
   869  00000F                     ??___ftdiv:
   870  00000F                     sprintf@f:
   871                           	opt stack 0
   872                           
   873                           ; 2 bytes @ 0xE
   874  00000F                     	ds	1
   875  000010                     ___ftmul@f2:
   876                           	opt stack 0
   877                           
   878                           ; 3 bytes @ 0xF
   879  000010                     	ds	1
   880  000011                     ___lltoft@exp:
   881                           	opt stack 0
   882                           
   883                           ; 1 bytes @ 0x10
   884  000011                     	ds	1
   885  000012                     ___ftdiv@cntr:
   886                           	opt stack 0
   887                           
   888                           ; 1 bytes @ 0x11
   889  000012                     	ds	1
   890  000013                     ??___ftmul:
   891  000013                     ___ftdiv@f3:
   892                           	opt stack 0
   893                           
   894                           ; 3 bytes @ 0x12
   895  000013                     	ds	3
   896  000016                     ___ftdiv@exp:
   897                           	opt stack 0
   898  000016                     ___ftmul@exp:
   899                           	opt stack 0
   900                           
   901                           ; 1 bytes @ 0x15
   902  000016                     	ds	1
   903  000017                     ??_sprintf:
   904  000017                     ___ftdiv@sign:
   905                           	opt stack 0
   906  000017                     ___ftmul@f3_as_product:
   907                           	opt stack 0
   908                           
   909                           ; 3 bytes @ 0x16
   910  000017                     	ds	3
   911  00001A                     ___ftmul@cntr:
   912                           	opt stack 0
   913                           
   914                           ; 1 bytes @ 0x19
   915  00001A                     	ds	1
   916  00001B                     ___ftmul@sign:
   917                           	opt stack 0
   918  00001B                     sprintf@ap:
   919                           	opt stack 0
   920                           
   921                           ; 2 bytes @ 0x1A
   922  00001B                     	ds	1
   923  00001C                     ?___ftadd:
   924                           	opt stack 0
   925  00001C                     ___ftadd@f1:
   926                           	opt stack 0
   927                           
   928                           ; 3 bytes @ 0x1B
   929  00001C                     	ds	1
   930  00001D                     sprintf@flag:
   931                           	opt stack 0
   932                           
   933                           ; 1 bytes @ 0x1C
   934  00001D                     	ds	1
   935  00001E                     sprintf@val:
   936                           	opt stack 0
   937                           
   938                           ; 2 bytes @ 0x1D
   939  00001E                     	ds	1
   940  00001F                     ___ftadd@f2:
   941                           	opt stack 0
   942                           
   943                           ; 3 bytes @ 0x1E
   944  00001F                     	ds	1
   945  000020                     sprintf@prec:
   946                           	opt stack 0
   947                           
   948                           ; 1 bytes @ 0x1F
   949  000020                     	ds	1
   950  000021                     sprintf@width:
   951                           	opt stack 0
   952                           
   953                           ; 2 bytes @ 0x20
   954  000021                     	ds	1
   955  000022                     ??___ftadd:
   956                           
   957                           ; 0 bytes @ 0x21
   958  000022                     	ds	1
   959  000023                     sprintf@c:
   960                           	opt stack 0
   961                           
   962                           ; 1 bytes @ 0x22
   963  000023                     	ds	1
   964  000024                     ??_read_keyboard:
   965  000024                     
   966                           ; 0 bytes @ 0x23
   967  000024                     	ds	1
   968  000025                     twinkle@input:
   969                           	opt stack 0
   970  000025                     ___ftadd@sign:
   971                           	opt stack 0
   972                           
   973                           ; 1 bytes @ 0x24
   974  000025                     	ds	1
   975  000026                     ___ftadd@exp2:
   976                           	opt stack 0
   977                           
   978                           ; 1 bytes @ 0x25
   979  000026                     	ds	1
   980  000027                     ___ftadd@exp1:
   981                           	opt stack 0
   982                           
   983                           ; 1 bytes @ 0x26
   984  000027                     	ds	1
   985  000028                     ?___ftsub:
   986                           	opt stack 0
   987  000028                     ?_eval_poly:
   988                           	opt stack 0
   989  000028                     ?___fttol:
   990                           	opt stack 0
   991  000028                     ___ftsub@f1:
   992                           	opt stack 0
   993  000028                     ___fttol@f1:
   994                           	opt stack 0
   995  000028                     eval_poly@x:
   996                           	opt stack 0
   997                           
   998                           ; 3 bytes @ 0x27
   999  000028                     	ds	3
  1000  00002B                     eval_poly@d:
  1001                           	opt stack 0
  1002  00002B                     ___ftsub@f2:
  1003                           	opt stack 0
  1004                           
  1005                           ; 3 bytes @ 0x2A
  1006  00002B                     	ds	1
  1007  00002C                     ??___fttol:
  1008                           
  1009                           ; 0 bytes @ 0x2B
  1010  00002C                     	ds	1
  1011  00002D                     eval_poly@n:
  1012                           	opt stack 0
  1013                           
  1014                           ; 2 bytes @ 0x2C
  1015  00002D                     	ds	1
  1016  00002E                     
  1017                           ; 0 bytes @ 0x2D
  1018  00002E                     	ds	1
  1019  00002F                     ??_eval_poly:
  1020                           
  1021                           ; 0 bytes @ 0x2E
  1022  00002F                     	ds	2
  1023  000031                     ___fttol@sign1:
  1024                           	opt stack 0
  1025  000031                     eval_poly@res:
  1026                           	opt stack 0
  1027                           
  1028                           ; 3 bytes @ 0x30
  1029  000031                     	ds	1
  1030  000032                     ___fttol@lval:
  1031                           	opt stack 0
  1032                           
  1033                           ; 4 bytes @ 0x31
  1034  000032                     	ds	2
  1035  000034                     ?_log:
  1036                           	opt stack 0
  1037  000034                     ?_ldexp:
  1038                           	opt stack 0
  1039  000034                     ldexp@value:
  1040                           	opt stack 0
  1041  000034                     log@x:
  1042                           	opt stack 0
  1043                           
  1044                           ; 3 bytes @ 0x33
  1045  000034                     	ds	2
  1046  000036                     ___fttol@exp1:
  1047                           	opt stack 0
  1048                           
  1049                           ; 1 bytes @ 0x35
  1050  000036                     	ds	1
  1051  000037                     ?___altoft:
  1052                           	opt stack 0
  1053  000037                     ldexp@newexp:
  1054                           	opt stack 0
  1055  000037                     log@exponent:
  1056                           	opt stack 0
  1057  000037                     ___altoft@c:
  1058                           	opt stack 0
  1059                           
  1060                           ; 4 bytes @ 0x36
  1061  000037                     	ds	2
  1062  000039                     ??_ldexp:
  1063                           
  1064                           ; 0 bytes @ 0x38
  1065  000039                     	ds	2
  1066  00003B                     ??___altoft:
  1067                           
  1068                           ; 0 bytes @ 0x3A
  1069  00003B                     	ds	4
  1070  00003F                     ___altoft@exp:
  1071                           	opt stack 0
  1072                           
  1073                           ; 1 bytes @ 0x3E
  1074  00003F                     	ds	1
  1075  000040                     ___altoft@sign:
  1076                           	opt stack 0
  1077                           
  1078                           ; 1 bytes @ 0x3F
  1079  000040                     	ds	1
  1080  000041                     ?_floor:
  1081                           	opt stack 0
  1082  000041                     floor@x:
  1083                           	opt stack 0
  1084                           
  1085                           ; 3 bytes @ 0x40
  1086  000041                     	ds	3
  1087  000044                     floor@i:
  1088                           	opt stack 0
  1089                           
  1090                           ; 3 bytes @ 0x43
  1091  000044                     	ds	3
  1092  000047                     floor@expon:
  1093                           	opt stack 0
  1094                           
  1095                           ; 2 bytes @ 0x46
  1096  000047                     	ds	2
  1097  000049                     ?_exp:
  1098                           	opt stack 0
  1099  000049                     exp@x:
  1100                           	opt stack 0
  1101                           
  1102                           ; 3 bytes @ 0x48
  1103  000049                     	ds	3
  1104  00004C                     _exp$2748:
  1105                           	opt stack 0
  1106                           
  1107                           ; 3 bytes @ 0x4B
  1108  00004C                     	ds	3
  1109  00004F                     exp@exponent:
  1110                           	opt stack 0
  1111                           
  1112                           ; 2 bytes @ 0x4E
  1113  00004F                     	ds	2
  1114  000051                     exp@sign:
  1115                           	opt stack 0
  1116                           
  1117                           ; 1 bytes @ 0x50
  1118  000051                     	ds	1
  1119  000052                     ?_pow:
  1120                           	opt stack 0
  1121  000052                     pow@x:
  1122                           	opt stack 0
  1123                           
  1124                           ; 3 bytes @ 0x51
  1125  000052                     	ds	3
  1126  000055                     pow@y:
  1127                           	opt stack 0
  1128                           
  1129                           ; 3 bytes @ 0x54
  1130  000055                     	ds	3
  1131  000058                     ?_obtain_pass:
  1132                           	opt stack 0
  1133  000058                     obtain_pass@pass:
  1134                           	opt stack 0
  1135                           
  1136                           ; 2 bytes @ 0x57
  1137  000058                     	ds	2
  1138  00005A                     obtain_pass@input:
  1139                           	opt stack 0
  1140                           
  1141                           ; 1 bytes @ 0x59
  1142  00005A                     	ds	1
  1143  00005B                     obtain_pass@digit:
  1144                           	opt stack 0
  1145                           
  1146                           ; 2 bytes @ 0x5A
  1147  00005B                     	ds	2
  1148  00005D                     ??_obtain_pass:
  1149                           
  1150                           ; 0 bytes @ 0x5C
  1151  00005D                     	ds	2
  1152  00005F                     ??_main:
  1153                           
  1154                           ; 0 bytes @ 0x5E
  1155  00005F                     	ds	1
  1156                           tblptru	equ	0xFF8
  1157                           tblptrh	equ	0xFF7
  1158                           tblptrl	equ	0xFF6
  1159                           tablat	equ	0xFF5
  1160                           postinc0	equ	0xFEE
  1161                           wreg	equ	0xFE8
  1162                           postdec1	equ	0xFE5
  1163                           fsr1l	equ	0xFE1
  1164                           
  1165 ;;
  1166 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1167 ;;
  1168 ;; *************** function _main *****************
  1169 ;; Defined at:
  1170 ;;		line 87 in file "main.c"
  1171 ;; Parameters:    Size  Location     Type
  1172 ;;		None
  1173 ;; Auto vars:     Size  Location     Type
  1174 ;;  input           1   22[BANK0 ] unsigned char 
  1175 ;; Return value:  Size  Location     Type
  1176 ;;                  2   52[None  ] int 
  1177 ;; Registers used:
  1178 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1179 ;; Tracked objects:
  1180 ;;		On entry : 0/0
  1181 ;;		On exit  : 0/0
  1182 ;;		Unchanged: 0/0
  1183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1185 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1186 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1187 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1188 ;;Total ram usage:        2 bytes
  1189 ;; Hardware stack levels required when called:    8
  1190 ;; This function calls:
  1191 ;;		_Setup
  1192 ;;		_caratula
  1193 ;;		_lcd_gotoxy
  1194 ;;		_lcd_putrs
  1195 ;;		_read_keyboard
  1196 ;;		_set_vision
  1197 ;; This function is called by:
  1198 ;;		Startup code after reset
  1199 ;; This function uses a non-reentrant model
  1200 ;;
  1201                           
  1202                           	psect	text0
  1203  0028E2                     __ptext0:
  1204                           	opt stack 0
  1205  0028E2                     _main:
  1206                           	opt stack 23
  1207                           
  1208                           ;main.c: 88: Setup();
  1209                           
  1210                           ; BSR set to: 15
  1211                           ;incstack = 0
  1212  0028E2  EC01  F017         	call	_Setup	;wreg free
  1213                           
  1214                           ;main.c: 89: caratula();
  1215  0028E6  EC93  F018         	call	_caratula	;wreg free
  1216  0028EA  D000               	goto	l4119
  1217  0028EC                     l4119:
  1218                           
  1219                           ;main.c: 94: set_vision();
  1220  0028EC  EC7C  F011         	call	_set_vision	;wreg free
  1221                           
  1222                           ;main.c: 96: char input = read_keyboard();
  1223  0028F0  ECE2  F007         	call	_read_keyboard	;wreg free
  1224  0028F4  0100               	movlb	0	; () banked
  1225  0028F6  6FBE               	movwf	main@input& (0+255),b
  1226                           
  1227                           ; BSR set to: 0
  1228                           ;main.c: 98: if (input == 16){
  1229  0028F8  0E10               	movlw	16
  1230  0028FA  0100               	movlb	0	; () banked
  1231  0028FC  19BE               	xorwf	main@input& (0+255),w,b
  1232  0028FE  A4D8               	btfss	status,2,c
  1233  002900  D7F5               	goto	l4119
  1234                           
  1235                           ; BSR set to: 0
  1236                           ;main.c: 99: lcd_gotoxy(1,1);
  1237  002902  0E01               	movlw	1
  1238  002904  6E05               	movwf	lcd_gotoxy@y,c
  1239  002906  0E01               	movlw	1
  1240  002908  EC15  F018         	call	_lcd_gotoxy
  1241                           
  1242                           ;main.c: 100: lcd_putrs("                                ");
  1243  00290C  0E48               	movlw	low STR_1
  1244  00290E  6E09               	movwf	lcd_putrs@ptr,c
  1245  002910  0E0F               	movlw	high STR_1
  1246  002912  6E0A               	movwf	lcd_putrs@ptr+1,c
  1247  002914  EC65  F016         	call	_lcd_putrs	;wreg free
  1248                           
  1249                           ;main.c: 101: lcd_gotoxy(1,1);
  1250  002918  0E01               	movlw	1
  1251  00291A  6E05               	movwf	lcd_gotoxy@y,c
  1252  00291C  0E01               	movlw	1
  1253  00291E  EC15  F018         	call	_lcd_gotoxy
  1254                           
  1255                           ;main.c: 102: lcd_putrs("null pointer");
  1256  002922  0E78               	movlw	low STR_2
  1257  002924  6E09               	movwf	lcd_putrs@ptr,c
  1258  002926  0E0F               	movlw	high STR_2
  1259  002928  6E0A               	movwf	lcd_putrs@ptr+1,c
  1260  00292A  EC65  F016         	call	_lcd_putrs	;wreg free
  1261                           
  1262                           ;main.c: 103: lcd_gotoxy(1,2);
  1263  00292E  0E02               	movlw	2
  1264  002930  6E05               	movwf	lcd_gotoxy@y,c
  1265  002932  0E01               	movlw	1
  1266  002934  EC15  F018         	call	_lcd_gotoxy
  1267                           
  1268                           ;main.c: 104: lcd_putrs("exception");
  1269  002938  0EA4               	movlw	low STR_3
  1270  00293A  6E09               	movwf	lcd_putrs@ptr,c
  1271  00293C  0E0F               	movlw	high STR_3
  1272  00293E  6E0A               	movwf	lcd_putrs@ptr+1,c
  1273  002940  EC65  F016         	call	_lcd_putrs	;wreg free
  1274                           
  1275                           ;main.c: 105: input = 0;
  1276  002944  0E00               	movlw	0
  1277  002946  0100               	movlb	0	; () banked
  1278  002948  6FBE               	movwf	main@input& (0+255),b
  1279                           
  1280                           ; BSR set to: 0
  1281                           ;main.c: 106: key = 0;
  1282  00294A  0E00               	movlw	0
  1283  00294C  0100               	movlb	0	; () banked
  1284  00294E  6FCD               	movwf	_key& (0+255),b
  1285                           
  1286                           ; BSR set to: 0
  1287                           ;main.c: 107: _delay((unsigned long)((98)*(8000000/4000.0)));
  1288  002950  0EFF               	movlw	255
  1289  002952  6E5F               	movwf	??_main& (0+255),c
  1290  002954  0E8A               	movlw	138
  1291  002956                     u4357:
  1292  002956  2EE8               	decfsz	wreg,f,c
  1293  002958  D7FE               	goto	u4357
  1294  00295A  2E5F               	decfsz	??_main& (0+255),f,c
  1295  00295C  D7FC               	goto	u4357
  1296  00295E  D000               	nop2	
  1297  002960  D7C5               	goto	l4119
  1298                           
  1299                           ;main.c: 108: }
  1300                           ;main.c: 109: }
  1301                           ;main.c: 111: return 0;
  1302                           ;	Return value of _main is never used
  1303  002962  EF00  F000         	goto	start
  1304  002966                     __end_of_main:
  1305                           	opt stack 0
  1306                           tblptru	equ	0xFF8
  1307                           tblptrh	equ	0xFF7
  1308                           tblptrl	equ	0xFF6
  1309                           tablat	equ	0xFF5
  1310                           postinc0	equ	0xFEE
  1311                           wreg	equ	0xFE8
  1312                           postdec1	equ	0xFE5
  1313                           fsr1l	equ	0xFE1
  1314                           status	equ	0xFD8
  1315                           
  1316 ;; *************** function _set_vision *****************
  1317 ;; Defined at:
  1318 ;;		line 88 in file "lcd_vision.c"
  1319 ;; Parameters:    Size  Location     Type
  1320 ;;		None
  1321 ;; Auto vars:     Size  Location     Type
  1322 ;;  digit           2   20[BANK0 ] short 
  1323 ;;  pass            2   17[BANK0 ] int 
  1324 ;;  input           1   19[BANK0 ] unsigned char 
  1325 ;; Return value:  Size  Location     Type
  1326 ;;		None               void
  1327 ;; Registers used:
  1328 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1329 ;; Tracked objects:
  1330 ;;		On entry : 0/0
  1331 ;;		On exit  : 0/0
  1332 ;;		Unchanged: 0/0
  1333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1335 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1337 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1338 ;;Total ram usage:        5 bytes
  1339 ;; Hardware stack levels used:    1
  1340 ;; Hardware stack levels required when called:    7
  1341 ;; This function calls:
  1342 ;;		_clear
  1343 ;;		_is_not_letter
  1344 ;;		_lcd_gotoxy
  1345 ;;		_lcd_putrs
  1346 ;;		_not_fill_pass
  1347 ;;		_obtain_pass
  1348 ;;		_read_keyboard
  1349 ;;		_review_code
  1350 ;;		_set_desactive_vision
  1351 ;;		_twinkle
  1352 ;;		_write_Date
  1353 ;; This function is called by:
  1354 ;;		_main
  1355 ;; This function uses a non-reentrant model
  1356 ;;
  1357                           
  1358                           	psect	text1
  1359  0022F8                     __ptext1:
  1360                           	opt stack 0
  1361  0022F8                     _set_vision:
  1362                           	opt stack 23
  1363                           
  1364                           ;lcd_vision.c: 89: clear();
  1365                           
  1366                           ;incstack = 0
  1367  0022F8  EC46  F018         	call	_clear	;wreg free
  1368                           
  1369                           ;lcd_vision.c: 90: write_Date();
  1370  0022FC  ECF3  F014         	call	_write_Date	;wreg free
  1371                           
  1372                           ;lcd_vision.c: 91: lcd_gotoxy(1,1);
  1373  002300  0E01               	movlw	1
  1374  002302  6E05               	movwf	lcd_gotoxy@y,c
  1375  002304  0E01               	movlw	1
  1376  002306  EC15  F018         	call	_lcd_gotoxy
  1377                           
  1378                           ;lcd_vision.c: 93: switch (state_alarm){
  1379  00230A  D05C               	goto	l4113
  1380  00230C                     l4089:
  1381  00230C  0EBF               	movlw	low STR_19
  1382  00230E  6E09               	movwf	lcd_putrs@ptr,c
  1383  002310  0E0F               	movlw	high STR_19
  1384  002312  6E0A               	movwf	lcd_putrs@ptr+1,c
  1385  002314  EC65  F016         	call	_lcd_putrs	;wreg free
  1386                           
  1387                           ;lcd_vision.c: 95: break;
  1388  002318  0012               	return	
  1389  00231A                     l4091:
  1390  00231A  0EBB               	movlw	low STR_20
  1391  00231C  6E09               	movwf	lcd_putrs@ptr,c
  1392  00231E  0E0F               	movlw	high STR_20
  1393  002320  6E0A               	movwf	lcd_putrs@ptr+1,c
  1394  002322  EC65  F016         	call	_lcd_putrs	;wreg free
  1395                           
  1396                           ;lcd_vision.c: 98: short digit = 12;
  1397  002326  0E00               	movlw	0
  1398  002328  0100               	movlb	0	; () banked
  1399  00232A  6FBD               	movwf	(set_vision@digit+1)& (0+255),b
  1400  00232C  0E0C               	movlw	12
  1401  00232E  6FBC               	movwf	set_vision@digit& (0+255),b
  1402                           
  1403                           ; BSR set to: 0
  1404                           ;lcd_vision.c: 99: int pass = 0;
  1405  002330  0E00               	movlw	0
  1406  002332  0100               	movlb	0	; () banked
  1407  002334  6FBA               	movwf	(set_vision@pass+1)& (0+255),b
  1408  002336  0E00               	movlw	0
  1409  002338  6FB9               	movwf	set_vision@pass& (0+255),b
  1410                           
  1411                           ;lcd_vision.c: 100: set_desactive_vision(digit);
  1412  00233A  C0BC  F00B         	movff	set_vision@digit,set_desactive_vision@digit
  1413  00233E  C0BD  F00C         	movff	set_vision@digit+1,set_desactive_vision@digit+1
  1414  002342  ECB3  F017         	call	_set_desactive_vision	;wreg free
  1415                           
  1416                           ;lcd_vision.c: 102: char input = read_keyboard();
  1417  002346  ECE2  F007         	call	_read_keyboard	;wreg free
  1418  00234A  0100               	movlb	0	; () banked
  1419  00234C  6FBB               	movwf	set_vision@input& (0+255),b
  1420                           
  1421                           ;lcd_vision.c: 104: while(is_not_letter(input) && not_fill_pass(digit)){
  1422  00234E  D01F               	goto	l4105
  1423  002350                     l4099:
  1424                           
  1425                           ;lcd_vision.c: 105: pass = obtain_pass(pass,input,&digit);
  1426  002350  C0B9  F058         	movff	set_vision@pass,obtain_pass@pass
  1427  002354  C0BA  F059         	movff	set_vision@pass+1,obtain_pass@pass+1
  1428  002358  C0BB  F05A         	movff	set_vision@input,obtain_pass@input
  1429  00235C  0EBC               	movlw	low set_vision@digit
  1430  00235E  6E5B               	movwf	obtain_pass@digit,c
  1431  002360  0E00               	movlw	high set_vision@digit
  1432  002362  6E5C               	movwf	obtain_pass@digit+1,c
  1433  002364  EC90  F010         	call	_obtain_pass	;wreg free
  1434  002368  C058  F0B9         	movff	?_obtain_pass,set_vision@pass
  1435  00236C  C059  F0BA         	movff	?_obtain_pass+1,set_vision@pass+1
  1436                           
  1437                           ;lcd_vision.c: 106: input = read_keyboard();
  1438  002370  ECE2  F007         	call	_read_keyboard	;wreg free
  1439  002374  0100               	movlb	0	; () banked
  1440  002376  6FBB               	movwf	set_vision@input& (0+255),b
  1441                           
  1442                           ; BSR set to: 0
  1443                           ;lcd_vision.c: 107: review_code(digit, pass);
  1444  002378  C0BC  F003         	movff	set_vision@digit,review_code@digit
  1445  00237C  C0BD  F004         	movff	set_vision@digit+1,review_code@digit+1
  1446  002380  C0B9  F005         	movff	set_vision@pass,review_code@pass
  1447  002384  C0BA  F006         	movff	set_vision@pass+1,review_code@pass+1
  1448  002388  ECDD  F017         	call	_review_code	;wreg free
  1449  00238C  D000               	goto	l4105
  1450  00238E                     l4105:
  1451  00238E  0100               	movlb	0	; () banked
  1452  002390  51BB               	movf	set_vision@input& (0+255),w,b
  1453  002392  EC9B  F017         	call	_is_not_letter
  1454  002396  0900               	iorlw	0
  1455  002398  B4D8               	btfsc	status,2,c
  1456  00239A  0012               	return	
  1457  00239C  C0BC  F001         	movff	set_vision@digit,not_fill_pass@digit
  1458  0023A0  C0BD  F002         	movff	set_vision@digit+1,not_fill_pass@digit+1
  1459  0023A4  EC5B  F018         	call	_not_fill_pass	;wreg free
  1460  0023A8  0900               	iorlw	0
  1461  0023AA  B4D8               	btfsc	status,2,c
  1462  0023AC  0012               	return	
  1463  0023AE  D7D0               	goto	l4099
  1464                           
  1465                           ;lcd_vision.c: 108: }
  1466                           ;lcd_vision.c: 110: break;
  1467  0023B0  0012               	return	
  1468  0023B2                     l4109:
  1469  0023B2  0EAE               	movlw	low STR_21
  1470  0023B4  6E09               	movwf	lcd_putrs@ptr,c
  1471  0023B6  0E0F               	movlw	high STR_21
  1472  0023B8  6E0A               	movwf	lcd_putrs@ptr+1,c
  1473  0023BA  EC65  F016         	call	_lcd_putrs	;wreg free
  1474                           
  1475                           ;lcd_vision.c: 112: twinkle();
  1476  0023BE  ECAB  F015         	call	_twinkle	;wreg free
  1477                           
  1478                           ;lcd_vision.c: 113: }
  1479  0023C2  0012               	return	
  1480  0023C4                     l4113:
  1481  0023C4  0100               	movlb	0	; () banked
  1482  0023C6  51CE               	movf	_state_alarm& (0+255),w,b
  1483                           
  1484                           ; Switch size 1, requested type "space"
  1485                           ; Number of cases is 2, Range of values is 0 to 1
  1486                           ; switch strategies available:
  1487                           ; Name         Instructions Cycles
  1488                           ; simple_byte            7     4 (average)
  1489                           ;	Chosen strategy is simple_byte
  1490  0023C8  0A00               	xorlw	0	; case 0
  1491  0023CA  B4D8               	btfsc	status,2,c
  1492  0023CC  D79F               	goto	l4089
  1493  0023CE  0A01               	xorlw	1	; case 1
  1494  0023D0  B4D8               	btfsc	status,2,c
  1495  0023D2  D7A3               	goto	l4091
  1496  0023D4  D7EE               	goto	l4109
  1497                           
  1498                           ; BSR set to: 0
  1499  0023D6  0012               	return		;funcret
  1500  0023D8                     __end_of_set_vision:
  1501                           	opt stack 0
  1502                           tblptru	equ	0xFF8
  1503                           tblptrh	equ	0xFF7
  1504                           tblptrl	equ	0xFF6
  1505                           tablat	equ	0xFF5
  1506                           postinc0	equ	0xFEE
  1507                           wreg	equ	0xFE8
  1508                           postdec1	equ	0xFE5
  1509                           fsr1l	equ	0xFE1
  1510                           status	equ	0xFD8
  1511                           
  1512 ;; *************** function _write_Date *****************
  1513 ;; Defined at:
  1514 ;;		line 12 in file "lcd_vision.c"
  1515 ;; Parameters:    Size  Location     Type
  1516 ;;		None
  1517 ;; Auto vars:     Size  Location     Type
  1518 ;;		None
  1519 ;; Return value:  Size  Location     Type
  1520 ;;		None               void
  1521 ;; Registers used:
  1522 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1523 ;; Tracked objects:
  1524 ;;		On entry : 0/0
  1525 ;;		On exit  : 0/0
  1526 ;;		Unchanged: 0/0
  1527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1529 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1531 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1532 ;;Total ram usage:        0 bytes
  1533 ;; Hardware stack levels used:    1
  1534 ;; Hardware stack levels required when called:    5
  1535 ;; This function calls:
  1536 ;;		_lcd_gotoxy
  1537 ;;		_lcd_putrs
  1538 ;;		_sprintf
  1539 ;; This function is called by:
  1540 ;;		_set_vision
  1541 ;; This function uses a non-reentrant model
  1542 ;;
  1543                           
  1544                           	psect	text2
  1545  0029E6                     __ptext2:
  1546                           	opt stack 0
  1547  0029E6                     _write_Date:
  1548                           	opt stack 24
  1549                           
  1550                           ;lcd_vision.c: 13: lcd_gotoxy(9,1);
  1551                           
  1552                           ;incstack = 0
  1553  0029E6  0E01               	movlw	1
  1554  0029E8  6E05               	movwf	lcd_gotoxy@y,c
  1555  0029EA  0E09               	movlw	9
  1556  0029EC  EC15  F018         	call	_lcd_gotoxy
  1557                           
  1558                           ;lcd_vision.c: 14: sprintf(buffer2,"%02u/%02u/%02u",dia,mes,anio);
  1559  0029F0  0E8C               	movlw	low _buffer2
  1560  0029F2  6E0D               	movwf	sprintf@sp,c
  1561  0029F4  0E00               	movlw	high _buffer2
  1562  0029F6  6E0E               	movwf	sprintf@sp+1,c
  1563  0029F8  0E69               	movlw	low STR_14
  1564  0029FA  6E0F               	movwf	sprintf@f,c
  1565  0029FC  0E0F               	movlw	high STR_14
  1566  0029FE  6E10               	movwf	sprintf@f+1,c
  1567  002A00  C0C1  F011         	movff	_dia,?_sprintf+4
  1568  002A04  C0C2  F012         	movff	_dia+1,?_sprintf+5
  1569  002A08  C0C7  F013         	movff	_mes,?_sprintf+6
  1570  002A0C  C0C8  F014         	movff	_mes+1,?_sprintf+7
  1571  002A10  C0BF  F015         	movff	_anio,?_sprintf+8
  1572  002A14  C0C0  F016         	movff	_anio+1,?_sprintf+9
  1573  002A18  EC3E  F009         	call	_sprintf	;wreg free
  1574                           
  1575                           ;lcd_vision.c: 15: lcd_putrs(buffer2);
  1576  002A1C  0E8C               	movlw	low _buffer2
  1577  002A1E  6E09               	movwf	lcd_putrs@ptr,c
  1578  002A20  0E00               	movlw	high _buffer2
  1579  002A22  6E0A               	movwf	lcd_putrs@ptr+1,c
  1580  002A24  EC65  F016         	call	_lcd_putrs	;wreg free
  1581                           
  1582                           ;lcd_vision.c: 16: sprintf(buffer2,"%02u:%02u",hora,minuto);
  1583  002A28  0E8C               	movlw	low _buffer2
  1584  002A2A  6E0D               	movwf	sprintf@sp,c
  1585  002A2C  0E00               	movlw	high _buffer2
  1586  002A2E  6E0E               	movwf	sprintf@sp+1,c
  1587  002A30  0E9A               	movlw	low STR_15
  1588  002A32  6E0F               	movwf	sprintf@f,c
  1589  002A34  0E0F               	movlw	high STR_15
  1590  002A36  6E10               	movwf	sprintf@f+1,c
  1591  002A38  C0C5  F011         	movff	_hora,?_sprintf+4
  1592  002A3C  C0C6  F012         	movff	_hora+1,?_sprintf+5
  1593  002A40  C0C9  F013         	movff	_minuto,?_sprintf+6
  1594  002A44  C0CA  F014         	movff	_minuto+1,?_sprintf+7
  1595  002A48  EC3E  F009         	call	_sprintf	;wreg free
  1596                           
  1597                           ;lcd_vision.c: 17: lcd_gotoxy(1,2);
  1598  002A4C  0E02               	movlw	2
  1599  002A4E  6E05               	movwf	lcd_gotoxy@y,c
  1600  002A50  0E01               	movlw	1
  1601  002A52  EC15  F018         	call	_lcd_gotoxy
  1602                           
  1603                           ;lcd_vision.c: 18: lcd_putrs(buffer2);
  1604  002A56  0E8C               	movlw	low _buffer2
  1605  002A58  6E09               	movwf	lcd_putrs@ptr,c
  1606  002A5A  0E00               	movlw	high _buffer2
  1607  002A5C  6E0A               	movwf	lcd_putrs@ptr+1,c
  1608  002A5E  EC65  F016         	call	_lcd_putrs	;wreg free
  1609  002A62  0012               	return		;funcret
  1610  002A64                     __end_of_write_Date:
  1611                           	opt stack 0
  1612                           tblptru	equ	0xFF8
  1613                           tblptrh	equ	0xFF7
  1614                           tblptrl	equ	0xFF6
  1615                           tablat	equ	0xFF5
  1616                           postinc0	equ	0xFEE
  1617                           wreg	equ	0xFE8
  1618                           postdec1	equ	0xFE5
  1619                           fsr1l	equ	0xFE1
  1620                           status	equ	0xFD8
  1621                           
  1622 ;; *************** function _twinkle *****************
  1623 ;; Defined at:
  1624 ;;		line 64 in file "lcd_vision.c"
  1625 ;; Parameters:    Size  Location     Type
  1626 ;;		None
  1627 ;; Auto vars:     Size  Location     Type
  1628 ;;  input           1   36[COMRAM] unsigned char 
  1629 ;; Return value:  Size  Location     Type
  1630 ;;		None               void
  1631 ;; Registers used:
  1632 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1633 ;; Tracked objects:
  1634 ;;		On entry : 0/0
  1635 ;;		On exit  : 0/0
  1636 ;;		Unchanged: 0/0
  1637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1639 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1641 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1642 ;;Total ram usage:        1 bytes
  1643 ;; Hardware stack levels used:    1
  1644 ;; Hardware stack levels required when called:    6
  1645 ;; This function calls:
  1646 ;;		__delay_s
  1647 ;;		_lcd_gotoxy
  1648 ;;		_lcd_putrs
  1649 ;;		_read_keyboard
  1650 ;; This function is called by:
  1651 ;;		_set_vision
  1652 ;; This function uses a non-reentrant model
  1653 ;;
  1654                           
  1655                           	psect	text3
  1656  002B56                     __ptext3:
  1657                           	opt stack 0
  1658  002B56                     _twinkle:
  1659                           	opt stack 23
  1660                           
  1661                           ;lcd_vision.c: 65: char input = 1;
  1662                           
  1663                           ;incstack = 0
  1664  002B56  0E01               	movlw	1
  1665  002B58  D024               	goto	L1
  1666  002B5A                     l4033:
  1667                           
  1668                           ;lcd_vision.c: 68: _delay_s(500);
  1669  002B5A  0E01               	movlw	1
  1670  002B5C  6E0A               	movwf	__delay_s@millis+1,c
  1671  002B5E  0EF4               	movlw	244
  1672  002B60  6E09               	movwf	__delay_s@millis,c
  1673  002B62  EC39  F016         	call	__delay_s	;wreg free
  1674                           
  1675                           ;lcd_vision.c: 69: lcd_gotoxy(7,2);
  1676  002B66  0E02               	movlw	2
  1677  002B68  6E05               	movwf	lcd_gotoxy@y,c
  1678  002B6A  0E07               	movlw	7
  1679  002B6C  EC15  F018         	call	_lcd_gotoxy
  1680                           
  1681                           ;lcd_vision.c: 70: lcd_putrs("WARNING!!!");
  1682  002B70  0E85               	movlw	low STR_16
  1683  002B72  6E09               	movwf	lcd_putrs@ptr,c
  1684  002B74  0E0F               	movlw	high STR_16
  1685  002B76  6E0A               	movwf	lcd_putrs@ptr+1,c
  1686  002B78  EC65  F016         	call	_lcd_putrs	;wreg free
  1687                           
  1688                           ;lcd_vision.c: 71: _delay_s(500);
  1689  002B7C  0E01               	movlw	1
  1690  002B7E  6E0A               	movwf	__delay_s@millis+1,c
  1691  002B80  0EF4               	movlw	244
  1692  002B82  6E09               	movwf	__delay_s@millis,c
  1693  002B84  EC39  F016         	call	__delay_s	;wreg free
  1694                           
  1695                           ;lcd_vision.c: 72: lcd_gotoxy(7,2);
  1696  002B88  0E02               	movlw	2
  1697  002B8A  6E05               	movwf	lcd_gotoxy@y,c
  1698  002B8C  0E07               	movlw	7
  1699  002B8E  EC15  F018         	call	_lcd_gotoxy
  1700                           
  1701                           ;lcd_vision.c: 73: lcd_putrs("          ");
  1702  002B92  0E5E               	movlw	low (STR_1+22)
  1703  002B94  6E09               	movwf	lcd_putrs@ptr,c
  1704  002B96  0E0F               	movlw	high (STR_1+22)
  1705  002B98  6E0A               	movwf	lcd_putrs@ptr+1,c
  1706  002B9A  EC65  F016         	call	_lcd_putrs	;wreg free
  1707                           
  1708                           ;lcd_vision.c: 74: input = read_keyboard();
  1709  002B9E  ECE2  F007         	call	_read_keyboard	;wreg free
  1710  002BA2                     L1:
  1711  002BA2  6E25               	movwf	twinkle@input,c
  1712  002BA4  D000               	goto	l4045
  1713  002BA6                     l4045:
  1714  002BA6  0E10               	movlw	16
  1715  002BA8  1825               	xorwf	twinkle@input,w,c
  1716  002BAA  A4D8               	btfss	status,2,c
  1717  002BAC  D7D6               	goto	l4033
  1718                           
  1719                           ;lcd_vision.c: 75: }
  1720                           ;lcd_vision.c: 78: state_alarm = ACTIVE;
  1721  002BAE  0E00               	movlw	0
  1722  002BB0  0100               	movlb	0	; () banked
  1723  002BB2  6FCE               	movwf	_state_alarm& (0+255),b
  1724                           
  1725                           ; BSR set to: 0
  1726  002BB4  0012               	return		;funcret
  1727  002BB6                     __end_of_twinkle:
  1728                           	opt stack 0
  1729                           tblptru	equ	0xFF8
  1730                           tblptrh	equ	0xFF7
  1731                           tblptrl	equ	0xFF6
  1732                           tablat	equ	0xFF5
  1733                           postinc0	equ	0xFEE
  1734                           wreg	equ	0xFE8
  1735                           postdec1	equ	0xFE5
  1736                           fsr1l	equ	0xFE1
  1737                           status	equ	0xFD8
  1738                           
  1739 ;; *************** function _read_keyboard *****************
  1740 ;; Defined at:
  1741 ;;		line 8 in file "keyboard.c"
  1742 ;; Parameters:    Size  Location     Type
  1743 ;;		None
  1744 ;; Auto vars:     Size  Location     Type
  1745 ;;		None
  1746 ;; Return value:  Size  Location     Type
  1747 ;;                  1    wreg      unsigned char 
  1748 ;; Registers used:
  1749 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1750 ;; Tracked objects:
  1751 ;;		On entry : 0/0
  1752 ;;		On exit  : 0/0
  1753 ;;		Unchanged: 0/0
  1754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1757 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1758 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1759 ;;Total ram usage:        1 bytes
  1760 ;; Hardware stack levels used:    1
  1761 ;; Hardware stack levels required when called:    5
  1762 ;; This function calls:
  1763 ;;		_lcd_putrs
  1764 ;;		_sprintf
  1765 ;; This function is called by:
  1766 ;;		_main
  1767 ;;		_twinkle
  1768 ;;		_set_vision
  1769 ;; This function uses a non-reentrant model
  1770 ;;
  1771                           
  1772                           	psect	text4
  1773  000FC4                     __ptext4:
  1774                           	opt stack 0
  1775  000FC4                     _read_keyboard:
  1776                           	opt stack 23
  1777                           
  1778                           ;keyboard.c: 9: LATAbits.LATA0=1;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=0;
  1779                           
  1780                           ; BSR set to: 0
  1781                           ;incstack = 0
  1782  000FC4  8089               	bsf	3977,0,c	;volatile
  1783  000FC6  9289               	bcf	3977,1,c	;volatile
  1784  000FC8  9489               	bcf	3977,2,c	;volatile
  1785  000FCA  9689               	bcf	3977,3,c	;volatile
  1786                           
  1787                           ;keyboard.c: 10: {
  1788                           ;keyboard.c: 11: if (PORTAbits.RA5==1){key=1;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA5==1){};}
  1789  000FCC  AA80               	btfss	3968,5,c	;volatile
  1790  000FCE  D019               	goto	l204
  1791  000FD0  0E01               	movlw	1
  1792  000FD2  0100               	movlb	0	; () banked
  1793  000FD4  6FCD               	movwf	_key& (0+255),b
  1794                           
  1795                           ; BSR set to: 0
  1796  000FD6  0E8C               	movlw	low _buffer2
  1797  000FD8  6E0D               	movwf	sprintf@sp,c
  1798  000FDA  0E00               	movlw	high _buffer2
  1799  000FDC  6E0E               	movwf	sprintf@sp+1,c
  1800  000FDE  0EB6               	movlw	low STR_4
  1801  000FE0  6E0F               	movwf	sprintf@f,c
  1802  000FE2  0E0F               	movlw	high STR_4
  1803  000FE4  6E10               	movwf	sprintf@f+1,c
  1804  000FE6  C0CD  F011         	movff	_key,?_sprintf+4
  1805  000FEA  6A12               	clrf	?_sprintf+5,c
  1806  000FEC  EC3E  F009         	call	_sprintf	;wreg free
  1807  000FF0  0E8C               	movlw	low _buffer2
  1808  000FF2  6E09               	movwf	lcd_putrs@ptr,c
  1809  000FF4  0E00               	movlw	high _buffer2
  1810  000FF6  6E0A               	movwf	lcd_putrs@ptr+1,c
  1811  000FF8  EC65  F016         	call	_lcd_putrs	;wreg free
  1812  000FFC  D000               	goto	l205
  1813  000FFE                     l205:
  1814  000FFE  BA80               	btfsc	3968,5,c	;volatile
  1815  001000  D7FE               	goto	l205
  1816  001002                     l204:
  1817                           
  1818                           ;keyboard.c: 12: if (PORTAbits.RA7==1){key=2;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  1819  001002  AE80               	btfss	3968,7,c	;volatile
  1820  001004  D019               	goto	l208
  1821  001006  0E02               	movlw	2
  1822  001008  0100               	movlb	0	; () banked
  1823  00100A  6FCD               	movwf	_key& (0+255),b
  1824                           
  1825                           ; BSR set to: 0
  1826  00100C  0E8C               	movlw	low _buffer2
  1827  00100E  6E0D               	movwf	sprintf@sp,c
  1828  001010  0E00               	movlw	high _buffer2
  1829  001012  6E0E               	movwf	sprintf@sp+1,c
  1830  001014  0EB6               	movlw	low STR_4
  1831  001016  6E0F               	movwf	sprintf@f,c
  1832  001018  0E0F               	movlw	high STR_4
  1833  00101A  6E10               	movwf	sprintf@f+1,c
  1834  00101C  C0CD  F011         	movff	_key,?_sprintf+4
  1835  001020  6A12               	clrf	?_sprintf+5,c
  1836  001022  EC3E  F009         	call	_sprintf	;wreg free
  1837  001026  0E8C               	movlw	low _buffer2
  1838  001028  6E09               	movwf	lcd_putrs@ptr,c
  1839  00102A  0E00               	movlw	high _buffer2
  1840  00102C  6E0A               	movwf	lcd_putrs@ptr+1,c
  1841  00102E  EC65  F016         	call	_lcd_putrs	;wreg free
  1842  001032  D000               	goto	l209
  1843  001034                     l209:
  1844  001034  BE80               	btfsc	3968,7,c	;volatile
  1845  001036  D7FE               	goto	l209
  1846  001038                     l208:
  1847                           
  1848                           ;keyboard.c: 13: if (PORTAbits.RA6==1){key=3;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA6==1){};}
  1849  001038  AC80               	btfss	3968,6,c	;volatile
  1850  00103A  D019               	goto	l212
  1851  00103C  0E03               	movlw	3
  1852  00103E  0100               	movlb	0	; () banked
  1853  001040  6FCD               	movwf	_key& (0+255),b
  1854                           
  1855                           ; BSR set to: 0
  1856  001042  0E8C               	movlw	low _buffer2
  1857  001044  6E0D               	movwf	sprintf@sp,c
  1858  001046  0E00               	movlw	high _buffer2
  1859  001048  6E0E               	movwf	sprintf@sp+1,c
  1860  00104A  0EB6               	movlw	low STR_4
  1861  00104C  6E0F               	movwf	sprintf@f,c
  1862  00104E  0E0F               	movlw	high STR_4
  1863  001050  6E10               	movwf	sprintf@f+1,c
  1864  001052  C0CD  F011         	movff	_key,?_sprintf+4
  1865  001056  6A12               	clrf	?_sprintf+5,c
  1866  001058  EC3E  F009         	call	_sprintf	;wreg free
  1867  00105C  0E8C               	movlw	low _buffer2
  1868  00105E  6E09               	movwf	lcd_putrs@ptr,c
  1869  001060  0E00               	movlw	high _buffer2
  1870  001062  6E0A               	movwf	lcd_putrs@ptr+1,c
  1871  001064  EC65  F016         	call	_lcd_putrs	;wreg free
  1872  001068  D000               	goto	l213
  1873  00106A                     l213:
  1874  00106A  BC80               	btfsc	3968,6,c	;volatile
  1875  00106C  D7FE               	goto	l213
  1876  00106E                     l212:
  1877                           
  1878                           ;keyboard.c: 14: if (PORTCbits.RC2==1){key=11; while(PORTCbits.RC2==1){};}
  1879  00106E  A482               	btfss	3970,2,c	;volatile
  1880  001070  D006               	goto	l216
  1881  001072  0E0B               	movlw	11
  1882  001074  0100               	movlb	0	; () banked
  1883  001076  6FCD               	movwf	_key& (0+255),b
  1884  001078  D000               	goto	l217
  1885  00107A                     l217:
  1886  00107A  B482               	btfsc	3970,2,c	;volatile
  1887  00107C  D7FE               	goto	l217
  1888  00107E                     l216:
  1889                           
  1890                           ;keyboard.c: 15: }
  1891                           ;keyboard.c: 16: LATAbits.LATA0=0;LATAbits.LATA1=1;LATAbits.LATA2=0;LATAbits.LATA3=0;
  1892  00107E  9089               	bcf	3977,0,c	;volatile
  1893  001080  8289               	bsf	3977,1,c	;volatile
  1894  001082  9489               	bcf	3977,2,c	;volatile
  1895  001084  9689               	bcf	3977,3,c	;volatile
  1896                           
  1897                           ;keyboard.c: 17: {
  1898                           ;keyboard.c: 18: if (PORTAbits.RA5==1){key=4;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA5==1){};}
  1899  001086  AA80               	btfss	3968,5,c	;volatile
  1900  001088  D019               	goto	l220
  1901  00108A  0E04               	movlw	4
  1902  00108C  0100               	movlb	0	; () banked
  1903  00108E  6FCD               	movwf	_key& (0+255),b
  1904                           
  1905                           ; BSR set to: 0
  1906  001090  0E8C               	movlw	low _buffer2
  1907  001092  6E0D               	movwf	sprintf@sp,c
  1908  001094  0E00               	movlw	high _buffer2
  1909  001096  6E0E               	movwf	sprintf@sp+1,c
  1910  001098  0EB6               	movlw	low STR_4
  1911  00109A  6E0F               	movwf	sprintf@f,c
  1912  00109C  0E0F               	movlw	high STR_4
  1913  00109E  6E10               	movwf	sprintf@f+1,c
  1914  0010A0  C0CD  F011         	movff	_key,?_sprintf+4
  1915  0010A4  6A12               	clrf	?_sprintf+5,c
  1916  0010A6  EC3E  F009         	call	_sprintf	;wreg free
  1917  0010AA  0E8C               	movlw	low _buffer2
  1918  0010AC  6E09               	movwf	lcd_putrs@ptr,c
  1919  0010AE  0E00               	movlw	high _buffer2
  1920  0010B0  6E0A               	movwf	lcd_putrs@ptr+1,c
  1921  0010B2  EC65  F016         	call	_lcd_putrs	;wreg free
  1922  0010B6  D000               	goto	l221
  1923  0010B8                     l221:
  1924  0010B8  BA80               	btfsc	3968,5,c	;volatile
  1925  0010BA  D7FE               	goto	l221
  1926  0010BC                     l220:
  1927                           
  1928                           ;keyboard.c: 19: if (PORTAbits.RA7==1){key=5;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  1929  0010BC  AE80               	btfss	3968,7,c	;volatile
  1930  0010BE  D019               	goto	l224
  1931  0010C0  0E05               	movlw	5
  1932  0010C2  0100               	movlb	0	; () banked
  1933  0010C4  6FCD               	movwf	_key& (0+255),b
  1934                           
  1935                           ; BSR set to: 0
  1936  0010C6  0E8C               	movlw	low _buffer2
  1937  0010C8  6E0D               	movwf	sprintf@sp,c
  1938  0010CA  0E00               	movlw	high _buffer2
  1939  0010CC  6E0E               	movwf	sprintf@sp+1,c
  1940  0010CE  0EB6               	movlw	low STR_4
  1941  0010D0  6E0F               	movwf	sprintf@f,c
  1942  0010D2  0E0F               	movlw	high STR_4
  1943  0010D4  6E10               	movwf	sprintf@f+1,c
  1944  0010D6  C0CD  F011         	movff	_key,?_sprintf+4
  1945  0010DA  6A12               	clrf	?_sprintf+5,c
  1946  0010DC  EC3E  F009         	call	_sprintf	;wreg free
  1947  0010E0  0E8C               	movlw	low _buffer2
  1948  0010E2  6E09               	movwf	lcd_putrs@ptr,c
  1949  0010E4  0E00               	movlw	high _buffer2
  1950  0010E6  6E0A               	movwf	lcd_putrs@ptr+1,c
  1951  0010E8  EC65  F016         	call	_lcd_putrs	;wreg free
  1952  0010EC  D000               	goto	l225
  1953  0010EE                     l225:
  1954  0010EE  BE80               	btfsc	3968,7,c	;volatile
  1955  0010F0  D7FE               	goto	l225
  1956  0010F2                     l224:
  1957                           
  1958                           ;keyboard.c: 20: if (PORTAbits.RA6==1){key=6;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA6==1){};}
  1959  0010F2  AC80               	btfss	3968,6,c	;volatile
  1960  0010F4  D019               	goto	l228
  1961  0010F6  0E06               	movlw	6
  1962  0010F8  0100               	movlb	0	; () banked
  1963  0010FA  6FCD               	movwf	_key& (0+255),b
  1964                           
  1965                           ; BSR set to: 0
  1966  0010FC  0E8C               	movlw	low _buffer2
  1967  0010FE  6E0D               	movwf	sprintf@sp,c
  1968  001100  0E00               	movlw	high _buffer2
  1969  001102  6E0E               	movwf	sprintf@sp+1,c
  1970  001104  0EB6               	movlw	low STR_4
  1971  001106  6E0F               	movwf	sprintf@f,c
  1972  001108  0E0F               	movlw	high STR_4
  1973  00110A  6E10               	movwf	sprintf@f+1,c
  1974  00110C  C0CD  F011         	movff	_key,?_sprintf+4
  1975  001110  6A12               	clrf	?_sprintf+5,c
  1976  001112  EC3E  F009         	call	_sprintf	;wreg free
  1977  001116  0E8C               	movlw	low _buffer2
  1978  001118  6E09               	movwf	lcd_putrs@ptr,c
  1979  00111A  0E00               	movlw	high _buffer2
  1980  00111C  6E0A               	movwf	lcd_putrs@ptr+1,c
  1981  00111E  EC65  F016         	call	_lcd_putrs	;wreg free
  1982  001122  D000               	goto	l229
  1983  001124                     l229:
  1984  001124  BC80               	btfsc	3968,6,c	;volatile
  1985  001126  D7FE               	goto	l229
  1986  001128                     l228:
  1987                           
  1988                           ;keyboard.c: 21: if (PORTCbits.RC2==1){key=12; while(PORTCbits.RC2==1){};}
  1989  001128  A482               	btfss	3970,2,c	;volatile
  1990  00112A  D006               	goto	l232
  1991  00112C  0E0C               	movlw	12
  1992  00112E  0100               	movlb	0	; () banked
  1993  001130  6FCD               	movwf	_key& (0+255),b
  1994  001132  D000               	goto	l233
  1995  001134                     l233:
  1996  001134  B482               	btfsc	3970,2,c	;volatile
  1997  001136  D7FE               	goto	l233
  1998  001138                     l232:
  1999                           
  2000                           ;keyboard.c: 22: }
  2001                           ;keyboard.c: 23: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=1;LATAbits.LATA3=0;
  2002  001138  9089               	bcf	3977,0,c	;volatile
  2003  00113A  9289               	bcf	3977,1,c	;volatile
  2004  00113C  8489               	bsf	3977,2,c	;volatile
  2005  00113E  9689               	bcf	3977,3,c	;volatile
  2006                           
  2007                           ;keyboard.c: 24: {
  2008                           ;keyboard.c: 25: if (PORTAbits.RA5==1){key=7;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA5==1){};}
  2009  001140  AA80               	btfss	3968,5,c	;volatile
  2010  001142  D019               	goto	l236
  2011  001144  0E07               	movlw	7
  2012  001146  0100               	movlb	0	; () banked
  2013  001148  6FCD               	movwf	_key& (0+255),b
  2014                           
  2015                           ; BSR set to: 0
  2016  00114A  0E8C               	movlw	low _buffer2
  2017  00114C  6E0D               	movwf	sprintf@sp,c
  2018  00114E  0E00               	movlw	high _buffer2
  2019  001150  6E0E               	movwf	sprintf@sp+1,c
  2020  001152  0EB6               	movlw	low STR_4
  2021  001154  6E0F               	movwf	sprintf@f,c
  2022  001156  0E0F               	movlw	high STR_4
  2023  001158  6E10               	movwf	sprintf@f+1,c
  2024  00115A  C0CD  F011         	movff	_key,?_sprintf+4
  2025  00115E  6A12               	clrf	?_sprintf+5,c
  2026  001160  EC3E  F009         	call	_sprintf	;wreg free
  2027  001164  0E8C               	movlw	low _buffer2
  2028  001166  6E09               	movwf	lcd_putrs@ptr,c
  2029  001168  0E00               	movlw	high _buffer2
  2030  00116A  6E0A               	movwf	lcd_putrs@ptr+1,c
  2031  00116C  EC65  F016         	call	_lcd_putrs	;wreg free
  2032  001170  D000               	goto	l237
  2033  001172                     l237:
  2034  001172  BA80               	btfsc	3968,5,c	;volatile
  2035  001174  D7FE               	goto	l237
  2036  001176                     l236:
  2037                           
  2038                           ;keyboard.c: 26: if (PORTAbits.RA7==1){key=8;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  2039  001176  AE80               	btfss	3968,7,c	;volatile
  2040  001178  D019               	goto	l240
  2041  00117A  0E08               	movlw	8
  2042  00117C  0100               	movlb	0	; () banked
  2043  00117E  6FCD               	movwf	_key& (0+255),b
  2044                           
  2045                           ; BSR set to: 0
  2046  001180  0E8C               	movlw	low _buffer2
  2047  001182  6E0D               	movwf	sprintf@sp,c
  2048  001184  0E00               	movlw	high _buffer2
  2049  001186  6E0E               	movwf	sprintf@sp+1,c
  2050  001188  0EB6               	movlw	low STR_4
  2051  00118A  6E0F               	movwf	sprintf@f,c
  2052  00118C  0E0F               	movlw	high STR_4
  2053  00118E  6E10               	movwf	sprintf@f+1,c
  2054  001190  C0CD  F011         	movff	_key,?_sprintf+4
  2055  001194  6A12               	clrf	?_sprintf+5,c
  2056  001196  EC3E  F009         	call	_sprintf	;wreg free
  2057  00119A  0E8C               	movlw	low _buffer2
  2058  00119C  6E09               	movwf	lcd_putrs@ptr,c
  2059  00119E  0E00               	movlw	high _buffer2
  2060  0011A0  6E0A               	movwf	lcd_putrs@ptr+1,c
  2061  0011A2  EC65  F016         	call	_lcd_putrs	;wreg free
  2062  0011A6  D000               	goto	l241
  2063  0011A8                     l241:
  2064  0011A8  BE80               	btfsc	3968,7,c	;volatile
  2065  0011AA  D7FE               	goto	l241
  2066  0011AC                     l240:
  2067                           
  2068                           ;keyboard.c: 27: if (PORTAbits.RA6==1){key=9;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA6==1){};}
  2069  0011AC  AC80               	btfss	3968,6,c	;volatile
  2070  0011AE  D019               	goto	l244
  2071  0011B0  0E09               	movlw	9
  2072  0011B2  0100               	movlb	0	; () banked
  2073  0011B4  6FCD               	movwf	_key& (0+255),b
  2074                           
  2075                           ; BSR set to: 0
  2076  0011B6  0E8C               	movlw	low _buffer2
  2077  0011B8  6E0D               	movwf	sprintf@sp,c
  2078  0011BA  0E00               	movlw	high _buffer2
  2079  0011BC  6E0E               	movwf	sprintf@sp+1,c
  2080  0011BE  0EB6               	movlw	low STR_4
  2081  0011C0  6E0F               	movwf	sprintf@f,c
  2082  0011C2  0E0F               	movlw	high STR_4
  2083  0011C4  6E10               	movwf	sprintf@f+1,c
  2084  0011C6  C0CD  F011         	movff	_key,?_sprintf+4
  2085  0011CA  6A12               	clrf	?_sprintf+5,c
  2086  0011CC  EC3E  F009         	call	_sprintf	;wreg free
  2087  0011D0  0E8C               	movlw	low _buffer2
  2088  0011D2  6E09               	movwf	lcd_putrs@ptr,c
  2089  0011D4  0E00               	movlw	high _buffer2
  2090  0011D6  6E0A               	movwf	lcd_putrs@ptr+1,c
  2091  0011D8  EC65  F016         	call	_lcd_putrs	;wreg free
  2092  0011DC  D000               	goto	l245
  2093  0011DE                     l245:
  2094  0011DE  BC80               	btfsc	3968,6,c	;volatile
  2095  0011E0  D7FE               	goto	l245
  2096  0011E2                     l244:
  2097                           
  2098                           ;keyboard.c: 28: if (PORTCbits.RC2==1){key=13; while(PORTCbits.RC2==1){};}
  2099  0011E2  A482               	btfss	3970,2,c	;volatile
  2100  0011E4  D006               	goto	l248
  2101  0011E6  0E0D               	movlw	13
  2102  0011E8  0100               	movlb	0	; () banked
  2103  0011EA  6FCD               	movwf	_key& (0+255),b
  2104  0011EC  D000               	goto	l249
  2105  0011EE                     l249:
  2106  0011EE  B482               	btfsc	3970,2,c	;volatile
  2107  0011F0  D7FE               	goto	l249
  2108  0011F2                     l248:
  2109                           
  2110                           ;keyboard.c: 29: }
  2111                           ;keyboard.c: 30: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=1;
  2112  0011F2  9089               	bcf	3977,0,c	;volatile
  2113  0011F4  9289               	bcf	3977,1,c	;volatile
  2114  0011F6  9489               	bcf	3977,2,c	;volatile
  2115  0011F8  8689               	bsf	3977,3,c	;volatile
  2116                           
  2117                           ;keyboard.c: 31: {
  2118                           ;keyboard.c: 32: if (PORTAbits.RA5==1){key=14; while(PORTAbits.RA5==1){};}
  2119  0011FA  AA80               	btfss	3968,5,c	;volatile
  2120  0011FC  D006               	goto	l252
  2121  0011FE  0E0E               	movlw	14
  2122  001200  0100               	movlb	0	; () banked
  2123  001202  6FCD               	movwf	_key& (0+255),b
  2124  001204  D000               	goto	l253
  2125  001206                     l253:
  2126  001206  BA80               	btfsc	3968,5,c	;volatile
  2127  001208  D7FE               	goto	l253
  2128  00120A                     l252:
  2129                           
  2130                           ;keyboard.c: 33: if (PORTAbits.RA7==1){key=0;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  2131  00120A  AE80               	btfss	3968,7,c	;volatile
  2132  00120C  D019               	goto	l256
  2133  00120E  0E00               	movlw	0
  2134  001210  0100               	movlb	0	; () banked
  2135  001212  6FCD               	movwf	_key& (0+255),b
  2136                           
  2137                           ; BSR set to: 0
  2138  001214  0E8C               	movlw	low _buffer2
  2139  001216  6E0D               	movwf	sprintf@sp,c
  2140  001218  0E00               	movlw	high _buffer2
  2141  00121A  6E0E               	movwf	sprintf@sp+1,c
  2142  00121C  0EB6               	movlw	low STR_4
  2143  00121E  6E0F               	movwf	sprintf@f,c
  2144  001220  0E0F               	movlw	high STR_4
  2145  001222  6E10               	movwf	sprintf@f+1,c
  2146  001224  C0CD  F011         	movff	_key,?_sprintf+4
  2147  001228  6A12               	clrf	?_sprintf+5,c
  2148  00122A  EC3E  F009         	call	_sprintf	;wreg free
  2149  00122E  0E8C               	movlw	low _buffer2
  2150  001230  6E09               	movwf	lcd_putrs@ptr,c
  2151  001232  0E00               	movlw	high _buffer2
  2152  001234  6E0A               	movwf	lcd_putrs@ptr+1,c
  2153  001236  EC65  F016         	call	_lcd_putrs	;wreg free
  2154  00123A  D000               	goto	l257
  2155  00123C                     l257:
  2156  00123C  BE80               	btfsc	3968,7,c	;volatile
  2157  00123E  D7FE               	goto	l257
  2158  001240                     l256:
  2159                           
  2160                           ;keyboard.c: 34: if (PORTAbits.RA6==1){key=15; while(PORTAbits.RA6==1){};}
  2161  001240  AC80               	btfss	3968,6,c	;volatile
  2162  001242  D006               	goto	l260
  2163  001244  0E0F               	movlw	15
  2164  001246  0100               	movlb	0	; () banked
  2165  001248  6FCD               	movwf	_key& (0+255),b
  2166  00124A  D000               	goto	l261
  2167  00124C                     l261:
  2168  00124C  BC80               	btfsc	3968,6,c	;volatile
  2169  00124E  D7FE               	goto	l261
  2170  001250                     l260:
  2171                           
  2172                           ;keyboard.c: 35: if (PORTCbits.RC2==1){key=16; while(PORTCbits.RC2==1){};}
  2173  001250  A482               	btfss	3970,2,c	;volatile
  2174  001252  D008               	goto	l3681
  2175  001254  0E10               	movlw	16
  2176  001256  0100               	movlb	0	; () banked
  2177  001258  6FCD               	movwf	_key& (0+255),b
  2178  00125A  D000               	goto	l265
  2179  00125C                     l265:
  2180  00125C  A482               	btfss	3970,2,c	;volatile
  2181  00125E  D002               	goto	l3681
  2182  001260  D7FD               	goto	l265
  2183  001262  D000               	goto	l3681
  2184  001264                     l3681:
  2185                           
  2186                           ;keyboard.c: 36: }
  2187                           ;keyboard.c: 37: _delay((unsigned long)((98)*(8000000/4000.0)));
  2188  001264  0EFF               	movlw	255
  2189  001266  6E24               	movwf	??_read_keyboard& (0+255),c
  2190  001268  0E8A               	movlw	138
  2191  00126A                     u4367:
  2192  00126A  2EE8               	decfsz	wreg,f,c
  2193  00126C  D7FE               	goto	u4367
  2194  00126E  2E24               	decfsz	??_read_keyboard& (0+255),f,c
  2195  001270  D7FC               	goto	u4367
  2196  001272  D000               	nop2	
  2197                           
  2198                           ;keyboard.c: 40: return key;
  2199  001274  0100               	movlb	0	; () banked
  2200  001276  51CD               	movf	_key& (0+255),w,b
  2201  001278  0012               	return	
  2202                           
  2203                           ; BSR set to: 0
  2204                           
  2205                           ; BSR set to: 0
  2206  00127A  0012               	return		;funcret
  2207  00127C                     __end_of_read_keyboard:
  2208                           	opt stack 0
  2209                           tblptru	equ	0xFF8
  2210                           tblptrh	equ	0xFF7
  2211                           tblptrl	equ	0xFF6
  2212                           tablat	equ	0xFF5
  2213                           postinc0	equ	0xFEE
  2214                           wreg	equ	0xFE8
  2215                           postdec1	equ	0xFE5
  2216                           fsr1l	equ	0xFE1
  2217                           status	equ	0xFD8
  2218                           
  2219 ;; *************** function _sprintf *****************
  2220 ;; Defined at:
  2221 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2222 ;; Parameters:    Size  Location     Type
  2223 ;;  sp              2   12[COMRAM] PTR unsigned char 
  2224 ;;		 -> buffer2(20), 
  2225 ;;  f               2   14[COMRAM] PTR const unsigned char 
  2226 ;;		 -> STR_15(10), STR_14(15), STR_13(5), STR_12(5), 
  2227 ;;		 -> STR_11(5), STR_10(5), STR_9(5), STR_8(5), 
  2228 ;;		 -> STR_7(5), STR_6(5), STR_5(5), STR_4(5), 
  2229 ;; Auto vars:     Size  Location     Type
  2230 ;;  tmpval          4    0        struct .
  2231 ;;  cp              3    0        PTR const unsigned char 
  2232 ;;  width           2   32[COMRAM] int 
  2233 ;;  val             2   29[COMRAM] unsigned int 
  2234 ;;  ap              2   26[COMRAM] PTR void [1]
  2235 ;;		 -> ?_sprintf(2), 
  2236 ;;  len             2    0        unsigned int 
  2237 ;;  c               1   34[COMRAM] char 
  2238 ;;  prec            1   31[COMRAM] char 
  2239 ;;  flag            1   28[COMRAM] unsigned char 
  2240 ;; Return value:  Size  Location     Type
  2241 ;;                  2   12[COMRAM] int 
  2242 ;; Registers used:
  2243 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2244 ;; Tracked objects:
  2245 ;;		On entry : 0/0
  2246 ;;		On exit  : 0/0
  2247 ;;		Unchanged: 0/0
  2248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2249 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2250 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2251 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2252 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2253 ;;Total ram usage:       23 bytes
  2254 ;; Hardware stack levels used:    1
  2255 ;; Hardware stack levels required when called:    1
  2256 ;; This function calls:
  2257 ;;		___lwdiv
  2258 ;;		___lwmod
  2259 ;;		___wmul
  2260 ;;		_isdigit
  2261 ;; This function is called by:
  2262 ;;		_read_keyboard
  2263 ;;		_write_Date
  2264 ;; This function uses a non-reentrant model
  2265 ;;
  2266                           
  2267                           	psect	text5
  2268  00127C                     __ptext5:
  2269                           	opt stack 0
  2270  00127C                     _sprintf:
  2271                           	opt stack 27
  2272                           
  2273                           ;doprnt.c: 494: va_list ap;
  2274                           ;doprnt.c: 499: signed char c;
  2275                           ;doprnt.c: 501: int width;
  2276                           ;doprnt.c: 506: signed char prec;
  2277                           ;doprnt.c: 508: unsigned char flag;
  2278                           ;doprnt.c: 523: union {
  2279                           ;doprnt.c: 524: unsigned long vd;
  2280                           ;doprnt.c: 525: double integ;
  2281                           ;doprnt.c: 526: } tmpval;
  2282                           ;doprnt.c: 528: unsigned int val;
  2283                           ;doprnt.c: 529: unsigned len;
  2284                           ;doprnt.c: 530: const char * cp;
  2285                           ;doprnt.c: 533: *ap = __va_start();
  2286                           
  2287                           ; BSR set to: 0
  2288                           ;incstack = 0
  2289  00127C  0E11               	movlw	low (?_sprintf+4)
  2290  00127E  6E1B               	movwf	sprintf@ap,c
  2291  001280  0E00               	movlw	high (?_sprintf+4)
  2292  001282  6E1C               	movwf	sprintf@ap+1,c
  2293                           
  2294                           ;doprnt.c: 536: while(c = *f++) {
  2295  001284  D117               	goto	l3471
  2296  001286                     l3389:
  2297                           
  2298                           ;doprnt.c: 538: if(c != '%')
  2299  001286  0E25               	movlw	37
  2300  001288  1823               	xorwf	sprintf@c,w,c
  2301  00128A  B4D8               	btfsc	status,2,c
  2302  00128C  D009               	goto	l3395
  2303                           
  2304                           ;doprnt.c: 540: {
  2305                           ;doprnt.c: 541: ((*sp++ = (c)));
  2306  00128E  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2307  001292  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2308  001296  C023  FFDF         	movff	sprintf@c,indf2
  2309  00129A  4A0D               	infsnz	sprintf@sp,f,c
  2310  00129C  2A0E               	incf	sprintf@sp+1,f,c
  2311                           
  2312                           ;doprnt.c: 542: continue;
  2313  00129E  D10A               	goto	l3471
  2314  0012A0                     l3395:
  2315                           
  2316                           ;doprnt.c: 543: }
  2317                           ;doprnt.c: 546: width = 0;
  2318  0012A0  0E00               	movlw	0
  2319  0012A2  6E22               	movwf	sprintf@width+1,c
  2320  0012A4  0E00               	movlw	0
  2321  0012A6  6E21               	movwf	sprintf@width,c
  2322                           
  2323                           ;doprnt.c: 548: flag = 0;
  2324  0012A8  0E00               	movlw	0
  2325  0012AA  6E1D               	movwf	sprintf@flag,c
  2326                           
  2327                           ;doprnt.c: 551: switch(*f) {
  2328                           
  2329                           ;doprnt.c: 550: for(;;) {
  2330  0012AC  D005               	goto	l3401
  2331  0012AE                     l3397:
  2332                           
  2333                           ;doprnt.c: 580: flag |= 0x04;
  2334  0012AE  841D               	bsf	sprintf@flag,2,c
  2335                           
  2336                           ;doprnt.c: 581: f++;
  2337  0012B0  4A0F               	infsnz	sprintf@f,f,c
  2338  0012B2  2A10               	incf	sprintf@f+1,f,c
  2339                           
  2340                           ;doprnt.c: 582: continue;
  2341  0012B4  D001               	goto	l3401
  2342                           
  2343                           ;doprnt.c: 584: }
  2344  0012B6  D00B               	goto	l3403
  2345  0012B8                     l3401:
  2346  0012B8  C00F  FFF6         	movff	sprintf@f,tblptrl
  2347  0012BC  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2348  0012C0                     	if	0	;tblptru may be non-zero
  2349  0012C0                     	endif
  2350  0012C0                     	if	0	;tblptru may be non-zero
  2351  0012C0                     	endif
  2352  0012C0  0008               	tblrd		*
  2353  0012C2  50F5               	movf	tablat,w,c
  2354                           
  2355                           ; Switch size 1, requested type "space"
  2356                           ; Number of cases is 1, Range of values is 48 to 48
  2357                           ; switch strategies available:
  2358                           ; Name         Instructions Cycles
  2359                           ; simple_byte            4     3 (average)
  2360                           ;	Chosen strategy is simple_byte
  2361  0012C4  0A30               	xorlw	48	; case 48
  2362  0012C6  B4D8               	btfsc	status,2,c
  2363  0012C8  D7F2               	goto	l3397
  2364                           
  2365                           ;doprnt.c: 585: break;
  2366  0012CA  D001               	goto	l3403
  2367                           
  2368                           ;doprnt.c: 586: }
  2369  0012CC  D7F5               	goto	l3401
  2370  0012CE                     l3403:
  2371                           
  2372                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2373  0012CE  C00F  FFF6         	movff	sprintf@f,tblptrl
  2374  0012D2  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2375  0012D6                     	if	0	;tblptru may be non-zero
  2376  0012D6                     	endif
  2377  0012D6                     	if	0	;tblptru may be non-zero
  2378  0012D6                     	endif
  2379  0012D6  0008               	tblrd		*
  2380  0012D8  50F5               	movf	tablat,w,c
  2381  0012DA  EC27  F018         	call	_isdigit
  2382  0012DE  A0D8               	btfss	status,0,c
  2383  0012E0  D03A               	goto	l3419
  2384                           
  2385                           ;doprnt.c: 598: width = 0;
  2386  0012E2  0E00               	movlw	0
  2387  0012E4  6E22               	movwf	sprintf@width+1,c
  2388  0012E6  0E00               	movlw	0
  2389  0012E8  6E21               	movwf	sprintf@width,c
  2390  0012EA  D000               	goto	l3407
  2391  0012EC                     l3407:
  2392                           
  2393                           ;doprnt.c: 600: width *= 10;
  2394  0012EC  C021  F001         	movff	sprintf@width,___wmul@multiplier
  2395  0012F0  C022  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  2396  0012F4  0E00               	movlw	0
  2397  0012F6  6E04               	movwf	___wmul@multiplicand+1,c
  2398  0012F8  0E0A               	movlw	10
  2399  0012FA  6E03               	movwf	___wmul@multiplicand,c
  2400  0012FC  ECC9  F017         	call	___wmul	;wreg free
  2401  001300  C001  F021         	movff	?___wmul,sprintf@width
  2402  001304  C002  F022         	movff	?___wmul+1,sprintf@width+1
  2403                           
  2404                           ;doprnt.c: 601: width += *f++ - '0';
  2405  001308  0ED0               	movlw	208
  2406  00130A  6E17               	movwf	??_sprintf& (0+255),c
  2407  00130C  0EFF               	movlw	255
  2408  00130E  6E18               	movwf	(??_sprintf+1)& (0+255),c
  2409  001310  C00F  FFF6         	movff	sprintf@f,tblptrl
  2410  001314  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2411  001318                     	if	0	;tblptru may be non-zero
  2412  001318                     	endif
  2413  001318                     	if	0	;tblptru may be non-zero
  2414  001318                     	endif
  2415  001318  0008               	tblrd		*
  2416  00131A  50F5               	movf	tablat,w,c
  2417  00131C  6E19               	movwf	(??_sprintf+2)& (0+255),c
  2418  00131E  6A1A               	clrf	(??_sprintf+3)& (0+255),c
  2419  001320  5017               	movf	??_sprintf,w,c
  2420  001322  2619               	addwf	??_sprintf+2,f,c
  2421  001324  5018               	movf	??_sprintf+1,w,c
  2422  001326  221A               	addwfc	??_sprintf+3,f,c
  2423  001328  5019               	movf	??_sprintf+2,w,c
  2424  00132A  2621               	addwf	sprintf@width,f,c
  2425  00132C  501A               	movf	??_sprintf+3,w,c
  2426  00132E  2222               	addwfc	sprintf@width+1,f,c
  2427  001330  4A0F               	infsnz	sprintf@f,f,c
  2428  001332  2A10               	incf	sprintf@f+1,f,c
  2429                           
  2430                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2431  001334  C00F  FFF6         	movff	sprintf@f,tblptrl
  2432  001338  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2433  00133C                     	if	0	;tblptru may be non-zero
  2434  00133C                     	endif
  2435  00133C                     	if	0	;tblptru may be non-zero
  2436  00133C                     	endif
  2437  00133C  0008               	tblrd		*
  2438  00133E  50F5               	movf	tablat,w,c
  2439  001340  EC27  F018         	call	_isdigit
  2440  001344  A0D8               	btfss	status,0,c
  2441  001346  D007               	goto	l3419
  2442  001348  D7D1               	goto	l3407
  2443                           
  2444                           ;doprnt.c: 608: }
  2445                           ;doprnt.c: 635: switch(c = *f++) {
  2446  00134A  D005               	goto	l3419
  2447                           
  2448                           ;doprnt.c: 638: goto alldone;
  2449                           
  2450                           ;doprnt.c: 637: case 0:
  2451  00134C  D0C1               	goto	l3473
  2452                           
  2453                           ;doprnt.c: 813: continue;
  2454                           
  2455                           ;doprnt.c: 802: default:
  2456  00134E  D0B2               	goto	l3471
  2457  001350                     l3415:
  2458                           
  2459                           ;doprnt.c: 818: flag |= 0xC0;
  2460  001350  0EC0               	movlw	192
  2461  001352  121D               	iorwf	sprintf@flag,f,c
  2462                           
  2463                           ;doprnt.c: 822: }
  2464                           
  2465                           ;doprnt.c: 819: break;
  2466  001354  D011               	goto	l3421
  2467  001356                     l3419:
  2468  001356  C00F  FFF6         	movff	sprintf@f,tblptrl
  2469  00135A  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2470  00135E  4A0F               	infsnz	sprintf@f,f,c
  2471  001360  2A10               	incf	sprintf@f+1,f,c
  2472  001362                     	if	0	;tblptru may be non-zero
  2473  001362                     	endif
  2474  001362                     	if	0	;tblptru may be non-zero
  2475  001362                     	endif
  2476  001362  0008               	tblrd		*
  2477  001364  CFF5 F023          	movff	tablat,sprintf@c
  2478  001368  5023               	movf	sprintf@c,w,c
  2479                           
  2480                           ; Switch size 1, requested type "space"
  2481                           ; Number of cases is 2, Range of values is 0 to 117
  2482                           ; switch strategies available:
  2483                           ; Name         Instructions Cycles
  2484                           ; simple_byte            7     4 (average)
  2485                           ;	Chosen strategy is simple_byte
  2486  00136A  0A00               	xorlw	0	; case 0
  2487  00136C  B4D8               	btfsc	status,2,c
  2488  00136E  D0B0               	goto	l3473
  2489  001370  0A75               	xorlw	117	; case 117
  2490  001372  B4D8               	btfsc	status,2,c
  2491  001374  D7ED               	goto	l3415
  2492  001376  D09E               	goto	l3471
  2493  001378                     l3421:
  2494                           
  2495                           ;doprnt.c: 1273: {
  2496                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2497  001378  C01B  FFD9         	movff	sprintf@ap,fsr2l
  2498  00137C  C01C  FFDA         	movff	sprintf@ap+1,fsr2h
  2499  001380  CFDE F01E          	movff	postinc2,sprintf@val
  2500  001384  CFDD F01F          	movff	postdec2,sprintf@val+1
  2501  001388  0E02               	movlw	2
  2502  00138A  261B               	addwf	sprintf@ap,f,c
  2503  00138C  0E00               	movlw	0
  2504  00138E  221C               	addwfc	sprintf@ap+1,f,c
  2505                           
  2506                           ;doprnt.c: 1287: }
  2507                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2508  001390  0E01               	movlw	1
  2509  001392  6E23               	movwf	sprintf@c,c
  2510  001394                     l3427:
  2511  001394  0E05               	movlw	5
  2512  001396  1823               	xorwf	sprintf@c,w,c
  2513  001398  B4D8               	btfsc	status,2,c
  2514  00139A  D016               	goto	l3439
  2515  00139C  D001               	goto	l3431
  2516  00139E  D014               	goto	l3439
  2517  0013A0                     l3431:
  2518                           
  2519                           ;doprnt.c: 1306: if(val < dpowers[c])
  2520  0013A0  5023               	movf	sprintf@c,w,c
  2521  0013A2  0D02               	mullw	2
  2522  0013A4  0E01               	movlw	low _dpowers
  2523  0013A6  24F3               	addwf	prodl,w,c
  2524  0013A8  6EF6               	movwf	tblptrl,c
  2525  0013AA  0E0F               	movlw	high _dpowers
  2526  0013AC  20F4               	addwfc	prodh,w,c
  2527  0013AE  6EF7               	movwf	tblptrh,c
  2528  0013B0                     	if	0	;There are less than 3 active tblptr bytes
  2529  0013B0                     	endif
  2530  0013B0  0009               	tblrd		*+
  2531  0013B2  50F5               	movf	tablat,w,c
  2532  0013B4  5C1E               	subwf	sprintf@val,w,c
  2533  0013B6  0009               	tblrd		*+
  2534  0013B8  50F5               	movf	tablat,w,c
  2535  0013BA  581F               	subwfb	sprintf@val+1,w,c
  2536  0013BC  A0D8               	btfss	status,0,c
  2537  0013BE  D004               	goto	l3439
  2538  0013C0  D001               	goto	l3435
  2539                           
  2540                           ;doprnt.c: 1307: break;
  2541  0013C2  D002               	goto	l3439
  2542  0013C4                     l3435:
  2543  0013C4  2A23               	incf	sprintf@c,f,c
  2544  0013C6  D7E6               	goto	l3427
  2545  0013C8                     l3439:
  2546                           
  2547                           ;doprnt.c: 1381: if(width > c)
  2548  0013C8  0E80               	movlw	128
  2549  0013CA  BE23               	btfsc	sprintf@c,7,c
  2550  0013CC  0E7F               	movlw	127
  2551  0013CE  6E17               	movwf	??_sprintf& (0+255),c
  2552  0013D0  5021               	movf	sprintf@width,w,c
  2553  0013D2  5C23               	subwf	sprintf@c,w,c
  2554  0013D4  5022               	movf	sprintf@width+1,w,c
  2555  0013D6  0A80               	xorlw	128
  2556  0013D8  5817               	subwfb	??_sprintf& (0+255),w,c
  2557  0013DA  B0D8               	btfsc	status,0,c
  2558  0013DC  D007               	goto	l3443
  2559                           
  2560                           ;doprnt.c: 1382: width -= c;
  2561  0013DE  5023               	movf	sprintf@c,w,c
  2562  0013E0  5E21               	subwf	sprintf@width,f,c
  2563  0013E2  0E00               	movlw	0
  2564  0013E4  BE23               	btfsc	sprintf@c,7,c
  2565  0013E6  0EFF               	movlw	255
  2566  0013E8  5A22               	subwfb	sprintf@width+1,f,c
  2567  0013EA  D005               	goto	l3445
  2568  0013EC                     l3443:
  2569                           
  2570                           ;doprnt.c: 1383: else
  2571                           ;doprnt.c: 1384: width = 0;
  2572  0013EC  0E00               	movlw	0
  2573  0013EE  6E22               	movwf	sprintf@width+1,c
  2574  0013F0  0E00               	movlw	0
  2575  0013F2  6E21               	movwf	sprintf@width,c
  2576  0013F4  D000               	goto	l3445
  2577  0013F6                     l3445:
  2578                           
  2579                           ;doprnt.c: 1387: if(flag & 0x04) {
  2580  0013F6  A41D               	btfss	sprintf@flag,2,c
  2581  0013F8  D015               	goto	l3455
  2582                           
  2583                           ;doprnt.c: 1415: if(width)
  2584  0013FA  5021               	movf	sprintf@width,w,c
  2585  0013FC  1022               	iorwf	sprintf@width+1,w,c
  2586  0013FE  B4D8               	btfsc	status,2,c
  2587  001400  D026               	goto	l671
  2588  001402                     l3449:
  2589                           
  2590                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  2591  001402  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2592  001406  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2593  00140A  0E30               	movlw	48
  2594  00140C  6EDF               	movwf	indf2,c
  2595  00140E  4A0D               	infsnz	sprintf@sp,f,c
  2596  001410  2A0E               	incf	sprintf@sp+1,f,c
  2597                           
  2598                           ;doprnt.c: 1418: while(--width);
  2599  001412  0621               	decf	sprintf@width,f,c
  2600  001414  A0D8               	btfss	status,0,c
  2601  001416  0622               	decf	sprintf@width+1,f,c
  2602  001418  5021               	movf	sprintf@width,w,c
  2603  00141A  1022               	iorwf	sprintf@width+1,w,c
  2604  00141C  B4D8               	btfsc	status,2,c
  2605  00141E  D017               	goto	l671
  2606  001420  D7F0               	goto	l3449
  2607                           
  2608                           ;doprnt.c: 1420: } else
  2609  001422  D015               	goto	l671
  2610  001424                     l3455:
  2611                           
  2612                           ;doprnt.c: 1422: {
  2613                           ;doprnt.c: 1424: if(width
  2614                           ;doprnt.c: 1428: )
  2615  001424  5021               	movf	sprintf@width,w,c
  2616  001426  1022               	iorwf	sprintf@width+1,w,c
  2617  001428  B4D8               	btfsc	status,2,c
  2618  00142A  D011               	goto	l671
  2619  00142C                     l3457:
  2620                           
  2621                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  2622  00142C  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2623  001430  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2624  001434  0E20               	movlw	32
  2625  001436  6EDF               	movwf	indf2,c
  2626  001438  4A0D               	infsnz	sprintf@sp,f,c
  2627  00143A  2A0E               	incf	sprintf@sp+1,f,c
  2628                           
  2629                           ;doprnt.c: 1431: while(--width);
  2630  00143C  0621               	decf	sprintf@width,f,c
  2631  00143E  A0D8               	btfss	status,0,c
  2632  001440  0622               	decf	sprintf@width+1,f,c
  2633  001442  5021               	movf	sprintf@width,w,c
  2634  001444  1022               	iorwf	sprintf@width+1,w,c
  2635  001446  B4D8               	btfsc	status,2,c
  2636  001448  D002               	goto	l671
  2637  00144A  D7F0               	goto	l3457
  2638  00144C  D000               	goto	l671
  2639  00144E                     l671:
  2640                           
  2641                           ;doprnt.c: 1469: }
  2642                           ;doprnt.c: 1472: prec = c;
  2643  00144E  C023  F020         	movff	sprintf@c,sprintf@prec
  2644                           
  2645                           ;doprnt.c: 1474: while(prec--) {
  2646  001452  D02A               	goto	l3469
  2647  001454                     l3463:
  2648                           
  2649                           ;doprnt.c: 1478: {
  2650                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2651  001454  5020               	movf	sprintf@prec,w,c
  2652  001456  0D02               	mullw	2
  2653  001458  0E01               	movlw	low _dpowers
  2654  00145A  24F3               	addwf	prodl,w,c
  2655  00145C  6EF6               	movwf	tblptrl,c
  2656  00145E  0E0F               	movlw	high _dpowers
  2657  001460  20F4               	addwfc	prodh,w,c
  2658  001462  6EF7               	movwf	tblptrh,c
  2659  001464                     	if	0	;There are less than 3 active tblptr bytes
  2660  001464                     	endif
  2661  001464  0009               	tblrd		*+
  2662  001466  CFF5 F003          	movff	tablat,___lwdiv@divisor
  2663  00146A  000A               	tblrd		*-
  2664  00146C  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  2665  001470  C01E  F001         	movff	sprintf@val,___lwdiv@dividend
  2666  001474  C01F  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  2667  001478  EC0B  F016         	call	___lwdiv	;wreg free
  2668  00147C  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  2669  001480  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  2670  001484  0E00               	movlw	0
  2671  001486  6E0B               	movwf	___lwmod@divisor+1,c
  2672  001488  0E0A               	movlw	10
  2673  00148A  6E0A               	movwf	___lwmod@divisor,c
  2674  00148C  EC8F  F016         	call	___lwmod	;wreg free
  2675  001490  5008               	movf	?___lwmod,w,c
  2676  001492  0F30               	addlw	48
  2677  001494  6E23               	movwf	sprintf@c,c
  2678                           
  2679                           ;doprnt.c: 1523: }
  2680                           ;doprnt.c: 1524: ((*sp++ = (c)));
  2681  001496  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2682  00149A  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2683  00149E  C023  FFDF         	movff	sprintf@c,indf2
  2684  0014A2  4A0D               	infsnz	sprintf@sp,f,c
  2685  0014A4  2A0E               	incf	sprintf@sp+1,f,c
  2686  0014A6  D000               	goto	l3469
  2687  0014A8                     l3469:
  2688  0014A8  0620               	decf	sprintf@prec,f,c
  2689  0014AA  2820               	incf	sprintf@prec,w,c
  2690  0014AC  B4D8               	btfsc	status,2,c
  2691  0014AE  D002               	goto	l3471
  2692  0014B0  D7D1               	goto	l3463
  2693  0014B2  D000               	goto	l3471
  2694  0014B4                     l3471:
  2695  0014B4  C00F  FFF6         	movff	sprintf@f,tblptrl
  2696  0014B8  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2697  0014BC  4A0F               	infsnz	sprintf@f,f,c
  2698  0014BE  2A10               	incf	sprintf@f+1,f,c
  2699  0014C0                     	if	0	;tblptru may be non-zero
  2700  0014C0                     	endif
  2701  0014C0                     	if	0	;tblptru may be non-zero
  2702  0014C0                     	endif
  2703  0014C0  0008               	tblrd		*
  2704  0014C2  CFF5 F023          	movff	tablat,sprintf@c
  2705  0014C6  5023               	movf	sprintf@c,w,c
  2706  0014C8  B4D8               	btfsc	status,2,c
  2707  0014CA  D002               	goto	l3473
  2708  0014CC  D6DC               	goto	l3389
  2709  0014CE  D000               	goto	l3473
  2710  0014D0                     l3473:
  2711                           
  2712                           ;doprnt.c: 1538: *sp = 0;
  2713  0014D0  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2714  0014D4  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2715  0014D8  0E00               	movlw	0
  2716  0014DA  6EDF               	movwf	indf2,c
  2717  0014DC  0012               	return	
  2718                           
  2719                           ;doprnt.c: 1540: return 0;
  2720                           ;	Return value of _sprintf is never used
  2721  0014DE  0012               	return		;funcret
  2722  0014E0                     __end_of_sprintf:
  2723                           	opt stack 0
  2724                           tblptru	equ	0xFF8
  2725                           tblptrh	equ	0xFF7
  2726                           tblptrl	equ	0xFF6
  2727                           tablat	equ	0xFF5
  2728                           prodh	equ	0xFF4
  2729                           prodl	equ	0xFF3
  2730                           postinc0	equ	0xFEE
  2731                           wreg	equ	0xFE8
  2732                           postdec1	equ	0xFE5
  2733                           fsr1l	equ	0xFE1
  2734                           indf2	equ	0xFDF
  2735                           postinc2	equ	0xFDE
  2736                           postdec2	equ	0xFDD
  2737                           fsr2h	equ	0xFDA
  2738                           fsr2l	equ	0xFD9
  2739                           status	equ	0xFD8
  2740                           
  2741 ;; *************** function _isdigit *****************
  2742 ;; Defined at:
  2743 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\isdigit.c"
  2744 ;; Parameters:    Size  Location     Type
  2745 ;;  c               1    wreg     unsigned char 
  2746 ;; Auto vars:     Size  Location     Type
  2747 ;;  c               1    2[COMRAM] unsigned char 
  2748 ;; Return value:  Size  Location     Type
  2749 ;;		None               void
  2750 ;; Registers used:
  2751 ;;		wreg, status,2, status,0
  2752 ;; Tracked objects:
  2753 ;;		On entry : 0/0
  2754 ;;		On exit  : 0/0
  2755 ;;		Unchanged: 0/0
  2756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2758 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2759 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2760 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2761 ;;Total ram usage:        3 bytes
  2762 ;; Hardware stack levels used:    1
  2763 ;; This function calls:
  2764 ;;		Nothing
  2765 ;; This function is called by:
  2766 ;;		_sprintf
  2767 ;; This function uses a non-reentrant model
  2768 ;;
  2769                           
  2770                           	psect	text6
  2771  00304E                     __ptext6:
  2772                           	opt stack 0
  2773  00304E                     _isdigit:
  2774                           	opt stack 27
  2775                           
  2776                           ;incstack = 0
  2777                           ;isdigit@c stored from wreg
  2778  00304E  6E03               	movwf	isdigit@c,c
  2779  003050  0E00               	movlw	0
  2780  003052  6E02               	movwf	_isdigit$2371,c
  2781  003054  0E3A               	movlw	58
  2782  003056  6003               	cpfslt	isdigit@c,c
  2783  003058  D006               	goto	l3199
  2784  00305A  0E2F               	movlw	47
  2785  00305C  6403               	cpfsgt	isdigit@c,c
  2786  00305E  D003               	goto	l3199
  2787  003060  0E01               	movlw	1
  2788  003062  6E02               	movwf	_isdigit$2371,c
  2789  003064  D000               	goto	l3199
  2790  003066                     l3199:
  2791  003066  C002  F001         	movff	_isdigit$2371,??_isdigit
  2792  00306A  3001               	rrcf	??_isdigit,w,c
  2793  00306C  0012               	return	
  2794  00306E  0012               	return		;funcret
  2795  003070                     __end_of_isdigit:
  2796                           	opt stack 0
  2797                           tblptru	equ	0xFF8
  2798                           tblptrh	equ	0xFF7
  2799                           tblptrl	equ	0xFF6
  2800                           tablat	equ	0xFF5
  2801                           prodh	equ	0xFF4
  2802                           prodl	equ	0xFF3
  2803                           postinc0	equ	0xFEE
  2804                           wreg	equ	0xFE8
  2805                           postdec1	equ	0xFE5
  2806                           fsr1l	equ	0xFE1
  2807                           indf2	equ	0xFDF
  2808                           postinc2	equ	0xFDE
  2809                           postdec2	equ	0xFDD
  2810                           fsr2h	equ	0xFDA
  2811                           fsr2l	equ	0xFD9
  2812                           status	equ	0xFD8
  2813                           
  2814 ;; *************** function ___lwmod *****************
  2815 ;; Defined at:
  2816 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lwmod.c"
  2817 ;; Parameters:    Size  Location     Type
  2818 ;;  dividend        2    7[COMRAM] unsigned int 
  2819 ;;  divisor         2    9[COMRAM] unsigned int 
  2820 ;; Auto vars:     Size  Location     Type
  2821 ;;  counter         1   11[COMRAM] unsigned char 
  2822 ;; Return value:  Size  Location     Type
  2823 ;;                  2    7[COMRAM] unsigned int 
  2824 ;; Registers used:
  2825 ;;		wreg, status,2, status,0
  2826 ;; Tracked objects:
  2827 ;;		On entry : 0/0
  2828 ;;		On exit  : 0/0
  2829 ;;		Unchanged: 0/0
  2830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2831 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2832 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2834 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2835 ;;Total ram usage:        5 bytes
  2836 ;; Hardware stack levels used:    1
  2837 ;; This function calls:
  2838 ;;		Nothing
  2839 ;; This function is called by:
  2840 ;;		_sprintf
  2841 ;; This function uses a non-reentrant model
  2842 ;;
  2843                           
  2844                           	psect	text7
  2845  002D1E                     __ptext7:
  2846                           	opt stack 0
  2847  002D1E                     ___lwmod:
  2848                           	opt stack 27
  2849                           
  2850                           ;incstack = 0
  2851  002D1E  500A               	movf	___lwmod@divisor,w,c
  2852  002D20  100B               	iorwf	___lwmod@divisor+1,w,c
  2853  002D22  B4D8               	btfsc	status,2,c
  2854  002D24  D01D               	goto	l1325
  2855  002D26  0E01               	movlw	1
  2856  002D28  6E0C               	movwf	___lwmod@counter,c
  2857  002D2A  D005               	goto	l3301
  2858  002D2C                     l3299:
  2859  002D2C  90D8               	bcf	status,0,c
  2860  002D2E  360A               	rlcf	___lwmod@divisor,f,c
  2861  002D30  360B               	rlcf	___lwmod@divisor+1,f,c
  2862  002D32  2A0C               	incf	___lwmod@counter,f,c
  2863  002D34  D000               	goto	l3301
  2864  002D36                     l3301:
  2865  002D36  BE0B               	btfsc	___lwmod@divisor+1,7,c
  2866  002D38  D002               	goto	l3303
  2867  002D3A  D7F8               	goto	l3299
  2868  002D3C  D000               	goto	l3303
  2869  002D3E                     l3303:
  2870  002D3E  500A               	movf	___lwmod@divisor,w,c
  2871  002D40  5C08               	subwf	___lwmod@dividend,w,c
  2872  002D42  500B               	movf	___lwmod@divisor+1,w,c
  2873  002D44  5809               	subwfb	___lwmod@dividend+1,w,c
  2874  002D46  A0D8               	btfss	status,0,c
  2875  002D48  D005               	goto	l3307
  2876  002D4A  500A               	movf	___lwmod@divisor,w,c
  2877  002D4C  5E08               	subwf	___lwmod@dividend,f,c
  2878  002D4E  500B               	movf	___lwmod@divisor+1,w,c
  2879  002D50  5A09               	subwfb	___lwmod@dividend+1,f,c
  2880  002D52  D000               	goto	l3307
  2881  002D54                     l3307:
  2882  002D54  90D8               	bcf	status,0,c
  2883  002D56  320B               	rrcf	___lwmod@divisor+1,f,c
  2884  002D58  320A               	rrcf	___lwmod@divisor,f,c
  2885  002D5A  2E0C               	decfsz	___lwmod@counter,f,c
  2886  002D5C  D7F0               	goto	l3303
  2887  002D5E  D000               	goto	l1325
  2888  002D60                     l1325:
  2889  002D60  C008  F008         	movff	___lwmod@dividend,?___lwmod
  2890  002D64  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  2891  002D68  0012               	return		;funcret
  2892  002D6A                     __end_of___lwmod:
  2893                           	opt stack 0
  2894                           tblptru	equ	0xFF8
  2895                           tblptrh	equ	0xFF7
  2896                           tblptrl	equ	0xFF6
  2897                           tablat	equ	0xFF5
  2898                           prodh	equ	0xFF4
  2899                           prodl	equ	0xFF3
  2900                           postinc0	equ	0xFEE
  2901                           wreg	equ	0xFE8
  2902                           postdec1	equ	0xFE5
  2903                           fsr1l	equ	0xFE1
  2904                           indf2	equ	0xFDF
  2905                           postinc2	equ	0xFDE
  2906                           postdec2	equ	0xFDD
  2907                           fsr2h	equ	0xFDA
  2908                           fsr2l	equ	0xFD9
  2909                           status	equ	0xFD8
  2910                           
  2911 ;; *************** function ___lwdiv *****************
  2912 ;; Defined at:
  2913 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  2914 ;; Parameters:    Size  Location     Type
  2915 ;;  dividend        2    0[COMRAM] unsigned int 
  2916 ;;  divisor         2    2[COMRAM] unsigned int 
  2917 ;; Auto vars:     Size  Location     Type
  2918 ;;  quotient        2    4[COMRAM] unsigned int 
  2919 ;;  counter         1    6[COMRAM] unsigned char 
  2920 ;; Return value:  Size  Location     Type
  2921 ;;                  2    0[COMRAM] unsigned int 
  2922 ;; Registers used:
  2923 ;;		wreg, status,2, status,0
  2924 ;; Tracked objects:
  2925 ;;		On entry : 0/0
  2926 ;;		On exit  : 0/0
  2927 ;;		Unchanged: 0/0
  2928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2929 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2930 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2932 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2933 ;;Total ram usage:        7 bytes
  2934 ;; Hardware stack levels used:    1
  2935 ;; This function calls:
  2936 ;;		Nothing
  2937 ;; This function is called by:
  2938 ;;		_sprintf
  2939 ;; This function uses a non-reentrant model
  2940 ;;
  2941                           
  2942                           	psect	text8
  2943  002C16                     __ptext8:
  2944                           	opt stack 0
  2945  002C16                     ___lwdiv:
  2946                           	opt stack 27
  2947                           
  2948                           ;incstack = 0
  2949  002C16  0E00               	movlw	0
  2950  002C18  6E06               	movwf	___lwdiv@quotient+1,c
  2951  002C1A  0E00               	movlw	0
  2952  002C1C  6E05               	movwf	___lwdiv@quotient,c
  2953  002C1E  5003               	movf	___lwdiv@divisor,w,c
  2954  002C20  1004               	iorwf	___lwdiv@divisor+1,w,c
  2955  002C22  B4D8               	btfsc	status,2,c
  2956  002C24  D021               	goto	l1315
  2957  002C26  0E01               	movlw	1
  2958  002C28  6E07               	movwf	___lwdiv@counter,c
  2959  002C2A  D005               	goto	l3281
  2960  002C2C                     l3279:
  2961  002C2C  90D8               	bcf	status,0,c
  2962  002C2E  3603               	rlcf	___lwdiv@divisor,f,c
  2963  002C30  3604               	rlcf	___lwdiv@divisor+1,f,c
  2964  002C32  2A07               	incf	___lwdiv@counter,f,c
  2965  002C34  D000               	goto	l3281
  2966  002C36                     l3281:
  2967  002C36  BE04               	btfsc	___lwdiv@divisor+1,7,c
  2968  002C38  D002               	goto	l3283
  2969  002C3A  D7F8               	goto	l3279
  2970  002C3C  D000               	goto	l3283
  2971  002C3E                     l3283:
  2972  002C3E  90D8               	bcf	status,0,c
  2973  002C40  3605               	rlcf	___lwdiv@quotient,f,c
  2974  002C42  3606               	rlcf	___lwdiv@quotient+1,f,c
  2975  002C44  5003               	movf	___lwdiv@divisor,w,c
  2976  002C46  5C01               	subwf	___lwdiv@dividend,w,c
  2977  002C48  5004               	movf	___lwdiv@divisor+1,w,c
  2978  002C4A  5802               	subwfb	___lwdiv@dividend+1,w,c
  2979  002C4C  A0D8               	btfss	status,0,c
  2980  002C4E  D006               	goto	l3291
  2981  002C50  5003               	movf	___lwdiv@divisor,w,c
  2982  002C52  5E01               	subwf	___lwdiv@dividend,f,c
  2983  002C54  5004               	movf	___lwdiv@divisor+1,w,c
  2984  002C56  5A02               	subwfb	___lwdiv@dividend+1,f,c
  2985  002C58  8005               	bsf	___lwdiv@quotient,0,c
  2986  002C5A  D000               	goto	l3291
  2987  002C5C                     l3291:
  2988  002C5C  90D8               	bcf	status,0,c
  2989  002C5E  3204               	rrcf	___lwdiv@divisor+1,f,c
  2990  002C60  3203               	rrcf	___lwdiv@divisor,f,c
  2991  002C62  2E07               	decfsz	___lwdiv@counter,f,c
  2992  002C64  D7EC               	goto	l3283
  2993  002C66  D000               	goto	l1315
  2994  002C68                     l1315:
  2995  002C68  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  2996  002C6C  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2997  002C70  0012               	return		;funcret
  2998  002C72                     __end_of___lwdiv:
  2999                           	opt stack 0
  3000                           tblptru	equ	0xFF8
  3001                           tblptrh	equ	0xFF7
  3002                           tblptrl	equ	0xFF6
  3003                           tablat	equ	0xFF5
  3004                           prodh	equ	0xFF4
  3005                           prodl	equ	0xFF3
  3006                           postinc0	equ	0xFEE
  3007                           wreg	equ	0xFE8
  3008                           postdec1	equ	0xFE5
  3009                           fsr1l	equ	0xFE1
  3010                           indf2	equ	0xFDF
  3011                           postinc2	equ	0xFDE
  3012                           postdec2	equ	0xFDD
  3013                           fsr2h	equ	0xFDA
  3014                           fsr2l	equ	0xFD9
  3015                           status	equ	0xFD8
  3016                           
  3017 ;; *************** function __delay_s *****************
  3018 ;; Defined at:
  3019 ;;		line 21 in file "lcd_vision.c"
  3020 ;; Parameters:    Size  Location     Type
  3021 ;;  millis          2    8[COMRAM] int 
  3022 ;; Auto vars:     Size  Location     Type
  3023 ;;  index           2   13[COMRAM] short 
  3024 ;;  it              2   11[COMRAM] short 
  3025 ;; Return value:  Size  Location     Type
  3026 ;;		None               void
  3027 ;; Registers used:
  3028 ;;		wreg, status,2, status,0, cstack
  3029 ;; Tracked objects:
  3030 ;;		On entry : 0/0
  3031 ;;		On exit  : 0/0
  3032 ;;		Unchanged: 0/0
  3033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3034 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3035 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3036 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3037 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3038 ;;Total ram usage:        7 bytes
  3039 ;; Hardware stack levels used:    1
  3040 ;; Hardware stack levels required when called:    1
  3041 ;; This function calls:
  3042 ;;		___awdiv
  3043 ;; This function is called by:
  3044 ;;		_twinkle
  3045 ;; This function uses a non-reentrant model
  3046 ;;
  3047                           
  3048                           	psect	text9
  3049  002C72                     __ptext9:
  3050                           	opt stack 0
  3051  002C72                     __delay_s:
  3052                           	opt stack 27
  3053                           
  3054                           ;lcd_vision.c: 22: short it = millis/100;
  3055                           
  3056                           ;incstack = 0
  3057  002C72  C009  F001         	movff	__delay_s@millis,___awdiv@dividend
  3058  002C76  C00A  F002         	movff	__delay_s@millis+1,___awdiv@dividend+1
  3059  002C7A  0E00               	movlw	0
  3060  002C7C  6E04               	movwf	___awdiv@divisor+1,c
  3061  002C7E  0E64               	movlw	100
  3062  002C80  6E03               	movwf	___awdiv@divisor,c
  3063  002C82  ECDD  F013         	call	___awdiv	;wreg free
  3064  002C86  C001  F00C         	movff	?___awdiv,__delay_s@it
  3065  002C8A  C002  F00D         	movff	?___awdiv+1,__delay_s@it+1
  3066                           
  3067                           ;lcd_vision.c: 23: short index = 1;
  3068  002C8E  0E00               	movlw	0
  3069  002C90  6E0F               	movwf	__delay_s@index+1,c
  3070  002C92  0E01               	movlw	1
  3071  002C94  6E0E               	movwf	__delay_s@index,c
  3072                           
  3073                           ;lcd_vision.c: 25: for(index = 1; index <= it; index++){
  3074  002C96  0E00               	movlw	0
  3075  002C98  6E0F               	movwf	__delay_s@index+1,c
  3076  002C9A  0E01               	movlw	1
  3077  002C9C  6E0E               	movwf	__delay_s@index,c
  3078  002C9E  D00A               	goto	l580
  3079  002CA0                     l3835:
  3080                           
  3081                           ;lcd_vision.c: 26: _delay((unsigned long)((98)*(8000000/4000.0)));
  3082  002CA0  0EFF               	movlw	255
  3083  002CA2  6E0B               	movwf	??__delay_s& (0+255),c
  3084  002CA4  0E8A               	movlw	138
  3085  002CA6                     u4377:
  3086  002CA6  2EE8               	decfsz	wreg,f,c
  3087  002CA8  D7FE               	goto	u4377
  3088  002CAA  2E0B               	decfsz	??__delay_s& (0+255),f,c
  3089  002CAC  D7FC               	goto	u4377
  3090  002CAE  D000               	nop2	
  3091  002CB0  4A0E               	infsnz	__delay_s@index,f,c
  3092  002CB2  2A0F               	incf	__delay_s@index+1,f,c
  3093  002CB4                     l580:
  3094  002CB4  500E               	movf	__delay_s@index,w,c
  3095  002CB6  5C0C               	subwf	__delay_s@it,w,c
  3096  002CB8  500D               	movf	__delay_s@it+1,w,c
  3097  002CBA  0A80               	xorlw	128
  3098  002CBC  6E0B               	movwf	??__delay_s& (0+255),c
  3099  002CBE  500F               	movf	__delay_s@index+1,w,c
  3100  002CC0  0A80               	xorlw	128
  3101  002CC2  580B               	subwfb	??__delay_s& (0+255),w,c
  3102  002CC4  B0D8               	btfsc	status,0,c
  3103  002CC6  D7EC               	goto	l3835
  3104  002CC8  0012               	return		;funcret
  3105  002CCA                     __end_of__delay_s:
  3106                           	opt stack 0
  3107                           tblptru	equ	0xFF8
  3108                           tblptrh	equ	0xFF7
  3109                           tblptrl	equ	0xFF6
  3110                           tablat	equ	0xFF5
  3111                           prodh	equ	0xFF4
  3112                           prodl	equ	0xFF3
  3113                           postinc0	equ	0xFEE
  3114                           wreg	equ	0xFE8
  3115                           postdec1	equ	0xFE5
  3116                           fsr1l	equ	0xFE1
  3117                           indf2	equ	0xFDF
  3118                           postinc2	equ	0xFDE
  3119                           postdec2	equ	0xFDD
  3120                           fsr2h	equ	0xFDA
  3121                           fsr2l	equ	0xFD9
  3122                           status	equ	0xFD8
  3123                           
  3124 ;; *************** function _set_desactive_vision *****************
  3125 ;; Defined at:
  3126 ;;		line 81 in file "lcd_vision.c"
  3127 ;; Parameters:    Size  Location     Type
  3128 ;;  digit           2   10[COMRAM] short 
  3129 ;; Auto vars:     Size  Location     Type
  3130 ;;		None
  3131 ;; Return value:  Size  Location     Type
  3132 ;;		None               void
  3133 ;; Registers used:
  3134 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3135 ;; Tracked objects:
  3136 ;;		On entry : 0/0
  3137 ;;		On exit  : 0/0
  3138 ;;		Unchanged: 0/0
  3139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3140 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3143 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3144 ;;Total ram usage:        2 bytes
  3145 ;; Hardware stack levels used:    1
  3146 ;; Hardware stack levels required when called:    5
  3147 ;; This function calls:
  3148 ;;		_lcd_gotoxy
  3149 ;;		_lcd_putrs
  3150 ;;		_lcd_setcursor_vb
  3151 ;; This function is called by:
  3152 ;;		_set_vision
  3153 ;; This function uses a non-reentrant model
  3154 ;;
  3155                           
  3156                           	psect	text10
  3157  002F66                     __ptext10:
  3158                           	opt stack 0
  3159  002F66                     _set_desactive_vision:
  3160                           	opt stack 24
  3161                           
  3162                           ;lcd_vision.c: 82: lcd_gotoxy(7,2);
  3163                           
  3164                           ;incstack = 0
  3165  002F66  0E02               	movlw	2
  3166  002F68  6E05               	movwf	lcd_gotoxy@y,c
  3167  002F6A  0E07               	movlw	7
  3168  002F6C  EC15  F018         	call	_lcd_gotoxy
  3169                           
  3170                           ;lcd_vision.c: 83: lcd_putrs("pass:____");
  3171  002F70  0E90               	movlw	low STR_18
  3172  002F72  6E09               	movwf	lcd_putrs@ptr,c
  3173  002F74  0E0F               	movlw	high STR_18
  3174  002F76  6E0A               	movwf	lcd_putrs@ptr+1,c
  3175  002F78  EC65  F016         	call	_lcd_putrs	;wreg free
  3176                           
  3177                           ;lcd_vision.c: 84: lcd_gotoxy(digit,2);
  3178  002F7C  0E02               	movlw	2
  3179  002F7E  6E05               	movwf	lcd_gotoxy@y,c
  3180  002F80  500B               	movf	set_desactive_vision@digit,w,c
  3181  002F82  EC15  F018         	call	_lcd_gotoxy
  3182                           
  3183                           ;lcd_vision.c: 85: lcd_setcursor_vb(1,1);
  3184  002F86  0E01               	movlw	1
  3185  002F88  6E05               	movwf	lcd_setcursor_vb@blink,c
  3186  002F8A  0E01               	movlw	1
  3187  002F8C  EC51  F018         	call	_lcd_setcursor_vb
  3188  002F90  0012               	return		;funcret
  3189  002F92                     __end_of_set_desactive_vision:
  3190                           	opt stack 0
  3191                           tblptru	equ	0xFF8
  3192                           tblptrh	equ	0xFF7
  3193                           tblptrl	equ	0xFF6
  3194                           tablat	equ	0xFF5
  3195                           prodh	equ	0xFF4
  3196                           prodl	equ	0xFF3
  3197                           postinc0	equ	0xFEE
  3198                           wreg	equ	0xFE8
  3199                           postdec1	equ	0xFE5
  3200                           fsr1l	equ	0xFE1
  3201                           indf2	equ	0xFDF
  3202                           postinc2	equ	0xFDE
  3203                           postdec2	equ	0xFDD
  3204                           fsr2h	equ	0xFDA
  3205                           fsr2l	equ	0xFD9
  3206                           status	equ	0xFD8
  3207                           
  3208 ;; *************** function _lcd_setcursor_vb *****************
  3209 ;; Defined at:
  3210 ;;		line 210 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3211 ;; Parameters:    Size  Location     Type
  3212 ;;  visible         1    wreg     unsigned char 
  3213 ;;  blink           1    4[COMRAM] unsigned char 
  3214 ;; Auto vars:     Size  Location     Type
  3215 ;;  visible         1    5[COMRAM] unsigned char 
  3216 ;; Return value:  Size  Location     Type
  3217 ;;		None               void
  3218 ;; Registers used:
  3219 ;;		wreg, status,2, status,0, cstack
  3220 ;; Tracked objects:
  3221 ;;		On entry : 0/0
  3222 ;;		On exit  : 0/0
  3223 ;;		Unchanged: 0/0
  3224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3225 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3226 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3228 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3229 ;;Total ram usage:        2 bytes
  3230 ;; Hardware stack levels used:    1
  3231 ;; Hardware stack levels required when called:    2
  3232 ;; This function calls:
  3233 ;;		_lcd_send_byte
  3234 ;; This function is called by:
  3235 ;;		_set_desactive_vision
  3236 ;;		_jumpIfNotNumber
  3237 ;; This function uses a non-reentrant model
  3238 ;;
  3239                           
  3240                           	psect	text11
  3241  0030A2                     __ptext11:
  3242                           	opt stack 0
  3243  0030A2                     _lcd_setcursor_vb:
  3244                           	opt stack 26
  3245                           
  3246                           ;incstack = 0
  3247                           ;lcd_setcursor_vb@visible stored from wreg
  3248  0030A2  6E06               	movwf	lcd_setcursor_vb@visible,c
  3249                           
  3250                           ;unmc_lcd_216.c: 211: lcd_send_byte(0, 0xC|(visible<<1)|blink);
  3251  0030A4  5006               	movf	lcd_setcursor_vb@visible,w,c
  3252  0030A6  2406               	addwf	lcd_setcursor_vb@visible,w,c
  3253  0030A8  1005               	iorwf	lcd_setcursor_vb@blink,w,c
  3254  0030AA  090C               	iorlw	12
  3255  0030AC  6E03               	movwf	lcd_send_byte@n,c
  3256  0030AE  0E00               	movlw	0
  3257  0030B0  EC82  F017         	call	_lcd_send_byte
  3258  0030B4  0012               	return		;funcret
  3259  0030B6                     __end_of_lcd_setcursor_vb:
  3260                           	opt stack 0
  3261                           tblptru	equ	0xFF8
  3262                           tblptrh	equ	0xFF7
  3263                           tblptrl	equ	0xFF6
  3264                           tablat	equ	0xFF5
  3265                           prodh	equ	0xFF4
  3266                           prodl	equ	0xFF3
  3267                           postinc0	equ	0xFEE
  3268                           wreg	equ	0xFE8
  3269                           postdec1	equ	0xFE5
  3270                           fsr1l	equ	0xFE1
  3271                           indf2	equ	0xFDF
  3272                           postinc2	equ	0xFDE
  3273                           postdec2	equ	0xFDD
  3274                           fsr2h	equ	0xFDA
  3275                           fsr2l	equ	0xFD9
  3276                           status	equ	0xFD8
  3277                           
  3278 ;; *************** function _lcd_putrs *****************
  3279 ;; Defined at:
  3280 ;;		line 221 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3281 ;; Parameters:    Size  Location     Type
  3282 ;;  ptr             2    8[COMRAM] PTR const unsigned char 
  3283 ;;		 -> STR_21(8), STR_20(4), STR_19(3), STR_18(10), 
  3284 ;;		 -> STR_17(11), STR_16(11), buffer2(20), STR_3(10), 
  3285 ;;		 -> STR_2(13), STR_1(33), 
  3286 ;; Auto vars:     Size  Location     Type
  3287 ;;		None
  3288 ;; Return value:  Size  Location     Type
  3289 ;;		None               void
  3290 ;; Registers used:
  3291 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3292 ;; Tracked objects:
  3293 ;;		On entry : 0/0
  3294 ;;		On exit  : 0/0
  3295 ;;		Unchanged: 0/0
  3296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3297 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3298 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3300 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3301 ;;Total ram usage:        2 bytes
  3302 ;; Hardware stack levels used:    1
  3303 ;; Hardware stack levels required when called:    4
  3304 ;; This function calls:
  3305 ;;		_lcd_putc
  3306 ;; This function is called by:
  3307 ;;		_main
  3308 ;;		_read_keyboard
  3309 ;;		_write_Date
  3310 ;;		_twinkle
  3311 ;;		_set_desactive_vision
  3312 ;;		_set_vision
  3313 ;; This function uses a non-reentrant model
  3314 ;;
  3315                           
  3316                           	psect	text12
  3317  002CCA                     __ptext12:
  3318                           	opt stack 0
  3319  002CCA                     _lcd_putrs:
  3320                           	opt stack 24
  3321                           
  3322                           ;unmc_lcd_216.c: 223: while(*ptr){
  3323                           
  3324                           ;incstack = 0
  3325  002CCA  D015               	goto	l3383
  3326  002CCC                     l3379:
  3327                           
  3328                           ;unmc_lcd_216.c: 224: lcd_putc(*ptr++);
  3329  002CCC  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  3330  002CD0  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  3331  002CD4  6AF8               	clrf	tblptru,c
  3332  002CD6  0E0E               	movlw	(high __ramtop+-1)
  3333  002CD8  64F7               	cpfsgt	tblptrh,c
  3334  002CDA  D003               	bra	u3037
  3335  002CDC  0008               	tblrd		*
  3336  002CDE  50F5               	movf	tablat,w,c
  3337  002CE0  D005               	bra	u3030
  3338  002CE2                     u3037:
  3339  002CE2  CFF6 FFE9          	movff	tblptrl,fsr0l
  3340  002CE6  CFF7 FFEA          	movff	tblptrh,fsr0h
  3341  002CEA  50EF               	movf	indf0,w,c
  3342  002CEC                     u3030:
  3343  002CEC  ECB5  F016         	call	_lcd_putc
  3344  002CF0  4A09               	infsnz	lcd_putrs@ptr,f,c
  3345  002CF2  2A0A               	incf	lcd_putrs@ptr+1,f,c
  3346  002CF4  D000               	goto	l3383
  3347  002CF6                     l3383:
  3348  002CF6  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  3349  002CFA  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  3350  002CFE  6AF8               	clrf	tblptru,c
  3351  002D00  0E0E               	movlw	(high __ramtop+-1)
  3352  002D02  64F7               	cpfsgt	tblptrh,c
  3353  002D04  D003               	bra	u3047
  3354  002D06  0008               	tblrd		*
  3355  002D08  50F5               	movf	tablat,w,c
  3356  002D0A  D005               	bra	u3040
  3357  002D0C                     u3047:
  3358  002D0C  CFF6 FFE9          	movff	tblptrl,fsr0l
  3359  002D10  CFF7 FFEA          	movff	tblptrh,fsr0h
  3360  002D14  50EF               	movf	indf0,w,c
  3361  002D16                     u3040:
  3362  002D16  0900               	iorlw	0
  3363  002D18  A4D8               	btfss	status,2,c
  3364  002D1A  D7D8               	goto	l3379
  3365  002D1C  0012               	return		;funcret
  3366  002D1E                     __end_of_lcd_putrs:
  3367                           	opt stack 0
  3368                           tblptru	equ	0xFF8
  3369                           tblptrh	equ	0xFF7
  3370                           tblptrl	equ	0xFF6
  3371                           tablat	equ	0xFF5
  3372                           prodh	equ	0xFF4
  3373                           prodl	equ	0xFF3
  3374                           indf0	equ	0xFEF
  3375                           postinc0	equ	0xFEE
  3376                           fsr0h	equ	0xFEA
  3377                           fsr0l	equ	0xFE9
  3378                           wreg	equ	0xFE8
  3379                           postdec1	equ	0xFE5
  3380                           fsr1l	equ	0xFE1
  3381                           indf2	equ	0xFDF
  3382                           postinc2	equ	0xFDE
  3383                           postdec2	equ	0xFDD
  3384                           fsr2h	equ	0xFDA
  3385                           fsr2l	equ	0xFD9
  3386                           status	equ	0xFD8
  3387                           
  3388 ;; *************** function _lcd_putc *****************
  3389 ;; Defined at:
  3390 ;;		line 172 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3391 ;; Parameters:    Size  Location     Type
  3392 ;;  c               1    wreg     unsigned char 
  3393 ;; Auto vars:     Size  Location     Type
  3394 ;;  c               1    7[COMRAM] unsigned char 
  3395 ;; Return value:  Size  Location     Type
  3396 ;;		None               void
  3397 ;; Registers used:
  3398 ;;		wreg, status,2, status,0, cstack
  3399 ;; Tracked objects:
  3400 ;;		On entry : 0/0
  3401 ;;		On exit  : 0/0
  3402 ;;		Unchanged: 0/0
  3403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3405 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3407 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3408 ;;Total ram usage:        1 bytes
  3409 ;; Hardware stack levels used:    1
  3410 ;; Hardware stack levels required when called:    3
  3411 ;; This function calls:
  3412 ;;		_lcd_gotoxy
  3413 ;;		_lcd_send_byte
  3414 ;; This function is called by:
  3415 ;;		_lcd_putrs
  3416 ;;		_lcd_puts
  3417 ;; This function uses a non-reentrant model
  3418 ;;
  3419                           
  3420                           	psect	text13
  3421  002D6A                     __ptext13:
  3422                           	opt stack 0
  3423  002D6A                     _lcd_putc:
  3424                           	opt stack 24
  3425                           
  3426                           ;incstack = 0
  3427                           ;lcd_putc@c stored from wreg
  3428  002D6A  6E08               	movwf	lcd_putc@c,c
  3429                           
  3430                           ;unmc_lcd_216.c: 173: switch(c){
  3431  002D6C  D018               	goto	l3189
  3432  002D6E                     l3179:
  3433                           
  3434                           ;unmc_lcd_216.c: 175: lcd_send_byte(0,1);
  3435  002D6E  0E01               	movlw	1
  3436  002D70  6E03               	movwf	lcd_send_byte@n,c
  3437  002D72  0E00               	movlw	0
  3438  002D74  EC82  F017         	call	_lcd_send_byte
  3439                           
  3440                           ;unmc_lcd_216.c: 176: break;
  3441  002D78  0012               	return	
  3442  002D7A                     l3181:
  3443                           
  3444                           ;unmc_lcd_216.c: 178: lcd_gotoxy(1,2);
  3445  002D7A  0E02               	movlw	2
  3446  002D7C  6E05               	movwf	lcd_gotoxy@y,c
  3447  002D7E  0E01               	movlw	1
  3448  002D80  EC15  F018         	call	_lcd_gotoxy
  3449                           
  3450                           ;unmc_lcd_216.c: 179: break;
  3451  002D84  0012               	return	
  3452  002D86                     l3183:
  3453                           
  3454                           ;unmc_lcd_216.c: 181: lcd_send_byte(0,0x10);
  3455  002D86  0E10               	movlw	16
  3456  002D88  6E03               	movwf	lcd_send_byte@n,c
  3457  002D8A  0E00               	movlw	0
  3458  002D8C  EC82  F017         	call	_lcd_send_byte
  3459                           
  3460                           ;unmc_lcd_216.c: 182: break;
  3461  002D90  0012               	return	
  3462  002D92                     l3185:
  3463                           
  3464                           ;unmc_lcd_216.c: 184: lcd_send_byte(1,c);
  3465  002D92  C008  F003         	movff	lcd_putc@c,lcd_send_byte@n
  3466  002D96  0E01               	movlw	1
  3467  002D98  EC82  F017         	call	_lcd_send_byte
  3468                           
  3469                           ;unmc_lcd_216.c: 186: }
  3470                           
  3471                           ;unmc_lcd_216.c: 185: break;
  3472  002D9C  0012               	return	
  3473  002D9E                     l3189:
  3474  002D9E  5008               	movf	lcd_putc@c,w,c
  3475                           
  3476                           ; Switch size 1, requested type "space"
  3477                           ; Number of cases is 3, Range of values is 8 to 12
  3478                           ; switch strategies available:
  3479                           ; Name         Instructions Cycles
  3480                           ; simple_byte           10     6 (average)
  3481                           ;	Chosen strategy is simple_byte
  3482  002DA0  0A08               	xorlw	8	; case 8
  3483  002DA2  B4D8               	btfsc	status,2,c
  3484  002DA4  D7F0               	goto	l3183
  3485  002DA6  0A02               	xorlw	2	; case 10
  3486  002DA8  B4D8               	btfsc	status,2,c
  3487  002DAA  D7E7               	goto	l3181
  3488  002DAC  0A06               	xorlw	6	; case 12
  3489  002DAE  B4D8               	btfsc	status,2,c
  3490  002DB0  D7DE               	goto	l3179
  3491  002DB2  D7EF               	goto	l3185
  3492  002DB4  0012               	return		;funcret
  3493  002DB6                     __end_of_lcd_putc:
  3494                           	opt stack 0
  3495                           tblptru	equ	0xFF8
  3496                           tblptrh	equ	0xFF7
  3497                           tblptrl	equ	0xFF6
  3498                           tablat	equ	0xFF5
  3499                           prodh	equ	0xFF4
  3500                           prodl	equ	0xFF3
  3501                           indf0	equ	0xFEF
  3502                           postinc0	equ	0xFEE
  3503                           fsr0h	equ	0xFEA
  3504                           fsr0l	equ	0xFE9
  3505                           wreg	equ	0xFE8
  3506                           postdec1	equ	0xFE5
  3507                           fsr1l	equ	0xFE1
  3508                           indf2	equ	0xFDF
  3509                           postinc2	equ	0xFDE
  3510                           postdec2	equ	0xFDD
  3511                           fsr2h	equ	0xFDA
  3512                           fsr2l	equ	0xFD9
  3513                           status	equ	0xFD8
  3514                           
  3515 ;; *************** function _review_code *****************
  3516 ;; Defined at:
  3517 ;;		line 46 in file "lcd_vision.c"
  3518 ;; Parameters:    Size  Location     Type
  3519 ;;  digit           2    2[COMRAM] short 
  3520 ;;  pass            2    4[COMRAM] int 
  3521 ;; Auto vars:     Size  Location     Type
  3522 ;;		None
  3523 ;; Return value:  Size  Location     Type
  3524 ;;		None               void
  3525 ;; Registers used:
  3526 ;;		wreg, status,2, status,0, cstack
  3527 ;; Tracked objects:
  3528 ;;		On entry : 0/0
  3529 ;;		On exit  : 0/0
  3530 ;;		Unchanged: 0/0
  3531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3532 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3535 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3536 ;;Total ram usage:        4 bytes
  3537 ;; Hardware stack levels used:    1
  3538 ;; Hardware stack levels required when called:    1
  3539 ;; This function calls:
  3540 ;;		_checkPass
  3541 ;; This function is called by:
  3542 ;;		_set_vision
  3543 ;; This function uses a non-reentrant model
  3544 ;;
  3545                           
  3546                           	psect	text14
  3547  002FBA                     __ptext14:
  3548                           	opt stack 0
  3549  002FBA                     _review_code:
  3550                           	opt stack 28
  3551                           
  3552                           ;lcd_vision.c: 47: if(digit == 16){
  3553                           
  3554                           ;incstack = 0
  3555  002FBA  0E10               	movlw	16
  3556  002FBC  1803               	xorwf	review_code@digit,w,c
  3557  002FBE  1004               	iorwf	review_code@digit+1,w,c
  3558  002FC0  A4D8               	btfss	status,2,c
  3559  002FC2  0012               	return	
  3560                           
  3561                           ;lcd_vision.c: 48: if(checkPass(pass)){
  3562  002FC4  C005  F001         	movff	review_code@pass,checkPass@pass
  3563  002FC8  C006  F002         	movff	review_code@pass+1,checkPass@pass+1
  3564  002FCC  EC38  F018         	call	_checkPass	;wreg free
  3565  002FD0  0900               	iorlw	0
  3566  002FD2  B4D8               	btfsc	status,2,c
  3567  002FD4  0012               	return	
  3568                           
  3569                           ;lcd_vision.c: 49: state_alarm = ACTIVE;
  3570  002FD6  0E00               	movlw	0
  3571  002FD8  0100               	movlb	0	; () banked
  3572  002FDA  6FCE               	movwf	_state_alarm& (0+255),b
  3573                           
  3574                           ; BSR set to: 0
  3575  002FDC  0012               	return	
  3576                           
  3577                           ; BSR set to: 0
  3578  002FDE  0012               	return		;funcret
  3579  002FE0                     __end_of_review_code:
  3580                           	opt stack 0
  3581                           tblptru	equ	0xFF8
  3582                           tblptrh	equ	0xFF7
  3583                           tblptrl	equ	0xFF6
  3584                           tablat	equ	0xFF5
  3585                           prodh	equ	0xFF4
  3586                           prodl	equ	0xFF3
  3587                           indf0	equ	0xFEF
  3588                           postinc0	equ	0xFEE
  3589                           fsr0h	equ	0xFEA
  3590                           fsr0l	equ	0xFE9
  3591                           wreg	equ	0xFE8
  3592                           postdec1	equ	0xFE5
  3593                           fsr1l	equ	0xFE1
  3594                           indf2	equ	0xFDF
  3595                           postinc2	equ	0xFDE
  3596                           postdec2	equ	0xFDD
  3597                           fsr2h	equ	0xFDA
  3598                           fsr2l	equ	0xFD9
  3599                           status	equ	0xFD8
  3600                           
  3601 ;; *************** function _checkPass *****************
  3602 ;; Defined at:
  3603 ;;		line 3 in file "config.c"
  3604 ;; Parameters:    Size  Location     Type
  3605 ;;  pass            2    0[COMRAM] int 
  3606 ;; Auto vars:     Size  Location     Type
  3607 ;;		None
  3608 ;; Return value:  Size  Location     Type
  3609 ;;                  1    wreg      unsigned char 
  3610 ;; Registers used:
  3611 ;;		wreg, status,2, status,0
  3612 ;; Tracked objects:
  3613 ;;		On entry : 0/0
  3614 ;;		On exit  : 0/0
  3615 ;;		Unchanged: 0/0
  3616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3617 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3620 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3621 ;;Total ram usage:        2 bytes
  3622 ;; Hardware stack levels used:    1
  3623 ;; This function calls:
  3624 ;;		Nothing
  3625 ;; This function is called by:
  3626 ;;		_review_code
  3627 ;; This function uses a non-reentrant model
  3628 ;;
  3629                           
  3630                           	psect	text15
  3631  003070                     __ptext15:
  3632                           	opt stack 0
  3633  003070                     _checkPass:
  3634                           	opt stack 28
  3635                           
  3636                           ;config.c: 4: return password == pass;
  3637                           
  3638                           ;incstack = 0
  3639  003070  5001               	movf	checkPass@pass,w,c
  3640  003072  0100               	movlb	0	; () banked
  3641  003074  19CB               	xorwf	_password& (0+255),w,b
  3642  003076  E107               	bnz	u3940
  3643  003078  5002               	movf	checkPass@pass+1,w,c
  3644  00307A  0100               	movlb	0	; () banked
  3645  00307C  19CC               	xorwf	(_password+1)& (0+255),w,b
  3646  00307E  A4D8               	btfss	status,2,c
  3647  003080  D002               	goto	u3940
  3648  003082  0E01               	movlw	1
  3649  003084  0012               	return	
  3650  003086                     u3940:
  3651  003086  0E00               	movlw	0
  3652  003088  0012               	return	
  3653                           
  3654                           ; BSR set to: 0
  3655                           
  3656                           ; BSR set to: 0
  3657  00308A  0012               	return		;funcret
  3658  00308C                     __end_of_checkPass:
  3659                           	opt stack 0
  3660                           tblptru	equ	0xFF8
  3661                           tblptrh	equ	0xFF7
  3662                           tblptrl	equ	0xFF6
  3663                           tablat	equ	0xFF5
  3664                           prodh	equ	0xFF4
  3665                           prodl	equ	0xFF3
  3666                           indf0	equ	0xFEF
  3667                           postinc0	equ	0xFEE
  3668                           fsr0h	equ	0xFEA
  3669                           fsr0l	equ	0xFE9
  3670                           wreg	equ	0xFE8
  3671                           postdec1	equ	0xFE5
  3672                           fsr1l	equ	0xFE1
  3673                           indf2	equ	0xFDF
  3674                           postinc2	equ	0xFDE
  3675                           postdec2	equ	0xFDD
  3676                           fsr2h	equ	0xFDA
  3677                           fsr2l	equ	0xFD9
  3678                           status	equ	0xFD8
  3679                           
  3680 ;; *************** function _obtain_pass *****************
  3681 ;; Defined at:
  3682 ;;		line 54 in file "lcd_vision.c"
  3683 ;; Parameters:    Size  Location     Type
  3684 ;;  pass            2   87[COMRAM] int 
  3685 ;;  input           1   89[COMRAM] unsigned char 
  3686 ;;  digit           2   90[COMRAM] PTR short 
  3687 ;;		 -> set_vision@digit(2), 
  3688 ;; Auto vars:     Size  Location     Type
  3689 ;;		None
  3690 ;; Return value:  Size  Location     Type
  3691 ;;                  2   87[COMRAM] int 
  3692 ;; Registers used:
  3693 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3694 ;; Tracked objects:
  3695 ;;		On entry : 0/0
  3696 ;;		On exit  : 0/0
  3697 ;;		Unchanged: 0/0
  3698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3699 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3700 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3701 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3702 ;;      Totals:         7       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3703 ;;Total ram usage:       13 bytes
  3704 ;; Hardware stack levels used:    1
  3705 ;; Hardware stack levels required when called:    5
  3706 ;; This function calls:
  3707 ;;		___awtoft
  3708 ;;		___ftadd
  3709 ;;		___ftmul
  3710 ;;		___fttol
  3711 ;;		___lbtoft
  3712 ;;		_next_code
  3713 ;;		_pow
  3714 ;; This function is called by:
  3715 ;;		_set_vision
  3716 ;; This function uses a non-reentrant model
  3717 ;;
  3718                           
  3719                           	psect	text16
  3720  002120                     __ptext16:
  3721                           	opt stack 0
  3722  002120                     _obtain_pass:
  3723                           	opt stack 24
  3724                           
  3725                           ;lcd_vision.c: 56: if(0<input && input<10){
  3726                           
  3727                           ; BSR set to: 0
  3728                           ;incstack = 0
  3729  002120  505A               	movf	obtain_pass@input,w,c
  3730  002122  B4D8               	btfsc	status,2,c
  3731  002124  D06D               	goto	l4027
  3732  002126  0E0A               	movlw	10
  3733  002128  605A               	cpfslt	obtain_pass@input,c
  3734  00212A  D06A               	goto	l4027
  3735                           
  3736                           ;lcd_vision.c: 57: pass = pass + input * pow(10, 15 - *digit);
  3737  00212C  C05B  FFD9         	movff	obtain_pass@digit,fsr2l
  3738  002130  C05C  FFDA         	movff	obtain_pass@digit+1,fsr2h
  3739  002134  CFDE F05D          	movff	postinc2,??_obtain_pass
  3740  002138  CFDD F05E          	movff	postdec2,??_obtain_pass+1
  3741  00213C  1E5D               	comf	??_obtain_pass,f,c
  3742  00213E  1E5E               	comf	??_obtain_pass+1,f,c
  3743  002140  4A5D               	infsnz	??_obtain_pass,f,c
  3744  002142  2A5E               	incf	??_obtain_pass+1,f,c
  3745  002144  0E0F               	movlw	15
  3746  002146  245D               	addwf	??_obtain_pass,w,c
  3747  002148  6E09               	movwf	___awtoft@c,c
  3748  00214A  0E00               	movlw	0
  3749  00214C  205E               	addwfc	??_obtain_pass+1,w,c
  3750  00214E  6E0A               	movwf	___awtoft@c+1,c
  3751  002150  EC47  F017         	call	___awtoft	;wreg free
  3752  002154  C009  F0B3         	movff	?___awtoft,_obtain_pass$2744
  3753  002158  C00A  F0B4         	movff	?___awtoft+1,_obtain_pass$2744+1
  3754  00215C  C00B  F0B5         	movff	?___awtoft+2,_obtain_pass$2744+2
  3755                           
  3756                           ;lcd_vision.c: 57: pass = pass + input * pow(10, 15 - *digit);
  3757  002160  C0B3  F055         	movff	_obtain_pass$2744,pow@y
  3758  002164  C0B4  F056         	movff	_obtain_pass$2744+1,pow@y+1
  3759  002168  C0B5  F057         	movff	_obtain_pass$2744+2,pow@y+2
  3760  00216C  0E00               	movlw	0
  3761  00216E  6E52               	movwf	pow@x,c
  3762  002170  0E20               	movlw	32
  3763  002172  6E53               	movwf	pow@x+1,c
  3764  002174  0E41               	movlw	65
  3765  002176  6E54               	movwf	pow@x+2,c
  3766  002178  EC14  F00D         	call	_pow	;wreg free
  3767  00217C  C052  F0B6         	movff	?_pow,_obtain_pass$2745
  3768  002180  C053  F0B7         	movff	?_pow+1,_obtain_pass$2745+1
  3769  002184  C054  F0B8         	movff	?_pow+2,_obtain_pass$2745+2
  3770                           
  3771                           ;lcd_vision.c: 57: pass = pass + input * pow(10, 15 - *digit);
  3772  002188  C0B6  F010         	movff	_obtain_pass$2745,___ftmul@f2
  3773  00218C  C0B7  F011         	movff	_obtain_pass$2745+1,___ftmul@f2+1
  3774  002190  C0B8  F012         	movff	_obtain_pass$2745+2,___ftmul@f2+2
  3775  002194  505A               	movf	obtain_pass@input,w,c
  3776  002196  ECF0  F017         	call	___lbtoft
  3777  00219A  C009  F00D         	movff	?___lbtoft,___ftmul@f1
  3778  00219E  C00A  F00E         	movff	?___lbtoft+1,___ftmul@f1+1
  3779  0021A2  C00B  F00F         	movff	?___lbtoft+2,___ftmul@f1+2
  3780  0021A6  EC0F  F010         	call	___ftmul	;wreg free
  3781  0021AA  C00D  F01F         	movff	?___ftmul,___ftadd@f2
  3782  0021AE  C00E  F020         	movff	?___ftmul+1,___ftadd@f2+1
  3783  0021B2  C00F  F021         	movff	?___ftmul+2,___ftadd@f2+2
  3784  0021B6  C058  F009         	movff	obtain_pass@pass,___awtoft@c
  3785  0021BA  C059  F00A         	movff	obtain_pass@pass+1,___awtoft@c+1
  3786  0021BE  EC47  F017         	call	___awtoft	;wreg free
  3787  0021C2  C009  F01C         	movff	?___awtoft,___ftadd@f1
  3788  0021C6  C00A  F01D         	movff	?___awtoft+1,___ftadd@f1+1
  3789  0021CA  C00B  F01E         	movff	?___awtoft+2,___ftadd@f1+2
  3790  0021CE  EC64  F00B         	call	___ftadd	;wreg free
  3791  0021D2  C01C  F028         	movff	?___ftadd,___fttol@f1
  3792  0021D6  C01D  F029         	movff	?___ftadd+1,___fttol@f1+1
  3793  0021DA  C01E  F02A         	movff	?___ftadd+2,___fttol@f1+2
  3794  0021DE  EC8E  F00F         	call	___fttol	;wreg free
  3795  0021E2  C028  F058         	movff	?___fttol,obtain_pass@pass
  3796  0021E6  C029  F059         	movff	?___fttol+1,obtain_pass@pass+1
  3797                           
  3798                           ;lcd_vision.c: 58: next_code(digit, &input);
  3799  0021EA  C05B  F008         	movff	obtain_pass@digit,next_code@digit
  3800  0021EE  C05C  F009         	movff	obtain_pass@digit+1,next_code@digit+1
  3801  0021F2  0E5A               	movlw	low obtain_pass@input
  3802  0021F4  6E0A               	movwf	next_code@input,c
  3803  0021F6  0E00               	movlw	high obtain_pass@input
  3804  0021F8  6E0B               	movwf	next_code@input+1,c
  3805  0021FA  ECDB  F016         	call	_next_code	;wreg free
  3806  0021FE  D000               	goto	l4027
  3807  002200                     l4027:
  3808                           
  3809                           ;lcd_vision.c: 59: }
  3810                           ;lcd_vision.c: 60: return pass;
  3811  002200  C058  F058         	movff	obtain_pass@pass,?_obtain_pass
  3812  002204  C059  F059         	movff	obtain_pass@pass+1,?_obtain_pass+1
  3813  002208  0012               	return	
  3814  00220A  0012               	return		;funcret
  3815  00220C                     __end_of_obtain_pass:
  3816                           	opt stack 0
  3817                           tblptru	equ	0xFF8
  3818                           tblptrh	equ	0xFF7
  3819                           tblptrl	equ	0xFF6
  3820                           tablat	equ	0xFF5
  3821                           prodh	equ	0xFF4
  3822                           prodl	equ	0xFF3
  3823                           indf0	equ	0xFEF
  3824                           postinc0	equ	0xFEE
  3825                           fsr0h	equ	0xFEA
  3826                           fsr0l	equ	0xFE9
  3827                           wreg	equ	0xFE8
  3828                           postdec1	equ	0xFE5
  3829                           fsr1l	equ	0xFE1
  3830                           indf2	equ	0xFDF
  3831                           postinc2	equ	0xFDE
  3832                           postdec2	equ	0xFDD
  3833                           fsr2h	equ	0xFDA
  3834                           fsr2l	equ	0xFD9
  3835                           status	equ	0xFD8
  3836                           
  3837 ;; *************** function _pow *****************
  3838 ;; Defined at:
  3839 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\pow.c"
  3840 ;; Parameters:    Size  Location     Type
  3841 ;;  x               3   81[COMRAM] int 
  3842 ;;  y               3   84[COMRAM] int 
  3843 ;; Auto vars:     Size  Location     Type
  3844 ;;  yi              4    7[BANK0 ] unsigned long 
  3845 ;;  sign            1    6[BANK0 ] unsigned char 
  3846 ;; Return value:  Size  Location     Type
  3847 ;;                  3   81[COMRAM] unsigned char 
  3848 ;; Registers used:
  3849 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3850 ;; Tracked objects:
  3851 ;;		On entry : 0/0
  3852 ;;		On exit  : 0/0
  3853 ;;		Unchanged: 0/0
  3854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3855 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3856 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3858 ;;      Totals:         6      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3859 ;;Total ram usage:       17 bytes
  3860 ;; Hardware stack levels used:    1
  3861 ;; Hardware stack levels required when called:    4
  3862 ;; This function calls:
  3863 ;;		___ftge
  3864 ;;		___ftmul
  3865 ;;		___ftneg
  3866 ;;		___fttol
  3867 ;;		___lltoft
  3868 ;;		_exp
  3869 ;;		_log
  3870 ;; This function is called by:
  3871 ;;		_obtain_pass
  3872 ;; This function uses a non-reentrant model
  3873 ;;
  3874                           
  3875                           	psect	text17
  3876  001A28                     __ptext17:
  3877                           	opt stack 0
  3878  001A28                     _pow:
  3879                           	opt stack 24
  3880                           
  3881                           ;incstack = 0
  3882  001A28  0E00               	movlw	0
  3883  001A2A  0100               	movlb	0	; () banked
  3884  001A2C  6FAE               	movwf	pow@sign& (0+255),b
  3885                           
  3886                           ; BSR set to: 0
  3887  001A2E  5052               	movf	pow@x,w,c
  3888  001A30  1053               	iorwf	pow@x+1,w,c
  3889  001A32  1054               	iorwf	pow@x+2,w,c
  3890  001A34  A4D8               	btfss	status,2,c
  3891  001A36  D01C               	goto	l3861
  3892                           
  3893                           ; BSR set to: 0
  3894  001A38  0E00               	movlw	0
  3895  001A3A  6E01               	movwf	___ftge@ff1,c
  3896  001A3C  0E00               	movlw	0
  3897  001A3E  6E02               	movwf	___ftge@ff1+1,c
  3898  001A40  0E00               	movlw	0
  3899  001A42  6E03               	movwf	___ftge@ff1+2,c
  3900  001A44  C055  F004         	movff	pow@y,___ftge@ff2
  3901  001A48  C056  F005         	movff	pow@y+1,___ftge@ff2+1
  3902  001A4C  C057  F006         	movff	pow@y+2,___ftge@ff2+2
  3903  001A50  EC92  F013         	call	___ftge	;wreg free
  3904  001A54  A0D8               	btfss	status,0,c
  3905  001A56  D005               	goto	l1352
  3906  001A58  0E00               	movlw	0
  3907  001A5A  0100               	movlb	0	; () banked
  3908  001A5C  6F83               	movwf	(_errno+1)& (0+255),b
  3909  001A5E  0E21               	movlw	33
  3910  001A60  6F82               	movwf	_errno& (0+255),b
  3911  001A62                     l1352:
  3912  001A62  0E00               	movlw	0
  3913  001A64  6E52               	movwf	?_pow,c
  3914  001A66  0E00               	movlw	0
  3915  001A68  6E53               	movwf	?_pow+1,c
  3916  001A6A  0E00               	movlw	0
  3917  001A6C  6E54               	movwf	?_pow+2,c
  3918  001A6E  0012               	return	
  3919  001A70                     l3861:
  3920  001A70  5055               	movf	pow@y,w,c
  3921  001A72  1056               	iorwf	pow@y+1,w,c
  3922  001A74  1057               	iorwf	pow@y+2,w,c
  3923  001A76  A4D8               	btfss	status,2,c
  3924  001A78  D007               	goto	l3867
  3925  001A7A  0E00               	movlw	0
  3926  001A7C  6E52               	movwf	?_pow,c
  3927  001A7E  0E80               	movlw	128
  3928  001A80  6E53               	movwf	?_pow+1,c
  3929  001A82  0E3F               	movlw	63
  3930  001A84  6E54               	movwf	?_pow+2,c
  3931  001A86  0012               	return	
  3932  001A88                     l3867:
  3933  001A88  AE54               	btfss	pow@x+2,7,c
  3934  001A8A  D044               	goto	l3879
  3935  001A8C  C055  F028         	movff	pow@y,___fttol@f1
  3936  001A90  C056  F029         	movff	pow@y+1,___fttol@f1+1
  3937  001A94  C057  F02A         	movff	pow@y+2,___fttol@f1+2
  3938  001A98  EC8E  F00F         	call	___fttol	;wreg free
  3939  001A9C  C028  F0AF         	movff	?___fttol,pow@yi
  3940  001AA0  C029  F0B0         	movff	?___fttol+1,pow@yi+1
  3941  001AA4  C02A  F0B1         	movff	?___fttol+2,pow@yi+2
  3942  001AA8  C02B  F0B2         	movff	?___fttol+3,pow@yi+3
  3943  001AAC  C0AF  F009         	movff	pow@yi,___lltoft@c
  3944  001AB0  C0B0  F00A         	movff	pow@yi+1,___lltoft@c+1
  3945  001AB4  C0B1  F00B         	movff	pow@yi+2,___lltoft@c+2
  3946  001AB8  C0B2  F00C         	movff	pow@yi+3,___lltoft@c+3
  3947  001ABC  ECDB  F015         	call	___lltoft	;wreg free
  3948  001AC0  5055               	movf	pow@y,w,c
  3949  001AC2  1809               	xorwf	?___lltoft,w,c
  3950  001AC4  E107               	bnz	u4000
  3951  001AC6  5056               	movf	pow@y+1,w,c
  3952  001AC8  180A               	xorwf	?___lltoft+1,w,c
  3953  001ACA  E104               	bnz	u4000
  3954  001ACC  5057               	movf	pow@y+2,w,c
  3955  001ACE  180B               	xorwf	?___lltoft+2,w,c
  3956  001AD0  B4D8               	btfsc	status,2,c
  3957  001AD2  D00C               	goto	l3875
  3958  001AD4                     u4000:
  3959  001AD4  0E00               	movlw	0
  3960  001AD6  0100               	movlb	0	; () banked
  3961  001AD8  6F83               	movwf	(_errno+1)& (0+255),b
  3962  001ADA  0E21               	movlw	33
  3963  001ADC  6F82               	movwf	_errno& (0+255),b
  3964  001ADE  0E00               	movlw	0
  3965  001AE0  6E52               	movwf	?_pow,c
  3966  001AE2  0E00               	movlw	0
  3967  001AE4  6E53               	movwf	?_pow+1,c
  3968  001AE6  0E00               	movlw	0
  3969  001AE8  6E54               	movwf	?_pow+2,c
  3970                           
  3971                           ; BSR set to: 0
  3972  001AEA  0012               	return	
  3973  001AEC                     l3875:
  3974  001AEC  0100               	movlb	0	; () banked
  3975  001AEE  51AF               	movf	pow@yi& (0+255),w,b
  3976  001AF0  0B01               	andlw	1
  3977  001AF2  0100               	movlb	0	; () banked
  3978  001AF4  6FAE               	movwf	pow@sign& (0+255),b
  3979                           
  3980                           ; BSR set to: 0
  3981  001AF6  C052  F001         	movff	pow@x,___ftneg@f1
  3982  001AFA  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  3983  001AFE  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  3984  001B02  EC03  F018         	call	___ftneg	;wreg free
  3985  001B06  C001  F052         	movff	?___ftneg,pow@x
  3986  001B0A  C002  F053         	movff	?___ftneg+1,pow@x+1
  3987  001B0E  C003  F054         	movff	?___ftneg+2,pow@x+2
  3988  001B12  D000               	goto	l3879
  3989  001B14                     l3879:
  3990  001B14  C052  F034         	movff	pow@x,log@x
  3991  001B18  C053  F035         	movff	pow@x+1,log@x+1
  3992  001B1C  C054  F036         	movff	pow@x+2,log@x+2
  3993  001B20  EC78  F00E         	call	_log	;wreg free
  3994  001B24  C034  F0A8         	movff	?_log,_pow$2746
  3995  001B28  C035  F0A9         	movff	?_log+1,_pow$2746+1
  3996  001B2C  C036  F0AA         	movff	?_log+2,_pow$2746+2
  3997  001B30  C0A8  F00D         	movff	_pow$2746,___ftmul@f1
  3998  001B34  C0A9  F00E         	movff	_pow$2746+1,___ftmul@f1+1
  3999  001B38  C0AA  F00F         	movff	_pow$2746+2,___ftmul@f1+2
  4000  001B3C  C055  F010         	movff	pow@y,___ftmul@f2
  4001  001B40  C056  F011         	movff	pow@y+1,___ftmul@f2+1
  4002  001B44  C057  F012         	movff	pow@y+2,___ftmul@f2+2
  4003  001B48  EC0F  F010         	call	___ftmul	;wreg free
  4004  001B4C  C00D  F0AB         	movff	?___ftmul,_pow$2747
  4005  001B50  C00E  F0AC         	movff	?___ftmul+1,_pow$2747+1
  4006  001B54  C00F  F0AD         	movff	?___ftmul+2,_pow$2747+2
  4007  001B58  C0AB  F049         	movff	_pow$2747,exp@x
  4008  001B5C  C0AC  F04A         	movff	_pow$2747+1,exp@x+1
  4009  001B60  C0AD  F04B         	movff	_pow$2747+2,exp@x+2
  4010  001B64  EC70  F00A         	call	_exp	;wreg free
  4011  001B68  C049  F052         	movff	?_exp,pow@x
  4012  001B6C  C04A  F053         	movff	?_exp+1,pow@x+1
  4013  001B70  C04B  F054         	movff	?_exp+2,pow@x+2
  4014  001B74  0100               	movlb	0	; () banked
  4015  001B76  51AE               	movf	pow@sign& (0+255),w,b
  4016  001B78  0100               	movlb	0	; () banked
  4017  001B7A  B4D8               	btfsc	status,2,c
  4018  001B7C  D00F               	goto	l1357
  4019                           
  4020                           ; BSR set to: 0
  4021  001B7E  C052  F001         	movff	pow@x,___ftneg@f1
  4022  001B82  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  4023  001B86  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  4024  001B8A  EC03  F018         	call	___ftneg	;wreg free
  4025  001B8E  C001  F052         	movff	?___ftneg,?_pow
  4026  001B92  C002  F053         	movff	?___ftneg+1,?_pow+1
  4027  001B96  C003  F054         	movff	?___ftneg+2,?_pow+2
  4028  001B9A  0012               	return	
  4029  001B9C                     l1357:
  4030                           
  4031                           ; BSR set to: 0
  4032  001B9C  C052  F052         	movff	pow@x,?_pow
  4033  001BA0  C053  F053         	movff	pow@x+1,?_pow+1
  4034  001BA4  C054  F054         	movff	pow@x+2,?_pow+2
  4035  001BA8  0012               	return		;funcret
  4036  001BAA                     __end_of_pow:
  4037                           	opt stack 0
  4038                           tblptru	equ	0xFF8
  4039                           tblptrh	equ	0xFF7
  4040                           tblptrl	equ	0xFF6
  4041                           tablat	equ	0xFF5
  4042                           prodh	equ	0xFF4
  4043                           prodl	equ	0xFF3
  4044                           indf0	equ	0xFEF
  4045                           postinc0	equ	0xFEE
  4046                           fsr0h	equ	0xFEA
  4047                           fsr0l	equ	0xFE9
  4048                           wreg	equ	0xFE8
  4049                           postdec1	equ	0xFE5
  4050                           fsr1l	equ	0xFE1
  4051                           indf2	equ	0xFDF
  4052                           postinc2	equ	0xFDE
  4053                           postdec2	equ	0xFDD
  4054                           fsr2h	equ	0xFDA
  4055                           fsr2l	equ	0xFD9
  4056                           status	equ	0xFD8
  4057                           
  4058 ;; *************** function _log *****************
  4059 ;; Defined at:
  4060 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\log.c"
  4061 ;; Parameters:    Size  Location     Type
  4062 ;;  x               3   51[COMRAM] unsigned char 
  4063 ;; Auto vars:     Size  Location     Type
  4064 ;;  exponent        2   54[COMRAM] int 
  4065 ;; Return value:  Size  Location     Type
  4066 ;;                  3   51[COMRAM] int 
  4067 ;; Registers used:
  4068 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4069 ;; Tracked objects:
  4070 ;;		On entry : 0/0
  4071 ;;		On exit  : 0/0
  4072 ;;		Unchanged: 0/0
  4073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4074 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4075 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4077 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4078 ;;Total ram usage:        5 bytes
  4079 ;; Hardware stack levels used:    1
  4080 ;; Hardware stack levels required when called:    3
  4081 ;; This function calls:
  4082 ;;		___awtoft
  4083 ;;		___ftadd
  4084 ;;		___ftmul
  4085 ;;		_eval_poly
  4086 ;;		_frexp
  4087 ;; This function is called by:
  4088 ;;		_pow
  4089 ;; This function uses a non-reentrant model
  4090 ;;
  4091                           
  4092                           	psect	text18
  4093  001CF0                     __ptext18:
  4094                           	opt stack 0
  4095  001CF0                     _log:
  4096                           	opt stack 24
  4097                           
  4098                           ;incstack = 0
  4099  001CF0  AE36               	btfss	log@x+2,7,c
  4100  001CF2  D00C               	goto	l3545
  4101  001CF4  0E00               	movlw	0
  4102  001CF6  0100               	movlb	0	; () banked
  4103  001CF8  6F83               	movwf	(_errno+1)& (0+255),b
  4104  001CFA  0E21               	movlw	33
  4105  001CFC  6F82               	movwf	_errno& (0+255),b
  4106  001CFE  0E00               	movlw	0
  4107  001D00  6E34               	movwf	?_log,c
  4108  001D02  0E00               	movlw	0
  4109  001D04  6E35               	movwf	?_log+1,c
  4110  001D06  0E00               	movlw	0
  4111  001D08  6E36               	movwf	?_log+2,c
  4112                           
  4113                           ; BSR set to: 0
  4114  001D0A  0012               	return	
  4115  001D0C                     l3545:
  4116  001D0C  5034               	movf	log@x,w,c
  4117  001D0E  1035               	iorwf	log@x+1,w,c
  4118  001D10  1036               	iorwf	log@x+2,w,c
  4119  001D12  A4D8               	btfss	status,2,c
  4120  001D14  D00C               	goto	l3551
  4121  001D16  0E00               	movlw	0
  4122  001D18  0100               	movlb	0	; () banked
  4123  001D1A  6F83               	movwf	(_errno+1)& (0+255),b
  4124  001D1C  0E22               	movlw	34
  4125  001D1E  6F82               	movwf	_errno& (0+255),b
  4126  001D20  0E00               	movlw	0
  4127  001D22  6E34               	movwf	?_log,c
  4128  001D24  0E00               	movlw	0
  4129  001D26  6E35               	movwf	?_log+1,c
  4130  001D28  0E00               	movlw	0
  4131  001D2A  6E36               	movwf	?_log+2,c
  4132                           
  4133                           ; BSR set to: 0
  4134  001D2C  0012               	return	
  4135  001D2E                     l3551:
  4136  001D2E  0E00               	movlw	0
  4137  001D30  6E10               	movwf	___ftmul@f2,c
  4138  001D32  0E00               	movlw	0
  4139  001D34  6E11               	movwf	___ftmul@f2+1,c
  4140  001D36  0E40               	movlw	64
  4141  001D38  6E12               	movwf	___ftmul@f2+2,c
  4142  001D3A  0E37               	movlw	low log@exponent
  4143  001D3C  6E04               	movwf	frexp@eptr,c
  4144  001D3E  0E00               	movlw	high log@exponent
  4145  001D40  6E05               	movwf	frexp@eptr+1,c
  4146  001D42  C034  F001         	movff	log@x,frexp@value
  4147  001D46  C035  F002         	movff	log@x+1,frexp@value+1
  4148  001D4A  C036  F003         	movff	log@x+2,frexp@value+2
  4149  001D4E  EC28  F014         	call	_frexp	;wreg free
  4150  001D52  C001  F00D         	movff	?_frexp,___ftmul@f1
  4151  001D56  C002  F00E         	movff	?_frexp+1,___ftmul@f1+1
  4152  001D5A  C003  F00F         	movff	?_frexp+2,___ftmul@f1+2
  4153  001D5E  EC0F  F010         	call	___ftmul	;wreg free
  4154  001D62  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  4155  001D66  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  4156  001D6A  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  4157  001D6E  0E00               	movlw	0
  4158  001D70  6E1F               	movwf	___ftadd@f2,c
  4159  001D72  0E80               	movlw	128
  4160  001D74  6E20               	movwf	___ftadd@f2+1,c
  4161  001D76  0EBF               	movlw	191
  4162  001D78  6E21               	movwf	___ftadd@f2+2,c
  4163  001D7A  EC64  F00B         	call	___ftadd	;wreg free
  4164  001D7E  C01C  F034         	movff	?___ftadd,log@x
  4165  001D82  C01D  F035         	movff	?___ftadd+1,log@x+1
  4166  001D86  C01E  F036         	movff	?___ftadd+2,log@x+2
  4167  001D8A  0637               	decf	log@exponent,f,c
  4168  001D8C  A0D8               	btfss	status,0,c
  4169  001D8E  0638               	decf	log@exponent+1,f,c
  4170  001D90  C034  F028         	movff	log@x,eval_poly@x
  4171  001D94  C035  F029         	movff	log@x+1,eval_poly@x+1
  4172  001D98  C036  F02A         	movff	log@x+2,eval_poly@x+2
  4173  001D9C  0E2D               	movlw	low log@coeff
  4174  001D9E  6E2B               	movwf	eval_poly@d,c
  4175  001DA0  0E0F               	movlw	high log@coeff
  4176  001DA2  6E2C               	movwf	eval_poly@d+1,c
  4177  001DA4  0E00               	movlw	0
  4178  001DA6  6E2E               	movwf	eval_poly@n+1,c
  4179  001DA8  0E08               	movlw	8
  4180  001DAA  6E2D               	movwf	eval_poly@n,c
  4181  001DAC  ECC5  F012         	call	_eval_poly	;wreg free
  4182  001DB0  C028  F034         	movff	?_eval_poly,log@x
  4183  001DB4  C029  F035         	movff	?_eval_poly+1,log@x+1
  4184  001DB8  C02A  F036         	movff	?_eval_poly+2,log@x+2
  4185  001DBC  0E72               	movlw	114
  4186  001DBE  6E10               	movwf	___ftmul@f2,c
  4187  001DC0  0E31               	movlw	49
  4188  001DC2  6E11               	movwf	___ftmul@f2+1,c
  4189  001DC4  0E3F               	movlw	63
  4190  001DC6  6E12               	movwf	___ftmul@f2+2,c
  4191  001DC8  C037  F009         	movff	log@exponent,___awtoft@c
  4192  001DCC  C038  F00A         	movff	log@exponent+1,___awtoft@c+1
  4193  001DD0  EC47  F017         	call	___awtoft	;wreg free
  4194  001DD4  C009  F00D         	movff	?___awtoft,___ftmul@f1
  4195  001DD8  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  4196  001DDC  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  4197  001DE0  EC0F  F010         	call	___ftmul	;wreg free
  4198  001DE4  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  4199  001DE8  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  4200  001DEC  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  4201  001DF0  C034  F01F         	movff	log@x,___ftadd@f2
  4202  001DF4  C035  F020         	movff	log@x+1,___ftadd@f2+1
  4203  001DF8  C036  F021         	movff	log@x+2,___ftadd@f2+2
  4204  001DFC  EC64  F00B         	call	___ftadd	;wreg free
  4205  001E00  C01C  F034         	movff	?___ftadd,?_log
  4206  001E04  C01D  F035         	movff	?___ftadd+1,?_log+1
  4207  001E08  C01E  F036         	movff	?___ftadd+2,?_log+2
  4208  001E0C  0012               	return	
  4209  001E0E  0012               	return		;funcret
  4210  001E10                     __end_of_log:
  4211                           	opt stack 0
  4212                           tblptru	equ	0xFF8
  4213                           tblptrh	equ	0xFF7
  4214                           tblptrl	equ	0xFF6
  4215                           tablat	equ	0xFF5
  4216                           prodh	equ	0xFF4
  4217                           prodl	equ	0xFF3
  4218                           indf0	equ	0xFEF
  4219                           postinc0	equ	0xFEE
  4220                           fsr0h	equ	0xFEA
  4221                           fsr0l	equ	0xFE9
  4222                           wreg	equ	0xFE8
  4223                           postdec1	equ	0xFE5
  4224                           fsr1l	equ	0xFE1
  4225                           indf2	equ	0xFDF
  4226                           postinc2	equ	0xFDE
  4227                           postdec2	equ	0xFDD
  4228                           fsr2h	equ	0xFDA
  4229                           fsr2l	equ	0xFD9
  4230                           status	equ	0xFD8
  4231                           
  4232 ;; *************** function _exp *****************
  4233 ;; Defined at:
  4234 ;;		line 12 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\exp.c"
  4235 ;; Parameters:    Size  Location     Type
  4236 ;;  x               3   72[COMRAM] int 
  4237 ;; Auto vars:     Size  Location     Type
  4238 ;;  exponent        2   78[COMRAM] int 
  4239 ;;  sign            1   80[COMRAM] unsigned char 
  4240 ;; Return value:  Size  Location     Type
  4241 ;;                  3   72[COMRAM] unsigned char 
  4242 ;; Registers used:
  4243 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4244 ;; Tracked objects:
  4245 ;;		On entry : 0/0
  4246 ;;		On exit  : 0/0
  4247 ;;		Unchanged: 0/0
  4248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4249 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4250 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4252 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4253 ;;Total ram usage:        9 bytes
  4254 ;; Hardware stack levels used:    1
  4255 ;; Hardware stack levels required when called:    3
  4256 ;; This function calls:
  4257 ;;		___awtoft
  4258 ;;		___ftdiv
  4259 ;;		___ftge
  4260 ;;		___ftmul
  4261 ;;		___ftneg
  4262 ;;		___ftsub
  4263 ;;		___fttol
  4264 ;;		_eval_poly
  4265 ;;		_floor
  4266 ;;		_ldexp
  4267 ;; This function is called by:
  4268 ;;		_pow
  4269 ;; This function uses a non-reentrant model
  4270 ;;
  4271                           
  4272                           	psect	text19
  4273  0014E0                     __ptext19:
  4274                           	opt stack 0
  4275  0014E0                     _exp:
  4276                           	opt stack 24
  4277                           
  4278                           ;incstack = 0
  4279  0014E0  5049               	movf	exp@x,w,c
  4280  0014E2  104A               	iorwf	exp@x+1,w,c
  4281  0014E4  104B               	iorwf	exp@x+2,w,c
  4282  0014E6  A4D8               	btfss	status,2,c
  4283  0014E8  D007               	goto	l3567
  4284  0014EA  0E00               	movlw	0
  4285  0014EC  6E49               	movwf	?_exp,c
  4286  0014EE  0E80               	movlw	128
  4287  0014F0  6E4A               	movwf	?_exp+1,c
  4288  0014F2  0E3F               	movlw	63
  4289  0014F4  6E4B               	movwf	?_exp+2,c
  4290  0014F6  0012               	return	
  4291  0014F8                     l3567:
  4292  0014F8  0E72               	movlw	114
  4293  0014FA  6E01               	movwf	___ftge@ff1,c
  4294  0014FC  0E31               	movlw	49
  4295  0014FE  6E02               	movwf	___ftge@ff1+1,c
  4296  001500  0E44               	movlw	68
  4297  001502  6E03               	movwf	___ftge@ff1+2,c
  4298  001504  C049  F004         	movff	exp@x,___ftge@ff2
  4299  001508  C04A  F005         	movff	exp@x+1,___ftge@ff2+1
  4300  00150C  C04B  F006         	movff	exp@x+2,___ftge@ff2+2
  4301  001510  EC92  F013         	call	___ftge	;wreg free
  4302  001514  B0D8               	btfsc	status,0,c
  4303  001516  D00C               	goto	l3573
  4304  001518  0E00               	movlw	0
  4305  00151A  0100               	movlb	0	; () banked
  4306  00151C  6F83               	movwf	(_errno+1)& (0+255),b
  4307  00151E  0E22               	movlw	34
  4308  001520  6F82               	movwf	_errno& (0+255),b
  4309  001522  0EFF               	movlw	255
  4310  001524  6E49               	movwf	?_exp,c
  4311  001526  0E7F               	movlw	127
  4312  001528  6E4A               	movwf	?_exp+1,c
  4313  00152A  0E7F               	movlw	127
  4314  00152C  6E4B               	movwf	?_exp+2,c
  4315                           
  4316                           ; BSR set to: 0
  4317  00152E  0012               	return	
  4318  001530                     l3573:
  4319  001530  C049  F001         	movff	exp@x,___ftge@ff1
  4320  001534  C04A  F002         	movff	exp@x+1,___ftge@ff1+1
  4321  001538  C04B  F003         	movff	exp@x+2,___ftge@ff1+2
  4322  00153C  0E49               	movlw	73
  4323  00153E  6E04               	movwf	___ftge@ff2,c
  4324  001540  0E3A               	movlw	58
  4325  001542  6E05               	movwf	___ftge@ff2+1,c
  4326  001544  0EC4               	movlw	196
  4327  001546  6E06               	movwf	___ftge@ff2+2,c
  4328  001548  EC92  F013         	call	___ftge	;wreg free
  4329  00154C  B0D8               	btfsc	status,0,c
  4330  00154E  D00C               	goto	l3579
  4331  001550  0E00               	movlw	0
  4332  001552  0100               	movlb	0	; () banked
  4333  001554  6F83               	movwf	(_errno+1)& (0+255),b
  4334  001556  0E22               	movlw	34
  4335  001558  6F82               	movwf	_errno& (0+255),b
  4336  00155A  0E00               	movlw	0
  4337  00155C  6E49               	movwf	?_exp,c
  4338  00155E  0E00               	movlw	0
  4339  001560  6E4A               	movwf	?_exp+1,c
  4340  001562  0E00               	movlw	0
  4341  001564  6E4B               	movwf	?_exp+2,c
  4342                           
  4343                           ; BSR set to: 0
  4344  001566  0012               	return	
  4345  001568                     l3579:
  4346  001568  AE4B               	btfss	exp@x+2,7,c
  4347  00156A  D002               	goto	u3320
  4348  00156C  0E01               	movlw	1
  4349  00156E  D001               	goto	u3330
  4350  001570                     u3320:
  4351  001570  0E00               	movlw	0
  4352  001572                     u3330:
  4353  001572  6E51               	movwf	exp@sign,c
  4354  001574  5051               	movf	exp@sign,w,c
  4355  001576  B4D8               	btfsc	status,2,c
  4356  001578  D00E               	goto	l1376
  4357  00157A  C049  F001         	movff	exp@x,___ftneg@f1
  4358  00157E  C04A  F002         	movff	exp@x+1,___ftneg@f1+1
  4359  001582  C04B  F003         	movff	exp@x+2,___ftneg@f1+2
  4360  001586  EC03  F018         	call	___ftneg	;wreg free
  4361  00158A  C001  F049         	movff	?___ftneg,exp@x
  4362  00158E  C002  F04A         	movff	?___ftneg+1,exp@x+1
  4363  001592  C003  F04B         	movff	?___ftneg+2,exp@x+2
  4364  001596                     l1376:
  4365  001596  C049  F00D         	movff	exp@x,___ftmul@f1
  4366  00159A  C04A  F00E         	movff	exp@x+1,___ftmul@f1+1
  4367  00159E  C04B  F00F         	movff	exp@x+2,___ftmul@f1+2
  4368  0015A2  0EAA               	movlw	170
  4369  0015A4  6E10               	movwf	___ftmul@f2,c
  4370  0015A6  0EB8               	movlw	184
  4371  0015A8  6E11               	movwf	___ftmul@f2+1,c
  4372  0015AA  0E3F               	movlw	63
  4373  0015AC  6E12               	movwf	___ftmul@f2+2,c
  4374  0015AE  EC0F  F010         	call	___ftmul	;wreg free
  4375  0015B2  C00D  F049         	movff	?___ftmul,exp@x
  4376  0015B6  C00E  F04A         	movff	?___ftmul+1,exp@x+1
  4377  0015BA  C00F  F04B         	movff	?___ftmul+2,exp@x+2
  4378  0015BE  C049  F041         	movff	exp@x,floor@x
  4379  0015C2  C04A  F042         	movff	exp@x+1,floor@x+1
  4380  0015C6  C04B  F043         	movff	exp@x+2,floor@x+2
  4381  0015CA  ECEC  F011         	call	_floor	;wreg free
  4382  0015CE  C041  F04C         	movff	?_floor,_exp$2748
  4383  0015D2  C042  F04D         	movff	?_floor+1,_exp$2748+1
  4384  0015D6  C043  F04E         	movff	?_floor+2,_exp$2748+2
  4385  0015DA  C04C  F028         	movff	_exp$2748,___fttol@f1
  4386  0015DE  C04D  F029         	movff	_exp$2748+1,___fttol@f1+1
  4387  0015E2  C04E  F02A         	movff	_exp$2748+2,___fttol@f1+2
  4388  0015E6  EC8E  F00F         	call	___fttol	;wreg free
  4389  0015EA  C028  F04F         	movff	?___fttol,exp@exponent
  4390  0015EE  C029  F050         	movff	?___fttol+1,exp@exponent+1
  4391  0015F2  C049  F028         	movff	exp@x,___ftsub@f1
  4392  0015F6  C04A  F029         	movff	exp@x+1,___ftsub@f1+1
  4393  0015FA  C04B  F02A         	movff	exp@x+2,___ftsub@f1+2
  4394  0015FE  C04F  F009         	movff	exp@exponent,___awtoft@c
  4395  001602  C050  F00A         	movff	exp@exponent+1,___awtoft@c+1
  4396  001606  EC47  F017         	call	___awtoft	;wreg free
  4397  00160A  C009  F02B         	movff	?___awtoft,___ftsub@f2
  4398  00160E  C00A  F02C         	movff	?___awtoft+1,___ftsub@f2+1
  4399  001612  C00B  F02D         	movff	?___awtoft+2,___ftsub@f2+2
  4400  001616  EC25  F017         	call	___ftsub	;wreg free
  4401  00161A  C028  F049         	movff	?___ftsub,exp@x
  4402  00161E  C029  F04A         	movff	?___ftsub+1,exp@x+1
  4403  001622  C02A  F04B         	movff	?___ftsub+2,exp@x+2
  4404  001626  C049  F028         	movff	exp@x,eval_poly@x
  4405  00162A  C04A  F029         	movff	exp@x+1,eval_poly@x+1
  4406  00162E  C04B  F02A         	movff	exp@x+2,eval_poly@x+2
  4407  001632  0E0F               	movlw	low exp@coeff
  4408  001634  6E2B               	movwf	eval_poly@d,c
  4409  001636  0E0F               	movlw	high exp@coeff
  4410  001638  6E2C               	movwf	eval_poly@d+1,c
  4411  00163A  0E00               	movlw	0
  4412  00163C  6E2E               	movwf	eval_poly@n+1,c
  4413  00163E  0E09               	movlw	9
  4414  001640  6E2D               	movwf	eval_poly@n,c
  4415  001642  ECC5  F012         	call	_eval_poly	;wreg free
  4416  001646  C028  F034         	movff	?_eval_poly,ldexp@value
  4417  00164A  C029  F035         	movff	?_eval_poly+1,ldexp@value+1
  4418  00164E  C02A  F036         	movff	?_eval_poly+2,ldexp@value+2
  4419  001652  C04F  F037         	movff	exp@exponent,ldexp@newexp
  4420  001656  C050  F038         	movff	exp@exponent+1,ldexp@newexp+1
  4421  00165A  EC5B  F012         	call	_ldexp	;wreg free
  4422  00165E  C034  F049         	movff	?_ldexp,exp@x
  4423  001662  C035  F04A         	movff	?_ldexp+1,exp@x+1
  4424  001666  C036  F04B         	movff	?_ldexp+2,exp@x+2
  4425  00166A  5051               	movf	exp@sign,w,c
  4426  00166C  B4D8               	btfsc	status,2,c
  4427  00166E  D025               	goto	l1377
  4428  001670  2849               	incf	exp@x,w,c
  4429  001672  E10E               	bnz	l3601
  4430  001674  0E7F               	movlw	127
  4431  001676  184A               	xorwf	exp@x+1,w,c
  4432  001678  E10B               	bnz	l3601
  4433  00167A  0E7F               	movlw	127
  4434  00167C  184B               	xorwf	exp@x+2,w,c
  4435  00167E  A4D8               	btfss	status,2,c
  4436  001680  D007               	goto	l3601
  4437  001682  0E00               	movlw	0
  4438  001684  6E49               	movwf	?_exp,c
  4439  001686  0E00               	movlw	0
  4440  001688  6E4A               	movwf	?_exp+1,c
  4441  00168A  0E00               	movlw	0
  4442  00168C  6E4B               	movwf	?_exp+2,c
  4443  00168E  0012               	return	
  4444  001690                     l3601:
  4445  001690  0E00               	movlw	0
  4446  001692  6E09               	movwf	___ftdiv@f1,c
  4447  001694  0E80               	movlw	128
  4448  001696  6E0A               	movwf	___ftdiv@f1+1,c
  4449  001698  0E3F               	movlw	63
  4450  00169A  6E0B               	movwf	___ftdiv@f1+2,c
  4451  00169C  C049  F00C         	movff	exp@x,___ftdiv@f2
  4452  0016A0  C04A  F00D         	movff	exp@x+1,___ftdiv@f2+1
  4453  0016A4  C04B  F00E         	movff	exp@x+2,___ftdiv@f2+2
  4454  0016A8  EC06  F011         	call	___ftdiv	;wreg free
  4455  0016AC  C009  F049         	movff	?___ftdiv,?_exp
  4456  0016B0  C00A  F04A         	movff	?___ftdiv+1,?_exp+1
  4457  0016B4  C00B  F04B         	movff	?___ftdiv+2,?_exp+2
  4458  0016B8  0012               	return	
  4459  0016BA                     l1377:
  4460  0016BA  C049  F049         	movff	exp@x,?_exp
  4461  0016BE  C04A  F04A         	movff	exp@x+1,?_exp+1
  4462  0016C2  C04B  F04B         	movff	exp@x+2,?_exp+2
  4463  0016C6  0012               	return		;funcret
  4464  0016C8                     __end_of_exp:
  4465                           	opt stack 0
  4466                           tblptru	equ	0xFF8
  4467                           tblptrh	equ	0xFF7
  4468                           tblptrl	equ	0xFF6
  4469                           tablat	equ	0xFF5
  4470                           prodh	equ	0xFF4
  4471                           prodl	equ	0xFF3
  4472                           indf0	equ	0xFEF
  4473                           postinc0	equ	0xFEE
  4474                           fsr0h	equ	0xFEA
  4475                           fsr0l	equ	0xFE9
  4476                           wreg	equ	0xFE8
  4477                           postdec1	equ	0xFE5
  4478                           fsr1l	equ	0xFE1
  4479                           indf2	equ	0xFDF
  4480                           postinc2	equ	0xFDE
  4481                           postdec2	equ	0xFDD
  4482                           fsr2h	equ	0xFDA
  4483                           fsr2l	equ	0xFD9
  4484                           status	equ	0xFD8
  4485                           
  4486 ;; *************** function _ldexp *****************
  4487 ;; Defined at:
  4488 ;;		line 277 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\frexp.c"
  4489 ;; Parameters:    Size  Location     Type
  4490 ;;  value           3   51[COMRAM] unsigned char 
  4491 ;;  newexp          2   54[COMRAM] int 
  4492 ;; Auto vars:     Size  Location     Type
  4493 ;;		None
  4494 ;; Return value:  Size  Location     Type
  4495 ;;                  3   51[COMRAM] int 
  4496 ;; Registers used:
  4497 ;;		wreg, status,2, status,0
  4498 ;; Tracked objects:
  4499 ;;		On entry : 0/0
  4500 ;;		On exit  : 0/0
  4501 ;;		Unchanged: 0/0
  4502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4503 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4505 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4506 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4507 ;;Total ram usage:        7 bytes
  4508 ;; Hardware stack levels used:    1
  4509 ;; This function calls:
  4510 ;;		Nothing
  4511 ;; This function is called by:
  4512 ;;		_exp
  4513 ;; This function uses a non-reentrant model
  4514 ;;
  4515                           
  4516                           	psect	text20
  4517  0024B6                     __ptext20:
  4518                           	opt stack 0
  4519  0024B6                     _ldexp:
  4520                           	opt stack 26
  4521                           
  4522                           ;incstack = 0
  4523  0024B6  5034               	movf	ldexp@value,w,c
  4524  0024B8  1035               	iorwf	ldexp@value+1,w,c
  4525  0024BA  1036               	iorwf	ldexp@value+2,w,c
  4526  0024BC  A4D8               	btfss	status,2,c
  4527  0024BE  D007               	goto	l3347
  4528  0024C0  0E00               	movlw	0
  4529  0024C2  6E34               	movwf	?_ldexp,c
  4530  0024C4  0E00               	movlw	0
  4531  0024C6  6E35               	movwf	?_ldexp+1,c
  4532  0024C8  0E00               	movlw	0
  4533  0024CA  6E36               	movwf	?_ldexp+2,c
  4534  0024CC  0012               	return	
  4535  0024CE                     l3347:
  4536  0024CE  5036               	movf	ldexp@value+2,w,c
  4537  0024D0  0B7F               	andlw	127
  4538  0024D2  6E39               	movwf	??_ldexp& (0+255),c
  4539  0024D4  6A3A               	clrf	(??_ldexp+1)& (0+255),c
  4540  0024D6  90D8               	bcf	status,0,c
  4541  0024D8  3639               	rlcf	??_ldexp,f,c
  4542  0024DA  363A               	rlcf	??_ldexp+1,f,c
  4543  0024DC  5039               	movf	??_ldexp,w,c
  4544  0024DE  2637               	addwf	ldexp@newexp,f,c
  4545  0024E0  503A               	movf	??_ldexp+1,w,c
  4546  0024E2  2238               	addwfc	ldexp@newexp+1,f,c
  4547  0024E4  AE35               	btfss	ldexp@value+1,7,c
  4548  0024E6  D003               	goto	u2990
  4549  0024E8  6A39               	clrf	??_ldexp& (0+255),c
  4550  0024EA  2A39               	incf	??_ldexp& (0+255),f,c
  4551  0024EC  D001               	goto	u2998
  4552  0024EE                     u2990:
  4553  0024EE  6A39               	clrf	??_ldexp& (0+255),c
  4554  0024F0                     u2998:
  4555  0024F0  5039               	movf	??_ldexp,w,c
  4556  0024F2  2637               	addwf	ldexp@newexp,f,c
  4557  0024F4  0E00               	movlw	0
  4558  0024F6  2238               	addwfc	ldexp@newexp+1,f,c
  4559  0024F8  AE38               	btfss	ldexp@newexp+1,7,c
  4560  0024FA  D00D               	goto	l3355
  4561  0024FC  0E00               	movlw	0
  4562  0024FE  0100               	movlb	0	; () banked
  4563  002500  6F83               	movwf	(_errno+1)& (0+255),b
  4564  002502  0E22               	movlw	34
  4565  002504  6F82               	movwf	_errno& (0+255),b
  4566  002506  0E00               	movlw	0
  4567  002508  6E34               	movwf	?_ldexp,c
  4568  00250A  0E00               	movlw	0
  4569  00250C  6E35               	movwf	?_ldexp+1,c
  4570  00250E  0E00               	movlw	0
  4571  002510                     L2:
  4572  002510  6E36               	movwf	?_ldexp+2,c
  4573                           
  4574                           ; BSR set to: 0
  4575  002512  0012               	return	
  4576                           
  4577                           ; BSR set to: 0
  4578  002514  D032               	goto	l3373
  4579  002516                     l3355:
  4580  002516  BE38               	btfsc	ldexp@newexp+1,7,c
  4581  002518  D01A               	goto	l3371
  4582  00251A  0438               	decf	ldexp@newexp+1,w,c
  4583  00251C  A0D8               	btfss	status,0,c
  4584  00251E  D017               	goto	l3371
  4585  002520  0E00               	movlw	0
  4586  002522  0100               	movlb	0	; () banked
  4587  002524  6F83               	movwf	(_errno+1)& (0+255),b
  4588  002526  0E22               	movlw	34
  4589  002528  6F82               	movwf	_errno& (0+255),b
  4590                           
  4591                           ; BSR set to: 0
  4592  00252A  AE36               	btfss	ldexp@value+2,7,c
  4593  00252C  D008               	goto	l3367
  4594                           
  4595                           ; BSR set to: 0
  4596  00252E  0EFF               	movlw	255
  4597  002530  6E34               	movwf	?_ldexp,c
  4598  002532  0E7F               	movlw	127
  4599  002534  6E35               	movwf	?_ldexp+1,c
  4600  002536  0EFF               	movlw	255
  4601  002538  D7EB               	goto	L2
  4602                           
  4603                           ; BSR set to: 0
  4604  00253A  0012               	return	
  4605                           
  4606                           ; BSR set to: 0
  4607  00253C  D01E               	goto	l3373
  4608  00253E                     l3367:
  4609                           
  4610                           ; BSR set to: 0
  4611  00253E  0EFF               	movlw	255
  4612  002540  6E34               	movwf	?_ldexp,c
  4613  002542  0E7F               	movlw	127
  4614  002544  6E35               	movwf	?_ldexp+1,c
  4615  002546  0E7F               	movlw	127
  4616  002548  D7E3               	goto	L2
  4617                           
  4618                           ; BSR set to: 0
  4619  00254A  0012               	return	
  4620                           
  4621                           ; BSR set to: 0
  4622  00254C  D016               	goto	l3373
  4623  00254E                     l3371:
  4624  00254E  3438               	rlcf	ldexp@newexp+1,w,c
  4625  002550  3038               	rrcf	ldexp@newexp+1,w,c
  4626  002552  6E3A               	movwf	(??_ldexp+1)& (0+255),c
  4627  002554  3037               	rrcf	ldexp@newexp,w,c
  4628  002556  6E39               	movwf	??_ldexp& (0+255),c
  4629  002558  5036               	movf	ldexp@value+2,w,c
  4630  00255A  1839               	xorwf	??_ldexp,w,c
  4631  00255C  0B80               	andlw	-128
  4632  00255E  1839               	xorwf	??_ldexp,w,c
  4633  002560  6E36               	movwf	ldexp@value+2,c
  4634  002562  C037  F039         	movff	ldexp@newexp,??_ldexp
  4635  002566  0E01               	movlw	1
  4636  002568  1639               	andwf	??_ldexp,f,c
  4637  00256A  3239               	rrcf	??_ldexp,f,c
  4638  00256C  3239               	rrcf	??_ldexp,f,c
  4639  00256E  5035               	movf	ldexp@value+1,w,c
  4640  002570  1839               	xorwf	??_ldexp,w,c
  4641  002572  0B7F               	andlw	-129
  4642  002574  1839               	xorwf	??_ldexp,w,c
  4643  002576  6E35               	movwf	ldexp@value+1,c
  4644  002578  D000               	goto	l3373
  4645  00257A                     l3373:
  4646  00257A  C034  F034         	movff	ldexp@value,?_ldexp
  4647  00257E  C035  F035         	movff	ldexp@value+1,?_ldexp+1
  4648  002582  C036  F036         	movff	ldexp@value+2,?_ldexp+2
  4649  002586  0012               	return	
  4650  002588  0012               	return		;funcret
  4651  00258A                     __end_of_ldexp:
  4652                           	opt stack 0
  4653                           tblptru	equ	0xFF8
  4654                           tblptrh	equ	0xFF7
  4655                           tblptrl	equ	0xFF6
  4656                           tablat	equ	0xFF5
  4657                           prodh	equ	0xFF4
  4658                           prodl	equ	0xFF3
  4659                           indf0	equ	0xFEF
  4660                           postinc0	equ	0xFEE
  4661                           fsr0h	equ	0xFEA
  4662                           fsr0l	equ	0xFE9
  4663                           wreg	equ	0xFE8
  4664                           postdec1	equ	0xFE5
  4665                           fsr1l	equ	0xFE1
  4666                           indf2	equ	0xFDF
  4667                           postinc2	equ	0xFDE
  4668                           postdec2	equ	0xFDD
  4669                           fsr2h	equ	0xFDA
  4670                           fsr2l	equ	0xFD9
  4671                           status	equ	0xFD8
  4672                           
  4673 ;; *************** function _floor *****************
  4674 ;; Defined at:
  4675 ;;		line 13 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\floor.c"
  4676 ;; Parameters:    Size  Location     Type
  4677 ;;  x               3   64[COMRAM] int 
  4678 ;; Auto vars:     Size  Location     Type
  4679 ;;  i               3   67[COMRAM] int 
  4680 ;;  expon           2   70[COMRAM] int 
  4681 ;; Return value:  Size  Location     Type
  4682 ;;                  3   64[COMRAM] int 
  4683 ;; Registers used:
  4684 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4685 ;; Tracked objects:
  4686 ;;		On entry : 0/0
  4687 ;;		On exit  : 0/0
  4688 ;;		Unchanged: 0/0
  4689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4690 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4691 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4693 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4694 ;;Total ram usage:        8 bytes
  4695 ;; Hardware stack levels used:    1
  4696 ;; Hardware stack levels required when called:    2
  4697 ;; This function calls:
  4698 ;;		___altoft
  4699 ;;		___ftadd
  4700 ;;		___ftge
  4701 ;;		___fttol
  4702 ;;		_frexp
  4703 ;; This function is called by:
  4704 ;;		_exp
  4705 ;; This function uses a non-reentrant model
  4706 ;;
  4707                           
  4708                           	psect	text21
  4709  0023D8                     __ptext21:
  4710                           	opt stack 0
  4711  0023D8                     _floor:
  4712                           	opt stack 24
  4713                           
  4714                           ;incstack = 0
  4715  0023D8  C041  F001         	movff	floor@x,frexp@value
  4716  0023DC  C042  F002         	movff	floor@x+1,frexp@value+1
  4717  0023E0  C043  F003         	movff	floor@x+2,frexp@value+2
  4718  0023E4  0E47               	movlw	low floor@expon
  4719  0023E6  6E04               	movwf	frexp@eptr,c
  4720  0023E8  0E00               	movlw	high floor@expon
  4721  0023EA  6E05               	movwf	frexp@eptr+1,c
  4722  0023EC  EC28  F014         	call	_frexp	;wreg free
  4723  0023F0  AE48               	btfss	floor@expon+1,7,c
  4724  0023F2  D010               	goto	l3325
  4725  0023F4  AE43               	btfss	floor@x+2,7,c
  4726  0023F6  D007               	goto	l3321
  4727  0023F8  0E00               	movlw	0
  4728  0023FA  6E41               	movwf	?_floor,c
  4729  0023FC  0E80               	movlw	128
  4730  0023FE  6E42               	movwf	?_floor+1,c
  4731  002400  0EBF               	movlw	191
  4732  002402  6E43               	movwf	?_floor+2,c
  4733  002404  0012               	return	
  4734  002406                     l3321:
  4735  002406  0E00               	movlw	0
  4736  002408  6E41               	movwf	?_floor,c
  4737  00240A  0E00               	movlw	0
  4738  00240C  6E42               	movwf	?_floor+1,c
  4739  00240E  0E00               	movlw	0
  4740  002410  6E43               	movwf	?_floor+2,c
  4741  002412  0012               	return	
  4742  002414                     l3325:
  4743  002414  5048               	movf	floor@expon+1,w,c
  4744  002416  E104               	bnz	u2950
  4745  002418  0E15               	movlw	21
  4746  00241A  5C47               	subwf	floor@expon,w,c
  4747  00241C  A0D8               	btfss	status,0,c
  4748  00241E  D007               	goto	l3329
  4749  002420                     u2950:
  4750  002420  C041  F041         	movff	floor@x,?_floor
  4751  002424  C042  F042         	movff	floor@x+1,?_floor+1
  4752  002428  C043  F043         	movff	floor@x+2,?_floor+2
  4753  00242C  0012               	return	
  4754  00242E                     l3329:
  4755  00242E  C041  F028         	movff	floor@x,___fttol@f1
  4756  002432  C042  F029         	movff	floor@x+1,___fttol@f1+1
  4757  002436  C043  F02A         	movff	floor@x+2,___fttol@f1+2
  4758  00243A  EC8E  F00F         	call	___fttol	;wreg free
  4759  00243E  C028  F037         	movff	?___fttol,___altoft@c
  4760  002442  C029  F038         	movff	?___fttol+1,___altoft@c+1
  4761  002446  C02A  F039         	movff	?___fttol+2,___altoft@c+2
  4762  00244A  C02B  F03A         	movff	?___fttol+3,___altoft@c+3
  4763  00244E  EC32  F015         	call	___altoft	;wreg free
  4764  002452  C037  F044         	movff	?___altoft,floor@i
  4765  002456  C038  F045         	movff	?___altoft+1,floor@i+1
  4766  00245A  C039  F046         	movff	?___altoft+2,floor@i+2
  4767  00245E  C041  F001         	movff	floor@x,___ftge@ff1
  4768  002462  C042  F002         	movff	floor@x+1,___ftge@ff1+1
  4769  002466  C043  F003         	movff	floor@x+2,___ftge@ff1+2
  4770  00246A  C044  F004         	movff	floor@i,___ftge@ff2
  4771  00246E  C045  F005         	movff	floor@i+1,___ftge@ff2+1
  4772  002472  C046  F006         	movff	floor@i+2,___ftge@ff2+2
  4773  002476  EC92  F013         	call	___ftge	;wreg free
  4774  00247A  B0D8               	btfsc	status,0,c
  4775  00247C  D015               	goto	l1387
  4776  00247E  C044  F01C         	movff	floor@i,___ftadd@f1
  4777  002482  C045  F01D         	movff	floor@i+1,___ftadd@f1+1
  4778  002486  C046  F01E         	movff	floor@i+2,___ftadd@f1+2
  4779  00248A  0E00               	movlw	0
  4780  00248C  6E1F               	movwf	___ftadd@f2,c
  4781  00248E  0E80               	movlw	128
  4782  002490  6E20               	movwf	___ftadd@f2+1,c
  4783  002492  0EBF               	movlw	191
  4784  002494  6E21               	movwf	___ftadd@f2+2,c
  4785  002496  EC64  F00B         	call	___ftadd	;wreg free
  4786  00249A  C01C  F041         	movff	?___ftadd,?_floor
  4787  00249E  C01D  F042         	movff	?___ftadd+1,?_floor+1
  4788  0024A2  C01E  F043         	movff	?___ftadd+2,?_floor+2
  4789  0024A6  0012               	return	
  4790  0024A8                     l1387:
  4791  0024A8  C044  F041         	movff	floor@i,?_floor
  4792  0024AC  C045  F042         	movff	floor@i+1,?_floor+1
  4793  0024B0  C046  F043         	movff	floor@i+2,?_floor+2
  4794  0024B4  0012               	return		;funcret
  4795  0024B6                     __end_of_floor:
  4796                           	opt stack 0
  4797                           tblptru	equ	0xFF8
  4798                           tblptrh	equ	0xFF7
  4799                           tblptrl	equ	0xFF6
  4800                           tablat	equ	0xFF5
  4801                           prodh	equ	0xFF4
  4802                           prodl	equ	0xFF3
  4803                           indf0	equ	0xFEF
  4804                           postinc0	equ	0xFEE
  4805                           fsr0h	equ	0xFEA
  4806                           fsr0l	equ	0xFE9
  4807                           wreg	equ	0xFE8
  4808                           postdec1	equ	0xFE5
  4809                           fsr1l	equ	0xFE1
  4810                           indf2	equ	0xFDF
  4811                           postinc2	equ	0xFDE
  4812                           postdec2	equ	0xFDD
  4813                           fsr2h	equ	0xFDA
  4814                           fsr2l	equ	0xFD9
  4815                           status	equ	0xFD8
  4816                           
  4817 ;; *************** function _frexp *****************
  4818 ;; Defined at:
  4819 ;;		line 254 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\frexp.c"
  4820 ;; Parameters:    Size  Location     Type
  4821 ;;  value           3    0[COMRAM] int 
  4822 ;;  eptr            2    3[COMRAM] PTR int 
  4823 ;;		 -> log@exponent(2), floor@expon(2), 
  4824 ;; Auto vars:     Size  Location     Type
  4825 ;;		None
  4826 ;; Return value:  Size  Location     Type
  4827 ;;                  3    0[COMRAM] PTR int 
  4828 ;; Registers used:
  4829 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4830 ;; Tracked objects:
  4831 ;;		On entry : 0/0
  4832 ;;		On exit  : 0/0
  4833 ;;		Unchanged: 0/0
  4834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4835 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4837 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4838 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4839 ;;Total ram usage:        7 bytes
  4840 ;; Hardware stack levels used:    1
  4841 ;; This function calls:
  4842 ;;		Nothing
  4843 ;; This function is called by:
  4844 ;;		_floor
  4845 ;;		_log
  4846 ;; This function uses a non-reentrant model
  4847 ;;
  4848                           
  4849                           	psect	text22
  4850  002850                     __ptext22:
  4851                           	opt stack 0
  4852  002850                     _frexp:
  4853                           	opt stack 26
  4854                           
  4855                           ;incstack = 0
  4856  002850  5001               	movf	frexp@value,w,c
  4857  002852  1002               	iorwf	frexp@value+1,w,c
  4858  002854  1003               	iorwf	frexp@value+2,w,c
  4859  002856  A4D8               	btfss	status,2,c
  4860  002858  D00F               	goto	l3165
  4861  00285A  C004  FFD9         	movff	frexp@eptr,fsr2l
  4862  00285E  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  4863  002862  0E00               	movlw	0
  4864  002864  6EDE               	movwf	postinc2,c
  4865  002866  0E00               	movlw	0
  4866  002868  6EDD               	movwf	postdec2,c
  4867  00286A  0E00               	movlw	0
  4868  00286C  6E01               	movwf	?_frexp,c
  4869  00286E  0E00               	movlw	0
  4870  002870  6E02               	movwf	?_frexp+1,c
  4871  002872  0E00               	movlw	0
  4872  002874  6E03               	movwf	?_frexp+2,c
  4873  002876  0012               	return	
  4874  002878                     l3165:
  4875  002878  5003               	movf	frexp@value+2,w,c
  4876  00287A  0B7F               	andlw	127
  4877  00287C  6E06               	movwf	??_frexp& (0+255),c
  4878  00287E  6A07               	clrf	(??_frexp+1)& (0+255),c
  4879  002880  90D8               	bcf	status,0,c
  4880  002882  3606               	rlcf	??_frexp,f,c
  4881  002884  3607               	rlcf	??_frexp+1,f,c
  4882  002886  C004  FFD9         	movff	frexp@eptr,fsr2l
  4883  00288A  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  4884  00288E  C006  FFDE         	movff	??_frexp,postinc2
  4885  002892  C007  FFDD         	movff	??_frexp+1,postdec2
  4886  002896  AE02               	btfss	frexp@value+1,7,c
  4887  002898  D003               	goto	u2760
  4888  00289A  6A06               	clrf	??_frexp& (0+255),c
  4889  00289C  2A06               	incf	??_frexp& (0+255),f,c
  4890  00289E  D001               	goto	u2768
  4891  0028A0                     u2760:
  4892  0028A0  6A06               	clrf	??_frexp& (0+255),c
  4893  0028A2                     u2768:
  4894  0028A2  5006               	movf	??_frexp,w,c
  4895  0028A4  C004  FFD9         	movff	frexp@eptr,fsr2l
  4896  0028A8  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  4897  0028AC  12DE               	iorwf	postinc2,f,c
  4898  0028AE  0E00               	movlw	0
  4899  0028B0  12DD               	iorwf	postdec2,f,c
  4900  0028B2  C004  FFD9         	movff	frexp@eptr,fsr2l
  4901  0028B6  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  4902  0028BA  0E82               	movlw	130
  4903  0028BC  26DE               	addwf	postinc2,f,c
  4904  0028BE  0EFF               	movlw	255
  4905  0028C0  22DD               	addwfc	postdec2,f,c
  4906  0028C2  8003               	bsf	frexp@value+2,0,c
  4907  0028C4  8203               	bsf	frexp@value+2,1,c
  4908  0028C6  8403               	bsf	frexp@value+2,2,c
  4909  0028C8  8603               	bsf	frexp@value+2,3,c
  4910  0028CA  8803               	bsf	frexp@value+2,4,c
  4911  0028CC  8A03               	bsf	frexp@value+2,5,c
  4912  0028CE  9C03               	bcf	frexp@value+2,6,c
  4913  0028D0  9E02               	bcf	frexp@value+1,7,c
  4914  0028D2  C001  F001         	movff	frexp@value,?_frexp
  4915  0028D6  C002  F002         	movff	frexp@value+1,?_frexp+1
  4916  0028DA  C003  F003         	movff	frexp@value+2,?_frexp+2
  4917  0028DE  0012               	return	
  4918  0028E0  0012               	return		;funcret
  4919  0028E2                     __end_of_frexp:
  4920                           	opt stack 0
  4921                           tblptru	equ	0xFF8
  4922                           tblptrh	equ	0xFF7
  4923                           tblptrl	equ	0xFF6
  4924                           tablat	equ	0xFF5
  4925                           prodh	equ	0xFF4
  4926                           prodl	equ	0xFF3
  4927                           indf0	equ	0xFEF
  4928                           postinc0	equ	0xFEE
  4929                           fsr0h	equ	0xFEA
  4930                           fsr0l	equ	0xFE9
  4931                           wreg	equ	0xFE8
  4932                           postdec1	equ	0xFE5
  4933                           fsr1l	equ	0xFE1
  4934                           indf2	equ	0xFDF
  4935                           postinc2	equ	0xFDE
  4936                           postdec2	equ	0xFDD
  4937                           fsr2h	equ	0xFDA
  4938                           fsr2l	equ	0xFD9
  4939                           status	equ	0xFD8
  4940                           
  4941 ;; *************** function ___fttol *****************
  4942 ;; Defined at:
  4943 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\fttol.c"
  4944 ;; Parameters:    Size  Location     Type
  4945 ;;  f1              3   39[COMRAM] float 
  4946 ;; Auto vars:     Size  Location     Type
  4947 ;;  lval            4   49[COMRAM] unsigned long 
  4948 ;;  exp1            1   53[COMRAM] unsigned char 
  4949 ;;  sign1           1   48[COMRAM] unsigned char 
  4950 ;; Return value:  Size  Location     Type
  4951 ;;                  4   39[COMRAM] long 
  4952 ;; Registers used:
  4953 ;;		wreg, status,2, status,0
  4954 ;; Tracked objects:
  4955 ;;		On entry : 0/0
  4956 ;;		On exit  : 0/0
  4957 ;;		Unchanged: 0/0
  4958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4959 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4960 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4961 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4962 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4963 ;;Total ram usage:       15 bytes
  4964 ;; Hardware stack levels used:    1
  4965 ;; This function calls:
  4966 ;;		Nothing
  4967 ;; This function is called by:
  4968 ;;		_obtain_pass
  4969 ;;		_pow
  4970 ;;		_exp
  4971 ;;		_floor
  4972 ;; This function uses a non-reentrant model
  4973 ;;
  4974                           
  4975                           	psect	text23
  4976  001F1C                     __ptext23:
  4977                           	opt stack 0
  4978  001F1C                     ___fttol:
  4979                           	opt stack 25
  4980                           
  4981                           ;incstack = 0
  4982  001F1C  C02A  F02C         	movff	___fttol@f1+2,??___fttol
  4983  001F20  6A2D               	clrf	(??___fttol+1)& (0+255),c
  4984  001F22  6A2E               	clrf	(??___fttol+2)& (0+255),c
  4985  001F24  3429               	rlcf	___fttol@f1+1,w,c
  4986  001F26  362C               	rlcf	??___fttol& (0+255),f,c
  4987  001F28  E301               	bnc	u2671
  4988  001F2A  802D               	bsf	(??___fttol+1)& (0+255),0,c
  4989  001F2C                     u2671:
  4990  001F2C  502C               	movf	??___fttol,w,c
  4991  001F2E  6E36               	movwf	___fttol@exp1,c
  4992  001F30  5036               	movf	___fttol@exp1,w,c
  4993  001F32  A4D8               	btfss	status,2,c
  4994  001F34  D009               	goto	l3117
  4995  001F36  0E00               	movlw	0
  4996  001F38  6E28               	movwf	?___fttol,c
  4997  001F3A  0E00               	movlw	0
  4998  001F3C  6E29               	movwf	?___fttol+1,c
  4999  001F3E  0E00               	movlw	0
  5000  001F40  6E2A               	movwf	?___fttol+2,c
  5001  001F42  0E00               	movlw	0
  5002  001F44  6E2B               	movwf	?___fttol+3,c
  5003  001F46  0012               	return	
  5004  001F48                     l3117:
  5005  001F48  0E17               	movlw	23
  5006  001F4A  6E2C               	movwf	??___fttol& (0+255),c
  5007  001F4C  C028  F02D         	movff	___fttol@f1,??___fttol+1
  5008  001F50  C029  F02E         	movff	___fttol@f1+1,??___fttol+2
  5009  001F54  C02A  F02F         	movff	___fttol@f1+2,??___fttol+3
  5010  001F58  282C               	incf	??___fttol,w,c
  5011  001F5A  6E30               	movwf	(??___fttol+4)& (0+255),c
  5012  001F5C  D004               	goto	u2690
  5013  001F5E                     u2695:
  5014  001F5E  90D8               	bcf	status,0,c
  5015  001F60  322F               	rrcf	??___fttol+3,f,c
  5016  001F62  322E               	rrcf	??___fttol+2,f,c
  5017  001F64  322D               	rrcf	??___fttol+1,f,c
  5018  001F66                     u2690:
  5019  001F66  2E30               	decfsz	(??___fttol+4)& (0+255),f,c
  5020  001F68  D7FA               	goto	u2695
  5021  001F6A  502D               	movf	??___fttol+1,w,c
  5022  001F6C  6E31               	movwf	___fttol@sign1,c
  5023  001F6E  8E29               	bsf	___fttol@f1+1,7,c
  5024  001F70  0EFF               	movlw	255
  5025  001F72  1628               	andwf	___fttol@f1,f,c
  5026  001F74  0EFF               	movlw	255
  5027  001F76  1629               	andwf	___fttol@f1+1,f,c
  5028  001F78  0E00               	movlw	0
  5029  001F7A  162A               	andwf	___fttol@f1+2,f,c
  5030  001F7C  5028               	movf	___fttol@f1,w,c
  5031  001F7E  6E32               	movwf	___fttol@lval,c
  5032  001F80  5029               	movf	___fttol@f1+1,w,c
  5033  001F82  6E33               	movwf	___fttol@lval+1,c
  5034  001F84  502A               	movf	___fttol@f1+2,w,c
  5035  001F86  6E34               	movwf	___fttol@lval+2,c
  5036  001F88  6A35               	clrf	___fttol@lval+3,c
  5037  001F8A  0E8E               	movlw	142
  5038  001F8C  5E36               	subwf	___fttol@exp1,f,c
  5039  001F8E  AE36               	btfss	___fttol@exp1,7,c
  5040  001F90  D017               	goto	l3139
  5041  001F92  5036               	movf	___fttol@exp1,w,c
  5042  001F94  0A80               	xorlw	128
  5043  001F96  0F8F               	addlw	143
  5044  001F98  B0D8               	btfsc	status,0,c
  5045  001F9A  D00A               	goto	l3135
  5046  001F9C  0E00               	movlw	0
  5047  001F9E  6E28               	movwf	?___fttol,c
  5048  001FA0  0E00               	movlw	0
  5049  001FA2  6E29               	movwf	?___fttol+1,c
  5050  001FA4  0E00               	movlw	0
  5051  001FA6  6E2A               	movwf	?___fttol+2,c
  5052  001FA8  0E00               	movlw	0
  5053  001FAA  6E2B               	movwf	?___fttol+3,c
  5054  001FAC  0012               	return	
  5055  001FAE  D000               	goto	l3135
  5056  001FB0                     l3135:
  5057  001FB0  90D8               	bcf	status,0,c
  5058  001FB2  3235               	rrcf	___fttol@lval+3,f,c
  5059  001FB4  3234               	rrcf	___fttol@lval+2,f,c
  5060  001FB6  3233               	rrcf	___fttol@lval+1,f,c
  5061  001FB8  3232               	rrcf	___fttol@lval,f,c
  5062  001FBA  3E36               	incfsz	___fttol@exp1,f,c
  5063  001FBC  D7F9               	goto	l3135
  5064  001FBE  D019               	goto	l3149
  5065  001FC0                     l3139:
  5066  001FC0  0E17               	movlw	23
  5067  001FC2  6436               	cpfsgt	___fttol@exp1,c
  5068  001FC4  D011               	goto	l3147
  5069  001FC6  0E00               	movlw	0
  5070  001FC8  6E28               	movwf	?___fttol,c
  5071  001FCA  0E00               	movlw	0
  5072  001FCC  6E29               	movwf	?___fttol+1,c
  5073  001FCE  0E00               	movlw	0
  5074  001FD0  6E2A               	movwf	?___fttol+2,c
  5075  001FD2  0E00               	movlw	0
  5076  001FD4  6E2B               	movwf	?___fttol+3,c
  5077  001FD6  0012               	return	
  5078  001FD8  D007               	goto	l3147
  5079  001FDA                     l3145:
  5080  001FDA  90D8               	bcf	status,0,c
  5081  001FDC  3632               	rlcf	___fttol@lval,f,c
  5082  001FDE  3633               	rlcf	___fttol@lval+1,f,c
  5083  001FE0  3634               	rlcf	___fttol@lval+2,f,c
  5084  001FE2  3635               	rlcf	___fttol@lval+3,f,c
  5085  001FE4  0636               	decf	___fttol@exp1,f,c
  5086  001FE6  D000               	goto	l3147
  5087  001FE8                     l3147:
  5088  001FE8  5036               	movf	___fttol@exp1,w,c
  5089  001FEA  B4D8               	btfsc	status,2,c
  5090  001FEC  D002               	goto	l3149
  5091  001FEE  D7F5               	goto	l3145
  5092  001FF0  D000               	goto	l3149
  5093  001FF2                     l3149:
  5094  001FF2  5031               	movf	___fttol@sign1,w,c
  5095  001FF4  B4D8               	btfsc	status,2,c
  5096  001FF6  D009               	goto	l3153
  5097  001FF8  1E35               	comf	___fttol@lval+3,f,c
  5098  001FFA  1E34               	comf	___fttol@lval+2,f,c
  5099  001FFC  1E33               	comf	___fttol@lval+1,f,c
  5100  001FFE  6C32               	negf	___fttol@lval,c
  5101  002000  0E00               	movlw	0
  5102  002002  2233               	addwfc	___fttol@lval+1,f,c
  5103  002004  2234               	addwfc	___fttol@lval+2,f,c
  5104  002006  2235               	addwfc	___fttol@lval+3,f,c
  5105  002008  D000               	goto	l3153
  5106  00200A                     l3153:
  5107  00200A  C032  F028         	movff	___fttol@lval,?___fttol
  5108  00200E  C033  F029         	movff	___fttol@lval+1,?___fttol+1
  5109  002012  C034  F02A         	movff	___fttol@lval+2,?___fttol+2
  5110  002016  C035  F02B         	movff	___fttol@lval+3,?___fttol+3
  5111  00201A  0012               	return	
  5112  00201C  0012               	return		;funcret
  5113  00201E                     __end_of___fttol:
  5114                           	opt stack 0
  5115                           tblptru	equ	0xFF8
  5116                           tblptrh	equ	0xFF7
  5117                           tblptrl	equ	0xFF6
  5118                           tablat	equ	0xFF5
  5119                           prodh	equ	0xFF4
  5120                           prodl	equ	0xFF3
  5121                           indf0	equ	0xFEF
  5122                           postinc0	equ	0xFEE
  5123                           fsr0h	equ	0xFEA
  5124                           fsr0l	equ	0xFE9
  5125                           wreg	equ	0xFE8
  5126                           postdec1	equ	0xFE5
  5127                           fsr1l	equ	0xFE1
  5128                           indf2	equ	0xFDF
  5129                           postinc2	equ	0xFDE
  5130                           postdec2	equ	0xFDD
  5131                           fsr2h	equ	0xFDA
  5132                           fsr2l	equ	0xFD9
  5133                           status	equ	0xFD8
  5134                           
  5135 ;; *************** function ___ftge *****************
  5136 ;; Defined at:
  5137 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\ftge.c"
  5138 ;; Parameters:    Size  Location     Type
  5139 ;;  ff1             3    0[COMRAM] float 
  5140 ;;  ff2             3    3[COMRAM] float 
  5141 ;; Auto vars:     Size  Location     Type
  5142 ;;		None
  5143 ;; Return value:  Size  Location     Type
  5144 ;;		None               void
  5145 ;; Registers used:
  5146 ;;		wreg, status,2, status,0
  5147 ;; Tracked objects:
  5148 ;;		On entry : 0/0
  5149 ;;		On exit  : 0/0
  5150 ;;		Unchanged: 0/0
  5151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5152 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5154 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5155 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5156 ;;Total ram usage:        9 bytes
  5157 ;; Hardware stack levels used:    1
  5158 ;; This function calls:
  5159 ;;		Nothing
  5160 ;; This function is called by:
  5161 ;;		_pow
  5162 ;;		_exp
  5163 ;;		_floor
  5164 ;; This function uses a non-reentrant model
  5165 ;;
  5166                           
  5167                           	psect	text24
  5168  002724                     __ptext24:
  5169                           	opt stack 0
  5170  002724                     ___ftge:
  5171                           	opt stack 25
  5172                           
  5173                           ;incstack = 0
  5174  002724  AE03               	btfss	___ftge@ff1+2,7,c
  5175  002726  D017               	goto	l3097
  5176  002728  C001  F007         	movff	___ftge@ff1,??___ftge
  5177  00272C  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  5178  002730  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  5179  002734  1E07               	comf	??___ftge,f,c
  5180  002736  1E08               	comf	??___ftge+1,f,c
  5181  002738  1E09               	comf	??___ftge+2,f,c
  5182  00273A  2A07               	incf	??___ftge,f,c
  5183  00273C  0E00               	movlw	0
  5184  00273E  2208               	addwfc	??___ftge+1,f,c
  5185  002740  2209               	addwfc	??___ftge+2,f,c
  5186  002742  0E00               	movlw	0
  5187  002744  2407               	addwf	??___ftge,w,c
  5188  002746  6E01               	movwf	___ftge@ff1,c
  5189  002748  0E00               	movlw	0
  5190  00274A  2008               	addwfc	??___ftge+1,w,c
  5191  00274C  6E02               	movwf	___ftge@ff1+1,c
  5192  00274E  0E80               	movlw	128
  5193  002750  2009               	addwfc	??___ftge+2,w,c
  5194  002752  6E03               	movwf	___ftge@ff1+2,c
  5195  002754  D000               	goto	l3097
  5196  002756                     l3097:
  5197  002756  AE06               	btfss	___ftge@ff2+2,7,c
  5198  002758  D017               	goto	l3101
  5199  00275A  C004  F007         	movff	___ftge@ff2,??___ftge
  5200  00275E  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  5201  002762  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  5202  002766  1E07               	comf	??___ftge,f,c
  5203  002768  1E08               	comf	??___ftge+1,f,c
  5204  00276A  1E09               	comf	??___ftge+2,f,c
  5205  00276C  2A07               	incf	??___ftge,f,c
  5206  00276E  0E00               	movlw	0
  5207  002770  2208               	addwfc	??___ftge+1,f,c
  5208  002772  2209               	addwfc	??___ftge+2,f,c
  5209  002774  0E00               	movlw	0
  5210  002776  2407               	addwf	??___ftge,w,c
  5211  002778  6E04               	movwf	___ftge@ff2,c
  5212  00277A  0E00               	movlw	0
  5213  00277C  2008               	addwfc	??___ftge+1,w,c
  5214  00277E  6E05               	movwf	___ftge@ff2+1,c
  5215  002780  0E80               	movlw	128
  5216  002782  2009               	addwfc	??___ftge+2,w,c
  5217  002784  6E06               	movwf	___ftge@ff2+2,c
  5218  002786  D000               	goto	l3101
  5219  002788                     l3101:
  5220  002788  0E00               	movlw	0
  5221  00278A  1A01               	xorwf	___ftge@ff1,f,c
  5222  00278C  0E00               	movlw	0
  5223  00278E  1A02               	xorwf	___ftge@ff1+1,f,c
  5224  002790  0E80               	movlw	128
  5225  002792  1A03               	xorwf	___ftge@ff1+2,f,c
  5226  002794  0E00               	movlw	0
  5227  002796  1A04               	xorwf	___ftge@ff2,f,c
  5228  002798  0E00               	movlw	0
  5229  00279A  1A05               	xorwf	___ftge@ff2+1,f,c
  5230  00279C  0E80               	movlw	128
  5231  00279E  1A06               	xorwf	___ftge@ff2+2,f,c
  5232  0027A0  5004               	movf	___ftge@ff2,w,c
  5233  0027A2  5C01               	subwf	___ftge@ff1,w,c
  5234  0027A4  5005               	movf	___ftge@ff2+1,w,c
  5235  0027A6  5802               	subwfb	___ftge@ff1+1,w,c
  5236  0027A8  5006               	movf	___ftge@ff2+2,w,c
  5237  0027AA  5803               	subwfb	___ftge@ff1+2,w,c
  5238  0027AC  B0D8               	btfsc	status,0,c
  5239  0027AE  D002               	goto	l3107
  5240  0027B0  90D8               	bcf	status,0,c
  5241  0027B2  0012               	return	
  5242  0027B4                     l3107:
  5243  0027B4  80D8               	bsf	status,0,c
  5244  0027B6  0012               	return	
  5245  0027B8  0012               	return		;funcret
  5246  0027BA                     __end_of___ftge:
  5247                           	opt stack 0
  5248                           tblptru	equ	0xFF8
  5249                           tblptrh	equ	0xFF7
  5250                           tblptrl	equ	0xFF6
  5251                           tablat	equ	0xFF5
  5252                           prodh	equ	0xFF4
  5253                           prodl	equ	0xFF3
  5254                           indf0	equ	0xFEF
  5255                           postinc0	equ	0xFEE
  5256                           fsr0h	equ	0xFEA
  5257                           fsr0l	equ	0xFE9
  5258                           wreg	equ	0xFE8
  5259                           postdec1	equ	0xFE5
  5260                           fsr1l	equ	0xFE1
  5261                           indf2	equ	0xFDF
  5262                           postinc2	equ	0xFDE
  5263                           postdec2	equ	0xFDD
  5264                           fsr2h	equ	0xFDA
  5265                           fsr2l	equ	0xFD9
  5266                           status	equ	0xFD8
  5267                           
  5268 ;; *************** function ___altoft *****************
  5269 ;; Defined at:
  5270 ;;		line 42 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\altoft.c"
  5271 ;; Parameters:    Size  Location     Type
  5272 ;;  c               4   54[COMRAM] long 
  5273 ;; Auto vars:     Size  Location     Type
  5274 ;;  sign            1   63[COMRAM] unsigned char 
  5275 ;;  exp             1   62[COMRAM] unsigned char 
  5276 ;; Return value:  Size  Location     Type
  5277 ;;                  3   54[COMRAM] float 
  5278 ;; Registers used:
  5279 ;;		wreg, status,2, status,0, cstack
  5280 ;; Tracked objects:
  5281 ;;		On entry : 0/0
  5282 ;;		On exit  : 0/0
  5283 ;;		Unchanged: 0/0
  5284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5285 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5286 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5287 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5288 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5289 ;;Total ram usage:       10 bytes
  5290 ;; Hardware stack levels used:    1
  5291 ;; Hardware stack levels required when called:    1
  5292 ;; This function calls:
  5293 ;;		___ftpack
  5294 ;; This function is called by:
  5295 ;;		_floor
  5296 ;; This function uses a non-reentrant model
  5297 ;;
  5298                           
  5299                           	psect	text25
  5300  002A64                     __ptext25:
  5301                           	opt stack 0
  5302  002A64                     ___altoft:
  5303                           	opt stack 24
  5304                           
  5305                           ;incstack = 0
  5306  002A64  0E00               	movlw	0
  5307  002A66  6E40               	movwf	___altoft@sign,c
  5308  002A68  0E8E               	movlw	142
  5309  002A6A  6E3F               	movwf	___altoft@exp,c
  5310  002A6C  AE3A               	btfss	___altoft@c+3,7,c
  5311  002A6E  D012               	goto	l2969
  5312  002A70  1E3A               	comf	___altoft@c+3,f,c
  5313  002A72  1E39               	comf	___altoft@c+2,f,c
  5314  002A74  1E38               	comf	___altoft@c+1,f,c
  5315  002A76  6C37               	negf	___altoft@c,c
  5316  002A78  0E00               	movlw	0
  5317  002A7A  2238               	addwfc	___altoft@c+1,f,c
  5318  002A7C  2239               	addwfc	___altoft@c+2,f,c
  5319  002A7E  223A               	addwfc	___altoft@c+3,f,c
  5320  002A80  0E01               	movlw	1
  5321  002A82  6E40               	movwf	___altoft@sign,c
  5322  002A84  D007               	goto	l2969
  5323  002A86                     l2967:
  5324  002A86  90D8               	bcf	status,0,c
  5325  002A88  323A               	rrcf	___altoft@c+3,f,c
  5326  002A8A  3239               	rrcf	___altoft@c+2,f,c
  5327  002A8C  3238               	rrcf	___altoft@c+1,f,c
  5328  002A8E  3237               	rrcf	___altoft@c,f,c
  5329  002A90  2A3F               	incf	___altoft@exp,f,c
  5330  002A92  D000               	goto	l2969
  5331  002A94                     l2969:
  5332  002A94  0E00               	movlw	0
  5333  002A96  1437               	andwf	___altoft@c,w,c
  5334  002A98  6E3B               	movwf	??___altoft& (0+255),c
  5335  002A9A  0E00               	movlw	0
  5336  002A9C  1438               	andwf	___altoft@c+1,w,c
  5337  002A9E  6E3C               	movwf	(??___altoft+1)& (0+255),c
  5338  002AA0  0E00               	movlw	0
  5339  002AA2  1439               	andwf	___altoft@c+2,w,c
  5340  002AA4  6E3D               	movwf	(??___altoft+2)& (0+255),c
  5341  002AA6  0EFF               	movlw	255
  5342  002AA8  143A               	andwf	___altoft@c+3,w,c
  5343  002AAA  6E3E               	movwf	(??___altoft+3)& (0+255),c
  5344  002AAC  503B               	movf	??___altoft,w,c
  5345  002AAE  103C               	iorwf	??___altoft+1,w,c
  5346  002AB0  103D               	iorwf	??___altoft+2,w,c
  5347  002AB2  103E               	iorwf	??___altoft+3,w,c
  5348  002AB4  A4D8               	btfss	status,2,c
  5349  002AB6  D7E7               	goto	l2967
  5350  002AB8  C037  F001         	movff	___altoft@c,___ftpack@arg
  5351  002ABC  C038  F002         	movff	___altoft@c+1,___ftpack@arg+1
  5352  002AC0  C039  F003         	movff	___altoft@c+2,___ftpack@arg+2
  5353  002AC4  C03F  F004         	movff	___altoft@exp,___ftpack@exp
  5354  002AC8  C040  F005         	movff	___altoft@sign,___ftpack@sign
  5355  002ACC  EC2F  F013         	call	___ftpack	;wreg free
  5356  002AD0  C001  F037         	movff	?___ftpack,?___altoft
  5357  002AD4  C002  F038         	movff	?___ftpack+1,?___altoft+1
  5358  002AD8  C003  F039         	movff	?___ftpack+2,?___altoft+2
  5359  002ADC  0012               	return	
  5360  002ADE  0012               	return		;funcret
  5361  002AE0                     __end_of___altoft:
  5362                           	opt stack 0
  5363                           tblptru	equ	0xFF8
  5364                           tblptrh	equ	0xFF7
  5365                           tblptrl	equ	0xFF6
  5366                           tablat	equ	0xFF5
  5367                           prodh	equ	0xFF4
  5368                           prodl	equ	0xFF3
  5369                           indf0	equ	0xFEF
  5370                           postinc0	equ	0xFEE
  5371                           fsr0h	equ	0xFEA
  5372                           fsr0l	equ	0xFE9
  5373                           wreg	equ	0xFE8
  5374                           postdec1	equ	0xFE5
  5375                           fsr1l	equ	0xFE1
  5376                           indf2	equ	0xFDF
  5377                           postinc2	equ	0xFDE
  5378                           postdec2	equ	0xFDD
  5379                           fsr2h	equ	0xFDA
  5380                           fsr2l	equ	0xFD9
  5381                           status	equ	0xFD8
  5382                           
  5383 ;; *************** function _eval_poly *****************
  5384 ;; Defined at:
  5385 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\evalpoly.c"
  5386 ;; Parameters:    Size  Location     Type
  5387 ;;  x               3   39[COMRAM] float 
  5388 ;;  d               2   42[COMRAM] PTR const 
  5389 ;;		 -> log@coeff(27), exp@coeff(30), 
  5390 ;;  n               2   44[COMRAM] int 
  5391 ;; Auto vars:     Size  Location     Type
  5392 ;;  res             3   48[COMRAM] int 
  5393 ;; Return value:  Size  Location     Type
  5394 ;;                  3   39[COMRAM] int 
  5395 ;; Registers used:
  5396 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5397 ;; Tracked objects:
  5398 ;;		On entry : 0/0
  5399 ;;		On exit  : 0/0
  5400 ;;		Unchanged: 0/0
  5401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5402 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5403 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5404 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5405 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5406 ;;Total ram usage:       12 bytes
  5407 ;; Hardware stack levels used:    1
  5408 ;; Hardware stack levels required when called:    2
  5409 ;; This function calls:
  5410 ;;		___ftadd
  5411 ;;		___ftmul
  5412 ;;		___wmul
  5413 ;; This function is called by:
  5414 ;;		_exp
  5415 ;;		_log
  5416 ;; This function uses a non-reentrant model
  5417 ;;
  5418                           
  5419                           	psect	text26
  5420  00258A                     __ptext26:
  5421                           	opt stack 0
  5422  00258A                     _eval_poly:
  5423                           	opt stack 24
  5424                           
  5425                           ;incstack = 0
  5426  00258A  C02D  F001         	movff	eval_poly@n,___wmul@multiplier
  5427  00258E  C02E  F002         	movff	eval_poly@n+1,___wmul@multiplier+1
  5428  002592  0E00               	movlw	0
  5429  002594  6E04               	movwf	___wmul@multiplicand+1,c
  5430  002596  0E03               	movlw	3
  5431  002598  6E03               	movwf	___wmul@multiplicand,c
  5432  00259A  ECC9  F017         	call	___wmul	;wreg free
  5433  00259E  C02B  F02F         	movff	eval_poly@d,??_eval_poly
  5434  0025A2  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
  5435  0025A6  5001               	movf	?___wmul,w,c
  5436  0025A8  262F               	addwf	??_eval_poly,f,c
  5437  0025AA  5002               	movf	?___wmul+1,w,c
  5438  0025AC  2230               	addwfc	??_eval_poly+1,f,c
  5439  0025AE  C02F  FFF6         	movff	??_eval_poly,tblptrl
  5440  0025B2  C030  FFF7         	movff	??_eval_poly+1,tblptrh
  5441  0025B6                     	if	0	;tblptru may be non-zero
  5442  0025B6                     	endif
  5443  0025B6                     	if	0	;tblptru may be non-zero
  5444  0025B6                     	endif
  5445  0025B6  0009               	tblrd		*+
  5446  0025B8  CFF5 F031          	movff	tablat,eval_poly@res
  5447  0025BC  0009               	tblrd		*+
  5448  0025BE  CFF5 F032          	movff	tablat,eval_poly@res+1
  5449  0025C2  000A               	tblrd		*-
  5450  0025C4  CFF5 F033          	movff	tablat,eval_poly@res+2
  5451  0025C8  D03F               	goto	l3339
  5452  0025CA                     l3337:
  5453  0025CA  C031  F010         	movff	eval_poly@res,___ftmul@f2
  5454  0025CE  C032  F011         	movff	eval_poly@res+1,___ftmul@f2+1
  5455  0025D2  C033  F012         	movff	eval_poly@res+2,___ftmul@f2+2
  5456  0025D6  C028  F00D         	movff	eval_poly@x,___ftmul@f1
  5457  0025DA  C029  F00E         	movff	eval_poly@x+1,___ftmul@f1+1
  5458  0025DE  C02A  F00F         	movff	eval_poly@x+2,___ftmul@f1+2
  5459  0025E2  EC0F  F010         	call	___ftmul	;wreg free
  5460  0025E6  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  5461  0025EA  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  5462  0025EE  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  5463  0025F2  0E00               	movlw	0
  5464  0025F4  6E04               	movwf	___wmul@multiplicand+1,c
  5465  0025F6  0E03               	movlw	3
  5466  0025F8  6E03               	movwf	___wmul@multiplicand,c
  5467  0025FA  062D               	decf	eval_poly@n,f,c
  5468  0025FC  A0D8               	btfss	status,0,c
  5469  0025FE  062E               	decf	eval_poly@n+1,f,c
  5470  002600  C02D  F001         	movff	eval_poly@n,___wmul@multiplier
  5471  002604  C02E  F002         	movff	eval_poly@n+1,___wmul@multiplier+1
  5472  002608  ECC9  F017         	call	___wmul	;wreg free
  5473  00260C  C02B  F02F         	movff	eval_poly@d,??_eval_poly
  5474  002610  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
  5475  002614  5001               	movf	?___wmul,w,c
  5476  002616  262F               	addwf	??_eval_poly,f,c
  5477  002618  5002               	movf	?___wmul+1,w,c
  5478  00261A  2230               	addwfc	??_eval_poly+1,f,c
  5479  00261C  C02F  FFF6         	movff	??_eval_poly,tblptrl
  5480  002620  C030  FFF7         	movff	??_eval_poly+1,tblptrh
  5481  002624                     	if	0	;tblptru may be non-zero
  5482  002624                     	endif
  5483  002624                     	if	0	;tblptru may be non-zero
  5484  002624                     	endif
  5485  002624  0009               	tblrd		*+
  5486  002626  CFF5 F01F          	movff	tablat,___ftadd@f2
  5487  00262A  0009               	tblrd		*+
  5488  00262C  CFF5 F020          	movff	tablat,___ftadd@f2+1
  5489  002630  000A               	tblrd		*-
  5490  002632  CFF5 F021          	movff	tablat,___ftadd@f2+2
  5491  002636  EC64  F00B         	call	___ftadd	;wreg free
  5492  00263A  C01C  F031         	movff	?___ftadd,eval_poly@res
  5493  00263E  C01D  F032         	movff	?___ftadd+1,eval_poly@res+1
  5494  002642  C01E  F033         	movff	?___ftadd+2,eval_poly@res+2
  5495  002646  D000               	goto	l3339
  5496  002648                     l3339:
  5497  002648  502D               	movf	eval_poly@n,w,c
  5498  00264A  102E               	iorwf	eval_poly@n+1,w,c
  5499  00264C  A4D8               	btfss	status,2,c
  5500  00264E  D7BD               	goto	l3337
  5501  002650  C031  F028         	movff	eval_poly@res,?_eval_poly
  5502  002654  C032  F029         	movff	eval_poly@res+1,?_eval_poly+1
  5503  002658  C033  F02A         	movff	eval_poly@res+2,?_eval_poly+2
  5504  00265C  0012               	return		;funcret
  5505  00265E                     __end_of_eval_poly:
  5506                           	opt stack 0
  5507                           tblptru	equ	0xFF8
  5508                           tblptrh	equ	0xFF7
  5509                           tblptrl	equ	0xFF6
  5510                           tablat	equ	0xFF5
  5511                           prodh	equ	0xFF4
  5512                           prodl	equ	0xFF3
  5513                           indf0	equ	0xFEF
  5514                           postinc0	equ	0xFEE
  5515                           fsr0h	equ	0xFEA
  5516                           fsr0l	equ	0xFE9
  5517                           wreg	equ	0xFE8
  5518                           postdec1	equ	0xFE5
  5519                           fsr1l	equ	0xFE1
  5520                           indf2	equ	0xFDF
  5521                           postinc2	equ	0xFDE
  5522                           postdec2	equ	0xFDD
  5523                           fsr2h	equ	0xFDA
  5524                           fsr2l	equ	0xFD9
  5525                           status	equ	0xFD8
  5526                           
  5527 ;; *************** function ___wmul *****************
  5528 ;; Defined at:
  5529 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\Umul16.c"
  5530 ;; Parameters:    Size  Location     Type
  5531 ;;  multiplier      2    0[COMRAM] unsigned int 
  5532 ;;  multiplicand    2    2[COMRAM] unsigned int 
  5533 ;; Auto vars:     Size  Location     Type
  5534 ;;  product         2    4[COMRAM] unsigned int 
  5535 ;; Return value:  Size  Location     Type
  5536 ;;                  2    0[COMRAM] unsigned int 
  5537 ;; Registers used:
  5538 ;;		wreg, status,2, status,0, prodl, prodh
  5539 ;; Tracked objects:
  5540 ;;		On entry : 0/0
  5541 ;;		On exit  : 0/0
  5542 ;;		Unchanged: 0/0
  5543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5544 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5545 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5547 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5548 ;;Total ram usage:        6 bytes
  5549 ;; Hardware stack levels used:    1
  5550 ;; This function calls:
  5551 ;;		Nothing
  5552 ;; This function is called by:
  5553 ;;		_sprintf
  5554 ;;		_eval_poly
  5555 ;; This function uses a non-reentrant model
  5556 ;;
  5557                           
  5558                           	psect	text27
  5559  002F92                     __ptext27:
  5560                           	opt stack 0
  5561  002F92                     ___wmul:
  5562                           	opt stack 27
  5563                           
  5564                           ;incstack = 0
  5565  002F92  5001               	movf	___wmul@multiplier,w,c
  5566  002F94  0203               	mulwf	___wmul@multiplicand,c
  5567  002F96  CFF3 F005          	movff	prodl,___wmul@product
  5568  002F9A  CFF4 F006          	movff	prodh,___wmul@product+1
  5569  002F9E  5001               	movf	___wmul@multiplier,w,c
  5570  002FA0  0204               	mulwf	___wmul@multiplicand+1,c
  5571  002FA2  50F3               	movf	prodl,w,c
  5572  002FA4  2606               	addwf	___wmul@product+1,f,c
  5573  002FA6  5002               	movf	___wmul@multiplier+1,w,c
  5574  002FA8  0203               	mulwf	___wmul@multiplicand,c
  5575  002FAA  50F3               	movf	prodl,w,c
  5576  002FAC  2606               	addwf	___wmul@product+1,f,c
  5577  002FAE  C005  F001         	movff	___wmul@product,?___wmul
  5578  002FB2  C006  F002         	movff	___wmul@product+1,?___wmul+1
  5579  002FB6  0012               	return	
  5580  002FB8  0012               	return		;funcret
  5581  002FBA                     __end_of___wmul:
  5582                           	opt stack 0
  5583                           tblptru	equ	0xFF8
  5584                           tblptrh	equ	0xFF7
  5585                           tblptrl	equ	0xFF6
  5586                           tablat	equ	0xFF5
  5587                           prodh	equ	0xFF4
  5588                           prodl	equ	0xFF3
  5589                           indf0	equ	0xFEF
  5590                           postinc0	equ	0xFEE
  5591                           fsr0h	equ	0xFEA
  5592                           fsr0l	equ	0xFE9
  5593                           wreg	equ	0xFE8
  5594                           postdec1	equ	0xFE5
  5595                           fsr1l	equ	0xFE1
  5596                           indf2	equ	0xFDF
  5597                           postinc2	equ	0xFDE
  5598                           postdec2	equ	0xFDD
  5599                           fsr2h	equ	0xFDA
  5600                           fsr2l	equ	0xFD9
  5601                           status	equ	0xFD8
  5602                           
  5603 ;; *************** function ___ftmul *****************
  5604 ;; Defined at:
  5605 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\ftmul.c"
  5606 ;; Parameters:    Size  Location     Type
  5607 ;;  f1              3   12[COMRAM] float 
  5608 ;;  f2              3   15[COMRAM] float 
  5609 ;; Auto vars:     Size  Location     Type
  5610 ;;  f3_as_produc    3   22[COMRAM] unsigned um
  5611 ;;  sign            1   26[COMRAM] unsigned char 
  5612 ;;  cntr            1   25[COMRAM] unsigned char 
  5613 ;;  exp             1   21[COMRAM] unsigned char 
  5614 ;; Return value:  Size  Location     Type
  5615 ;;                  3   12[COMRAM] float 
  5616 ;; Registers used:
  5617 ;;		wreg, status,2, status,0, cstack
  5618 ;; Tracked objects:
  5619 ;;		On entry : 0/0
  5620 ;;		On exit  : 0/0
  5621 ;;		Unchanged: 0/0
  5622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5623 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5624 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5625 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5626 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5627 ;;Total ram usage:       15 bytes
  5628 ;; Hardware stack levels used:    1
  5629 ;; Hardware stack levels required when called:    1
  5630 ;; This function calls:
  5631 ;;		___ftpack
  5632 ;; This function is called by:
  5633 ;;		_obtain_pass
  5634 ;;		_pow
  5635 ;;		_exp
  5636 ;;		_log
  5637 ;;		_eval_poly
  5638 ;; This function uses a non-reentrant model
  5639 ;;
  5640                           
  5641                           	psect	text28
  5642  00201E                     __ptext28:
  5643                           	opt stack 0
  5644  00201E                     ___ftmul:
  5645                           	opt stack 24
  5646                           
  5647                           ;incstack = 0
  5648  00201E  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
  5649  002022  6A14               	clrf	(??___ftmul+1)& (0+255),c
  5650  002024  6A15               	clrf	(??___ftmul+2)& (0+255),c
  5651  002026  340E               	rlcf	___ftmul@f1+1,w,c
  5652  002028  3613               	rlcf	??___ftmul& (0+255),f,c
  5653  00202A  E301               	bnc	u2581
  5654  00202C  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  5655  00202E                     u2581:
  5656  00202E  5013               	movf	??___ftmul,w,c
  5657  002030  6E16               	movwf	___ftmul@exp,c
  5658  002032  5016               	movf	___ftmul@exp,w,c
  5659  002034  A4D8               	btfss	status,2,c
  5660  002036  D007               	goto	l3051
  5661  002038  0E00               	movlw	0
  5662  00203A  6E0D               	movwf	?___ftmul,c
  5663  00203C  0E00               	movlw	0
  5664  00203E  6E0E               	movwf	?___ftmul+1,c
  5665  002040  0E00               	movlw	0
  5666  002042  6E0F               	movwf	?___ftmul+2,c
  5667  002044  0012               	return	
  5668  002046                     l3051:
  5669  002046  C012  F013         	movff	___ftmul@f2+2,??___ftmul
  5670  00204A  6A14               	clrf	(??___ftmul+1)& (0+255),c
  5671  00204C  6A15               	clrf	(??___ftmul+2)& (0+255),c
  5672  00204E  3411               	rlcf	___ftmul@f2+1,w,c
  5673  002050  3613               	rlcf	??___ftmul& (0+255),f,c
  5674  002052  E301               	bnc	u2601
  5675  002054  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  5676  002056                     u2601:
  5677  002056  5013               	movf	??___ftmul,w,c
  5678  002058  6E1B               	movwf	___ftmul@sign,c
  5679  00205A  501B               	movf	___ftmul@sign,w,c
  5680  00205C  A4D8               	btfss	status,2,c
  5681  00205E  D007               	goto	l3057
  5682  002060  0E00               	movlw	0
  5683  002062  6E0D               	movwf	?___ftmul,c
  5684  002064  0E00               	movlw	0
  5685  002066  6E0E               	movwf	?___ftmul+1,c
  5686  002068  0E00               	movlw	0
  5687  00206A  6E0F               	movwf	?___ftmul+2,c
  5688  00206C  0012               	return	
  5689  00206E                     l3057:
  5690  00206E  501B               	movf	___ftmul@sign,w,c
  5691  002070  0F7B               	addlw	123
  5692  002072  2616               	addwf	___ftmul@exp,f,c
  5693  002074  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
  5694  002078  5012               	movf	___ftmul@f2+2,w,c
  5695  00207A  1A1B               	xorwf	___ftmul@sign,f,c
  5696  00207C  0E80               	movlw	128
  5697  00207E  161B               	andwf	___ftmul@sign,f,c
  5698  002080  8E0E               	bsf	___ftmul@f1+1,7,c
  5699  002082  8E11               	bsf	___ftmul@f2+1,7,c
  5700  002084  0EFF               	movlw	255
  5701  002086  1610               	andwf	___ftmul@f2,f,c
  5702  002088  0EFF               	movlw	255
  5703  00208A  1611               	andwf	___ftmul@f2+1,f,c
  5704  00208C  0E00               	movlw	0
  5705  00208E  1612               	andwf	___ftmul@f2+2,f,c
  5706  002090  0E00               	movlw	0
  5707  002092  6E17               	movwf	___ftmul@f3_as_product,c
  5708  002094  0E00               	movlw	0
  5709  002096  6E18               	movwf	___ftmul@f3_as_product+1,c
  5710  002098  0E00               	movlw	0
  5711  00209A  6E19               	movwf	___ftmul@f3_as_product+2,c
  5712  00209C  0E07               	movlw	7
  5713  00209E  6E1A               	movwf	___ftmul@cntr,c
  5714  0020A0  D000               	goto	l3071
  5715  0020A2                     l3071:
  5716  0020A2  A00D               	btfss	___ftmul@f1,0,c
  5717  0020A4  D007               	goto	l3075
  5718  0020A6  5010               	movf	___ftmul@f2,w,c
  5719  0020A8  2617               	addwf	___ftmul@f3_as_product,f,c
  5720  0020AA  5011               	movf	___ftmul@f2+1,w,c
  5721  0020AC  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  5722  0020AE  5012               	movf	___ftmul@f2+2,w,c
  5723  0020B0  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  5724  0020B2  D000               	goto	l3075
  5725  0020B4                     l3075:
  5726  0020B4  90D8               	bcf	status,0,c
  5727  0020B6  320F               	rrcf	___ftmul@f1+2,f,c
  5728  0020B8  320E               	rrcf	___ftmul@f1+1,f,c
  5729  0020BA  320D               	rrcf	___ftmul@f1,f,c
  5730  0020BC  90D8               	bcf	status,0,c
  5731  0020BE  3610               	rlcf	___ftmul@f2,f,c
  5732  0020C0  3611               	rlcf	___ftmul@f2+1,f,c
  5733  0020C2  3612               	rlcf	___ftmul@f2+2,f,c
  5734  0020C4  2E1A               	decfsz	___ftmul@cntr,f,c
  5735  0020C6  D7ED               	goto	l3071
  5736  0020C8  D000               	goto	l3079
  5737  0020CA                     l3079:
  5738  0020CA  0E09               	movlw	9
  5739  0020CC  6E1A               	movwf	___ftmul@cntr,c
  5740  0020CE  D000               	goto	l3081
  5741  0020D0                     l3081:
  5742  0020D0  A00D               	btfss	___ftmul@f1,0,c
  5743  0020D2  D007               	goto	l3085
  5744  0020D4  5010               	movf	___ftmul@f2,w,c
  5745  0020D6  2617               	addwf	___ftmul@f3_as_product,f,c
  5746  0020D8  5011               	movf	___ftmul@f2+1,w,c
  5747  0020DA  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  5748  0020DC  5012               	movf	___ftmul@f2+2,w,c
  5749  0020DE  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  5750  0020E0  D000               	goto	l3085
  5751  0020E2                     l3085:
  5752  0020E2  90D8               	bcf	status,0,c
  5753  0020E4  320F               	rrcf	___ftmul@f1+2,f,c
  5754  0020E6  320E               	rrcf	___ftmul@f1+1,f,c
  5755  0020E8  320D               	rrcf	___ftmul@f1,f,c
  5756  0020EA  90D8               	bcf	status,0,c
  5757  0020EC  3219               	rrcf	___ftmul@f3_as_product+2,f,c
  5758  0020EE  3218               	rrcf	___ftmul@f3_as_product+1,f,c
  5759  0020F0  3217               	rrcf	___ftmul@f3_as_product,f,c
  5760  0020F2  2E1A               	decfsz	___ftmul@cntr,f,c
  5761  0020F4  D7ED               	goto	l3081
  5762  0020F6  D000               	goto	l3089
  5763  0020F8                     l3089:
  5764  0020F8  C017  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  5765  0020FC  C018  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5766  002100  C019  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5767  002104  C016  F004         	movff	___ftmul@exp,___ftpack@exp
  5768  002108  C01B  F005         	movff	___ftmul@sign,___ftpack@sign
  5769  00210C  EC2F  F013         	call	___ftpack	;wreg free
  5770  002110  C001  F00D         	movff	?___ftpack,?___ftmul
  5771  002114  C002  F00E         	movff	?___ftpack+1,?___ftmul+1
  5772  002118  C003  F00F         	movff	?___ftpack+2,?___ftmul+2
  5773  00211C  0012               	return	
  5774  00211E  0012               	return		;funcret
  5775  002120                     __end_of___ftmul:
  5776                           	opt stack 0
  5777                           tblptru	equ	0xFF8
  5778                           tblptrh	equ	0xFF7
  5779                           tblptrl	equ	0xFF6
  5780                           tablat	equ	0xFF5
  5781                           prodh	equ	0xFF4
  5782                           prodl	equ	0xFF3
  5783                           indf0	equ	0xFEF
  5784                           postinc0	equ	0xFEE
  5785                           fsr0h	equ	0xFEA
  5786                           fsr0l	equ	0xFE9
  5787                           wreg	equ	0xFE8
  5788                           postdec1	equ	0xFE5
  5789                           fsr1l	equ	0xFE1
  5790                           indf2	equ	0xFDF
  5791                           postinc2	equ	0xFDE
  5792                           postdec2	equ	0xFDD
  5793                           fsr2h	equ	0xFDA
  5794                           fsr2l	equ	0xFD9
  5795                           status	equ	0xFD8
  5796                           
  5797 ;; *************** function ___ftsub *****************
  5798 ;; Defined at:
  5799 ;;		line 20 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\ftsub.c"
  5800 ;; Parameters:    Size  Location     Type
  5801 ;;  f1              3   39[COMRAM] float 
  5802 ;;  f2              3   42[COMRAM] float 
  5803 ;; Auto vars:     Size  Location     Type
  5804 ;;		None
  5805 ;; Return value:  Size  Location     Type
  5806 ;;                  3   39[COMRAM] float 
  5807 ;; Registers used:
  5808 ;;		wreg, status,2, status,0, cstack
  5809 ;; Tracked objects:
  5810 ;;		On entry : 0/0
  5811 ;;		On exit  : 0/0
  5812 ;;		Unchanged: 0/0
  5813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5814 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5817 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5818 ;;Total ram usage:        6 bytes
  5819 ;; Hardware stack levels used:    1
  5820 ;; Hardware stack levels required when called:    2
  5821 ;; This function calls:
  5822 ;;		___ftadd
  5823 ;; This function is called by:
  5824 ;;		_exp
  5825 ;; This function uses a non-reentrant model
  5826 ;;
  5827                           
  5828                           	psect	text29
  5829  002E4A                     __ptext29:
  5830                           	opt stack 0
  5831  002E4A                     ___ftsub:
  5832                           	opt stack 24
  5833                           
  5834                           ;incstack = 0
  5835  002E4A  502B               	movf	___ftsub@f2,w,c
  5836  002E4C  102C               	iorwf	___ftsub@f2+1,w,c
  5837  002E4E  102D               	iorwf	___ftsub@f2+2,w,c
  5838  002E50  B4D8               	btfsc	status,2,c
  5839  002E52  D007               	goto	l3253
  5840  002E54  0E00               	movlw	0
  5841  002E56  1A2B               	xorwf	___ftsub@f2,f,c
  5842  002E58  0E00               	movlw	0
  5843  002E5A  1A2C               	xorwf	___ftsub@f2+1,f,c
  5844  002E5C  0E80               	movlw	128
  5845  002E5E  1A2D               	xorwf	___ftsub@f2+2,f,c
  5846  002E60  D000               	goto	l3253
  5847  002E62                     l3253:
  5848  002E62  C028  F01C         	movff	___ftsub@f1,___ftadd@f1
  5849  002E66  C029  F01D         	movff	___ftsub@f1+1,___ftadd@f1+1
  5850  002E6A  C02A  F01E         	movff	___ftsub@f1+2,___ftadd@f1+2
  5851  002E6E  C02B  F01F         	movff	___ftsub@f2,___ftadd@f2
  5852  002E72  C02C  F020         	movff	___ftsub@f2+1,___ftadd@f2+1
  5853  002E76  C02D  F021         	movff	___ftsub@f2+2,___ftadd@f2+2
  5854  002E7A  EC64  F00B         	call	___ftadd	;wreg free
  5855  002E7E  C01C  F028         	movff	?___ftadd,?___ftsub
  5856  002E82  C01D  F029         	movff	?___ftadd+1,?___ftsub+1
  5857  002E86  C01E  F02A         	movff	?___ftadd+2,?___ftsub+2
  5858  002E8A  0012               	return	
  5859  002E8C  0012               	return		;funcret
  5860  002E8E                     __end_of___ftsub:
  5861                           	opt stack 0
  5862                           tblptru	equ	0xFF8
  5863                           tblptrh	equ	0xFF7
  5864                           tblptrl	equ	0xFF6
  5865                           tablat	equ	0xFF5
  5866                           prodh	equ	0xFF4
  5867                           prodl	equ	0xFF3
  5868                           indf0	equ	0xFEF
  5869                           postinc0	equ	0xFEE
  5870                           fsr0h	equ	0xFEA
  5871                           fsr0l	equ	0xFE9
  5872                           wreg	equ	0xFE8
  5873                           postdec1	equ	0xFE5
  5874                           fsr1l	equ	0xFE1
  5875                           indf2	equ	0xFDF
  5876                           postinc2	equ	0xFDE
  5877                           postdec2	equ	0xFDD
  5878                           fsr2h	equ	0xFDA
  5879                           fsr2l	equ	0xFD9
  5880                           status	equ	0xFD8
  5881                           
  5882 ;; *************** function ___ftadd *****************
  5883 ;; Defined at:
  5884 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\ftadd.c"
  5885 ;; Parameters:    Size  Location     Type
  5886 ;;  f1              3   27[COMRAM] float 
  5887 ;;  f2              3   30[COMRAM] float 
  5888 ;; Auto vars:     Size  Location     Type
  5889 ;;  exp1            1   38[COMRAM] unsigned char 
  5890 ;;  exp2            1   37[COMRAM] unsigned char 
  5891 ;;  sign            1   36[COMRAM] unsigned char 
  5892 ;; Return value:  Size  Location     Type
  5893 ;;                  3   27[COMRAM] float 
  5894 ;; Registers used:
  5895 ;;		wreg, status,2, status,0, cstack
  5896 ;; Tracked objects:
  5897 ;;		On entry : 0/0
  5898 ;;		On exit  : 0/0
  5899 ;;		Unchanged: 0/0
  5900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5901 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5902 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5903 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5904 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5905 ;;Total ram usage:       12 bytes
  5906 ;; Hardware stack levels used:    1
  5907 ;; Hardware stack levels required when called:    1
  5908 ;; This function calls:
  5909 ;;		___ftpack
  5910 ;; This function is called by:
  5911 ;;		_obtain_pass
  5912 ;;		___ftsub
  5913 ;;		_floor
  5914 ;;		_log
  5915 ;;		_eval_poly
  5916 ;; This function uses a non-reentrant model
  5917 ;;
  5918                           
  5919                           	psect	text30
  5920  0016C8                     __ptext30:
  5921                           	opt stack 0
  5922  0016C8                     ___ftadd:
  5923                           	opt stack 24
  5924                           
  5925                           ;incstack = 0
  5926  0016C8  C01E  F022         	movff	___ftadd@f1+2,??___ftadd
  5927  0016CC  6A23               	clrf	(??___ftadd+1)& (0+255),c
  5928  0016CE  6A24               	clrf	(??___ftadd+2)& (0+255),c
  5929  0016D0  341D               	rlcf	___ftadd@f1+1,w,c
  5930  0016D2  3622               	rlcf	??___ftadd& (0+255),f,c
  5931  0016D4  E301               	bnc	u2371
  5932  0016D6  8023               	bsf	(??___ftadd+1)& (0+255),0,c
  5933  0016D8                     u2371:
  5934  0016D8  5022               	movf	??___ftadd,w,c
  5935  0016DA  6E27               	movwf	___ftadd@exp1,c
  5936  0016DC  C021  F022         	movff	___ftadd@f2+2,??___ftadd
  5937  0016E0  6A23               	clrf	(??___ftadd+1)& (0+255),c
  5938  0016E2  6A24               	clrf	(??___ftadd+2)& (0+255),c
  5939  0016E4  3420               	rlcf	___ftadd@f2+1,w,c
  5940  0016E6  3622               	rlcf	??___ftadd& (0+255),f,c
  5941  0016E8  E301               	bnc	u2381
  5942  0016EA  8023               	bsf	(??___ftadd+1)& (0+255),0,c
  5943  0016EC                     u2381:
  5944  0016EC  5022               	movf	??___ftadd,w,c
  5945  0016EE  6E26               	movwf	___ftadd@exp2,c
  5946  0016F0  5027               	movf	___ftadd@exp1,w,c
  5947  0016F2  B4D8               	btfsc	status,2,c
  5948  0016F4  D00B               	goto	l1140
  5949  0016F6  5026               	movf	___ftadd@exp2,w,c
  5950  0016F8  5C27               	subwf	___ftadd@exp1,w,c
  5951  0016FA  B0D8               	btfsc	status,0,c
  5952  0016FC  D00E               	goto	l2983
  5953  0016FE  5027               	movf	___ftadd@exp1,w,c
  5954  001700  0800               	sublw	0
  5955  001702  2426               	addwf	___ftadd@exp2,w,c
  5956  001704  6E22               	movwf	??___ftadd& (0+255),c
  5957  001706  0E18               	movlw	24
  5958  001708  6422               	cpfsgt	??___ftadd,c
  5959  00170A  D007               	goto	l2983
  5960  00170C                     l1140:
  5961  00170C  C01F  F01C         	movff	___ftadd@f2,?___ftadd
  5962  001710  C020  F01D         	movff	___ftadd@f2+1,?___ftadd+1
  5963  001714  C021  F01E         	movff	___ftadd@f2+2,?___ftadd+2
  5964  001718  0012               	return	
  5965  00171A                     l2983:
  5966  00171A  5026               	movf	___ftadd@exp2,w,c
  5967  00171C  B4D8               	btfsc	status,2,c
  5968  00171E  D00B               	goto	l1144
  5969  001720  5027               	movf	___ftadd@exp1,w,c
  5970  001722  5C26               	subwf	___ftadd@exp2,w,c
  5971  001724  B0D8               	btfsc	status,0,c
  5972  001726  D00E               	goto	l2989
  5973  001728  5026               	movf	___ftadd@exp2,w,c
  5974  00172A  0800               	sublw	0
  5975  00172C  2427               	addwf	___ftadd@exp1,w,c
  5976  00172E  6E22               	movwf	??___ftadd& (0+255),c
  5977  001730  0E18               	movlw	24
  5978  001732  6422               	cpfsgt	??___ftadd,c
  5979  001734  D007               	goto	l2989
  5980  001736                     l1144:
  5981  001736  C01C  F01C         	movff	___ftadd@f1,?___ftadd
  5982  00173A  C01D  F01D         	movff	___ftadd@f1+1,?___ftadd+1
  5983  00173E  C01E  F01E         	movff	___ftadd@f1+2,?___ftadd+2
  5984  001742  0012               	return	
  5985  001744                     l2989:
  5986  001744  0E06               	movlw	6
  5987  001746  6E25               	movwf	___ftadd@sign,c
  5988  001748  AE1E               	btfss	___ftadd@f1+2,7,c
  5989  00174A  D002               	goto	l2995
  5990  00174C  8E25               	bsf	___ftadd@sign,7,c
  5991  00174E  D000               	goto	l2995
  5992  001750                     l2995:
  5993  001750  BE21               	btfsc	___ftadd@f2+2,7,c
  5994  001752  8C25               	bsf	___ftadd@sign,6,c
  5995  001754  8E1D               	bsf	___ftadd@f1+1,7,c
  5996  001756  0EFF               	movlw	255
  5997  001758  161C               	andwf	___ftadd@f1,f,c
  5998  00175A  0EFF               	movlw	255
  5999  00175C  161D               	andwf	___ftadd@f1+1,f,c
  6000  00175E  0E00               	movlw	0
  6001  001760  161E               	andwf	___ftadd@f1+2,f,c
  6002  001762  8E20               	bsf	___ftadd@f2+1,7,c
  6003  001764  0EFF               	movlw	255
  6004  001766  161F               	andwf	___ftadd@f2,f,c
  6005  001768  0EFF               	movlw	255
  6006  00176A  1620               	andwf	___ftadd@f2+1,f,c
  6007  00176C  0E00               	movlw	0
  6008  00176E  1621               	andwf	___ftadd@f2+2,f,c
  6009  001770  5026               	movf	___ftadd@exp2,w,c
  6010  001772  5C27               	subwf	___ftadd@exp1,w,c
  6011  001774  B0D8               	btfsc	status,0,c
  6012  001776  D01E               	goto	l3015
  6013  001778                     l3005:
  6014  001778  90D8               	bcf	status,0,c
  6015  00177A  361F               	rlcf	___ftadd@f2,f,c
  6016  00177C  3620               	rlcf	___ftadd@f2+1,f,c
  6017  00177E  3621               	rlcf	___ftadd@f2+2,f,c
  6018  001780  0626               	decf	___ftadd@exp2,f,c
  6019  001782  5027               	movf	___ftadd@exp1,w,c
  6020  001784  1826               	xorwf	___ftadd@exp2,w,c
  6021  001786  B4D8               	btfsc	status,2,c
  6022  001788  D00F               	goto	l3013
  6023  00178A  0625               	decf	___ftadd@sign,f,c
  6024  00178C  C025  F022         	movff	___ftadd@sign,??___ftadd
  6025  001790  0E07               	movlw	7
  6026  001792  1622               	andwf	??___ftadd,f,c
  6027  001794  B4D8               	btfsc	status,2,c
  6028  001796  D008               	goto	l3013
  6029  001798  D7EF               	goto	l3005
  6030  00179A  D006               	goto	l3013
  6031  00179C                     l3011:
  6032  00179C  90D8               	bcf	status,0,c
  6033  00179E  321E               	rrcf	___ftadd@f1+2,f,c
  6034  0017A0  321D               	rrcf	___ftadd@f1+1,f,c
  6035  0017A2  321C               	rrcf	___ftadd@f1,f,c
  6036  0017A4  2A27               	incf	___ftadd@exp1,f,c
  6037  0017A6  D000               	goto	l3013
  6038  0017A8                     l3013:
  6039  0017A8  5026               	movf	___ftadd@exp2,w,c
  6040  0017AA  1827               	xorwf	___ftadd@exp1,w,c
  6041  0017AC  B4D8               	btfsc	status,2,c
  6042  0017AE  D024               	goto	l1155
  6043  0017B0  D7F5               	goto	l3011
  6044  0017B2  D022               	goto	l1155
  6045  0017B4                     l3015:
  6046  0017B4  5027               	movf	___ftadd@exp1,w,c
  6047  0017B6  5C26               	subwf	___ftadd@exp2,w,c
  6048  0017B8  B0D8               	btfsc	status,0,c
  6049  0017BA  D01E               	goto	l1155
  6050  0017BC                     l3017:
  6051  0017BC  90D8               	bcf	status,0,c
  6052  0017BE  361C               	rlcf	___ftadd@f1,f,c
  6053  0017C0  361D               	rlcf	___ftadd@f1+1,f,c
  6054  0017C2  361E               	rlcf	___ftadd@f1+2,f,c
  6055  0017C4  0627               	decf	___ftadd@exp1,f,c
  6056  0017C6  5027               	movf	___ftadd@exp1,w,c
  6057  0017C8  1826               	xorwf	___ftadd@exp2,w,c
  6058  0017CA  B4D8               	btfsc	status,2,c
  6059  0017CC  D00F               	goto	l3025
  6060  0017CE  0625               	decf	___ftadd@sign,f,c
  6061  0017D0  C025  F022         	movff	___ftadd@sign,??___ftadd
  6062  0017D4  0E07               	movlw	7
  6063  0017D6  1622               	andwf	??___ftadd,f,c
  6064  0017D8  B4D8               	btfsc	status,2,c
  6065  0017DA  D008               	goto	l3025
  6066  0017DC  D7EF               	goto	l3017
  6067  0017DE  D006               	goto	l3025
  6068  0017E0                     l3023:
  6069  0017E0  90D8               	bcf	status,0,c
  6070  0017E2  3221               	rrcf	___ftadd@f2+2,f,c
  6071  0017E4  3220               	rrcf	___ftadd@f2+1,f,c
  6072  0017E6  321F               	rrcf	___ftadd@f2,f,c
  6073  0017E8  2A26               	incf	___ftadd@exp2,f,c
  6074  0017EA  D000               	goto	l3025
  6075  0017EC                     l3025:
  6076  0017EC  5026               	movf	___ftadd@exp2,w,c
  6077  0017EE  1827               	xorwf	___ftadd@exp1,w,c
  6078  0017F0  B4D8               	btfsc	status,2,c
  6079  0017F2  D002               	goto	l1155
  6080  0017F4  D7F5               	goto	l3023
  6081  0017F6  D000               	goto	l1155
  6082  0017F8                     l1155:
  6083  0017F8  AE25               	btfss	___ftadd@sign,7,c
  6084  0017FA  D00C               	goto	l1164
  6085  0017FC  0EFF               	movlw	255
  6086  0017FE  1A1C               	xorwf	___ftadd@f1,f,c
  6087  001800  0EFF               	movlw	255
  6088  001802  1A1D               	xorwf	___ftadd@f1+1,f,c
  6089  001804  0EFF               	movlw	255
  6090  001806  1A1E               	xorwf	___ftadd@f1+2,f,c
  6091  001808  0E01               	movlw	1
  6092  00180A  261C               	addwf	___ftadd@f1,f,c
  6093  00180C  0E00               	movlw	0
  6094  00180E  221D               	addwfc	___ftadd@f1+1,f,c
  6095  001810  0E00               	movlw	0
  6096  001812  221E               	addwfc	___ftadd@f1+2,f,c
  6097  001814                     l1164:
  6098  001814  AC25               	btfss	___ftadd@sign,6,c
  6099  001816  D00D               	goto	l3031
  6100  001818  0EFF               	movlw	255
  6101  00181A  1A1F               	xorwf	___ftadd@f2,f,c
  6102  00181C  0EFF               	movlw	255
  6103  00181E  1A20               	xorwf	___ftadd@f2+1,f,c
  6104  001820  0EFF               	movlw	255
  6105  001822  1A21               	xorwf	___ftadd@f2+2,f,c
  6106  001824  0E01               	movlw	1
  6107  001826  261F               	addwf	___ftadd@f2,f,c
  6108  001828  0E00               	movlw	0
  6109  00182A  2220               	addwfc	___ftadd@f2+1,f,c
  6110  00182C  0E00               	movlw	0
  6111  00182E  2221               	addwfc	___ftadd@f2+2,f,c
  6112  001830  D000               	goto	l3031
  6113  001832                     l3031:
  6114  001832  0E00               	movlw	0
  6115  001834  6E25               	movwf	___ftadd@sign,c
  6116  001836  501C               	movf	___ftadd@f1,w,c
  6117  001838  261F               	addwf	___ftadd@f2,f,c
  6118  00183A  501D               	movf	___ftadd@f1+1,w,c
  6119  00183C  2220               	addwfc	___ftadd@f2+1,f,c
  6120  00183E  501E               	movf	___ftadd@f1+2,w,c
  6121  001840  2221               	addwfc	___ftadd@f2+2,f,c
  6122  001842  AE21               	btfss	___ftadd@f2+2,7,c
  6123  001844  D00F               	goto	l3041
  6124  001846  0EFF               	movlw	255
  6125  001848  1A1F               	xorwf	___ftadd@f2,f,c
  6126  00184A  0EFF               	movlw	255
  6127  00184C  1A20               	xorwf	___ftadd@f2+1,f,c
  6128  00184E  0EFF               	movlw	255
  6129  001850  1A21               	xorwf	___ftadd@f2+2,f,c
  6130  001852  0E01               	movlw	1
  6131  001854  261F               	addwf	___ftadd@f2,f,c
  6132  001856  0E00               	movlw	0
  6133  001858  2220               	addwfc	___ftadd@f2+1,f,c
  6134  00185A  0E00               	movlw	0
  6135  00185C  2221               	addwfc	___ftadd@f2+2,f,c
  6136  00185E  0E01               	movlw	1
  6137  001860  6E25               	movwf	___ftadd@sign,c
  6138  001862  D000               	goto	l3041
  6139  001864                     l3041:
  6140  001864  C01F  F001         	movff	___ftadd@f2,___ftpack@arg
  6141  001868  C020  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  6142  00186C  C021  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  6143  001870  C027  F004         	movff	___ftadd@exp1,___ftpack@exp
  6144  001874  C025  F005         	movff	___ftadd@sign,___ftpack@sign
  6145  001878  EC2F  F013         	call	___ftpack	;wreg free
  6146  00187C  C001  F01C         	movff	?___ftpack,?___ftadd
  6147  001880  C002  F01D         	movff	?___ftpack+1,?___ftadd+1
  6148  001884  C003  F01E         	movff	?___ftpack+2,?___ftadd+2
  6149  001888  0012               	return	
  6150  00188A  0012               	return		;funcret
  6151  00188C                     __end_of___ftadd:
  6152                           	opt stack 0
  6153                           tblptru	equ	0xFF8
  6154                           tblptrh	equ	0xFF7
  6155                           tblptrl	equ	0xFF6
  6156                           tablat	equ	0xFF5
  6157                           prodh	equ	0xFF4
  6158                           prodl	equ	0xFF3
  6159                           indf0	equ	0xFEF
  6160                           postinc0	equ	0xFEE
  6161                           fsr0h	equ	0xFEA
  6162                           fsr0l	equ	0xFE9
  6163                           wreg	equ	0xFE8
  6164                           postdec1	equ	0xFE5
  6165                           fsr1l	equ	0xFE1
  6166                           indf2	equ	0xFDF
  6167                           postinc2	equ	0xFDE
  6168                           postdec2	equ	0xFDD
  6169                           fsr2h	equ	0xFDA
  6170                           fsr2l	equ	0xFD9
  6171                           status	equ	0xFD8
  6172                           
  6173 ;; *************** function ___ftneg *****************
  6174 ;; Defined at:
  6175 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\ftneg.c"
  6176 ;; Parameters:    Size  Location     Type
  6177 ;;  f1              3    0[COMRAM] float 
  6178 ;; Auto vars:     Size  Location     Type
  6179 ;;		None
  6180 ;; Return value:  Size  Location     Type
  6181 ;;                  3    0[COMRAM] float 
  6182 ;; Registers used:
  6183 ;;		wreg, status,2, status,0
  6184 ;; Tracked objects:
  6185 ;;		On entry : 0/0
  6186 ;;		On exit  : 0/0
  6187 ;;		Unchanged: 0/0
  6188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6189 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6192 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6193 ;;Total ram usage:        3 bytes
  6194 ;; Hardware stack levels used:    1
  6195 ;; This function calls:
  6196 ;;		Nothing
  6197 ;; This function is called by:
  6198 ;;		_pow
  6199 ;;		_exp
  6200 ;; This function uses a non-reentrant model
  6201 ;;
  6202                           
  6203                           	psect	text31
  6204  003006                     __ptext31:
  6205                           	opt stack 0
  6206  003006                     ___ftneg:
  6207                           	opt stack 26
  6208                           
  6209                           ;incstack = 0
  6210  003006  5001               	movf	___ftneg@f1,w,c
  6211  003008  1002               	iorwf	___ftneg@f1+1,w,c
  6212  00300A  1003               	iorwf	___ftneg@f1+2,w,c
  6213  00300C  B4D8               	btfsc	status,2,c
  6214  00300E  D006               	goto	l1197
  6215  003010  0E00               	movlw	0
  6216  003012  1A01               	xorwf	___ftneg@f1,f,c
  6217  003014  0E00               	movlw	0
  6218  003016  1A02               	xorwf	___ftneg@f1+1,f,c
  6219  003018  0E80               	movlw	128
  6220  00301A  1A03               	xorwf	___ftneg@f1+2,f,c
  6221  00301C                     l1197:
  6222  00301C  C001  F001         	movff	___ftneg@f1,?___ftneg
  6223  003020  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  6224  003024  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  6225  003028  0012               	return		;funcret
  6226  00302A                     __end_of___ftneg:
  6227                           	opt stack 0
  6228                           tblptru	equ	0xFF8
  6229                           tblptrh	equ	0xFF7
  6230                           tblptrl	equ	0xFF6
  6231                           tablat	equ	0xFF5
  6232                           prodh	equ	0xFF4
  6233                           prodl	equ	0xFF3
  6234                           indf0	equ	0xFEF
  6235                           postinc0	equ	0xFEE
  6236                           fsr0h	equ	0xFEA
  6237                           fsr0l	equ	0xFE9
  6238                           wreg	equ	0xFE8
  6239                           postdec1	equ	0xFE5
  6240                           fsr1l	equ	0xFE1
  6241                           indf2	equ	0xFDF
  6242                           postinc2	equ	0xFDE
  6243                           postdec2	equ	0xFDD
  6244                           fsr2h	equ	0xFDA
  6245                           fsr2l	equ	0xFD9
  6246                           status	equ	0xFD8
  6247                           
  6248 ;; *************** function ___ftdiv *****************
  6249 ;; Defined at:
  6250 ;;		line 54 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  6251 ;; Parameters:    Size  Location     Type
  6252 ;;  f1              3    8[COMRAM] float 
  6253 ;;  f2              3   11[COMRAM] float 
  6254 ;; Auto vars:     Size  Location     Type
  6255 ;;  f3              3   18[COMRAM] float 
  6256 ;;  sign            1   22[COMRAM] unsigned char 
  6257 ;;  exp             1   21[COMRAM] unsigned char 
  6258 ;;  cntr            1   17[COMRAM] unsigned char 
  6259 ;; Return value:  Size  Location     Type
  6260 ;;                  3    8[COMRAM] float 
  6261 ;; Registers used:
  6262 ;;		wreg, status,2, status,0, cstack
  6263 ;; Tracked objects:
  6264 ;;		On entry : 0/0
  6265 ;;		On exit  : 0/0
  6266 ;;		Unchanged: 0/0
  6267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6268 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6269 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6270 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6271 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6272 ;;Total ram usage:       15 bytes
  6273 ;; Hardware stack levels used:    1
  6274 ;; Hardware stack levels required when called:    1
  6275 ;; This function calls:
  6276 ;;		___ftpack
  6277 ;; This function is called by:
  6278 ;;		_exp
  6279 ;; This function uses a non-reentrant model
  6280 ;;
  6281                           
  6282                           	psect	text32
  6283  00220C                     __ptext32:
  6284                           	opt stack 0
  6285  00220C                     ___ftdiv:
  6286                           	opt stack 25
  6287                           
  6288                           ;incstack = 0
  6289  00220C  C00B  F00F         	movff	___ftdiv@f1+2,??___ftdiv
  6290  002210  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  6291  002212  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  6292  002214  340A               	rlcf	___ftdiv@f1+1,w,c
  6293  002216  360F               	rlcf	??___ftdiv& (0+255),f,c
  6294  002218  E301               	bnc	u2791
  6295  00221A  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  6296  00221C                     u2791:
  6297  00221C  500F               	movf	??___ftdiv,w,c
  6298  00221E  6E16               	movwf	___ftdiv@exp,c
  6299  002220  5016               	movf	___ftdiv@exp,w,c
  6300  002222  A4D8               	btfss	status,2,c
  6301  002224  D007               	goto	l3209
  6302  002226  0E00               	movlw	0
  6303  002228  6E09               	movwf	?___ftdiv,c
  6304  00222A  0E00               	movlw	0
  6305  00222C  6E0A               	movwf	?___ftdiv+1,c
  6306  00222E  0E00               	movlw	0
  6307  002230  6E0B               	movwf	?___ftdiv+2,c
  6308  002232  0012               	return	
  6309  002234                     l3209:
  6310  002234  C00E  F00F         	movff	___ftdiv@f2+2,??___ftdiv
  6311  002238  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  6312  00223A  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  6313  00223C  340D               	rlcf	___ftdiv@f2+1,w,c
  6314  00223E  360F               	rlcf	??___ftdiv& (0+255),f,c
  6315  002240  E301               	bnc	u2811
  6316  002242  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  6317  002244                     u2811:
  6318  002244  500F               	movf	??___ftdiv,w,c
  6319  002246  6E17               	movwf	___ftdiv@sign,c
  6320  002248  5017               	movf	___ftdiv@sign,w,c
  6321  00224A  A4D8               	btfss	status,2,c
  6322  00224C  D007               	goto	l3215
  6323  00224E  0E00               	movlw	0
  6324  002250  6E09               	movwf	?___ftdiv,c
  6325  002252  0E00               	movlw	0
  6326  002254  6E0A               	movwf	?___ftdiv+1,c
  6327  002256  0E00               	movlw	0
  6328  002258  6E0B               	movwf	?___ftdiv+2,c
  6329  00225A  0012               	return	
  6330  00225C                     l3215:
  6331  00225C  0E00               	movlw	0
  6332  00225E  6E13               	movwf	___ftdiv@f3,c
  6333  002260  0E00               	movlw	0
  6334  002262  6E14               	movwf	___ftdiv@f3+1,c
  6335  002264  0E00               	movlw	0
  6336  002266  6E15               	movwf	___ftdiv@f3+2,c
  6337  002268  5017               	movf	___ftdiv@sign,w,c
  6338  00226A  0F89               	addlw	137
  6339  00226C  5E16               	subwf	___ftdiv@exp,f,c
  6340  00226E  C00B  F017         	movff	___ftdiv@f1+2,___ftdiv@sign
  6341  002272  500E               	movf	___ftdiv@f2+2,w,c
  6342  002274  1A17               	xorwf	___ftdiv@sign,f,c
  6343  002276  0E80               	movlw	128
  6344  002278  1617               	andwf	___ftdiv@sign,f,c
  6345  00227A  8E0A               	bsf	___ftdiv@f1+1,7,c
  6346  00227C  0EFF               	movlw	255
  6347  00227E  1609               	andwf	___ftdiv@f1,f,c
  6348  002280  0EFF               	movlw	255
  6349  002282  160A               	andwf	___ftdiv@f1+1,f,c
  6350  002284  0E00               	movlw	0
  6351  002286  160B               	andwf	___ftdiv@f1+2,f,c
  6352  002288  8E0D               	bsf	___ftdiv@f2+1,7,c
  6353  00228A  0EFF               	movlw	255
  6354  00228C  160C               	andwf	___ftdiv@f2,f,c
  6355  00228E  0EFF               	movlw	255
  6356  002290  160D               	andwf	___ftdiv@f2+1,f,c
  6357  002292  0E00               	movlw	0
  6358  002294  160E               	andwf	___ftdiv@f2+2,f,c
  6359  002296  0E18               	movlw	24
  6360  002298  6E12               	movwf	___ftdiv@cntr,c
  6361  00229A  D000               	goto	l3235
  6362  00229C                     l3235:
  6363  00229C  90D8               	bcf	status,0,c
  6364  00229E  3613               	rlcf	___ftdiv@f3,f,c
  6365  0022A0  3614               	rlcf	___ftdiv@f3+1,f,c
  6366  0022A2  3615               	rlcf	___ftdiv@f3+2,f,c
  6367  0022A4  500C               	movf	___ftdiv@f2,w,c
  6368  0022A6  5C09               	subwf	___ftdiv@f1,w,c
  6369  0022A8  500D               	movf	___ftdiv@f2+1,w,c
  6370  0022AA  580A               	subwfb	___ftdiv@f1+1,w,c
  6371  0022AC  500E               	movf	___ftdiv@f2+2,w,c
  6372  0022AE  580B               	subwfb	___ftdiv@f1+2,w,c
  6373  0022B0  A0D8               	btfss	status,0,c
  6374  0022B2  D007               	goto	l1175
  6375  0022B4  500C               	movf	___ftdiv@f2,w,c
  6376  0022B6  5E09               	subwf	___ftdiv@f1,f,c
  6377  0022B8  500D               	movf	___ftdiv@f2+1,w,c
  6378  0022BA  5A0A               	subwfb	___ftdiv@f1+1,f,c
  6379  0022BC  500E               	movf	___ftdiv@f2+2,w,c
  6380  0022BE  5A0B               	subwfb	___ftdiv@f1+2,f,c
  6381  0022C0  8013               	bsf	___ftdiv@f3,0,c
  6382  0022C2                     l1175:
  6383  0022C2  90D8               	bcf	status,0,c
  6384  0022C4  3609               	rlcf	___ftdiv@f1,f,c
  6385  0022C6  360A               	rlcf	___ftdiv@f1+1,f,c
  6386  0022C8  360B               	rlcf	___ftdiv@f1+2,f,c
  6387  0022CA  2E12               	decfsz	___ftdiv@cntr,f,c
  6388  0022CC  D7E7               	goto	l3235
  6389  0022CE  D000               	goto	l3245
  6390  0022D0                     l3245:
  6391  0022D0  C013  F001         	movff	___ftdiv@f3,___ftpack@arg
  6392  0022D4  C014  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6393  0022D8  C015  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6394  0022DC  C016  F004         	movff	___ftdiv@exp,___ftpack@exp
  6395  0022E0  C017  F005         	movff	___ftdiv@sign,___ftpack@sign
  6396  0022E4  EC2F  F013         	call	___ftpack	;wreg free
  6397  0022E8  C001  F009         	movff	?___ftpack,?___ftdiv
  6398  0022EC  C002  F00A         	movff	?___ftpack+1,?___ftdiv+1
  6399  0022F0  C003  F00B         	movff	?___ftpack+2,?___ftdiv+2
  6400  0022F4  0012               	return	
  6401  0022F6  0012               	return		;funcret
  6402  0022F8                     __end_of___ftdiv:
  6403                           	opt stack 0
  6404                           tblptru	equ	0xFF8
  6405                           tblptrh	equ	0xFF7
  6406                           tblptrl	equ	0xFF6
  6407                           tablat	equ	0xFF5
  6408                           prodh	equ	0xFF4
  6409                           prodl	equ	0xFF3
  6410                           indf0	equ	0xFEF
  6411                           postinc0	equ	0xFEE
  6412                           fsr0h	equ	0xFEA
  6413                           fsr0l	equ	0xFE9
  6414                           wreg	equ	0xFE8
  6415                           postdec1	equ	0xFE5
  6416                           fsr1l	equ	0xFE1
  6417                           indf2	equ	0xFDF
  6418                           postinc2	equ	0xFDE
  6419                           postdec2	equ	0xFDD
  6420                           fsr2h	equ	0xFDA
  6421                           fsr2l	equ	0xFD9
  6422                           status	equ	0xFD8
  6423                           
  6424 ;; *************** function ___awtoft *****************
  6425 ;; Defined at:
  6426 ;;		line 32 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\awtoft.c"
  6427 ;; Parameters:    Size  Location     Type
  6428 ;;  c               2    8[COMRAM] int 
  6429 ;; Auto vars:     Size  Location     Type
  6430 ;;  sign            1   11[COMRAM] unsigned char 
  6431 ;; Return value:  Size  Location     Type
  6432 ;;                  3    8[COMRAM] float 
  6433 ;; Registers used:
  6434 ;;		wreg, status,2, status,0, cstack
  6435 ;; Tracked objects:
  6436 ;;		On entry : 0/0
  6437 ;;		On exit  : 0/0
  6438 ;;		Unchanged: 0/0
  6439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6440 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6441 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6443 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6444 ;;Total ram usage:        4 bytes
  6445 ;; Hardware stack levels used:    1
  6446 ;; Hardware stack levels required when called:    1
  6447 ;; This function calls:
  6448 ;;		___ftpack
  6449 ;; This function is called by:
  6450 ;;		_obtain_pass
  6451 ;;		_exp
  6452 ;;		_log
  6453 ;; This function uses a non-reentrant model
  6454 ;;
  6455                           
  6456                           	psect	text33
  6457  002E8E                     __ptext33:
  6458                           	opt stack 0
  6459  002E8E                     ___awtoft:
  6460                           	opt stack 25
  6461                           
  6462                           ;incstack = 0
  6463  002E8E  0E00               	movlw	0
  6464  002E90  6E0C               	movwf	___awtoft@sign,c
  6465  002E92  AE0A               	btfss	___awtoft@c+1,7,c
  6466  002E94  D007               	goto	l3265
  6467  002E96  6C09               	negf	___awtoft@c,c
  6468  002E98  1E0A               	comf	___awtoft@c+1,f,c
  6469  002E9A  B0D8               	btfsc	status,0,c
  6470  002E9C  2A0A               	incf	___awtoft@c+1,f,c
  6471  002E9E  0E01               	movlw	1
  6472  002EA0  6E0C               	movwf	___awtoft@sign,c
  6473  002EA2  D000               	goto	l3265
  6474  002EA4                     l3265:
  6475  002EA4  C009  F001         	movff	___awtoft@c,___ftpack@arg
  6476  002EA8  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  6477  002EAC  6A03               	clrf	___ftpack@arg+2,c
  6478  002EAE  0E8E               	movlw	142
  6479  002EB0  6E04               	movwf	___ftpack@exp,c
  6480  002EB2  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  6481  002EB6  EC2F  F013         	call	___ftpack	;wreg free
  6482  002EBA  C001  F009         	movff	?___ftpack,?___awtoft
  6483  002EBE  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  6484  002EC2  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  6485  002EC6  0012               	return	
  6486  002EC8  0012               	return		;funcret
  6487  002ECA                     __end_of___awtoft:
  6488                           	opt stack 0
  6489                           tblptru	equ	0xFF8
  6490                           tblptrh	equ	0xFF7
  6491                           tblptrl	equ	0xFF6
  6492                           tablat	equ	0xFF5
  6493                           prodh	equ	0xFF4
  6494                           prodl	equ	0xFF3
  6495                           indf0	equ	0xFEF
  6496                           postinc0	equ	0xFEE
  6497                           fsr0h	equ	0xFEA
  6498                           fsr0l	equ	0xFE9
  6499                           wreg	equ	0xFE8
  6500                           postdec1	equ	0xFE5
  6501                           fsr1l	equ	0xFE1
  6502                           indf2	equ	0xFDF
  6503                           postinc2	equ	0xFDE
  6504                           postdec2	equ	0xFDD
  6505                           fsr2h	equ	0xFDA
  6506                           fsr2l	equ	0xFD9
  6507                           status	equ	0xFD8
  6508                           
  6509 ;; *************** function ___lltoft *****************
  6510 ;; Defined at:
  6511 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lltoft.c"
  6512 ;; Parameters:    Size  Location     Type
  6513 ;;  c               4    8[COMRAM] unsigned long 
  6514 ;; Auto vars:     Size  Location     Type
  6515 ;;  exp             1   16[COMRAM] unsigned char 
  6516 ;; Return value:  Size  Location     Type
  6517 ;;                  3    8[COMRAM] float 
  6518 ;; Registers used:
  6519 ;;		wreg, status,2, status,0, cstack
  6520 ;; Tracked objects:
  6521 ;;		On entry : 0/0
  6522 ;;		On exit  : 0/0
  6523 ;;		Unchanged: 0/0
  6524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6525 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6526 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6527 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6528 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6529 ;;Total ram usage:        9 bytes
  6530 ;; Hardware stack levels used:    1
  6531 ;; Hardware stack levels required when called:    1
  6532 ;; This function calls:
  6533 ;;		___ftpack
  6534 ;; This function is called by:
  6535 ;;		_pow
  6536 ;; This function uses a non-reentrant model
  6537 ;;
  6538                           
  6539                           	psect	text34
  6540  002BB6                     __ptext34:
  6541                           	opt stack 0
  6542  002BB6                     ___lltoft:
  6543                           	opt stack 26
  6544                           
  6545                           ;incstack = 0
  6546  002BB6  0E8E               	movlw	142
  6547  002BB8  6E11               	movwf	___lltoft@exp,c
  6548  002BBA  D007               	goto	l3533
  6549  002BBC                     l3531:
  6550  002BBC  90D8               	bcf	status,0,c
  6551  002BBE  320C               	rrcf	___lltoft@c+3,f,c
  6552  002BC0  320B               	rrcf	___lltoft@c+2,f,c
  6553  002BC2  320A               	rrcf	___lltoft@c+1,f,c
  6554  002BC4  3209               	rrcf	___lltoft@c,f,c
  6555  002BC6  2A11               	incf	___lltoft@exp,f,c
  6556  002BC8  D000               	goto	l3533
  6557  002BCA                     l3533:
  6558  002BCA  0E00               	movlw	0
  6559  002BCC  1409               	andwf	___lltoft@c,w,c
  6560  002BCE  6E0D               	movwf	??___lltoft& (0+255),c
  6561  002BD0  0E00               	movlw	0
  6562  002BD2  140A               	andwf	___lltoft@c+1,w,c
  6563  002BD4  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  6564  002BD6  0E00               	movlw	0
  6565  002BD8  140B               	andwf	___lltoft@c+2,w,c
  6566  002BDA  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  6567  002BDC  0EFF               	movlw	255
  6568  002BDE  140C               	andwf	___lltoft@c+3,w,c
  6569  002BE0  6E10               	movwf	(??___lltoft+3)& (0+255),c
  6570  002BE2  500D               	movf	??___lltoft,w,c
  6571  002BE4  100E               	iorwf	??___lltoft+1,w,c
  6572  002BE6  100F               	iorwf	??___lltoft+2,w,c
  6573  002BE8  1010               	iorwf	??___lltoft+3,w,c
  6574  002BEA  A4D8               	btfss	status,2,c
  6575  002BEC  D7E7               	goto	l3531
  6576  002BEE  C009  F001         	movff	___lltoft@c,___ftpack@arg
  6577  002BF2  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  6578  002BF6  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  6579  002BFA  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  6580  002BFE  0E00               	movlw	0
  6581  002C00  6E05               	movwf	___ftpack@sign,c
  6582  002C02  EC2F  F013         	call	___ftpack	;wreg free
  6583  002C06  C001  F009         	movff	?___ftpack,?___lltoft
  6584  002C0A  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  6585  002C0E  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  6586  002C12  0012               	return	
  6587  002C14  0012               	return		;funcret
  6588  002C16                     __end_of___lltoft:
  6589                           	opt stack 0
  6590                           tblptru	equ	0xFF8
  6591                           tblptrh	equ	0xFF7
  6592                           tblptrl	equ	0xFF6
  6593                           tablat	equ	0xFF5
  6594                           prodh	equ	0xFF4
  6595                           prodl	equ	0xFF3
  6596                           indf0	equ	0xFEF
  6597                           postinc0	equ	0xFEE
  6598                           fsr0h	equ	0xFEA
  6599                           fsr0l	equ	0xFE9
  6600                           wreg	equ	0xFE8
  6601                           postdec1	equ	0xFE5
  6602                           fsr1l	equ	0xFE1
  6603                           indf2	equ	0xFDF
  6604                           postinc2	equ	0xFDE
  6605                           postdec2	equ	0xFDD
  6606                           fsr2h	equ	0xFDA
  6607                           fsr2l	equ	0xFD9
  6608                           status	equ	0xFD8
  6609                           
  6610 ;; *************** function _next_code *****************
  6611 ;; Defined at:
  6612 ;;		line 39 in file "lcd_vision.c"
  6613 ;; Parameters:    Size  Location     Type
  6614 ;;  digit           2    7[COMRAM] PTR short 
  6615 ;;		 -> set_vision@digit(2), 
  6616 ;;  input           2    9[COMRAM] PTR unsigned char 
  6617 ;;		 -> obtain_pass@input(1), 
  6618 ;; Auto vars:     Size  Location     Type
  6619 ;;		None
  6620 ;; Return value:  Size  Location     Type
  6621 ;;		None               void
  6622 ;; Registers used:
  6623 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6624 ;; Tracked objects:
  6625 ;;		On entry : 0/0
  6626 ;;		On exit  : 0/0
  6627 ;;		Unchanged: 0/0
  6628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6629 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6631 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6632 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6633 ;;Total ram usage:        6 bytes
  6634 ;; Hardware stack levels used:    1
  6635 ;; Hardware stack levels required when called:    3
  6636 ;; This function calls:
  6637 ;;		_clear_keyboard
  6638 ;;		_lcd_gotoxy
  6639 ;; This function is called by:
  6640 ;;		_obtain_pass
  6641 ;; This function uses a non-reentrant model
  6642 ;;
  6643                           
  6644                           	psect	text35
  6645  002DB6                     __ptext35:
  6646                           	opt stack 0
  6647  002DB6                     _next_code:
  6648                           	opt stack 25
  6649                           
  6650                           ;lcd_vision.c: 40: clear_keyboard();
  6651                           
  6652                           ;incstack = 0
  6653  002DB6  EC8F  F018         	call	_clear_keyboard	;wreg free
  6654                           
  6655                           ;lcd_vision.c: 41: *digit = *digit + 1;
  6656  002DBA  C008  FFD9         	movff	next_code@digit,fsr2l
  6657  002DBE  C009  FFDA         	movff	next_code@digit+1,fsr2h
  6658  002DC2  CFDE F00C          	movff	postinc2,??_next_code
  6659  002DC6  CFDD F00D          	movff	postdec2,??_next_code+1
  6660  002DCA  0E01               	movlw	1
  6661  002DCC  260C               	addwf	??_next_code,f,c
  6662  002DCE  0E00               	movlw	0
  6663  002DD0  220D               	addwfc	??_next_code+1,f,c
  6664  002DD2  C008  FFD9         	movff	next_code@digit,fsr2l
  6665  002DD6  C009  FFDA         	movff	next_code@digit+1,fsr2h
  6666  002DDA  C00C  FFDE         	movff	??_next_code,postinc2
  6667  002DDE  C00D  FFDD         	movff	??_next_code+1,postdec2
  6668                           
  6669                           ;lcd_vision.c: 42: lcd_gotoxy(*digit, 2);
  6670  002DE2  0E02               	movlw	2
  6671  002DE4  6E05               	movwf	lcd_gotoxy@y,c
  6672  002DE6  C008  FFD9         	movff	next_code@digit,fsr2l
  6673  002DEA  C009  FFDA         	movff	next_code@digit+1,fsr2h
  6674  002DEE  50DF               	movf	indf2,w,c
  6675  002DF0  EC15  F018         	call	_lcd_gotoxy
  6676                           
  6677                           ;lcd_vision.c: 43: *input = 18;
  6678  002DF4  C00A  FFD9         	movff	next_code@input,fsr2l
  6679  002DF8  C00B  FFDA         	movff	next_code@input+1,fsr2h
  6680  002DFC  0E12               	movlw	18
  6681  002DFE  6EDF               	movwf	indf2,c
  6682  002E00  0012               	return		;funcret
  6683  002E02                     __end_of_next_code:
  6684                           	opt stack 0
  6685                           tblptru	equ	0xFF8
  6686                           tblptrh	equ	0xFF7
  6687                           tblptrl	equ	0xFF6
  6688                           tablat	equ	0xFF5
  6689                           prodh	equ	0xFF4
  6690                           prodl	equ	0xFF3
  6691                           indf0	equ	0xFEF
  6692                           postinc0	equ	0xFEE
  6693                           fsr0h	equ	0xFEA
  6694                           fsr0l	equ	0xFE9
  6695                           wreg	equ	0xFE8
  6696                           postdec1	equ	0xFE5
  6697                           fsr1l	equ	0xFE1
  6698                           indf2	equ	0xFDF
  6699                           postinc2	equ	0xFDE
  6700                           postdec2	equ	0xFDD
  6701                           fsr2h	equ	0xFDA
  6702                           fsr2l	equ	0xFD9
  6703                           status	equ	0xFD8
  6704                           
  6705 ;; *************** function _lcd_gotoxy *****************
  6706 ;; Defined at:
  6707 ;;		line 158 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  6708 ;; Parameters:    Size  Location     Type
  6709 ;;  x               1    wreg     unsigned char 
  6710 ;;  y               1    4[COMRAM] unsigned char 
  6711 ;; Auto vars:     Size  Location     Type
  6712 ;;  x               1    5[COMRAM] unsigned char 
  6713 ;;  address         1    6[COMRAM] unsigned char 
  6714 ;; Return value:  Size  Location     Type
  6715 ;;		None               void
  6716 ;; Registers used:
  6717 ;;		wreg, status,2, status,0, cstack
  6718 ;; Tracked objects:
  6719 ;;		On entry : 0/0
  6720 ;;		On exit  : 0/0
  6721 ;;		Unchanged: 0/0
  6722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6723 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6724 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6726 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6727 ;;Total ram usage:        3 bytes
  6728 ;; Hardware stack levels used:    1
  6729 ;; Hardware stack levels required when called:    2
  6730 ;; This function calls:
  6731 ;;		_lcd_send_byte
  6732 ;; This function is called by:
  6733 ;;		_main
  6734 ;;		_lcd_putc
  6735 ;;		_write_Date
  6736 ;;		_next_code
  6737 ;;		_twinkle
  6738 ;;		_set_desactive_vision
  6739 ;;		_set_vision
  6740 ;; This function uses a non-reentrant model
  6741 ;;
  6742                           
  6743                           	psect	text36
  6744  00302A                     __ptext36:
  6745                           	opt stack 0
  6746  00302A                     _lcd_gotoxy:
  6747                           	opt stack 24
  6748                           
  6749                           ;incstack = 0
  6750                           ;lcd_gotoxy@x stored from wreg
  6751  00302A  6E06               	movwf	lcd_gotoxy@x,c
  6752                           
  6753                           ;unmc_lcd_216.c: 159: int8 address;
  6754                           ;unmc_lcd_216.c: 161: if(y != 1)
  6755  00302C  0405               	decf	lcd_gotoxy@y,w,c
  6756  00302E  B4D8               	btfsc	status,2,c
  6757  003030  D002               	goto	l2947
  6758                           
  6759                           ;unmc_lcd_216.c: 162: address = 0x40;
  6760  003032  0E40               	movlw	64
  6761  003034  D001               	goto	L3
  6762  003036                     l2947:
  6763                           
  6764                           ;unmc_lcd_216.c: 163: else
  6765                           ;unmc_lcd_216.c: 164: address=0;
  6766  003036  0E00               	movlw	0
  6767  003038                     L3:
  6768  003038  6E07               	movwf	lcd_gotoxy@address,c
  6769  00303A  D000               	goto	l2949
  6770  00303C                     l2949:
  6771                           
  6772                           ;unmc_lcd_216.c: 166: address += x-1;
  6773  00303C  0406               	decf	lcd_gotoxy@x,w,c
  6774  00303E  2607               	addwf	lcd_gotoxy@address,f,c
  6775                           
  6776                           ;unmc_lcd_216.c: 167: lcd_send_byte(0, 0x80 | address);
  6777  003040  5007               	movf	lcd_gotoxy@address,w,c
  6778  003042  0980               	iorlw	128
  6779  003044  6E03               	movwf	lcd_send_byte@n,c
  6780  003046  0E00               	movlw	0
  6781  003048  EC82  F017         	call	_lcd_send_byte
  6782  00304C  0012               	return		;funcret
  6783  00304E                     __end_of_lcd_gotoxy:
  6784                           	opt stack 0
  6785                           tblptru	equ	0xFF8
  6786                           tblptrh	equ	0xFF7
  6787                           tblptrl	equ	0xFF6
  6788                           tablat	equ	0xFF5
  6789                           prodh	equ	0xFF4
  6790                           prodl	equ	0xFF3
  6791                           indf0	equ	0xFEF
  6792                           postinc0	equ	0xFEE
  6793                           fsr0h	equ	0xFEA
  6794                           fsr0l	equ	0xFE9
  6795                           wreg	equ	0xFE8
  6796                           postdec1	equ	0xFE5
  6797                           fsr1l	equ	0xFE1
  6798                           indf2	equ	0xFDF
  6799                           postinc2	equ	0xFDE
  6800                           postdec2	equ	0xFDD
  6801                           fsr2h	equ	0xFDA
  6802                           fsr2l	equ	0xFD9
  6803                           status	equ	0xFD8
  6804                           
  6805 ;; *************** function _clear_keyboard *****************
  6806 ;; Defined at:
  6807 ;;		line 4 in file "keyboard.c"
  6808 ;; Parameters:    Size  Location     Type
  6809 ;;		None
  6810 ;; Auto vars:     Size  Location     Type
  6811 ;;		None
  6812 ;; Return value:  Size  Location     Type
  6813 ;;		None               void
  6814 ;; Registers used:
  6815 ;;		wreg, status,2
  6816 ;; Tracked objects:
  6817 ;;		On entry : 0/0
  6818 ;;		On exit  : 0/0
  6819 ;;		Unchanged: 0/0
  6820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6822 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6824 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6825 ;;Total ram usage:        0 bytes
  6826 ;; Hardware stack levels used:    1
  6827 ;; This function calls:
  6828 ;;		Nothing
  6829 ;; This function is called by:
  6830 ;;		_next_code
  6831 ;; This function uses a non-reentrant model
  6832 ;;
  6833                           
  6834                           	psect	text37
  6835  00311E                     __ptext37:
  6836                           	opt stack 0
  6837  00311E                     _clear_keyboard:
  6838                           	opt stack 27
  6839                           
  6840                           ;keyboard.c: 5: key = 18;
  6841                           
  6842                           ;incstack = 0
  6843  00311E  0E12               	movlw	18
  6844  003120  0100               	movlb	0	; () banked
  6845  003122  6FCD               	movwf	_key& (0+255),b
  6846                           
  6847                           ; BSR set to: 0
  6848  003124  0012               	return		;funcret
  6849  003126                     __end_of_clear_keyboard:
  6850                           	opt stack 0
  6851                           tblptru	equ	0xFF8
  6852                           tblptrh	equ	0xFF7
  6853                           tblptrl	equ	0xFF6
  6854                           tablat	equ	0xFF5
  6855                           prodh	equ	0xFF4
  6856                           prodl	equ	0xFF3
  6857                           indf0	equ	0xFEF
  6858                           postinc0	equ	0xFEE
  6859                           fsr0h	equ	0xFEA
  6860                           fsr0l	equ	0xFE9
  6861                           wreg	equ	0xFE8
  6862                           postdec1	equ	0xFE5
  6863                           fsr1l	equ	0xFE1
  6864                           indf2	equ	0xFDF
  6865                           postinc2	equ	0xFDE
  6866                           postdec2	equ	0xFDD
  6867                           fsr2h	equ	0xFDA
  6868                           fsr2l	equ	0xFD9
  6869                           status	equ	0xFD8
  6870                           
  6871 ;; *************** function ___lbtoft *****************
  6872 ;; Defined at:
  6873 ;;		line 27 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lbtoft.c"
  6874 ;; Parameters:    Size  Location     Type
  6875 ;;  c               1    wreg     unsigned char 
  6876 ;; Auto vars:     Size  Location     Type
  6877 ;;  c               1   11[COMRAM] unsigned char 
  6878 ;; Return value:  Size  Location     Type
  6879 ;;                  3    8[COMRAM] float 
  6880 ;; Registers used:
  6881 ;;		wreg, status,2, status,0, cstack
  6882 ;; Tracked objects:
  6883 ;;		On entry : 0/0
  6884 ;;		On exit  : 0/0
  6885 ;;		Unchanged: 0/0
  6886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6887 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6888 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6890 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6891 ;;Total ram usage:        4 bytes
  6892 ;; Hardware stack levels used:    1
  6893 ;; Hardware stack levels required when called:    1
  6894 ;; This function calls:
  6895 ;;		___ftpack
  6896 ;; This function is called by:
  6897 ;;		_obtain_pass
  6898 ;; This function uses a non-reentrant model
  6899 ;;
  6900                           
  6901                           	psect	text38
  6902  002FE0                     __ptext38:
  6903                           	opt stack 0
  6904  002FE0                     ___lbtoft:
  6905                           	opt stack 27
  6906                           
  6907                           ; BSR set to: 0
  6908                           ;incstack = 0
  6909                           ;___lbtoft@c stored from wreg
  6910  002FE0  6E0C               	movwf	___lbtoft@c,c
  6911  002FE2  500C               	movf	___lbtoft@c,w,c
  6912  002FE4  6E01               	movwf	___ftpack@arg,c
  6913  002FE6  6A02               	clrf	___ftpack@arg+1,c
  6914  002FE8  6A03               	clrf	___ftpack@arg+2,c
  6915  002FEA  0E8E               	movlw	142
  6916  002FEC  6E04               	movwf	___ftpack@exp,c
  6917  002FEE  0E00               	movlw	0
  6918  002FF0  6E05               	movwf	___ftpack@sign,c
  6919  002FF2  EC2F  F013         	call	___ftpack	;wreg free
  6920  002FF6  C001  F009         	movff	?___ftpack,?___lbtoft
  6921  002FFA  C002  F00A         	movff	?___ftpack+1,?___lbtoft+1
  6922  002FFE  C003  F00B         	movff	?___ftpack+2,?___lbtoft+2
  6923  003002  0012               	return	
  6924  003004  0012               	return		;funcret
  6925  003006                     __end_of___lbtoft:
  6926                           	opt stack 0
  6927                           tblptru	equ	0xFF8
  6928                           tblptrh	equ	0xFF7
  6929                           tblptrl	equ	0xFF6
  6930                           tablat	equ	0xFF5
  6931                           prodh	equ	0xFF4
  6932                           prodl	equ	0xFF3
  6933                           indf0	equ	0xFEF
  6934                           postinc0	equ	0xFEE
  6935                           fsr0h	equ	0xFEA
  6936                           fsr0l	equ	0xFE9
  6937                           wreg	equ	0xFE8
  6938                           postdec1	equ	0xFE5
  6939                           fsr1l	equ	0xFE1
  6940                           indf2	equ	0xFDF
  6941                           postinc2	equ	0xFDE
  6942                           postdec2	equ	0xFDD
  6943                           fsr2h	equ	0xFDA
  6944                           fsr2l	equ	0xFD9
  6945                           status	equ	0xFD8
  6946                           
  6947 ;; *************** function ___ftpack *****************
  6948 ;; Defined at:
  6949 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\float.c"
  6950 ;; Parameters:    Size  Location     Type
  6951 ;;  arg             3    0[COMRAM] unsigned um
  6952 ;;  exp             1    3[COMRAM] unsigned char 
  6953 ;;  sign            1    4[COMRAM] unsigned char 
  6954 ;; Auto vars:     Size  Location     Type
  6955 ;;		None
  6956 ;; Return value:  Size  Location     Type
  6957 ;;                  3    0[COMRAM] float 
  6958 ;; Registers used:
  6959 ;;		wreg, status,2, status,0
  6960 ;; Tracked objects:
  6961 ;;		On entry : 0/0
  6962 ;;		On exit  : 0/0
  6963 ;;		Unchanged: 0/0
  6964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6965 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6967 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6968 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6969 ;;Total ram usage:        8 bytes
  6970 ;; Hardware stack levels used:    1
  6971 ;; This function calls:
  6972 ;;		Nothing
  6973 ;; This function is called by:
  6974 ;;		___altoft
  6975 ;;		___awtoft
  6976 ;;		___ftadd
  6977 ;;		___ftdiv
  6978 ;;		___ftmul
  6979 ;;		___lbtoft
  6980 ;;		___lltoft
  6981 ;; This function uses a non-reentrant model
  6982 ;;
  6983                           
  6984                           	psect	text39
  6985  00265E                     __ptext39:
  6986                           	opt stack 0
  6987  00265E                     ___ftpack:
  6988                           	opt stack 24
  6989                           
  6990                           ;incstack = 0
  6991  00265E  5004               	movf	___ftpack@exp,w,c
  6992  002660  B4D8               	btfsc	status,2,c
  6993  002662  D005               	goto	l2911
  6994  002664  5001               	movf	___ftpack@arg,w,c
  6995  002666  1002               	iorwf	___ftpack@arg+1,w,c
  6996  002668  1003               	iorwf	___ftpack@arg+2,w,c
  6997  00266A  A4D8               	btfss	status,2,c
  6998  00266C  D00E               	goto	l2917
  6999  00266E                     l2911:
  7000  00266E  0E00               	movlw	0
  7001  002670  6E01               	movwf	?___ftpack,c
  7002  002672  0E00               	movlw	0
  7003  002674  6E02               	movwf	?___ftpack+1,c
  7004  002676  0E00               	movlw	0
  7005  002678  6E03               	movwf	?___ftpack+2,c
  7006  00267A  0012               	return	
  7007  00267C  D006               	goto	l2917
  7008  00267E                     l2915:
  7009  00267E  2A04               	incf	___ftpack@exp,f,c
  7010  002680  90D8               	bcf	status,0,c
  7011  002682  3203               	rrcf	___ftpack@arg+2,f,c
  7012  002684  3202               	rrcf	___ftpack@arg+1,f,c
  7013  002686  3201               	rrcf	___ftpack@arg,f,c
  7014  002688  D000               	goto	l2917
  7015  00268A                     l2917:
  7016  00268A  0E00               	movlw	0
  7017  00268C  1401               	andwf	___ftpack@arg,w,c
  7018  00268E  6E06               	movwf	??___ftpack& (0+255),c
  7019  002690  0E00               	movlw	0
  7020  002692  1402               	andwf	___ftpack@arg+1,w,c
  7021  002694  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7022  002696  0EFE               	movlw	254
  7023  002698  1403               	andwf	___ftpack@arg+2,w,c
  7024  00269A  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7025  00269C  5006               	movf	??___ftpack,w,c
  7026  00269E  1007               	iorwf	??___ftpack+1,w,c
  7027  0026A0  1008               	iorwf	??___ftpack+2,w,c
  7028  0026A2  B4D8               	btfsc	status,2,c
  7029  0026A4  D00E               	goto	l2923
  7030  0026A6  D7EB               	goto	l2915
  7031  0026A8  D00C               	goto	l2923
  7032  0026AA                     l2919:
  7033  0026AA  2A04               	incf	___ftpack@exp,f,c
  7034  0026AC  0E01               	movlw	1
  7035  0026AE  2601               	addwf	___ftpack@arg,f,c
  7036  0026B0  0E00               	movlw	0
  7037  0026B2  2202               	addwfc	___ftpack@arg+1,f,c
  7038  0026B4  0E00               	movlw	0
  7039  0026B6  2203               	addwfc	___ftpack@arg+2,f,c
  7040  0026B8  90D8               	bcf	status,0,c
  7041  0026BA  3203               	rrcf	___ftpack@arg+2,f,c
  7042  0026BC  3202               	rrcf	___ftpack@arg+1,f,c
  7043  0026BE  3201               	rrcf	___ftpack@arg,f,c
  7044  0026C0  D000               	goto	l2923
  7045  0026C2                     l2923:
  7046  0026C2  0E00               	movlw	0
  7047  0026C4  1401               	andwf	___ftpack@arg,w,c
  7048  0026C6  6E06               	movwf	??___ftpack& (0+255),c
  7049  0026C8  0E00               	movlw	0
  7050  0026CA  1402               	andwf	___ftpack@arg+1,w,c
  7051  0026CC  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7052  0026CE  0EFF               	movlw	255
  7053  0026D0  1403               	andwf	___ftpack@arg+2,w,c
  7054  0026D2  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7055  0026D4  5006               	movf	??___ftpack,w,c
  7056  0026D6  1007               	iorwf	??___ftpack+1,w,c
  7057  0026D8  1008               	iorwf	??___ftpack+2,w,c
  7058  0026DA  B4D8               	btfsc	status,2,c
  7059  0026DC  D008               	goto	l2927
  7060  0026DE  D7E5               	goto	l2919
  7061  0026E0  D006               	goto	l2927
  7062  0026E2                     l2925:
  7063  0026E2  0604               	decf	___ftpack@exp,f,c
  7064  0026E4  90D8               	bcf	status,0,c
  7065  0026E6  3601               	rlcf	___ftpack@arg,f,c
  7066  0026E8  3602               	rlcf	___ftpack@arg+1,f,c
  7067  0026EA  3603               	rlcf	___ftpack@arg+2,f,c
  7068  0026EC  D000               	goto	l2927
  7069  0026EE                     l2927:
  7070  0026EE  BE02               	btfsc	___ftpack@arg+1,7,c
  7071  0026F0  D004               	goto	l1111
  7072  0026F2  0E02               	movlw	2
  7073  0026F4  6004               	cpfslt	___ftpack@exp,c
  7074  0026F6  D7F5               	goto	l2925
  7075  0026F8  D000               	goto	l1111
  7076  0026FA                     l1111:
  7077  0026FA  B004               	btfsc	___ftpack@exp,0,c
  7078  0026FC  D002               	goto	l2933
  7079  0026FE  9E02               	bcf	___ftpack@arg+1,7,c
  7080  002700  D000               	goto	l2933
  7081  002702                     l2933:
  7082  002702  90D8               	bcf	status,0,c
  7083  002704  3204               	rrcf	___ftpack@exp,f,c
  7084  002706  5004               	movf	___ftpack@exp,w,c
  7085  002708  1203               	iorwf	___ftpack@arg+2,f,c
  7086  00270A  5005               	movf	___ftpack@sign,w,c
  7087  00270C  B4D8               	btfsc	status,2,c
  7088  00270E  D002               	goto	l2939
  7089  002710  8E03               	bsf	___ftpack@arg+2,7,c
  7090  002712  D000               	goto	l2939
  7091  002714                     l2939:
  7092  002714  C001  F001         	movff	___ftpack@arg,?___ftpack
  7093  002718  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  7094  00271C  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  7095  002720  0012               	return	
  7096  002722  0012               	return		;funcret
  7097  002724                     __end_of___ftpack:
  7098                           	opt stack 0
  7099                           tblptru	equ	0xFF8
  7100                           tblptrh	equ	0xFF7
  7101                           tblptrl	equ	0xFF6
  7102                           tablat	equ	0xFF5
  7103                           prodh	equ	0xFF4
  7104                           prodl	equ	0xFF3
  7105                           indf0	equ	0xFEF
  7106                           postinc0	equ	0xFEE
  7107                           fsr0h	equ	0xFEA
  7108                           fsr0l	equ	0xFE9
  7109                           wreg	equ	0xFE8
  7110                           postdec1	equ	0xFE5
  7111                           fsr1l	equ	0xFE1
  7112                           indf2	equ	0xFDF
  7113                           postinc2	equ	0xFDE
  7114                           postdec2	equ	0xFDD
  7115                           fsr2h	equ	0xFDA
  7116                           fsr2l	equ	0xFD9
  7117                           status	equ	0xFD8
  7118                           
  7119 ;; *************** function _not_fill_pass *****************
  7120 ;; Defined at:
  7121 ;;		line 34 in file "lcd_vision.c"
  7122 ;; Parameters:    Size  Location     Type
  7123 ;;  digit           2    0[COMRAM] short 
  7124 ;; Auto vars:     Size  Location     Type
  7125 ;;		None
  7126 ;; Return value:  Size  Location     Type
  7127 ;;                  1    wreg      unsigned char 
  7128 ;; Registers used:
  7129 ;;		wreg, status,2, status,0
  7130 ;; Tracked objects:
  7131 ;;		On entry : 0/0
  7132 ;;		On exit  : 0/0
  7133 ;;		Unchanged: 0/0
  7134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7135 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7138 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7139 ;;Total ram usage:        2 bytes
  7140 ;; Hardware stack levels used:    1
  7141 ;; This function calls:
  7142 ;;		Nothing
  7143 ;; This function is called by:
  7144 ;;		_set_vision
  7145 ;; This function uses a non-reentrant model
  7146 ;;
  7147                           
  7148                           	psect	text40
  7149  0030B6                     __ptext40:
  7150                           	opt stack 0
  7151  0030B6                     _not_fill_pass:
  7152                           	opt stack 29
  7153                           
  7154                           ;lcd_vision.c: 35: return digit !=16;
  7155                           
  7156                           ;incstack = 0
  7157  0030B6  0E10               	movlw	16
  7158  0030B8  1801               	xorwf	not_fill_pass@digit,w,c
  7159  0030BA  1002               	iorwf	not_fill_pass@digit+1,w,c
  7160  0030BC  B4D8               	btfsc	status,2,c
  7161  0030BE  D002               	goto	u4100
  7162  0030C0  0E01               	movlw	1
  7163  0030C2  0012               	return	
  7164  0030C4                     u4100:
  7165  0030C4  0E00               	movlw	0
  7166  0030C6  0012               	return	
  7167  0030C8  0012               	return		;funcret
  7168  0030CA                     __end_of_not_fill_pass:
  7169                           	opt stack 0
  7170                           tblptru	equ	0xFF8
  7171                           tblptrh	equ	0xFF7
  7172                           tblptrl	equ	0xFF6
  7173                           tablat	equ	0xFF5
  7174                           prodh	equ	0xFF4
  7175                           prodl	equ	0xFF3
  7176                           indf0	equ	0xFEF
  7177                           postinc0	equ	0xFEE
  7178                           fsr0h	equ	0xFEA
  7179                           fsr0l	equ	0xFE9
  7180                           wreg	equ	0xFE8
  7181                           postdec1	equ	0xFE5
  7182                           fsr1l	equ	0xFE1
  7183                           indf2	equ	0xFDF
  7184                           postinc2	equ	0xFDE
  7185                           postdec2	equ	0xFDD
  7186                           fsr2h	equ	0xFDA
  7187                           fsr2l	equ	0xFD9
  7188                           status	equ	0xFD8
  7189                           
  7190 ;; *************** function _is_not_letter *****************
  7191 ;; Defined at:
  7192 ;;		line 30 in file "lcd_vision.c"
  7193 ;; Parameters:    Size  Location     Type
  7194 ;;  input           1    wreg     unsigned char 
  7195 ;; Auto vars:     Size  Location     Type
  7196 ;;  input           1    1[COMRAM] unsigned char 
  7197 ;; Return value:  Size  Location     Type
  7198 ;;                  1    wreg      unsigned char 
  7199 ;; Registers used:
  7200 ;;		wreg, status,2, status,0
  7201 ;; Tracked objects:
  7202 ;;		On entry : 0/0
  7203 ;;		On exit  : 0/0
  7204 ;;		Unchanged: 0/0
  7205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7207 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7209 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7210 ;;Total ram usage:        2 bytes
  7211 ;; Hardware stack levels used:    1
  7212 ;; This function calls:
  7213 ;;		Nothing
  7214 ;; This function is called by:
  7215 ;;		_set_vision
  7216 ;; This function uses a non-reentrant model
  7217 ;;
  7218                           
  7219                           	psect	text41
  7220  002F36                     __ptext41:
  7221                           	opt stack 0
  7222  002F36                     _is_not_letter:
  7223                           	opt stack 29
  7224                           
  7225                           ;incstack = 0
  7226                           ;is_not_letter@input stored from wreg
  7227  002F36  6E02               	movwf	is_not_letter@input,c
  7228                           
  7229                           ;lcd_vision.c: 31: return input != 16 && input != 11 && input !=12 && input!=13;
  7230  002F38  0E00               	movlw	0
  7231  002F3A  6E01               	movwf	_is_not_letter$1329,c
  7232  002F3C  0E10               	movlw	16
  7233  002F3E  1802               	xorwf	is_not_letter@input,w,c
  7234  002F40  B4D8               	btfsc	status,2,c
  7235  002F42  D00E               	goto	l587
  7236  002F44  0E0B               	movlw	11
  7237  002F46  1802               	xorwf	is_not_letter@input,w,c
  7238  002F48  B4D8               	btfsc	status,2,c
  7239  002F4A  D00A               	goto	l587
  7240  002F4C  0E0C               	movlw	12
  7241  002F4E  1802               	xorwf	is_not_letter@input,w,c
  7242  002F50  B4D8               	btfsc	status,2,c
  7243  002F52  D006               	goto	l587
  7244  002F54  0E0D               	movlw	13
  7245  002F56  1802               	xorwf	is_not_letter@input,w,c
  7246  002F58  B4D8               	btfsc	status,2,c
  7247  002F5A  D002               	goto	l587
  7248  002F5C  0E01               	movlw	1
  7249  002F5E  6E01               	movwf	_is_not_letter$1329,c
  7250  002F60                     l587:
  7251  002F60  5001               	movf	_is_not_letter$1329,w,c
  7252  002F62  0012               	return	
  7253  002F64  0012               	return		;funcret
  7254  002F66                     __end_of_is_not_letter:
  7255                           	opt stack 0
  7256                           tblptru	equ	0xFF8
  7257                           tblptrh	equ	0xFF7
  7258                           tblptrl	equ	0xFF6
  7259                           tablat	equ	0xFF5
  7260                           prodh	equ	0xFF4
  7261                           prodl	equ	0xFF3
  7262                           indf0	equ	0xFEF
  7263                           postinc0	equ	0xFEE
  7264                           fsr0h	equ	0xFEA
  7265                           fsr0l	equ	0xFE9
  7266                           wreg	equ	0xFE8
  7267                           postdec1	equ	0xFE5
  7268                           fsr1l	equ	0xFE1
  7269                           indf2	equ	0xFDF
  7270                           postinc2	equ	0xFDE
  7271                           postdec2	equ	0xFDD
  7272                           fsr2h	equ	0xFDA
  7273                           fsr2l	equ	0xFD9
  7274                           status	equ	0xFD8
  7275                           
  7276 ;; *************** function _clear *****************
  7277 ;; Defined at:
  7278 ;;		line 7 in file "lcd_vision.c"
  7279 ;; Parameters:    Size  Location     Type
  7280 ;;		None
  7281 ;; Auto vars:     Size  Location     Type
  7282 ;;		None
  7283 ;; Return value:  Size  Location     Type
  7284 ;;		None               void
  7285 ;; Registers used:
  7286 ;;		wreg, status,2, status,0, cstack
  7287 ;; Tracked objects:
  7288 ;;		On entry : 0/0
  7289 ;;		On exit  : 0/0
  7290 ;;		Unchanged: 0/0
  7291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7294 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7295 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7296 ;;Total ram usage:        1 bytes
  7297 ;; Hardware stack levels used:    1
  7298 ;; Hardware stack levels required when called:    3
  7299 ;; This function calls:
  7300 ;;		_lcd_comand
  7301 ;; This function is called by:
  7302 ;;		_set_vision
  7303 ;; This function uses a non-reentrant model
  7304 ;;
  7305                           
  7306                           	psect	text42
  7307  00308C                     __ptext42:
  7308                           	opt stack 0
  7309  00308C                     _clear:
  7310                           	opt stack 26
  7311                           
  7312                           ;lcd_vision.c: 8: lcd_comand(0b00000001);
  7313                           
  7314                           ;incstack = 0
  7315  00308C  0E01               	movlw	1
  7316  00308E  EC88  F018         	call	_lcd_comand
  7317                           
  7318                           ;lcd_vision.c: 9: _delay((unsigned long)((5)*(8000000/4000.0)));
  7319  003092  0E0D               	movlw	13
  7320  003094  6E06               	movwf	??_clear& (0+255),c
  7321  003096  0EFC               	movlw	252
  7322  003098                     u4387:
  7323  003098  2EE8               	decfsz	wreg,f,c
  7324  00309A  D7FE               	goto	u4387
  7325  00309C  2E06               	decfsz	??_clear& (0+255),f,c
  7326  00309E  D7FC               	goto	u4387
  7327  0030A0  0012               	return		;funcret
  7328  0030A2                     __end_of_clear:
  7329                           	opt stack 0
  7330                           tblptru	equ	0xFF8
  7331                           tblptrh	equ	0xFF7
  7332                           tblptrl	equ	0xFF6
  7333                           tablat	equ	0xFF5
  7334                           prodh	equ	0xFF4
  7335                           prodl	equ	0xFF3
  7336                           indf0	equ	0xFEF
  7337                           postinc0	equ	0xFEE
  7338                           fsr0h	equ	0xFEA
  7339                           fsr0l	equ	0xFE9
  7340                           wreg	equ	0xFE8
  7341                           postdec1	equ	0xFE5
  7342                           fsr1l	equ	0xFE1
  7343                           indf2	equ	0xFDF
  7344                           postinc2	equ	0xFDE
  7345                           postdec2	equ	0xFDD
  7346                           fsr2h	equ	0xFDA
  7347                           fsr2l	equ	0xFD9
  7348                           status	equ	0xFD8
  7349                           
  7350 ;; *************** function _caratula *****************
  7351 ;; Defined at:
  7352 ;;		line 31 in file "main.c"
  7353 ;; Parameters:    Size  Location     Type
  7354 ;;		None
  7355 ;; Auto vars:     Size  Location     Type
  7356 ;;		None
  7357 ;; Return value:  Size  Location     Type
  7358 ;;		None               void
  7359 ;; Registers used:
  7360 ;;		wreg, status,2, status,0, cstack
  7361 ;; Tracked objects:
  7362 ;;		On entry : 0/0
  7363 ;;		On exit  : 0/0
  7364 ;;		Unchanged: 0/0
  7365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7367 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7369 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7370 ;;Total ram usage:        0 bytes
  7371 ;; Hardware stack levels used:    1
  7372 ;; Hardware stack levels required when called:    3
  7373 ;; This function calls:
  7374 ;;		_lcd_comand
  7375 ;; This function is called by:
  7376 ;;		_main
  7377 ;; This function uses a non-reentrant model
  7378 ;;
  7379                           
  7380                           	psect	text43
  7381  003126                     __ptext43:
  7382                           	opt stack 0
  7383  003126                     _caratula:
  7384                           	opt stack 27
  7385                           
  7386                           ;main.c: 33: lcd_comand(0b00001100);
  7387                           
  7388                           ;incstack = 0
  7389  003126  0E0C               	movlw	12
  7390  003128  EC88  F018         	call	_lcd_comand
  7391  00312C  0012               	return		;funcret
  7392  00312E                     __end_of_caratula:
  7393                           	opt stack 0
  7394                           tblptru	equ	0xFF8
  7395                           tblptrh	equ	0xFF7
  7396                           tblptrl	equ	0xFF6
  7397                           tablat	equ	0xFF5
  7398                           prodh	equ	0xFF4
  7399                           prodl	equ	0xFF3
  7400                           indf0	equ	0xFEF
  7401                           postinc0	equ	0xFEE
  7402                           fsr0h	equ	0xFEA
  7403                           fsr0l	equ	0xFE9
  7404                           wreg	equ	0xFE8
  7405                           postdec1	equ	0xFE5
  7406                           fsr1l	equ	0xFE1
  7407                           indf2	equ	0xFDF
  7408                           postinc2	equ	0xFDE
  7409                           postdec2	equ	0xFDD
  7410                           fsr2h	equ	0xFDA
  7411                           fsr2l	equ	0xFD9
  7412                           status	equ	0xFD8
  7413                           
  7414 ;; *************** function _Setup *****************
  7415 ;; Defined at:
  7416 ;;		line 51 in file "main.c"
  7417 ;; Parameters:    Size  Location     Type
  7418 ;;		None
  7419 ;; Auto vars:     Size  Location     Type
  7420 ;;		None
  7421 ;; Return value:  Size  Location     Type
  7422 ;;		None               void
  7423 ;; Registers used:
  7424 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7425 ;; Tracked objects:
  7426 ;;		On entry : 0/0
  7427 ;;		On exit  : 0/0
  7428 ;;		Unchanged: 0/0
  7429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7433 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7434 ;;Total ram usage:        0 bytes
  7435 ;; Hardware stack levels used:    1
  7436 ;; Hardware stack levels required when called:    3
  7437 ;; This function calls:
  7438 ;;		_Write_RTC
  7439 ;;		_lcd_comand
  7440 ;;		_lcd_init
  7441 ;; This function is called by:
  7442 ;;		_main
  7443 ;; This function uses a non-reentrant model
  7444 ;;
  7445                           
  7446                           	psect	text44
  7447  002E02                     __ptext44:
  7448                           	opt stack 0
  7449  002E02                     _Setup:
  7450                           	opt stack 27
  7451                           
  7452                           ;main.c: 53: OSCTUNEbits.INTSRC=1;
  7453                           
  7454                           ;incstack = 0
  7455  002E02  8E9B               	bsf	3995,7,c	;volatile
  7456                           
  7457                           ;main.c: 54: OSCTUNEbits.PLLEN=0;
  7458  002E04  9C9B               	bcf	3995,6,c	;volatile
  7459                           
  7460                           ;main.c: 55: OSCCONbits.IRCF0=1;
  7461  002E06  88D3               	bsf	4051,4,c	;volatile
  7462                           
  7463                           ;main.c: 56: OSCCONbits.IRCF1=1;
  7464  002E08  8AD3               	bsf	4051,5,c	;volatile
  7465                           
  7466                           ;main.c: 57: OSCCONbits.IRCF2=1;
  7467  002E0A  8CD3               	bsf	4051,6,c	;volatile
  7468                           
  7469                           ;main.c: 58: OSCCONbits.SCS0=0;
  7470  002E0C  90D3               	bcf	4051,0,c	;volatile
  7471                           
  7472                           ;main.c: 59: OSCCONbits.SCS1=0;
  7473  002E0E  92D3               	bcf	4051,1,c	;volatile
  7474                           
  7475                           ;main.c: 60: TRISA = 0b11110000;
  7476  002E10  0EF0               	movlw	240
  7477  002E12  6E92               	movwf	3986,c	;volatile
  7478                           
  7479                           ;main.c: 61: TRISB = 0;
  7480  002E14  0E00               	movlw	0
  7481  002E16  6E93               	movwf	3987,c	;volatile
  7482                           
  7483                           ;main.c: 62: TRISC = 0b0110111;
  7484  002E18  0E37               	movlw	55
  7485  002E1A  6E94               	movwf	3988,c	;volatile
  7486                           
  7487                           ;main.c: 66: ANCON0=0b11111111;
  7488  002E1C  010F               	movlb	15	; () banked
  7489  002E1E  6948               	setf	72,b	;volatile
  7490                           
  7491                           ; BSR set to: 15
  7492                           ;main.c: 68: ANCON1=0b11111111;
  7493  002E20  010F               	movlb	15	; () banked
  7494  002E22  6949               	setf	73,b	;volatile
  7495                           
  7496                           ;main.c: 69: ADCON0=0b00101101;
  7497  002E24  0E2D               	movlw	45
  7498  002E26  6EC2               	movwf	4034,c	;volatile
  7499                           
  7500                           ;main.c: 70: ADCON1=0b00010000;
  7501  002E28  0E10               	movlw	16
  7502  002E2A  6EC1               	movwf	4033,c	;volatile
  7503                           
  7504                           ; BSR set to: 15
  7505                           ;main.c: 71: RTCCFGbits.RTCEN=1;
  7506  002E2C  010F               	movlb	15	; () banked
  7507  002E2E  8F3F               	bsf	63,7,b	;volatile
  7508                           
  7509                           ; BSR set to: 15
  7510                           ;main.c: 72: RTCCFGbits.RTCWREN=1;
  7511  002E30  010F               	movlb	15	; () banked
  7512  002E32  8B3F               	bsf	63,5,b	;volatile
  7513                           
  7514                           ; BSR set to: 15
  7515                           ;main.c: 73: T1CONbits.T1OSCEN=1;
  7516  002E34  86CD               	bsf	4045,3,c	;volatile
  7517                           
  7518                           ; BSR set to: 15
  7519                           ;main.c: 74: Write_RTC();
  7520  002E36  EC46  F00C         	call	_Write_RTC	;wreg free
  7521                           
  7522                           ;main.c: 75: lcd_init();
  7523  002E3A  ECB3  F014         	call	_lcd_init	;wreg free
  7524                           
  7525                           ;main.c: 76: lcd_comand(0b00001100);
  7526  002E3E  0E0C               	movlw	12
  7527  002E40  EC88  F018         	call	_lcd_comand
  7528                           
  7529                           ;main.c: 77: LATBbits.LATB1 = 1;;
  7530  002E44  828A               	bsf	3978,1,c	;volatile
  7531                           
  7532                           ;main.c: 78: LATBbits.LATB0 = 1;;
  7533  002E46  808A               	bsf	3978,0,c	;volatile
  7534  002E48  0012               	return		;funcret
  7535  002E4A                     __end_of_Setup:
  7536                           	opt stack 0
  7537                           tblptru	equ	0xFF8
  7538                           tblptrh	equ	0xFF7
  7539                           tblptrl	equ	0xFF6
  7540                           tablat	equ	0xFF5
  7541                           prodh	equ	0xFF4
  7542                           prodl	equ	0xFF3
  7543                           indf0	equ	0xFEF
  7544                           postinc0	equ	0xFEE
  7545                           fsr0h	equ	0xFEA
  7546                           fsr0l	equ	0xFE9
  7547                           wreg	equ	0xFE8
  7548                           postdec1	equ	0xFE5
  7549                           fsr1l	equ	0xFE1
  7550                           indf2	equ	0xFDF
  7551                           postinc2	equ	0xFDE
  7552                           postdec2	equ	0xFDD
  7553                           fsr2h	equ	0xFDA
  7554                           fsr2l	equ	0xFD9
  7555                           status	equ	0xFD8
  7556                           
  7557 ;; *************** function _lcd_init *****************
  7558 ;; Defined at:
  7559 ;;		line 119 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  7560 ;; Parameters:    Size  Location     Type
  7561 ;;		None
  7562 ;; Auto vars:     Size  Location     Type
  7563 ;;  i               1    4[COMRAM] unsigned char 
  7564 ;; Return value:  Size  Location     Type
  7565 ;;		None               void
  7566 ;; Registers used:
  7567 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7568 ;; Tracked objects:
  7569 ;;		On entry : 0/0
  7570 ;;		On exit  : 0/0
  7571 ;;		Unchanged: 0/0
  7572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7574 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7576 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7577 ;;Total ram usage:        1 bytes
  7578 ;; Hardware stack levels used:    1
  7579 ;; Hardware stack levels required when called:    2
  7580 ;; This function calls:
  7581 ;;		_Delay1KTCYx
  7582 ;;		_lcd_send_byte
  7583 ;;		_lcd_send_nibble
  7584 ;; This function is called by:
  7585 ;;		_Setup
  7586 ;; This function uses a non-reentrant model
  7587 ;;
  7588                           
  7589                           	psect	text45
  7590  002966                     __ptext45:
  7591                           	opt stack 0
  7592  002966                     _lcd_init:
  7593                           	opt stack 27
  7594                           
  7595                           ;unmc_lcd_216.c: 120: int8 i;
  7596                           ;unmc_lcd_216.c: 122: TRISBbits.TRISB3=0;
  7597                           
  7598                           ;incstack = 0
  7599  002966  9693               	bcf	3987,3,c	;volatile
  7600                           
  7601                           ;unmc_lcd_216.c: 123: TRISBbits.TRISB2=0;
  7602  002968  9493               	bcf	3987,2,c	;volatile
  7603                           
  7604                           ;unmc_lcd_216.c: 128: LATBbits.LATB3=0;
  7605  00296A  968A               	bcf	3978,3,c	;volatile
  7606                           
  7607                           ;unmc_lcd_216.c: 129: LATBbits.LATB2=0;
  7608  00296C  948A               	bcf	3978,2,c	;volatile
  7609                           
  7610                           ;unmc_lcd_216.c: 134: TRISBbits.TRISB4=0;
  7611  00296E  9893               	bcf	3987,4,c	;volatile
  7612                           
  7613                           ;unmc_lcd_216.c: 135: TRISBbits.TRISB5=0;
  7614  002970  9A93               	bcf	3987,5,c	;volatile
  7615                           
  7616                           ;unmc_lcd_216.c: 136: TRISBbits.TRISB6=0;
  7617  002972  9C93               	bcf	3987,6,c	;volatile
  7618                           
  7619                           ;unmc_lcd_216.c: 137: TRISBbits.TRISB7=0;
  7620  002974  9E93               	bcf	3987,7,c	;volatile
  7621                           
  7622                           ;unmc_lcd_216.c: 139: Delay1KTCYx(8000000UL/800000UL);
  7623  002976  0E0A               	movlw	10
  7624  002978  EC65  F018         	call	_Delay1KTCYx
  7625                           
  7626                           ;unmc_lcd_216.c: 140: Delay1KTCYx(8000000UL/800000UL);
  7627  00297C  0E0A               	movlw	10
  7628  00297E  EC65  F018         	call	_Delay1KTCYx
  7629                           
  7630                           ;unmc_lcd_216.c: 141: Delay1KTCYx(8000000UL/800000UL);
  7631  002982  0E0A               	movlw	10
  7632  002984  EC65  F018         	call	_Delay1KTCYx
  7633                           
  7634                           ;unmc_lcd_216.c: 143: for(i=0 ;i < 3; i++){
  7635  002988  0E00               	movlw	0
  7636  00298A  6E05               	movwf	lcd_init@i,c
  7637  00298C                     l3951:
  7638  00298C  0E02               	movlw	2
  7639  00298E  6405               	cpfsgt	lcd_init@i,c
  7640  002990  D001               	goto	l3955
  7641  002992  D008               	goto	l3961
  7642  002994                     l3955:
  7643                           
  7644                           ;unmc_lcd_216.c: 144: lcd_send_nibble(0x03);
  7645  002994  0E03               	movlw	3
  7646  002996  EC70  F015         	call	_lcd_send_nibble
  7647                           
  7648                           ;unmc_lcd_216.c: 145: Delay1KTCYx(8000000UL/800000UL);
  7649  00299A  0E0A               	movlw	10
  7650  00299C  EC65  F018         	call	_Delay1KTCYx
  7651  0029A0  2A05               	incf	lcd_init@i,f,c
  7652  0029A2  D7F4               	goto	l3951
  7653  0029A4                     l3961:
  7654                           
  7655                           ;unmc_lcd_216.c: 146: }
  7656                           ;unmc_lcd_216.c: 148: lcd_send_nibble(0x02);
  7657  0029A4  0E02               	movlw	2
  7658  0029A6  EC70  F015         	call	_lcd_send_nibble
  7659                           
  7660                           ;unmc_lcd_216.c: 150: for(i=0; i < sizeof(LCD_INIT_STRING); i++){
  7661  0029AA  0E00               	movlw	0
  7662  0029AC  6E05               	movwf	lcd_init@i,c
  7663  0029AE  0E03               	movlw	3
  7664  0029B0  6405               	cpfsgt	lcd_init@i,c
  7665  0029B2  D002               	goto	l3969
  7666  0029B4  0012               	return	
  7667  0029B6  0012               	return	
  7668  0029B8                     l3969:
  7669                           
  7670                           ;unmc_lcd_216.c: 151: lcd_send_byte(0, LCD_INIT_STRING[i]);
  7671  0029B8  5005               	movf	lcd_init@i,w,c
  7672  0029BA  0D01               	mullw	1
  7673  0029BC  0E0B               	movlw	low _LCD_INIT_STRING
  7674  0029BE  24F3               	addwf	prodl,w,c
  7675  0029C0  6EF6               	movwf	tblptrl,c
  7676  0029C2  0E0F               	movlw	high _LCD_INIT_STRING
  7677  0029C4  20F4               	addwfc	prodh,w,c
  7678  0029C6  6EF7               	movwf	tblptrh,c
  7679  0029C8                     	if	0	;There are less than 3 active tblptr bytes
  7680  0029C8                     	endif
  7681  0029C8  0008               	tblrd		*
  7682  0029CA  CFF5 F003          	movff	tablat,lcd_send_byte@n
  7683  0029CE  0E00               	movlw	0
  7684  0029D0  EC82  F017         	call	_lcd_send_byte
  7685                           
  7686                           ;unmc_lcd_216.c: 153: Delay1KTCYx(8000000UL/800000UL);
  7687  0029D4  0E0A               	movlw	10
  7688  0029D6  EC65  F018         	call	_Delay1KTCYx
  7689  0029DA  2A05               	incf	lcd_init@i,f,c
  7690  0029DC  0E03               	movlw	3
  7691  0029DE  6405               	cpfsgt	lcd_init@i,c
  7692  0029E0  D7EB               	goto	l3969
  7693  0029E2  0012               	return	
  7694  0029E4  0012               	return		;funcret
  7695  0029E6                     __end_of_lcd_init:
  7696                           	opt stack 0
  7697                           tblptru	equ	0xFF8
  7698                           tblptrh	equ	0xFF7
  7699                           tblptrl	equ	0xFF6
  7700                           tablat	equ	0xFF5
  7701                           prodh	equ	0xFF4
  7702                           prodl	equ	0xFF3
  7703                           indf0	equ	0xFEF
  7704                           postinc0	equ	0xFEE
  7705                           fsr0h	equ	0xFEA
  7706                           fsr0l	equ	0xFE9
  7707                           wreg	equ	0xFE8
  7708                           postdec1	equ	0xFE5
  7709                           fsr1l	equ	0xFE1
  7710                           indf2	equ	0xFDF
  7711                           postinc2	equ	0xFDE
  7712                           postdec2	equ	0xFDD
  7713                           fsr2h	equ	0xFDA
  7714                           fsr2l	equ	0xFD9
  7715                           status	equ	0xFD8
  7716                           
  7717 ;; *************** function _Delay1KTCYx *****************
  7718 ;; Defined at:
  7719 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\d1ktcyx.c"
  7720 ;; Parameters:    Size  Location     Type
  7721 ;;  unit            1    wreg     unsigned char 
  7722 ;; Auto vars:     Size  Location     Type
  7723 ;;  unit            1    0[COMRAM] unsigned char 
  7724 ;; Return value:  Size  Location     Type
  7725 ;;		None               void
  7726 ;; Registers used:
  7727 ;;		wreg
  7728 ;; Tracked objects:
  7729 ;;		On entry : 0/0
  7730 ;;		On exit  : 0/0
  7731 ;;		Unchanged: 0/0
  7732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7734 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7736 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7737 ;;Total ram usage:        1 bytes
  7738 ;; Hardware stack levels used:    1
  7739 ;; This function calls:
  7740 ;;		Nothing
  7741 ;; This function is called by:
  7742 ;;		_lcd_init
  7743 ;;		_DelayPORXLCD
  7744 ;; This function uses a non-reentrant model
  7745 ;;
  7746                           
  7747                           	psect	text46
  7748  0030CA                     __ptext46:
  7749                           	opt stack 0
  7750  0030CA                     _Delay1KTCYx:
  7751                           	opt stack 28
  7752                           
  7753                           ;incstack = 0
  7754                           ;Delay1KTCYx@unit stored from wreg
  7755  0030CA  6E01               	movwf	Delay1KTCYx@unit,c
  7756  0030CC  0EFA               	movlw	250
  7757  0030CE                     u4397:
  7758  0030CE  F000               	nop	
  7759  0030D0  2EE8               	decfsz	wreg,f,c
  7760  0030D2  D7FD               	goto	u4397
  7761  0030D4  2E01               	decfsz	Delay1KTCYx@unit,f,c
  7762  0030D6  D7FA               	goto	l3687
  7763  0030D8  0012               	return	
  7764  0030DA  0012               	return		;funcret
  7765  0030DC                     __end_of_Delay1KTCYx:
  7766                           	opt stack 0
  7767                           tblptru	equ	0xFF8
  7768                           tblptrh	equ	0xFF7
  7769                           tblptrl	equ	0xFF6
  7770                           tablat	equ	0xFF5
  7771                           prodh	equ	0xFF4
  7772                           prodl	equ	0xFF3
  7773                           indf0	equ	0xFEF
  7774                           postinc0	equ	0xFEE
  7775                           fsr0h	equ	0xFEA
  7776                           fsr0l	equ	0xFE9
  7777                           wreg	equ	0xFE8
  7778                           postdec1	equ	0xFE5
  7779                           fsr1l	equ	0xFE1
  7780                           indf2	equ	0xFDF
  7781                           postinc2	equ	0xFDE
  7782                           postdec2	equ	0xFDD
  7783                           fsr2h	equ	0xFDA
  7784                           fsr2l	equ	0xFD9
  7785                           status	equ	0xFD8
  7786                           
  7787 ;; *************** function _lcd_comand *****************
  7788 ;; Defined at:
  7789 ;;		line 189 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  7790 ;; Parameters:    Size  Location     Type
  7791 ;;  d               1    wreg     unsigned char 
  7792 ;; Auto vars:     Size  Location     Type
  7793 ;;  d               1    4[COMRAM] unsigned char 
  7794 ;; Return value:  Size  Location     Type
  7795 ;;		None               void
  7796 ;; Registers used:
  7797 ;;		wreg, status,2, status,0, cstack
  7798 ;; Tracked objects:
  7799 ;;		On entry : 0/0
  7800 ;;		On exit  : 0/0
  7801 ;;		Unchanged: 0/0
  7802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7804 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7806 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7807 ;;Total ram usage:        1 bytes
  7808 ;; Hardware stack levels used:    1
  7809 ;; Hardware stack levels required when called:    2
  7810 ;; This function calls:
  7811 ;;		_lcd_send_byte
  7812 ;; This function is called by:
  7813 ;;		_caratula
  7814 ;;		_Setup
  7815 ;;		_clear
  7816 ;; This function uses a non-reentrant model
  7817 ;;
  7818                           
  7819                           	psect	text47
  7820  003110                     __ptext47:
  7821                           	opt stack 0
  7822  003110                     _lcd_comand:
  7823                           	opt stack 26
  7824                           
  7825                           ;incstack = 0
  7826                           ;lcd_comand@d stored from wreg
  7827  003110  6E05               	movwf	lcd_comand@d,c
  7828                           
  7829                           ;unmc_lcd_216.c: 190: lcd_send_byte(0,d);
  7830  003112  C005  F003         	movff	lcd_comand@d,lcd_send_byte@n
  7831  003116  0E00               	movlw	0
  7832  003118  EC82  F017         	call	_lcd_send_byte
  7833  00311C  0012               	return		;funcret
  7834  00311E                     __end_of_lcd_comand:
  7835                           	opt stack 0
  7836                           tblptru	equ	0xFF8
  7837                           tblptrh	equ	0xFF7
  7838                           tblptrl	equ	0xFF6
  7839                           tablat	equ	0xFF5
  7840                           prodh	equ	0xFF4
  7841                           prodl	equ	0xFF3
  7842                           indf0	equ	0xFEF
  7843                           postinc0	equ	0xFEE
  7844                           fsr0h	equ	0xFEA
  7845                           fsr0l	equ	0xFE9
  7846                           wreg	equ	0xFE8
  7847                           postdec1	equ	0xFE5
  7848                           fsr1l	equ	0xFE1
  7849                           indf2	equ	0xFDF
  7850                           postinc2	equ	0xFDE
  7851                           postdec2	equ	0xFDD
  7852                           fsr2h	equ	0xFDA
  7853                           fsr2l	equ	0xFD9
  7854                           status	equ	0xFD8
  7855                           
  7856 ;; *************** function _lcd_send_byte *****************
  7857 ;; Defined at:
  7858 ;;		line 86 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  7859 ;; Parameters:    Size  Location     Type
  7860 ;;  address         1    wreg     unsigned char 
  7861 ;;  n               1    2[COMRAM] unsigned char 
  7862 ;; Auto vars:     Size  Location     Type
  7863 ;;  address         1    3[COMRAM] unsigned char 
  7864 ;; Return value:  Size  Location     Type
  7865 ;;		None               void
  7866 ;; Registers used:
  7867 ;;		wreg, status,2, status,0, cstack
  7868 ;; Tracked objects:
  7869 ;;		On entry : 0/0
  7870 ;;		On exit  : 0/0
  7871 ;;		Unchanged: 0/0
  7872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7873 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7874 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7876 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7877 ;;Total ram usage:        2 bytes
  7878 ;; Hardware stack levels used:    1
  7879 ;; Hardware stack levels required when called:    1
  7880 ;; This function calls:
  7881 ;;		_Delay100TCYx
  7882 ;;		_lcd_send_nibble
  7883 ;; This function is called by:
  7884 ;;		_lcd_init
  7885 ;;		_lcd_gotoxy
  7886 ;;		_lcd_putc
  7887 ;;		_lcd_comand
  7888 ;;		_lcd_setcursor_vb
  7889 ;; This function uses a non-reentrant model
  7890 ;;
  7891                           
  7892                           	psect	text48
  7893  002F04                     __ptext48:
  7894                           	opt stack 0
  7895  002F04                     _lcd_send_byte:
  7896                           	opt stack 25
  7897                           
  7898                           ;incstack = 0
  7899                           ;lcd_send_byte@address stored from wreg
  7900  002F04  6E04               	movwf	lcd_send_byte@address,c
  7901                           
  7902                           ;unmc_lcd_216.c: 88: LATBbits.LATB3=0;
  7903  002F06  968A               	bcf	3978,3,c	;volatile
  7904                           
  7905                           ;unmc_lcd_216.c: 93: Delay100TCYx(8000000UL/4000000UL);
  7906  002F08  0E02               	movlw	2
  7907  002F0A  EC6E  F018         	call	_Delay100TCYx
  7908                           
  7909                           ;unmc_lcd_216.c: 96: TRISBbits.TRISB4=0;
  7910  002F0E  9893               	bcf	3987,4,c	;volatile
  7911                           
  7912                           ;unmc_lcd_216.c: 97: TRISBbits.TRISB5=0;
  7913  002F10  9A93               	bcf	3987,5,c	;volatile
  7914                           
  7915                           ;unmc_lcd_216.c: 98: TRISBbits.TRISB6=0;
  7916  002F12  9C93               	bcf	3987,6,c	;volatile
  7917                           
  7918                           ;unmc_lcd_216.c: 99: TRISBbits.TRISB7=0;
  7919  002F14  9E93               	bcf	3987,7,c	;volatile
  7920                           
  7921                           ;unmc_lcd_216.c: 101: if(address)
  7922  002F16  5004               	movf	lcd_send_byte@address,w,c
  7923  002F18  B4D8               	btfsc	status,2,c
  7924  002F1A  D002               	goto	l75
  7925                           
  7926                           ;unmc_lcd_216.c: 102: LATBbits.LATB3=1;
  7927  002F1C  868A               	bsf	3978,3,c	;volatile
  7928  002F1E  D001               	goto	l76
  7929  002F20                     l75:
  7930                           
  7931                           ;unmc_lcd_216.c: 103: else
  7932                           ;unmc_lcd_216.c: 104: LATBbits.LATB3=0;
  7933  002F20  968A               	bcf	3978,3,c	;volatile
  7934  002F22                     l76:
  7935                           
  7936                           ;unmc_lcd_216.c: 106: __nop();
  7937  002F22  F000               	nop	
  7938                           
  7939                           ;unmc_lcd_216.c: 113: lcd_send_nibble(n >> 4);
  7940  002F24  3803               	swapf	lcd_send_byte@n,w,c
  7941  002F26  0B0F               	andlw	15
  7942  002F28  EC70  F015         	call	_lcd_send_nibble
  7943                           
  7944                           ;unmc_lcd_216.c: 114: lcd_send_nibble(n & 0xf);
  7945  002F2C  5003               	movf	lcd_send_byte@n,w,c
  7946  002F2E  0B0F               	andlw	15
  7947  002F30  EC70  F015         	call	_lcd_send_nibble
  7948  002F34  0012               	return		;funcret
  7949  002F36                     __end_of_lcd_send_byte:
  7950                           	opt stack 0
  7951                           tblptru	equ	0xFF8
  7952                           tblptrh	equ	0xFF7
  7953                           tblptrl	equ	0xFF6
  7954                           tablat	equ	0xFF5
  7955                           prodh	equ	0xFF4
  7956                           prodl	equ	0xFF3
  7957                           indf0	equ	0xFEF
  7958                           postinc0	equ	0xFEE
  7959                           fsr0h	equ	0xFEA
  7960                           fsr0l	equ	0xFE9
  7961                           wreg	equ	0xFE8
  7962                           postdec1	equ	0xFE5
  7963                           fsr1l	equ	0xFE1
  7964                           indf2	equ	0xFDF
  7965                           postinc2	equ	0xFDE
  7966                           postdec2	equ	0xFDD
  7967                           fsr2h	equ	0xFDA
  7968                           fsr2l	equ	0xFD9
  7969                           status	equ	0xFD8
  7970                           
  7971 ;; *************** function _lcd_send_nibble *****************
  7972 ;; Defined at:
  7973 ;;		line 25 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  7974 ;; Parameters:    Size  Location     Type
  7975 ;;  nibble          1    wreg     unsigned char 
  7976 ;; Auto vars:     Size  Location     Type
  7977 ;;  nibble          1    1[COMRAM] unsigned char 
  7978 ;; Return value:  Size  Location     Type
  7979 ;;		None               void
  7980 ;; Registers used:
  7981 ;;		wreg, status,2, status,0
  7982 ;; Tracked objects:
  7983 ;;		On entry : 0/0
  7984 ;;		On exit  : 0/0
  7985 ;;		Unchanged: 0/0
  7986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7988 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7989 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7990 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7991 ;;Total ram usage:        2 bytes
  7992 ;; Hardware stack levels used:    1
  7993 ;; This function calls:
  7994 ;;		Nothing
  7995 ;; This function is called by:
  7996 ;;		_lcd_send_byte
  7997 ;;		_lcd_init
  7998 ;; This function uses a non-reentrant model
  7999 ;;
  8000                           
  8001                           	psect	text49
  8002  002AE0                     __ptext49:
  8003                           	opt stack 0
  8004  002AE0                     _lcd_send_nibble:
  8005                           	opt stack 25
  8006                           
  8007                           ;incstack = 0
  8008                           ;lcd_send_nibble@nibble stored from wreg
  8009  002AE0  6E02               	movwf	lcd_send_nibble@nibble,c
  8010                           
  8011                           ;unmc_lcd_216.c: 27: LATBbits.LATB4=!!(nibble & 0x01);
  8012  002AE2  A002               	btfss	lcd_send_nibble@nibble,0,c
  8013  002AE4  D003               	goto	u2170
  8014  002AE6  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  8015  002AE8  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  8016  002AEA  D001               	goto	u2188
  8017  002AEC                     u2170:
  8018  002AEC  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  8019  002AEE                     u2188:
  8020  002AEE  3A01               	swapf	??_lcd_send_nibble,f,c
  8021  002AF0  508A               	movf	3978,w,c	;volatile
  8022  002AF2  1801               	xorwf	??_lcd_send_nibble,w,c
  8023  002AF4  0BEF               	andlw	-17
  8024  002AF6  1801               	xorwf	??_lcd_send_nibble,w,c
  8025  002AF8  6E8A               	movwf	3978,c	;volatile
  8026                           
  8027                           ;unmc_lcd_216.c: 28: LATBbits.LATB5=!!(nibble & 0x02);
  8028  002AFA  A202               	btfss	lcd_send_nibble@nibble,1,c
  8029  002AFC  D003               	goto	u2190
  8030  002AFE  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  8031  002B00  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  8032  002B02  D001               	goto	u2208
  8033  002B04                     u2190:
  8034  002B04  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  8035  002B06                     u2208:
  8036  002B06  3A01               	swapf	??_lcd_send_nibble,f,c
  8037  002B08  4601               	rlncf	??_lcd_send_nibble,f,c
  8038  002B0A  508A               	movf	3978,w,c	;volatile
  8039  002B0C  1801               	xorwf	??_lcd_send_nibble,w,c
  8040  002B0E  0BDF               	andlw	-33
  8041  002B10  1801               	xorwf	??_lcd_send_nibble,w,c
  8042  002B12  6E8A               	movwf	3978,c	;volatile
  8043                           
  8044                           ;unmc_lcd_216.c: 29: LATBbits.LATB6=!!(nibble & 0x04);
  8045  002B14  A402               	btfss	lcd_send_nibble@nibble,2,c
  8046  002B16  D003               	goto	u2210
  8047  002B18  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  8048  002B1A  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  8049  002B1C  D001               	goto	u2228
  8050  002B1E                     u2210:
  8051  002B1E  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  8052  002B20                     u2228:
  8053  002B20  3A01               	swapf	??_lcd_send_nibble,f,c
  8054  002B22  4601               	rlncf	??_lcd_send_nibble,f,c
  8055  002B24  4601               	rlncf	??_lcd_send_nibble,f,c
  8056  002B26  508A               	movf	3978,w,c	;volatile
  8057  002B28  1801               	xorwf	??_lcd_send_nibble,w,c
  8058  002B2A  0BBF               	andlw	-65
  8059  002B2C  1801               	xorwf	??_lcd_send_nibble,w,c
  8060  002B2E  6E8A               	movwf	3978,c	;volatile
  8061                           
  8062                           ;unmc_lcd_216.c: 30: LATBbits.LATB7=!!(nibble & 0x08);
  8063  002B30  A602               	btfss	lcd_send_nibble@nibble,3,c
  8064  002B32  D003               	goto	u2230
  8065  002B34  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  8066  002B36  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  8067  002B38  D001               	goto	u2248
  8068  002B3A                     u2230:
  8069  002B3A  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  8070  002B3C                     u2248:
  8071  002B3C  3201               	rrcf	??_lcd_send_nibble,f,c
  8072  002B3E  3201               	rrcf	??_lcd_send_nibble,f,c
  8073  002B40  508A               	movf	3978,w,c	;volatile
  8074  002B42  1801               	xorwf	??_lcd_send_nibble,w,c
  8075  002B44  0B7F               	andlw	-129
  8076  002B46  1801               	xorwf	??_lcd_send_nibble,w,c
  8077  002B48  6E8A               	movwf	3978,c	;volatile
  8078                           
  8079                           ;unmc_lcd_216.c: 32: __nop();
  8080  002B4A  F000               	nop	
  8081                           
  8082                           ;unmc_lcd_216.c: 33: LATBbits.LATB2=1;
  8083  002B4C  848A               	bsf	3978,2,c	;volatile
  8084                           
  8085                           ;unmc_lcd_216.c: 34: __nop();__nop();
  8086  002B4E  F000               	nop	
  8087  002B50  F000               	nop	
  8088                           
  8089                           ;unmc_lcd_216.c: 35: LATBbits.LATB2=0;
  8090  002B52  948A               	bcf	3978,2,c	;volatile
  8091  002B54  0012               	return		;funcret
  8092  002B56                     __end_of_lcd_send_nibble:
  8093                           	opt stack 0
  8094                           tblptru	equ	0xFF8
  8095                           tblptrh	equ	0xFF7
  8096                           tblptrl	equ	0xFF6
  8097                           tablat	equ	0xFF5
  8098                           prodh	equ	0xFF4
  8099                           prodl	equ	0xFF3
  8100                           indf0	equ	0xFEF
  8101                           postinc0	equ	0xFEE
  8102                           fsr0h	equ	0xFEA
  8103                           fsr0l	equ	0xFE9
  8104                           wreg	equ	0xFE8
  8105                           postdec1	equ	0xFE5
  8106                           fsr1l	equ	0xFE1
  8107                           indf2	equ	0xFDF
  8108                           postinc2	equ	0xFDE
  8109                           postdec2	equ	0xFDD
  8110                           fsr2h	equ	0xFDA
  8111                           fsr2l	equ	0xFD9
  8112                           status	equ	0xFD8
  8113                           
  8114 ;; *************** function _Delay100TCYx *****************
  8115 ;; Defined at:
  8116 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\d100tcyx.c"
  8117 ;; Parameters:    Size  Location     Type
  8118 ;;  unit            1    wreg     unsigned char 
  8119 ;; Auto vars:     Size  Location     Type
  8120 ;;  unit            1    0[COMRAM] unsigned char 
  8121 ;; Return value:  Size  Location     Type
  8122 ;;		None               void
  8123 ;; Registers used:
  8124 ;;		wreg
  8125 ;; Tracked objects:
  8126 ;;		On entry : 0/0
  8127 ;;		On exit  : 0/0
  8128 ;;		Unchanged: 0/0
  8129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8131 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8133 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8134 ;;Total ram usage:        1 bytes
  8135 ;; Hardware stack levels used:    1
  8136 ;; This function calls:
  8137 ;;		Nothing
  8138 ;; This function is called by:
  8139 ;;		_lcd_send_byte
  8140 ;; This function uses a non-reentrant model
  8141 ;;
  8142                           
  8143                           	psect	text50
  8144  0030DC                     __ptext50:
  8145                           	opt stack 0
  8146  0030DC                     _Delay100TCYx:
  8147                           	opt stack 25
  8148                           
  8149                           ;incstack = 0
  8150                           ;Delay100TCYx@unit stored from wreg
  8151  0030DC  6E01               	movwf	Delay100TCYx@unit,c
  8152  0030DE  0E21               	movlw	33
  8153  0030E0                     u4407:
  8154  0030E0  2EE8               	decfsz	wreg,f,c
  8155  0030E2  D7FE               	goto	u4407
  8156  0030E4  F000               	nop	
  8157  0030E6  2E01               	decfsz	Delay100TCYx@unit,f,c
  8158  0030E8  D7FA               	goto	l2885
  8159  0030EA  0012               	return	
  8160  0030EC  0012               	return		;funcret
  8161  0030EE                     __end_of_Delay100TCYx:
  8162                           	opt stack 0
  8163                           tblptru	equ	0xFF8
  8164                           tblptrh	equ	0xFF7
  8165                           tblptrl	equ	0xFF6
  8166                           tablat	equ	0xFF5
  8167                           prodh	equ	0xFF4
  8168                           prodl	equ	0xFF3
  8169                           indf0	equ	0xFEF
  8170                           postinc0	equ	0xFEE
  8171                           fsr0h	equ	0xFEA
  8172                           fsr0l	equ	0xFE9
  8173                           wreg	equ	0xFE8
  8174                           postdec1	equ	0xFE5
  8175                           fsr1l	equ	0xFE1
  8176                           indf2	equ	0xFDF
  8177                           postinc2	equ	0xFDE
  8178                           postdec2	equ	0xFDD
  8179                           fsr2h	equ	0xFDA
  8180                           fsr2l	equ	0xFD9
  8181                           status	equ	0xFD8
  8182                           
  8183 ;; *************** function _Write_RTC *****************
  8184 ;; Defined at:
  8185 ;;		line 22 in file "../../Program Files/Unimic/unmc_01/sources/unmc_rtcc_01.c"
  8186 ;; Parameters:    Size  Location     Type
  8187 ;;		None
  8188 ;; Auto vars:     Size  Location     Type
  8189 ;;		None
  8190 ;; Return value:  Size  Location     Type
  8191 ;;                  2   26[None  ] int 
  8192 ;; Registers used:
  8193 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8194 ;; Tracked objects:
  8195 ;;		On entry : 0/0
  8196 ;;		On exit  : 0/0
  8197 ;;		Unchanged: 0/0
  8198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8202 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8203 ;;Total ram usage:        0 bytes
  8204 ;; Hardware stack levels used:    1
  8205 ;; Hardware stack levels required when called:    2
  8206 ;; This function calls:
  8207 ;;		_RtccWrOn
  8208 ;;		_RtccWriteDate
  8209 ;;		_RtccWriteTime
  8210 ;;		___awdiv
  8211 ;; This function is called by:
  8212 ;;		_Setup
  8213 ;;		_setClock
  8214 ;; This function uses a non-reentrant model
  8215 ;;
  8216                           
  8217                           	psect	text51
  8218  00188C                     __ptext51:
  8219                           	opt stack 0
  8220  00188C                     _Write_RTC:
  8221                           	opt stack 27
  8222                           
  8223                           ;unmc_rtcc_01.c: 24: RtccWrOn();
  8224                           
  8225                           ;incstack = 0
  8226  00188C  EC77  F018         	call	_RtccWrOn	;wreg free
  8227                           
  8228                           ;unmc_rtcc_01.c: 26: PIE3bits.RTCCIE=1;
  8229  001890  80A3               	bsf	4003,0,c	;volatile
  8230                           
  8231                           ;unmc_rtcc_01.c: 27: segundo_d=segundo/10;
  8232  001892  C08A  F001         	movff	_segundo,___awdiv@dividend
  8233  001896  C08B  F002         	movff	_segundo+1,___awdiv@dividend+1
  8234  00189A  0E00               	movlw	0
  8235  00189C  6E04               	movwf	___awdiv@divisor+1,c
  8236  00189E  0E0A               	movlw	10
  8237  0018A0  6E03               	movwf	___awdiv@divisor,c
  8238  0018A2  ECDD  F013         	call	___awdiv	;wreg free
  8239  0018A6  5001               	movf	?___awdiv,w,c
  8240  0018A8  0100               	movlb	0	; () banked
  8241  0018AA  6FDA               	movwf	_segundo_d& (0+255),b
  8242                           
  8243                           ; BSR set to: 0
  8244                           ;unmc_rtcc_01.c: 28: segundo_u=segundo-segundo_d*10;
  8245  0018AC  0100               	movlb	0	; () banked
  8246  0018AE  51DA               	movf	_segundo_d& (0+255),w,b
  8247  0018B0  0D0A               	mullw	10
  8248  0018B2  50F3               	movf	prodl,w,c
  8249  0018B4  0800               	sublw	0
  8250  0018B6  0100               	movlb	0	; () banked
  8251  0018B8  258A               	addwf	_segundo& (0+255),w,b
  8252  0018BA  0100               	movlb	0	; () banked
  8253  0018BC  6FDB               	movwf	_segundo_u& (0+255),b
  8254                           
  8255                           ; BSR set to: 0
  8256                           ;unmc_rtcc_01.c: 29: RtccTime.f.sec =segundo_d*16+segundo_u;
  8257  0018BE  0100               	movlb	0	; () banked
  8258  0018C0  51DA               	movf	_segundo_d& (0+255),w,b
  8259  0018C2  0D10               	mullw	16
  8260  0018C4  50F3               	movf	prodl,w,c
  8261  0018C6  0100               	movlb	0	; () banked
  8262  0018C8  25DB               	addwf	_segundo_u& (0+255),w,b
  8263  0018CA  0100               	movlb	0	; () banked
  8264  0018CC  6FA5               	movwf	(_RtccTime+1)& (0+255),b
  8265                           
  8266                           ; BSR set to: 0
  8267                           ;unmc_rtcc_01.c: 30: minuto_d=minuto/10;
  8268  0018CE  C0C9  F001         	movff	_minuto,___awdiv@dividend
  8269  0018D2  C0CA  F002         	movff	_minuto+1,___awdiv@dividend+1
  8270  0018D6  0E00               	movlw	0
  8271  0018D8  6E04               	movwf	___awdiv@divisor+1,c
  8272  0018DA  0E0A               	movlw	10
  8273  0018DC  6E03               	movwf	___awdiv@divisor,c
  8274  0018DE  ECDD  F013         	call	___awdiv	;wreg free
  8275  0018E2  5001               	movf	?___awdiv,w,c
  8276  0018E4  0100               	movlb	0	; () banked
  8277  0018E6  6FD8               	movwf	_minuto_d& (0+255),b
  8278                           
  8279                           ; BSR set to: 0
  8280                           ;unmc_rtcc_01.c: 31: minuto_u=minuto-minuto_d*10;
  8281  0018E8  0100               	movlb	0	; () banked
  8282  0018EA  51D8               	movf	_minuto_d& (0+255),w,b
  8283  0018EC  0D0A               	mullw	10
  8284  0018EE  50F3               	movf	prodl,w,c
  8285  0018F0  0800               	sublw	0
  8286  0018F2  0100               	movlb	0	; () banked
  8287  0018F4  25C9               	addwf	_minuto& (0+255),w,b
  8288  0018F6  0100               	movlb	0	; () banked
  8289  0018F8  6FD9               	movwf	_minuto_u& (0+255),b
  8290                           
  8291                           ; BSR set to: 0
  8292                           ;unmc_rtcc_01.c: 32: RtccTime.f.min =minuto_d*16+minuto_u;
  8293  0018FA  0100               	movlb	0	; () banked
  8294  0018FC  51D8               	movf	_minuto_d& (0+255),w,b
  8295  0018FE  0D10               	mullw	16
  8296  001900  50F3               	movf	prodl,w,c
  8297  001902  0100               	movlb	0	; () banked
  8298  001904  25D9               	addwf	_minuto_u& (0+255),w,b
  8299  001906  0100               	movlb	0	; () banked
  8300  001908  6FA6               	movwf	(_RtccTime+2)& (0+255),b
  8301                           
  8302                           ; BSR set to: 0
  8303                           ;unmc_rtcc_01.c: 33: hora_d=hora/10;
  8304  00190A  C0C5  F001         	movff	_hora,___awdiv@dividend
  8305  00190E  C0C6  F002         	movff	_hora+1,___awdiv@dividend+1
  8306  001912  0E00               	movlw	0
  8307  001914  6E04               	movwf	___awdiv@divisor+1,c
  8308  001916  0E0A               	movlw	10
  8309  001918  6E03               	movwf	___awdiv@divisor,c
  8310  00191A  ECDD  F013         	call	___awdiv	;wreg free
  8311  00191E  5001               	movf	?___awdiv,w,c
  8312  001920  0100               	movlb	0	; () banked
  8313  001922  6FD4               	movwf	_hora_d& (0+255),b
  8314                           
  8315                           ; BSR set to: 0
  8316                           ;unmc_rtcc_01.c: 34: hora_u=hora-hora_d*10;
  8317  001924  0100               	movlb	0	; () banked
  8318  001926  51D4               	movf	_hora_d& (0+255),w,b
  8319  001928  0D0A               	mullw	10
  8320  00192A  50F3               	movf	prodl,w,c
  8321  00192C  0800               	sublw	0
  8322  00192E  0100               	movlb	0	; () banked
  8323  001930  25C5               	addwf	_hora& (0+255),w,b
  8324  001932  0100               	movlb	0	; () banked
  8325  001934  6FD5               	movwf	_hora_u& (0+255),b
  8326                           
  8327                           ; BSR set to: 0
  8328                           ;unmc_rtcc_01.c: 35: RtccTime.f.hour=hora_d*16+hora_u;
  8329  001936  0100               	movlb	0	; () banked
  8330  001938  51D4               	movf	_hora_d& (0+255),w,b
  8331  00193A  0D10               	mullw	16
  8332  00193C  50F3               	movf	prodl,w,c
  8333  00193E  0100               	movlb	0	; () banked
  8334  001940  25D5               	addwf	_hora_u& (0+255),w,b
  8335  001942  0100               	movlb	0	; () banked
  8336  001944  6FA7               	movwf	(_RtccTime+3)& (0+255),b
  8337                           
  8338                           ; BSR set to: 0
  8339                           ;unmc_rtcc_01.c: 36: anio_d=anio/10;
  8340  001946  C0BF  F001         	movff	_anio,___awdiv@dividend
  8341  00194A  C0C0  F002         	movff	_anio+1,___awdiv@dividend+1
  8342  00194E  0E00               	movlw	0
  8343  001950  6E04               	movwf	___awdiv@divisor+1,c
  8344  001952  0E0A               	movlw	10
  8345  001954  6E03               	movwf	___awdiv@divisor,c
  8346  001956  ECDD  F013         	call	___awdiv	;wreg free
  8347  00195A  5001               	movf	?___awdiv,w,c
  8348  00195C  0100               	movlb	0	; () banked
  8349  00195E  6FCF               	movwf	_anio_d& (0+255),b
  8350                           
  8351                           ; BSR set to: 0
  8352                           ;unmc_rtcc_01.c: 37: anio_u=anio-anio_d*10;
  8353  001960  0100               	movlb	0	; () banked
  8354  001962  51CF               	movf	_anio_d& (0+255),w,b
  8355  001964  0D0A               	mullw	10
  8356  001966  50F3               	movf	prodl,w,c
  8357  001968  0800               	sublw	0
  8358  00196A  0100               	movlb	0	; () banked
  8359  00196C  25BF               	addwf	_anio& (0+255),w,b
  8360  00196E  0100               	movlb	0	; () banked
  8361  001970  6FD0               	movwf	_anio_u& (0+255),b
  8362                           
  8363                           ; BSR set to: 0
  8364                           ;unmc_rtcc_01.c: 38: RtccDate.f.year=anio_d*16+anio_u;
  8365  001972  0100               	movlb	0	; () banked
  8366  001974  51CF               	movf	_anio_d& (0+255),w,b
  8367  001976  0D10               	mullw	16
  8368  001978  50F3               	movf	prodl,w,c
  8369  00197A  0100               	movlb	0	; () banked
  8370  00197C  25D0               	addwf	_anio_u& (0+255),w,b
  8371  00197E  0100               	movlb	0	; () banked
  8372  001980  6FA3               	movwf	(_RtccDate+3)& (0+255),b
  8373                           
  8374                           ; BSR set to: 0
  8375                           ;unmc_rtcc_01.c: 39: mes_d=mes/10;
  8376  001982  C0C7  F001         	movff	_mes,___awdiv@dividend
  8377  001986  C0C8  F002         	movff	_mes+1,___awdiv@dividend+1
  8378  00198A  0E00               	movlw	0
  8379  00198C  6E04               	movwf	___awdiv@divisor+1,c
  8380  00198E  0E0A               	movlw	10
  8381  001990  6E03               	movwf	___awdiv@divisor,c
  8382  001992  ECDD  F013         	call	___awdiv	;wreg free
  8383  001996  5001               	movf	?___awdiv,w,c
  8384  001998  0100               	movlb	0	; () banked
  8385  00199A  6FD6               	movwf	_mes_d& (0+255),b
  8386                           
  8387                           ; BSR set to: 0
  8388                           ;unmc_rtcc_01.c: 40: mes_u=mes-mes_d*10;
  8389  00199C  0100               	movlb	0	; () banked
  8390  00199E  51D6               	movf	_mes_d& (0+255),w,b
  8391  0019A0  0D0A               	mullw	10
  8392  0019A2  50F3               	movf	prodl,w,c
  8393  0019A4  0800               	sublw	0
  8394  0019A6  0100               	movlb	0	; () banked
  8395  0019A8  25C7               	addwf	_mes& (0+255),w,b
  8396  0019AA  0100               	movlb	0	; () banked
  8397  0019AC  6FD7               	movwf	_mes_u& (0+255),b
  8398                           
  8399                           ; BSR set to: 0
  8400                           ;unmc_rtcc_01.c: 41: RtccDate.f.mon=mes_d*16+mes_u;
  8401  0019AE  0100               	movlb	0	; () banked
  8402  0019B0  51D6               	movf	_mes_d& (0+255),w,b
  8403  0019B2  0D10               	mullw	16
  8404  0019B4  50F3               	movf	prodl,w,c
  8405  0019B6  0100               	movlb	0	; () banked
  8406  0019B8  25D7               	addwf	_mes_u& (0+255),w,b
  8407  0019BA  0100               	movlb	0	; () banked
  8408  0019BC  6FA2               	movwf	(_RtccDate+2)& (0+255),b
  8409                           
  8410                           ; BSR set to: 0
  8411                           ;unmc_rtcc_01.c: 42: fecha_d=dia/10;
  8412  0019BE  C0C1  F001         	movff	_dia,___awdiv@dividend
  8413  0019C2  C0C2  F002         	movff	_dia+1,___awdiv@dividend+1
  8414  0019C6  0E00               	movlw	0
  8415  0019C8  6E04               	movwf	___awdiv@divisor+1,c
  8416  0019CA  0E0A               	movlw	10
  8417  0019CC  6E03               	movwf	___awdiv@divisor,c
  8418  0019CE  ECDD  F013         	call	___awdiv	;wreg free
  8419  0019D2  5001               	movf	?___awdiv,w,c
  8420  0019D4  0100               	movlb	0	; () banked
  8421  0019D6  6FD2               	movwf	_fecha_d& (0+255),b
  8422                           
  8423                           ; BSR set to: 0
  8424                           ;unmc_rtcc_01.c: 43: fecha_u=dia-fecha_d*10;
  8425  0019D8  0100               	movlb	0	; () banked
  8426  0019DA  51D2               	movf	_fecha_d& (0+255),w,b
  8427  0019DC  0D0A               	mullw	10
  8428  0019DE  50F3               	movf	prodl,w,c
  8429  0019E0  0800               	sublw	0
  8430  0019E2  0100               	movlb	0	; () banked
  8431  0019E4  25C1               	addwf	_dia& (0+255),w,b
  8432  0019E6  0100               	movlb	0	; () banked
  8433  0019E8  6FD3               	movwf	_fecha_u& (0+255),b
  8434                           
  8435                           ; BSR set to: 0
  8436                           ;unmc_rtcc_01.c: 44: RtccDate.f.mday=fecha_d*16+fecha_u;
  8437  0019EA  0100               	movlb	0	; () banked
  8438  0019EC  51D2               	movf	_fecha_d& (0+255),w,b
  8439  0019EE  0D10               	mullw	16
  8440  0019F0  50F3               	movf	prodl,w,c
  8441  0019F2  0100               	movlb	0	; () banked
  8442  0019F4  25D3               	addwf	_fecha_u& (0+255),w,b
  8443  0019F6  0100               	movlb	0	; () banked
  8444  0019F8  6FA1               	movwf	(_RtccDate+1)& (0+255),b
  8445                           
  8446                           ; BSR set to: 0
  8447                           ;unmc_rtcc_01.c: 45: dia_semana=diasem;
  8448  0019FA  C0C3  F0D1         	movff	_diasem,_dia_semana
  8449                           
  8450                           ; BSR set to: 0
  8451                           ;unmc_rtcc_01.c: 46: RtccDate.f.wday =diasem;
  8452  0019FE  C0C3  F0A0         	movff	_diasem,_RtccDate
  8453                           
  8454                           ; BSR set to: 0
  8455                           ;unmc_rtcc_01.c: 47: RtccWriteTime(&RtccTime,1);
  8456  001A02  0EA4               	movlw	low _RtccTime
  8457  001A04  6E01               	movwf	RtccWriteTime@pTm,c
  8458  001A06  0E00               	movlw	high _RtccTime
  8459  001A08  6E02               	movwf	RtccWriteTime@pTm+1,c
  8460  001A0A  0E01               	movlw	1
  8461  001A0C  6E03               	movwf	RtccWriteTime@di,c
  8462  001A0E  EC08  F00F         	call	_RtccWriteTime	;wreg free
  8463                           
  8464                           ;unmc_rtcc_01.c: 48: RtccWriteDate(&RtccDate,1);
  8465  001A12  0EA0               	movlw	low _RtccDate
  8466  001A14  6E01               	movwf	RtccWriteDate@pDt,c
  8467  001A16  0E00               	movlw	high _RtccDate
  8468  001A18  6E02               	movwf	RtccWriteDate@pDt+1,c
  8469  001A1A  0E01               	movlw	1
  8470  001A1C  6E03               	movwf	RtccWriteDate@di,c
  8471  001A1E  ECD5  F00D         	call	_RtccWriteDate	;wreg free
  8472                           
  8473                           ;unmc_rtcc_01.c: 49: (RTCCFGbits.RTCEN=1);
  8474  001A22  010F               	movlb	15	; () banked
  8475  001A24  8F3F               	bsf	63,7,b	;volatile
  8476                           
  8477                           ; BSR set to: 15
  8478  001A26  0012               	return		;funcret
  8479  001A28                     __end_of_Write_RTC:
  8480                           	opt stack 0
  8481                           tblptru	equ	0xFF8
  8482                           tblptrh	equ	0xFF7
  8483                           tblptrl	equ	0xFF6
  8484                           tablat	equ	0xFF5
  8485                           prodh	equ	0xFF4
  8486                           prodl	equ	0xFF3
  8487                           indf0	equ	0xFEF
  8488                           postinc0	equ	0xFEE
  8489                           fsr0h	equ	0xFEA
  8490                           fsr0l	equ	0xFE9
  8491                           wreg	equ	0xFE8
  8492                           postdec1	equ	0xFE5
  8493                           fsr1l	equ	0xFE1
  8494                           indf2	equ	0xFDF
  8495                           postinc2	equ	0xFDE
  8496                           postdec2	equ	0xFDD
  8497                           fsr2h	equ	0xFDA
  8498                           fsr2l	equ	0xFD9
  8499                           status	equ	0xFD8
  8500                           
  8501 ;; *************** function ___awdiv *****************
  8502 ;; Defined at:
  8503 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\awdiv.c"
  8504 ;; Parameters:    Size  Location     Type
  8505 ;;  dividend        2    0[COMRAM] int 
  8506 ;;  divisor         2    2[COMRAM] int 
  8507 ;; Auto vars:     Size  Location     Type
  8508 ;;  quotient        2    6[COMRAM] int 
  8509 ;;  sign            1    5[COMRAM] unsigned char 
  8510 ;;  counter         1    4[COMRAM] unsigned char 
  8511 ;; Return value:  Size  Location     Type
  8512 ;;                  2    0[COMRAM] int 
  8513 ;; Registers used:
  8514 ;;		wreg, status,2, status,0
  8515 ;; Tracked objects:
  8516 ;;		On entry : 0/0
  8517 ;;		On exit  : 0/0
  8518 ;;		Unchanged: 0/0
  8519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8520 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8521 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8523 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8524 ;;Total ram usage:        8 bytes
  8525 ;; Hardware stack levels used:    1
  8526 ;; This function calls:
  8527 ;;		Nothing
  8528 ;; This function is called by:
  8529 ;;		_Write_RTC
  8530 ;;		__delay_s
  8531 ;; This function uses a non-reentrant model
  8532 ;;
  8533                           
  8534                           	psect	text52
  8535  0027BA                     __ptext52:
  8536                           	opt stack 0
  8537  0027BA                     ___awdiv:
  8538                           	opt stack 27
  8539                           
  8540                           ; BSR set to: 15
  8541                           ;incstack = 0
  8542  0027BA  0E00               	movlw	0
  8543  0027BC  6E06               	movwf	___awdiv@sign,c
  8544  0027BE  AE04               	btfss	___awdiv@divisor+1,7,c
  8545  0027C0  D007               	goto	l3493
  8546  0027C2  6C03               	negf	___awdiv@divisor,c
  8547  0027C4  1E04               	comf	___awdiv@divisor+1,f,c
  8548  0027C6  B0D8               	btfsc	status,0,c
  8549  0027C8  2A04               	incf	___awdiv@divisor+1,f,c
  8550  0027CA  0E01               	movlw	1
  8551  0027CC  6E06               	movwf	___awdiv@sign,c
  8552  0027CE  D000               	goto	l3493
  8553  0027D0                     l3493:
  8554  0027D0  AE02               	btfss	___awdiv@dividend+1,7,c
  8555  0027D2  D007               	goto	l3499
  8556  0027D4  6C01               	negf	___awdiv@dividend,c
  8557  0027D6  1E02               	comf	___awdiv@dividend+1,f,c
  8558  0027D8  B0D8               	btfsc	status,0,c
  8559  0027DA  2A02               	incf	___awdiv@dividend+1,f,c
  8560  0027DC  0E01               	movlw	1
  8561  0027DE  1A06               	xorwf	___awdiv@sign,f,c
  8562  0027E0  D000               	goto	l3499
  8563  0027E2                     l3499:
  8564  0027E2  0E00               	movlw	0
  8565  0027E4  6E08               	movwf	___awdiv@quotient+1,c
  8566  0027E6  0E00               	movlw	0
  8567  0027E8  6E07               	movwf	___awdiv@quotient,c
  8568  0027EA  5003               	movf	___awdiv@divisor,w,c
  8569  0027EC  1004               	iorwf	___awdiv@divisor+1,w,c
  8570  0027EE  B4D8               	btfsc	status,2,c
  8571  0027F0  D021               	goto	l3521
  8572  0027F2  0E01               	movlw	1
  8573  0027F4  6E05               	movwf	___awdiv@counter,c
  8574  0027F6  D005               	goto	l3507
  8575  0027F8                     l3505:
  8576  0027F8  90D8               	bcf	status,0,c
  8577  0027FA  3603               	rlcf	___awdiv@divisor,f,c
  8578  0027FC  3604               	rlcf	___awdiv@divisor+1,f,c
  8579  0027FE  2A05               	incf	___awdiv@counter,f,c
  8580  002800  D000               	goto	l3507
  8581  002802                     l3507:
  8582  002802  BE04               	btfsc	___awdiv@divisor+1,7,c
  8583  002804  D002               	goto	l3509
  8584  002806  D7F8               	goto	l3505
  8585  002808  D000               	goto	l3509
  8586  00280A                     l3509:
  8587  00280A  90D8               	bcf	status,0,c
  8588  00280C  3607               	rlcf	___awdiv@quotient,f,c
  8589  00280E  3608               	rlcf	___awdiv@quotient+1,f,c
  8590  002810  5003               	movf	___awdiv@divisor,w,c
  8591  002812  5C01               	subwf	___awdiv@dividend,w,c
  8592  002814  5004               	movf	___awdiv@divisor+1,w,c
  8593  002816  5802               	subwfb	___awdiv@dividend+1,w,c
  8594  002818  A0D8               	btfss	status,0,c
  8595  00281A  D006               	goto	l3517
  8596  00281C  5003               	movf	___awdiv@divisor,w,c
  8597  00281E  5E01               	subwf	___awdiv@dividend,f,c
  8598  002820  5004               	movf	___awdiv@divisor+1,w,c
  8599  002822  5A02               	subwfb	___awdiv@dividend+1,f,c
  8600  002824  8007               	bsf	___awdiv@quotient,0,c
  8601  002826  D000               	goto	l3517
  8602  002828                     l3517:
  8603  002828  90D8               	bcf	status,0,c
  8604  00282A  3204               	rrcf	___awdiv@divisor+1,f,c
  8605  00282C  3203               	rrcf	___awdiv@divisor,f,c
  8606  00282E  2E05               	decfsz	___awdiv@counter,f,c
  8607  002830  D7EC               	goto	l3509
  8608  002832  D000               	goto	l3521
  8609  002834                     l3521:
  8610  002834  5006               	movf	___awdiv@sign,w,c
  8611  002836  B4D8               	btfsc	status,2,c
  8612  002838  D005               	goto	l3525
  8613  00283A  6C07               	negf	___awdiv@quotient,c
  8614  00283C  1E08               	comf	___awdiv@quotient+1,f,c
  8615  00283E  B0D8               	btfsc	status,0,c
  8616  002840  2A08               	incf	___awdiv@quotient+1,f,c
  8617  002842  D000               	goto	l3525
  8618  002844                     l3525:
  8619  002844  C007  F001         	movff	___awdiv@quotient,?___awdiv
  8620  002848  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  8621  00284C  0012               	return	
  8622  00284E  0012               	return		;funcret
  8623  002850                     __end_of___awdiv:
  8624                           	opt stack 0
  8625                           tblptru	equ	0xFF8
  8626                           tblptrh	equ	0xFF7
  8627                           tblptrl	equ	0xFF6
  8628                           tablat	equ	0xFF5
  8629                           prodh	equ	0xFF4
  8630                           prodl	equ	0xFF3
  8631                           indf0	equ	0xFEF
  8632                           postinc0	equ	0xFEE
  8633                           fsr0h	equ	0xFEA
  8634                           fsr0l	equ	0xFE9
  8635                           wreg	equ	0xFE8
  8636                           postdec1	equ	0xFE5
  8637                           fsr1l	equ	0xFE1
  8638                           indf2	equ	0xFDF
  8639                           postinc2	equ	0xFDE
  8640                           postdec2	equ	0xFDD
  8641                           fsr2h	equ	0xFDA
  8642                           fsr2l	equ	0xFD9
  8643                           status	equ	0xFD8
  8644                           
  8645 ;; *************** function _RtccWriteTime *****************
  8646 ;; Defined at:
  8647 ;;		line 34 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteTime.c"
  8648 ;; Parameters:    Size  Location     Type
  8649 ;;  pTm             2    0[COMRAM] PTR const struct .
  8650 ;;		 -> RtccTime(4), 
  8651 ;;  di              1    2[COMRAM] enum E7121
  8652 ;; Auto vars:     Size  Location     Type
  8653 ;;  tempHourWDay    2    9[COMRAM] struct .
  8654 ;;  tempMinSec      2    7[COMRAM] struct .
  8655 ;;  wasWrEn         1    6[COMRAM] enum E7121
  8656 ;;  wasAlrm         1    5[COMRAM] enum E7121
  8657 ;;  wasOn           1    4[COMRAM] enum E7121
  8658 ;; Return value:  Size  Location     Type
  8659 ;;                  1    wreg      enum E7121
  8660 ;; Registers used:
  8661 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8662 ;; Tracked objects:
  8663 ;;		On entry : 0/0
  8664 ;;		On exit  : 0/0
  8665 ;;		Unchanged: 0/0
  8666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8667 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8668 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8669 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8670 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8671 ;;Total ram usage:       11 bytes
  8672 ;; Hardware stack levels used:    1
  8673 ;; Hardware stack levels required when called:    1
  8674 ;; This function calls:
  8675 ;;		_RtccWrOn
  8676 ;; This function is called by:
  8677 ;;		_Write_RTC
  8678 ;; This function uses a non-reentrant model
  8679 ;;
  8680                           
  8681                           	psect	text53
  8682  001E10                     __ptext53:
  8683                           	opt stack 0
  8684  001E10                     _RtccWriteTime:
  8685                           	opt stack 27
  8686                           
  8687                           ;incstack = 0
  8688  001E10  0E00               	movlw	0
  8689  001E12  6E06               	movwf	RtccWriteTime@wasAlrm,c
  8690  001E14  EE20 F002          	lfsr	2,2
  8691  001E18  5001               	movf	RtccWriteTime@pTm,w,c
  8692  001E1A  26D9               	addwf	fsr2l,f,c
  8693  001E1C  5002               	movf	RtccWriteTime@pTm+1,w,c
  8694  001E1E  22DA               	addwfc	fsr2h,f,c
  8695  001E20  0E5A               	movlw	90
  8696  001E22  60DF               	cpfslt	indf2,c
  8697  001E24  0012               	return	
  8698  001E26  EE20 F001          	lfsr	2,1
  8699  001E2A  5001               	movf	RtccWriteTime@pTm,w,c
  8700  001E2C  26D9               	addwf	fsr2l,f,c
  8701  001E2E  5002               	movf	RtccWriteTime@pTm+1,w,c
  8702  001E30  22DA               	addwfc	fsr2h,f,c
  8703  001E32  0E5A               	movlw	90
  8704  001E34  60DF               	cpfslt	indf2,c
  8705  001E36  0012               	return	
  8706  001E38  EE20 F003          	lfsr	2,3
  8707  001E3C  5001               	movf	RtccWriteTime@pTm,w,c
  8708  001E3E  26D9               	addwf	fsr2l,f,c
  8709  001E40  5002               	movf	RtccWriteTime@pTm+1,w,c
  8710  001E42  22DA               	addwfc	fsr2h,f,c
  8711  001E44  0E24               	movlw	36
  8712  001E46  64DF               	cpfsgt	indf2,c
  8713  001E48  D002               	goto	l3701
  8714  001E4A  0012               	return	
  8715                           
  8716                           ;	Return value of _RtccWriteTime is never used
  8717  001E4C  0012               	return	
  8718  001E4E                     l3701:
  8719  001E4E  EE20 F002          	lfsr	2,2
  8720  001E52  5001               	movf	RtccWriteTime@pTm,w,c
  8721  001E54  26D9               	addwf	fsr2l,f,c
  8722  001E56  5002               	movf	RtccWriteTime@pTm+1,w,c
  8723  001E58  22DA               	addwfc	fsr2h,f,c
  8724  001E5A  50DF               	movf	indf2,w,c
  8725  001E5C  6E09               	movwf	RtccWriteTime@tempMinSec+1,c
  8726  001E5E  EE20 F001          	lfsr	2,1
  8727  001E62  5001               	movf	RtccWriteTime@pTm,w,c
  8728  001E64  26D9               	addwf	fsr2l,f,c
  8729  001E66  5002               	movf	RtccWriteTime@pTm+1,w,c
  8730  001E68  22DA               	addwfc	fsr2h,f,c
  8731  001E6A  50DF               	movf	indf2,w,c
  8732  001E6C  6E08               	movwf	RtccWriteTime@tempMinSec,c
  8733  001E6E  5003               	movf	RtccWriteTime@di,w,c
  8734  001E70  B4D8               	btfsc	status,2,c
  8735  001E72  D002               	goto	l3707
  8736  001E74  9CF2               	bcf	intcon,6,c	;volatile
  8737  001E76  D000               	goto	l3707
  8738  001E78                     l3707:
  8739  001E78  0E00               	movlw	0
  8740  001E7A  BB3F               	btfsc	63,5,b	;volatile
  8741  001E7C  0E01               	movlw	1
  8742  001E7E  6E07               	movwf	RtccWriteTime@wasWrEn,c
  8743  001E80  5007               	movf	RtccWriteTime@wasWrEn,w,c
  8744  001E82  A4D8               	btfss	status,2,c
  8745  001E84  D003               	goto	l3711
  8746  001E86  EC77  F018         	call	_RtccWrOn	;wreg free
  8747  001E8A  D000               	goto	l3711
  8748  001E8C                     l3711:
  8749  001E8C  0E00               	movlw	0
  8750  001E8E  BF3F               	btfsc	63,7,b	;volatile
  8751  001E90  0E01               	movlw	1
  8752  001E92  6E05               	movwf	RtccWriteTime@wasOn,c
  8753  001E94  5005               	movf	RtccWriteTime@wasOn,w,c
  8754  001E96  B4D8               	btfsc	status,2,c
  8755  001E98  D007               	goto	l3717
  8756  001E9A  0E00               	movlw	0
  8757  001E9C  BE91               	btfsc	3985,7,c	;volatile
  8758  001E9E  0E01               	movlw	1
  8759  001EA0  6E06               	movwf	RtccWriteTime@wasAlrm,c
  8760  001EA2  010F               	movlb	15	; () banked
  8761  001EA4  9F3F               	bcf	63,7,b	;volatile
  8762  001EA6  D000               	goto	l3717
  8763  001EA8                     l3717:
  8764  001EA8  0EFC               	movlw	252
  8765  001EAA  010F               	movlb	15	; () banked
  8766  001EAC  173F               	andwf	63,f,b	;volatile
  8767  001EAE  010F               	movlb	15	; () banked
  8768  001EB0  813F               	bsf	63,0,b	;volatile
  8769                           
  8770                           ; BSR set to: 15
  8771  001EB2  CF98 F00A          	movff	3992,RtccWriteTime@tempHourWDay	;volatile
  8772                           
  8773                           ; BSR set to: 15
  8774  001EB6  CF99 F00B          	movff	3993,RtccWriteTime@tempHourWDay+1	;volatile
  8775                           
  8776                           ; BSR set to: 15
  8777  001EBA  EE20 F003          	lfsr	2,3
  8778  001EBE  5001               	movf	RtccWriteTime@pTm,w,c
  8779  001EC0  26D9               	addwf	fsr2l,f,c
  8780  001EC2  5002               	movf	RtccWriteTime@pTm+1,w,c
  8781  001EC4  22DA               	addwfc	fsr2h,f,c
  8782  001EC6  50DF               	movf	indf2,w,c
  8783  001EC8  6E0A               	movwf	RtccWriteTime@tempHourWDay,c
  8784                           
  8785                           ; BSR set to: 15
  8786  001ECA  0EFC               	movlw	252
  8787  001ECC  010F               	movlb	15	; () banked
  8788  001ECE  173F               	andwf	63,f,b	;volatile
  8789                           
  8790                           ; BSR set to: 15
  8791  001ED0  010F               	movlb	15	; () banked
  8792  001ED2  813F               	bsf	63,0,b	;volatile
  8793                           
  8794                           ; BSR set to: 15
  8795  001ED4  C00A  FF98         	movff	RtccWriteTime@tempHourWDay,3992	;volatile
  8796                           
  8797                           ; BSR set to: 15
  8798  001ED8  C00B  FF99         	movff	RtccWriteTime@tempHourWDay+1,3993	;volatile
  8799                           
  8800                           ; BSR set to: 15
  8801  001EDC  C008  FF98         	movff	RtccWriteTime@tempMinSec,3992	;volatile
  8802                           
  8803                           ; BSR set to: 15
  8804  001EE0  C009  FF99         	movff	RtccWriteTime@tempMinSec+1,3993	;volatile
  8805                           
  8806                           ; BSR set to: 15
  8807  001EE4  5005               	movf	RtccWriteTime@wasOn,w,c
  8808  001EE6  B4D8               	btfsc	status,2,c
  8809  001EE8  D00D               	goto	l3749
  8810                           
  8811                           ; BSR set to: 15
  8812  001EEA  010F               	movlb	15	; () banked
  8813  001EEC  8F3F               	bsf	63,7,b	;volatile
  8814                           
  8815                           ; BSR set to: 15
  8816  001EEE  5006               	movf	RtccWriteTime@wasAlrm,w,c
  8817  001EF0  B4D8               	btfsc	status,2,c
  8818  001EF2  D002               	goto	l3745
  8819                           
  8820                           ; BSR set to: 15
  8821  001EF4  8E91               	bsf	3985,7,c	;volatile
  8822  001EF6  D000               	goto	l3745
  8823  001EF8                     l3745:
  8824                           
  8825                           ; BSR set to: 15
  8826  001EF8  5007               	movf	RtccWriteTime@wasWrEn,w,c
  8827  001EFA  B4D8               	btfsc	status,2,c
  8828  001EFC  D009               	goto	l3753
  8829                           
  8830                           ; BSR set to: 15
  8831  001EFE  EC77  F018         	call	_RtccWrOn	;wreg free
  8832  001F02  D006               	goto	l3753
  8833  001F04                     l3749:
  8834  001F04  5007               	movf	RtccWriteTime@wasWrEn,w,c
  8835  001F06  A4D8               	btfss	status,2,c
  8836  001F08  D003               	goto	l3753
  8837  001F0A  010F               	movlb	15	; () banked
  8838  001F0C  9B3F               	bcf	63,5,b	;volatile
  8839                           
  8840                           ; BSR set to: 15
  8841  001F0E  D000               	goto	l3753
  8842  001F10                     l3753:
  8843  001F10  5003               	movf	RtccWriteTime@di,w,c
  8844  001F12  B4D8               	btfsc	status,2,c
  8845  001F14  0012               	return	
  8846  001F16  8CF2               	bsf	intcon,6,c	;volatile
  8847  001F18  0012               	return	
  8848                           
  8849                           ;	Return value of _RtccWriteTime is never used
  8850  001F1A  0012               	return		;funcret
  8851  001F1C                     __end_of_RtccWriteTime:
  8852                           	opt stack 0
  8853                           tblptru	equ	0xFF8
  8854                           tblptrh	equ	0xFF7
  8855                           tblptrl	equ	0xFF6
  8856                           tablat	equ	0xFF5
  8857                           prodh	equ	0xFF4
  8858                           prodl	equ	0xFF3
  8859                           intcon	equ	0xFF2
  8860                           indf0	equ	0xFEF
  8861                           postinc0	equ	0xFEE
  8862                           fsr0h	equ	0xFEA
  8863                           fsr0l	equ	0xFE9
  8864                           wreg	equ	0xFE8
  8865                           postdec1	equ	0xFE5
  8866                           fsr1l	equ	0xFE1
  8867                           indf2	equ	0xFDF
  8868                           postinc2	equ	0xFDE
  8869                           postdec2	equ	0xFDD
  8870                           fsr2h	equ	0xFDA
  8871                           fsr2l	equ	0xFD9
  8872                           status	equ	0xFD8
  8873                           
  8874 ;; *************** function _RtccWriteDate *****************
  8875 ;; Defined at:
  8876 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteDate.c"
  8877 ;; Parameters:    Size  Location     Type
  8878 ;;  pDt             2    0[COMRAM] PTR const struct .
  8879 ;;		 -> RtccDate(4), 
  8880 ;;  di              1    2[COMRAM] enum E7121
  8881 ;; Auto vars:     Size  Location     Type
  8882 ;;  tempHourWDay    2   11[COMRAM] struct .
  8883 ;;  tempDayMonth    2    9[COMRAM] struct .
  8884 ;;  tempYear        2    6[COMRAM] struct .
  8885 ;;  wasWrEn         1    8[COMRAM] enum E7121
  8886 ;;  wasAlrm         1    5[COMRAM] enum E7121
  8887 ;;  wasOn           1    4[COMRAM] enum E7121
  8888 ;; Return value:  Size  Location     Type
  8889 ;;                  1    wreg      enum E7121
  8890 ;; Registers used:
  8891 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8892 ;; Tracked objects:
  8893 ;;		On entry : 0/0
  8894 ;;		On exit  : 0/0
  8895 ;;		Unchanged: 0/0
  8896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8897 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8898 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8899 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8900 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8901 ;;Total ram usage:       13 bytes
  8902 ;; Hardware stack levels used:    1
  8903 ;; Hardware stack levels required when called:    1
  8904 ;; This function calls:
  8905 ;;		_RtccWrOn
  8906 ;; This function is called by:
  8907 ;;		_Write_RTC
  8908 ;; This function uses a non-reentrant model
  8909 ;;
  8910                           
  8911                           	psect	text54
  8912  001BAA                     __ptext54:
  8913                           	opt stack 0
  8914  001BAA                     _RtccWriteDate:
  8915                           	opt stack 27
  8916                           
  8917                           ;incstack = 0
  8918  001BAA  0E00               	movlw	0
  8919  001BAC  6E06               	movwf	RtccWriteDate@wasAlrm,c
  8920  001BAE  EE20 F002          	lfsr	2,2
  8921  001BB2  5001               	movf	RtccWriteDate@pDt,w,c
  8922  001BB4  26D9               	addwf	fsr2l,f,c
  8923  001BB6  5002               	movf	RtccWriteDate@pDt+1,w,c
  8924  001BB8  22DA               	addwfc	fsr2h,f,c
  8925  001BBA  0E13               	movlw	19
  8926  001BBC  60DF               	cpfslt	indf2,c
  8927  001BBE  0012               	return	
  8928  001BC0  EE20 F002          	lfsr	2,2
  8929  001BC4  5001               	movf	RtccWriteDate@pDt,w,c
  8930  001BC6  26D9               	addwf	fsr2l,f,c
  8931  001BC8  5002               	movf	RtccWriteDate@pDt+1,w,c
  8932  001BCA  22DA               	addwfc	fsr2h,f,c
  8933  001BCC  50DF               	movf	indf2,w,c
  8934  001BCE  B4D8               	btfsc	status,2,c
  8935  001BD0  0012               	return	
  8936  001BD2  EE20 F001          	lfsr	2,1
  8937  001BD6  5001               	movf	RtccWriteDate@pDt,w,c
  8938  001BD8  26D9               	addwf	fsr2l,f,c
  8939  001BDA  5002               	movf	RtccWriteDate@pDt+1,w,c
  8940  001BDC  22DA               	addwfc	fsr2h,f,c
  8941  001BDE  0E32               	movlw	50
  8942  001BE0  60DF               	cpfslt	indf2,c
  8943  001BE2  0012               	return	
  8944  001BE4  EE20 F001          	lfsr	2,1
  8945  001BE8  5001               	movf	RtccWriteDate@pDt,w,c
  8946  001BEA  26D9               	addwf	fsr2l,f,c
  8947  001BEC  5002               	movf	RtccWriteDate@pDt+1,w,c
  8948  001BEE  22DA               	addwfc	fsr2h,f,c
  8949  001BF0  50DF               	movf	indf2,w,c
  8950  001BF2  B4D8               	btfsc	status,2,c
  8951  001BF4  0012               	return	
  8952  001BF6  EE20 F003          	lfsr	2,3
  8953  001BFA  5001               	movf	RtccWriteDate@pDt,w,c
  8954  001BFC  26D9               	addwf	fsr2l,f,c
  8955  001BFE  5002               	movf	RtccWriteDate@pDt+1,w,c
  8956  001C00  22DA               	addwfc	fsr2h,f,c
  8957  001C02  0E99               	movlw	153
  8958  001C04  64DF               	cpfsgt	indf2,c
  8959  001C06  D002               	goto	l3769
  8960  001C08  0012               	return	
  8961                           
  8962                           ;	Return value of _RtccWriteDate is never used
  8963  001C0A  0012               	return	
  8964  001C0C                     l3769:
  8965  001C0C  EE20 F003          	lfsr	2,3
  8966  001C10  5001               	movf	RtccWriteDate@pDt,w,c
  8967  001C12  26D9               	addwf	fsr2l,f,c
  8968  001C14  5002               	movf	RtccWriteDate@pDt+1,w,c
  8969  001C16  22DA               	addwfc	fsr2h,f,c
  8970  001C18  50DF               	movf	indf2,w,c
  8971  001C1A  6E07               	movwf	RtccWriteDate@tempYear,c
  8972  001C1C  EE20 F001          	lfsr	2,1
  8973  001C20  5001               	movf	RtccWriteDate@pDt,w,c
  8974  001C22  26D9               	addwf	fsr2l,f,c
  8975  001C24  5002               	movf	RtccWriteDate@pDt+1,w,c
  8976  001C26  22DA               	addwfc	fsr2h,f,c
  8977  001C28  50DF               	movf	indf2,w,c
  8978  001C2A  6E0A               	movwf	RtccWriteDate@tempDayMonth,c
  8979  001C2C  EE20 F002          	lfsr	2,2
  8980  001C30  5001               	movf	RtccWriteDate@pDt,w,c
  8981  001C32  26D9               	addwf	fsr2l,f,c
  8982  001C34  5002               	movf	RtccWriteDate@pDt+1,w,c
  8983  001C36  22DA               	addwfc	fsr2h,f,c
  8984  001C38  50DF               	movf	indf2,w,c
  8985  001C3A  6E0B               	movwf	RtccWriteDate@tempDayMonth+1,c
  8986  001C3C  5003               	movf	RtccWriteDate@di,w,c
  8987  001C3E  B4D8               	btfsc	status,2,c
  8988  001C40  D002               	goto	l3775
  8989  001C42  9CF2               	bcf	intcon,6,c	;volatile
  8990  001C44  D000               	goto	l3775
  8991  001C46                     l3775:
  8992  001C46  0E00               	movlw	0
  8993  001C48  BB3F               	btfsc	63,5,b	;volatile
  8994  001C4A  0E01               	movlw	1
  8995  001C4C  6E09               	movwf	RtccWriteDate@wasWrEn,c
  8996  001C4E  5009               	movf	RtccWriteDate@wasWrEn,w,c
  8997  001C50  A4D8               	btfss	status,2,c
  8998  001C52  D003               	goto	l3779
  8999  001C54  EC77  F018         	call	_RtccWrOn	;wreg free
  9000  001C58  D000               	goto	l3779
  9001  001C5A                     l3779:
  9002  001C5A  0E00               	movlw	0
  9003  001C5C  BF3F               	btfsc	63,7,b	;volatile
  9004  001C5E  0E01               	movlw	1
  9005  001C60  6E05               	movwf	RtccWriteDate@wasOn,c
  9006  001C62  5005               	movf	RtccWriteDate@wasOn,w,c
  9007  001C64  B4D8               	btfsc	status,2,c
  9008  001C66  D007               	goto	l3785
  9009  001C68  0E00               	movlw	0
  9010  001C6A  BE91               	btfsc	3985,7,c	;volatile
  9011  001C6C  0E01               	movlw	1
  9012  001C6E  6E06               	movwf	RtccWriteDate@wasAlrm,c
  9013  001C70  010F               	movlb	15	; () banked
  9014  001C72  9F3F               	bcf	63,7,b	;volatile
  9015  001C74  D000               	goto	l3785
  9016  001C76                     l3785:
  9017  001C76  0EFC               	movlw	252
  9018  001C78  010F               	movlb	15	; () banked
  9019  001C7A  173F               	andwf	63,f,b	;volatile
  9020  001C7C  010F               	movlb	15	; () banked
  9021  001C7E  813F               	bsf	63,0,b	;volatile
  9022                           
  9023                           ; BSR set to: 15
  9024  001C80  CF98 F00C          	movff	3992,RtccWriteDate@tempHourWDay	;volatile
  9025                           
  9026                           ; BSR set to: 15
  9027  001C84  CF99 F00D          	movff	3993,RtccWriteDate@tempHourWDay+1	;volatile
  9028                           
  9029                           ; BSR set to: 15
  9030  001C88  C001  FFD9         	movff	RtccWriteDate@pDt,fsr2l
  9031  001C8C  C002  FFDA         	movff	RtccWriteDate@pDt+1,fsr2h
  9032  001C90  50DF               	movf	indf2,w,c
  9033  001C92  6E0D               	movwf	RtccWriteDate@tempHourWDay+1,c
  9034                           
  9035                           ; BSR set to: 15
  9036  001C94  0EFC               	movlw	252
  9037  001C96  010F               	movlb	15	; () banked
  9038  001C98  173F               	andwf	63,f,b	;volatile
  9039                           
  9040                           ; BSR set to: 15
  9041  001C9A  0E03               	movlw	3
  9042  001C9C  010F               	movlb	15	; () banked
  9043  001C9E  133F               	iorwf	63,f,b	;volatile
  9044                           
  9045                           ; BSR set to: 15
  9046  001CA0  C007  FF98         	movff	RtccWriteDate@tempYear,3992	;volatile
  9047                           
  9048                           ; BSR set to: 15
  9049  001CA4  C008  FF99         	movff	RtccWriteDate@tempYear+1,3993	;volatile
  9050                           
  9051                           ; BSR set to: 15
  9052  001CA8  C00A  FF98         	movff	RtccWriteDate@tempDayMonth,3992	;volatile
  9053                           
  9054                           ; BSR set to: 15
  9055  001CAC  C00B  FF99         	movff	RtccWriteDate@tempDayMonth+1,3993	;volatile
  9056                           
  9057                           ; BSR set to: 15
  9058  001CB0  C00C  FF98         	movff	RtccWriteDate@tempHourWDay,3992	;volatile
  9059                           
  9060                           ; BSR set to: 15
  9061  001CB4  C00D  FF99         	movff	RtccWriteDate@tempHourWDay+1,3993	;volatile
  9062                           
  9063                           ; BSR set to: 15
  9064  001CB8  5005               	movf	RtccWriteDate@wasOn,w,c
  9065  001CBA  B4D8               	btfsc	status,2,c
  9066  001CBC  D00D               	goto	l3821
  9067                           
  9068                           ; BSR set to: 15
  9069  001CBE  010F               	movlb	15	; () banked
  9070  001CC0  8F3F               	bsf	63,7,b	;volatile
  9071                           
  9072                           ; BSR set to: 15
  9073  001CC2  5006               	movf	RtccWriteDate@wasAlrm,w,c
  9074  001CC4  B4D8               	btfsc	status,2,c
  9075  001CC6  D002               	goto	l3817
  9076                           
  9077                           ; BSR set to: 15
  9078  001CC8  8E91               	bsf	3985,7,c	;volatile
  9079  001CCA  D000               	goto	l3817
  9080  001CCC                     l3817:
  9081                           
  9082                           ; BSR set to: 15
  9083  001CCC  5009               	movf	RtccWriteDate@wasWrEn,w,c
  9084  001CCE  B4D8               	btfsc	status,2,c
  9085  001CD0  D009               	goto	l3825
  9086                           
  9087                           ; BSR set to: 15
  9088  001CD2  EC77  F018         	call	_RtccWrOn	;wreg free
  9089  001CD6  D006               	goto	l3825
  9090  001CD8                     l3821:
  9091  001CD8  5009               	movf	RtccWriteDate@wasWrEn,w,c
  9092  001CDA  A4D8               	btfss	status,2,c
  9093  001CDC  D003               	goto	l3825
  9094  001CDE  010F               	movlb	15	; () banked
  9095  001CE0  9B3F               	bcf	63,5,b	;volatile
  9096                           
  9097                           ; BSR set to: 15
  9098  001CE2  D000               	goto	l3825
  9099  001CE4                     l3825:
  9100  001CE4  5003               	movf	RtccWriteDate@di,w,c
  9101  001CE6  B4D8               	btfsc	status,2,c
  9102  001CE8  0012               	return	
  9103  001CEA  9CF2               	bcf	intcon,6,c	;volatile
  9104  001CEC  0012               	return	
  9105                           
  9106                           ;	Return value of _RtccWriteDate is never used
  9107  001CEE  0012               	return		;funcret
  9108  001CF0                     __end_of_RtccWriteDate:
  9109                           	opt stack 0
  9110                           tblptru	equ	0xFF8
  9111                           tblptrh	equ	0xFF7
  9112                           tblptrl	equ	0xFF6
  9113                           tablat	equ	0xFF5
  9114                           prodh	equ	0xFF4
  9115                           prodl	equ	0xFF3
  9116                           intcon	equ	0xFF2
  9117                           indf0	equ	0xFEF
  9118                           postinc0	equ	0xFEE
  9119                           fsr0h	equ	0xFEA
  9120                           fsr0l	equ	0xFE9
  9121                           wreg	equ	0xFE8
  9122                           postdec1	equ	0xFE5
  9123                           fsr1l	equ	0xFE1
  9124                           indf2	equ	0xFDF
  9125                           postinc2	equ	0xFDE
  9126                           postdec2	equ	0xFDD
  9127                           fsr2h	equ	0xFDA
  9128                           fsr2l	equ	0xFD9
  9129                           status	equ	0xFD8
  9130                           
  9131 ;; *************** function _RtccWrOn *****************
  9132 ;; Defined at:
  9133 ;;		line 21 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWrOn.c"
  9134 ;; Parameters:    Size  Location     Type
  9135 ;;		None
  9136 ;; Auto vars:     Size  Location     Type
  9137 ;;  data            2    0        unsigned int 
  9138 ;; Return value:  Size  Location     Type
  9139 ;;		None               void
  9140 ;; Registers used:
  9141 ;;		wreg, status,2
  9142 ;; Tracked objects:
  9143 ;;		On entry : 0/0
  9144 ;;		On exit  : 0/0
  9145 ;;		Unchanged: 0/0
  9146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9148 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9150 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9151 ;;Total ram usage:        0 bytes
  9152 ;; Hardware stack levels used:    1
  9153 ;; This function calls:
  9154 ;;		Nothing
  9155 ;; This function is called by:
  9156 ;;		_Write_RTC
  9157 ;;		_RtccWriteDate
  9158 ;;		_RtccWriteTime
  9159 ;; This function uses a non-reentrant model
  9160 ;;
  9161                           
  9162                           	psect	text55
  9163  0030EE                     __ptext55:
  9164                           	opt stack 0
  9165  0030EE                     _RtccWrOn:
  9166                           	opt stack 27
  9167                           
  9168                           ;incstack = 0
  9169  0030EE  9CF2               	bcf	intcon,6,c	;volatile
  9170  0030F0  0E55               	movlw	85
  9171  0030F2  6EA7               	movwf	4007,c	;volatile
  9172  0030F4  0EAA               	movlw	170
  9173  0030F6  6EA7               	movwf	4007,c	;volatile
  9174  0030F8  010F               	movlb	15	; () banked
  9175  0030FA  8B3F               	bsf	63,5,b	;volatile
  9176                           
  9177                           ; BSR set to: 15
  9178  0030FC  8CF2               	bsf	intcon,6,c	;volatile
  9179                           
  9180                           ; BSR set to: 15
  9181  0030FE  0012               	return		;funcret
  9182  003100                     __end_of_RtccWrOn:
  9183                           	opt stack 0
  9184                           tblptru	equ	0xFF8
  9185                           tblptrh	equ	0xFF7
  9186                           tblptrl	equ	0xFF6
  9187                           tablat	equ	0xFF5
  9188                           prodh	equ	0xFF4
  9189                           prodl	equ	0xFF3
  9190                           intcon	equ	0xFF2
  9191                           indf0	equ	0xFEF
  9192                           postinc0	equ	0xFEE
  9193                           fsr0h	equ	0xFEA
  9194                           fsr0l	equ	0xFE9
  9195                           wreg	equ	0xFE8
  9196                           postdec1	equ	0xFE5
  9197                           fsr1l	equ	0xFE1
  9198                           indf2	equ	0xFDF
  9199                           postinc2	equ	0xFDE
  9200                           postdec2	equ	0xFDD
  9201                           fsr2h	equ	0xFDA
  9202                           fsr2l	equ	0xFD9
  9203                           status	equ	0xFD8
  9204                           tblptru	equ	0xFF8
  9205                           tblptrh	equ	0xFF7
  9206                           tblptrl	equ	0xFF6
  9207                           tablat	equ	0xFF5
  9208                           prodh	equ	0xFF4
  9209                           prodl	equ	0xFF3
  9210                           intcon	equ	0xFF2
  9211                           indf0	equ	0xFEF
  9212                           postinc0	equ	0xFEE
  9213                           fsr0h	equ	0xFEA
  9214                           fsr0l	equ	0xFE9
  9215                           wreg	equ	0xFE8
  9216                           postdec1	equ	0xFE5
  9217                           fsr1l	equ	0xFE1
  9218                           indf2	equ	0xFDF
  9219                           postinc2	equ	0xFDE
  9220                           postdec2	equ	0xFDD
  9221                           fsr2h	equ	0xFDA
  9222                           fsr2l	equ	0xFD9
  9223                           status	equ	0xFD8
  9224                           
  9225                           	psect	rparam
  9226  0000                     tblptru	equ	0xFF8
  9227                           tblptrh	equ	0xFF7
  9228                           tblptrl	equ	0xFF6
  9229                           tablat	equ	0xFF5
  9230                           prodh	equ	0xFF4
  9231                           prodl	equ	0xFF3
  9232                           intcon	equ	0xFF2
  9233                           indf0	equ	0xFEF
  9234                           postinc0	equ	0xFEE
  9235                           fsr0h	equ	0xFEA
  9236                           fsr0l	equ	0xFE9
  9237                           wreg	equ	0xFE8
  9238                           postdec1	equ	0xFE5
  9239                           fsr1l	equ	0xFE1
  9240                           indf2	equ	0xFDF
  9241                           postinc2	equ	0xFDE
  9242                           postdec2	equ	0xFDD
  9243                           fsr2h	equ	0xFDA
  9244                           fsr2l	equ	0xFD9
  9245                           status	equ	0xFD8


Data Sizes:
    Strings     122
    Constant    71
    Data        16
    BSS         72
    Persistent  13
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160     23     125
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    RtccWriteTime@pTm	PTR const struct . size(2) Largest target is 4
		 -> RtccTime(BANK0[4]), 

    RtccWriteDate@pDt	PTR const struct . size(2) Largest target is 4
		 -> RtccDate(BANK0[4]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_15(CODE[10]), STR_14(CODE[15]), STR_13(CODE[5]), STR_12(CODE[5]), 
		 -> STR_11(CODE[5]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), 
		 -> STR_7(CODE[5]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> buffer2(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    obtain_pass@digit	PTR short  size(2) Largest target is 2
		 -> set_vision@digit(BANK0[2]), 

    next_code@input	PTR unsigned char  size(2) Largest target is 1
		 -> obtain_pass@input(COMRAM[1]), 

    next_code@digit	PTR short  size(2) Largest target is 2
		 -> set_vision@digit(BANK0[2]), 

    lcd_putrs@ptr	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_21(CODE[8]), STR_20(CODE[4]), STR_19(CODE[3]), STR_18(CODE[10]), 
		 -> STR_17(CODE[11]), STR_16(CODE[11]), buffer2(BANK0[20]), STR_3(CODE[10]), 
		 -> STR_2(CODE[13]), STR_1(CODE[33]), 


Critical Paths under _main in COMRAM

    _set_vision->_obtain_pass
    _write_Date->_sprintf
    _twinkle->_read_keyboard
    _read_keyboard->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    __delay_s->___awdiv
    _set_desactive_vision->_lcd_putrs
    _lcd_setcursor_vb->_lcd_send_byte
    _lcd_putrs->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _review_code->_checkPass
    _obtain_pass->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftadd
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___awtoft
    ___ftmul->___lbtoft
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    _next_code->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    ___lbtoft->___ftpack
    _clear->_lcd_comand
    _caratula->_lcd_comand
    _lcd_init->_lcd_send_byte
    _lcd_comand->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _Write_RTC->_RtccWriteDate

Critical Paths under _main in BANK0

    _main->_set_vision
    _set_vision->_obtain_pass
    _obtain_pass->_pow

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  130837
                                             94 COMRAM     1     1      0
                                             22 BANK0      1     1      0
                              _Setup
                           _caratula
                         _lcd_gotoxy
                          _lcd_putrs
                      _read_keyboard
                         _set_vision
 ---------------------------------------------------------------------------------
 (1) _set_vision                                           5     5      0  114319
                                             17 BANK0      5     5      0
                              _clear
                      _is_not_letter
                         _lcd_gotoxy
                          _lcd_putrs
                      _not_fill_pass
                        _obtain_pass
                      _read_keyboard
                        _review_code
               _set_desactive_vision
                            _twinkle
                         _write_Date
 ---------------------------------------------------------------------------------
 (2) _write_Date                                           0     0      0    8431
                         _lcd_gotoxy
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _twinkle                                              1     1      0   13367
                                             36 COMRAM     1     1      0
                           __delay_s
                         _lcd_gotoxy
                          _lcd_putrs
                      _read_keyboard
 ---------------------------------------------------------------------------------
 (3) _read_keyboard                                        1     1      0    6970
                                             35 COMRAM     1     1      0
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             32    22     10    3452
                                             12 COMRAM    23    13     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) __delay_s                                             7     5      2    1394
                                              8 COMRAM     7     5      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _set_desactive_vision                                 2     0      2    5861
                                             10 COMRAM     2     0      2
                         _lcd_gotoxy
                          _lcd_putrs
                   _lcd_setcursor_vb
 ---------------------------------------------------------------------------------
 (3) _lcd_setcursor_vb                                     2     1      1     796
                                              4 COMRAM     2     1      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (3) _lcd_putrs                                            2     0      2    3518
                                              8 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (4) _lcd_putc                                             1     1      0    2129
                                              7 COMRAM     1     1      0
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (2) _review_code                                          4     0      4     258
                                              2 COMRAM     4     0      4
                          _checkPass
 ---------------------------------------------------------------------------------
 (3) _checkPass                                            2     0      2      86
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _obtain_pass                                         13     8      5   73423
                                             87 COMRAM     7     2      5
                                             11 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                           ___lbtoft
                          _next_code
                                _pow
 ---------------------------------------------------------------------------------
 (3) _pow                                                 17    11      6   58696
                                             81 COMRAM     6     0      6
                                              0 BANK0     11    11      0
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (4) _log                                                  5     2      3   19163
                                             51 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _exp                                                  9     6      3   31848
                                             72 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (5) _ldexp                                                7     2      5     376
                                             51 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (5) _floor                                                8     5      3    8237
                                             64 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                7     2      5     480
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             15    11      4     508
                                             39 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftge                                               9     3      6     648
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (6) ___altoft                                            10     6      4    2389
                                             54 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           12     5      7    8487
                                             39 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     543
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___ftmul                                             15     9      6    3485
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftsub                                              6     0      6    4194
                                             39 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (6) ___ftadd                                             12     6      6    3897
                                             27 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftneg                                              3     0      3     237
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (5) ___ftdiv                                             15     9      6    2697
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___awtoft                                             4     1      3    2534
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             9     5      4    2320
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _next_code                                            6     2      4    1677
                                              7 COMRAM     6     2      4
                     _clear_keyboard
                         _lcd_gotoxy
 ---------------------------------------------------------------------------------
 (5) _lcd_gotoxy                                           3     2      1    1461
                                              4 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (4) _clear_keyboard                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___lbtoft                                             4     1      3    2209
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2187
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _not_fill_pass                                        2     0      2      86
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _is_not_letter                                        2     2      0     112
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _clear                                                1     1      0     646
                                              5 COMRAM     1     1      0
                         _lcd_comand
 ---------------------------------------------------------------------------------
 (1) _caratula                                             0     0      0     646
                         _lcd_comand
 ---------------------------------------------------------------------------------
 (1) _Setup                                                0     0      0    3899
                          _Write_RTC
                         _lcd_comand
                           _lcd_init
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             1     1      0     848
                                              4 COMRAM     1     1      0
                        _Delay1KTCYx
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _lcd_comand                                           1     1      0     646
                                              4 COMRAM     1     1      0
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (5) _lcd_send_byte                                        2     1      1     624
                                              2 COMRAM     2     1      1
                       _Delay100TCYx
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (6) _lcd_send_nibble                                      2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _Delay100TCYx                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Write_RTC                                            0     0      0    2405
                           _RtccWrOn
                      _RtccWriteDate
                      _RtccWriteTime
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1196
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _RtccWriteTime                                       11     8      3     537
                                              0 COMRAM    11     8      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (3) _RtccWriteDate                                       13    10      3     672
                                              0 COMRAM    13    10      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (4) _RtccWrOn                                             2     2      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Setup
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_init
       _Delay1KTCYx
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
       _lcd_send_nibble
   _caratula
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
   _lcd_gotoxy
     _lcd_send_byte
       _Delay100TCYx
       _lcd_send_nibble
   _lcd_putrs
     _lcd_putc
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
   _read_keyboard
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _set_vision
     _clear
       _lcd_comand
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _is_not_letter
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _not_fill_pass
     _obtain_pass
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___lbtoft
         ___ftpack
       _next_code
         _clear_keyboard
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _pow
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___lltoft
           ___ftpack
         _exp
           ___awtoft
             ___ftpack
           ___ftdiv
             ___ftpack
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lbtoft (ARG)
               ___ftpack
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
           _floor
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
           _log (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
         _log
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
           _frexp
     _read_keyboard
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _review_code
       _checkPass
     _set_desactive_vision
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _lcd_setcursor_vb
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _twinkle
       __delay_s
         ___awdiv
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _read_keyboard
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _write_Date
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       1       4        0.6%
BANK0               A0     17      7D       5       78.1%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      DC       6        0.0%
DATA                 0      0      DC       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Sep 08 19:17:36 2016

                 ___altoft@exp 003F                              _a 007C                              _b 007E  
                            _c 0080                              _i 0084                              _j 0086  
                            _k 0088                  ___altoft@sign 0040                    _state_alarm 00CE  
                           l75 2F20                             l76 2F22                 ?_lcd_send_byte 0003  
                 ___awdiv@sign 0006            ___wmul@multiplicand 0003                    lcd_comand@d 0005  
                 __CFG_CP0$OFF 000000                   ___ftadd@exp1 0027                   ___ftadd@exp2 0026  
                 ___ftadd@sign 0025                            l220 10BC                            l212 106E  
                          l204 1002                            l221 10B8                            l213 106A  
                          l205 0FFE                            l240 11AC                            l232 1138  
                          l224 10F2                            l216 107E                            l208 1038  
                          l241 11A8                            l233 1134                            l225 10EE  
                          l217 107A                            l209 1034                            l260 1250  
                          l252 120A                            l244 11E2                            l236 1176  
                          l228 1128                            l261 124C                            l253 1206  
                          l245 11DE                            l237 1172                            l229 1124  
                          l256 1240                            l248 11F2                            l265 125C  
                          l257 123C                            l249 11EE                            l580 2CB4  
                          l671 144E                            l587 2F60                            _dia 00C1  
                          _key 00CD                            _mes 00C7                            _exp 14E0  
                          _log 1CF0                            _pow 1A28                            wreg 000FE8  
                  lcd_gotoxy@x 0006                    lcd_gotoxy@y 0005                   ___ftdiv@cntr 0012  
                 ___ftdiv@sign 0017                           l1111 26FA                           l1140 170C  
                         l1144 1736                           l1155 17F8                           l3011 179C  
                         l1315 2C68                           l1164 1814                           l3013 17A8  
                         l3005 1778                           l3101 2788                           l1325 2D60  
                         l1175 22C2                           l3031 1832                           l3023 17E0  
                         l3015 17B4                           l1352 1A62                           l3041 1864  
                         l3025 17EC                           l3017 17BC                           l3051 2046  
                         l3107 27B4                           l1197 301C                           l3117 1F48  
                         l1357 1B9C                           l3301 2D36                           l3215 225C  
                         l3071 20A2                           l3135 1FB0                           l3303 2D3E  
                         l1376 1596                           l3209 2234                           l3081 20D0  
                         l3057 206E                           l3153 200A                           l3145 1FDA  
                         l3321 2406                           l1377 16BA                           l3401 12B8  
                         l4033 2B5A                           l4105 238E                           l4113 23C4  
                         l3235 229C                           l3075 20B4                           l3147 1FE8  
                         l3139 1FC0                           l1387 24A8                           l4027 2200  
                         l3307 2D54                           l3403 12CE                           l3245 22D0  
                         l3253 2E62                           l3085 20E2                           l3149 1FF2  
                         l3165 2878                           l3325 2414                           l3181 2D7A  
                         l3421 1378                           l4045 2BA6                           l4109 23B2  
                         l3079 20CA                           l3183 2D86                           l3431 13A0  
                         l3415 1350                           l3407 12EC                           l4119 28EC  
                         l3505 27F8                           l3521 2834                           l3265 2EA4  
                         l3089 20F8                           l3337 25CA                           l3097 2756  
                         l3329 242E                           l3601 1690                           l3185 2D92  
                         l3281 2C36                           l3507 2802                           l3531 2BBC  
                         l3339 2648                           l3371 254E                           l3355 2516  
                         l3347 24CE                           l3179 2D6E                           l3291 2C5C  
                         l3283 2C3E                           l3443 13EC                           l3435 13C4  
                         l3427 1394                           l3419 1356                           l4091 231A  
                         l3701 1E4E                           l3525 2844                           l3517 2828  
                         l3509 280A                           l3533 2BCA                           l3373 257A  
                         l3189 2D9E                           l3445 13F6                           l3711 1E8C  
                         l2911 266E                           l3367 253E                           l3551 1D2E  
                         l3383 2CF6                           l3279 2C2C                           l3199 3066  
                         l3463 1454                           l3455 1424                           l3439 13C8  
                         l3471 14B4                           l3545 1D0C                           l3457 142C  
                         l3449 1402                           l3473 14D0                           l4089 230C  
                         l3707 1E78                           l2923 26C2                           l2915 267E  
                         l3379 2CCC                           l3299 2D2C                           l3395 12A0  
                         l4099 2350                           l3821 1CD8                           l3717 1EA8  
                         l3493 27D0                           l2933 2702                           l2925 26E2  
                         l2917 268A                           l3573 1530                           l3469 14A8  
                         l3397 12AE                           l3389 1286                           l2927 26EE  
                         l2919 26AA                           l3567 14F8                           l3825 1CE4  
                         l3817 1CCC                           l3753 1F10                           l3745 1EF8  
                         l3681 1264                           l3499 27E2                           l2939 2714  
                         l2947 3036                           l3579 1568                           l3835 2CA0  
                         l3749 1F04                           l2885 30DE                           l2949 303C  
                         l3861 1A70                           l3775 1C46                           l3687 30CC  
                         l3951 298C                           l2983 171A                           l2967 2A86  
                         l3785 1C76                           l3769 1C0C                           l3961 29A4  
                         l2969 2A94                           l3779 1C5A                           l3955 2994  
                         l2995 1750                           l3875 1AEC                           l3867 1A88  
                         ?_exp 0049                           l2989 1744                           ?_log 0034  
                         l3879 1B14                           l3969 29B8                           ?_pow 0052  
                         STR_1 0F48                           STR_2 0F78                           STR_3 0FA4  
                         STR_4 0FB6                           STR_5 0FB6                           STR_6 0FB6  
                         STR_7 0FB6                           STR_8 0FB6                           STR_9 0FB6  
                         u2210 2B1E                           u2230 2B3A                           u3030 2CEC  
                         u2208 2B06                           u4000 1AD4                           u3040 2D16  
                         u2170 2AEC                           u2228 2B20                           u4100 30C4  
                         u3037 2CE2                           u2190 2B04                           u3047 2D0C  
                         u2248 2B3C                           u3320 1570                           u2601 2056  
                         u3330 1572                           u2371 16D8                           u2188 2AEE  
                         u2381 16EC                           u2811 2244                           u2581 202E  
                         u4407 30E0                           u2671 1F2C                           u2760 28A0  
                         u2690 1F66                           u4357 2956                           u2950 2420  
                         u2791 221C                           u2695 1F5E                           u4367 126A  
                         u2768 28A2                           u4377 2CA6                           u4387 3098  
                         u3940 3086                           u4397 30CE                           u2990 24EE  
                         u2998 24F0               ?_lcd_send_nibble 0001                           _anio 00BF  
                         _flag 06E0                           _main 28E2                           _hora 00C5  
                 ___ftpack@arg 0001                   ___ftpack@exp 0004                           fsr0h 000FEA  
                         indf0 000FEF                           fsr0l 000FE9                           fsr2h 000FDA  
                         fsr1l 000FE1                           indf2 000FDF                           fsr2l 000FD9  
                         exp@x 0049                           log@x 0034                  __CFG_T1DIG$ON 000000  
                         pow@x 0052                           pow@y 0055                           prodh 000FF4  
                         prodl 000FF3                           start 0000                  __CFG_IESO$OFF 000000  
                 ___ftmul@cntr 001A                   ___param_bank 000010                   ___ftmul@sign 001B  
              obtain_pass@pass 0058                   ___fttol@exp1 0036                          ??_exp 004C  
                        ??_log 0037                   ___fttol@lval 0032                          ??_pow 0058  
                  _Delay1KTCYx 30CA                  __CFG_PLLDIV$1 000000                          ?_main 0001  
              __end_of___awdiv 2850                __end_of___ftadd 188C                          STR_10 0FB6  
                        STR_11 0FB6                          STR_12 0FB6                          STR_20 0FBB  
                        STR_13 0FB6                          STR_21 0FAE                          STR_14 0F69  
                        STR_15 0F9A                          STR_16 0F85                          STR_17 0F5E  
                        STR_18 0F90                          STR_19 0FBF          __size_of_Delay100TCYx 0012  
              __end_of___ftdiv 22F8                __end_of___ftneg 302A                __end_of___ftmul 2120  
              ___awdiv@divisor 0003                __end_of___ftsub 2E8E                __end_of___fttol 201E  
              __end_of___lwdiv 2C72                __end_of___lwmod 2D6A                ___awdiv@counter 0005  
                        _TRISA 000F92                          _TRISB 000F93                          _TRISC 000F94  
                 ___lltoft@exp 0011                 __CFG_FCMEN$OFF 000000                          _Setup 2E02  
                ___awtoft@sign 000C                          _clear 308C                __end_of_dpowers 0F0B  
                        _floor 23D8                          _ldexp 24B6                          _frexp 2850  
                        _mes_d 00D6                          _errno 0082                          _mes_u 00D7  
              __end_of_isdigit 3070                  ___ftpack@sign 0005                   ?_obtain_pass 0058  
                        tablat 000FF5                          pow@yi 00AF                   lcd_putrs@ptr 0009  
                        status 000FD8                __end_of_sprintf 14E0                __end_of_twinkle 2BB6  
                  exp@exponent 004F        __CFG_DSWDTOSC$INTOSCREF 000000                    ldexp@newexp 0037  
      __size_of_clear_keyboard 0008                __initialization 2ECA                    log@exponent 0037  
                 _Delay100TCYx 30DC                   __end_of_main 2966                ??_lcd_send_byte 0004  
             obtain_pass@digit 005B               obtain_pass@input 005A           _set_desactive_vision 2F66  
                       ??_main 005F                  ___fttol@sign1 0031                  __activetblptr 000002  
           is_not_letter@input 0002               __end_of_RtccWrOn 3100                         ?_Setup 0001  
                       ?_clear 0001                         _ADCON0 000FC2                         _ADCON1 000FC1  
                       ?_floor 0041                         ?_ldexp 0034                         ?_frexp 0001  
             __end_of___altoft 2AE0                         _EECON2 000FA7                         _ANCON0 000F48  
                       _ANCON1 000F49               ___awdiv@dividend 0001               __end_of___awtoft 2ECA  
             __end_of___ftpack 2724               __end_of___lbtoft 3006               __end_of__delay_s 2CCA  
             __end_of___lltoft 2C16                 __CFG_WDTEN$OFF 000000               RtccWriteDate@pDt 0001  
                       _RTCCFG 000F3F                 __CFG_WPCFG$OFF 000000               __end_of_caratula 312E  
               __CFG_WPDIS$OFF 000000                 __CFG_XINST$OFF 000000               __end_of_lcd_init 29E6  
             __end_of_lcd_putc 2DB6                         ___ftge 2724              ?_lcd_setcursor_vb 0005  
                       ___wmul 2F92                      ??___awdiv 0005                      ??___ftadd 0022  
               __CFG_STVREN$ON 000000                      ??___ftdiv 000F                      ??___ftneg 0004  
                       _diasem 00C3                      ??___ftmul 0013                         _anio_d 00CF  
                    ??___ftsub 002E                      ??___fttol 002C                         _anio_u 00D0  
                    ??___lwdiv 0005                      ??___lwmod 000C                   ?_review_code 0003  
           ??_lcd_setcursor_vb 0006                         _hora_d 00D4                         _hora_u 00D5  
                       clear_0 2ED4               ___awdiv@quotient 0007                         _minuto 00C9  
        ?_set_desactive_vision 000B          __end_of_RtccWriteDate 1CF0          __end_of_RtccWriteTime 1F1C  
                checkPass@pass 0001                         floor@i 0044                         floor@x 0041  
        ___ftmul@f3_as_product 0017               RtccWriteTime@pTm 0001                      ??_isdigit 0001  
                 __mediumconst 0000                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8         __size_of_is_not_letter 0030                      ??_sprintf 0017  
                    ??_twinkle 0025         __size_of_read_keyboard 02B8          __end_of_not_fill_pass 30CA  
             __end_ofexp@coeff 0F2D               __end_oflog@coeff 0F48                     __accesstop 0060  
      __end_of__initialization 2EFA                     ___altoft@c 0037                     ___ftadd@f1 001C  
                   ___ftadd@f2 001F             __size_of_Write_RTC 019C                     ___ftge@ff1 0001  
                   ___ftge@ff2 0004                   eval_poly@res 0031                  ___rparam_used 000001  
                   ___ftdiv@f1 0009                     ___ftdiv@f2 000C                     ___ftdiv@f3 0013  
                   ___ftneg@f1 0001                     ___awtoft@c 0009                     ___lbtoft@c 000C  
                   ___ftmul@f1 000D                     ___ftmul@f2 0010                     ___ftsub@f1 0028  
                   ___ftsub@f2 002B                     ___fttol@f1 0028                 __pcstackCOMRAM 0001  
                __end_of_Setup 2E4A                   __pidataBANK0 3100             __size_of_checkPass 001C  
                __end_of_clear 30A2                     ___lltoft@c 0009                  __end_of_floor 24B6  
                __end_of_ldexp 258A                  __end_of_frexp 28E2                __CFG_DSWDTPS$G2 000000  
              review_code@pass 0005                __CFG_OSC$INTOSC 000000                        ??_Setup 000E  
            lcd_gotoxy@address 0007                        ??_clear 0006             __size_of_lcd_putrs 0054  
                      ??_floor 0044                        ??_ldexp 0039                        ??_frexp 0006  
                 sprintf@width 0021                     __pbssBANK0 0060             __size_of_eval_poly 00D4  
         __size_of_obtain_pass 00EC                     _dia_semana 00D1      RtccWriteTime@tempHourWDay 000A  
               _clear_keyboard 311E                      ?_RtccWrOn 0001                 lcd_send_byte@n 0003  
                _is_not_letter 2F36                        ?___ftge 0001                        ?___wmul 0001  
           __size_of_next_code 004C         ??_set_desactive_vision 000D                  _read_keyboard 0FC4  
                 ?_Delay1KTCYx 0001                      ?___altoft 0037                      ?___awtoft 0009  
                    ?___ftpack 0001                      ?___lbtoft 0009                      ?__delay_s 0009  
                    ?___lltoft 0009              __end_of_Write_RTC 1A28                 __delay_s@index 000E  
                   _lcd_comand 3110                      ?_caratula 0001                     _lcd_gotoxy 302A  
                      _RTCVALH 000F99                        _RTCVALL 000F98                      ?_lcd_init 0001  
            __end_of_checkPass 308C                      ?_lcd_putc 0001         __end_of_clear_keyboard 3126  
                      __Hparam 0000                        __Lparam 0000                 ?_is_not_letter 0001  
     __size_of_lcd_send_nibble 0076                     ??_RtccWrOn 0001                __size_of___ftge 0096  
                      ___awdiv 27BA                        ___ftadd 16C8              __end_of_lcd_putrs 2D1E  
                      ___ftdiv 220C                 ?_read_keyboard 0001                        ___ftneg 3006  
              __size_of___wmul 0028                        ___ftmul 201E                        ___ftsub 2E4A  
                      ___fttol 1F1C                        ___lwdiv 2C16                        ___lwmod 2D1E  
                 __psmallconst 0F00                     ??___altoft 003B                    _RtccTimeVal 0078  
                      __pcinit 2ECA                        _fecha_d 00D2                        _fecha_u 00D3  
                   ??___awtoft 000C                     ??___ftpack 0006                     ??___lbtoft 000C  
            __end_of_eval_poly 265E                        __ramtop 0F00                     ??__delay_s 000B  
                   ??___lltoft 000D                set_vision@digit 00BC                        __ptext0 28E2  
                      __ptext1 22F8                        __ptext2 29E6                        __ptext3 2B56  
                      __ptext4 0FC4                        __ptext5 127C                        __ptext6 304E  
                      __ptext7 2D1E                        __ptext8 2C16                        __ptext9 2C72  
         __size_of_review_code 0026                        _buffer2 008C                set_vision@input 00BB  
                    _T1CONbits 000FCD                        _dpowers 0F01                   __size_of_exp 01E8  
                 __size_of_log 0120                        _isdigit 304E                   __size_of_pow 0182  
                   ??_caratula 0006                        _segundo 008A                        _sprintf 127C  
                   ??_lcd_init 0005                     ??_lcd_putc 0008                        _twinkle 2B56  
         end_of_initialization 2EFA              __end_of_next_code 2E02                        exp@sign 0051  
         lcd_send_byte@address 0004                  __Lmediumconst 0000                ?_clear_keyboard 0001  
                      pow@sign 00AE                   twinkle@input 0025                        postdec1 000FE5  
                      postdec2 000FDD                        postinc0 000FEE                        postinc2 000FDE  
                   _set_vision 22F8          __end_of_lcd_send_byte 2F36                      _PORTAbits 000F80  
                    _PORTCbits 000F82               __CFG_DSBOREN$OFF 000000                    ?_lcd_comand 0001  
             __CFG_CPUDIV$OSC1 000000                      _TRISBbits 000F93                    ?_lcd_gotoxy 0005  
    __size_of_lcd_setcursor_vb 0014                _LCD_INIT_STRING 0F0B                    ___ftdiv@exp 0016  
             __CFG_IOL1WAY$OFF 000000      RtccWriteDate@tempDayMonth 000A                ??_is_not_letter 0001  
          __CFG_MSSP7B_EN$MSK7 000000                    ___ftmul@exp 0016                ??_read_keyboard 0024  
             Delay100TCYx@unit 0001                     _write_Date 29E6                 __end_of___ftge 27BA  
                  __delay_s@it 000C                 __end_of___wmul 2FBA      RtccWriteDate@tempHourWDay 000C  
    set_desactive_vision@digit 000B             not_fill_pass@digit 0001              ??_lcd_send_nibble 0001  
                __pbitbssBANK0 06E0           __size_of_Delay1KTCYx 0012               __CFG_DSWDTEN$OFF 000000  
                   floor@expon 0047            start_initialization 2ECA                     eval_poly@d 002B  
                   eval_poly@n 002D                     eval_poly@x 0028                     ldexp@value 0034  
                  __end_of_exp 16C8                    __end_of_log 1E10                    __end_of_pow 1BAA  
             review_code@digit 0003                     frexp@value 0001           RtccWriteTime@wasAlrm 0006  
         RtccWriteTime@wasWrEn 0007         __size_of_RtccWriteDate 0146                RtccWriteDate@di 0003  
       __size_of_RtccWriteTime 010C            __size_of_lcd_comand 000E                       ??___ftge 0007  
          __size_of_lcd_gotoxy 0024                       ??___wmul 0005                    ?_set_vision 0001  
                  __pdataBANK0 00BF              __size_of_RtccWrOn 0012                RtccWriteTime@di 0003  
             __CFG_LPT1OSC$OFF 000000         __size_of_not_fill_pass 0014              __size_of___altoft 007C  
                  _ALRMCFGbits 000F91        __end_of_LCD_INIT_STRING 0F0F              __size_of___awtoft 003C  
            __size_of___ftpack 00C6              __size_of___lbtoft 0026              __size_of__delay_s 0058  
            __size_of___lltoft 0060                  __pcstackBANK0 00A8                      _Write_RTC 188C  
                 _isdigit$2371 0002              __size_of_caratula 0008                  ??_obtain_pass 005D  
              Delay1KTCYx@unit 0001              __size_of_lcd_init 0080                    sprintf@flag 001D  
            __size_of_lcd_putc 004C                    sprintf@prec 0020                      _checkPass 3070  
                    __pnvBANK0 00CF               ___lwdiv@dividend 0001                  ?_Delay100TCYx 0001  
                     ?___awdiv 0001                       ?___ftadd 001C                       ?___ftdiv 0009  
                     ?___ftneg 0001                       ?___ftmul 000D                       ?___ftsub 0028  
                     ?___fttol 0028                       ?___lwdiv 0001                    ?_write_Date 0001  
                     ?___lwmod 0008        RtccWriteTime@tempMinSec 0008  __size_of_set_desactive_vision 002C  
                    _lcd_putrs 2CCA        lcd_setcursor_vb@visible 0006                  _RtccWriteDate 1BAA  
                  __smallconst 0F00                  _RtccWriteTime 1E10                       ?_isdigit 0001  
                    _eval_poly 258A           __CFG_RTCOSC$T1OSCREF 000000               _lcd_setcursor_vb 30A2  
               __size_of_Setup 0048                     ?_Write_RTC 0001               ___lwdiv@quotient 0005  
               __size_of_clear 0016               ??_clear_keyboard 0001                       ?_sprintf 000D  
               __size_of_floor 00DE                 __size_of_ldexp 00D4                 __size_of_frexp 0092  
                     ?_twinkle 0001                 set_vision@pass 00B9            __size_of_set_vision 00E0  
             _RtccAlrmTimeDate 0060                  _not_fill_pass 30B6                 ___wmul@product 0005  
              __delay_s@millis 0009                       _LATAbits 000F89                       _LATBbits 000F8A  
                   ?_checkPass 0001                      _next_code 2DB6                       _PIE3bits 000FA3  
          __end_of_obtain_pass 220C                      _segundo_d 00DA                 ??_Delay100TCYx 0001  
                    _segundo_u 00DB               __CFG_WDTPS$32768 000000             _is_not_letter$1329 0001  
                ??_review_code 0007             RtccWriteDate@wasOn 0005             _Rtcc_read_TimeDate 0070  
               ?_RtccWriteDate 0001                     ?_lcd_putrs 0009              ___wmul@multiplier 0001  
               ?_RtccWriteTime 0001                      lcd_init@i 0005                   ??_lcd_comand 0005  
                   ?_eval_poly 0028                      main@input 00BE                      lcd_putc@c 0008  
                 ??_lcd_gotoxy 0006                      copy_data0 2EEE                 ?_not_fill_pass 0001  
          __size_of_write_Date 007E                     ?_next_code 0008                      frexp@eptr 0004  
              _lcd_send_nibble 2AE0                       __Hrparam 0000                       _RtccDate 00A0  
                     __Lrparam 0000                       _RtccTime 00A4                       _RtccWrOn 30EE  
           __end_of_lcd_comand 311E             __end_of_lcd_gotoxy 304E               __size_of___awdiv 0096  
             __size_of___ftadd 01C4               __size_of___ftdiv 00EC               __size_of___ftneg 0024  
                     ___altoft 2A64               __size_of___ftmul 0102               __size_of___ftsub 0044  
             __size_of___fttol 0102               __size_of___lwdiv 005C               __size_of___lwmod 004C  
                     ___awtoft 2E8E                       ___ftpack 265E                       ___lbtoft 2FE0  
                     __delay_s 2C72                       ___lltoft 2BB6                   _RtccTimeDate 0068  
                     _exp$2748 004C            __end_of_review_code 2FE0                     sprintf@val 001E  
                     _caratula 3126               __size_of_isdigit 0022                ___lwdiv@divisor 0003  
                  ??_Write_RTC 000E                ___lwdiv@counter 0007                       __ptext10 2F66  
                     __ptext11 30A2                       __ptext20 24B6                       __ptext12 2CCA  
                     __ptext21 23D8                       __ptext13 2D6A                       __ptext30 16C8  
                     __ptext22 2850                       __ptext14 2FBA                       __ptext31 3006  
                     __ptext23 1F1C                       __ptext15 3070                       __ptext40 30B6  
                     __ptext32 220C                       __ptext24 2724                       __ptext16 2120  
                     __ptext41 2F36                       __ptext33 2E8E                       __ptext25 2A64  
                     __ptext17 1A28                       __ptext50 30DC                       __ptext42 308C  
                     __ptext34 2BB6                       __ptext26 258A                       __ptext18 1CF0  
                     __ptext51 188C                       __ptext43 3126                       __ptext35 2DB6  
                     __ptext27 2F92                       __ptext19 14E0                       __ptext52 27BA  
                     __ptext44 2E02                       __ptext36 302A                       __ptext28 201E  
                     __ptext53 1E10                       __ptext45 2966                       __ptext37 311E  
                     __ptext29 2E4A                       __ptext54 1BAA                       __ptext46 30CA  
                     __ptext38 2FE0                       __ptext55 30EE                       __ptext47 3110  
                     __ptext39 265E                       __ptext48 2F04                       __ptext49 2AE0  
                     _lcd_init 2966                       _lcd_putc 2D6A                       _pow$2746 00A8  
                     _pow$2747 00AB                    _obtain_pass 2120                 next_code@digit 0008  
             __size_of_sprintf 0264               __size_of_twinkle 0060                 next_code@input 000A  
       __size_of_lcd_send_byte 0032                  __size_of_main 0084                    ??_checkPass 0003  
                     _minuto_d 00D8                       _minuto_u 00D9                       _password 00CB  
        __end_of_is_not_letter 2F66                   ??_set_vision 005F          __end_of_read_keyboard 127C  
                ??_Delay1KTCYx 0001                ??_RtccWriteDate 0004                ??_RtccWriteTime 0004  
                  ??_lcd_putrs 000B                       exp@coeff 0F0F                       log@coeff 0F2D  
                  _OSCTUNEbits 000F9B                     _INTCONbits 000FF2                    ??_eval_poly 002F  
           RtccWriteTime@wasOn 0005           __end_of_Delay100TCYx 30EE                       isdigit@c 0003  
              ??_not_fill_pass 0003                      sprintf@ap 001B        __end_of_lcd_send_nibble 2B56  
                    sprintf@sp 000D             __end_of_set_vision 23D8          lcd_setcursor_vb@blink 0005  
             ___lwmod@dividend 0008                    ??_next_code 000C                     _OSCCONbits 000FD3  
     __end_of_lcd_setcursor_vb 30B6          RtccWriteDate@tempYear 0007                   ??_write_Date 0024  
                  _review_code 2FBA                  _lcd_send_byte 2F04                     _RTCCFGbits 000F3F  
                     sprintf@c 0023                       sprintf@f 000F                ___lwmod@divisor 000A  
          __end_of_Delay1KTCYx 30DC                ___lwmod@counter 000C           RtccWriteDate@wasAlrm 0006  
         RtccWriteDate@wasWrEn 0009               _obtain_pass$2744 00B3               _obtain_pass$2745 00B6  
 __end_of_set_desactive_vision 2F92             __end_of_write_Date 2A64          lcd_send_nibble@nibble 0002  
