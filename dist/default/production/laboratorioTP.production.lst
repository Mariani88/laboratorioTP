

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Sep 29 22:36:00 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	text64,global,reloc=2,class=CODE,delta=1
    79                           	psect	text65,global,reloc=2,class=CODE,delta=1
    80                           	psect	text66,global,reloc=2,class=CODE,delta=1
    81                           	psect	text67,global,reloc=2,class=CODE,delta=1
    82                           	psect	text68,global,reloc=2,class=CODE,delta=1
    83                           	psect	text69,global,reloc=2,class=CODE,delta=1
    84                           	psect	text70,global,reloc=2,class=CODE,delta=1
    85                           	psect	text71,global,reloc=2,class=CODE,delta=1
    86                           	psect	text72,global,reloc=2,class=CODE,delta=1
    87                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    88                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    89  0000                     
    90                           	psect	idataBANK0
    91  003B0A                     __pidataBANK0:
    92                           	opt stack 0
    93                           
    94                           ;initializer for _anio
    95  003B0A  000F               	dw	15
    96                           
    97                           ;initializer for _dia
    98  003B0C  0008               	dw	8
    99                           
   100                           ;initializer for _diasem
   101  003B0E  0003               	dw	3
   102                           
   103                           ;initializer for _hora
   104  003B10  0012               	dw	18
   105                           
   106                           ;initializer for _mes
   107  003B12  0009               	dw	9
   108                           
   109                           ;initializer for _minuto
   110  003B14  001E               	dw	30
   111                           
   112                           ;initializer for _password
   113  003B16  04D2               	dw	1234
   114                           
   115                           ;initializer for _time_to_stop
   116  003B18  27C0               	dw	10176
   117                           
   118                           ;initializer for _key
   119  003B1A  12                 	db	18
   120                           
   121                           ;initializer for _menu
   122  003B1B  01                 	db	1
   123                           
   124                           ;initializer for _state_alarm
   125  003B1C  01                 	db	1
   126                           
   127                           	psect	smallconst
   128  000F00                     __psmallconst:
   129                           	opt stack 0
   130  000F00  00                 	db	0
   131  000F01                     _dpowers:
   132                           	opt stack 0
   133  000F01  0001               	dw	1
   134  000F03  000A               	dw	10
   135  000F05  0064               	dw	100
   136  000F07  03E8               	dw	1000
   137  000F09  2710               	dw	10000
   138  000F0B                     __end_of_dpowers:
   139                           	opt stack 0
   140  000F0B                     _LCD_INIT_STRING:
   141                           	opt stack 0
   142  000F0B  28                 	db	40
   143  000F0C  0C                 	db	12
   144  000F0D  01                 	db	1
   145  000F0E  06                 	db	6
   146  000F0F                     __end_of_LCD_INIT_STRING:
   147                           	opt stack 0
   148  000F0F                     exp@coeff:
   149                           	opt stack 0
   150  000F0F  00                 	db	0
   151  000F10  80                 	db	128
   152  000F11  3F                 	db	63
   153  000F12  72                 	db	114
   154  000F13  31                 	db	49
   155  000F14  3F                 	db	63
   156  000F15  FE                 	db	254
   157  000F16  75                 	db	117
   158  000F17  3E                 	db	62
   159  000F18  58                 	db	88
   160  000F19  63                 	db	99
   161  000F1A  3D                 	db	61
   162  000F1B  95                 	db	149
   163  000F1C  1D                 	db	29
   164  000F1D  3C                 	db	60
   165  000F1E  C5                 	db	197
   166  000F1F  AE                 	db	174
   167  000F20  3A                 	db	58
   168  000F21  79                 	db	121
   169  000F22  21                 	db	33
   170  000F23  39                 	db	57
   171  000F24  94                 	db	148
   172  000F25  80                 	db	128
   173  000F26  37                 	db	55
   174  000F27  93                 	db	147
   175  000F28  A7                 	db	167
   176  000F29  35                 	db	53
   177  000F2A  56                 	db	86
   178  000F2B  15                 	db	21
   179  000F2C  34                 	db	52
   180  000F2D                     __end_ofexp@coeff:
   181                           	opt stack 0
   182  000F2D                     log@coeff:
   183                           	opt stack 0
   184  000F2D  00                 	db	0
   185  000F2E  00                 	db	0
   186  000F2F  00                 	db	0
   187  000F30  00                 	db	0
   188  000F31  80                 	db	128
   189  000F32  3F                 	db	63
   190  000F33  F0                 	db	240
   191  000F34  FF                 	db	255
   192  000F35  BE                 	db	190
   193  000F36  E2                 	db	226
   194  000F37  A9                 	db	169
   195  000F38  3E                 	db	62
   196  000F39  83                 	db	131
   197  000F3A  76                 	db	118
   198  000F3B  BE                 	db	190
   199  000F3C  AE                 	db	174
   200  000F3D  2B                 	db	43
   201  000F3E  3E                 	db	62
   202  000F3F  3C                 	db	60
   203  000F40  C3                 	db	195
   204  000F41  BD                 	db	189
   205  000F42  D2                 	db	210
   206  000F43  13                 	db	19
   207  000F44  3D                 	db	61
   208  000F45  78                 	db	120
   209  000F46  D3                 	db	211
   210  000F47  BB                 	db	187
   211  000F48                     __end_oflog@coeff:
   212                           	opt stack 0
   213  000F48                     STR_22:
   214                           
   215                           ; BSR set to: 15
   216  000F48  6E                 	db	110	;'n'
   217  000F49  6F                 	db	111	;'o'
   218  000F4A  74                 	db	116	;'t'
   219  000F4B  68                 	db	104	;'h'
   220  000F4C  69                 	db	105	;'i'
   221  000F4D  6E                 	db	110	;'n'
   222  000F4E  67                 	db	103	;'g'
   223  000F4F  20                 	db	32
   224  000F50  63                 	db	99	;'c'
   225  000F51  68                 	db	104	;'h'
   226  000F52  61                 	db	97	;'a'
   227  000F53  6E                 	db	110	;'n'
   228  000F54  67                 	db	103	;'g'
   229  000F55  65                 	db	101	;'e'
   230  000F56  64                 	db	100	;'d'
   231  000F57  00                 	db	0
   232  000F58                     STR_21:
   233                           
   234                           ; BSR set to: 15
   235  000F58  6F                 	db	111	;'o'
   236  000F59  6C                 	db	108	;'l'
   237  000F5A  64                 	db	100	;'d'
   238  000F5B  20                 	db	32
   239  000F5C  70                 	db	112	;'p'
   240  000F5D  61                 	db	97	;'a'
   241  000F5E  73                 	db	115	;'s'
   242  000F5F  73                 	db	115	;'s'
   243  000F60  20                 	db	32
   244  000F61  77                 	db	119	;'w'
   245  000F62  72                 	db	114	;'r'
   246  000F63  6F                 	db	111	;'o'
   247  000F64  6E                 	db	110	;'n'
   248  000F65  67                 	db	103	;'g'
   249  000F66  00                 	db	0
   250  000F67                     STR_11:
   251                           
   252                           ; BSR set to: 15
   253  000F67  25                 	db	37
   254  000F68  30                 	db	48	;'0'
   255  000F69  32                 	db	50	;'2'
   256  000F6A  75                 	db	117	;'u'
   257  000F6B  2F                 	db	47
   258  000F6C  25                 	db	37
   259  000F6D  30                 	db	48	;'0'
   260  000F6E  32                 	db	50	;'2'
   261  000F6F  75                 	db	117	;'u'
   262  000F70  2F                 	db	47
   263  000F71  25                 	db	37
   264  000F72  30                 	db	48	;'0'
   265  000F73  32                 	db	50	;'2'
   266  000F74  75                 	db	117	;'u'
   267  000F75  00                 	db	0
   268  000F76                     STR_23:
   269                           
   270                           ; BSR set to: 15
   271  000F76  4F                 	db	79	;'O'
   272  000F77  6C                 	db	108	;'l'
   273  000F78  64                 	db	100	;'d'
   274  000F79  20                 	db	32
   275  000F7A  70                 	db	112	;'p'
   276  000F7B  61                 	db	97	;'a'
   277  000F7C  73                 	db	115	;'s'
   278  000F7D  73                 	db	115	;'s'
   279  000F7E  3A                 	db	58	;':'
   280  000F7F  5F                 	db	95	;'_'
   281  000F80  5F                 	db	95	;'_'
   282  000F81  5F                 	db	95	;'_'
   283  000F82  5F                 	db	95	;'_'
   284  000F83  00                 	db	0
   285  000F84                     STR_24:
   286                           
   287                           ; BSR set to: 15
   288  000F84  4E                 	db	78	;'N'
   289  000F85  65                 	db	101	;'e'
   290  000F86  77                 	db	119	;'w'
   291  000F87  20                 	db	32
   292  000F88  70                 	db	112	;'p'
   293  000F89  61                 	db	97	;'a'
   294  000F8A  73                 	db	115	;'s'
   295  000F8B  73                 	db	115	;'s'
   296  000F8C  3A                 	db	58	;':'
   297  000F8D  5F                 	db	95	;'_'
   298  000F8E  5F                 	db	95	;'_'
   299  000F8F  5F                 	db	95	;'_'
   300  000F90  5F                 	db	95	;'_'
   301  000F91  00                 	db	0
   302  000F92                     STR_19:
   303                           
   304                           ; BSR set to: 15
   305  000F92  70                 	db	112	;'p'
   306  000F93  61                 	db	97	;'a'
   307  000F94  73                 	db	115	;'s'
   308  000F95  73                 	db	115	;'s'
   309  000F96  20                 	db	32
   310  000F97  73                 	db	115	;'s'
   311  000F98  75                 	db	117	;'u'
   312  000F99  63                 	db	99	;'c'
   313  000F9A  63                 	db	99	;'c'
   314  000F9B  65                 	db	101	;'e'
   315  000F9C  73                 	db	115	;'s'
   316  000F9D  73                 	db	115	;'s'
   317  000F9E  00                 	db	0
   318  000F9F                     STR_15:
   319                           
   320                           ; BSR set to: 15
   321  000F9F  20                 	db	32
   322  000FA0  20                 	db	32
   323  000FA1  20                 	db	32
   324  000FA2  20                 	db	32
   325  000FA3  20                 	db	32
   326  000FA4  20                 	db	32
   327  000FA5  20                 	db	32
   328  000FA6  20                 	db	32
   329  000FA7  20                 	db	32
   330  000FA8  20                 	db	32
   331  000FA9  00                 	db	0
   332  000FAA                     STR_14:
   333                           
   334                           ; BSR set to: 15
   335  000FAA  57                 	db	87	;'W'
   336  000FAB  41                 	db	65	;'A'
   337  000FAC  52                 	db	82	;'R'
   338  000FAD  4E                 	db	78	;'N'
   339  000FAE  49                 	db	73	;'I'
   340  000FAF  4E                 	db	78	;'N'
   341  000FB0  47                 	db	71	;'G'
   342  000FB1  21                 	db	33
   343  000FB2  21                 	db	33
   344  000FB3  21                 	db	33
   345  000FB4  00                 	db	0
   346  000FB5                     STR_12:
   347                           
   348                           ; BSR set to: 15
   349  000FB5  25                 	db	37
   350  000FB6  30                 	db	48	;'0'
   351  000FB7  32                 	db	50	;'2'
   352  000FB8  75                 	db	117	;'u'
   353  000FB9  3A                 	db	58	;':'
   354  000FBA  25                 	db	37
   355  000FBB  30                 	db	48	;'0'
   356  000FBC  32                 	db	50	;'2'
   357  000FBD  75                 	db	117	;'u'
   358  000FBE  00                 	db	0
   359  000FBF                     STR_25:
   360                           
   361                           ; BSR set to: 15
   362  000FBF  53                 	db	83	;'S'
   363  000FC0  65                 	db	101	;'e'
   364  000FC1  6E                 	db	110	;'n'
   365  000FC2  73                 	db	115	;'s'
   366  000FC3  6F                 	db	111	;'o'
   367  000FC4  72                 	db	114	;'r'
   368  000FC5  3A                 	db	58	;':'
   369  000FC6  20                 	db	32
   370  000FC7  00                 	db	0
   371  000FC8                     STR_18:
   372                           
   373                           ; BSR set to: 15
   374  000FC8  54                 	db	84	;'T'
   375  000FC9  52                 	db	82	;'R'
   376  000FCA  49                 	db	73	;'I'
   377  000FCB  47                 	db	71	;'G'
   378  000FCC  47                 	db	71	;'G'
   379  000FCD  45                 	db	69	;'E'
   380  000FCE  44                 	db	68	;'D'
   381  000FCF  00                 	db	0
   382  000FD0                     STR_27:
   383                           
   384                           ; BSR set to: 15
   385  000FD0  44                 	db	68	;'D'
   386  000FD1  61                 	db	97	;'a'
   387  000FD2  74                 	db	116	;'t'
   388  000FD3  65                 	db	101	;'e'
   389  000FD4  3A                 	db	58	;':'
   390  000FD5  00                 	db	0
   391  000FD6                     STR_1:
   392                           
   393                           ; BSR set to: 15
   394  000FD6  25                 	db	37
   395  000FD7  30                 	db	48	;'0'
   396  000FD8  31                 	db	49	;'1'
   397  000FD9  75                 	db	117	;'u'
   398  000FDA  00                 	db	0
   399  000FDB                     STR_17:
   400                           
   401                           ; BSR set to: 15
   402  000FDB  4F                 	db	79	;'O'
   403  000FDC  46                 	db	70	;'F'
   404  000FDD  46                 	db	70	;'F'
   405  000FDE  00                 	db	0
   406  000FDF                     STR_16:
   407                           
   408                           ; BSR set to: 15
   409  000FDF  4F                 	db	79	;'O'
   410  000FE0  4E                 	db	78	;'N'
   411  000FE1  00                 	db	0
   412  0000                     
   413                           ; #config settings
   414  000FE2  00                 	db	0	; dummy byte at the end
   415  0000                     
   416                           	psect	nvBANK0
   417  0000E1                     __pnvBANK0:
   418                           	opt stack 0
   419  0000E1                     _anio_d:
   420                           	opt stack 0
   421  0000E1                     	ds	1
   422  0000E2                     _anio_u:
   423                           	opt stack 0
   424  0000E2                     	ds	1
   425  0000E3                     _dia_semana:
   426                           	opt stack 0
   427  0000E3                     	ds	1
   428  0000E4                     _fecha_d:
   429                           	opt stack 0
   430  0000E4                     	ds	1
   431  0000E5                     _fecha_u:
   432                           	opt stack 0
   433  0000E5                     	ds	1
   434  0000E6                     _hora_d:
   435                           	opt stack 0
   436  0000E6                     	ds	1
   437  0000E7                     _hora_u:
   438                           	opt stack 0
   439  0000E7                     	ds	1
   440  0000E8                     _mes_d:
   441                           	opt stack 0
   442  0000E8                     	ds	1
   443  0000E9                     _mes_u:
   444                           	opt stack 0
   445  0000E9                     	ds	1
   446  0000EA                     _minuto_d:
   447                           	opt stack 0
   448  0000EA                     	ds	1
   449  0000EB                     _minuto_u:
   450                           	opt stack 0
   451  0000EB                     	ds	1
   452  0000EC                     _segundo_d:
   453                           	opt stack 0
   454  0000EC                     	ds	1
   455  0000ED                     _segundo_u:
   456                           	opt stack 0
   457  0000ED                     	ds	1
   458  0000                     _ANCON0	set	3912
   459  0000                     _ANCON1	set	3913
   460  0000                     _RTCCFG	set	3903
   461  0000                     _RTCCFGbits	set	3903
   462  0000                     _ADCON0	set	4034
   463  0000                     _ADCON1	set	4033
   464  0000                     _ALRMCFGbits	set	3985
   465  0000                     _EECON2	set	4007
   466  0000                     _INTCONbits	set	4082
   467  0000                     _LATAbits	set	3977
   468  0000                     _LATBbits	set	3978
   469  0000                     _OSCCONbits	set	4051
   470  0000                     _OSCTUNEbits	set	3995
   471  0000                     _PIE3bits	set	4003
   472  0000                     _PORTAbits	set	3968
   473  0000                     _PORTCbits	set	3970
   474  0000                     _RTCVALH	set	3993
   475  0000                     _RTCVALL	set	3992
   476  0000                     _T1CONbits	set	4045
   477  0000                     _TRISA	set	3986
   478  0000                     _TRISB	set	3987
   479  0000                     _TRISBbits	set	3987
   480  0000                     _TRISC	set	3988
   481                           
   482                           	psect	cinit
   483  00387A                     __pcinit:
   484                           	opt stack 0
   485  00387A                     start_initialization:
   486                           	opt stack 0
   487  00387A                     __initialization:
   488                           	opt stack 0
   489                           
   490                           ; Clear objects allocated to BITBANK0 (1 bytes)
   491  00387A  0100               	movlb	0
   492  00387C  6BEE               	clrf	(__pbitbssBANK0/(0+8))& (0+255),b
   493                           
   494                           ; Clear objects allocated to BANK0 (84 bytes)
   495  00387E  EE00  F060         	lfsr	0,__pbssBANK0
   496  003882  0E54               	movlw	84
   497  003884                     clear_0:
   498  003884  6AEE               	clrf	postinc0,c
   499  003886  06E8               	decf	wreg,f,c
   500  003888  E1FD               	bnz	clear_0
   501                           
   502                           ; Initialize objects allocated to BANK0 (19 bytes)
   503                           ; load TBLPTR registers with __pidataBANK0
   504  00388A  0E0A               	movlw	low __pidataBANK0
   505  00388C  6EF6               	movwf	tblptrl,c
   506  00388E  0E3B               	movlw	high __pidataBANK0
   507  003890  6EF7               	movwf	tblptrh,c
   508  003892  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   509  003894  6EF8               	movwf	tblptru,c
   510  003896  EE00  F0CE         	lfsr	0,__pdataBANK0
   511  00389A  EE10 F013          	lfsr	1,19
   512  00389E                     copy_data0:
   513  00389E  0009               	tblrd		*+
   514  0038A0  CFF5 FFEE          	movff	tablat,postinc0
   515  0038A4  50E5               	movf	postdec1,w,c
   516  0038A6  50E1               	movf	fsr1l,w,c
   517  0038A8  E1FA               	bnz	copy_data0
   518  0038AA                     end_of_initialization:
   519                           	opt stack 0
   520  0038AA                     __end_of__initialization:
   521                           	opt stack 0
   522  0038AA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   523  0038AC  6EF8               	movwf	tblptru,c
   524  0038AE  0100               	movlb	0
   525  0038B0  EF5A  F01C         	goto	_main	;jump to C main() function
   526                           tblptru	equ	0xFF8
   527                           tblptrh	equ	0xFF7
   528                           tblptrl	equ	0xFF6
   529                           tablat	equ	0xFF5
   530                           postinc0	equ	0xFEE
   531                           wreg	equ	0xFE8
   532                           postdec1	equ	0xFE5
   533                           fsr1l	equ	0xFE1
   534                           
   535                           	psect	bitbssBANK0
   536  000770                     __pbitbssBANK0:
   537                           	opt stack 0
   538  000770                     _flag:
   539                           	opt stack 0
   540  000770                     	ds	1
   541                           tblptru	equ	0xFF8
   542                           tblptrh	equ	0xFF7
   543                           tblptrl	equ	0xFF6
   544                           tablat	equ	0xFF5
   545                           postinc0	equ	0xFEE
   546                           wreg	equ	0xFE8
   547                           postdec1	equ	0xFE5
   548                           fsr1l	equ	0xFE1
   549                           
   550                           	psect	bssBANK0
   551  000060                     __pbssBANK0:
   552                           	opt stack 0
   553  000060                     _RtccAlrmTimeDate:
   554                           	opt stack 0
   555  000060                     	ds	8
   556  000068                     _RtccTimeDate:
   557                           	opt stack 0
   558  000068                     	ds	8
   559  000070                     _Rtcc_read_TimeDate:
   560                           	opt stack 0
   561  000070                     	ds	8
   562  000078                     _RtccTimeVal:
   563                           	opt stack 0
   564  000078                     	ds	4
   565  00007C                     _a:
   566                           	opt stack 0
   567  00007C                     	ds	2
   568  00007E                     _b:
   569                           	opt stack 0
   570  00007E                     	ds	2
   571  000080                     _c:
   572                           	opt stack 0
   573  000080                     	ds	2
   574  000082                     _diaDisparo:
   575                           	opt stack 0
   576  000082                     	ds	2
   577  000084                     _errno:
   578                           	opt stack 0
   579  000084                     	ds	2
   580  000086                     _horaDisparo:
   581                           	opt stack 0
   582  000086                     	ds	2
   583  000088                     _i:
   584                           	opt stack 0
   585  000088                     	ds	2
   586  00008A                     _j:
   587                           	opt stack 0
   588  00008A                     	ds	2
   589  00008C                     _k:
   590                           	opt stack 0
   591  00008C                     	ds	2
   592  00008E                     _mesDisparo:
   593                           	opt stack 0
   594  00008E                     	ds	2
   595  000090                     _minDisparo:
   596                           	opt stack 0
   597  000090                     	ds	2
   598  000092                     _newpass:
   599                           	opt stack 0
   600  000092                     	ds	2
   601  000094                     _segundo:
   602                           	opt stack 0
   603  000094                     	ds	2
   604  000096                     _press_out:
   605                           	opt stack 0
   606  000096                     	ds	1
   607  000097                     _sensorDisparado:
   608                           	opt stack 0
   609  000097                     	ds	1
   610  000098                     _buffer2:
   611                           	opt stack 0
   612  000098                     	ds	20
   613  0000AC                     _RtccDate:
   614                           	opt stack 0
   615  0000AC                     	ds	4
   616  0000B0                     _RtccTime:
   617                           	opt stack 0
   618  0000B0                     	ds	4
   619                           tblptru	equ	0xFF8
   620                           tblptrh	equ	0xFF7
   621                           tblptrl	equ	0xFF6
   622                           tablat	equ	0xFF5
   623                           postinc0	equ	0xFEE
   624                           wreg	equ	0xFE8
   625                           postdec1	equ	0xFE5
   626                           fsr1l	equ	0xFE1
   627                           
   628                           	psect	dataBANK0
   629  0000CE                     __pdataBANK0:
   630                           	opt stack 0
   631  0000CE                     _anio:
   632                           	opt stack 0
   633  0000CE                     	ds	2
   634  0000D0                     _dia:
   635                           	opt stack 0
   636  0000D0                     	ds	2
   637  0000D2                     _diasem:
   638                           	opt stack 0
   639  0000D2                     	ds	2
   640  0000D4                     _hora:
   641                           	opt stack 0
   642  0000D4                     	ds	2
   643  0000D6                     _mes:
   644                           	opt stack 0
   645  0000D6                     	ds	2
   646  0000D8                     _minuto:
   647                           	opt stack 0
   648  0000D8                     	ds	2
   649  0000DA                     _password:
   650                           	opt stack 0
   651  0000DA                     	ds	2
   652  0000DC                     _time_to_stop:
   653                           	opt stack 0
   654  0000DC                     	ds	2
   655  0000DE                     _key:
   656                           	opt stack 0
   657  0000DE                     	ds	1
   658  0000DF                     _menu:
   659                           	opt stack 0
   660  0000DF                     	ds	1
   661  0000E0                     _state_alarm:
   662                           	opt stack 0
   663  0000E0                     	ds	1
   664                           tblptru	equ	0xFF8
   665                           tblptrh	equ	0xFF7
   666                           tblptrl	equ	0xFF6
   667                           tablat	equ	0xFF5
   668                           postinc0	equ	0xFEE
   669                           wreg	equ	0xFE8
   670                           postdec1	equ	0xFE5
   671                           fsr1l	equ	0xFE1
   672                           
   673                           	psect	cstackBANK0
   674  0000B4                     __pcstackBANK0:
   675                           	opt stack 0
   676  0000B4                     _pow$3192:
   677                           	opt stack 0
   678                           
   679                           ; 3 bytes @ 0x0
   680  0000B4                     	ds	3
   681  0000B7                     _pow$3193:
   682                           	opt stack 0
   683                           
   684                           ; 3 bytes @ 0x3
   685  0000B7                     	ds	3
   686  0000BA                     pow@sign:
   687                           	opt stack 0
   688                           
   689                           ; 1 bytes @ 0x6
   690  0000BA                     	ds	1
   691  0000BB                     pow@yi:
   692                           	opt stack 0
   693                           
   694                           ; 4 bytes @ 0x7
   695  0000BB                     	ds	4
   696  0000BF                     _obtain_pass$3186:
   697                           	opt stack 0
   698  0000BF                     _input_old_pass$3188:
   699                           	opt stack 0
   700  0000BF                     _input_new_pass$3190:
   701                           	opt stack 0
   702                           
   703                           ; 3 bytes @ 0xB
   704  0000BF                     	ds	3
   705  0000C2                     _obtain_pass$3187:
   706                           	opt stack 0
   707  0000C2                     _input_old_pass$3189:
   708                           	opt stack 0
   709  0000C2                     _input_new_pass$3191:
   710                           	opt stack 0
   711                           
   712                           ; 3 bytes @ 0xE
   713  0000C2                     	ds	3
   714  0000C5                     _input_new_pass$1567:
   715                           	opt stack 0
   716  0000C5                     input_password@pass:
   717                           	opt stack 0
   718  0000C5                     input_old_pass@pass:
   719                           	opt stack 0
   720                           
   721                           ; 2 bytes @ 0x11
   722  0000C5                     	ds	1
   723  0000C6                     input_new_pass@digit:
   724                           	opt stack 0
   725                           
   726                           ; 2 bytes @ 0x12
   727  0000C6                     	ds	1
   728  0000C7                     input_password@input:
   729                           	opt stack 0
   730  0000C7                     input_old_pass@digit:
   731                           	opt stack 0
   732                           
   733                           ; 2 bytes @ 0x13
   734  0000C7                     	ds	1
   735  0000C8                     input_new_pass@input:
   736                           	opt stack 0
   737  0000C8                     input_password@digit:
   738                           	opt stack 0
   739                           
   740                           ; 2 bytes @ 0x14
   741  0000C8                     	ds	1
   742  0000C9                     input_old_pass@input:
   743                           	opt stack 0
   744                           
   745                           ; 1 bytes @ 0x15
   746  0000C9                     	ds	1
   747  0000CA                     twinkle@input:
   748                           	opt stack 0
   749                           
   750                           ; 1 bytes @ 0x16
   751  0000CA                     	ds	1
   752  0000CB                     twinkle@time:
   753                           	opt stack 0
   754                           
   755                           ; 2 bytes @ 0x17
   756  0000CB                     	ds	2
   757  0000CD                     ??_main:
   758                           
   759                           ; 0 bytes @ 0x19
   760  0000CD                     	ds	1
   761                           tblptru	equ	0xFF8
   762                           tblptrh	equ	0xFF7
   763                           tblptrl	equ	0xFF6
   764                           tablat	equ	0xFF5
   765                           postinc0	equ	0xFEE
   766                           wreg	equ	0xFE8
   767                           postdec1	equ	0xFE5
   768                           fsr1l	equ	0xFE1
   769                           
   770                           	psect	cstackCOMRAM
   771  000001                     __pcstackCOMRAM:
   772                           	opt stack 0
   773  000001                     ??_isdigit:
   774  000001                     ??_lcd_send_nibble:
   775  000001                     ?___wmul:
   776                           	opt stack 0
   777  000001                     ?___awdiv:
   778                           	opt stack 0
   779  000001                     ?___lwdiv:
   780                           	opt stack 0
   781  000001                     ?___ftpack:
   782                           	opt stack 0
   783  000001                     ?_frexp:
   784                           	opt stack 0
   785  000001                     ?___ftneg:
   786                           	opt stack 0
   787  000001                     _is_not_letter$1409:
   788                           	opt stack 0
   789  000001                     Delay100TCYx@unit:
   790                           	opt stack 0
   791  000001                     Delay1KTCYx@unit:
   792                           	opt stack 0
   793  000001                     evalueChanceOfRaw@x:
   794                           	opt stack 0
   795  000001                     not_fill_pass@digit:
   796                           	opt stack 0
   797  000001                     checkPass@pass:
   798                           	opt stack 0
   799  000001                     changePass@pass:
   800                           	opt stack 0
   801  000001                     RtccReadDate@pDt:
   802                           	opt stack 0
   803  000001                     RtccReadTime@pTm:
   804                           	opt stack 0
   805  000001                     RtccWriteDate@pDt:
   806                           	opt stack 0
   807  000001                     RtccWriteTime@pTm:
   808                           	opt stack 0
   809  000001                     ___wmul@multiplier:
   810                           	opt stack 0
   811  000001                     ___awdiv@dividend:
   812                           	opt stack 0
   813  000001                     ___lwdiv@dividend:
   814                           	opt stack 0
   815  000001                     ___ftpack@arg:
   816                           	opt stack 0
   817  000001                     ___ftge@ff1:
   818                           	opt stack 0
   819  000001                     ___ftneg@f1:
   820                           	opt stack 0
   821  000001                     frexp@value:
   822                           	opt stack 0
   823                           
   824                           ; 3 bytes @ 0x0
   825  000001                     	ds	1
   826  000002                     lcd_send_nibble@nibble:
   827                           	opt stack 0
   828  000002                     is_not_letter@input:
   829                           	opt stack 0
   830  000002                     _isdigit$2795:
   831                           	opt stack 0
   832                           
   833                           ; 1 bytes @ 0x1
   834  000002                     	ds	1
   835  000003                     lcd_send_byte@n:
   836                           	opt stack 0
   837  000003                     RtccWriteDate@di:
   838                           	opt stack 0
   839  000003                     RtccWriteTime@di:
   840                           	opt stack 0
   841  000003                     isdigit@c:
   842                           	opt stack 0
   843  000003                     evalueChanceOfRaw@y:
   844                           	opt stack 0
   845  000003                     review_code@digit:
   846                           	opt stack 0
   847  000003                     ___wmul@multiplicand:
   848                           	opt stack 0
   849  000003                     ___awdiv@divisor:
   850                           	opt stack 0
   851  000003                     ___lwdiv@divisor:
   852                           	opt stack 0
   853  000003                     RtccReadDate@rTD1:
   854                           	opt stack 0
   855  000003                     RtccReadTime@rTD1:
   856                           	opt stack 0
   857                           
   858                           ; 8 bytes @ 0x2
   859  000003                     	ds	1
   860  000004                     lcd_send_byte@address:
   861                           	opt stack 0
   862  000004                     ___ftpack@exp:
   863                           	opt stack 0
   864  000004                     frexp@eptr:
   865                           	opt stack 0
   866  000004                     ___ftge@ff2:
   867                           	opt stack 0
   868                           
   869                           ; 3 bytes @ 0x3
   870  000004                     	ds	1
   871  000005                     lcd_init@i:
   872                           	opt stack 0
   873  000005                     lcd_gotoxy@y:
   874                           	opt stack 0
   875  000005                     lcd_comand@d:
   876                           	opt stack 0
   877  000005                     lcd_setcursor_vb@blink:
   878                           	opt stack 0
   879  000005                     RtccWriteDate@wasOn:
   880                           	opt stack 0
   881  000005                     RtccWriteTime@wasOn:
   882                           	opt stack 0
   883  000005                     ___awdiv@counter:
   884                           	opt stack 0
   885  000005                     ___ftpack@sign:
   886                           	opt stack 0
   887  000005                     review_code@pass:
   888                           	opt stack 0
   889  000005                     ___wmul@product:
   890                           	opt stack 0
   891  000005                     ___lwdiv@quotient:
   892                           	opt stack 0
   893                           
   894                           ; 2 bytes @ 0x4
   895  000005                     	ds	1
   896  000006                     ??___ftpack:
   897  000006                     ??_frexp:
   898  000006                     ??_clear:
   899  000006                     lcd_gotoxy@x:
   900                           	opt stack 0
   901  000006                     lcd_setcursor_vb@visible:
   902                           	opt stack 0
   903  000006                     RtccWriteDate@wasAlrm:
   904                           	opt stack 0
   905  000006                     RtccWriteTime@wasAlrm:
   906                           	opt stack 0
   907  000006                     ___awdiv@sign:
   908                           	opt stack 0
   909                           
   910                           ; 1 bytes @ 0x5
   911  000006                     	ds	1
   912  000007                     ??___ftge:
   913  000007                     lcd_gotoxy@address:
   914                           	opt stack 0
   915  000007                     RtccWriteTime@wasWrEn:
   916                           	opt stack 0
   917  000007                     ___lwdiv@counter:
   918                           	opt stack 0
   919  000007                     RtccWriteDate@tempYear:
   920                           	opt stack 0
   921  000007                     ___awdiv@quotient:
   922                           	opt stack 0
   923                           
   924                           ; 2 bytes @ 0x6
   925  000007                     	ds	1
   926  000008                     ?___lwmod:
   927                           	opt stack 0
   928  000008                     lcd_putc@c:
   929                           	opt stack 0
   930  000008                     next_code@digit:
   931                           	opt stack 0
   932  000008                     RtccWriteTime@tempMinSec:
   933                           	opt stack 0
   934  000008                     ___lwmod@dividend:
   935                           	opt stack 0
   936                           
   937                           ; 2 bytes @ 0x7
   938  000008                     	ds	1
   939  000009                     ?___ftdiv:
   940                           	opt stack 0
   941  000009                     ?___awtoft:
   942                           	opt stack 0
   943  000009                     ?___lbtoft:
   944                           	opt stack 0
   945  000009                     ?___lltoft:
   946                           	opt stack 0
   947  000009                     RtccWriteDate@wasWrEn:
   948                           	opt stack 0
   949  000009                     lcd_putrs@ptr:
   950                           	opt stack 0
   951  000009                     __delay_s@millis:
   952                           	opt stack 0
   953  000009                     ___awtoft@c:
   954                           	opt stack 0
   955  000009                     ___ftdiv@f1:
   956                           	opt stack 0
   957  000009                     ___lltoft@c:
   958                           	opt stack 0
   959                           
   960                           ; 4 bytes @ 0x8
   961  000009                     	ds	1
   962  00000A                     next_code@input:
   963                           	opt stack 0
   964  00000A                     RtccWriteDate@tempDayMonth:
   965                           	opt stack 0
   966  00000A                     RtccWriteTime@tempHourWDay:
   967                           	opt stack 0
   968  00000A                     ___lwmod@divisor:
   969                           	opt stack 0
   970                           
   971                           ; 2 bytes @ 0x9
   972  00000A                     	ds	1
   973  00000B                     ??__delay_s:
   974  00000B                     set_desactive_vision@digit:
   975                           	opt stack 0
   976  00000B                     RtccReadDate@rTD0:
   977                           	opt stack 0
   978  00000B                     RtccReadTime@rTD0:
   979                           	opt stack 0
   980                           
   981                           ; 8 bytes @ 0xA
   982  00000B                     	ds	1
   983  00000C                     ??_next_code:
   984  00000C                     ___awtoft@sign:
   985                           	opt stack 0
   986  00000C                     ___lbtoft@c:
   987                           	opt stack 0
   988  00000C                     ___lwmod@counter:
   989                           	opt stack 0
   990  00000C                     __delay_s@it:
   991                           	opt stack 0
   992  00000C                     RtccWriteDate@tempHourWDay:
   993                           	opt stack 0
   994  00000C                     ___ftdiv@f2:
   995                           	opt stack 0
   996                           
   997                           ; 3 bytes @ 0xB
   998  00000C                     	ds	1
   999  00000D                     ??___lltoft:
  1000  00000D                     ?_sprintf:
  1001                           	opt stack 0
  1002  00000D                     ?___ftmul:
  1003                           	opt stack 0
  1004  00000D                     sprintf@sp:
  1005                           	opt stack 0
  1006  00000D                     ___ftmul@f1:
  1007                           	opt stack 0
  1008                           
  1009                           ; 3 bytes @ 0xC
  1010  00000D                     	ds	1
  1011  00000E                     ??_setClock:
  1012  00000E                     __delay_s@index:
  1013                           	opt stack 0
  1014                           
  1015                           ; 2 bytes @ 0xD
  1016  00000E                     	ds	1
  1017  00000F                     ??___ftdiv:
  1018  00000F                     setClock@x:
  1019                           	opt stack 0
  1020  00000F                     sprintf@f:
  1021                           	opt stack 0
  1022                           
  1023                           ; 2 bytes @ 0xE
  1024  00000F                     	ds	1
  1025  000010                     ___ftmul@f2:
  1026                           	opt stack 0
  1027                           
  1028                           ; 3 bytes @ 0xF
  1029  000010                     	ds	1
  1030  000011                     ___lltoft@exp:
  1031                           	opt stack 0
  1032                           
  1033                           ; 1 bytes @ 0x10
  1034  000011                     	ds	1
  1035  000012                     ___ftdiv@cntr:
  1036                           	opt stack 0
  1037                           
  1038                           ; 1 bytes @ 0x11
  1039  000012                     	ds	1
  1040  000013                     ??___ftmul:
  1041  000013                     dispararSensor@sensor:
  1042                           	opt stack 0
  1043  000013                     ___ftdiv@f3:
  1044                           	opt stack 0
  1045                           
  1046                           ; 3 bytes @ 0x12
  1047  000013                     	ds	2
  1048  000015                     
  1049                           ; 0 bytes @ 0x14
  1050  000015                     	ds	1
  1051  000016                     ___ftdiv@exp:
  1052                           	opt stack 0
  1053  000016                     ___ftmul@exp:
  1054                           	opt stack 0
  1055                           
  1056                           ; 1 bytes @ 0x15
  1057  000016                     	ds	1
  1058  000017                     ??_sprintf:
  1059  000017                     ___ftdiv@sign:
  1060                           	opt stack 0
  1061  000017                     ___ftmul@f3_as_product:
  1062                           	opt stack 0
  1063                           
  1064                           ; 3 bytes @ 0x16
  1065  000017                     	ds	3
  1066  00001A                     ___ftmul@cntr:
  1067                           	opt stack 0
  1068                           
  1069                           ; 1 bytes @ 0x19
  1070  00001A                     	ds	1
  1071  00001B                     ___ftmul@sign:
  1072                           	opt stack 0
  1073  00001B                     sprintf@ap:
  1074                           	opt stack 0
  1075                           
  1076                           ; 2 bytes @ 0x1A
  1077  00001B                     	ds	1
  1078  00001C                     ?___ftadd:
  1079                           	opt stack 0
  1080  00001C                     ___ftadd@f1:
  1081                           	opt stack 0
  1082                           
  1083                           ; 3 bytes @ 0x1B
  1084  00001C                     	ds	1
  1085  00001D                     sprintf@flag:
  1086                           	opt stack 0
  1087                           
  1088                           ; 1 bytes @ 0x1C
  1089  00001D                     	ds	1
  1090  00001E                     sprintf@val:
  1091                           	opt stack 0
  1092                           
  1093                           ; 2 bytes @ 0x1D
  1094  00001E                     	ds	1
  1095  00001F                     ___ftadd@f2:
  1096                           	opt stack 0
  1097                           
  1098                           ; 3 bytes @ 0x1E
  1099  00001F                     	ds	1
  1100  000020                     sprintf@prec:
  1101                           	opt stack 0
  1102                           
  1103                           ; 1 bytes @ 0x1F
  1104  000020                     	ds	1
  1105  000021                     sprintf@width:
  1106                           	opt stack 0
  1107                           
  1108                           ; 2 bytes @ 0x20
  1109  000021                     	ds	1
  1110  000022                     ??___ftadd:
  1111                           
  1112                           ; 0 bytes @ 0x21
  1113  000022                     	ds	1
  1114  000023                     sprintf@c:
  1115                           	opt stack 0
  1116                           
  1117                           ; 1 bytes @ 0x22
  1118  000023                     	ds	1
  1119  000024                     ??_read_keyboard:
  1120                           
  1121                           ; 0 bytes @ 0x23
  1122  000024                     	ds	1
  1123  000025                     ??_configurar_reloj:
  1124  000025                     ver_info@input:
  1125                           	opt stack 0
  1126  000025                     ___ftadd@sign:
  1127                           	opt stack 0
  1128                           
  1129                           ; 1 bytes @ 0x24
  1130  000025                     	ds	1
  1131  000026                     configurar_reloj@input:
  1132                           	opt stack 0
  1133  000026                     ___ftadd@exp2:
  1134                           	opt stack 0
  1135                           
  1136                           ; 1 bytes @ 0x25
  1137  000026                     	ds	1
  1138  000027                     configurar_reloj@y:
  1139                           	opt stack 0
  1140  000027                     ___ftadd@exp1:
  1141                           	opt stack 0
  1142                           
  1143                           ; 1 bytes @ 0x26
  1144  000027                     	ds	1
  1145  000028                     ?___ftsub:
  1146                           	opt stack 0
  1147  000028                     ?_eval_poly:
  1148                           	opt stack 0
  1149  000028                     ?___fttol:
  1150                           	opt stack 0
  1151  000028                     configurar_reloj@x:
  1152                           	opt stack 0
  1153  000028                     ___ftsub@f1:
  1154                           	opt stack 0
  1155  000028                     ___fttol@f1:
  1156                           	opt stack 0
  1157  000028                     eval_poly@x:
  1158                           	opt stack 0
  1159                           
  1160                           ; 3 bytes @ 0x27
  1161  000028                     	ds	3
  1162  00002B                     eval_poly@d:
  1163                           	opt stack 0
  1164  00002B                     ___ftsub@f2:
  1165                           	opt stack 0
  1166                           
  1167                           ; 3 bytes @ 0x2A
  1168  00002B                     	ds	1
  1169  00002C                     ??___fttol:
  1170                           
  1171                           ; 0 bytes @ 0x2B
  1172  00002C                     	ds	1
  1173  00002D                     eval_poly@n:
  1174                           	opt stack 0
  1175                           
  1176                           ; 2 bytes @ 0x2C
  1177  00002D                     	ds	1
  1178  00002E                     
  1179                           ; 0 bytes @ 0x2D
  1180  00002E                     	ds	1
  1181  00002F                     ??_eval_poly:
  1182                           
  1183                           ; 0 bytes @ 0x2E
  1184  00002F                     	ds	2
  1185  000031                     ___fttol@sign1:
  1186                           	opt stack 0
  1187  000031                     eval_poly@res:
  1188                           	opt stack 0
  1189                           
  1190                           ; 3 bytes @ 0x30
  1191  000031                     	ds	1
  1192  000032                     ___fttol@lval:
  1193                           	opt stack 0
  1194                           
  1195                           ; 4 bytes @ 0x31
  1196  000032                     	ds	2
  1197  000034                     ?_log:
  1198                           	opt stack 0
  1199  000034                     ?_ldexp:
  1200                           	opt stack 0
  1201  000034                     ldexp@value:
  1202                           	opt stack 0
  1203  000034                     log@x:
  1204                           	opt stack 0
  1205                           
  1206                           ; 3 bytes @ 0x33
  1207  000034                     	ds	2
  1208  000036                     ___fttol@exp1:
  1209                           	opt stack 0
  1210                           
  1211                           ; 1 bytes @ 0x35
  1212  000036                     	ds	1
  1213  000037                     ?___altoft:
  1214                           	opt stack 0
  1215  000037                     ldexp@newexp:
  1216                           	opt stack 0
  1217  000037                     log@exponent:
  1218                           	opt stack 0
  1219  000037                     ___altoft@c:
  1220                           	opt stack 0
  1221                           
  1222                           ; 4 bytes @ 0x36
  1223  000037                     	ds	2
  1224  000039                     ??_ldexp:
  1225                           
  1226                           ; 0 bytes @ 0x38
  1227  000039                     	ds	2
  1228  00003B                     ??___altoft:
  1229                           
  1230                           ; 0 bytes @ 0x3A
  1231  00003B                     	ds	4
  1232  00003F                     ___altoft@exp:
  1233                           	opt stack 0
  1234                           
  1235                           ; 1 bytes @ 0x3E
  1236  00003F                     	ds	1
  1237  000040                     ___altoft@sign:
  1238                           	opt stack 0
  1239                           
  1240                           ; 1 bytes @ 0x3F
  1241  000040                     	ds	1
  1242  000041                     ?_floor:
  1243                           	opt stack 0
  1244  000041                     floor@x:
  1245                           	opt stack 0
  1246                           
  1247                           ; 3 bytes @ 0x40
  1248  000041                     	ds	3
  1249  000044                     floor@i:
  1250                           	opt stack 0
  1251                           
  1252                           ; 3 bytes @ 0x43
  1253  000044                     	ds	3
  1254  000047                     floor@expon:
  1255                           	opt stack 0
  1256                           
  1257                           ; 2 bytes @ 0x46
  1258  000047                     	ds	2
  1259  000049                     ?_exp:
  1260                           	opt stack 0
  1261  000049                     exp@x:
  1262                           	opt stack 0
  1263                           
  1264                           ; 3 bytes @ 0x48
  1265  000049                     	ds	3
  1266  00004C                     _exp$3194:
  1267                           	opt stack 0
  1268                           
  1269                           ; 3 bytes @ 0x4B
  1270  00004C                     	ds	3
  1271  00004F                     exp@exponent:
  1272                           	opt stack 0
  1273                           
  1274                           ; 2 bytes @ 0x4E
  1275  00004F                     	ds	2
  1276  000051                     exp@sign:
  1277                           	opt stack 0
  1278                           
  1279                           ; 1 bytes @ 0x50
  1280  000051                     	ds	1
  1281  000052                     ?_pow:
  1282                           	opt stack 0
  1283  000052                     pow@x:
  1284                           	opt stack 0
  1285                           
  1286                           ; 3 bytes @ 0x51
  1287  000052                     	ds	3
  1288  000055                     pow@y:
  1289                           	opt stack 0
  1290                           
  1291                           ; 3 bytes @ 0x54
  1292  000055                     	ds	3
  1293  000058                     ??_input_old_pass:
  1294  000058                     ??_input_new_pass:
  1295  000058                     ?_obtain_pass:
  1296                           	opt stack 0
  1297  000058                     obtain_pass@pass:
  1298                           	opt stack 0
  1299                           
  1300                           ; 2 bytes @ 0x57
  1301  000058                     	ds	2
  1302  00005A                     obtain_pass@input:
  1303                           	opt stack 0
  1304  00005A                     ver_opcion_cambio@old_correct:
  1305                           	opt stack 0
  1306                           
  1307                           ; 1 bytes @ 0x59
  1308  00005A                     	ds	1
  1309  00005B                     ver_opcion_cambio@input:
  1310                           	opt stack 0
  1311  00005B                     obtain_pass@digit:
  1312                           	opt stack 0
  1313                           
  1314                           ; 2 bytes @ 0x5A
  1315  00005B                     	ds	1
  1316  00005C                     
  1317                           ; 0 bytes @ 0x5B
  1318  00005C                     	ds	1
  1319  00005D                     ??_obtain_pass:
  1320                           
  1321                           ; 0 bytes @ 0x5C
  1322  00005D                     	ds	2
  1323  00005F                     ??_twinkle:
  1324                           
  1325                           ; 0 bytes @ 0x5E
  1326  00005F                     	ds	1
  1327  000060                     tblptru	equ	0xFF8
  1328                           tblptrh	equ	0xFF7
  1329                           tblptrl	equ	0xFF6
  1330                           tablat	equ	0xFF5
  1331                           postinc0	equ	0xFEE
  1332                           wreg	equ	0xFE8
  1333                           postdec1	equ	0xFE5
  1334                           fsr1l	equ	0xFE1
  1335                           
  1336                           ; 0 bytes @ 0x5F
  1337 ;;
  1338 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1339 ;;
  1340 ;; *************** function _main *****************
  1341 ;; Defined at:
  1342 ;;		line 88 in file "main.c"
  1343 ;; Parameters:    Size  Location     Type
  1344 ;;		None
  1345 ;; Auto vars:     Size  Location     Type
  1346 ;;		None
  1347 ;; Return value:  Size  Location     Type
  1348 ;;                  2  132[None  ] int 
  1349 ;; Registers used:
  1350 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1351 ;; Tracked objects:
  1352 ;;		On entry : 0/0
  1353 ;;		On exit  : 0/0
  1354 ;;		Unchanged: 0/0
  1355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1358 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1359 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1360 ;;Total ram usage:        1 bytes
  1361 ;; Hardware stack levels required when called:    9
  1362 ;; This function calls:
  1363 ;;		_Read_RTC
  1364 ;;		_Setup
  1365 ;;		_caratula
  1366 ;;		_select_menu
  1367 ;;		_set_vision
  1368 ;; This function is called by:
  1369 ;;		Startup code after reset
  1370 ;; This function uses a non-reentrant model
  1371 ;;
  1372                           
  1373                           	psect	text0
  1374  0038B4                     __ptext0:
  1375                           	opt stack 0
  1376  0038B4                     _main:
  1377                           	opt stack 22
  1378                           
  1379                           ;main.c: 89: Setup();
  1380                           
  1381                           ; BSR set to: 15
  1382                           ;incstack = 0
  1383  0038B4  EC9C  F01B         	call	_Setup	;wreg free
  1384                           
  1385                           ;main.c: 90: caratula();
  1386  0038B8  ECBA  F01D         	call	_caratula	;wreg free
  1387  0038BC  D000               	goto	l5176
  1388  0038BE                     l5176:
  1389                           
  1390                           ;main.c: 92: Read_RTC();
  1391  0038BE  EC54  F00F         	call	_Read_RTC	;wreg free
  1392                           
  1393                           ;main.c: 93: caratula();
  1394  0038C2  ECBA  F01D         	call	_caratula	;wreg free
  1395                           
  1396                           ;main.c: 95: select_menu();
  1397  0038C6  ECE1  F016         	call	_select_menu	;wreg free
  1398                           
  1399                           ;main.c: 96: set_vision();
  1400  0038CA  EC77  F01A         	call	_set_vision	;wreg free
  1401                           
  1402                           ;main.c: 97: _delay((unsigned long)((98)*(8000000/4000.0)));
  1403  0038CE  0EFF               	movlw	255
  1404  0038D0  0100               	movlb	0	; () banked
  1405  0038D2  6FCD               	movwf	??_main& (0+255),b
  1406  0038D4  0E8A               	movlw	138
  1407  0038D6                     u4937:
  1408  0038D6  2EE8               	decfsz	wreg,f,c
  1409  0038D8  D7FE               	goto	u4937
  1410  0038DA  2FCD               	decfsz	??_main& (0+255),f,b
  1411  0038DC  D7FC               	goto	u4937
  1412  0038DE  D000               	nop2	
  1413  0038E0  D7EE               	goto	l5176
  1414                           
  1415                           ;main.c: 98: }
  1416                           ;main.c: 100: return 0;
  1417                           ;	Return value of _main is never used
  1418  0038E2  EF00  F000         	goto	start
  1419  0038E6                     __end_of_main:
  1420                           	opt stack 0
  1421                           tblptru	equ	0xFF8
  1422                           tblptrh	equ	0xFF7
  1423                           tblptrl	equ	0xFF6
  1424                           tablat	equ	0xFF5
  1425                           postinc0	equ	0xFEE
  1426                           wreg	equ	0xFE8
  1427                           postdec1	equ	0xFE5
  1428                           fsr1l	equ	0xFE1
  1429                           
  1430 ;; *************** function _set_vision *****************
  1431 ;; Defined at:
  1432 ;;		line 126 in file "lcd_vision.c"
  1433 ;; Parameters:    Size  Location     Type
  1434 ;;		None
  1435 ;; Auto vars:     Size  Location     Type
  1436 ;;		None
  1437 ;; Return value:  Size  Location     Type
  1438 ;;		None               void
  1439 ;; Registers used:
  1440 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1441 ;; Tracked objects:
  1442 ;;		On entry : 0/0
  1443 ;;		On exit  : 0/0
  1444 ;;		Unchanged: 0/0
  1445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1449 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1450 ;;Total ram usage:        0 bytes
  1451 ;; Hardware stack levels used:    1
  1452 ;; Hardware stack levels required when called:    8
  1453 ;; This function calls:
  1454 ;;		_clear
  1455 ;;		_input_password
  1456 ;;		_lcd_gotoxy
  1457 ;;		_lcd_putrs
  1458 ;;		_twinkle
  1459 ;;		_write_Date
  1460 ;; This function is called by:
  1461 ;;		_main
  1462 ;; This function uses a non-reentrant model
  1463 ;;
  1464                           
  1465                           	psect	text1
  1466  0034EE                     __ptext1:
  1467                           	opt stack 0
  1468  0034EE                     _set_vision:
  1469                           	opt stack 22
  1470                           
  1471                           ;lcd_vision.c: 127: clear();
  1472                           
  1473                           ;incstack = 0
  1474  0034EE  EC66  F01D         	call	_clear	;wreg free
  1475                           
  1476                           ;lcd_vision.c: 128: write_Date();
  1477  0034F2  ECE2  F018         	call	_write_Date	;wreg free
  1478                           
  1479                           ;lcd_vision.c: 129: lcd_gotoxy(1,1);
  1480  0034F6  0E01               	movlw	1
  1481  0034F8  6E05               	movwf	lcd_gotoxy@y,c
  1482  0034FA  0E01               	movlw	1
  1483  0034FC  EC35  F01D         	call	_lcd_gotoxy
  1484                           
  1485                           ;lcd_vision.c: 131: switch (state_alarm){
  1486  003500  D01B               	goto	l5170
  1487  003502                     l5156:
  1488  003502  0EDF               	movlw	low STR_16
  1489  003504  6E09               	movwf	lcd_putrs@ptr,c
  1490  003506  0E0F               	movlw	high STR_16
  1491  003508  6E0A               	movwf	lcd_putrs@ptr+1,c
  1492  00350A  EC00  F01B         	call	_lcd_putrs	;wreg free
  1493                           
  1494                           ;lcd_vision.c: 133: LATBbits.LATB0 = 1;;
  1495  00350E  808A               	bsf	3978,0,c	;volatile
  1496                           
  1497                           ;lcd_vision.c: 135: break;
  1498  003510  0012               	return	
  1499  003512                     l5160:
  1500  003512  0EDB               	movlw	low STR_17
  1501  003514  6E09               	movwf	lcd_putrs@ptr,c
  1502  003516  0E0F               	movlw	high STR_17
  1503  003518  6E0A               	movwf	lcd_putrs@ptr+1,c
  1504  00351A  EC00  F01B         	call	_lcd_putrs	;wreg free
  1505                           
  1506                           ;lcd_vision.c: 138: LATBbits.LATB0 = 0;;
  1507  00351E  908A               	bcf	3978,0,c	;volatile
  1508                           
  1509                           ;lcd_vision.c: 139: input_password();
  1510  003520  EC54  F018         	call	_input_password	;wreg free
  1511                           
  1512                           ;lcd_vision.c: 141: break;
  1513  003524  0012               	return	
  1514  003526                     l5166:
  1515  003526  0EC8               	movlw	low STR_18
  1516  003528  6E09               	movwf	lcd_putrs@ptr,c
  1517  00352A  0E0F               	movlw	high STR_18
  1518  00352C  6E0A               	movwf	lcd_putrs@ptr+1,c
  1519  00352E  EC00  F01B         	call	_lcd_putrs	;wreg free
  1520                           
  1521                           ;lcd_vision.c: 143: twinkle();
  1522  003532  ECC1  F015         	call	_twinkle	;wreg free
  1523                           
  1524                           ;lcd_vision.c: 145: }
  1525  003536  0012               	return	
  1526  003538                     l5170:
  1527  003538  0100               	movlb	0	; () banked
  1528  00353A  51E0               	movf	_state_alarm& (0+255),w,b
  1529                           
  1530                           ; Switch size 1, requested type "space"
  1531                           ; Number of cases is 2, Range of values is 0 to 1
  1532                           ; switch strategies available:
  1533                           ; Name         Instructions Cycles
  1534                           ; simple_byte            7     4 (average)
  1535                           ;	Chosen strategy is simple_byte
  1536  00353C  0A00               	xorlw	0	; case 0
  1537  00353E  B4D8               	btfsc	status,2,c
  1538  003540  D7E0               	goto	l5156
  1539  003542  0A01               	xorlw	1	; case 1
  1540  003544  B4D8               	btfsc	status,2,c
  1541  003546  D7E5               	goto	l5160
  1542  003548  D7EE               	goto	l5166
  1543                           
  1544                           ; BSR set to: 0
  1545  00354A  0012               	return		;funcret
  1546  00354C                     __end_of_set_vision:
  1547                           	opt stack 0
  1548                           tblptru	equ	0xFF8
  1549                           tblptrh	equ	0xFF7
  1550                           tblptrl	equ	0xFF6
  1551                           tablat	equ	0xFF5
  1552                           postinc0	equ	0xFEE
  1553                           wreg	equ	0xFE8
  1554                           postdec1	equ	0xFE5
  1555                           fsr1l	equ	0xFE1
  1556                           status	equ	0xFD8
  1557                           
  1558 ;; *************** function _twinkle *****************
  1559 ;; Defined at:
  1560 ;;		line 96 in file "lcd_vision.c"
  1561 ;; Parameters:    Size  Location     Type
  1562 ;;		None
  1563 ;; Auto vars:     Size  Location     Type
  1564 ;;  time            2   23[BANK0 ] int 
  1565 ;;  input           1   22[BANK0 ] unsigned char 
  1566 ;; Return value:  Size  Location     Type
  1567 ;;		None               void
  1568 ;; Registers used:
  1569 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1570 ;; Tracked objects:
  1571 ;;		On entry : 0/0
  1572 ;;		On exit  : 0/0
  1573 ;;		Unchanged: 0/0
  1574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1576 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1577 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1578 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1579 ;;Total ram usage:        4 bytes
  1580 ;; Hardware stack levels used:    1
  1581 ;; Hardware stack levels required when called:    7
  1582 ;; This function calls:
  1583 ;;		__delay_s
  1584 ;;		_clear_keyboard
  1585 ;;		_input_password
  1586 ;;		_lcd_gotoxy
  1587 ;;		_lcd_putrs
  1588 ;;		_read_keyboard
  1589 ;; This function is called by:
  1590 ;;		_set_vision
  1591 ;; This function uses a non-reentrant model
  1592 ;;
  1593                           
  1594                           	psect	text2
  1595  002B82                     __ptext2:
  1596                           	opt stack 0
  1597  002B82                     _twinkle:
  1598                           	opt stack 22
  1599                           
  1600                           ;lcd_vision.c: 97: char input = 1;
  1601                           
  1602                           ;incstack = 0
  1603  002B82  0E01               	movlw	1
  1604  002B84  0100               	movlb	0	; () banked
  1605  002B86  6FCA               	movwf	twinkle@input& (0+255),b
  1606                           
  1607                           ;lcd_vision.c: 98: int time = 0;
  1608  002B88  0E00               	movlw	0
  1609  002B8A  0100               	movlb	0	; () banked
  1610  002B8C  6FCC               	movwf	(twinkle@time+1)& (0+255),b
  1611  002B8E  0E00               	movlw	0
  1612  002B90  6FCB               	movwf	twinkle@time& (0+255),b
  1613                           
  1614                           ;lcd_vision.c: 100: while(input != 16 && time < time_to_stop){
  1615  002B92  D031               	goto	l5006
  1616  002B94                     l666:
  1617                           
  1618                           ; BSR set to: 0
  1619                           ;lcd_vision.c: 101: PORTCbits.RC7 = 1;;
  1620  002B94  8E82               	bsf	3970,7,c	;volatile
  1621                           
  1622                           ; BSR set to: 0
  1623                           ;lcd_vision.c: 103: _delay_s(200);
  1624  002B96  0E00               	movlw	0
  1625  002B98  6E0A               	movwf	__delay_s@millis+1,c
  1626  002B9A  0EC8               	movlw	200
  1627  002B9C  6E09               	movwf	__delay_s@millis,c
  1628  002B9E  ECD4  F01A         	call	__delay_s	;wreg free
  1629                           
  1630                           ;lcd_vision.c: 104: lcd_gotoxy(7,2);
  1631  002BA2  0E02               	movlw	2
  1632  002BA4  6E05               	movwf	lcd_gotoxy@y,c
  1633  002BA6  0E07               	movlw	7
  1634  002BA8  EC35  F01D         	call	_lcd_gotoxy
  1635                           
  1636                           ;lcd_vision.c: 105: LATBbits.LATB1 = 0;;
  1637  002BAC  928A               	bcf	3978,1,c	;volatile
  1638                           
  1639                           ;lcd_vision.c: 106: LATBbits.LATB0 = 1;;
  1640  002BAE  808A               	bsf	3978,0,c	;volatile
  1641                           
  1642                           ;lcd_vision.c: 107: lcd_putrs("WARNING!!!");
  1643  002BB0  0EAA               	movlw	low STR_14
  1644  002BB2  6E09               	movwf	lcd_putrs@ptr,c
  1645  002BB4  0E0F               	movlw	high STR_14
  1646  002BB6  6E0A               	movwf	lcd_putrs@ptr+1,c
  1647  002BB8  EC00  F01B         	call	_lcd_putrs	;wreg free
  1648                           
  1649                           ;lcd_vision.c: 108: _delay_s(200);
  1650  002BBC  0E00               	movlw	0
  1651  002BBE  6E0A               	movwf	__delay_s@millis+1,c
  1652  002BC0  0EC8               	movlw	200
  1653  002BC2  6E09               	movwf	__delay_s@millis,c
  1654  002BC4  ECD4  F01A         	call	__delay_s	;wreg free
  1655                           
  1656                           ;lcd_vision.c: 109: LATBbits.LATB0 = 0;;
  1657  002BC8  908A               	bcf	3978,0,c	;volatile
  1658                           
  1659                           ;lcd_vision.c: 110: LATBbits.LATB1 = 1;;
  1660  002BCA  828A               	bsf	3978,1,c	;volatile
  1661                           
  1662                           ;lcd_vision.c: 111: lcd_gotoxy(7,2);
  1663  002BCC  0E02               	movlw	2
  1664  002BCE  6E05               	movwf	lcd_gotoxy@y,c
  1665  002BD0  0E07               	movlw	7
  1666  002BD2  EC35  F01D         	call	_lcd_gotoxy
  1667                           
  1668                           ;lcd_vision.c: 112: lcd_putrs("          ");
  1669  002BD6  0E9F               	movlw	low STR_15
  1670  002BD8  6E09               	movwf	lcd_putrs@ptr,c
  1671  002BDA  0E0F               	movlw	high STR_15
  1672  002BDC  6E0A               	movwf	lcd_putrs@ptr+1,c
  1673  002BDE  EC00  F01B         	call	_lcd_putrs	;wreg free
  1674                           
  1675                           ;lcd_vision.c: 113: input = read_keyboard();
  1676  002BE2  ECF2  F007         	call	_read_keyboard	;wreg free
  1677  002BE6  0100               	movlb	0	; () banked
  1678  002BE8  6FCA               	movwf	twinkle@input& (0+255),b
  1679                           
  1680                           ; BSR set to: 0
  1681                           ;lcd_vision.c: 114: time +=400;
  1682  002BEA  0100               	movlb	0	; () banked
  1683  002BEC  0E90               	movlw	144
  1684  002BEE  27CB               	addwf	twinkle@time& (0+255),f,b
  1685  002BF0  0E01               	movlw	1
  1686  002BF2  23CC               	addwfc	(twinkle@time+1)& (0+255),f,b
  1687  002BF4  D000               	goto	l5006
  1688  002BF6                     l5006:
  1689                           
  1690                           ; BSR set to: 0
  1691  002BF6  0E10               	movlw	16
  1692  002BF8  0100               	movlb	0	; () banked
  1693  002BFA  19CA               	xorwf	twinkle@input& (0+255),w,b
  1694  002BFC  B4D8               	btfsc	status,2,c
  1695  002BFE  D010               	goto	l5010
  1696                           
  1697                           ; BSR set to: 0
  1698  002C00  0100               	movlb	0	; () banked
  1699  002C02  51DC               	movf	_time_to_stop& (0+255),w,b
  1700  002C04  0100               	movlb	0	; () banked
  1701  002C06  5DCB               	subwf	twinkle@time& (0+255),w,b
  1702  002C08  0100               	movlb	0	; () banked
  1703  002C0A  51CC               	movf	(twinkle@time+1)& (0+255),w,b
  1704  002C0C  0A80               	xorlw	128
  1705  002C0E  6E5F               	movwf	??_twinkle& (0+255),c
  1706  002C10  0100               	movlb	0	; () banked
  1707  002C12  51DD               	movf	(_time_to_stop+1)& (0+255),w,b
  1708  002C14  0A80               	xorlw	128
  1709  002C16  585F               	subwfb	??_twinkle& (0+255),w,c
  1710  002C18  B0D8               	btfsc	status,0,c
  1711  002C1A  D002               	goto	l5010
  1712  002C1C  D7BB               	goto	l666
  1713                           
  1714                           ; BSR set to: 0
  1715  002C1E  D000               	goto	l5010
  1716  002C20                     l5010:
  1717                           
  1718                           ; BSR set to: 0
  1719                           ;lcd_vision.c: 115: }
  1720                           ;lcd_vision.c: 117: clear_keyboard();
  1721  002C20  ECB6  F01D         	call	_clear_keyboard	;wreg free
  1722                           
  1723                           ;lcd_vision.c: 119: if(time >= time_to_stop){
  1724  002C24  0100               	movlb	0	; () banked
  1725  002C26  51DC               	movf	_time_to_stop& (0+255),w,b
  1726  002C28  0100               	movlb	0	; () banked
  1727  002C2A  5DCB               	subwf	twinkle@time& (0+255),w,b
  1728  002C2C  0100               	movlb	0	; () banked
  1729  002C2E  51CC               	movf	(twinkle@time+1)& (0+255),w,b
  1730  002C30  0A80               	xorlw	128
  1731  002C32  6E5F               	movwf	??_twinkle& (0+255),c
  1732  002C34  0100               	movlb	0	; () banked
  1733  002C36  51DD               	movf	(_time_to_stop+1)& (0+255),w,b
  1734  002C38  0A80               	xorlw	128
  1735  002C3A  585F               	subwfb	??_twinkle& (0+255),w,c
  1736  002C3C  A0D8               	btfss	status,0,c
  1737  002C3E  D004               	goto	l5016
  1738                           
  1739                           ; BSR set to: 0
  1740                           ;lcd_vision.c: 120: state_alarm = ACTIVE;
  1741  002C40  0E00               	movlw	0
  1742  002C42  0100               	movlb	0	; () banked
  1743  002C44  6FE0               	movwf	_state_alarm& (0+255),b
  1744                           
  1745                           ;lcd_vision.c: 121: }else{
  1746  002C46  0012               	return	
  1747  002C48                     l5016:
  1748                           
  1749                           ; BSR set to: 0
  1750                           ;lcd_vision.c: 122: input_password();
  1751  002C48  EC54  F018         	call	_input_password	;wreg free
  1752  002C4C  0012               	return	
  1753  002C4E  0012               	return		;funcret
  1754  002C50                     __end_of_twinkle:
  1755                           	opt stack 0
  1756                           tblptru	equ	0xFF8
  1757                           tblptrh	equ	0xFF7
  1758                           tblptrl	equ	0xFF6
  1759                           tablat	equ	0xFF5
  1760                           postinc0	equ	0xFEE
  1761                           wreg	equ	0xFE8
  1762                           postdec1	equ	0xFE5
  1763                           fsr1l	equ	0xFE1
  1764                           status	equ	0xFD8
  1765                           
  1766 ;; *************** function _input_password *****************
  1767 ;; Defined at:
  1768 ;;		line 82 in file "lcd_vision.c"
  1769 ;; Parameters:    Size  Location     Type
  1770 ;;		None
  1771 ;; Auto vars:     Size  Location     Type
  1772 ;;  digit           2   20[BANK0 ] short 
  1773 ;;  pass            2   17[BANK0 ] int 
  1774 ;;  input           1   19[BANK0 ] unsigned char 
  1775 ;; Return value:  Size  Location     Type
  1776 ;;		None               void
  1777 ;; Registers used:
  1778 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1779 ;; Tracked objects:
  1780 ;;		On entry : 0/0
  1781 ;;		On exit  : 0/0
  1782 ;;		Unchanged: 0/0
  1783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1785 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1787 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1788 ;;Total ram usage:        5 bytes
  1789 ;; Hardware stack levels used:    1
  1790 ;; Hardware stack levels required when called:    6
  1791 ;; This function calls:
  1792 ;;		_is_not_letter
  1793 ;;		_not_fill_pass
  1794 ;;		_obtain_pass
  1795 ;;		_read_keyboard
  1796 ;;		_review_code
  1797 ;;		_set_desactive_vision
  1798 ;; This function is called by:
  1799 ;;		_twinkle
  1800 ;;		_set_vision
  1801 ;; This function uses a non-reentrant model
  1802 ;;
  1803                           
  1804                           	psect	text3
  1805  0030A8                     __ptext3:
  1806                           	opt stack 0
  1807  0030A8                     _input_password:
  1808                           	opt stack 22
  1809                           
  1810                           ;lcd_vision.c: 83: short digit = 12;
  1811                           
  1812                           ;incstack = 0
  1813  0030A8  0E00               	movlw	0
  1814  0030AA  0100               	movlb	0	; () banked
  1815  0030AC  6FC9               	movwf	(input_password@digit+1)& (0+255),b
  1816  0030AE  0E0C               	movlw	12
  1817  0030B0  6FC8               	movwf	input_password@digit& (0+255),b
  1818                           
  1819                           ;lcd_vision.c: 84: int pass = 0;
  1820  0030B2  0E00               	movlw	0
  1821  0030B4  0100               	movlb	0	; () banked
  1822  0030B6  6FC6               	movwf	(input_password@pass+1)& (0+255),b
  1823  0030B8  0E00               	movlw	0
  1824  0030BA  6FC5               	movwf	input_password@pass& (0+255),b
  1825                           
  1826                           ; BSR set to: 0
  1827                           ;lcd_vision.c: 86: set_desactive_vision(digit);
  1828  0030BC  C0C8  F00B         	movff	input_password@digit,set_desactive_vision@digit
  1829  0030C0  C0C9  F00C         	movff	input_password@digit+1,set_desactive_vision@digit+1
  1830  0030C4  ECD4  F01C         	call	_set_desactive_vision	;wreg free
  1831                           
  1832                           ;lcd_vision.c: 87: char input = read_keyboard();
  1833  0030C8  ECF2  F007         	call	_read_keyboard	;wreg free
  1834  0030CC  0100               	movlb	0	; () banked
  1835  0030CE  6FC7               	movwf	input_password@input& (0+255),b
  1836                           
  1837                           ;lcd_vision.c: 89: while(is_not_letter(input) && not_fill_pass(digit)){
  1838  0030D0  D01F               	goto	l4822
  1839  0030D2                     l4816:
  1840                           
  1841                           ;lcd_vision.c: 90: pass = obtain_pass(pass,input,&digit);
  1842  0030D2  C0C5  F058         	movff	input_password@pass,obtain_pass@pass
  1843  0030D6  C0C6  F059         	movff	input_password@pass+1,obtain_pass@pass+1
  1844  0030DA  C0C7  F05A         	movff	input_password@input,obtain_pass@input
  1845  0030DE  0EC8               	movlw	low input_password@digit
  1846  0030E0  6E5B               	movwf	obtain_pass@digit,c
  1847  0030E2  0E00               	movlw	high input_password@digit
  1848  0030E4  6E5C               	movwf	obtain_pass@digit+1,c
  1849  0030E6  ECB2  F012         	call	_obtain_pass	;wreg free
  1850  0030EA  C058  F0C5         	movff	?_obtain_pass,input_password@pass
  1851  0030EE  C059  F0C6         	movff	?_obtain_pass+1,input_password@pass+1
  1852                           
  1853                           ;lcd_vision.c: 91: input = read_keyboard();
  1854  0030F2  ECF2  F007         	call	_read_keyboard	;wreg free
  1855  0030F6  0100               	movlb	0	; () banked
  1856  0030F8  6FC7               	movwf	input_password@input& (0+255),b
  1857                           
  1858                           ; BSR set to: 0
  1859                           ;lcd_vision.c: 92: review_code(digit, pass);
  1860  0030FA  C0C8  F003         	movff	input_password@digit,review_code@digit
  1861  0030FE  C0C9  F004         	movff	input_password@digit+1,review_code@digit+1
  1862  003102  C0C5  F005         	movff	input_password@pass,review_code@pass
  1863  003106  C0C6  F006         	movff	input_password@pass+1,review_code@pass+1
  1864  00310A  EC11  F01D         	call	_review_code	;wreg free
  1865  00310E  D000               	goto	l4822
  1866  003110                     l4822:
  1867  003110  0100               	movlb	0	; () banked
  1868  003112  51C7               	movf	input_password@input& (0+255),w,b
  1869  003114  ECA4  F01C         	call	_is_not_letter
  1870  003118  0900               	iorlw	0
  1871  00311A  B4D8               	btfsc	status,2,c
  1872  00311C  0012               	return	
  1873  00311E  C0C8  F001         	movff	input_password@digit,not_fill_pass@digit
  1874  003122  C0C9  F002         	movff	input_password@digit+1,not_fill_pass@digit+1
  1875  003126  EC71  F01D         	call	_not_fill_pass	;wreg free
  1876  00312A  0900               	iorlw	0
  1877  00312C  B4D8               	btfsc	status,2,c
  1878  00312E  0012               	return	
  1879  003130  D7D0               	goto	l4816
  1880  003132  0012               	return	
  1881  003134  0012               	return		;funcret
  1882  003136                     __end_of_input_password:
  1883                           	opt stack 0
  1884                           tblptru	equ	0xFF8
  1885                           tblptrh	equ	0xFF7
  1886                           tblptrl	equ	0xFF6
  1887                           tablat	equ	0xFF5
  1888                           postinc0	equ	0xFEE
  1889                           wreg	equ	0xFE8
  1890                           postdec1	equ	0xFE5
  1891                           fsr1l	equ	0xFE1
  1892                           status	equ	0xFD8
  1893                           
  1894 ;; *************** function _set_desactive_vision *****************
  1895 ;; Defined at:
  1896 ;;		line 75 in file "lcd_vision.c"
  1897 ;; Parameters:    Size  Location     Type
  1898 ;;  digit           2   10[COMRAM] short 
  1899 ;; Auto vars:     Size  Location     Type
  1900 ;;		None
  1901 ;; Return value:  Size  Location     Type
  1902 ;;		None               void
  1903 ;; Registers used:
  1904 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1905 ;; Tracked objects:
  1906 ;;		On entry : 0/0
  1907 ;;		On exit  : 0/0
  1908 ;;		Unchanged: 0/0
  1909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1910 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1913 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1914 ;;Total ram usage:        2 bytes
  1915 ;; Hardware stack levels used:    1
  1916 ;; Hardware stack levels required when called:    5
  1917 ;; This function calls:
  1918 ;;		_lcd_gotoxy
  1919 ;;		_lcd_putrs
  1920 ;;		_lcd_setcursor_vb
  1921 ;; This function is called by:
  1922 ;;		_input_password
  1923 ;; This function uses a non-reentrant model
  1924 ;;
  1925                           
  1926                           	psect	text4
  1927  0039A8                     __ptext4:
  1928                           	opt stack 0
  1929  0039A8                     _set_desactive_vision:
  1930                           	opt stack 22
  1931                           
  1932                           ;lcd_vision.c: 76: lcd_gotoxy(7,2);
  1933                           
  1934                           ;incstack = 0
  1935  0039A8  0E02               	movlw	2
  1936  0039AA  6E05               	movwf	lcd_gotoxy@y,c
  1937  0039AC  0E07               	movlw	7
  1938  0039AE  EC35  F01D         	call	_lcd_gotoxy
  1939                           
  1940                           ;lcd_vision.c: 77: lcd_putrs("pass:____");
  1941  0039B2  0E7A               	movlw	low (STR_23+4)
  1942  0039B4  6E09               	movwf	lcd_putrs@ptr,c
  1943  0039B6  0E0F               	movlw	high (STR_23+4)
  1944  0039B8  6E0A               	movwf	lcd_putrs@ptr+1,c
  1945  0039BA  EC00  F01B         	call	_lcd_putrs	;wreg free
  1946                           
  1947                           ;lcd_vision.c: 78: lcd_gotoxy(digit,2);
  1948  0039BE  0E02               	movlw	2
  1949  0039C0  6E05               	movwf	lcd_gotoxy@y,c
  1950  0039C2  500B               	movf	set_desactive_vision@digit,w,c
  1951  0039C4  EC35  F01D         	call	_lcd_gotoxy
  1952                           
  1953                           ;lcd_vision.c: 79: lcd_setcursor_vb(1,1);
  1954  0039C8  0E01               	movlw	1
  1955  0039CA  6E05               	movwf	lcd_setcursor_vb@blink,c
  1956  0039CC  0E01               	movlw	1
  1957  0039CE  EC7B  F01D         	call	_lcd_setcursor_vb
  1958  0039D2  0012               	return		;funcret
  1959  0039D4                     __end_of_set_desactive_vision:
  1960                           	opt stack 0
  1961                           tblptru	equ	0xFF8
  1962                           tblptrh	equ	0xFF7
  1963                           tblptrl	equ	0xFF6
  1964                           tablat	equ	0xFF5
  1965                           postinc0	equ	0xFEE
  1966                           wreg	equ	0xFE8
  1967                           postdec1	equ	0xFE5
  1968                           fsr1l	equ	0xFE1
  1969                           status	equ	0xFD8
  1970                           
  1971 ;; *************** function _review_code *****************
  1972 ;; Defined at:
  1973 ;;		line 58 in file "lcd_vision.c"
  1974 ;; Parameters:    Size  Location     Type
  1975 ;;  digit           2    2[COMRAM] short 
  1976 ;;  pass            2    4[COMRAM] int 
  1977 ;; Auto vars:     Size  Location     Type
  1978 ;;		None
  1979 ;; Return value:  Size  Location     Type
  1980 ;;		None               void
  1981 ;; Registers used:
  1982 ;;		wreg, status,2, status,0, cstack
  1983 ;; Tracked objects:
  1984 ;;		On entry : 0/0
  1985 ;;		On exit  : 0/0
  1986 ;;		Unchanged: 0/0
  1987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1988 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1991 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1992 ;;Total ram usage:        4 bytes
  1993 ;; Hardware stack levels used:    1
  1994 ;; Hardware stack levels required when called:    1
  1995 ;; This function calls:
  1996 ;;		_change_state
  1997 ;;		_checkPass
  1998 ;; This function is called by:
  1999 ;;		_input_password
  2000 ;; This function uses a non-reentrant model
  2001 ;;
  2002                           
  2003                           	psect	text5
  2004  003A22                     __ptext5:
  2005                           	opt stack 0
  2006  003A22                     _review_code:
  2007                           	opt stack 26
  2008                           
  2009                           ;lcd_vision.c: 59: if(digit == 16){
  2010                           
  2011                           ;incstack = 0
  2012  003A22  0E10               	movlw	16
  2013  003A24  1803               	xorwf	review_code@digit,w,c
  2014  003A26  1004               	iorwf	review_code@digit+1,w,c
  2015  003A28  A4D8               	btfss	status,2,c
  2016  003A2A  0012               	return	
  2017                           
  2018                           ;lcd_vision.c: 60: if(checkPass(pass)){
  2019  003A2C  C005  F001         	movff	review_code@pass,checkPass@pass
  2020  003A30  C006  F002         	movff	review_code@pass+1,checkPass@pass+1
  2021  003A34  EC58  F01D         	call	_checkPass	;wreg free
  2022  003A38  0900               	iorlw	0
  2023  003A3A  B4D8               	btfsc	status,2,c
  2024  003A3C  0012               	return	
  2025                           
  2026                           ;lcd_vision.c: 61: change_state();
  2027  003A3E  EC8C  F01C         	call	_change_state	;wreg free
  2028  003A42  0012               	return	
  2029  003A44  0012               	return		;funcret
  2030  003A46                     __end_of_review_code:
  2031                           	opt stack 0
  2032                           tblptru	equ	0xFF8
  2033                           tblptrh	equ	0xFF7
  2034                           tblptrl	equ	0xFF6
  2035                           tablat	equ	0xFF5
  2036                           postinc0	equ	0xFEE
  2037                           wreg	equ	0xFE8
  2038                           postdec1	equ	0xFE5
  2039                           fsr1l	equ	0xFE1
  2040                           status	equ	0xFD8
  2041                           
  2042 ;; *************** function _change_state *****************
  2043 ;; Defined at:
  2044 ;;		line 47 in file "lcd_vision.c"
  2045 ;; Parameters:    Size  Location     Type
  2046 ;;		None
  2047 ;; Auto vars:     Size  Location     Type
  2048 ;;		None
  2049 ;; Return value:  Size  Location     Type
  2050 ;;		None               void
  2051 ;; Registers used:
  2052 ;;		wreg, status,2, status,0
  2053 ;; Tracked objects:
  2054 ;;		On entry : 0/0
  2055 ;;		On exit  : 0/0
  2056 ;;		Unchanged: 0/0
  2057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2061 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2062 ;;Total ram usage:        0 bytes
  2063 ;; Hardware stack levels used:    1
  2064 ;; This function calls:
  2065 ;;		Nothing
  2066 ;; This function is called by:
  2067 ;;		_review_code
  2068 ;; This function uses a non-reentrant model
  2069 ;;
  2070                           
  2071                           	psect	text6
  2072  003918                     __ptext6:
  2073                           	opt stack 0
  2074  003918                     _change_state:
  2075                           	opt stack 26
  2076                           
  2077                           ;lcd_vision.c: 48: switch (state_alarm){
  2078                           
  2079                           ;incstack = 0
  2080  003918  D00D               	goto	l4232
  2081  00391A                     l4224:
  2082  00391A  0E00               	movlw	0
  2083  00391C  0100               	movlb	0	; () banked
  2084  00391E  6FE0               	movwf	_state_alarm& (0+255),b
  2085                           
  2086                           ;lcd_vision.c: 50: break;
  2087  003920  0012               	return	
  2088  003922                     l4226:
  2089                           
  2090                           ; BSR set to: 0
  2091  003922  0E01               	movlw	1
  2092  003924  0100               	movlb	0	; () banked
  2093  003926  6FE0               	movwf	_state_alarm& (0+255),b
  2094                           
  2095                           ;lcd_vision.c: 52: break;
  2096  003928  0012               	return	
  2097  00392A                     l4228:
  2098                           
  2099                           ; BSR set to: 0
  2100  00392A  0E01               	movlw	1
  2101  00392C  0100               	movlb	0	; () banked
  2102  00392E  6FE0               	movwf	_state_alarm& (0+255),b
  2103                           
  2104                           ; BSR set to: 0
  2105                           ;lcd_vision.c: 54: PORTCbits.RC7 = 0;;
  2106  003930  9E82               	bcf	3970,7,c	;volatile
  2107                           
  2108                           ;lcd_vision.c: 55: }
  2109  003932  0012               	return	
  2110  003934                     l4232:
  2111  003934  0100               	movlb	0	; () banked
  2112  003936  51E0               	movf	_state_alarm& (0+255),w,b
  2113                           
  2114                           ; Switch size 1, requested type "space"
  2115                           ; Number of cases is 2, Range of values is 0 to 1
  2116                           ; switch strategies available:
  2117                           ; Name         Instructions Cycles
  2118                           ; simple_byte            7     4 (average)
  2119                           ;	Chosen strategy is simple_byte
  2120  003938  0A00               	xorlw	0	; case 0
  2121  00393A  B4D8               	btfsc	status,2,c
  2122  00393C  D7F2               	goto	l4226
  2123  00393E  0A01               	xorlw	1	; case 1
  2124  003940  B4D8               	btfsc	status,2,c
  2125  003942  D7EB               	goto	l4224
  2126  003944  D7F2               	goto	l4228
  2127                           
  2128                           ; BSR set to: 0
  2129                           
  2130                           ; BSR set to: 0
  2131  003946  0012               	return		;funcret
  2132  003948                     __end_of_change_state:
  2133                           	opt stack 0
  2134                           tblptru	equ	0xFF8
  2135                           tblptrh	equ	0xFF7
  2136                           tblptrl	equ	0xFF6
  2137                           tablat	equ	0xFF5
  2138                           postinc0	equ	0xFEE
  2139                           wreg	equ	0xFE8
  2140                           postdec1	equ	0xFE5
  2141                           fsr1l	equ	0xFE1
  2142                           status	equ	0xFD8
  2143                           
  2144 ;; *************** function _obtain_pass *****************
  2145 ;; Defined at:
  2146 ;;		line 66 in file "lcd_vision.c"
  2147 ;; Parameters:    Size  Location     Type
  2148 ;;  pass            2   87[COMRAM] int 
  2149 ;;  input           1   89[COMRAM] unsigned char 
  2150 ;;  digit           2   90[COMRAM] PTR short 
  2151 ;;		 -> input_password@digit(2), 
  2152 ;; Auto vars:     Size  Location     Type
  2153 ;;		None
  2154 ;; Return value:  Size  Location     Type
  2155 ;;                  2   87[COMRAM] int 
  2156 ;; Registers used:
  2157 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2158 ;; Tracked objects:
  2159 ;;		On entry : 0/0
  2160 ;;		On exit  : 0/0
  2161 ;;		Unchanged: 0/0
  2162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2163 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2164 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2165 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2166 ;;      Totals:         7       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2167 ;;Total ram usage:       13 bytes
  2168 ;; Hardware stack levels used:    1
  2169 ;; Hardware stack levels required when called:    5
  2170 ;; This function calls:
  2171 ;;		___awtoft
  2172 ;;		___ftadd
  2173 ;;		___ftmul
  2174 ;;		___fttol
  2175 ;;		___lbtoft
  2176 ;;		_next_code
  2177 ;;		_pow
  2178 ;; This function is called by:
  2179 ;;		_input_password
  2180 ;; This function uses a non-reentrant model
  2181 ;;
  2182                           
  2183                           	psect	text7
  2184  002564                     __ptext7:
  2185                           	opt stack 0
  2186  002564                     _obtain_pass:
  2187                           	opt stack 22
  2188                           
  2189                           ;lcd_vision.c: 68: if(0<input && input<10){
  2190                           
  2191                           ; BSR set to: 0
  2192                           ;incstack = 0
  2193  002564  505A               	movf	obtain_pass@input,w,c
  2194  002566  B4D8               	btfsc	status,2,c
  2195  002568  D06D               	goto	l4642
  2196  00256A  0E0A               	movlw	10
  2197  00256C  605A               	cpfslt	obtain_pass@input,c
  2198  00256E  D06A               	goto	l4642
  2199                           
  2200                           ;lcd_vision.c: 69: pass = pass + input * pow(10, 15 - *digit);
  2201  002570  C05B  FFD9         	movff	obtain_pass@digit,fsr2l
  2202  002574  C05C  FFDA         	movff	obtain_pass@digit+1,fsr2h
  2203  002578  CFDE F05D          	movff	postinc2,??_obtain_pass
  2204  00257C  CFDD F05E          	movff	postdec2,??_obtain_pass+1
  2205  002580  1E5D               	comf	??_obtain_pass,f,c
  2206  002582  1E5E               	comf	??_obtain_pass+1,f,c
  2207  002584  4A5D               	infsnz	??_obtain_pass,f,c
  2208  002586  2A5E               	incf	??_obtain_pass+1,f,c
  2209  002588  0E0F               	movlw	15
  2210  00258A  245D               	addwf	??_obtain_pass,w,c
  2211  00258C  6E09               	movwf	___awtoft@c,c
  2212  00258E  0E00               	movlw	0
  2213  002590  205E               	addwfc	??_obtain_pass+1,w,c
  2214  002592  6E0A               	movwf	___awtoft@c+1,c
  2215  002594  EC1F  F01C         	call	___awtoft	;wreg free
  2216  002598  C009  F0BF         	movff	?___awtoft,_obtain_pass$3186
  2217  00259C  C00A  F0C0         	movff	?___awtoft+1,_obtain_pass$3186+1
  2218  0025A0  C00B  F0C1         	movff	?___awtoft+2,_obtain_pass$3186+2
  2219                           
  2220                           ;lcd_vision.c: 69: pass = pass + input * pow(10, 15 - *digit);
  2221  0025A4  C0BF  F055         	movff	_obtain_pass$3186,pow@y
  2222  0025A8  C0C0  F056         	movff	_obtain_pass$3186+1,pow@y+1
  2223  0025AC  C0C1  F057         	movff	_obtain_pass$3186+2,pow@y+2
  2224  0025B0  0E00               	movlw	0
  2225  0025B2  6E52               	movwf	pow@x,c
  2226  0025B4  0E20               	movlw	32
  2227  0025B6  6E53               	movwf	pow@x+1,c
  2228  0025B8  0E41               	movlw	65
  2229  0025BA  6E54               	movwf	pow@x+2,c
  2230  0025BC  EC24  F00D         	call	_pow	;wreg free
  2231  0025C0  C052  F0C2         	movff	?_pow,_obtain_pass$3187
  2232  0025C4  C053  F0C3         	movff	?_pow+1,_obtain_pass$3187+1
  2233  0025C8  C054  F0C4         	movff	?_pow+2,_obtain_pass$3187+2
  2234                           
  2235                           ;lcd_vision.c: 69: pass = pass + input * pow(10, 15 - *digit);
  2236  0025CC  C0C2  F010         	movff	_obtain_pass$3187,___ftmul@f2
  2237  0025D0  C0C3  F011         	movff	_obtain_pass$3187+1,___ftmul@f2+1
  2238  0025D4  C0C4  F012         	movff	_obtain_pass$3187+2,___ftmul@f2+2
  2239  0025D8  505A               	movf	obtain_pass@input,w,c
  2240  0025DA  ECFE  F01C         	call	___lbtoft
  2241  0025DE  C009  F00D         	movff	?___lbtoft,___ftmul@f1
  2242  0025E2  C00A  F00E         	movff	?___lbtoft+1,___ftmul@f1+1
  2243  0025E6  C00B  F00F         	movff	?___lbtoft+2,___ftmul@f1+2
  2244  0025EA  EC31  F012         	call	___ftmul	;wreg free
  2245  0025EE  C00D  F01F         	movff	?___ftmul,___ftadd@f2
  2246  0025F2  C00E  F020         	movff	?___ftmul+1,___ftadd@f2+1
  2247  0025F6  C00F  F021         	movff	?___ftmul+2,___ftadd@f2+2
  2248  0025FA  C058  F009         	movff	obtain_pass@pass,___awtoft@c
  2249  0025FE  C059  F00A         	movff	obtain_pass@pass+1,___awtoft@c+1
  2250  002602  EC1F  F01C         	call	___awtoft	;wreg free
  2251  002606  C009  F01C         	movff	?___awtoft,___ftadd@f1
  2252  00260A  C00A  F01D         	movff	?___awtoft+1,___ftadd@f1+1
  2253  00260E  C00B  F01E         	movff	?___awtoft+2,___ftadd@f1+2
  2254  002612  EC74  F00B         	call	___ftadd	;wreg free
  2255  002616  C01C  F028         	movff	?___ftadd,___fttol@f1
  2256  00261A  C01D  F029         	movff	?___ftadd+1,___fttol@f1+1
  2257  00261E  C01E  F02A         	movff	?___ftadd+2,___fttol@f1+2
  2258  002622  ECB0  F011         	call	___fttol	;wreg free
  2259  002626  C028  F058         	movff	?___fttol,obtain_pass@pass
  2260  00262A  C029  F059         	movff	?___fttol+1,obtain_pass@pass+1
  2261                           
  2262                           ;lcd_vision.c: 70: next_code(digit, &input);
  2263  00262E  C05B  F008         	movff	obtain_pass@digit,next_code@digit
  2264  002632  C05C  F009         	movff	obtain_pass@digit+1,next_code@digit+1
  2265  002636  0E5A               	movlw	low obtain_pass@input
  2266  002638  6E0A               	movwf	next_code@input,c
  2267  00263A  0E00               	movlw	high obtain_pass@input
  2268  00263C  6E0B               	movwf	next_code@input+1,c
  2269  00263E  EC2A  F01B         	call	_next_code	;wreg free
  2270  002642  D000               	goto	l4642
  2271  002644                     l4642:
  2272                           
  2273                           ;lcd_vision.c: 71: }
  2274                           ;lcd_vision.c: 72: return pass;
  2275  002644  C058  F058         	movff	obtain_pass@pass,?_obtain_pass
  2276  002648  C059  F059         	movff	obtain_pass@pass+1,?_obtain_pass+1
  2277  00264C  0012               	return	
  2278  00264E  0012               	return		;funcret
  2279  002650                     __end_of_obtain_pass:
  2280                           	opt stack 0
  2281                           tblptru	equ	0xFF8
  2282                           tblptrh	equ	0xFF7
  2283                           tblptrl	equ	0xFF6
  2284                           tablat	equ	0xFF5
  2285                           postinc0	equ	0xFEE
  2286                           wreg	equ	0xFE8
  2287                           postdec1	equ	0xFE5
  2288                           fsr1l	equ	0xFE1
  2289                           postinc2	equ	0xFDE
  2290                           postdec2	equ	0xFDD
  2291                           fsr2h	equ	0xFDA
  2292                           fsr2l	equ	0xFD9
  2293                           status	equ	0xFD8
  2294                           
  2295 ;; *************** function _next_code *****************
  2296 ;; Defined at:
  2297 ;;		line 40 in file "lcd_vision.c"
  2298 ;; Parameters:    Size  Location     Type
  2299 ;;  digit           2    7[COMRAM] PTR short 
  2300 ;;		 -> input_password@digit(2), 
  2301 ;;  input           2    9[COMRAM] PTR unsigned char 
  2302 ;;		 -> obtain_pass@input(1), 
  2303 ;; Auto vars:     Size  Location     Type
  2304 ;;		None
  2305 ;; Return value:  Size  Location     Type
  2306 ;;		None               void
  2307 ;; Registers used:
  2308 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2309 ;; Tracked objects:
  2310 ;;		On entry : 0/0
  2311 ;;		On exit  : 0/0
  2312 ;;		Unchanged: 0/0
  2313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2314 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2316 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2317 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2318 ;;Total ram usage:        6 bytes
  2319 ;; Hardware stack levels used:    1
  2320 ;; Hardware stack levels required when called:    3
  2321 ;; This function calls:
  2322 ;;		_clear_keyboard
  2323 ;;		_lcd_gotoxy
  2324 ;; This function is called by:
  2325 ;;		_obtain_pass
  2326 ;; This function uses a non-reentrant model
  2327 ;;
  2328                           
  2329                           	psect	text8
  2330  003654                     __ptext8:
  2331                           	opt stack 0
  2332  003654                     _next_code:
  2333                           	opt stack 23
  2334                           
  2335                           ;lcd_vision.c: 41: clear_keyboard();
  2336                           
  2337                           ;incstack = 0
  2338  003654  ECB6  F01D         	call	_clear_keyboard	;wreg free
  2339                           
  2340                           ;lcd_vision.c: 42: *digit = *digit + 1;
  2341  003658  C008  FFD9         	movff	next_code@digit,fsr2l
  2342  00365C  C009  FFDA         	movff	next_code@digit+1,fsr2h
  2343  003660  CFDE F00C          	movff	postinc2,??_next_code
  2344  003664  CFDD F00D          	movff	postdec2,??_next_code+1
  2345  003668  0E01               	movlw	1
  2346  00366A  260C               	addwf	??_next_code,f,c
  2347  00366C  0E00               	movlw	0
  2348  00366E  220D               	addwfc	??_next_code+1,f,c
  2349  003670  C008  FFD9         	movff	next_code@digit,fsr2l
  2350  003674  C009  FFDA         	movff	next_code@digit+1,fsr2h
  2351  003678  C00C  FFDE         	movff	??_next_code,postinc2
  2352  00367C  C00D  FFDD         	movff	??_next_code+1,postdec2
  2353                           
  2354                           ;lcd_vision.c: 43: lcd_gotoxy(*digit, 2);
  2355  003680  0E02               	movlw	2
  2356  003682  6E05               	movwf	lcd_gotoxy@y,c
  2357  003684  C008  FFD9         	movff	next_code@digit,fsr2l
  2358  003688  C009  FFDA         	movff	next_code@digit+1,fsr2h
  2359  00368C  50DF               	movf	indf2,w,c
  2360  00368E  EC35  F01D         	call	_lcd_gotoxy
  2361                           
  2362                           ;lcd_vision.c: 44: *input = 18;
  2363  003692  C00A  FFD9         	movff	next_code@input,fsr2l
  2364  003696  C00B  FFDA         	movff	next_code@input+1,fsr2h
  2365  00369A  0E12               	movlw	18
  2366  00369C  6EDF               	movwf	indf2,c
  2367  00369E  0012               	return		;funcret
  2368  0036A0                     __end_of_next_code:
  2369                           	opt stack 0
  2370                           tblptru	equ	0xFF8
  2371                           tblptrh	equ	0xFF7
  2372                           tblptrl	equ	0xFF6
  2373                           tablat	equ	0xFF5
  2374                           postinc0	equ	0xFEE
  2375                           wreg	equ	0xFE8
  2376                           postdec1	equ	0xFE5
  2377                           fsr1l	equ	0xFE1
  2378                           indf2	equ	0xFDF
  2379                           postinc2	equ	0xFDE
  2380                           postdec2	equ	0xFDD
  2381                           fsr2h	equ	0xFDA
  2382                           fsr2l	equ	0xFD9
  2383                           status	equ	0xFD8
  2384                           
  2385 ;; *************** function _is_not_letter *****************
  2386 ;; Defined at:
  2387 ;;		line 31 in file "lcd_vision.c"
  2388 ;; Parameters:    Size  Location     Type
  2389 ;;  input           1    wreg     unsigned char 
  2390 ;; Auto vars:     Size  Location     Type
  2391 ;;  input           1    1[COMRAM] unsigned char 
  2392 ;; Return value:  Size  Location     Type
  2393 ;;                  1    wreg      unsigned char 
  2394 ;; Registers used:
  2395 ;;		wreg, status,2, status,0
  2396 ;; Tracked objects:
  2397 ;;		On entry : 0/0
  2398 ;;		On exit  : 0/0
  2399 ;;		Unchanged: 0/0
  2400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2402 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2404 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2405 ;;Total ram usage:        2 bytes
  2406 ;; Hardware stack levels used:    1
  2407 ;; This function calls:
  2408 ;;		Nothing
  2409 ;; This function is called by:
  2410 ;;		_input_password
  2411 ;; This function uses a non-reentrant model
  2412 ;;
  2413                           
  2414                           	psect	text9
  2415  003948                     __ptext9:
  2416                           	opt stack 0
  2417  003948                     _is_not_letter:
  2418                           	opt stack 27
  2419                           
  2420                           ;incstack = 0
  2421                           ;is_not_letter@input stored from wreg
  2422  003948  6E02               	movwf	is_not_letter@input,c
  2423                           
  2424                           ;lcd_vision.c: 32: return input != 16 && input != 11 && input !=12 && input!=13;
  2425  00394A  0E00               	movlw	0
  2426  00394C  6E01               	movwf	_is_not_letter$1409,c
  2427  00394E  0E10               	movlw	16
  2428  003950  1802               	xorwf	is_not_letter@input,w,c
  2429  003952  B4D8               	btfsc	status,2,c
  2430  003954  D00E               	goto	l627
  2431  003956  0E0B               	movlw	11
  2432  003958  1802               	xorwf	is_not_letter@input,w,c
  2433  00395A  B4D8               	btfsc	status,2,c
  2434  00395C  D00A               	goto	l627
  2435  00395E  0E0C               	movlw	12
  2436  003960  1802               	xorwf	is_not_letter@input,w,c
  2437  003962  B4D8               	btfsc	status,2,c
  2438  003964  D006               	goto	l627
  2439  003966  0E0D               	movlw	13
  2440  003968  1802               	xorwf	is_not_letter@input,w,c
  2441  00396A  B4D8               	btfsc	status,2,c
  2442  00396C  D002               	goto	l627
  2443  00396E  0E01               	movlw	1
  2444  003970  6E01               	movwf	_is_not_letter$1409,c
  2445  003972                     l627:
  2446  003972  5001               	movf	_is_not_letter$1409,w,c
  2447  003974  0012               	return	
  2448  003976  0012               	return		;funcret
  2449  003978                     __end_of_is_not_letter:
  2450                           	opt stack 0
  2451                           tblptru	equ	0xFF8
  2452                           tblptrh	equ	0xFF7
  2453                           tblptrl	equ	0xFF6
  2454                           tablat	equ	0xFF5
  2455                           postinc0	equ	0xFEE
  2456                           wreg	equ	0xFE8
  2457                           postdec1	equ	0xFE5
  2458                           fsr1l	equ	0xFE1
  2459                           indf2	equ	0xFDF
  2460                           postinc2	equ	0xFDE
  2461                           postdec2	equ	0xFDD
  2462                           fsr2h	equ	0xFDA
  2463                           fsr2l	equ	0xFD9
  2464                           status	equ	0xFD8
  2465                           
  2466 ;; *************** function _select_menu *****************
  2467 ;; Defined at:
  2468 ;;		line 125 in file "menu.c"
  2469 ;; Parameters:    Size  Location     Type
  2470 ;;		None
  2471 ;; Auto vars:     Size  Location     Type
  2472 ;;		None
  2473 ;; Return value:  Size  Location     Type
  2474 ;;                  2   34[None  ] int 
  2475 ;; Registers used:
  2476 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2477 ;; Tracked objects:
  2478 ;;		On entry : 0/0
  2479 ;;		On exit  : 0/0
  2480 ;;		Unchanged: 0/0
  2481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2485 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2486 ;;Total ram usage:        0 bytes
  2487 ;; Hardware stack levels used:    1
  2488 ;; Hardware stack levels required when called:    8
  2489 ;; This function calls:
  2490 ;;		_configurar_reloj
  2491 ;;		_dispararSensor
  2492 ;;		_read_keyboard
  2493 ;;		_ver_info
  2494 ;;		_ver_opcion_cambio
  2495 ;; This function is called by:
  2496 ;;		_main
  2497 ;; This function uses a non-reentrant model
  2498 ;;
  2499                           
  2500                           	psect	text10
  2501  002DC2                     __ptext10:
  2502                           	opt stack 0
  2503  002DC2                     _select_menu:
  2504                           	opt stack 22
  2505                           
  2506                           ;menu.c: 126: if (state_alarm == DESACTIVE){
  2507                           
  2508                           ;incstack = 0
  2509  002DC2  0100               	movlb	0	; () banked
  2510  002DC4  05E0               	decf	_state_alarm& (0+255),w,b
  2511  002DC6  A4D8               	btfss	status,2,c
  2512  002DC8  D01A               	goto	l5136
  2513                           
  2514                           ; BSR set to: 0
  2515                           ;menu.c: 127: menu = read_keyboard();
  2516  002DCA  ECF2  F007         	call	_read_keyboard	;wreg free
  2517  002DCE  0100               	movlb	0	; () banked
  2518  002DD0  6FDF               	movwf	_menu& (0+255),b
  2519                           
  2520                           ;menu.c: 128: switch (menu){
  2521  002DD2  D009               	goto	l5134
  2522  002DD4                     l5128:
  2523                           
  2524                           ; BSR set to: 0
  2525  002DD4  EC8B  F016         	call	_ver_opcion_cambio	;wreg free
  2526                           
  2527                           ;menu.c: 130: break;
  2528  002DD8  D03C               	goto	l5148
  2529  002DDA                     l5130:
  2530  002DDA  EC0C  F018         	call	_configurar_reloj	;wreg free
  2531                           
  2532                           ;menu.c: 132: break;
  2533  002DDE  D039               	goto	l5148
  2534  002DE0                     l5132:
  2535  002DE0  EC7E  F014         	call	_ver_info	;wreg free
  2536                           
  2537                           ;menu.c: 136: }
  2538                           
  2539                           ;menu.c: 135: default: ;
  2540                           
  2541                           ;menu.c: 134: break;
  2542  002DE4  D036               	goto	l5148
  2543  002DE6                     l5134:
  2544  002DE6  0100               	movlb	0	; () banked
  2545  002DE8  51DF               	movf	_menu& (0+255),w,b
  2546                           
  2547                           ; Switch size 1, requested type "space"
  2548                           ; Number of cases is 3, Range of values is 11 to 13
  2549                           ; switch strategies available:
  2550                           ; Name         Instructions Cycles
  2551                           ; simple_byte           10     6 (average)
  2552                           ;	Chosen strategy is simple_byte
  2553  002DEA  0A0B               	xorlw	11	; case 11
  2554  002DEC  B4D8               	btfsc	status,2,c
  2555  002DEE  D7F2               	goto	l5128
  2556  002DF0  0A07               	xorlw	7	; case 12
  2557  002DF2  B4D8               	btfsc	status,2,c
  2558  002DF4  D7F2               	goto	l5130
  2559  002DF6  0A01               	xorlw	1	; case 13
  2560  002DF8  B4D8               	btfsc	status,2,c
  2561  002DFA  D7F2               	goto	l5132
  2562                           
  2563                           ; BSR set to: 0
  2564                           ;menu.c: 137: }else{
  2565  002DFC  D02A               	goto	l5148
  2566  002DFE                     l5136:
  2567                           
  2568                           ; BSR set to: 0
  2569                           ;menu.c: 138: if (state_alarm == ACTIVE){
  2570  002DFE  0100               	movlb	0	; () banked
  2571  002E00  51E0               	movf	_state_alarm& (0+255),w,b
  2572  002E02  A4D8               	btfss	status,2,c
  2573  002E04  D026               	goto	l5148
  2574                           
  2575                           ; BSR set to: 0
  2576                           ;menu.c: 139: menu = read_keyboard();
  2577  002E06  ECF2  F007         	call	_read_keyboard	;wreg free
  2578  002E0A  0100               	movlb	0	; () banked
  2579  002E0C  6FDF               	movwf	_menu& (0+255),b
  2580                           
  2581                           ;menu.c: 140: switch (menu){
  2582  002E0E  D015               	goto	l5146
  2583  002E10                     l5140:
  2584                           
  2585                           ; BSR set to: 0
  2586  002E10  0E00               	movlw	0
  2587  002E12  6E14               	movwf	dispararSensor@sensor+1,c
  2588  002E14  0E01               	movlw	1
  2589  002E16  6E13               	movwf	dispararSensor@sensor,c
  2590  002E18  ECBC  F01C         	call	_dispararSensor	;wreg free
  2591                           
  2592                           ;menu.c: 142: break;
  2593  002E1C  D01A               	goto	l5148
  2594  002E1E                     l5142:
  2595  002E1E  0E00               	movlw	0
  2596  002E20  6E14               	movwf	dispararSensor@sensor+1,c
  2597  002E22  0E02               	movlw	2
  2598  002E24  6E13               	movwf	dispararSensor@sensor,c
  2599  002E26  ECBC  F01C         	call	_dispararSensor	;wreg free
  2600                           
  2601                           ;menu.c: 144: break;
  2602  002E2A  D013               	goto	l5148
  2603  002E2C                     l5144:
  2604  002E2C  0E00               	movlw	0
  2605  002E2E  6E14               	movwf	dispararSensor@sensor+1,c
  2606  002E30  0E03               	movlw	3
  2607  002E32  6E13               	movwf	dispararSensor@sensor,c
  2608  002E34  ECBC  F01C         	call	_dispararSensor	;wreg free
  2609                           
  2610                           ;menu.c: 148: }
  2611                           
  2612                           ;menu.c: 147: default: ;
  2613                           
  2614                           ;menu.c: 146: break;
  2615  002E38  D00C               	goto	l5148
  2616  002E3A                     l5146:
  2617  002E3A  0100               	movlb	0	; () banked
  2618  002E3C  51DF               	movf	_menu& (0+255),w,b
  2619                           
  2620                           ; Switch size 1, requested type "space"
  2621                           ; Number of cases is 3, Range of values is 11 to 13
  2622                           ; switch strategies available:
  2623                           ; Name         Instructions Cycles
  2624                           ; simple_byte           10     6 (average)
  2625                           ;	Chosen strategy is simple_byte
  2626  002E3E  0A0B               	xorlw	11	; case 11
  2627  002E40  B4D8               	btfsc	status,2,c
  2628  002E42  D7E6               	goto	l5140
  2629  002E44  0A07               	xorlw	7	; case 12
  2630  002E46  B4D8               	btfsc	status,2,c
  2631  002E48  D7EA               	goto	l5142
  2632  002E4A  0A01               	xorlw	1	; case 13
  2633  002E4C  B4D8               	btfsc	status,2,c
  2634  002E4E  D7EE               	goto	l5144
  2635                           
  2636                           ; BSR set to: 0
  2637                           
  2638                           ; BSR set to: 0
  2639  002E50  D000               	goto	l5148
  2640  002E52                     l5148:
  2641                           
  2642                           ;menu.c: 149: }
  2643                           ;menu.c: 150: }
  2644                           ;menu.c: 151: menu = 18;
  2645  002E52  0E12               	movlw	18
  2646  002E54  0100               	movlb	0	; () banked
  2647  002E56  6FDF               	movwf	_menu& (0+255),b
  2648                           
  2649                           ; BSR set to: 0
  2650  002E58  0012               	return		;funcret
  2651  002E5A                     __end_of_select_menu:
  2652                           	opt stack 0
  2653                           tblptru	equ	0xFF8
  2654                           tblptrh	equ	0xFF7
  2655                           tblptrl	equ	0xFF6
  2656                           tablat	equ	0xFF5
  2657                           postinc0	equ	0xFEE
  2658                           wreg	equ	0xFE8
  2659                           postdec1	equ	0xFE5
  2660                           fsr1l	equ	0xFE1
  2661                           indf2	equ	0xFDF
  2662                           postinc2	equ	0xFDE
  2663                           postdec2	equ	0xFDD
  2664                           fsr2h	equ	0xFDA
  2665                           fsr2l	equ	0xFD9
  2666                           status	equ	0xFD8
  2667                           
  2668 ;; *************** function _ver_opcion_cambio *****************
  2669 ;; Defined at:
  2670 ;;		line 67 in file "menu.c"
  2671 ;; Parameters:    Size  Location     Type
  2672 ;;		None
  2673 ;; Auto vars:     Size  Location     Type
  2674 ;;  input           1   90[COMRAM] unsigned char 
  2675 ;;  old_correct     1   89[COMRAM] unsigned char 
  2676 ;; Return value:  Size  Location     Type
  2677 ;;		None               void
  2678 ;; Registers used:
  2679 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2680 ;; Tracked objects:
  2681 ;;		On entry : 0/0
  2682 ;;		On exit  : 0/0
  2683 ;;		Unchanged: 0/0
  2684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2686 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2688 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2689 ;;Total ram usage:        2 bytes
  2690 ;; Hardware stack levels used:    1
  2691 ;; Hardware stack levels required when called:    7
  2692 ;; This function calls:
  2693 ;;		_changePass
  2694 ;;		_clear
  2695 ;;		_clear_keyboard
  2696 ;;		_input_new_pass
  2697 ;;		_input_old_pass
  2698 ;;		_lcd_gotoxy
  2699 ;;		_lcd_putrs
  2700 ;;		_read_keyboard
  2701 ;;		_show_error
  2702 ;;		_show_success
  2703 ;; This function is called by:
  2704 ;;		_select_menu
  2705 ;; This function uses a non-reentrant model
  2706 ;;
  2707                           
  2708                           	psect	text11
  2709  002D16                     __ptext11:
  2710                           	opt stack 0
  2711  002D16                     _ver_opcion_cambio:
  2712                           	opt stack 22
  2713                           
  2714                           ;menu.c: 68: press_out = 0;
  2715                           
  2716                           ; BSR set to: 0
  2717                           ;incstack = 0
  2718  002D16  0E00               	movlw	0
  2719  002D18  0100               	movlb	0	; () banked
  2720  002D1A  6F96               	movwf	_press_out& (0+255),b
  2721                           
  2722                           ; BSR set to: 0
  2723                           ;menu.c: 69: clear();
  2724  002D1C  EC66  F01D         	call	_clear	;wreg free
  2725                           
  2726                           ;menu.c: 70: bool old_correct = 0;
  2727  002D20  0E00               	movlw	0
  2728  002D22  6E5A               	movwf	ver_opcion_cambio@old_correct,c
  2729                           
  2730                           ;menu.c: 71: lcd_gotoxy(2,1);
  2731  002D24  0E01               	movlw	1
  2732  002D26  6E05               	movwf	lcd_gotoxy@y,c
  2733  002D28  0E02               	movlw	2
  2734  002D2A  EC35  F01D         	call	_lcd_gotoxy
  2735                           
  2736                           ;menu.c: 72: lcd_putrs("Old pass:____");
  2737  002D2E  0E76               	movlw	low STR_23
  2738  002D30  6E09               	movwf	lcd_putrs@ptr,c
  2739  002D32  0E0F               	movlw	high STR_23
  2740  002D34  6E0A               	movwf	lcd_putrs@ptr+1,c
  2741  002D36  EC00  F01B         	call	_lcd_putrs	;wreg free
  2742                           
  2743                           ;menu.c: 73: lcd_gotoxy(2,2);
  2744  002D3A  0E02               	movlw	2
  2745  002D3C  6E05               	movwf	lcd_gotoxy@y,c
  2746  002D3E  0E02               	movlw	2
  2747  002D40  EC35  F01D         	call	_lcd_gotoxy
  2748                           
  2749                           ;menu.c: 74: lcd_putrs("New pass:____");
  2750  002D44  0E84               	movlw	low STR_24
  2751  002D46  6E09               	movwf	lcd_putrs@ptr,c
  2752  002D48  0E0F               	movlw	high STR_24
  2753  002D4A  6E0A               	movwf	lcd_putrs@ptr+1,c
  2754  002D4C  EC00  F01B         	call	_lcd_putrs	;wreg free
  2755                           
  2756                           ;menu.c: 75: lcd_gotoxy(11,1);
  2757  002D50  0E01               	movlw	1
  2758  002D52  6E05               	movwf	lcd_gotoxy@y,c
  2759  002D54  0E0B               	movlw	11
  2760  002D56  EC35  F01D         	call	_lcd_gotoxy
  2761                           
  2762                           ;menu.c: 76: old_correct = input_old_pass();
  2763  002D5A  EC9F  F00E         	call	_input_old_pass	;wreg free
  2764  002D5E  6E5A               	movwf	ver_opcion_cambio@old_correct,c
  2765                           
  2766                           ;menu.c: 77: lcd_gotoxy(11,2);
  2767  002D60  0E02               	movlw	2
  2768  002D62  6E05               	movwf	lcd_gotoxy@y,c
  2769  002D64  0E0B               	movlw	11
  2770  002D66  EC35  F01D         	call	_lcd_gotoxy
  2771                           
  2772                           ;menu.c: 78: input_new_pass();
  2773  002D6A  ECE5  F00D         	call	_input_new_pass	;wreg free
  2774                           
  2775                           ;menu.c: 79: char input = 0;
  2776  002D6E  0E00               	movlw	0
  2777  002D70  D002               	goto	L1
  2778  002D72                     l5038:
  2779                           
  2780                           ;menu.c: 81: input = read_keyboard();
  2781  002D72  ECF2  F007         	call	_read_keyboard	;wreg free
  2782  002D76                     L1:
  2783  002D76  6E5B               	movwf	ver_opcion_cambio@input,c
  2784  002D78  D000               	goto	l5040
  2785  002D7A                     l5040:
  2786  002D7A  0E10               	movlw	16
  2787  002D7C  185B               	xorwf	ver_opcion_cambio@input,w,c
  2788  002D7E  B4D8               	btfsc	status,2,c
  2789  002D80  D006               	goto	l5044
  2790  002D82  0100               	movlb	0	; () banked
  2791  002D84  5196               	movf	_press_out& (0+255),w,b
  2792  002D86  A4D8               	btfss	status,2,c
  2793  002D88  D002               	goto	l5044
  2794  002D8A  D7F3               	goto	l5038
  2795                           
  2796                           ; BSR set to: 0
  2797  002D8C  D000               	goto	l5044
  2798  002D8E                     l5044:
  2799                           
  2800                           ;menu.c: 82: }
  2801                           ;menu.c: 83: if (old_correct && !press_out)
  2802  002D8E  505A               	movf	ver_opcion_cambio@old_correct,w,c
  2803  002D90  B4D8               	btfsc	status,2,c
  2804  002D92  D00D               	goto	l5052
  2805  002D94  0100               	movlb	0	; () banked
  2806  002D96  5196               	movf	_press_out& (0+255),w,b
  2807  002D98  A4D8               	btfss	status,2,c
  2808  002D9A  D009               	goto	l5052
  2809                           
  2810                           ; BSR set to: 0
  2811                           ;menu.c: 84: {
  2812                           ;menu.c: 85: changePass(newpass);
  2813  002D9C  C092  F001         	movff	_newpass,changePass@pass
  2814  002DA0  C093  F002         	movff	_newpass+1,changePass@pass+1
  2815  002DA4  ECB1  F01D         	call	_changePass	;wreg free
  2816                           
  2817                           ;menu.c: 86: show_success();
  2818  002DA8  ECE1  F01B         	call	_show_success	;wreg free
  2819                           
  2820                           ;menu.c: 87: }else if(!press_out){
  2821  002DAC  D007               	goto	l5056
  2822  002DAE                     l5052:
  2823  002DAE  0100               	movlb	0	; () banked
  2824  002DB0  5196               	movf	_press_out& (0+255),w,b
  2825  002DB2  A4D8               	btfss	status,2,c
  2826  002DB4  D003               	goto	l5056
  2827                           
  2828                           ; BSR set to: 0
  2829                           ;menu.c: 88: show_error();
  2830  002DB6  EC00  F01C         	call	_show_error	;wreg free
  2831  002DBA  D000               	goto	l5056
  2832  002DBC                     l5056:
  2833                           
  2834                           ;menu.c: 89: }
  2835                           ;menu.c: 90: clear_keyboard();
  2836  002DBC  ECB6  F01D         	call	_clear_keyboard	;wreg free
  2837  002DC0  0012               	return		;funcret
  2838  002DC2                     __end_of_ver_opcion_cambio:
  2839                           	opt stack 0
  2840                           tblptru	equ	0xFF8
  2841                           tblptrh	equ	0xFF7
  2842                           tblptrl	equ	0xFF6
  2843                           tablat	equ	0xFF5
  2844                           postinc0	equ	0xFEE
  2845                           wreg	equ	0xFE8
  2846                           postdec1	equ	0xFE5
  2847                           fsr1l	equ	0xFE1
  2848                           indf2	equ	0xFDF
  2849                           postinc2	equ	0xFDE
  2850                           postdec2	equ	0xFDD
  2851                           fsr2h	equ	0xFDA
  2852                           fsr2l	equ	0xFD9
  2853                           status	equ	0xFD8
  2854                           
  2855 ;; *************** function _show_success *****************
  2856 ;; Defined at:
  2857 ;;		line 30 in file "menu.c"
  2858 ;; Parameters:    Size  Location     Type
  2859 ;;		None
  2860 ;; Auto vars:     Size  Location     Type
  2861 ;;		None
  2862 ;; Return value:  Size  Location     Type
  2863 ;;		None               void
  2864 ;; Registers used:
  2865 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2866 ;; Tracked objects:
  2867 ;;		On entry : 0/0
  2868 ;;		On exit  : 0/0
  2869 ;;		Unchanged: 0/0
  2870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2874 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2875 ;;Total ram usage:        0 bytes
  2876 ;; Hardware stack levels used:    1
  2877 ;; Hardware stack levels required when called:    5
  2878 ;; This function calls:
  2879 ;;		__delay_s
  2880 ;;		_clear
  2881 ;;		_lcd_gotoxy
  2882 ;;		_lcd_putrs
  2883 ;; This function is called by:
  2884 ;;		_ver_opcion_cambio
  2885 ;; This function uses a non-reentrant model
  2886 ;;
  2887                           
  2888                           	psect	text12
  2889  0037C2                     __ptext12:
  2890                           	opt stack 0
  2891  0037C2                     _show_success:
  2892                           	opt stack 23
  2893                           
  2894                           ;menu.c: 31: clear();
  2895                           
  2896                           ;incstack = 0
  2897  0037C2  EC66  F01D         	call	_clear	;wreg free
  2898                           
  2899                           ;menu.c: 32: lcd_gotoxy(1,1);
  2900  0037C6  0E01               	movlw	1
  2901  0037C8  6E05               	movwf	lcd_gotoxy@y,c
  2902  0037CA  0E01               	movlw	1
  2903  0037CC  EC35  F01D         	call	_lcd_gotoxy
  2904                           
  2905                           ;menu.c: 33: lcd_putrs("pass success");
  2906  0037D0  0E92               	movlw	low STR_19
  2907  0037D2  6E09               	movwf	lcd_putrs@ptr,c
  2908  0037D4  0E0F               	movlw	high STR_19
  2909  0037D6  6E0A               	movwf	lcd_putrs@ptr+1,c
  2910  0037D8  EC00  F01B         	call	_lcd_putrs	;wreg free
  2911                           
  2912                           ;menu.c: 34: lcd_gotoxy(1,2);
  2913  0037DC  0E02               	movlw	2
  2914  0037DE  6E05               	movwf	lcd_gotoxy@y,c
  2915  0037E0  0E01               	movlw	1
  2916  0037E2  EC35  F01D         	call	_lcd_gotoxy
  2917                           
  2918                           ;menu.c: 35: lcd_putrs("changed");
  2919  0037E6  0E50               	movlw	low (STR_22+8)
  2920  0037E8  6E09               	movwf	lcd_putrs@ptr,c
  2921  0037EA  0E0F               	movlw	high (STR_22+8)
  2922  0037EC  6E0A               	movwf	lcd_putrs@ptr+1,c
  2923  0037EE  EC00  F01B         	call	_lcd_putrs	;wreg free
  2924                           
  2925                           ;menu.c: 36: _delay_s(1000);
  2926  0037F2  0E03               	movlw	3
  2927  0037F4  6E0A               	movwf	__delay_s@millis+1,c
  2928  0037F6  0EE8               	movlw	232
  2929  0037F8  6E09               	movwf	__delay_s@millis,c
  2930  0037FA  ECD4  F01A         	call	__delay_s	;wreg free
  2931  0037FE  0012               	return		;funcret
  2932  003800                     __end_of_show_success:
  2933                           	opt stack 0
  2934                           tblptru	equ	0xFF8
  2935                           tblptrh	equ	0xFF7
  2936                           tblptrl	equ	0xFF6
  2937                           tablat	equ	0xFF5
  2938                           postinc0	equ	0xFEE
  2939                           wreg	equ	0xFE8
  2940                           postdec1	equ	0xFE5
  2941                           fsr1l	equ	0xFE1
  2942                           indf2	equ	0xFDF
  2943                           postinc2	equ	0xFDE
  2944                           postdec2	equ	0xFDD
  2945                           fsr2h	equ	0xFDA
  2946                           fsr2l	equ	0xFD9
  2947                           status	equ	0xFD8
  2948                           
  2949 ;; *************** function _show_error *****************
  2950 ;; Defined at:
  2951 ;;		line 39 in file "menu.c"
  2952 ;; Parameters:    Size  Location     Type
  2953 ;;		None
  2954 ;; Auto vars:     Size  Location     Type
  2955 ;;		None
  2956 ;; Return value:  Size  Location     Type
  2957 ;;		None               void
  2958 ;; Registers used:
  2959 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2960 ;; Tracked objects:
  2961 ;;		On entry : 0/0
  2962 ;;		On exit  : 0/0
  2963 ;;		Unchanged: 0/0
  2964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2968 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2969 ;;Total ram usage:        0 bytes
  2970 ;; Hardware stack levels used:    1
  2971 ;; Hardware stack levels required when called:    5
  2972 ;; This function calls:
  2973 ;;		__delay_s
  2974 ;;		_clear
  2975 ;;		_lcd_gotoxy
  2976 ;;		_lcd_putrs
  2977 ;; This function is called by:
  2978 ;;		_ver_opcion_cambio
  2979 ;; This function uses a non-reentrant model
  2980 ;;
  2981                           
  2982                           	psect	text13
  2983  003800                     __ptext13:
  2984                           	opt stack 0
  2985  003800                     _show_error:
  2986                           	opt stack 23
  2987                           
  2988                           ;menu.c: 40: clear();
  2989                           
  2990                           ;incstack = 0
  2991  003800  EC66  F01D         	call	_clear	;wreg free
  2992                           
  2993                           ;menu.c: 41: lcd_gotoxy(1,1);
  2994  003804  0E01               	movlw	1
  2995  003806  6E05               	movwf	lcd_gotoxy@y,c
  2996  003808  0E01               	movlw	1
  2997  00380A  EC35  F01D         	call	_lcd_gotoxy
  2998                           
  2999                           ;menu.c: 42: lcd_putrs("old pass wrong");
  3000  00380E  0E58               	movlw	low STR_21
  3001  003810  6E09               	movwf	lcd_putrs@ptr,c
  3002  003812  0E0F               	movlw	high STR_21
  3003  003814  6E0A               	movwf	lcd_putrs@ptr+1,c
  3004  003816  EC00  F01B         	call	_lcd_putrs	;wreg free
  3005                           
  3006                           ;menu.c: 43: lcd_gotoxy(1,2);
  3007  00381A  0E02               	movlw	2
  3008  00381C  6E05               	movwf	lcd_gotoxy@y,c
  3009  00381E  0E01               	movlw	1
  3010  003820  EC35  F01D         	call	_lcd_gotoxy
  3011                           
  3012                           ;menu.c: 44: lcd_putrs("nothing changed");
  3013  003824  0E48               	movlw	low STR_22
  3014  003826  6E09               	movwf	lcd_putrs@ptr,c
  3015  003828  0E0F               	movlw	high STR_22
  3016  00382A  6E0A               	movwf	lcd_putrs@ptr+1,c
  3017  00382C  EC00  F01B         	call	_lcd_putrs	;wreg free
  3018                           
  3019                           ;menu.c: 45: _delay_s(1000);
  3020  003830  0E03               	movlw	3
  3021  003832  6E0A               	movwf	__delay_s@millis+1,c
  3022  003834  0EE8               	movlw	232
  3023  003836  6E09               	movwf	__delay_s@millis,c
  3024  003838  ECD4  F01A         	call	__delay_s	;wreg free
  3025  00383C  0012               	return		;funcret
  3026  00383E                     __end_of_show_error:
  3027                           	opt stack 0
  3028                           tblptru	equ	0xFF8
  3029                           tblptrh	equ	0xFF7
  3030                           tblptrl	equ	0xFF6
  3031                           tablat	equ	0xFF5
  3032                           postinc0	equ	0xFEE
  3033                           wreg	equ	0xFE8
  3034                           postdec1	equ	0xFE5
  3035                           fsr1l	equ	0xFE1
  3036                           indf2	equ	0xFDF
  3037                           postinc2	equ	0xFDE
  3038                           postdec2	equ	0xFDD
  3039                           fsr2h	equ	0xFDA
  3040                           fsr2l	equ	0xFD9
  3041                           status	equ	0xFD8
  3042                           
  3043 ;; *************** function _input_old_pass *****************
  3044 ;; Defined at:
  3045 ;;		line 11 in file "menu.c"
  3046 ;; Parameters:    Size  Location     Type
  3047 ;;		None
  3048 ;; Auto vars:     Size  Location     Type
  3049 ;;  digit           2   19[BANK0 ] short 
  3050 ;;  pass            2   17[BANK0 ] int 
  3051 ;;  input           1   21[BANK0 ] unsigned char 
  3052 ;; Return value:  Size  Location     Type
  3053 ;;                  1    wreg      unsigned char 
  3054 ;; Registers used:
  3055 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3056 ;; Tracked objects:
  3057 ;;		On entry : 0/0
  3058 ;;		On exit  : 0/0
  3059 ;;		Unchanged: 0/0
  3060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3062 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3063 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3064 ;;      Totals:         2      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3065 ;;Total ram usage:       13 bytes
  3066 ;; Hardware stack levels used:    1
  3067 ;; Hardware stack levels required when called:    6
  3068 ;; This function calls:
  3069 ;;		___awtoft
  3070 ;;		___ftadd
  3071 ;;		___ftmul
  3072 ;;		___fttol
  3073 ;;		___lbtoft
  3074 ;;		__delay_s
  3075 ;;		_checkPass
  3076 ;;		_clear_keyboard
  3077 ;;		_lcd_gotoxy
  3078 ;;		_not_fill_pass
  3079 ;;		_pow
  3080 ;;		_read_keyboard
  3081 ;; This function is called by:
  3082 ;;		_ver_opcion_cambio
  3083 ;; This function uses a non-reentrant model
  3084 ;;
  3085                           
  3086                           	psect	text14
  3087  001D3E                     __ptext14:
  3088                           	opt stack 0
  3089  001D3E                     _input_old_pass:
  3090                           	opt stack 22
  3091                           
  3092                           ;menu.c: 12: short digit = 12;
  3093                           
  3094                           ;incstack = 0
  3095  001D3E  0E00               	movlw	0
  3096  001D40  0100               	movlb	0	; () banked
  3097  001D42  6FC8               	movwf	(input_old_pass@digit+1)& (0+255),b
  3098  001D44  0E0C               	movlw	12
  3099  001D46  6FC7               	movwf	input_old_pass@digit& (0+255),b
  3100                           
  3101                           ;menu.c: 13: int pass = 0;
  3102  001D48  0E00               	movlw	0
  3103  001D4A  0100               	movlb	0	; () banked
  3104  001D4C  6FC6               	movwf	(input_old_pass@pass+1)& (0+255),b
  3105  001D4E  0E00               	movlw	0
  3106  001D50  6FC5               	movwf	input_old_pass@pass& (0+255),b
  3107                           
  3108                           ; BSR set to: 0
  3109                           ;menu.c: 14: char input = read_keyboard();
  3110  001D52  ECF2  F007         	call	_read_keyboard	;wreg free
  3111  001D56  D083               	goto	L2
  3112  001D58                     l4832:
  3113                           
  3114                           ; BSR set to: 0
  3115                           ;menu.c: 16: if(0<input && input<10){
  3116  001D58  0100               	movlb	0	; () banked
  3117  001D5A  51C9               	movf	input_old_pass@input& (0+255),w,b
  3118  001D5C  0100               	movlb	0	; () banked
  3119  001D5E  B4D8               	btfsc	status,2,c
  3120  001D60  D07C               	goto	l4852
  3121                           
  3122                           ; BSR set to: 0
  3123  001D62  0E0A               	movlw	10
  3124  001D64  0100               	movlb	0	; () banked
  3125  001D66  61C9               	cpfslt	input_old_pass@input& (0+255),b
  3126  001D68  D078               	goto	l4852
  3127                           
  3128                           ; BSR set to: 0
  3129                           ;menu.c: 17: pass = pass + input * pow(10, 15 - digit);
  3130  001D6A  C0C7  F058         	movff	input_old_pass@digit,??_input_old_pass
  3131  001D6E  C0C8  F059         	movff	input_old_pass@digit+1,??_input_old_pass+1
  3132  001D72  1E58               	comf	??_input_old_pass,f,c
  3133  001D74  1E59               	comf	??_input_old_pass+1,f,c
  3134  001D76  4A58               	infsnz	??_input_old_pass,f,c
  3135  001D78  2A59               	incf	??_input_old_pass+1,f,c
  3136  001D7A  0E0F               	movlw	15
  3137  001D7C  2458               	addwf	??_input_old_pass,w,c
  3138  001D7E  6E09               	movwf	___awtoft@c,c
  3139  001D80  0E00               	movlw	0
  3140  001D82  2059               	addwfc	??_input_old_pass+1,w,c
  3141  001D84  6E0A               	movwf	___awtoft@c+1,c
  3142  001D86  EC1F  F01C         	call	___awtoft	;wreg free
  3143  001D8A  C009  F0BF         	movff	?___awtoft,_input_old_pass$3188
  3144  001D8E  C00A  F0C0         	movff	?___awtoft+1,_input_old_pass$3188+1
  3145  001D92  C00B  F0C1         	movff	?___awtoft+2,_input_old_pass$3188+2
  3146                           
  3147                           ;menu.c: 17: pass = pass + input * pow(10, 15 - digit);
  3148  001D96  C0BF  F055         	movff	_input_old_pass$3188,pow@y
  3149  001D9A  C0C0  F056         	movff	_input_old_pass$3188+1,pow@y+1
  3150  001D9E  C0C1  F057         	movff	_input_old_pass$3188+2,pow@y+2
  3151  001DA2  0E00               	movlw	0
  3152  001DA4  6E52               	movwf	pow@x,c
  3153  001DA6  0E20               	movlw	32
  3154  001DA8  6E53               	movwf	pow@x+1,c
  3155  001DAA  0E41               	movlw	65
  3156  001DAC  6E54               	movwf	pow@x+2,c
  3157  001DAE  EC24  F00D         	call	_pow	;wreg free
  3158  001DB2  C052  F0C2         	movff	?_pow,_input_old_pass$3189
  3159  001DB6  C053  F0C3         	movff	?_pow+1,_input_old_pass$3189+1
  3160  001DBA  C054  F0C4         	movff	?_pow+2,_input_old_pass$3189+2
  3161                           
  3162                           ;menu.c: 17: pass = pass + input * pow(10, 15 - digit);
  3163  001DBE  C0C2  F010         	movff	_input_old_pass$3189,___ftmul@f2
  3164  001DC2  C0C3  F011         	movff	_input_old_pass$3189+1,___ftmul@f2+1
  3165  001DC6  C0C4  F012         	movff	_input_old_pass$3189+2,___ftmul@f2+2
  3166  001DCA  0100               	movlb	0	; () banked
  3167  001DCC  51C9               	movf	input_old_pass@input& (0+255),w,b
  3168  001DCE  ECFE  F01C         	call	___lbtoft
  3169  001DD2  C009  F00D         	movff	?___lbtoft,___ftmul@f1
  3170  001DD6  C00A  F00E         	movff	?___lbtoft+1,___ftmul@f1+1
  3171  001DDA  C00B  F00F         	movff	?___lbtoft+2,___ftmul@f1+2
  3172  001DDE  EC31  F012         	call	___ftmul	;wreg free
  3173  001DE2  C00D  F01F         	movff	?___ftmul,___ftadd@f2
  3174  001DE6  C00E  F020         	movff	?___ftmul+1,___ftadd@f2+1
  3175  001DEA  C00F  F021         	movff	?___ftmul+2,___ftadd@f2+2
  3176  001DEE  C0C5  F009         	movff	input_old_pass@pass,___awtoft@c
  3177  001DF2  C0C6  F00A         	movff	input_old_pass@pass+1,___awtoft@c+1
  3178  001DF6  EC1F  F01C         	call	___awtoft	;wreg free
  3179  001DFA  C009  F01C         	movff	?___awtoft,___ftadd@f1
  3180  001DFE  C00A  F01D         	movff	?___awtoft+1,___ftadd@f1+1
  3181  001E02  C00B  F01E         	movff	?___awtoft+2,___ftadd@f1+2
  3182  001E06  EC74  F00B         	call	___ftadd	;wreg free
  3183  001E0A  C01C  F028         	movff	?___ftadd,___fttol@f1
  3184  001E0E  C01D  F029         	movff	?___ftadd+1,___fttol@f1+1
  3185  001E12  C01E  F02A         	movff	?___ftadd+2,___fttol@f1+2
  3186  001E16  ECB0  F011         	call	___fttol	;wreg free
  3187  001E1A  C028  F0C5         	movff	?___fttol,input_old_pass@pass
  3188  001E1E  C029  F0C6         	movff	?___fttol+1,input_old_pass@pass+1
  3189                           
  3190                           ;menu.c: 18: lcd_gotoxy(digit,1);
  3191  001E22  0E01               	movlw	1
  3192  001E24  6E05               	movwf	lcd_gotoxy@y,c
  3193  001E26  0100               	movlb	0	; () banked
  3194  001E28  51C7               	movf	input_old_pass@digit& (0+255),w,b
  3195  001E2A  EC35  F01D         	call	_lcd_gotoxy
  3196                           
  3197                           ;menu.c: 19: _delay_s(50);
  3198  001E2E  0E00               	movlw	0
  3199  001E30  6E0A               	movwf	__delay_s@millis+1,c
  3200  001E32  0E32               	movlw	50
  3201  001E34  6E09               	movwf	__delay_s@millis,c
  3202  001E36  ECD4  F01A         	call	__delay_s	;wreg free
  3203                           
  3204                           ;menu.c: 20: clear_keyboard();
  3205  001E3A  ECB6  F01D         	call	_clear_keyboard	;wreg free
  3206                           
  3207                           ;menu.c: 21: digit = digit +1;
  3208  001E3E  0E01               	movlw	1
  3209  001E40  0100               	movlb	0	; () banked
  3210  001E42  25C7               	addwf	input_old_pass@digit& (0+255),w,b
  3211  001E44  0100               	movlb	0	; () banked
  3212  001E46  6FC7               	movwf	input_old_pass@digit& (0+255),b
  3213  001E48  0E00               	movlw	0
  3214  001E4A  0100               	movlb	0	; () banked
  3215  001E4C  21C8               	addwfc	(input_old_pass@digit+1)& (0+255),w,b
  3216  001E4E  0100               	movlb	0	; () banked
  3217  001E50  6FC8               	movwf	(input_old_pass@digit+1)& (0+255),b
  3218                           
  3219                           ; BSR set to: 0
  3220                           ;menu.c: 22: input = 18;
  3221  001E52  0E12               	movlw	18
  3222  001E54  0100               	movlb	0	; () banked
  3223  001E56  6FC9               	movwf	input_old_pass@input& (0+255),b
  3224  001E58  D000               	goto	l4852
  3225  001E5A                     l4852:
  3226                           
  3227                           ; BSR set to: 0
  3228                           ;menu.c: 23: }
  3229                           ;menu.c: 24: input = read_keyboard();
  3230  001E5A  ECF2  F007         	call	_read_keyboard	;wreg free
  3231  001E5E                     L2:
  3232  001E5E  0100               	movlb	0	; () banked
  3233  001E60  6FC9               	movwf	input_old_pass@input& (0+255),b
  3234  001E62  D000               	goto	l4854
  3235  001E64                     l4854:
  3236                           
  3237                           ; BSR set to: 0
  3238  001E64  C0C7  F001         	movff	input_old_pass@digit,not_fill_pass@digit
  3239  001E68  C0C8  F002         	movff	input_old_pass@digit+1,not_fill_pass@digit+1
  3240  001E6C  EC71  F01D         	call	_not_fill_pass	;wreg free
  3241  001E70  0900               	iorlw	0
  3242  001E72  B4D8               	btfsc	status,2,c
  3243  001E74  D007               	goto	l4858
  3244  001E76  0E10               	movlw	16
  3245  001E78  0100               	movlb	0	; () banked
  3246  001E7A  19C9               	xorwf	input_old_pass@input& (0+255),w,b
  3247  001E7C  B4D8               	btfsc	status,2,c
  3248  001E7E  D002               	goto	l4858
  3249  001E80  D76B               	goto	l4832
  3250                           
  3251                           ; BSR set to: 0
  3252  001E82  D000               	goto	l4858
  3253  001E84                     l4858:
  3254                           
  3255                           ;menu.c: 25: }
  3256                           ;menu.c: 26: press_out = input == 16;
  3257  001E84  0E10               	movlw	16
  3258  001E86  0100               	movlb	0	; () banked
  3259  001E88  19C9               	xorwf	input_old_pass@input& (0+255),w,b
  3260  001E8A  A4D8               	btfss	status,2,c
  3261  001E8C  D002               	goto	u4570
  3262  001E8E  0E01               	movlw	1
  3263  001E90  D001               	goto	u4580
  3264  001E92                     u4570:
  3265  001E92  0E00               	movlw	0
  3266  001E94                     u4580:
  3267  001E94  0100               	movlb	0	; () banked
  3268  001E96  6F96               	movwf	_press_out& (0+255),b
  3269                           
  3270                           ; BSR set to: 0
  3271                           ;menu.c: 27: return checkPass(pass);
  3272  001E98  C0C5  F001         	movff	input_old_pass@pass,checkPass@pass
  3273  001E9C  C0C6  F002         	movff	input_old_pass@pass+1,checkPass@pass+1
  3274  001EA0  EC58  F01D         	call	_checkPass	;wreg free
  3275  001EA4  0012               	return	
  3276  001EA6  0012               	return		;funcret
  3277  001EA8                     __end_of_input_old_pass:
  3278                           	opt stack 0
  3279                           tblptru	equ	0xFF8
  3280                           tblptrh	equ	0xFF7
  3281                           tblptrl	equ	0xFF6
  3282                           tablat	equ	0xFF5
  3283                           postinc0	equ	0xFEE
  3284                           wreg	equ	0xFE8
  3285                           postdec1	equ	0xFE5
  3286                           fsr1l	equ	0xFE1
  3287                           indf2	equ	0xFDF
  3288                           postinc2	equ	0xFDE
  3289                           postdec2	equ	0xFDD
  3290                           fsr2h	equ	0xFDA
  3291                           fsr2l	equ	0xFD9
  3292                           status	equ	0xFD8
  3293                           
  3294 ;; *************** function _checkPass *****************
  3295 ;; Defined at:
  3296 ;;		line 3 in file "config.c"
  3297 ;; Parameters:    Size  Location     Type
  3298 ;;  pass            2    0[COMRAM] int 
  3299 ;; Auto vars:     Size  Location     Type
  3300 ;;		None
  3301 ;; Return value:  Size  Location     Type
  3302 ;;                  1    wreg      unsigned char 
  3303 ;; Registers used:
  3304 ;;		wreg, status,2, status,0
  3305 ;; Tracked objects:
  3306 ;;		On entry : 0/0
  3307 ;;		On exit  : 0/0
  3308 ;;		Unchanged: 0/0
  3309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3310 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3313 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3314 ;;Total ram usage:        2 bytes
  3315 ;; Hardware stack levels used:    1
  3316 ;; This function calls:
  3317 ;;		Nothing
  3318 ;; This function is called by:
  3319 ;;		_review_code
  3320 ;;		_input_old_pass
  3321 ;; This function uses a non-reentrant model
  3322 ;;
  3323                           
  3324                           	psect	text15
  3325  003AB0                     __ptext15:
  3326                           	opt stack 0
  3327  003AB0                     _checkPass:
  3328                           	opt stack 26
  3329                           
  3330                           ;config.c: 4: return password == pass;
  3331                           
  3332                           ;incstack = 0
  3333  003AB0  5001               	movf	checkPass@pass,w,c
  3334  003AB2  0100               	movlb	0	; () banked
  3335  003AB4  19DA               	xorwf	_password& (0+255),w,b
  3336  003AB6  E107               	bnz	u3610
  3337  003AB8  5002               	movf	checkPass@pass+1,w,c
  3338  003ABA  0100               	movlb	0	; () banked
  3339  003ABC  19DB               	xorwf	(_password+1)& (0+255),w,b
  3340  003ABE  A4D8               	btfss	status,2,c
  3341  003AC0  D002               	goto	u3610
  3342  003AC2  0E01               	movlw	1
  3343  003AC4  0012               	return	
  3344  003AC6                     u3610:
  3345  003AC6  0E00               	movlw	0
  3346  003AC8  0012               	return	
  3347                           
  3348                           ; BSR set to: 0
  3349                           
  3350                           ; BSR set to: 0
  3351  003ACA  0012               	return		;funcret
  3352  003ACC                     __end_of_checkPass:
  3353                           	opt stack 0
  3354                           tblptru	equ	0xFF8
  3355                           tblptrh	equ	0xFF7
  3356                           tblptrl	equ	0xFF6
  3357                           tablat	equ	0xFF5
  3358                           postinc0	equ	0xFEE
  3359                           wreg	equ	0xFE8
  3360                           postdec1	equ	0xFE5
  3361                           fsr1l	equ	0xFE1
  3362                           indf2	equ	0xFDF
  3363                           postinc2	equ	0xFDE
  3364                           postdec2	equ	0xFDD
  3365                           fsr2h	equ	0xFDA
  3366                           fsr2l	equ	0xFD9
  3367                           status	equ	0xFD8
  3368                           
  3369 ;; *************** function _input_new_pass *****************
  3370 ;; Defined at:
  3371 ;;		line 48 in file "menu.c"
  3372 ;; Parameters:    Size  Location     Type
  3373 ;;		None
  3374 ;; Auto vars:     Size  Location     Type
  3375 ;;  digit           2   18[BANK0 ] short 
  3376 ;;  input           1   20[BANK0 ] unsigned char 
  3377 ;; Return value:  Size  Location     Type
  3378 ;;		None               void
  3379 ;; Registers used:
  3380 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3381 ;; Tracked objects:
  3382 ;;		On entry : 0/0
  3383 ;;		On exit  : 0/0
  3384 ;;		Unchanged: 0/0
  3385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3387 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3388 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3389 ;;      Totals:         2      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3390 ;;Total ram usage:       12 bytes
  3391 ;; Hardware stack levels used:    1
  3392 ;; Hardware stack levels required when called:    6
  3393 ;; This function calls:
  3394 ;;		___awtoft
  3395 ;;		___ftadd
  3396 ;;		___ftmul
  3397 ;;		___fttol
  3398 ;;		___lbtoft
  3399 ;;		__delay_s
  3400 ;;		_clear_keyboard
  3401 ;;		_lcd_gotoxy
  3402 ;;		_not_fill_pass
  3403 ;;		_pow
  3404 ;;		_read_keyboard
  3405 ;; This function is called by:
  3406 ;;		_ver_opcion_cambio
  3407 ;; This function uses a non-reentrant model
  3408 ;;
  3409                           
  3410                           	psect	text16
  3411  001BCA                     __ptext16:
  3412                           	opt stack 0
  3413  001BCA                     _input_new_pass:
  3414                           	opt stack 22
  3415                           
  3416                           ;menu.c: 49: short digit = 12;
  3417                           
  3418                           ; BSR set to: 0
  3419                           ;incstack = 0
  3420  001BCA  0E00               	movlw	0
  3421  001BCC  0100               	movlb	0	; () banked
  3422  001BCE  6FC7               	movwf	(input_new_pass@digit+1)& (0+255),b
  3423  001BD0  0E0C               	movlw	12
  3424  001BD2  6FC6               	movwf	input_new_pass@digit& (0+255),b
  3425                           
  3426                           ;menu.c: 50: newpass = 0;
  3427  001BD4  0E00               	movlw	0
  3428  001BD6  0100               	movlb	0	; () banked
  3429  001BD8  6F93               	movwf	(_newpass+1)& (0+255),b
  3430  001BDA  0E00               	movlw	0
  3431  001BDC  6F92               	movwf	_newpass& (0+255),b
  3432                           
  3433                           ; BSR set to: 0
  3434                           ;menu.c: 51: char input = read_keyboard();
  3435  001BDE  ECF2  F007         	call	_read_keyboard	;wreg free
  3436  001BE2  D083               	goto	L3
  3437  001BE4                     l4884:
  3438                           
  3439                           ; BSR set to: 0
  3440                           ;menu.c: 53: if(0<input && input<10){
  3441  001BE4  0100               	movlb	0	; () banked
  3442  001BE6  51C8               	movf	input_new_pass@input& (0+255),w,b
  3443  001BE8  0100               	movlb	0	; () banked
  3444  001BEA  B4D8               	btfsc	status,2,c
  3445  001BEC  D07C               	goto	l4904
  3446                           
  3447                           ; BSR set to: 0
  3448  001BEE  0E0A               	movlw	10
  3449  001BF0  0100               	movlb	0	; () banked
  3450  001BF2  61C8               	cpfslt	input_new_pass@input& (0+255),b
  3451  001BF4  D078               	goto	l4904
  3452                           
  3453                           ; BSR set to: 0
  3454                           ;menu.c: 54: newpass = newpass + input * pow(10, 15 - digit);
  3455  001BF6  C0C6  F058         	movff	input_new_pass@digit,??_input_new_pass
  3456  001BFA  C0C7  F059         	movff	input_new_pass@digit+1,??_input_new_pass+1
  3457  001BFE  1E58               	comf	??_input_new_pass,f,c
  3458  001C00  1E59               	comf	??_input_new_pass+1,f,c
  3459  001C02  4A58               	infsnz	??_input_new_pass,f,c
  3460  001C04  2A59               	incf	??_input_new_pass+1,f,c
  3461  001C06  0E0F               	movlw	15
  3462  001C08  2458               	addwf	??_input_new_pass,w,c
  3463  001C0A  6E09               	movwf	___awtoft@c,c
  3464  001C0C  0E00               	movlw	0
  3465  001C0E  2059               	addwfc	??_input_new_pass+1,w,c
  3466  001C10  6E0A               	movwf	___awtoft@c+1,c
  3467  001C12  EC1F  F01C         	call	___awtoft	;wreg free
  3468  001C16  C009  F0BF         	movff	?___awtoft,_input_new_pass$3190
  3469  001C1A  C00A  F0C0         	movff	?___awtoft+1,_input_new_pass$3190+1
  3470  001C1E  C00B  F0C1         	movff	?___awtoft+2,_input_new_pass$3190+2
  3471                           
  3472                           ;menu.c: 54: newpass = newpass + input * pow(10, 15 - digit);
  3473  001C22  C0BF  F055         	movff	_input_new_pass$3190,pow@y
  3474  001C26  C0C0  F056         	movff	_input_new_pass$3190+1,pow@y+1
  3475  001C2A  C0C1  F057         	movff	_input_new_pass$3190+2,pow@y+2
  3476  001C2E  0E00               	movlw	0
  3477  001C30  6E52               	movwf	pow@x,c
  3478  001C32  0E20               	movlw	32
  3479  001C34  6E53               	movwf	pow@x+1,c
  3480  001C36  0E41               	movlw	65
  3481  001C38  6E54               	movwf	pow@x+2,c
  3482  001C3A  EC24  F00D         	call	_pow	;wreg free
  3483  001C3E  C052  F0C2         	movff	?_pow,_input_new_pass$3191
  3484  001C42  C053  F0C3         	movff	?_pow+1,_input_new_pass$3191+1
  3485  001C46  C054  F0C4         	movff	?_pow+2,_input_new_pass$3191+2
  3486                           
  3487                           ;menu.c: 54: newpass = newpass + input * pow(10, 15 - digit);
  3488  001C4A  C0C2  F010         	movff	_input_new_pass$3191,___ftmul@f2
  3489  001C4E  C0C3  F011         	movff	_input_new_pass$3191+1,___ftmul@f2+1
  3490  001C52  C0C4  F012         	movff	_input_new_pass$3191+2,___ftmul@f2+2
  3491  001C56  0100               	movlb	0	; () banked
  3492  001C58  51C8               	movf	input_new_pass@input& (0+255),w,b
  3493  001C5A  ECFE  F01C         	call	___lbtoft
  3494  001C5E  C009  F00D         	movff	?___lbtoft,___ftmul@f1
  3495  001C62  C00A  F00E         	movff	?___lbtoft+1,___ftmul@f1+1
  3496  001C66  C00B  F00F         	movff	?___lbtoft+2,___ftmul@f1+2
  3497  001C6A  EC31  F012         	call	___ftmul	;wreg free
  3498  001C6E  C00D  F01F         	movff	?___ftmul,___ftadd@f2
  3499  001C72  C00E  F020         	movff	?___ftmul+1,___ftadd@f2+1
  3500  001C76  C00F  F021         	movff	?___ftmul+2,___ftadd@f2+2
  3501  001C7A  C092  F009         	movff	_newpass,___awtoft@c
  3502  001C7E  C093  F00A         	movff	_newpass+1,___awtoft@c+1
  3503  001C82  EC1F  F01C         	call	___awtoft	;wreg free
  3504  001C86  C009  F01C         	movff	?___awtoft,___ftadd@f1
  3505  001C8A  C00A  F01D         	movff	?___awtoft+1,___ftadd@f1+1
  3506  001C8E  C00B  F01E         	movff	?___awtoft+2,___ftadd@f1+2
  3507  001C92  EC74  F00B         	call	___ftadd	;wreg free
  3508  001C96  C01C  F028         	movff	?___ftadd,___fttol@f1
  3509  001C9A  C01D  F029         	movff	?___ftadd+1,___fttol@f1+1
  3510  001C9E  C01E  F02A         	movff	?___ftadd+2,___fttol@f1+2
  3511  001CA2  ECB0  F011         	call	___fttol	;wreg free
  3512  001CA6  C028  F092         	movff	?___fttol,_newpass
  3513  001CAA  C029  F093         	movff	?___fttol+1,_newpass+1
  3514                           
  3515                           ;menu.c: 55: lcd_gotoxy(digit,2);
  3516  001CAE  0E02               	movlw	2
  3517  001CB0  6E05               	movwf	lcd_gotoxy@y,c
  3518  001CB2  0100               	movlb	0	; () banked
  3519  001CB4  51C6               	movf	input_new_pass@digit& (0+255),w,b
  3520  001CB6  EC35  F01D         	call	_lcd_gotoxy
  3521                           
  3522                           ;menu.c: 56: _delay_s(50);
  3523  001CBA  0E00               	movlw	0
  3524  001CBC  6E0A               	movwf	__delay_s@millis+1,c
  3525  001CBE  0E32               	movlw	50
  3526  001CC0  6E09               	movwf	__delay_s@millis,c
  3527  001CC2  ECD4  F01A         	call	__delay_s	;wreg free
  3528                           
  3529                           ;menu.c: 57: clear_keyboard();
  3530  001CC6  ECB6  F01D         	call	_clear_keyboard	;wreg free
  3531                           
  3532                           ;menu.c: 58: digit = digit +1;
  3533  001CCA  0E01               	movlw	1
  3534  001CCC  0100               	movlb	0	; () banked
  3535  001CCE  25C6               	addwf	input_new_pass@digit& (0+255),w,b
  3536  001CD0  0100               	movlb	0	; () banked
  3537  001CD2  6FC6               	movwf	input_new_pass@digit& (0+255),b
  3538  001CD4  0E00               	movlw	0
  3539  001CD6  0100               	movlb	0	; () banked
  3540  001CD8  21C7               	addwfc	(input_new_pass@digit+1)& (0+255),w,b
  3541  001CDA  0100               	movlb	0	; () banked
  3542  001CDC  6FC7               	movwf	(input_new_pass@digit+1)& (0+255),b
  3543                           
  3544                           ; BSR set to: 0
  3545                           ;menu.c: 59: input = 18;
  3546  001CDE  0E12               	movlw	18
  3547  001CE0  0100               	movlb	0	; () banked
  3548  001CE2  6FC8               	movwf	input_new_pass@input& (0+255),b
  3549  001CE4  D000               	goto	l4904
  3550  001CE6                     l4904:
  3551                           
  3552                           ; BSR set to: 0
  3553                           ;menu.c: 60: }
  3554                           ;menu.c: 61: input = read_keyboard();
  3555  001CE6  ECF2  F007         	call	_read_keyboard	;wreg free
  3556  001CEA                     L3:
  3557  001CEA  0100               	movlb	0	; () banked
  3558  001CEC  6FC8               	movwf	input_new_pass@input& (0+255),b
  3559  001CEE  D000               	goto	l4906
  3560  001CF0                     l4906:
  3561                           
  3562                           ; BSR set to: 0
  3563  001CF0  C0C6  F001         	movff	input_new_pass@digit,not_fill_pass@digit
  3564  001CF4  C0C7  F002         	movff	input_new_pass@digit+1,not_fill_pass@digit+1
  3565  001CF8  EC71  F01D         	call	_not_fill_pass	;wreg free
  3566  001CFC  0900               	iorlw	0
  3567  001CFE  B4D8               	btfsc	status,2,c
  3568  001D00  D00B               	goto	l4912
  3569  001D02  0E10               	movlw	16
  3570  001D04  0100               	movlb	0	; () banked
  3571  001D06  19C8               	xorwf	input_new_pass@input& (0+255),w,b
  3572  001D08  B4D8               	btfsc	status,2,c
  3573  001D0A  D006               	goto	l4912
  3574                           
  3575                           ; BSR set to: 0
  3576  001D0C  0100               	movlb	0	; () banked
  3577  001D0E  5196               	movf	_press_out& (0+255),w,b
  3578  001D10  A4D8               	btfss	status,2,c
  3579  001D12  D002               	goto	l4912
  3580  001D14  D767               	goto	l4884
  3581                           
  3582                           ; BSR set to: 0
  3583  001D16  D000               	goto	l4912
  3584  001D18                     l4912:
  3585                           
  3586                           ;menu.c: 63: }
  3587                           ;menu.c: 64: press_out = press_out || input == 16;
  3588  001D18  0E01               	movlw	1
  3589  001D1A  0100               	movlb	0	; () banked
  3590  001D1C  6FC5               	movwf	_input_new_pass$1567& (0+255),b
  3591  001D1E  0100               	movlb	0	; () banked
  3592  001D20  5196               	movf	_press_out& (0+255),w,b
  3593  001D22  A4D8               	btfss	status,2,c
  3594  001D24  D009               	goto	l4918
  3595                           
  3596                           ; BSR set to: 0
  3597  001D26  0E10               	movlw	16
  3598  001D28  0100               	movlb	0	; () banked
  3599  001D2A  19C8               	xorwf	input_new_pass@input& (0+255),w,b
  3600  001D2C  B4D8               	btfsc	status,2,c
  3601  001D2E  D004               	goto	l4918
  3602                           
  3603                           ; BSR set to: 0
  3604  001D30  0E00               	movlw	0
  3605  001D32  0100               	movlb	0	; () banked
  3606  001D34  6FC5               	movwf	_input_new_pass$1567& (0+255),b
  3607  001D36  D000               	goto	l4918
  3608  001D38                     l4918:
  3609                           
  3610                           ; BSR set to: 0
  3611  001D38  C0C5  F096         	movff	_input_new_pass$1567,_press_out
  3612                           
  3613                           ; BSR set to: 0
  3614  001D3C  0012               	return		;funcret
  3615  001D3E                     __end_of_input_new_pass:
  3616                           	opt stack 0
  3617                           tblptru	equ	0xFF8
  3618                           tblptrh	equ	0xFF7
  3619                           tblptrl	equ	0xFF6
  3620                           tablat	equ	0xFF5
  3621                           postinc0	equ	0xFEE
  3622                           wreg	equ	0xFE8
  3623                           postdec1	equ	0xFE5
  3624                           fsr1l	equ	0xFE1
  3625                           indf2	equ	0xFDF
  3626                           postinc2	equ	0xFDE
  3627                           postdec2	equ	0xFDD
  3628                           fsr2h	equ	0xFDA
  3629                           fsr2l	equ	0xFD9
  3630                           status	equ	0xFD8
  3631                           
  3632 ;; *************** function _pow *****************
  3633 ;; Defined at:
  3634 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\pow.c"
  3635 ;; Parameters:    Size  Location     Type
  3636 ;;  x               3   81[COMRAM] unsigned char 
  3637 ;;  y               3   84[COMRAM] unsigned char 
  3638 ;; Auto vars:     Size  Location     Type
  3639 ;;  yi              4    7[BANK0 ] unsigned long 
  3640 ;;  sign            1    6[BANK0 ] unsigned char 
  3641 ;; Return value:  Size  Location     Type
  3642 ;;                  3   81[COMRAM] unsigned char 
  3643 ;; Registers used:
  3644 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3645 ;; Tracked objects:
  3646 ;;		On entry : 0/0
  3647 ;;		On exit  : 0/0
  3648 ;;		Unchanged: 0/0
  3649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3650 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3651 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3653 ;;      Totals:         6      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3654 ;;Total ram usage:       17 bytes
  3655 ;; Hardware stack levels used:    1
  3656 ;; Hardware stack levels required when called:    4
  3657 ;; This function calls:
  3658 ;;		___ftge
  3659 ;;		___ftmul
  3660 ;;		___ftneg
  3661 ;;		___fttol
  3662 ;;		___lltoft
  3663 ;;		_exp
  3664 ;;		_log
  3665 ;; This function is called by:
  3666 ;;		_obtain_pass
  3667 ;;		_input_old_pass
  3668 ;;		_input_new_pass
  3669 ;; This function uses a non-reentrant model
  3670 ;;
  3671                           
  3672                           	psect	text17
  3673  001A48                     __ptext17:
  3674                           	opt stack 0
  3675  001A48                     _pow:
  3676                           	opt stack 22
  3677                           
  3678                           ; BSR set to: 0
  3679                           ;incstack = 0
  3680  001A48  0E00               	movlw	0
  3681  001A4A  0100               	movlb	0	; () banked
  3682  001A4C  6FBA               	movwf	pow@sign& (0+255),b
  3683                           
  3684                           ; BSR set to: 0
  3685  001A4E  5052               	movf	pow@x,w,c
  3686  001A50  1053               	iorwf	pow@x+1,w,c
  3687  001A52  1054               	iorwf	pow@x+2,w,c
  3688  001A54  A4D8               	btfss	status,2,c
  3689  001A56  D01C               	goto	l4248
  3690                           
  3691                           ; BSR set to: 0
  3692  001A58  0E00               	movlw	0
  3693  001A5A  6E01               	movwf	___ftge@ff1,c
  3694  001A5C  0E00               	movlw	0
  3695  001A5E  6E02               	movwf	___ftge@ff1+1,c
  3696  001A60  0E00               	movlw	0
  3697  001A62  6E03               	movwf	___ftge@ff1+2,c
  3698  001A64  C055  F004         	movff	pow@y,___ftge@ff2
  3699  001A68  C056  F005         	movff	pow@y+1,___ftge@ff2+1
  3700  001A6C  C057  F006         	movff	pow@y+2,___ftge@ff2+2
  3701  001A70  EC2D  F017         	call	___ftge	;wreg free
  3702  001A74  A0D8               	btfss	status,0,c
  3703  001A76  D005               	goto	l1689
  3704  001A78  0E00               	movlw	0
  3705  001A7A  0100               	movlb	0	; () banked
  3706  001A7C  6F85               	movwf	(_errno+1)& (0+255),b
  3707  001A7E  0E21               	movlw	33
  3708  001A80  6F84               	movwf	_errno& (0+255),b
  3709  001A82                     l1689:
  3710  001A82  0E00               	movlw	0
  3711  001A84  6E52               	movwf	?_pow,c
  3712  001A86  0E00               	movlw	0
  3713  001A88  6E53               	movwf	?_pow+1,c
  3714  001A8A  0E00               	movlw	0
  3715  001A8C  6E54               	movwf	?_pow+2,c
  3716  001A8E  0012               	return	
  3717  001A90                     l4248:
  3718  001A90  5055               	movf	pow@y,w,c
  3719  001A92  1056               	iorwf	pow@y+1,w,c
  3720  001A94  1057               	iorwf	pow@y+2,w,c
  3721  001A96  A4D8               	btfss	status,2,c
  3722  001A98  D007               	goto	l4254
  3723  001A9A  0E00               	movlw	0
  3724  001A9C  6E52               	movwf	?_pow,c
  3725  001A9E  0E80               	movlw	128
  3726  001AA0  6E53               	movwf	?_pow+1,c
  3727  001AA2  0E3F               	movlw	63
  3728  001AA4  6E54               	movwf	?_pow+2,c
  3729  001AA6  0012               	return	
  3730  001AA8                     l4254:
  3731  001AA8  AE54               	btfss	pow@x+2,7,c
  3732  001AAA  D044               	goto	l4266
  3733  001AAC  C055  F028         	movff	pow@y,___fttol@f1
  3734  001AB0  C056  F029         	movff	pow@y+1,___fttol@f1+1
  3735  001AB4  C057  F02A         	movff	pow@y+2,___fttol@f1+2
  3736  001AB8  ECB0  F011         	call	___fttol	;wreg free
  3737  001ABC  C028  F0BB         	movff	?___fttol,pow@yi
  3738  001AC0  C029  F0BC         	movff	?___fttol+1,pow@yi+1
  3739  001AC4  C02A  F0BD         	movff	?___fttol+2,pow@yi+2
  3740  001AC8  C02B  F0BE         	movff	?___fttol+3,pow@yi+3
  3741  001ACC  C0BB  F009         	movff	pow@yi,___lltoft@c
  3742  001AD0  C0BC  F00A         	movff	pow@yi+1,___lltoft@c+1
  3743  001AD4  C0BD  F00B         	movff	pow@yi+2,___lltoft@c+2
  3744  001AD8  C0BE  F00C         	movff	pow@yi+3,___lltoft@c+3
  3745  001ADC  EC47  F01A         	call	___lltoft	;wreg free
  3746  001AE0  5055               	movf	pow@y,w,c
  3747  001AE2  1809               	xorwf	?___lltoft,w,c
  3748  001AE4  E107               	bnz	u3670
  3749  001AE6  5056               	movf	pow@y+1,w,c
  3750  001AE8  180A               	xorwf	?___lltoft+1,w,c
  3751  001AEA  E104               	bnz	u3670
  3752  001AEC  5057               	movf	pow@y+2,w,c
  3753  001AEE  180B               	xorwf	?___lltoft+2,w,c
  3754  001AF0  B4D8               	btfsc	status,2,c
  3755  001AF2  D00C               	goto	l4262
  3756  001AF4                     u3670:
  3757  001AF4  0E00               	movlw	0
  3758  001AF6  0100               	movlb	0	; () banked
  3759  001AF8  6F85               	movwf	(_errno+1)& (0+255),b
  3760  001AFA  0E21               	movlw	33
  3761  001AFC  6F84               	movwf	_errno& (0+255),b
  3762  001AFE  0E00               	movlw	0
  3763  001B00  6E52               	movwf	?_pow,c
  3764  001B02  0E00               	movlw	0
  3765  001B04  6E53               	movwf	?_pow+1,c
  3766  001B06  0E00               	movlw	0
  3767  001B08  6E54               	movwf	?_pow+2,c
  3768                           
  3769                           ; BSR set to: 0
  3770  001B0A  0012               	return	
  3771  001B0C                     l4262:
  3772  001B0C  0100               	movlb	0	; () banked
  3773  001B0E  51BB               	movf	pow@yi& (0+255),w,b
  3774  001B10  0B01               	andlw	1
  3775  001B12  0100               	movlb	0	; () banked
  3776  001B14  6FBA               	movwf	pow@sign& (0+255),b
  3777                           
  3778                           ; BSR set to: 0
  3779  001B16  C052  F001         	movff	pow@x,___ftneg@f1
  3780  001B1A  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  3781  001B1E  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  3782  001B22  EC23  F01D         	call	___ftneg	;wreg free
  3783  001B26  C001  F052         	movff	?___ftneg,pow@x
  3784  001B2A  C002  F053         	movff	?___ftneg+1,pow@x+1
  3785  001B2E  C003  F054         	movff	?___ftneg+2,pow@x+2
  3786  001B32  D000               	goto	l4266
  3787  001B34                     l4266:
  3788  001B34  C052  F034         	movff	pow@x,log@x
  3789  001B38  C053  F035         	movff	pow@x+1,log@x+1
  3790  001B3C  C054  F036         	movff	pow@x+2,log@x+2
  3791  001B40  EC9A  F010         	call	_log	;wreg free
  3792  001B44  C034  F0B4         	movff	?_log,_pow$3192
  3793  001B48  C035  F0B5         	movff	?_log+1,_pow$3192+1
  3794  001B4C  C036  F0B6         	movff	?_log+2,_pow$3192+2
  3795  001B50  C0B4  F00D         	movff	_pow$3192,___ftmul@f1
  3796  001B54  C0B5  F00E         	movff	_pow$3192+1,___ftmul@f1+1
  3797  001B58  C0B6  F00F         	movff	_pow$3192+2,___ftmul@f1+2
  3798  001B5C  C055  F010         	movff	pow@y,___ftmul@f2
  3799  001B60  C056  F011         	movff	pow@y+1,___ftmul@f2+1
  3800  001B64  C057  F012         	movff	pow@y+2,___ftmul@f2+2
  3801  001B68  EC31  F012         	call	___ftmul	;wreg free
  3802  001B6C  C00D  F0B7         	movff	?___ftmul,_pow$3193
  3803  001B70  C00E  F0B8         	movff	?___ftmul+1,_pow$3193+1
  3804  001B74  C00F  F0B9         	movff	?___ftmul+2,_pow$3193+2
  3805  001B78  C0B7  F049         	movff	_pow$3193,exp@x
  3806  001B7C  C0B8  F04A         	movff	_pow$3193+1,exp@x+1
  3807  001B80  C0B9  F04B         	movff	_pow$3193+2,exp@x+2
  3808  001B84  EC80  F00A         	call	_exp	;wreg free
  3809  001B88  C049  F052         	movff	?_exp,pow@x
  3810  001B8C  C04A  F053         	movff	?_exp+1,pow@x+1
  3811  001B90  C04B  F054         	movff	?_exp+2,pow@x+2
  3812  001B94  0100               	movlb	0	; () banked
  3813  001B96  51BA               	movf	pow@sign& (0+255),w,b
  3814  001B98  0100               	movlb	0	; () banked
  3815  001B9A  B4D8               	btfsc	status,2,c
  3816  001B9C  D00F               	goto	l1694
  3817                           
  3818                           ; BSR set to: 0
  3819  001B9E  C052  F001         	movff	pow@x,___ftneg@f1
  3820  001BA2  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  3821  001BA6  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  3822  001BAA  EC23  F01D         	call	___ftneg	;wreg free
  3823  001BAE  C001  F052         	movff	?___ftneg,?_pow
  3824  001BB2  C002  F053         	movff	?___ftneg+1,?_pow+1
  3825  001BB6  C003  F054         	movff	?___ftneg+2,?_pow+2
  3826  001BBA  0012               	return	
  3827  001BBC                     l1694:
  3828                           
  3829                           ; BSR set to: 0
  3830  001BBC  C052  F052         	movff	pow@x,?_pow
  3831  001BC0  C053  F053         	movff	pow@x+1,?_pow+1
  3832  001BC4  C054  F054         	movff	pow@x+2,?_pow+2
  3833  001BC8  0012               	return		;funcret
  3834  001BCA                     __end_of_pow:
  3835                           	opt stack 0
  3836                           tblptru	equ	0xFF8
  3837                           tblptrh	equ	0xFF7
  3838                           tblptrl	equ	0xFF6
  3839                           tablat	equ	0xFF5
  3840                           postinc0	equ	0xFEE
  3841                           wreg	equ	0xFE8
  3842                           postdec1	equ	0xFE5
  3843                           fsr1l	equ	0xFE1
  3844                           indf2	equ	0xFDF
  3845                           postinc2	equ	0xFDE
  3846                           postdec2	equ	0xFDD
  3847                           fsr2h	equ	0xFDA
  3848                           fsr2l	equ	0xFD9
  3849                           status	equ	0xFD8
  3850                           
  3851 ;; *************** function _log *****************
  3852 ;; Defined at:
  3853 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\log.c"
  3854 ;; Parameters:    Size  Location     Type
  3855 ;;  x               3   51[COMRAM] unsigned char 
  3856 ;; Auto vars:     Size  Location     Type
  3857 ;;  exponent        2   54[COMRAM] int 
  3858 ;; Return value:  Size  Location     Type
  3859 ;;                  3   51[COMRAM] int 
  3860 ;; Registers used:
  3861 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3862 ;; Tracked objects:
  3863 ;;		On entry : 0/0
  3864 ;;		On exit  : 0/0
  3865 ;;		Unchanged: 0/0
  3866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3867 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3868 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3870 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3871 ;;Total ram usage:        5 bytes
  3872 ;; Hardware stack levels used:    1
  3873 ;; Hardware stack levels required when called:    3
  3874 ;; This function calls:
  3875 ;;		___awtoft
  3876 ;;		___ftadd
  3877 ;;		___ftmul
  3878 ;;		_eval_poly
  3879 ;;		_frexp
  3880 ;; This function is called by:
  3881 ;;		_pow
  3882 ;; This function uses a non-reentrant model
  3883 ;;
  3884                           
  3885                           	psect	text18
  3886  002134                     __ptext18:
  3887                           	opt stack 0
  3888  002134                     _log:
  3889                           	opt stack 22
  3890                           
  3891                           ;incstack = 0
  3892  002134  AE36               	btfss	log@x+2,7,c
  3893  002136  D00C               	goto	l4052
  3894  002138  0E00               	movlw	0
  3895  00213A  0100               	movlb	0	; () banked
  3896  00213C  6F85               	movwf	(_errno+1)& (0+255),b
  3897  00213E  0E21               	movlw	33
  3898  002140  6F84               	movwf	_errno& (0+255),b
  3899  002142  0E00               	movlw	0
  3900  002144  6E34               	movwf	?_log,c
  3901  002146  0E00               	movlw	0
  3902  002148  6E35               	movwf	?_log+1,c
  3903  00214A  0E00               	movlw	0
  3904  00214C  6E36               	movwf	?_log+2,c
  3905                           
  3906                           ; BSR set to: 0
  3907  00214E  0012               	return	
  3908  002150                     l4052:
  3909  002150  5034               	movf	log@x,w,c
  3910  002152  1035               	iorwf	log@x+1,w,c
  3911  002154  1036               	iorwf	log@x+2,w,c
  3912  002156  A4D8               	btfss	status,2,c
  3913  002158  D00C               	goto	l4058
  3914  00215A  0E00               	movlw	0
  3915  00215C  0100               	movlb	0	; () banked
  3916  00215E  6F85               	movwf	(_errno+1)& (0+255),b
  3917  002160  0E22               	movlw	34
  3918  002162  6F84               	movwf	_errno& (0+255),b
  3919  002164  0E00               	movlw	0
  3920  002166  6E34               	movwf	?_log,c
  3921  002168  0E00               	movlw	0
  3922  00216A  6E35               	movwf	?_log+1,c
  3923  00216C  0E00               	movlw	0
  3924  00216E  6E36               	movwf	?_log+2,c
  3925                           
  3926                           ; BSR set to: 0
  3927  002170  0012               	return	
  3928  002172                     l4058:
  3929  002172  0E00               	movlw	0
  3930  002174  6E10               	movwf	___ftmul@f2,c
  3931  002176  0E00               	movlw	0
  3932  002178  6E11               	movwf	___ftmul@f2+1,c
  3933  00217A  0E40               	movlw	64
  3934  00217C  6E12               	movwf	___ftmul@f2+2,c
  3935  00217E  0E37               	movlw	low log@exponent
  3936  002180  6E04               	movwf	frexp@eptr,c
  3937  002182  0E00               	movlw	high log@exponent
  3938  002184  6E05               	movwf	frexp@eptr+1,c
  3939  002186  C034  F001         	movff	log@x,frexp@value
  3940  00218A  C035  F002         	movff	log@x+1,frexp@value+1
  3941  00218E  C036  F003         	movff	log@x+2,frexp@value+2
  3942  002192  ECC3  F017         	call	_frexp	;wreg free
  3943  002196  C001  F00D         	movff	?_frexp,___ftmul@f1
  3944  00219A  C002  F00E         	movff	?_frexp+1,___ftmul@f1+1
  3945  00219E  C003  F00F         	movff	?_frexp+2,___ftmul@f1+2
  3946  0021A2  EC31  F012         	call	___ftmul	;wreg free
  3947  0021A6  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  3948  0021AA  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  3949  0021AE  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  3950  0021B2  0E00               	movlw	0
  3951  0021B4  6E1F               	movwf	___ftadd@f2,c
  3952  0021B6  0E80               	movlw	128
  3953  0021B8  6E20               	movwf	___ftadd@f2+1,c
  3954  0021BA  0EBF               	movlw	191
  3955  0021BC  6E21               	movwf	___ftadd@f2+2,c
  3956  0021BE  EC74  F00B         	call	___ftadd	;wreg free
  3957  0021C2  C01C  F034         	movff	?___ftadd,log@x
  3958  0021C6  C01D  F035         	movff	?___ftadd+1,log@x+1
  3959  0021CA  C01E  F036         	movff	?___ftadd+2,log@x+2
  3960  0021CE  0637               	decf	log@exponent,f,c
  3961  0021D0  A0D8               	btfss	status,0,c
  3962  0021D2  0638               	decf	log@exponent+1,f,c
  3963  0021D4  C034  F028         	movff	log@x,eval_poly@x
  3964  0021D8  C035  F029         	movff	log@x+1,eval_poly@x+1
  3965  0021DC  C036  F02A         	movff	log@x+2,eval_poly@x+2
  3966  0021E0  0E2D               	movlw	low log@coeff
  3967  0021E2  6E2B               	movwf	eval_poly@d,c
  3968  0021E4  0E0F               	movlw	high log@coeff
  3969  0021E6  6E2C               	movwf	eval_poly@d+1,c
  3970  0021E8  0E00               	movlw	0
  3971  0021EA  6E2E               	movwf	eval_poly@n+1,c
  3972  0021EC  0E08               	movlw	8
  3973  0021EE  6E2D               	movwf	eval_poly@n,c
  3974  0021F0  EC57  F015         	call	_eval_poly	;wreg free
  3975  0021F4  C028  F034         	movff	?_eval_poly,log@x
  3976  0021F8  C029  F035         	movff	?_eval_poly+1,log@x+1
  3977  0021FC  C02A  F036         	movff	?_eval_poly+2,log@x+2
  3978  002200  0E72               	movlw	114
  3979  002202  6E10               	movwf	___ftmul@f2,c
  3980  002204  0E31               	movlw	49
  3981  002206  6E11               	movwf	___ftmul@f2+1,c
  3982  002208  0E3F               	movlw	63
  3983  00220A  6E12               	movwf	___ftmul@f2+2,c
  3984  00220C  C037  F009         	movff	log@exponent,___awtoft@c
  3985  002210  C038  F00A         	movff	log@exponent+1,___awtoft@c+1
  3986  002214  EC1F  F01C         	call	___awtoft	;wreg free
  3987  002218  C009  F00D         	movff	?___awtoft,___ftmul@f1
  3988  00221C  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  3989  002220  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  3990  002224  EC31  F012         	call	___ftmul	;wreg free
  3991  002228  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  3992  00222C  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  3993  002230  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  3994  002234  C034  F01F         	movff	log@x,___ftadd@f2
  3995  002238  C035  F020         	movff	log@x+1,___ftadd@f2+1
  3996  00223C  C036  F021         	movff	log@x+2,___ftadd@f2+2
  3997  002240  EC74  F00B         	call	___ftadd	;wreg free
  3998  002244  C01C  F034         	movff	?___ftadd,?_log
  3999  002248  C01D  F035         	movff	?___ftadd+1,?_log+1
  4000  00224C  C01E  F036         	movff	?___ftadd+2,?_log+2
  4001  002250  0012               	return	
  4002  002252  0012               	return		;funcret
  4003  002254                     __end_of_log:
  4004                           	opt stack 0
  4005                           tblptru	equ	0xFF8
  4006                           tblptrh	equ	0xFF7
  4007                           tblptrl	equ	0xFF6
  4008                           tablat	equ	0xFF5
  4009                           postinc0	equ	0xFEE
  4010                           wreg	equ	0xFE8
  4011                           postdec1	equ	0xFE5
  4012                           fsr1l	equ	0xFE1
  4013                           indf2	equ	0xFDF
  4014                           postinc2	equ	0xFDE
  4015                           postdec2	equ	0xFDD
  4016                           fsr2h	equ	0xFDA
  4017                           fsr2l	equ	0xFD9
  4018                           status	equ	0xFD8
  4019                           
  4020 ;; *************** function _exp *****************
  4021 ;; Defined at:
  4022 ;;		line 12 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\exp.c"
  4023 ;; Parameters:    Size  Location     Type
  4024 ;;  x               3   72[COMRAM] int 
  4025 ;; Auto vars:     Size  Location     Type
  4026 ;;  exponent        2   78[COMRAM] int 
  4027 ;;  sign            1   80[COMRAM] unsigned char 
  4028 ;; Return value:  Size  Location     Type
  4029 ;;                  3   72[COMRAM] unsigned char 
  4030 ;; Registers used:
  4031 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4032 ;; Tracked objects:
  4033 ;;		On entry : 0/0
  4034 ;;		On exit  : 0/0
  4035 ;;		Unchanged: 0/0
  4036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4037 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4038 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4040 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4041 ;;Total ram usage:        9 bytes
  4042 ;; Hardware stack levels used:    1
  4043 ;; Hardware stack levels required when called:    3
  4044 ;; This function calls:
  4045 ;;		___awtoft
  4046 ;;		___ftdiv
  4047 ;;		___ftge
  4048 ;;		___ftmul
  4049 ;;		___ftneg
  4050 ;;		___ftsub
  4051 ;;		___fttol
  4052 ;;		_eval_poly
  4053 ;;		_floor
  4054 ;;		_ldexp
  4055 ;; This function is called by:
  4056 ;;		_pow
  4057 ;; This function uses a non-reentrant model
  4058 ;;
  4059                           
  4060                           	psect	text19
  4061  001500                     __ptext19:
  4062                           	opt stack 0
  4063  001500                     _exp:
  4064                           	opt stack 22
  4065                           
  4066                           ;incstack = 0
  4067  001500  5049               	movf	exp@x,w,c
  4068  001502  104A               	iorwf	exp@x+1,w,c
  4069  001504  104B               	iorwf	exp@x+2,w,c
  4070  001506  A4D8               	btfss	status,2,c
  4071  001508  D007               	goto	l4074
  4072  00150A  0E00               	movlw	0
  4073  00150C  6E49               	movwf	?_exp,c
  4074  00150E  0E80               	movlw	128
  4075  001510  6E4A               	movwf	?_exp+1,c
  4076  001512  0E3F               	movlw	63
  4077  001514  6E4B               	movwf	?_exp+2,c
  4078  001516  0012               	return	
  4079  001518                     l4074:
  4080  001518  0E72               	movlw	114
  4081  00151A  6E01               	movwf	___ftge@ff1,c
  4082  00151C  0E31               	movlw	49
  4083  00151E  6E02               	movwf	___ftge@ff1+1,c
  4084  001520  0E44               	movlw	68
  4085  001522  6E03               	movwf	___ftge@ff1+2,c
  4086  001524  C049  F004         	movff	exp@x,___ftge@ff2
  4087  001528  C04A  F005         	movff	exp@x+1,___ftge@ff2+1
  4088  00152C  C04B  F006         	movff	exp@x+2,___ftge@ff2+2
  4089  001530  EC2D  F017         	call	___ftge	;wreg free
  4090  001534  B0D8               	btfsc	status,0,c
  4091  001536  D00C               	goto	l4080
  4092  001538  0E00               	movlw	0
  4093  00153A  0100               	movlb	0	; () banked
  4094  00153C  6F85               	movwf	(_errno+1)& (0+255),b
  4095  00153E  0E22               	movlw	34
  4096  001540  6F84               	movwf	_errno& (0+255),b
  4097  001542  0EFF               	movlw	255
  4098  001544  6E49               	movwf	?_exp,c
  4099  001546  0E7F               	movlw	127
  4100  001548  6E4A               	movwf	?_exp+1,c
  4101  00154A  0E7F               	movlw	127
  4102  00154C  6E4B               	movwf	?_exp+2,c
  4103                           
  4104                           ; BSR set to: 0
  4105  00154E  0012               	return	
  4106  001550                     l4080:
  4107  001550  C049  F001         	movff	exp@x,___ftge@ff1
  4108  001554  C04A  F002         	movff	exp@x+1,___ftge@ff1+1
  4109  001558  C04B  F003         	movff	exp@x+2,___ftge@ff1+2
  4110  00155C  0E49               	movlw	73
  4111  00155E  6E04               	movwf	___ftge@ff2,c
  4112  001560  0E3A               	movlw	58
  4113  001562  6E05               	movwf	___ftge@ff2+1,c
  4114  001564  0EC4               	movlw	196
  4115  001566  6E06               	movwf	___ftge@ff2+2,c
  4116  001568  EC2D  F017         	call	___ftge	;wreg free
  4117  00156C  B0D8               	btfsc	status,0,c
  4118  00156E  D00C               	goto	l4086
  4119  001570  0E00               	movlw	0
  4120  001572  0100               	movlb	0	; () banked
  4121  001574  6F85               	movwf	(_errno+1)& (0+255),b
  4122  001576  0E22               	movlw	34
  4123  001578  6F84               	movwf	_errno& (0+255),b
  4124  00157A  0E00               	movlw	0
  4125  00157C  6E49               	movwf	?_exp,c
  4126  00157E  0E00               	movlw	0
  4127  001580  6E4A               	movwf	?_exp+1,c
  4128  001582  0E00               	movlw	0
  4129  001584  6E4B               	movwf	?_exp+2,c
  4130                           
  4131                           ; BSR set to: 0
  4132  001586  0012               	return	
  4133  001588                     l4086:
  4134  001588  AE4B               	btfss	exp@x+2,7,c
  4135  00158A  D002               	goto	u3390
  4136  00158C  0E01               	movlw	1
  4137  00158E  D001               	goto	u3400
  4138  001590                     u3390:
  4139  001590  0E00               	movlw	0
  4140  001592                     u3400:
  4141  001592  6E51               	movwf	exp@sign,c
  4142  001594  5051               	movf	exp@sign,w,c
  4143  001596  B4D8               	btfsc	status,2,c
  4144  001598  D00E               	goto	l1713
  4145  00159A  C049  F001         	movff	exp@x,___ftneg@f1
  4146  00159E  C04A  F002         	movff	exp@x+1,___ftneg@f1+1
  4147  0015A2  C04B  F003         	movff	exp@x+2,___ftneg@f1+2
  4148  0015A6  EC23  F01D         	call	___ftneg	;wreg free
  4149  0015AA  C001  F049         	movff	?___ftneg,exp@x
  4150  0015AE  C002  F04A         	movff	?___ftneg+1,exp@x+1
  4151  0015B2  C003  F04B         	movff	?___ftneg+2,exp@x+2
  4152  0015B6                     l1713:
  4153  0015B6  C049  F00D         	movff	exp@x,___ftmul@f1
  4154  0015BA  C04A  F00E         	movff	exp@x+1,___ftmul@f1+1
  4155  0015BE  C04B  F00F         	movff	exp@x+2,___ftmul@f1+2
  4156  0015C2  0EAA               	movlw	170
  4157  0015C4  6E10               	movwf	___ftmul@f2,c
  4158  0015C6  0EB8               	movlw	184
  4159  0015C8  6E11               	movwf	___ftmul@f2+1,c
  4160  0015CA  0E3F               	movlw	63
  4161  0015CC  6E12               	movwf	___ftmul@f2+2,c
  4162  0015CE  EC31  F012         	call	___ftmul	;wreg free
  4163  0015D2  C00D  F049         	movff	?___ftmul,exp@x
  4164  0015D6  C00E  F04A         	movff	?___ftmul+1,exp@x+1
  4165  0015DA  C00F  F04B         	movff	?___ftmul+2,exp@x+2
  4166  0015DE  C049  F041         	movff	exp@x,floor@x
  4167  0015E2  C04A  F042         	movff	exp@x+1,floor@x+1
  4168  0015E6  C04B  F043         	movff	exp@x+2,floor@x+2
  4169  0015EA  EC0F  F014         	call	_floor	;wreg free
  4170  0015EE  C041  F04C         	movff	?_floor,_exp$3194
  4171  0015F2  C042  F04D         	movff	?_floor+1,_exp$3194+1
  4172  0015F6  C043  F04E         	movff	?_floor+2,_exp$3194+2
  4173  0015FA  C04C  F028         	movff	_exp$3194,___fttol@f1
  4174  0015FE  C04D  F029         	movff	_exp$3194+1,___fttol@f1+1
  4175  001602  C04E  F02A         	movff	_exp$3194+2,___fttol@f1+2
  4176  001606  ECB0  F011         	call	___fttol	;wreg free
  4177  00160A  C028  F04F         	movff	?___fttol,exp@exponent
  4178  00160E  C029  F050         	movff	?___fttol+1,exp@exponent+1
  4179  001612  C049  F028         	movff	exp@x,___ftsub@f1
  4180  001616  C04A  F029         	movff	exp@x+1,___ftsub@f1+1
  4181  00161A  C04B  F02A         	movff	exp@x+2,___ftsub@f1+2
  4182  00161E  C04F  F009         	movff	exp@exponent,___awtoft@c
  4183  001622  C050  F00A         	movff	exp@exponent+1,___awtoft@c+1
  4184  001626  EC1F  F01C         	call	___awtoft	;wreg free
  4185  00162A  C009  F02B         	movff	?___awtoft,___ftsub@f2
  4186  00162E  C00A  F02C         	movff	?___awtoft+1,___ftsub@f2+1
  4187  001632  C00B  F02D         	movff	?___awtoft+2,___ftsub@f2+2
  4188  001636  ECBF  F01B         	call	___ftsub	;wreg free
  4189  00163A  C028  F049         	movff	?___ftsub,exp@x
  4190  00163E  C029  F04A         	movff	?___ftsub+1,exp@x+1
  4191  001642  C02A  F04B         	movff	?___ftsub+2,exp@x+2
  4192  001646  C049  F028         	movff	exp@x,eval_poly@x
  4193  00164A  C04A  F029         	movff	exp@x+1,eval_poly@x+1
  4194  00164E  C04B  F02A         	movff	exp@x+2,eval_poly@x+2
  4195  001652  0E0F               	movlw	low exp@coeff
  4196  001654  6E2B               	movwf	eval_poly@d,c
  4197  001656  0E0F               	movlw	high exp@coeff
  4198  001658  6E2C               	movwf	eval_poly@d+1,c
  4199  00165A  0E00               	movlw	0
  4200  00165C  6E2E               	movwf	eval_poly@n+1,c
  4201  00165E  0E09               	movlw	9
  4202  001660  6E2D               	movwf	eval_poly@n,c
  4203  001662  EC57  F015         	call	_eval_poly	;wreg free
  4204  001666  C028  F034         	movff	?_eval_poly,ldexp@value
  4205  00166A  C029  F035         	movff	?_eval_poly+1,ldexp@value+1
  4206  00166E  C02A  F036         	movff	?_eval_poly+2,ldexp@value+2
  4207  001672  C04F  F037         	movff	exp@exponent,ldexp@newexp
  4208  001676  C050  F038         	movff	exp@exponent+1,ldexp@newexp+1
  4209  00167A  ECED  F014         	call	_ldexp	;wreg free
  4210  00167E  C034  F049         	movff	?_ldexp,exp@x
  4211  001682  C035  F04A         	movff	?_ldexp+1,exp@x+1
  4212  001686  C036  F04B         	movff	?_ldexp+2,exp@x+2
  4213  00168A  5051               	movf	exp@sign,w,c
  4214  00168C  B4D8               	btfsc	status,2,c
  4215  00168E  D025               	goto	l1714
  4216  001690  2849               	incf	exp@x,w,c
  4217  001692  E10E               	bnz	l4108
  4218  001694  0E7F               	movlw	127
  4219  001696  184A               	xorwf	exp@x+1,w,c
  4220  001698  E10B               	bnz	l4108
  4221  00169A  0E7F               	movlw	127
  4222  00169C  184B               	xorwf	exp@x+2,w,c
  4223  00169E  A4D8               	btfss	status,2,c
  4224  0016A0  D007               	goto	l4108
  4225  0016A2  0E00               	movlw	0
  4226  0016A4  6E49               	movwf	?_exp,c
  4227  0016A6  0E00               	movlw	0
  4228  0016A8  6E4A               	movwf	?_exp+1,c
  4229  0016AA  0E00               	movlw	0
  4230  0016AC  6E4B               	movwf	?_exp+2,c
  4231  0016AE  0012               	return	
  4232  0016B0                     l4108:
  4233  0016B0  0E00               	movlw	0
  4234  0016B2  6E09               	movwf	___ftdiv@f1,c
  4235  0016B4  0E80               	movlw	128
  4236  0016B6  6E0A               	movwf	___ftdiv@f1+1,c
  4237  0016B8  0E3F               	movlw	63
  4238  0016BA  6E0B               	movwf	___ftdiv@f1+2,c
  4239  0016BC  C049  F00C         	movff	exp@x,___ftdiv@f2
  4240  0016C0  C04A  F00D         	movff	exp@x+1,___ftdiv@f2+1
  4241  0016C4  C04B  F00E         	movff	exp@x+2,___ftdiv@f2+2
  4242  0016C8  EC28  F013         	call	___ftdiv	;wreg free
  4243  0016CC  C009  F049         	movff	?___ftdiv,?_exp
  4244  0016D0  C00A  F04A         	movff	?___ftdiv+1,?_exp+1
  4245  0016D4  C00B  F04B         	movff	?___ftdiv+2,?_exp+2
  4246  0016D8  0012               	return	
  4247  0016DA                     l1714:
  4248  0016DA  C049  F049         	movff	exp@x,?_exp
  4249  0016DE  C04A  F04A         	movff	exp@x+1,?_exp+1
  4250  0016E2  C04B  F04B         	movff	exp@x+2,?_exp+2
  4251  0016E6  0012               	return		;funcret
  4252  0016E8                     __end_of_exp:
  4253                           	opt stack 0
  4254                           tblptru	equ	0xFF8
  4255                           tblptrh	equ	0xFF7
  4256                           tblptrl	equ	0xFF6
  4257                           tablat	equ	0xFF5
  4258                           postinc0	equ	0xFEE
  4259                           wreg	equ	0xFE8
  4260                           postdec1	equ	0xFE5
  4261                           fsr1l	equ	0xFE1
  4262                           indf2	equ	0xFDF
  4263                           postinc2	equ	0xFDE
  4264                           postdec2	equ	0xFDD
  4265                           fsr2h	equ	0xFDA
  4266                           fsr2l	equ	0xFD9
  4267                           status	equ	0xFD8
  4268                           
  4269 ;; *************** function _ldexp *****************
  4270 ;; Defined at:
  4271 ;;		line 277 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\frexp.c"
  4272 ;; Parameters:    Size  Location     Type
  4273 ;;  value           3   51[COMRAM] unsigned char 
  4274 ;;  newexp          2   54[COMRAM] int 
  4275 ;; Auto vars:     Size  Location     Type
  4276 ;;		None
  4277 ;; Return value:  Size  Location     Type
  4278 ;;                  3   51[COMRAM] int 
  4279 ;; Registers used:
  4280 ;;		wreg, status,2, status,0
  4281 ;; Tracked objects:
  4282 ;;		On entry : 0/0
  4283 ;;		On exit  : 0/0
  4284 ;;		Unchanged: 0/0
  4285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4286 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4288 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4289 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4290 ;;Total ram usage:        7 bytes
  4291 ;; Hardware stack levels used:    1
  4292 ;; This function calls:
  4293 ;;		Nothing
  4294 ;; This function is called by:
  4295 ;;		_exp
  4296 ;; This function uses a non-reentrant model
  4297 ;;
  4298                           
  4299                           	psect	text20
  4300  0029DA                     __ptext20:
  4301                           	opt stack 0
  4302  0029DA                     _ldexp:
  4303                           	opt stack 24
  4304                           
  4305                           ;incstack = 0
  4306  0029DA  5034               	movf	ldexp@value,w,c
  4307  0029DC  1035               	iorwf	ldexp@value+1,w,c
  4308  0029DE  1036               	iorwf	ldexp@value+2,w,c
  4309  0029E0  A4D8               	btfss	status,2,c
  4310  0029E2  D007               	goto	l3932
  4311  0029E4  0E00               	movlw	0
  4312  0029E6  6E34               	movwf	?_ldexp,c
  4313  0029E8  0E00               	movlw	0
  4314  0029EA  6E35               	movwf	?_ldexp+1,c
  4315  0029EC  0E00               	movlw	0
  4316  0029EE  6E36               	movwf	?_ldexp+2,c
  4317  0029F0  0012               	return	
  4318  0029F2                     l3932:
  4319  0029F2  5036               	movf	ldexp@value+2,w,c
  4320  0029F4  0B7F               	andlw	127
  4321  0029F6  6E39               	movwf	??_ldexp& (0+255),c
  4322  0029F8  6A3A               	clrf	(??_ldexp+1)& (0+255),c
  4323  0029FA  90D8               	bcf	status,0,c
  4324  0029FC  3639               	rlcf	??_ldexp,f,c
  4325  0029FE  363A               	rlcf	??_ldexp+1,f,c
  4326  002A00  5039               	movf	??_ldexp,w,c
  4327  002A02  2637               	addwf	ldexp@newexp,f,c
  4328  002A04  503A               	movf	??_ldexp+1,w,c
  4329  002A06  2238               	addwfc	ldexp@newexp+1,f,c
  4330  002A08  AE35               	btfss	ldexp@value+1,7,c
  4331  002A0A  D003               	goto	u3210
  4332  002A0C  6A39               	clrf	??_ldexp& (0+255),c
  4333  002A0E  2A39               	incf	??_ldexp& (0+255),f,c
  4334  002A10  D001               	goto	u3218
  4335  002A12                     u3210:
  4336  002A12  6A39               	clrf	??_ldexp& (0+255),c
  4337  002A14                     u3218:
  4338  002A14  5039               	movf	??_ldexp,w,c
  4339  002A16  2637               	addwf	ldexp@newexp,f,c
  4340  002A18  0E00               	movlw	0
  4341  002A1A  2238               	addwfc	ldexp@newexp+1,f,c
  4342  002A1C  AE38               	btfss	ldexp@newexp+1,7,c
  4343  002A1E  D00D               	goto	l3940
  4344  002A20  0E00               	movlw	0
  4345  002A22  0100               	movlb	0	; () banked
  4346  002A24  6F85               	movwf	(_errno+1)& (0+255),b
  4347  002A26  0E22               	movlw	34
  4348  002A28  6F84               	movwf	_errno& (0+255),b
  4349  002A2A  0E00               	movlw	0
  4350  002A2C  6E34               	movwf	?_ldexp,c
  4351  002A2E  0E00               	movlw	0
  4352  002A30  6E35               	movwf	?_ldexp+1,c
  4353  002A32  0E00               	movlw	0
  4354  002A34                     L4:
  4355  002A34  6E36               	movwf	?_ldexp+2,c
  4356                           
  4357                           ; BSR set to: 0
  4358  002A36  0012               	return	
  4359                           
  4360                           ; BSR set to: 0
  4361  002A38  D032               	goto	l3958
  4362  002A3A                     l3940:
  4363  002A3A  BE38               	btfsc	ldexp@newexp+1,7,c
  4364  002A3C  D01A               	goto	l3956
  4365  002A3E  0438               	decf	ldexp@newexp+1,w,c
  4366  002A40  A0D8               	btfss	status,0,c
  4367  002A42  D017               	goto	l3956
  4368  002A44  0E00               	movlw	0
  4369  002A46  0100               	movlb	0	; () banked
  4370  002A48  6F85               	movwf	(_errno+1)& (0+255),b
  4371  002A4A  0E22               	movlw	34
  4372  002A4C  6F84               	movwf	_errno& (0+255),b
  4373                           
  4374                           ; BSR set to: 0
  4375  002A4E  AE36               	btfss	ldexp@value+2,7,c
  4376  002A50  D008               	goto	l3952
  4377                           
  4378                           ; BSR set to: 0
  4379  002A52  0EFF               	movlw	255
  4380  002A54  6E34               	movwf	?_ldexp,c
  4381  002A56  0E7F               	movlw	127
  4382  002A58  6E35               	movwf	?_ldexp+1,c
  4383  002A5A  0EFF               	movlw	255
  4384  002A5C  D7EB               	goto	L4
  4385                           
  4386                           ; BSR set to: 0
  4387  002A5E  0012               	return	
  4388                           
  4389                           ; BSR set to: 0
  4390  002A60  D01E               	goto	l3958
  4391  002A62                     l3952:
  4392                           
  4393                           ; BSR set to: 0
  4394  002A62  0EFF               	movlw	255
  4395  002A64  6E34               	movwf	?_ldexp,c
  4396  002A66  0E7F               	movlw	127
  4397  002A68  6E35               	movwf	?_ldexp+1,c
  4398  002A6A  0E7F               	movlw	127
  4399  002A6C  D7E3               	goto	L4
  4400                           
  4401                           ; BSR set to: 0
  4402  002A6E  0012               	return	
  4403                           
  4404                           ; BSR set to: 0
  4405  002A70  D016               	goto	l3958
  4406  002A72                     l3956:
  4407  002A72  3438               	rlcf	ldexp@newexp+1,w,c
  4408  002A74  3038               	rrcf	ldexp@newexp+1,w,c
  4409  002A76  6E3A               	movwf	(??_ldexp+1)& (0+255),c
  4410  002A78  3037               	rrcf	ldexp@newexp,w,c
  4411  002A7A  6E39               	movwf	??_ldexp& (0+255),c
  4412  002A7C  5036               	movf	ldexp@value+2,w,c
  4413  002A7E  1839               	xorwf	??_ldexp,w,c
  4414  002A80  0B80               	andlw	-128
  4415  002A82  1839               	xorwf	??_ldexp,w,c
  4416  002A84  6E36               	movwf	ldexp@value+2,c
  4417  002A86  C037  F039         	movff	ldexp@newexp,??_ldexp
  4418  002A8A  0E01               	movlw	1
  4419  002A8C  1639               	andwf	??_ldexp,f,c
  4420  002A8E  3239               	rrcf	??_ldexp,f,c
  4421  002A90  3239               	rrcf	??_ldexp,f,c
  4422  002A92  5035               	movf	ldexp@value+1,w,c
  4423  002A94  1839               	xorwf	??_ldexp,w,c
  4424  002A96  0B7F               	andlw	-129
  4425  002A98  1839               	xorwf	??_ldexp,w,c
  4426  002A9A  6E35               	movwf	ldexp@value+1,c
  4427  002A9C  D000               	goto	l3958
  4428  002A9E                     l3958:
  4429  002A9E  C034  F034         	movff	ldexp@value,?_ldexp
  4430  002AA2  C035  F035         	movff	ldexp@value+1,?_ldexp+1
  4431  002AA6  C036  F036         	movff	ldexp@value+2,?_ldexp+2
  4432  002AAA  0012               	return	
  4433  002AAC  0012               	return		;funcret
  4434  002AAE                     __end_of_ldexp:
  4435                           	opt stack 0
  4436                           tblptru	equ	0xFF8
  4437                           tblptrh	equ	0xFF7
  4438                           tblptrl	equ	0xFF6
  4439                           tablat	equ	0xFF5
  4440                           postinc0	equ	0xFEE
  4441                           wreg	equ	0xFE8
  4442                           postdec1	equ	0xFE5
  4443                           fsr1l	equ	0xFE1
  4444                           indf2	equ	0xFDF
  4445                           postinc2	equ	0xFDE
  4446                           postdec2	equ	0xFDD
  4447                           fsr2h	equ	0xFDA
  4448                           fsr2l	equ	0xFD9
  4449                           status	equ	0xFD8
  4450                           
  4451 ;; *************** function _floor *****************
  4452 ;; Defined at:
  4453 ;;		line 13 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\floor.c"
  4454 ;; Parameters:    Size  Location     Type
  4455 ;;  x               3   64[COMRAM] int 
  4456 ;; Auto vars:     Size  Location     Type
  4457 ;;  i               3   67[COMRAM] int 
  4458 ;;  expon           2   70[COMRAM] int 
  4459 ;; Return value:  Size  Location     Type
  4460 ;;                  3   64[COMRAM] int 
  4461 ;; Registers used:
  4462 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4463 ;; Tracked objects:
  4464 ;;		On entry : 0/0
  4465 ;;		On exit  : 0/0
  4466 ;;		Unchanged: 0/0
  4467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4468 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4469 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4471 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4472 ;;Total ram usage:        8 bytes
  4473 ;; Hardware stack levels used:    1
  4474 ;; Hardware stack levels required when called:    2
  4475 ;; This function calls:
  4476 ;;		___altoft
  4477 ;;		___ftadd
  4478 ;;		___ftge
  4479 ;;		___fttol
  4480 ;;		_frexp
  4481 ;; This function is called by:
  4482 ;;		_exp
  4483 ;; This function uses a non-reentrant model
  4484 ;;
  4485                           
  4486                           	psect	text21
  4487  00281E                     __ptext21:
  4488                           	opt stack 0
  4489  00281E                     _floor:
  4490                           	opt stack 22
  4491                           
  4492                           ;incstack = 0
  4493  00281E  C041  F001         	movff	floor@x,frexp@value
  4494  002822  C042  F002         	movff	floor@x+1,frexp@value+1
  4495  002826  C043  F003         	movff	floor@x+2,frexp@value+2
  4496  00282A  0E47               	movlw	low floor@expon
  4497  00282C  6E04               	movwf	frexp@eptr,c
  4498  00282E  0E00               	movlw	high floor@expon
  4499  002830  6E05               	movwf	frexp@eptr+1,c
  4500  002832  ECC3  F017         	call	_frexp	;wreg free
  4501  002836  AE48               	btfss	floor@expon+1,7,c
  4502  002838  D010               	goto	l3910
  4503  00283A  AE43               	btfss	floor@x+2,7,c
  4504  00283C  D007               	goto	l3906
  4505  00283E  0E00               	movlw	0
  4506  002840  6E41               	movwf	?_floor,c
  4507  002842  0E80               	movlw	128
  4508  002844  6E42               	movwf	?_floor+1,c
  4509  002846  0EBF               	movlw	191
  4510  002848  6E43               	movwf	?_floor+2,c
  4511  00284A  0012               	return	
  4512  00284C                     l3906:
  4513  00284C  0E00               	movlw	0
  4514  00284E  6E41               	movwf	?_floor,c
  4515  002850  0E00               	movlw	0
  4516  002852  6E42               	movwf	?_floor+1,c
  4517  002854  0E00               	movlw	0
  4518  002856  6E43               	movwf	?_floor+2,c
  4519  002858  0012               	return	
  4520  00285A                     l3910:
  4521  00285A  5048               	movf	floor@expon+1,w,c
  4522  00285C  E104               	bnz	u3170
  4523  00285E  0E15               	movlw	21
  4524  002860  5C47               	subwf	floor@expon,w,c
  4525  002862  A0D8               	btfss	status,0,c
  4526  002864  D007               	goto	l3914
  4527  002866                     u3170:
  4528  002866  C041  F041         	movff	floor@x,?_floor
  4529  00286A  C042  F042         	movff	floor@x+1,?_floor+1
  4530  00286E  C043  F043         	movff	floor@x+2,?_floor+2
  4531  002872  0012               	return	
  4532  002874                     l3914:
  4533  002874  C041  F028         	movff	floor@x,___fttol@f1
  4534  002878  C042  F029         	movff	floor@x+1,___fttol@f1+1
  4535  00287C  C043  F02A         	movff	floor@x+2,___fttol@f1+2
  4536  002880  ECB0  F011         	call	___fttol	;wreg free
  4537  002884  C028  F037         	movff	?___fttol,___altoft@c
  4538  002888  C029  F038         	movff	?___fttol+1,___altoft@c+1
  4539  00288C  C02A  F039         	movff	?___fttol+2,___altoft@c+2
  4540  002890  C02B  F03A         	movff	?___fttol+3,___altoft@c+3
  4541  002894  EC66  F019         	call	___altoft	;wreg free
  4542  002898  C037  F044         	movff	?___altoft,floor@i
  4543  00289C  C038  F045         	movff	?___altoft+1,floor@i+1
  4544  0028A0  C039  F046         	movff	?___altoft+2,floor@i+2
  4545  0028A4  C041  F001         	movff	floor@x,___ftge@ff1
  4546  0028A8  C042  F002         	movff	floor@x+1,___ftge@ff1+1
  4547  0028AC  C043  F003         	movff	floor@x+2,___ftge@ff1+2
  4548  0028B0  C044  F004         	movff	floor@i,___ftge@ff2
  4549  0028B4  C045  F005         	movff	floor@i+1,___ftge@ff2+1
  4550  0028B8  C046  F006         	movff	floor@i+2,___ftge@ff2+2
  4551  0028BC  EC2D  F017         	call	___ftge	;wreg free
  4552  0028C0  B0D8               	btfsc	status,0,c
  4553  0028C2  D015               	goto	l1724
  4554  0028C4  C044  F01C         	movff	floor@i,___ftadd@f1
  4555  0028C8  C045  F01D         	movff	floor@i+1,___ftadd@f1+1
  4556  0028CC  C046  F01E         	movff	floor@i+2,___ftadd@f1+2
  4557  0028D0  0E00               	movlw	0
  4558  0028D2  6E1F               	movwf	___ftadd@f2,c
  4559  0028D4  0E80               	movlw	128
  4560  0028D6  6E20               	movwf	___ftadd@f2+1,c
  4561  0028D8  0EBF               	movlw	191
  4562  0028DA  6E21               	movwf	___ftadd@f2+2,c
  4563  0028DC  EC74  F00B         	call	___ftadd	;wreg free
  4564  0028E0  C01C  F041         	movff	?___ftadd,?_floor
  4565  0028E4  C01D  F042         	movff	?___ftadd+1,?_floor+1
  4566  0028E8  C01E  F043         	movff	?___ftadd+2,?_floor+2
  4567  0028EC  0012               	return	
  4568  0028EE                     l1724:
  4569  0028EE  C044  F041         	movff	floor@i,?_floor
  4570  0028F2  C045  F042         	movff	floor@i+1,?_floor+1
  4571  0028F6  C046  F043         	movff	floor@i+2,?_floor+2
  4572  0028FA  0012               	return		;funcret
  4573  0028FC                     __end_of_floor:
  4574                           	opt stack 0
  4575                           tblptru	equ	0xFF8
  4576                           tblptrh	equ	0xFF7
  4577                           tblptrl	equ	0xFF6
  4578                           tablat	equ	0xFF5
  4579                           postinc0	equ	0xFEE
  4580                           wreg	equ	0xFE8
  4581                           postdec1	equ	0xFE5
  4582                           fsr1l	equ	0xFE1
  4583                           indf2	equ	0xFDF
  4584                           postinc2	equ	0xFDE
  4585                           postdec2	equ	0xFDD
  4586                           fsr2h	equ	0xFDA
  4587                           fsr2l	equ	0xFD9
  4588                           status	equ	0xFD8
  4589                           
  4590 ;; *************** function _frexp *****************
  4591 ;; Defined at:
  4592 ;;		line 254 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\frexp.c"
  4593 ;; Parameters:    Size  Location     Type
  4594 ;;  value           3    0[COMRAM] int 
  4595 ;;  eptr            2    3[COMRAM] PTR int 
  4596 ;;		 -> log@exponent(2), floor@expon(2), 
  4597 ;; Auto vars:     Size  Location     Type
  4598 ;;		None
  4599 ;; Return value:  Size  Location     Type
  4600 ;;                  3    0[COMRAM] PTR int 
  4601 ;; Registers used:
  4602 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4603 ;; Tracked objects:
  4604 ;;		On entry : 0/0
  4605 ;;		On exit  : 0/0
  4606 ;;		Unchanged: 0/0
  4607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4608 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4610 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4611 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4612 ;;Total ram usage:        7 bytes
  4613 ;; Hardware stack levels used:    1
  4614 ;; This function calls:
  4615 ;;		Nothing
  4616 ;; This function is called by:
  4617 ;;		_floor
  4618 ;;		_log
  4619 ;; This function uses a non-reentrant model
  4620 ;;
  4621                           
  4622                           	psect	text22
  4623  002F86                     __ptext22:
  4624                           	opt stack 0
  4625  002F86                     _frexp:
  4626                           	opt stack 24
  4627                           
  4628                           ;incstack = 0
  4629  002F86  5001               	movf	frexp@value,w,c
  4630  002F88  1002               	iorwf	frexp@value+1,w,c
  4631  002F8A  1003               	iorwf	frexp@value+2,w,c
  4632  002F8C  A4D8               	btfss	status,2,c
  4633  002F8E  D00F               	goto	l3804
  4634  002F90  C004  FFD9         	movff	frexp@eptr,fsr2l
  4635  002F94  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  4636  002F98  0E00               	movlw	0
  4637  002F9A  6EDE               	movwf	postinc2,c
  4638  002F9C  0E00               	movlw	0
  4639  002F9E  6EDD               	movwf	postdec2,c
  4640  002FA0  0E00               	movlw	0
  4641  002FA2  6E01               	movwf	?_frexp,c
  4642  002FA4  0E00               	movlw	0
  4643  002FA6  6E02               	movwf	?_frexp+1,c
  4644  002FA8  0E00               	movlw	0
  4645  002FAA  6E03               	movwf	?_frexp+2,c
  4646  002FAC  0012               	return	
  4647  002FAE                     l3804:
  4648  002FAE  5003               	movf	frexp@value+2,w,c
  4649  002FB0  0B7F               	andlw	127
  4650  002FB2  6E06               	movwf	??_frexp& (0+255),c
  4651  002FB4  6A07               	clrf	(??_frexp+1)& (0+255),c
  4652  002FB6  90D8               	bcf	status,0,c
  4653  002FB8  3606               	rlcf	??_frexp,f,c
  4654  002FBA  3607               	rlcf	??_frexp+1,f,c
  4655  002FBC  C004  FFD9         	movff	frexp@eptr,fsr2l
  4656  002FC0  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  4657  002FC4  C006  FFDE         	movff	??_frexp,postinc2
  4658  002FC8  C007  FFDD         	movff	??_frexp+1,postdec2
  4659  002FCC  AE02               	btfss	frexp@value+1,7,c
  4660  002FCE  D003               	goto	u3050
  4661  002FD0  6A06               	clrf	??_frexp& (0+255),c
  4662  002FD2  2A06               	incf	??_frexp& (0+255),f,c
  4663  002FD4  D001               	goto	u3058
  4664  002FD6                     u3050:
  4665  002FD6  6A06               	clrf	??_frexp& (0+255),c
  4666  002FD8                     u3058:
  4667  002FD8  5006               	movf	??_frexp,w,c
  4668  002FDA  C004  FFD9         	movff	frexp@eptr,fsr2l
  4669  002FDE  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  4670  002FE2  12DE               	iorwf	postinc2,f,c
  4671  002FE4  0E00               	movlw	0
  4672  002FE6  12DD               	iorwf	postdec2,f,c
  4673  002FE8  C004  FFD9         	movff	frexp@eptr,fsr2l
  4674  002FEC  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  4675  002FF0  0E82               	movlw	130
  4676  002FF2  26DE               	addwf	postinc2,f,c
  4677  002FF4  0EFF               	movlw	255
  4678  002FF6  22DD               	addwfc	postdec2,f,c
  4679  002FF8  8003               	bsf	frexp@value+2,0,c
  4680  002FFA  8203               	bsf	frexp@value+2,1,c
  4681  002FFC  8403               	bsf	frexp@value+2,2,c
  4682  002FFE  8603               	bsf	frexp@value+2,3,c
  4683  003000  8803               	bsf	frexp@value+2,4,c
  4684  003002  8A03               	bsf	frexp@value+2,5,c
  4685  003004  9C03               	bcf	frexp@value+2,6,c
  4686  003006  9E02               	bcf	frexp@value+1,7,c
  4687  003008  C001  F001         	movff	frexp@value,?_frexp
  4688  00300C  C002  F002         	movff	frexp@value+1,?_frexp+1
  4689  003010  C003  F003         	movff	frexp@value+2,?_frexp+2
  4690  003014  0012               	return	
  4691  003016  0012               	return		;funcret
  4692  003018                     __end_of_frexp:
  4693                           	opt stack 0
  4694                           tblptru	equ	0xFF8
  4695                           tblptrh	equ	0xFF7
  4696                           tblptrl	equ	0xFF6
  4697                           tablat	equ	0xFF5
  4698                           postinc0	equ	0xFEE
  4699                           wreg	equ	0xFE8
  4700                           postdec1	equ	0xFE5
  4701                           fsr1l	equ	0xFE1
  4702                           indf2	equ	0xFDF
  4703                           postinc2	equ	0xFDE
  4704                           postdec2	equ	0xFDD
  4705                           fsr2h	equ	0xFDA
  4706                           fsr2l	equ	0xFD9
  4707                           status	equ	0xFD8
  4708                           
  4709 ;; *************** function ___fttol *****************
  4710 ;; Defined at:
  4711 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\fttol.c"
  4712 ;; Parameters:    Size  Location     Type
  4713 ;;  f1              3   39[COMRAM] float 
  4714 ;; Auto vars:     Size  Location     Type
  4715 ;;  lval            4   49[COMRAM] unsigned long 
  4716 ;;  exp1            1   53[COMRAM] unsigned char 
  4717 ;;  sign1           1   48[COMRAM] unsigned char 
  4718 ;; Return value:  Size  Location     Type
  4719 ;;                  4   39[COMRAM] long 
  4720 ;; Registers used:
  4721 ;;		wreg, status,2, status,0
  4722 ;; Tracked objects:
  4723 ;;		On entry : 0/0
  4724 ;;		On exit  : 0/0
  4725 ;;		Unchanged: 0/0
  4726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4727 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4728 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4729 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4730 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4731 ;;Total ram usage:       15 bytes
  4732 ;; Hardware stack levels used:    1
  4733 ;; This function calls:
  4734 ;;		Nothing
  4735 ;; This function is called by:
  4736 ;;		_obtain_pass
  4737 ;;		_input_old_pass
  4738 ;;		_input_new_pass
  4739 ;;		_pow
  4740 ;;		_exp
  4741 ;;		_floor
  4742 ;; This function uses a non-reentrant model
  4743 ;;
  4744                           
  4745                           	psect	text23
  4746  002360                     __ptext23:
  4747                           	opt stack 0
  4748  002360                     ___fttol:
  4749                           	opt stack 23
  4750                           
  4751                           ;incstack = 0
  4752  002360  C02A  F02C         	movff	___fttol@f1+2,??___fttol
  4753  002364  6A2D               	clrf	(??___fttol+1)& (0+255),c
  4754  002366  6A2E               	clrf	(??___fttol+2)& (0+255),c
  4755  002368  3429               	rlcf	___fttol@f1+1,w,c
  4756  00236A  362C               	rlcf	??___fttol& (0+255),f,c
  4757  00236C  E301               	bnc	u2961
  4758  00236E  802D               	bsf	(??___fttol+1)& (0+255),0,c
  4759  002370                     u2961:
  4760  002370  502C               	movf	??___fttol,w,c
  4761  002372  6E36               	movwf	___fttol@exp1,c
  4762  002374  5036               	movf	___fttol@exp1,w,c
  4763  002376  A4D8               	btfss	status,2,c
  4764  002378  D009               	goto	l3756
  4765  00237A  0E00               	movlw	0
  4766  00237C  6E28               	movwf	?___fttol,c
  4767  00237E  0E00               	movlw	0
  4768  002380  6E29               	movwf	?___fttol+1,c
  4769  002382  0E00               	movlw	0
  4770  002384  6E2A               	movwf	?___fttol+2,c
  4771  002386  0E00               	movlw	0
  4772  002388  6E2B               	movwf	?___fttol+3,c
  4773  00238A  0012               	return	
  4774  00238C                     l3756:
  4775  00238C  0E17               	movlw	23
  4776  00238E  6E2C               	movwf	??___fttol& (0+255),c
  4777  002390  C028  F02D         	movff	___fttol@f1,??___fttol+1
  4778  002394  C029  F02E         	movff	___fttol@f1+1,??___fttol+2
  4779  002398  C02A  F02F         	movff	___fttol@f1+2,??___fttol+3
  4780  00239C  282C               	incf	??___fttol,w,c
  4781  00239E  6E30               	movwf	(??___fttol+4)& (0+255),c
  4782  0023A0  D004               	goto	u2980
  4783  0023A2                     u2985:
  4784  0023A2  90D8               	bcf	status,0,c
  4785  0023A4  322F               	rrcf	??___fttol+3,f,c
  4786  0023A6  322E               	rrcf	??___fttol+2,f,c
  4787  0023A8  322D               	rrcf	??___fttol+1,f,c
  4788  0023AA                     u2980:
  4789  0023AA  2E30               	decfsz	(??___fttol+4)& (0+255),f,c
  4790  0023AC  D7FA               	goto	u2985
  4791  0023AE  502D               	movf	??___fttol+1,w,c
  4792  0023B0  6E31               	movwf	___fttol@sign1,c
  4793  0023B2  8E29               	bsf	___fttol@f1+1,7,c
  4794  0023B4  0EFF               	movlw	255
  4795  0023B6  1628               	andwf	___fttol@f1,f,c
  4796  0023B8  0EFF               	movlw	255
  4797  0023BA  1629               	andwf	___fttol@f1+1,f,c
  4798  0023BC  0E00               	movlw	0
  4799  0023BE  162A               	andwf	___fttol@f1+2,f,c
  4800  0023C0  5028               	movf	___fttol@f1,w,c
  4801  0023C2  6E32               	movwf	___fttol@lval,c
  4802  0023C4  5029               	movf	___fttol@f1+1,w,c
  4803  0023C6  6E33               	movwf	___fttol@lval+1,c
  4804  0023C8  502A               	movf	___fttol@f1+2,w,c
  4805  0023CA  6E34               	movwf	___fttol@lval+2,c
  4806  0023CC  6A35               	clrf	___fttol@lval+3,c
  4807  0023CE  0E8E               	movlw	142
  4808  0023D0  5E36               	subwf	___fttol@exp1,f,c
  4809  0023D2  AE36               	btfss	___fttol@exp1,7,c
  4810  0023D4  D017               	goto	l3778
  4811  0023D6  5036               	movf	___fttol@exp1,w,c
  4812  0023D8  0A80               	xorlw	128
  4813  0023DA  0F8F               	addlw	143
  4814  0023DC  B0D8               	btfsc	status,0,c
  4815  0023DE  D00A               	goto	l3774
  4816  0023E0  0E00               	movlw	0
  4817  0023E2  6E28               	movwf	?___fttol,c
  4818  0023E4  0E00               	movlw	0
  4819  0023E6  6E29               	movwf	?___fttol+1,c
  4820  0023E8  0E00               	movlw	0
  4821  0023EA  6E2A               	movwf	?___fttol+2,c
  4822  0023EC  0E00               	movlw	0
  4823  0023EE  6E2B               	movwf	?___fttol+3,c
  4824  0023F0  0012               	return	
  4825  0023F2  D000               	goto	l3774
  4826  0023F4                     l3774:
  4827  0023F4  90D8               	bcf	status,0,c
  4828  0023F6  3235               	rrcf	___fttol@lval+3,f,c
  4829  0023F8  3234               	rrcf	___fttol@lval+2,f,c
  4830  0023FA  3233               	rrcf	___fttol@lval+1,f,c
  4831  0023FC  3232               	rrcf	___fttol@lval,f,c
  4832  0023FE  3E36               	incfsz	___fttol@exp1,f,c
  4833  002400  D7F9               	goto	l3774
  4834  002402  D019               	goto	l3788
  4835  002404                     l3778:
  4836  002404  0E17               	movlw	23
  4837  002406  6436               	cpfsgt	___fttol@exp1,c
  4838  002408  D011               	goto	l3786
  4839  00240A  0E00               	movlw	0
  4840  00240C  6E28               	movwf	?___fttol,c
  4841  00240E  0E00               	movlw	0
  4842  002410  6E29               	movwf	?___fttol+1,c
  4843  002412  0E00               	movlw	0
  4844  002414  6E2A               	movwf	?___fttol+2,c
  4845  002416  0E00               	movlw	0
  4846  002418  6E2B               	movwf	?___fttol+3,c
  4847  00241A  0012               	return	
  4848  00241C  D007               	goto	l3786
  4849  00241E                     l3784:
  4850  00241E  90D8               	bcf	status,0,c
  4851  002420  3632               	rlcf	___fttol@lval,f,c
  4852  002422  3633               	rlcf	___fttol@lval+1,f,c
  4853  002424  3634               	rlcf	___fttol@lval+2,f,c
  4854  002426  3635               	rlcf	___fttol@lval+3,f,c
  4855  002428  0636               	decf	___fttol@exp1,f,c
  4856  00242A  D000               	goto	l3786
  4857  00242C                     l3786:
  4858  00242C  5036               	movf	___fttol@exp1,w,c
  4859  00242E  B4D8               	btfsc	status,2,c
  4860  002430  D002               	goto	l3788
  4861  002432  D7F5               	goto	l3784
  4862  002434  D000               	goto	l3788
  4863  002436                     l3788:
  4864  002436  5031               	movf	___fttol@sign1,w,c
  4865  002438  B4D8               	btfsc	status,2,c
  4866  00243A  D009               	goto	l3792
  4867  00243C  1E35               	comf	___fttol@lval+3,f,c
  4868  00243E  1E34               	comf	___fttol@lval+2,f,c
  4869  002440  1E33               	comf	___fttol@lval+1,f,c
  4870  002442  6C32               	negf	___fttol@lval,c
  4871  002444  0E00               	movlw	0
  4872  002446  2233               	addwfc	___fttol@lval+1,f,c
  4873  002448  2234               	addwfc	___fttol@lval+2,f,c
  4874  00244A  2235               	addwfc	___fttol@lval+3,f,c
  4875  00244C  D000               	goto	l3792
  4876  00244E                     l3792:
  4877  00244E  C032  F028         	movff	___fttol@lval,?___fttol
  4878  002452  C033  F029         	movff	___fttol@lval+1,?___fttol+1
  4879  002456  C034  F02A         	movff	___fttol@lval+2,?___fttol+2
  4880  00245A  C035  F02B         	movff	___fttol@lval+3,?___fttol+3
  4881  00245E  0012               	return	
  4882  002460  0012               	return		;funcret
  4883  002462                     __end_of___fttol:
  4884                           	opt stack 0
  4885                           tblptru	equ	0xFF8
  4886                           tblptrh	equ	0xFF7
  4887                           tblptrl	equ	0xFF6
  4888                           tablat	equ	0xFF5
  4889                           postinc0	equ	0xFEE
  4890                           wreg	equ	0xFE8
  4891                           postdec1	equ	0xFE5
  4892                           fsr1l	equ	0xFE1
  4893                           indf2	equ	0xFDF
  4894                           postinc2	equ	0xFDE
  4895                           postdec2	equ	0xFDD
  4896                           fsr2h	equ	0xFDA
  4897                           fsr2l	equ	0xFD9
  4898                           status	equ	0xFD8
  4899                           
  4900 ;; *************** function ___ftge *****************
  4901 ;; Defined at:
  4902 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\ftge.c"
  4903 ;; Parameters:    Size  Location     Type
  4904 ;;  ff1             3    0[COMRAM] float 
  4905 ;;  ff2             3    3[COMRAM] float 
  4906 ;; Auto vars:     Size  Location     Type
  4907 ;;		None
  4908 ;; Return value:  Size  Location     Type
  4909 ;;		None               void
  4910 ;; Registers used:
  4911 ;;		wreg, status,2, status,0
  4912 ;; Tracked objects:
  4913 ;;		On entry : 0/0
  4914 ;;		On exit  : 0/0
  4915 ;;		Unchanged: 0/0
  4916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4917 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4919 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4920 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4921 ;;Total ram usage:        9 bytes
  4922 ;; Hardware stack levels used:    1
  4923 ;; This function calls:
  4924 ;;		Nothing
  4925 ;; This function is called by:
  4926 ;;		_pow
  4927 ;;		_exp
  4928 ;;		_floor
  4929 ;; This function uses a non-reentrant model
  4930 ;;
  4931                           
  4932                           	psect	text24
  4933  002E5A                     __ptext24:
  4934                           	opt stack 0
  4935  002E5A                     ___ftge:
  4936                           	opt stack 23
  4937                           
  4938                           ;incstack = 0
  4939  002E5A  AE03               	btfss	___ftge@ff1+2,7,c
  4940  002E5C  D017               	goto	l3736
  4941  002E5E  C001  F007         	movff	___ftge@ff1,??___ftge
  4942  002E62  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  4943  002E66  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  4944  002E6A  1E07               	comf	??___ftge,f,c
  4945  002E6C  1E08               	comf	??___ftge+1,f,c
  4946  002E6E  1E09               	comf	??___ftge+2,f,c
  4947  002E70  2A07               	incf	??___ftge,f,c
  4948  002E72  0E00               	movlw	0
  4949  002E74  2208               	addwfc	??___ftge+1,f,c
  4950  002E76  2209               	addwfc	??___ftge+2,f,c
  4951  002E78  0E00               	movlw	0
  4952  002E7A  2407               	addwf	??___ftge,w,c
  4953  002E7C  6E01               	movwf	___ftge@ff1,c
  4954  002E7E  0E00               	movlw	0
  4955  002E80  2008               	addwfc	??___ftge+1,w,c
  4956  002E82  6E02               	movwf	___ftge@ff1+1,c
  4957  002E84  0E80               	movlw	128
  4958  002E86  2009               	addwfc	??___ftge+2,w,c
  4959  002E88  6E03               	movwf	___ftge@ff1+2,c
  4960  002E8A  D000               	goto	l3736
  4961  002E8C                     l3736:
  4962  002E8C  AE06               	btfss	___ftge@ff2+2,7,c
  4963  002E8E  D017               	goto	l3740
  4964  002E90  C004  F007         	movff	___ftge@ff2,??___ftge
  4965  002E94  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  4966  002E98  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  4967  002E9C  1E07               	comf	??___ftge,f,c
  4968  002E9E  1E08               	comf	??___ftge+1,f,c
  4969  002EA0  1E09               	comf	??___ftge+2,f,c
  4970  002EA2  2A07               	incf	??___ftge,f,c
  4971  002EA4  0E00               	movlw	0
  4972  002EA6  2208               	addwfc	??___ftge+1,f,c
  4973  002EA8  2209               	addwfc	??___ftge+2,f,c
  4974  002EAA  0E00               	movlw	0
  4975  002EAC  2407               	addwf	??___ftge,w,c
  4976  002EAE  6E04               	movwf	___ftge@ff2,c
  4977  002EB0  0E00               	movlw	0
  4978  002EB2  2008               	addwfc	??___ftge+1,w,c
  4979  002EB4  6E05               	movwf	___ftge@ff2+1,c
  4980  002EB6  0E80               	movlw	128
  4981  002EB8  2009               	addwfc	??___ftge+2,w,c
  4982  002EBA  6E06               	movwf	___ftge@ff2+2,c
  4983  002EBC  D000               	goto	l3740
  4984  002EBE                     l3740:
  4985  002EBE  0E00               	movlw	0
  4986  002EC0  1A01               	xorwf	___ftge@ff1,f,c
  4987  002EC2  0E00               	movlw	0
  4988  002EC4  1A02               	xorwf	___ftge@ff1+1,f,c
  4989  002EC6  0E80               	movlw	128
  4990  002EC8  1A03               	xorwf	___ftge@ff1+2,f,c
  4991  002ECA  0E00               	movlw	0
  4992  002ECC  1A04               	xorwf	___ftge@ff2,f,c
  4993  002ECE  0E00               	movlw	0
  4994  002ED0  1A05               	xorwf	___ftge@ff2+1,f,c
  4995  002ED2  0E80               	movlw	128
  4996  002ED4  1A06               	xorwf	___ftge@ff2+2,f,c
  4997  002ED6  5004               	movf	___ftge@ff2,w,c
  4998  002ED8  5C01               	subwf	___ftge@ff1,w,c
  4999  002EDA  5005               	movf	___ftge@ff2+1,w,c
  5000  002EDC  5802               	subwfb	___ftge@ff1+1,w,c
  5001  002EDE  5006               	movf	___ftge@ff2+2,w,c
  5002  002EE0  5803               	subwfb	___ftge@ff1+2,w,c
  5003  002EE2  B0D8               	btfsc	status,0,c
  5004  002EE4  D002               	goto	l3746
  5005  002EE6  90D8               	bcf	status,0,c
  5006  002EE8  0012               	return	
  5007  002EEA                     l3746:
  5008  002EEA  80D8               	bsf	status,0,c
  5009  002EEC  0012               	return	
  5010  002EEE  0012               	return		;funcret
  5011  002EF0                     __end_of___ftge:
  5012                           	opt stack 0
  5013                           tblptru	equ	0xFF8
  5014                           tblptrh	equ	0xFF7
  5015                           tblptrl	equ	0xFF6
  5016                           tablat	equ	0xFF5
  5017                           postinc0	equ	0xFEE
  5018                           wreg	equ	0xFE8
  5019                           postdec1	equ	0xFE5
  5020                           fsr1l	equ	0xFE1
  5021                           indf2	equ	0xFDF
  5022                           postinc2	equ	0xFDE
  5023                           postdec2	equ	0xFDD
  5024                           fsr2h	equ	0xFDA
  5025                           fsr2l	equ	0xFD9
  5026                           status	equ	0xFD8
  5027                           
  5028 ;; *************** function ___altoft *****************
  5029 ;; Defined at:
  5030 ;;		line 42 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\altoft.c"
  5031 ;; Parameters:    Size  Location     Type
  5032 ;;  c               4   54[COMRAM] long 
  5033 ;; Auto vars:     Size  Location     Type
  5034 ;;  sign            1   63[COMRAM] unsigned char 
  5035 ;;  exp             1   62[COMRAM] unsigned char 
  5036 ;; Return value:  Size  Location     Type
  5037 ;;                  3   54[COMRAM] float 
  5038 ;; Registers used:
  5039 ;;		wreg, status,2, status,0, cstack
  5040 ;; Tracked objects:
  5041 ;;		On entry : 0/0
  5042 ;;		On exit  : 0/0
  5043 ;;		Unchanged: 0/0
  5044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5045 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5046 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5047 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5048 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5049 ;;Total ram usage:       10 bytes
  5050 ;; Hardware stack levels used:    1
  5051 ;; Hardware stack levels required when called:    1
  5052 ;; This function calls:
  5053 ;;		___ftpack
  5054 ;; This function is called by:
  5055 ;;		_floor
  5056 ;; This function uses a non-reentrant model
  5057 ;;
  5058                           
  5059                           	psect	text25
  5060  0032CC                     __ptext25:
  5061                           	opt stack 0
  5062  0032CC                     ___altoft:
  5063                           	opt stack 22
  5064                           
  5065                           ;incstack = 0
  5066  0032CC  0E00               	movlw	0
  5067  0032CE  6E40               	movwf	___altoft@sign,c
  5068  0032D0  0E8E               	movlw	142
  5069  0032D2  6E3F               	movwf	___altoft@exp,c
  5070  0032D4  AE3A               	btfss	___altoft@c+3,7,c
  5071  0032D6  D012               	goto	l3608
  5072  0032D8  1E3A               	comf	___altoft@c+3,f,c
  5073  0032DA  1E39               	comf	___altoft@c+2,f,c
  5074  0032DC  1E38               	comf	___altoft@c+1,f,c
  5075  0032DE  6C37               	negf	___altoft@c,c
  5076  0032E0  0E00               	movlw	0
  5077  0032E2  2238               	addwfc	___altoft@c+1,f,c
  5078  0032E4  2239               	addwfc	___altoft@c+2,f,c
  5079  0032E6  223A               	addwfc	___altoft@c+3,f,c
  5080  0032E8  0E01               	movlw	1
  5081  0032EA  6E40               	movwf	___altoft@sign,c
  5082  0032EC  D007               	goto	l3608
  5083  0032EE                     l3606:
  5084  0032EE  90D8               	bcf	status,0,c
  5085  0032F0  323A               	rrcf	___altoft@c+3,f,c
  5086  0032F2  3239               	rrcf	___altoft@c+2,f,c
  5087  0032F4  3238               	rrcf	___altoft@c+1,f,c
  5088  0032F6  3237               	rrcf	___altoft@c,f,c
  5089  0032F8  2A3F               	incf	___altoft@exp,f,c
  5090  0032FA  D000               	goto	l3608
  5091  0032FC                     l3608:
  5092  0032FC  0E00               	movlw	0
  5093  0032FE  1437               	andwf	___altoft@c,w,c
  5094  003300  6E3B               	movwf	??___altoft& (0+255),c
  5095  003302  0E00               	movlw	0
  5096  003304  1438               	andwf	___altoft@c+1,w,c
  5097  003306  6E3C               	movwf	(??___altoft+1)& (0+255),c
  5098  003308  0E00               	movlw	0
  5099  00330A  1439               	andwf	___altoft@c+2,w,c
  5100  00330C  6E3D               	movwf	(??___altoft+2)& (0+255),c
  5101  00330E  0EFF               	movlw	255
  5102  003310  143A               	andwf	___altoft@c+3,w,c
  5103  003312  6E3E               	movwf	(??___altoft+3)& (0+255),c
  5104  003314  503B               	movf	??___altoft,w,c
  5105  003316  103C               	iorwf	??___altoft+1,w,c
  5106  003318  103D               	iorwf	??___altoft+2,w,c
  5107  00331A  103E               	iorwf	??___altoft+3,w,c
  5108  00331C  A4D8               	btfss	status,2,c
  5109  00331E  D7E7               	goto	l3606
  5110  003320  C037  F001         	movff	___altoft@c,___ftpack@arg
  5111  003324  C038  F002         	movff	___altoft@c+1,___ftpack@arg+1
  5112  003328  C039  F003         	movff	___altoft@c+2,___ftpack@arg+2
  5113  00332C  C03F  F004         	movff	___altoft@exp,___ftpack@exp
  5114  003330  C040  F005         	movff	___altoft@sign,___ftpack@sign
  5115  003334  EC28  F016         	call	___ftpack	;wreg free
  5116  003338  C001  F037         	movff	?___ftpack,?___altoft
  5117  00333C  C002  F038         	movff	?___ftpack+1,?___altoft+1
  5118  003340  C003  F039         	movff	?___ftpack+2,?___altoft+2
  5119  003344  0012               	return	
  5120  003346  0012               	return		;funcret
  5121  003348                     __end_of___altoft:
  5122                           	opt stack 0
  5123                           tblptru	equ	0xFF8
  5124                           tblptrh	equ	0xFF7
  5125                           tblptrl	equ	0xFF6
  5126                           tablat	equ	0xFF5
  5127                           postinc0	equ	0xFEE
  5128                           wreg	equ	0xFE8
  5129                           postdec1	equ	0xFE5
  5130                           fsr1l	equ	0xFE1
  5131                           indf2	equ	0xFDF
  5132                           postinc2	equ	0xFDE
  5133                           postdec2	equ	0xFDD
  5134                           fsr2h	equ	0xFDA
  5135                           fsr2l	equ	0xFD9
  5136                           status	equ	0xFD8
  5137                           
  5138 ;; *************** function _eval_poly *****************
  5139 ;; Defined at:
  5140 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\evalpoly.c"
  5141 ;; Parameters:    Size  Location     Type
  5142 ;;  x               3   39[COMRAM] float 
  5143 ;;  d               2   42[COMRAM] PTR const 
  5144 ;;		 -> log@coeff(27), exp@coeff(30), 
  5145 ;;  n               2   44[COMRAM] int 
  5146 ;; Auto vars:     Size  Location     Type
  5147 ;;  res             3   48[COMRAM] int 
  5148 ;; Return value:  Size  Location     Type
  5149 ;;                  3   39[COMRAM] int 
  5150 ;; Registers used:
  5151 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5152 ;; Tracked objects:
  5153 ;;		On entry : 0/0
  5154 ;;		On exit  : 0/0
  5155 ;;		Unchanged: 0/0
  5156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5157 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5158 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5159 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5160 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5161 ;;Total ram usage:       12 bytes
  5162 ;; Hardware stack levels used:    1
  5163 ;; Hardware stack levels required when called:    2
  5164 ;; This function calls:
  5165 ;;		___ftadd
  5166 ;;		___ftmul
  5167 ;;		___wmul
  5168 ;; This function is called by:
  5169 ;;		_exp
  5170 ;;		_log
  5171 ;; This function uses a non-reentrant model
  5172 ;;
  5173                           
  5174                           	psect	text26
  5175  002AAE                     __ptext26:
  5176                           	opt stack 0
  5177  002AAE                     _eval_poly:
  5178                           	opt stack 22
  5179                           
  5180                           ;incstack = 0
  5181  002AAE  C02D  F001         	movff	eval_poly@n,___wmul@multiplier
  5182  002AB2  C02E  F002         	movff	eval_poly@n+1,___wmul@multiplier+1
  5183  002AB6  0E00               	movlw	0
  5184  002AB8  6E04               	movwf	___wmul@multiplicand+1,c
  5185  002ABA  0E03               	movlw	3
  5186  002ABC  6E03               	movwf	___wmul@multiplicand,c
  5187  002ABE  ECEA  F01C         	call	___wmul	;wreg free
  5188  002AC2  C02B  F02F         	movff	eval_poly@d,??_eval_poly
  5189  002AC6  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
  5190  002ACA  5001               	movf	?___wmul,w,c
  5191  002ACC  262F               	addwf	??_eval_poly,f,c
  5192  002ACE  5002               	movf	?___wmul+1,w,c
  5193  002AD0  2230               	addwfc	??_eval_poly+1,f,c
  5194  002AD2  C02F  FFF6         	movff	??_eval_poly,tblptrl
  5195  002AD6  C030  FFF7         	movff	??_eval_poly+1,tblptrh
  5196  002ADA                     	if	0	;tblptru may be non-zero
  5197  002ADA                     	endif
  5198  002ADA                     	if	0	;tblptru may be non-zero
  5199  002ADA                     	endif
  5200  002ADA  0009               	tblrd		*+
  5201  002ADC  CFF5 F031          	movff	tablat,eval_poly@res
  5202  002AE0  0009               	tblrd		*+
  5203  002AE2  CFF5 F032          	movff	tablat,eval_poly@res+1
  5204  002AE6  000A               	tblrd		*-
  5205  002AE8  CFF5 F033          	movff	tablat,eval_poly@res+2
  5206  002AEC  D03F               	goto	l3924
  5207  002AEE                     l3922:
  5208  002AEE  C031  F010         	movff	eval_poly@res,___ftmul@f2
  5209  002AF2  C032  F011         	movff	eval_poly@res+1,___ftmul@f2+1
  5210  002AF6  C033  F012         	movff	eval_poly@res+2,___ftmul@f2+2
  5211  002AFA  C028  F00D         	movff	eval_poly@x,___ftmul@f1
  5212  002AFE  C029  F00E         	movff	eval_poly@x+1,___ftmul@f1+1
  5213  002B02  C02A  F00F         	movff	eval_poly@x+2,___ftmul@f1+2
  5214  002B06  EC31  F012         	call	___ftmul	;wreg free
  5215  002B0A  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  5216  002B0E  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  5217  002B12  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  5218  002B16  0E00               	movlw	0
  5219  002B18  6E04               	movwf	___wmul@multiplicand+1,c
  5220  002B1A  0E03               	movlw	3
  5221  002B1C  6E03               	movwf	___wmul@multiplicand,c
  5222  002B1E  062D               	decf	eval_poly@n,f,c
  5223  002B20  A0D8               	btfss	status,0,c
  5224  002B22  062E               	decf	eval_poly@n+1,f,c
  5225  002B24  C02D  F001         	movff	eval_poly@n,___wmul@multiplier
  5226  002B28  C02E  F002         	movff	eval_poly@n+1,___wmul@multiplier+1
  5227  002B2C  ECEA  F01C         	call	___wmul	;wreg free
  5228  002B30  C02B  F02F         	movff	eval_poly@d,??_eval_poly
  5229  002B34  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
  5230  002B38  5001               	movf	?___wmul,w,c
  5231  002B3A  262F               	addwf	??_eval_poly,f,c
  5232  002B3C  5002               	movf	?___wmul+1,w,c
  5233  002B3E  2230               	addwfc	??_eval_poly+1,f,c
  5234  002B40  C02F  FFF6         	movff	??_eval_poly,tblptrl
  5235  002B44  C030  FFF7         	movff	??_eval_poly+1,tblptrh
  5236  002B48                     	if	0	;tblptru may be non-zero
  5237  002B48                     	endif
  5238  002B48                     	if	0	;tblptru may be non-zero
  5239  002B48                     	endif
  5240  002B48  0009               	tblrd		*+
  5241  002B4A  CFF5 F01F          	movff	tablat,___ftadd@f2
  5242  002B4E  0009               	tblrd		*+
  5243  002B50  CFF5 F020          	movff	tablat,___ftadd@f2+1
  5244  002B54  000A               	tblrd		*-
  5245  002B56  CFF5 F021          	movff	tablat,___ftadd@f2+2
  5246  002B5A  EC74  F00B         	call	___ftadd	;wreg free
  5247  002B5E  C01C  F031         	movff	?___ftadd,eval_poly@res
  5248  002B62  C01D  F032         	movff	?___ftadd+1,eval_poly@res+1
  5249  002B66  C01E  F033         	movff	?___ftadd+2,eval_poly@res+2
  5250  002B6A  D000               	goto	l3924
  5251  002B6C                     l3924:
  5252  002B6C  502D               	movf	eval_poly@n,w,c
  5253  002B6E  102E               	iorwf	eval_poly@n+1,w,c
  5254  002B70  A4D8               	btfss	status,2,c
  5255  002B72  D7BD               	goto	l3922
  5256  002B74  C031  F028         	movff	eval_poly@res,?_eval_poly
  5257  002B78  C032  F029         	movff	eval_poly@res+1,?_eval_poly+1
  5258  002B7C  C033  F02A         	movff	eval_poly@res+2,?_eval_poly+2
  5259  002B80  0012               	return		;funcret
  5260  002B82                     __end_of_eval_poly:
  5261                           	opt stack 0
  5262                           tblptru	equ	0xFF8
  5263                           tblptrh	equ	0xFF7
  5264                           tblptrl	equ	0xFF6
  5265                           tablat	equ	0xFF5
  5266                           postinc0	equ	0xFEE
  5267                           wreg	equ	0xFE8
  5268                           postdec1	equ	0xFE5
  5269                           fsr1l	equ	0xFE1
  5270                           indf2	equ	0xFDF
  5271                           postinc2	equ	0xFDE
  5272                           postdec2	equ	0xFDD
  5273                           fsr2h	equ	0xFDA
  5274                           fsr2l	equ	0xFD9
  5275                           status	equ	0xFD8
  5276                           
  5277 ;; *************** function ___ftmul *****************
  5278 ;; Defined at:
  5279 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\ftmul.c"
  5280 ;; Parameters:    Size  Location     Type
  5281 ;;  f1              3   12[COMRAM] float 
  5282 ;;  f2              3   15[COMRAM] float 
  5283 ;; Auto vars:     Size  Location     Type
  5284 ;;  f3_as_produc    3   22[COMRAM] unsigned um
  5285 ;;  sign            1   26[COMRAM] unsigned char 
  5286 ;;  cntr            1   25[COMRAM] unsigned char 
  5287 ;;  exp             1   21[COMRAM] unsigned char 
  5288 ;; Return value:  Size  Location     Type
  5289 ;;                  3   12[COMRAM] float 
  5290 ;; Registers used:
  5291 ;;		wreg, status,2, status,0, cstack
  5292 ;; Tracked objects:
  5293 ;;		On entry : 0/0
  5294 ;;		On exit  : 0/0
  5295 ;;		Unchanged: 0/0
  5296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5297 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5298 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5299 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5300 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5301 ;;Total ram usage:       15 bytes
  5302 ;; Hardware stack levels used:    1
  5303 ;; Hardware stack levels required when called:    1
  5304 ;; This function calls:
  5305 ;;		___ftpack
  5306 ;; This function is called by:
  5307 ;;		_obtain_pass
  5308 ;;		_input_old_pass
  5309 ;;		_input_new_pass
  5310 ;;		_pow
  5311 ;;		_exp
  5312 ;;		_log
  5313 ;;		_eval_poly
  5314 ;; This function uses a non-reentrant model
  5315 ;;
  5316                           
  5317                           	psect	text27
  5318  002462                     __ptext27:
  5319                           	opt stack 0
  5320  002462                     ___ftmul:
  5321                           	opt stack 22
  5322                           
  5323                           ;incstack = 0
  5324  002462  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
  5325  002466  6A14               	clrf	(??___ftmul+1)& (0+255),c
  5326  002468  6A15               	clrf	(??___ftmul+2)& (0+255),c
  5327  00246A  340E               	rlcf	___ftmul@f1+1,w,c
  5328  00246C  3613               	rlcf	??___ftmul& (0+255),f,c
  5329  00246E  E301               	bnc	u2871
  5330  002470  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  5331  002472                     u2871:
  5332  002472  5013               	movf	??___ftmul,w,c
  5333  002474  6E16               	movwf	___ftmul@exp,c
  5334  002476  5016               	movf	___ftmul@exp,w,c
  5335  002478  A4D8               	btfss	status,2,c
  5336  00247A  D007               	goto	l3690
  5337  00247C  0E00               	movlw	0
  5338  00247E  6E0D               	movwf	?___ftmul,c
  5339  002480  0E00               	movlw	0
  5340  002482  6E0E               	movwf	?___ftmul+1,c
  5341  002484  0E00               	movlw	0
  5342  002486  6E0F               	movwf	?___ftmul+2,c
  5343  002488  0012               	return	
  5344  00248A                     l3690:
  5345  00248A  C012  F013         	movff	___ftmul@f2+2,??___ftmul
  5346  00248E  6A14               	clrf	(??___ftmul+1)& (0+255),c
  5347  002490  6A15               	clrf	(??___ftmul+2)& (0+255),c
  5348  002492  3411               	rlcf	___ftmul@f2+1,w,c
  5349  002494  3613               	rlcf	??___ftmul& (0+255),f,c
  5350  002496  E301               	bnc	u2891
  5351  002498  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  5352  00249A                     u2891:
  5353  00249A  5013               	movf	??___ftmul,w,c
  5354  00249C  6E1B               	movwf	___ftmul@sign,c
  5355  00249E  501B               	movf	___ftmul@sign,w,c
  5356  0024A0  A4D8               	btfss	status,2,c
  5357  0024A2  D007               	goto	l3696
  5358  0024A4  0E00               	movlw	0
  5359  0024A6  6E0D               	movwf	?___ftmul,c
  5360  0024A8  0E00               	movlw	0
  5361  0024AA  6E0E               	movwf	?___ftmul+1,c
  5362  0024AC  0E00               	movlw	0
  5363  0024AE  6E0F               	movwf	?___ftmul+2,c
  5364  0024B0  0012               	return	
  5365  0024B2                     l3696:
  5366  0024B2  501B               	movf	___ftmul@sign,w,c
  5367  0024B4  0F7B               	addlw	123
  5368  0024B6  2616               	addwf	___ftmul@exp,f,c
  5369  0024B8  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
  5370  0024BC  5012               	movf	___ftmul@f2+2,w,c
  5371  0024BE  1A1B               	xorwf	___ftmul@sign,f,c
  5372  0024C0  0E80               	movlw	128
  5373  0024C2  161B               	andwf	___ftmul@sign,f,c
  5374  0024C4  8E0E               	bsf	___ftmul@f1+1,7,c
  5375  0024C6  8E11               	bsf	___ftmul@f2+1,7,c
  5376  0024C8  0EFF               	movlw	255
  5377  0024CA  1610               	andwf	___ftmul@f2,f,c
  5378  0024CC  0EFF               	movlw	255
  5379  0024CE  1611               	andwf	___ftmul@f2+1,f,c
  5380  0024D0  0E00               	movlw	0
  5381  0024D2  1612               	andwf	___ftmul@f2+2,f,c
  5382  0024D4  0E00               	movlw	0
  5383  0024D6  6E17               	movwf	___ftmul@f3_as_product,c
  5384  0024D8  0E00               	movlw	0
  5385  0024DA  6E18               	movwf	___ftmul@f3_as_product+1,c
  5386  0024DC  0E00               	movlw	0
  5387  0024DE  6E19               	movwf	___ftmul@f3_as_product+2,c
  5388  0024E0  0E07               	movlw	7
  5389  0024E2  6E1A               	movwf	___ftmul@cntr,c
  5390  0024E4  D000               	goto	l3710
  5391  0024E6                     l3710:
  5392  0024E6  A00D               	btfss	___ftmul@f1,0,c
  5393  0024E8  D007               	goto	l3714
  5394  0024EA  5010               	movf	___ftmul@f2,w,c
  5395  0024EC  2617               	addwf	___ftmul@f3_as_product,f,c
  5396  0024EE  5011               	movf	___ftmul@f2+1,w,c
  5397  0024F0  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  5398  0024F2  5012               	movf	___ftmul@f2+2,w,c
  5399  0024F4  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  5400  0024F6  D000               	goto	l3714
  5401  0024F8                     l3714:
  5402  0024F8  90D8               	bcf	status,0,c
  5403  0024FA  320F               	rrcf	___ftmul@f1+2,f,c
  5404  0024FC  320E               	rrcf	___ftmul@f1+1,f,c
  5405  0024FE  320D               	rrcf	___ftmul@f1,f,c
  5406  002500  90D8               	bcf	status,0,c
  5407  002502  3610               	rlcf	___ftmul@f2,f,c
  5408  002504  3611               	rlcf	___ftmul@f2+1,f,c
  5409  002506  3612               	rlcf	___ftmul@f2+2,f,c
  5410  002508  2E1A               	decfsz	___ftmul@cntr,f,c
  5411  00250A  D7ED               	goto	l3710
  5412  00250C  D000               	goto	l3718
  5413  00250E                     l3718:
  5414  00250E  0E09               	movlw	9
  5415  002510  6E1A               	movwf	___ftmul@cntr,c
  5416  002512  D000               	goto	l3720
  5417  002514                     l3720:
  5418  002514  A00D               	btfss	___ftmul@f1,0,c
  5419  002516  D007               	goto	l3724
  5420  002518  5010               	movf	___ftmul@f2,w,c
  5421  00251A  2617               	addwf	___ftmul@f3_as_product,f,c
  5422  00251C  5011               	movf	___ftmul@f2+1,w,c
  5423  00251E  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  5424  002520  5012               	movf	___ftmul@f2+2,w,c
  5425  002522  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  5426  002524  D000               	goto	l3724
  5427  002526                     l3724:
  5428  002526  90D8               	bcf	status,0,c
  5429  002528  320F               	rrcf	___ftmul@f1+2,f,c
  5430  00252A  320E               	rrcf	___ftmul@f1+1,f,c
  5431  00252C  320D               	rrcf	___ftmul@f1,f,c
  5432  00252E  90D8               	bcf	status,0,c
  5433  002530  3219               	rrcf	___ftmul@f3_as_product+2,f,c
  5434  002532  3218               	rrcf	___ftmul@f3_as_product+1,f,c
  5435  002534  3217               	rrcf	___ftmul@f3_as_product,f,c
  5436  002536  2E1A               	decfsz	___ftmul@cntr,f,c
  5437  002538  D7ED               	goto	l3720
  5438  00253A  D000               	goto	l3728
  5439  00253C                     l3728:
  5440  00253C  C017  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  5441  002540  C018  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5442  002544  C019  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5443  002548  C016  F004         	movff	___ftmul@exp,___ftpack@exp
  5444  00254C  C01B  F005         	movff	___ftmul@sign,___ftpack@sign
  5445  002550  EC28  F016         	call	___ftpack	;wreg free
  5446  002554  C001  F00D         	movff	?___ftpack,?___ftmul
  5447  002558  C002  F00E         	movff	?___ftpack+1,?___ftmul+1
  5448  00255C  C003  F00F         	movff	?___ftpack+2,?___ftmul+2
  5449  002560  0012               	return	
  5450  002562  0012               	return		;funcret
  5451  002564                     __end_of___ftmul:
  5452                           	opt stack 0
  5453                           tblptru	equ	0xFF8
  5454                           tblptrh	equ	0xFF7
  5455                           tblptrl	equ	0xFF6
  5456                           tablat	equ	0xFF5
  5457                           postinc0	equ	0xFEE
  5458                           wreg	equ	0xFE8
  5459                           postdec1	equ	0xFE5
  5460                           fsr1l	equ	0xFE1
  5461                           indf2	equ	0xFDF
  5462                           postinc2	equ	0xFDE
  5463                           postdec2	equ	0xFDD
  5464                           fsr2h	equ	0xFDA
  5465                           fsr2l	equ	0xFD9
  5466                           status	equ	0xFD8
  5467                           
  5468 ;; *************** function ___ftsub *****************
  5469 ;; Defined at:
  5470 ;;		line 20 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\ftsub.c"
  5471 ;; Parameters:    Size  Location     Type
  5472 ;;  f1              3   39[COMRAM] float 
  5473 ;;  f2              3   42[COMRAM] float 
  5474 ;; Auto vars:     Size  Location     Type
  5475 ;;		None
  5476 ;; Return value:  Size  Location     Type
  5477 ;;                  3   39[COMRAM] float 
  5478 ;; Registers used:
  5479 ;;		wreg, status,2, status,0, cstack
  5480 ;; Tracked objects:
  5481 ;;		On entry : 0/0
  5482 ;;		On exit  : 0/0
  5483 ;;		Unchanged: 0/0
  5484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5485 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5488 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5489 ;;Total ram usage:        6 bytes
  5490 ;; Hardware stack levels used:    1
  5491 ;; Hardware stack levels required when called:    2
  5492 ;; This function calls:
  5493 ;;		___ftadd
  5494 ;; This function is called by:
  5495 ;;		_exp
  5496 ;; This function uses a non-reentrant model
  5497 ;;
  5498                           
  5499                           	psect	text28
  5500  00377E                     __ptext28:
  5501                           	opt stack 0
  5502  00377E                     ___ftsub:
  5503                           	opt stack 22
  5504                           
  5505                           ;incstack = 0
  5506  00377E  502B               	movf	___ftsub@f2,w,c
  5507  003780  102C               	iorwf	___ftsub@f2+1,w,c
  5508  003782  102D               	iorwf	___ftsub@f2+2,w,c
  5509  003784  B4D8               	btfsc	status,2,c
  5510  003786  D007               	goto	l3876
  5511  003788  0E00               	movlw	0
  5512  00378A  1A2B               	xorwf	___ftsub@f2,f,c
  5513  00378C  0E00               	movlw	0
  5514  00378E  1A2C               	xorwf	___ftsub@f2+1,f,c
  5515  003790  0E80               	movlw	128
  5516  003792  1A2D               	xorwf	___ftsub@f2+2,f,c
  5517  003794  D000               	goto	l3876
  5518  003796                     l3876:
  5519  003796  C028  F01C         	movff	___ftsub@f1,___ftadd@f1
  5520  00379A  C029  F01D         	movff	___ftsub@f1+1,___ftadd@f1+1
  5521  00379E  C02A  F01E         	movff	___ftsub@f1+2,___ftadd@f1+2
  5522  0037A2  C02B  F01F         	movff	___ftsub@f2,___ftadd@f2
  5523  0037A6  C02C  F020         	movff	___ftsub@f2+1,___ftadd@f2+1
  5524  0037AA  C02D  F021         	movff	___ftsub@f2+2,___ftadd@f2+2
  5525  0037AE  EC74  F00B         	call	___ftadd	;wreg free
  5526  0037B2  C01C  F028         	movff	?___ftadd,?___ftsub
  5527  0037B6  C01D  F029         	movff	?___ftadd+1,?___ftsub+1
  5528  0037BA  C01E  F02A         	movff	?___ftadd+2,?___ftsub+2
  5529  0037BE  0012               	return	
  5530  0037C0  0012               	return		;funcret
  5531  0037C2                     __end_of___ftsub:
  5532                           	opt stack 0
  5533                           tblptru	equ	0xFF8
  5534                           tblptrh	equ	0xFF7
  5535                           tblptrl	equ	0xFF6
  5536                           tablat	equ	0xFF5
  5537                           postinc0	equ	0xFEE
  5538                           wreg	equ	0xFE8
  5539                           postdec1	equ	0xFE5
  5540                           fsr1l	equ	0xFE1
  5541                           indf2	equ	0xFDF
  5542                           postinc2	equ	0xFDE
  5543                           postdec2	equ	0xFDD
  5544                           fsr2h	equ	0xFDA
  5545                           fsr2l	equ	0xFD9
  5546                           status	equ	0xFD8
  5547                           
  5548 ;; *************** function ___ftadd *****************
  5549 ;; Defined at:
  5550 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\ftadd.c"
  5551 ;; Parameters:    Size  Location     Type
  5552 ;;  f1              3   27[COMRAM] float 
  5553 ;;  f2              3   30[COMRAM] float 
  5554 ;; Auto vars:     Size  Location     Type
  5555 ;;  exp1            1   38[COMRAM] unsigned char 
  5556 ;;  exp2            1   37[COMRAM] unsigned char 
  5557 ;;  sign            1   36[COMRAM] unsigned char 
  5558 ;; Return value:  Size  Location     Type
  5559 ;;                  3   27[COMRAM] float 
  5560 ;; Registers used:
  5561 ;;		wreg, status,2, status,0, cstack
  5562 ;; Tracked objects:
  5563 ;;		On entry : 0/0
  5564 ;;		On exit  : 0/0
  5565 ;;		Unchanged: 0/0
  5566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5567 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5568 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5569 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5570 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5571 ;;Total ram usage:       12 bytes
  5572 ;; Hardware stack levels used:    1
  5573 ;; Hardware stack levels required when called:    1
  5574 ;; This function calls:
  5575 ;;		___ftpack
  5576 ;; This function is called by:
  5577 ;;		_obtain_pass
  5578 ;;		_input_old_pass
  5579 ;;		_input_new_pass
  5580 ;;		___ftsub
  5581 ;;		_floor
  5582 ;;		_log
  5583 ;;		_eval_poly
  5584 ;; This function uses a non-reentrant model
  5585 ;;
  5586                           
  5587                           	psect	text29
  5588  0016E8                     __ptext29:
  5589                           	opt stack 0
  5590  0016E8                     ___ftadd:
  5591                           	opt stack 22
  5592                           
  5593                           ;incstack = 0
  5594  0016E8  C01E  F022         	movff	___ftadd@f1+2,??___ftadd
  5595  0016EC  6A23               	clrf	(??___ftadd+1)& (0+255),c
  5596  0016EE  6A24               	clrf	(??___ftadd+2)& (0+255),c
  5597  0016F0  341D               	rlcf	___ftadd@f1+1,w,c
  5598  0016F2  3622               	rlcf	??___ftadd& (0+255),f,c
  5599  0016F4  E301               	bnc	u2661
  5600  0016F6  8023               	bsf	(??___ftadd+1)& (0+255),0,c
  5601  0016F8                     u2661:
  5602  0016F8  5022               	movf	??___ftadd,w,c
  5603  0016FA  6E27               	movwf	___ftadd@exp1,c
  5604  0016FC  C021  F022         	movff	___ftadd@f2+2,??___ftadd
  5605  001700  6A23               	clrf	(??___ftadd+1)& (0+255),c
  5606  001702  6A24               	clrf	(??___ftadd+2)& (0+255),c
  5607  001704  3420               	rlcf	___ftadd@f2+1,w,c
  5608  001706  3622               	rlcf	??___ftadd& (0+255),f,c
  5609  001708  E301               	bnc	u2671
  5610  00170A  8023               	bsf	(??___ftadd+1)& (0+255),0,c
  5611  00170C                     u2671:
  5612  00170C  5022               	movf	??___ftadd,w,c
  5613  00170E  6E26               	movwf	___ftadd@exp2,c
  5614  001710  5027               	movf	___ftadd@exp1,w,c
  5615  001712  B4D8               	btfsc	status,2,c
  5616  001714  D00B               	goto	l1477
  5617  001716  5026               	movf	___ftadd@exp2,w,c
  5618  001718  5C27               	subwf	___ftadd@exp1,w,c
  5619  00171A  B0D8               	btfsc	status,0,c
  5620  00171C  D00E               	goto	l3622
  5621  00171E  5027               	movf	___ftadd@exp1,w,c
  5622  001720  0800               	sublw	0
  5623  001722  2426               	addwf	___ftadd@exp2,w,c
  5624  001724  6E22               	movwf	??___ftadd& (0+255),c
  5625  001726  0E18               	movlw	24
  5626  001728  6422               	cpfsgt	??___ftadd,c
  5627  00172A  D007               	goto	l3622
  5628  00172C                     l1477:
  5629  00172C  C01F  F01C         	movff	___ftadd@f2,?___ftadd
  5630  001730  C020  F01D         	movff	___ftadd@f2+1,?___ftadd+1
  5631  001734  C021  F01E         	movff	___ftadd@f2+2,?___ftadd+2
  5632  001738  0012               	return	
  5633  00173A                     l3622:
  5634  00173A  5026               	movf	___ftadd@exp2,w,c
  5635  00173C  B4D8               	btfsc	status,2,c
  5636  00173E  D00B               	goto	l1481
  5637  001740  5027               	movf	___ftadd@exp1,w,c
  5638  001742  5C26               	subwf	___ftadd@exp2,w,c
  5639  001744  B0D8               	btfsc	status,0,c
  5640  001746  D00E               	goto	l3628
  5641  001748  5026               	movf	___ftadd@exp2,w,c
  5642  00174A  0800               	sublw	0
  5643  00174C  2427               	addwf	___ftadd@exp1,w,c
  5644  00174E  6E22               	movwf	??___ftadd& (0+255),c
  5645  001750  0E18               	movlw	24
  5646  001752  6422               	cpfsgt	??___ftadd,c
  5647  001754  D007               	goto	l3628
  5648  001756                     l1481:
  5649  001756  C01C  F01C         	movff	___ftadd@f1,?___ftadd
  5650  00175A  C01D  F01D         	movff	___ftadd@f1+1,?___ftadd+1
  5651  00175E  C01E  F01E         	movff	___ftadd@f1+2,?___ftadd+2
  5652  001762  0012               	return	
  5653  001764                     l3628:
  5654  001764  0E06               	movlw	6
  5655  001766  6E25               	movwf	___ftadd@sign,c
  5656  001768  AE1E               	btfss	___ftadd@f1+2,7,c
  5657  00176A  D002               	goto	l3634
  5658  00176C  8E25               	bsf	___ftadd@sign,7,c
  5659  00176E  D000               	goto	l3634
  5660  001770                     l3634:
  5661  001770  BE21               	btfsc	___ftadd@f2+2,7,c
  5662  001772  8C25               	bsf	___ftadd@sign,6,c
  5663  001774  8E1D               	bsf	___ftadd@f1+1,7,c
  5664  001776  0EFF               	movlw	255
  5665  001778  161C               	andwf	___ftadd@f1,f,c
  5666  00177A  0EFF               	movlw	255
  5667  00177C  161D               	andwf	___ftadd@f1+1,f,c
  5668  00177E  0E00               	movlw	0
  5669  001780  161E               	andwf	___ftadd@f1+2,f,c
  5670  001782  8E20               	bsf	___ftadd@f2+1,7,c
  5671  001784  0EFF               	movlw	255
  5672  001786  161F               	andwf	___ftadd@f2,f,c
  5673  001788  0EFF               	movlw	255
  5674  00178A  1620               	andwf	___ftadd@f2+1,f,c
  5675  00178C  0E00               	movlw	0
  5676  00178E  1621               	andwf	___ftadd@f2+2,f,c
  5677  001790  5026               	movf	___ftadd@exp2,w,c
  5678  001792  5C27               	subwf	___ftadd@exp1,w,c
  5679  001794  B0D8               	btfsc	status,0,c
  5680  001796  D01E               	goto	l3654
  5681  001798                     l3644:
  5682  001798  90D8               	bcf	status,0,c
  5683  00179A  361F               	rlcf	___ftadd@f2,f,c
  5684  00179C  3620               	rlcf	___ftadd@f2+1,f,c
  5685  00179E  3621               	rlcf	___ftadd@f2+2,f,c
  5686  0017A0  0626               	decf	___ftadd@exp2,f,c
  5687  0017A2  5027               	movf	___ftadd@exp1,w,c
  5688  0017A4  1826               	xorwf	___ftadd@exp2,w,c
  5689  0017A6  B4D8               	btfsc	status,2,c
  5690  0017A8  D00F               	goto	l3652
  5691  0017AA  0625               	decf	___ftadd@sign,f,c
  5692  0017AC  C025  F022         	movff	___ftadd@sign,??___ftadd
  5693  0017B0  0E07               	movlw	7
  5694  0017B2  1622               	andwf	??___ftadd,f,c
  5695  0017B4  B4D8               	btfsc	status,2,c
  5696  0017B6  D008               	goto	l3652
  5697  0017B8  D7EF               	goto	l3644
  5698  0017BA  D006               	goto	l3652
  5699  0017BC                     l3650:
  5700  0017BC  90D8               	bcf	status,0,c
  5701  0017BE  321E               	rrcf	___ftadd@f1+2,f,c
  5702  0017C0  321D               	rrcf	___ftadd@f1+1,f,c
  5703  0017C2  321C               	rrcf	___ftadd@f1,f,c
  5704  0017C4  2A27               	incf	___ftadd@exp1,f,c
  5705  0017C6  D000               	goto	l3652
  5706  0017C8                     l3652:
  5707  0017C8  5026               	movf	___ftadd@exp2,w,c
  5708  0017CA  1827               	xorwf	___ftadd@exp1,w,c
  5709  0017CC  B4D8               	btfsc	status,2,c
  5710  0017CE  D024               	goto	l1492
  5711  0017D0  D7F5               	goto	l3650
  5712  0017D2  D022               	goto	l1492
  5713  0017D4                     l3654:
  5714  0017D4  5027               	movf	___ftadd@exp1,w,c
  5715  0017D6  5C26               	subwf	___ftadd@exp2,w,c
  5716  0017D8  B0D8               	btfsc	status,0,c
  5717  0017DA  D01E               	goto	l1492
  5718  0017DC                     l3656:
  5719  0017DC  90D8               	bcf	status,0,c
  5720  0017DE  361C               	rlcf	___ftadd@f1,f,c
  5721  0017E0  361D               	rlcf	___ftadd@f1+1,f,c
  5722  0017E2  361E               	rlcf	___ftadd@f1+2,f,c
  5723  0017E4  0627               	decf	___ftadd@exp1,f,c
  5724  0017E6  5027               	movf	___ftadd@exp1,w,c
  5725  0017E8  1826               	xorwf	___ftadd@exp2,w,c
  5726  0017EA  B4D8               	btfsc	status,2,c
  5727  0017EC  D00F               	goto	l3664
  5728  0017EE  0625               	decf	___ftadd@sign,f,c
  5729  0017F0  C025  F022         	movff	___ftadd@sign,??___ftadd
  5730  0017F4  0E07               	movlw	7
  5731  0017F6  1622               	andwf	??___ftadd,f,c
  5732  0017F8  B4D8               	btfsc	status,2,c
  5733  0017FA  D008               	goto	l3664
  5734  0017FC  D7EF               	goto	l3656
  5735  0017FE  D006               	goto	l3664
  5736  001800                     l3662:
  5737  001800  90D8               	bcf	status,0,c
  5738  001802  3221               	rrcf	___ftadd@f2+2,f,c
  5739  001804  3220               	rrcf	___ftadd@f2+1,f,c
  5740  001806  321F               	rrcf	___ftadd@f2,f,c
  5741  001808  2A26               	incf	___ftadd@exp2,f,c
  5742  00180A  D000               	goto	l3664
  5743  00180C                     l3664:
  5744  00180C  5026               	movf	___ftadd@exp2,w,c
  5745  00180E  1827               	xorwf	___ftadd@exp1,w,c
  5746  001810  B4D8               	btfsc	status,2,c
  5747  001812  D002               	goto	l1492
  5748  001814  D7F5               	goto	l3662
  5749  001816  D000               	goto	l1492
  5750  001818                     l1492:
  5751  001818  AE25               	btfss	___ftadd@sign,7,c
  5752  00181A  D00C               	goto	l1501
  5753  00181C  0EFF               	movlw	255
  5754  00181E  1A1C               	xorwf	___ftadd@f1,f,c
  5755  001820  0EFF               	movlw	255
  5756  001822  1A1D               	xorwf	___ftadd@f1+1,f,c
  5757  001824  0EFF               	movlw	255
  5758  001826  1A1E               	xorwf	___ftadd@f1+2,f,c
  5759  001828  0E01               	movlw	1
  5760  00182A  261C               	addwf	___ftadd@f1,f,c
  5761  00182C  0E00               	movlw	0
  5762  00182E  221D               	addwfc	___ftadd@f1+1,f,c
  5763  001830  0E00               	movlw	0
  5764  001832  221E               	addwfc	___ftadd@f1+2,f,c
  5765  001834                     l1501:
  5766  001834  AC25               	btfss	___ftadd@sign,6,c
  5767  001836  D00D               	goto	l3670
  5768  001838  0EFF               	movlw	255
  5769  00183A  1A1F               	xorwf	___ftadd@f2,f,c
  5770  00183C  0EFF               	movlw	255
  5771  00183E  1A20               	xorwf	___ftadd@f2+1,f,c
  5772  001840  0EFF               	movlw	255
  5773  001842  1A21               	xorwf	___ftadd@f2+2,f,c
  5774  001844  0E01               	movlw	1
  5775  001846  261F               	addwf	___ftadd@f2,f,c
  5776  001848  0E00               	movlw	0
  5777  00184A  2220               	addwfc	___ftadd@f2+1,f,c
  5778  00184C  0E00               	movlw	0
  5779  00184E  2221               	addwfc	___ftadd@f2+2,f,c
  5780  001850  D000               	goto	l3670
  5781  001852                     l3670:
  5782  001852  0E00               	movlw	0
  5783  001854  6E25               	movwf	___ftadd@sign,c
  5784  001856  501C               	movf	___ftadd@f1,w,c
  5785  001858  261F               	addwf	___ftadd@f2,f,c
  5786  00185A  501D               	movf	___ftadd@f1+1,w,c
  5787  00185C  2220               	addwfc	___ftadd@f2+1,f,c
  5788  00185E  501E               	movf	___ftadd@f1+2,w,c
  5789  001860  2221               	addwfc	___ftadd@f2+2,f,c
  5790  001862  AE21               	btfss	___ftadd@f2+2,7,c
  5791  001864  D00F               	goto	l3680
  5792  001866  0EFF               	movlw	255
  5793  001868  1A1F               	xorwf	___ftadd@f2,f,c
  5794  00186A  0EFF               	movlw	255
  5795  00186C  1A20               	xorwf	___ftadd@f2+1,f,c
  5796  00186E  0EFF               	movlw	255
  5797  001870  1A21               	xorwf	___ftadd@f2+2,f,c
  5798  001872  0E01               	movlw	1
  5799  001874  261F               	addwf	___ftadd@f2,f,c
  5800  001876  0E00               	movlw	0
  5801  001878  2220               	addwfc	___ftadd@f2+1,f,c
  5802  00187A  0E00               	movlw	0
  5803  00187C  2221               	addwfc	___ftadd@f2+2,f,c
  5804  00187E  0E01               	movlw	1
  5805  001880  6E25               	movwf	___ftadd@sign,c
  5806  001882  D000               	goto	l3680
  5807  001884                     l3680:
  5808  001884  C01F  F001         	movff	___ftadd@f2,___ftpack@arg
  5809  001888  C020  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  5810  00188C  C021  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  5811  001890  C027  F004         	movff	___ftadd@exp1,___ftpack@exp
  5812  001894  C025  F005         	movff	___ftadd@sign,___ftpack@sign
  5813  001898  EC28  F016         	call	___ftpack	;wreg free
  5814  00189C  C001  F01C         	movff	?___ftpack,?___ftadd
  5815  0018A0  C002  F01D         	movff	?___ftpack+1,?___ftadd+1
  5816  0018A4  C003  F01E         	movff	?___ftpack+2,?___ftadd+2
  5817  0018A8  0012               	return	
  5818  0018AA  0012               	return		;funcret
  5819  0018AC                     __end_of___ftadd:
  5820                           	opt stack 0
  5821                           tblptru	equ	0xFF8
  5822                           tblptrh	equ	0xFF7
  5823                           tblptrl	equ	0xFF6
  5824                           tablat	equ	0xFF5
  5825                           postinc0	equ	0xFEE
  5826                           wreg	equ	0xFE8
  5827                           postdec1	equ	0xFE5
  5828                           fsr1l	equ	0xFE1
  5829                           indf2	equ	0xFDF
  5830                           postinc2	equ	0xFDE
  5831                           postdec2	equ	0xFDD
  5832                           fsr2h	equ	0xFDA
  5833                           fsr2l	equ	0xFD9
  5834                           status	equ	0xFD8
  5835                           
  5836 ;; *************** function ___ftneg *****************
  5837 ;; Defined at:
  5838 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\ftneg.c"
  5839 ;; Parameters:    Size  Location     Type
  5840 ;;  f1              3    0[COMRAM] float 
  5841 ;; Auto vars:     Size  Location     Type
  5842 ;;		None
  5843 ;; Return value:  Size  Location     Type
  5844 ;;                  3    0[COMRAM] float 
  5845 ;; Registers used:
  5846 ;;		wreg, status,2, status,0
  5847 ;; Tracked objects:
  5848 ;;		On entry : 0/0
  5849 ;;		On exit  : 0/0
  5850 ;;		Unchanged: 0/0
  5851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5852 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5855 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5856 ;;Total ram usage:        3 bytes
  5857 ;; Hardware stack levels used:    1
  5858 ;; This function calls:
  5859 ;;		Nothing
  5860 ;; This function is called by:
  5861 ;;		_pow
  5862 ;;		_exp
  5863 ;; This function uses a non-reentrant model
  5864 ;;
  5865                           
  5866                           	psect	text30
  5867  003A46                     __ptext30:
  5868                           	opt stack 0
  5869  003A46                     ___ftneg:
  5870                           	opt stack 24
  5871                           
  5872                           ;incstack = 0
  5873  003A46  5001               	movf	___ftneg@f1,w,c
  5874  003A48  1002               	iorwf	___ftneg@f1+1,w,c
  5875  003A4A  1003               	iorwf	___ftneg@f1+2,w,c
  5876  003A4C  B4D8               	btfsc	status,2,c
  5877  003A4E  D006               	goto	l1534
  5878  003A50  0E00               	movlw	0
  5879  003A52  1A01               	xorwf	___ftneg@f1,f,c
  5880  003A54  0E00               	movlw	0
  5881  003A56  1A02               	xorwf	___ftneg@f1+1,f,c
  5882  003A58  0E80               	movlw	128
  5883  003A5A  1A03               	xorwf	___ftneg@f1+2,f,c
  5884  003A5C                     l1534:
  5885  003A5C  C001  F001         	movff	___ftneg@f1,?___ftneg
  5886  003A60  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  5887  003A64  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  5888  003A68  0012               	return		;funcret
  5889  003A6A                     __end_of___ftneg:
  5890                           	opt stack 0
  5891                           tblptru	equ	0xFF8
  5892                           tblptrh	equ	0xFF7
  5893                           tblptrl	equ	0xFF6
  5894                           tablat	equ	0xFF5
  5895                           postinc0	equ	0xFEE
  5896                           wreg	equ	0xFE8
  5897                           postdec1	equ	0xFE5
  5898                           fsr1l	equ	0xFE1
  5899                           indf2	equ	0xFDF
  5900                           postinc2	equ	0xFDE
  5901                           postdec2	equ	0xFDD
  5902                           fsr2h	equ	0xFDA
  5903                           fsr2l	equ	0xFD9
  5904                           status	equ	0xFD8
  5905                           
  5906 ;; *************** function ___ftdiv *****************
  5907 ;; Defined at:
  5908 ;;		line 54 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  5909 ;; Parameters:    Size  Location     Type
  5910 ;;  f1              3    8[COMRAM] float 
  5911 ;;  f2              3   11[COMRAM] float 
  5912 ;; Auto vars:     Size  Location     Type
  5913 ;;  f3              3   18[COMRAM] float 
  5914 ;;  sign            1   22[COMRAM] unsigned char 
  5915 ;;  exp             1   21[COMRAM] unsigned char 
  5916 ;;  cntr            1   17[COMRAM] unsigned char 
  5917 ;; Return value:  Size  Location     Type
  5918 ;;                  3    8[COMRAM] float 
  5919 ;; Registers used:
  5920 ;;		wreg, status,2, status,0, cstack
  5921 ;; Tracked objects:
  5922 ;;		On entry : 0/0
  5923 ;;		On exit  : 0/0
  5924 ;;		Unchanged: 0/0
  5925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5926 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5927 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5928 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5929 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5930 ;;Total ram usage:       15 bytes
  5931 ;; Hardware stack levels used:    1
  5932 ;; Hardware stack levels required when called:    1
  5933 ;; This function calls:
  5934 ;;		___ftpack
  5935 ;; This function is called by:
  5936 ;;		_exp
  5937 ;; This function uses a non-reentrant model
  5938 ;;
  5939                           
  5940                           	psect	text31
  5941  002650                     __ptext31:
  5942                           	opt stack 0
  5943  002650                     ___ftdiv:
  5944                           	opt stack 23
  5945                           
  5946                           ;incstack = 0
  5947  002650  C00B  F00F         	movff	___ftdiv@f1+2,??___ftdiv
  5948  002654  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  5949  002656  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  5950  002658  340A               	rlcf	___ftdiv@f1+1,w,c
  5951  00265A  360F               	rlcf	??___ftdiv& (0+255),f,c
  5952  00265C  E301               	bnc	u3071
  5953  00265E  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  5954  002660                     u3071:
  5955  002660  500F               	movf	??___ftdiv,w,c
  5956  002662  6E16               	movwf	___ftdiv@exp,c
  5957  002664  5016               	movf	___ftdiv@exp,w,c
  5958  002666  A4D8               	btfss	status,2,c
  5959  002668  D007               	goto	l3832
  5960  00266A  0E00               	movlw	0
  5961  00266C  6E09               	movwf	?___ftdiv,c
  5962  00266E  0E00               	movlw	0
  5963  002670  6E0A               	movwf	?___ftdiv+1,c
  5964  002672  0E00               	movlw	0
  5965  002674  6E0B               	movwf	?___ftdiv+2,c
  5966  002676  0012               	return	
  5967  002678                     l3832:
  5968  002678  C00E  F00F         	movff	___ftdiv@f2+2,??___ftdiv
  5969  00267C  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  5970  00267E  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  5971  002680  340D               	rlcf	___ftdiv@f2+1,w,c
  5972  002682  360F               	rlcf	??___ftdiv& (0+255),f,c
  5973  002684  E301               	bnc	u3091
  5974  002686  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  5975  002688                     u3091:
  5976  002688  500F               	movf	??___ftdiv,w,c
  5977  00268A  6E17               	movwf	___ftdiv@sign,c
  5978  00268C  5017               	movf	___ftdiv@sign,w,c
  5979  00268E  A4D8               	btfss	status,2,c
  5980  002690  D007               	goto	l3838
  5981  002692  0E00               	movlw	0
  5982  002694  6E09               	movwf	?___ftdiv,c
  5983  002696  0E00               	movlw	0
  5984  002698  6E0A               	movwf	?___ftdiv+1,c
  5985  00269A  0E00               	movlw	0
  5986  00269C  6E0B               	movwf	?___ftdiv+2,c
  5987  00269E  0012               	return	
  5988  0026A0                     l3838:
  5989  0026A0  0E00               	movlw	0
  5990  0026A2  6E13               	movwf	___ftdiv@f3,c
  5991  0026A4  0E00               	movlw	0
  5992  0026A6  6E14               	movwf	___ftdiv@f3+1,c
  5993  0026A8  0E00               	movlw	0
  5994  0026AA  6E15               	movwf	___ftdiv@f3+2,c
  5995  0026AC  5017               	movf	___ftdiv@sign,w,c
  5996  0026AE  0F89               	addlw	137
  5997  0026B0  5E16               	subwf	___ftdiv@exp,f,c
  5998  0026B2  C00B  F017         	movff	___ftdiv@f1+2,___ftdiv@sign
  5999  0026B6  500E               	movf	___ftdiv@f2+2,w,c
  6000  0026B8  1A17               	xorwf	___ftdiv@sign,f,c
  6001  0026BA  0E80               	movlw	128
  6002  0026BC  1617               	andwf	___ftdiv@sign,f,c
  6003  0026BE  8E0A               	bsf	___ftdiv@f1+1,7,c
  6004  0026C0  0EFF               	movlw	255
  6005  0026C2  1609               	andwf	___ftdiv@f1,f,c
  6006  0026C4  0EFF               	movlw	255
  6007  0026C6  160A               	andwf	___ftdiv@f1+1,f,c
  6008  0026C8  0E00               	movlw	0
  6009  0026CA  160B               	andwf	___ftdiv@f1+2,f,c
  6010  0026CC  8E0D               	bsf	___ftdiv@f2+1,7,c
  6011  0026CE  0EFF               	movlw	255
  6012  0026D0  160C               	andwf	___ftdiv@f2,f,c
  6013  0026D2  0EFF               	movlw	255
  6014  0026D4  160D               	andwf	___ftdiv@f2+1,f,c
  6015  0026D6  0E00               	movlw	0
  6016  0026D8  160E               	andwf	___ftdiv@f2+2,f,c
  6017  0026DA  0E18               	movlw	24
  6018  0026DC  6E12               	movwf	___ftdiv@cntr,c
  6019  0026DE  D000               	goto	l3858
  6020  0026E0                     l3858:
  6021  0026E0  90D8               	bcf	status,0,c
  6022  0026E2  3613               	rlcf	___ftdiv@f3,f,c
  6023  0026E4  3614               	rlcf	___ftdiv@f3+1,f,c
  6024  0026E6  3615               	rlcf	___ftdiv@f3+2,f,c
  6025  0026E8  500C               	movf	___ftdiv@f2,w,c
  6026  0026EA  5C09               	subwf	___ftdiv@f1,w,c
  6027  0026EC  500D               	movf	___ftdiv@f2+1,w,c
  6028  0026EE  580A               	subwfb	___ftdiv@f1+1,w,c
  6029  0026F0  500E               	movf	___ftdiv@f2+2,w,c
  6030  0026F2  580B               	subwfb	___ftdiv@f1+2,w,c
  6031  0026F4  A0D8               	btfss	status,0,c
  6032  0026F6  D007               	goto	l1512
  6033  0026F8  500C               	movf	___ftdiv@f2,w,c
  6034  0026FA  5E09               	subwf	___ftdiv@f1,f,c
  6035  0026FC  500D               	movf	___ftdiv@f2+1,w,c
  6036  0026FE  5A0A               	subwfb	___ftdiv@f1+1,f,c
  6037  002700  500E               	movf	___ftdiv@f2+2,w,c
  6038  002702  5A0B               	subwfb	___ftdiv@f1+2,f,c
  6039  002704  8013               	bsf	___ftdiv@f3,0,c
  6040  002706                     l1512:
  6041  002706  90D8               	bcf	status,0,c
  6042  002708  3609               	rlcf	___ftdiv@f1,f,c
  6043  00270A  360A               	rlcf	___ftdiv@f1+1,f,c
  6044  00270C  360B               	rlcf	___ftdiv@f1+2,f,c
  6045  00270E  2E12               	decfsz	___ftdiv@cntr,f,c
  6046  002710  D7E7               	goto	l3858
  6047  002712  D000               	goto	l3868
  6048  002714                     l3868:
  6049  002714  C013  F001         	movff	___ftdiv@f3,___ftpack@arg
  6050  002718  C014  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6051  00271C  C015  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6052  002720  C016  F004         	movff	___ftdiv@exp,___ftpack@exp
  6053  002724  C017  F005         	movff	___ftdiv@sign,___ftpack@sign
  6054  002728  EC28  F016         	call	___ftpack	;wreg free
  6055  00272C  C001  F009         	movff	?___ftpack,?___ftdiv
  6056  002730  C002  F00A         	movff	?___ftpack+1,?___ftdiv+1
  6057  002734  C003  F00B         	movff	?___ftpack+2,?___ftdiv+2
  6058  002738  0012               	return	
  6059  00273A  0012               	return		;funcret
  6060  00273C                     __end_of___ftdiv:
  6061                           	opt stack 0
  6062                           tblptru	equ	0xFF8
  6063                           tblptrh	equ	0xFF7
  6064                           tblptrl	equ	0xFF6
  6065                           tablat	equ	0xFF5
  6066                           postinc0	equ	0xFEE
  6067                           wreg	equ	0xFE8
  6068                           postdec1	equ	0xFE5
  6069                           fsr1l	equ	0xFE1
  6070                           indf2	equ	0xFDF
  6071                           postinc2	equ	0xFDE
  6072                           postdec2	equ	0xFDD
  6073                           fsr2h	equ	0xFDA
  6074                           fsr2l	equ	0xFD9
  6075                           status	equ	0xFD8
  6076                           
  6077 ;; *************** function ___awtoft *****************
  6078 ;; Defined at:
  6079 ;;		line 32 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\awtoft.c"
  6080 ;; Parameters:    Size  Location     Type
  6081 ;;  c               2    8[COMRAM] int 
  6082 ;; Auto vars:     Size  Location     Type
  6083 ;;  sign            1   11[COMRAM] unsigned char 
  6084 ;; Return value:  Size  Location     Type
  6085 ;;                  3    8[COMRAM] float 
  6086 ;; Registers used:
  6087 ;;		wreg, status,2, status,0, cstack
  6088 ;; Tracked objects:
  6089 ;;		On entry : 0/0
  6090 ;;		On exit  : 0/0
  6091 ;;		Unchanged: 0/0
  6092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6093 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6094 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6096 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6097 ;;Total ram usage:        4 bytes
  6098 ;; Hardware stack levels used:    1
  6099 ;; Hardware stack levels required when called:    1
  6100 ;; This function calls:
  6101 ;;		___ftpack
  6102 ;; This function is called by:
  6103 ;;		_obtain_pass
  6104 ;;		_input_old_pass
  6105 ;;		_input_new_pass
  6106 ;;		_exp
  6107 ;;		_log
  6108 ;; This function uses a non-reentrant model
  6109 ;;
  6110                           
  6111                           	psect	text32
  6112  00383E                     __ptext32:
  6113                           	opt stack 0
  6114  00383E                     ___awtoft:
  6115                           	opt stack 23
  6116                           
  6117                           ;incstack = 0
  6118  00383E  0E00               	movlw	0
  6119  003840  6E0C               	movwf	___awtoft@sign,c
  6120  003842  AE0A               	btfss	___awtoft@c+1,7,c
  6121  003844  D007               	goto	l3888
  6122  003846  6C09               	negf	___awtoft@c,c
  6123  003848  1E0A               	comf	___awtoft@c+1,f,c
  6124  00384A  B0D8               	btfsc	status,0,c
  6125  00384C  2A0A               	incf	___awtoft@c+1,f,c
  6126  00384E  0E01               	movlw	1
  6127  003850  6E0C               	movwf	___awtoft@sign,c
  6128  003852  D000               	goto	l3888
  6129  003854                     l3888:
  6130  003854  C009  F001         	movff	___awtoft@c,___ftpack@arg
  6131  003858  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  6132  00385C  6A03               	clrf	___ftpack@arg+2,c
  6133  00385E  0E8E               	movlw	142
  6134  003860  6E04               	movwf	___ftpack@exp,c
  6135  003862  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  6136  003866  EC28  F016         	call	___ftpack	;wreg free
  6137  00386A  C001  F009         	movff	?___ftpack,?___awtoft
  6138  00386E  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  6139  003872  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  6140  003876  0012               	return	
  6141  003878  0012               	return		;funcret
  6142  00387A                     __end_of___awtoft:
  6143                           	opt stack 0
  6144                           tblptru	equ	0xFF8
  6145                           tblptrh	equ	0xFF7
  6146                           tblptrl	equ	0xFF6
  6147                           tablat	equ	0xFF5
  6148                           postinc0	equ	0xFEE
  6149                           wreg	equ	0xFE8
  6150                           postdec1	equ	0xFE5
  6151                           fsr1l	equ	0xFE1
  6152                           indf2	equ	0xFDF
  6153                           postinc2	equ	0xFDE
  6154                           postdec2	equ	0xFDD
  6155                           fsr2h	equ	0xFDA
  6156                           fsr2l	equ	0xFD9
  6157                           status	equ	0xFD8
  6158                           
  6159 ;; *************** function ___lltoft *****************
  6160 ;; Defined at:
  6161 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lltoft.c"
  6162 ;; Parameters:    Size  Location     Type
  6163 ;;  c               4    8[COMRAM] unsigned long 
  6164 ;; Auto vars:     Size  Location     Type
  6165 ;;  exp             1   16[COMRAM] unsigned char 
  6166 ;; Return value:  Size  Location     Type
  6167 ;;                  3    8[COMRAM] float 
  6168 ;; Registers used:
  6169 ;;		wreg, status,2, status,0, cstack
  6170 ;; Tracked objects:
  6171 ;;		On entry : 0/0
  6172 ;;		On exit  : 0/0
  6173 ;;		Unchanged: 0/0
  6174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6175 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6176 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6177 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6178 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6179 ;;Total ram usage:        9 bytes
  6180 ;; Hardware stack levels used:    1
  6181 ;; Hardware stack levels required when called:    1
  6182 ;; This function calls:
  6183 ;;		___ftpack
  6184 ;; This function is called by:
  6185 ;;		_pow
  6186 ;; This function uses a non-reentrant model
  6187 ;;
  6188                           
  6189                           	psect	text33
  6190  00348E                     __ptext33:
  6191                           	opt stack 0
  6192  00348E                     ___lltoft:
  6193                           	opt stack 24
  6194                           
  6195                           ;incstack = 0
  6196  00348E  0E8E               	movlw	142
  6197  003490  6E11               	movwf	___lltoft@exp,c
  6198  003492  D007               	goto	l4002
  6199  003494                     l4000:
  6200  003494  90D8               	bcf	status,0,c
  6201  003496  320C               	rrcf	___lltoft@c+3,f,c
  6202  003498  320B               	rrcf	___lltoft@c+2,f,c
  6203  00349A  320A               	rrcf	___lltoft@c+1,f,c
  6204  00349C  3209               	rrcf	___lltoft@c,f,c
  6205  00349E  2A11               	incf	___lltoft@exp,f,c
  6206  0034A0  D000               	goto	l4002
  6207  0034A2                     l4002:
  6208  0034A2  0E00               	movlw	0
  6209  0034A4  1409               	andwf	___lltoft@c,w,c
  6210  0034A6  6E0D               	movwf	??___lltoft& (0+255),c
  6211  0034A8  0E00               	movlw	0
  6212  0034AA  140A               	andwf	___lltoft@c+1,w,c
  6213  0034AC  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  6214  0034AE  0E00               	movlw	0
  6215  0034B0  140B               	andwf	___lltoft@c+2,w,c
  6216  0034B2  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  6217  0034B4  0EFF               	movlw	255
  6218  0034B6  140C               	andwf	___lltoft@c+3,w,c
  6219  0034B8  6E10               	movwf	(??___lltoft+3)& (0+255),c
  6220  0034BA  500D               	movf	??___lltoft,w,c
  6221  0034BC  100E               	iorwf	??___lltoft+1,w,c
  6222  0034BE  100F               	iorwf	??___lltoft+2,w,c
  6223  0034C0  1010               	iorwf	??___lltoft+3,w,c
  6224  0034C2  A4D8               	btfss	status,2,c
  6225  0034C4  D7E7               	goto	l4000
  6226  0034C6  C009  F001         	movff	___lltoft@c,___ftpack@arg
  6227  0034CA  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  6228  0034CE  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  6229  0034D2  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  6230  0034D6  0E00               	movlw	0
  6231  0034D8  6E05               	movwf	___ftpack@sign,c
  6232  0034DA  EC28  F016         	call	___ftpack	;wreg free
  6233  0034DE  C001  F009         	movff	?___ftpack,?___lltoft
  6234  0034E2  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  6235  0034E6  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  6236  0034EA  0012               	return	
  6237  0034EC  0012               	return		;funcret
  6238  0034EE                     __end_of___lltoft:
  6239                           	opt stack 0
  6240                           tblptru	equ	0xFF8
  6241                           tblptrh	equ	0xFF7
  6242                           tblptrl	equ	0xFF6
  6243                           tablat	equ	0xFF5
  6244                           postinc0	equ	0xFEE
  6245                           wreg	equ	0xFE8
  6246                           postdec1	equ	0xFE5
  6247                           fsr1l	equ	0xFE1
  6248                           indf2	equ	0xFDF
  6249                           postinc2	equ	0xFDE
  6250                           postdec2	equ	0xFDD
  6251                           fsr2h	equ	0xFDA
  6252                           fsr2l	equ	0xFD9
  6253                           status	equ	0xFD8
  6254                           
  6255 ;; *************** function _not_fill_pass *****************
  6256 ;; Defined at:
  6257 ;;		line 35 in file "lcd_vision.c"
  6258 ;; Parameters:    Size  Location     Type
  6259 ;;  digit           2    0[COMRAM] short 
  6260 ;; Auto vars:     Size  Location     Type
  6261 ;;		None
  6262 ;; Return value:  Size  Location     Type
  6263 ;;                  1    wreg      unsigned char 
  6264 ;; Registers used:
  6265 ;;		wreg, status,2, status,0
  6266 ;; Tracked objects:
  6267 ;;		On entry : 0/0
  6268 ;;		On exit  : 0/0
  6269 ;;		Unchanged: 0/0
  6270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6271 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6272 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6274 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6275 ;;Total ram usage:        2 bytes
  6276 ;; Hardware stack levels used:    1
  6277 ;; This function calls:
  6278 ;;		Nothing
  6279 ;; This function is called by:
  6280 ;;		_input_password
  6281 ;;		_input_old_pass
  6282 ;;		_input_new_pass
  6283 ;; This function uses a non-reentrant model
  6284 ;;
  6285                           
  6286                           	psect	text34
  6287  003AE2                     __ptext34:
  6288                           	opt stack 0
  6289  003AE2                     _not_fill_pass:
  6290                           	opt stack 27
  6291                           
  6292                           ;lcd_vision.c: 36: return digit !=16;
  6293                           
  6294                           ;incstack = 0
  6295  003AE2  0E10               	movlw	16
  6296  003AE4  1801               	xorwf	not_fill_pass@digit,w,c
  6297  003AE6  1002               	iorwf	not_fill_pass@digit+1,w,c
  6298  003AE8  B4D8               	btfsc	status,2,c
  6299  003AEA  D002               	goto	u4360
  6300  003AEC  0E01               	movlw	1
  6301  003AEE  0012               	return	
  6302  003AF0                     u4360:
  6303  003AF0  0E00               	movlw	0
  6304  003AF2  0012               	return	
  6305  003AF4  0012               	return		;funcret
  6306  003AF6                     __end_of_not_fill_pass:
  6307                           	opt stack 0
  6308                           tblptru	equ	0xFF8
  6309                           tblptrh	equ	0xFF7
  6310                           tblptrl	equ	0xFF6
  6311                           tablat	equ	0xFF5
  6312                           postinc0	equ	0xFEE
  6313                           wreg	equ	0xFE8
  6314                           postdec1	equ	0xFE5
  6315                           fsr1l	equ	0xFE1
  6316                           indf2	equ	0xFDF
  6317                           postinc2	equ	0xFDE
  6318                           postdec2	equ	0xFDD
  6319                           fsr2h	equ	0xFDA
  6320                           fsr2l	equ	0xFD9
  6321                           status	equ	0xFD8
  6322                           
  6323 ;; *************** function _clear_keyboard *****************
  6324 ;; Defined at:
  6325 ;;		line 4 in file "keyboard.c"
  6326 ;; Parameters:    Size  Location     Type
  6327 ;;		None
  6328 ;; Auto vars:     Size  Location     Type
  6329 ;;		None
  6330 ;; Return value:  Size  Location     Type
  6331 ;;		None               void
  6332 ;; Registers used:
  6333 ;;		wreg, status,2
  6334 ;; Tracked objects:
  6335 ;;		On entry : 0/0
  6336 ;;		On exit  : 0/0
  6337 ;;		Unchanged: 0/0
  6338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6342 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6343 ;;Total ram usage:        0 bytes
  6344 ;; Hardware stack levels used:    1
  6345 ;; This function calls:
  6346 ;;		Nothing
  6347 ;; This function is called by:
  6348 ;;		_next_code
  6349 ;;		_twinkle
  6350 ;;		_input_old_pass
  6351 ;;		_input_new_pass
  6352 ;;		_ver_opcion_cambio
  6353 ;; This function uses a non-reentrant model
  6354 ;;
  6355                           
  6356                           	psect	text35
  6357  003B6C                     __ptext35:
  6358                           	opt stack 0
  6359  003B6C                     _clear_keyboard:
  6360                           	opt stack 25
  6361                           
  6362                           ;keyboard.c: 5: key = 18;
  6363                           
  6364                           ;incstack = 0
  6365  003B6C  0E12               	movlw	18
  6366  003B6E  0100               	movlb	0	; () banked
  6367  003B70  6FDE               	movwf	_key& (0+255),b
  6368                           
  6369                           ; BSR set to: 0
  6370  003B72  0012               	return		;funcret
  6371  003B74                     __end_of_clear_keyboard:
  6372                           	opt stack 0
  6373                           tblptru	equ	0xFF8
  6374                           tblptrh	equ	0xFF7
  6375                           tblptrl	equ	0xFF6
  6376                           tablat	equ	0xFF5
  6377                           postinc0	equ	0xFEE
  6378                           wreg	equ	0xFE8
  6379                           postdec1	equ	0xFE5
  6380                           fsr1l	equ	0xFE1
  6381                           indf2	equ	0xFDF
  6382                           postinc2	equ	0xFDE
  6383                           postdec2	equ	0xFDD
  6384                           fsr2h	equ	0xFDA
  6385                           fsr2l	equ	0xFD9
  6386                           status	equ	0xFD8
  6387                           
  6388 ;; *************** function __delay_s *****************
  6389 ;; Defined at:
  6390 ;;		line 22 in file "lcd_vision.c"
  6391 ;; Parameters:    Size  Location     Type
  6392 ;;  millis          2    8[COMRAM] int 
  6393 ;; Auto vars:     Size  Location     Type
  6394 ;;  index           2   13[COMRAM] short 
  6395 ;;  it              2   11[COMRAM] short 
  6396 ;; Return value:  Size  Location     Type
  6397 ;;		None               void
  6398 ;; Registers used:
  6399 ;;		wreg, status,2, status,0, cstack
  6400 ;; Tracked objects:
  6401 ;;		On entry : 0/0
  6402 ;;		On exit  : 0/0
  6403 ;;		Unchanged: 0/0
  6404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6405 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6406 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6407 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6408 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6409 ;;Total ram usage:        7 bytes
  6410 ;; Hardware stack levels used:    1
  6411 ;; Hardware stack levels required when called:    1
  6412 ;; This function calls:
  6413 ;;		___awdiv
  6414 ;; This function is called by:
  6415 ;;		_twinkle
  6416 ;;		_input_old_pass
  6417 ;;		_show_success
  6418 ;;		_show_error
  6419 ;;		_input_new_pass
  6420 ;; This function uses a non-reentrant model
  6421 ;;
  6422                           
  6423                           	psect	text36
  6424  0035A8                     __ptext36:
  6425                           	opt stack 0
  6426  0035A8                     __delay_s:
  6427                           	opt stack 27
  6428                           
  6429                           ;lcd_vision.c: 23: short it = millis/100;
  6430                           
  6431                           ; BSR set to: 0
  6432                           ;incstack = 0
  6433  0035A8  C009  F001         	movff	__delay_s@millis,___awdiv@dividend
  6434  0035AC  C00A  F002         	movff	__delay_s@millis+1,___awdiv@dividend+1
  6435  0035B0  0E00               	movlw	0
  6436  0035B2  6E04               	movwf	___awdiv@divisor+1,c
  6437  0035B4  0E64               	movlw	100
  6438  0035B6  6E03               	movwf	___awdiv@divisor,c
  6439  0035B8  EC78  F017         	call	___awdiv	;wreg free
  6440  0035BC  C001  F00C         	movff	?___awdiv,__delay_s@it
  6441  0035C0  C002  F00D         	movff	?___awdiv+1,__delay_s@it+1
  6442                           
  6443                           ;lcd_vision.c: 24: short index = 1;
  6444  0035C4  0E00               	movlw	0
  6445  0035C6  6E0F               	movwf	__delay_s@index+1,c
  6446  0035C8  0E01               	movlw	1
  6447  0035CA  6E0E               	movwf	__delay_s@index,c
  6448                           
  6449                           ;lcd_vision.c: 26: for(index = 1; index <= it; index++){
  6450  0035CC  0E00               	movlw	0
  6451  0035CE  6E0F               	movwf	__delay_s@index+1,c
  6452  0035D0  0E01               	movlw	1
  6453  0035D2  6E0E               	movwf	__delay_s@index,c
  6454  0035D4  D00A               	goto	l620
  6455  0035D6                     l4602:
  6456                           
  6457                           ;lcd_vision.c: 27: _delay((unsigned long)((98)*(8000000/4000.0)));
  6458  0035D6  0EFF               	movlw	255
  6459  0035D8  6E0B               	movwf	??__delay_s& (0+255),c
  6460  0035DA  0E8A               	movlw	138
  6461  0035DC                     u4947:
  6462  0035DC  2EE8               	decfsz	wreg,f,c
  6463  0035DE  D7FE               	goto	u4947
  6464  0035E0  2E0B               	decfsz	??__delay_s& (0+255),f,c
  6465  0035E2  D7FC               	goto	u4947
  6466  0035E4  D000               	nop2	
  6467  0035E6  4A0E               	infsnz	__delay_s@index,f,c
  6468  0035E8  2A0F               	incf	__delay_s@index+1,f,c
  6469  0035EA                     l620:
  6470  0035EA  500E               	movf	__delay_s@index,w,c
  6471  0035EC  5C0C               	subwf	__delay_s@it,w,c
  6472  0035EE  500D               	movf	__delay_s@it+1,w,c
  6473  0035F0  0A80               	xorlw	128
  6474  0035F2  6E0B               	movwf	??__delay_s& (0+255),c
  6475  0035F4  500F               	movf	__delay_s@index+1,w,c
  6476  0035F6  0A80               	xorlw	128
  6477  0035F8  580B               	subwfb	??__delay_s& (0+255),w,c
  6478  0035FA  B0D8               	btfsc	status,0,c
  6479  0035FC  D7EC               	goto	l4602
  6480  0035FE  0012               	return		;funcret
  6481  003600                     __end_of__delay_s:
  6482                           	opt stack 0
  6483                           tblptru	equ	0xFF8
  6484                           tblptrh	equ	0xFF7
  6485                           tblptrl	equ	0xFF6
  6486                           tablat	equ	0xFF5
  6487                           postinc0	equ	0xFEE
  6488                           wreg	equ	0xFE8
  6489                           postdec1	equ	0xFE5
  6490                           fsr1l	equ	0xFE1
  6491                           indf2	equ	0xFDF
  6492                           postinc2	equ	0xFDE
  6493                           postdec2	equ	0xFDD
  6494                           fsr2h	equ	0xFDA
  6495                           fsr2l	equ	0xFD9
  6496                           status	equ	0xFD8
  6497                           
  6498 ;; *************** function ___lbtoft *****************
  6499 ;; Defined at:
  6500 ;;		line 27 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lbtoft.c"
  6501 ;; Parameters:    Size  Location     Type
  6502 ;;  c               1    wreg     unsigned char 
  6503 ;; Auto vars:     Size  Location     Type
  6504 ;;  c               1   11[COMRAM] unsigned char 
  6505 ;; Return value:  Size  Location     Type
  6506 ;;                  3    8[COMRAM] float 
  6507 ;; Registers used:
  6508 ;;		wreg, status,2, status,0, cstack
  6509 ;; Tracked objects:
  6510 ;;		On entry : 0/0
  6511 ;;		On exit  : 0/0
  6512 ;;		Unchanged: 0/0
  6513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6514 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6515 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6517 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6518 ;;Total ram usage:        4 bytes
  6519 ;; Hardware stack levels used:    1
  6520 ;; Hardware stack levels required when called:    1
  6521 ;; This function calls:
  6522 ;;		___ftpack
  6523 ;; This function is called by:
  6524 ;;		_obtain_pass
  6525 ;;		_input_old_pass
  6526 ;;		_input_new_pass
  6527 ;; This function uses a non-reentrant model
  6528 ;;
  6529                           
  6530                           	psect	text37
  6531  0039FC                     __ptext37:
  6532                           	opt stack 0
  6533  0039FC                     ___lbtoft:
  6534                           	opt stack 25
  6535                           
  6536                           ;incstack = 0
  6537                           ;___lbtoft@c stored from wreg
  6538  0039FC  6E0C               	movwf	___lbtoft@c,c
  6539  0039FE  500C               	movf	___lbtoft@c,w,c
  6540  003A00  6E01               	movwf	___ftpack@arg,c
  6541  003A02  6A02               	clrf	___ftpack@arg+1,c
  6542  003A04  6A03               	clrf	___ftpack@arg+2,c
  6543  003A06  0E8E               	movlw	142
  6544  003A08  6E04               	movwf	___ftpack@exp,c
  6545  003A0A  0E00               	movlw	0
  6546  003A0C  6E05               	movwf	___ftpack@sign,c
  6547  003A0E  EC28  F016         	call	___ftpack	;wreg free
  6548  003A12  C001  F009         	movff	?___ftpack,?___lbtoft
  6549  003A16  C002  F00A         	movff	?___ftpack+1,?___lbtoft+1
  6550  003A1A  C003  F00B         	movff	?___ftpack+2,?___lbtoft+2
  6551  003A1E  0012               	return	
  6552  003A20  0012               	return		;funcret
  6553  003A22                     __end_of___lbtoft:
  6554                           	opt stack 0
  6555                           tblptru	equ	0xFF8
  6556                           tblptrh	equ	0xFF7
  6557                           tblptrl	equ	0xFF6
  6558                           tablat	equ	0xFF5
  6559                           postinc0	equ	0xFEE
  6560                           wreg	equ	0xFE8
  6561                           postdec1	equ	0xFE5
  6562                           fsr1l	equ	0xFE1
  6563                           indf2	equ	0xFDF
  6564                           postinc2	equ	0xFDE
  6565                           postdec2	equ	0xFDD
  6566                           fsr2h	equ	0xFDA
  6567                           fsr2l	equ	0xFD9
  6568                           status	equ	0xFD8
  6569                           
  6570 ;; *************** function ___ftpack *****************
  6571 ;; Defined at:
  6572 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\float.c"
  6573 ;; Parameters:    Size  Location     Type
  6574 ;;  arg             3    0[COMRAM] unsigned um
  6575 ;;  exp             1    3[COMRAM] unsigned char 
  6576 ;;  sign            1    4[COMRAM] unsigned char 
  6577 ;; Auto vars:     Size  Location     Type
  6578 ;;		None
  6579 ;; Return value:  Size  Location     Type
  6580 ;;                  3    0[COMRAM] float 
  6581 ;; Registers used:
  6582 ;;		wreg, status,2, status,0
  6583 ;; Tracked objects:
  6584 ;;		On entry : 0/0
  6585 ;;		On exit  : 0/0
  6586 ;;		Unchanged: 0/0
  6587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6588 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6590 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6591 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6592 ;;Total ram usage:        8 bytes
  6593 ;; Hardware stack levels used:    1
  6594 ;; This function calls:
  6595 ;;		Nothing
  6596 ;; This function is called by:
  6597 ;;		___altoft
  6598 ;;		___awtoft
  6599 ;;		___ftadd
  6600 ;;		___ftdiv
  6601 ;;		___ftmul
  6602 ;;		___lbtoft
  6603 ;;		___lltoft
  6604 ;; This function uses a non-reentrant model
  6605 ;;
  6606                           
  6607                           	psect	text38
  6608  002C50                     __ptext38:
  6609                           	opt stack 0
  6610  002C50                     ___ftpack:
  6611                           	opt stack 22
  6612                           
  6613                           ;incstack = 0
  6614  002C50  5004               	movf	___ftpack@exp,w,c
  6615  002C52  B4D8               	btfsc	status,2,c
  6616  002C54  D005               	goto	l3542
  6617  002C56  5001               	movf	___ftpack@arg,w,c
  6618  002C58  1002               	iorwf	___ftpack@arg+1,w,c
  6619  002C5A  1003               	iorwf	___ftpack@arg+2,w,c
  6620  002C5C  A4D8               	btfss	status,2,c
  6621  002C5E  D00E               	goto	l3548
  6622  002C60                     l3542:
  6623  002C60  0E00               	movlw	0
  6624  002C62  6E01               	movwf	?___ftpack,c
  6625  002C64  0E00               	movlw	0
  6626  002C66  6E02               	movwf	?___ftpack+1,c
  6627  002C68  0E00               	movlw	0
  6628  002C6A  6E03               	movwf	?___ftpack+2,c
  6629  002C6C  0012               	return	
  6630  002C6E  D006               	goto	l3548
  6631  002C70                     l3546:
  6632  002C70  2A04               	incf	___ftpack@exp,f,c
  6633  002C72  90D8               	bcf	status,0,c
  6634  002C74  3203               	rrcf	___ftpack@arg+2,f,c
  6635  002C76  3202               	rrcf	___ftpack@arg+1,f,c
  6636  002C78  3201               	rrcf	___ftpack@arg,f,c
  6637  002C7A  D000               	goto	l3548
  6638  002C7C                     l3548:
  6639  002C7C  0E00               	movlw	0
  6640  002C7E  1401               	andwf	___ftpack@arg,w,c
  6641  002C80  6E06               	movwf	??___ftpack& (0+255),c
  6642  002C82  0E00               	movlw	0
  6643  002C84  1402               	andwf	___ftpack@arg+1,w,c
  6644  002C86  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6645  002C88  0EFE               	movlw	254
  6646  002C8A  1403               	andwf	___ftpack@arg+2,w,c
  6647  002C8C  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6648  002C8E  5006               	movf	??___ftpack,w,c
  6649  002C90  1007               	iorwf	??___ftpack+1,w,c
  6650  002C92  1008               	iorwf	??___ftpack+2,w,c
  6651  002C94  B4D8               	btfsc	status,2,c
  6652  002C96  D00E               	goto	l3554
  6653  002C98  D7EB               	goto	l3546
  6654  002C9A  D00C               	goto	l3554
  6655  002C9C                     l3550:
  6656  002C9C  2A04               	incf	___ftpack@exp,f,c
  6657  002C9E  0E01               	movlw	1
  6658  002CA0  2601               	addwf	___ftpack@arg,f,c
  6659  002CA2  0E00               	movlw	0
  6660  002CA4  2202               	addwfc	___ftpack@arg+1,f,c
  6661  002CA6  0E00               	movlw	0
  6662  002CA8  2203               	addwfc	___ftpack@arg+2,f,c
  6663  002CAA  90D8               	bcf	status,0,c
  6664  002CAC  3203               	rrcf	___ftpack@arg+2,f,c
  6665  002CAE  3202               	rrcf	___ftpack@arg+1,f,c
  6666  002CB0  3201               	rrcf	___ftpack@arg,f,c
  6667  002CB2  D000               	goto	l3554
  6668  002CB4                     l3554:
  6669  002CB4  0E00               	movlw	0
  6670  002CB6  1401               	andwf	___ftpack@arg,w,c
  6671  002CB8  6E06               	movwf	??___ftpack& (0+255),c
  6672  002CBA  0E00               	movlw	0
  6673  002CBC  1402               	andwf	___ftpack@arg+1,w,c
  6674  002CBE  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6675  002CC0  0EFF               	movlw	255
  6676  002CC2  1403               	andwf	___ftpack@arg+2,w,c
  6677  002CC4  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6678  002CC6  5006               	movf	??___ftpack,w,c
  6679  002CC8  1007               	iorwf	??___ftpack+1,w,c
  6680  002CCA  1008               	iorwf	??___ftpack+2,w,c
  6681  002CCC  B4D8               	btfsc	status,2,c
  6682  002CCE  D008               	goto	l3558
  6683  002CD0  D7E5               	goto	l3550
  6684  002CD2  D006               	goto	l3558
  6685  002CD4                     l3556:
  6686  002CD4  0604               	decf	___ftpack@exp,f,c
  6687  002CD6  90D8               	bcf	status,0,c
  6688  002CD8  3601               	rlcf	___ftpack@arg,f,c
  6689  002CDA  3602               	rlcf	___ftpack@arg+1,f,c
  6690  002CDC  3603               	rlcf	___ftpack@arg+2,f,c
  6691  002CDE  D000               	goto	l3558
  6692  002CE0                     l3558:
  6693  002CE0  BE02               	btfsc	___ftpack@arg+1,7,c
  6694  002CE2  D004               	goto	l1448
  6695  002CE4  0E02               	movlw	2
  6696  002CE6  6004               	cpfslt	___ftpack@exp,c
  6697  002CE8  D7F5               	goto	l3556
  6698  002CEA  D000               	goto	l1448
  6699  002CEC                     l1448:
  6700  002CEC  B004               	btfsc	___ftpack@exp,0,c
  6701  002CEE  D002               	goto	l3564
  6702  002CF0  9E02               	bcf	___ftpack@arg+1,7,c
  6703  002CF2  D000               	goto	l3564
  6704  002CF4                     l3564:
  6705  002CF4  90D8               	bcf	status,0,c
  6706  002CF6  3204               	rrcf	___ftpack@exp,f,c
  6707  002CF8  5004               	movf	___ftpack@exp,w,c
  6708  002CFA  1203               	iorwf	___ftpack@arg+2,f,c
  6709  002CFC  5005               	movf	___ftpack@sign,w,c
  6710  002CFE  B4D8               	btfsc	status,2,c
  6711  002D00  D002               	goto	l3570
  6712  002D02  8E03               	bsf	___ftpack@arg+2,7,c
  6713  002D04  D000               	goto	l3570
  6714  002D06                     l3570:
  6715  002D06  C001  F001         	movff	___ftpack@arg,?___ftpack
  6716  002D0A  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6717  002D0E  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6718  002D12  0012               	return	
  6719  002D14  0012               	return		;funcret
  6720  002D16                     __end_of___ftpack:
  6721                           	opt stack 0
  6722                           tblptru	equ	0xFF8
  6723                           tblptrh	equ	0xFF7
  6724                           tblptrl	equ	0xFF6
  6725                           tablat	equ	0xFF5
  6726                           postinc0	equ	0xFEE
  6727                           wreg	equ	0xFE8
  6728                           postdec1	equ	0xFE5
  6729                           fsr1l	equ	0xFE1
  6730                           indf2	equ	0xFDF
  6731                           postinc2	equ	0xFDE
  6732                           postdec2	equ	0xFDD
  6733                           fsr2h	equ	0xFDA
  6734                           fsr2l	equ	0xFD9
  6735                           status	equ	0xFD8
  6736                           
  6737 ;; *************** function _changePass *****************
  6738 ;; Defined at:
  6739 ;;		line 7 in file "config.c"
  6740 ;; Parameters:    Size  Location     Type
  6741 ;;  pass            2    0[COMRAM] int 
  6742 ;; Auto vars:     Size  Location     Type
  6743 ;;		None
  6744 ;; Return value:  Size  Location     Type
  6745 ;;		None               void
  6746 ;; Registers used:
  6747 ;;		None
  6748 ;; Tracked objects:
  6749 ;;		On entry : 0/0
  6750 ;;		On exit  : 0/0
  6751 ;;		Unchanged: 0/0
  6752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6753 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6756 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6757 ;;Total ram usage:        2 bytes
  6758 ;; Hardware stack levels used:    1
  6759 ;; This function calls:
  6760 ;;		Nothing
  6761 ;; This function is called by:
  6762 ;;		_ver_opcion_cambio
  6763 ;; This function uses a non-reentrant model
  6764 ;;
  6765                           
  6766                           	psect	text39
  6767  003B62                     __ptext39:
  6768                           	opt stack 0
  6769  003B62                     _changePass:
  6770                           	opt stack 28
  6771                           
  6772                           ;config.c: 8: password = pass;
  6773                           
  6774                           ;incstack = 0
  6775  003B62  C001  F0DA         	movff	changePass@pass,_password
  6776  003B66  C002  F0DB         	movff	changePass@pass+1,_password+1
  6777  003B6A  0012               	return		;funcret
  6778  003B6C                     __end_of_changePass:
  6779                           	opt stack 0
  6780                           tblptru	equ	0xFF8
  6781                           tblptrh	equ	0xFF7
  6782                           tblptrl	equ	0xFF6
  6783                           tablat	equ	0xFF5
  6784                           postinc0	equ	0xFEE
  6785                           wreg	equ	0xFE8
  6786                           postdec1	equ	0xFE5
  6787                           fsr1l	equ	0xFE1
  6788                           indf2	equ	0xFDF
  6789                           postinc2	equ	0xFDE
  6790                           postdec2	equ	0xFDD
  6791                           fsr2h	equ	0xFDA
  6792                           fsr2l	equ	0xFD9
  6793                           status	equ	0xFD8
  6794                           
  6795 ;; *************** function _ver_info *****************
  6796 ;; Defined at:
  6797 ;;		line 93 in file "menu.c"
  6798 ;; Parameters:    Size  Location     Type
  6799 ;;		None
  6800 ;; Auto vars:     Size  Location     Type
  6801 ;;  input           1   36[COMRAM] unsigned char 
  6802 ;; Return value:  Size  Location     Type
  6803 ;;		None               void
  6804 ;; Registers used:
  6805 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6806 ;; Tracked objects:
  6807 ;;		On entry : 0/0
  6808 ;;		On exit  : 0/0
  6809 ;;		Unchanged: 0/0
  6810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6812 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6814 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6815 ;;Total ram usage:        1 bytes
  6816 ;; Hardware stack levels used:    1
  6817 ;; Hardware stack levels required when called:    6
  6818 ;; This function calls:
  6819 ;;		_clear
  6820 ;;		_lcd_gotoxy
  6821 ;;		_lcd_putrs
  6822 ;;		_read_keyboard
  6823 ;;		_sprintf
  6824 ;; This function is called by:
  6825 ;;		_select_menu
  6826 ;; This function uses a non-reentrant model
  6827 ;;
  6828                           
  6829                           	psect	text40
  6830  0028FC                     __ptext40:
  6831                           	opt stack 0
  6832  0028FC                     _ver_info:
  6833                           	opt stack 23
  6834                           
  6835                           ;menu.c: 94: clear();
  6836                           
  6837                           ;incstack = 0
  6838  0028FC  EC66  F01D         	call	_clear	;wreg free
  6839                           
  6840                           ;menu.c: 95: char input = 18;
  6841  002900  0E12               	movlw	18
  6842  002902  D061               	goto	L5
  6843  002904                     l5062:
  6844                           
  6845                           ;menu.c: 97: lcd_gotoxy(1,1);
  6846  002904  0E01               	movlw	1
  6847  002906  6E05               	movwf	lcd_gotoxy@y,c
  6848  002908  0E01               	movlw	1
  6849  00290A  EC35  F01D         	call	_lcd_gotoxy
  6850                           
  6851                           ;menu.c: 98: lcd_putrs("Sensor: ");
  6852  00290E  0EBF               	movlw	low STR_25
  6853  002910  6E09               	movwf	lcd_putrs@ptr,c
  6854  002912  0E0F               	movlw	high STR_25
  6855  002914  6E0A               	movwf	lcd_putrs@ptr+1,c
  6856  002916  EC00  F01B         	call	_lcd_putrs	;wreg free
  6857                           
  6858                           ;menu.c: 99: sprintf(buffer2,"%02u",sensorDisparado);
  6859  00291A  0E98               	movlw	low _buffer2
  6860  00291C  6E0D               	movwf	sprintf@sp,c
  6861  00291E  0E00               	movlw	high _buffer2
  6862  002920  6E0E               	movwf	sprintf@sp+1,c
  6863  002922  0E71               	movlw	low (STR_11+10)
  6864  002924  6E0F               	movwf	sprintf@f,c
  6865  002926  0E0F               	movlw	high (STR_11+10)
  6866  002928  6E10               	movwf	sprintf@f+1,c
  6867  00292A  C097  F011         	movff	_sensorDisparado,?_sprintf+4
  6868  00292E  6A12               	clrf	?_sprintf+5,c
  6869  002930  EC4E  F009         	call	_sprintf	;wreg free
  6870                           
  6871                           ;menu.c: 100: lcd_putrs(buffer2);
  6872  002934  0E98               	movlw	low _buffer2
  6873  002936  6E09               	movwf	lcd_putrs@ptr,c
  6874  002938  0E00               	movlw	high _buffer2
  6875  00293A  6E0A               	movwf	lcd_putrs@ptr+1,c
  6876  00293C  EC00  F01B         	call	_lcd_putrs	;wreg free
  6877                           
  6878                           ;menu.c: 101: lcd_gotoxy(1,2);
  6879  002940  0E02               	movlw	2
  6880  002942  6E05               	movwf	lcd_gotoxy@y,c
  6881  002944  0E01               	movlw	1
  6882  002946  EC35  F01D         	call	_lcd_gotoxy
  6883                           
  6884                           ;menu.c: 102: lcd_putrs("Date:");
  6885  00294A  0ED0               	movlw	low STR_27
  6886  00294C  6E09               	movwf	lcd_putrs@ptr,c
  6887  00294E  0E0F               	movlw	high STR_27
  6888  002950  6E0A               	movwf	lcd_putrs@ptr+1,c
  6889  002952  EC00  F01B         	call	_lcd_putrs	;wreg free
  6890                           
  6891                           ;menu.c: 103: sprintf(buffer2,"%02u/%02u",diaDisparo,mesDisparo);
  6892  002956  0E98               	movlw	low _buffer2
  6893  002958  6E0D               	movwf	sprintf@sp,c
  6894  00295A  0E00               	movlw	high _buffer2
  6895  00295C  6E0E               	movwf	sprintf@sp+1,c
  6896  00295E  0E6C               	movlw	low (STR_11+5)
  6897  002960  6E0F               	movwf	sprintf@f,c
  6898  002962  0E0F               	movlw	high (STR_11+5)
  6899  002964  6E10               	movwf	sprintf@f+1,c
  6900  002966  C082  F011         	movff	_diaDisparo,?_sprintf+4
  6901  00296A  C083  F012         	movff	_diaDisparo+1,?_sprintf+5
  6902  00296E  C08E  F013         	movff	_mesDisparo,?_sprintf+6
  6903  002972  C08F  F014         	movff	_mesDisparo+1,?_sprintf+7
  6904  002976  EC4E  F009         	call	_sprintf	;wreg free
  6905                           
  6906                           ;menu.c: 104: lcd_putrs(buffer2);
  6907  00297A  0E98               	movlw	low _buffer2
  6908  00297C  6E09               	movwf	lcd_putrs@ptr,c
  6909  00297E  0E00               	movlw	high _buffer2
  6910  002980  6E0A               	movwf	lcd_putrs@ptr+1,c
  6911  002982  EC00  F01B         	call	_lcd_putrs	;wreg free
  6912                           
  6913                           ;menu.c: 105: lcd_putrs(" ");
  6914  002986  0EA8               	movlw	low (STR_15+9)
  6915  002988  6E09               	movwf	lcd_putrs@ptr,c
  6916  00298A  0E0F               	movlw	high (STR_15+9)
  6917  00298C  6E0A               	movwf	lcd_putrs@ptr+1,c
  6918  00298E  EC00  F01B         	call	_lcd_putrs	;wreg free
  6919                           
  6920                           ;menu.c: 106: sprintf(buffer2,"%02u:%02u",horaDisparo,minDisparo);
  6921  002992  0E98               	movlw	low _buffer2
  6922  002994  6E0D               	movwf	sprintf@sp,c
  6923  002996  0E00               	movlw	high _buffer2
  6924  002998  6E0E               	movwf	sprintf@sp+1,c
  6925  00299A  0EB5               	movlw	low STR_12
  6926  00299C  6E0F               	movwf	sprintf@f,c
  6927  00299E  0E0F               	movlw	high STR_12
  6928  0029A0  6E10               	movwf	sprintf@f+1,c
  6929  0029A2  C086  F011         	movff	_horaDisparo,?_sprintf+4
  6930  0029A6  C087  F012         	movff	_horaDisparo+1,?_sprintf+5
  6931  0029AA  C090  F013         	movff	_minDisparo,?_sprintf+6
  6932  0029AE  C091  F014         	movff	_minDisparo+1,?_sprintf+7
  6933  0029B2  EC4E  F009         	call	_sprintf	;wreg free
  6934                           
  6935                           ;menu.c: 107: lcd_putrs(buffer2);
  6936  0029B6  0E98               	movlw	low _buffer2
  6937  0029B8  6E09               	movwf	lcd_putrs@ptr,c
  6938  0029BA  0E00               	movlw	high _buffer2
  6939  0029BC  6E0A               	movwf	lcd_putrs@ptr+1,c
  6940  0029BE  EC00  F01B         	call	_lcd_putrs	;wreg free
  6941                           
  6942                           ;menu.c: 108: input = read_keyboard();
  6943  0029C2  ECF2  F007         	call	_read_keyboard	;wreg free
  6944  0029C6                     L5:
  6945  0029C6  6E25               	movwf	ver_info@input,c
  6946  0029C8  D000               	goto	l5082
  6947  0029CA                     l5082:
  6948  0029CA  0E10               	movlw	16
  6949  0029CC  1825               	xorwf	ver_info@input,w,c
  6950  0029CE  A4D8               	btfss	status,2,c
  6951  0029D0  D799               	goto	l5062
  6952                           
  6953                           ;menu.c: 109: }
  6954                           ;menu.c: 110: menu = 18;
  6955  0029D2  0E12               	movlw	18
  6956  0029D4  0100               	movlb	0	; () banked
  6957  0029D6  6FDF               	movwf	_menu& (0+255),b
  6958                           
  6959                           ; BSR set to: 0
  6960  0029D8  0012               	return		;funcret
  6961  0029DA                     __end_of_ver_info:
  6962                           	opt stack 0
  6963                           tblptru	equ	0xFF8
  6964                           tblptrh	equ	0xFF7
  6965                           tblptrl	equ	0xFF6
  6966                           tablat	equ	0xFF5
  6967                           postinc0	equ	0xFEE
  6968                           wreg	equ	0xFE8
  6969                           postdec1	equ	0xFE5
  6970                           fsr1l	equ	0xFE1
  6971                           indf2	equ	0xFDF
  6972                           postinc2	equ	0xFDE
  6973                           postdec2	equ	0xFDD
  6974                           fsr2h	equ	0xFDA
  6975                           fsr2l	equ	0xFD9
  6976                           status	equ	0xFD8
  6977                           
  6978 ;; *************** function _clear *****************
  6979 ;; Defined at:
  6980 ;;		line 7 in file "lcd_vision.c"
  6981 ;; Parameters:    Size  Location     Type
  6982 ;;		None
  6983 ;; Auto vars:     Size  Location     Type
  6984 ;;		None
  6985 ;; Return value:  Size  Location     Type
  6986 ;;		None               void
  6987 ;; Registers used:
  6988 ;;		wreg, status,2, status,0, cstack
  6989 ;; Tracked objects:
  6990 ;;		On entry : 0/0
  6991 ;;		On exit  : 0/0
  6992 ;;		Unchanged: 0/0
  6993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6996 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6997 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6998 ;;Total ram usage:        1 bytes
  6999 ;; Hardware stack levels used:    1
  7000 ;; Hardware stack levels required when called:    3
  7001 ;; This function calls:
  7002 ;;		_lcd_comand
  7003 ;; This function is called by:
  7004 ;;		_set_vision
  7005 ;;		_show_success
  7006 ;;		_show_error
  7007 ;;		_ver_opcion_cambio
  7008 ;;		_ver_info
  7009 ;; This function uses a non-reentrant model
  7010 ;;
  7011                           
  7012                           	psect	text41
  7013  003ACC                     __ptext41:
  7014                           	opt stack 0
  7015  003ACC                     _clear:
  7016                           	opt stack 26
  7017                           
  7018                           ;lcd_vision.c: 8: lcd_comand(0b00000001);
  7019                           
  7020                           ; BSR set to: 0
  7021                           ;incstack = 0
  7022  003ACC  0E01               	movlw	1
  7023  003ACE  ECAA  F01D         	call	_lcd_comand
  7024                           
  7025                           ;lcd_vision.c: 9: _delay((unsigned long)((5)*(8000000/4000.0)));
  7026  003AD2  0E0D               	movlw	13
  7027  003AD4  6E06               	movwf	??_clear& (0+255),c
  7028  003AD6  0EFC               	movlw	252
  7029  003AD8                     u4957:
  7030  003AD8  2EE8               	decfsz	wreg,f,c
  7031  003ADA  D7FE               	goto	u4957
  7032  003ADC  2E06               	decfsz	??_clear& (0+255),f,c
  7033  003ADE  D7FC               	goto	u4957
  7034  003AE0  0012               	return		;funcret
  7035  003AE2                     __end_of_clear:
  7036                           	opt stack 0
  7037                           tblptru	equ	0xFF8
  7038                           tblptrh	equ	0xFF7
  7039                           tblptrl	equ	0xFF6
  7040                           tablat	equ	0xFF5
  7041                           postinc0	equ	0xFEE
  7042                           wreg	equ	0xFE8
  7043                           postdec1	equ	0xFE5
  7044                           fsr1l	equ	0xFE1
  7045                           indf2	equ	0xFDF
  7046                           postinc2	equ	0xFDE
  7047                           postdec2	equ	0xFDD
  7048                           fsr2h	equ	0xFDA
  7049                           fsr2l	equ	0xFD9
  7050                           status	equ	0xFD8
  7051                           
  7052 ;; *************** function _dispararSensor *****************
  7053 ;; Defined at:
  7054 ;;		line 114 in file "menu.c"
  7055 ;; Parameters:    Size  Location     Type
  7056 ;;  sensor          2   18[COMRAM] int 
  7057 ;; Auto vars:     Size  Location     Type
  7058 ;;		None
  7059 ;; Return value:  Size  Location     Type
  7060 ;;		None               void
  7061 ;; Registers used:
  7062 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7063 ;; Tracked objects:
  7064 ;;		On entry : 0/0
  7065 ;;		On exit  : 0/0
  7066 ;;		Unchanged: 0/0
  7067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7068 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7071 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7072 ;;Total ram usage:        2 bytes
  7073 ;; Hardware stack levels used:    1
  7074 ;; Hardware stack levels required when called:    2
  7075 ;; This function calls:
  7076 ;;		_Read_RTC
  7077 ;; This function is called by:
  7078 ;;		_select_menu
  7079 ;; This function uses a non-reentrant model
  7080 ;;
  7081                           
  7082                           	psect	text42
  7083  003978                     __ptext42:
  7084                           	opt stack 0
  7085  003978                     _dispararSensor:
  7086                           	opt stack 27
  7087                           
  7088                           ;menu.c: 115: Read_RTC();
  7089                           
  7090                           ;incstack = 0
  7091  003978  EC54  F00F         	call	_Read_RTC	;wreg free
  7092                           
  7093                           ;menu.c: 116: state_alarm = TRIGGED;
  7094  00397C  0E02               	movlw	2
  7095  00397E  0100               	movlb	0	; () banked
  7096  003980  6FE0               	movwf	_state_alarm& (0+255),b
  7097                           
  7098                           ; BSR set to: 0
  7099                           ;menu.c: 117: sensorDisparado = sensor;
  7100  003982  C013  F097         	movff	dispararSensor@sensor,_sensorDisparado
  7101                           
  7102                           ; BSR set to: 0
  7103                           ;menu.c: 118: diaDisparo = dia;
  7104  003986  C0D0  F082         	movff	_dia,_diaDisparo
  7105  00398A  C0D1  F083         	movff	_dia+1,_diaDisparo+1
  7106                           
  7107                           ; BSR set to: 0
  7108                           ;menu.c: 119: mesDisparo = mes;
  7109  00398E  C0D6  F08E         	movff	_mes,_mesDisparo
  7110  003992  C0D7  F08F         	movff	_mes+1,_mesDisparo+1
  7111                           
  7112                           ; BSR set to: 0
  7113                           ;menu.c: 120: horaDisparo = hora;
  7114  003996  C0D4  F086         	movff	_hora,_horaDisparo
  7115  00399A  C0D5  F087         	movff	_hora+1,_horaDisparo+1
  7116                           
  7117                           ; BSR set to: 0
  7118                           ;menu.c: 121: minDisparo = minuto;
  7119  00399E  C0D8  F090         	movff	_minuto,_minDisparo
  7120  0039A2  C0D9  F091         	movff	_minuto+1,_minDisparo+1
  7121                           
  7122                           ; BSR set to: 0
  7123  0039A6  0012               	return		;funcret
  7124  0039A8                     __end_of_dispararSensor:
  7125                           	opt stack 0
  7126                           tblptru	equ	0xFF8
  7127                           tblptrh	equ	0xFF7
  7128                           tblptrl	equ	0xFF6
  7129                           tablat	equ	0xFF5
  7130                           postinc0	equ	0xFEE
  7131                           wreg	equ	0xFE8
  7132                           postdec1	equ	0xFE5
  7133                           fsr1l	equ	0xFE1
  7134                           indf2	equ	0xFDF
  7135                           postinc2	equ	0xFDE
  7136                           postdec2	equ	0xFDD
  7137                           fsr2h	equ	0xFDA
  7138                           fsr2l	equ	0xFD9
  7139                           status	equ	0xFD8
  7140                           
  7141 ;; *************** function _configurar_reloj *****************
  7142 ;; Defined at:
  7143 ;;		line 74 in file "reloj.c"
  7144 ;; Parameters:    Size  Location     Type
  7145 ;;		None
  7146 ;; Auto vars:     Size  Location     Type
  7147 ;;  x               1   39[COMRAM] unsigned char 
  7148 ;;  y               1   38[COMRAM] unsigned char 
  7149 ;;  input           1   37[COMRAM] unsigned char 
  7150 ;; Return value:  Size  Location     Type
  7151 ;;		None               void
  7152 ;; Registers used:
  7153 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7154 ;; Tracked objects:
  7155 ;;		On entry : 0/0
  7156 ;;		On exit  : 0/0
  7157 ;;		Unchanged: 0/0
  7158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7160 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7161 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7162 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7163 ;;Total ram usage:        4 bytes
  7164 ;; Hardware stack levels used:    1
  7165 ;; Hardware stack levels required when called:    6
  7166 ;; This function calls:
  7167 ;;		_Read_RTC
  7168 ;;		_evalueChanceOfRaw
  7169 ;;		_lcd_gotoxy
  7170 ;;		_lcd_setcursor_vb
  7171 ;;		_read_keyboard
  7172 ;;		_setClock
  7173 ;;		_write_Date
  7174 ;; This function is called by:
  7175 ;;		_select_menu
  7176 ;; This function uses a non-reentrant model
  7177 ;;
  7178                           
  7179                           	psect	text43
  7180  003018                     __ptext43:
  7181                           	opt stack 0
  7182  003018                     _configurar_reloj:
  7183                           	opt stack 23
  7184                           
  7185                           ;reloj.c: 75: char input = 18;
  7186                           
  7187                           ; BSR set to: 0
  7188                           ;incstack = 0
  7189  003018  0E12               	movlw	18
  7190  00301A  6E26               	movwf	configurar_reloj@input,c
  7191                           
  7192                           ;reloj.c: 76: int8 x = 10;
  7193  00301C  0E0A               	movlw	10
  7194  00301E  6E28               	movwf	configurar_reloj@x,c
  7195                           
  7196                           ;reloj.c: 77: int8 y = 1;
  7197  003020  0E01               	movlw	1
  7198  003022  6E27               	movwf	configurar_reloj@y,c
  7199                           
  7200                           ;reloj.c: 79: while(input != 16){
  7201  003024  D03C               	goto	l4980
  7202  003026                     l4954:
  7203                           
  7204                           ;reloj.c: 80: Read_RTC();
  7205  003026  EC54  F00F         	call	_Read_RTC	;wreg free
  7206                           
  7207                           ;reloj.c: 81: lcd_setcursor_vb(1,1);
  7208  00302A  0E01               	movlw	1
  7209  00302C  6E05               	movwf	lcd_setcursor_vb@blink,c
  7210  00302E  0E01               	movlw	1
  7211  003030  EC7B  F01D         	call	_lcd_setcursor_vb
  7212                           
  7213                           ;reloj.c: 82: lcd_gotoxy(x,y);
  7214  003034  C027  F005         	movff	configurar_reloj@y,lcd_gotoxy@y
  7215  003038  5028               	movf	configurar_reloj@x,w,c
  7216  00303A  EC35  F01D         	call	_lcd_gotoxy
  7217                           
  7218                           ;reloj.c: 83: if(PORTCbits.RC5 == 0)
  7219  00303E  BA82               	btfsc	3970,5,c	;volatile
  7220  003040  D01A               	goto	l4970
  7221                           
  7222                           ;reloj.c: 84: {
  7223                           ;reloj.c: 85: x=x+3;
  7224  003042  5028               	movf	configurar_reloj@x,w,c
  7225  003044  0F03               	addlw	3
  7226  003046  6E28               	movwf	configurar_reloj@x,c
  7227                           
  7228                           ;reloj.c: 87: _delay((unsigned long)((50)*(8000000/4000.0)));
  7229  003048  0E82               	movlw	130
  7230  00304A  6E25               	movwf	??_configurar_reloj& (0+255),c
  7231  00304C  0EDE               	movlw	222
  7232  00304E                     u4967:
  7233  00304E  2EE8               	decfsz	wreg,f,c
  7234  003050  D7FE               	goto	u4967
  7235  003052  2E25               	decfsz	??_configurar_reloj& (0+255),f,c
  7236  003054  D7FC               	goto	u4967
  7237                           
  7238                           ;reloj.c: 89: evalueChanceOfRaw(&x,&y);
  7239  003056  0E28               	movlw	low configurar_reloj@x
  7240  003058  6E01               	movwf	evalueChanceOfRaw@x,c
  7241  00305A  0E00               	movlw	high configurar_reloj@x
  7242  00305C  6E02               	movwf	evalueChanceOfRaw@x+1,c
  7243  00305E  0E27               	movlw	low configurar_reloj@y
  7244  003060  6E03               	movwf	evalueChanceOfRaw@y,c
  7245  003062  0E00               	movlw	high configurar_reloj@y
  7246  003064  6E04               	movwf	evalueChanceOfRaw@y+1,c
  7247  003066  EC16  F01A         	call	_evalueChanceOfRaw	;wreg free
  7248                           
  7249                           ;reloj.c: 90: lcd_gotoxy(x,y);
  7250  00306A  C027  F005         	movff	configurar_reloj@y,lcd_gotoxy@y
  7251  00306E  5028               	movf	configurar_reloj@x,w,c
  7252  003070  EC35  F01D         	call	_lcd_gotoxy
  7253  003074  D000               	goto	l4970
  7254  003076                     l4970:
  7255                           
  7256                           ;reloj.c: 91: }
  7257                           ;reloj.c: 93: if(PORTCbits.RC4 == 0){
  7258  003076  B882               	btfsc	3970,4,c	;volatile
  7259  003078  D006               	goto	l4976
  7260                           
  7261                           ;reloj.c: 94: setClock(x);
  7262  00307A  5028               	movf	configurar_reloj@x,w,c
  7263  00307C  EC9E  F013         	call	_setClock
  7264                           
  7265                           ;reloj.c: 95: write_Date();
  7266  003080  ECE2  F018         	call	_write_Date	;wreg free
  7267  003084  D000               	goto	l4976
  7268  003086                     l4976:
  7269                           
  7270                           ;reloj.c: 96: }
  7271                           ;reloj.c: 97: input = read_keyboard();
  7272  003086  ECF2  F007         	call	_read_keyboard	;wreg free
  7273  00308A  6E26               	movwf	configurar_reloj@input,c
  7274                           
  7275                           ;reloj.c: 98: _delay((unsigned long)((98)*(8000000/4000.0)));
  7276  00308C  0EFF               	movlw	255
  7277  00308E  6E25               	movwf	??_configurar_reloj& (0+255),c
  7278  003090  0E8A               	movlw	138
  7279  003092                     u4977:
  7280  003092  2EE8               	decfsz	wreg,f,c
  7281  003094  D7FE               	goto	u4977
  7282  003096  2E25               	decfsz	??_configurar_reloj& (0+255),f,c
  7283  003098  D7FC               	goto	u4977
  7284  00309A  D000               	nop2	
  7285  00309C  D000               	goto	l4980
  7286  00309E                     l4980:
  7287  00309E  0E10               	movlw	16
  7288  0030A0  1826               	xorwf	configurar_reloj@input,w,c
  7289  0030A2  A4D8               	btfss	status,2,c
  7290  0030A4  D7C0               	goto	l4954
  7291  0030A6  0012               	return		;funcret
  7292  0030A8                     __end_of_configurar_reloj:
  7293                           	opt stack 0
  7294                           tblptru	equ	0xFF8
  7295                           tblptrh	equ	0xFF7
  7296                           tblptrl	equ	0xFF6
  7297                           tablat	equ	0xFF5
  7298                           postinc0	equ	0xFEE
  7299                           wreg	equ	0xFE8
  7300                           postdec1	equ	0xFE5
  7301                           fsr1l	equ	0xFE1
  7302                           indf2	equ	0xFDF
  7303                           postinc2	equ	0xFDE
  7304                           postdec2	equ	0xFDD
  7305                           fsr2h	equ	0xFDA
  7306                           fsr2l	equ	0xFD9
  7307                           status	equ	0xFD8
  7308                           
  7309 ;; *************** function _write_Date *****************
  7310 ;; Defined at:
  7311 ;;		line 12 in file "lcd_vision.c"
  7312 ;; Parameters:    Size  Location     Type
  7313 ;;		None
  7314 ;; Auto vars:     Size  Location     Type
  7315 ;;		None
  7316 ;; Return value:  Size  Location     Type
  7317 ;;                  2  373[None  ] int 
  7318 ;; Registers used:
  7319 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7320 ;; Tracked objects:
  7321 ;;		On entry : 0/0
  7322 ;;		On exit  : 0/0
  7323 ;;		Unchanged: 0/0
  7324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7328 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7329 ;;Total ram usage:        0 bytes
  7330 ;; Hardware stack levels used:    1
  7331 ;; Hardware stack levels required when called:    5
  7332 ;; This function calls:
  7333 ;;		_lcd_gotoxy
  7334 ;;		_lcd_putrs
  7335 ;;		_lcd_setcursor_vb
  7336 ;;		_sprintf
  7337 ;; This function is called by:
  7338 ;;		_configurar_reloj
  7339 ;;		_set_vision
  7340 ;; This function uses a non-reentrant model
  7341 ;;
  7342                           
  7343                           	psect	text44
  7344  0031C4                     __ptext44:
  7345                           	opt stack 0
  7346  0031C4                     _write_Date:
  7347                           	opt stack 24
  7348                           
  7349                           ;lcd_vision.c: 13: lcd_setcursor_vb(0,0);
  7350                           
  7351                           ;incstack = 0
  7352  0031C4  0E00               	movlw	0
  7353  0031C6  6E05               	movwf	lcd_setcursor_vb@blink,c
  7354  0031C8  0E00               	movlw	0
  7355  0031CA  EC7B  F01D         	call	_lcd_setcursor_vb
  7356                           
  7357                           ;lcd_vision.c: 14: lcd_gotoxy(9,1);
  7358  0031CE  0E01               	movlw	1
  7359  0031D0  6E05               	movwf	lcd_gotoxy@y,c
  7360  0031D2  0E09               	movlw	9
  7361  0031D4  EC35  F01D         	call	_lcd_gotoxy
  7362                           
  7363                           ;lcd_vision.c: 15: sprintf(buffer2,"%02u/%02u/%02u",dia,mes,anio);
  7364  0031D8  0E98               	movlw	low _buffer2
  7365  0031DA  6E0D               	movwf	sprintf@sp,c
  7366  0031DC  0E00               	movlw	high _buffer2
  7367  0031DE  6E0E               	movwf	sprintf@sp+1,c
  7368  0031E0  0E67               	movlw	low STR_11
  7369  0031E2  6E0F               	movwf	sprintf@f,c
  7370  0031E4  0E0F               	movlw	high STR_11
  7371  0031E6  6E10               	movwf	sprintf@f+1,c
  7372  0031E8  C0D0  F011         	movff	_dia,?_sprintf+4
  7373  0031EC  C0D1  F012         	movff	_dia+1,?_sprintf+5
  7374  0031F0  C0D6  F013         	movff	_mes,?_sprintf+6
  7375  0031F4  C0D7  F014         	movff	_mes+1,?_sprintf+7
  7376  0031F8  C0CE  F015         	movff	_anio,?_sprintf+8
  7377  0031FC  C0CF  F016         	movff	_anio+1,?_sprintf+9
  7378  003200  EC4E  F009         	call	_sprintf	;wreg free
  7379                           
  7380                           ;lcd_vision.c: 16: lcd_putrs(buffer2);
  7381  003204  0E98               	movlw	low _buffer2
  7382  003206  6E09               	movwf	lcd_putrs@ptr,c
  7383  003208  0E00               	movlw	high _buffer2
  7384  00320A  6E0A               	movwf	lcd_putrs@ptr+1,c
  7385  00320C  EC00  F01B         	call	_lcd_putrs	;wreg free
  7386                           
  7387                           ;lcd_vision.c: 17: sprintf(buffer2,"%02u:%02u",hora,minuto);
  7388  003210  0E98               	movlw	low _buffer2
  7389  003212  6E0D               	movwf	sprintf@sp,c
  7390  003214  0E00               	movlw	high _buffer2
  7391  003216  6E0E               	movwf	sprintf@sp+1,c
  7392  003218  0EB5               	movlw	low STR_12
  7393  00321A  6E0F               	movwf	sprintf@f,c
  7394  00321C  0E0F               	movlw	high STR_12
  7395  00321E  6E10               	movwf	sprintf@f+1,c
  7396  003220  C0D4  F011         	movff	_hora,?_sprintf+4
  7397  003224  C0D5  F012         	movff	_hora+1,?_sprintf+5
  7398  003228  C0D8  F013         	movff	_minuto,?_sprintf+6
  7399  00322C  C0D9  F014         	movff	_minuto+1,?_sprintf+7
  7400  003230  EC4E  F009         	call	_sprintf	;wreg free
  7401                           
  7402                           ;lcd_vision.c: 18: lcd_gotoxy(1,2);
  7403  003234  0E02               	movlw	2
  7404  003236  6E05               	movwf	lcd_gotoxy@y,c
  7405  003238  0E01               	movlw	1
  7406  00323A  EC35  F01D         	call	_lcd_gotoxy
  7407                           
  7408                           ;lcd_vision.c: 19: lcd_putrs(buffer2);
  7409  00323E  0E98               	movlw	low _buffer2
  7410  003240  6E09               	movwf	lcd_putrs@ptr,c
  7411  003242  0E00               	movlw	high _buffer2
  7412  003244  6E0A               	movwf	lcd_putrs@ptr+1,c
  7413  003246  EC00  F01B         	call	_lcd_putrs	;wreg free
  7414  00324A  0012               	return		;funcret
  7415  00324C                     __end_of_write_Date:
  7416                           	opt stack 0
  7417                           tblptru	equ	0xFF8
  7418                           tblptrh	equ	0xFF7
  7419                           tblptrl	equ	0xFF6
  7420                           tablat	equ	0xFF5
  7421                           postinc0	equ	0xFEE
  7422                           wreg	equ	0xFE8
  7423                           postdec1	equ	0xFE5
  7424                           fsr1l	equ	0xFE1
  7425                           indf2	equ	0xFDF
  7426                           postinc2	equ	0xFDE
  7427                           postdec2	equ	0xFDD
  7428                           fsr2h	equ	0xFDA
  7429                           fsr2l	equ	0xFD9
  7430                           status	equ	0xFD8
  7431                           
  7432 ;; *************** function _lcd_setcursor_vb *****************
  7433 ;; Defined at:
  7434 ;;		line 210 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  7435 ;; Parameters:    Size  Location     Type
  7436 ;;  visible         1    wreg     unsigned char 
  7437 ;;  blink           1    4[COMRAM] unsigned char 
  7438 ;; Auto vars:     Size  Location     Type
  7439 ;;  visible         1    5[COMRAM] unsigned char 
  7440 ;; Return value:  Size  Location     Type
  7441 ;;		None               void
  7442 ;; Registers used:
  7443 ;;		wreg, status,2, status,0, cstack
  7444 ;; Tracked objects:
  7445 ;;		On entry : 0/0
  7446 ;;		On exit  : 0/0
  7447 ;;		Unchanged: 0/0
  7448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7449 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7450 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7452 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7453 ;;Total ram usage:        2 bytes
  7454 ;; Hardware stack levels used:    1
  7455 ;; Hardware stack levels required when called:    2
  7456 ;; This function calls:
  7457 ;;		_lcd_send_byte
  7458 ;; This function is called by:
  7459 ;;		_configurar_reloj
  7460 ;;		_write_Date
  7461 ;;		_set_desactive_vision
  7462 ;;		_jumpIfNotNumber
  7463 ;; This function uses a non-reentrant model
  7464 ;;
  7465                           
  7466                           	psect	text45
  7467  003AF6                     __ptext45:
  7468                           	opt stack 0
  7469  003AF6                     _lcd_setcursor_vb:
  7470                           	opt stack 26
  7471                           
  7472                           ;incstack = 0
  7473                           ;lcd_setcursor_vb@visible stored from wreg
  7474  003AF6  6E06               	movwf	lcd_setcursor_vb@visible,c
  7475                           
  7476                           ;unmc_lcd_216.c: 211: lcd_send_byte(0, 0xC|(visible<<1)|blink);
  7477  003AF8  5006               	movf	lcd_setcursor_vb@visible,w,c
  7478  003AFA  2406               	addwf	lcd_setcursor_vb@visible,w,c
  7479  003AFC  1005               	iorwf	lcd_setcursor_vb@blink,w,c
  7480  003AFE  090C               	iorlw	12
  7481  003B00  6E03               	movwf	lcd_send_byte@n,c
  7482  003B02  0E00               	movlw	0
  7483  003B04  EC73  F01C         	call	_lcd_send_byte
  7484  003B08  0012               	return		;funcret
  7485  003B0A                     __end_of_lcd_setcursor_vb:
  7486                           	opt stack 0
  7487                           tblptru	equ	0xFF8
  7488                           tblptrh	equ	0xFF7
  7489                           tblptrl	equ	0xFF6
  7490                           tablat	equ	0xFF5
  7491                           postinc0	equ	0xFEE
  7492                           wreg	equ	0xFE8
  7493                           postdec1	equ	0xFE5
  7494                           fsr1l	equ	0xFE1
  7495                           indf2	equ	0xFDF
  7496                           postinc2	equ	0xFDE
  7497                           postdec2	equ	0xFDD
  7498                           fsr2h	equ	0xFDA
  7499                           fsr2l	equ	0xFD9
  7500                           status	equ	0xFD8
  7501                           
  7502 ;; *************** function _setClock *****************
  7503 ;; Defined at:
  7504 ;;		line 38 in file "reloj.c"
  7505 ;; Parameters:    Size  Location     Type
  7506 ;;  x               1    wreg     unsigned char 
  7507 ;; Auto vars:     Size  Location     Type
  7508 ;;  x               1   14[COMRAM] unsigned char 
  7509 ;; Return value:  Size  Location     Type
  7510 ;;		None               void
  7511 ;; Registers used:
  7512 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7513 ;; Tracked objects:
  7514 ;;		On entry : 0/0
  7515 ;;		On exit  : 0/0
  7516 ;;		Unchanged: 0/0
  7517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7519 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7520 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7521 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7522 ;;Total ram usage:        2 bytes
  7523 ;; Hardware stack levels used:    1
  7524 ;; Hardware stack levels required when called:    3
  7525 ;; This function calls:
  7526 ;;		_Write_RTC
  7527 ;; This function is called by:
  7528 ;;		_configurar_reloj
  7529 ;; This function uses a non-reentrant model
  7530 ;;
  7531                           
  7532                           	psect	text46
  7533  00273C                     __ptext46:
  7534                           	opt stack 0
  7535  00273C                     _setClock:
  7536                           	opt stack 25
  7537                           
  7538                           ;incstack = 0
  7539                           ;setClock@x stored from wreg
  7540  00273C  6E0F               	movwf	setClock@x,c
  7541                           
  7542                           ;reloj.c: 39: switch (x) {
  7543  00273E  D054               	goto	l4794
  7544  002740                     l4766:
  7545                           
  7546                           ;reloj.c: 41: dia++;
  7547  002740  0100               	movlb	0	; () banked
  7548  002742  4BD0               	infsnz	_dia& (0+255),f,b
  7549  002744  2BD1               	incf	(_dia+1)& (0+255),f,b
  7550                           
  7551                           ; BSR set to: 0
  7552                           ;reloj.c: 42: if(dia > 31){
  7553  002746  0100               	movlb	0	; () banked
  7554  002748  BFD1               	btfsc	(_dia+1)& (0+255),7,b
  7555  00274A  D05F               	goto	l4796
  7556  00274C  0100               	movlb	0	; () banked
  7557  00274E  51D1               	movf	(_dia+1)& (0+255),w,b
  7558  002750  E105               	bnz	u4470
  7559  002752  0E20               	movlw	32
  7560  002754  0100               	movlb	0	; () banked
  7561  002756  5DD0               	subwf	_dia& (0+255),w,b
  7562  002758  A0D8               	btfss	status,0,c
  7563  00275A  D057               	goto	l4796
  7564  00275C                     u4470:
  7565                           
  7566                           ; BSR set to: 0
  7567                           ;reloj.c: 43: dia = 1;
  7568  00275C  0E00               	movlw	0
  7569  00275E  0100               	movlb	0	; () banked
  7570  002760  6FD1               	movwf	(_dia+1)& (0+255),b
  7571  002762  0E01               	movlw	1
  7572  002764  6FD0               	movwf	_dia& (0+255),b
  7573                           
  7574                           ; BSR set to: 0
  7575                           ;reloj.c: 44: }
  7576                           ;reloj.c: 45: break;
  7577  002766  D051               	goto	l4796
  7578  002768                     l4772:
  7579                           
  7580                           ;reloj.c: 47: mes++;
  7581  002768  0100               	movlb	0	; () banked
  7582  00276A  4BD6               	infsnz	_mes& (0+255),f,b
  7583  00276C  2BD7               	incf	(_mes+1)& (0+255),f,b
  7584                           
  7585                           ; BSR set to: 0
  7586                           ;reloj.c: 48: if(mes > 12){
  7587  00276E  0100               	movlb	0	; () banked
  7588  002770  BFD7               	btfsc	(_mes+1)& (0+255),7,b
  7589  002772  D04B               	goto	l4796
  7590  002774  0100               	movlb	0	; () banked
  7591  002776  51D7               	movf	(_mes+1)& (0+255),w,b
  7592  002778  E105               	bnz	u4480
  7593  00277A  0E0D               	movlw	13
  7594  00277C  0100               	movlb	0	; () banked
  7595  00277E  5DD6               	subwf	_mes& (0+255),w,b
  7596  002780  A0D8               	btfss	status,0,c
  7597  002782  D043               	goto	l4796
  7598  002784                     u4480:
  7599                           
  7600                           ; BSR set to: 0
  7601                           ;reloj.c: 49: mes = 1;
  7602  002784  0E00               	movlw	0
  7603  002786  0100               	movlb	0	; () banked
  7604  002788  6FD7               	movwf	(_mes+1)& (0+255),b
  7605  00278A  0E01               	movlw	1
  7606  00278C  6FD6               	movwf	_mes& (0+255),b
  7607                           
  7608                           ; BSR set to: 0
  7609                           ;reloj.c: 50: }
  7610                           ;reloj.c: 51: break;
  7611  00278E  D03D               	goto	l4796
  7612  002790                     l4778:
  7613                           
  7614                           ;reloj.c: 53: anio++;
  7615  002790  0100               	movlb	0	; () banked
  7616  002792  4BCE               	infsnz	_anio& (0+255),f,b
  7617  002794  2BCF               	incf	(_anio+1)& (0+255),f,b
  7618                           
  7619                           ;reloj.c: 54: break;
  7620  002796  D039               	goto	l4796
  7621  002798                     l4780:
  7622                           
  7623                           ;reloj.c: 56: hora++;
  7624  002798  0100               	movlb	0	; () banked
  7625  00279A  4BD4               	infsnz	_hora& (0+255),f,b
  7626  00279C  2BD5               	incf	(_hora+1)& (0+255),f,b
  7627                           
  7628                           ; BSR set to: 0
  7629                           ;reloj.c: 57: if(hora > 23){
  7630  00279E  0100               	movlb	0	; () banked
  7631  0027A0  BFD5               	btfsc	(_hora+1)& (0+255),7,b
  7632  0027A2  D033               	goto	l4796
  7633  0027A4  0100               	movlb	0	; () banked
  7634  0027A6  51D5               	movf	(_hora+1)& (0+255),w,b
  7635  0027A8  E105               	bnz	u4490
  7636  0027AA  0E18               	movlw	24
  7637  0027AC  0100               	movlb	0	; () banked
  7638  0027AE  5DD4               	subwf	_hora& (0+255),w,b
  7639  0027B0  A0D8               	btfss	status,0,c
  7640  0027B2  D02B               	goto	l4796
  7641  0027B4                     u4490:
  7642                           
  7643                           ; BSR set to: 0
  7644                           ;reloj.c: 58: hora = 0;
  7645  0027B4  0E00               	movlw	0
  7646  0027B6  0100               	movlb	0	; () banked
  7647  0027B8  6FD5               	movwf	(_hora+1)& (0+255),b
  7648  0027BA  0E00               	movlw	0
  7649  0027BC  6FD4               	movwf	_hora& (0+255),b
  7650                           
  7651                           ; BSR set to: 0
  7652                           ;reloj.c: 59: }
  7653                           ;reloj.c: 60: break;
  7654  0027BE  D025               	goto	l4796
  7655  0027C0                     l4786:
  7656                           
  7657                           ;reloj.c: 62: minuto++;
  7658  0027C0  0100               	movlb	0	; () banked
  7659  0027C2  4BD8               	infsnz	_minuto& (0+255),f,b
  7660  0027C4  2BD9               	incf	(_minuto+1)& (0+255),f,b
  7661                           
  7662                           ; BSR set to: 0
  7663                           ;reloj.c: 63: if(minuto > 59){
  7664  0027C6  0100               	movlb	0	; () banked
  7665  0027C8  BFD9               	btfsc	(_minuto+1)& (0+255),7,b
  7666  0027CA  D01F               	goto	l4796
  7667  0027CC  0100               	movlb	0	; () banked
  7668  0027CE  51D9               	movf	(_minuto+1)& (0+255),w,b
  7669  0027D0  E105               	bnz	u4500
  7670  0027D2  0E3C               	movlw	60
  7671  0027D4  0100               	movlb	0	; () banked
  7672  0027D6  5DD8               	subwf	_minuto& (0+255),w,b
  7673  0027D8  A0D8               	btfss	status,0,c
  7674  0027DA  D017               	goto	l4796
  7675  0027DC                     u4500:
  7676                           
  7677                           ; BSR set to: 0
  7678                           ;reloj.c: 64: minuto = 0;
  7679  0027DC  0E00               	movlw	0
  7680  0027DE  0100               	movlb	0	; () banked
  7681  0027E0  6FD9               	movwf	(_minuto+1)& (0+255),b
  7682  0027E2  0E00               	movlw	0
  7683  0027E4  6FD8               	movwf	_minuto& (0+255),b
  7684                           
  7685                           ; BSR set to: 0
  7686                           ;reloj.c: 69: }
  7687                           
  7688                           ; BSR set to: 0
  7689                           ;reloj.c: 68: break;
  7690                           
  7691                           ;reloj.c: 67: default:
  7692                           
  7693                           ; BSR set to: 0
  7694                           ;reloj.c: 65: }
  7695                           ;reloj.c: 66: break;
  7696  0027E6  D011               	goto	l4796
  7697  0027E8                     l4794:
  7698  0027E8  500F               	movf	setClock@x,w,c
  7699                           
  7700                           ; Switch size 1, requested type "space"
  7701                           ; Number of cases is 5, Range of values is 2 to 16
  7702                           ; switch strategies available:
  7703                           ; Name         Instructions Cycles
  7704                           ; simple_byte           16     9 (average)
  7705                           ;	Chosen strategy is simple_byte
  7706  0027EA  0A02               	xorlw	2	; case 2
  7707  0027EC  B4D8               	btfsc	status,2,c
  7708  0027EE  D7D4               	goto	l4780
  7709  0027F0  0A07               	xorlw	7	; case 5
  7710  0027F2  B4D8               	btfsc	status,2,c
  7711  0027F4  D7E5               	goto	l4786
  7712  0027F6  0A0F               	xorlw	15	; case 10
  7713  0027F8  B4D8               	btfsc	status,2,c
  7714  0027FA  D7A2               	goto	l4766
  7715  0027FC  0A07               	xorlw	7	; case 13
  7716  0027FE  B4D8               	btfsc	status,2,c
  7717  002800  D7B3               	goto	l4772
  7718  002802  0A1D               	xorlw	29	; case 16
  7719  002804  B4D8               	btfsc	status,2,c
  7720  002806  D7C4               	goto	l4778
  7721  002808  D000               	goto	l4796
  7722  00280A                     l4796:
  7723                           
  7724                           ;reloj.c: 70: Write_RTC();
  7725  00280A  EC56  F00C         	call	_Write_RTC	;wreg free
  7726                           
  7727                           ;reloj.c: 71: _delay((unsigned long)((50)*(8000000/4000.0)));
  7728  00280E  0E82               	movlw	130
  7729  002810  6E0E               	movwf	??_setClock& (0+255),c
  7730  002812  0EDE               	movlw	222
  7731  002814                     u4987:
  7732  002814  2EE8               	decfsz	wreg,f,c
  7733  002816  D7FE               	goto	u4987
  7734  002818  2E0E               	decfsz	??_setClock& (0+255),f,c
  7735  00281A  D7FC               	goto	u4987
  7736  00281C  0012               	return		;funcret
  7737  00281E                     __end_of_setClock:
  7738                           	opt stack 0
  7739                           tblptru	equ	0xFF8
  7740                           tblptrh	equ	0xFF7
  7741                           tblptrl	equ	0xFF6
  7742                           tablat	equ	0xFF5
  7743                           postinc0	equ	0xFEE
  7744                           wreg	equ	0xFE8
  7745                           postdec1	equ	0xFE5
  7746                           fsr1l	equ	0xFE1
  7747                           indf2	equ	0xFDF
  7748                           postinc2	equ	0xFDE
  7749                           postdec2	equ	0xFDD
  7750                           fsr2h	equ	0xFDA
  7751                           fsr2l	equ	0xFD9
  7752                           status	equ	0xFD8
  7753                           
  7754 ;; *************** function _read_keyboard *****************
  7755 ;; Defined at:
  7756 ;;		line 8 in file "keyboard.c"
  7757 ;; Parameters:    Size  Location     Type
  7758 ;;		None
  7759 ;; Auto vars:     Size  Location     Type
  7760 ;;		None
  7761 ;; Return value:  Size  Location     Type
  7762 ;;                  1    wreg      unsigned char 
  7763 ;; Registers used:
  7764 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7765 ;; Tracked objects:
  7766 ;;		On entry : 0/0
  7767 ;;		On exit  : 0/0
  7768 ;;		Unchanged: 0/0
  7769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7772 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7773 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7774 ;;Total ram usage:        1 bytes
  7775 ;; Hardware stack levels used:    1
  7776 ;; Hardware stack levels required when called:    5
  7777 ;; This function calls:
  7778 ;;		_lcd_putrs
  7779 ;;		_sprintf
  7780 ;; This function is called by:
  7781 ;;		_configurar_reloj
  7782 ;;		_input_password
  7783 ;;		_twinkle
  7784 ;;		_input_old_pass
  7785 ;;		_input_new_pass
  7786 ;;		_ver_opcion_cambio
  7787 ;;		_ver_info
  7788 ;;		_select_menu
  7789 ;; This function uses a non-reentrant model
  7790 ;;
  7791                           
  7792                           	psect	text47
  7793  000FE4                     __ptext47:
  7794                           	opt stack 0
  7795  000FE4                     _read_keyboard:
  7796                           	opt stack 23
  7797                           
  7798                           ;keyboard.c: 9: LATAbits.LATA0=1;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=0;
  7799                           
  7800                           ;incstack = 0
  7801  000FE4  8089               	bsf	3977,0,c	;volatile
  7802  000FE6  9289               	bcf	3977,1,c	;volatile
  7803  000FE8  9489               	bcf	3977,2,c	;volatile
  7804  000FEA  9689               	bcf	3977,3,c	;volatile
  7805                           
  7806                           ;keyboard.c: 10: {
  7807                           ;keyboard.c: 11: if (PORTAbits.RA5==1){key=1;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA5==1){};}
  7808  000FEC  AA80               	btfss	3968,5,c	;volatile
  7809  000FEE  D019               	goto	l295
  7810  000FF0  0E01               	movlw	1
  7811  000FF2  0100               	movlb	0	; () banked
  7812  000FF4  6FDE               	movwf	_key& (0+255),b
  7813                           
  7814                           ; BSR set to: 0
  7815  000FF6  0E98               	movlw	low _buffer2
  7816  000FF8  6E0D               	movwf	sprintf@sp,c
  7817  000FFA  0E00               	movlw	high _buffer2
  7818  000FFC  6E0E               	movwf	sprintf@sp+1,c
  7819  000FFE  0ED6               	movlw	low STR_1
  7820  001000  6E0F               	movwf	sprintf@f,c
  7821  001002  0E0F               	movlw	high STR_1
  7822  001004  6E10               	movwf	sprintf@f+1,c
  7823  001006  C0DE  F011         	movff	_key,?_sprintf+4
  7824  00100A  6A12               	clrf	?_sprintf+5,c
  7825  00100C  EC4E  F009         	call	_sprintf	;wreg free
  7826  001010  0E98               	movlw	low _buffer2
  7827  001012  6E09               	movwf	lcd_putrs@ptr,c
  7828  001014  0E00               	movlw	high _buffer2
  7829  001016  6E0A               	movwf	lcd_putrs@ptr+1,c
  7830  001018  EC00  F01B         	call	_lcd_putrs	;wreg free
  7831  00101C  D000               	goto	l296
  7832  00101E                     l296:
  7833  00101E  BA80               	btfsc	3968,5,c	;volatile
  7834  001020  D7FE               	goto	l296
  7835  001022                     l295:
  7836                           
  7837                           ;keyboard.c: 12: if (PORTAbits.RA7==1){key=2;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  7838  001022  AE80               	btfss	3968,7,c	;volatile
  7839  001024  D019               	goto	l299
  7840  001026  0E02               	movlw	2
  7841  001028  0100               	movlb	0	; () banked
  7842  00102A  6FDE               	movwf	_key& (0+255),b
  7843                           
  7844                           ; BSR set to: 0
  7845  00102C  0E98               	movlw	low _buffer2
  7846  00102E  6E0D               	movwf	sprintf@sp,c
  7847  001030  0E00               	movlw	high _buffer2
  7848  001032  6E0E               	movwf	sprintf@sp+1,c
  7849  001034  0ED6               	movlw	low STR_1
  7850  001036  6E0F               	movwf	sprintf@f,c
  7851  001038  0E0F               	movlw	high STR_1
  7852  00103A  6E10               	movwf	sprintf@f+1,c
  7853  00103C  C0DE  F011         	movff	_key,?_sprintf+4
  7854  001040  6A12               	clrf	?_sprintf+5,c
  7855  001042  EC4E  F009         	call	_sprintf	;wreg free
  7856  001046  0E98               	movlw	low _buffer2
  7857  001048  6E09               	movwf	lcd_putrs@ptr,c
  7858  00104A  0E00               	movlw	high _buffer2
  7859  00104C  6E0A               	movwf	lcd_putrs@ptr+1,c
  7860  00104E  EC00  F01B         	call	_lcd_putrs	;wreg free
  7861  001052  D000               	goto	l300
  7862  001054                     l300:
  7863  001054  BE80               	btfsc	3968,7,c	;volatile
  7864  001056  D7FE               	goto	l300
  7865  001058                     l299:
  7866                           
  7867                           ;keyboard.c: 13: if (PORTAbits.RA6==1){key=3;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA6==1){};}
  7868  001058  AC80               	btfss	3968,6,c	;volatile
  7869  00105A  D019               	goto	l303
  7870  00105C  0E03               	movlw	3
  7871  00105E  0100               	movlb	0	; () banked
  7872  001060  6FDE               	movwf	_key& (0+255),b
  7873                           
  7874                           ; BSR set to: 0
  7875  001062  0E98               	movlw	low _buffer2
  7876  001064  6E0D               	movwf	sprintf@sp,c
  7877  001066  0E00               	movlw	high _buffer2
  7878  001068  6E0E               	movwf	sprintf@sp+1,c
  7879  00106A  0ED6               	movlw	low STR_1
  7880  00106C  6E0F               	movwf	sprintf@f,c
  7881  00106E  0E0F               	movlw	high STR_1
  7882  001070  6E10               	movwf	sprintf@f+1,c
  7883  001072  C0DE  F011         	movff	_key,?_sprintf+4
  7884  001076  6A12               	clrf	?_sprintf+5,c
  7885  001078  EC4E  F009         	call	_sprintf	;wreg free
  7886  00107C  0E98               	movlw	low _buffer2
  7887  00107E  6E09               	movwf	lcd_putrs@ptr,c
  7888  001080  0E00               	movlw	high _buffer2
  7889  001082  6E0A               	movwf	lcd_putrs@ptr+1,c
  7890  001084  EC00  F01B         	call	_lcd_putrs	;wreg free
  7891  001088  D000               	goto	l304
  7892  00108A                     l304:
  7893  00108A  BC80               	btfsc	3968,6,c	;volatile
  7894  00108C  D7FE               	goto	l304
  7895  00108E                     l303:
  7896                           
  7897                           ;keyboard.c: 14: if (PORTCbits.RC2==1){key=11; while(PORTCbits.RC2==1){};}
  7898  00108E  A482               	btfss	3970,2,c	;volatile
  7899  001090  D006               	goto	l307
  7900  001092  0E0B               	movlw	11
  7901  001094  0100               	movlb	0	; () banked
  7902  001096  6FDE               	movwf	_key& (0+255),b
  7903  001098  D000               	goto	l308
  7904  00109A                     l308:
  7905  00109A  B482               	btfsc	3970,2,c	;volatile
  7906  00109C  D7FE               	goto	l308
  7907  00109E                     l307:
  7908                           
  7909                           ;keyboard.c: 15: }
  7910                           ;keyboard.c: 16: LATAbits.LATA0=0;LATAbits.LATA1=1;LATAbits.LATA2=0;LATAbits.LATA3=0;
  7911  00109E  9089               	bcf	3977,0,c	;volatile
  7912  0010A0  8289               	bsf	3977,1,c	;volatile
  7913  0010A2  9489               	bcf	3977,2,c	;volatile
  7914  0010A4  9689               	bcf	3977,3,c	;volatile
  7915                           
  7916                           ;keyboard.c: 17: {
  7917                           ;keyboard.c: 18: if (PORTAbits.RA5==1){key=4;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA5==1){};}
  7918  0010A6  AA80               	btfss	3968,5,c	;volatile
  7919  0010A8  D019               	goto	l311
  7920  0010AA  0E04               	movlw	4
  7921  0010AC  0100               	movlb	0	; () banked
  7922  0010AE  6FDE               	movwf	_key& (0+255),b
  7923                           
  7924                           ; BSR set to: 0
  7925  0010B0  0E98               	movlw	low _buffer2
  7926  0010B2  6E0D               	movwf	sprintf@sp,c
  7927  0010B4  0E00               	movlw	high _buffer2
  7928  0010B6  6E0E               	movwf	sprintf@sp+1,c
  7929  0010B8  0ED6               	movlw	low STR_1
  7930  0010BA  6E0F               	movwf	sprintf@f,c
  7931  0010BC  0E0F               	movlw	high STR_1
  7932  0010BE  6E10               	movwf	sprintf@f+1,c
  7933  0010C0  C0DE  F011         	movff	_key,?_sprintf+4
  7934  0010C4  6A12               	clrf	?_sprintf+5,c
  7935  0010C6  EC4E  F009         	call	_sprintf	;wreg free
  7936  0010CA  0E98               	movlw	low _buffer2
  7937  0010CC  6E09               	movwf	lcd_putrs@ptr,c
  7938  0010CE  0E00               	movlw	high _buffer2
  7939  0010D0  6E0A               	movwf	lcd_putrs@ptr+1,c
  7940  0010D2  EC00  F01B         	call	_lcd_putrs	;wreg free
  7941  0010D6  D000               	goto	l312
  7942  0010D8                     l312:
  7943  0010D8  BA80               	btfsc	3968,5,c	;volatile
  7944  0010DA  D7FE               	goto	l312
  7945  0010DC                     l311:
  7946                           
  7947                           ;keyboard.c: 19: if (PORTAbits.RA7==1){key=5;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  7948  0010DC  AE80               	btfss	3968,7,c	;volatile
  7949  0010DE  D019               	goto	l315
  7950  0010E0  0E05               	movlw	5
  7951  0010E2  0100               	movlb	0	; () banked
  7952  0010E4  6FDE               	movwf	_key& (0+255),b
  7953                           
  7954                           ; BSR set to: 0
  7955  0010E6  0E98               	movlw	low _buffer2
  7956  0010E8  6E0D               	movwf	sprintf@sp,c
  7957  0010EA  0E00               	movlw	high _buffer2
  7958  0010EC  6E0E               	movwf	sprintf@sp+1,c
  7959  0010EE  0ED6               	movlw	low STR_1
  7960  0010F0  6E0F               	movwf	sprintf@f,c
  7961  0010F2  0E0F               	movlw	high STR_1
  7962  0010F4  6E10               	movwf	sprintf@f+1,c
  7963  0010F6  C0DE  F011         	movff	_key,?_sprintf+4
  7964  0010FA  6A12               	clrf	?_sprintf+5,c
  7965  0010FC  EC4E  F009         	call	_sprintf	;wreg free
  7966  001100  0E98               	movlw	low _buffer2
  7967  001102  6E09               	movwf	lcd_putrs@ptr,c
  7968  001104  0E00               	movlw	high _buffer2
  7969  001106  6E0A               	movwf	lcd_putrs@ptr+1,c
  7970  001108  EC00  F01B         	call	_lcd_putrs	;wreg free
  7971  00110C  D000               	goto	l316
  7972  00110E                     l316:
  7973  00110E  BE80               	btfsc	3968,7,c	;volatile
  7974  001110  D7FE               	goto	l316
  7975  001112                     l315:
  7976                           
  7977                           ;keyboard.c: 20: if (PORTAbits.RA6==1){key=6;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA6==1){};}
  7978  001112  AC80               	btfss	3968,6,c	;volatile
  7979  001114  D019               	goto	l319
  7980  001116  0E06               	movlw	6
  7981  001118  0100               	movlb	0	; () banked
  7982  00111A  6FDE               	movwf	_key& (0+255),b
  7983                           
  7984                           ; BSR set to: 0
  7985  00111C  0E98               	movlw	low _buffer2
  7986  00111E  6E0D               	movwf	sprintf@sp,c
  7987  001120  0E00               	movlw	high _buffer2
  7988  001122  6E0E               	movwf	sprintf@sp+1,c
  7989  001124  0ED6               	movlw	low STR_1
  7990  001126  6E0F               	movwf	sprintf@f,c
  7991  001128  0E0F               	movlw	high STR_1
  7992  00112A  6E10               	movwf	sprintf@f+1,c
  7993  00112C  C0DE  F011         	movff	_key,?_sprintf+4
  7994  001130  6A12               	clrf	?_sprintf+5,c
  7995  001132  EC4E  F009         	call	_sprintf	;wreg free
  7996  001136  0E98               	movlw	low _buffer2
  7997  001138  6E09               	movwf	lcd_putrs@ptr,c
  7998  00113A  0E00               	movlw	high _buffer2
  7999  00113C  6E0A               	movwf	lcd_putrs@ptr+1,c
  8000  00113E  EC00  F01B         	call	_lcd_putrs	;wreg free
  8001  001142  D000               	goto	l320
  8002  001144                     l320:
  8003  001144  BC80               	btfsc	3968,6,c	;volatile
  8004  001146  D7FE               	goto	l320
  8005  001148                     l319:
  8006                           
  8007                           ;keyboard.c: 21: if (PORTCbits.RC2==1){key=12; while(PORTCbits.RC2==1){};}
  8008  001148  A482               	btfss	3970,2,c	;volatile
  8009  00114A  D006               	goto	l323
  8010  00114C  0E0C               	movlw	12
  8011  00114E  0100               	movlb	0	; () banked
  8012  001150  6FDE               	movwf	_key& (0+255),b
  8013  001152  D000               	goto	l324
  8014  001154                     l324:
  8015  001154  B482               	btfsc	3970,2,c	;volatile
  8016  001156  D7FE               	goto	l324
  8017  001158                     l323:
  8018                           
  8019                           ;keyboard.c: 22: }
  8020                           ;keyboard.c: 23: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=1;LATAbits.LATA3=0;
  8021  001158  9089               	bcf	3977,0,c	;volatile
  8022  00115A  9289               	bcf	3977,1,c	;volatile
  8023  00115C  8489               	bsf	3977,2,c	;volatile
  8024  00115E  9689               	bcf	3977,3,c	;volatile
  8025                           
  8026                           ;keyboard.c: 24: {
  8027                           ;keyboard.c: 25: if (PORTAbits.RA5==1){key=7;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA5==1){};}
  8028  001160  AA80               	btfss	3968,5,c	;volatile
  8029  001162  D019               	goto	l327
  8030  001164  0E07               	movlw	7
  8031  001166  0100               	movlb	0	; () banked
  8032  001168  6FDE               	movwf	_key& (0+255),b
  8033                           
  8034                           ; BSR set to: 0
  8035  00116A  0E98               	movlw	low _buffer2
  8036  00116C  6E0D               	movwf	sprintf@sp,c
  8037  00116E  0E00               	movlw	high _buffer2
  8038  001170  6E0E               	movwf	sprintf@sp+1,c
  8039  001172  0ED6               	movlw	low STR_1
  8040  001174  6E0F               	movwf	sprintf@f,c
  8041  001176  0E0F               	movlw	high STR_1
  8042  001178  6E10               	movwf	sprintf@f+1,c
  8043  00117A  C0DE  F011         	movff	_key,?_sprintf+4
  8044  00117E  6A12               	clrf	?_sprintf+5,c
  8045  001180  EC4E  F009         	call	_sprintf	;wreg free
  8046  001184  0E98               	movlw	low _buffer2
  8047  001186  6E09               	movwf	lcd_putrs@ptr,c
  8048  001188  0E00               	movlw	high _buffer2
  8049  00118A  6E0A               	movwf	lcd_putrs@ptr+1,c
  8050  00118C  EC00  F01B         	call	_lcd_putrs	;wreg free
  8051  001190  D000               	goto	l328
  8052  001192                     l328:
  8053  001192  BA80               	btfsc	3968,5,c	;volatile
  8054  001194  D7FE               	goto	l328
  8055  001196                     l327:
  8056                           
  8057                           ;keyboard.c: 26: if (PORTAbits.RA7==1){key=8;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  8058  001196  AE80               	btfss	3968,7,c	;volatile
  8059  001198  D019               	goto	l331
  8060  00119A  0E08               	movlw	8
  8061  00119C  0100               	movlb	0	; () banked
  8062  00119E  6FDE               	movwf	_key& (0+255),b
  8063                           
  8064                           ; BSR set to: 0
  8065  0011A0  0E98               	movlw	low _buffer2
  8066  0011A2  6E0D               	movwf	sprintf@sp,c
  8067  0011A4  0E00               	movlw	high _buffer2
  8068  0011A6  6E0E               	movwf	sprintf@sp+1,c
  8069  0011A8  0ED6               	movlw	low STR_1
  8070  0011AA  6E0F               	movwf	sprintf@f,c
  8071  0011AC  0E0F               	movlw	high STR_1
  8072  0011AE  6E10               	movwf	sprintf@f+1,c
  8073  0011B0  C0DE  F011         	movff	_key,?_sprintf+4
  8074  0011B4  6A12               	clrf	?_sprintf+5,c
  8075  0011B6  EC4E  F009         	call	_sprintf	;wreg free
  8076  0011BA  0E98               	movlw	low _buffer2
  8077  0011BC  6E09               	movwf	lcd_putrs@ptr,c
  8078  0011BE  0E00               	movlw	high _buffer2
  8079  0011C0  6E0A               	movwf	lcd_putrs@ptr+1,c
  8080  0011C2  EC00  F01B         	call	_lcd_putrs	;wreg free
  8081  0011C6  D000               	goto	l332
  8082  0011C8                     l332:
  8083  0011C8  BE80               	btfsc	3968,7,c	;volatile
  8084  0011CA  D7FE               	goto	l332
  8085  0011CC                     l331:
  8086                           
  8087                           ;keyboard.c: 27: if (PORTAbits.RA6==1){key=9;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA6==1){};}
  8088  0011CC  AC80               	btfss	3968,6,c	;volatile
  8089  0011CE  D019               	goto	l335
  8090  0011D0  0E09               	movlw	9
  8091  0011D2  0100               	movlb	0	; () banked
  8092  0011D4  6FDE               	movwf	_key& (0+255),b
  8093                           
  8094                           ; BSR set to: 0
  8095  0011D6  0E98               	movlw	low _buffer2
  8096  0011D8  6E0D               	movwf	sprintf@sp,c
  8097  0011DA  0E00               	movlw	high _buffer2
  8098  0011DC  6E0E               	movwf	sprintf@sp+1,c
  8099  0011DE  0ED6               	movlw	low STR_1
  8100  0011E0  6E0F               	movwf	sprintf@f,c
  8101  0011E2  0E0F               	movlw	high STR_1
  8102  0011E4  6E10               	movwf	sprintf@f+1,c
  8103  0011E6  C0DE  F011         	movff	_key,?_sprintf+4
  8104  0011EA  6A12               	clrf	?_sprintf+5,c
  8105  0011EC  EC4E  F009         	call	_sprintf	;wreg free
  8106  0011F0  0E98               	movlw	low _buffer2
  8107  0011F2  6E09               	movwf	lcd_putrs@ptr,c
  8108  0011F4  0E00               	movlw	high _buffer2
  8109  0011F6  6E0A               	movwf	lcd_putrs@ptr+1,c
  8110  0011F8  EC00  F01B         	call	_lcd_putrs	;wreg free
  8111  0011FC  D000               	goto	l336
  8112  0011FE                     l336:
  8113  0011FE  BC80               	btfsc	3968,6,c	;volatile
  8114  001200  D7FE               	goto	l336
  8115  001202                     l335:
  8116                           
  8117                           ;keyboard.c: 28: if (PORTCbits.RC2==1){key=13; while(PORTCbits.RC2==1){};}
  8118  001202  A482               	btfss	3970,2,c	;volatile
  8119  001204  D006               	goto	l339
  8120  001206  0E0D               	movlw	13
  8121  001208  0100               	movlb	0	; () banked
  8122  00120A  6FDE               	movwf	_key& (0+255),b
  8123  00120C  D000               	goto	l340
  8124  00120E                     l340:
  8125  00120E  B482               	btfsc	3970,2,c	;volatile
  8126  001210  D7FE               	goto	l340
  8127  001212                     l339:
  8128                           
  8129                           ;keyboard.c: 29: }
  8130                           ;keyboard.c: 30: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=1;
  8131  001212  9089               	bcf	3977,0,c	;volatile
  8132  001214  9289               	bcf	3977,1,c	;volatile
  8133  001216  9489               	bcf	3977,2,c	;volatile
  8134  001218  8689               	bsf	3977,3,c	;volatile
  8135                           
  8136                           ;keyboard.c: 31: {
  8137                           ;keyboard.c: 32: if (PORTAbits.RA5==1){key=14; while(PORTAbits.RA5==1){};}
  8138  00121A  AA80               	btfss	3968,5,c	;volatile
  8139  00121C  D006               	goto	l343
  8140  00121E  0E0E               	movlw	14
  8141  001220  0100               	movlb	0	; () banked
  8142  001222  6FDE               	movwf	_key& (0+255),b
  8143  001224  D000               	goto	l344
  8144  001226                     l344:
  8145  001226  BA80               	btfsc	3968,5,c	;volatile
  8146  001228  D7FE               	goto	l344
  8147  00122A                     l343:
  8148                           
  8149                           ;keyboard.c: 33: if (PORTAbits.RA7==1){key=0;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  8150  00122A  AE80               	btfss	3968,7,c	;volatile
  8151  00122C  D019               	goto	l347
  8152  00122E  0E00               	movlw	0
  8153  001230  0100               	movlb	0	; () banked
  8154  001232  6FDE               	movwf	_key& (0+255),b
  8155                           
  8156                           ; BSR set to: 0
  8157  001234  0E98               	movlw	low _buffer2
  8158  001236  6E0D               	movwf	sprintf@sp,c
  8159  001238  0E00               	movlw	high _buffer2
  8160  00123A  6E0E               	movwf	sprintf@sp+1,c
  8161  00123C  0ED6               	movlw	low STR_1
  8162  00123E  6E0F               	movwf	sprintf@f,c
  8163  001240  0E0F               	movlw	high STR_1
  8164  001242  6E10               	movwf	sprintf@f+1,c
  8165  001244  C0DE  F011         	movff	_key,?_sprintf+4
  8166  001248  6A12               	clrf	?_sprintf+5,c
  8167  00124A  EC4E  F009         	call	_sprintf	;wreg free
  8168  00124E  0E98               	movlw	low _buffer2
  8169  001250  6E09               	movwf	lcd_putrs@ptr,c
  8170  001252  0E00               	movlw	high _buffer2
  8171  001254  6E0A               	movwf	lcd_putrs@ptr+1,c
  8172  001256  EC00  F01B         	call	_lcd_putrs	;wreg free
  8173  00125A  D000               	goto	l348
  8174  00125C                     l348:
  8175  00125C  BE80               	btfsc	3968,7,c	;volatile
  8176  00125E  D7FE               	goto	l348
  8177  001260                     l347:
  8178                           
  8179                           ;keyboard.c: 34: if (PORTAbits.RA6==1){key=15; while(PORTAbits.RA6==1){};}
  8180  001260  AC80               	btfss	3968,6,c	;volatile
  8181  001262  D006               	goto	l351
  8182  001264  0E0F               	movlw	15
  8183  001266  0100               	movlb	0	; () banked
  8184  001268  6FDE               	movwf	_key& (0+255),b
  8185  00126A  D000               	goto	l352
  8186  00126C                     l352:
  8187  00126C  BC80               	btfsc	3968,6,c	;volatile
  8188  00126E  D7FE               	goto	l352
  8189  001270                     l351:
  8190                           
  8191                           ;keyboard.c: 35: if (PORTCbits.RC2==1){key=16; while(PORTCbits.RC2==1){};}
  8192  001270  A482               	btfss	3970,2,c	;volatile
  8193  001272  D008               	goto	l4586
  8194  001274  0E10               	movlw	16
  8195  001276  0100               	movlb	0	; () banked
  8196  001278  6FDE               	movwf	_key& (0+255),b
  8197  00127A  D000               	goto	l356
  8198  00127C                     l356:
  8199  00127C  A482               	btfss	3970,2,c	;volatile
  8200  00127E  D002               	goto	l4586
  8201  001280  D7FD               	goto	l356
  8202  001282  D000               	goto	l4586
  8203  001284                     l4586:
  8204                           
  8205                           ;keyboard.c: 36: }
  8206                           ;keyboard.c: 37: _delay((unsigned long)((98)*(8000000/4000.0)));
  8207  001284  0EFF               	movlw	255
  8208  001286  6E24               	movwf	??_read_keyboard& (0+255),c
  8209  001288  0E8A               	movlw	138
  8210  00128A                     u4997:
  8211  00128A  2EE8               	decfsz	wreg,f,c
  8212  00128C  D7FE               	goto	u4997
  8213  00128E  2E24               	decfsz	??_read_keyboard& (0+255),f,c
  8214  001290  D7FC               	goto	u4997
  8215  001292  D000               	nop2	
  8216                           
  8217                           ;keyboard.c: 40: return key;
  8218  001294  0100               	movlb	0	; () banked
  8219  001296  51DE               	movf	_key& (0+255),w,b
  8220  001298  0012               	return	
  8221                           
  8222                           ; BSR set to: 0
  8223                           
  8224                           ; BSR set to: 0
  8225  00129A  0012               	return		;funcret
  8226  00129C                     __end_of_read_keyboard:
  8227                           	opt stack 0
  8228                           tblptru	equ	0xFF8
  8229                           tblptrh	equ	0xFF7
  8230                           tblptrl	equ	0xFF6
  8231                           tablat	equ	0xFF5
  8232                           postinc0	equ	0xFEE
  8233                           wreg	equ	0xFE8
  8234                           postdec1	equ	0xFE5
  8235                           fsr1l	equ	0xFE1
  8236                           indf2	equ	0xFDF
  8237                           postinc2	equ	0xFDE
  8238                           postdec2	equ	0xFDD
  8239                           fsr2h	equ	0xFDA
  8240                           fsr2l	equ	0xFD9
  8241                           status	equ	0xFD8
  8242                           
  8243 ;; *************** function _sprintf *****************
  8244 ;; Defined at:
  8245 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\doprnt.c"
  8246 ;; Parameters:    Size  Location     Type
  8247 ;;  sp              2   12[COMRAM] PTR unsigned char 
  8248 ;;		 -> buffer2(20), 
  8249 ;;  f               2   14[COMRAM] PTR const unsigned char 
  8250 ;;		 -> STR_30(10), STR_28(10), STR_26(5), STR_12(10), 
  8251 ;;		 -> STR_11(15), STR_10(5), STR_9(5), STR_8(5), 
  8252 ;;		 -> STR_7(5), STR_6(5), STR_5(5), STR_4(5), 
  8253 ;;		 -> STR_3(5), STR_2(5), STR_1(5), 
  8254 ;; Auto vars:     Size  Location     Type
  8255 ;;  tmpval          4    0        struct .
  8256 ;;  cp              3    0        PTR const unsigned char 
  8257 ;;  width           2   32[COMRAM] int 
  8258 ;;  val             2   29[COMRAM] unsigned int 
  8259 ;;  ap              2   26[COMRAM] PTR void [1]
  8260 ;;		 -> ?_sprintf(2), 
  8261 ;;  len             2    0        unsigned int 
  8262 ;;  c               1   34[COMRAM] char 
  8263 ;;  prec            1   31[COMRAM] char 
  8264 ;;  flag            1   28[COMRAM] unsigned char 
  8265 ;; Return value:  Size  Location     Type
  8266 ;;                  2   12[COMRAM] int 
  8267 ;; Registers used:
  8268 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8269 ;; Tracked objects:
  8270 ;;		On entry : 0/0
  8271 ;;		On exit  : 0/0
  8272 ;;		Unchanged: 0/0
  8273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8274 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8275 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8276 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8277 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8278 ;;Total ram usage:       23 bytes
  8279 ;; Hardware stack levels used:    1
  8280 ;; Hardware stack levels required when called:    1
  8281 ;; This function calls:
  8282 ;;		___lwdiv
  8283 ;;		___lwmod
  8284 ;;		___wmul
  8285 ;;		_isdigit
  8286 ;; This function is called by:
  8287 ;;		_read_keyboard
  8288 ;;		_write_Date
  8289 ;;		_ver_info
  8290 ;; This function uses a non-reentrant model
  8291 ;;
  8292                           
  8293                           	psect	text48
  8294  00129C                     __ptext48:
  8295                           	opt stack 0
  8296  00129C                     _sprintf:
  8297                           	opt stack 27
  8298                           
  8299                           ;doprnt.c: 494: va_list ap;
  8300                           ;doprnt.c: 499: signed char c;
  8301                           ;doprnt.c: 501: int width;
  8302                           ;doprnt.c: 506: signed char prec;
  8303                           ;doprnt.c: 508: unsigned char flag;
  8304                           ;doprnt.c: 523: union {
  8305                           ;doprnt.c: 524: unsigned long vd;
  8306                           ;doprnt.c: 525: double integ;
  8307                           ;doprnt.c: 526: } tmpval;
  8308                           ;doprnt.c: 528: unsigned int val;
  8309                           ;doprnt.c: 529: unsigned len;
  8310                           ;doprnt.c: 530: const char * cp;
  8311                           ;doprnt.c: 533: *ap = __va_start();
  8312                           
  8313                           ; BSR set to: 0
  8314                           ;incstack = 0
  8315  00129C  0E11               	movlw	low (?_sprintf+4)
  8316  00129E  6E1B               	movwf	sprintf@ap,c
  8317  0012A0  0E00               	movlw	high (?_sprintf+4)
  8318  0012A2  6E1C               	movwf	sprintf@ap+1,c
  8319                           
  8320                           ;doprnt.c: 536: while(c = *f++) {
  8321  0012A4  D117               	goto	l4208
  8322  0012A6                     l4126:
  8323                           
  8324                           ;doprnt.c: 538: if(c != '%')
  8325  0012A6  0E25               	movlw	37
  8326  0012A8  1823               	xorwf	sprintf@c,w,c
  8327  0012AA  B4D8               	btfsc	status,2,c
  8328  0012AC  D009               	goto	l4132
  8329                           
  8330                           ;doprnt.c: 540: {
  8331                           ;doprnt.c: 541: ((*sp++ = (c)));
  8332  0012AE  C00D  FFD9         	movff	sprintf@sp,fsr2l
  8333  0012B2  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  8334  0012B6  C023  FFDF         	movff	sprintf@c,indf2
  8335  0012BA  4A0D               	infsnz	sprintf@sp,f,c
  8336  0012BC  2A0E               	incf	sprintf@sp+1,f,c
  8337                           
  8338                           ;doprnt.c: 542: continue;
  8339  0012BE  D10A               	goto	l4208
  8340  0012C0                     l4132:
  8341                           
  8342                           ;doprnt.c: 543: }
  8343                           ;doprnt.c: 546: width = 0;
  8344  0012C0  0E00               	movlw	0
  8345  0012C2  6E22               	movwf	sprintf@width+1,c
  8346  0012C4  0E00               	movlw	0
  8347  0012C6  6E21               	movwf	sprintf@width,c
  8348                           
  8349                           ;doprnt.c: 548: flag = 0;
  8350  0012C8  0E00               	movlw	0
  8351  0012CA  6E1D               	movwf	sprintf@flag,c
  8352                           
  8353                           ;doprnt.c: 551: switch(*f) {
  8354                           
  8355                           ;doprnt.c: 550: for(;;) {
  8356  0012CC  D005               	goto	l4138
  8357  0012CE                     l4134:
  8358                           
  8359                           ;doprnt.c: 580: flag |= 0x04;
  8360  0012CE  841D               	bsf	sprintf@flag,2,c
  8361                           
  8362                           ;doprnt.c: 581: f++;
  8363  0012D0  4A0F               	infsnz	sprintf@f,f,c
  8364  0012D2  2A10               	incf	sprintf@f+1,f,c
  8365                           
  8366                           ;doprnt.c: 582: continue;
  8367  0012D4  D001               	goto	l4138
  8368                           
  8369                           ;doprnt.c: 584: }
  8370  0012D6  D00B               	goto	l4140
  8371  0012D8                     l4138:
  8372  0012D8  C00F  FFF6         	movff	sprintf@f,tblptrl
  8373  0012DC  C010  FFF7         	movff	sprintf@f+1,tblptrh
  8374  0012E0                     	if	0	;tblptru may be non-zero
  8375  0012E0                     	endif
  8376  0012E0                     	if	0	;tblptru may be non-zero
  8377  0012E0                     	endif
  8378  0012E0  0008               	tblrd		*
  8379  0012E2  50F5               	movf	tablat,w,c
  8380                           
  8381                           ; Switch size 1, requested type "space"
  8382                           ; Number of cases is 1, Range of values is 48 to 48
  8383                           ; switch strategies available:
  8384                           ; Name         Instructions Cycles
  8385                           ; simple_byte            4     3 (average)
  8386                           ;	Chosen strategy is simple_byte
  8387  0012E4  0A30               	xorlw	48	; case 48
  8388  0012E6  B4D8               	btfsc	status,2,c
  8389  0012E8  D7F2               	goto	l4134
  8390                           
  8391                           ;doprnt.c: 585: break;
  8392  0012EA  D001               	goto	l4140
  8393                           
  8394                           ;doprnt.c: 586: }
  8395  0012EC  D7F5               	goto	l4138
  8396  0012EE                     l4140:
  8397                           
  8398                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  8399  0012EE  C00F  FFF6         	movff	sprintf@f,tblptrl
  8400  0012F2  C010  FFF7         	movff	sprintf@f+1,tblptrh
  8401  0012F6                     	if	0	;tblptru may be non-zero
  8402  0012F6                     	endif
  8403  0012F6                     	if	0	;tblptru may be non-zero
  8404  0012F6                     	endif
  8405  0012F6  0008               	tblrd		*
  8406  0012F8  50F5               	movf	tablat,w,c
  8407  0012FA  EC47  F01D         	call	_isdigit
  8408  0012FE  A0D8               	btfss	status,0,c
  8409  001300  D03A               	goto	l4156
  8410                           
  8411                           ;doprnt.c: 598: width = 0;
  8412  001302  0E00               	movlw	0
  8413  001304  6E22               	movwf	sprintf@width+1,c
  8414  001306  0E00               	movlw	0
  8415  001308  6E21               	movwf	sprintf@width,c
  8416  00130A  D000               	goto	l4144
  8417  00130C                     l4144:
  8418                           
  8419                           ;doprnt.c: 600: width *= 10;
  8420  00130C  C021  F001         	movff	sprintf@width,___wmul@multiplier
  8421  001310  C022  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  8422  001314  0E00               	movlw	0
  8423  001316  6E04               	movwf	___wmul@multiplicand+1,c
  8424  001318  0E0A               	movlw	10
  8425  00131A  6E03               	movwf	___wmul@multiplicand,c
  8426  00131C  ECEA  F01C         	call	___wmul	;wreg free
  8427  001320  C001  F021         	movff	?___wmul,sprintf@width
  8428  001324  C002  F022         	movff	?___wmul+1,sprintf@width+1
  8429                           
  8430                           ;doprnt.c: 601: width += *f++ - '0';
  8431  001328  0ED0               	movlw	208
  8432  00132A  6E17               	movwf	??_sprintf& (0+255),c
  8433  00132C  0EFF               	movlw	255
  8434  00132E  6E18               	movwf	(??_sprintf+1)& (0+255),c
  8435  001330  C00F  FFF6         	movff	sprintf@f,tblptrl
  8436  001334  C010  FFF7         	movff	sprintf@f+1,tblptrh
  8437  001338                     	if	0	;tblptru may be non-zero
  8438  001338                     	endif
  8439  001338                     	if	0	;tblptru may be non-zero
  8440  001338                     	endif
  8441  001338  0008               	tblrd		*
  8442  00133A  50F5               	movf	tablat,w,c
  8443  00133C  6E19               	movwf	(??_sprintf+2)& (0+255),c
  8444  00133E  6A1A               	clrf	(??_sprintf+3)& (0+255),c
  8445  001340  5017               	movf	??_sprintf,w,c
  8446  001342  2619               	addwf	??_sprintf+2,f,c
  8447  001344  5018               	movf	??_sprintf+1,w,c
  8448  001346  221A               	addwfc	??_sprintf+3,f,c
  8449  001348  5019               	movf	??_sprintf+2,w,c
  8450  00134A  2621               	addwf	sprintf@width,f,c
  8451  00134C  501A               	movf	??_sprintf+3,w,c
  8452  00134E  2222               	addwfc	sprintf@width+1,f,c
  8453  001350  4A0F               	infsnz	sprintf@f,f,c
  8454  001352  2A10               	incf	sprintf@f+1,f,c
  8455                           
  8456                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  8457  001354  C00F  FFF6         	movff	sprintf@f,tblptrl
  8458  001358  C010  FFF7         	movff	sprintf@f+1,tblptrh
  8459  00135C                     	if	0	;tblptru may be non-zero
  8460  00135C                     	endif
  8461  00135C                     	if	0	;tblptru may be non-zero
  8462  00135C                     	endif
  8463  00135C  0008               	tblrd		*
  8464  00135E  50F5               	movf	tablat,w,c
  8465  001360  EC47  F01D         	call	_isdigit
  8466  001364  A0D8               	btfss	status,0,c
  8467  001366  D007               	goto	l4156
  8468  001368  D7D1               	goto	l4144
  8469                           
  8470                           ;doprnt.c: 608: }
  8471                           ;doprnt.c: 635: switch(c = *f++) {
  8472  00136A  D005               	goto	l4156
  8473                           
  8474                           ;doprnt.c: 638: goto alldone;
  8475                           
  8476                           ;doprnt.c: 637: case 0:
  8477  00136C  D0C1               	goto	l4210
  8478                           
  8479                           ;doprnt.c: 813: continue;
  8480                           
  8481                           ;doprnt.c: 802: default:
  8482  00136E  D0B2               	goto	l4208
  8483  001370                     l4152:
  8484                           
  8485                           ;doprnt.c: 818: flag |= 0xC0;
  8486  001370  0EC0               	movlw	192
  8487  001372  121D               	iorwf	sprintf@flag,f,c
  8488                           
  8489                           ;doprnt.c: 822: }
  8490                           
  8491                           ;doprnt.c: 819: break;
  8492  001374  D011               	goto	l4158
  8493  001376                     l4156:
  8494  001376  C00F  FFF6         	movff	sprintf@f,tblptrl
  8495  00137A  C010  FFF7         	movff	sprintf@f+1,tblptrh
  8496  00137E  4A0F               	infsnz	sprintf@f,f,c
  8497  001380  2A10               	incf	sprintf@f+1,f,c
  8498  001382                     	if	0	;tblptru may be non-zero
  8499  001382                     	endif
  8500  001382                     	if	0	;tblptru may be non-zero
  8501  001382                     	endif
  8502  001382  0008               	tblrd		*
  8503  001384  CFF5 F023          	movff	tablat,sprintf@c
  8504  001388  5023               	movf	sprintf@c,w,c
  8505                           
  8506                           ; Switch size 1, requested type "space"
  8507                           ; Number of cases is 2, Range of values is 0 to 117
  8508                           ; switch strategies available:
  8509                           ; Name         Instructions Cycles
  8510                           ; simple_byte            7     4 (average)
  8511                           ;	Chosen strategy is simple_byte
  8512  00138A  0A00               	xorlw	0	; case 0
  8513  00138C  B4D8               	btfsc	status,2,c
  8514  00138E  D0B0               	goto	l4210
  8515  001390  0A75               	xorlw	117	; case 117
  8516  001392  B4D8               	btfsc	status,2,c
  8517  001394  D7ED               	goto	l4152
  8518  001396  D09E               	goto	l4208
  8519  001398                     l4158:
  8520                           
  8521                           ;doprnt.c: 1273: {
  8522                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  8523  001398  C01B  FFD9         	movff	sprintf@ap,fsr2l
  8524  00139C  C01C  FFDA         	movff	sprintf@ap+1,fsr2h
  8525  0013A0  CFDE F01E          	movff	postinc2,sprintf@val
  8526  0013A4  CFDD F01F          	movff	postdec2,sprintf@val+1
  8527  0013A8  0E02               	movlw	2
  8528  0013AA  261B               	addwf	sprintf@ap,f,c
  8529  0013AC  0E00               	movlw	0
  8530  0013AE  221C               	addwfc	sprintf@ap+1,f,c
  8531                           
  8532                           ;doprnt.c: 1287: }
  8533                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8534  0013B0  0E01               	movlw	1
  8535  0013B2  6E23               	movwf	sprintf@c,c
  8536  0013B4                     l4164:
  8537  0013B4  0E05               	movlw	5
  8538  0013B6  1823               	xorwf	sprintf@c,w,c
  8539  0013B8  B4D8               	btfsc	status,2,c
  8540  0013BA  D016               	goto	l4176
  8541  0013BC  D001               	goto	l4168
  8542  0013BE  D014               	goto	l4176
  8543  0013C0                     l4168:
  8544                           
  8545                           ;doprnt.c: 1306: if(val < dpowers[c])
  8546  0013C0  5023               	movf	sprintf@c,w,c
  8547  0013C2  0D02               	mullw	2
  8548  0013C4  0E01               	movlw	low _dpowers
  8549  0013C6  24F3               	addwf	prodl,w,c
  8550  0013C8  6EF6               	movwf	tblptrl,c
  8551  0013CA  0E0F               	movlw	high _dpowers
  8552  0013CC  20F4               	addwfc	prodh,w,c
  8553  0013CE  6EF7               	movwf	tblptrh,c
  8554  0013D0                     	if	0	;There are less than 3 active tblptr bytes
  8555  0013D0                     	endif
  8556  0013D0  0009               	tblrd		*+
  8557  0013D2  50F5               	movf	tablat,w,c
  8558  0013D4  5C1E               	subwf	sprintf@val,w,c
  8559  0013D6  0009               	tblrd		*+
  8560  0013D8  50F5               	movf	tablat,w,c
  8561  0013DA  581F               	subwfb	sprintf@val+1,w,c
  8562  0013DC  A0D8               	btfss	status,0,c
  8563  0013DE  D004               	goto	l4176
  8564  0013E0  D001               	goto	l4172
  8565                           
  8566                           ;doprnt.c: 1307: break;
  8567  0013E2  D002               	goto	l4176
  8568  0013E4                     l4172:
  8569  0013E4  2A23               	incf	sprintf@c,f,c
  8570  0013E6  D7E6               	goto	l4164
  8571  0013E8                     l4176:
  8572                           
  8573                           ;doprnt.c: 1381: if(width > c)
  8574  0013E8  0E80               	movlw	128
  8575  0013EA  BE23               	btfsc	sprintf@c,7,c
  8576  0013EC  0E7F               	movlw	127
  8577  0013EE  6E17               	movwf	??_sprintf& (0+255),c
  8578  0013F0  5021               	movf	sprintf@width,w,c
  8579  0013F2  5C23               	subwf	sprintf@c,w,c
  8580  0013F4  5022               	movf	sprintf@width+1,w,c
  8581  0013F6  0A80               	xorlw	128
  8582  0013F8  5817               	subwfb	??_sprintf& (0+255),w,c
  8583  0013FA  B0D8               	btfsc	status,0,c
  8584  0013FC  D007               	goto	l4180
  8585                           
  8586                           ;doprnt.c: 1382: width -= c;
  8587  0013FE  5023               	movf	sprintf@c,w,c
  8588  001400  5E21               	subwf	sprintf@width,f,c
  8589  001402  0E00               	movlw	0
  8590  001404  BE23               	btfsc	sprintf@c,7,c
  8591  001406  0EFF               	movlw	255
  8592  001408  5A22               	subwfb	sprintf@width+1,f,c
  8593  00140A  D005               	goto	l4182
  8594  00140C                     l4180:
  8595                           
  8596                           ;doprnt.c: 1383: else
  8597                           ;doprnt.c: 1384: width = 0;
  8598  00140C  0E00               	movlw	0
  8599  00140E  6E22               	movwf	sprintf@width+1,c
  8600  001410  0E00               	movlw	0
  8601  001412  6E21               	movwf	sprintf@width,c
  8602  001414  D000               	goto	l4182
  8603  001416                     l4182:
  8604                           
  8605                           ;doprnt.c: 1387: if(flag & 0x04) {
  8606  001416  A41D               	btfss	sprintf@flag,2,c
  8607  001418  D015               	goto	l4192
  8608                           
  8609                           ;doprnt.c: 1415: if(width)
  8610  00141A  5021               	movf	sprintf@width,w,c
  8611  00141C  1022               	iorwf	sprintf@width+1,w,c
  8612  00141E  B4D8               	btfsc	status,2,c
  8613  001420  D026               	goto	l1008
  8614  001422                     l4186:
  8615                           
  8616                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  8617  001422  C00D  FFD9         	movff	sprintf@sp,fsr2l
  8618  001426  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  8619  00142A  0E30               	movlw	48
  8620  00142C  6EDF               	movwf	indf2,c
  8621  00142E  4A0D               	infsnz	sprintf@sp,f,c
  8622  001430  2A0E               	incf	sprintf@sp+1,f,c
  8623                           
  8624                           ;doprnt.c: 1418: while(--width);
  8625  001432  0621               	decf	sprintf@width,f,c
  8626  001434  A0D8               	btfss	status,0,c
  8627  001436  0622               	decf	sprintf@width+1,f,c
  8628  001438  5021               	movf	sprintf@width,w,c
  8629  00143A  1022               	iorwf	sprintf@width+1,w,c
  8630  00143C  B4D8               	btfsc	status,2,c
  8631  00143E  D017               	goto	l1008
  8632  001440  D7F0               	goto	l4186
  8633                           
  8634                           ;doprnt.c: 1420: } else
  8635  001442  D015               	goto	l1008
  8636  001444                     l4192:
  8637                           
  8638                           ;doprnt.c: 1422: {
  8639                           ;doprnt.c: 1424: if(width
  8640                           ;doprnt.c: 1428: )
  8641  001444  5021               	movf	sprintf@width,w,c
  8642  001446  1022               	iorwf	sprintf@width+1,w,c
  8643  001448  B4D8               	btfsc	status,2,c
  8644  00144A  D011               	goto	l1008
  8645  00144C                     l4194:
  8646                           
  8647                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  8648  00144C  C00D  FFD9         	movff	sprintf@sp,fsr2l
  8649  001450  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  8650  001454  0E20               	movlw	32
  8651  001456  6EDF               	movwf	indf2,c
  8652  001458  4A0D               	infsnz	sprintf@sp,f,c
  8653  00145A  2A0E               	incf	sprintf@sp+1,f,c
  8654                           
  8655                           ;doprnt.c: 1431: while(--width);
  8656  00145C  0621               	decf	sprintf@width,f,c
  8657  00145E  A0D8               	btfss	status,0,c
  8658  001460  0622               	decf	sprintf@width+1,f,c
  8659  001462  5021               	movf	sprintf@width,w,c
  8660  001464  1022               	iorwf	sprintf@width+1,w,c
  8661  001466  B4D8               	btfsc	status,2,c
  8662  001468  D002               	goto	l1008
  8663  00146A  D7F0               	goto	l4194
  8664  00146C  D000               	goto	l1008
  8665  00146E                     l1008:
  8666                           
  8667                           ;doprnt.c: 1469: }
  8668                           ;doprnt.c: 1472: prec = c;
  8669  00146E  C023  F020         	movff	sprintf@c,sprintf@prec
  8670                           
  8671                           ;doprnt.c: 1474: while(prec--) {
  8672  001472  D02A               	goto	l4206
  8673  001474                     l4200:
  8674                           
  8675                           ;doprnt.c: 1478: {
  8676                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8677  001474  5020               	movf	sprintf@prec,w,c
  8678  001476  0D02               	mullw	2
  8679  001478  0E01               	movlw	low _dpowers
  8680  00147A  24F3               	addwf	prodl,w,c
  8681  00147C  6EF6               	movwf	tblptrl,c
  8682  00147E  0E0F               	movlw	high _dpowers
  8683  001480  20F4               	addwfc	prodh,w,c
  8684  001482  6EF7               	movwf	tblptrh,c
  8685  001484                     	if	0	;There are less than 3 active tblptr bytes
  8686  001484                     	endif
  8687  001484  0009               	tblrd		*+
  8688  001486  CFF5 F003          	movff	tablat,___lwdiv@divisor
  8689  00148A  000A               	tblrd		*-
  8690  00148C  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  8691  001490  C01E  F001         	movff	sprintf@val,___lwdiv@dividend
  8692  001494  C01F  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  8693  001498  ECA6  F01A         	call	___lwdiv	;wreg free
  8694  00149C  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  8695  0014A0  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  8696  0014A4  0E00               	movlw	0
  8697  0014A6  6E0B               	movwf	___lwmod@divisor+1,c
  8698  0014A8  0E0A               	movlw	10
  8699  0014AA  6E0A               	movwf	___lwmod@divisor,c
  8700  0014AC  EC50  F01B         	call	___lwmod	;wreg free
  8701  0014B0  5008               	movf	?___lwmod,w,c
  8702  0014B2  0F30               	addlw	48
  8703  0014B4  6E23               	movwf	sprintf@c,c
  8704                           
  8705                           ;doprnt.c: 1523: }
  8706                           ;doprnt.c: 1524: ((*sp++ = (c)));
  8707  0014B6  C00D  FFD9         	movff	sprintf@sp,fsr2l
  8708  0014BA  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  8709  0014BE  C023  FFDF         	movff	sprintf@c,indf2
  8710  0014C2  4A0D               	infsnz	sprintf@sp,f,c
  8711  0014C4  2A0E               	incf	sprintf@sp+1,f,c
  8712  0014C6  D000               	goto	l4206
  8713  0014C8                     l4206:
  8714  0014C8  0620               	decf	sprintf@prec,f,c
  8715  0014CA  2820               	incf	sprintf@prec,w,c
  8716  0014CC  B4D8               	btfsc	status,2,c
  8717  0014CE  D002               	goto	l4208
  8718  0014D0  D7D1               	goto	l4200
  8719  0014D2  D000               	goto	l4208
  8720  0014D4                     l4208:
  8721  0014D4  C00F  FFF6         	movff	sprintf@f,tblptrl
  8722  0014D8  C010  FFF7         	movff	sprintf@f+1,tblptrh
  8723  0014DC  4A0F               	infsnz	sprintf@f,f,c
  8724  0014DE  2A10               	incf	sprintf@f+1,f,c
  8725  0014E0                     	if	0	;tblptru may be non-zero
  8726  0014E0                     	endif
  8727  0014E0                     	if	0	;tblptru may be non-zero
  8728  0014E0                     	endif
  8729  0014E0  0008               	tblrd		*
  8730  0014E2  CFF5 F023          	movff	tablat,sprintf@c
  8731  0014E6  5023               	movf	sprintf@c,w,c
  8732  0014E8  B4D8               	btfsc	status,2,c
  8733  0014EA  D002               	goto	l4210
  8734  0014EC  D6DC               	goto	l4126
  8735  0014EE  D000               	goto	l4210
  8736  0014F0                     l4210:
  8737                           
  8738                           ;doprnt.c: 1538: *sp = 0;
  8739  0014F0  C00D  FFD9         	movff	sprintf@sp,fsr2l
  8740  0014F4  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  8741  0014F8  0E00               	movlw	0
  8742  0014FA  6EDF               	movwf	indf2,c
  8743  0014FC  0012               	return	
  8744                           
  8745                           ;doprnt.c: 1540: return 0;
  8746                           ;	Return value of _sprintf is never used
  8747  0014FE  0012               	return		;funcret
  8748  001500                     __end_of_sprintf:
  8749                           	opt stack 0
  8750                           tblptru	equ	0xFF8
  8751                           tblptrh	equ	0xFF7
  8752                           tblptrl	equ	0xFF6
  8753                           tablat	equ	0xFF5
  8754                           prodh	equ	0xFF4
  8755                           prodl	equ	0xFF3
  8756                           postinc0	equ	0xFEE
  8757                           wreg	equ	0xFE8
  8758                           postdec1	equ	0xFE5
  8759                           fsr1l	equ	0xFE1
  8760                           indf2	equ	0xFDF
  8761                           postinc2	equ	0xFDE
  8762                           postdec2	equ	0xFDD
  8763                           fsr2h	equ	0xFDA
  8764                           fsr2l	equ	0xFD9
  8765                           status	equ	0xFD8
  8766                           
  8767 ;; *************** function _isdigit *****************
  8768 ;; Defined at:
  8769 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\isdigit.c"
  8770 ;; Parameters:    Size  Location     Type
  8771 ;;  c               1    wreg     unsigned char 
  8772 ;; Auto vars:     Size  Location     Type
  8773 ;;  c               1    2[COMRAM] unsigned char 
  8774 ;; Return value:  Size  Location     Type
  8775 ;;		None               void
  8776 ;; Registers used:
  8777 ;;		wreg, status,2, status,0
  8778 ;; Tracked objects:
  8779 ;;		On entry : 0/0
  8780 ;;		On exit  : 0/0
  8781 ;;		Unchanged: 0/0
  8782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8784 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8785 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8786 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8787 ;;Total ram usage:        3 bytes
  8788 ;; Hardware stack levels used:    1
  8789 ;; This function calls:
  8790 ;;		Nothing
  8791 ;; This function is called by:
  8792 ;;		_sprintf
  8793 ;; This function uses a non-reentrant model
  8794 ;;
  8795                           
  8796                           	psect	text49
  8797  003A8E                     __ptext49:
  8798                           	opt stack 0
  8799  003A8E                     _isdigit:
  8800                           	opt stack 27
  8801                           
  8802                           ;incstack = 0
  8803                           ;isdigit@c stored from wreg
  8804  003A8E  6E03               	movwf	isdigit@c,c
  8805  003A90  0E00               	movlw	0
  8806  003A92  6E02               	movwf	_isdigit$2795,c
  8807  003A94  0E3A               	movlw	58
  8808  003A96  6003               	cpfslt	isdigit@c,c
  8809  003A98  D006               	goto	l3994
  8810  003A9A  0E2F               	movlw	47
  8811  003A9C  6403               	cpfsgt	isdigit@c,c
  8812  003A9E  D003               	goto	l3994
  8813  003AA0  0E01               	movlw	1
  8814  003AA2  6E02               	movwf	_isdigit$2795,c
  8815  003AA4  D000               	goto	l3994
  8816  003AA6                     l3994:
  8817  003AA6  C002  F001         	movff	_isdigit$2795,??_isdigit
  8818  003AAA  3001               	rrcf	??_isdigit,w,c
  8819  003AAC  0012               	return	
  8820  003AAE  0012               	return		;funcret
  8821  003AB0                     __end_of_isdigit:
  8822                           	opt stack 0
  8823                           tblptru	equ	0xFF8
  8824                           tblptrh	equ	0xFF7
  8825                           tblptrl	equ	0xFF6
  8826                           tablat	equ	0xFF5
  8827                           prodh	equ	0xFF4
  8828                           prodl	equ	0xFF3
  8829                           postinc0	equ	0xFEE
  8830                           wreg	equ	0xFE8
  8831                           postdec1	equ	0xFE5
  8832                           fsr1l	equ	0xFE1
  8833                           indf2	equ	0xFDF
  8834                           postinc2	equ	0xFDE
  8835                           postdec2	equ	0xFDD
  8836                           fsr2h	equ	0xFDA
  8837                           fsr2l	equ	0xFD9
  8838                           status	equ	0xFD8
  8839                           
  8840 ;; *************** function ___wmul *****************
  8841 ;; Defined at:
  8842 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\Umul16.c"
  8843 ;; Parameters:    Size  Location     Type
  8844 ;;  multiplier      2    0[COMRAM] unsigned int 
  8845 ;;  multiplicand    2    2[COMRAM] unsigned int 
  8846 ;; Auto vars:     Size  Location     Type
  8847 ;;  product         2    4[COMRAM] unsigned int 
  8848 ;; Return value:  Size  Location     Type
  8849 ;;                  2    0[COMRAM] unsigned int 
  8850 ;; Registers used:
  8851 ;;		wreg, status,2, status,0, prodl, prodh
  8852 ;; Tracked objects:
  8853 ;;		On entry : 0/0
  8854 ;;		On exit  : 0/0
  8855 ;;		Unchanged: 0/0
  8856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8857 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8858 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8860 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8861 ;;Total ram usage:        6 bytes
  8862 ;; Hardware stack levels used:    1
  8863 ;; This function calls:
  8864 ;;		Nothing
  8865 ;; This function is called by:
  8866 ;;		_sprintf
  8867 ;;		_eval_poly
  8868 ;; This function uses a non-reentrant model
  8869 ;;
  8870                           
  8871                           	psect	text50
  8872  0039D4                     __ptext50:
  8873                           	opt stack 0
  8874  0039D4                     ___wmul:
  8875                           	opt stack 27
  8876                           
  8877                           ;incstack = 0
  8878  0039D4  5001               	movf	___wmul@multiplier,w,c
  8879  0039D6  0203               	mulwf	___wmul@multiplicand,c
  8880  0039D8  CFF3 F005          	movff	prodl,___wmul@product
  8881  0039DC  CFF4 F006          	movff	prodh,___wmul@product+1
  8882  0039E0  5001               	movf	___wmul@multiplier,w,c
  8883  0039E2  0204               	mulwf	___wmul@multiplicand+1,c
  8884  0039E4  50F3               	movf	prodl,w,c
  8885  0039E6  2606               	addwf	___wmul@product+1,f,c
  8886  0039E8  5002               	movf	___wmul@multiplier+1,w,c
  8887  0039EA  0203               	mulwf	___wmul@multiplicand,c
  8888  0039EC  50F3               	movf	prodl,w,c
  8889  0039EE  2606               	addwf	___wmul@product+1,f,c
  8890  0039F0  C005  F001         	movff	___wmul@product,?___wmul
  8891  0039F4  C006  F002         	movff	___wmul@product+1,?___wmul+1
  8892  0039F8  0012               	return	
  8893  0039FA  0012               	return		;funcret
  8894  0039FC                     __end_of___wmul:
  8895                           	opt stack 0
  8896                           tblptru	equ	0xFF8
  8897                           tblptrh	equ	0xFF7
  8898                           tblptrl	equ	0xFF6
  8899                           tablat	equ	0xFF5
  8900                           prodh	equ	0xFF4
  8901                           prodl	equ	0xFF3
  8902                           postinc0	equ	0xFEE
  8903                           wreg	equ	0xFE8
  8904                           postdec1	equ	0xFE5
  8905                           fsr1l	equ	0xFE1
  8906                           indf2	equ	0xFDF
  8907                           postinc2	equ	0xFDE
  8908                           postdec2	equ	0xFDD
  8909                           fsr2h	equ	0xFDA
  8910                           fsr2l	equ	0xFD9
  8911                           status	equ	0xFD8
  8912                           
  8913 ;; *************** function ___lwmod *****************
  8914 ;; Defined at:
  8915 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lwmod.c"
  8916 ;; Parameters:    Size  Location     Type
  8917 ;;  dividend        2    7[COMRAM] unsigned int 
  8918 ;;  divisor         2    9[COMRAM] unsigned int 
  8919 ;; Auto vars:     Size  Location     Type
  8920 ;;  counter         1   11[COMRAM] unsigned char 
  8921 ;; Return value:  Size  Location     Type
  8922 ;;                  2    7[COMRAM] unsigned int 
  8923 ;; Registers used:
  8924 ;;		wreg, status,2, status,0
  8925 ;; Tracked objects:
  8926 ;;		On entry : 0/0
  8927 ;;		On exit  : 0/0
  8928 ;;		Unchanged: 0/0
  8929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8930 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8931 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8933 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8934 ;;Total ram usage:        5 bytes
  8935 ;; Hardware stack levels used:    1
  8936 ;; This function calls:
  8937 ;;		Nothing
  8938 ;; This function is called by:
  8939 ;;		_sprintf
  8940 ;; This function uses a non-reentrant model
  8941 ;;
  8942                           
  8943                           	psect	text51
  8944  0036A0                     __ptext51:
  8945                           	opt stack 0
  8946  0036A0                     ___lwmod:
  8947                           	opt stack 27
  8948                           
  8949                           ;incstack = 0
  8950  0036A0  500A               	movf	___lwmod@divisor,w,c
  8951  0036A2  100B               	iorwf	___lwmod@divisor+1,w,c
  8952  0036A4  B4D8               	btfsc	status,2,c
  8953  0036A6  D01D               	goto	l1662
  8954  0036A8  0E01               	movlw	1
  8955  0036AA  6E0C               	movwf	___lwmod@counter,c
  8956  0036AC  D005               	goto	l4036
  8957  0036AE                     l4034:
  8958  0036AE  90D8               	bcf	status,0,c
  8959  0036B0  360A               	rlcf	___lwmod@divisor,f,c
  8960  0036B2  360B               	rlcf	___lwmod@divisor+1,f,c
  8961  0036B4  2A0C               	incf	___lwmod@counter,f,c
  8962  0036B6  D000               	goto	l4036
  8963  0036B8                     l4036:
  8964  0036B8  BE0B               	btfsc	___lwmod@divisor+1,7,c
  8965  0036BA  D002               	goto	l4038
  8966  0036BC  D7F8               	goto	l4034
  8967  0036BE  D000               	goto	l4038
  8968  0036C0                     l4038:
  8969  0036C0  500A               	movf	___lwmod@divisor,w,c
  8970  0036C2  5C08               	subwf	___lwmod@dividend,w,c
  8971  0036C4  500B               	movf	___lwmod@divisor+1,w,c
  8972  0036C6  5809               	subwfb	___lwmod@dividend+1,w,c
  8973  0036C8  A0D8               	btfss	status,0,c
  8974  0036CA  D005               	goto	l4042
  8975  0036CC  500A               	movf	___lwmod@divisor,w,c
  8976  0036CE  5E08               	subwf	___lwmod@dividend,f,c
  8977  0036D0  500B               	movf	___lwmod@divisor+1,w,c
  8978  0036D2  5A09               	subwfb	___lwmod@dividend+1,f,c
  8979  0036D4  D000               	goto	l4042
  8980  0036D6                     l4042:
  8981  0036D6  90D8               	bcf	status,0,c
  8982  0036D8  320B               	rrcf	___lwmod@divisor+1,f,c
  8983  0036DA  320A               	rrcf	___lwmod@divisor,f,c
  8984  0036DC  2E0C               	decfsz	___lwmod@counter,f,c
  8985  0036DE  D7F0               	goto	l4038
  8986  0036E0  D000               	goto	l1662
  8987  0036E2                     l1662:
  8988  0036E2  C008  F008         	movff	___lwmod@dividend,?___lwmod
  8989  0036E6  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  8990  0036EA  0012               	return		;funcret
  8991  0036EC                     __end_of___lwmod:
  8992                           	opt stack 0
  8993                           tblptru	equ	0xFF8
  8994                           tblptrh	equ	0xFF7
  8995                           tblptrl	equ	0xFF6
  8996                           tablat	equ	0xFF5
  8997                           prodh	equ	0xFF4
  8998                           prodl	equ	0xFF3
  8999                           postinc0	equ	0xFEE
  9000                           wreg	equ	0xFE8
  9001                           postdec1	equ	0xFE5
  9002                           fsr1l	equ	0xFE1
  9003                           indf2	equ	0xFDF
  9004                           postinc2	equ	0xFDE
  9005                           postdec2	equ	0xFDD
  9006                           fsr2h	equ	0xFDA
  9007                           fsr2l	equ	0xFD9
  9008                           status	equ	0xFD8
  9009                           
  9010 ;; *************** function ___lwdiv *****************
  9011 ;; Defined at:
  9012 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  9013 ;; Parameters:    Size  Location     Type
  9014 ;;  dividend        2    0[COMRAM] unsigned int 
  9015 ;;  divisor         2    2[COMRAM] unsigned int 
  9016 ;; Auto vars:     Size  Location     Type
  9017 ;;  quotient        2    4[COMRAM] unsigned int 
  9018 ;;  counter         1    6[COMRAM] unsigned char 
  9019 ;; Return value:  Size  Location     Type
  9020 ;;                  2    0[COMRAM] unsigned int 
  9021 ;; Registers used:
  9022 ;;		wreg, status,2, status,0
  9023 ;; Tracked objects:
  9024 ;;		On entry : 0/0
  9025 ;;		On exit  : 0/0
  9026 ;;		Unchanged: 0/0
  9027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9028 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9029 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9031 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9032 ;;Total ram usage:        7 bytes
  9033 ;; Hardware stack levels used:    1
  9034 ;; This function calls:
  9035 ;;		Nothing
  9036 ;; This function is called by:
  9037 ;;		_sprintf
  9038 ;; This function uses a non-reentrant model
  9039 ;;
  9040                           
  9041                           	psect	text52
  9042  00354C                     __ptext52:
  9043                           	opt stack 0
  9044  00354C                     ___lwdiv:
  9045                           	opt stack 27
  9046                           
  9047                           ;incstack = 0
  9048  00354C  0E00               	movlw	0
  9049  00354E  6E06               	movwf	___lwdiv@quotient+1,c
  9050  003550  0E00               	movlw	0
  9051  003552  6E05               	movwf	___lwdiv@quotient,c
  9052  003554  5003               	movf	___lwdiv@divisor,w,c
  9053  003556  1004               	iorwf	___lwdiv@divisor+1,w,c
  9054  003558  B4D8               	btfsc	status,2,c
  9055  00355A  D021               	goto	l1652
  9056  00355C  0E01               	movlw	1
  9057  00355E  6E07               	movwf	___lwdiv@counter,c
  9058  003560  D005               	goto	l4016
  9059  003562                     l4014:
  9060  003562  90D8               	bcf	status,0,c
  9061  003564  3603               	rlcf	___lwdiv@divisor,f,c
  9062  003566  3604               	rlcf	___lwdiv@divisor+1,f,c
  9063  003568  2A07               	incf	___lwdiv@counter,f,c
  9064  00356A  D000               	goto	l4016
  9065  00356C                     l4016:
  9066  00356C  BE04               	btfsc	___lwdiv@divisor+1,7,c
  9067  00356E  D002               	goto	l4018
  9068  003570  D7F8               	goto	l4014
  9069  003572  D000               	goto	l4018
  9070  003574                     l4018:
  9071  003574  90D8               	bcf	status,0,c
  9072  003576  3605               	rlcf	___lwdiv@quotient,f,c
  9073  003578  3606               	rlcf	___lwdiv@quotient+1,f,c
  9074  00357A  5003               	movf	___lwdiv@divisor,w,c
  9075  00357C  5C01               	subwf	___lwdiv@dividend,w,c
  9076  00357E  5004               	movf	___lwdiv@divisor+1,w,c
  9077  003580  5802               	subwfb	___lwdiv@dividend+1,w,c
  9078  003582  A0D8               	btfss	status,0,c
  9079  003584  D006               	goto	l4026
  9080  003586  5003               	movf	___lwdiv@divisor,w,c
  9081  003588  5E01               	subwf	___lwdiv@dividend,f,c
  9082  00358A  5004               	movf	___lwdiv@divisor+1,w,c
  9083  00358C  5A02               	subwfb	___lwdiv@dividend+1,f,c
  9084  00358E  8005               	bsf	___lwdiv@quotient,0,c
  9085  003590  D000               	goto	l4026
  9086  003592                     l4026:
  9087  003592  90D8               	bcf	status,0,c
  9088  003594  3204               	rrcf	___lwdiv@divisor+1,f,c
  9089  003596  3203               	rrcf	___lwdiv@divisor,f,c
  9090  003598  2E07               	decfsz	___lwdiv@counter,f,c
  9091  00359A  D7EC               	goto	l4018
  9092  00359C  D000               	goto	l1652
  9093  00359E                     l1652:
  9094  00359E  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  9095  0035A2  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  9096  0035A6  0012               	return		;funcret
  9097  0035A8                     __end_of___lwdiv:
  9098                           	opt stack 0
  9099                           tblptru	equ	0xFF8
  9100                           tblptrh	equ	0xFF7
  9101                           tblptrl	equ	0xFF6
  9102                           tablat	equ	0xFF5
  9103                           prodh	equ	0xFF4
  9104                           prodl	equ	0xFF3
  9105                           postinc0	equ	0xFEE
  9106                           wreg	equ	0xFE8
  9107                           postdec1	equ	0xFE5
  9108                           fsr1l	equ	0xFE1
  9109                           indf2	equ	0xFDF
  9110                           postinc2	equ	0xFDE
  9111                           postdec2	equ	0xFDD
  9112                           fsr2h	equ	0xFDA
  9113                           fsr2l	equ	0xFD9
  9114                           status	equ	0xFD8
  9115                           
  9116 ;; *************** function _lcd_putrs *****************
  9117 ;; Defined at:
  9118 ;;		line 221 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  9119 ;; Parameters:    Size  Location     Type
  9120 ;;  ptr             2    8[COMRAM] PTR const unsigned char 
  9121 ;;		 -> STR_29(2), STR_27(6), STR_25(9), STR_24(14), 
  9122 ;;		 -> STR_23(14), STR_22(16), STR_21(15), STR_20(8), 
  9123 ;;		 -> STR_19(13), STR_18(8), STR_17(4), STR_16(3), 
  9124 ;;		 -> STR_15(11), STR_14(11), STR_13(10), buffer2(20), 
  9125 ;; Auto vars:     Size  Location     Type
  9126 ;;		None
  9127 ;; Return value:  Size  Location     Type
  9128 ;;		None               void
  9129 ;; Registers used:
  9130 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9131 ;; Tracked objects:
  9132 ;;		On entry : 0/0
  9133 ;;		On exit  : 0/0
  9134 ;;		Unchanged: 0/0
  9135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9136 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9139 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9140 ;;Total ram usage:        2 bytes
  9141 ;; Hardware stack levels used:    1
  9142 ;; Hardware stack levels required when called:    4
  9143 ;; This function calls:
  9144 ;;		_lcd_putc
  9145 ;; This function is called by:
  9146 ;;		_read_keyboard
  9147 ;;		_write_Date
  9148 ;;		_set_desactive_vision
  9149 ;;		_twinkle
  9150 ;;		_set_vision
  9151 ;;		_show_success
  9152 ;;		_show_error
  9153 ;;		_ver_opcion_cambio
  9154 ;;		_ver_info
  9155 ;; This function uses a non-reentrant model
  9156 ;;
  9157                           
  9158                           	psect	text53
  9159  003600                     __ptext53:
  9160                           	opt stack 0
  9161  003600                     _lcd_putrs:
  9162                           	opt stack 24
  9163                           
  9164                           ;unmc_lcd_216.c: 223: while(*ptr){
  9165                           
  9166                           ;incstack = 0
  9167  003600  D015               	goto	l4122
  9168  003602                     l4118:
  9169                           
  9170                           ;unmc_lcd_216.c: 224: lcd_putc(*ptr++);
  9171  003602  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  9172  003606  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  9173  00360A  6AF8               	clrf	tblptru,c
  9174  00360C  0E0E               	movlw	(high __ramtop+-1)
  9175  00360E  64F7               	cpfsgt	tblptrh,c
  9176  003610  D003               	bra	u3447
  9177  003612  0008               	tblrd		*
  9178  003614  50F5               	movf	tablat,w,c
  9179  003616  D005               	bra	u3440
  9180  003618                     u3447:
  9181  003618  CFF6 FFE9          	movff	tblptrl,fsr0l
  9182  00361C  CFF7 FFEA          	movff	tblptrh,fsr0h
  9183  003620  50EF               	movf	indf0,w,c
  9184  003622                     u3440:
  9185  003622  EC76  F01B         	call	_lcd_putc
  9186  003626  4A09               	infsnz	lcd_putrs@ptr,f,c
  9187  003628  2A0A               	incf	lcd_putrs@ptr+1,f,c
  9188  00362A  D000               	goto	l4122
  9189  00362C                     l4122:
  9190  00362C  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  9191  003630  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  9192  003634  6AF8               	clrf	tblptru,c
  9193  003636  0E0E               	movlw	(high __ramtop+-1)
  9194  003638  64F7               	cpfsgt	tblptrh,c
  9195  00363A  D003               	bra	u3457
  9196  00363C  0008               	tblrd		*
  9197  00363E  50F5               	movf	tablat,w,c
  9198  003640  D005               	bra	u3450
  9199  003642                     u3457:
  9200  003642  CFF6 FFE9          	movff	tblptrl,fsr0l
  9201  003646  CFF7 FFEA          	movff	tblptrh,fsr0h
  9202  00364A  50EF               	movf	indf0,w,c
  9203  00364C                     u3450:
  9204  00364C  0900               	iorlw	0
  9205  00364E  A4D8               	btfss	status,2,c
  9206  003650  D7D8               	goto	l4118
  9207  003652  0012               	return		;funcret
  9208  003654                     __end_of_lcd_putrs:
  9209                           	opt stack 0
  9210                           tblptru	equ	0xFF8
  9211                           tblptrh	equ	0xFF7
  9212                           tblptrl	equ	0xFF6
  9213                           tablat	equ	0xFF5
  9214                           prodh	equ	0xFF4
  9215                           prodl	equ	0xFF3
  9216                           indf0	equ	0xFEF
  9217                           postinc0	equ	0xFEE
  9218                           fsr0h	equ	0xFEA
  9219                           fsr0l	equ	0xFE9
  9220                           wreg	equ	0xFE8
  9221                           postdec1	equ	0xFE5
  9222                           fsr1l	equ	0xFE1
  9223                           indf2	equ	0xFDF
  9224                           postinc2	equ	0xFDE
  9225                           postdec2	equ	0xFDD
  9226                           fsr2h	equ	0xFDA
  9227                           fsr2l	equ	0xFD9
  9228                           status	equ	0xFD8
  9229                           
  9230 ;; *************** function _lcd_putc *****************
  9231 ;; Defined at:
  9232 ;;		line 172 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  9233 ;; Parameters:    Size  Location     Type
  9234 ;;  c               1    wreg     unsigned char 
  9235 ;; Auto vars:     Size  Location     Type
  9236 ;;  c               1    7[COMRAM] unsigned char 
  9237 ;; Return value:  Size  Location     Type
  9238 ;;		None               void
  9239 ;; Registers used:
  9240 ;;		wreg, status,2, status,0, cstack
  9241 ;; Tracked objects:
  9242 ;;		On entry : 0/0
  9243 ;;		On exit  : 0/0
  9244 ;;		Unchanged: 0/0
  9245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9247 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9249 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9250 ;;Total ram usage:        1 bytes
  9251 ;; Hardware stack levels used:    1
  9252 ;; Hardware stack levels required when called:    3
  9253 ;; This function calls:
  9254 ;;		_lcd_gotoxy
  9255 ;;		_lcd_send_byte
  9256 ;; This function is called by:
  9257 ;;		_lcd_putrs
  9258 ;;		_lcd_puts
  9259 ;; This function uses a non-reentrant model
  9260 ;;
  9261                           
  9262                           	psect	text54
  9263  0036EC                     __ptext54:
  9264                           	opt stack 0
  9265  0036EC                     _lcd_putc:
  9266                           	opt stack 24
  9267                           
  9268                           ;incstack = 0
  9269                           ;lcd_putc@c stored from wreg
  9270  0036EC  6E08               	movwf	lcd_putc@c,c
  9271                           
  9272                           ;unmc_lcd_216.c: 173: switch(c){
  9273  0036EE  D018               	goto	l3974
  9274  0036F0                     l3964:
  9275                           
  9276                           ;unmc_lcd_216.c: 175: lcd_send_byte(0,1);
  9277  0036F0  0E01               	movlw	1
  9278  0036F2  6E03               	movwf	lcd_send_byte@n,c
  9279  0036F4  0E00               	movlw	0
  9280  0036F6  EC73  F01C         	call	_lcd_send_byte
  9281                           
  9282                           ;unmc_lcd_216.c: 176: break;
  9283  0036FA  0012               	return	
  9284  0036FC                     l3966:
  9285                           
  9286                           ;unmc_lcd_216.c: 178: lcd_gotoxy(1,2);
  9287  0036FC  0E02               	movlw	2
  9288  0036FE  6E05               	movwf	lcd_gotoxy@y,c
  9289  003700  0E01               	movlw	1
  9290  003702  EC35  F01D         	call	_lcd_gotoxy
  9291                           
  9292                           ;unmc_lcd_216.c: 179: break;
  9293  003706  0012               	return	
  9294  003708                     l3968:
  9295                           
  9296                           ;unmc_lcd_216.c: 181: lcd_send_byte(0,0x10);
  9297  003708  0E10               	movlw	16
  9298  00370A  6E03               	movwf	lcd_send_byte@n,c
  9299  00370C  0E00               	movlw	0
  9300  00370E  EC73  F01C         	call	_lcd_send_byte
  9301                           
  9302                           ;unmc_lcd_216.c: 182: break;
  9303  003712  0012               	return	
  9304  003714                     l3970:
  9305                           
  9306                           ;unmc_lcd_216.c: 184: lcd_send_byte(1,c);
  9307  003714  C008  F003         	movff	lcd_putc@c,lcd_send_byte@n
  9308  003718  0E01               	movlw	1
  9309  00371A  EC73  F01C         	call	_lcd_send_byte
  9310                           
  9311                           ;unmc_lcd_216.c: 186: }
  9312                           
  9313                           ;unmc_lcd_216.c: 185: break;
  9314  00371E  0012               	return	
  9315  003720                     l3974:
  9316  003720  5008               	movf	lcd_putc@c,w,c
  9317                           
  9318                           ; Switch size 1, requested type "space"
  9319                           ; Number of cases is 3, Range of values is 8 to 12
  9320                           ; switch strategies available:
  9321                           ; Name         Instructions Cycles
  9322                           ; simple_byte           10     6 (average)
  9323                           ;	Chosen strategy is simple_byte
  9324  003722  0A08               	xorlw	8	; case 8
  9325  003724  B4D8               	btfsc	status,2,c
  9326  003726  D7F0               	goto	l3968
  9327  003728  0A02               	xorlw	2	; case 10
  9328  00372A  B4D8               	btfsc	status,2,c
  9329  00372C  D7E7               	goto	l3966
  9330  00372E  0A06               	xorlw	6	; case 12
  9331  003730  B4D8               	btfsc	status,2,c
  9332  003732  D7DE               	goto	l3964
  9333  003734  D7EF               	goto	l3970
  9334  003736  0012               	return		;funcret
  9335  003738                     __end_of_lcd_putc:
  9336                           	opt stack 0
  9337                           tblptru	equ	0xFF8
  9338                           tblptrh	equ	0xFF7
  9339                           tblptrl	equ	0xFF6
  9340                           tablat	equ	0xFF5
  9341                           prodh	equ	0xFF4
  9342                           prodl	equ	0xFF3
  9343                           indf0	equ	0xFEF
  9344                           postinc0	equ	0xFEE
  9345                           fsr0h	equ	0xFEA
  9346                           fsr0l	equ	0xFE9
  9347                           wreg	equ	0xFE8
  9348                           postdec1	equ	0xFE5
  9349                           fsr1l	equ	0xFE1
  9350                           indf2	equ	0xFDF
  9351                           postinc2	equ	0xFDE
  9352                           postdec2	equ	0xFDD
  9353                           fsr2h	equ	0xFDA
  9354                           fsr2l	equ	0xFD9
  9355                           status	equ	0xFD8
  9356                           
  9357 ;; *************** function _lcd_gotoxy *****************
  9358 ;; Defined at:
  9359 ;;		line 158 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  9360 ;; Parameters:    Size  Location     Type
  9361 ;;  x               1    wreg     unsigned char 
  9362 ;;  y               1    4[COMRAM] unsigned char 
  9363 ;; Auto vars:     Size  Location     Type
  9364 ;;  x               1    5[COMRAM] unsigned char 
  9365 ;;  address         1    6[COMRAM] unsigned char 
  9366 ;; Return value:  Size  Location     Type
  9367 ;;		None               void
  9368 ;; Registers used:
  9369 ;;		wreg, status,2, status,0, cstack
  9370 ;; Tracked objects:
  9371 ;;		On entry : 0/0
  9372 ;;		On exit  : 0/0
  9373 ;;		Unchanged: 0/0
  9374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9375 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9376 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9377 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9378 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9379 ;;Total ram usage:        3 bytes
  9380 ;; Hardware stack levels used:    1
  9381 ;; Hardware stack levels required when called:    2
  9382 ;; This function calls:
  9383 ;;		_lcd_send_byte
  9384 ;; This function is called by:
  9385 ;;		_lcd_putc
  9386 ;;		_configurar_reloj
  9387 ;;		_write_Date
  9388 ;;		_next_code
  9389 ;;		_set_desactive_vision
  9390 ;;		_twinkle
  9391 ;;		_set_vision
  9392 ;;		_input_old_pass
  9393 ;;		_show_success
  9394 ;;		_show_error
  9395 ;;		_input_new_pass
  9396 ;;		_ver_opcion_cambio
  9397 ;;		_ver_info
  9398 ;; This function uses a non-reentrant model
  9399 ;;
  9400                           
  9401                           	psect	text55
  9402  003A6A                     __ptext55:
  9403                           	opt stack 0
  9404  003A6A                     _lcd_gotoxy:
  9405                           	opt stack 24
  9406                           
  9407                           ;incstack = 0
  9408                           ;lcd_gotoxy@x stored from wreg
  9409  003A6A  6E06               	movwf	lcd_gotoxy@x,c
  9410                           
  9411                           ;unmc_lcd_216.c: 159: int8 address;
  9412                           ;unmc_lcd_216.c: 161: if(y != 1)
  9413  003A6C  0405               	decf	lcd_gotoxy@y,w,c
  9414  003A6E  B4D8               	btfsc	status,2,c
  9415  003A70  D002               	goto	l3820
  9416                           
  9417                           ;unmc_lcd_216.c: 162: address = 0x40;
  9418  003A72  0E40               	movlw	64
  9419  003A74  D001               	goto	L6
  9420  003A76                     l3820:
  9421                           
  9422                           ;unmc_lcd_216.c: 163: else
  9423                           ;unmc_lcd_216.c: 164: address=0;
  9424  003A76  0E00               	movlw	0
  9425  003A78                     L6:
  9426  003A78  6E07               	movwf	lcd_gotoxy@address,c
  9427  003A7A  D000               	goto	l3822
  9428  003A7C                     l3822:
  9429                           
  9430                           ;unmc_lcd_216.c: 166: address += x-1;
  9431  003A7C  0406               	decf	lcd_gotoxy@x,w,c
  9432  003A7E  2607               	addwf	lcd_gotoxy@address,f,c
  9433                           
  9434                           ;unmc_lcd_216.c: 167: lcd_send_byte(0, 0x80 | address);
  9435  003A80  5007               	movf	lcd_gotoxy@address,w,c
  9436  003A82  0980               	iorlw	128
  9437  003A84  6E03               	movwf	lcd_send_byte@n,c
  9438  003A86  0E00               	movlw	0
  9439  003A88  EC73  F01C         	call	_lcd_send_byte
  9440  003A8C  0012               	return		;funcret
  9441  003A8E                     __end_of_lcd_gotoxy:
  9442                           	opt stack 0
  9443                           tblptru	equ	0xFF8
  9444                           tblptrh	equ	0xFF7
  9445                           tblptrl	equ	0xFF6
  9446                           tablat	equ	0xFF5
  9447                           prodh	equ	0xFF4
  9448                           prodl	equ	0xFF3
  9449                           indf0	equ	0xFEF
  9450                           postinc0	equ	0xFEE
  9451                           fsr0h	equ	0xFEA
  9452                           fsr0l	equ	0xFE9
  9453                           wreg	equ	0xFE8
  9454                           postdec1	equ	0xFE5
  9455                           fsr1l	equ	0xFE1
  9456                           indf2	equ	0xFDF
  9457                           postinc2	equ	0xFDE
  9458                           postdec2	equ	0xFDD
  9459                           fsr2h	equ	0xFDA
  9460                           fsr2l	equ	0xFD9
  9461                           status	equ	0xFD8
  9462                           
  9463 ;; *************** function _evalueChanceOfRaw *****************
  9464 ;; Defined at:
  9465 ;;		line 5 in file "reloj.c"
  9466 ;; Parameters:    Size  Location     Type
  9467 ;;  x               2    0[COMRAM] PTR unsigned char 
  9468 ;;		 -> configurar_reloj@x(1), 
  9469 ;;  y               2    2[COMRAM] PTR unsigned char 
  9470 ;;		 -> configurar_reloj@y(1), 
  9471 ;; Auto vars:     Size  Location     Type
  9472 ;;		None
  9473 ;; Return value:  Size  Location     Type
  9474 ;;		None               void
  9475 ;; Registers used:
  9476 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9477 ;; Tracked objects:
  9478 ;;		On entry : 0/0
  9479 ;;		On exit  : 0/0
  9480 ;;		Unchanged: 0/0
  9481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9482 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9484 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9485 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9486 ;;Total ram usage:        5 bytes
  9487 ;; Hardware stack levels used:    1
  9488 ;; This function calls:
  9489 ;;		Nothing
  9490 ;; This function is called by:
  9491 ;;		_configurar_reloj
  9492 ;; This function uses a non-reentrant model
  9493 ;;
  9494                           
  9495                           	psect	text56
  9496  00342C                     __ptext56:
  9497                           	opt stack 0
  9498  00342C                     _evalueChanceOfRaw:
  9499                           	opt stack 28
  9500                           
  9501                           ;reloj.c: 6: if (*x > 16){
  9502                           
  9503                           ;incstack = 0
  9504  00342C  C001  FFD9         	movff	evalueChanceOfRaw@x,fsr2l
  9505  003430  C002  FFDA         	movff	evalueChanceOfRaw@x+1,fsr2h
  9506  003434  0E10               	movlw	16
  9507  003436  64DF               	cpfsgt	indf2,c
  9508  003438  D00D               	goto	l4758
  9509                           
  9510                           ;reloj.c: 7: *x = 2;
  9511  00343A  C001  FFD9         	movff	evalueChanceOfRaw@x,fsr2l
  9512  00343E  C002  FFDA         	movff	evalueChanceOfRaw@x+1,fsr2h
  9513  003442  0E02               	movlw	2
  9514  003444  6EDF               	movwf	indf2,c
  9515                           
  9516                           ;reloj.c: 8: *y = 2;
  9517  003446  C003  FFD9         	movff	evalueChanceOfRaw@y,fsr2l
  9518  00344A  C004  FFDA         	movff	evalueChanceOfRaw@y+1,fsr2h
  9519  00344E  0E02               	movlw	2
  9520  003450  6EDF               	movwf	indf2,c
  9521  003452  D000               	goto	l4758
  9522  003454                     l4758:
  9523                           
  9524                           ;reloj.c: 9: }
  9525                           ;reloj.c: 11: if(*y == 2 && *x > 5){
  9526  003454  C003  FFD9         	movff	evalueChanceOfRaw@y,fsr2l
  9527  003458  C004  FFDA         	movff	evalueChanceOfRaw@y+1,fsr2h
  9528  00345C  0E02               	movlw	2
  9529  00345E  18DE               	xorwf	postinc2,w,c
  9530  003460  A4D8               	btfss	status,2,c
  9531  003462  0012               	return	
  9532  003464  C001  FFD9         	movff	evalueChanceOfRaw@x,fsr2l
  9533  003468  C002  FFDA         	movff	evalueChanceOfRaw@x+1,fsr2h
  9534  00346C  0E05               	movlw	5
  9535  00346E  64DF               	cpfsgt	indf2,c
  9536  003470  0012               	return	
  9537                           
  9538                           ;reloj.c: 13: *y = 1;
  9539  003472  C003  FFD9         	movff	evalueChanceOfRaw@y,fsr2l
  9540  003476  C004  FFDA         	movff	evalueChanceOfRaw@y+1,fsr2h
  9541  00347A  0E01               	movlw	1
  9542  00347C  6EDF               	movwf	indf2,c
  9543                           
  9544                           ;reloj.c: 14: *x = 10;
  9545  00347E  C001  FFD9         	movff	evalueChanceOfRaw@x,fsr2l
  9546  003482  C002  FFDA         	movff	evalueChanceOfRaw@x+1,fsr2h
  9547  003486  0E0A               	movlw	10
  9548  003488  6EDF               	movwf	indf2,c
  9549  00348A  0012               	return	
  9550  00348C  0012               	return		;funcret
  9551  00348E                     __end_of_evalueChanceOfRaw:
  9552                           	opt stack 0
  9553                           tblptru	equ	0xFF8
  9554                           tblptrh	equ	0xFF7
  9555                           tblptrl	equ	0xFF6
  9556                           tablat	equ	0xFF5
  9557                           prodh	equ	0xFF4
  9558                           prodl	equ	0xFF3
  9559                           indf0	equ	0xFEF
  9560                           postinc0	equ	0xFEE
  9561                           fsr0h	equ	0xFEA
  9562                           fsr0l	equ	0xFE9
  9563                           wreg	equ	0xFE8
  9564                           postdec1	equ	0xFE5
  9565                           fsr1l	equ	0xFE1
  9566                           indf2	equ	0xFDF
  9567                           postinc2	equ	0xFDE
  9568                           postdec2	equ	0xFDD
  9569                           fsr2h	equ	0xFDA
  9570                           fsr2l	equ	0xFD9
  9571                           status	equ	0xFD8
  9572                           
  9573 ;; *************** function _Read_RTC *****************
  9574 ;; Defined at:
  9575 ;;		line 59 in file "Unimic/sources/unmc_rtcc_01.c"
  9576 ;; Parameters:    Size  Location     Type
  9577 ;;		None
  9578 ;; Auto vars:     Size  Location     Type
  9579 ;;		None
  9580 ;; Return value:  Size  Location     Type
  9581 ;;		None               void
  9582 ;; Registers used:
  9583 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9584 ;; Tracked objects:
  9585 ;;		On entry : 0/0
  9586 ;;		On exit  : 0/0
  9587 ;;		Unchanged: 0/0
  9588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9592 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9593 ;;Total ram usage:        0 bytes
  9594 ;; Hardware stack levels used:    1
  9595 ;; Hardware stack levels required when called:    1
  9596 ;; This function calls:
  9597 ;;		_RtccReadDate
  9598 ;;		_RtccReadTime
  9599 ;; This function is called by:
  9600 ;;		_main
  9601 ;;		_configurar_reloj
  9602 ;;		_dispararSensor
  9603 ;; This function uses a non-reentrant model
  9604 ;;
  9605                           
  9606                           	psect	text57
  9607  001EA8                     __ptext57:
  9608                           	opt stack 0
  9609  001EA8                     _Read_RTC:
  9610                           	opt stack 27
  9611                           
  9612                           ;unmc_rtcc_01.c: 62: RtccReadTime(&RtccTime);
  9613                           
  9614                           ;incstack = 0
  9615  001EA8  0EB0               	movlw	low _RtccTime
  9616  001EAA  6E01               	movwf	RtccReadTime@pTm,c
  9617  001EAC  0E00               	movlw	high _RtccTime
  9618  001EAE  6E02               	movwf	RtccReadTime@pTm+1,c
  9619  001EB0  ECDF  F019         	call	_RtccReadTime	;wreg free
  9620                           
  9621                           ;unmc_rtcc_01.c: 63: segundo_u=(RtccTime.f.sec & 0x0F);
  9622  001EB4  0100               	movlb	0	; () banked
  9623  001EB6  51B1               	movf	(_RtccTime+1)& (0+255),w,b
  9624  001EB8  0B0F               	andlw	15
  9625  001EBA  0100               	movlb	0	; () banked
  9626  001EBC  6FED               	movwf	_segundo_u& (0+255),b
  9627                           
  9628                           ; BSR set to: 0
  9629                           ;unmc_rtcc_01.c: 64: segundo_d=((RtccTime.f.sec & 0xF0)>>4);
  9630  001EBE  0100               	movlb	0	; () banked
  9631  001EC0  39B1               	swapf	(_RtccTime+1)& (0+255),w,b
  9632  001EC2  0B0F               	andlw	15
  9633  001EC4  0B0F               	andlw	15
  9634  001EC6  0100               	movlb	0	; () banked
  9635  001EC8  6FEC               	movwf	_segundo_d& (0+255),b
  9636                           
  9637                           ; BSR set to: 0
  9638                           ;unmc_rtcc_01.c: 65: minuto_u=(RtccTime.f.min & 0x0F);
  9639  001ECA  0100               	movlb	0	; () banked
  9640  001ECC  51B2               	movf	(_RtccTime+2)& (0+255),w,b
  9641  001ECE  0B0F               	andlw	15
  9642  001ED0  0100               	movlb	0	; () banked
  9643  001ED2  6FEB               	movwf	_minuto_u& (0+255),b
  9644                           
  9645                           ; BSR set to: 0
  9646                           ;unmc_rtcc_01.c: 66: minuto_d=((RtccTime.f.min & 0xF0)>>4);
  9647  001ED4  0100               	movlb	0	; () banked
  9648  001ED6  39B2               	swapf	(_RtccTime+2)& (0+255),w,b
  9649  001ED8  0B0F               	andlw	15
  9650  001EDA  0B0F               	andlw	15
  9651  001EDC  0100               	movlb	0	; () banked
  9652  001EDE  6FEA               	movwf	_minuto_d& (0+255),b
  9653                           
  9654                           ; BSR set to: 0
  9655                           ;unmc_rtcc_01.c: 67: hora_u=(RtccTime.f.hour & 0x0F);
  9656  001EE0  0100               	movlb	0	; () banked
  9657  001EE2  51B3               	movf	(_RtccTime+3)& (0+255),w,b
  9658  001EE4  0B0F               	andlw	15
  9659  001EE6  0100               	movlb	0	; () banked
  9660  001EE8  6FE7               	movwf	_hora_u& (0+255),b
  9661                           
  9662                           ; BSR set to: 0
  9663                           ;unmc_rtcc_01.c: 68: hora_d=((RtccTime.f.hour & 0xF0)>>4);
  9664  001EEA  0100               	movlb	0	; () banked
  9665  001EEC  39B3               	swapf	(_RtccTime+3)& (0+255),w,b
  9666  001EEE  0B0F               	andlw	15
  9667  001EF0  0B0F               	andlw	15
  9668  001EF2  0100               	movlb	0	; () banked
  9669  001EF4  6FE6               	movwf	_hora_d& (0+255),b
  9670                           
  9671                           ;unmc_rtcc_01.c: 69: RtccReadDate(&RtccDate);
  9672  001EF6  0EAC               	movlw	low _RtccDate
  9673  001EF8  6E01               	movwf	RtccReadDate@pDt,c
  9674  001EFA  0E00               	movlw	high _RtccDate
  9675  001EFC  6E02               	movwf	RtccReadDate@pDt+1,c
  9676  001EFE  EC9B  F018         	call	_RtccReadDate	;wreg free
  9677                           
  9678                           ;unmc_rtcc_01.c: 70: fecha_u=(RtccDate.f.mday & 0x0F);
  9679  001F02  0100               	movlb	0	; () banked
  9680  001F04  51AD               	movf	(_RtccDate+1)& (0+255),w,b
  9681  001F06  0B0F               	andlw	15
  9682  001F08  0100               	movlb	0	; () banked
  9683  001F0A  6FE5               	movwf	_fecha_u& (0+255),b
  9684                           
  9685                           ; BSR set to: 0
  9686                           ;unmc_rtcc_01.c: 71: fecha_d=((RtccDate.f.mday & 0xF0)>>4);
  9687  001F0C  0100               	movlb	0	; () banked
  9688  001F0E  39AD               	swapf	(_RtccDate+1)& (0+255),w,b
  9689  001F10  0B0F               	andlw	15
  9690  001F12  0B0F               	andlw	15
  9691  001F14  0100               	movlb	0	; () banked
  9692  001F16  6FE4               	movwf	_fecha_d& (0+255),b
  9693                           
  9694                           ; BSR set to: 0
  9695                           ;unmc_rtcc_01.c: 72: mes_u=(RtccDate.f.mon & 0x0F);
  9696  001F18  0100               	movlb	0	; () banked
  9697  001F1A  51AE               	movf	(_RtccDate+2)& (0+255),w,b
  9698  001F1C  0B0F               	andlw	15
  9699  001F1E  0100               	movlb	0	; () banked
  9700  001F20  6FE9               	movwf	_mes_u& (0+255),b
  9701                           
  9702                           ; BSR set to: 0
  9703                           ;unmc_rtcc_01.c: 73: mes_d=((RtccDate.f.mon & 0xF0)>>4);
  9704  001F22  0100               	movlb	0	; () banked
  9705  001F24  39AE               	swapf	(_RtccDate+2)& (0+255),w,b
  9706  001F26  0B0F               	andlw	15
  9707  001F28  0B0F               	andlw	15
  9708  001F2A  0100               	movlb	0	; () banked
  9709  001F2C  6FE8               	movwf	_mes_d& (0+255),b
  9710                           
  9711                           ; BSR set to: 0
  9712                           ;unmc_rtcc_01.c: 74: dia_semana=RtccDate.f.wday;
  9713  001F2E  C0AC  F0E3         	movff	_RtccDate,_dia_semana
  9714                           
  9715                           ; BSR set to: 0
  9716                           ;unmc_rtcc_01.c: 75: anio_u=(RtccDate.f.year & 0x0F);
  9717  001F32  0100               	movlb	0	; () banked
  9718  001F34  51AF               	movf	(_RtccDate+3)& (0+255),w,b
  9719  001F36  0B0F               	andlw	15
  9720  001F38  0100               	movlb	0	; () banked
  9721  001F3A  6FE2               	movwf	_anio_u& (0+255),b
  9722                           
  9723                           ; BSR set to: 0
  9724                           ;unmc_rtcc_01.c: 76: anio_d=((RtccDate.f.year & 0xF0)>>4);
  9725  001F3C  0100               	movlb	0	; () banked
  9726  001F3E  39AF               	swapf	(_RtccDate+3)& (0+255),w,b
  9727  001F40  0B0F               	andlw	15
  9728  001F42  0B0F               	andlw	15
  9729  001F44  0100               	movlb	0	; () banked
  9730  001F46  6FE1               	movwf	_anio_d& (0+255),b
  9731                           
  9732                           ; BSR set to: 0
  9733                           ;unmc_rtcc_01.c: 78: segundo=segundo_d*10+segundo_u;
  9734  001F48  0100               	movlb	0	; () banked
  9735  001F4A  51EC               	movf	_segundo_d& (0+255),w,b
  9736  001F4C  0D0A               	mullw	10
  9737  001F4E  0100               	movlb	0	; () banked
  9738  001F50  51ED               	movf	_segundo_u& (0+255),w,b
  9739  001F52  24F3               	addwf	prodl,w,c
  9740  001F54  0100               	movlb	0	; () banked
  9741  001F56  6F94               	movwf	_segundo& (0+255),b
  9742  001F58  0100               	movlb	0	; () banked
  9743  001F5A  0E00               	movlw	0
  9744  001F5C  20F4               	addwfc	prodh,w,c
  9745  001F5E  0100               	movlb	0	; () banked
  9746  001F60  6F95               	movwf	(_segundo+1)& (0+255),b
  9747                           
  9748                           ; BSR set to: 0
  9749                           ;unmc_rtcc_01.c: 79: minuto=minuto_d*10+minuto_u;
  9750  001F62  0100               	movlb	0	; () banked
  9751  001F64  51EA               	movf	_minuto_d& (0+255),w,b
  9752  001F66  0D0A               	mullw	10
  9753  001F68  0100               	movlb	0	; () banked
  9754  001F6A  51EB               	movf	_minuto_u& (0+255),w,b
  9755  001F6C  24F3               	addwf	prodl,w,c
  9756  001F6E  0100               	movlb	0	; () banked
  9757  001F70  6FD8               	movwf	_minuto& (0+255),b
  9758  001F72  0100               	movlb	0	; () banked
  9759  001F74  0E00               	movlw	0
  9760  001F76  20F4               	addwfc	prodh,w,c
  9761  001F78  0100               	movlb	0	; () banked
  9762  001F7A  6FD9               	movwf	(_minuto+1)& (0+255),b
  9763                           
  9764                           ; BSR set to: 0
  9765                           ;unmc_rtcc_01.c: 80: hora=hora_d*10+hora_u;
  9766  001F7C  0100               	movlb	0	; () banked
  9767  001F7E  51E6               	movf	_hora_d& (0+255),w,b
  9768  001F80  0D0A               	mullw	10
  9769  001F82  0100               	movlb	0	; () banked
  9770  001F84  51E7               	movf	_hora_u& (0+255),w,b
  9771  001F86  24F3               	addwf	prodl,w,c
  9772  001F88  0100               	movlb	0	; () banked
  9773  001F8A  6FD4               	movwf	_hora& (0+255),b
  9774  001F8C  0100               	movlb	0	; () banked
  9775  001F8E  0E00               	movlw	0
  9776  001F90  20F4               	addwfc	prodh,w,c
  9777  001F92  0100               	movlb	0	; () banked
  9778  001F94  6FD5               	movwf	(_hora+1)& (0+255),b
  9779                           
  9780                           ; BSR set to: 0
  9781                           ;unmc_rtcc_01.c: 81: dia=fecha_d*10+fecha_u;
  9782  001F96  0100               	movlb	0	; () banked
  9783  001F98  51E4               	movf	_fecha_d& (0+255),w,b
  9784  001F9A  0D0A               	mullw	10
  9785  001F9C  0100               	movlb	0	; () banked
  9786  001F9E  51E5               	movf	_fecha_u& (0+255),w,b
  9787  001FA0  24F3               	addwf	prodl,w,c
  9788  001FA2  0100               	movlb	0	; () banked
  9789  001FA4  6FD0               	movwf	_dia& (0+255),b
  9790  001FA6  0100               	movlb	0	; () banked
  9791  001FA8  0E00               	movlw	0
  9792  001FAA  20F4               	addwfc	prodh,w,c
  9793  001FAC  0100               	movlb	0	; () banked
  9794  001FAE  6FD1               	movwf	(_dia+1)& (0+255),b
  9795                           
  9796                           ; BSR set to: 0
  9797                           ;unmc_rtcc_01.c: 82: diasem=dia_semana;
  9798  001FB0  C0E3  F0D2         	movff	_dia_semana,_diasem
  9799  001FB4  0100               	movlb	0	; () banked
  9800  001FB6  6BD3               	clrf	(_diasem+1)& (0+255),b
  9801                           
  9802                           ; BSR set to: 0
  9803                           ;unmc_rtcc_01.c: 83: mes=mes_d*10+mes_u;
  9804  001FB8  0100               	movlb	0	; () banked
  9805  001FBA  51E8               	movf	_mes_d& (0+255),w,b
  9806  001FBC  0D0A               	mullw	10
  9807  001FBE  0100               	movlb	0	; () banked
  9808  001FC0  51E9               	movf	_mes_u& (0+255),w,b
  9809  001FC2  24F3               	addwf	prodl,w,c
  9810  001FC4  0100               	movlb	0	; () banked
  9811  001FC6  6FD6               	movwf	_mes& (0+255),b
  9812  001FC8  0100               	movlb	0	; () banked
  9813  001FCA  0E00               	movlw	0
  9814  001FCC  20F4               	addwfc	prodh,w,c
  9815  001FCE  0100               	movlb	0	; () banked
  9816  001FD0  6FD7               	movwf	(_mes+1)& (0+255),b
  9817                           
  9818                           ; BSR set to: 0
  9819                           ;unmc_rtcc_01.c: 84: anio=anio_d*10+anio_u;
  9820  001FD2  0100               	movlb	0	; () banked
  9821  001FD4  51E1               	movf	_anio_d& (0+255),w,b
  9822  001FD6  0D0A               	mullw	10
  9823  001FD8  0100               	movlb	0	; () banked
  9824  001FDA  51E2               	movf	_anio_u& (0+255),w,b
  9825  001FDC  24F3               	addwf	prodl,w,c
  9826  001FDE  0100               	movlb	0	; () banked
  9827  001FE0  6FCE               	movwf	_anio& (0+255),b
  9828  001FE2  0100               	movlb	0	; () banked
  9829  001FE4  0E00               	movlw	0
  9830  001FE6  20F4               	addwfc	prodh,w,c
  9831  001FE8  0100               	movlb	0	; () banked
  9832  001FEA  6FCF               	movwf	(_anio+1)& (0+255),b
  9833                           
  9834                           ; BSR set to: 0
  9835  001FEC  0012               	return		;funcret
  9836  001FEE                     __end_of_Read_RTC:
  9837                           	opt stack 0
  9838                           tblptru	equ	0xFF8
  9839                           tblptrh	equ	0xFF7
  9840                           tblptrl	equ	0xFF6
  9841                           tablat	equ	0xFF5
  9842                           prodh	equ	0xFF4
  9843                           prodl	equ	0xFF3
  9844                           indf0	equ	0xFEF
  9845                           postinc0	equ	0xFEE
  9846                           fsr0h	equ	0xFEA
  9847                           fsr0l	equ	0xFE9
  9848                           wreg	equ	0xFE8
  9849                           postdec1	equ	0xFE5
  9850                           fsr1l	equ	0xFE1
  9851                           indf2	equ	0xFDF
  9852                           postinc2	equ	0xFDE
  9853                           postdec2	equ	0xFDD
  9854                           fsr2h	equ	0xFDA
  9855                           fsr2l	equ	0xFD9
  9856                           status	equ	0xFD8
  9857                           
  9858 ;; *************** function _RtccReadTime *****************
  9859 ;; Defined at:
  9860 ;;		line 23 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadTime.c"
  9861 ;; Parameters:    Size  Location     Type
  9862 ;;  pTm             2    0[COMRAM] PTR struct .
  9863 ;;		 -> RtccTime(4), 
  9864 ;; Auto vars:     Size  Location     Type
  9865 ;;  rTD0            8   10[COMRAM] struct .
  9866 ;;  rTD1            8    2[COMRAM] struct .
  9867 ;; Return value:  Size  Location     Type
  9868 ;;		None               void
  9869 ;; Registers used:
  9870 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9871 ;; Tracked objects:
  9872 ;;		On entry : 0/0
  9873 ;;		On exit  : 0/0
  9874 ;;		Unchanged: 0/0
  9875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9876 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9877 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9879 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9880 ;;Total ram usage:       18 bytes
  9881 ;; Hardware stack levels used:    1
  9882 ;; This function calls:
  9883 ;;		Nothing
  9884 ;; This function is called by:
  9885 ;;		_Read_RTC
  9886 ;; This function uses a non-reentrant model
  9887 ;;
  9888                           
  9889                           	psect	text58
  9890  0033BE                     __ptext58:
  9891                           	opt stack 0
  9892  0033BE                     _RtccReadTime:
  9893                           	opt stack 27
  9894  0033BE  0EFC               	movlw	252
  9895  0033C0  010F               	movlb	15	; () banked
  9896  0033C2  173F               	andwf	63,f,b	;volatile
  9897                           
  9898                           ; BSR set to: 15
  9899  0033C4  010F               	movlb	15	; () banked
  9900  0033C6  813F               	bsf	63,0,b	;volatile
  9901                           
  9902                           ; BSR set to: 15
  9903  0033C8  CF98 F00F          	movff	3992,RtccReadTime@rTD0+4	;volatile
  9904                           
  9905                           ; BSR set to: 15
  9906  0033CC  CF99 F010          	movff	3993,RtccReadTime@rTD0+5	;volatile
  9907                           
  9908                           ; BSR set to: 15
  9909  0033D0  CF98 F011          	movff	3992,RtccReadTime@rTD0+6	;volatile
  9910                           
  9911                           ; BSR set to: 15
  9912  0033D4  CF99 F012          	movff	3993,RtccReadTime@rTD0+7	;volatile
  9913                           
  9914                           ; BSR set to: 15
  9915  0033D8  0EFC               	movlw	252
  9916  0033DA  010F               	movlb	15	; () banked
  9917  0033DC  173F               	andwf	63,f,b	;volatile
  9918  0033DE  010F               	movlb	15	; () banked
  9919  0033E0  813F               	bsf	63,0,b	;volatile
  9920                           
  9921                           ; BSR set to: 15
  9922  0033E2  CF98 F007          	movff	3992,RtccReadTime@rTD1+4	;volatile
  9923                           
  9924                           ; BSR set to: 15
  9925  0033E6  CF99 F008          	movff	3993,RtccReadTime@rTD1+5	;volatile
  9926                           
  9927                           ; BSR set to: 15
  9928  0033EA  CF98 F009          	movff	3992,RtccReadTime@rTD1+6	;volatile
  9929                           
  9930                           ; BSR set to: 15
  9931  0033EE  CF99 F00A          	movff	3993,RtccReadTime@rTD1+7	;volatile
  9932                           
  9933                           ; BSR set to: 15
  9934  0033F2  5009               	movf	RtccReadTime@rTD1+6,w,c
  9935  0033F4  1811               	xorwf	RtccReadTime@rTD0+6,w,c
  9936  0033F6  A4D8               	btfss	status,2,c
  9937  0033F8  D7E2               	goto	l4654
  9938                           
  9939                           ; BSR set to: 15
  9940                           
  9941                           ; BSR set to: 15
  9942  0033FA  EE20 F003          	lfsr	2,3
  9943  0033FE  5001               	movf	RtccReadTime@pTm,w,c
  9944  003400  26D9               	addwf	fsr2l,f,c
  9945  003402  5002               	movf	RtccReadTime@pTm+1,w,c
  9946  003404  22DA               	addwfc	fsr2h,f,c
  9947  003406  C00F  FFDF         	movff	RtccReadTime@rTD0+4,indf2
  9948  00340A  EE20 F002          	lfsr	2,2
  9949  00340E  5001               	movf	RtccReadTime@pTm,w,c
  9950  003410  26D9               	addwf	fsr2l,f,c
  9951  003412  5002               	movf	RtccReadTime@pTm+1,w,c
  9952  003414  22DA               	addwfc	fsr2h,f,c
  9953  003416  C012  FFDF         	movff	RtccReadTime@rTD0+7,indf2
  9954  00341A  EE20 F001          	lfsr	2,1
  9955  00341E  5001               	movf	RtccReadTime@pTm,w,c
  9956  003420  26D9               	addwf	fsr2l,f,c
  9957  003422  5002               	movf	RtccReadTime@pTm+1,w,c
  9958  003424  22DA               	addwfc	fsr2h,f,c
  9959  003426  C011  FFDF         	movff	RtccReadTime@rTD0+6,indf2
  9960                           
  9961                           ; BSR set to: 15
  9962  00342A  0012               	return		;funcret
  9963  00342C                     __end_of_RtccReadTime:
  9964                           	opt stack 0
  9965                           tblptru	equ	0xFF8
  9966                           tblptrh	equ	0xFF7
  9967                           tblptrl	equ	0xFF6
  9968                           tablat	equ	0xFF5
  9969                           prodh	equ	0xFF4
  9970                           prodl	equ	0xFF3
  9971                           indf0	equ	0xFEF
  9972                           postinc0	equ	0xFEE
  9973                           fsr0h	equ	0xFEA
  9974                           fsr0l	equ	0xFE9
  9975                           wreg	equ	0xFE8
  9976                           postdec1	equ	0xFE5
  9977                           fsr1l	equ	0xFE1
  9978                           indf2	equ	0xFDF
  9979                           postinc2	equ	0xFDE
  9980                           postdec2	equ	0xFDD
  9981                           fsr2h	equ	0xFDA
  9982                           fsr2l	equ	0xFD9
  9983                           status	equ	0xFD8
  9984                           
  9985 ;; *************** function _RtccReadDate *****************
  9986 ;; Defined at:
  9987 ;;		line 23 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadDate.c"
  9988 ;; Parameters:    Size  Location     Type
  9989 ;;  pDt             2    0[COMRAM] PTR struct .
  9990 ;;		 -> RtccDate(4), 
  9991 ;; Auto vars:     Size  Location     Type
  9992 ;;  rTD0            8   10[COMRAM] struct .
  9993 ;;  rTD1            8    2[COMRAM] struct .
  9994 ;; Return value:  Size  Location     Type
  9995 ;;		None               void
  9996 ;; Registers used:
  9997 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9998 ;; Tracked objects:
  9999 ;;		On entry : 0/0
 10000 ;;		On exit  : 0/0
 10001 ;;		Unchanged: 0/0
 10002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10003 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10004 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10006 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10007 ;;Total ram usage:       18 bytes
 10008 ;; Hardware stack levels used:    1
 10009 ;; This function calls:
 10010 ;;		Nothing
 10011 ;; This function is called by:
 10012 ;;		_Read_RTC
 10013 ;; This function uses a non-reentrant model
 10014 ;;
 10015                           
 10016                           	psect	text59
 10017  003136                     __ptext59:
 10018                           	opt stack 0
 10019  003136                     _RtccReadDate:
 10020                           	opt stack 27
 10021  003136  0EFC               	movlw	252
 10022  003138  010F               	movlb	15	; () banked
 10023  00313A  173F               	andwf	63,f,b	;volatile
 10024  00313C  0E03               	movlw	3
 10025  00313E  010F               	movlb	15	; () banked
 10026  003140  133F               	iorwf	63,f,b	;volatile
 10027                           
 10028                           ; BSR set to: 15
 10029  003142  CF98 F00B          	movff	3992,RtccReadDate@rTD0	;volatile
 10030                           
 10031                           ; BSR set to: 15
 10032  003146  CF99 F00C          	movff	3993,RtccReadDate@rTD0+1	;volatile
 10033                           
 10034                           ; BSR set to: 15
 10035  00314A  CF98 F00D          	movff	3992,RtccReadDate@rTD0+2	;volatile
 10036                           
 10037                           ; BSR set to: 15
 10038  00314E  CF99 F00E          	movff	3993,RtccReadDate@rTD0+3	;volatile
 10039                           
 10040                           ; BSR set to: 15
 10041  003152  CF98 F00F          	movff	3992,RtccReadDate@rTD0+4	;volatile
 10042                           
 10043                           ; BSR set to: 15
 10044  003156  CF99 F010          	movff	3993,RtccReadDate@rTD0+5	;volatile
 10045  00315A  0EFC               	movlw	252
 10046  00315C  010F               	movlb	15	; () banked
 10047  00315E  173F               	andwf	63,f,b	;volatile
 10048  003160  0E03               	movlw	3
 10049  003162  010F               	movlb	15	; () banked
 10050  003164  133F               	iorwf	63,f,b	;volatile
 10051                           
 10052                           ; BSR set to: 15
 10053  003166  CF98 F003          	movff	3992,RtccReadDate@rTD1	;volatile
 10054                           
 10055                           ; BSR set to: 15
 10056  00316A  CF99 F004          	movff	3993,RtccReadDate@rTD1+1	;volatile
 10057                           
 10058                           ; BSR set to: 15
 10059  00316E  CF98 F005          	movff	3992,RtccReadDate@rTD1+2	;volatile
 10060                           
 10061                           ; BSR set to: 15
 10062  003172  CF99 F006          	movff	3993,RtccReadDate@rTD1+3	;volatile
 10063                           
 10064                           ; BSR set to: 15
 10065  003176  CF98 F007          	movff	3992,RtccReadDate@rTD1+4	;volatile
 10066                           
 10067                           ; BSR set to: 15
 10068  00317A  CF99 F008          	movff	3993,RtccReadDate@rTD1+5	;volatile
 10069  00317E  5005               	movf	RtccReadDate@rTD1+2,w,c
 10070  003180  180D               	xorwf	RtccReadDate@rTD0+2,w,c
 10071  003182  A4D8               	btfss	status,2,c
 10072  003184  D7D8               	goto	l4680
 10073                           
 10074                           ; BSR set to: 15
 10075                           
 10076                           ; BSR set to: 15
 10077  003186  EE20 F001          	lfsr	2,1
 10078  00318A  5001               	movf	RtccReadDate@pDt,w,c
 10079  00318C  26D9               	addwf	fsr2l,f,c
 10080  00318E  5002               	movf	RtccReadDate@pDt+1,w,c
 10081  003190  22DA               	addwfc	fsr2h,f,c
 10082  003192  C00D  FFDF         	movff	RtccReadDate@rTD0+2,indf2
 10083  003196  EE20 F002          	lfsr	2,2
 10084  00319A  5001               	movf	RtccReadDate@pDt,w,c
 10085  00319C  26D9               	addwf	fsr2l,f,c
 10086  00319E  5002               	movf	RtccReadDate@pDt+1,w,c
 10087  0031A0  22DA               	addwfc	fsr2h,f,c
 10088  0031A2  C00E  FFDF         	movff	RtccReadDate@rTD0+3,indf2
 10089                           
 10090                           ; BSR set to: 15
 10091  0031A6  C001  FFD9         	movff	RtccReadDate@pDt,fsr2l
 10092  0031AA  C002  FFDA         	movff	RtccReadDate@pDt+1,fsr2h
 10093  0031AE  C010  FFDF         	movff	RtccReadDate@rTD0+5,indf2
 10094                           
 10095                           ; BSR set to: 15
 10096  0031B2  EE20 F003          	lfsr	2,3
 10097  0031B6  5001               	movf	RtccReadDate@pDt,w,c
 10098  0031B8  26D9               	addwf	fsr2l,f,c
 10099  0031BA  5002               	movf	RtccReadDate@pDt+1,w,c
 10100  0031BC  22DA               	addwfc	fsr2h,f,c
 10101  0031BE  C00B  FFDF         	movff	RtccReadDate@rTD0,indf2
 10102                           
 10103                           ; BSR set to: 15
 10104  0031C2  0012               	return		;funcret
 10105  0031C4                     __end_of_RtccReadDate:
 10106                           	opt stack 0
 10107                           tblptru	equ	0xFF8
 10108                           tblptrh	equ	0xFF7
 10109                           tblptrl	equ	0xFF6
 10110                           tablat	equ	0xFF5
 10111                           prodh	equ	0xFF4
 10112                           prodl	equ	0xFF3
 10113                           indf0	equ	0xFEF
 10114                           postinc0	equ	0xFEE
 10115                           fsr0h	equ	0xFEA
 10116                           fsr0l	equ	0xFE9
 10117                           wreg	equ	0xFE8
 10118                           postdec1	equ	0xFE5
 10119                           fsr1l	equ	0xFE1
 10120                           indf2	equ	0xFDF
 10121                           postinc2	equ	0xFDE
 10122                           postdec2	equ	0xFDD
 10123                           fsr2h	equ	0xFDA
 10124                           fsr2l	equ	0xFD9
 10125                           status	equ	0xFD8
 10126                           
 10127 ;; *************** function _caratula *****************
 10128 ;; Defined at:
 10129 ;;		line 32 in file "main.c"
 10130 ;; Parameters:    Size  Location     Type
 10131 ;;		None
 10132 ;; Auto vars:     Size  Location     Type
 10133 ;;		None
 10134 ;; Return value:  Size  Location     Type
 10135 ;;		None               void
 10136 ;; Registers used:
 10137 ;;		wreg, status,2, status,0, cstack
 10138 ;; Tracked objects:
 10139 ;;		On entry : 0/0
 10140 ;;		On exit  : 0/0
 10141 ;;		Unchanged: 0/0
 10142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10146 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10147 ;;Total ram usage:        0 bytes
 10148 ;; Hardware stack levels used:    1
 10149 ;; Hardware stack levels required when called:    3
 10150 ;; This function calls:
 10151 ;;		_lcd_comand
 10152 ;; This function is called by:
 10153 ;;		_main
 10154 ;; This function uses a non-reentrant model
 10155 ;;
 10156                           
 10157                           	psect	text60
 10158  003B74                     __ptext60:
 10159                           	opt stack 0
 10160  003B74                     _caratula:
 10161                           	opt stack 27
 10162                           
 10163                           ;main.c: 34: lcd_comand(0b00001100);
 10164                           
 10165                           ; BSR set to: 15
 10166                           ;incstack = 0
 10167  003B74  0E0C               	movlw	12
 10168  003B76  ECAA  F01D         	call	_lcd_comand
 10169  003B7A  0012               	return		;funcret
 10170  003B7C                     __end_of_caratula:
 10171                           	opt stack 0
 10172                           tblptru	equ	0xFF8
 10173                           tblptrh	equ	0xFF7
 10174                           tblptrl	equ	0xFF6
 10175                           tablat	equ	0xFF5
 10176                           prodh	equ	0xFF4
 10177                           prodl	equ	0xFF3
 10178                           indf0	equ	0xFEF
 10179                           postinc0	equ	0xFEE
 10180                           fsr0h	equ	0xFEA
 10181                           fsr0l	equ	0xFE9
 10182                           wreg	equ	0xFE8
 10183                           postdec1	equ	0xFE5
 10184                           fsr1l	equ	0xFE1
 10185                           indf2	equ	0xFDF
 10186                           postinc2	equ	0xFDE
 10187                           postdec2	equ	0xFDD
 10188                           fsr2h	equ	0xFDA
 10189                           fsr2l	equ	0xFD9
 10190                           status	equ	0xFD8
 10191                           
 10192 ;; *************** function _Setup *****************
 10193 ;; Defined at:
 10194 ;;		line 52 in file "main.c"
 10195 ;; Parameters:    Size  Location     Type
 10196 ;;		None
 10197 ;; Auto vars:     Size  Location     Type
 10198 ;;		None
 10199 ;; Return value:  Size  Location     Type
 10200 ;;		None               void
 10201 ;; Registers used:
 10202 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10203 ;; Tracked objects:
 10204 ;;		On entry : 0/0
 10205 ;;		On exit  : 0/0
 10206 ;;		Unchanged: 0/0
 10207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10211 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10212 ;;Total ram usage:        0 bytes
 10213 ;; Hardware stack levels used:    1
 10214 ;; Hardware stack levels required when called:    3
 10215 ;; This function calls:
 10216 ;;		_Write_RTC
 10217 ;;		_lcd_comand
 10218 ;;		_lcd_init
 10219 ;; This function is called by:
 10220 ;;		_main
 10221 ;; This function uses a non-reentrant model
 10222 ;;
 10223                           
 10224                           	psect	text61
 10225  003738                     __ptext61:
 10226                           	opt stack 0
 10227  003738                     _Setup:
 10228                           	opt stack 27
 10229                           
 10230                           ;main.c: 54: OSCTUNEbits.INTSRC=1;
 10231                           
 10232                           ;incstack = 0
 10233  003738  8E9B               	bsf	3995,7,c	;volatile
 10234                           
 10235                           ;main.c: 55: OSCTUNEbits.PLLEN=0;
 10236  00373A  9C9B               	bcf	3995,6,c	;volatile
 10237                           
 10238                           ;main.c: 56: OSCCONbits.IRCF0=1;
 10239  00373C  88D3               	bsf	4051,4,c	;volatile
 10240                           
 10241                           ;main.c: 57: OSCCONbits.IRCF1=1;
 10242  00373E  8AD3               	bsf	4051,5,c	;volatile
 10243                           
 10244                           ;main.c: 58: OSCCONbits.IRCF2=1;
 10245  003740  8CD3               	bsf	4051,6,c	;volatile
 10246                           
 10247                           ;main.c: 59: OSCCONbits.SCS0=0;
 10248  003742  90D3               	bcf	4051,0,c	;volatile
 10249                           
 10250                           ;main.c: 60: OSCCONbits.SCS1=0;
 10251  003744  92D3               	bcf	4051,1,c	;volatile
 10252                           
 10253                           ;main.c: 61: TRISA = 0b11110000;
 10254  003746  0EF0               	movlw	240
 10255  003748  6E92               	movwf	3986,c	;volatile
 10256                           
 10257                           ;main.c: 62: TRISB = 0;
 10258  00374A  0E00               	movlw	0
 10259  00374C  6E93               	movwf	3987,c	;volatile
 10260                           
 10261                           ;main.c: 63: TRISC = 0b0110111;
 10262  00374E  0E37               	movlw	55
 10263  003750  6E94               	movwf	3988,c	;volatile
 10264                           
 10265                           ;main.c: 67: ANCON0=0b11111111;
 10266  003752  010F               	movlb	15	; () banked
 10267  003754  6948               	setf	72,b	;volatile
 10268                           
 10269                           ; BSR set to: 15
 10270                           ;main.c: 69: ANCON1=0b11111111;
 10271  003756  010F               	movlb	15	; () banked
 10272  003758  6949               	setf	73,b	;volatile
 10273                           
 10274                           ;main.c: 70: ADCON0=0b00101101;
 10275  00375A  0E2D               	movlw	45
 10276  00375C  6EC2               	movwf	4034,c	;volatile
 10277                           
 10278                           ;main.c: 71: ADCON1=0b00010000;
 10279  00375E  0E10               	movlw	16
 10280  003760  6EC1               	movwf	4033,c	;volatile
 10281                           
 10282                           ; BSR set to: 15
 10283                           ;main.c: 72: RTCCFGbits.RTCEN=1;
 10284  003762  010F               	movlb	15	; () banked
 10285  003764  8F3F               	bsf	63,7,b	;volatile
 10286                           
 10287                           ; BSR set to: 15
 10288                           ;main.c: 73: RTCCFGbits.RTCWREN=1;
 10289  003766  010F               	movlb	15	; () banked
 10290  003768  8B3F               	bsf	63,5,b	;volatile
 10291                           
 10292                           ; BSR set to: 15
 10293                           ;main.c: 74: T1CONbits.T1OSCEN=1;
 10294  00376A  86CD               	bsf	4045,3,c	;volatile
 10295                           
 10296                           ; BSR set to: 15
 10297                           ;main.c: 75: Write_RTC();
 10298  00376C  EC56  F00C         	call	_Write_RTC	;wreg free
 10299                           
 10300                           ;main.c: 76: lcd_init();
 10301  003770  EC26  F019         	call	_lcd_init	;wreg free
 10302                           
 10303                           ;main.c: 77: lcd_comand(0b00001100);
 10304  003774  0E0C               	movlw	12
 10305  003776  ECAA  F01D         	call	_lcd_comand
 10306                           
 10307                           ;main.c: 78: LATBbits.LATB1 = 1;;
 10308  00377A  828A               	bsf	3978,1,c	;volatile
 10309  00377C  0012               	return		;funcret
 10310  00377E                     __end_of_Setup:
 10311                           	opt stack 0
 10312                           tblptru	equ	0xFF8
 10313                           tblptrh	equ	0xFF7
 10314                           tblptrl	equ	0xFF6
 10315                           tablat	equ	0xFF5
 10316                           prodh	equ	0xFF4
 10317                           prodl	equ	0xFF3
 10318                           indf0	equ	0xFEF
 10319                           postinc0	equ	0xFEE
 10320                           fsr0h	equ	0xFEA
 10321                           fsr0l	equ	0xFE9
 10322                           wreg	equ	0xFE8
 10323                           postdec1	equ	0xFE5
 10324                           fsr1l	equ	0xFE1
 10325                           indf2	equ	0xFDF
 10326                           postinc2	equ	0xFDE
 10327                           postdec2	equ	0xFDD
 10328                           fsr2h	equ	0xFDA
 10329                           fsr2l	equ	0xFD9
 10330                           status	equ	0xFD8
 10331                           
 10332 ;; *************** function _lcd_init *****************
 10333 ;; Defined at:
 10334 ;;		line 119 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
 10335 ;; Parameters:    Size  Location     Type
 10336 ;;		None
 10337 ;; Auto vars:     Size  Location     Type
 10338 ;;  i               1    4[COMRAM] unsigned char 
 10339 ;; Return value:  Size  Location     Type
 10340 ;;		None               void
 10341 ;; Registers used:
 10342 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10343 ;; Tracked objects:
 10344 ;;		On entry : 0/0
 10345 ;;		On exit  : 0/0
 10346 ;;		Unchanged: 0/0
 10347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10349 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10351 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10352 ;;Total ram usage:        1 bytes
 10353 ;; Hardware stack levels used:    1
 10354 ;; Hardware stack levels required when called:    2
 10355 ;; This function calls:
 10356 ;;		_Delay1KTCYx
 10357 ;;		_lcd_send_byte
 10358 ;;		_lcd_send_nibble
 10359 ;; This function is called by:
 10360 ;;		_Setup
 10361 ;; This function uses a non-reentrant model
 10362 ;;
 10363                           
 10364                           	psect	text62
 10365  00324C                     __ptext62:
 10366                           	opt stack 0
 10367  00324C                     _lcd_init:
 10368                           	opt stack 27
 10369                           
 10370                           ;unmc_lcd_216.c: 120: int8 i;
 10371                           ;unmc_lcd_216.c: 122: TRISBbits.TRISB3=0;
 10372                           
 10373                           ;incstack = 0
 10374  00324C  9693               	bcf	3987,3,c	;volatile
 10375                           
 10376                           ;unmc_lcd_216.c: 123: TRISBbits.TRISB2=0;
 10377  00324E  9493               	bcf	3987,2,c	;volatile
 10378                           
 10379                           ;unmc_lcd_216.c: 128: LATBbits.LATB3=0;
 10380  003250  968A               	bcf	3978,3,c	;volatile
 10381                           
 10382                           ;unmc_lcd_216.c: 129: LATBbits.LATB2=0;
 10383  003252  948A               	bcf	3978,2,c	;volatile
 10384                           
 10385                           ;unmc_lcd_216.c: 134: TRISBbits.TRISB4=0;
 10386  003254  9893               	bcf	3987,4,c	;volatile
 10387                           
 10388                           ;unmc_lcd_216.c: 135: TRISBbits.TRISB5=0;
 10389  003256  9A93               	bcf	3987,5,c	;volatile
 10390                           
 10391                           ;unmc_lcd_216.c: 136: TRISBbits.TRISB6=0;
 10392  003258  9C93               	bcf	3987,6,c	;volatile
 10393                           
 10394                           ;unmc_lcd_216.c: 137: TRISBbits.TRISB7=0;
 10395  00325A  9E93               	bcf	3987,7,c	;volatile
 10396                           
 10397                           ;unmc_lcd_216.c: 139: Delay1KTCYx(8000000UL/800000UL);
 10398  00325C  0E0A               	movlw	10
 10399  00325E  EC8F  F01D         	call	_Delay1KTCYx
 10400                           
 10401                           ;unmc_lcd_216.c: 140: Delay1KTCYx(8000000UL/800000UL);
 10402  003262  0E0A               	movlw	10
 10403  003264  EC8F  F01D         	call	_Delay1KTCYx
 10404                           
 10405                           ;unmc_lcd_216.c: 141: Delay1KTCYx(8000000UL/800000UL);
 10406  003268  0E0A               	movlw	10
 10407  00326A  EC8F  F01D         	call	_Delay1KTCYx
 10408                           
 10409                           ;unmc_lcd_216.c: 143: for(i=0 ;i < 3; i++){
 10410  00326E  0E00               	movlw	0
 10411  003270  6E05               	movwf	lcd_init@i,c
 10412  003272                     l4926:
 10413  003272  0E02               	movlw	2
 10414  003274  6405               	cpfsgt	lcd_init@i,c
 10415  003276  D001               	goto	l4930
 10416  003278  D008               	goto	l4936
 10417  00327A                     l4930:
 10418                           
 10419                           ;unmc_lcd_216.c: 144: lcd_send_nibble(0x03);
 10420  00327A  0E03               	movlw	3
 10421  00327C  ECA4  F019         	call	_lcd_send_nibble
 10422                           
 10423                           ;unmc_lcd_216.c: 145: Delay1KTCYx(8000000UL/800000UL);
 10424  003280  0E0A               	movlw	10
 10425  003282  EC8F  F01D         	call	_Delay1KTCYx
 10426  003286  2A05               	incf	lcd_init@i,f,c
 10427  003288  D7F4               	goto	l4926
 10428  00328A                     l4936:
 10429                           
 10430                           ;unmc_lcd_216.c: 146: }
 10431                           ;unmc_lcd_216.c: 148: lcd_send_nibble(0x02);
 10432  00328A  0E02               	movlw	2
 10433  00328C  ECA4  F019         	call	_lcd_send_nibble
 10434                           
 10435                           ;unmc_lcd_216.c: 150: for(i=0; i < sizeof(LCD_INIT_STRING); i++){
 10436  003290  0E00               	movlw	0
 10437  003292  6E05               	movwf	lcd_init@i,c
 10438  003294  0E03               	movlw	3
 10439  003296  6405               	cpfsgt	lcd_init@i,c
 10440  003298  D002               	goto	l4944
 10441  00329A  0012               	return	
 10442  00329C  0012               	return	
 10443  00329E                     l4944:
 10444                           
 10445                           ;unmc_lcd_216.c: 151: lcd_send_byte(0, LCD_INIT_STRING[i]);
 10446  00329E  5005               	movf	lcd_init@i,w,c
 10447  0032A0  0D01               	mullw	1
 10448  0032A2  0E0B               	movlw	low _LCD_INIT_STRING
 10449  0032A4  24F3               	addwf	prodl,w,c
 10450  0032A6  6EF6               	movwf	tblptrl,c
 10451  0032A8  0E0F               	movlw	high _LCD_INIT_STRING
 10452  0032AA  20F4               	addwfc	prodh,w,c
 10453  0032AC  6EF7               	movwf	tblptrh,c
 10454  0032AE                     	if	0	;There are less than 3 active tblptr bytes
 10455  0032AE                     	endif
 10456  0032AE  0008               	tblrd		*
 10457  0032B0  CFF5 F003          	movff	tablat,lcd_send_byte@n
 10458  0032B4  0E00               	movlw	0
 10459  0032B6  EC73  F01C         	call	_lcd_send_byte
 10460                           
 10461                           ;unmc_lcd_216.c: 153: Delay1KTCYx(8000000UL/800000UL);
 10462  0032BA  0E0A               	movlw	10
 10463  0032BC  EC8F  F01D         	call	_Delay1KTCYx
 10464  0032C0  2A05               	incf	lcd_init@i,f,c
 10465  0032C2  0E03               	movlw	3
 10466  0032C4  6405               	cpfsgt	lcd_init@i,c
 10467  0032C6  D7EB               	goto	l4944
 10468  0032C8  0012               	return	
 10469  0032CA  0012               	return		;funcret
 10470  0032CC                     __end_of_lcd_init:
 10471                           	opt stack 0
 10472                           tblptru	equ	0xFF8
 10473                           tblptrh	equ	0xFF7
 10474                           tblptrl	equ	0xFF6
 10475                           tablat	equ	0xFF5
 10476                           prodh	equ	0xFF4
 10477                           prodl	equ	0xFF3
 10478                           indf0	equ	0xFEF
 10479                           postinc0	equ	0xFEE
 10480                           fsr0h	equ	0xFEA
 10481                           fsr0l	equ	0xFE9
 10482                           wreg	equ	0xFE8
 10483                           postdec1	equ	0xFE5
 10484                           fsr1l	equ	0xFE1
 10485                           indf2	equ	0xFDF
 10486                           postinc2	equ	0xFDE
 10487                           postdec2	equ	0xFDD
 10488                           fsr2h	equ	0xFDA
 10489                           fsr2l	equ	0xFD9
 10490                           status	equ	0xFD8
 10491                           
 10492 ;; *************** function _Delay1KTCYx *****************
 10493 ;; Defined at:
 10494 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\d1ktcyx.c"
 10495 ;; Parameters:    Size  Location     Type
 10496 ;;  unit            1    wreg     unsigned char 
 10497 ;; Auto vars:     Size  Location     Type
 10498 ;;  unit            1    0[COMRAM] unsigned char 
 10499 ;; Return value:  Size  Location     Type
 10500 ;;		None               void
 10501 ;; Registers used:
 10502 ;;		wreg
 10503 ;; Tracked objects:
 10504 ;;		On entry : 0/0
 10505 ;;		On exit  : 0/0
 10506 ;;		Unchanged: 0/0
 10507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10509 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10511 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10512 ;;Total ram usage:        1 bytes
 10513 ;; Hardware stack levels used:    1
 10514 ;; This function calls:
 10515 ;;		Nothing
 10516 ;; This function is called by:
 10517 ;;		_lcd_init
 10518 ;;		_DelayPORXLCD
 10519 ;; This function uses a non-reentrant model
 10520 ;;
 10521                           
 10522                           	psect	text63
 10523  003B1E                     __ptext63:
 10524                           	opt stack 0
 10525  003B1E                     _Delay1KTCYx:
 10526                           	opt stack 28
 10527                           
 10528                           ;incstack = 0
 10529                           ;Delay1KTCYx@unit stored from wreg
 10530  003B1E  6E01               	movwf	Delay1KTCYx@unit,c
 10531  003B20  0EFA               	movlw	250
 10532  003B22                     u5007:
 10533  003B22  F000               	nop	
 10534  003B24  2EE8               	decfsz	wreg,f,c
 10535  003B26  D7FD               	goto	u5007
 10536  003B28  2E01               	decfsz	Delay1KTCYx@unit,f,c
 10537  003B2A  D7FA               	goto	l3056
 10538  003B2C  0012               	return	
 10539  003B2E  0012               	return		;funcret
 10540  003B30                     __end_of_Delay1KTCYx:
 10541                           	opt stack 0
 10542                           tblptru	equ	0xFF8
 10543                           tblptrh	equ	0xFF7
 10544                           tblptrl	equ	0xFF6
 10545                           tablat	equ	0xFF5
 10546                           prodh	equ	0xFF4
 10547                           prodl	equ	0xFF3
 10548                           indf0	equ	0xFEF
 10549                           postinc0	equ	0xFEE
 10550                           fsr0h	equ	0xFEA
 10551                           fsr0l	equ	0xFE9
 10552                           wreg	equ	0xFE8
 10553                           postdec1	equ	0xFE5
 10554                           fsr1l	equ	0xFE1
 10555                           indf2	equ	0xFDF
 10556                           postinc2	equ	0xFDE
 10557                           postdec2	equ	0xFDD
 10558                           fsr2h	equ	0xFDA
 10559                           fsr2l	equ	0xFD9
 10560                           status	equ	0xFD8
 10561                           
 10562 ;; *************** function _lcd_comand *****************
 10563 ;; Defined at:
 10564 ;;		line 189 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
 10565 ;; Parameters:    Size  Location     Type
 10566 ;;  d               1    wreg     unsigned char 
 10567 ;; Auto vars:     Size  Location     Type
 10568 ;;  d               1    4[COMRAM] unsigned char 
 10569 ;; Return value:  Size  Location     Type
 10570 ;;		None               void
 10571 ;; Registers used:
 10572 ;;		wreg, status,2, status,0, cstack
 10573 ;; Tracked objects:
 10574 ;;		On entry : 0/0
 10575 ;;		On exit  : 0/0
 10576 ;;		Unchanged: 0/0
 10577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10579 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10581 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10582 ;;Total ram usage:        1 bytes
 10583 ;; Hardware stack levels used:    1
 10584 ;; Hardware stack levels required when called:    2
 10585 ;; This function calls:
 10586 ;;		_lcd_send_byte
 10587 ;; This function is called by:
 10588 ;;		_caratula
 10589 ;;		_Setup
 10590 ;;		_clear
 10591 ;; This function uses a non-reentrant model
 10592 ;;
 10593                           
 10594                           	psect	text64
 10595  003B54                     __ptext64:
 10596                           	opt stack 0
 10597  003B54                     _lcd_comand:
 10598                           	opt stack 26
 10599                           
 10600                           ;incstack = 0
 10601                           ;lcd_comand@d stored from wreg
 10602  003B54  6E05               	movwf	lcd_comand@d,c
 10603                           
 10604                           ;unmc_lcd_216.c: 190: lcd_send_byte(0,d);
 10605  003B56  C005  F003         	movff	lcd_comand@d,lcd_send_byte@n
 10606  003B5A  0E00               	movlw	0
 10607  003B5C  EC73  F01C         	call	_lcd_send_byte
 10608  003B60  0012               	return		;funcret
 10609  003B62                     __end_of_lcd_comand:
 10610                           	opt stack 0
 10611                           tblptru	equ	0xFF8
 10612                           tblptrh	equ	0xFF7
 10613                           tblptrl	equ	0xFF6
 10614                           tablat	equ	0xFF5
 10615                           prodh	equ	0xFF4
 10616                           prodl	equ	0xFF3
 10617                           indf0	equ	0xFEF
 10618                           postinc0	equ	0xFEE
 10619                           fsr0h	equ	0xFEA
 10620                           fsr0l	equ	0xFE9
 10621                           wreg	equ	0xFE8
 10622                           postdec1	equ	0xFE5
 10623                           fsr1l	equ	0xFE1
 10624                           indf2	equ	0xFDF
 10625                           postinc2	equ	0xFDE
 10626                           postdec2	equ	0xFDD
 10627                           fsr2h	equ	0xFDA
 10628                           fsr2l	equ	0xFD9
 10629                           status	equ	0xFD8
 10630                           
 10631 ;; *************** function _lcd_send_byte *****************
 10632 ;; Defined at:
 10633 ;;		line 86 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
 10634 ;; Parameters:    Size  Location     Type
 10635 ;;  address         1    wreg     unsigned char 
 10636 ;;  n               1    2[COMRAM] unsigned char 
 10637 ;; Auto vars:     Size  Location     Type
 10638 ;;  address         1    3[COMRAM] unsigned char 
 10639 ;; Return value:  Size  Location     Type
 10640 ;;		None               void
 10641 ;; Registers used:
 10642 ;;		wreg, status,2, status,0, cstack
 10643 ;; Tracked objects:
 10644 ;;		On entry : 0/0
 10645 ;;		On exit  : 0/0
 10646 ;;		Unchanged: 0/0
 10647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10648 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10649 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10651 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10652 ;;Total ram usage:        2 bytes
 10653 ;; Hardware stack levels used:    1
 10654 ;; Hardware stack levels required when called:    1
 10655 ;; This function calls:
 10656 ;;		_Delay100TCYx
 10657 ;;		_lcd_send_nibble
 10658 ;; This function is called by:
 10659 ;;		_lcd_init
 10660 ;;		_lcd_gotoxy
 10661 ;;		_lcd_putc
 10662 ;;		_lcd_comand
 10663 ;;		_lcd_setcursor_vb
 10664 ;; This function uses a non-reentrant model
 10665 ;;
 10666                           
 10667                           	psect	text65
 10668  0038E6                     __ptext65:
 10669                           	opt stack 0
 10670  0038E6                     _lcd_send_byte:
 10671                           	opt stack 26
 10672                           
 10673                           ;incstack = 0
 10674                           ;lcd_send_byte@address stored from wreg
 10675  0038E6  6E04               	movwf	lcd_send_byte@address,c
 10676                           
 10677                           ;unmc_lcd_216.c: 88: LATBbits.LATB3=0;
 10678  0038E8  968A               	bcf	3978,3,c	;volatile
 10679                           
 10680                           ;unmc_lcd_216.c: 93: Delay100TCYx(8000000UL/4000000UL);
 10681  0038EA  0E02               	movlw	2
 10682  0038EC  EC98  F01D         	call	_Delay100TCYx
 10683                           
 10684                           ;unmc_lcd_216.c: 96: TRISBbits.TRISB4=0;
 10685  0038F0  9893               	bcf	3987,4,c	;volatile
 10686                           
 10687                           ;unmc_lcd_216.c: 97: TRISBbits.TRISB5=0;
 10688  0038F2  9A93               	bcf	3987,5,c	;volatile
 10689                           
 10690                           ;unmc_lcd_216.c: 98: TRISBbits.TRISB6=0;
 10691  0038F4  9C93               	bcf	3987,6,c	;volatile
 10692                           
 10693                           ;unmc_lcd_216.c: 99: TRISBbits.TRISB7=0;
 10694  0038F6  9E93               	bcf	3987,7,c	;volatile
 10695                           
 10696                           ;unmc_lcd_216.c: 101: if(address)
 10697  0038F8  5004               	movf	lcd_send_byte@address,w,c
 10698  0038FA  B4D8               	btfsc	status,2,c
 10699  0038FC  D002               	goto	l154
 10700                           
 10701                           ;unmc_lcd_216.c: 102: LATBbits.LATB3=1;
 10702  0038FE  868A               	bsf	3978,3,c	;volatile
 10703  003900  D001               	goto	l155
 10704  003902                     l154:
 10705                           
 10706                           ;unmc_lcd_216.c: 103: else
 10707                           ;unmc_lcd_216.c: 104: LATBbits.LATB3=0;
 10708  003902  968A               	bcf	3978,3,c	;volatile
 10709  003904                     l155:
 10710                           
 10711                           ;unmc_lcd_216.c: 106: __nop();
 10712  003904  F000               	nop	
 10713                           
 10714                           ;unmc_lcd_216.c: 113: lcd_send_nibble(n >> 4);
 10715  003906  3803               	swapf	lcd_send_byte@n,w,c
 10716  003908  0B0F               	andlw	15
 10717  00390A  ECA4  F019         	call	_lcd_send_nibble
 10718                           
 10719                           ;unmc_lcd_216.c: 114: lcd_send_nibble(n & 0xf);
 10720  00390E  5003               	movf	lcd_send_byte@n,w,c
 10721  003910  0B0F               	andlw	15
 10722  003912  ECA4  F019         	call	_lcd_send_nibble
 10723  003916  0012               	return		;funcret
 10724  003918                     __end_of_lcd_send_byte:
 10725                           	opt stack 0
 10726                           tblptru	equ	0xFF8
 10727                           tblptrh	equ	0xFF7
 10728                           tblptrl	equ	0xFF6
 10729                           tablat	equ	0xFF5
 10730                           prodh	equ	0xFF4
 10731                           prodl	equ	0xFF3
 10732                           indf0	equ	0xFEF
 10733                           postinc0	equ	0xFEE
 10734                           fsr0h	equ	0xFEA
 10735                           fsr0l	equ	0xFE9
 10736                           wreg	equ	0xFE8
 10737                           postdec1	equ	0xFE5
 10738                           fsr1l	equ	0xFE1
 10739                           indf2	equ	0xFDF
 10740                           postinc2	equ	0xFDE
 10741                           postdec2	equ	0xFDD
 10742                           fsr2h	equ	0xFDA
 10743                           fsr2l	equ	0xFD9
 10744                           status	equ	0xFD8
 10745                           
 10746 ;; *************** function _lcd_send_nibble *****************
 10747 ;; Defined at:
 10748 ;;		line 25 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
 10749 ;; Parameters:    Size  Location     Type
 10750 ;;  nibble          1    wreg     unsigned char 
 10751 ;; Auto vars:     Size  Location     Type
 10752 ;;  nibble          1    1[COMRAM] unsigned char 
 10753 ;; Return value:  Size  Location     Type
 10754 ;;		None               void
 10755 ;; Registers used:
 10756 ;;		wreg, status,2, status,0
 10757 ;; Tracked objects:
 10758 ;;		On entry : 0/0
 10759 ;;		On exit  : 0/0
 10760 ;;		Unchanged: 0/0
 10761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10763 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10764 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10765 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10766 ;;Total ram usage:        2 bytes
 10767 ;; Hardware stack levels used:    1
 10768 ;; This function calls:
 10769 ;;		Nothing
 10770 ;; This function is called by:
 10771 ;;		_lcd_send_byte
 10772 ;;		_lcd_init
 10773 ;; This function uses a non-reentrant model
 10774 ;;
 10775                           
 10776                           	psect	text66
 10777  003348                     __ptext66:
 10778                           	opt stack 0
 10779  003348                     _lcd_send_nibble:
 10780                           	opt stack 26
 10781                           
 10782                           ;incstack = 0
 10783                           ;lcd_send_nibble@nibble stored from wreg
 10784  003348  6E02               	movwf	lcd_send_nibble@nibble,c
 10785                           
 10786                           ;unmc_lcd_216.c: 27: LATBbits.LATB4=!!(nibble & 0x01);
 10787  00334A  A002               	btfss	lcd_send_nibble@nibble,0,c
 10788  00334C  D003               	goto	u2470
 10789  00334E  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10790  003350  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
 10791  003352  D001               	goto	u2488
 10792  003354                     u2470:
 10793  003354  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10794  003356                     u2488:
 10795  003356  3A01               	swapf	??_lcd_send_nibble,f,c
 10796  003358  508A               	movf	3978,w,c	;volatile
 10797  00335A  1801               	xorwf	??_lcd_send_nibble,w,c
 10798  00335C  0BEF               	andlw	-17
 10799  00335E  1801               	xorwf	??_lcd_send_nibble,w,c
 10800  003360  6E8A               	movwf	3978,c	;volatile
 10801                           
 10802                           ;unmc_lcd_216.c: 28: LATBbits.LATB5=!!(nibble & 0x02);
 10803  003362  A202               	btfss	lcd_send_nibble@nibble,1,c
 10804  003364  D003               	goto	u2490
 10805  003366  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10806  003368  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
 10807  00336A  D001               	goto	u2508
 10808  00336C                     u2490:
 10809  00336C  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10810  00336E                     u2508:
 10811  00336E  3A01               	swapf	??_lcd_send_nibble,f,c
 10812  003370  4601               	rlncf	??_lcd_send_nibble,f,c
 10813  003372  508A               	movf	3978,w,c	;volatile
 10814  003374  1801               	xorwf	??_lcd_send_nibble,w,c
 10815  003376  0BDF               	andlw	-33
 10816  003378  1801               	xorwf	??_lcd_send_nibble,w,c
 10817  00337A  6E8A               	movwf	3978,c	;volatile
 10818                           
 10819                           ;unmc_lcd_216.c: 29: LATBbits.LATB6=!!(nibble & 0x04);
 10820  00337C  A402               	btfss	lcd_send_nibble@nibble,2,c
 10821  00337E  D003               	goto	u2510
 10822  003380  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10823  003382  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
 10824  003384  D001               	goto	u2528
 10825  003386                     u2510:
 10826  003386  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10827  003388                     u2528:
 10828  003388  3A01               	swapf	??_lcd_send_nibble,f,c
 10829  00338A  4601               	rlncf	??_lcd_send_nibble,f,c
 10830  00338C  4601               	rlncf	??_lcd_send_nibble,f,c
 10831  00338E  508A               	movf	3978,w,c	;volatile
 10832  003390  1801               	xorwf	??_lcd_send_nibble,w,c
 10833  003392  0BBF               	andlw	-65
 10834  003394  1801               	xorwf	??_lcd_send_nibble,w,c
 10835  003396  6E8A               	movwf	3978,c	;volatile
 10836                           
 10837                           ;unmc_lcd_216.c: 30: LATBbits.LATB7=!!(nibble & 0x08);
 10838  003398  A602               	btfss	lcd_send_nibble@nibble,3,c
 10839  00339A  D003               	goto	u2530
 10840  00339C  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10841  00339E  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
 10842  0033A0  D001               	goto	u2548
 10843  0033A2                     u2530:
 10844  0033A2  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10845  0033A4                     u2548:
 10846  0033A4  3201               	rrcf	??_lcd_send_nibble,f,c
 10847  0033A6  3201               	rrcf	??_lcd_send_nibble,f,c
 10848  0033A8  508A               	movf	3978,w,c	;volatile
 10849  0033AA  1801               	xorwf	??_lcd_send_nibble,w,c
 10850  0033AC  0B7F               	andlw	-129
 10851  0033AE  1801               	xorwf	??_lcd_send_nibble,w,c
 10852  0033B0  6E8A               	movwf	3978,c	;volatile
 10853                           
 10854                           ;unmc_lcd_216.c: 32: __nop();
 10855  0033B2  F000               	nop	
 10856                           
 10857                           ;unmc_lcd_216.c: 33: LATBbits.LATB2=1;
 10858  0033B4  848A               	bsf	3978,2,c	;volatile
 10859                           
 10860                           ;unmc_lcd_216.c: 34: __nop();__nop();
 10861  0033B6  F000               	nop	
 10862  0033B8  F000               	nop	
 10863                           
 10864                           ;unmc_lcd_216.c: 35: LATBbits.LATB2=0;
 10865  0033BA  948A               	bcf	3978,2,c	;volatile
 10866  0033BC  0012               	return		;funcret
 10867  0033BE                     __end_of_lcd_send_nibble:
 10868                           	opt stack 0
 10869                           tblptru	equ	0xFF8
 10870                           tblptrh	equ	0xFF7
 10871                           tblptrl	equ	0xFF6
 10872                           tablat	equ	0xFF5
 10873                           prodh	equ	0xFF4
 10874                           prodl	equ	0xFF3
 10875                           indf0	equ	0xFEF
 10876                           postinc0	equ	0xFEE
 10877                           fsr0h	equ	0xFEA
 10878                           fsr0l	equ	0xFE9
 10879                           wreg	equ	0xFE8
 10880                           postdec1	equ	0xFE5
 10881                           fsr1l	equ	0xFE1
 10882                           indf2	equ	0xFDF
 10883                           postinc2	equ	0xFDE
 10884                           postdec2	equ	0xFDD
 10885                           fsr2h	equ	0xFDA
 10886                           fsr2l	equ	0xFD9
 10887                           status	equ	0xFD8
 10888                           
 10889 ;; *************** function _Delay100TCYx *****************
 10890 ;; Defined at:
 10891 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\d100tcyx.c"
 10892 ;; Parameters:    Size  Location     Type
 10893 ;;  unit            1    wreg     unsigned char 
 10894 ;; Auto vars:     Size  Location     Type
 10895 ;;  unit            1    0[COMRAM] unsigned char 
 10896 ;; Return value:  Size  Location     Type
 10897 ;;		None               void
 10898 ;; Registers used:
 10899 ;;		wreg
 10900 ;; Tracked objects:
 10901 ;;		On entry : 0/0
 10902 ;;		On exit  : 0/0
 10903 ;;		Unchanged: 0/0
 10904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10906 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10908 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10909 ;;Total ram usage:        1 bytes
 10910 ;; Hardware stack levels used:    1
 10911 ;; This function calls:
 10912 ;;		Nothing
 10913 ;; This function is called by:
 10914 ;;		_lcd_send_byte
 10915 ;; This function uses a non-reentrant model
 10916 ;;
 10917                           
 10918                           	psect	text67
 10919  003B30                     __ptext67:
 10920                           	opt stack 0
 10921  003B30                     _Delay100TCYx:
 10922                           	opt stack 26
 10923                           
 10924                           ;incstack = 0
 10925                           ;Delay100TCYx@unit stored from wreg
 10926  003B30  6E01               	movwf	Delay100TCYx@unit,c
 10927  003B32  0E21               	movlw	33
 10928  003B34                     u5017:
 10929  003B34  2EE8               	decfsz	wreg,f,c
 10930  003B36  D7FE               	goto	u5017
 10931  003B38  F000               	nop	
 10932  003B3A  2E01               	decfsz	Delay100TCYx@unit,f,c
 10933  003B3C  D7FA               	goto	l3534
 10934  003B3E  0012               	return	
 10935  003B40  0012               	return		;funcret
 10936  003B42                     __end_of_Delay100TCYx:
 10937                           	opt stack 0
 10938                           tblptru	equ	0xFF8
 10939                           tblptrh	equ	0xFF7
 10940                           tblptrl	equ	0xFF6
 10941                           tablat	equ	0xFF5
 10942                           prodh	equ	0xFF4
 10943                           prodl	equ	0xFF3
 10944                           indf0	equ	0xFEF
 10945                           postinc0	equ	0xFEE
 10946                           fsr0h	equ	0xFEA
 10947                           fsr0l	equ	0xFE9
 10948                           wreg	equ	0xFE8
 10949                           postdec1	equ	0xFE5
 10950                           fsr1l	equ	0xFE1
 10951                           indf2	equ	0xFDF
 10952                           postinc2	equ	0xFDE
 10953                           postdec2	equ	0xFDD
 10954                           fsr2h	equ	0xFDA
 10955                           fsr2l	equ	0xFD9
 10956                           status	equ	0xFD8
 10957                           
 10958 ;; *************** function _Write_RTC *****************
 10959 ;; Defined at:
 10960 ;;		line 22 in file "Unimic/sources/unmc_rtcc_01.c"
 10961 ;; Parameters:    Size  Location     Type
 10962 ;;		None
 10963 ;; Auto vars:     Size  Location     Type
 10964 ;;		None
 10965 ;; Return value:  Size  Location     Type
 10966 ;;		None               void
 10967 ;; Registers used:
 10968 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10969 ;; Tracked objects:
 10970 ;;		On entry : 0/0
 10971 ;;		On exit  : 0/0
 10972 ;;		Unchanged: 0/0
 10973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10977 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10978 ;;Total ram usage:        0 bytes
 10979 ;; Hardware stack levels used:    1
 10980 ;; Hardware stack levels required when called:    2
 10981 ;; This function calls:
 10982 ;;		_RtccWrOn
 10983 ;;		_RtccWriteDate
 10984 ;;		_RtccWriteTime
 10985 ;;		___awdiv
 10986 ;; This function is called by:
 10987 ;;		_Setup
 10988 ;;		_setClock
 10989 ;; This function uses a non-reentrant model
 10990 ;;
 10991                           
 10992                           	psect	text68
 10993  0018AC                     __ptext68:
 10994                           	opt stack 0
 10995  0018AC                     _Write_RTC:
 10996                           	opt stack 25
 10997                           
 10998                           ;unmc_rtcc_01.c: 24: RtccWrOn();
 10999                           
 11000                           ;incstack = 0
 11001  0018AC  ECA1  F01D         	call	_RtccWrOn	;wreg free
 11002                           
 11003                           ;unmc_rtcc_01.c: 26: PIE3bits.RTCCIE=1;
 11004  0018B0  80A3               	bsf	4003,0,c	;volatile
 11005                           
 11006                           ;unmc_rtcc_01.c: 27: segundo_d=segundo/10;
 11007  0018B2  C094  F001         	movff	_segundo,___awdiv@dividend
 11008  0018B6  C095  F002         	movff	_segundo+1,___awdiv@dividend+1
 11009  0018BA  0E00               	movlw	0
 11010  0018BC  6E04               	movwf	___awdiv@divisor+1,c
 11011  0018BE  0E0A               	movlw	10
 11012  0018C0  6E03               	movwf	___awdiv@divisor,c
 11013  0018C2  EC78  F017         	call	___awdiv	;wreg free
 11014  0018C6  5001               	movf	?___awdiv,w,c
 11015  0018C8  0100               	movlb	0	; () banked
 11016  0018CA  6FEC               	movwf	_segundo_d& (0+255),b
 11017                           
 11018                           ; BSR set to: 0
 11019                           ;unmc_rtcc_01.c: 28: segundo_u=segundo-segundo_d*10;
 11020  0018CC  0100               	movlb	0	; () banked
 11021  0018CE  51EC               	movf	_segundo_d& (0+255),w,b
 11022  0018D0  0D0A               	mullw	10
 11023  0018D2  50F3               	movf	prodl,w,c
 11024  0018D4  0800               	sublw	0
 11025  0018D6  0100               	movlb	0	; () banked
 11026  0018D8  2594               	addwf	_segundo& (0+255),w,b
 11027  0018DA  0100               	movlb	0	; () banked
 11028  0018DC  6FED               	movwf	_segundo_u& (0+255),b
 11029                           
 11030                           ; BSR set to: 0
 11031                           ;unmc_rtcc_01.c: 29: RtccTime.f.sec =segundo_d*16+segundo_u;
 11032  0018DE  0100               	movlb	0	; () banked
 11033  0018E0  51EC               	movf	_segundo_d& (0+255),w,b
 11034  0018E2  0D10               	mullw	16
 11035  0018E4  50F3               	movf	prodl,w,c
 11036  0018E6  0100               	movlb	0	; () banked
 11037  0018E8  25ED               	addwf	_segundo_u& (0+255),w,b
 11038  0018EA  0100               	movlb	0	; () banked
 11039  0018EC  6FB1               	movwf	(_RtccTime+1)& (0+255),b
 11040                           
 11041                           ; BSR set to: 0
 11042                           ;unmc_rtcc_01.c: 30: minuto_d=minuto/10;
 11043  0018EE  C0D8  F001         	movff	_minuto,___awdiv@dividend
 11044  0018F2  C0D9  F002         	movff	_minuto+1,___awdiv@dividend+1
 11045  0018F6  0E00               	movlw	0
 11046  0018F8  6E04               	movwf	___awdiv@divisor+1,c
 11047  0018FA  0E0A               	movlw	10
 11048  0018FC  6E03               	movwf	___awdiv@divisor,c
 11049  0018FE  EC78  F017         	call	___awdiv	;wreg free
 11050  001902  5001               	movf	?___awdiv,w,c
 11051  001904  0100               	movlb	0	; () banked
 11052  001906  6FEA               	movwf	_minuto_d& (0+255),b
 11053                           
 11054                           ; BSR set to: 0
 11055                           ;unmc_rtcc_01.c: 31: minuto_u=minuto-minuto_d*10;
 11056  001908  0100               	movlb	0	; () banked
 11057  00190A  51EA               	movf	_minuto_d& (0+255),w,b
 11058  00190C  0D0A               	mullw	10
 11059  00190E  50F3               	movf	prodl,w,c
 11060  001910  0800               	sublw	0
 11061  001912  0100               	movlb	0	; () banked
 11062  001914  25D8               	addwf	_minuto& (0+255),w,b
 11063  001916  0100               	movlb	0	; () banked
 11064  001918  6FEB               	movwf	_minuto_u& (0+255),b
 11065                           
 11066                           ; BSR set to: 0
 11067                           ;unmc_rtcc_01.c: 32: RtccTime.f.min =minuto_d*16+minuto_u;
 11068  00191A  0100               	movlb	0	; () banked
 11069  00191C  51EA               	movf	_minuto_d& (0+255),w,b
 11070  00191E  0D10               	mullw	16
 11071  001920  50F3               	movf	prodl,w,c
 11072  001922  0100               	movlb	0	; () banked
 11073  001924  25EB               	addwf	_minuto_u& (0+255),w,b
 11074  001926  0100               	movlb	0	; () banked
 11075  001928  6FB2               	movwf	(_RtccTime+2)& (0+255),b
 11076                           
 11077                           ; BSR set to: 0
 11078                           ;unmc_rtcc_01.c: 33: hora_d=hora/10;
 11079  00192A  C0D4  F001         	movff	_hora,___awdiv@dividend
 11080  00192E  C0D5  F002         	movff	_hora+1,___awdiv@dividend+1
 11081  001932  0E00               	movlw	0
 11082  001934  6E04               	movwf	___awdiv@divisor+1,c
 11083  001936  0E0A               	movlw	10
 11084  001938  6E03               	movwf	___awdiv@divisor,c
 11085  00193A  EC78  F017         	call	___awdiv	;wreg free
 11086  00193E  5001               	movf	?___awdiv,w,c
 11087  001940  0100               	movlb	0	; () banked
 11088  001942  6FE6               	movwf	_hora_d& (0+255),b
 11089                           
 11090                           ; BSR set to: 0
 11091                           ;unmc_rtcc_01.c: 34: hora_u=hora-hora_d*10;
 11092  001944  0100               	movlb	0	; () banked
 11093  001946  51E6               	movf	_hora_d& (0+255),w,b
 11094  001948  0D0A               	mullw	10
 11095  00194A  50F3               	movf	prodl,w,c
 11096  00194C  0800               	sublw	0
 11097  00194E  0100               	movlb	0	; () banked
 11098  001950  25D4               	addwf	_hora& (0+255),w,b
 11099  001952  0100               	movlb	0	; () banked
 11100  001954  6FE7               	movwf	_hora_u& (0+255),b
 11101                           
 11102                           ; BSR set to: 0
 11103                           ;unmc_rtcc_01.c: 35: RtccTime.f.hour=hora_d*16+hora_u;
 11104  001956  0100               	movlb	0	; () banked
 11105  001958  51E6               	movf	_hora_d& (0+255),w,b
 11106  00195A  0D10               	mullw	16
 11107  00195C  50F3               	movf	prodl,w,c
 11108  00195E  0100               	movlb	0	; () banked
 11109  001960  25E7               	addwf	_hora_u& (0+255),w,b
 11110  001962  0100               	movlb	0	; () banked
 11111  001964  6FB3               	movwf	(_RtccTime+3)& (0+255),b
 11112                           
 11113                           ; BSR set to: 0
 11114                           ;unmc_rtcc_01.c: 36: anio_d=anio/10;
 11115  001966  C0CE  F001         	movff	_anio,___awdiv@dividend
 11116  00196A  C0CF  F002         	movff	_anio+1,___awdiv@dividend+1
 11117  00196E  0E00               	movlw	0
 11118  001970  6E04               	movwf	___awdiv@divisor+1,c
 11119  001972  0E0A               	movlw	10
 11120  001974  6E03               	movwf	___awdiv@divisor,c
 11121  001976  EC78  F017         	call	___awdiv	;wreg free
 11122  00197A  5001               	movf	?___awdiv,w,c
 11123  00197C  0100               	movlb	0	; () banked
 11124  00197E  6FE1               	movwf	_anio_d& (0+255),b
 11125                           
 11126                           ; BSR set to: 0
 11127                           ;unmc_rtcc_01.c: 37: anio_u=anio-anio_d*10;
 11128  001980  0100               	movlb	0	; () banked
 11129  001982  51E1               	movf	_anio_d& (0+255),w,b
 11130  001984  0D0A               	mullw	10
 11131  001986  50F3               	movf	prodl,w,c
 11132  001988  0800               	sublw	0
 11133  00198A  0100               	movlb	0	; () banked
 11134  00198C  25CE               	addwf	_anio& (0+255),w,b
 11135  00198E  0100               	movlb	0	; () banked
 11136  001990  6FE2               	movwf	_anio_u& (0+255),b
 11137                           
 11138                           ; BSR set to: 0
 11139                           ;unmc_rtcc_01.c: 38: RtccDate.f.year=anio_d*16+anio_u;
 11140  001992  0100               	movlb	0	; () banked
 11141  001994  51E1               	movf	_anio_d& (0+255),w,b
 11142  001996  0D10               	mullw	16
 11143  001998  50F3               	movf	prodl,w,c
 11144  00199A  0100               	movlb	0	; () banked
 11145  00199C  25E2               	addwf	_anio_u& (0+255),w,b
 11146  00199E  0100               	movlb	0	; () banked
 11147  0019A0  6FAF               	movwf	(_RtccDate+3)& (0+255),b
 11148                           
 11149                           ; BSR set to: 0
 11150                           ;unmc_rtcc_01.c: 39: mes_d=mes/10;
 11151  0019A2  C0D6  F001         	movff	_mes,___awdiv@dividend
 11152  0019A6  C0D7  F002         	movff	_mes+1,___awdiv@dividend+1
 11153  0019AA  0E00               	movlw	0
 11154  0019AC  6E04               	movwf	___awdiv@divisor+1,c
 11155  0019AE  0E0A               	movlw	10
 11156  0019B0  6E03               	movwf	___awdiv@divisor,c
 11157  0019B2  EC78  F017         	call	___awdiv	;wreg free
 11158  0019B6  5001               	movf	?___awdiv,w,c
 11159  0019B8  0100               	movlb	0	; () banked
 11160  0019BA  6FE8               	movwf	_mes_d& (0+255),b
 11161                           
 11162                           ; BSR set to: 0
 11163                           ;unmc_rtcc_01.c: 40: mes_u=mes-mes_d*10;
 11164  0019BC  0100               	movlb	0	; () banked
 11165  0019BE  51E8               	movf	_mes_d& (0+255),w,b
 11166  0019C0  0D0A               	mullw	10
 11167  0019C2  50F3               	movf	prodl,w,c
 11168  0019C4  0800               	sublw	0
 11169  0019C6  0100               	movlb	0	; () banked
 11170  0019C8  25D6               	addwf	_mes& (0+255),w,b
 11171  0019CA  0100               	movlb	0	; () banked
 11172  0019CC  6FE9               	movwf	_mes_u& (0+255),b
 11173                           
 11174                           ; BSR set to: 0
 11175                           ;unmc_rtcc_01.c: 41: RtccDate.f.mon=mes_d*16+mes_u;
 11176  0019CE  0100               	movlb	0	; () banked
 11177  0019D0  51E8               	movf	_mes_d& (0+255),w,b
 11178  0019D2  0D10               	mullw	16
 11179  0019D4  50F3               	movf	prodl,w,c
 11180  0019D6  0100               	movlb	0	; () banked
 11181  0019D8  25E9               	addwf	_mes_u& (0+255),w,b
 11182  0019DA  0100               	movlb	0	; () banked
 11183  0019DC  6FAE               	movwf	(_RtccDate+2)& (0+255),b
 11184                           
 11185                           ; BSR set to: 0
 11186                           ;unmc_rtcc_01.c: 42: fecha_d=dia/10;
 11187  0019DE  C0D0  F001         	movff	_dia,___awdiv@dividend
 11188  0019E2  C0D1  F002         	movff	_dia+1,___awdiv@dividend+1
 11189  0019E6  0E00               	movlw	0
 11190  0019E8  6E04               	movwf	___awdiv@divisor+1,c
 11191  0019EA  0E0A               	movlw	10
 11192  0019EC  6E03               	movwf	___awdiv@divisor,c
 11193  0019EE  EC78  F017         	call	___awdiv	;wreg free
 11194  0019F2  5001               	movf	?___awdiv,w,c
 11195  0019F4  0100               	movlb	0	; () banked
 11196  0019F6  6FE4               	movwf	_fecha_d& (0+255),b
 11197                           
 11198                           ; BSR set to: 0
 11199                           ;unmc_rtcc_01.c: 43: fecha_u=dia-fecha_d*10;
 11200  0019F8  0100               	movlb	0	; () banked
 11201  0019FA  51E4               	movf	_fecha_d& (0+255),w,b
 11202  0019FC  0D0A               	mullw	10
 11203  0019FE  50F3               	movf	prodl,w,c
 11204  001A00  0800               	sublw	0
 11205  001A02  0100               	movlb	0	; () banked
 11206  001A04  25D0               	addwf	_dia& (0+255),w,b
 11207  001A06  0100               	movlb	0	; () banked
 11208  001A08  6FE5               	movwf	_fecha_u& (0+255),b
 11209                           
 11210                           ; BSR set to: 0
 11211                           ;unmc_rtcc_01.c: 44: RtccDate.f.mday=fecha_d*16+fecha_u;
 11212  001A0A  0100               	movlb	0	; () banked
 11213  001A0C  51E4               	movf	_fecha_d& (0+255),w,b
 11214  001A0E  0D10               	mullw	16
 11215  001A10  50F3               	movf	prodl,w,c
 11216  001A12  0100               	movlb	0	; () banked
 11217  001A14  25E5               	addwf	_fecha_u& (0+255),w,b
 11218  001A16  0100               	movlb	0	; () banked
 11219  001A18  6FAD               	movwf	(_RtccDate+1)& (0+255),b
 11220                           
 11221                           ; BSR set to: 0
 11222                           ;unmc_rtcc_01.c: 45: dia_semana=diasem;
 11223  001A1A  C0D2  F0E3         	movff	_diasem,_dia_semana
 11224                           
 11225                           ; BSR set to: 0
 11226                           ;unmc_rtcc_01.c: 46: RtccDate.f.wday =diasem;
 11227  001A1E  C0D2  F0AC         	movff	_diasem,_RtccDate
 11228                           
 11229                           ; BSR set to: 0
 11230                           ;unmc_rtcc_01.c: 47: RtccWriteTime(&RtccTime,1);
 11231  001A22  0EB0               	movlw	low _RtccTime
 11232  001A24  6E01               	movwf	RtccWriteTime@pTm,c
 11233  001A26  0E00               	movlw	high _RtccTime
 11234  001A28  6E02               	movwf	RtccWriteTime@pTm+1,c
 11235  001A2A  0E01               	movlw	1
 11236  001A2C  6E03               	movwf	RtccWriteTime@di,c
 11237  001A2E  EC2A  F011         	call	_RtccWriteTime	;wreg free
 11238                           
 11239                           ;unmc_rtcc_01.c: 48: RtccWriteDate(&RtccDate,1);
 11240  001A32  0EAC               	movlw	low _RtccDate
 11241  001A34  6E01               	movwf	RtccWriteDate@pDt,c
 11242  001A36  0E00               	movlw	high _RtccDate
 11243  001A38  6E02               	movwf	RtccWriteDate@pDt+1,c
 11244  001A3A  0E01               	movlw	1
 11245  001A3C  6E03               	movwf	RtccWriteDate@di,c
 11246  001A3E  ECF7  F00F         	call	_RtccWriteDate	;wreg free
 11247                           
 11248                           ;unmc_rtcc_01.c: 49: (RTCCFGbits.RTCEN=1);
 11249  001A42  010F               	movlb	15	; () banked
 11250  001A44  8F3F               	bsf	63,7,b	;volatile
 11251                           
 11252                           ; BSR set to: 15
 11253  001A46  0012               	return		;funcret
 11254  001A48                     __end_of_Write_RTC:
 11255                           	opt stack 0
 11256                           tblptru	equ	0xFF8
 11257                           tblptrh	equ	0xFF7
 11258                           tblptrl	equ	0xFF6
 11259                           tablat	equ	0xFF5
 11260                           prodh	equ	0xFF4
 11261                           prodl	equ	0xFF3
 11262                           indf0	equ	0xFEF
 11263                           postinc0	equ	0xFEE
 11264                           fsr0h	equ	0xFEA
 11265                           fsr0l	equ	0xFE9
 11266                           wreg	equ	0xFE8
 11267                           postdec1	equ	0xFE5
 11268                           fsr1l	equ	0xFE1
 11269                           indf2	equ	0xFDF
 11270                           postinc2	equ	0xFDE
 11271                           postdec2	equ	0xFDD
 11272                           fsr2h	equ	0xFDA
 11273                           fsr2l	equ	0xFD9
 11274                           status	equ	0xFD8
 11275                           
 11276 ;; *************** function ___awdiv *****************
 11277 ;; Defined at:
 11278 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\awdiv.c"
 11279 ;; Parameters:    Size  Location     Type
 11280 ;;  dividend        2    0[COMRAM] int 
 11281 ;;  divisor         2    2[COMRAM] int 
 11282 ;; Auto vars:     Size  Location     Type
 11283 ;;  quotient        2    6[COMRAM] int 
 11284 ;;  sign            1    5[COMRAM] unsigned char 
 11285 ;;  counter         1    4[COMRAM] unsigned char 
 11286 ;; Return value:  Size  Location     Type
 11287 ;;                  2    0[COMRAM] int 
 11288 ;; Registers used:
 11289 ;;		wreg, status,2, status,0
 11290 ;; Tracked objects:
 11291 ;;		On entry : 0/0
 11292 ;;		On exit  : 0/0
 11293 ;;		Unchanged: 0/0
 11294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11295 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11296 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11298 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11299 ;;Total ram usage:        8 bytes
 11300 ;; Hardware stack levels used:    1
 11301 ;; This function calls:
 11302 ;;		Nothing
 11303 ;; This function is called by:
 11304 ;;		__delay_s
 11305 ;;		_Write_RTC
 11306 ;; This function uses a non-reentrant model
 11307 ;;
 11308                           
 11309                           	psect	text69
 11310  002EF0                     __ptext69:
 11311                           	opt stack 0
 11312  002EF0                     ___awdiv:
 11313                           	opt stack 27
 11314                           
 11315                           ; BSR set to: 15
 11316                           ;incstack = 0
 11317  002EF0  0E00               	movlw	0
 11318  002EF2  6E06               	movwf	___awdiv@sign,c
 11319  002EF4  AE04               	btfss	___awdiv@divisor+1,7,c
 11320  002EF6  D007               	goto	l4422
 11321  002EF8  6C03               	negf	___awdiv@divisor,c
 11322  002EFA  1E04               	comf	___awdiv@divisor+1,f,c
 11323  002EFC  B0D8               	btfsc	status,0,c
 11324  002EFE  2A04               	incf	___awdiv@divisor+1,f,c
 11325  002F00  0E01               	movlw	1
 11326  002F02  6E06               	movwf	___awdiv@sign,c
 11327  002F04  D000               	goto	l4422
 11328  002F06                     l4422:
 11329  002F06  AE02               	btfss	___awdiv@dividend+1,7,c
 11330  002F08  D007               	goto	l4428
 11331  002F0A  6C01               	negf	___awdiv@dividend,c
 11332  002F0C  1E02               	comf	___awdiv@dividend+1,f,c
 11333  002F0E  B0D8               	btfsc	status,0,c
 11334  002F10  2A02               	incf	___awdiv@dividend+1,f,c
 11335  002F12  0E01               	movlw	1
 11336  002F14  1A06               	xorwf	___awdiv@sign,f,c
 11337  002F16  D000               	goto	l4428
 11338  002F18                     l4428:
 11339  002F18  0E00               	movlw	0
 11340  002F1A  6E08               	movwf	___awdiv@quotient+1,c
 11341  002F1C  0E00               	movlw	0
 11342  002F1E  6E07               	movwf	___awdiv@quotient,c
 11343  002F20  5003               	movf	___awdiv@divisor,w,c
 11344  002F22  1004               	iorwf	___awdiv@divisor+1,w,c
 11345  002F24  B4D8               	btfsc	status,2,c
 11346  002F26  D021               	goto	l4450
 11347  002F28  0E01               	movlw	1
 11348  002F2A  6E05               	movwf	___awdiv@counter,c
 11349  002F2C  D005               	goto	l4436
 11350  002F2E                     l4434:
 11351  002F2E  90D8               	bcf	status,0,c
 11352  002F30  3603               	rlcf	___awdiv@divisor,f,c
 11353  002F32  3604               	rlcf	___awdiv@divisor+1,f,c
 11354  002F34  2A05               	incf	___awdiv@counter,f,c
 11355  002F36  D000               	goto	l4436
 11356  002F38                     l4436:
 11357  002F38  BE04               	btfsc	___awdiv@divisor+1,7,c
 11358  002F3A  D002               	goto	l4438
 11359  002F3C  D7F8               	goto	l4434
 11360  002F3E  D000               	goto	l4438
 11361  002F40                     l4438:
 11362  002F40  90D8               	bcf	status,0,c
 11363  002F42  3607               	rlcf	___awdiv@quotient,f,c
 11364  002F44  3608               	rlcf	___awdiv@quotient+1,f,c
 11365  002F46  5003               	movf	___awdiv@divisor,w,c
 11366  002F48  5C01               	subwf	___awdiv@dividend,w,c
 11367  002F4A  5004               	movf	___awdiv@divisor+1,w,c
 11368  002F4C  5802               	subwfb	___awdiv@dividend+1,w,c
 11369  002F4E  A0D8               	btfss	status,0,c
 11370  002F50  D006               	goto	l4446
 11371  002F52  5003               	movf	___awdiv@divisor,w,c
 11372  002F54  5E01               	subwf	___awdiv@dividend,f,c
 11373  002F56  5004               	movf	___awdiv@divisor+1,w,c
 11374  002F58  5A02               	subwfb	___awdiv@dividend+1,f,c
 11375  002F5A  8007               	bsf	___awdiv@quotient,0,c
 11376  002F5C  D000               	goto	l4446
 11377  002F5E                     l4446:
 11378  002F5E  90D8               	bcf	status,0,c
 11379  002F60  3204               	rrcf	___awdiv@divisor+1,f,c
 11380  002F62  3203               	rrcf	___awdiv@divisor,f,c
 11381  002F64  2E05               	decfsz	___awdiv@counter,f,c
 11382  002F66  D7EC               	goto	l4438
 11383  002F68  D000               	goto	l4450
 11384  002F6A                     l4450:
 11385  002F6A  5006               	movf	___awdiv@sign,w,c
 11386  002F6C  B4D8               	btfsc	status,2,c
 11387  002F6E  D005               	goto	l4454
 11388  002F70  6C07               	negf	___awdiv@quotient,c
 11389  002F72  1E08               	comf	___awdiv@quotient+1,f,c
 11390  002F74  B0D8               	btfsc	status,0,c
 11391  002F76  2A08               	incf	___awdiv@quotient+1,f,c
 11392  002F78  D000               	goto	l4454
 11393  002F7A                     l4454:
 11394  002F7A  C007  F001         	movff	___awdiv@quotient,?___awdiv
 11395  002F7E  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
 11396  002F82  0012               	return	
 11397  002F84  0012               	return		;funcret
 11398  002F86                     __end_of___awdiv:
 11399                           	opt stack 0
 11400                           tblptru	equ	0xFF8
 11401                           tblptrh	equ	0xFF7
 11402                           tblptrl	equ	0xFF6
 11403                           tablat	equ	0xFF5
 11404                           prodh	equ	0xFF4
 11405                           prodl	equ	0xFF3
 11406                           indf0	equ	0xFEF
 11407                           postinc0	equ	0xFEE
 11408                           fsr0h	equ	0xFEA
 11409                           fsr0l	equ	0xFE9
 11410                           wreg	equ	0xFE8
 11411                           postdec1	equ	0xFE5
 11412                           fsr1l	equ	0xFE1
 11413                           indf2	equ	0xFDF
 11414                           postinc2	equ	0xFDE
 11415                           postdec2	equ	0xFDD
 11416                           fsr2h	equ	0xFDA
 11417                           fsr2l	equ	0xFD9
 11418                           status	equ	0xFD8
 11419                           
 11420 ;; *************** function _RtccWriteTime *****************
 11421 ;; Defined at:
 11422 ;;		line 34 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteTime.c"
 11423 ;; Parameters:    Size  Location     Type
 11424 ;;  pTm             2    0[COMRAM] PTR const struct .
 11425 ;;		 -> RtccTime(4), 
 11426 ;;  di              1    2[COMRAM] enum E7121
 11427 ;; Auto vars:     Size  Location     Type
 11428 ;;  tempHourWDay    2    9[COMRAM] struct .
 11429 ;;  tempMinSec      2    7[COMRAM] struct .
 11430 ;;  wasWrEn         1    6[COMRAM] enum E7121
 11431 ;;  wasAlrm         1    5[COMRAM] enum E7121
 11432 ;;  wasOn           1    4[COMRAM] enum E7121
 11433 ;; Return value:  Size  Location     Type
 11434 ;;                  1    wreg      enum E7121
 11435 ;; Registers used:
 11436 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11437 ;; Tracked objects:
 11438 ;;		On entry : 0/0
 11439 ;;		On exit  : 0/0
 11440 ;;		Unchanged: 0/0
 11441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11442 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11443 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11444 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11445 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11446 ;;Total ram usage:       11 bytes
 11447 ;; Hardware stack levels used:    1
 11448 ;; Hardware stack levels required when called:    1
 11449 ;; This function calls:
 11450 ;;		_RtccWrOn
 11451 ;; This function is called by:
 11452 ;;		_Write_RTC
 11453 ;; This function uses a non-reentrant model
 11454 ;;
 11455                           
 11456                           	psect	text70
 11457  002254                     __ptext70:
 11458                           	opt stack 0
 11459  002254                     _RtccWriteTime:
 11460                           	opt stack 25
 11461                           
 11462                           ;incstack = 0
 11463  002254  0E00               	movlw	0
 11464  002256  6E06               	movwf	RtccWriteTime@wasAlrm,c
 11465  002258  EE20 F002          	lfsr	2,2
 11466  00225C  5001               	movf	RtccWriteTime@pTm,w,c
 11467  00225E  26D9               	addwf	fsr2l,f,c
 11468  002260  5002               	movf	RtccWriteTime@pTm+1,w,c
 11469  002262  22DA               	addwfc	fsr2h,f,c
 11470  002264  0E5A               	movlw	90
 11471  002266  60DF               	cpfslt	indf2,c
 11472  002268  0012               	return	
 11473  00226A  EE20 F001          	lfsr	2,1
 11474  00226E  5001               	movf	RtccWriteTime@pTm,w,c
 11475  002270  26D9               	addwf	fsr2l,f,c
 11476  002272  5002               	movf	RtccWriteTime@pTm+1,w,c
 11477  002274  22DA               	addwfc	fsr2h,f,c
 11478  002276  0E5A               	movlw	90
 11479  002278  60DF               	cpfslt	indf2,c
 11480  00227A  0012               	return	
 11481  00227C  EE20 F003          	lfsr	2,3
 11482  002280  5001               	movf	RtccWriteTime@pTm,w,c
 11483  002282  26D9               	addwf	fsr2l,f,c
 11484  002284  5002               	movf	RtccWriteTime@pTm+1,w,c
 11485  002286  22DA               	addwfc	fsr2h,f,c
 11486  002288  0E24               	movlw	36
 11487  00228A  64DF               	cpfsgt	indf2,c
 11488  00228C  D002               	goto	l4286
 11489  00228E  0012               	return	
 11490                           
 11491                           ;	Return value of _RtccWriteTime is never used
 11492  002290  0012               	return	
 11493  002292                     l4286:
 11494  002292  EE20 F002          	lfsr	2,2
 11495  002296  5001               	movf	RtccWriteTime@pTm,w,c
 11496  002298  26D9               	addwf	fsr2l,f,c
 11497  00229A  5002               	movf	RtccWriteTime@pTm+1,w,c
 11498  00229C  22DA               	addwfc	fsr2h,f,c
 11499  00229E  50DF               	movf	indf2,w,c
 11500  0022A0  6E09               	movwf	RtccWriteTime@tempMinSec+1,c
 11501  0022A2  EE20 F001          	lfsr	2,1
 11502  0022A6  5001               	movf	RtccWriteTime@pTm,w,c
 11503  0022A8  26D9               	addwf	fsr2l,f,c
 11504  0022AA  5002               	movf	RtccWriteTime@pTm+1,w,c
 11505  0022AC  22DA               	addwfc	fsr2h,f,c
 11506  0022AE  50DF               	movf	indf2,w,c
 11507  0022B0  6E08               	movwf	RtccWriteTime@tempMinSec,c
 11508  0022B2  5003               	movf	RtccWriteTime@di,w,c
 11509  0022B4  B4D8               	btfsc	status,2,c
 11510  0022B6  D002               	goto	l4292
 11511  0022B8  9CF2               	bcf	intcon,6,c	;volatile
 11512  0022BA  D000               	goto	l4292
 11513  0022BC                     l4292:
 11514  0022BC  0E00               	movlw	0
 11515  0022BE  BB3F               	btfsc	63,5,b	;volatile
 11516  0022C0  0E01               	movlw	1
 11517  0022C2  6E07               	movwf	RtccWriteTime@wasWrEn,c
 11518  0022C4  5007               	movf	RtccWriteTime@wasWrEn,w,c
 11519  0022C6  A4D8               	btfss	status,2,c
 11520  0022C8  D003               	goto	l4296
 11521  0022CA  ECA1  F01D         	call	_RtccWrOn	;wreg free
 11522  0022CE  D000               	goto	l4296
 11523  0022D0                     l4296:
 11524  0022D0  0E00               	movlw	0
 11525  0022D2  BF3F               	btfsc	63,7,b	;volatile
 11526  0022D4  0E01               	movlw	1
 11527  0022D6  6E05               	movwf	RtccWriteTime@wasOn,c
 11528  0022D8  5005               	movf	RtccWriteTime@wasOn,w,c
 11529  0022DA  B4D8               	btfsc	status,2,c
 11530  0022DC  D007               	goto	l4302
 11531  0022DE  0E00               	movlw	0
 11532  0022E0  BE91               	btfsc	3985,7,c	;volatile
 11533  0022E2  0E01               	movlw	1
 11534  0022E4  6E06               	movwf	RtccWriteTime@wasAlrm,c
 11535  0022E6  010F               	movlb	15	; () banked
 11536  0022E8  9F3F               	bcf	63,7,b	;volatile
 11537  0022EA  D000               	goto	l4302
 11538  0022EC                     l4302:
 11539  0022EC  0EFC               	movlw	252
 11540  0022EE  010F               	movlb	15	; () banked
 11541  0022F0  173F               	andwf	63,f,b	;volatile
 11542  0022F2  010F               	movlb	15	; () banked
 11543  0022F4  813F               	bsf	63,0,b	;volatile
 11544                           
 11545                           ; BSR set to: 15
 11546  0022F6  CF98 F00A          	movff	3992,RtccWriteTime@tempHourWDay	;volatile
 11547                           
 11548                           ; BSR set to: 15
 11549  0022FA  CF99 F00B          	movff	3993,RtccWriteTime@tempHourWDay+1	;volatile
 11550                           
 11551                           ; BSR set to: 15
 11552  0022FE  EE20 F003          	lfsr	2,3
 11553  002302  5001               	movf	RtccWriteTime@pTm,w,c
 11554  002304  26D9               	addwf	fsr2l,f,c
 11555  002306  5002               	movf	RtccWriteTime@pTm+1,w,c
 11556  002308  22DA               	addwfc	fsr2h,f,c
 11557  00230A  50DF               	movf	indf2,w,c
 11558  00230C  6E0A               	movwf	RtccWriteTime@tempHourWDay,c
 11559                           
 11560                           ; BSR set to: 15
 11561  00230E  0EFC               	movlw	252
 11562  002310  010F               	movlb	15	; () banked
 11563  002312  173F               	andwf	63,f,b	;volatile
 11564                           
 11565                           ; BSR set to: 15
 11566  002314  010F               	movlb	15	; () banked
 11567  002316  813F               	bsf	63,0,b	;volatile
 11568                           
 11569                           ; BSR set to: 15
 11570  002318  C00A  FF98         	movff	RtccWriteTime@tempHourWDay,3992	;volatile
 11571                           
 11572                           ; BSR set to: 15
 11573  00231C  C00B  FF99         	movff	RtccWriteTime@tempHourWDay+1,3993	;volatile
 11574                           
 11575                           ; BSR set to: 15
 11576  002320  C008  FF98         	movff	RtccWriteTime@tempMinSec,3992	;volatile
 11577                           
 11578                           ; BSR set to: 15
 11579  002324  C009  FF99         	movff	RtccWriteTime@tempMinSec+1,3993	;volatile
 11580                           
 11581                           ; BSR set to: 15
 11582  002328  5005               	movf	RtccWriteTime@wasOn,w,c
 11583  00232A  B4D8               	btfsc	status,2,c
 11584  00232C  D00D               	goto	l4334
 11585                           
 11586                           ; BSR set to: 15
 11587  00232E  010F               	movlb	15	; () banked
 11588  002330  8F3F               	bsf	63,7,b	;volatile
 11589                           
 11590                           ; BSR set to: 15
 11591  002332  5006               	movf	RtccWriteTime@wasAlrm,w,c
 11592  002334  B4D8               	btfsc	status,2,c
 11593  002336  D002               	goto	l4330
 11594                           
 11595                           ; BSR set to: 15
 11596  002338  8E91               	bsf	3985,7,c	;volatile
 11597  00233A  D000               	goto	l4330
 11598  00233C                     l4330:
 11599                           
 11600                           ; BSR set to: 15
 11601  00233C  5007               	movf	RtccWriteTime@wasWrEn,w,c
 11602  00233E  B4D8               	btfsc	status,2,c
 11603  002340  D009               	goto	l4338
 11604                           
 11605                           ; BSR set to: 15
 11606  002342  ECA1  F01D         	call	_RtccWrOn	;wreg free
 11607  002346  D006               	goto	l4338
 11608  002348                     l4334:
 11609  002348  5007               	movf	RtccWriteTime@wasWrEn,w,c
 11610  00234A  A4D8               	btfss	status,2,c
 11611  00234C  D003               	goto	l4338
 11612  00234E  010F               	movlb	15	; () banked
 11613  002350  9B3F               	bcf	63,5,b	;volatile
 11614                           
 11615                           ; BSR set to: 15
 11616  002352  D000               	goto	l4338
 11617  002354                     l4338:
 11618  002354  5003               	movf	RtccWriteTime@di,w,c
 11619  002356  B4D8               	btfsc	status,2,c
 11620  002358  0012               	return	
 11621  00235A  8CF2               	bsf	intcon,6,c	;volatile
 11622  00235C  0012               	return	
 11623                           
 11624                           ;	Return value of _RtccWriteTime is never used
 11625  00235E  0012               	return		;funcret
 11626  002360                     __end_of_RtccWriteTime:
 11627                           	opt stack 0
 11628                           tblptru	equ	0xFF8
 11629                           tblptrh	equ	0xFF7
 11630                           tblptrl	equ	0xFF6
 11631                           tablat	equ	0xFF5
 11632                           prodh	equ	0xFF4
 11633                           prodl	equ	0xFF3
 11634                           intcon	equ	0xFF2
 11635                           indf0	equ	0xFEF
 11636                           postinc0	equ	0xFEE
 11637                           fsr0h	equ	0xFEA
 11638                           fsr0l	equ	0xFE9
 11639                           wreg	equ	0xFE8
 11640                           postdec1	equ	0xFE5
 11641                           fsr1l	equ	0xFE1
 11642                           indf2	equ	0xFDF
 11643                           postinc2	equ	0xFDE
 11644                           postdec2	equ	0xFDD
 11645                           fsr2h	equ	0xFDA
 11646                           fsr2l	equ	0xFD9
 11647                           status	equ	0xFD8
 11648                           
 11649 ;; *************** function _RtccWriteDate *****************
 11650 ;; Defined at:
 11651 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteDate.c"
 11652 ;; Parameters:    Size  Location     Type
 11653 ;;  pDt             2    0[COMRAM] PTR const struct .
 11654 ;;		 -> RtccDate(4), 
 11655 ;;  di              1    2[COMRAM] enum E7121
 11656 ;; Auto vars:     Size  Location     Type
 11657 ;;  tempHourWDay    2   11[COMRAM] struct .
 11658 ;;  tempDayMonth    2    9[COMRAM] struct .
 11659 ;;  tempYear        2    6[COMRAM] struct .
 11660 ;;  wasWrEn         1    8[COMRAM] enum E7121
 11661 ;;  wasAlrm         1    5[COMRAM] enum E7121
 11662 ;;  wasOn           1    4[COMRAM] enum E7121
 11663 ;; Return value:  Size  Location     Type
 11664 ;;                  1    wreg      enum E7121
 11665 ;; Registers used:
 11666 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11667 ;; Tracked objects:
 11668 ;;		On entry : 0/0
 11669 ;;		On exit  : 0/0
 11670 ;;		Unchanged: 0/0
 11671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11672 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11673 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11674 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11675 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11676 ;;Total ram usage:       13 bytes
 11677 ;; Hardware stack levels used:    1
 11678 ;; Hardware stack levels required when called:    1
 11679 ;; This function calls:
 11680 ;;		_RtccWrOn
 11681 ;; This function is called by:
 11682 ;;		_Write_RTC
 11683 ;; This function uses a non-reentrant model
 11684 ;;
 11685                           
 11686                           	psect	text71
 11687  001FEE                     __ptext71:
 11688                           	opt stack 0
 11689  001FEE                     _RtccWriteDate:
 11690                           	opt stack 25
 11691                           
 11692                           ;incstack = 0
 11693  001FEE  0E00               	movlw	0
 11694  001FF0  6E06               	movwf	RtccWriteDate@wasAlrm,c
 11695  001FF2  EE20 F002          	lfsr	2,2
 11696  001FF6  5001               	movf	RtccWriteDate@pDt,w,c
 11697  001FF8  26D9               	addwf	fsr2l,f,c
 11698  001FFA  5002               	movf	RtccWriteDate@pDt+1,w,c
 11699  001FFC  22DA               	addwfc	fsr2h,f,c
 11700  001FFE  0E13               	movlw	19
 11701  002000  60DF               	cpfslt	indf2,c
 11702  002002  0012               	return	
 11703  002004  EE20 F002          	lfsr	2,2
 11704  002008  5001               	movf	RtccWriteDate@pDt,w,c
 11705  00200A  26D9               	addwf	fsr2l,f,c
 11706  00200C  5002               	movf	RtccWriteDate@pDt+1,w,c
 11707  00200E  22DA               	addwfc	fsr2h,f,c
 11708  002010  50DF               	movf	indf2,w,c
 11709  002012  B4D8               	btfsc	status,2,c
 11710  002014  0012               	return	
 11711  002016  EE20 F001          	lfsr	2,1
 11712  00201A  5001               	movf	RtccWriteDate@pDt,w,c
 11713  00201C  26D9               	addwf	fsr2l,f,c
 11714  00201E  5002               	movf	RtccWriteDate@pDt+1,w,c
 11715  002020  22DA               	addwfc	fsr2h,f,c
 11716  002022  0E32               	movlw	50
 11717  002024  60DF               	cpfslt	indf2,c
 11718  002026  0012               	return	
 11719  002028  EE20 F001          	lfsr	2,1
 11720  00202C  5001               	movf	RtccWriteDate@pDt,w,c
 11721  00202E  26D9               	addwf	fsr2l,f,c
 11722  002030  5002               	movf	RtccWriteDate@pDt+1,w,c
 11723  002032  22DA               	addwfc	fsr2h,f,c
 11724  002034  50DF               	movf	indf2,w,c
 11725  002036  B4D8               	btfsc	status,2,c
 11726  002038  0012               	return	
 11727  00203A  EE20 F003          	lfsr	2,3
 11728  00203E  5001               	movf	RtccWriteDate@pDt,w,c
 11729  002040  26D9               	addwf	fsr2l,f,c
 11730  002042  5002               	movf	RtccWriteDate@pDt+1,w,c
 11731  002044  22DA               	addwfc	fsr2h,f,c
 11732  002046  0E99               	movlw	153
 11733  002048  64DF               	cpfsgt	indf2,c
 11734  00204A  D002               	goto	l4354
 11735  00204C  0012               	return	
 11736                           
 11737                           ;	Return value of _RtccWriteDate is never used
 11738  00204E  0012               	return	
 11739  002050                     l4354:
 11740  002050  EE20 F003          	lfsr	2,3
 11741  002054  5001               	movf	RtccWriteDate@pDt,w,c
 11742  002056  26D9               	addwf	fsr2l,f,c
 11743  002058  5002               	movf	RtccWriteDate@pDt+1,w,c
 11744  00205A  22DA               	addwfc	fsr2h,f,c
 11745  00205C  50DF               	movf	indf2,w,c
 11746  00205E  6E07               	movwf	RtccWriteDate@tempYear,c
 11747  002060  EE20 F001          	lfsr	2,1
 11748  002064  5001               	movf	RtccWriteDate@pDt,w,c
 11749  002066  26D9               	addwf	fsr2l,f,c
 11750  002068  5002               	movf	RtccWriteDate@pDt+1,w,c
 11751  00206A  22DA               	addwfc	fsr2h,f,c
 11752  00206C  50DF               	movf	indf2,w,c
 11753  00206E  6E0A               	movwf	RtccWriteDate@tempDayMonth,c
 11754  002070  EE20 F002          	lfsr	2,2
 11755  002074  5001               	movf	RtccWriteDate@pDt,w,c
 11756  002076  26D9               	addwf	fsr2l,f,c
 11757  002078  5002               	movf	RtccWriteDate@pDt+1,w,c
 11758  00207A  22DA               	addwfc	fsr2h,f,c
 11759  00207C  50DF               	movf	indf2,w,c
 11760  00207E  6E0B               	movwf	RtccWriteDate@tempDayMonth+1,c
 11761  002080  5003               	movf	RtccWriteDate@di,w,c
 11762  002082  B4D8               	btfsc	status,2,c
 11763  002084  D002               	goto	l4360
 11764  002086  9CF2               	bcf	intcon,6,c	;volatile
 11765  002088  D000               	goto	l4360
 11766  00208A                     l4360:
 11767  00208A  0E00               	movlw	0
 11768  00208C  BB3F               	btfsc	63,5,b	;volatile
 11769  00208E  0E01               	movlw	1
 11770  002090  6E09               	movwf	RtccWriteDate@wasWrEn,c
 11771  002092  5009               	movf	RtccWriteDate@wasWrEn,w,c
 11772  002094  A4D8               	btfss	status,2,c
 11773  002096  D003               	goto	l4364
 11774  002098  ECA1  F01D         	call	_RtccWrOn	;wreg free
 11775  00209C  D000               	goto	l4364
 11776  00209E                     l4364:
 11777  00209E  0E00               	movlw	0
 11778  0020A0  BF3F               	btfsc	63,7,b	;volatile
 11779  0020A2  0E01               	movlw	1
 11780  0020A4  6E05               	movwf	RtccWriteDate@wasOn,c
 11781  0020A6  5005               	movf	RtccWriteDate@wasOn,w,c
 11782  0020A8  B4D8               	btfsc	status,2,c
 11783  0020AA  D007               	goto	l4370
 11784  0020AC  0E00               	movlw	0
 11785  0020AE  BE91               	btfsc	3985,7,c	;volatile
 11786  0020B0  0E01               	movlw	1
 11787  0020B2  6E06               	movwf	RtccWriteDate@wasAlrm,c
 11788  0020B4  010F               	movlb	15	; () banked
 11789  0020B6  9F3F               	bcf	63,7,b	;volatile
 11790  0020B8  D000               	goto	l4370
 11791  0020BA                     l4370:
 11792  0020BA  0EFC               	movlw	252
 11793  0020BC  010F               	movlb	15	; () banked
 11794  0020BE  173F               	andwf	63,f,b	;volatile
 11795  0020C0  010F               	movlb	15	; () banked
 11796  0020C2  813F               	bsf	63,0,b	;volatile
 11797                           
 11798                           ; BSR set to: 15
 11799  0020C4  CF98 F00C          	movff	3992,RtccWriteDate@tempHourWDay	;volatile
 11800                           
 11801                           ; BSR set to: 15
 11802  0020C8  CF99 F00D          	movff	3993,RtccWriteDate@tempHourWDay+1	;volatile
 11803                           
 11804                           ; BSR set to: 15
 11805  0020CC  C001  FFD9         	movff	RtccWriteDate@pDt,fsr2l
 11806  0020D0  C002  FFDA         	movff	RtccWriteDate@pDt+1,fsr2h
 11807  0020D4  50DF               	movf	indf2,w,c
 11808  0020D6  6E0D               	movwf	RtccWriteDate@tempHourWDay+1,c
 11809                           
 11810                           ; BSR set to: 15
 11811  0020D8  0EFC               	movlw	252
 11812  0020DA  010F               	movlb	15	; () banked
 11813  0020DC  173F               	andwf	63,f,b	;volatile
 11814                           
 11815                           ; BSR set to: 15
 11816  0020DE  0E03               	movlw	3
 11817  0020E0  010F               	movlb	15	; () banked
 11818  0020E2  133F               	iorwf	63,f,b	;volatile
 11819                           
 11820                           ; BSR set to: 15
 11821  0020E4  C007  FF98         	movff	RtccWriteDate@tempYear,3992	;volatile
 11822                           
 11823                           ; BSR set to: 15
 11824  0020E8  C008  FF99         	movff	RtccWriteDate@tempYear+1,3993	;volatile
 11825                           
 11826                           ; BSR set to: 15
 11827  0020EC  C00A  FF98         	movff	RtccWriteDate@tempDayMonth,3992	;volatile
 11828                           
 11829                           ; BSR set to: 15
 11830  0020F0  C00B  FF99         	movff	RtccWriteDate@tempDayMonth+1,3993	;volatile
 11831                           
 11832                           ; BSR set to: 15
 11833  0020F4  C00C  FF98         	movff	RtccWriteDate@tempHourWDay,3992	;volatile
 11834                           
 11835                           ; BSR set to: 15
 11836  0020F8  C00D  FF99         	movff	RtccWriteDate@tempHourWDay+1,3993	;volatile
 11837                           
 11838                           ; BSR set to: 15
 11839  0020FC  5005               	movf	RtccWriteDate@wasOn,w,c
 11840  0020FE  B4D8               	btfsc	status,2,c
 11841  002100  D00D               	goto	l4406
 11842                           
 11843                           ; BSR set to: 15
 11844  002102  010F               	movlb	15	; () banked
 11845  002104  8F3F               	bsf	63,7,b	;volatile
 11846                           
 11847                           ; BSR set to: 15
 11848  002106  5006               	movf	RtccWriteDate@wasAlrm,w,c
 11849  002108  B4D8               	btfsc	status,2,c
 11850  00210A  D002               	goto	l4402
 11851                           
 11852                           ; BSR set to: 15
 11853  00210C  8E91               	bsf	3985,7,c	;volatile
 11854  00210E  D000               	goto	l4402
 11855  002110                     l4402:
 11856                           
 11857                           ; BSR set to: 15
 11858  002110  5009               	movf	RtccWriteDate@wasWrEn,w,c
 11859  002112  B4D8               	btfsc	status,2,c
 11860  002114  D009               	goto	l4410
 11861                           
 11862                           ; BSR set to: 15
 11863  002116  ECA1  F01D         	call	_RtccWrOn	;wreg free
 11864  00211A  D006               	goto	l4410
 11865  00211C                     l4406:
 11866  00211C  5009               	movf	RtccWriteDate@wasWrEn,w,c
 11867  00211E  A4D8               	btfss	status,2,c
 11868  002120  D003               	goto	l4410
 11869  002122  010F               	movlb	15	; () banked
 11870  002124  9B3F               	bcf	63,5,b	;volatile
 11871                           
 11872                           ; BSR set to: 15
 11873  002126  D000               	goto	l4410
 11874  002128                     l4410:
 11875  002128  5003               	movf	RtccWriteDate@di,w,c
 11876  00212A  B4D8               	btfsc	status,2,c
 11877  00212C  0012               	return	
 11878  00212E  9CF2               	bcf	intcon,6,c	;volatile
 11879  002130  0012               	return	
 11880                           
 11881                           ;	Return value of _RtccWriteDate is never used
 11882  002132  0012               	return		;funcret
 11883  002134                     __end_of_RtccWriteDate:
 11884                           	opt stack 0
 11885                           tblptru	equ	0xFF8
 11886                           tblptrh	equ	0xFF7
 11887                           tblptrl	equ	0xFF6
 11888                           tablat	equ	0xFF5
 11889                           prodh	equ	0xFF4
 11890                           prodl	equ	0xFF3
 11891                           intcon	equ	0xFF2
 11892                           indf0	equ	0xFEF
 11893                           postinc0	equ	0xFEE
 11894                           fsr0h	equ	0xFEA
 11895                           fsr0l	equ	0xFE9
 11896                           wreg	equ	0xFE8
 11897                           postdec1	equ	0xFE5
 11898                           fsr1l	equ	0xFE1
 11899                           indf2	equ	0xFDF
 11900                           postinc2	equ	0xFDE
 11901                           postdec2	equ	0xFDD
 11902                           fsr2h	equ	0xFDA
 11903                           fsr2l	equ	0xFD9
 11904                           status	equ	0xFD8
 11905                           
 11906 ;; *************** function _RtccWrOn *****************
 11907 ;; Defined at:
 11908 ;;		line 21 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWrOn.c"
 11909 ;; Parameters:    Size  Location     Type
 11910 ;;		None
 11911 ;; Auto vars:     Size  Location     Type
 11912 ;;  data            2    0        unsigned int 
 11913 ;; Return value:  Size  Location     Type
 11914 ;;		None               void
 11915 ;; Registers used:
 11916 ;;		wreg, status,2
 11917 ;; Tracked objects:
 11918 ;;		On entry : 0/0
 11919 ;;		On exit  : 0/0
 11920 ;;		Unchanged: 0/0
 11921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11925 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11926 ;;Total ram usage:        0 bytes
 11927 ;; Hardware stack levels used:    1
 11928 ;; This function calls:
 11929 ;;		Nothing
 11930 ;; This function is called by:
 11931 ;;		_Write_RTC
 11932 ;;		_RtccWriteDate
 11933 ;;		_RtccWriteTime
 11934 ;; This function uses a non-reentrant model
 11935 ;;
 11936                           
 11937                           	psect	text72
 11938  003B42                     __ptext72:
 11939                           	opt stack 0
 11940  003B42                     _RtccWrOn:
 11941                           	opt stack 25
 11942                           
 11943                           ;incstack = 0
 11944  003B42  9CF2               	bcf	intcon,6,c	;volatile
 11945  003B44  0E55               	movlw	85
 11946  003B46  6EA7               	movwf	4007,c	;volatile
 11947  003B48  0EAA               	movlw	170
 11948  003B4A  6EA7               	movwf	4007,c	;volatile
 11949  003B4C  010F               	movlb	15	; () banked
 11950  003B4E  8B3F               	bsf	63,5,b	;volatile
 11951                           
 11952                           ; BSR set to: 15
 11953  003B50  8CF2               	bsf	intcon,6,c	;volatile
 11954                           
 11955                           ; BSR set to: 15
 11956  003B52  0012               	return		;funcret
 11957  003B54                     __end_of_RtccWrOn:
 11958                           	opt stack 0
 11959                           tblptru	equ	0xFF8
 11960                           tblptrh	equ	0xFF7
 11961                           tblptrl	equ	0xFF6
 11962                           tablat	equ	0xFF5
 11963                           prodh	equ	0xFF4
 11964                           prodl	equ	0xFF3
 11965                           intcon	equ	0xFF2
 11966                           indf0	equ	0xFEF
 11967                           postinc0	equ	0xFEE
 11968                           fsr0h	equ	0xFEA
 11969                           fsr0l	equ	0xFE9
 11970                           wreg	equ	0xFE8
 11971                           postdec1	equ	0xFE5
 11972                           fsr1l	equ	0xFE1
 11973                           indf2	equ	0xFDF
 11974                           postinc2	equ	0xFDE
 11975                           postdec2	equ	0xFDD
 11976                           fsr2h	equ	0xFDA
 11977                           fsr2l	equ	0xFD9
 11978                           status	equ	0xFD8
 11979                           tblptru	equ	0xFF8
 11980                           tblptrh	equ	0xFF7
 11981                           tblptrl	equ	0xFF6
 11982                           tablat	equ	0xFF5
 11983                           prodh	equ	0xFF4
 11984                           prodl	equ	0xFF3
 11985                           intcon	equ	0xFF2
 11986                           indf0	equ	0xFEF
 11987                           postinc0	equ	0xFEE
 11988                           fsr0h	equ	0xFEA
 11989                           fsr0l	equ	0xFE9
 11990                           wreg	equ	0xFE8
 11991                           postdec1	equ	0xFE5
 11992                           fsr1l	equ	0xFE1
 11993                           indf2	equ	0xFDF
 11994                           postinc2	equ	0xFDE
 11995                           postdec2	equ	0xFDD
 11996                           fsr2h	equ	0xFDA
 11997                           fsr2l	equ	0xFD9
 11998                           status	equ	0xFD8
 11999                           
 12000                           	psect	rparam
 12001  0000                     tblptru	equ	0xFF8
 12002                           tblptrh	equ	0xFF7
 12003                           tblptrl	equ	0xFF6
 12004                           tablat	equ	0xFF5
 12005                           prodh	equ	0xFF4
 12006                           prodl	equ	0xFF3
 12007                           intcon	equ	0xFF2
 12008                           indf0	equ	0xFEF
 12009                           postinc0	equ	0xFEE
 12010                           fsr0h	equ	0xFEA
 12011                           fsr0l	equ	0xFE9
 12012                           wreg	equ	0xFE8
 12013                           postdec1	equ	0xFE5
 12014                           fsr1l	equ	0xFE1
 12015                           indf2	equ	0xFDF
 12016                           postinc2	equ	0xFDE
 12017                           postdec2	equ	0xFDD
 12018                           fsr2h	equ	0xFDA
 12019                           fsr2l	equ	0xFD9
 12020                           status	equ	0xFD8


Data Sizes:
    Strings     154
    Constant    71
    Data        19
    BSS         84
    Persistent  13
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160     26     143
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    RtccWriteTime@pTm	PTR const struct . size(2) Largest target is 4
		 -> RtccTime(BANK0[4]), 

    RtccWriteDate@pDt	PTR const struct . size(2) Largest target is 4
		 -> RtccDate(BANK0[4]), 

    RtccReadTime@pTm	PTR struct . size(2) Largest target is 4
		 -> RtccTime(BANK0[4]), 

    RtccReadDate@pDt	PTR struct . size(2) Largest target is 4
		 -> RtccDate(BANK0[4]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_30(CODE[10]), STR_28(CODE[10]), STR_26(CODE[5]), STR_12(CODE[10]), 
		 -> STR_11(CODE[15]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), 
		 -> STR_7(CODE[5]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), 
		 -> STR_3(CODE[5]), STR_2(CODE[5]), STR_1(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> buffer2(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    obtain_pass@digit	PTR short  size(2) Largest target is 2
		 -> input_password@digit(BANK0[2]), 

    next_code@input	PTR unsigned char  size(2) Largest target is 1
		 -> obtain_pass@input(COMRAM[1]), 

    next_code@digit	PTR short  size(2) Largest target is 2
		 -> input_password@digit(BANK0[2]), 

    evalueChanceOfRaw@y	PTR unsigned char  size(2) Largest target is 1
		 -> configurar_reloj@y(COMRAM[1]), 

    evalueChanceOfRaw@x	PTR unsigned char  size(2) Largest target is 1
		 -> configurar_reloj@x(COMRAM[1]), 

    lcd_putrs@ptr	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_29(CODE[2]), STR_27(CODE[6]), STR_25(CODE[9]), STR_24(CODE[14]), 
		 -> STR_23(CODE[14]), STR_22(CODE[16]), STR_21(CODE[15]), STR_20(CODE[8]), 
		 -> STR_19(CODE[13]), STR_18(CODE[8]), STR_17(CODE[4]), STR_16(CODE[3]), 
		 -> STR_15(CODE[11]), STR_14(CODE[11]), STR_13(CODE[10]), buffer2(BANK0[20]), 


Critical Paths under _main in COMRAM

    _set_vision->_twinkle
    _input_password->_obtain_pass
    _set_desactive_vision->_lcd_putrs
    _review_code->_checkPass
    _obtain_pass->_pow
    _next_code->_lcd_gotoxy
    _select_menu->_ver_opcion_cambio
    _ver_opcion_cambio->_input_new_pass
    _ver_opcion_cambio->_input_old_pass
    _show_success->__delay_s
    _show_error->__delay_s
    _input_old_pass->_pow
    _input_new_pass->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftadd
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___awtoft
    ___ftmul->___lbtoft
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    __delay_s->___awdiv
    ___lbtoft->___ftpack
    _ver_info->_read_keyboard
    _clear->_lcd_comand
    _configurar_reloj->_read_keyboard
    _write_Date->_sprintf
    _lcd_setcursor_vb->_lcd_send_byte
    _read_keyboard->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcd_putrs->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _Read_RTC->_RtccReadDate
    _Read_RTC->_RtccReadTime
    _caratula->_lcd_comand
    _lcd_init->_lcd_send_byte
    _lcd_comand->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _Write_RTC->_RtccWriteDate

Critical Paths under _main in BANK0

    _set_vision->_twinkle
    _twinkle->_input_password
    _input_password->_obtain_pass
    _obtain_pass->_pow
    _ver_opcion_cambio->_input_old_pass
    _input_old_pass->_pow
    _input_new_pass->_pow

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  504576
                                             25 BANK0      1     1      0
                           _Read_RTC
                              _Setup
                           _caratula
                        _select_menu
                         _set_vision
 ---------------------------------------------------------------------------------
 (1) _set_vision                                           0     0      0  229001
                              _clear
                     _input_password
                         _lcd_gotoxy
                          _lcd_putrs
                            _twinkle
                         _write_Date
 ---------------------------------------------------------------------------------
 (2) _twinkle                                              4     4      0  113493
                                             94 COMRAM     1     1      0
                                             22 BANK0      3     3      0
                           __delay_s
                     _clear_keyboard
                     _input_password
                         _lcd_gotoxy
                          _lcd_putrs
                      _read_keyboard
 ---------------------------------------------------------------------------------
 (3) _input_password                                       5     5      0   96176
                                             17 BANK0      5     5      0
                      _is_not_letter
                      _not_fill_pass
                        _obtain_pass
                      _read_keyboard
                        _review_code
               _set_desactive_vision
 ---------------------------------------------------------------------------------
 (4) _set_desactive_vision                                 2     0      2    7973
                                             10 COMRAM     2     0      2
                         _lcd_gotoxy
                          _lcd_putrs
                   _lcd_setcursor_vb
 ---------------------------------------------------------------------------------
 (4) _review_code                                          4     0      4     322
                                              2 COMRAM     4     0      4
                       _change_state
                          _checkPass
 ---------------------------------------------------------------------------------
 (5) _change_state                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _obtain_pass                                         13     8      5   78735
                                             87 COMRAM     7     2      5
                                             11 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                           ___lbtoft
                          _next_code
                                _pow
 ---------------------------------------------------------------------------------
 (5) _next_code                                            6     2      4    2381
                                              7 COMRAM     6     2      4
                     _clear_keyboard
                         _lcd_gotoxy
 ---------------------------------------------------------------------------------
 (4) _is_not_letter                                        2     2      0     112
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _select_menu                                          0     0      0  270069
                   _configurar_reloj
                     _dispararSensor
                      _read_keyboard
                           _ver_info
                  _ver_opcion_cambio
 ---------------------------------------------------------------------------------
 (2) _ver_opcion_cambio                                    2     2      0  212813
                                             89 COMRAM     2     2      0
                         _changePass
                              _clear
                     _clear_keyboard
                     _input_new_pass
                     _input_old_pass
                         _lcd_gotoxy
                          _lcd_putrs
                      _read_keyboard
                         _show_error
                       _show_success
 ---------------------------------------------------------------------------------
 (3) _show_success                                         0     0      0    9259
                           __delay_s
                              _clear
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (3) _show_error                                           0     0      0    9259
                           __delay_s
                              _clear
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (3) _input_old_pass                                      13    13      0   89045
                                             87 COMRAM     2     2      0
                                             11 BANK0     11    11      0
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                           ___lbtoft
                           __delay_s
                          _checkPass
                     _clear_keyboard
                         _lcd_gotoxy
                      _not_fill_pass
                                _pow
                      _read_keyboard
 ---------------------------------------------------------------------------------
 (5) _checkPass                                            2     0      2     150
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _input_new_pass                                      12    12      0   88873
                                             87 COMRAM     2     2      0
                                             11 BANK0     10    10      0
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                           ___lbtoft
                           __delay_s
                     _clear_keyboard
                         _lcd_gotoxy
                      _not_fill_pass
                                _pow
                      _read_keyboard
 ---------------------------------------------------------------------------------
 (5) _pow                                                 17    11      6   62408
                                             81 COMRAM     6     0      6
                                              0 BANK0     11    11      0
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (6) _log                                                  5     2      3   20443
                                             51 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _exp                                                  9     6      3   33640
                                             72 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (7) _ldexp                                                7     2      5     376
                                             51 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (7) _floor                                                8     5      3    8621
                                             64 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (7) _frexp                                                7     2      5     480
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (8) ___fttol                                             15    11      4     636
                                             39 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftge                                               9     3      6     648
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (8) ___altoft                                            10     6      4    2389
                                             54 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (7) _eval_poly                                           12     5      7    8999
                                             39 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (8) ___ftmul                                             15     9      6    3741
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftsub                                              6     0      6    4450
                                             39 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (8) ___ftadd                                             12     6      6    4153
                                             27 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     237
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             15     9      6    2697
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             4     1      3    2790
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___lltoft                                             9     5      4    2320
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) _not_fill_pass                                        2     0      2     214
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (6) _clear_keyboard                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) __delay_s                                             7     5      2    1650
                                              8 COMRAM     7     5      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) ___lbtoft                                             4     1      3    2209
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftpack                                             8     3      5    2187
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) _changePass                                           2     0      2      86
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ver_info                                             1     1      0   20103
                                             36 COMRAM     1     1      0
                              _clear
                         _lcd_gotoxy
                          _lcd_putrs
                      _read_keyboard
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _clear                                                1     1      0     646
                                              5 COMRAM     1     1      0
                         _lcd_comand
 ---------------------------------------------------------------------------------
 (2) _dispararSensor                                       2     0      2    1182
                                             18 COMRAM     2     0      2
                           _Read_RTC
 ---------------------------------------------------------------------------------
 (2) _configurar_reloj                                     4     4      0   27337
                                             36 COMRAM     4     4      0
                           _Read_RTC
                  _evalueChanceOfRaw
                         _lcd_gotoxy
                   _lcd_setcursor_vb
                      _read_keyboard
                           _setClock
                         _write_Date
 ---------------------------------------------------------------------------------
 (2) _write_Date                                           0     0      0   11723
                         _lcd_gotoxy
                          _lcd_putrs
                   _lcd_setcursor_vb
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _lcd_setcursor_vb                                     2     1      1     924
                                              4 COMRAM     2     1      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (3) _setClock                                             2     2      0    2427
                                             13 COMRAM     2     2      0
                          _Write_RTC
 ---------------------------------------------------------------------------------
 (3) _read_keyboard                                        1     1      0    8634
                                             35 COMRAM     1     1      0
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             32    22     10    3836
                                             12 COMRAM    23    13     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     543
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcd_putrs                                            2     0      2    4798
                                              8 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (4) _lcd_putc                                             1     1      0    2833
                                              7 COMRAM     1     1      0
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (5) _lcd_gotoxy                                           3     2      1    2165
                                              4 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (3) _evalueChanceOfRaw                                    5     1      4     282
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) _Read_RTC                                             0     0      0     968
                       _RtccReadDate
                       _RtccReadTime
 ---------------------------------------------------------------------------------
 (4) _RtccReadTime                                        18    16      2     437
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (4) _RtccReadDate                                        18    16      2     531
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (1) _caratula                                             0     0      0     646
                         _lcd_comand
 ---------------------------------------------------------------------------------
 (1) _Setup                                                0     0      0    3892
                          _Write_RTC
                         _lcd_comand
                           _lcd_init
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             1     1      0     841
                                              4 COMRAM     1     1      0
                        _Delay1KTCYx
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _lcd_comand                                           1     1      0     646
                                              4 COMRAM     1     1      0
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (4) _lcd_send_byte                                        2     1      1     624
                                              2 COMRAM     2     1      1
                       _Delay100TCYx
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (5) _lcd_send_nibble                                      2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _Delay100TCYx                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Write_RTC                                            0     0      0    2405
                           _RtccWrOn
                      _RtccWriteDate
                      _RtccWriteTime
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1196
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (5) _RtccWriteTime                                       11     8      3     537
                                              0 COMRAM    11     8      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (5) _RtccWriteDate                                       13    10      3     672
                                              0 COMRAM    13    10      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (6) _RtccWrOn                                             2     2      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Read_RTC
     _RtccReadDate
     _RtccReadTime
   _Setup
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_init
       _Delay1KTCYx
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
       _lcd_send_nibble
   _caratula
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
   _select_menu
     _configurar_reloj
       _Read_RTC
         _RtccReadDate
         _RtccReadTime
       _evalueChanceOfRaw
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_setcursor_vb
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _read_keyboard
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _setClock
         _Write_RTC
           _RtccWrOn
           _RtccWriteDate
             _RtccWrOn
           _RtccWriteTime
             _RtccWrOn
           ___awdiv
       _write_Date
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _lcd_setcursor_vb
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _dispararSensor
       _Read_RTC
         _RtccReadDate
         _RtccReadTime
     _read_keyboard
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _ver_info
       _clear
         _lcd_comand
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _read_keyboard
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _ver_opcion_cambio
       _changePass
       _clear
         _lcd_comand
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _clear_keyboard
       _input_new_pass
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___lbtoft
           ___ftpack
         __delay_s
           ___awdiv
         _clear_keyboard
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _not_fill_pass
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
         _read_keyboard
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
       _input_old_pass
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___lbtoft
           ___ftpack
         __delay_s
           ___awdiv
         _checkPass
         _clear_keyboard
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _not_fill_pass
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
         _read_keyboard
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _read_keyboard
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _show_error
         __delay_s
           ___awdiv
         _clear
           _lcd_comand
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
       _show_success
         __delay_s
           ___awdiv
         _clear
           _lcd_comand
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
   _set_vision
     _clear
       _lcd_comand
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _input_password
       _is_not_letter
       _not_fill_pass
       _obtain_pass
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___lbtoft
           ___ftpack
         _next_code
           _clear_keyboard
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
       _read_keyboard
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _review_code
         _change_state
         _checkPass
       _set_desactive_vision
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _lcd_setcursor_vb
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _twinkle
       __delay_s
         ___awdiv
       _clear_keyboard
       _input_password
         _is_not_letter
         _not_fill_pass
         _obtain_pass
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___lbtoft
             ___ftpack
           _next_code
             _clear_keyboard
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lbtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
         _read_keyboard
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
         _review_code
           _change_state
           _checkPass
         _set_desactive_vision
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _lcd_setcursor_vb
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _read_keyboard
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _write_Date
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _lcd_setcursor_vb
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       1       4        0.6%
BANK0               A0     1A      8F       5       89.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      EE       6        0.0%
DATA                 0      0      EE       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Sep 29 22:36:00 2016

                 ___altoft@exp 003F                              _a 007C                              _b 007E  
                            _c 0080                              _i 0088                              _j 008A  
                            _k 008C                 _input_old_pass 1D3E                 _input_new_pass 1BCA  
                ___altoft@sign 0040                    _state_alarm 00E0                 ?_lcd_send_byte 0003  
                 ___awdiv@sign 0006            ___wmul@multiplicand 0003                 _input_password 30A8  
                  lcd_comand@d 0005                   __CFG_CP0$OFF 000000                   ___ftadd@exp1 0027  
                 ___ftadd@exp2 0026                   ___ftadd@sign 0025                            l300 1054  
                          l311 10DC                            l303 108E                            l320 1144  
                          l312 10D8                            l304 108A                            l154 3902  
                          l155 3904                            l331 11CC                            l323 1158  
                          l315 1112                            l307 109E                            l340 120E  
                          l332 11C8                            l324 1154                            l316 110E  
                          l308 109A                            l351 1270                            l343 122A  
                          l335 1202                            l327 1196                            l319 1148  
                          l352 126C                            l344 1226                            l336 11FE  
                          l328 1192                            l347 1260                            l339 1212  
                          l356 127C                            l348 125C                            l620 35EA  
                          l295 1022                            l296 101E                            l299 1058  
                          l627 3972                            l666 2B94                            _dia 00D0  
              ?_dispararSensor 0013                            _key 00DE                            _mes 00D6  
                          _exp 1500                            _log 2134                            _pow 1A48  
                          wreg 000FE8           __end_of_change_state 3948                RtccReadDate@pDt 0001  
                  lcd_gotoxy@x 0006                    lcd_gotoxy@y 0005                   ___ftdiv@cntr 0012  
                 ___ftdiv@sign 0017                           l1008 146E                           l1501 1834  
                         l4000 3494                           l1512 2706                           l4002 34A2  
                         l4014 3562                           l1534 3A5C                           l3056 3B20  
                         l4016 356C                           l4200 1474                           l1448 2CEC  
                         l1481 1756                           l1713 15B6                           l4122 362C  
                         l4026 3592                           l4018 3574                           l4042 36D6  
                         l4034 36AE                           l4210 14F0                           l1714 16DA  
                         l5010 2C20                           l1652 359E                           l4036 36B8  
                         l4140 12EE                           l4132 12C0                           l1492 1818  
                         l1724 28EE                           l4108 16B0                           l4052 2150  
                         l1477 172C                           l4302 22EC                           l4118 3602  
                         l4038 36C0                           l1662 36E2                           l4206 14C8  
                         l4134 12CE                           l4126 12A6                           l5006 2BF6  
                         l4152 1370                           l4144 130C                           l4208 14D4  
                         l4080 1550                           l5040 2D7A                           l4224 391A  
                         l4232 3934                           l5016 2C48                           l4410 2128  
                         l4402 2110                           l4330 233C                           l4138 12D8  
                         l4074 1518                           l4058 2172                           l5130 2DDA  
                         l4226 3922                           l4180 140C                           l4172 13E4  
                         l4164 13B4                           l4156 1376                           l5052 2DAE  
                         l5044 2D8E                           l5140 2E10                           l5132 2DE0  
                         l4228 392A                           l4406 211C                           l4334 2348  
                         l4422 2F06                           l3534 3B32                           l4182 1416  
                         l4158 1398                           l5062 2904                           l3550 2C9C  
                         l3542 2C60                           l3622 173A                           l3710 24E6  
                         l3606 32EE                           l4086 1588                           l1694 1BBC  
                         l4262 1B0C                           l4254 1AA8                           l5038 2D72  
                         l5142 2E1E                           l5134 2DE6                           l4360 208A  
                         l4192 1444                           l4176 13E8                           l4168 13C0  
                         l3720 2514                           l3608 32FC                           l4248 1A90  
                         l5056 2DBC                           l5144 2E2C                           l5128 2DD4  
                         l5136 2DFE                           l5160 3512                           l1689 1A82  
                         l4370 20BA                           l4354 2050                           l4338 2354  
                         l4434 2F2E                           l4450 2F6A                           l4194 144C  
                         l4186 1422                           l5082 29CA                           l3570 2D06  
                         l3554 2CB4                           l3546 2C70                           l4602 35D6  
                         l3650 17BC                           l3634 1770                           l3714 24F8  
                         l4266 1B34                           l5146 2E3A                           l5170 3538  
                         l4364 209E                           l4292 22BC                           l4436 2F38  
                         l4428 2F18                           l3820 3A76                           l3564 2CF4  
                         l3556 2CD4                           l3548 2C7C                           l3652 17C8  
                         l3644 1798                           l3628 1764                           l3724 2526  
                         l3740 2EBE                           l3804 2FAE                           l5148 2E52  
                         l5156 3502                           l4286 2292                           l4454 2F7A  
                         l4446 2F5E                           l4438 2F40                           l3822 3A7C  
                         l3558 2CE0                           l3670 1852                           l3662 1800  
                         l3654 17D4                           l3718 250E                           l3910 285A  
                         l5166 3526                           l4296 22D0                           l3832 2678  
                         l3680 1884                           l3664 180C                           l3656 17DC  
                         l3728 253C                           l3736 2E8C                           l5176 38BE  
                         l3690 248A                           l3922 2AEE                           l3746 2EEA  
                         l3914 2874                           l3906 284C                           l4642 2644  
                         l3924 2B6C                           l3756 238C                           l3940 2A3A  
                         l3932 29F2                           l4654 33BE                           l3838 26A0  
                         l3774 23F4                           l4822 3110                           l4680 3136  
                         l3696 24B2                           l3792 244E                           l3784 241E  
                         l3952 2A62                           l4912 1D18                           l4904 1CE6  
                         l4832 1D58                           l4816 30D2                           l4930 327A  
                         l3970 3714                           l4586 1284                           l3858 26E0  
                         l3786 242C                           l3778 2404                           l4906 1CF0  
                         l3964 36F0                           l4780 2798                           l4772 2768  
                         l3868 2714                           l3876 3796                           l3788 2436  
                         l3956 2A72                           l4852 1E5A                           ?_exp 0049  
                         ?_log 0034                           l4926 3272                           l4758 3454  
                         l3966 36FC                           l3974 3720                           l4766 2740  
                         l3958 2A9E                           l4918 1D38                           l4854 1E64  
                         l4944 329E                           l4936 328A                           l3968 3708  
                         l3888 3854                           l3994 3AA6                           l4786 27C0  
                         l4778 2790                           l4794 27E8                           l4970 3076  
                         l4954 3026                           l4858 1E84                           l4796 280A  
                         l4980 309E                           l4884 1BE4                           l4976 3086  
                         ?_pow 0052                           STR_1 0FD6                           STR_2 0FD6  
                         STR_3 0FD6                           STR_4 0FD6                           STR_5 0FD6  
                         STR_6 0FD6                           STR_7 0FD6                           STR_8 0FD6  
                         STR_9 0FD6                           u3050 2FD6                           u3210 2A12  
                         u2510 3386                           u3071 2660                           u3400 1592  
                         u2530 33A2                           u3058 2FD8                           u3170 2866  
                         u3218 2A14                           u3091 2688                           u2508 336E  
                         u2470 3354                           u5007 3B22                           u2528 3388  
                         u3440 3622                           u5017 3B34                           u2490 336C  
                         u3450 364C                           u3610 3AC6                           u2548 33A4  
                         u4500 27DC                           u2661 16F8                           u3390 1590  
                         u3447 3618                           u2671 170C                           u2488 3356  
                         u4360 3AF0                           u3457 3642                           u4470 275C  
                         u3670 1AF4                           u2871 2472                           u4480 2784  
                         u2961 2370                           u4490 27B4                           u4570 1E92  
                         u2891 249A                           u2980 23AA                           u4580 1E94  
                         u2985 23A2                           u4937 38D6                           u4947 35DC  
                         u4957 3AD8                           u4967 304E                           u4977 3092  
                         u4987 2814                           u4997 128A               ?_lcd_send_nibble 0001  
                         _anio 00CE                           _flag 0770                           _main 38B4  
                         _hora 00D4                   ___ftpack@arg 0001                           _menu 00DF  
                 ___ftpack@exp 0004                           fsr0h 000FEA                           indf0 000FEF  
                         fsr0l 000FE9                           fsr2h 000FDA                           fsr1l 000FE1  
                         indf2 000FDF                           fsr2l 000FD9                           exp@x 0049  
                         log@x 0034                  __CFG_T1DIG$ON 000000                           pow@x 0052  
                         pow@y 0055                           prodh 000FF4                           prodl 000FF3  
                         start 0000                  __CFG_IESO$OFF 000000               RtccReadDate@rTD0 000B  
             RtccReadDate@rTD1 0003                  ver_info@input 0025                   ___ftmul@cntr 001A  
       __end_of_input_old_pass 1EA8         __end_of_input_new_pass 1D3E                   ___param_bank 000010  
                 ___ftmul@sign 001B                RtccReadTime@pTm 0001         __end_of_input_password 3136  
              obtain_pass@pass 0058                   ___fttol@exp1 0036                          ??_exp 004C  
                        ??_log 0037                   ___fttol@lval 0032                          ??_pow 0058  
                  _Delay1KTCYx 3B1E                  __CFG_PLLDIV$1 000000                          ?_main 0001  
              __end_of___awdiv 2F86                __end_of___ftadd 18AC                          STR_10 0FD6  
                        STR_11 0F67                          STR_20 0F50                          STR_12 0FB5  
                        STR_13 0F7A                          STR_21 0F58                          STR_30 0FB5  
                        STR_14 0FAA                          STR_22 0F48                          STR_15 0F9F  
                        STR_23 0F76                          STR_16 0FDF                          STR_24 0F84  
                        STR_17 0FDB                          STR_25 0FBF                          STR_26 0F71  
                        STR_18 0FC8                          STR_27 0FD0                          STR_19 0F92  
                        STR_28 0F6C                          STR_29 0FA8          __size_of_Delay100TCYx 0012  
              __end_of___ftdiv 273C                __end_of___ftneg 3A6A                __end_of___ftmul 2564  
              ___awdiv@divisor 0003                __end_of___ftsub 37C2                __end_of___fttol 2462  
              __end_of___lwdiv 35A8                __end_of___lwmod 36EC                ___awdiv@counter 0005  
                        _TRISA 000F92                          _TRISB 000F93                          _TRISC 000F94  
           input_password@pass 00C5                   ___lltoft@exp 0011                 __CFG_FCMEN$OFF 000000  
   __size_of_ver_opcion_cambio 00AC                          _Setup 3738                  ___awtoft@sign 000C  
                        _clear 3ACC                __end_of_dpowers 0F0B                          _floor 281E  
                        _ldexp 29DA                          _frexp 2F86                          _mes_d 00E8  
                        _errno 0084                          _mes_u 00E9                __end_of_isdigit 3AB0  
                ___ftpack@sign 0005                   ?_obtain_pass 0058                          tablat 000FF5  
                        pow@yi 00BB                   lcd_putrs@ptr 0009                          status 000FD8  
              __end_of_sprintf 1500              ?_configurar_reloj 0001                __end_of_twinkle 2C50  
                  exp@exponent 004F             ??_configurar_reloj 0025        __CFG_DSWDTOSC$INTOSCREF 000000  
                  ldexp@newexp 0037        __size_of_clear_keyboard 0008                __initialization 387A  
              ?_input_old_pass 0001                ?_input_new_pass 0001                    log@exponent 0037  
                 _Delay100TCYx 3B30                   __end_of_main 38E6                ??_lcd_send_byte 0004  
             RtccReadTime@rTD0 000B               RtccReadTime@rTD1 0003                ?_input_password 0001  
             __end_of_Read_RTC 1FEE               obtain_pass@digit 005B               obtain_pass@input 005A  
         _set_desactive_vision 39A8                         ??_main 00CD                  ___fttol@sign1 0031  
                __activetblptr 000002             is_not_letter@input 0002               __end_of_RtccWrOn 3B54  
                       ?_Setup 0001                         ?_clear 0001                         _ADCON0 000FC2  
                       _ADCON1 000FC1                         ?_floor 0041                         ?_ldexp 0034  
                       ?_frexp 0001               __end_of___altoft 3348                   ?_select_menu 0001  
                       _EECON2 000FA7                         _ANCON0 000F48                         _ANCON1 000F49  
             ___awdiv@dividend 0001               __end_of___awtoft 387A               __end_of___ftpack 2D16  
             __end_of___lbtoft 3A22               __end_of__delay_s 3600               __end_of___lltoft 34EE  
               __CFG_WDTEN$OFF 000000               RtccWriteDate@pDt 0001                         _RTCCFG 000F3F  
               __CFG_WPCFG$OFF 000000            input_password@digit 00C8            input_password@input 00C7  
             __end_of_caratula 3B7C                 __CFG_WPDIS$OFF 000000                 __CFG_XINST$OFF 000000  
             __end_of_lcd_init 32CC               __end_of_lcd_putc 3738                         ___ftge 2E5A  
            ?_lcd_setcursor_vb 0005                         ___wmul 39D4                      ??___awdiv 0005  
                    ??___ftadd 0022                 __CFG_STVREN$ON 000000                      ??___ftdiv 000F  
                    ??___ftneg 0004                         _diasem 00D2                      ??___ftmul 0013  
                       _anio_d 00E1                      ??___ftsub 002E                      ??___fttol 002C  
                       _anio_u 00E2                      ??___lwdiv 0005                      ??___lwmod 000C  
                 ?_review_code 0003             ??_lcd_setcursor_vb 0006                         _hora_d 00E6  
                       _hora_u 00E7                _sensorDisparado 0097                         clear_0 3884  
             ___awdiv@quotient 0007                         _minuto 00D8          ?_set_desactive_vision 000B  
        __size_of_change_state 0030          __end_of_RtccWriteDate 2134               __end_of_setClock 281E  
        __end_of_RtccWriteTime 2360                  checkPass@pass 0001                         floor@i 0044  
                       floor@x 0041          ___ftmul@f3_as_product 0017               RtccWriteTime@pTm 0001  
                    ??_isdigit 0001                   __mediumconst 0000               __end_of_ver_info 29DA  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
       __size_of_is_not_letter 0030                      ??_sprintf 0017                      ??_twinkle 005F  
       __size_of_read_keyboard 02B8          __end_of_not_fill_pass 3AF6               __end_ofexp@coeff 0F2D  
             __end_oflog@coeff 0F48                     __accesstop 0060        __end_of__initialization 38AA  
                   ___altoft@c 0037                     ___ftadd@f1 001C                     ___ftadd@f2 001F  
           __size_of_Write_RTC 019C                     ___ftge@ff1 0001                     ___ftge@ff2 0004  
                 eval_poly@res 0031                  ___rparam_used 000001                     ___ftdiv@f1 0009  
                   ___ftdiv@f2 000C                     ___ftdiv@f3 0013                     ___ftneg@f1 0001  
          _input_old_pass$3188 00BF            _input_old_pass$3189 00C2                     ___awtoft@c 0009  
                   ___lbtoft@c 000C                   _change_state 3918                     ___ftmul@f1 000D  
                   ___ftmul@f2 0010                     ___ftsub@f1 0028                     ___ftsub@f2 002B  
                   ___fttol@f1 0028                 __pcstackCOMRAM 0001                  __end_of_Setup 377E  
                 __pidataBANK0 3B0A             __size_of_checkPass 001C                  __end_of_clear 3AE2  
                   ___lltoft@c 0009                  __end_of_floor 28FC                  __end_of_ldexp 2AAE  
                __end_of_frexp 3018               ??_dispararSensor 0015              _evalueChanceOfRaw 342C  
          _input_new_pass$3190 00BF            _input_new_pass$1567 00C5            _input_new_pass$3191 00C2  
              __CFG_DSWDTPS$G2 000000             ?_evalueChanceOfRaw 0001                     _diaDisparo 0082  
              review_code@pass 0005                __CFG_OSC$INTOSC 000000                        ??_Setup 000E  
          ??_evalueChanceOfRaw 0005              lcd_gotoxy@address 0007                        ??_clear 0006  
           __size_of_lcd_putrs 0054                        ??_floor 0044                        ??_ldexp 0039  
                      ??_frexp 0006                   sprintf@width 0021                     __pbssBANK0 0060  
                   _changePass 3B62             __size_of_eval_poly 00D4                      ?_Read_RTC 0001  
         __size_of_obtain_pass 00EC                     _dia_semana 00E3      RtccWriteTime@tempHourWDay 000A  
               _clear_keyboard 3B6C                      ?_RtccWrOn 0001                 lcd_send_byte@n 0003  
                _is_not_letter 3948                        ?___ftge 0001      __end_of_evalueChanceOfRaw 348E  
                      ?___wmul 0001                  ?_RtccReadDate 0001             __size_of_next_code 004C  
       ??_set_desactive_vision 000D                  ?_RtccReadTime 0001                  _read_keyboard 0FE4  
                 ?_Delay1KTCYx 0001                      ?___altoft 0037                      ?___awtoft 0009  
                    ?___ftpack 0001                      ?___lbtoft 0009                      ?__delay_s 0009  
                    ?___lltoft 0009              __end_of_Write_RTC 1A48                 __delay_s@index 000E  
                   _lcd_comand 3B54                      ?_caratula 0001                     _lcd_gotoxy 3A6A  
                      _RTCVALH 000F99                        _RTCVALL 000F98                      ?_lcd_init 0001  
            __end_of_checkPass 3ACC                      ?_lcd_putc 0001                     ??_Read_RTC 0013  
         __size_of_select_menu 0098               ??_input_old_pass 0058         __end_of_clear_keyboard 3B74  
             ??_input_new_pass 0058                     _mesDisparo 008E               ??_input_password 005F  
                    ?_setClock 0001                     _minDisparo 0090         ver_opcion_cambio@input 005B  
                      __Hparam 0000                        __Lparam 0000                 ?_is_not_letter 0001  
     __size_of_lcd_send_nibble 0076                     ??_RtccWrOn 0001                 ??_RtccReadDate 0003  
                    ?_ver_info 0001                __size_of___ftge 0096                 ??_RtccReadTime 0003  
                      ___awdiv 2EF0                        ___ftadd 16E8              __end_of_lcd_putrs 3654  
                      ___ftdiv 2650                 ?_read_keyboard 0001                        ___ftneg 3A46  
              __size_of___wmul 0028                        ___ftmul 2462                        ___ftsub 377E  
                      ___fttol 2360                        ___lwdiv 354C                        ___lwmod 36A0  
                 __psmallconst 0F00                     ??___altoft 003B                    _RtccTimeVal 0078  
                      __pcinit 387A                        _fecha_d 00E4                        _fecha_u 00E5  
                   ??___awtoft 000C                     ??___ftpack 0006                     ??___lbtoft 000C  
            __end_of_eval_poly 2B82                        __ramtop 0F00      __size_of_configurar_reloj 0090  
                   ??__delay_s 000B                     ??___lltoft 000D                        __ptext0 38B4  
                      __ptext1 34EE                        __ptext2 2B82                        __ptext3 30A8  
                      __ptext4 39A8                        __ptext5 3A22                        __ptext6 3918  
                      __ptext7 2564                        __ptext8 3654                        __ptext9 3948  
         __size_of_review_code 0024                        _buffer2 0098                      _T1CONbits 000FCD  
                      _dpowers 0F01                   __size_of_exp 01E8                   __size_of_log 0120  
                      _isdigit 3A8E                   __size_of_pow 0182                     ??_caratula 0006  
                      _newpass 0092                        _segundo 0094                        _sprintf 129C  
                   ??_lcd_init 0005                     ??_lcd_putc 0008                        _twinkle 2B82  
         end_of_initialization 38AA              __end_of_next_code 36A0                        exp@sign 0051  
                  ?_changePass 0001           lcd_send_byte@address 0004                  __Lmediumconst 0000  
              ?_clear_keyboard 0001                     ??_setClock 000E                        pow@sign 00BA  
   __size_of_evalueChanceOfRaw 0062                   twinkle@input 00CA                        postdec1 000FE5  
                      postdec2 000FDD                     ??_ver_info 0025                        postinc0 000FEE  
                      postinc2 000FDE                     _set_vision 34EE          __end_of_lcd_send_byte 3918  
                    _PORTAbits 000F80                      _PORTCbits 000F82               __CFG_DSBOREN$OFF 000000  
                   _show_error 3800                    ?_lcd_comand 0001               __CFG_CPUDIV$OSC1 000000  
                ?_show_success 0001                      _TRISBbits 000F93                    ?_lcd_gotoxy 0005  
    __size_of_lcd_setcursor_vb 0014                _LCD_INIT_STRING 0F0B                    ___ftdiv@exp 0016  
             __CFG_IOL1WAY$OFF 000000      RtccWriteDate@tempDayMonth 000A                ??_is_not_letter 0001  
          __CFG_MSSP7B_EN$MSK7 000000                    ___ftmul@exp 0016                ??_read_keyboard 0024  
             Delay100TCYx@unit 0001                     _write_Date 31C4                 __end_of___ftge 2EF0  
                  __delay_s@it 000C                 __end_of___wmul 39FC      RtccWriteDate@tempHourWDay 000C  
    set_desactive_vision@digit 000B            __size_of_changePass 000A             not_fill_pass@digit 0001  
            ??_lcd_send_nibble 0001                  __pbitbssBANK0 0770           __size_of_Delay1KTCYx 0012  
             __CFG_DSWDTEN$OFF 000000                     floor@expon 0047                 changePass@pass 0001  
               ??_show_success 0010            start_initialization 387A                     eval_poly@d 002B  
                   eval_poly@n 002D                     eval_poly@x 0028                     ldexp@value 0034  
                  __end_of_exp 16E8                    __end_of_log 2254                    __end_of_pow 1BCA  
         __end_of_RtccReadDate 31C4           __end_of_RtccReadTime 342C               review_code@digit 0003  
                   frexp@value 0001           RtccWriteTime@wasAlrm 0006           RtccWriteTime@wasWrEn 0007  
       __size_of_RtccWriteDate 0146                RtccWriteDate@di 0003         __size_of_RtccWriteTime 010C  
            __size_of_Read_RTC 0146            __size_of_lcd_comand 000E                       ??___ftge 0007  
          __size_of_lcd_gotoxy 0024                       ??___wmul 0005                    ?_set_vision 0001  
                  __pdataBANK0 00CE              __size_of_RtccWrOn 0012                RtccWriteTime@di 0003  
             __CFG_LPT1OSC$OFF 000000               _configurar_reloj 3018         __size_of_not_fill_pass 0014  
                  ?_show_error 0001              __size_of___altoft 007C                    _ALRMCFGbits 000F91  
      __end_of_LCD_INIT_STRING 0F0F              __size_of___awtoft 003C              __size_of___ftpack 00C6  
            __size_of___lbtoft 0026          configurar_reloj@input 0026              __size_of__delay_s 0058  
            __size_of___lltoft 0060                  __pcstackBANK0 00B4                      _Write_RTC 18AC  
                 _isdigit$2795 0002              __size_of_caratula 0008                  ??_obtain_pass 005D  
              Delay1KTCYx@unit 0001              __size_of_lcd_init 0080                    sprintf@flag 001D  
            __size_of_lcd_putc 004C                    sprintf@prec 0020                      _checkPass 3AB0  
                    __pnvBANK0 00E1               ___lwdiv@dividend 0001                  ?_Delay100TCYx 0001  
            __size_of_setClock 00E2                       ?___awdiv 0001                       ?___ftadd 001C  
                     ?___ftdiv 0009                       ?___ftneg 0001                       ?___ftmul 000D  
                     ?___ftsub 0028                       ?___fttol 0028                       ?___lwdiv 0001  
                  ?_write_Date 0001                       ?___lwmod 0008              __size_of_ver_info 00DE  
      RtccWriteTime@tempMinSec 0008  __size_of_set_desactive_vision 002C                      _lcd_putrs 3600  
      lcd_setcursor_vb@visible 0006                  _RtccWriteDate 1FEE                    __smallconst 0F00  
                _RtccWriteTime 2254                       ?_isdigit 0001                      _eval_poly 2AAE  
         __CFG_RTCOSC$T1OSCREF 000000               _lcd_setcursor_vb 3AF6                 __size_of_Setup 0046  
                   ?_Write_RTC 0001        __size_of_dispararSensor 0030               ___lwdiv@quotient 0005  
                ??_select_menu 005C                 __size_of_clear 0016               ??_clear_keyboard 0001  
                     ?_sprintf 000D                 __size_of_floor 00DE                 __size_of_ldexp 00D4  
               __size_of_frexp 0092                       ?_twinkle 0001                   ??_changePass 0003  
          __size_of_set_vision 005E               _RtccAlrmTimeDate 0060                  _not_fill_pass 3AE2  
               ___wmul@product 0005                __delay_s@millis 0009                       _LATAbits 000F89  
                     _LATBbits 000F8A                     ?_checkPass 0001                      _next_code 3654  
                     _PIE3bits 000FA3            __end_of_obtain_pass 2650            __size_of_show_error 003E  
                    _segundo_d 00EC                 ??_Delay100TCYx 0001                      _segundo_u 00ED  
         __end_of_show_success 3800                    twinkle@time 00CB               __CFG_WDTPS$32768 000000  
           _is_not_letter$1409 0001                  ??_review_code 0007             RtccWriteDate@wasOn 0005  
                    _press_out 0096             _Rtcc_read_TimeDate 0070           dispararSensor@sensor 0013  
               ?_RtccWriteDate 0001                     ?_lcd_putrs 0009              ___wmul@multiplier 0001  
           __end_of_changePass 3B6C                 ?_RtccWriteTime 0001             evalueChanceOfRaw@x 0001  
           evalueChanceOfRaw@y 0003                      lcd_init@i 0005          __size_of_RtccReadDate 008E  
                 ??_lcd_comand 0005                     ?_eval_poly 0028                      lcd_putc@c 0008  
        __size_of_RtccReadTime 006E                   ??_lcd_gotoxy 0006                      copy_data0 389E  
               ?_not_fill_pass 0001            __size_of_write_Date 0088                       _Read_RTC 1EA8  
            configurar_reloj@x 0028              configurar_reloj@y 0027                     ?_next_code 0008  
                  _horaDisparo 0086            __end_of_select_menu 2E5A                      frexp@eptr 0004  
              _lcd_send_nibble 3348                       __Hrparam 0000                  ?_change_state 0001  
                     _RtccDate 00AC                       __Lrparam 0000                       _RtccTime 00B0  
                     _RtccWrOn 3B42             __end_of_lcd_comand 3B62             __end_of_lcd_gotoxy 3A8E  
                 _RtccReadDate 3136               __size_of___awdiv 0096        __size_of_input_old_pass 016A  
             __size_of___ftadd 01C4                   _RtccReadTime 33BE        __size_of_input_new_pass 0174  
             __size_of___ftdiv 00EC               __size_of___ftneg 0024                       ___altoft 32CC  
             __size_of___ftmul 0102               __size_of___ftsub 0044               __size_of___fttol 0102  
             __size_of___lwdiv 005C               __size_of___lwmod 004C                       ___awtoft 383E  
                     ___ftpack 2C50                       ___lbtoft 39FC        __size_of_input_password 008E  
                     __delay_s 35A8                       ___lltoft 348E                   _RtccTimeDate 0068  
                     _exp$3194 004C            __end_of_review_code 3A46                     sprintf@val 001E  
                    setClock@x 000F                       _caratula 3B74               __size_of_isdigit 0022  
              ___lwdiv@divisor 0003                    ??_Write_RTC 000E                ___lwdiv@counter 0007  
                     __ptext10 2DC2                       __ptext11 2D16                       __ptext20 29DA  
                     __ptext12 37C2                       __ptext21 281E                       __ptext13 3800  
                     __ptext30 3A46                       __ptext22 2F86                       __ptext14 1D3E  
                     __ptext31 2650                       __ptext23 2360                       __ptext15 3AB0  
                     __ptext40 28FC                       __ptext32 383E                       __ptext24 2E5A  
                     __ptext16 1BCA                       __ptext41 3ACC                       __ptext33 348E  
                     __ptext25 32CC                       __ptext17 1A48                       __ptext50 39D4  
                     __ptext42 3978                       __ptext34 3AE2                       __ptext26 2AAE  
                     __ptext18 2134                       __ptext51 36A0                       __ptext43 3018  
                     __ptext35 3B6C                       __ptext27 2462                       __ptext19 1500  
                     __ptext60 3B74                       __ptext52 354C                       __ptext44 31C4  
                     __ptext36 35A8                       __ptext28 377E                       __ptext61 3738  
                     __ptext53 3600                       __ptext45 3AF6                       __ptext37 39FC  
                     __ptext29 16E8                       __ptext70 2254                       __ptext62 324C  
                     __ptext54 36EC                       __ptext46 273C                       __ptext38 2C50  
                     __ptext71 1FEE                       __ptext63 3B1E                       __ptext55 3A6A  
                     __ptext47 0FE4                       __ptext39 3B62                       __ptext72 3B42  
                     __ptext64 3B54                       __ptext56 342C                       __ptext48 129C  
                     __ptext65 38E6                       __ptext57 1EA8                       __ptext49 3A8E  
                     __ptext66 3348                       __ptext58 33BE                       __ptext67 3B30  
                     __ptext59 3136                       __ptext68 18AC                       __ptext69 2EF0  
                     _lcd_init 324C                       _lcd_putc 36EC                       _pow$3192 00B4  
                     _pow$3193 00B7                    _obtain_pass 2564                 next_code@digit 0008  
             __size_of_sprintf 0264               __size_of_twinkle 00CE                 next_code@input 000A  
          input_old_pass@digit 00C7         __size_of_lcd_send_byte 0032       __end_of_configurar_reloj 30A8  
          input_old_pass@input 00C9                  __size_of_main 0032                    ??_checkPass 0003  
                     _setClock 273C                 ??_change_state 0001                       _minuto_d 00EA  
                     _minuto_u 00EB                       _password 00DA          __end_of_is_not_letter 3978  
                     _ver_info 28FC                   ??_set_vision 0060          __end_of_read_keyboard 129C  
                ??_Delay1KTCYx 0001                ??_RtccWriteDate 0004                ??_RtccWriteTime 0004  
          input_new_pass@digit 00C6                    ??_lcd_putrs 000B            input_new_pass@input 00C8  
                 ??_show_error 0010                       exp@coeff 0F0F                       log@coeff 0F2D  
                  _OSCTUNEbits 000F9B                     _INTCONbits 000FF2                    ??_eval_poly 002F  
           RtccWriteTime@wasOn 0005                 _dispararSensor 3978           __end_of_Delay100TCYx 3B42  
                     isdigit@c 0003                ??_not_fill_pass 0003                    _select_menu 2DC2  
            _ver_opcion_cambio 2D16                      sprintf@ap 001B        __end_of_lcd_send_nibble 33BE  
                    sprintf@sp 000D             __end_of_set_vision 354C             ?_ver_opcion_cambio 0001  
        lcd_setcursor_vb@blink 0005          __size_of_show_success 003E               ___lwmod@dividend 0008  
                  ??_next_code 000C   ver_opcion_cambio@old_correct 005A                   _time_to_stop 00DC  
           input_old_pass@pass 00C5             __end_of_show_error 383E                     _OSCCONbits 000FD3  
          ??_ver_opcion_cambio 005A       __end_of_lcd_setcursor_vb 3B0A          RtccWriteDate@tempYear 0007  
                 ??_write_Date 0024                    _review_code 3A22                  _lcd_send_byte 38E6  
                   _RTCCFGbits 000F3F                       sprintf@c 0023                       sprintf@f 000F  
       __end_of_dispararSensor 39A8                ___lwmod@divisor 000A            __end_of_Delay1KTCYx 3B30  
              ___lwmod@counter 000C           RtccWriteDate@wasAlrm 0006      __end_of_ver_opcion_cambio 2DC2  
                 _show_success 37C2           RtccWriteDate@wasWrEn 0009               _obtain_pass$3186 00BF  
             _obtain_pass$3187 00C2   __end_of_set_desactive_vision 39D4             __end_of_write_Date 324C  
        lcd_send_nibble@nibble 0002  
