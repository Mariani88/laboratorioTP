

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sun Sep 04 20:13:45 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    46                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    47  0000                     
    48                           	psect	idataCOMRAM
    49  001EEC                     __pidataCOMRAM:
    50                           	opt stack 0
    51                           
    52                           ;initializer for _anio
    53  001EEC  000F               	dw	15
    54                           
    55                           ;initializer for _dia
    56  001EEE  0008               	dw	8
    57                           
    58                           ;initializer for _diasem
    59  001EF0  0003               	dw	3
    60                           
    61                           ;initializer for _hora
    62  001EF2  0012               	dw	18
    63                           
    64                           ;initializer for _mes
    65  001EF4  0009               	dw	9
    66                           
    67                           ;initializer for _minuto
    68  001EF6  001E               	dw	30
    69                           
    70                           ;initializer for _key
    71  001EF8  12                 	db	18
    72                           
    73                           ;initializer for _state_alarm
    74  001EF9  01                 	db	1
    75                           
    76                           	psect	smallconst
    77  000F00                     __psmallconst:
    78                           	opt stack 0
    79  000F00  00                 	db	0
    80  000F01                     _dpowers:
    81                           	opt stack 0
    82  000F01  0001               	dw	1
    83  000F03  000A               	dw	10
    84  000F05  0064               	dw	100
    85  000F07  03E8               	dw	1000
    86  000F09  2710               	dw	10000
    87  000F0B                     __end_of_dpowers:
    88                           	opt stack 0
    89  000F0B                     _LCD_INIT_STRING:
    90                           	opt stack 0
    91  000F0B  28                 	db	40
    92  000F0C  0C                 	db	12
    93  000F0D  01                 	db	1
    94  000F0E  06                 	db	6
    95  000F0F                     __end_of_LCD_INIT_STRING:
    96                           	opt stack 0
    97  000F0F                     STR_1:
    98                           
    99                           ; BSR set to: 15
   100  000F0F  20                 	db	32
   101  000F10  20                 	db	32
   102  000F11  20                 	db	32
   103  000F12  20                 	db	32
   104  000F13  20                 	db	32
   105  000F14  20                 	db	32
   106  000F15  20                 	db	32
   107  000F16  20                 	db	32
   108  000F17  20                 	db	32
   109  000F18  20                 	db	32
   110  000F19  20                 	db	32
   111  000F1A  20                 	db	32
   112  000F1B  20                 	db	32
   113  000F1C  20                 	db	32
   114  000F1D  20                 	db	32
   115  000F1E  20                 	db	32
   116  000F1F  20                 	db	32
   117  000F20  20                 	db	32
   118  000F21  20                 	db	32
   119  000F22  20                 	db	32
   120  000F23  20                 	db	32
   121  000F24  20                 	db	32
   122  000F25  20                 	db	32
   123  000F26  20                 	db	32
   124  000F27  20                 	db	32
   125  000F28  20                 	db	32
   126  000F29  20                 	db	32
   127  000F2A  20                 	db	32
   128  000F2B  20                 	db	32
   129  000F2C  20                 	db	32
   130  000F2D  20                 	db	32
   131  000F2E  20                 	db	32
   132  000F2F  00                 	db	0
   133  000F30                     STR_14:
   134                           
   135                           ; BSR set to: 15
   136  000F30  25                 	db	37
   137  000F31  30                 	db	48	;'0'
   138  000F32  32                 	db	50	;'2'
   139  000F33  75                 	db	117	;'u'
   140  000F34  2F                 	db	47
   141  000F35  25                 	db	37
   142  000F36  30                 	db	48	;'0'
   143  000F37  32                 	db	50	;'2'
   144  000F38  75                 	db	117	;'u'
   145  000F39  2F                 	db	47
   146  000F3A  25                 	db	37
   147  000F3B  30                 	db	48	;'0'
   148  000F3C  32                 	db	50	;'2'
   149  000F3D  75                 	db	117	;'u'
   150  000F3E  00                 	db	0
   151  000F3F                     STR_2:
   152                           
   153                           ; BSR set to: 15
   154  000F3F  6E                 	db	110	;'n'
   155  000F40  75                 	db	117	;'u'
   156  000F41  6C                 	db	108	;'l'
   157  000F42  6C                 	db	108	;'l'
   158  000F43  20                 	db	32
   159  000F44  70                 	db	112	;'p'
   160  000F45  6F                 	db	111	;'o'
   161  000F46  69                 	db	105	;'i'
   162  000F47  6E                 	db	110	;'n'
   163  000F48  74                 	db	116	;'t'
   164  000F49  65                 	db	101	;'e'
   165  000F4A  72                 	db	114	;'r'
   166  000F4B  00                 	db	0
   167  000F4C                     STR_16:
   168                           
   169                           ; BSR set to: 15
   170  000F4C  57                 	db	87	;'W'
   171  000F4D  41                 	db	65	;'A'
   172  000F4E  52                 	db	82	;'R'
   173  000F4F  4E                 	db	78	;'N'
   174  000F50  49                 	db	73	;'I'
   175  000F51  4E                 	db	78	;'N'
   176  000F52  47                 	db	71	;'G'
   177  000F53  21                 	db	33
   178  000F54  21                 	db	33
   179  000F55  21                 	db	33
   180  000F56  00                 	db	0
   181  000F57                     STR_20:
   182                           
   183                           ; BSR set to: 15
   184  000F57  70                 	db	112	;'p'
   185  000F58  61                 	db	97	;'a'
   186  000F59  73                 	db	115	;'s'
   187  000F5A  73                 	db	115	;'s'
   188  000F5B  3A                 	db	58	;':'
   189  000F5C  5F                 	db	95	;'_'
   190  000F5D  5F                 	db	95	;'_'
   191  000F5E  5F                 	db	95	;'_'
   192  000F5F  5F                 	db	95	;'_'
   193  000F60  00                 	db	0
   194  000F61                     STR_15:
   195                           
   196                           ; BSR set to: 15
   197  000F61  25                 	db	37
   198  000F62  30                 	db	48	;'0'
   199  000F63  32                 	db	50	;'2'
   200  000F64  75                 	db	117	;'u'
   201  000F65  3A                 	db	58	;':'
   202  000F66  25                 	db	37
   203  000F67  30                 	db	48	;'0'
   204  000F68  32                 	db	50	;'2'
   205  000F69  75                 	db	117	;'u'
   206  000F6A  00                 	db	0
   207  000F6B                     STR_3:
   208                           
   209                           ; BSR set to: 15
   210  000F6B  65                 	db	101	;'e'
   211  000F6C  78                 	db	120	;'x'
   212  000F6D  63                 	db	99	;'c'
   213  000F6E  65                 	db	101	;'e'
   214  000F6F  70                 	db	112	;'p'
   215  000F70  74                 	db	116	;'t'
   216  000F71  69                 	db	105	;'i'
   217  000F72  6F                 	db	111	;'o'
   218  000F73  6E                 	db	110	;'n'
   219  000F74  00                 	db	0
   220  000F75                     STR_21:
   221                           
   222                           ; BSR set to: 15
   223  000F75  54                 	db	84	;'T'
   224  000F76  52                 	db	82	;'R'
   225  000F77  49                 	db	73	;'I'
   226  000F78  47                 	db	71	;'G'
   227  000F79  47                 	db	71	;'G'
   228  000F7A  45                 	db	69	;'E'
   229  000F7B  44                 	db	68	;'D'
   230  000F7C  00                 	db	0
   231  000F7D                     STR_4:
   232                           
   233                           ; BSR set to: 15
   234  000F7D  25                 	db	37
   235  000F7E  30                 	db	48	;'0'
   236  000F7F  31                 	db	49	;'1'
   237  000F80  75                 	db	117	;'u'
   238  000F81  00                 	db	0
   239  000F82                     STR_19:
   240                           
   241                           ; BSR set to: 15
   242  000F82  4F                 	db	79	;'O'
   243  000F83  46                 	db	70	;'F'
   244  000F84  46                 	db	70	;'F'
   245  000F85  00                 	db	0
   246  000F86                     STR_18:
   247                           
   248                           ; BSR set to: 15
   249  000F86  4F                 	db	79	;'O'
   250  000F87  4E                 	db	78	;'N'
   251  000F88  00                 	db	0
   252  0000                     
   253                           ; #config settings
   254  000F89  00                 	db	0	; dummy byte at the end
   255  0000                     
   256                           	psect	nvCOMRAM
   257  000053                     __pnvCOMRAM:
   258                           	opt stack 0
   259  000053                     _anio_d:
   260                           	opt stack 0
   261  000053                     	ds	1
   262  000054                     _anio_u:
   263                           	opt stack 0
   264  000054                     	ds	1
   265  000055                     _fecha_d:
   266                           	opt stack 0
   267  000055                     	ds	1
   268  000056                     _fecha_u:
   269                           	opt stack 0
   270  000056                     	ds	1
   271  000057                     _hora_d:
   272                           	opt stack 0
   273  000057                     	ds	1
   274  000058                     _hora_u:
   275                           	opt stack 0
   276  000058                     	ds	1
   277  000059                     _mes_d:
   278                           	opt stack 0
   279  000059                     	ds	1
   280  00005A                     _mes_u:
   281                           	opt stack 0
   282  00005A                     	ds	1
   283  00005B                     _minuto_d:
   284                           	opt stack 0
   285  00005B                     	ds	1
   286  00005C                     _minuto_u:
   287                           	opt stack 0
   288  00005C                     	ds	1
   289  00005D                     _segundo_d:
   290                           	opt stack 0
   291  00005D                     	ds	1
   292  00005E                     _segundo_u:
   293                           	opt stack 0
   294  00005E                     	ds	1
   295                           
   296                           	psect	nvBANK0
   297  00008C                     __pnvBANK0:
   298                           	opt stack 0
   299  00008C                     _dia_semana:
   300                           	opt stack 0
   301  00008C                     	ds	1
   302  0000                     _ANCON0	set	3912
   303  0000                     _ANCON1	set	3913
   304  0000                     _RTCCFG	set	3903
   305  0000                     _RTCCFGbits	set	3903
   306  0000                     _ADCON0	set	4034
   307  0000                     _ADCON1	set	4033
   308  0000                     _ALRMCFGbits	set	3985
   309  0000                     _EECON2	set	4007
   310  0000                     _INTCONbits	set	4082
   311  0000                     _LATAbits	set	3977
   312  0000                     _LATBbits	set	3978
   313  0000                     _OSCCONbits	set	4051
   314  0000                     _OSCTUNEbits	set	3995
   315  0000                     _PIE3bits	set	4003
   316  0000                     _PORTAbits	set	3968
   317  0000                     _PORTCbits	set	3970
   318  0000                     _RTCVALH	set	3993
   319  0000                     _RTCVALL	set	3992
   320  0000                     _T1CONbits	set	4045
   321  0000                     _TRISA	set	3986
   322  0000                     _TRISB	set	3987
   323  0000                     _TRISBbits	set	3987
   324  0000                     _TRISC	set	3988
   325                           
   326                           	psect	cinit
   327  001DA8                     __pcinit:
   328                           	opt stack 0
   329  001DA8                     start_initialization:
   330                           	opt stack 0
   331  001DA8                     __initialization:
   332                           	opt stack 0
   333                           
   334                           ; Clear objects allocated to BANK0 (44 bytes)
   335  001DA8  EE00  F060         	lfsr	0,__pbssBANK0
   336  001DAC  0E2C               	movlw	44
   337  001DAE                     clear_0:
   338  001DAE  6AEE               	clrf	postinc0,c
   339  001DB0  06E8               	decf	wreg,f,c
   340  001DB2  E1FD               	bnz	clear_0
   341                           
   342                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   343  001DB4  6A5F               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   344                           
   345                           ; Clear objects allocated to COMRAM (26 bytes)
   346  001DB6  EE00  F02B         	lfsr	0,__pbssCOMRAM
   347  001DBA  0E1A               	movlw	26
   348  001DBC                     clear_1:
   349  001DBC  6AEE               	clrf	postinc0,c
   350  001DBE  06E8               	decf	wreg,f,c
   351  001DC0  E1FD               	bnz	clear_1
   352                           
   353                           ; Initialize objects allocated to COMRAM (14 bytes)
   354                           ; load TBLPTR registers with __pidataCOMRAM
   355  001DC2  0EEC               	movlw	low __pidataCOMRAM
   356  001DC4  6EF6               	movwf	tblptrl,c
   357  001DC6  0E1E               	movlw	high __pidataCOMRAM
   358  001DC8  6EF7               	movwf	tblptrh,c
   359  001DCA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   360  001DCC  6EF8               	movwf	tblptru,c
   361  001DCE  EE00  F045         	lfsr	0,__pdataCOMRAM
   362  001DD2  EE10 F00E          	lfsr	1,14
   363  001DD6                     copy_data0:
   364  001DD6  0009               	tblrd		*+
   365  001DD8  CFF5 FFEE          	movff	tablat,postinc0
   366  001DDC  50E5               	movf	postdec1,w,c
   367  001DDE  50E1               	movf	fsr1l,w,c
   368  001DE0  E1FA               	bnz	copy_data0
   369  001DE2                     end_of_initialization:
   370                           	opt stack 0
   371  001DE2                     __end_of__initialization:
   372                           	opt stack 0
   373  001DE2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   374  001DE4  6EF8               	movwf	tblptru,c
   375  001DE6  0100               	movlb	0
   376  001DE8  EF38  F00D         	goto	_main	;jump to C main() function
   377                           tblptru	equ	0xFF8
   378                           tblptrh	equ	0xFF7
   379                           tblptrl	equ	0xFF6
   380                           tablat	equ	0xFF5
   381                           postinc0	equ	0xFEE
   382                           wreg	equ	0xFE8
   383                           postdec1	equ	0xFE5
   384                           fsr1l	equ	0xFE1
   385                           
   386                           	psect	bitbssCOMRAM
   387  0002F8                     __pbitbssCOMRAM:
   388                           	opt stack 0
   389  0002F8                     _flag:
   390                           	opt stack 0
   391  0002F8                     	ds	1
   392                           tblptru	equ	0xFF8
   393                           tblptrh	equ	0xFF7
   394                           tblptrl	equ	0xFF6
   395                           tablat	equ	0xFF5
   396                           postinc0	equ	0xFEE
   397                           wreg	equ	0xFE8
   398                           postdec1	equ	0xFE5
   399                           fsr1l	equ	0xFE1
   400                           
   401                           	psect	bssCOMRAM
   402  00002B                     __pbssCOMRAM:
   403                           	opt stack 0
   404  00002B                     _RtccTimeVal:
   405                           	opt stack 0
   406  00002B                     	ds	4
   407  00002F                     _a:
   408                           	opt stack 0
   409  00002F                     	ds	2
   410  000031                     _b:
   411                           	opt stack 0
   412  000031                     	ds	2
   413  000033                     _c:
   414                           	opt stack 0
   415  000033                     	ds	2
   416  000035                     _i:
   417                           	opt stack 0
   418  000035                     	ds	2
   419  000037                     _j:
   420                           	opt stack 0
   421  000037                     	ds	2
   422  000039                     _k:
   423                           	opt stack 0
   424  000039                     	ds	2
   425  00003B                     _segundo:
   426                           	opt stack 0
   427  00003B                     	ds	2
   428  00003D                     _RtccDate:
   429                           	opt stack 0
   430  00003D                     	ds	4
   431  000041                     _RtccTime:
   432                           	opt stack 0
   433  000041                     	ds	4
   434                           tblptru	equ	0xFF8
   435                           tblptrh	equ	0xFF7
   436                           tblptrl	equ	0xFF6
   437                           tablat	equ	0xFF5
   438                           postinc0	equ	0xFEE
   439                           wreg	equ	0xFE8
   440                           postdec1	equ	0xFE5
   441                           fsr1l	equ	0xFE1
   442                           
   443                           	psect	dataCOMRAM
   444  000045                     __pdataCOMRAM:
   445                           	opt stack 0
   446  000045                     _anio:
   447                           	opt stack 0
   448  000045                     	ds	2
   449  000047                     _dia:
   450                           	opt stack 0
   451  000047                     	ds	2
   452  000049                     _diasem:
   453                           	opt stack 0
   454  000049                     	ds	2
   455  00004B                     _hora:
   456                           	opt stack 0
   457  00004B                     	ds	2
   458  00004D                     _mes:
   459                           	opt stack 0
   460  00004D                     	ds	2
   461  00004F                     _minuto:
   462                           	opt stack 0
   463  00004F                     	ds	2
   464  000051                     _key:
   465                           	opt stack 0
   466  000051                     	ds	1
   467  000052                     _state_alarm:
   468                           	opt stack 0
   469  000052                     	ds	1
   470                           tblptru	equ	0xFF8
   471                           tblptrh	equ	0xFF7
   472                           tblptrl	equ	0xFF6
   473                           tablat	equ	0xFF5
   474                           postinc0	equ	0xFEE
   475                           wreg	equ	0xFE8
   476                           postdec1	equ	0xFE5
   477                           fsr1l	equ	0xFE1
   478                           
   479                           	psect	bssBANK0
   480  000060                     __pbssBANK0:
   481                           	opt stack 0
   482  000060                     _RtccAlrmTimeDate:
   483                           	opt stack 0
   484  000060                     	ds	8
   485  000068                     _RtccTimeDate:
   486                           	opt stack 0
   487  000068                     	ds	8
   488  000070                     _Rtcc_read_TimeDate:
   489                           	opt stack 0
   490  000070                     	ds	8
   491  000078                     _buffer2:
   492                           	opt stack 0
   493  000078                     	ds	20
   494                           tblptru	equ	0xFF8
   495                           tblptrh	equ	0xFF7
   496                           tblptrl	equ	0xFF6
   497                           tablat	equ	0xFF5
   498                           postinc0	equ	0xFEE
   499                           wreg	equ	0xFE8
   500                           postdec1	equ	0xFE5
   501                           fsr1l	equ	0xFE1
   502                           
   503                           	psect	cstackCOMRAM
   504  000001                     __pcstackCOMRAM:
   505                           	opt stack 0
   506  000001                     ??_isdigit:
   507  000001                     ??_lcd_send_nibble:
   508  000001                     ?___wmul:
   509                           	opt stack 0
   510  000001                     ?___awdiv:
   511                           	opt stack 0
   512  000001                     ?___lwdiv:
   513                           	opt stack 0
   514  000001                     Delay100TCYx@unit:
   515                           	opt stack 0
   516  000001                     Delay1KTCYx@unit:
   517                           	opt stack 0
   518  000001                     RtccWriteDate@pDt:
   519                           	opt stack 0
   520  000001                     RtccWriteTime@pTm:
   521                           	opt stack 0
   522  000001                     ___wmul@multiplier:
   523                           	opt stack 0
   524  000001                     ___awdiv@dividend:
   525                           	opt stack 0
   526  000001                     ___lwdiv@dividend:
   527                           	opt stack 0
   528                           
   529                           ; 2 bytes @ 0x0
   530  000001                     	ds	1
   531  000002                     lcd_send_nibble@nibble:
   532                           	opt stack 0
   533  000002                     _isdigit$2329:
   534                           	opt stack 0
   535                           
   536                           ; 1 bytes @ 0x1
   537  000002                     	ds	1
   538  000003                     lcd_send_byte@n:
   539                           	opt stack 0
   540  000003                     RtccWriteDate@di:
   541                           	opt stack 0
   542  000003                     RtccWriteTime@di:
   543                           	opt stack 0
   544  000003                     isdigit@c:
   545                           	opt stack 0
   546  000003                     ___wmul@multiplicand:
   547                           	opt stack 0
   548  000003                     ___awdiv@divisor:
   549                           	opt stack 0
   550  000003                     ___lwdiv@divisor:
   551                           	opt stack 0
   552                           
   553                           ; 2 bytes @ 0x2
   554  000003                     	ds	1
   555  000004                     lcd_send_byte@address:
   556                           	opt stack 0
   557                           
   558                           ; 1 bytes @ 0x3
   559  000004                     	ds	1
   560  000005                     lcd_init@i:
   561                           	opt stack 0
   562  000005                     lcd_gotoxy@y:
   563                           	opt stack 0
   564  000005                     lcd_comand@d:
   565                           	opt stack 0
   566  000005                     lcd_setcursor_vb@blink:
   567                           	opt stack 0
   568  000005                     RtccWriteDate@wasOn:
   569                           	opt stack 0
   570  000005                     RtccWriteTime@wasOn:
   571                           	opt stack 0
   572  000005                     ___awdiv@counter:
   573                           	opt stack 0
   574  000005                     ___wmul@product:
   575                           	opt stack 0
   576  000005                     ___lwdiv@quotient:
   577                           	opt stack 0
   578                           
   579                           ; 2 bytes @ 0x4
   580  000005                     	ds	1
   581  000006                     ??_clear:
   582  000006                     lcd_gotoxy@x:
   583                           	opt stack 0
   584  000006                     lcd_setcursor_vb@visible:
   585                           	opt stack 0
   586  000006                     RtccWriteDate@wasAlrm:
   587                           	opt stack 0
   588  000006                     RtccWriteTime@wasAlrm:
   589                           	opt stack 0
   590  000006                     ___awdiv@sign:
   591                           	opt stack 0
   592                           
   593                           ; 1 bytes @ 0x5
   594  000006                     	ds	1
   595  000007                     lcd_gotoxy@address:
   596                           	opt stack 0
   597  000007                     RtccWriteTime@wasWrEn:
   598                           	opt stack 0
   599  000007                     ___lwdiv@counter:
   600                           	opt stack 0
   601  000007                     RtccWriteDate@tempYear:
   602                           	opt stack 0
   603  000007                     ___awdiv@quotient:
   604                           	opt stack 0
   605                           
   606                           ; 2 bytes @ 0x6
   607  000007                     	ds	1
   608  000008                     ?___lwmod:
   609                           	opt stack 0
   610  000008                     lcd_putc@c:
   611                           	opt stack 0
   612  000008                     RtccWriteTime@tempMinSec:
   613                           	opt stack 0
   614  000008                     ___lwmod@dividend:
   615                           	opt stack 0
   616                           
   617                           ; 2 bytes @ 0x7
   618  000008                     	ds	1
   619  000009                     RtccWriteDate@wasWrEn:
   620                           	opt stack 0
   621  000009                     lcd_putrs@ptr:
   622                           	opt stack 0
   623  000009                     __delay_s@millis:
   624                           	opt stack 0
   625                           
   626                           ; 2 bytes @ 0x8
   627  000009                     	ds	1
   628  00000A                     RtccWriteDate@tempDayMonth:
   629                           	opt stack 0
   630  00000A                     RtccWriteTime@tempHourWDay:
   631                           	opt stack 0
   632  00000A                     ___lwmod@divisor:
   633                           	opt stack 0
   634                           
   635                           ; 2 bytes @ 0x9
   636  00000A                     	ds	1
   637  00000B                     ??__delay_s:
   638                           
   639                           ; 0 bytes @ 0xA
   640  00000B                     	ds	1
   641  00000C                     ___lwmod@counter:
   642                           	opt stack 0
   643  00000C                     __delay_s@it:
   644                           	opt stack 0
   645  00000C                     RtccWriteDate@tempHourWDay:
   646                           	opt stack 0
   647                           
   648                           ; 2 bytes @ 0xB
   649  00000C                     	ds	1
   650  00000D                     ?_sprintf:
   651                           	opt stack 0
   652  00000D                     sprintf@sp:
   653                           	opt stack 0
   654                           
   655                           ; 2 bytes @ 0xC
   656  00000D                     	ds	1
   657  00000E                     __delay_s@index:
   658                           	opt stack 0
   659                           
   660                           ; 2 bytes @ 0xD
   661  00000E                     	ds	1
   662  00000F                     sprintf@f:
   663                           	opt stack 0
   664                           
   665                           ; 2 bytes @ 0xE
   666  00000F                     	ds	8
   667  000017                     ??_sprintf:
   668                           
   669                           ; 0 bytes @ 0x16
   670  000017                     	ds	4
   671  00001B                     sprintf@ap:
   672                           	opt stack 0
   673                           
   674                           ; 2 bytes @ 0x1A
   675  00001B                     	ds	2
   676  00001D                     sprintf@flag:
   677                           	opt stack 0
   678                           
   679                           ; 1 bytes @ 0x1C
   680  00001D                     	ds	1
   681  00001E                     sprintf@val:
   682                           	opt stack 0
   683                           
   684                           ; 2 bytes @ 0x1D
   685  00001E                     	ds	2
   686  000020                     sprintf@prec:
   687                           	opt stack 0
   688                           
   689                           ; 1 bytes @ 0x1F
   690  000020                     	ds	1
   691  000021                     sprintf@width:
   692                           	opt stack 0
   693                           
   694                           ; 2 bytes @ 0x20
   695  000021                     	ds	2
   696  000023                     sprintf@c:
   697                           	opt stack 0
   698                           
   699                           ; 1 bytes @ 0x22
   700  000023                     	ds	1
   701  000024                     ??_read_keyboard:
   702  000024                     
   703                           ; 0 bytes @ 0x23
   704  000024                     	ds	1
   705  000025                     twinkle@input:
   706                           	opt stack 0
   707                           
   708                           ; 1 bytes @ 0x24
   709  000025                     	ds	1
   710  000026                     ??_set_vision:
   711                           
   712                           ; 0 bytes @ 0x25
   713  000026                     	ds	1
   714  000027                     set_vision@digit:
   715                           	opt stack 0
   716                           
   717                           ; 2 bytes @ 0x26
   718  000027                     	ds	2
   719  000029                     ??_main:
   720                           
   721                           ; 0 bytes @ 0x28
   722  000029                     	ds	1
   723  00002A                     main@input:
   724                           	opt stack 0
   725                           
   726                           ; 1 bytes @ 0x29
   727  00002A                     	ds	1
   728                           tblptru	equ	0xFF8
   729                           tblptrh	equ	0xFF7
   730                           tblptrl	equ	0xFF6
   731                           tablat	equ	0xFF5
   732                           postinc0	equ	0xFEE
   733                           wreg	equ	0xFE8
   734                           postdec1	equ	0xFE5
   735                           fsr1l	equ	0xFE1
   736                           
   737 ;;
   738 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   739 ;;
   740 ;; *************** function _main *****************
   741 ;; Defined at:
   742 ;;		line 87 in file "main.c"
   743 ;; Parameters:    Size  Location     Type
   744 ;;		None
   745 ;; Auto vars:     Size  Location     Type
   746 ;;  input           1   41[COMRAM] unsigned char 
   747 ;; Return value:  Size  Location     Type
   748 ;;                  2   52[None  ] int 
   749 ;; Registers used:
   750 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   751 ;; Tracked objects:
   752 ;;		On entry : 0/0
   753 ;;		On exit  : 0/0
   754 ;;		Unchanged: 0/0
   755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   757 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   758 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   759 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   760 ;;Total ram usage:        2 bytes
   761 ;; Hardware stack levels required when called:    8
   762 ;; This function calls:
   763 ;;		_Setup
   764 ;;		_caratula
   765 ;;		_lcd_gotoxy
   766 ;;		_lcd_putrs
   767 ;;		_read_keyboard
   768 ;;		_set_vision
   769 ;; This function is called by:
   770 ;;		Startup code after reset
   771 ;; This function uses a non-reentrant model
   772 ;;
   773                           
   774                           	psect	text0
   775  001A70                     __ptext0:
   776                           	opt stack 0
   777  001A70                     _main:
   778                           	opt stack 23
   779                           
   780                           ;main.c: 88: Setup();
   781                           
   782                           ; BSR set to: 15
   783                           ;incstack = 0
   784  001A70  ECB0  F00E         	call	_Setup	;wreg free
   785                           
   786                           ;main.c: 89: caratula();
   787  001A74  EC84  F00F         	call	_caratula	;wreg free
   788  001A78  D000               	goto	l2848
   789  001A7A                     l2848:
   790                           
   791                           ;main.c: 94: set_vision();
   792  001A7A  EC0F  F00C         	call	_set_vision	;wreg free
   793                           
   794                           ;main.c: 96: char input = read_keyboard();
   795  001A7E  ECC5  F007         	call	_read_keyboard	;wreg free
   796  001A82  6E2A               	movwf	main@input,c
   797                           
   798                           ;main.c: 98: if (input == 16){
   799  001A84  0E10               	movlw	16
   800  001A86  182A               	xorwf	main@input,w,c
   801  001A88  A4D8               	btfss	status,2,c
   802  001A8A  D7F7               	goto	l2848
   803                           
   804                           ;main.c: 99: lcd_gotoxy(1,1);
   805  001A8C  0E01               	movlw	1
   806  001A8E  6E05               	movwf	lcd_gotoxy@y,c
   807  001A90  0E01               	movlw	1
   808  001A92  EC23  F00F         	call	_lcd_gotoxy
   809                           
   810                           ;main.c: 100: lcd_putrs("                                ");
   811  001A96  0E0F               	movlw	low STR_1
   812  001A98  6E09               	movwf	lcd_putrs@ptr,c
   813  001A9A  0E0F               	movlw	high STR_1
   814  001A9C  6E0A               	movwf	lcd_putrs@ptr+1,c
   815  001A9E  EC3A  F00E         	call	_lcd_putrs	;wreg free
   816                           
   817                           ;main.c: 101: lcd_gotoxy(1,1);
   818  001AA2  0E01               	movlw	1
   819  001AA4  6E05               	movwf	lcd_gotoxy@y,c
   820  001AA6  0E01               	movlw	1
   821  001AA8  EC23  F00F         	call	_lcd_gotoxy
   822                           
   823                           ;main.c: 102: lcd_putrs("null pointer");
   824  001AAC  0E3F               	movlw	low STR_2
   825  001AAE  6E09               	movwf	lcd_putrs@ptr,c
   826  001AB0  0E0F               	movlw	high STR_2
   827  001AB2  6E0A               	movwf	lcd_putrs@ptr+1,c
   828  001AB4  EC3A  F00E         	call	_lcd_putrs	;wreg free
   829                           
   830                           ;main.c: 103: lcd_gotoxy(1,2);
   831  001AB8  0E02               	movlw	2
   832  001ABA  6E05               	movwf	lcd_gotoxy@y,c
   833  001ABC  0E01               	movlw	1
   834  001ABE  EC23  F00F         	call	_lcd_gotoxy
   835                           
   836                           ;main.c: 104: lcd_putrs("exception");
   837  001AC2  0E6B               	movlw	low STR_3
   838  001AC4  6E09               	movwf	lcd_putrs@ptr,c
   839  001AC6  0E0F               	movlw	high STR_3
   840  001AC8  6E0A               	movwf	lcd_putrs@ptr+1,c
   841  001ACA  EC3A  F00E         	call	_lcd_putrs	;wreg free
   842                           
   843                           ;main.c: 105: input = 0;
   844  001ACE  0E00               	movlw	0
   845  001AD0  6E2A               	movwf	main@input,c
   846                           
   847                           ;main.c: 106: key = 0;
   848  001AD2  0E00               	movlw	0
   849  001AD4  6E51               	movwf	_key,c
   850                           
   851                           ;main.c: 107: _delay((unsigned long)((98)*(8000000/4000.0)));
   852  001AD6  0EFF               	movlw	255
   853  001AD8  6E29               	movwf	??_main& (0+255),c
   854  001ADA  0E8A               	movlw	138
   855  001ADC                     u2437:
   856  001ADC  2EE8               	decfsz	wreg,f,c
   857  001ADE  D7FE               	goto	u2437
   858  001AE0  2E29               	decfsz	??_main& (0+255),f,c
   859  001AE2  D7FC               	goto	u2437
   860  001AE4  D000               	nop2	
   861  001AE6  D7C9               	goto	l2848
   862                           
   863                           ;main.c: 108: }
   864                           ;main.c: 109: }
   865                           ;main.c: 111: return 0;
   866                           ;	Return value of _main is never used
   867  001AE8  EF00  F000         	goto	start
   868  001AEC                     __end_of_main:
   869                           	opt stack 0
   870                           tblptru	equ	0xFF8
   871                           tblptrh	equ	0xFF7
   872                           tblptrl	equ	0xFF6
   873                           tablat	equ	0xFF5
   874                           postinc0	equ	0xFEE
   875                           wreg	equ	0xFE8
   876                           postdec1	equ	0xFE5
   877                           fsr1l	equ	0xFE1
   878                           status	equ	0xFD8
   879                           
   880 ;; *************** function _set_vision *****************
   881 ;; Defined at:
   882 ;;		line 45 in file "lcd_vision.c"
   883 ;; Parameters:    Size  Location     Type
   884 ;;		None
   885 ;; Auto vars:     Size  Location     Type
   886 ;;  digit           2   38[COMRAM] short 
   887 ;; Return value:  Size  Location     Type
   888 ;;		None               void
   889 ;; Registers used:
   890 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   891 ;; Tracked objects:
   892 ;;		On entry : 0/0
   893 ;;		On exit  : 0/0
   894 ;;		Unchanged: 0/0
   895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   897 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   898 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   899 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   900 ;;Total ram usage:        3 bytes
   901 ;; Hardware stack levels used:    1
   902 ;; Hardware stack levels required when called:    7
   903 ;; This function calls:
   904 ;;		_clear
   905 ;;		_clear_keyboard
   906 ;;		_lcd_gotoxy
   907 ;;		_lcd_putrs
   908 ;;		_lcd_setcursor_vb
   909 ;;		_read_keyboard
   910 ;;		_twinkle
   911 ;;		_write_Date
   912 ;; This function is called by:
   913 ;;		_main
   914 ;; This function uses a non-reentrant model
   915 ;;
   916                           
   917                           	psect	text1
   918  00181E                     __ptext1:
   919                           	opt stack 0
   920  00181E                     _set_vision:
   921                           	opt stack 23
   922                           
   923                           ;lcd_vision.c: 46: clear();
   924                           
   925                           ;incstack = 0
   926  00181E  EC46  F00F         	call	_clear	;wreg free
   927                           
   928                           ;lcd_vision.c: 47: write_Date();
   929  001822  ECF9  F00C         	call	_write_Date	;wreg free
   930                           
   931                           ;lcd_vision.c: 48: lcd_gotoxy(1,1);
   932  001826  0E01               	movlw	1
   933  001828  6E05               	movwf	lcd_gotoxy@y,c
   934  00182A  0E01               	movlw	1
   935  00182C  EC23  F00F         	call	_lcd_gotoxy
   936                           
   937                           ;lcd_vision.c: 50: switch (state_alarm){
   938  001830  D04C               	goto	l2842
   939  001832                     l2812:
   940  001832  0E86               	movlw	low STR_18
   941  001834  6E09               	movwf	lcd_putrs@ptr,c
   942  001836  0E0F               	movlw	high STR_18
   943  001838  6E0A               	movwf	lcd_putrs@ptr+1,c
   944  00183A  EC3A  F00E         	call	_lcd_putrs	;wreg free
   945                           
   946                           ;lcd_vision.c: 52: break;
   947  00183E  0012               	return	
   948  001840                     l2814:
   949  001840  0E82               	movlw	low STR_19
   950  001842  6E09               	movwf	lcd_putrs@ptr,c
   951  001844  0E0F               	movlw	high STR_19
   952  001846  6E0A               	movwf	lcd_putrs@ptr+1,c
   953  001848  EC3A  F00E         	call	_lcd_putrs	;wreg free
   954                           
   955                           ;lcd_vision.c: 54: lcd_gotoxy(7,2);
   956  00184C  0E02               	movlw	2
   957  00184E  6E05               	movwf	lcd_gotoxy@y,c
   958  001850  0E07               	movlw	7
   959  001852  EC23  F00F         	call	_lcd_gotoxy
   960                           
   961                           ;lcd_vision.c: 55: lcd_putrs("pass:____");
   962  001856  0E57               	movlw	low STR_20
   963  001858  6E09               	movwf	lcd_putrs@ptr,c
   964  00185A  0E0F               	movlw	high STR_20
   965  00185C  6E0A               	movwf	lcd_putrs@ptr+1,c
   966  00185E  EC3A  F00E         	call	_lcd_putrs	;wreg free
   967                           
   968                           ;lcd_vision.c: 56: short digit = 12;
   969  001862  0E00               	movlw	0
   970  001864  6E28               	movwf	set_vision@digit+1,c
   971  001866  0E0C               	movlw	12
   972  001868  6E27               	movwf	set_vision@digit,c
   973                           
   974                           ;lcd_vision.c: 57: lcd_gotoxy(digit,2);
   975  00186A  0E02               	movlw	2
   976  00186C  6E05               	movwf	lcd_gotoxy@y,c
   977  00186E  5027               	movf	set_vision@digit,w,c
   978  001870  EC23  F00F         	call	_lcd_gotoxy
   979                           
   980                           ;lcd_vision.c: 58: lcd_setcursor_vb(1,1);
   981  001874  0E01               	movlw	1
   982  001876  6E05               	movwf	lcd_setcursor_vb@blink,c
   983  001878  0E01               	movlw	1
   984  00187A  EC51  F00F         	call	_lcd_setcursor_vb
   985                           
   986                           ;lcd_vision.c: 60: while(read_keyboard() != 16){
   987  00187E  D015               	goto	l2836
   988  001880                     l2826:
   989                           
   990                           ;lcd_vision.c: 61: if(0<read_keyboard()&& read_keyboard()<10){
   991  001880  ECC5  F007         	call	_read_keyboard	;wreg free
   992  001884  0900               	iorlw	0
   993  001886  B4D8               	btfsc	status,2,c
   994  001888  D010               	goto	l2836
   995  00188A  ECC5  F007         	call	_read_keyboard	;wreg free
   996  00188E  6E26               	movwf	??_set_vision& (0+255),c
   997  001890  0E0A               	movlw	10
   998  001892  6026               	cpfslt	??_set_vision,c
   999  001894  D00A               	goto	l2836
  1000                           
  1001                           ;lcd_vision.c: 62: clear_keyboard();
  1002  001896  EC88  F00F         	call	_clear_keyboard	;wreg free
  1003                           
  1004                           ;lcd_vision.c: 63: digit++;
  1005  00189A  4A27               	infsnz	set_vision@digit,f,c
  1006  00189C  2A28               	incf	set_vision@digit+1,f,c
  1007                           
  1008                           ;lcd_vision.c: 64: lcd_gotoxy(digit, 2);
  1009  00189E  0E02               	movlw	2
  1010  0018A0  6E05               	movwf	lcd_gotoxy@y,c
  1011  0018A2  5027               	movf	set_vision@digit,w,c
  1012  0018A4  EC23  F00F         	call	_lcd_gotoxy
  1013  0018A8  D000               	goto	l2836
  1014  0018AA                     l2836:
  1015  0018AA  ECC5  F007         	call	_read_keyboard	;wreg free
  1016  0018AE  0A10               	xorlw	16
  1017  0018B0  B4D8               	btfsc	status,2,c
  1018  0018B2  0012               	return	
  1019  0018B4  D7E5               	goto	l2826
  1020                           
  1021                           ;lcd_vision.c: 65: }
  1022                           ;lcd_vision.c: 66: }
  1023                           ;lcd_vision.c: 68: break;
  1024  0018B6  0012               	return	
  1025  0018B8                     l2838:
  1026  0018B8  0E75               	movlw	low STR_21
  1027  0018BA  6E09               	movwf	lcd_putrs@ptr,c
  1028  0018BC  0E0F               	movlw	high STR_21
  1029  0018BE  6E0A               	movwf	lcd_putrs@ptr+1,c
  1030  0018C0  EC3A  F00E         	call	_lcd_putrs	;wreg free
  1031                           
  1032                           ;lcd_vision.c: 70: twinkle();
  1033  0018C4  ECB1  F00D         	call	_twinkle	;wreg free
  1034                           
  1035                           ;lcd_vision.c: 71: }
  1036  0018C8  0012               	return	
  1037  0018CA                     l2842:
  1038  0018CA  5052               	movf	_state_alarm,w,c
  1039                           
  1040                           ; Switch size 1, requested type "space"
  1041                           ; Number of cases is 2, Range of values is 0 to 1
  1042                           ; switch strategies available:
  1043                           ; Name         Instructions Cycles
  1044                           ; simple_byte            7     4 (average)
  1045                           ;	Chosen strategy is simple_byte
  1046  0018CC  0A00               	xorlw	0	; case 0
  1047  0018CE  B4D8               	btfsc	status,2,c
  1048  0018D0  D7B0               	goto	l2812
  1049  0018D2  0A01               	xorlw	1	; case 1
  1050  0018D4  B4D8               	btfsc	status,2,c
  1051  0018D6  D7B4               	goto	l2814
  1052  0018D8  D7EF               	goto	l2838
  1053  0018DA  0012               	return		;funcret
  1054  0018DC                     __end_of_set_vision:
  1055                           	opt stack 0
  1056                           tblptru	equ	0xFF8
  1057                           tblptrh	equ	0xFF7
  1058                           tblptrl	equ	0xFF6
  1059                           tablat	equ	0xFF5
  1060                           postinc0	equ	0xFEE
  1061                           wreg	equ	0xFE8
  1062                           postdec1	equ	0xFE5
  1063                           fsr1l	equ	0xFE1
  1064                           status	equ	0xFD8
  1065                           
  1066 ;; *************** function _write_Date *****************
  1067 ;; Defined at:
  1068 ;;		line 10 in file "lcd_vision.c"
  1069 ;; Parameters:    Size  Location     Type
  1070 ;;		None
  1071 ;; Auto vars:     Size  Location     Type
  1072 ;;		None
  1073 ;; Return value:  Size  Location     Type
  1074 ;;		None               void
  1075 ;; Registers used:
  1076 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1077 ;; Tracked objects:
  1078 ;;		On entry : 0/0
  1079 ;;		On exit  : 0/0
  1080 ;;		Unchanged: 0/0
  1081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1085 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1086 ;;Total ram usage:        0 bytes
  1087 ;; Hardware stack levels used:    1
  1088 ;; Hardware stack levels required when called:    5
  1089 ;; This function calls:
  1090 ;;		_lcd_gotoxy
  1091 ;;		_lcd_putrs
  1092 ;;		_sprintf
  1093 ;; This function is called by:
  1094 ;;		_set_vision
  1095 ;; This function uses a non-reentrant model
  1096 ;;
  1097                           
  1098                           	psect	text2
  1099  0019F2                     __ptext2:
  1100                           	opt stack 0
  1101  0019F2                     _write_Date:
  1102                           	opt stack 24
  1103                           
  1104                           ;lcd_vision.c: 11: lcd_gotoxy(9,1);
  1105                           
  1106                           ;incstack = 0
  1107  0019F2  0E01               	movlw	1
  1108  0019F4  6E05               	movwf	lcd_gotoxy@y,c
  1109  0019F6  0E09               	movlw	9
  1110  0019F8  EC23  F00F         	call	_lcd_gotoxy
  1111                           
  1112                           ;lcd_vision.c: 12: sprintf(buffer2,"%02u/%02u/%02u",dia,mes,anio);
  1113  0019FC  0E78               	movlw	low _buffer2
  1114  0019FE  6E0D               	movwf	sprintf@sp,c
  1115  001A00  0E00               	movlw	high _buffer2
  1116  001A02  6E0E               	movwf	sprintf@sp+1,c
  1117  001A04  0E30               	movlw	low STR_14
  1118  001A06  6E0F               	movwf	sprintf@f,c
  1119  001A08  0E0F               	movlw	high STR_14
  1120  001A0A  6E10               	movwf	sprintf@f+1,c
  1121  001A0C  C047  F011         	movff	_dia,?_sprintf+4
  1122  001A10  C048  F012         	movff	_dia+1,?_sprintf+5
  1123  001A14  C04D  F013         	movff	_mes,?_sprintf+6
  1124  001A18  C04E  F014         	movff	_mes+1,?_sprintf+7
  1125  001A1C  C045  F015         	movff	_anio,?_sprintf+8
  1126  001A20  C046  F016         	movff	_anio+1,?_sprintf+9
  1127  001A24  EC10  F009         	call	_sprintf	;wreg free
  1128                           
  1129                           ;lcd_vision.c: 13: lcd_putrs(buffer2);
  1130  001A28  0E78               	movlw	low _buffer2
  1131  001A2A  6E09               	movwf	lcd_putrs@ptr,c
  1132  001A2C  0E00               	movlw	high _buffer2
  1133  001A2E  6E0A               	movwf	lcd_putrs@ptr+1,c
  1134  001A30  EC3A  F00E         	call	_lcd_putrs	;wreg free
  1135                           
  1136                           ;lcd_vision.c: 14: sprintf(buffer2,"%02u:%02u",hora,minuto);
  1137  001A34  0E78               	movlw	low _buffer2
  1138  001A36  6E0D               	movwf	sprintf@sp,c
  1139  001A38  0E00               	movlw	high _buffer2
  1140  001A3A  6E0E               	movwf	sprintf@sp+1,c
  1141  001A3C  0E61               	movlw	low STR_15
  1142  001A3E  6E0F               	movwf	sprintf@f,c
  1143  001A40  0E0F               	movlw	high STR_15
  1144  001A42  6E10               	movwf	sprintf@f+1,c
  1145  001A44  C04B  F011         	movff	_hora,?_sprintf+4
  1146  001A48  C04C  F012         	movff	_hora+1,?_sprintf+5
  1147  001A4C  C04F  F013         	movff	_minuto,?_sprintf+6
  1148  001A50  C050  F014         	movff	_minuto+1,?_sprintf+7
  1149  001A54  EC10  F009         	call	_sprintf	;wreg free
  1150                           
  1151                           ;lcd_vision.c: 15: lcd_gotoxy(1,2);
  1152  001A58  0E02               	movlw	2
  1153  001A5A  6E05               	movwf	lcd_gotoxy@y,c
  1154  001A5C  0E01               	movlw	1
  1155  001A5E  EC23  F00F         	call	_lcd_gotoxy
  1156                           
  1157                           ;lcd_vision.c: 16: lcd_putrs(buffer2);
  1158  001A62  0E78               	movlw	low _buffer2
  1159  001A64  6E09               	movwf	lcd_putrs@ptr,c
  1160  001A66  0E00               	movlw	high _buffer2
  1161  001A68  6E0A               	movwf	lcd_putrs@ptr+1,c
  1162  001A6A  EC3A  F00E         	call	_lcd_putrs	;wreg free
  1163  001A6E  0012               	return		;funcret
  1164  001A70                     __end_of_write_Date:
  1165                           	opt stack 0
  1166                           tblptru	equ	0xFF8
  1167                           tblptrh	equ	0xFF7
  1168                           tblptrl	equ	0xFF6
  1169                           tablat	equ	0xFF5
  1170                           postinc0	equ	0xFEE
  1171                           wreg	equ	0xFE8
  1172                           postdec1	equ	0xFE5
  1173                           fsr1l	equ	0xFE1
  1174                           status	equ	0xFD8
  1175                           
  1176 ;; *************** function _twinkle *****************
  1177 ;; Defined at:
  1178 ;;		line 28 in file "lcd_vision.c"
  1179 ;; Parameters:    Size  Location     Type
  1180 ;;		None
  1181 ;; Auto vars:     Size  Location     Type
  1182 ;;  input           1   36[COMRAM] unsigned char 
  1183 ;; Return value:  Size  Location     Type
  1184 ;;		None               void
  1185 ;; Registers used:
  1186 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1187 ;; Tracked objects:
  1188 ;;		On entry : 0/0
  1189 ;;		On exit  : 0/0
  1190 ;;		Unchanged: 0/0
  1191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1193 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1195 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1196 ;;Total ram usage:        1 bytes
  1197 ;; Hardware stack levels used:    1
  1198 ;; Hardware stack levels required when called:    6
  1199 ;; This function calls:
  1200 ;;		__delay_s
  1201 ;;		_lcd_gotoxy
  1202 ;;		_lcd_putrs
  1203 ;;		_read_keyboard
  1204 ;; This function is called by:
  1205 ;;		_set_vision
  1206 ;; This function uses a non-reentrant model
  1207 ;;
  1208                           
  1209                           	psect	text3
  1210  001B62                     __ptext3:
  1211                           	opt stack 0
  1212  001B62                     _twinkle:
  1213                           	opt stack 23
  1214                           
  1215                           ;lcd_vision.c: 29: char input = 1;
  1216                           
  1217                           ;incstack = 0
  1218  001B62  0E01               	movlw	1
  1219  001B64  D024               	goto	L1
  1220  001B66                     l2764:
  1221                           
  1222                           ;lcd_vision.c: 32: _delay_s(500);
  1223  001B66  0E01               	movlw	1
  1224  001B68  6E0A               	movwf	__delay_s@millis+1,c
  1225  001B6A  0EF4               	movlw	244
  1226  001B6C  6E09               	movwf	__delay_s@millis,c
  1227  001B6E  EC0E  F00E         	call	__delay_s	;wreg free
  1228                           
  1229                           ;lcd_vision.c: 33: lcd_gotoxy(7,2);
  1230  001B72  0E02               	movlw	2
  1231  001B74  6E05               	movwf	lcd_gotoxy@y,c
  1232  001B76  0E07               	movlw	7
  1233  001B78  EC23  F00F         	call	_lcd_gotoxy
  1234                           
  1235                           ;lcd_vision.c: 34: lcd_putrs("WARNING!!!");
  1236  001B7C  0E4C               	movlw	low STR_16
  1237  001B7E  6E09               	movwf	lcd_putrs@ptr,c
  1238  001B80  0E0F               	movlw	high STR_16
  1239  001B82  6E0A               	movwf	lcd_putrs@ptr+1,c
  1240  001B84  EC3A  F00E         	call	_lcd_putrs	;wreg free
  1241                           
  1242                           ;lcd_vision.c: 35: _delay_s(500);
  1243  001B88  0E01               	movlw	1
  1244  001B8A  6E0A               	movwf	__delay_s@millis+1,c
  1245  001B8C  0EF4               	movlw	244
  1246  001B8E  6E09               	movwf	__delay_s@millis,c
  1247  001B90  EC0E  F00E         	call	__delay_s	;wreg free
  1248                           
  1249                           ;lcd_vision.c: 36: lcd_gotoxy(7,2);
  1250  001B94  0E02               	movlw	2
  1251  001B96  6E05               	movwf	lcd_gotoxy@y,c
  1252  001B98  0E07               	movlw	7
  1253  001B9A  EC23  F00F         	call	_lcd_gotoxy
  1254                           
  1255                           ;lcd_vision.c: 37: lcd_putrs("          ");
  1256  001B9E  0E25               	movlw	low (STR_1+22)
  1257  001BA0  6E09               	movwf	lcd_putrs@ptr,c
  1258  001BA2  0E0F               	movlw	high (STR_1+22)
  1259  001BA4  6E0A               	movwf	lcd_putrs@ptr+1,c
  1260  001BA6  EC3A  F00E         	call	_lcd_putrs	;wreg free
  1261                           
  1262                           ;lcd_vision.c: 38: input = read_keyboard();
  1263  001BAA  ECC5  F007         	call	_read_keyboard	;wreg free
  1264  001BAE                     L1:
  1265  001BAE  6E25               	movwf	twinkle@input,c
  1266  001BB0  D000               	goto	l2776
  1267  001BB2                     l2776:
  1268  001BB2  0E10               	movlw	16
  1269  001BB4  1825               	xorwf	twinkle@input,w,c
  1270  001BB6  A4D8               	btfss	status,2,c
  1271  001BB8  D7D6               	goto	l2764
  1272                           
  1273                           ;lcd_vision.c: 39: }
  1274                           ;lcd_vision.c: 42: state_alarm = ACTIVE;
  1275  001BBA  0E00               	movlw	0
  1276  001BBC  6E52               	movwf	_state_alarm,c
  1277  001BBE  0012               	return		;funcret
  1278  001BC0                     __end_of_twinkle:
  1279                           	opt stack 0
  1280                           tblptru	equ	0xFF8
  1281                           tblptrh	equ	0xFF7
  1282                           tblptrl	equ	0xFF6
  1283                           tablat	equ	0xFF5
  1284                           postinc0	equ	0xFEE
  1285                           wreg	equ	0xFE8
  1286                           postdec1	equ	0xFE5
  1287                           fsr1l	equ	0xFE1
  1288                           status	equ	0xFD8
  1289                           
  1290 ;; *************** function _read_keyboard *****************
  1291 ;; Defined at:
  1292 ;;		line 8 in file "keyboard.c"
  1293 ;; Parameters:    Size  Location     Type
  1294 ;;		None
  1295 ;; Auto vars:     Size  Location     Type
  1296 ;;		None
  1297 ;; Return value:  Size  Location     Type
  1298 ;;                  1    wreg      unsigned char 
  1299 ;; Registers used:
  1300 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1301 ;; Tracked objects:
  1302 ;;		On entry : 0/0
  1303 ;;		On exit  : 0/0
  1304 ;;		Unchanged: 0/0
  1305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1308 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1309 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1310 ;;Total ram usage:        1 bytes
  1311 ;; Hardware stack levels used:    1
  1312 ;; Hardware stack levels required when called:    5
  1313 ;; This function calls:
  1314 ;;		_lcd_putrs
  1315 ;;		_sprintf
  1316 ;; This function is called by:
  1317 ;;		_main
  1318 ;;		_twinkle
  1319 ;;		_set_vision
  1320 ;; This function uses a non-reentrant model
  1321 ;;
  1322                           
  1323                           	psect	text4
  1324  000F8A                     __ptext4:
  1325                           	opt stack 0
  1326  000F8A                     _read_keyboard:
  1327                           	opt stack 23
  1328                           
  1329                           ;keyboard.c: 9: LATAbits.LATA0=1;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=0;
  1330                           
  1331                           ;incstack = 0
  1332  000F8A  8089               	bsf	3977,0,c	;volatile
  1333  000F8C  9289               	bcf	3977,1,c	;volatile
  1334  000F8E  9489               	bcf	3977,2,c	;volatile
  1335  000F90  9689               	bcf	3977,3,c	;volatile
  1336                           
  1337                           ;keyboard.c: 10: {
  1338                           ;keyboard.c: 11: if (PORTAbits.RA5==1){key=1;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA5==1){};}
  1339  000F92  AA80               	btfss	3968,5,c	;volatile
  1340  000F94  D018               	goto	l204
  1341  000F96  0E01               	movlw	1
  1342  000F98  6E51               	movwf	_key,c
  1343  000F9A  0E78               	movlw	low _buffer2
  1344  000F9C  6E0D               	movwf	sprintf@sp,c
  1345  000F9E  0E00               	movlw	high _buffer2
  1346  000FA0  6E0E               	movwf	sprintf@sp+1,c
  1347  000FA2  0E7D               	movlw	low STR_4
  1348  000FA4  6E0F               	movwf	sprintf@f,c
  1349  000FA6  0E0F               	movlw	high STR_4
  1350  000FA8  6E10               	movwf	sprintf@f+1,c
  1351  000FAA  C051  F011         	movff	_key,?_sprintf+4
  1352  000FAE  6A12               	clrf	?_sprintf+5,c
  1353  000FB0  EC10  F009         	call	_sprintf	;wreg free
  1354  000FB4  0E78               	movlw	low _buffer2
  1355  000FB6  6E09               	movwf	lcd_putrs@ptr,c
  1356  000FB8  0E00               	movlw	high _buffer2
  1357  000FBA  6E0A               	movwf	lcd_putrs@ptr+1,c
  1358  000FBC  EC3A  F00E         	call	_lcd_putrs	;wreg free
  1359  000FC0  D000               	goto	l205
  1360  000FC2                     l205:
  1361  000FC2  BA80               	btfsc	3968,5,c	;volatile
  1362  000FC4  D7FE               	goto	l205
  1363  000FC6                     l204:
  1364                           
  1365                           ;keyboard.c: 12: if (PORTAbits.RA7==1){key=2;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  1366  000FC6  AE80               	btfss	3968,7,c	;volatile
  1367  000FC8  D018               	goto	l208
  1368  000FCA  0E02               	movlw	2
  1369  000FCC  6E51               	movwf	_key,c
  1370  000FCE  0E78               	movlw	low _buffer2
  1371  000FD0  6E0D               	movwf	sprintf@sp,c
  1372  000FD2  0E00               	movlw	high _buffer2
  1373  000FD4  6E0E               	movwf	sprintf@sp+1,c
  1374  000FD6  0E7D               	movlw	low STR_4
  1375  000FD8  6E0F               	movwf	sprintf@f,c
  1376  000FDA  0E0F               	movlw	high STR_4
  1377  000FDC  6E10               	movwf	sprintf@f+1,c
  1378  000FDE  C051  F011         	movff	_key,?_sprintf+4
  1379  000FE2  6A12               	clrf	?_sprintf+5,c
  1380  000FE4  EC10  F009         	call	_sprintf	;wreg free
  1381  000FE8  0E78               	movlw	low _buffer2
  1382  000FEA  6E09               	movwf	lcd_putrs@ptr,c
  1383  000FEC  0E00               	movlw	high _buffer2
  1384  000FEE  6E0A               	movwf	lcd_putrs@ptr+1,c
  1385  000FF0  EC3A  F00E         	call	_lcd_putrs	;wreg free
  1386  000FF4  D000               	goto	l209
  1387  000FF6                     l209:
  1388  000FF6  BE80               	btfsc	3968,7,c	;volatile
  1389  000FF8  D7FE               	goto	l209
  1390  000FFA                     l208:
  1391                           
  1392                           ;keyboard.c: 13: if (PORTAbits.RA6==1){key=3;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA6==1){};}
  1393  000FFA  AC80               	btfss	3968,6,c	;volatile
  1394  000FFC  D018               	goto	l212
  1395  000FFE  0E03               	movlw	3
  1396  001000  6E51               	movwf	_key,c
  1397  001002  0E78               	movlw	low _buffer2
  1398  001004  6E0D               	movwf	sprintf@sp,c
  1399  001006  0E00               	movlw	high _buffer2
  1400  001008  6E0E               	movwf	sprintf@sp+1,c
  1401  00100A  0E7D               	movlw	low STR_4
  1402  00100C  6E0F               	movwf	sprintf@f,c
  1403  00100E  0E0F               	movlw	high STR_4
  1404  001010  6E10               	movwf	sprintf@f+1,c
  1405  001012  C051  F011         	movff	_key,?_sprintf+4
  1406  001016  6A12               	clrf	?_sprintf+5,c
  1407  001018  EC10  F009         	call	_sprintf	;wreg free
  1408  00101C  0E78               	movlw	low _buffer2
  1409  00101E  6E09               	movwf	lcd_putrs@ptr,c
  1410  001020  0E00               	movlw	high _buffer2
  1411  001022  6E0A               	movwf	lcd_putrs@ptr+1,c
  1412  001024  EC3A  F00E         	call	_lcd_putrs	;wreg free
  1413  001028  D000               	goto	l213
  1414  00102A                     l213:
  1415  00102A  BC80               	btfsc	3968,6,c	;volatile
  1416  00102C  D7FE               	goto	l213
  1417  00102E                     l212:
  1418                           
  1419                           ;keyboard.c: 14: if (PORTCbits.RC2==1){key=11; while(PORTCbits.RC2==1){};}
  1420  00102E  A482               	btfss	3970,2,c	;volatile
  1421  001030  D005               	goto	l216
  1422  001032  0E0B               	movlw	11
  1423  001034  6E51               	movwf	_key,c
  1424  001036  D000               	goto	l217
  1425  001038                     l217:
  1426  001038  B482               	btfsc	3970,2,c	;volatile
  1427  00103A  D7FE               	goto	l217
  1428  00103C                     l216:
  1429                           
  1430                           ;keyboard.c: 15: }
  1431                           ;keyboard.c: 16: LATAbits.LATA0=0;LATAbits.LATA1=1;LATAbits.LATA2=0;LATAbits.LATA3=0;
  1432  00103C  9089               	bcf	3977,0,c	;volatile
  1433  00103E  8289               	bsf	3977,1,c	;volatile
  1434  001040  9489               	bcf	3977,2,c	;volatile
  1435  001042  9689               	bcf	3977,3,c	;volatile
  1436                           
  1437                           ;keyboard.c: 17: {
  1438                           ;keyboard.c: 18: if (PORTAbits.RA5==1){key=4;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA5==1){};}
  1439  001044  AA80               	btfss	3968,5,c	;volatile
  1440  001046  D018               	goto	l220
  1441  001048  0E04               	movlw	4
  1442  00104A  6E51               	movwf	_key,c
  1443  00104C  0E78               	movlw	low _buffer2
  1444  00104E  6E0D               	movwf	sprintf@sp,c
  1445  001050  0E00               	movlw	high _buffer2
  1446  001052  6E0E               	movwf	sprintf@sp+1,c
  1447  001054  0E7D               	movlw	low STR_4
  1448  001056  6E0F               	movwf	sprintf@f,c
  1449  001058  0E0F               	movlw	high STR_4
  1450  00105A  6E10               	movwf	sprintf@f+1,c
  1451  00105C  C051  F011         	movff	_key,?_sprintf+4
  1452  001060  6A12               	clrf	?_sprintf+5,c
  1453  001062  EC10  F009         	call	_sprintf	;wreg free
  1454  001066  0E78               	movlw	low _buffer2
  1455  001068  6E09               	movwf	lcd_putrs@ptr,c
  1456  00106A  0E00               	movlw	high _buffer2
  1457  00106C  6E0A               	movwf	lcd_putrs@ptr+1,c
  1458  00106E  EC3A  F00E         	call	_lcd_putrs	;wreg free
  1459  001072  D000               	goto	l221
  1460  001074                     l221:
  1461  001074  BA80               	btfsc	3968,5,c	;volatile
  1462  001076  D7FE               	goto	l221
  1463  001078                     l220:
  1464                           
  1465                           ;keyboard.c: 19: if (PORTAbits.RA7==1){key=5;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  1466  001078  AE80               	btfss	3968,7,c	;volatile
  1467  00107A  D018               	goto	l224
  1468  00107C  0E05               	movlw	5
  1469  00107E  6E51               	movwf	_key,c
  1470  001080  0E78               	movlw	low _buffer2
  1471  001082  6E0D               	movwf	sprintf@sp,c
  1472  001084  0E00               	movlw	high _buffer2
  1473  001086  6E0E               	movwf	sprintf@sp+1,c
  1474  001088  0E7D               	movlw	low STR_4
  1475  00108A  6E0F               	movwf	sprintf@f,c
  1476  00108C  0E0F               	movlw	high STR_4
  1477  00108E  6E10               	movwf	sprintf@f+1,c
  1478  001090  C051  F011         	movff	_key,?_sprintf+4
  1479  001094  6A12               	clrf	?_sprintf+5,c
  1480  001096  EC10  F009         	call	_sprintf	;wreg free
  1481  00109A  0E78               	movlw	low _buffer2
  1482  00109C  6E09               	movwf	lcd_putrs@ptr,c
  1483  00109E  0E00               	movlw	high _buffer2
  1484  0010A0  6E0A               	movwf	lcd_putrs@ptr+1,c
  1485  0010A2  EC3A  F00E         	call	_lcd_putrs	;wreg free
  1486  0010A6  D000               	goto	l225
  1487  0010A8                     l225:
  1488  0010A8  BE80               	btfsc	3968,7,c	;volatile
  1489  0010AA  D7FE               	goto	l225
  1490  0010AC                     l224:
  1491                           
  1492                           ;keyboard.c: 20: if (PORTAbits.RA6==1){key=6;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA6==1){};}
  1493  0010AC  AC80               	btfss	3968,6,c	;volatile
  1494  0010AE  D018               	goto	l228
  1495  0010B0  0E06               	movlw	6
  1496  0010B2  6E51               	movwf	_key,c
  1497  0010B4  0E78               	movlw	low _buffer2
  1498  0010B6  6E0D               	movwf	sprintf@sp,c
  1499  0010B8  0E00               	movlw	high _buffer2
  1500  0010BA  6E0E               	movwf	sprintf@sp+1,c
  1501  0010BC  0E7D               	movlw	low STR_4
  1502  0010BE  6E0F               	movwf	sprintf@f,c
  1503  0010C0  0E0F               	movlw	high STR_4
  1504  0010C2  6E10               	movwf	sprintf@f+1,c
  1505  0010C4  C051  F011         	movff	_key,?_sprintf+4
  1506  0010C8  6A12               	clrf	?_sprintf+5,c
  1507  0010CA  EC10  F009         	call	_sprintf	;wreg free
  1508  0010CE  0E78               	movlw	low _buffer2
  1509  0010D0  6E09               	movwf	lcd_putrs@ptr,c
  1510  0010D2  0E00               	movlw	high _buffer2
  1511  0010D4  6E0A               	movwf	lcd_putrs@ptr+1,c
  1512  0010D6  EC3A  F00E         	call	_lcd_putrs	;wreg free
  1513  0010DA  D000               	goto	l229
  1514  0010DC                     l229:
  1515  0010DC  BC80               	btfsc	3968,6,c	;volatile
  1516  0010DE  D7FE               	goto	l229
  1517  0010E0                     l228:
  1518                           
  1519                           ;keyboard.c: 21: if (PORTCbits.RC2==1){key=12; while(PORTCbits.RC2==1){};}
  1520  0010E0  A482               	btfss	3970,2,c	;volatile
  1521  0010E2  D005               	goto	l232
  1522  0010E4  0E0C               	movlw	12
  1523  0010E6  6E51               	movwf	_key,c
  1524  0010E8  D000               	goto	l233
  1525  0010EA                     l233:
  1526  0010EA  B482               	btfsc	3970,2,c	;volatile
  1527  0010EC  D7FE               	goto	l233
  1528  0010EE                     l232:
  1529                           
  1530                           ;keyboard.c: 22: }
  1531                           ;keyboard.c: 23: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=1;LATAbits.LATA3=0;
  1532  0010EE  9089               	bcf	3977,0,c	;volatile
  1533  0010F0  9289               	bcf	3977,1,c	;volatile
  1534  0010F2  8489               	bsf	3977,2,c	;volatile
  1535  0010F4  9689               	bcf	3977,3,c	;volatile
  1536                           
  1537                           ;keyboard.c: 24: {
  1538                           ;keyboard.c: 25: if (PORTAbits.RA5==1){key=7;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA5==1){};}
  1539  0010F6  AA80               	btfss	3968,5,c	;volatile
  1540  0010F8  D018               	goto	l236
  1541  0010FA  0E07               	movlw	7
  1542  0010FC  6E51               	movwf	_key,c
  1543  0010FE  0E78               	movlw	low _buffer2
  1544  001100  6E0D               	movwf	sprintf@sp,c
  1545  001102  0E00               	movlw	high _buffer2
  1546  001104  6E0E               	movwf	sprintf@sp+1,c
  1547  001106  0E7D               	movlw	low STR_4
  1548  001108  6E0F               	movwf	sprintf@f,c
  1549  00110A  0E0F               	movlw	high STR_4
  1550  00110C  6E10               	movwf	sprintf@f+1,c
  1551  00110E  C051  F011         	movff	_key,?_sprintf+4
  1552  001112  6A12               	clrf	?_sprintf+5,c
  1553  001114  EC10  F009         	call	_sprintf	;wreg free
  1554  001118  0E78               	movlw	low _buffer2
  1555  00111A  6E09               	movwf	lcd_putrs@ptr,c
  1556  00111C  0E00               	movlw	high _buffer2
  1557  00111E  6E0A               	movwf	lcd_putrs@ptr+1,c
  1558  001120  EC3A  F00E         	call	_lcd_putrs	;wreg free
  1559  001124  D000               	goto	l237
  1560  001126                     l237:
  1561  001126  BA80               	btfsc	3968,5,c	;volatile
  1562  001128  D7FE               	goto	l237
  1563  00112A                     l236:
  1564                           
  1565                           ;keyboard.c: 26: if (PORTAbits.RA7==1){key=8;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  1566  00112A  AE80               	btfss	3968,7,c	;volatile
  1567  00112C  D018               	goto	l240
  1568  00112E  0E08               	movlw	8
  1569  001130  6E51               	movwf	_key,c
  1570  001132  0E78               	movlw	low _buffer2
  1571  001134  6E0D               	movwf	sprintf@sp,c
  1572  001136  0E00               	movlw	high _buffer2
  1573  001138  6E0E               	movwf	sprintf@sp+1,c
  1574  00113A  0E7D               	movlw	low STR_4
  1575  00113C  6E0F               	movwf	sprintf@f,c
  1576  00113E  0E0F               	movlw	high STR_4
  1577  001140  6E10               	movwf	sprintf@f+1,c
  1578  001142  C051  F011         	movff	_key,?_sprintf+4
  1579  001146  6A12               	clrf	?_sprintf+5,c
  1580  001148  EC10  F009         	call	_sprintf	;wreg free
  1581  00114C  0E78               	movlw	low _buffer2
  1582  00114E  6E09               	movwf	lcd_putrs@ptr,c
  1583  001150  0E00               	movlw	high _buffer2
  1584  001152  6E0A               	movwf	lcd_putrs@ptr+1,c
  1585  001154  EC3A  F00E         	call	_lcd_putrs	;wreg free
  1586  001158  D000               	goto	l241
  1587  00115A                     l241:
  1588  00115A  BE80               	btfsc	3968,7,c	;volatile
  1589  00115C  D7FE               	goto	l241
  1590  00115E                     l240:
  1591                           
  1592                           ;keyboard.c: 27: if (PORTAbits.RA6==1){key=9;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA6==1){};}
  1593  00115E  AC80               	btfss	3968,6,c	;volatile
  1594  001160  D018               	goto	l244
  1595  001162  0E09               	movlw	9
  1596  001164  6E51               	movwf	_key,c
  1597  001166  0E78               	movlw	low _buffer2
  1598  001168  6E0D               	movwf	sprintf@sp,c
  1599  00116A  0E00               	movlw	high _buffer2
  1600  00116C  6E0E               	movwf	sprintf@sp+1,c
  1601  00116E  0E7D               	movlw	low STR_4
  1602  001170  6E0F               	movwf	sprintf@f,c
  1603  001172  0E0F               	movlw	high STR_4
  1604  001174  6E10               	movwf	sprintf@f+1,c
  1605  001176  C051  F011         	movff	_key,?_sprintf+4
  1606  00117A  6A12               	clrf	?_sprintf+5,c
  1607  00117C  EC10  F009         	call	_sprintf	;wreg free
  1608  001180  0E78               	movlw	low _buffer2
  1609  001182  6E09               	movwf	lcd_putrs@ptr,c
  1610  001184  0E00               	movlw	high _buffer2
  1611  001186  6E0A               	movwf	lcd_putrs@ptr+1,c
  1612  001188  EC3A  F00E         	call	_lcd_putrs	;wreg free
  1613  00118C  D000               	goto	l245
  1614  00118E                     l245:
  1615  00118E  BC80               	btfsc	3968,6,c	;volatile
  1616  001190  D7FE               	goto	l245
  1617  001192                     l244:
  1618                           
  1619                           ;keyboard.c: 28: if (PORTCbits.RC2==1){key=13; while(PORTCbits.RC2==1){};}
  1620  001192  A482               	btfss	3970,2,c	;volatile
  1621  001194  D005               	goto	l248
  1622  001196  0E0D               	movlw	13
  1623  001198  6E51               	movwf	_key,c
  1624  00119A  D000               	goto	l249
  1625  00119C                     l249:
  1626  00119C  B482               	btfsc	3970,2,c	;volatile
  1627  00119E  D7FE               	goto	l249
  1628  0011A0                     l248:
  1629                           
  1630                           ;keyboard.c: 29: }
  1631                           ;keyboard.c: 30: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=1;
  1632  0011A0  9089               	bcf	3977,0,c	;volatile
  1633  0011A2  9289               	bcf	3977,1,c	;volatile
  1634  0011A4  9489               	bcf	3977,2,c	;volatile
  1635  0011A6  8689               	bsf	3977,3,c	;volatile
  1636                           
  1637                           ;keyboard.c: 31: {
  1638                           ;keyboard.c: 32: if (PORTAbits.RA5==1){key=14; while(PORTAbits.RA5==1){};}
  1639  0011A8  AA80               	btfss	3968,5,c	;volatile
  1640  0011AA  D005               	goto	l252
  1641  0011AC  0E0E               	movlw	14
  1642  0011AE  6E51               	movwf	_key,c
  1643  0011B0  D000               	goto	l253
  1644  0011B2                     l253:
  1645  0011B2  BA80               	btfsc	3968,5,c	;volatile
  1646  0011B4  D7FE               	goto	l253
  1647  0011B6                     l252:
  1648                           
  1649                           ;keyboard.c: 33: if (PORTAbits.RA7==1){key=0;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  1650  0011B6  AE80               	btfss	3968,7,c	;volatile
  1651  0011B8  D018               	goto	l256
  1652  0011BA  0E00               	movlw	0
  1653  0011BC  6E51               	movwf	_key,c
  1654  0011BE  0E78               	movlw	low _buffer2
  1655  0011C0  6E0D               	movwf	sprintf@sp,c
  1656  0011C2  0E00               	movlw	high _buffer2
  1657  0011C4  6E0E               	movwf	sprintf@sp+1,c
  1658  0011C6  0E7D               	movlw	low STR_4
  1659  0011C8  6E0F               	movwf	sprintf@f,c
  1660  0011CA  0E0F               	movlw	high STR_4
  1661  0011CC  6E10               	movwf	sprintf@f+1,c
  1662  0011CE  C051  F011         	movff	_key,?_sprintf+4
  1663  0011D2  6A12               	clrf	?_sprintf+5,c
  1664  0011D4  EC10  F009         	call	_sprintf	;wreg free
  1665  0011D8  0E78               	movlw	low _buffer2
  1666  0011DA  6E09               	movwf	lcd_putrs@ptr,c
  1667  0011DC  0E00               	movlw	high _buffer2
  1668  0011DE  6E0A               	movwf	lcd_putrs@ptr+1,c
  1669  0011E0  EC3A  F00E         	call	_lcd_putrs	;wreg free
  1670  0011E4  D000               	goto	l257
  1671  0011E6                     l257:
  1672  0011E6  BE80               	btfsc	3968,7,c	;volatile
  1673  0011E8  D7FE               	goto	l257
  1674  0011EA                     l256:
  1675                           
  1676                           ;keyboard.c: 34: if (PORTAbits.RA6==1){key=15; while(PORTAbits.RA6==1){};}
  1677  0011EA  AC80               	btfss	3968,6,c	;volatile
  1678  0011EC  D005               	goto	l260
  1679  0011EE  0E0F               	movlw	15
  1680  0011F0  6E51               	movwf	_key,c
  1681  0011F2  D000               	goto	l261
  1682  0011F4                     l261:
  1683  0011F4  BC80               	btfsc	3968,6,c	;volatile
  1684  0011F6  D7FE               	goto	l261
  1685  0011F8                     l260:
  1686                           
  1687                           ;keyboard.c: 35: if (PORTCbits.RC2==1){key=16; while(PORTCbits.RC2==1){};}
  1688  0011F8  A482               	btfss	3970,2,c	;volatile
  1689  0011FA  D007               	goto	l2512
  1690  0011FC  0E10               	movlw	16
  1691  0011FE  6E51               	movwf	_key,c
  1692  001200  D000               	goto	l265
  1693  001202                     l265:
  1694  001202  A482               	btfss	3970,2,c	;volatile
  1695  001204  D002               	goto	l2512
  1696  001206  D7FD               	goto	l265
  1697  001208  D000               	goto	l2512
  1698  00120A                     l2512:
  1699                           
  1700                           ;keyboard.c: 36: }
  1701                           ;keyboard.c: 37: _delay((unsigned long)((98)*(8000000/4000.0)));
  1702  00120A  0EFF               	movlw	255
  1703  00120C  6E24               	movwf	??_read_keyboard& (0+255),c
  1704  00120E  0E8A               	movlw	138
  1705  001210                     u2447:
  1706  001210  2EE8               	decfsz	wreg,f,c
  1707  001212  D7FE               	goto	u2447
  1708  001214  2E24               	decfsz	??_read_keyboard& (0+255),f,c
  1709  001216  D7FC               	goto	u2447
  1710  001218  D000               	nop2	
  1711                           
  1712                           ;keyboard.c: 40: return key;
  1713  00121A  5051               	movf	_key,w,c
  1714  00121C  0012               	return	
  1715  00121E  0012               	return		;funcret
  1716  001220                     __end_of_read_keyboard:
  1717                           	opt stack 0
  1718                           tblptru	equ	0xFF8
  1719                           tblptrh	equ	0xFF7
  1720                           tblptrl	equ	0xFF6
  1721                           tablat	equ	0xFF5
  1722                           postinc0	equ	0xFEE
  1723                           wreg	equ	0xFE8
  1724                           postdec1	equ	0xFE5
  1725                           fsr1l	equ	0xFE1
  1726                           status	equ	0xFD8
  1727                           
  1728 ;; *************** function _sprintf *****************
  1729 ;; Defined at:
  1730 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\doprnt.c"
  1731 ;; Parameters:    Size  Location     Type
  1732 ;;  sp              2   12[COMRAM] PTR unsigned char 
  1733 ;;		 -> buffer2(20), 
  1734 ;;  f               2   14[COMRAM] PTR const unsigned char 
  1735 ;;		 -> STR_15(10), STR_14(15), STR_13(5), STR_12(5), 
  1736 ;;		 -> STR_11(5), STR_10(5), STR_9(5), STR_8(5), 
  1737 ;;		 -> STR_7(5), STR_6(5), STR_5(5), STR_4(5), 
  1738 ;; Auto vars:     Size  Location     Type
  1739 ;;  tmpval          4    0        struct .
  1740 ;;  cp              3    0        PTR const unsigned char 
  1741 ;;  width           2   32[COMRAM] int 
  1742 ;;  val             2   29[COMRAM] unsigned int 
  1743 ;;  ap              2   26[COMRAM] PTR void [1]
  1744 ;;		 -> ?_sprintf(2), 
  1745 ;;  len             2    0        unsigned int 
  1746 ;;  c               1   34[COMRAM] char 
  1747 ;;  prec            1   31[COMRAM] char 
  1748 ;;  flag            1   28[COMRAM] unsigned char 
  1749 ;; Return value:  Size  Location     Type
  1750 ;;                  2   12[COMRAM] int 
  1751 ;; Registers used:
  1752 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1753 ;; Tracked objects:
  1754 ;;		On entry : 0/0
  1755 ;;		On exit  : 0/0
  1756 ;;		Unchanged: 0/0
  1757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1758 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1759 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1760 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1761 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1762 ;;Total ram usage:       23 bytes
  1763 ;; Hardware stack levels used:    1
  1764 ;; Hardware stack levels required when called:    1
  1765 ;; This function calls:
  1766 ;;		___lwdiv
  1767 ;;		___lwmod
  1768 ;;		___wmul
  1769 ;;		_isdigit
  1770 ;; This function is called by:
  1771 ;;		_read_keyboard
  1772 ;;		_write_Date
  1773 ;; This function uses a non-reentrant model
  1774 ;;
  1775                           
  1776                           	psect	text5
  1777  001220                     __ptext5:
  1778                           	opt stack 0
  1779  001220                     _sprintf:
  1780                           	opt stack 27
  1781                           
  1782                           ;doprnt.c: 494: va_list ap;
  1783                           ;doprnt.c: 499: signed char c;
  1784                           ;doprnt.c: 501: int width;
  1785                           ;doprnt.c: 506: signed char prec;
  1786                           ;doprnt.c: 508: unsigned char flag;
  1787                           ;doprnt.c: 523: union {
  1788                           ;doprnt.c: 524: unsigned long vd;
  1789                           ;doprnt.c: 525: double integ;
  1790                           ;doprnt.c: 526: } tmpval;
  1791                           ;doprnt.c: 528: unsigned int val;
  1792                           ;doprnt.c: 529: unsigned len;
  1793                           ;doprnt.c: 530: const char * cp;
  1794                           ;doprnt.c: 533: *ap = __va_start();
  1795                           
  1796                           ;incstack = 0
  1797  001220  0E11               	movlw	low (?_sprintf+4)
  1798  001222  6E1B               	movwf	sprintf@ap,c
  1799  001224  0E00               	movlw	high (?_sprintf+4)
  1800  001226  6E1C               	movwf	sprintf@ap+1,c
  1801                           
  1802                           ;doprnt.c: 536: while(c = *f++) {
  1803  001228  D117               	goto	l2378
  1804  00122A                     l2296:
  1805                           
  1806                           ;doprnt.c: 538: if(c != '%')
  1807  00122A  0E25               	movlw	37
  1808  00122C  1823               	xorwf	sprintf@c,w,c
  1809  00122E  B4D8               	btfsc	status,2,c
  1810  001230  D009               	goto	l2302
  1811                           
  1812                           ;doprnt.c: 540: {
  1813                           ;doprnt.c: 541: ((*sp++ = (c)));
  1814  001232  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1815  001236  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1816  00123A  C023  FFDF         	movff	sprintf@c,indf2
  1817  00123E  4A0D               	infsnz	sprintf@sp,f,c
  1818  001240  2A0E               	incf	sprintf@sp+1,f,c
  1819                           
  1820                           ;doprnt.c: 542: continue;
  1821  001242  D10A               	goto	l2378
  1822  001244                     l2302:
  1823                           
  1824                           ;doprnt.c: 543: }
  1825                           ;doprnt.c: 546: width = 0;
  1826  001244  0E00               	movlw	0
  1827  001246  6E22               	movwf	sprintf@width+1,c
  1828  001248  0E00               	movlw	0
  1829  00124A  6E21               	movwf	sprintf@width,c
  1830                           
  1831                           ;doprnt.c: 548: flag = 0;
  1832  00124C  0E00               	movlw	0
  1833  00124E  6E1D               	movwf	sprintf@flag,c
  1834                           
  1835                           ;doprnt.c: 551: switch(*f) {
  1836                           
  1837                           ;doprnt.c: 550: for(;;) {
  1838  001250  D005               	goto	l2308
  1839  001252                     l2304:
  1840                           
  1841                           ;doprnt.c: 580: flag |= 0x04;
  1842  001252  841D               	bsf	sprintf@flag,2,c
  1843                           
  1844                           ;doprnt.c: 581: f++;
  1845  001254  4A0F               	infsnz	sprintf@f,f,c
  1846  001256  2A10               	incf	sprintf@f+1,f,c
  1847                           
  1848                           ;doprnt.c: 582: continue;
  1849  001258  D001               	goto	l2308
  1850                           
  1851                           ;doprnt.c: 584: }
  1852  00125A  D00B               	goto	l2310
  1853  00125C                     l2308:
  1854  00125C  C00F  FFF6         	movff	sprintf@f,tblptrl
  1855  001260  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1856  001264                     	if	0	;tblptru may be non-zero
  1857  001264                     	endif
  1858  001264                     	if	0	;tblptru may be non-zero
  1859  001264                     	endif
  1860  001264  0008               	tblrd		*
  1861  001266  50F5               	movf	tablat,w,c
  1862                           
  1863                           ; Switch size 1, requested type "space"
  1864                           ; Number of cases is 1, Range of values is 48 to 48
  1865                           ; switch strategies available:
  1866                           ; Name         Instructions Cycles
  1867                           ; simple_byte            4     3 (average)
  1868                           ;	Chosen strategy is simple_byte
  1869  001268  0A30               	xorlw	48	; case 48
  1870  00126A  B4D8               	btfsc	status,2,c
  1871  00126C  D7F2               	goto	l2304
  1872                           
  1873                           ;doprnt.c: 585: break;
  1874  00126E  D001               	goto	l2310
  1875                           
  1876                           ;doprnt.c: 586: }
  1877  001270  D7F5               	goto	l2308
  1878  001272                     l2310:
  1879                           
  1880                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1881  001272  C00F  FFF6         	movff	sprintf@f,tblptrl
  1882  001276  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1883  00127A                     	if	0	;tblptru may be non-zero
  1884  00127A                     	endif
  1885  00127A                     	if	0	;tblptru may be non-zero
  1886  00127A                     	endif
  1887  00127A  0008               	tblrd		*
  1888  00127C  50F5               	movf	tablat,w,c
  1889  00127E  EC35  F00F         	call	_isdigit
  1890  001282  A0D8               	btfss	status,0,c
  1891  001284  D03A               	goto	l2326
  1892                           
  1893                           ;doprnt.c: 598: width = 0;
  1894  001286  0E00               	movlw	0
  1895  001288  6E22               	movwf	sprintf@width+1,c
  1896  00128A  0E00               	movlw	0
  1897  00128C  6E21               	movwf	sprintf@width,c
  1898  00128E  D000               	goto	l2314
  1899  001290                     l2314:
  1900                           
  1901                           ;doprnt.c: 600: width *= 10;
  1902  001290  C021  F001         	movff	sprintf@width,___wmul@multiplier
  1903  001294  C022  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  1904  001298  0E00               	movlw	0
  1905  00129A  6E04               	movwf	___wmul@multiplicand+1,c
  1906  00129C  0E0A               	movlw	10
  1907  00129E  6E03               	movwf	___wmul@multiplicand,c
  1908  0012A0  EC0F  F00F         	call	___wmul	;wreg free
  1909  0012A4  C001  F021         	movff	?___wmul,sprintf@width
  1910  0012A8  C002  F022         	movff	?___wmul+1,sprintf@width+1
  1911                           
  1912                           ;doprnt.c: 601: width += *f++ - '0';
  1913  0012AC  0ED0               	movlw	208
  1914  0012AE  6E17               	movwf	??_sprintf& (0+255),c
  1915  0012B0  0EFF               	movlw	255
  1916  0012B2  6E18               	movwf	(??_sprintf+1)& (0+255),c
  1917  0012B4  C00F  FFF6         	movff	sprintf@f,tblptrl
  1918  0012B8  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1919  0012BC                     	if	0	;tblptru may be non-zero
  1920  0012BC                     	endif
  1921  0012BC                     	if	0	;tblptru may be non-zero
  1922  0012BC                     	endif
  1923  0012BC  0008               	tblrd		*
  1924  0012BE  50F5               	movf	tablat,w,c
  1925  0012C0  6E19               	movwf	(??_sprintf+2)& (0+255),c
  1926  0012C2  6A1A               	clrf	(??_sprintf+3)& (0+255),c
  1927  0012C4  5017               	movf	??_sprintf,w,c
  1928  0012C6  2619               	addwf	??_sprintf+2,f,c
  1929  0012C8  5018               	movf	??_sprintf+1,w,c
  1930  0012CA  221A               	addwfc	??_sprintf+3,f,c
  1931  0012CC  5019               	movf	??_sprintf+2,w,c
  1932  0012CE  2621               	addwf	sprintf@width,f,c
  1933  0012D0  501A               	movf	??_sprintf+3,w,c
  1934  0012D2  2222               	addwfc	sprintf@width+1,f,c
  1935  0012D4  4A0F               	infsnz	sprintf@f,f,c
  1936  0012D6  2A10               	incf	sprintf@f+1,f,c
  1937                           
  1938                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1939  0012D8  C00F  FFF6         	movff	sprintf@f,tblptrl
  1940  0012DC  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1941  0012E0                     	if	0	;tblptru may be non-zero
  1942  0012E0                     	endif
  1943  0012E0                     	if	0	;tblptru may be non-zero
  1944  0012E0                     	endif
  1945  0012E0  0008               	tblrd		*
  1946  0012E2  50F5               	movf	tablat,w,c
  1947  0012E4  EC35  F00F         	call	_isdigit
  1948  0012E8  A0D8               	btfss	status,0,c
  1949  0012EA  D007               	goto	l2326
  1950  0012EC  D7D1               	goto	l2314
  1951                           
  1952                           ;doprnt.c: 608: }
  1953                           ;doprnt.c: 635: switch(c = *f++) {
  1954  0012EE  D005               	goto	l2326
  1955                           
  1956                           ;doprnt.c: 638: goto alldone;
  1957                           
  1958                           ;doprnt.c: 637: case 0:
  1959  0012F0  D0C1               	goto	l2380
  1960                           
  1961                           ;doprnt.c: 813: continue;
  1962                           
  1963                           ;doprnt.c: 802: default:
  1964  0012F2  D0B2               	goto	l2378
  1965  0012F4                     l2322:
  1966                           
  1967                           ;doprnt.c: 818: flag |= 0xC0;
  1968  0012F4  0EC0               	movlw	192
  1969  0012F6  121D               	iorwf	sprintf@flag,f,c
  1970                           
  1971                           ;doprnt.c: 822: }
  1972                           
  1973                           ;doprnt.c: 819: break;
  1974  0012F8  D011               	goto	l2328
  1975  0012FA                     l2326:
  1976  0012FA  C00F  FFF6         	movff	sprintf@f,tblptrl
  1977  0012FE  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1978  001302  4A0F               	infsnz	sprintf@f,f,c
  1979  001304  2A10               	incf	sprintf@f+1,f,c
  1980  001306                     	if	0	;tblptru may be non-zero
  1981  001306                     	endif
  1982  001306                     	if	0	;tblptru may be non-zero
  1983  001306                     	endif
  1984  001306  0008               	tblrd		*
  1985  001308  CFF5 F023          	movff	tablat,sprintf@c
  1986  00130C  5023               	movf	sprintf@c,w,c
  1987                           
  1988                           ; Switch size 1, requested type "space"
  1989                           ; Number of cases is 2, Range of values is 0 to 117
  1990                           ; switch strategies available:
  1991                           ; Name         Instructions Cycles
  1992                           ; simple_byte            7     4 (average)
  1993                           ;	Chosen strategy is simple_byte
  1994  00130E  0A00               	xorlw	0	; case 0
  1995  001310  B4D8               	btfsc	status,2,c
  1996  001312  D0B0               	goto	l2380
  1997  001314  0A75               	xorlw	117	; case 117
  1998  001316  B4D8               	btfsc	status,2,c
  1999  001318  D7ED               	goto	l2322
  2000  00131A  D09E               	goto	l2378
  2001  00131C                     l2328:
  2002                           
  2003                           ;doprnt.c: 1273: {
  2004                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2005  00131C  C01B  FFD9         	movff	sprintf@ap,fsr2l
  2006  001320  C01C  FFDA         	movff	sprintf@ap+1,fsr2h
  2007  001324  CFDE F01E          	movff	postinc2,sprintf@val
  2008  001328  CFDD F01F          	movff	postdec2,sprintf@val+1
  2009  00132C  0E02               	movlw	2
  2010  00132E  261B               	addwf	sprintf@ap,f,c
  2011  001330  0E00               	movlw	0
  2012  001332  221C               	addwfc	sprintf@ap+1,f,c
  2013                           
  2014                           ;doprnt.c: 1287: }
  2015                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2016  001334  0E01               	movlw	1
  2017  001336  6E23               	movwf	sprintf@c,c
  2018  001338                     l2334:
  2019  001338  0E05               	movlw	5
  2020  00133A  1823               	xorwf	sprintf@c,w,c
  2021  00133C  B4D8               	btfsc	status,2,c
  2022  00133E  D016               	goto	l2346
  2023  001340  D001               	goto	l2338
  2024  001342  D014               	goto	l2346
  2025  001344                     l2338:
  2026                           
  2027                           ;doprnt.c: 1306: if(val < dpowers[c])
  2028  001344  5023               	movf	sprintf@c,w,c
  2029  001346  0D02               	mullw	2
  2030  001348  0E01               	movlw	low _dpowers
  2031  00134A  24F3               	addwf	prodl,w,c
  2032  00134C  6EF6               	movwf	tblptrl,c
  2033  00134E  0E0F               	movlw	high _dpowers
  2034  001350  20F4               	addwfc	prodh,w,c
  2035  001352  6EF7               	movwf	tblptrh,c
  2036  001354                     	if	0	;There are less than 3 active tblptr bytes
  2037  001354                     	endif
  2038  001354  0009               	tblrd		*+
  2039  001356  50F5               	movf	tablat,w,c
  2040  001358  5C1E               	subwf	sprintf@val,w,c
  2041  00135A  0009               	tblrd		*+
  2042  00135C  50F5               	movf	tablat,w,c
  2043  00135E  581F               	subwfb	sprintf@val+1,w,c
  2044  001360  A0D8               	btfss	status,0,c
  2045  001362  D004               	goto	l2346
  2046  001364  D001               	goto	l2342
  2047                           
  2048                           ;doprnt.c: 1307: break;
  2049  001366  D002               	goto	l2346
  2050  001368                     l2342:
  2051  001368  2A23               	incf	sprintf@c,f,c
  2052  00136A  D7E6               	goto	l2334
  2053  00136C                     l2346:
  2054                           
  2055                           ;doprnt.c: 1381: if(width > c)
  2056  00136C  0E80               	movlw	128
  2057  00136E  BE23               	btfsc	sprintf@c,7,c
  2058  001370  0E7F               	movlw	127
  2059  001372  6E17               	movwf	??_sprintf& (0+255),c
  2060  001374  5021               	movf	sprintf@width,w,c
  2061  001376  5C23               	subwf	sprintf@c,w,c
  2062  001378  5022               	movf	sprintf@width+1,w,c
  2063  00137A  0A80               	xorlw	128
  2064  00137C  5817               	subwfb	??_sprintf& (0+255),w,c
  2065  00137E  B0D8               	btfsc	status,0,c
  2066  001380  D007               	goto	l2350
  2067                           
  2068                           ;doprnt.c: 1382: width -= c;
  2069  001382  5023               	movf	sprintf@c,w,c
  2070  001384  5E21               	subwf	sprintf@width,f,c
  2071  001386  0E00               	movlw	0
  2072  001388  BE23               	btfsc	sprintf@c,7,c
  2073  00138A  0EFF               	movlw	255
  2074  00138C  5A22               	subwfb	sprintf@width+1,f,c
  2075  00138E  D005               	goto	l2352
  2076  001390                     l2350:
  2077                           
  2078                           ;doprnt.c: 1383: else
  2079                           ;doprnt.c: 1384: width = 0;
  2080  001390  0E00               	movlw	0
  2081  001392  6E22               	movwf	sprintf@width+1,c
  2082  001394  0E00               	movlw	0
  2083  001396  6E21               	movwf	sprintf@width,c
  2084  001398  D000               	goto	l2352
  2085  00139A                     l2352:
  2086                           
  2087                           ;doprnt.c: 1387: if(flag & 0x04) {
  2088  00139A  A41D               	btfss	sprintf@flag,2,c
  2089  00139C  D015               	goto	l2362
  2090                           
  2091                           ;doprnt.c: 1415: if(width)
  2092  00139E  5021               	movf	sprintf@width,w,c
  2093  0013A0  1022               	iorwf	sprintf@width+1,w,c
  2094  0013A2  B4D8               	btfsc	status,2,c
  2095  0013A4  D026               	goto	l633
  2096  0013A6                     l2356:
  2097                           
  2098                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  2099  0013A6  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2100  0013AA  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2101  0013AE  0E30               	movlw	48
  2102  0013B0  6EDF               	movwf	indf2,c
  2103  0013B2  4A0D               	infsnz	sprintf@sp,f,c
  2104  0013B4  2A0E               	incf	sprintf@sp+1,f,c
  2105                           
  2106                           ;doprnt.c: 1418: while(--width);
  2107  0013B6  0621               	decf	sprintf@width,f,c
  2108  0013B8  A0D8               	btfss	status,0,c
  2109  0013BA  0622               	decf	sprintf@width+1,f,c
  2110  0013BC  5021               	movf	sprintf@width,w,c
  2111  0013BE  1022               	iorwf	sprintf@width+1,w,c
  2112  0013C0  B4D8               	btfsc	status,2,c
  2113  0013C2  D017               	goto	l633
  2114  0013C4  D7F0               	goto	l2356
  2115                           
  2116                           ;doprnt.c: 1420: } else
  2117  0013C6  D015               	goto	l633
  2118  0013C8                     l2362:
  2119                           
  2120                           ;doprnt.c: 1422: {
  2121                           ;doprnt.c: 1424: if(width
  2122                           ;doprnt.c: 1428: )
  2123  0013C8  5021               	movf	sprintf@width,w,c
  2124  0013CA  1022               	iorwf	sprintf@width+1,w,c
  2125  0013CC  B4D8               	btfsc	status,2,c
  2126  0013CE  D011               	goto	l633
  2127  0013D0                     l2364:
  2128                           
  2129                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  2130  0013D0  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2131  0013D4  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2132  0013D8  0E20               	movlw	32
  2133  0013DA  6EDF               	movwf	indf2,c
  2134  0013DC  4A0D               	infsnz	sprintf@sp,f,c
  2135  0013DE  2A0E               	incf	sprintf@sp+1,f,c
  2136                           
  2137                           ;doprnt.c: 1431: while(--width);
  2138  0013E0  0621               	decf	sprintf@width,f,c
  2139  0013E2  A0D8               	btfss	status,0,c
  2140  0013E4  0622               	decf	sprintf@width+1,f,c
  2141  0013E6  5021               	movf	sprintf@width,w,c
  2142  0013E8  1022               	iorwf	sprintf@width+1,w,c
  2143  0013EA  B4D8               	btfsc	status,2,c
  2144  0013EC  D002               	goto	l633
  2145  0013EE  D7F0               	goto	l2364
  2146  0013F0  D000               	goto	l633
  2147  0013F2                     l633:
  2148                           
  2149                           ;doprnt.c: 1469: }
  2150                           ;doprnt.c: 1472: prec = c;
  2151  0013F2  C023  F020         	movff	sprintf@c,sprintf@prec
  2152                           
  2153                           ;doprnt.c: 1474: while(prec--) {
  2154  0013F6  D02A               	goto	l2376
  2155  0013F8                     l2370:
  2156                           
  2157                           ;doprnt.c: 1478: {
  2158                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2159  0013F8  5020               	movf	sprintf@prec,w,c
  2160  0013FA  0D02               	mullw	2
  2161  0013FC  0E01               	movlw	low _dpowers
  2162  0013FE  24F3               	addwf	prodl,w,c
  2163  001400  6EF6               	movwf	tblptrl,c
  2164  001402  0E0F               	movlw	high _dpowers
  2165  001404  20F4               	addwfc	prodh,w,c
  2166  001406  6EF7               	movwf	tblptrh,c
  2167  001408                     	if	0	;There are less than 3 active tblptr bytes
  2168  001408                     	endif
  2169  001408  0009               	tblrd		*+
  2170  00140A  CFF5 F003          	movff	tablat,___lwdiv@divisor
  2171  00140E  000A               	tblrd		*-
  2172  001410  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  2173  001414  C01E  F001         	movff	sprintf@val,___lwdiv@dividend
  2174  001418  C01F  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  2175  00141C  ECE0  F00D         	call	___lwdiv	;wreg free
  2176  001420  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  2177  001424  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  2178  001428  0E00               	movlw	0
  2179  00142A  6E0B               	movwf	___lwmod@divisor+1,c
  2180  00142C  0E0A               	movlw	10
  2181  00142E  6E0A               	movwf	___lwmod@divisor,c
  2182  001430  EC64  F00E         	call	___lwmod	;wreg free
  2183  001434  5008               	movf	?___lwmod,w,c
  2184  001436  0F30               	addlw	48
  2185  001438  6E23               	movwf	sprintf@c,c
  2186                           
  2187                           ;doprnt.c: 1523: }
  2188                           ;doprnt.c: 1524: ((*sp++ = (c)));
  2189  00143A  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2190  00143E  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2191  001442  C023  FFDF         	movff	sprintf@c,indf2
  2192  001446  4A0D               	infsnz	sprintf@sp,f,c
  2193  001448  2A0E               	incf	sprintf@sp+1,f,c
  2194  00144A  D000               	goto	l2376
  2195  00144C                     l2376:
  2196  00144C  0620               	decf	sprintf@prec,f,c
  2197  00144E  2820               	incf	sprintf@prec,w,c
  2198  001450  B4D8               	btfsc	status,2,c
  2199  001452  D002               	goto	l2378
  2200  001454  D7D1               	goto	l2370
  2201  001456  D000               	goto	l2378
  2202  001458                     l2378:
  2203  001458  C00F  FFF6         	movff	sprintf@f,tblptrl
  2204  00145C  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2205  001460  4A0F               	infsnz	sprintf@f,f,c
  2206  001462  2A10               	incf	sprintf@f+1,f,c
  2207  001464                     	if	0	;tblptru may be non-zero
  2208  001464                     	endif
  2209  001464                     	if	0	;tblptru may be non-zero
  2210  001464                     	endif
  2211  001464  0008               	tblrd		*
  2212  001466  CFF5 F023          	movff	tablat,sprintf@c
  2213  00146A  5023               	movf	sprintf@c,w,c
  2214  00146C  B4D8               	btfsc	status,2,c
  2215  00146E  D002               	goto	l2380
  2216  001470  D6DC               	goto	l2296
  2217  001472  D000               	goto	l2380
  2218  001474                     l2380:
  2219                           
  2220                           ;doprnt.c: 1538: *sp = 0;
  2221  001474  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2222  001478  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2223  00147C  0E00               	movlw	0
  2224  00147E  6EDF               	movwf	indf2,c
  2225  001480  0012               	return	
  2226                           
  2227                           ;doprnt.c: 1540: return 0;
  2228                           ;	Return value of _sprintf is never used
  2229  001482  0012               	return		;funcret
  2230  001484                     __end_of_sprintf:
  2231                           	opt stack 0
  2232                           tblptru	equ	0xFF8
  2233                           tblptrh	equ	0xFF7
  2234                           tblptrl	equ	0xFF6
  2235                           tablat	equ	0xFF5
  2236                           prodh	equ	0xFF4
  2237                           prodl	equ	0xFF3
  2238                           postinc0	equ	0xFEE
  2239                           wreg	equ	0xFE8
  2240                           postdec1	equ	0xFE5
  2241                           fsr1l	equ	0xFE1
  2242                           indf2	equ	0xFDF
  2243                           postinc2	equ	0xFDE
  2244                           postdec2	equ	0xFDD
  2245                           fsr2h	equ	0xFDA
  2246                           fsr2l	equ	0xFD9
  2247                           status	equ	0xFD8
  2248                           
  2249 ;; *************** function _isdigit *****************
  2250 ;; Defined at:
  2251 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\isdigit.c"
  2252 ;; Parameters:    Size  Location     Type
  2253 ;;  c               1    wreg     unsigned char 
  2254 ;; Auto vars:     Size  Location     Type
  2255 ;;  c               1    2[COMRAM] unsigned char 
  2256 ;; Return value:  Size  Location     Type
  2257 ;;		None               void
  2258 ;; Registers used:
  2259 ;;		wreg, status,2, status,0
  2260 ;; Tracked objects:
  2261 ;;		On entry : 0/0
  2262 ;;		On exit  : 0/0
  2263 ;;		Unchanged: 0/0
  2264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2266 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2267 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2268 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2269 ;;Total ram usage:        3 bytes
  2270 ;; Hardware stack levels used:    1
  2271 ;; This function calls:
  2272 ;;		Nothing
  2273 ;; This function is called by:
  2274 ;;		_sprintf
  2275 ;; This function uses a non-reentrant model
  2276 ;;
  2277                           
  2278                           	psect	text6
  2279  001E6A                     __ptext6:
  2280                           	opt stack 0
  2281  001E6A                     _isdigit:
  2282                           	opt stack 27
  2283                           
  2284                           ;incstack = 0
  2285                           ;isdigit@c stored from wreg
  2286  001E6A  6E03               	movwf	isdigit@c,c
  2287  001E6C  0E00               	movlw	0
  2288  001E6E  6E02               	movwf	_isdigit$2329,c
  2289  001E70  0E3A               	movlw	58
  2290  001E72  6003               	cpfslt	isdigit@c,c
  2291  001E74  D006               	goto	l2238
  2292  001E76  0E2F               	movlw	47
  2293  001E78  6403               	cpfsgt	isdigit@c,c
  2294  001E7A  D003               	goto	l2238
  2295  001E7C  0E01               	movlw	1
  2296  001E7E  6E02               	movwf	_isdigit$2329,c
  2297  001E80  D000               	goto	l2238
  2298  001E82                     l2238:
  2299  001E82  C002  F001         	movff	_isdigit$2329,??_isdigit
  2300  001E86  3001               	rrcf	??_isdigit,w,c
  2301  001E88  0012               	return	
  2302  001E8A  0012               	return		;funcret
  2303  001E8C                     __end_of_isdigit:
  2304                           	opt stack 0
  2305                           tblptru	equ	0xFF8
  2306                           tblptrh	equ	0xFF7
  2307                           tblptrl	equ	0xFF6
  2308                           tablat	equ	0xFF5
  2309                           prodh	equ	0xFF4
  2310                           prodl	equ	0xFF3
  2311                           postinc0	equ	0xFEE
  2312                           wreg	equ	0xFE8
  2313                           postdec1	equ	0xFE5
  2314                           fsr1l	equ	0xFE1
  2315                           indf2	equ	0xFDF
  2316                           postinc2	equ	0xFDE
  2317                           postdec2	equ	0xFDD
  2318                           fsr2h	equ	0xFDA
  2319                           fsr2l	equ	0xFD9
  2320                           status	equ	0xFD8
  2321                           
  2322 ;; *************** function ___wmul *****************
  2323 ;; Defined at:
  2324 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\Umul16.c"
  2325 ;; Parameters:    Size  Location     Type
  2326 ;;  multiplier      2    0[COMRAM] unsigned int 
  2327 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2328 ;; Auto vars:     Size  Location     Type
  2329 ;;  product         2    4[COMRAM] unsigned int 
  2330 ;; Return value:  Size  Location     Type
  2331 ;;                  2    0[COMRAM] unsigned int 
  2332 ;; Registers used:
  2333 ;;		wreg, status,2, status,0, prodl, prodh
  2334 ;; Tracked objects:
  2335 ;;		On entry : 0/0
  2336 ;;		On exit  : 0/0
  2337 ;;		Unchanged: 0/0
  2338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2339 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2340 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2342 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2343 ;;Total ram usage:        6 bytes
  2344 ;; Hardware stack levels used:    1
  2345 ;; This function calls:
  2346 ;;		Nothing
  2347 ;; This function is called by:
  2348 ;;		_sprintf
  2349 ;; This function uses a non-reentrant model
  2350 ;;
  2351                           
  2352                           	psect	text7
  2353  001E1E                     __ptext7:
  2354                           	opt stack 0
  2355  001E1E                     ___wmul:
  2356                           	opt stack 27
  2357                           
  2358                           ;incstack = 0
  2359  001E1E  5001               	movf	___wmul@multiplier,w,c
  2360  001E20  0203               	mulwf	___wmul@multiplicand,c
  2361  001E22  CFF3 F005          	movff	prodl,___wmul@product
  2362  001E26  CFF4 F006          	movff	prodh,___wmul@product+1
  2363  001E2A  5001               	movf	___wmul@multiplier,w,c
  2364  001E2C  0204               	mulwf	___wmul@multiplicand+1,c
  2365  001E2E  50F3               	movf	prodl,w,c
  2366  001E30  2606               	addwf	___wmul@product+1,f,c
  2367  001E32  5002               	movf	___wmul@multiplier+1,w,c
  2368  001E34  0203               	mulwf	___wmul@multiplicand,c
  2369  001E36  50F3               	movf	prodl,w,c
  2370  001E38  2606               	addwf	___wmul@product+1,f,c
  2371  001E3A  C005  F001         	movff	___wmul@product,?___wmul
  2372  001E3E  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2373  001E42  0012               	return	
  2374  001E44  0012               	return		;funcret
  2375  001E46                     __end_of___wmul:
  2376                           	opt stack 0
  2377                           tblptru	equ	0xFF8
  2378                           tblptrh	equ	0xFF7
  2379                           tblptrl	equ	0xFF6
  2380                           tablat	equ	0xFF5
  2381                           prodh	equ	0xFF4
  2382                           prodl	equ	0xFF3
  2383                           postinc0	equ	0xFEE
  2384                           wreg	equ	0xFE8
  2385                           postdec1	equ	0xFE5
  2386                           fsr1l	equ	0xFE1
  2387                           indf2	equ	0xFDF
  2388                           postinc2	equ	0xFDE
  2389                           postdec2	equ	0xFDD
  2390                           fsr2h	equ	0xFDA
  2391                           fsr2l	equ	0xFD9
  2392                           status	equ	0xFD8
  2393                           
  2394 ;; *************** function ___lwmod *****************
  2395 ;; Defined at:
  2396 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lwmod.c"
  2397 ;; Parameters:    Size  Location     Type
  2398 ;;  dividend        2    7[COMRAM] unsigned int 
  2399 ;;  divisor         2    9[COMRAM] unsigned int 
  2400 ;; Auto vars:     Size  Location     Type
  2401 ;;  counter         1   11[COMRAM] unsigned char 
  2402 ;; Return value:  Size  Location     Type
  2403 ;;                  2    7[COMRAM] unsigned int 
  2404 ;; Registers used:
  2405 ;;		wreg, status,2, status,0
  2406 ;; Tracked objects:
  2407 ;;		On entry : 0/0
  2408 ;;		On exit  : 0/0
  2409 ;;		Unchanged: 0/0
  2410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2411 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2412 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2414 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2415 ;;Total ram usage:        5 bytes
  2416 ;; Hardware stack levels used:    1
  2417 ;; This function calls:
  2418 ;;		Nothing
  2419 ;; This function is called by:
  2420 ;;		_sprintf
  2421 ;; This function uses a non-reentrant model
  2422 ;;
  2423                           
  2424                           	psect	text8
  2425  001CC8                     __ptext8:
  2426                           	opt stack 0
  2427  001CC8                     ___lwmod:
  2428                           	opt stack 27
  2429                           
  2430                           ;incstack = 0
  2431  001CC8  500A               	movf	___lwmod@divisor,w,c
  2432  001CCA  100B               	iorwf	___lwmod@divisor+1,w,c
  2433  001CCC  B4D8               	btfsc	status,2,c
  2434  001CCE  D01D               	goto	l1287
  2435  001CD0  0E01               	movlw	1
  2436  001CD2  6E0C               	movwf	___lwmod@counter,c
  2437  001CD4  D005               	goto	l2276
  2438  001CD6                     l2274:
  2439  001CD6  90D8               	bcf	status,0,c
  2440  001CD8  360A               	rlcf	___lwmod@divisor,f,c
  2441  001CDA  360B               	rlcf	___lwmod@divisor+1,f,c
  2442  001CDC  2A0C               	incf	___lwmod@counter,f,c
  2443  001CDE  D000               	goto	l2276
  2444  001CE0                     l2276:
  2445  001CE0  BE0B               	btfsc	___lwmod@divisor+1,7,c
  2446  001CE2  D002               	goto	l2278
  2447  001CE4  D7F8               	goto	l2274
  2448  001CE6  D000               	goto	l2278
  2449  001CE8                     l2278:
  2450  001CE8  500A               	movf	___lwmod@divisor,w,c
  2451  001CEA  5C08               	subwf	___lwmod@dividend,w,c
  2452  001CEC  500B               	movf	___lwmod@divisor+1,w,c
  2453  001CEE  5809               	subwfb	___lwmod@dividend+1,w,c
  2454  001CF0  A0D8               	btfss	status,0,c
  2455  001CF2  D005               	goto	l2282
  2456  001CF4  500A               	movf	___lwmod@divisor,w,c
  2457  001CF6  5E08               	subwf	___lwmod@dividend,f,c
  2458  001CF8  500B               	movf	___lwmod@divisor+1,w,c
  2459  001CFA  5A09               	subwfb	___lwmod@dividend+1,f,c
  2460  001CFC  D000               	goto	l2282
  2461  001CFE                     l2282:
  2462  001CFE  90D8               	bcf	status,0,c
  2463  001D00  320B               	rrcf	___lwmod@divisor+1,f,c
  2464  001D02  320A               	rrcf	___lwmod@divisor,f,c
  2465  001D04  2E0C               	decfsz	___lwmod@counter,f,c
  2466  001D06  D7F0               	goto	l2278
  2467  001D08  D000               	goto	l1287
  2468  001D0A                     l1287:
  2469  001D0A  C008  F008         	movff	___lwmod@dividend,?___lwmod
  2470  001D0E  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  2471  001D12  0012               	return		;funcret
  2472  001D14                     __end_of___lwmod:
  2473                           	opt stack 0
  2474                           tblptru	equ	0xFF8
  2475                           tblptrh	equ	0xFF7
  2476                           tblptrl	equ	0xFF6
  2477                           tablat	equ	0xFF5
  2478                           prodh	equ	0xFF4
  2479                           prodl	equ	0xFF3
  2480                           postinc0	equ	0xFEE
  2481                           wreg	equ	0xFE8
  2482                           postdec1	equ	0xFE5
  2483                           fsr1l	equ	0xFE1
  2484                           indf2	equ	0xFDF
  2485                           postinc2	equ	0xFDE
  2486                           postdec2	equ	0xFDD
  2487                           fsr2h	equ	0xFDA
  2488                           fsr2l	equ	0xFD9
  2489                           status	equ	0xFD8
  2490                           
  2491 ;; *************** function ___lwdiv *****************
  2492 ;; Defined at:
  2493 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  2494 ;; Parameters:    Size  Location     Type
  2495 ;;  dividend        2    0[COMRAM] unsigned int 
  2496 ;;  divisor         2    2[COMRAM] unsigned int 
  2497 ;; Auto vars:     Size  Location     Type
  2498 ;;  quotient        2    4[COMRAM] unsigned int 
  2499 ;;  counter         1    6[COMRAM] unsigned char 
  2500 ;; Return value:  Size  Location     Type
  2501 ;;                  2    0[COMRAM] unsigned int 
  2502 ;; Registers used:
  2503 ;;		wreg, status,2, status,0
  2504 ;; Tracked objects:
  2505 ;;		On entry : 0/0
  2506 ;;		On exit  : 0/0
  2507 ;;		Unchanged: 0/0
  2508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2509 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2510 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2512 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2513 ;;Total ram usage:        7 bytes
  2514 ;; Hardware stack levels used:    1
  2515 ;; This function calls:
  2516 ;;		Nothing
  2517 ;; This function is called by:
  2518 ;;		_sprintf
  2519 ;; This function uses a non-reentrant model
  2520 ;;
  2521                           
  2522                           	psect	text9
  2523  001BC0                     __ptext9:
  2524                           	opt stack 0
  2525  001BC0                     ___lwdiv:
  2526                           	opt stack 27
  2527                           
  2528                           ;incstack = 0
  2529  001BC0  0E00               	movlw	0
  2530  001BC2  6E06               	movwf	___lwdiv@quotient+1,c
  2531  001BC4  0E00               	movlw	0
  2532  001BC6  6E05               	movwf	___lwdiv@quotient,c
  2533  001BC8  5003               	movf	___lwdiv@divisor,w,c
  2534  001BCA  1004               	iorwf	___lwdiv@divisor+1,w,c
  2535  001BCC  B4D8               	btfsc	status,2,c
  2536  001BCE  D021               	goto	l1277
  2537  001BD0  0E01               	movlw	1
  2538  001BD2  6E07               	movwf	___lwdiv@counter,c
  2539  001BD4  D005               	goto	l2256
  2540  001BD6                     l2254:
  2541  001BD6  90D8               	bcf	status,0,c
  2542  001BD8  3603               	rlcf	___lwdiv@divisor,f,c
  2543  001BDA  3604               	rlcf	___lwdiv@divisor+1,f,c
  2544  001BDC  2A07               	incf	___lwdiv@counter,f,c
  2545  001BDE  D000               	goto	l2256
  2546  001BE0                     l2256:
  2547  001BE0  BE04               	btfsc	___lwdiv@divisor+1,7,c
  2548  001BE2  D002               	goto	l2258
  2549  001BE4  D7F8               	goto	l2254
  2550  001BE6  D000               	goto	l2258
  2551  001BE8                     l2258:
  2552  001BE8  90D8               	bcf	status,0,c
  2553  001BEA  3605               	rlcf	___lwdiv@quotient,f,c
  2554  001BEC  3606               	rlcf	___lwdiv@quotient+1,f,c
  2555  001BEE  5003               	movf	___lwdiv@divisor,w,c
  2556  001BF0  5C01               	subwf	___lwdiv@dividend,w,c
  2557  001BF2  5004               	movf	___lwdiv@divisor+1,w,c
  2558  001BF4  5802               	subwfb	___lwdiv@dividend+1,w,c
  2559  001BF6  A0D8               	btfss	status,0,c
  2560  001BF8  D006               	goto	l2266
  2561  001BFA  5003               	movf	___lwdiv@divisor,w,c
  2562  001BFC  5E01               	subwf	___lwdiv@dividend,f,c
  2563  001BFE  5004               	movf	___lwdiv@divisor+1,w,c
  2564  001C00  5A02               	subwfb	___lwdiv@dividend+1,f,c
  2565  001C02  8005               	bsf	___lwdiv@quotient,0,c
  2566  001C04  D000               	goto	l2266
  2567  001C06                     l2266:
  2568  001C06  90D8               	bcf	status,0,c
  2569  001C08  3204               	rrcf	___lwdiv@divisor+1,f,c
  2570  001C0A  3203               	rrcf	___lwdiv@divisor,f,c
  2571  001C0C  2E07               	decfsz	___lwdiv@counter,f,c
  2572  001C0E  D7EC               	goto	l2258
  2573  001C10  D000               	goto	l1277
  2574  001C12                     l1277:
  2575  001C12  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  2576  001C16  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2577  001C1A  0012               	return		;funcret
  2578  001C1C                     __end_of___lwdiv:
  2579                           	opt stack 0
  2580                           tblptru	equ	0xFF8
  2581                           tblptrh	equ	0xFF7
  2582                           tblptrl	equ	0xFF6
  2583                           tablat	equ	0xFF5
  2584                           prodh	equ	0xFF4
  2585                           prodl	equ	0xFF3
  2586                           postinc0	equ	0xFEE
  2587                           wreg	equ	0xFE8
  2588                           postdec1	equ	0xFE5
  2589                           fsr1l	equ	0xFE1
  2590                           indf2	equ	0xFDF
  2591                           postinc2	equ	0xFDE
  2592                           postdec2	equ	0xFDD
  2593                           fsr2h	equ	0xFDA
  2594                           fsr2l	equ	0xFD9
  2595                           status	equ	0xFD8
  2596                           
  2597 ;; *************** function _lcd_putrs *****************
  2598 ;; Defined at:
  2599 ;;		line 221 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2600 ;; Parameters:    Size  Location     Type
  2601 ;;  ptr             2    8[COMRAM] PTR const unsigned char 
  2602 ;;		 -> STR_21(8), STR_20(10), STR_19(4), STR_18(3), 
  2603 ;;		 -> STR_17(11), STR_16(11), buffer2(20), STR_3(10), 
  2604 ;;		 -> STR_2(13), STR_1(33), 
  2605 ;; Auto vars:     Size  Location     Type
  2606 ;;		None
  2607 ;; Return value:  Size  Location     Type
  2608 ;;		None               void
  2609 ;; Registers used:
  2610 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2611 ;; Tracked objects:
  2612 ;;		On entry : 0/0
  2613 ;;		On exit  : 0/0
  2614 ;;		Unchanged: 0/0
  2615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2616 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2619 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2620 ;;Total ram usage:        2 bytes
  2621 ;; Hardware stack levels used:    1
  2622 ;; Hardware stack levels required when called:    4
  2623 ;; This function calls:
  2624 ;;		_lcd_putc
  2625 ;; This function is called by:
  2626 ;;		_main
  2627 ;;		_read_keyboard
  2628 ;;		_write_Date
  2629 ;;		_twinkle
  2630 ;;		_set_vision
  2631 ;; This function uses a non-reentrant model
  2632 ;;
  2633                           
  2634                           	psect	text10
  2635  001C74                     __ptext10:
  2636                           	opt stack 0
  2637  001C74                     _lcd_putrs:
  2638                           	opt stack 24
  2639                           
  2640                           ;unmc_lcd_216.c: 223: while(*ptr){
  2641                           
  2642                           ;incstack = 0
  2643  001C74  D015               	goto	l2292
  2644  001C76                     l2288:
  2645                           
  2646                           ;unmc_lcd_216.c: 224: lcd_putc(*ptr++);
  2647  001C76  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  2648  001C7A  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  2649  001C7E  6AF8               	clrf	tblptru,c
  2650  001C80  0E0E               	movlw	(high __ramtop+-1)
  2651  001C82  64F7               	cpfsgt	tblptrh,c
  2652  001C84  D003               	bra	u1397
  2653  001C86  0008               	tblrd		*
  2654  001C88  50F5               	movf	tablat,w,c
  2655  001C8A  D005               	bra	u1390
  2656  001C8C                     u1397:
  2657  001C8C  CFF6 FFE9          	movff	tblptrl,fsr0l
  2658  001C90  CFF7 FFEA          	movff	tblptrh,fsr0h
  2659  001C94  50EF               	movf	indf0,w,c
  2660  001C96                     u1390:
  2661  001C96  EC8A  F00E         	call	_lcd_putc
  2662  001C9A  4A09               	infsnz	lcd_putrs@ptr,f,c
  2663  001C9C  2A0A               	incf	lcd_putrs@ptr+1,f,c
  2664  001C9E  D000               	goto	l2292
  2665  001CA0                     l2292:
  2666  001CA0  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  2667  001CA4  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  2668  001CA8  6AF8               	clrf	tblptru,c
  2669  001CAA  0E0E               	movlw	(high __ramtop+-1)
  2670  001CAC  64F7               	cpfsgt	tblptrh,c
  2671  001CAE  D003               	bra	u1407
  2672  001CB0  0008               	tblrd		*
  2673  001CB2  50F5               	movf	tablat,w,c
  2674  001CB4  D005               	bra	u1400
  2675  001CB6                     u1407:
  2676  001CB6  CFF6 FFE9          	movff	tblptrl,fsr0l
  2677  001CBA  CFF7 FFEA          	movff	tblptrh,fsr0h
  2678  001CBE  50EF               	movf	indf0,w,c
  2679  001CC0                     u1400:
  2680  001CC0  0900               	iorlw	0
  2681  001CC2  A4D8               	btfss	status,2,c
  2682  001CC4  D7D8               	goto	l2288
  2683  001CC6  0012               	return		;funcret
  2684  001CC8                     __end_of_lcd_putrs:
  2685                           	opt stack 0
  2686                           tblptru	equ	0xFF8
  2687                           tblptrh	equ	0xFF7
  2688                           tblptrl	equ	0xFF6
  2689                           tablat	equ	0xFF5
  2690                           prodh	equ	0xFF4
  2691                           prodl	equ	0xFF3
  2692                           indf0	equ	0xFEF
  2693                           postinc0	equ	0xFEE
  2694                           fsr0h	equ	0xFEA
  2695                           fsr0l	equ	0xFE9
  2696                           wreg	equ	0xFE8
  2697                           postdec1	equ	0xFE5
  2698                           fsr1l	equ	0xFE1
  2699                           indf2	equ	0xFDF
  2700                           postinc2	equ	0xFDE
  2701                           postdec2	equ	0xFDD
  2702                           fsr2h	equ	0xFDA
  2703                           fsr2l	equ	0xFD9
  2704                           status	equ	0xFD8
  2705                           
  2706 ;; *************** function _lcd_putc *****************
  2707 ;; Defined at:
  2708 ;;		line 172 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2709 ;; Parameters:    Size  Location     Type
  2710 ;;  c               1    wreg     unsigned char 
  2711 ;; Auto vars:     Size  Location     Type
  2712 ;;  c               1    7[COMRAM] unsigned char 
  2713 ;; Return value:  Size  Location     Type
  2714 ;;		None               void
  2715 ;; Registers used:
  2716 ;;		wreg, status,2, status,0, cstack
  2717 ;; Tracked objects:
  2718 ;;		On entry : 0/0
  2719 ;;		On exit  : 0/0
  2720 ;;		Unchanged: 0/0
  2721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2723 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2725 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2726 ;;Total ram usage:        1 bytes
  2727 ;; Hardware stack levels used:    1
  2728 ;; Hardware stack levels required when called:    3
  2729 ;; This function calls:
  2730 ;;		_lcd_gotoxy
  2731 ;;		_lcd_send_byte
  2732 ;; This function is called by:
  2733 ;;		_lcd_putrs
  2734 ;;		_lcd_puts
  2735 ;; This function uses a non-reentrant model
  2736 ;;
  2737                           
  2738                           	psect	text11
  2739  001D14                     __ptext11:
  2740                           	opt stack 0
  2741  001D14                     _lcd_putc:
  2742                           	opt stack 24
  2743                           
  2744                           ;incstack = 0
  2745                           ;lcd_putc@c stored from wreg
  2746  001D14  6E08               	movwf	lcd_putc@c,c
  2747                           
  2748                           ;unmc_lcd_216.c: 173: switch(c){
  2749  001D16  D018               	goto	l2228
  2750  001D18                     l2218:
  2751                           
  2752                           ;unmc_lcd_216.c: 175: lcd_send_byte(0,1);
  2753  001D18  0E01               	movlw	1
  2754  001D1A  6E03               	movwf	lcd_send_byte@n,c
  2755  001D1C  0E00               	movlw	0
  2756  001D1E  ECF6  F00E         	call	_lcd_send_byte
  2757                           
  2758                           ;unmc_lcd_216.c: 176: break;
  2759  001D22  0012               	return	
  2760  001D24                     l2220:
  2761                           
  2762                           ;unmc_lcd_216.c: 178: lcd_gotoxy(1,2);
  2763  001D24  0E02               	movlw	2
  2764  001D26  6E05               	movwf	lcd_gotoxy@y,c
  2765  001D28  0E01               	movlw	1
  2766  001D2A  EC23  F00F         	call	_lcd_gotoxy
  2767                           
  2768                           ;unmc_lcd_216.c: 179: break;
  2769  001D2E  0012               	return	
  2770  001D30                     l2222:
  2771                           
  2772                           ;unmc_lcd_216.c: 181: lcd_send_byte(0,0x10);
  2773  001D30  0E10               	movlw	16
  2774  001D32  6E03               	movwf	lcd_send_byte@n,c
  2775  001D34  0E00               	movlw	0
  2776  001D36  ECF6  F00E         	call	_lcd_send_byte
  2777                           
  2778                           ;unmc_lcd_216.c: 182: break;
  2779  001D3A  0012               	return	
  2780  001D3C                     l2224:
  2781                           
  2782                           ;unmc_lcd_216.c: 184: lcd_send_byte(1,c);
  2783  001D3C  C008  F003         	movff	lcd_putc@c,lcd_send_byte@n
  2784  001D40  0E01               	movlw	1
  2785  001D42  ECF6  F00E         	call	_lcd_send_byte
  2786                           
  2787                           ;unmc_lcd_216.c: 186: }
  2788                           
  2789                           ;unmc_lcd_216.c: 185: break;
  2790  001D46  0012               	return	
  2791  001D48                     l2228:
  2792  001D48  5008               	movf	lcd_putc@c,w,c
  2793                           
  2794                           ; Switch size 1, requested type "space"
  2795                           ; Number of cases is 3, Range of values is 8 to 12
  2796                           ; switch strategies available:
  2797                           ; Name         Instructions Cycles
  2798                           ; simple_byte           10     6 (average)
  2799                           ;	Chosen strategy is simple_byte
  2800  001D4A  0A08               	xorlw	8	; case 8
  2801  001D4C  B4D8               	btfsc	status,2,c
  2802  001D4E  D7F0               	goto	l2222
  2803  001D50  0A02               	xorlw	2	; case 10
  2804  001D52  B4D8               	btfsc	status,2,c
  2805  001D54  D7E7               	goto	l2220
  2806  001D56  0A06               	xorlw	6	; case 12
  2807  001D58  B4D8               	btfsc	status,2,c
  2808  001D5A  D7DE               	goto	l2218
  2809  001D5C  D7EF               	goto	l2224
  2810  001D5E  0012               	return		;funcret
  2811  001D60                     __end_of_lcd_putc:
  2812                           	opt stack 0
  2813                           tblptru	equ	0xFF8
  2814                           tblptrh	equ	0xFF7
  2815                           tblptrl	equ	0xFF6
  2816                           tablat	equ	0xFF5
  2817                           prodh	equ	0xFF4
  2818                           prodl	equ	0xFF3
  2819                           indf0	equ	0xFEF
  2820                           postinc0	equ	0xFEE
  2821                           fsr0h	equ	0xFEA
  2822                           fsr0l	equ	0xFE9
  2823                           wreg	equ	0xFE8
  2824                           postdec1	equ	0xFE5
  2825                           fsr1l	equ	0xFE1
  2826                           indf2	equ	0xFDF
  2827                           postinc2	equ	0xFDE
  2828                           postdec2	equ	0xFDD
  2829                           fsr2h	equ	0xFDA
  2830                           fsr2l	equ	0xFD9
  2831                           status	equ	0xFD8
  2832                           
  2833 ;; *************** function _lcd_gotoxy *****************
  2834 ;; Defined at:
  2835 ;;		line 158 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2836 ;; Parameters:    Size  Location     Type
  2837 ;;  x               1    wreg     unsigned char 
  2838 ;;  y               1    4[COMRAM] unsigned char 
  2839 ;; Auto vars:     Size  Location     Type
  2840 ;;  x               1    5[COMRAM] unsigned char 
  2841 ;;  address         1    6[COMRAM] unsigned char 
  2842 ;; Return value:  Size  Location     Type
  2843 ;;		None               void
  2844 ;; Registers used:
  2845 ;;		wreg, status,2, status,0, cstack
  2846 ;; Tracked objects:
  2847 ;;		On entry : 0/0
  2848 ;;		On exit  : 0/0
  2849 ;;		Unchanged: 0/0
  2850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2851 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2852 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2854 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2855 ;;Total ram usage:        3 bytes
  2856 ;; Hardware stack levels used:    1
  2857 ;; Hardware stack levels required when called:    2
  2858 ;; This function calls:
  2859 ;;		_lcd_send_byte
  2860 ;; This function is called by:
  2861 ;;		_main
  2862 ;;		_lcd_putc
  2863 ;;		_write_Date
  2864 ;;		_twinkle
  2865 ;;		_set_vision
  2866 ;; This function uses a non-reentrant model
  2867 ;;
  2868                           
  2869                           	psect	text12
  2870  001E46                     __ptext12:
  2871                           	opt stack 0
  2872  001E46                     _lcd_gotoxy:
  2873                           	opt stack 24
  2874                           
  2875                           ;incstack = 0
  2876                           ;lcd_gotoxy@x stored from wreg
  2877  001E46  6E06               	movwf	lcd_gotoxy@x,c
  2878                           
  2879                           ;unmc_lcd_216.c: 159: int8 address;
  2880                           ;unmc_lcd_216.c: 161: if(y != 1)
  2881  001E48  0405               	decf	lcd_gotoxy@y,w,c
  2882  001E4A  B4D8               	btfsc	status,2,c
  2883  001E4C  D002               	goto	l2210
  2884                           
  2885                           ;unmc_lcd_216.c: 162: address = 0x40;
  2886  001E4E  0E40               	movlw	64
  2887  001E50  D001               	goto	L2
  2888  001E52                     l2210:
  2889                           
  2890                           ;unmc_lcd_216.c: 163: else
  2891                           ;unmc_lcd_216.c: 164: address=0;
  2892  001E52  0E00               	movlw	0
  2893  001E54                     L2:
  2894  001E54  6E07               	movwf	lcd_gotoxy@address,c
  2895  001E56  D000               	goto	l2212
  2896  001E58                     l2212:
  2897                           
  2898                           ;unmc_lcd_216.c: 166: address += x-1;
  2899  001E58  0406               	decf	lcd_gotoxy@x,w,c
  2900  001E5A  2607               	addwf	lcd_gotoxy@address,f,c
  2901                           
  2902                           ;unmc_lcd_216.c: 167: lcd_send_byte(0, 0x80 | address);
  2903  001E5C  5007               	movf	lcd_gotoxy@address,w,c
  2904  001E5E  0980               	iorlw	128
  2905  001E60  6E03               	movwf	lcd_send_byte@n,c
  2906  001E62  0E00               	movlw	0
  2907  001E64  ECF6  F00E         	call	_lcd_send_byte
  2908  001E68  0012               	return		;funcret
  2909  001E6A                     __end_of_lcd_gotoxy:
  2910                           	opt stack 0
  2911                           tblptru	equ	0xFF8
  2912                           tblptrh	equ	0xFF7
  2913                           tblptrl	equ	0xFF6
  2914                           tablat	equ	0xFF5
  2915                           prodh	equ	0xFF4
  2916                           prodl	equ	0xFF3
  2917                           indf0	equ	0xFEF
  2918                           postinc0	equ	0xFEE
  2919                           fsr0h	equ	0xFEA
  2920                           fsr0l	equ	0xFE9
  2921                           wreg	equ	0xFE8
  2922                           postdec1	equ	0xFE5
  2923                           fsr1l	equ	0xFE1
  2924                           indf2	equ	0xFDF
  2925                           postinc2	equ	0xFDE
  2926                           postdec2	equ	0xFDD
  2927                           fsr2h	equ	0xFDA
  2928                           fsr2l	equ	0xFD9
  2929                           status	equ	0xFD8
  2930                           
  2931 ;; *************** function __delay_s *****************
  2932 ;; Defined at:
  2933 ;;		line 19 in file "lcd_vision.c"
  2934 ;; Parameters:    Size  Location     Type
  2935 ;;  millis          2    8[COMRAM] int 
  2936 ;; Auto vars:     Size  Location     Type
  2937 ;;  index           2   13[COMRAM] short 
  2938 ;;  it              2   11[COMRAM] short 
  2939 ;; Return value:  Size  Location     Type
  2940 ;;		None               void
  2941 ;; Registers used:
  2942 ;;		wreg, status,2, status,0, cstack
  2943 ;; Tracked objects:
  2944 ;;		On entry : 0/0
  2945 ;;		On exit  : 0/0
  2946 ;;		Unchanged: 0/0
  2947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2948 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2949 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2950 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2951 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2952 ;;Total ram usage:        7 bytes
  2953 ;; Hardware stack levels used:    1
  2954 ;; Hardware stack levels required when called:    1
  2955 ;; This function calls:
  2956 ;;		___awdiv
  2957 ;; This function is called by:
  2958 ;;		_twinkle
  2959 ;; This function uses a non-reentrant model
  2960 ;;
  2961                           
  2962                           	psect	text13
  2963  001C1C                     __ptext13:
  2964                           	opt stack 0
  2965  001C1C                     __delay_s:
  2966                           	opt stack 27
  2967                           
  2968                           ;lcd_vision.c: 20: short it = millis/100;
  2969                           
  2970                           ;incstack = 0
  2971  001C1C  C009  F001         	movff	__delay_s@millis,___awdiv@dividend
  2972  001C20  C00A  F002         	movff	__delay_s@millis+1,___awdiv@dividend+1
  2973  001C24  0E00               	movlw	0
  2974  001C26  6E04               	movwf	___awdiv@divisor+1,c
  2975  001C28  0E64               	movlw	100
  2976  001C2A  6E03               	movwf	___awdiv@divisor,c
  2977  001C2C  EC6E  F00C         	call	___awdiv	;wreg free
  2978  001C30  C001  F00C         	movff	?___awdiv,__delay_s@it
  2979  001C34  C002  F00D         	movff	?___awdiv+1,__delay_s@it+1
  2980                           
  2981                           ;lcd_vision.c: 21: short index = 1;
  2982  001C38  0E00               	movlw	0
  2983  001C3A  6E0F               	movwf	__delay_s@index+1,c
  2984  001C3C  0E01               	movlw	1
  2985  001C3E  6E0E               	movwf	__delay_s@index,c
  2986                           
  2987                           ;lcd_vision.c: 23: for(index = 1; index <= it; index++){
  2988  001C40  0E00               	movlw	0
  2989  001C42  6E0F               	movwf	__delay_s@index+1,c
  2990  001C44  0E01               	movlw	1
  2991  001C46  6E0E               	movwf	__delay_s@index,c
  2992  001C48  D00A               	goto	l574
  2993  001C4A                     l2660:
  2994                           
  2995                           ;lcd_vision.c: 24: _delay((unsigned long)((98)*(8000000/4000.0)));
  2996  001C4A  0EFF               	movlw	255
  2997  001C4C  6E0B               	movwf	??__delay_s& (0+255),c
  2998  001C4E  0E8A               	movlw	138
  2999  001C50                     u2457:
  3000  001C50  2EE8               	decfsz	wreg,f,c
  3001  001C52  D7FE               	goto	u2457
  3002  001C54  2E0B               	decfsz	??__delay_s& (0+255),f,c
  3003  001C56  D7FC               	goto	u2457
  3004  001C58  D000               	nop2	
  3005  001C5A  4A0E               	infsnz	__delay_s@index,f,c
  3006  001C5C  2A0F               	incf	__delay_s@index+1,f,c
  3007  001C5E                     l574:
  3008  001C5E  500E               	movf	__delay_s@index,w,c
  3009  001C60  5C0C               	subwf	__delay_s@it,w,c
  3010  001C62  500D               	movf	__delay_s@it+1,w,c
  3011  001C64  0A80               	xorlw	128
  3012  001C66  6E0B               	movwf	??__delay_s& (0+255),c
  3013  001C68  500F               	movf	__delay_s@index+1,w,c
  3014  001C6A  0A80               	xorlw	128
  3015  001C6C  580B               	subwfb	??__delay_s& (0+255),w,c
  3016  001C6E  B0D8               	btfsc	status,0,c
  3017  001C70  D7EC               	goto	l2660
  3018  001C72  0012               	return		;funcret
  3019  001C74                     __end_of__delay_s:
  3020                           	opt stack 0
  3021                           tblptru	equ	0xFF8
  3022                           tblptrh	equ	0xFF7
  3023                           tblptrl	equ	0xFF6
  3024                           tablat	equ	0xFF5
  3025                           prodh	equ	0xFF4
  3026                           prodl	equ	0xFF3
  3027                           indf0	equ	0xFEF
  3028                           postinc0	equ	0xFEE
  3029                           fsr0h	equ	0xFEA
  3030                           fsr0l	equ	0xFE9
  3031                           wreg	equ	0xFE8
  3032                           postdec1	equ	0xFE5
  3033                           fsr1l	equ	0xFE1
  3034                           indf2	equ	0xFDF
  3035                           postinc2	equ	0xFDE
  3036                           postdec2	equ	0xFDD
  3037                           fsr2h	equ	0xFDA
  3038                           fsr2l	equ	0xFD9
  3039                           status	equ	0xFD8
  3040                           
  3041 ;; *************** function _lcd_setcursor_vb *****************
  3042 ;; Defined at:
  3043 ;;		line 210 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3044 ;; Parameters:    Size  Location     Type
  3045 ;;  visible         1    wreg     unsigned char 
  3046 ;;  blink           1    4[COMRAM] unsigned char 
  3047 ;; Auto vars:     Size  Location     Type
  3048 ;;  visible         1    5[COMRAM] unsigned char 
  3049 ;; Return value:  Size  Location     Type
  3050 ;;		None               void
  3051 ;; Registers used:
  3052 ;;		wreg, status,2, status,0, cstack
  3053 ;; Tracked objects:
  3054 ;;		On entry : 0/0
  3055 ;;		On exit  : 0/0
  3056 ;;		Unchanged: 0/0
  3057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3058 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3059 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3061 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3062 ;;Total ram usage:        2 bytes
  3063 ;; Hardware stack levels used:    1
  3064 ;; Hardware stack levels required when called:    2
  3065 ;; This function calls:
  3066 ;;		_lcd_send_byte
  3067 ;; This function is called by:
  3068 ;;		_set_vision
  3069 ;;		_jumpIfNotNumber
  3070 ;; This function uses a non-reentrant model
  3071 ;;
  3072                           
  3073                           	psect	text14
  3074  001EA2                     __ptext14:
  3075                           	opt stack 0
  3076  001EA2                     _lcd_setcursor_vb:
  3077                           	opt stack 27
  3078                           
  3079                           ;incstack = 0
  3080                           ;lcd_setcursor_vb@visible stored from wreg
  3081  001EA2  6E06               	movwf	lcd_setcursor_vb@visible,c
  3082                           
  3083                           ;unmc_lcd_216.c: 211: lcd_send_byte(0, 0xC|(visible<<1)|blink);
  3084  001EA4  5006               	movf	lcd_setcursor_vb@visible,w,c
  3085  001EA6  2406               	addwf	lcd_setcursor_vb@visible,w,c
  3086  001EA8  1005               	iorwf	lcd_setcursor_vb@blink,w,c
  3087  001EAA  090C               	iorlw	12
  3088  001EAC  6E03               	movwf	lcd_send_byte@n,c
  3089  001EAE  0E00               	movlw	0
  3090  001EB0  ECF6  F00E         	call	_lcd_send_byte
  3091  001EB4  0012               	return		;funcret
  3092  001EB6                     __end_of_lcd_setcursor_vb:
  3093                           	opt stack 0
  3094                           tblptru	equ	0xFF8
  3095                           tblptrh	equ	0xFF7
  3096                           tblptrl	equ	0xFF6
  3097                           tablat	equ	0xFF5
  3098                           prodh	equ	0xFF4
  3099                           prodl	equ	0xFF3
  3100                           indf0	equ	0xFEF
  3101                           postinc0	equ	0xFEE
  3102                           fsr0h	equ	0xFEA
  3103                           fsr0l	equ	0xFE9
  3104                           wreg	equ	0xFE8
  3105                           postdec1	equ	0xFE5
  3106                           fsr1l	equ	0xFE1
  3107                           indf2	equ	0xFDF
  3108                           postinc2	equ	0xFDE
  3109                           postdec2	equ	0xFDD
  3110                           fsr2h	equ	0xFDA
  3111                           fsr2l	equ	0xFD9
  3112                           status	equ	0xFD8
  3113                           
  3114 ;; *************** function _clear_keyboard *****************
  3115 ;; Defined at:
  3116 ;;		line 4 in file "keyboard.c"
  3117 ;; Parameters:    Size  Location     Type
  3118 ;;		None
  3119 ;; Auto vars:     Size  Location     Type
  3120 ;;		None
  3121 ;; Return value:  Size  Location     Type
  3122 ;;		None               void
  3123 ;; Registers used:
  3124 ;;		wreg, status,2
  3125 ;; Tracked objects:
  3126 ;;		On entry : 0/0
  3127 ;;		On exit  : 0/0
  3128 ;;		Unchanged: 0/0
  3129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3131 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3133 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3134 ;;Total ram usage:        0 bytes
  3135 ;; Hardware stack levels used:    1
  3136 ;; This function calls:
  3137 ;;		Nothing
  3138 ;; This function is called by:
  3139 ;;		_set_vision
  3140 ;; This function uses a non-reentrant model
  3141 ;;
  3142                           
  3143                           	psect	text15
  3144  001F10                     __ptext15:
  3145                           	opt stack 0
  3146  001F10                     _clear_keyboard:
  3147                           	opt stack 29
  3148                           
  3149                           ;keyboard.c: 5: key = 18;
  3150                           
  3151                           ;incstack = 0
  3152  001F10  0E12               	movlw	18
  3153  001F12  6E51               	movwf	_key,c
  3154  001F14  0012               	return		;funcret
  3155  001F16                     __end_of_clear_keyboard:
  3156                           	opt stack 0
  3157                           tblptru	equ	0xFF8
  3158                           tblptrh	equ	0xFF7
  3159                           tblptrl	equ	0xFF6
  3160                           tablat	equ	0xFF5
  3161                           prodh	equ	0xFF4
  3162                           prodl	equ	0xFF3
  3163                           indf0	equ	0xFEF
  3164                           postinc0	equ	0xFEE
  3165                           fsr0h	equ	0xFEA
  3166                           fsr0l	equ	0xFE9
  3167                           wreg	equ	0xFE8
  3168                           postdec1	equ	0xFE5
  3169                           fsr1l	equ	0xFE1
  3170                           indf2	equ	0xFDF
  3171                           postinc2	equ	0xFDE
  3172                           postdec2	equ	0xFDD
  3173                           fsr2h	equ	0xFDA
  3174                           fsr2l	equ	0xFD9
  3175                           status	equ	0xFD8
  3176                           
  3177 ;; *************** function _clear *****************
  3178 ;; Defined at:
  3179 ;;		line 5 in file "lcd_vision.c"
  3180 ;; Parameters:    Size  Location     Type
  3181 ;;		None
  3182 ;; Auto vars:     Size  Location     Type
  3183 ;;		None
  3184 ;; Return value:  Size  Location     Type
  3185 ;;		None               void
  3186 ;; Registers used:
  3187 ;;		wreg, status,2, status,0, cstack
  3188 ;; Tracked objects:
  3189 ;;		On entry : 0/0
  3190 ;;		On exit  : 0/0
  3191 ;;		Unchanged: 0/0
  3192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3195 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3196 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3197 ;;Total ram usage:        1 bytes
  3198 ;; Hardware stack levels used:    1
  3199 ;; Hardware stack levels required when called:    3
  3200 ;; This function calls:
  3201 ;;		_lcd_comand
  3202 ;; This function is called by:
  3203 ;;		_set_vision
  3204 ;; This function uses a non-reentrant model
  3205 ;;
  3206                           
  3207                           	psect	text16
  3208  001E8C                     __ptext16:
  3209                           	opt stack 0
  3210  001E8C                     _clear:
  3211                           	opt stack 26
  3212                           
  3213                           ;lcd_vision.c: 6: lcd_comand(0b00000001);
  3214                           
  3215                           ;incstack = 0
  3216  001E8C  0E01               	movlw	1
  3217  001E8E  EC7D  F00F         	call	_lcd_comand
  3218                           
  3219                           ;lcd_vision.c: 7: _delay((unsigned long)((5)*(8000000/4000.0)));
  3220  001E92  0E0D               	movlw	13
  3221  001E94  6E06               	movwf	??_clear& (0+255),c
  3222  001E96  0EFC               	movlw	252
  3223  001E98                     u2467:
  3224  001E98  2EE8               	decfsz	wreg,f,c
  3225  001E9A  D7FE               	goto	u2467
  3226  001E9C  2E06               	decfsz	??_clear& (0+255),f,c
  3227  001E9E  D7FC               	goto	u2467
  3228  001EA0  0012               	return		;funcret
  3229  001EA2                     __end_of_clear:
  3230                           	opt stack 0
  3231                           tblptru	equ	0xFF8
  3232                           tblptrh	equ	0xFF7
  3233                           tblptrl	equ	0xFF6
  3234                           tablat	equ	0xFF5
  3235                           prodh	equ	0xFF4
  3236                           prodl	equ	0xFF3
  3237                           indf0	equ	0xFEF
  3238                           postinc0	equ	0xFEE
  3239                           fsr0h	equ	0xFEA
  3240                           fsr0l	equ	0xFE9
  3241                           wreg	equ	0xFE8
  3242                           postdec1	equ	0xFE5
  3243                           fsr1l	equ	0xFE1
  3244                           indf2	equ	0xFDF
  3245                           postinc2	equ	0xFDE
  3246                           postdec2	equ	0xFDD
  3247                           fsr2h	equ	0xFDA
  3248                           fsr2l	equ	0xFD9
  3249                           status	equ	0xFD8
  3250                           
  3251 ;; *************** function _caratula *****************
  3252 ;; Defined at:
  3253 ;;		line 31 in file "main.c"
  3254 ;; Parameters:    Size  Location     Type
  3255 ;;		None
  3256 ;; Auto vars:     Size  Location     Type
  3257 ;;		None
  3258 ;; Return value:  Size  Location     Type
  3259 ;;		None               void
  3260 ;; Registers used:
  3261 ;;		wreg, status,2, status,0, cstack
  3262 ;; Tracked objects:
  3263 ;;		On entry : 0/0
  3264 ;;		On exit  : 0/0
  3265 ;;		Unchanged: 0/0
  3266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3270 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3271 ;;Total ram usage:        0 bytes
  3272 ;; Hardware stack levels used:    1
  3273 ;; Hardware stack levels required when called:    3
  3274 ;; This function calls:
  3275 ;;		_lcd_comand
  3276 ;; This function is called by:
  3277 ;;		_main
  3278 ;; This function uses a non-reentrant model
  3279 ;;
  3280                           
  3281                           	psect	text17
  3282  001F08                     __ptext17:
  3283                           	opt stack 0
  3284  001F08                     _caratula:
  3285                           	opt stack 27
  3286                           
  3287                           ;main.c: 33: lcd_comand(0b00001100);
  3288                           
  3289                           ;incstack = 0
  3290  001F08  0E0C               	movlw	12
  3291  001F0A  EC7D  F00F         	call	_lcd_comand
  3292  001F0E  0012               	return		;funcret
  3293  001F10                     __end_of_caratula:
  3294                           	opt stack 0
  3295                           tblptru	equ	0xFF8
  3296                           tblptrh	equ	0xFF7
  3297                           tblptrl	equ	0xFF6
  3298                           tablat	equ	0xFF5
  3299                           prodh	equ	0xFF4
  3300                           prodl	equ	0xFF3
  3301                           indf0	equ	0xFEF
  3302                           postinc0	equ	0xFEE
  3303                           fsr0h	equ	0xFEA
  3304                           fsr0l	equ	0xFE9
  3305                           wreg	equ	0xFE8
  3306                           postdec1	equ	0xFE5
  3307                           fsr1l	equ	0xFE1
  3308                           indf2	equ	0xFDF
  3309                           postinc2	equ	0xFDE
  3310                           postdec2	equ	0xFDD
  3311                           fsr2h	equ	0xFDA
  3312                           fsr2l	equ	0xFD9
  3313                           status	equ	0xFD8
  3314                           
  3315 ;; *************** function _Setup *****************
  3316 ;; Defined at:
  3317 ;;		line 51 in file "main.c"
  3318 ;; Parameters:    Size  Location     Type
  3319 ;;		None
  3320 ;; Auto vars:     Size  Location     Type
  3321 ;;		None
  3322 ;; Return value:  Size  Location     Type
  3323 ;;		None               void
  3324 ;; Registers used:
  3325 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3326 ;; Tracked objects:
  3327 ;;		On entry : 0/0
  3328 ;;		On exit  : 0/0
  3329 ;;		Unchanged: 0/0
  3330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3334 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3335 ;;Total ram usage:        0 bytes
  3336 ;; Hardware stack levels used:    1
  3337 ;; Hardware stack levels required when called:    3
  3338 ;; This function calls:
  3339 ;;		_Write_RTC
  3340 ;;		_lcd_comand
  3341 ;;		_lcd_init
  3342 ;; This function is called by:
  3343 ;;		_main
  3344 ;; This function uses a non-reentrant model
  3345 ;;
  3346                           
  3347                           	psect	text18
  3348  001D60                     __ptext18:
  3349                           	opt stack 0
  3350  001D60                     _Setup:
  3351                           	opt stack 27
  3352                           
  3353                           ;main.c: 53: OSCTUNEbits.INTSRC=1;
  3354                           
  3355                           ;incstack = 0
  3356  001D60  8E9B               	bsf	3995,7,c	;volatile
  3357                           
  3358                           ;main.c: 54: OSCTUNEbits.PLLEN=0;
  3359  001D62  9C9B               	bcf	3995,6,c	;volatile
  3360                           
  3361                           ;main.c: 55: OSCCONbits.IRCF0=1;
  3362  001D64  88D3               	bsf	4051,4,c	;volatile
  3363                           
  3364                           ;main.c: 56: OSCCONbits.IRCF1=1;
  3365  001D66  8AD3               	bsf	4051,5,c	;volatile
  3366                           
  3367                           ;main.c: 57: OSCCONbits.IRCF2=1;
  3368  001D68  8CD3               	bsf	4051,6,c	;volatile
  3369                           
  3370                           ;main.c: 58: OSCCONbits.SCS0=0;
  3371  001D6A  90D3               	bcf	4051,0,c	;volatile
  3372                           
  3373                           ;main.c: 59: OSCCONbits.SCS1=0;
  3374  001D6C  92D3               	bcf	4051,1,c	;volatile
  3375                           
  3376                           ;main.c: 60: TRISA = 0b11110000;
  3377  001D6E  0EF0               	movlw	240
  3378  001D70  6E92               	movwf	3986,c	;volatile
  3379                           
  3380                           ;main.c: 61: TRISB = 0;
  3381  001D72  0E00               	movlw	0
  3382  001D74  6E93               	movwf	3987,c	;volatile
  3383                           
  3384                           ;main.c: 62: TRISC = 0b00000111;
  3385  001D76  0E07               	movlw	7
  3386  001D78  6E94               	movwf	3988,c	;volatile
  3387                           
  3388                           ;main.c: 66: ANCON0=0b11111111;
  3389  001D7A  010F               	movlb	15	; () banked
  3390  001D7C  6948               	setf	72,b	;volatile
  3391                           
  3392                           ; BSR set to: 15
  3393                           ;main.c: 68: ANCON1=0b11111111;
  3394  001D7E  010F               	movlb	15	; () banked
  3395  001D80  6949               	setf	73,b	;volatile
  3396                           
  3397                           ;main.c: 69: ADCON0=0b00101101;
  3398  001D82  0E2D               	movlw	45
  3399  001D84  6EC2               	movwf	4034,c	;volatile
  3400                           
  3401                           ;main.c: 70: ADCON1=0b00010000;
  3402  001D86  0E10               	movlw	16
  3403  001D88  6EC1               	movwf	4033,c	;volatile
  3404                           
  3405                           ; BSR set to: 15
  3406                           ;main.c: 71: RTCCFGbits.RTCEN=1;
  3407  001D8A  010F               	movlb	15	; () banked
  3408  001D8C  8F3F               	bsf	63,7,b	;volatile
  3409                           
  3410                           ; BSR set to: 15
  3411                           ;main.c: 72: RTCCFGbits.RTCWREN=1;
  3412  001D8E  010F               	movlb	15	; () banked
  3413  001D90  8B3F               	bsf	63,5,b	;volatile
  3414                           
  3415                           ; BSR set to: 15
  3416                           ;main.c: 73: T1CONbits.T1OSCEN=1;
  3417  001D92  86CD               	bsf	4045,3,c	;volatile
  3418                           
  3419                           ; BSR set to: 15
  3420                           ;main.c: 74: Write_RTC();
  3421  001D94  EC42  F00A         	call	_Write_RTC	;wreg free
  3422                           
  3423                           ;main.c: 75: lcd_init();
  3424  001D98  ECB9  F00C         	call	_lcd_init	;wreg free
  3425                           
  3426                           ;main.c: 76: lcd_comand(0b00001100);
  3427  001D9C  0E0C               	movlw	12
  3428  001D9E  EC7D  F00F         	call	_lcd_comand
  3429                           
  3430                           ;main.c: 77: LATBbits.LATB1 = 1;;
  3431  001DA2  828A               	bsf	3978,1,c	;volatile
  3432                           
  3433                           ;main.c: 78: LATBbits.LATB0 = 1;;
  3434  001DA4  808A               	bsf	3978,0,c	;volatile
  3435  001DA6  0012               	return		;funcret
  3436  001DA8                     __end_of_Setup:
  3437                           	opt stack 0
  3438                           tblptru	equ	0xFF8
  3439                           tblptrh	equ	0xFF7
  3440                           tblptrl	equ	0xFF6
  3441                           tablat	equ	0xFF5
  3442                           prodh	equ	0xFF4
  3443                           prodl	equ	0xFF3
  3444                           indf0	equ	0xFEF
  3445                           postinc0	equ	0xFEE
  3446                           fsr0h	equ	0xFEA
  3447                           fsr0l	equ	0xFE9
  3448                           wreg	equ	0xFE8
  3449                           postdec1	equ	0xFE5
  3450                           fsr1l	equ	0xFE1
  3451                           indf2	equ	0xFDF
  3452                           postinc2	equ	0xFDE
  3453                           postdec2	equ	0xFDD
  3454                           fsr2h	equ	0xFDA
  3455                           fsr2l	equ	0xFD9
  3456                           status	equ	0xFD8
  3457                           
  3458 ;; *************** function _lcd_init *****************
  3459 ;; Defined at:
  3460 ;;		line 119 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3461 ;; Parameters:    Size  Location     Type
  3462 ;;		None
  3463 ;; Auto vars:     Size  Location     Type
  3464 ;;  i               1    4[COMRAM] unsigned char 
  3465 ;; Return value:  Size  Location     Type
  3466 ;;		None               void
  3467 ;; Registers used:
  3468 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3469 ;; Tracked objects:
  3470 ;;		On entry : 0/0
  3471 ;;		On exit  : 0/0
  3472 ;;		Unchanged: 0/0
  3473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3475 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3477 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3478 ;;Total ram usage:        1 bytes
  3479 ;; Hardware stack levels used:    1
  3480 ;; Hardware stack levels required when called:    2
  3481 ;; This function calls:
  3482 ;;		_Delay1KTCYx
  3483 ;;		_lcd_send_byte
  3484 ;;		_lcd_send_nibble
  3485 ;; This function is called by:
  3486 ;;		_Setup
  3487 ;; This function uses a non-reentrant model
  3488 ;;
  3489                           
  3490                           	psect	text19
  3491  001972                     __ptext19:
  3492                           	opt stack 0
  3493  001972                     _lcd_init:
  3494                           	opt stack 27
  3495                           
  3496                           ;unmc_lcd_216.c: 120: int8 i;
  3497                           ;unmc_lcd_216.c: 122: TRISBbits.TRISB3=0;
  3498                           
  3499                           ;incstack = 0
  3500  001972  9693               	bcf	3987,3,c	;volatile
  3501                           
  3502                           ;unmc_lcd_216.c: 123: TRISBbits.TRISB2=0;
  3503  001974  9493               	bcf	3987,2,c	;volatile
  3504                           
  3505                           ;unmc_lcd_216.c: 128: LATBbits.LATB3=0;
  3506  001976  968A               	bcf	3978,3,c	;volatile
  3507                           
  3508                           ;unmc_lcd_216.c: 129: LATBbits.LATB2=0;
  3509  001978  948A               	bcf	3978,2,c	;volatile
  3510                           
  3511                           ;unmc_lcd_216.c: 134: TRISBbits.TRISB4=0;
  3512  00197A  9893               	bcf	3987,4,c	;volatile
  3513                           
  3514                           ;unmc_lcd_216.c: 135: TRISBbits.TRISB5=0;
  3515  00197C  9A93               	bcf	3987,5,c	;volatile
  3516                           
  3517                           ;unmc_lcd_216.c: 136: TRISBbits.TRISB6=0;
  3518  00197E  9C93               	bcf	3987,6,c	;volatile
  3519                           
  3520                           ;unmc_lcd_216.c: 137: TRISBbits.TRISB7=0;
  3521  001980  9E93               	bcf	3987,7,c	;volatile
  3522                           
  3523                           ;unmc_lcd_216.c: 139: Delay1KTCYx(8000000UL/800000UL);
  3524  001982  0E0A               	movlw	10
  3525  001984  EC5B  F00F         	call	_Delay1KTCYx
  3526                           
  3527                           ;unmc_lcd_216.c: 140: Delay1KTCYx(8000000UL/800000UL);
  3528  001988  0E0A               	movlw	10
  3529  00198A  EC5B  F00F         	call	_Delay1KTCYx
  3530                           
  3531                           ;unmc_lcd_216.c: 141: Delay1KTCYx(8000000UL/800000UL);
  3532  00198E  0E0A               	movlw	10
  3533  001990  EC5B  F00F         	call	_Delay1KTCYx
  3534                           
  3535                           ;unmc_lcd_216.c: 143: for(i=0 ;i < 3; i++){
  3536  001994  0E00               	movlw	0
  3537  001996  6E05               	movwf	lcd_init@i,c
  3538  001998                     l2720:
  3539  001998  0E02               	movlw	2
  3540  00199A  6405               	cpfsgt	lcd_init@i,c
  3541  00199C  D001               	goto	l2724
  3542  00199E  D008               	goto	l2730
  3543  0019A0                     l2724:
  3544                           
  3545                           ;unmc_lcd_216.c: 144: lcd_send_nibble(0x03);
  3546  0019A0  0E03               	movlw	3
  3547  0019A2  EC76  F00D         	call	_lcd_send_nibble
  3548                           
  3549                           ;unmc_lcd_216.c: 145: Delay1KTCYx(8000000UL/800000UL);
  3550  0019A6  0E0A               	movlw	10
  3551  0019A8  EC5B  F00F         	call	_Delay1KTCYx
  3552  0019AC  2A05               	incf	lcd_init@i,f,c
  3553  0019AE  D7F4               	goto	l2720
  3554  0019B0                     l2730:
  3555                           
  3556                           ;unmc_lcd_216.c: 146: }
  3557                           ;unmc_lcd_216.c: 148: lcd_send_nibble(0x02);
  3558  0019B0  0E02               	movlw	2
  3559  0019B2  EC76  F00D         	call	_lcd_send_nibble
  3560                           
  3561                           ;unmc_lcd_216.c: 150: for(i=0; i < sizeof(LCD_INIT_STRING); i++){
  3562  0019B6  0E00               	movlw	0
  3563  0019B8  6E05               	movwf	lcd_init@i,c
  3564  0019BA  0E03               	movlw	3
  3565  0019BC  6405               	cpfsgt	lcd_init@i,c
  3566  0019BE  D002               	goto	l2738
  3567  0019C0  0012               	return	
  3568  0019C2  0012               	return	
  3569  0019C4                     l2738:
  3570                           
  3571                           ;unmc_lcd_216.c: 151: lcd_send_byte(0, LCD_INIT_STRING[i]);
  3572  0019C4  5005               	movf	lcd_init@i,w,c
  3573  0019C6  0D01               	mullw	1
  3574  0019C8  0E0B               	movlw	low _LCD_INIT_STRING
  3575  0019CA  24F3               	addwf	prodl,w,c
  3576  0019CC  6EF6               	movwf	tblptrl,c
  3577  0019CE  0E0F               	movlw	high _LCD_INIT_STRING
  3578  0019D0  20F4               	addwfc	prodh,w,c
  3579  0019D2  6EF7               	movwf	tblptrh,c
  3580  0019D4                     	if	0	;There are less than 3 active tblptr bytes
  3581  0019D4                     	endif
  3582  0019D4  0008               	tblrd		*
  3583  0019D6  CFF5 F003          	movff	tablat,lcd_send_byte@n
  3584  0019DA  0E00               	movlw	0
  3585  0019DC  ECF6  F00E         	call	_lcd_send_byte
  3586                           
  3587                           ;unmc_lcd_216.c: 153: Delay1KTCYx(8000000UL/800000UL);
  3588  0019E0  0E0A               	movlw	10
  3589  0019E2  EC5B  F00F         	call	_Delay1KTCYx
  3590  0019E6  2A05               	incf	lcd_init@i,f,c
  3591  0019E8  0E03               	movlw	3
  3592  0019EA  6405               	cpfsgt	lcd_init@i,c
  3593  0019EC  D7EB               	goto	l2738
  3594  0019EE  0012               	return	
  3595  0019F0  0012               	return		;funcret
  3596  0019F2                     __end_of_lcd_init:
  3597                           	opt stack 0
  3598                           tblptru	equ	0xFF8
  3599                           tblptrh	equ	0xFF7
  3600                           tblptrl	equ	0xFF6
  3601                           tablat	equ	0xFF5
  3602                           prodh	equ	0xFF4
  3603                           prodl	equ	0xFF3
  3604                           indf0	equ	0xFEF
  3605                           postinc0	equ	0xFEE
  3606                           fsr0h	equ	0xFEA
  3607                           fsr0l	equ	0xFE9
  3608                           wreg	equ	0xFE8
  3609                           postdec1	equ	0xFE5
  3610                           fsr1l	equ	0xFE1
  3611                           indf2	equ	0xFDF
  3612                           postinc2	equ	0xFDE
  3613                           postdec2	equ	0xFDD
  3614                           fsr2h	equ	0xFDA
  3615                           fsr2l	equ	0xFD9
  3616                           status	equ	0xFD8
  3617                           
  3618 ;; *************** function _Delay1KTCYx *****************
  3619 ;; Defined at:
  3620 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\d1ktcyx.c"
  3621 ;; Parameters:    Size  Location     Type
  3622 ;;  unit            1    wreg     unsigned char 
  3623 ;; Auto vars:     Size  Location     Type
  3624 ;;  unit            1    0[COMRAM] unsigned char 
  3625 ;; Return value:  Size  Location     Type
  3626 ;;		None               void
  3627 ;; Registers used:
  3628 ;;		wreg
  3629 ;; Tracked objects:
  3630 ;;		On entry : 0/0
  3631 ;;		On exit  : 0/0
  3632 ;;		Unchanged: 0/0
  3633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3635 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3637 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3638 ;;Total ram usage:        1 bytes
  3639 ;; Hardware stack levels used:    1
  3640 ;; This function calls:
  3641 ;;		Nothing
  3642 ;; This function is called by:
  3643 ;;		_lcd_init
  3644 ;;		_DelayPORXLCD
  3645 ;; This function uses a non-reentrant model
  3646 ;;
  3647                           
  3648                           	psect	text20
  3649  001EB6                     __ptext20:
  3650                           	opt stack 0
  3651  001EB6                     _Delay1KTCYx:
  3652                           	opt stack 28
  3653                           
  3654                           ;incstack = 0
  3655                           ;Delay1KTCYx@unit stored from wreg
  3656  001EB6  6E01               	movwf	Delay1KTCYx@unit,c
  3657  001EB8  0EFA               	movlw	250
  3658  001EBA                     u2477:
  3659  001EBA  F000               	nop	
  3660  001EBC  2EE8               	decfsz	wreg,f,c
  3661  001EBE  D7FD               	goto	u2477
  3662  001EC0  2E01               	decfsz	Delay1KTCYx@unit,f,c
  3663  001EC2  D7FA               	goto	l1700
  3664  001EC4  0012               	return	
  3665  001EC6  0012               	return		;funcret
  3666  001EC8                     __end_of_Delay1KTCYx:
  3667                           	opt stack 0
  3668                           tblptru	equ	0xFF8
  3669                           tblptrh	equ	0xFF7
  3670                           tblptrl	equ	0xFF6
  3671                           tablat	equ	0xFF5
  3672                           prodh	equ	0xFF4
  3673                           prodl	equ	0xFF3
  3674                           indf0	equ	0xFEF
  3675                           postinc0	equ	0xFEE
  3676                           fsr0h	equ	0xFEA
  3677                           fsr0l	equ	0xFE9
  3678                           wreg	equ	0xFE8
  3679                           postdec1	equ	0xFE5
  3680                           fsr1l	equ	0xFE1
  3681                           indf2	equ	0xFDF
  3682                           postinc2	equ	0xFDE
  3683                           postdec2	equ	0xFDD
  3684                           fsr2h	equ	0xFDA
  3685                           fsr2l	equ	0xFD9
  3686                           status	equ	0xFD8
  3687                           
  3688 ;; *************** function _lcd_comand *****************
  3689 ;; Defined at:
  3690 ;;		line 189 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3691 ;; Parameters:    Size  Location     Type
  3692 ;;  d               1    wreg     unsigned char 
  3693 ;; Auto vars:     Size  Location     Type
  3694 ;;  d               1    4[COMRAM] unsigned char 
  3695 ;; Return value:  Size  Location     Type
  3696 ;;		None               void
  3697 ;; Registers used:
  3698 ;;		wreg, status,2, status,0, cstack
  3699 ;; Tracked objects:
  3700 ;;		On entry : 0/0
  3701 ;;		On exit  : 0/0
  3702 ;;		Unchanged: 0/0
  3703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3705 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3707 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3708 ;;Total ram usage:        1 bytes
  3709 ;; Hardware stack levels used:    1
  3710 ;; Hardware stack levels required when called:    2
  3711 ;; This function calls:
  3712 ;;		_lcd_send_byte
  3713 ;; This function is called by:
  3714 ;;		_caratula
  3715 ;;		_Setup
  3716 ;;		_clear
  3717 ;; This function uses a non-reentrant model
  3718 ;;
  3719                           
  3720                           	psect	text21
  3721  001EFA                     __ptext21:
  3722                           	opt stack 0
  3723  001EFA                     _lcd_comand:
  3724                           	opt stack 26
  3725                           
  3726                           ;incstack = 0
  3727                           ;lcd_comand@d stored from wreg
  3728  001EFA  6E05               	movwf	lcd_comand@d,c
  3729                           
  3730                           ;unmc_lcd_216.c: 190: lcd_send_byte(0,d);
  3731  001EFC  C005  F003         	movff	lcd_comand@d,lcd_send_byte@n
  3732  001F00  0E00               	movlw	0
  3733  001F02  ECF6  F00E         	call	_lcd_send_byte
  3734  001F06  0012               	return		;funcret
  3735  001F08                     __end_of_lcd_comand:
  3736                           	opt stack 0
  3737                           tblptru	equ	0xFF8
  3738                           tblptrh	equ	0xFF7
  3739                           tblptrl	equ	0xFF6
  3740                           tablat	equ	0xFF5
  3741                           prodh	equ	0xFF4
  3742                           prodl	equ	0xFF3
  3743                           indf0	equ	0xFEF
  3744                           postinc0	equ	0xFEE
  3745                           fsr0h	equ	0xFEA
  3746                           fsr0l	equ	0xFE9
  3747                           wreg	equ	0xFE8
  3748                           postdec1	equ	0xFE5
  3749                           fsr1l	equ	0xFE1
  3750                           indf2	equ	0xFDF
  3751                           postinc2	equ	0xFDE
  3752                           postdec2	equ	0xFDD
  3753                           fsr2h	equ	0xFDA
  3754                           fsr2l	equ	0xFD9
  3755                           status	equ	0xFD8
  3756                           
  3757 ;; *************** function _lcd_send_byte *****************
  3758 ;; Defined at:
  3759 ;;		line 86 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3760 ;; Parameters:    Size  Location     Type
  3761 ;;  address         1    wreg     unsigned char 
  3762 ;;  n               1    2[COMRAM] unsigned char 
  3763 ;; Auto vars:     Size  Location     Type
  3764 ;;  address         1    3[COMRAM] unsigned char 
  3765 ;; Return value:  Size  Location     Type
  3766 ;;		None               void
  3767 ;; Registers used:
  3768 ;;		wreg, status,2, status,0, cstack
  3769 ;; Tracked objects:
  3770 ;;		On entry : 0/0
  3771 ;;		On exit  : 0/0
  3772 ;;		Unchanged: 0/0
  3773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3774 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3775 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3777 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3778 ;;Total ram usage:        2 bytes
  3779 ;; Hardware stack levels used:    1
  3780 ;; Hardware stack levels required when called:    1
  3781 ;; This function calls:
  3782 ;;		_Delay100TCYx
  3783 ;;		_lcd_send_nibble
  3784 ;; This function is called by:
  3785 ;;		_lcd_init
  3786 ;;		_lcd_gotoxy
  3787 ;;		_lcd_putc
  3788 ;;		_lcd_comand
  3789 ;;		_lcd_setcursor_vb
  3790 ;; This function uses a non-reentrant model
  3791 ;;
  3792                           
  3793                           	psect	text22
  3794  001DEC                     __ptext22:
  3795                           	opt stack 0
  3796  001DEC                     _lcd_send_byte:
  3797                           	opt stack 25
  3798                           
  3799                           ;incstack = 0
  3800                           ;lcd_send_byte@address stored from wreg
  3801  001DEC  6E04               	movwf	lcd_send_byte@address,c
  3802                           
  3803                           ;unmc_lcd_216.c: 88: LATBbits.LATB3=0;
  3804  001DEE  968A               	bcf	3978,3,c	;volatile
  3805                           
  3806                           ;unmc_lcd_216.c: 93: Delay100TCYx(8000000UL/4000000UL);
  3807  001DF0  0E02               	movlw	2
  3808  001DF2  EC64  F00F         	call	_Delay100TCYx
  3809                           
  3810                           ;unmc_lcd_216.c: 96: TRISBbits.TRISB4=0;
  3811  001DF6  9893               	bcf	3987,4,c	;volatile
  3812                           
  3813                           ;unmc_lcd_216.c: 97: TRISBbits.TRISB5=0;
  3814  001DF8  9A93               	bcf	3987,5,c	;volatile
  3815                           
  3816                           ;unmc_lcd_216.c: 98: TRISBbits.TRISB6=0;
  3817  001DFA  9C93               	bcf	3987,6,c	;volatile
  3818                           
  3819                           ;unmc_lcd_216.c: 99: TRISBbits.TRISB7=0;
  3820  001DFC  9E93               	bcf	3987,7,c	;volatile
  3821                           
  3822                           ;unmc_lcd_216.c: 101: if(address)
  3823  001DFE  5004               	movf	lcd_send_byte@address,w,c
  3824  001E00  B4D8               	btfsc	status,2,c
  3825  001E02  D002               	goto	l75
  3826                           
  3827                           ;unmc_lcd_216.c: 102: LATBbits.LATB3=1;
  3828  001E04  868A               	bsf	3978,3,c	;volatile
  3829  001E06  D001               	goto	l76
  3830  001E08                     l75:
  3831                           
  3832                           ;unmc_lcd_216.c: 103: else
  3833                           ;unmc_lcd_216.c: 104: LATBbits.LATB3=0;
  3834  001E08  968A               	bcf	3978,3,c	;volatile
  3835  001E0A                     l76:
  3836                           
  3837                           ;unmc_lcd_216.c: 106: __nop();
  3838  001E0A  F000               	nop	
  3839                           
  3840                           ;unmc_lcd_216.c: 113: lcd_send_nibble(n >> 4);
  3841  001E0C  3803               	swapf	lcd_send_byte@n,w,c
  3842  001E0E  0B0F               	andlw	15
  3843  001E10  EC76  F00D         	call	_lcd_send_nibble
  3844                           
  3845                           ;unmc_lcd_216.c: 114: lcd_send_nibble(n & 0xf);
  3846  001E14  5003               	movf	lcd_send_byte@n,w,c
  3847  001E16  0B0F               	andlw	15
  3848  001E18  EC76  F00D         	call	_lcd_send_nibble
  3849  001E1C  0012               	return		;funcret
  3850  001E1E                     __end_of_lcd_send_byte:
  3851                           	opt stack 0
  3852                           tblptru	equ	0xFF8
  3853                           tblptrh	equ	0xFF7
  3854                           tblptrl	equ	0xFF6
  3855                           tablat	equ	0xFF5
  3856                           prodh	equ	0xFF4
  3857                           prodl	equ	0xFF3
  3858                           indf0	equ	0xFEF
  3859                           postinc0	equ	0xFEE
  3860                           fsr0h	equ	0xFEA
  3861                           fsr0l	equ	0xFE9
  3862                           wreg	equ	0xFE8
  3863                           postdec1	equ	0xFE5
  3864                           fsr1l	equ	0xFE1
  3865                           indf2	equ	0xFDF
  3866                           postinc2	equ	0xFDE
  3867                           postdec2	equ	0xFDD
  3868                           fsr2h	equ	0xFDA
  3869                           fsr2l	equ	0xFD9
  3870                           status	equ	0xFD8
  3871                           
  3872 ;; *************** function _lcd_send_nibble *****************
  3873 ;; Defined at:
  3874 ;;		line 25 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3875 ;; Parameters:    Size  Location     Type
  3876 ;;  nibble          1    wreg     unsigned char 
  3877 ;; Auto vars:     Size  Location     Type
  3878 ;;  nibble          1    1[COMRAM] unsigned char 
  3879 ;; Return value:  Size  Location     Type
  3880 ;;		None               void
  3881 ;; Registers used:
  3882 ;;		wreg, status,2, status,0
  3883 ;; Tracked objects:
  3884 ;;		On entry : 0/0
  3885 ;;		On exit  : 0/0
  3886 ;;		Unchanged: 0/0
  3887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3889 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3890 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3891 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3892 ;;Total ram usage:        2 bytes
  3893 ;; Hardware stack levels used:    1
  3894 ;; This function calls:
  3895 ;;		Nothing
  3896 ;; This function is called by:
  3897 ;;		_lcd_send_byte
  3898 ;;		_lcd_init
  3899 ;; This function uses a non-reentrant model
  3900 ;;
  3901                           
  3902                           	psect	text23
  3903  001AEC                     __ptext23:
  3904                           	opt stack 0
  3905  001AEC                     _lcd_send_nibble:
  3906                           	opt stack 25
  3907                           
  3908                           ;incstack = 0
  3909                           ;lcd_send_nibble@nibble stored from wreg
  3910  001AEC  6E02               	movwf	lcd_send_nibble@nibble,c
  3911                           
  3912                           ;unmc_lcd_216.c: 27: LATBbits.LATB4=!!(nibble & 0x01);
  3913  001AEE  A002               	btfss	lcd_send_nibble@nibble,0,c
  3914  001AF0  D003               	goto	u1210
  3915  001AF2  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3916  001AF4  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  3917  001AF6  D001               	goto	u1228
  3918  001AF8                     u1210:
  3919  001AF8  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3920  001AFA                     u1228:
  3921  001AFA  3A01               	swapf	??_lcd_send_nibble,f,c
  3922  001AFC  508A               	movf	3978,w,c	;volatile
  3923  001AFE  1801               	xorwf	??_lcd_send_nibble,w,c
  3924  001B00  0BEF               	andlw	-17
  3925  001B02  1801               	xorwf	??_lcd_send_nibble,w,c
  3926  001B04  6E8A               	movwf	3978,c	;volatile
  3927                           
  3928                           ;unmc_lcd_216.c: 28: LATBbits.LATB5=!!(nibble & 0x02);
  3929  001B06  A202               	btfss	lcd_send_nibble@nibble,1,c
  3930  001B08  D003               	goto	u1230
  3931  001B0A  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3932  001B0C  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  3933  001B0E  D001               	goto	u1248
  3934  001B10                     u1230:
  3935  001B10  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3936  001B12                     u1248:
  3937  001B12  3A01               	swapf	??_lcd_send_nibble,f,c
  3938  001B14  4601               	rlncf	??_lcd_send_nibble,f,c
  3939  001B16  508A               	movf	3978,w,c	;volatile
  3940  001B18  1801               	xorwf	??_lcd_send_nibble,w,c
  3941  001B1A  0BDF               	andlw	-33
  3942  001B1C  1801               	xorwf	??_lcd_send_nibble,w,c
  3943  001B1E  6E8A               	movwf	3978,c	;volatile
  3944                           
  3945                           ;unmc_lcd_216.c: 29: LATBbits.LATB6=!!(nibble & 0x04);
  3946  001B20  A402               	btfss	lcd_send_nibble@nibble,2,c
  3947  001B22  D003               	goto	u1250
  3948  001B24  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3949  001B26  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  3950  001B28  D001               	goto	u1268
  3951  001B2A                     u1250:
  3952  001B2A  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3953  001B2C                     u1268:
  3954  001B2C  3A01               	swapf	??_lcd_send_nibble,f,c
  3955  001B2E  4601               	rlncf	??_lcd_send_nibble,f,c
  3956  001B30  4601               	rlncf	??_lcd_send_nibble,f,c
  3957  001B32  508A               	movf	3978,w,c	;volatile
  3958  001B34  1801               	xorwf	??_lcd_send_nibble,w,c
  3959  001B36  0BBF               	andlw	-65
  3960  001B38  1801               	xorwf	??_lcd_send_nibble,w,c
  3961  001B3A  6E8A               	movwf	3978,c	;volatile
  3962                           
  3963                           ;unmc_lcd_216.c: 30: LATBbits.LATB7=!!(nibble & 0x08);
  3964  001B3C  A602               	btfss	lcd_send_nibble@nibble,3,c
  3965  001B3E  D003               	goto	u1270
  3966  001B40  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3967  001B42  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  3968  001B44  D001               	goto	u1288
  3969  001B46                     u1270:
  3970  001B46  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3971  001B48                     u1288:
  3972  001B48  3201               	rrcf	??_lcd_send_nibble,f,c
  3973  001B4A  3201               	rrcf	??_lcd_send_nibble,f,c
  3974  001B4C  508A               	movf	3978,w,c	;volatile
  3975  001B4E  1801               	xorwf	??_lcd_send_nibble,w,c
  3976  001B50  0B7F               	andlw	-129
  3977  001B52  1801               	xorwf	??_lcd_send_nibble,w,c
  3978  001B54  6E8A               	movwf	3978,c	;volatile
  3979                           
  3980                           ;unmc_lcd_216.c: 32: __nop();
  3981  001B56  F000               	nop	
  3982                           
  3983                           ;unmc_lcd_216.c: 33: LATBbits.LATB2=1;
  3984  001B58  848A               	bsf	3978,2,c	;volatile
  3985                           
  3986                           ;unmc_lcd_216.c: 34: __nop();__nop();
  3987  001B5A  F000               	nop	
  3988  001B5C  F000               	nop	
  3989                           
  3990                           ;unmc_lcd_216.c: 35: LATBbits.LATB2=0;
  3991  001B5E  948A               	bcf	3978,2,c	;volatile
  3992  001B60  0012               	return		;funcret
  3993  001B62                     __end_of_lcd_send_nibble:
  3994                           	opt stack 0
  3995                           tblptru	equ	0xFF8
  3996                           tblptrh	equ	0xFF7
  3997                           tblptrl	equ	0xFF6
  3998                           tablat	equ	0xFF5
  3999                           prodh	equ	0xFF4
  4000                           prodl	equ	0xFF3
  4001                           indf0	equ	0xFEF
  4002                           postinc0	equ	0xFEE
  4003                           fsr0h	equ	0xFEA
  4004                           fsr0l	equ	0xFE9
  4005                           wreg	equ	0xFE8
  4006                           postdec1	equ	0xFE5
  4007                           fsr1l	equ	0xFE1
  4008                           indf2	equ	0xFDF
  4009                           postinc2	equ	0xFDE
  4010                           postdec2	equ	0xFDD
  4011                           fsr2h	equ	0xFDA
  4012                           fsr2l	equ	0xFD9
  4013                           status	equ	0xFD8
  4014                           
  4015 ;; *************** function _Delay100TCYx *****************
  4016 ;; Defined at:
  4017 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\d100tcyx.c"
  4018 ;; Parameters:    Size  Location     Type
  4019 ;;  unit            1    wreg     unsigned char 
  4020 ;; Auto vars:     Size  Location     Type
  4021 ;;  unit            1    0[COMRAM] unsigned char 
  4022 ;; Return value:  Size  Location     Type
  4023 ;;		None               void
  4024 ;; Registers used:
  4025 ;;		wreg
  4026 ;; Tracked objects:
  4027 ;;		On entry : 0/0
  4028 ;;		On exit  : 0/0
  4029 ;;		Unchanged: 0/0
  4030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4032 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4034 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4035 ;;Total ram usage:        1 bytes
  4036 ;; Hardware stack levels used:    1
  4037 ;; This function calls:
  4038 ;;		Nothing
  4039 ;; This function is called by:
  4040 ;;		_lcd_send_byte
  4041 ;; This function uses a non-reentrant model
  4042 ;;
  4043                           
  4044                           	psect	text24
  4045  001EC8                     __ptext24:
  4046                           	opt stack 0
  4047  001EC8                     _Delay100TCYx:
  4048                           	opt stack 25
  4049                           
  4050                           ;incstack = 0
  4051                           ;Delay100TCYx@unit stored from wreg
  4052  001EC8  6E01               	movwf	Delay100TCYx@unit,c
  4053  001ECA  0E21               	movlw	33
  4054  001ECC                     u2487:
  4055  001ECC  2EE8               	decfsz	wreg,f,c
  4056  001ECE  D7FE               	goto	u2487
  4057  001ED0  F000               	nop	
  4058  001ED2  2E01               	decfsz	Delay100TCYx@unit,f,c
  4059  001ED4  D7FA               	goto	l2184
  4060  001ED6  0012               	return	
  4061  001ED8  0012               	return		;funcret
  4062  001EDA                     __end_of_Delay100TCYx:
  4063                           	opt stack 0
  4064                           tblptru	equ	0xFF8
  4065                           tblptrh	equ	0xFF7
  4066                           tblptrl	equ	0xFF6
  4067                           tablat	equ	0xFF5
  4068                           prodh	equ	0xFF4
  4069                           prodl	equ	0xFF3
  4070                           indf0	equ	0xFEF
  4071                           postinc0	equ	0xFEE
  4072                           fsr0h	equ	0xFEA
  4073                           fsr0l	equ	0xFE9
  4074                           wreg	equ	0xFE8
  4075                           postdec1	equ	0xFE5
  4076                           fsr1l	equ	0xFE1
  4077                           indf2	equ	0xFDF
  4078                           postinc2	equ	0xFDE
  4079                           postdec2	equ	0xFDD
  4080                           fsr2h	equ	0xFDA
  4081                           fsr2l	equ	0xFD9
  4082                           status	equ	0xFD8
  4083                           
  4084 ;; *************** function _Write_RTC *****************
  4085 ;; Defined at:
  4086 ;;		line 22 in file "../../Program Files/Unimic/unmc_01/sources/unmc_rtcc_01.c"
  4087 ;; Parameters:    Size  Location     Type
  4088 ;;		None
  4089 ;; Auto vars:     Size  Location     Type
  4090 ;;		None
  4091 ;; Return value:  Size  Location     Type
  4092 ;;                  2   26[None  ] int 
  4093 ;; Registers used:
  4094 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4095 ;; Tracked objects:
  4096 ;;		On entry : 0/0
  4097 ;;		On exit  : 0/0
  4098 ;;		Unchanged: 0/0
  4099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4103 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4104 ;;Total ram usage:        0 bytes
  4105 ;; Hardware stack levels used:    1
  4106 ;; Hardware stack levels required when called:    2
  4107 ;; This function calls:
  4108 ;;		_RtccWrOn
  4109 ;;		_RtccWriteDate
  4110 ;;		_RtccWriteTime
  4111 ;;		___awdiv
  4112 ;; This function is called by:
  4113 ;;		_Setup
  4114 ;;		_setClock
  4115 ;; This function uses a non-reentrant model
  4116 ;;
  4117                           
  4118                           	psect	text25
  4119  001484                     __ptext25:
  4120                           	opt stack 0
  4121  001484                     _Write_RTC:
  4122                           	opt stack 27
  4123                           
  4124                           ;unmc_rtcc_01.c: 24: RtccWrOn();
  4125                           
  4126                           ;incstack = 0
  4127  001484  EC6D  F00F         	call	_RtccWrOn	;wreg free
  4128                           
  4129                           ;unmc_rtcc_01.c: 26: PIE3bits.RTCCIE=1;
  4130  001488  80A3               	bsf	4003,0,c	;volatile
  4131                           
  4132                           ;unmc_rtcc_01.c: 27: segundo_d=segundo/10;
  4133  00148A  C03B  F001         	movff	_segundo,___awdiv@dividend
  4134  00148E  C03C  F002         	movff	_segundo+1,___awdiv@dividend+1
  4135  001492  0E00               	movlw	0
  4136  001494  6E04               	movwf	___awdiv@divisor+1,c
  4137  001496  0E0A               	movlw	10
  4138  001498  6E03               	movwf	___awdiv@divisor,c
  4139  00149A  EC6E  F00C         	call	___awdiv	;wreg free
  4140  00149E  5001               	movf	?___awdiv,w,c
  4141  0014A0  6E5D               	movwf	_segundo_d,c
  4142                           
  4143                           ;unmc_rtcc_01.c: 28: segundo_u=segundo-segundo_d*10;
  4144  0014A2  505D               	movf	_segundo_d,w,c
  4145  0014A4  0D0A               	mullw	10
  4146  0014A6  50F3               	movf	prodl,w,c
  4147  0014A8  0800               	sublw	0
  4148  0014AA  243B               	addwf	_segundo,w,c
  4149  0014AC  6E5E               	movwf	_segundo_u,c
  4150                           
  4151                           ;unmc_rtcc_01.c: 29: RtccTime.f.sec =segundo_d*16+segundo_u;
  4152  0014AE  505D               	movf	_segundo_d,w,c
  4153  0014B0  0D10               	mullw	16
  4154  0014B2  50F3               	movf	prodl,w,c
  4155  0014B4  245E               	addwf	_segundo_u,w,c
  4156  0014B6  6E42               	movwf	_RtccTime+1,c
  4157                           
  4158                           ;unmc_rtcc_01.c: 30: minuto_d=minuto/10;
  4159  0014B8  C04F  F001         	movff	_minuto,___awdiv@dividend
  4160  0014BC  C050  F002         	movff	_minuto+1,___awdiv@dividend+1
  4161  0014C0  0E00               	movlw	0
  4162  0014C2  6E04               	movwf	___awdiv@divisor+1,c
  4163  0014C4  0E0A               	movlw	10
  4164  0014C6  6E03               	movwf	___awdiv@divisor,c
  4165  0014C8  EC6E  F00C         	call	___awdiv	;wreg free
  4166  0014CC  5001               	movf	?___awdiv,w,c
  4167  0014CE  6E5B               	movwf	_minuto_d,c
  4168                           
  4169                           ;unmc_rtcc_01.c: 31: minuto_u=minuto-minuto_d*10;
  4170  0014D0  505B               	movf	_minuto_d,w,c
  4171  0014D2  0D0A               	mullw	10
  4172  0014D4  50F3               	movf	prodl,w,c
  4173  0014D6  0800               	sublw	0
  4174  0014D8  244F               	addwf	_minuto,w,c
  4175  0014DA  6E5C               	movwf	_minuto_u,c
  4176                           
  4177                           ;unmc_rtcc_01.c: 32: RtccTime.f.min =minuto_d*16+minuto_u;
  4178  0014DC  505B               	movf	_minuto_d,w,c
  4179  0014DE  0D10               	mullw	16
  4180  0014E0  50F3               	movf	prodl,w,c
  4181  0014E2  245C               	addwf	_minuto_u,w,c
  4182  0014E4  6E43               	movwf	_RtccTime+2,c
  4183                           
  4184                           ;unmc_rtcc_01.c: 33: hora_d=hora/10;
  4185  0014E6  C04B  F001         	movff	_hora,___awdiv@dividend
  4186  0014EA  C04C  F002         	movff	_hora+1,___awdiv@dividend+1
  4187  0014EE  0E00               	movlw	0
  4188  0014F0  6E04               	movwf	___awdiv@divisor+1,c
  4189  0014F2  0E0A               	movlw	10
  4190  0014F4  6E03               	movwf	___awdiv@divisor,c
  4191  0014F6  EC6E  F00C         	call	___awdiv	;wreg free
  4192  0014FA  5001               	movf	?___awdiv,w,c
  4193  0014FC  6E57               	movwf	_hora_d,c
  4194                           
  4195                           ;unmc_rtcc_01.c: 34: hora_u=hora-hora_d*10;
  4196  0014FE  5057               	movf	_hora_d,w,c
  4197  001500  0D0A               	mullw	10
  4198  001502  50F3               	movf	prodl,w,c
  4199  001504  0800               	sublw	0
  4200  001506  244B               	addwf	_hora,w,c
  4201  001508  6E58               	movwf	_hora_u,c
  4202                           
  4203                           ;unmc_rtcc_01.c: 35: RtccTime.f.hour=hora_d*16+hora_u;
  4204  00150A  5057               	movf	_hora_d,w,c
  4205  00150C  0D10               	mullw	16
  4206  00150E  50F3               	movf	prodl,w,c
  4207  001510  2458               	addwf	_hora_u,w,c
  4208  001512  6E44               	movwf	_RtccTime+3,c
  4209                           
  4210                           ;unmc_rtcc_01.c: 36: anio_d=anio/10;
  4211  001514  C045  F001         	movff	_anio,___awdiv@dividend
  4212  001518  C046  F002         	movff	_anio+1,___awdiv@dividend+1
  4213  00151C  0E00               	movlw	0
  4214  00151E  6E04               	movwf	___awdiv@divisor+1,c
  4215  001520  0E0A               	movlw	10
  4216  001522  6E03               	movwf	___awdiv@divisor,c
  4217  001524  EC6E  F00C         	call	___awdiv	;wreg free
  4218  001528  5001               	movf	?___awdiv,w,c
  4219  00152A  6E53               	movwf	_anio_d,c
  4220                           
  4221                           ;unmc_rtcc_01.c: 37: anio_u=anio-anio_d*10;
  4222  00152C  5053               	movf	_anio_d,w,c
  4223  00152E  0D0A               	mullw	10
  4224  001530  50F3               	movf	prodl,w,c
  4225  001532  0800               	sublw	0
  4226  001534  2445               	addwf	_anio,w,c
  4227  001536  6E54               	movwf	_anio_u,c
  4228                           
  4229                           ;unmc_rtcc_01.c: 38: RtccDate.f.year=anio_d*16+anio_u;
  4230  001538  5053               	movf	_anio_d,w,c
  4231  00153A  0D10               	mullw	16
  4232  00153C  50F3               	movf	prodl,w,c
  4233  00153E  2454               	addwf	_anio_u,w,c
  4234  001540  6E40               	movwf	_RtccDate+3,c
  4235                           
  4236                           ;unmc_rtcc_01.c: 39: mes_d=mes/10;
  4237  001542  C04D  F001         	movff	_mes,___awdiv@dividend
  4238  001546  C04E  F002         	movff	_mes+1,___awdiv@dividend+1
  4239  00154A  0E00               	movlw	0
  4240  00154C  6E04               	movwf	___awdiv@divisor+1,c
  4241  00154E  0E0A               	movlw	10
  4242  001550  6E03               	movwf	___awdiv@divisor,c
  4243  001552  EC6E  F00C         	call	___awdiv	;wreg free
  4244  001556  5001               	movf	?___awdiv,w,c
  4245  001558  6E59               	movwf	_mes_d,c
  4246                           
  4247                           ;unmc_rtcc_01.c: 40: mes_u=mes-mes_d*10;
  4248  00155A  5059               	movf	_mes_d,w,c
  4249  00155C  0D0A               	mullw	10
  4250  00155E  50F3               	movf	prodl,w,c
  4251  001560  0800               	sublw	0
  4252  001562  244D               	addwf	_mes,w,c
  4253  001564  6E5A               	movwf	_mes_u,c
  4254                           
  4255                           ;unmc_rtcc_01.c: 41: RtccDate.f.mon=mes_d*16+mes_u;
  4256  001566  5059               	movf	_mes_d,w,c
  4257  001568  0D10               	mullw	16
  4258  00156A  50F3               	movf	prodl,w,c
  4259  00156C  245A               	addwf	_mes_u,w,c
  4260  00156E  6E3F               	movwf	_RtccDate+2,c
  4261                           
  4262                           ;unmc_rtcc_01.c: 42: fecha_d=dia/10;
  4263  001570  C047  F001         	movff	_dia,___awdiv@dividend
  4264  001574  C048  F002         	movff	_dia+1,___awdiv@dividend+1
  4265  001578  0E00               	movlw	0
  4266  00157A  6E04               	movwf	___awdiv@divisor+1,c
  4267  00157C  0E0A               	movlw	10
  4268  00157E  6E03               	movwf	___awdiv@divisor,c
  4269  001580  EC6E  F00C         	call	___awdiv	;wreg free
  4270  001584  5001               	movf	?___awdiv,w,c
  4271  001586  6E55               	movwf	_fecha_d,c
  4272                           
  4273                           ;unmc_rtcc_01.c: 43: fecha_u=dia-fecha_d*10;
  4274  001588  5055               	movf	_fecha_d,w,c
  4275  00158A  0D0A               	mullw	10
  4276  00158C  50F3               	movf	prodl,w,c
  4277  00158E  0800               	sublw	0
  4278  001590  2447               	addwf	_dia,w,c
  4279  001592  6E56               	movwf	_fecha_u,c
  4280                           
  4281                           ;unmc_rtcc_01.c: 44: RtccDate.f.mday=fecha_d*16+fecha_u;
  4282  001594  5055               	movf	_fecha_d,w,c
  4283  001596  0D10               	mullw	16
  4284  001598  50F3               	movf	prodl,w,c
  4285  00159A  2456               	addwf	_fecha_u,w,c
  4286  00159C  6E3E               	movwf	_RtccDate+1,c
  4287                           
  4288                           ;unmc_rtcc_01.c: 45: dia_semana=diasem;
  4289  00159E  C049  F08C         	movff	_diasem,_dia_semana
  4290                           
  4291                           ;unmc_rtcc_01.c: 46: RtccDate.f.wday =diasem;
  4292  0015A2  C049  F03D         	movff	_diasem,_RtccDate
  4293                           
  4294                           ;unmc_rtcc_01.c: 47: RtccWriteTime(&RtccTime,1);
  4295  0015A6  0E41               	movlw	low _RtccTime
  4296  0015A8  6E01               	movwf	RtccWriteTime@pTm,c
  4297  0015AA  0E00               	movlw	high _RtccTime
  4298  0015AC  6E02               	movwf	RtccWriteTime@pTm+1,c
  4299  0015AE  0E01               	movlw	1
  4300  0015B0  6E03               	movwf	RtccWriteTime@di,c
  4301  0015B2  EC89  F00B         	call	_RtccWriteTime	;wreg free
  4302                           
  4303                           ;unmc_rtcc_01.c: 48: RtccWriteDate(&RtccDate,1);
  4304  0015B6  0E3D               	movlw	low _RtccDate
  4305  0015B8  6E01               	movwf	RtccWriteDate@pDt,c
  4306  0015BA  0E00               	movlw	high _RtccDate
  4307  0015BC  6E02               	movwf	RtccWriteDate@pDt+1,c
  4308  0015BE  0E01               	movlw	1
  4309  0015C0  6E03               	movwf	RtccWriteDate@di,c
  4310  0015C2  ECE6  F00A         	call	_RtccWriteDate	;wreg free
  4311                           
  4312                           ;unmc_rtcc_01.c: 49: (RTCCFGbits.RTCEN=1);
  4313  0015C6  010F               	movlb	15	; () banked
  4314  0015C8  8F3F               	bsf	63,7,b	;volatile
  4315                           
  4316                           ; BSR set to: 15
  4317  0015CA  0012               	return		;funcret
  4318  0015CC                     __end_of_Write_RTC:
  4319                           	opt stack 0
  4320                           tblptru	equ	0xFF8
  4321                           tblptrh	equ	0xFF7
  4322                           tblptrl	equ	0xFF6
  4323                           tablat	equ	0xFF5
  4324                           prodh	equ	0xFF4
  4325                           prodl	equ	0xFF3
  4326                           indf0	equ	0xFEF
  4327                           postinc0	equ	0xFEE
  4328                           fsr0h	equ	0xFEA
  4329                           fsr0l	equ	0xFE9
  4330                           wreg	equ	0xFE8
  4331                           postdec1	equ	0xFE5
  4332                           fsr1l	equ	0xFE1
  4333                           indf2	equ	0xFDF
  4334                           postinc2	equ	0xFDE
  4335                           postdec2	equ	0xFDD
  4336                           fsr2h	equ	0xFDA
  4337                           fsr2l	equ	0xFD9
  4338                           status	equ	0xFD8
  4339                           
  4340 ;; *************** function ___awdiv *****************
  4341 ;; Defined at:
  4342 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\awdiv.c"
  4343 ;; Parameters:    Size  Location     Type
  4344 ;;  dividend        2    0[COMRAM] int 
  4345 ;;  divisor         2    2[COMRAM] int 
  4346 ;; Auto vars:     Size  Location     Type
  4347 ;;  quotient        2    6[COMRAM] int 
  4348 ;;  sign            1    5[COMRAM] unsigned char 
  4349 ;;  counter         1    4[COMRAM] unsigned char 
  4350 ;; Return value:  Size  Location     Type
  4351 ;;                  2    0[COMRAM] int 
  4352 ;; Registers used:
  4353 ;;		wreg, status,2, status,0
  4354 ;; Tracked objects:
  4355 ;;		On entry : 0/0
  4356 ;;		On exit  : 0/0
  4357 ;;		Unchanged: 0/0
  4358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4359 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4360 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4362 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4363 ;;Total ram usage:        8 bytes
  4364 ;; Hardware stack levels used:    1
  4365 ;; This function calls:
  4366 ;;		Nothing
  4367 ;; This function is called by:
  4368 ;;		_Write_RTC
  4369 ;;		__delay_s
  4370 ;; This function uses a non-reentrant model
  4371 ;;
  4372                           
  4373                           	psect	text26
  4374  0018DC                     __ptext26:
  4375                           	opt stack 0
  4376  0018DC                     ___awdiv:
  4377                           	opt stack 27
  4378                           
  4379                           ; BSR set to: 15
  4380                           ;incstack = 0
  4381  0018DC  0E00               	movlw	0
  4382  0018DE  6E06               	movwf	___awdiv@sign,c
  4383  0018E0  AE04               	btfss	___awdiv@divisor+1,7,c
  4384  0018E2  D007               	goto	l2400
  4385  0018E4  6C03               	negf	___awdiv@divisor,c
  4386  0018E6  1E04               	comf	___awdiv@divisor+1,f,c
  4387  0018E8  B0D8               	btfsc	status,0,c
  4388  0018EA  2A04               	incf	___awdiv@divisor+1,f,c
  4389  0018EC  0E01               	movlw	1
  4390  0018EE  6E06               	movwf	___awdiv@sign,c
  4391  0018F0  D000               	goto	l2400
  4392  0018F2                     l2400:
  4393  0018F2  AE02               	btfss	___awdiv@dividend+1,7,c
  4394  0018F4  D007               	goto	l2406
  4395  0018F6  6C01               	negf	___awdiv@dividend,c
  4396  0018F8  1E02               	comf	___awdiv@dividend+1,f,c
  4397  0018FA  B0D8               	btfsc	status,0,c
  4398  0018FC  2A02               	incf	___awdiv@dividend+1,f,c
  4399  0018FE  0E01               	movlw	1
  4400  001900  1A06               	xorwf	___awdiv@sign,f,c
  4401  001902  D000               	goto	l2406
  4402  001904                     l2406:
  4403  001904  0E00               	movlw	0
  4404  001906  6E08               	movwf	___awdiv@quotient+1,c
  4405  001908  0E00               	movlw	0
  4406  00190A  6E07               	movwf	___awdiv@quotient,c
  4407  00190C  5003               	movf	___awdiv@divisor,w,c
  4408  00190E  1004               	iorwf	___awdiv@divisor+1,w,c
  4409  001910  B4D8               	btfsc	status,2,c
  4410  001912  D021               	goto	l2428
  4411  001914  0E01               	movlw	1
  4412  001916  6E05               	movwf	___awdiv@counter,c
  4413  001918  D005               	goto	l2414
  4414  00191A                     l2412:
  4415  00191A  90D8               	bcf	status,0,c
  4416  00191C  3603               	rlcf	___awdiv@divisor,f,c
  4417  00191E  3604               	rlcf	___awdiv@divisor+1,f,c
  4418  001920  2A05               	incf	___awdiv@counter,f,c
  4419  001922  D000               	goto	l2414
  4420  001924                     l2414:
  4421  001924  BE04               	btfsc	___awdiv@divisor+1,7,c
  4422  001926  D002               	goto	l2416
  4423  001928  D7F8               	goto	l2412
  4424  00192A  D000               	goto	l2416
  4425  00192C                     l2416:
  4426  00192C  90D8               	bcf	status,0,c
  4427  00192E  3607               	rlcf	___awdiv@quotient,f,c
  4428  001930  3608               	rlcf	___awdiv@quotient+1,f,c
  4429  001932  5003               	movf	___awdiv@divisor,w,c
  4430  001934  5C01               	subwf	___awdiv@dividend,w,c
  4431  001936  5004               	movf	___awdiv@divisor+1,w,c
  4432  001938  5802               	subwfb	___awdiv@dividend+1,w,c
  4433  00193A  A0D8               	btfss	status,0,c
  4434  00193C  D006               	goto	l2424
  4435  00193E  5003               	movf	___awdiv@divisor,w,c
  4436  001940  5E01               	subwf	___awdiv@dividend,f,c
  4437  001942  5004               	movf	___awdiv@divisor+1,w,c
  4438  001944  5A02               	subwfb	___awdiv@dividend+1,f,c
  4439  001946  8007               	bsf	___awdiv@quotient,0,c
  4440  001948  D000               	goto	l2424
  4441  00194A                     l2424:
  4442  00194A  90D8               	bcf	status,0,c
  4443  00194C  3204               	rrcf	___awdiv@divisor+1,f,c
  4444  00194E  3203               	rrcf	___awdiv@divisor,f,c
  4445  001950  2E05               	decfsz	___awdiv@counter,f,c
  4446  001952  D7EC               	goto	l2416
  4447  001954  D000               	goto	l2428
  4448  001956                     l2428:
  4449  001956  5006               	movf	___awdiv@sign,w,c
  4450  001958  B4D8               	btfsc	status,2,c
  4451  00195A  D005               	goto	l2432
  4452  00195C  6C07               	negf	___awdiv@quotient,c
  4453  00195E  1E08               	comf	___awdiv@quotient+1,f,c
  4454  001960  B0D8               	btfsc	status,0,c
  4455  001962  2A08               	incf	___awdiv@quotient+1,f,c
  4456  001964  D000               	goto	l2432
  4457  001966                     l2432:
  4458  001966  C007  F001         	movff	___awdiv@quotient,?___awdiv
  4459  00196A  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  4460  00196E  0012               	return	
  4461  001970  0012               	return		;funcret
  4462  001972                     __end_of___awdiv:
  4463                           	opt stack 0
  4464                           tblptru	equ	0xFF8
  4465                           tblptrh	equ	0xFF7
  4466                           tblptrl	equ	0xFF6
  4467                           tablat	equ	0xFF5
  4468                           prodh	equ	0xFF4
  4469                           prodl	equ	0xFF3
  4470                           indf0	equ	0xFEF
  4471                           postinc0	equ	0xFEE
  4472                           fsr0h	equ	0xFEA
  4473                           fsr0l	equ	0xFE9
  4474                           wreg	equ	0xFE8
  4475                           postdec1	equ	0xFE5
  4476                           fsr1l	equ	0xFE1
  4477                           indf2	equ	0xFDF
  4478                           postinc2	equ	0xFDE
  4479                           postdec2	equ	0xFDD
  4480                           fsr2h	equ	0xFDA
  4481                           fsr2l	equ	0xFD9
  4482                           status	equ	0xFD8
  4483                           
  4484 ;; *************** function _RtccWriteTime *****************
  4485 ;; Defined at:
  4486 ;;		line 34 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteTime.c"
  4487 ;; Parameters:    Size  Location     Type
  4488 ;;  pTm             2    0[COMRAM] PTR const struct .
  4489 ;;		 -> RtccTime(4), 
  4490 ;;  di              1    2[COMRAM] enum E7121
  4491 ;; Auto vars:     Size  Location     Type
  4492 ;;  tempHourWDay    2    9[COMRAM] struct .
  4493 ;;  tempMinSec      2    7[COMRAM] struct .
  4494 ;;  wasWrEn         1    6[COMRAM] enum E7121
  4495 ;;  wasAlrm         1    5[COMRAM] enum E7121
  4496 ;;  wasOn           1    4[COMRAM] enum E7121
  4497 ;; Return value:  Size  Location     Type
  4498 ;;                  1    wreg      enum E7121
  4499 ;; Registers used:
  4500 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4501 ;; Tracked objects:
  4502 ;;		On entry : 0/0
  4503 ;;		On exit  : 0/0
  4504 ;;		Unchanged: 0/0
  4505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4506 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4507 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4508 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4509 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4510 ;;Total ram usage:       11 bytes
  4511 ;; Hardware stack levels used:    1
  4512 ;; Hardware stack levels required when called:    1
  4513 ;; This function calls:
  4514 ;;		_RtccWrOn
  4515 ;; This function is called by:
  4516 ;;		_Write_RTC
  4517 ;; This function uses a non-reentrant model
  4518 ;;
  4519                           
  4520                           	psect	text27
  4521  001712                     __ptext27:
  4522                           	opt stack 0
  4523  001712                     _RtccWriteTime:
  4524                           	opt stack 27
  4525                           
  4526                           ;incstack = 0
  4527  001712  0E00               	movlw	0
  4528  001714  6E06               	movwf	RtccWriteTime@wasAlrm,c
  4529  001716  EE20 F002          	lfsr	2,2
  4530  00171A  5001               	movf	RtccWriteTime@pTm,w,c
  4531  00171C  26D9               	addwf	fsr2l,f,c
  4532  00171E  5002               	movf	RtccWriteTime@pTm+1,w,c
  4533  001720  22DA               	addwfc	fsr2h,f,c
  4534  001722  0E5A               	movlw	90
  4535  001724  60DF               	cpfslt	indf2,c
  4536  001726  0012               	return	
  4537  001728  EE20 F001          	lfsr	2,1
  4538  00172C  5001               	movf	RtccWriteTime@pTm,w,c
  4539  00172E  26D9               	addwf	fsr2l,f,c
  4540  001730  5002               	movf	RtccWriteTime@pTm+1,w,c
  4541  001732  22DA               	addwfc	fsr2h,f,c
  4542  001734  0E5A               	movlw	90
  4543  001736  60DF               	cpfslt	indf2,c
  4544  001738  0012               	return	
  4545  00173A  EE20 F003          	lfsr	2,3
  4546  00173E  5001               	movf	RtccWriteTime@pTm,w,c
  4547  001740  26D9               	addwf	fsr2l,f,c
  4548  001742  5002               	movf	RtccWriteTime@pTm+1,w,c
  4549  001744  22DA               	addwfc	fsr2h,f,c
  4550  001746  0E24               	movlw	36
  4551  001748  64DF               	cpfsgt	indf2,c
  4552  00174A  D002               	goto	l2526
  4553  00174C  0012               	return	
  4554                           
  4555                           ;	Return value of _RtccWriteTime is never used
  4556  00174E  0012               	return	
  4557  001750                     l2526:
  4558  001750  EE20 F002          	lfsr	2,2
  4559  001754  5001               	movf	RtccWriteTime@pTm,w,c
  4560  001756  26D9               	addwf	fsr2l,f,c
  4561  001758  5002               	movf	RtccWriteTime@pTm+1,w,c
  4562  00175A  22DA               	addwfc	fsr2h,f,c
  4563  00175C  50DF               	movf	indf2,w,c
  4564  00175E  6E09               	movwf	RtccWriteTime@tempMinSec+1,c
  4565  001760  EE20 F001          	lfsr	2,1
  4566  001764  5001               	movf	RtccWriteTime@pTm,w,c
  4567  001766  26D9               	addwf	fsr2l,f,c
  4568  001768  5002               	movf	RtccWriteTime@pTm+1,w,c
  4569  00176A  22DA               	addwfc	fsr2h,f,c
  4570  00176C  50DF               	movf	indf2,w,c
  4571  00176E  6E08               	movwf	RtccWriteTime@tempMinSec,c
  4572  001770  5003               	movf	RtccWriteTime@di,w,c
  4573  001772  B4D8               	btfsc	status,2,c
  4574  001774  D002               	goto	l2532
  4575  001776  9CF2               	bcf	intcon,6,c	;volatile
  4576  001778  D000               	goto	l2532
  4577  00177A                     l2532:
  4578  00177A  0E00               	movlw	0
  4579  00177C  BB3F               	btfsc	63,5,b	;volatile
  4580  00177E  0E01               	movlw	1
  4581  001780  6E07               	movwf	RtccWriteTime@wasWrEn,c
  4582  001782  5007               	movf	RtccWriteTime@wasWrEn,w,c
  4583  001784  A4D8               	btfss	status,2,c
  4584  001786  D003               	goto	l2536
  4585  001788  EC6D  F00F         	call	_RtccWrOn	;wreg free
  4586  00178C  D000               	goto	l2536
  4587  00178E                     l2536:
  4588  00178E  0E00               	movlw	0
  4589  001790  BF3F               	btfsc	63,7,b	;volatile
  4590  001792  0E01               	movlw	1
  4591  001794  6E05               	movwf	RtccWriteTime@wasOn,c
  4592  001796  5005               	movf	RtccWriteTime@wasOn,w,c
  4593  001798  B4D8               	btfsc	status,2,c
  4594  00179A  D007               	goto	l2542
  4595  00179C  0E00               	movlw	0
  4596  00179E  BE91               	btfsc	3985,7,c	;volatile
  4597  0017A0  0E01               	movlw	1
  4598  0017A2  6E06               	movwf	RtccWriteTime@wasAlrm,c
  4599  0017A4  010F               	movlb	15	; () banked
  4600  0017A6  9F3F               	bcf	63,7,b	;volatile
  4601  0017A8  D000               	goto	l2542
  4602  0017AA                     l2542:
  4603  0017AA  0EFC               	movlw	252
  4604  0017AC  010F               	movlb	15	; () banked
  4605  0017AE  173F               	andwf	63,f,b	;volatile
  4606  0017B0  010F               	movlb	15	; () banked
  4607  0017B2  813F               	bsf	63,0,b	;volatile
  4608                           
  4609                           ; BSR set to: 15
  4610  0017B4  CF98 F00A          	movff	3992,RtccWriteTime@tempHourWDay	;volatile
  4611                           
  4612                           ; BSR set to: 15
  4613  0017B8  CF99 F00B          	movff	3993,RtccWriteTime@tempHourWDay+1	;volatile
  4614                           
  4615                           ; BSR set to: 15
  4616  0017BC  EE20 F003          	lfsr	2,3
  4617  0017C0  5001               	movf	RtccWriteTime@pTm,w,c
  4618  0017C2  26D9               	addwf	fsr2l,f,c
  4619  0017C4  5002               	movf	RtccWriteTime@pTm+1,w,c
  4620  0017C6  22DA               	addwfc	fsr2h,f,c
  4621  0017C8  50DF               	movf	indf2,w,c
  4622  0017CA  6E0A               	movwf	RtccWriteTime@tempHourWDay,c
  4623                           
  4624                           ; BSR set to: 15
  4625  0017CC  0EFC               	movlw	252
  4626  0017CE  010F               	movlb	15	; () banked
  4627  0017D0  173F               	andwf	63,f,b	;volatile
  4628                           
  4629                           ; BSR set to: 15
  4630  0017D2  010F               	movlb	15	; () banked
  4631  0017D4  813F               	bsf	63,0,b	;volatile
  4632                           
  4633                           ; BSR set to: 15
  4634  0017D6  C00A  FF98         	movff	RtccWriteTime@tempHourWDay,3992	;volatile
  4635                           
  4636                           ; BSR set to: 15
  4637  0017DA  C00B  FF99         	movff	RtccWriteTime@tempHourWDay+1,3993	;volatile
  4638                           
  4639                           ; BSR set to: 15
  4640  0017DE  C008  FF98         	movff	RtccWriteTime@tempMinSec,3992	;volatile
  4641                           
  4642                           ; BSR set to: 15
  4643  0017E2  C009  FF99         	movff	RtccWriteTime@tempMinSec+1,3993	;volatile
  4644                           
  4645                           ; BSR set to: 15
  4646  0017E6  5005               	movf	RtccWriteTime@wasOn,w,c
  4647  0017E8  B4D8               	btfsc	status,2,c
  4648  0017EA  D00D               	goto	l2574
  4649                           
  4650                           ; BSR set to: 15
  4651  0017EC  010F               	movlb	15	; () banked
  4652  0017EE  8F3F               	bsf	63,7,b	;volatile
  4653                           
  4654                           ; BSR set to: 15
  4655  0017F0  5006               	movf	RtccWriteTime@wasAlrm,w,c
  4656  0017F2  B4D8               	btfsc	status,2,c
  4657  0017F4  D002               	goto	l2570
  4658                           
  4659                           ; BSR set to: 15
  4660  0017F6  8E91               	bsf	3985,7,c	;volatile
  4661  0017F8  D000               	goto	l2570
  4662  0017FA                     l2570:
  4663                           
  4664                           ; BSR set to: 15
  4665  0017FA  5007               	movf	RtccWriteTime@wasWrEn,w,c
  4666  0017FC  B4D8               	btfsc	status,2,c
  4667  0017FE  D009               	goto	l2578
  4668                           
  4669                           ; BSR set to: 15
  4670  001800  EC6D  F00F         	call	_RtccWrOn	;wreg free
  4671  001804  D006               	goto	l2578
  4672  001806                     l2574:
  4673  001806  5007               	movf	RtccWriteTime@wasWrEn,w,c
  4674  001808  A4D8               	btfss	status,2,c
  4675  00180A  D003               	goto	l2578
  4676  00180C  010F               	movlb	15	; () banked
  4677  00180E  9B3F               	bcf	63,5,b	;volatile
  4678                           
  4679                           ; BSR set to: 15
  4680  001810  D000               	goto	l2578
  4681  001812                     l2578:
  4682  001812  5003               	movf	RtccWriteTime@di,w,c
  4683  001814  B4D8               	btfsc	status,2,c
  4684  001816  0012               	return	
  4685  001818  8CF2               	bsf	intcon,6,c	;volatile
  4686  00181A  0012               	return	
  4687                           
  4688                           ;	Return value of _RtccWriteTime is never used
  4689  00181C  0012               	return		;funcret
  4690  00181E                     __end_of_RtccWriteTime:
  4691                           	opt stack 0
  4692                           tblptru	equ	0xFF8
  4693                           tblptrh	equ	0xFF7
  4694                           tblptrl	equ	0xFF6
  4695                           tablat	equ	0xFF5
  4696                           prodh	equ	0xFF4
  4697                           prodl	equ	0xFF3
  4698                           intcon	equ	0xFF2
  4699                           indf0	equ	0xFEF
  4700                           postinc0	equ	0xFEE
  4701                           fsr0h	equ	0xFEA
  4702                           fsr0l	equ	0xFE9
  4703                           wreg	equ	0xFE8
  4704                           postdec1	equ	0xFE5
  4705                           fsr1l	equ	0xFE1
  4706                           indf2	equ	0xFDF
  4707                           postinc2	equ	0xFDE
  4708                           postdec2	equ	0xFDD
  4709                           fsr2h	equ	0xFDA
  4710                           fsr2l	equ	0xFD9
  4711                           status	equ	0xFD8
  4712                           
  4713 ;; *************** function _RtccWriteDate *****************
  4714 ;; Defined at:
  4715 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteDate.c"
  4716 ;; Parameters:    Size  Location     Type
  4717 ;;  pDt             2    0[COMRAM] PTR const struct .
  4718 ;;		 -> RtccDate(4), 
  4719 ;;  di              1    2[COMRAM] enum E7121
  4720 ;; Auto vars:     Size  Location     Type
  4721 ;;  tempHourWDay    2   11[COMRAM] struct .
  4722 ;;  tempDayMonth    2    9[COMRAM] struct .
  4723 ;;  tempYear        2    6[COMRAM] struct .
  4724 ;;  wasWrEn         1    8[COMRAM] enum E7121
  4725 ;;  wasAlrm         1    5[COMRAM] enum E7121
  4726 ;;  wasOn           1    4[COMRAM] enum E7121
  4727 ;; Return value:  Size  Location     Type
  4728 ;;                  1    wreg      enum E7121
  4729 ;; Registers used:
  4730 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4731 ;; Tracked objects:
  4732 ;;		On entry : 0/0
  4733 ;;		On exit  : 0/0
  4734 ;;		Unchanged: 0/0
  4735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4736 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4737 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4738 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4739 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4740 ;;Total ram usage:       13 bytes
  4741 ;; Hardware stack levels used:    1
  4742 ;; Hardware stack levels required when called:    1
  4743 ;; This function calls:
  4744 ;;		_RtccWrOn
  4745 ;; This function is called by:
  4746 ;;		_Write_RTC
  4747 ;; This function uses a non-reentrant model
  4748 ;;
  4749                           
  4750                           	psect	text28
  4751  0015CC                     __ptext28:
  4752                           	opt stack 0
  4753  0015CC                     _RtccWriteDate:
  4754                           	opt stack 27
  4755                           
  4756                           ;incstack = 0
  4757  0015CC  0E00               	movlw	0
  4758  0015CE  6E06               	movwf	RtccWriteDate@wasAlrm,c
  4759  0015D0  EE20 F002          	lfsr	2,2
  4760  0015D4  5001               	movf	RtccWriteDate@pDt,w,c
  4761  0015D6  26D9               	addwf	fsr2l,f,c
  4762  0015D8  5002               	movf	RtccWriteDate@pDt+1,w,c
  4763  0015DA  22DA               	addwfc	fsr2h,f,c
  4764  0015DC  0E13               	movlw	19
  4765  0015DE  60DF               	cpfslt	indf2,c
  4766  0015E0  0012               	return	
  4767  0015E2  EE20 F002          	lfsr	2,2
  4768  0015E6  5001               	movf	RtccWriteDate@pDt,w,c
  4769  0015E8  26D9               	addwf	fsr2l,f,c
  4770  0015EA  5002               	movf	RtccWriteDate@pDt+1,w,c
  4771  0015EC  22DA               	addwfc	fsr2h,f,c
  4772  0015EE  50DF               	movf	indf2,w,c
  4773  0015F0  B4D8               	btfsc	status,2,c
  4774  0015F2  0012               	return	
  4775  0015F4  EE20 F001          	lfsr	2,1
  4776  0015F8  5001               	movf	RtccWriteDate@pDt,w,c
  4777  0015FA  26D9               	addwf	fsr2l,f,c
  4778  0015FC  5002               	movf	RtccWriteDate@pDt+1,w,c
  4779  0015FE  22DA               	addwfc	fsr2h,f,c
  4780  001600  0E32               	movlw	50
  4781  001602  60DF               	cpfslt	indf2,c
  4782  001604  0012               	return	
  4783  001606  EE20 F001          	lfsr	2,1
  4784  00160A  5001               	movf	RtccWriteDate@pDt,w,c
  4785  00160C  26D9               	addwf	fsr2l,f,c
  4786  00160E  5002               	movf	RtccWriteDate@pDt+1,w,c
  4787  001610  22DA               	addwfc	fsr2h,f,c
  4788  001612  50DF               	movf	indf2,w,c
  4789  001614  B4D8               	btfsc	status,2,c
  4790  001616  0012               	return	
  4791  001618  EE20 F003          	lfsr	2,3
  4792  00161C  5001               	movf	RtccWriteDate@pDt,w,c
  4793  00161E  26D9               	addwf	fsr2l,f,c
  4794  001620  5002               	movf	RtccWriteDate@pDt+1,w,c
  4795  001622  22DA               	addwfc	fsr2h,f,c
  4796  001624  0E99               	movlw	153
  4797  001626  64DF               	cpfsgt	indf2,c
  4798  001628  D002               	goto	l2594
  4799  00162A  0012               	return	
  4800                           
  4801                           ;	Return value of _RtccWriteDate is never used
  4802  00162C  0012               	return	
  4803  00162E                     l2594:
  4804  00162E  EE20 F003          	lfsr	2,3
  4805  001632  5001               	movf	RtccWriteDate@pDt,w,c
  4806  001634  26D9               	addwf	fsr2l,f,c
  4807  001636  5002               	movf	RtccWriteDate@pDt+1,w,c
  4808  001638  22DA               	addwfc	fsr2h,f,c
  4809  00163A  50DF               	movf	indf2,w,c
  4810  00163C  6E07               	movwf	RtccWriteDate@tempYear,c
  4811  00163E  EE20 F001          	lfsr	2,1
  4812  001642  5001               	movf	RtccWriteDate@pDt,w,c
  4813  001644  26D9               	addwf	fsr2l,f,c
  4814  001646  5002               	movf	RtccWriteDate@pDt+1,w,c
  4815  001648  22DA               	addwfc	fsr2h,f,c
  4816  00164A  50DF               	movf	indf2,w,c
  4817  00164C  6E0A               	movwf	RtccWriteDate@tempDayMonth,c
  4818  00164E  EE20 F002          	lfsr	2,2
  4819  001652  5001               	movf	RtccWriteDate@pDt,w,c
  4820  001654  26D9               	addwf	fsr2l,f,c
  4821  001656  5002               	movf	RtccWriteDate@pDt+1,w,c
  4822  001658  22DA               	addwfc	fsr2h,f,c
  4823  00165A  50DF               	movf	indf2,w,c
  4824  00165C  6E0B               	movwf	RtccWriteDate@tempDayMonth+1,c
  4825  00165E  5003               	movf	RtccWriteDate@di,w,c
  4826  001660  B4D8               	btfsc	status,2,c
  4827  001662  D002               	goto	l2600
  4828  001664  9CF2               	bcf	intcon,6,c	;volatile
  4829  001666  D000               	goto	l2600
  4830  001668                     l2600:
  4831  001668  0E00               	movlw	0
  4832  00166A  BB3F               	btfsc	63,5,b	;volatile
  4833  00166C  0E01               	movlw	1
  4834  00166E  6E09               	movwf	RtccWriteDate@wasWrEn,c
  4835  001670  5009               	movf	RtccWriteDate@wasWrEn,w,c
  4836  001672  A4D8               	btfss	status,2,c
  4837  001674  D003               	goto	l2604
  4838  001676  EC6D  F00F         	call	_RtccWrOn	;wreg free
  4839  00167A  D000               	goto	l2604
  4840  00167C                     l2604:
  4841  00167C  0E00               	movlw	0
  4842  00167E  BF3F               	btfsc	63,7,b	;volatile
  4843  001680  0E01               	movlw	1
  4844  001682  6E05               	movwf	RtccWriteDate@wasOn,c
  4845  001684  5005               	movf	RtccWriteDate@wasOn,w,c
  4846  001686  B4D8               	btfsc	status,2,c
  4847  001688  D007               	goto	l2610
  4848  00168A  0E00               	movlw	0
  4849  00168C  BE91               	btfsc	3985,7,c	;volatile
  4850  00168E  0E01               	movlw	1
  4851  001690  6E06               	movwf	RtccWriteDate@wasAlrm,c
  4852  001692  010F               	movlb	15	; () banked
  4853  001694  9F3F               	bcf	63,7,b	;volatile
  4854  001696  D000               	goto	l2610
  4855  001698                     l2610:
  4856  001698  0EFC               	movlw	252
  4857  00169A  010F               	movlb	15	; () banked
  4858  00169C  173F               	andwf	63,f,b	;volatile
  4859  00169E  010F               	movlb	15	; () banked
  4860  0016A0  813F               	bsf	63,0,b	;volatile
  4861                           
  4862                           ; BSR set to: 15
  4863  0016A2  CF98 F00C          	movff	3992,RtccWriteDate@tempHourWDay	;volatile
  4864                           
  4865                           ; BSR set to: 15
  4866  0016A6  CF99 F00D          	movff	3993,RtccWriteDate@tempHourWDay+1	;volatile
  4867                           
  4868                           ; BSR set to: 15
  4869  0016AA  C001  FFD9         	movff	RtccWriteDate@pDt,fsr2l
  4870  0016AE  C002  FFDA         	movff	RtccWriteDate@pDt+1,fsr2h
  4871  0016B2  50DF               	movf	indf2,w,c
  4872  0016B4  6E0D               	movwf	RtccWriteDate@tempHourWDay+1,c
  4873                           
  4874                           ; BSR set to: 15
  4875  0016B6  0EFC               	movlw	252
  4876  0016B8  010F               	movlb	15	; () banked
  4877  0016BA  173F               	andwf	63,f,b	;volatile
  4878                           
  4879                           ; BSR set to: 15
  4880  0016BC  0E03               	movlw	3
  4881  0016BE  010F               	movlb	15	; () banked
  4882  0016C0  133F               	iorwf	63,f,b	;volatile
  4883                           
  4884                           ; BSR set to: 15
  4885  0016C2  C007  FF98         	movff	RtccWriteDate@tempYear,3992	;volatile
  4886                           
  4887                           ; BSR set to: 15
  4888  0016C6  C008  FF99         	movff	RtccWriteDate@tempYear+1,3993	;volatile
  4889                           
  4890                           ; BSR set to: 15
  4891  0016CA  C00A  FF98         	movff	RtccWriteDate@tempDayMonth,3992	;volatile
  4892                           
  4893                           ; BSR set to: 15
  4894  0016CE  C00B  FF99         	movff	RtccWriteDate@tempDayMonth+1,3993	;volatile
  4895                           
  4896                           ; BSR set to: 15
  4897  0016D2  C00C  FF98         	movff	RtccWriteDate@tempHourWDay,3992	;volatile
  4898                           
  4899                           ; BSR set to: 15
  4900  0016D6  C00D  FF99         	movff	RtccWriteDate@tempHourWDay+1,3993	;volatile
  4901                           
  4902                           ; BSR set to: 15
  4903  0016DA  5005               	movf	RtccWriteDate@wasOn,w,c
  4904  0016DC  B4D8               	btfsc	status,2,c
  4905  0016DE  D00D               	goto	l2646
  4906                           
  4907                           ; BSR set to: 15
  4908  0016E0  010F               	movlb	15	; () banked
  4909  0016E2  8F3F               	bsf	63,7,b	;volatile
  4910                           
  4911                           ; BSR set to: 15
  4912  0016E4  5006               	movf	RtccWriteDate@wasAlrm,w,c
  4913  0016E6  B4D8               	btfsc	status,2,c
  4914  0016E8  D002               	goto	l2642
  4915                           
  4916                           ; BSR set to: 15
  4917  0016EA  8E91               	bsf	3985,7,c	;volatile
  4918  0016EC  D000               	goto	l2642
  4919  0016EE                     l2642:
  4920                           
  4921                           ; BSR set to: 15
  4922  0016EE  5009               	movf	RtccWriteDate@wasWrEn,w,c
  4923  0016F0  B4D8               	btfsc	status,2,c
  4924  0016F2  D009               	goto	l2650
  4925                           
  4926                           ; BSR set to: 15
  4927  0016F4  EC6D  F00F         	call	_RtccWrOn	;wreg free
  4928  0016F8  D006               	goto	l2650
  4929  0016FA                     l2646:
  4930  0016FA  5009               	movf	RtccWriteDate@wasWrEn,w,c
  4931  0016FC  A4D8               	btfss	status,2,c
  4932  0016FE  D003               	goto	l2650
  4933  001700  010F               	movlb	15	; () banked
  4934  001702  9B3F               	bcf	63,5,b	;volatile
  4935                           
  4936                           ; BSR set to: 15
  4937  001704  D000               	goto	l2650
  4938  001706                     l2650:
  4939  001706  5003               	movf	RtccWriteDate@di,w,c
  4940  001708  B4D8               	btfsc	status,2,c
  4941  00170A  0012               	return	
  4942  00170C  9CF2               	bcf	intcon,6,c	;volatile
  4943  00170E  0012               	return	
  4944                           
  4945                           ;	Return value of _RtccWriteDate is never used
  4946  001710  0012               	return		;funcret
  4947  001712                     __end_of_RtccWriteDate:
  4948                           	opt stack 0
  4949                           tblptru	equ	0xFF8
  4950                           tblptrh	equ	0xFF7
  4951                           tblptrl	equ	0xFF6
  4952                           tablat	equ	0xFF5
  4953                           prodh	equ	0xFF4
  4954                           prodl	equ	0xFF3
  4955                           intcon	equ	0xFF2
  4956                           indf0	equ	0xFEF
  4957                           postinc0	equ	0xFEE
  4958                           fsr0h	equ	0xFEA
  4959                           fsr0l	equ	0xFE9
  4960                           wreg	equ	0xFE8
  4961                           postdec1	equ	0xFE5
  4962                           fsr1l	equ	0xFE1
  4963                           indf2	equ	0xFDF
  4964                           postinc2	equ	0xFDE
  4965                           postdec2	equ	0xFDD
  4966                           fsr2h	equ	0xFDA
  4967                           fsr2l	equ	0xFD9
  4968                           status	equ	0xFD8
  4969                           
  4970 ;; *************** function _RtccWrOn *****************
  4971 ;; Defined at:
  4972 ;;		line 21 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWrOn.c"
  4973 ;; Parameters:    Size  Location     Type
  4974 ;;		None
  4975 ;; Auto vars:     Size  Location     Type
  4976 ;;  data            2    0        unsigned int 
  4977 ;; Return value:  Size  Location     Type
  4978 ;;		None               void
  4979 ;; Registers used:
  4980 ;;		wreg, status,2
  4981 ;; Tracked objects:
  4982 ;;		On entry : 0/0
  4983 ;;		On exit  : 0/0
  4984 ;;		Unchanged: 0/0
  4985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4989 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4990 ;;Total ram usage:        0 bytes
  4991 ;; Hardware stack levels used:    1
  4992 ;; This function calls:
  4993 ;;		Nothing
  4994 ;; This function is called by:
  4995 ;;		_Write_RTC
  4996 ;;		_RtccWriteDate
  4997 ;;		_RtccWriteTime
  4998 ;; This function uses a non-reentrant model
  4999 ;;
  5000                           
  5001                           	psect	text29
  5002  001EDA                     __ptext29:
  5003                           	opt stack 0
  5004  001EDA                     _RtccWrOn:
  5005                           	opt stack 27
  5006                           
  5007                           ;incstack = 0
  5008  001EDA  9CF2               	bcf	intcon,6,c	;volatile
  5009  001EDC  0E55               	movlw	85
  5010  001EDE  6EA7               	movwf	4007,c	;volatile
  5011  001EE0  0EAA               	movlw	170
  5012  001EE2  6EA7               	movwf	4007,c	;volatile
  5013  001EE4  010F               	movlb	15	; () banked
  5014  001EE6  8B3F               	bsf	63,5,b	;volatile
  5015                           
  5016                           ; BSR set to: 15
  5017  001EE8  8CF2               	bsf	intcon,6,c	;volatile
  5018                           
  5019                           ; BSR set to: 15
  5020  001EEA  0012               	return		;funcret
  5021  001EEC                     __end_of_RtccWrOn:
  5022                           	opt stack 0
  5023                           tblptru	equ	0xFF8
  5024                           tblptrh	equ	0xFF7
  5025                           tblptrl	equ	0xFF6
  5026                           tablat	equ	0xFF5
  5027                           prodh	equ	0xFF4
  5028                           prodl	equ	0xFF3
  5029                           intcon	equ	0xFF2
  5030                           indf0	equ	0xFEF
  5031                           postinc0	equ	0xFEE
  5032                           fsr0h	equ	0xFEA
  5033                           fsr0l	equ	0xFE9
  5034                           wreg	equ	0xFE8
  5035                           postdec1	equ	0xFE5
  5036                           fsr1l	equ	0xFE1
  5037                           indf2	equ	0xFDF
  5038                           postinc2	equ	0xFDE
  5039                           postdec2	equ	0xFDD
  5040                           fsr2h	equ	0xFDA
  5041                           fsr2l	equ	0xFD9
  5042                           status	equ	0xFD8
  5043                           tblptru	equ	0xFF8
  5044                           tblptrh	equ	0xFF7
  5045                           tblptrl	equ	0xFF6
  5046                           tablat	equ	0xFF5
  5047                           prodh	equ	0xFF4
  5048                           prodl	equ	0xFF3
  5049                           intcon	equ	0xFF2
  5050                           indf0	equ	0xFEF
  5051                           postinc0	equ	0xFEE
  5052                           fsr0h	equ	0xFEA
  5053                           fsr0l	equ	0xFE9
  5054                           wreg	equ	0xFE8
  5055                           postdec1	equ	0xFE5
  5056                           fsr1l	equ	0xFE1
  5057                           indf2	equ	0xFDF
  5058                           postinc2	equ	0xFDE
  5059                           postdec2	equ	0xFDD
  5060                           fsr2h	equ	0xFDA
  5061                           fsr2l	equ	0xFD9
  5062                           status	equ	0xFD8
  5063                           
  5064                           	psect	rparam
  5065  0000                     tblptru	equ	0xFF8
  5066                           tblptrh	equ	0xFF7
  5067                           tblptrl	equ	0xFF6
  5068                           tablat	equ	0xFF5
  5069                           prodh	equ	0xFF4
  5070                           prodl	equ	0xFF3
  5071                           intcon	equ	0xFF2
  5072                           indf0	equ	0xFEF
  5073                           postinc0	equ	0xFEE
  5074                           fsr0h	equ	0xFEA
  5075                           fsr0l	equ	0xFE9
  5076                           wreg	equ	0xFE8
  5077                           postdec1	equ	0xFE5
  5078                           fsr1l	equ	0xFE1
  5079                           indf2	equ	0xFDF
  5080                           postinc2	equ	0xFDE
  5081                           postdec2	equ	0xFDD
  5082                           fsr2h	equ	0xFDA
  5083                           fsr2l	equ	0xFD9
  5084                           status	equ	0xFD8


Data Sizes:
    Strings     122
    Constant    14
    Data        14
    BSS         70
    Persistent  13
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     42      95
    BANK0           160      0      45
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    RtccWriteTime@pTm	PTR const struct . size(2) Largest target is 4
		 -> RtccTime(COMRAM[4]), 

    RtccWriteDate@pDt	PTR const struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_15(CODE[10]), STR_14(CODE[15]), STR_13(CODE[5]), STR_12(CODE[5]), 
		 -> STR_11(CODE[5]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), 
		 -> STR_7(CODE[5]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> buffer2(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    lcd_putrs@ptr	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_21(CODE[8]), STR_20(CODE[10]), STR_19(CODE[4]), STR_18(CODE[3]), 
		 -> STR_17(CODE[11]), STR_16(CODE[11]), buffer2(BANK0[20]), STR_3(CODE[10]), 
		 -> STR_2(CODE[13]), STR_1(CODE[33]), 


Critical Paths under _main in COMRAM

    _main->_set_vision
    _set_vision->_twinkle
    _write_Date->_sprintf
    _twinkle->_read_keyboard
    _read_keyboard->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcd_putrs->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    __delay_s->___awdiv
    _lcd_setcursor_vb->_lcd_send_byte
    _clear->_lcd_comand
    _caratula->_lcd_comand
    _lcd_init->_lcd_send_byte
    _lcd_comand->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _Write_RTC->_RtccWriteDate

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   50722
                                             40 COMRAM     2     2      0
                              _Setup
                           _caratula
                         _lcd_gotoxy
                          _lcd_putrs
                      _read_keyboard
                         _set_vision
 ---------------------------------------------------------------------------------
 (1) _set_vision                                           3     3      0   34467
                                             37 COMRAM     3     3      0
                              _clear
                     _clear_keyboard
                         _lcd_gotoxy
                          _lcd_putrs
                   _lcd_setcursor_vb
                      _read_keyboard
                            _twinkle
                         _write_Date
 ---------------------------------------------------------------------------------
 (2) _write_Date                                           0     0      0    8175
                         _lcd_gotoxy
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _twinkle                                              1     1      0   13111
                                             36 COMRAM     1     1      0
                           __delay_s
                         _lcd_gotoxy
                          _lcd_putrs
                      _read_keyboard
 ---------------------------------------------------------------------------------
 (3) _read_keyboard                                        1     1      0    6714
                                             35 COMRAM     1     1      0
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             32    22     10    3196
                                             12 COMRAM    23    13     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     287
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcd_putrs                                            2     0      2    3518
                                              8 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (4) _lcd_putc                                             1     1      0    2129
                                              7 COMRAM     1     1      0
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (5) _lcd_gotoxy                                           3     2      1    1461
                                              4 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (3) __delay_s                                             7     5      2    1394
                                              8 COMRAM     7     5      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _lcd_setcursor_vb                                     2     1      1     796
                                              4 COMRAM     2     1      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (2) _clear_keyboard                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _clear                                                1     1      0     646
                                              5 COMRAM     1     1      0
                         _lcd_comand
 ---------------------------------------------------------------------------------
 (1) _caratula                                             0     0      0     646
                         _lcd_comand
 ---------------------------------------------------------------------------------
 (1) _Setup                                                0     0      0    3892
                          _Write_RTC
                         _lcd_comand
                           _lcd_init
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             1     1      0     841
                                              4 COMRAM     1     1      0
                        _Delay1KTCYx
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _lcd_comand                                           1     1      0     646
                                              4 COMRAM     1     1      0
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (5) _lcd_send_byte                                        2     1      1     624
                                              2 COMRAM     2     1      1
                       _Delay100TCYx
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (6) _lcd_send_nibble                                      2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _Delay100TCYx                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Write_RTC                                            0     0      0    2405
                           _RtccWrOn
                      _RtccWriteDate
                      _RtccWriteTime
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1196
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _RtccWriteTime                                       11     8      3     537
                                              0 COMRAM    11     8      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (3) _RtccWriteDate                                       13    10      3     672
                                              0 COMRAM    13    10      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (4) _RtccWrOn                                             2     2      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Setup
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_init
       _Delay1KTCYx
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
       _lcd_send_nibble
   _caratula
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
   _lcd_gotoxy
     _lcd_send_byte
       _Delay100TCYx
       _lcd_send_nibble
   _lcd_putrs
     _lcd_putc
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
   _read_keyboard
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _set_vision
     _clear
       _lcd_comand
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _clear_keyboard
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _lcd_setcursor_vb
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _read_keyboard
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _twinkle
       __delay_s
         ___awdiv
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _read_keyboard
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _write_Date
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      2D       5       28.1%
BITCOMRAM           5F      0       1       0        1.1%
COMRAM              5F     2A      5F       1      100.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      8C       6        0.0%
DATA                 0      0      8C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sun Sep 04 20:13:45 2016

                        _a 002F                          _b 0031                          _c 0033  
                        _i 0035                          _j 0037                          _k 0039  
              _state_alarm 0052                         l75 1E08                         l76 1E0A  
           ?_lcd_send_byte 0003               ___awdiv@sign 0006        ___wmul@multiplicand 0003  
              lcd_comand@d 0005               __CFG_CP0$OFF 000000                        l220 1078  
                      l212 102E                        l204 0FC6                        l221 1074  
                      l213 102A                        l205 0FC2                        l240 115E  
                      l232 10EE                        l224 10AC                        l216 103C  
                      l208 0FFA                        l241 115A                        l233 10EA  
                      l225 10A8                        l217 1038                        l209 0FF6  
                      l260 11F8                        l252 11B6                        l244 1192  
                      l236 112A                        l228 10E0                        l261 11F4  
                      l253 11B2                        l245 118E                        l237 1126  
                      l229 10DC                        l256 11EA                        l248 11A0  
                      l265 1202                        l257 11E6                        l249 119C  
                      l633 13F2                        l574 1C5E                        _dia 0047  
                      _key 0051                        _mes 004D                        wreg 000FE8  
              lcd_gotoxy@x 0006                lcd_gotoxy@y 0005                       l2210 1E52  
                     l2212 1E58                       l2220 1D24                       l2222 1D30  
                     l2310 1272                       l2302 1244                       l2400 18F2  
                     l2224 1D3C                       l2304 1252                       l2218 1D18  
                     l2322 12F4                       l2314 1290                       l2412 191A  
                     l1700 1EB8                       l2228 1D48                       l2308 125C  
                     l1277 1C12                       l2414 1924                       l2406 1904  
                     l2254 1BD6                       l2238 1E82                       l2350 1390  
                     l2342 1368                       l2334 1338                       l2326 12FA  
                     l1287 1D0A                       l2600 1668                       l2432 1966  
                     l2424 194A                       l2416 192C                       l2184 1ECA  
                     l2256 1BE0                       l2352 139A                       l2328 131C  
                     l2512 120A                       l2610 1698                       l2266 1C06  
                     l2258 1BE8                       l2282 1CFE                       l2274 1CD6  
                     l2370 13F8                       l2362 13C8                       l2346 136C  
                     l2338 1344                       l2604 167C                       l2532 177A  
                     l2428 1956                       l2292 1CA0                       l2276 1CE0  
                     l2364 13D0                       l2356 13A6                       l2380 1474  
                     l2542 17AA                       l2526 1750                       l2278 1CE8  
                     l2536 178E                       l2720 1998                       l2288 1C76  
                     l2376 144C                       l2296 122A                       l2650 1706  
                     l2642 16EE                       l2570 17FA                       l2730 19B0  
                     l2378 1458                       l2724 19A0                       l2660 1C4A  
                     l2812 1832                       l2646 16FA                       l2574 1806  
                     l2814 1840                       l2594 162E                       l2578 1812  
                     l2738 19C4                       l2826 1880                       l2842 18CA  
                     l2764 1B66                       l2836 18AA                       l2838 18B8  
                     l2776 1BB2                       l2848 1A7A                       STR_1 0F0F  
                     STR_2 0F3F                       STR_3 0F6B                       STR_4 0F7D  
                     STR_5 0F7D                       STR_6 0F7D                       STR_7 0F7D  
                     STR_8 0F7D                       STR_9 0F7D                       u1210 1AF8  
                     u1230 1B10                       u1400 1CC0                       u1250 1B2A  
                     u1228 1AFA                       u1270 1B46                       u1407 1CB6  
                     u1248 1B12                       u1268 1B2C                       u1390 1C96  
                     u1288 1B48                       u1397 1C8C                       u2437 1ADC  
                     u2447 1210                       u2457 1C50                       u2467 1E98  
                     u2477 1EBA                       u2487 1ECC           ?_lcd_send_nibble 0001  
                     _anio 0045                       _flag 02F8                       _main 1A70  
                     _hora 004B                       fsr0h 000FEA                       indf0 000FEF  
                     fsr0l 000FE9                       fsr2h 000FDA                       fsr1l 000FE1  
                     indf2 000FDF                       fsr2l 000FD9              __CFG_T1DIG$ON 000000  
                     prodh 000FF4                       prodl 000FF3                       start 0000  
            __CFG_IESO$OFF 000000               ___param_bank 000010                _Delay1KTCYx 1EB6  
            __CFG_PLLDIV$1 000000                      ?_main 0001            __end_of___awdiv 1972  
                    STR_10 0F7D                      STR_11 0F7D                      STR_12 0F7D  
                    STR_20 0F57                      STR_13 0F7D                      STR_21 0F75  
                    STR_14 0F30                      STR_15 0F61                      STR_16 0F4C  
                    STR_17 0F25                      STR_18 0F86                      STR_19 0F82  
    __size_of_Delay100TCYx 0012            ___awdiv@divisor 0003            __end_of___lwdiv 1C1C  
          __end_of___lwmod 1D14            ___awdiv@counter 0005                      _TRISA 000F92  
                    _TRISB 000F93                      _TRISC 000F94             __CFG_FCMEN$OFF 000000  
                    _Setup 1D60                      _clear 1E8C            __end_of_dpowers 0F0B  
                    _mes_d 0059                      _mes_u 005A            __end_of_isdigit 1E8C  
           __pbitbssCOMRAM 02F8                      tablat 000FF5               lcd_putrs@ptr 0009  
                    status 000FD8            __end_of_sprintf 1484            __end_of_twinkle 1BC0  
  __CFG_DSWDTOSC$INTOSCREF 000000    __size_of_clear_keyboard 0006            __initialization 1DA8  
             _Delay100TCYx 1EC8               __end_of_main 1AEC            ??_lcd_send_byte 0004  
                   ??_main 0029              __activetblptr 000002           __end_of_RtccWrOn 1EEC  
                   ?_Setup 0001                     ?_clear 0001                     _ADCON0 000FC2  
                   _ADCON1 000FC1                     _EECON2 000FA7                     _ANCON0 000F48  
                   _ANCON1 000F49           ___awdiv@dividend 0001           __end_of__delay_s 1C74  
           __CFG_WDTEN$OFF 000000           RtccWriteDate@pDt 0001                     _RTCCFG 000F3F  
           __CFG_WPCFG$OFF 000000           __end_of_caratula 1F10             __CFG_WPDIS$OFF 000000  
           __CFG_XINST$OFF 000000           __end_of_lcd_init 19F2           __end_of_lcd_putc 1D60  
        ?_lcd_setcursor_vb 0005                     ___wmul 1E1E                  ??___awdiv 0005  
           __CFG_STVREN$ON 000000                     _diasem 0049                     _anio_d 0053  
                   _anio_u 0054                  ??___lwdiv 0005                  ??___lwmod 000C  
       ??_lcd_setcursor_vb 0006                     _hora_d 0057                     _hora_u 0058  
                   clear_0 1DAE                     clear_1 1DBC           ___awdiv@quotient 0007  
                   _minuto 004F      __end_of_RtccWriteDate 1712      __end_of_RtccWriteTime 181E  
         RtccWriteTime@pTm 0001               __pdataCOMRAM 0045                  ??_isdigit 0001  
             __mediumconst 0000                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8                  ??_sprintf 0017                  ??_twinkle 0025  
   __size_of_read_keyboard 0296                 __accesstop 0060    __end_of__initialization 1DE2  
       __size_of_Write_RTC 0148              ___rparam_used 000001             __pcstackCOMRAM 0001  
            __end_of_Setup 1DA8              __end_of_clear 1EA2            __CFG_DSWDTPS$G2 000000  
          __CFG_OSC$INTOSC 000000                    ??_Setup 000E          lcd_gotoxy@address 0007  
                  ??_clear 0006         __size_of_lcd_putrs 0054               sprintf@width 0021  
               __pbssBANK0 0060                 _dia_semana 008C  RtccWriteTime@tempHourWDay 000A  
               __pnvCOMRAM 0053             _clear_keyboard 1F10                  ?_RtccWrOn 0001  
           lcd_send_byte@n 0003                    ?___wmul 0001              _read_keyboard 0F8A  
             ?_Delay1KTCYx 0001                  ?__delay_s 0009          __end_of_Write_RTC 15CC  
           __delay_s@index 000E                 _lcd_comand 1EFA                  ?_caratula 0001  
               _lcd_gotoxy 1E46                    _RTCVALH 000F99                    _RTCVALL 000F98  
                ?_lcd_init 0001                  ?_lcd_putc 0001     __end_of_clear_keyboard 1F16  
                  __Hparam 0000                    __Lparam 0000   __size_of_lcd_send_nibble 0076  
               ??_RtccWrOn 0001                    ___awdiv 18DC          __end_of_lcd_putrs 1CC8  
           ?_read_keyboard 0001            __size_of___wmul 0028                    ___lwdiv 1BC0  
                  ___lwmod 1CC8               __psmallconst 0F00                _RtccTimeVal 002B  
                  __pcinit 1DA8                    _fecha_d 0055                    _fecha_u 0056  
                  __ramtop 0F00                 ??__delay_s 000B            set_vision@digit 0027  
                  __ptext0 1A70                    __ptext1 181E                    __ptext2 19F2  
                  __ptext3 1B62                    __ptext4 0F8A                    __ptext5 1220  
                  __ptext6 1E6A                    __ptext7 1E1E                    __ptext8 1CC8  
                  __ptext9 1BC0                    _buffer2 0078                  _T1CONbits 000FCD  
                  _dpowers 0F01                    _isdigit 1E6A                 ??_caratula 0006  
                  _segundo 003B                    _sprintf 1220                 ??_lcd_init 0005  
               ??_lcd_putc 0008                    _twinkle 1B62       end_of_initialization 1DE2  
     lcd_send_byte@address 0004              __Lmediumconst 0000            ?_clear_keyboard 0001  
             twinkle@input 0025                    postdec1 000FE5                    postdec2 000FDD  
                  postinc0 000FEE                    postinc2 000FDE                 _set_vision 181E  
    __end_of_lcd_send_byte 1E1E                  _PORTAbits 000F80                  _PORTCbits 000F82  
         __CFG_DSBOREN$OFF 000000                ?_lcd_comand 0001           __CFG_CPUDIV$OSC1 000000  
                _TRISBbits 000F93                ?_lcd_gotoxy 0005  __size_of_lcd_setcursor_vb 0014  
          _LCD_INIT_STRING 0F0B           __CFG_IOL1WAY$OFF 000000  RtccWriteDate@tempDayMonth 000A  
      __CFG_MSSP7B_EN$MSK7 000000            ??_read_keyboard 0024           Delay100TCYx@unit 0001  
               _write_Date 19F2                __delay_s@it 000C             __end_of___wmul 1E46  
            __pidataCOMRAM 1EEC  RtccWriteDate@tempHourWDay 000C          ??_lcd_send_nibble 0001  
     __size_of_Delay1KTCYx 0012           __CFG_DSWDTEN$OFF 000000        start_initialization 1DA8  
     RtccWriteTime@wasAlrm 0006       RtccWriteTime@wasWrEn 0007     __size_of_RtccWriteDate 0146  
          RtccWriteDate@di 0003     __size_of_RtccWriteTime 010C        __size_of_lcd_comand 000E  
      __size_of_lcd_gotoxy 0024                   ??___wmul 0005                ?_set_vision 0001  
        __size_of_RtccWrOn 0012            RtccWriteTime@di 0003           __CFG_LPT1OSC$OFF 000000  
              _ALRMCFGbits 000F91    __end_of_LCD_INIT_STRING 0F0F          __size_of__delay_s 0058  
              __pbssCOMRAM 002B                  _Write_RTC 1484               _isdigit$2329 0002  
        __size_of_caratula 0008            Delay1KTCYx@unit 0001          __size_of_lcd_init 0080  
              sprintf@flag 001D          __size_of_lcd_putc 004C                sprintf@prec 0020  
                __pnvBANK0 008C           ___lwdiv@dividend 0001              ?_Delay100TCYx 0001  
                 ?___awdiv 0001                   ?___lwdiv 0001                ?_write_Date 0001  
                 ?___lwmod 0008    RtccWriteTime@tempMinSec 0008                  _lcd_putrs 1C74  
  lcd_setcursor_vb@visible 0006              _RtccWriteDate 15CC                __smallconst 0F00  
            _RtccWriteTime 1712                   ?_isdigit 0001       __CFG_RTCOSC$T1OSCREF 000000  
         _lcd_setcursor_vb 1EA2             __size_of_Setup 0048                 ?_Write_RTC 0001  
         ___lwdiv@quotient 0005             __size_of_clear 0016           ??_clear_keyboard 0001  
                 ?_sprintf 000D                   ?_twinkle 0001        __size_of_set_vision 00BE  
         _RtccAlrmTimeDate 0060             ___wmul@product 0005            __delay_s@millis 0009  
                 _LATAbits 000F89                   _LATBbits 000F8A                   _PIE3bits 000FA3  
                _segundo_d 005D             ??_Delay100TCYx 0001                  _segundo_u 005E  
         __CFG_WDTPS$32768 000000         RtccWriteDate@wasOn 0005         _Rtcc_read_TimeDate 0070  
           ?_RtccWriteDate 0001                 ?_lcd_putrs 0009          ___wmul@multiplier 0001  
           ?_RtccWriteTime 0001                  lcd_init@i 0005               ??_lcd_comand 0005  
                main@input 002A                  lcd_putc@c 0008               ??_lcd_gotoxy 0006  
                copy_data0 1DD6        __size_of_write_Date 007E            _lcd_send_nibble 1AEC  
                 __Hrparam 0000                   _RtccDate 003D                   __Lrparam 0000  
                 _RtccTime 0041                   _RtccWrOn 1EDA         __end_of_lcd_comand 1F08  
       __end_of_lcd_gotoxy 1E6A           __size_of___awdiv 0096           __size_of___lwdiv 005C  
         __size_of___lwmod 004C                   __delay_s 1C1C               _RtccTimeDate 0068  
               sprintf@val 001E                   _caratula 1F08           __size_of_isdigit 0022  
          ___lwdiv@divisor 0003                ??_Write_RTC 000E            ___lwdiv@counter 0007  
                 __ptext10 1C74                   __ptext11 1D14                   __ptext20 1EB6  
                 __ptext12 1E46                   __ptext21 1EFA                   __ptext13 1C1C  
                 __ptext22 1DEC                   __ptext14 1EA2                   __ptext23 1AEC  
                 __ptext15 1F10                   __ptext24 1EC8                   __ptext16 1E8C  
                 __ptext25 1484                   __ptext17 1F08                   __ptext26 18DC  
                 __ptext18 1D60                   __ptext27 1712                   __ptext19 1972  
                 __ptext28 15CC                   __ptext29 1EDA                   _lcd_init 1972  
                 _lcd_putc 1D14           __size_of_sprintf 0264           __size_of_twinkle 005E  
   __size_of_lcd_send_byte 0032              __size_of_main 007C                   _minuto_d 005B  
                 _minuto_u 005C               ??_set_vision 0026      __end_of_read_keyboard 1220  
            ??_Delay1KTCYx 0001            ??_RtccWriteDate 0004            ??_RtccWriteTime 0004  
              ??_lcd_putrs 000B                _OSCTUNEbits 000F9B                 _INTCONbits 000FF2  
       RtccWriteTime@wasOn 0005       __end_of_Delay100TCYx 1EDA                   isdigit@c 0003  
                sprintf@ap 001B    __end_of_lcd_send_nibble 1B62                  sprintf@sp 000D  
       __end_of_set_vision 18DC      lcd_setcursor_vb@blink 0005           ___lwmod@dividend 0008  
               _OSCCONbits 000FD3   __end_of_lcd_setcursor_vb 1EB6      RtccWriteDate@tempYear 0007  
             ??_write_Date 0024              _lcd_send_byte 1DEC                 _RTCCFGbits 000F3F  
                 sprintf@c 0023                   sprintf@f 000F            ___lwmod@divisor 000A  
      __end_of_Delay1KTCYx 1EC8            ___lwmod@counter 000C       RtccWriteDate@wasAlrm 0006  
     RtccWriteDate@wasWrEn 0009         __end_of_write_Date 1A70      lcd_send_nibble@nibble 0002  
