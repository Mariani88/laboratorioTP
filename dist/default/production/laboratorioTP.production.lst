

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Sep 01 22:28:07 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    39                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    40  0000                     
    41                           	psect	idataCOMRAM
    42  001D7A                     __pidataCOMRAM:
    43                           	opt stack 0
    44                           
    45                           ;initializer for _anio
    46  001D7A  000F               	dw	15
    47                           
    48                           ;initializer for _dia
    49  001D7C  0008               	dw	8
    50                           
    51                           ;initializer for _diasem
    52  001D7E  0003               	dw	3
    53                           
    54                           ;initializer for _hora
    55  001D80  0012               	dw	18
    56                           
    57                           ;initializer for _mes
    58  001D82  0009               	dw	9
    59                           
    60                           ;initializer for _minuto
    61  001D84  001E               	dw	30
    62                           
    63                           	psect	smallconst
    64  000F00                     __psmallconst:
    65                           	opt stack 0
    66  000F00  00                 	db	0
    67  000F01                     _dpowers:
    68                           	opt stack 0
    69  000F01  0001               	dw	1
    70  000F03  000A               	dw	10
    71  000F05  0064               	dw	100
    72  000F07  03E8               	dw	1000
    73  000F09  2710               	dw	10000
    74  000F0B                     __end_of_dpowers:
    75                           	opt stack 0
    76  000F0B                     _LCD_INIT_STRING:
    77                           	opt stack 0
    78  000F0B  28                 	db	40
    79  000F0C  0C                 	db	12
    80  000F0D  01                 	db	1
    81  000F0E  06                 	db	6
    82  000F0F                     __end_of_LCD_INIT_STRING:
    83                           	opt stack 0
    84  000F0F                     STR_2:
    85                           
    86                           ; BSR set to: 15
    87  000F0F  20                 	db	32
    88  000F10  20                 	db	32
    89  000F11  20                 	db	32
    90  000F12  20                 	db	32
    91  000F13  20                 	db	32
    92  000F14  20                 	db	32
    93  000F15  20                 	db	32
    94  000F16  20                 	db	32
    95  000F17  20                 	db	32
    96  000F18  20                 	db	32
    97  000F19  20                 	db	32
    98  000F1A  20                 	db	32
    99  000F1B  20                 	db	32
   100  000F1C  20                 	db	32
   101  000F1D  20                 	db	32
   102  000F1E  20                 	db	32
   103  000F1F  20                 	db	32
   104  000F20  20                 	db	32
   105  000F21  20                 	db	32
   106  000F22  20                 	db	32
   107  000F23  20                 	db	32
   108  000F24  20                 	db	32
   109  000F25  20                 	db	32
   110  000F26  20                 	db	32
   111  000F27  20                 	db	32
   112  000F28  20                 	db	32
   113  000F29  20                 	db	32
   114  000F2A  20                 	db	32
   115  000F2B  20                 	db	32
   116  000F2C  20                 	db	32
   117  000F2D  20                 	db	32
   118  000F2E  20                 	db	32
   119  000F2F  00                 	db	0
   120  000F30                     STR_1:
   121                           
   122                           ; BSR set to: 15
   123  000F30  55                 	db	85	;'U'
   124  000F31  4E                 	db	78	;'N'
   125  000F32  49                 	db	73	;'I'
   126  000F33  4D                 	db	77	;'M'
   127  000F34  49                 	db	73	;'I'
   128  000F35  43                 	db	67	;'C'
   129  000F36  20                 	db	32
   130  000F37  20                 	db	32
   131  000F38  54                 	db	84	;'T'
   132  000F39  45                 	db	69	;'E'
   133  000F3A  43                 	db	67	;'C'
   134  000F3B  4C                 	db	76	;'L'
   135  000F3C  41                 	db	65	;'A'
   136  000F3D  44                 	db	68	;'D'
   137  000F3E  4F                 	db	79	;'O'
   138  000F3F  20                 	db	32
   139  000F40  00                 	db	0
   140  000F41                     STR_3:
   141                           
   142                           ; BSR set to: 15
   143  000F41  6E                 	db	110	;'n'
   144  000F42  75                 	db	117	;'u'
   145  000F43  6C                 	db	108	;'l'
   146  000F44  6C                 	db	108	;'l'
   147  000F45  20                 	db	32
   148  000F46  70                 	db	112	;'p'
   149  000F47  6F                 	db	111	;'o'
   150  000F48  69                 	db	105	;'i'
   151  000F49  6E                 	db	110	;'n'
   152  000F4A  74                 	db	116	;'t'
   153  000F4B  65                 	db	101	;'e'
   154  000F4C  72                 	db	114	;'r'
   155  000F4D  00                 	db	0
   156  000F4E                     STR_4:
   157                           
   158                           ; BSR set to: 15
   159  000F4E  65                 	db	101	;'e'
   160  000F4F  78                 	db	120	;'x'
   161  000F50  63                 	db	99	;'c'
   162  000F51  65                 	db	101	;'e'
   163  000F52  70                 	db	112	;'p'
   164  000F53  74                 	db	116	;'t'
   165  000F54  69                 	db	105	;'i'
   166  000F55  6F                 	db	111	;'o'
   167  000F56  6E                 	db	110	;'n'
   168  000F57  00                 	db	0
   169  000F58                     STR_5:
   170                           
   171                           ; BSR set to: 15
   172  000F58  25                 	db	37
   173  000F59  30                 	db	48	;'0'
   174  000F5A  31                 	db	49	;'1'
   175  000F5B  75                 	db	117	;'u'
   176  000F5C  00                 	db	0
   177  000F5D                     STR_19:
   178                           
   179                           ; BSR set to: 15
   180  000F5D  23                 	db	35
   181  000F5E  00                 	db	0
   182  000F5F                     STR_17:
   183                           
   184                           ; BSR set to: 15
   185  000F5F  2A                 	db	42
   186  000F60  00                 	db	0
   187  000F61                     STR_8:
   188                           
   189                           ; BSR set to: 15
   190  000F61  41                 	db	65	;'A'
   191  000F62  00                 	db	0
   192  000F63                     STR_12:
   193                           
   194                           ; BSR set to: 15
   195  000F63  42                 	db	66	;'B'
   196  000F64  00                 	db	0
   197  000F65                     STR_16:
   198                           
   199                           ; BSR set to: 15
   200  000F65  43                 	db	67	;'C'
   201  000F66  00                 	db	0
   202  000F67                     STR_20:
   203                           
   204                           ; BSR set to: 15
   205  000F67  44                 	db	68	;'D'
   206  000F68  00                 	db	0
   207  0000                     
   208                           ; #config settings
   209  000F69  00                 	db	0	; dummy byte at the end
   210  0000                     
   211                           	psect	nvCOMRAM
   212  000041                     __pnvCOMRAM:
   213                           	opt stack 0
   214  000041                     _anio_d:
   215                           	opt stack 0
   216  000041                     	ds	1
   217  000042                     _anio_u:
   218                           	opt stack 0
   219  000042                     	ds	1
   220  000043                     _dia_semana:
   221                           	opt stack 0
   222  000043                     	ds	1
   223  000044                     _fecha_d:
   224                           	opt stack 0
   225  000044                     	ds	1
   226  000045                     _fecha_u:
   227                           	opt stack 0
   228  000045                     	ds	1
   229  000046                     _hora_d:
   230                           	opt stack 0
   231  000046                     	ds	1
   232  000047                     _hora_u:
   233                           	opt stack 0
   234  000047                     	ds	1
   235  000048                     _mes_d:
   236                           	opt stack 0
   237  000048                     	ds	1
   238  000049                     _mes_u:
   239                           	opt stack 0
   240  000049                     	ds	1
   241  00004A                     _minuto_d:
   242                           	opt stack 0
   243  00004A                     	ds	1
   244  00004B                     _minuto_u:
   245                           	opt stack 0
   246  00004B                     	ds	1
   247  00004C                     _segundo_d:
   248                           	opt stack 0
   249  00004C                     	ds	1
   250  00004D                     _segundo_u:
   251                           	opt stack 0
   252  00004D                     	ds	1
   253  0000                     _ANCON0	set	3912
   254  0000                     _ANCON1	set	3913
   255  0000                     _RTCCFG	set	3903
   256  0000                     _RTCCFGbits	set	3903
   257  0000                     _ADCON0	set	4034
   258  0000                     _ADCON1	set	4033
   259  0000                     _ALRMCFGbits	set	3985
   260  0000                     _EECON2	set	4007
   261  0000                     _INTCONbits	set	4082
   262  0000                     _LATAbits	set	3977
   263  0000                     _LATBbits	set	3978
   264  0000                     _OSCCONbits	set	4051
   265  0000                     _OSCTUNEbits	set	3995
   266  0000                     _PIE3bits	set	4003
   267  0000                     _PORTAbits	set	3968
   268  0000                     _PORTCbits	set	3970
   269  0000                     _RTCVALH	set	3993
   270  0000                     _RTCVALL	set	3992
   271  0000                     _T1CONbits	set	4045
   272  0000                     _TRISA	set	3986
   273  0000                     _TRISB	set	3987
   274  0000                     _TRISBbits	set	3987
   275  0000                     _TRISC	set	3988
   276                           
   277                           	psect	cinit
   278  001C2A                     __pcinit:
   279                           	opt stack 0
   280  001C2A                     start_initialization:
   281                           	opt stack 0
   282  001C2A                     __initialization:
   283                           	opt stack 0
   284                           
   285                           ; Clear objects allocated to BANK0 (44 bytes)
   286  001C2A  EE00  F060         	lfsr	0,__pbssBANK0
   287  001C2E  0E2C               	movlw	44
   288  001C30                     clear_0:
   289  001C30  6AEE               	clrf	postinc0,c
   290  001C32  06E8               	decf	wreg,f,c
   291  001C34  E1FD               	bnz	clear_0
   292                           
   293                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   294  001C36  6A5A               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   295                           
   296                           ; Clear objects allocated to COMRAM (27 bytes)
   297  001C38  EE00  F026         	lfsr	0,__pbssCOMRAM
   298  001C3C  0E1B               	movlw	27
   299  001C3E                     clear_1:
   300  001C3E  6AEE               	clrf	postinc0,c
   301  001C40  06E8               	decf	wreg,f,c
   302  001C42  E1FD               	bnz	clear_1
   303                           
   304                           ; Initialize objects allocated to COMRAM (12 bytes)
   305                           ; load TBLPTR registers with __pidataCOMRAM
   306  001C44  0E7A               	movlw	low __pidataCOMRAM
   307  001C46  6EF6               	movwf	tblptrl,c
   308  001C48  0E1D               	movlw	high __pidataCOMRAM
   309  001C4A  6EF7               	movwf	tblptrh,c
   310  001C4C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   311  001C4E  6EF8               	movwf	tblptru,c
   312  001C50  EE00  F04E         	lfsr	0,__pdataCOMRAM
   313  001C54  EE10 F00C          	lfsr	1,12
   314  001C58                     copy_data0:
   315  001C58  0009               	tblrd		*+
   316  001C5A  CFF5 FFEE          	movff	tablat,postinc0
   317  001C5E  50E5               	movf	postdec1,w,c
   318  001C60  50E1               	movf	fsr1l,w,c
   319  001C62  E1FA               	bnz	copy_data0
   320  001C64                     end_of_initialization:
   321                           	opt stack 0
   322  001C64                     __end_of__initialization:
   323                           	opt stack 0
   324  001C64  0E00               	movlw	low (__Lmediumconst shr (0+16))
   325  001C66  6EF8               	movwf	tblptru,c
   326  001C68  0100               	movlb	0
   327  001C6A  EF23  F00C         	goto	_main	;jump to C main() function
   328                           tblptru	equ	0xFF8
   329                           tblptrh	equ	0xFF7
   330                           tblptrl	equ	0xFF6
   331                           tablat	equ	0xFF5
   332                           postinc0	equ	0xFEE
   333                           wreg	equ	0xFE8
   334                           postdec1	equ	0xFE5
   335                           fsr1l	equ	0xFE1
   336                           
   337                           	psect	bitbssCOMRAM
   338  0002D0                     __pbitbssCOMRAM:
   339                           	opt stack 0
   340  0002D0                     _flag:
   341                           	opt stack 0
   342  0002D0                     	ds	1
   343                           tblptru	equ	0xFF8
   344                           tblptrh	equ	0xFF7
   345                           tblptrl	equ	0xFF6
   346                           tablat	equ	0xFF5
   347                           postinc0	equ	0xFEE
   348                           wreg	equ	0xFE8
   349                           postdec1	equ	0xFE5
   350                           fsr1l	equ	0xFE1
   351                           
   352                           	psect	bssCOMRAM
   353  000026                     __pbssCOMRAM:
   354                           	opt stack 0
   355  000026                     _RtccTimeVal:
   356                           	opt stack 0
   357  000026                     	ds	4
   358  00002A                     _a:
   359                           	opt stack 0
   360  00002A                     	ds	2
   361  00002C                     _b:
   362                           	opt stack 0
   363  00002C                     	ds	2
   364  00002E                     _c:
   365                           	opt stack 0
   366  00002E                     	ds	2
   367  000030                     _i:
   368                           	opt stack 0
   369  000030                     	ds	2
   370  000032                     _j:
   371                           	opt stack 0
   372  000032                     	ds	2
   373  000034                     _k:
   374                           	opt stack 0
   375  000034                     	ds	2
   376  000036                     _segundo:
   377                           	opt stack 0
   378  000036                     	ds	2
   379  000038                     _key:
   380                           	opt stack 0
   381  000038                     	ds	1
   382  000039                     _RtccDate:
   383                           	opt stack 0
   384  000039                     	ds	4
   385  00003D                     _RtccTime:
   386                           	opt stack 0
   387  00003D                     	ds	4
   388                           tblptru	equ	0xFF8
   389                           tblptrh	equ	0xFF7
   390                           tblptrl	equ	0xFF6
   391                           tablat	equ	0xFF5
   392                           postinc0	equ	0xFEE
   393                           wreg	equ	0xFE8
   394                           postdec1	equ	0xFE5
   395                           fsr1l	equ	0xFE1
   396                           
   397                           	psect	dataCOMRAM
   398  00004E                     __pdataCOMRAM:
   399                           	opt stack 0
   400  00004E                     _anio:
   401                           	opt stack 0
   402  00004E                     	ds	2
   403  000050                     _dia:
   404                           	opt stack 0
   405  000050                     	ds	2
   406  000052                     _diasem:
   407                           	opt stack 0
   408  000052                     	ds	2
   409  000054                     _hora:
   410                           	opt stack 0
   411  000054                     	ds	2
   412  000056                     _mes:
   413                           	opt stack 0
   414  000056                     	ds	2
   415  000058                     _minuto:
   416                           	opt stack 0
   417  000058                     	ds	2
   418                           tblptru	equ	0xFF8
   419                           tblptrh	equ	0xFF7
   420                           tblptrl	equ	0xFF6
   421                           tablat	equ	0xFF5
   422                           postinc0	equ	0xFEE
   423                           wreg	equ	0xFE8
   424                           postdec1	equ	0xFE5
   425                           fsr1l	equ	0xFE1
   426                           
   427                           	psect	bssBANK0
   428  000060                     __pbssBANK0:
   429                           	opt stack 0
   430  000060                     _RtccAlrmTimeDate:
   431                           	opt stack 0
   432  000060                     	ds	8
   433  000068                     _RtccTimeDate:
   434                           	opt stack 0
   435  000068                     	ds	8
   436  000070                     _Rtcc_read_TimeDate:
   437                           	opt stack 0
   438  000070                     	ds	8
   439  000078                     _buffer2:
   440                           	opt stack 0
   441  000078                     	ds	20
   442                           tblptru	equ	0xFF8
   443                           tblptrh	equ	0xFF7
   444                           tblptrl	equ	0xFF6
   445                           tablat	equ	0xFF5
   446                           postinc0	equ	0xFEE
   447                           wreg	equ	0xFE8
   448                           postdec1	equ	0xFE5
   449                           fsr1l	equ	0xFE1
   450                           
   451                           	psect	cstackBANK1
   452  000100                     __pcstackBANK1:
   453                           	opt stack 0
   454  000100                     main@teclado:
   455                           	opt stack 0
   456                           
   457                           ; 256 bytes @ 0x0
   458  000100                     	ds	256
   459                           tblptru	equ	0xFF8
   460                           tblptrh	equ	0xFF7
   461                           tblptrl	equ	0xFF6
   462                           tablat	equ	0xFF5
   463                           postinc0	equ	0xFEE
   464                           wreg	equ	0xFE8
   465                           postdec1	equ	0xFE5
   466                           fsr1l	equ	0xFE1
   467                           
   468                           	psect	cstackCOMRAM
   469  000001                     __pcstackCOMRAM:
   470                           	opt stack 0
   471  000001                     ??_isdigit:
   472  000001                     ??_lcd_send_nibble:
   473  000001                     ?___wmul:
   474                           	opt stack 0
   475  000001                     ?___awdiv:
   476                           	opt stack 0
   477  000001                     ?___lwdiv:
   478                           	opt stack 0
   479  000001                     Delay100TCYx@unit:
   480                           	opt stack 0
   481  000001                     Delay1KTCYx@unit:
   482                           	opt stack 0
   483  000001                     RtccWriteDate@pDt:
   484                           	opt stack 0
   485  000001                     RtccWriteTime@pTm:
   486                           	opt stack 0
   487  000001                     ___wmul@multiplier:
   488                           	opt stack 0
   489  000001                     ___awdiv@dividend:
   490                           	opt stack 0
   491  000001                     ___lwdiv@dividend:
   492                           	opt stack 0
   493                           
   494                           ; 2 bytes @ 0x0
   495  000001                     	ds	1
   496  000002                     lcd_send_nibble@nibble:
   497                           	opt stack 0
   498  000002                     _isdigit$2224:
   499                           	opt stack 0
   500                           
   501                           ; 1 bytes @ 0x1
   502  000002                     	ds	1
   503  000003                     lcd_send_byte@n:
   504                           	opt stack 0
   505  000003                     RtccWriteDate@di:
   506                           	opt stack 0
   507  000003                     RtccWriteTime@di:
   508                           	opt stack 0
   509  000003                     isdigit@c:
   510                           	opt stack 0
   511  000003                     ___wmul@multiplicand:
   512                           	opt stack 0
   513  000003                     ___awdiv@divisor:
   514                           	opt stack 0
   515  000003                     ___lwdiv@divisor:
   516                           	opt stack 0
   517                           
   518                           ; 2 bytes @ 0x2
   519  000003                     	ds	1
   520  000004                     lcd_send_byte@address:
   521                           	opt stack 0
   522                           
   523                           ; 1 bytes @ 0x3
   524  000004                     	ds	1
   525  000005                     lcd_init@i:
   526                           	opt stack 0
   527  000005                     lcd_gotoxy@y:
   528                           	opt stack 0
   529  000005                     lcd_comand@d:
   530                           	opt stack 0
   531  000005                     RtccWriteDate@wasOn:
   532                           	opt stack 0
   533  000005                     RtccWriteTime@wasOn:
   534                           	opt stack 0
   535  000005                     ___awdiv@counter:
   536                           	opt stack 0
   537  000005                     ___wmul@product:
   538                           	opt stack 0
   539  000005                     ___lwdiv@quotient:
   540                           	opt stack 0
   541                           
   542                           ; 2 bytes @ 0x4
   543  000005                     	ds	1
   544  000006                     lcd_gotoxy@x:
   545                           	opt stack 0
   546  000006                     RtccWriteDate@wasAlrm:
   547                           	opt stack 0
   548  000006                     RtccWriteTime@wasAlrm:
   549                           	opt stack 0
   550  000006                     ___awdiv@sign:
   551                           	opt stack 0
   552                           
   553                           ; 1 bytes @ 0x5
   554  000006                     	ds	1
   555  000007                     lcd_gotoxy@address:
   556                           	opt stack 0
   557  000007                     RtccWriteTime@wasWrEn:
   558                           	opt stack 0
   559  000007                     ___lwdiv@counter:
   560                           	opt stack 0
   561  000007                     RtccWriteDate@tempYear:
   562                           	opt stack 0
   563  000007                     ___awdiv@quotient:
   564                           	opt stack 0
   565                           
   566                           ; 2 bytes @ 0x6
   567  000007                     	ds	1
   568  000008                     ?___lwmod:
   569                           	opt stack 0
   570  000008                     lcd_putc@c:
   571                           	opt stack 0
   572  000008                     RtccWriteTime@tempMinSec:
   573                           	opt stack 0
   574  000008                     ___lwmod@dividend:
   575                           	opt stack 0
   576                           
   577                           ; 2 bytes @ 0x7
   578  000008                     	ds	1
   579  000009                     RtccWriteDate@wasWrEn:
   580                           	opt stack 0
   581  000009                     lcd_putrs@ptr:
   582                           	opt stack 0
   583                           
   584                           ; 2 bytes @ 0x8
   585  000009                     	ds	1
   586  00000A                     RtccWriteDate@tempDayMonth:
   587                           	opt stack 0
   588  00000A                     RtccWriteTime@tempHourWDay:
   589                           	opt stack 0
   590  00000A                     ___lwmod@divisor:
   591                           	opt stack 0
   592                           
   593                           ; 2 bytes @ 0x9
   594  00000A                     	ds	1
   595  00000B                     
   596                           ; 0 bytes @ 0xA
   597  00000B                     	ds	1
   598  00000C                     ___lwmod@counter:
   599                           	opt stack 0
   600  00000C                     RtccWriteDate@tempHourWDay:
   601                           	opt stack 0
   602                           
   603                           ; 2 bytes @ 0xB
   604  00000C                     	ds	1
   605  00000D                     ?_sprintf:
   606                           	opt stack 0
   607  00000D                     sprintf@sp:
   608                           	opt stack 0
   609                           
   610                           ; 2 bytes @ 0xC
   611  00000D                     	ds	1
   612  00000E                     
   613                           ; 0 bytes @ 0xD
   614  00000E                     	ds	1
   615  00000F                     sprintf@f:
   616                           	opt stack 0
   617                           
   618                           ; 2 bytes @ 0xE
   619  00000F                     	ds	4
   620  000013                     ??_sprintf:
   621                           
   622                           ; 0 bytes @ 0x12
   623  000013                     	ds	4
   624  000017                     sprintf@ap:
   625                           	opt stack 0
   626                           
   627                           ; 2 bytes @ 0x16
   628  000017                     	ds	2
   629  000019                     sprintf@flag:
   630                           	opt stack 0
   631                           
   632                           ; 1 bytes @ 0x18
   633  000019                     	ds	1
   634  00001A                     sprintf@val:
   635                           	opt stack 0
   636                           
   637                           ; 2 bytes @ 0x19
   638  00001A                     	ds	2
   639  00001C                     sprintf@prec:
   640                           	opt stack 0
   641                           
   642                           ; 1 bytes @ 0x1B
   643  00001C                     	ds	1
   644  00001D                     sprintf@width:
   645                           	opt stack 0
   646                           
   647                           ; 2 bytes @ 0x1C
   648  00001D                     	ds	2
   649  00001F                     sprintf@c:
   650                           	opt stack 0
   651                           
   652                           ; 1 bytes @ 0x1E
   653  00001F                     	ds	1
   654  000020                     ??_read_keyboard:
   655                           
   656                           ; 0 bytes @ 0x1F
   657  000020                     	ds	1
   658  000021                     ??_main:
   659                           
   660                           ; 0 bytes @ 0x20
   661  000021                     	ds	2
   662  000023                     main@input:
   663                           	opt stack 0
   664                           
   665                           ; 1 bytes @ 0x22
   666  000023                     	ds	1
   667  000024                     main@i:
   668                           	opt stack 0
   669                           
   670                           ; 1 bytes @ 0x23
   671  000024                     	ds	1
   672  000025                     main@j:
   673                           	opt stack 0
   674                           
   675                           ; 1 bytes @ 0x24
   676  000025                     	ds	1
   677                           tblptru	equ	0xFF8
   678                           tblptrh	equ	0xFF7
   679                           tblptrl	equ	0xFF6
   680                           tablat	equ	0xFF5
   681                           postinc0	equ	0xFEE
   682                           wreg	equ	0xFE8
   683                           postdec1	equ	0xFE5
   684                           fsr1l	equ	0xFE1
   685                           
   686 ;;
   687 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   688 ;;
   689 ;; *************** function _main *****************
   690 ;; Defined at:
   691 ;;		line 131 in file "main.c"
   692 ;; Parameters:    Size  Location     Type
   693 ;;		None
   694 ;; Auto vars:     Size  Location     Type
   695 ;;  teclado       256    0[BANK1 ] unsigned char [16][16]
   696 ;;  j               1   36[COMRAM] unsigned char 
   697 ;;  i               1   35[COMRAM] unsigned char 
   698 ;;  input           1   34[COMRAM] unsigned char 
   699 ;; Return value:  Size  Location     Type
   700 ;;                  2   48[None  ] int 
   701 ;; Registers used:
   702 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   703 ;; Tracked objects:
   704 ;;		On entry : 0/0
   705 ;;		On exit  : 0/0
   706 ;;		Unchanged: 0/0
   707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   709 ;;      Locals:         3       0     256       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   710 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   711 ;;      Totals:         5       0     256       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   712 ;;Total ram usage:      261 bytes
   713 ;; Hardware stack levels required when called:    6
   714 ;; This function calls:
   715 ;;		_Setup
   716 ;;		_caratula
   717 ;;		_lcd_gotoxy
   718 ;;		_lcd_putrs
   719 ;;		_read_keyboard
   720 ;; This function is called by:
   721 ;;		Startup code after reset
   722 ;; This function uses a non-reentrant model
   723 ;;
   724                           
   725                           	psect	text0
   726  001846                     __ptext0:
   727                           	opt stack 0
   728  001846                     _main:
   729                           	opt stack 25
   730                           
   731                           ;main.c: 132: Setup();
   732                           
   733                           ; BSR set to: 15
   734                           ;incstack = 0
   735  001846  ECF1  F00D         	call	_Setup	;wreg free
   736                           
   737                           ;main.c: 133: caratula();
   738  00184A  EC64  F00E         	call	_caratula	;wreg free
   739  00184E  D000               	goto	l2613
   740  001850                     l2613:
   741                           
   742                           ;main.c: 139: int8 teclado[16][16];
   743                           ;main.c: 140: int8 i = 0;
   744  001850  0E00               	movlw	0
   745  001852  6E24               	movwf	main@i,c
   746                           
   747                           ;main.c: 141: int8 j = 0;
   748  001854  0E00               	movlw	0
   749  001856  6E25               	movwf	main@j,c
   750                           
   751                           ;main.c: 143: for (i = 0; i < 4; i++ ){
   752  001858  0E00               	movlw	0
   753  00185A  6E24               	movwf	main@i,c
   754  00185C                     l2619:
   755  00185C  0E03               	movlw	3
   756  00185E  6424               	cpfsgt	main@i,c
   757  001860  D001               	goto	l2623
   758  001862  D01E               	goto	l2639
   759  001864                     l2623:
   760                           
   761                           ;main.c: 144: for (j = 0; j < 4; j++){
   762  001864  0E00               	movlw	0
   763  001866  6E25               	movwf	main@j,c
   764  001868                     l2625:
   765  001868  0E03               	movlw	3
   766  00186A  6425               	cpfsgt	main@j,c
   767  00186C  D001               	goto	l2629
   768  00186E  D016               	goto	l2635
   769  001870                     l2629:
   770                           
   771                           ;main.c: 145: teclado [i][j] = 0;
   772  001870  5024               	movf	main@i,w,c
   773  001872  0D10               	mullw	16
   774  001874  0E00               	movlw	low main@teclado
   775  001876  6E21               	movwf	??_main& (0+255),c
   776  001878  0E01               	movlw	high main@teclado
   777  00187A  6E22               	movwf	(??_main+1)& (0+255),c
   778  00187C  50F3               	movf	prodl,w,c
   779  00187E  2621               	addwf	??_main,f,c
   780  001880  50F4               	movf	prodh,w,c
   781  001882  2222               	addwfc	??_main+1,f,c
   782  001884  5025               	movf	main@j,w,c
   783  001886  0D01               	mullw	1
   784  001888  50F3               	movf	prodl,w,c
   785  00188A  2421               	addwf	??_main,w,c
   786  00188C  6ED9               	movwf	fsr2l,c
   787  00188E  50F4               	movf	prodh,w,c
   788  001890  2022               	addwfc	??_main+1,w,c
   789  001892  6EDA               	movwf	fsr2h,c
   790  001894  0E00               	movlw	0
   791  001896  6EDF               	movwf	indf2,c
   792  001898  2A25               	incf	main@j,f,c
   793  00189A  D7E6               	goto	l2625
   794  00189C                     l2635:
   795  00189C  2A24               	incf	main@i,f,c
   796  00189E  D7DE               	goto	l2619
   797  0018A0                     l2639:
   798                           
   799                           ;main.c: 146: }
   800                           ;main.c: 147: }
   801                           ;main.c: 149: char input = read_keyboard();
   802  0018A0  ECB5  F007         	call	_read_keyboard	;wreg free
   803  0018A4  6E23               	movwf	main@input,c
   804                           
   805                           ;main.c: 151: if (input == 16){
   806  0018A6  0E10               	movlw	16
   807  0018A8  1823               	xorwf	main@input,w,c
   808  0018AA  A4D8               	btfss	status,2,c
   809  0018AC  D7D1               	goto	l2613
   810                           
   811                           ;main.c: 152: lcd_gotoxy(1,1);
   812  0018AE  0E01               	movlw	1
   813  0018B0  6E05               	movwf	lcd_gotoxy@y,c
   814  0018B2  0E01               	movlw	1
   815  0018B4  EC78  F00E         	call	_lcd_gotoxy
   816                           
   817                           ;main.c: 153: lcd_putrs("                                ");
   818  0018B8  0E0F               	movlw	low STR_2
   819  0018BA  6E09               	movwf	lcd_putrs@ptr,c
   820  0018BC  0E0F               	movlw	high STR_2
   821  0018BE  6E0A               	movwf	lcd_putrs@ptr+1,c
   822  0018C0  EC7B  F00D         	call	_lcd_putrs	;wreg free
   823                           
   824                           ;main.c: 154: lcd_gotoxy(1,1);
   825  0018C4  0E01               	movlw	1
   826  0018C6  6E05               	movwf	lcd_gotoxy@y,c
   827  0018C8  0E01               	movlw	1
   828  0018CA  EC78  F00E         	call	_lcd_gotoxy
   829                           
   830                           ;main.c: 155: lcd_putrs("null pointer");
   831  0018CE  0E41               	movlw	low STR_3
   832  0018D0  6E09               	movwf	lcd_putrs@ptr,c
   833  0018D2  0E0F               	movlw	high STR_3
   834  0018D4  6E0A               	movwf	lcd_putrs@ptr+1,c
   835  0018D6  EC7B  F00D         	call	_lcd_putrs	;wreg free
   836                           
   837                           ;main.c: 156: lcd_gotoxy(1,2);
   838  0018DA  0E02               	movlw	2
   839  0018DC  6E05               	movwf	lcd_gotoxy@y,c
   840  0018DE  0E01               	movlw	1
   841  0018E0  EC78  F00E         	call	_lcd_gotoxy
   842                           
   843                           ;main.c: 157: lcd_putrs("exception");
   844  0018E4  0E4E               	movlw	low STR_4
   845  0018E6  6E09               	movwf	lcd_putrs@ptr,c
   846  0018E8  0E0F               	movlw	high STR_4
   847  0018EA  6E0A               	movwf	lcd_putrs@ptr+1,c
   848  0018EC  EC7B  F00D         	call	_lcd_putrs	;wreg free
   849                           
   850                           ;main.c: 158: input = 0;
   851  0018F0  0E00               	movlw	0
   852  0018F2  6E23               	movwf	main@input,c
   853                           
   854                           ;main.c: 159: key = 0;
   855  0018F4  0E00               	movlw	0
   856  0018F6  6E38               	movwf	_key,c
   857                           
   858                           ;main.c: 160: _delay((unsigned long)((98)*(8000000/4000.0)));
   859  0018F8  0EFF               	movlw	255
   860  0018FA  6E21               	movwf	??_main& (0+255),c
   861  0018FC  0E8A               	movlw	138
   862  0018FE                     u2397:
   863  0018FE  2EE8               	decfsz	wreg,f,c
   864  001900  D7FE               	goto	u2397
   865  001902  2E21               	decfsz	??_main& (0+255),f,c
   866  001904  D7FC               	goto	u2397
   867  001906  D000               	nop2	
   868  001908  D7A3               	goto	l2613
   869                           
   870                           ;main.c: 161: }
   871                           ;main.c: 162: }
   872                           ;main.c: 164: return 0;
   873                           ;	Return value of _main is never used
   874  00190A  EF00  F000         	goto	start
   875  00190E                     __end_of_main:
   876                           	opt stack 0
   877                           tblptru	equ	0xFF8
   878                           tblptrh	equ	0xFF7
   879                           tblptrl	equ	0xFF6
   880                           tablat	equ	0xFF5
   881                           prodh	equ	0xFF4
   882                           prodl	equ	0xFF3
   883                           postinc0	equ	0xFEE
   884                           wreg	equ	0xFE8
   885                           postdec1	equ	0xFE5
   886                           fsr1l	equ	0xFE1
   887                           indf2	equ	0xFDF
   888                           fsr2h	equ	0xFDA
   889                           fsr2l	equ	0xFD9
   890                           status	equ	0xFD8
   891                           
   892 ;; *************** function _read_keyboard *****************
   893 ;; Defined at:
   894 ;;		line 4 in file "keyboard.c"
   895 ;; Parameters:    Size  Location     Type
   896 ;;		None
   897 ;; Auto vars:     Size  Location     Type
   898 ;;		None
   899 ;; Return value:  Size  Location     Type
   900 ;;                  1    wreg      unsigned char 
   901 ;; Registers used:
   902 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   903 ;; Tracked objects:
   904 ;;		On entry : 0/0
   905 ;;		On exit  : 0/0
   906 ;;		Unchanged: 0/0
   907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   910 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   911 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   912 ;;Total ram usage:        1 bytes
   913 ;; Hardware stack levels used:    1
   914 ;; Hardware stack levels required when called:    5
   915 ;; This function calls:
   916 ;;		_lcd_putrs
   917 ;;		_sprintf
   918 ;; This function is called by:
   919 ;;		_main
   920 ;; This function uses a non-reentrant model
   921 ;;
   922                           
   923                           	psect	text1
   924  000F6A                     __ptext1:
   925                           	opt stack 0
   926  000F6A                     _read_keyboard:
   927                           	opt stack 25
   928                           
   929                           ;keyboard.c: 5: LATAbits.LATA0=1;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=0;
   930                           
   931                           ;incstack = 0
   932  000F6A  8089               	bsf	3977,0,c	;volatile
   933  000F6C  9289               	bcf	3977,1,c	;volatile
   934  000F6E  9489               	bcf	3977,2,c	;volatile
   935  000F70  9689               	bcf	3977,3,c	;volatile
   936                           
   937                           ;keyboard.c: 6: {
   938                           ;keyboard.c: 7: if (PORTAbits.RA5==1){key=1;sprintf(buffer2,"%01u",key);lcd_putrs(buffer
      +                          2);while(PORTAbits.RA5==1){};}
   939  000F72  AA80               	btfss	3968,5,c	;volatile
   940  000F74  D018               	goto	l201
   941  000F76  0E01               	movlw	1
   942  000F78  6E38               	movwf	_key,c
   943  000F7A  0E78               	movlw	low _buffer2
   944  000F7C  6E0D               	movwf	sprintf@sp,c
   945  000F7E  0E00               	movlw	high _buffer2
   946  000F80  6E0E               	movwf	sprintf@sp+1,c
   947  000F82  0E58               	movlw	low STR_5
   948  000F84  6E0F               	movwf	sprintf@f,c
   949  000F86  0E0F               	movlw	high STR_5
   950  000F88  6E10               	movwf	sprintf@f+1,c
   951  000F8A  C038  F011         	movff	_key,?_sprintf+4
   952  000F8E  6A12               	clrf	?_sprintf+5,c
   953  000F90  EC24  F009         	call	_sprintf	;wreg free
   954  000F94  0E78               	movlw	low _buffer2
   955  000F96  6E09               	movwf	lcd_putrs@ptr,c
   956  000F98  0E00               	movlw	high _buffer2
   957  000F9A  6E0A               	movwf	lcd_putrs@ptr+1,c
   958  000F9C  EC7B  F00D         	call	_lcd_putrs	;wreg free
   959  000FA0  D000               	goto	l202
   960  000FA2                     l202:
   961  000FA2  BA80               	btfsc	3968,5,c	;volatile
   962  000FA4  D7FE               	goto	l202
   963  000FA6                     l201:
   964                           
   965                           ;keyboard.c: 8: if (PORTAbits.RA7==1){key=2;sprintf(buffer2,"%01u",key);lcd_putrs(buffer
      +                          2);while(PORTAbits.RA7==1){};}
   966  000FA6  AE80               	btfss	3968,7,c	;volatile
   967  000FA8  D018               	goto	l205
   968  000FAA  0E02               	movlw	2
   969  000FAC  6E38               	movwf	_key,c
   970  000FAE  0E78               	movlw	low _buffer2
   971  000FB0  6E0D               	movwf	sprintf@sp,c
   972  000FB2  0E00               	movlw	high _buffer2
   973  000FB4  6E0E               	movwf	sprintf@sp+1,c
   974  000FB6  0E58               	movlw	low STR_5
   975  000FB8  6E0F               	movwf	sprintf@f,c
   976  000FBA  0E0F               	movlw	high STR_5
   977  000FBC  6E10               	movwf	sprintf@f+1,c
   978  000FBE  C038  F011         	movff	_key,?_sprintf+4
   979  000FC2  6A12               	clrf	?_sprintf+5,c
   980  000FC4  EC24  F009         	call	_sprintf	;wreg free
   981  000FC8  0E78               	movlw	low _buffer2
   982  000FCA  6E09               	movwf	lcd_putrs@ptr,c
   983  000FCC  0E00               	movlw	high _buffer2
   984  000FCE  6E0A               	movwf	lcd_putrs@ptr+1,c
   985  000FD0  EC7B  F00D         	call	_lcd_putrs	;wreg free
   986  000FD4  D000               	goto	l206
   987  000FD6                     l206:
   988  000FD6  BE80               	btfsc	3968,7,c	;volatile
   989  000FD8  D7FE               	goto	l206
   990  000FDA                     l205:
   991                           
   992                           ;keyboard.c: 9: if (PORTAbits.RA6==1){key=3;sprintf(buffer2,"%01u",key);lcd_putrs(buffer
      +                          2);while(PORTAbits.RA6==1){};}
   993  000FDA  AC80               	btfss	3968,6,c	;volatile
   994  000FDC  D018               	goto	l209
   995  000FDE  0E03               	movlw	3
   996  000FE0  6E38               	movwf	_key,c
   997  000FE2  0E78               	movlw	low _buffer2
   998  000FE4  6E0D               	movwf	sprintf@sp,c
   999  000FE6  0E00               	movlw	high _buffer2
  1000  000FE8  6E0E               	movwf	sprintf@sp+1,c
  1001  000FEA  0E58               	movlw	low STR_5
  1002  000FEC  6E0F               	movwf	sprintf@f,c
  1003  000FEE  0E0F               	movlw	high STR_5
  1004  000FF0  6E10               	movwf	sprintf@f+1,c
  1005  000FF2  C038  F011         	movff	_key,?_sprintf+4
  1006  000FF6  6A12               	clrf	?_sprintf+5,c
  1007  000FF8  EC24  F009         	call	_sprintf	;wreg free
  1008  000FFC  0E78               	movlw	low _buffer2
  1009  000FFE  6E09               	movwf	lcd_putrs@ptr,c
  1010  001000  0E00               	movlw	high _buffer2
  1011  001002  6E0A               	movwf	lcd_putrs@ptr+1,c
  1012  001004  EC7B  F00D         	call	_lcd_putrs	;wreg free
  1013  001008  D000               	goto	l210
  1014  00100A                     l210:
  1015  00100A  BC80               	btfsc	3968,6,c	;volatile
  1016  00100C  D7FE               	goto	l210
  1017  00100E                     l209:
  1018                           
  1019                           ;keyboard.c: 10: if (PORTCbits.RC2==1){key=11;lcd_putrs("A");while(PORTCbits.RC2==1){};}
  1020  00100E  A482               	btfss	3970,2,c	;volatile
  1021  001010  D00B               	goto	l213
  1022  001012  0E0B               	movlw	11
  1023  001014  6E38               	movwf	_key,c
  1024  001016  0E61               	movlw	low STR_8
  1025  001018  6E09               	movwf	lcd_putrs@ptr,c
  1026  00101A  0E0F               	movlw	high STR_8
  1027  00101C  6E0A               	movwf	lcd_putrs@ptr+1,c
  1028  00101E  EC7B  F00D         	call	_lcd_putrs	;wreg free
  1029  001022  D000               	goto	l214
  1030  001024                     l214:
  1031  001024  B482               	btfsc	3970,2,c	;volatile
  1032  001026  D7FE               	goto	l214
  1033  001028                     l213:
  1034                           
  1035                           ;keyboard.c: 11: }
  1036                           ;keyboard.c: 12: LATAbits.LATA0=0;LATAbits.LATA1=1;LATAbits.LATA2=0;LATAbits.LATA3=0;
  1037  001028  9089               	bcf	3977,0,c	;volatile
  1038  00102A  8289               	bsf	3977,1,c	;volatile
  1039  00102C  9489               	bcf	3977,2,c	;volatile
  1040  00102E  9689               	bcf	3977,3,c	;volatile
  1041                           
  1042                           ;keyboard.c: 13: {
  1043                           ;keyboard.c: 14: if (PORTAbits.RA5==1){key=4;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA5==1){};}
  1044  001030  AA80               	btfss	3968,5,c	;volatile
  1045  001032  D018               	goto	l217
  1046  001034  0E04               	movlw	4
  1047  001036  6E38               	movwf	_key,c
  1048  001038  0E78               	movlw	low _buffer2
  1049  00103A  6E0D               	movwf	sprintf@sp,c
  1050  00103C  0E00               	movlw	high _buffer2
  1051  00103E  6E0E               	movwf	sprintf@sp+1,c
  1052  001040  0E58               	movlw	low STR_5
  1053  001042  6E0F               	movwf	sprintf@f,c
  1054  001044  0E0F               	movlw	high STR_5
  1055  001046  6E10               	movwf	sprintf@f+1,c
  1056  001048  C038  F011         	movff	_key,?_sprintf+4
  1057  00104C  6A12               	clrf	?_sprintf+5,c
  1058  00104E  EC24  F009         	call	_sprintf	;wreg free
  1059  001052  0E78               	movlw	low _buffer2
  1060  001054  6E09               	movwf	lcd_putrs@ptr,c
  1061  001056  0E00               	movlw	high _buffer2
  1062  001058  6E0A               	movwf	lcd_putrs@ptr+1,c
  1063  00105A  EC7B  F00D         	call	_lcd_putrs	;wreg free
  1064  00105E  D000               	goto	l218
  1065  001060                     l218:
  1066  001060  BA80               	btfsc	3968,5,c	;volatile
  1067  001062  D7FE               	goto	l218
  1068  001064                     l217:
  1069                           
  1070                           ;keyboard.c: 15: if (PORTAbits.RA7==1){key=5;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  1071  001064  AE80               	btfss	3968,7,c	;volatile
  1072  001066  D018               	goto	l221
  1073  001068  0E05               	movlw	5
  1074  00106A  6E38               	movwf	_key,c
  1075  00106C  0E78               	movlw	low _buffer2
  1076  00106E  6E0D               	movwf	sprintf@sp,c
  1077  001070  0E00               	movlw	high _buffer2
  1078  001072  6E0E               	movwf	sprintf@sp+1,c
  1079  001074  0E58               	movlw	low STR_5
  1080  001076  6E0F               	movwf	sprintf@f,c
  1081  001078  0E0F               	movlw	high STR_5
  1082  00107A  6E10               	movwf	sprintf@f+1,c
  1083  00107C  C038  F011         	movff	_key,?_sprintf+4
  1084  001080  6A12               	clrf	?_sprintf+5,c
  1085  001082  EC24  F009         	call	_sprintf	;wreg free
  1086  001086  0E78               	movlw	low _buffer2
  1087  001088  6E09               	movwf	lcd_putrs@ptr,c
  1088  00108A  0E00               	movlw	high _buffer2
  1089  00108C  6E0A               	movwf	lcd_putrs@ptr+1,c
  1090  00108E  EC7B  F00D         	call	_lcd_putrs	;wreg free
  1091  001092  D000               	goto	l222
  1092  001094                     l222:
  1093  001094  BE80               	btfsc	3968,7,c	;volatile
  1094  001096  D7FE               	goto	l222
  1095  001098                     l221:
  1096                           
  1097                           ;keyboard.c: 16: if (PORTAbits.RA6==1){key=6;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA6==1){};}
  1098  001098  AC80               	btfss	3968,6,c	;volatile
  1099  00109A  D018               	goto	l225
  1100  00109C  0E06               	movlw	6
  1101  00109E  6E38               	movwf	_key,c
  1102  0010A0  0E78               	movlw	low _buffer2
  1103  0010A2  6E0D               	movwf	sprintf@sp,c
  1104  0010A4  0E00               	movlw	high _buffer2
  1105  0010A6  6E0E               	movwf	sprintf@sp+1,c
  1106  0010A8  0E58               	movlw	low STR_5
  1107  0010AA  6E0F               	movwf	sprintf@f,c
  1108  0010AC  0E0F               	movlw	high STR_5
  1109  0010AE  6E10               	movwf	sprintf@f+1,c
  1110  0010B0  C038  F011         	movff	_key,?_sprintf+4
  1111  0010B4  6A12               	clrf	?_sprintf+5,c
  1112  0010B6  EC24  F009         	call	_sprintf	;wreg free
  1113  0010BA  0E78               	movlw	low _buffer2
  1114  0010BC  6E09               	movwf	lcd_putrs@ptr,c
  1115  0010BE  0E00               	movlw	high _buffer2
  1116  0010C0  6E0A               	movwf	lcd_putrs@ptr+1,c
  1117  0010C2  EC7B  F00D         	call	_lcd_putrs	;wreg free
  1118  0010C6  D000               	goto	l226
  1119  0010C8                     l226:
  1120  0010C8  BC80               	btfsc	3968,6,c	;volatile
  1121  0010CA  D7FE               	goto	l226
  1122  0010CC                     l225:
  1123                           
  1124                           ;keyboard.c: 17: if (PORTCbits.RC2==1){key=12;lcd_putrs("B");while(PORTCbits.RC2==1){};}
  1125  0010CC  A482               	btfss	3970,2,c	;volatile
  1126  0010CE  D00B               	goto	l229
  1127  0010D0  0E0C               	movlw	12
  1128  0010D2  6E38               	movwf	_key,c
  1129  0010D4  0E63               	movlw	low STR_12
  1130  0010D6  6E09               	movwf	lcd_putrs@ptr,c
  1131  0010D8  0E0F               	movlw	high STR_12
  1132  0010DA  6E0A               	movwf	lcd_putrs@ptr+1,c
  1133  0010DC  EC7B  F00D         	call	_lcd_putrs	;wreg free
  1134  0010E0  D000               	goto	l230
  1135  0010E2                     l230:
  1136  0010E2  B482               	btfsc	3970,2,c	;volatile
  1137  0010E4  D7FE               	goto	l230
  1138  0010E6                     l229:
  1139                           
  1140                           ;keyboard.c: 18: }
  1141                           ;keyboard.c: 19: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=1;LATAbits.LATA3=0;
  1142  0010E6  9089               	bcf	3977,0,c	;volatile
  1143  0010E8  9289               	bcf	3977,1,c	;volatile
  1144  0010EA  8489               	bsf	3977,2,c	;volatile
  1145  0010EC  9689               	bcf	3977,3,c	;volatile
  1146                           
  1147                           ;keyboard.c: 20: {
  1148                           ;keyboard.c: 21: if (PORTAbits.RA5==1){key=7;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA5==1){};}
  1149  0010EE  AA80               	btfss	3968,5,c	;volatile
  1150  0010F0  D018               	goto	l233
  1151  0010F2  0E07               	movlw	7
  1152  0010F4  6E38               	movwf	_key,c
  1153  0010F6  0E78               	movlw	low _buffer2
  1154  0010F8  6E0D               	movwf	sprintf@sp,c
  1155  0010FA  0E00               	movlw	high _buffer2
  1156  0010FC  6E0E               	movwf	sprintf@sp+1,c
  1157  0010FE  0E58               	movlw	low STR_5
  1158  001100  6E0F               	movwf	sprintf@f,c
  1159  001102  0E0F               	movlw	high STR_5
  1160  001104  6E10               	movwf	sprintf@f+1,c
  1161  001106  C038  F011         	movff	_key,?_sprintf+4
  1162  00110A  6A12               	clrf	?_sprintf+5,c
  1163  00110C  EC24  F009         	call	_sprintf	;wreg free
  1164  001110  0E78               	movlw	low _buffer2
  1165  001112  6E09               	movwf	lcd_putrs@ptr,c
  1166  001114  0E00               	movlw	high _buffer2
  1167  001116  6E0A               	movwf	lcd_putrs@ptr+1,c
  1168  001118  EC7B  F00D         	call	_lcd_putrs	;wreg free
  1169  00111C  D000               	goto	l234
  1170  00111E                     l234:
  1171  00111E  BA80               	btfsc	3968,5,c	;volatile
  1172  001120  D7FE               	goto	l234
  1173  001122                     l233:
  1174                           
  1175                           ;keyboard.c: 22: if (PORTAbits.RA7==1){key=8;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  1176  001122  AE80               	btfss	3968,7,c	;volatile
  1177  001124  D018               	goto	l237
  1178  001126  0E08               	movlw	8
  1179  001128  6E38               	movwf	_key,c
  1180  00112A  0E78               	movlw	low _buffer2
  1181  00112C  6E0D               	movwf	sprintf@sp,c
  1182  00112E  0E00               	movlw	high _buffer2
  1183  001130  6E0E               	movwf	sprintf@sp+1,c
  1184  001132  0E58               	movlw	low STR_5
  1185  001134  6E0F               	movwf	sprintf@f,c
  1186  001136  0E0F               	movlw	high STR_5
  1187  001138  6E10               	movwf	sprintf@f+1,c
  1188  00113A  C038  F011         	movff	_key,?_sprintf+4
  1189  00113E  6A12               	clrf	?_sprintf+5,c
  1190  001140  EC24  F009         	call	_sprintf	;wreg free
  1191  001144  0E78               	movlw	low _buffer2
  1192  001146  6E09               	movwf	lcd_putrs@ptr,c
  1193  001148  0E00               	movlw	high _buffer2
  1194  00114A  6E0A               	movwf	lcd_putrs@ptr+1,c
  1195  00114C  EC7B  F00D         	call	_lcd_putrs	;wreg free
  1196  001150  D000               	goto	l238
  1197  001152                     l238:
  1198  001152  BE80               	btfsc	3968,7,c	;volatile
  1199  001154  D7FE               	goto	l238
  1200  001156                     l237:
  1201                           
  1202                           ;keyboard.c: 23: if (PORTAbits.RA6==1){key=9;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA6==1){};}
  1203  001156  AC80               	btfss	3968,6,c	;volatile
  1204  001158  D018               	goto	l241
  1205  00115A  0E09               	movlw	9
  1206  00115C  6E38               	movwf	_key,c
  1207  00115E  0E78               	movlw	low _buffer2
  1208  001160  6E0D               	movwf	sprintf@sp,c
  1209  001162  0E00               	movlw	high _buffer2
  1210  001164  6E0E               	movwf	sprintf@sp+1,c
  1211  001166  0E58               	movlw	low STR_5
  1212  001168  6E0F               	movwf	sprintf@f,c
  1213  00116A  0E0F               	movlw	high STR_5
  1214  00116C  6E10               	movwf	sprintf@f+1,c
  1215  00116E  C038  F011         	movff	_key,?_sprintf+4
  1216  001172  6A12               	clrf	?_sprintf+5,c
  1217  001174  EC24  F009         	call	_sprintf	;wreg free
  1218  001178  0E78               	movlw	low _buffer2
  1219  00117A  6E09               	movwf	lcd_putrs@ptr,c
  1220  00117C  0E00               	movlw	high _buffer2
  1221  00117E  6E0A               	movwf	lcd_putrs@ptr+1,c
  1222  001180  EC7B  F00D         	call	_lcd_putrs	;wreg free
  1223  001184  D000               	goto	l242
  1224  001186                     l242:
  1225  001186  BC80               	btfsc	3968,6,c	;volatile
  1226  001188  D7FE               	goto	l242
  1227  00118A                     l241:
  1228                           
  1229                           ;keyboard.c: 24: if (PORTCbits.RC2==1){key=13;lcd_putrs("C");while(PORTCbits.RC2==1){};}
  1230  00118A  A482               	btfss	3970,2,c	;volatile
  1231  00118C  D00B               	goto	l245
  1232  00118E  0E0D               	movlw	13
  1233  001190  6E38               	movwf	_key,c
  1234  001192  0E65               	movlw	low STR_16
  1235  001194  6E09               	movwf	lcd_putrs@ptr,c
  1236  001196  0E0F               	movlw	high STR_16
  1237  001198  6E0A               	movwf	lcd_putrs@ptr+1,c
  1238  00119A  EC7B  F00D         	call	_lcd_putrs	;wreg free
  1239  00119E  D000               	goto	l246
  1240  0011A0                     l246:
  1241  0011A0  B482               	btfsc	3970,2,c	;volatile
  1242  0011A2  D7FE               	goto	l246
  1243  0011A4                     l245:
  1244                           
  1245                           ;keyboard.c: 25: }
  1246                           ;keyboard.c: 26: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=1;
  1247  0011A4  9089               	bcf	3977,0,c	;volatile
  1248  0011A6  9289               	bcf	3977,1,c	;volatile
  1249  0011A8  9489               	bcf	3977,2,c	;volatile
  1250  0011AA  8689               	bsf	3977,3,c	;volatile
  1251                           
  1252                           ;keyboard.c: 27: {
  1253                           ;keyboard.c: 28: if (PORTAbits.RA5==1){key=14;lcd_putrs("*");while(PORTAbits.RA5==1){};}
  1254  0011AC  AA80               	btfss	3968,5,c	;volatile
  1255  0011AE  D00B               	goto	l249
  1256  0011B0  0E0E               	movlw	14
  1257  0011B2  6E38               	movwf	_key,c
  1258  0011B4  0E5F               	movlw	low STR_17
  1259  0011B6  6E09               	movwf	lcd_putrs@ptr,c
  1260  0011B8  0E0F               	movlw	high STR_17
  1261  0011BA  6E0A               	movwf	lcd_putrs@ptr+1,c
  1262  0011BC  EC7B  F00D         	call	_lcd_putrs	;wreg free
  1263  0011C0  D000               	goto	l250
  1264  0011C2                     l250:
  1265  0011C2  BA80               	btfsc	3968,5,c	;volatile
  1266  0011C4  D7FE               	goto	l250
  1267  0011C6                     l249:
  1268                           
  1269                           ;keyboard.c: 29: if (PORTAbits.RA7==1){key=0;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  1270  0011C6  AE80               	btfss	3968,7,c	;volatile
  1271  0011C8  D018               	goto	l253
  1272  0011CA  0E00               	movlw	0
  1273  0011CC  6E38               	movwf	_key,c
  1274  0011CE  0E78               	movlw	low _buffer2
  1275  0011D0  6E0D               	movwf	sprintf@sp,c
  1276  0011D2  0E00               	movlw	high _buffer2
  1277  0011D4  6E0E               	movwf	sprintf@sp+1,c
  1278  0011D6  0E58               	movlw	low STR_5
  1279  0011D8  6E0F               	movwf	sprintf@f,c
  1280  0011DA  0E0F               	movlw	high STR_5
  1281  0011DC  6E10               	movwf	sprintf@f+1,c
  1282  0011DE  C038  F011         	movff	_key,?_sprintf+4
  1283  0011E2  6A12               	clrf	?_sprintf+5,c
  1284  0011E4  EC24  F009         	call	_sprintf	;wreg free
  1285  0011E8  0E78               	movlw	low _buffer2
  1286  0011EA  6E09               	movwf	lcd_putrs@ptr,c
  1287  0011EC  0E00               	movlw	high _buffer2
  1288  0011EE  6E0A               	movwf	lcd_putrs@ptr+1,c
  1289  0011F0  EC7B  F00D         	call	_lcd_putrs	;wreg free
  1290  0011F4  D000               	goto	l254
  1291  0011F6                     l254:
  1292  0011F6  BE80               	btfsc	3968,7,c	;volatile
  1293  0011F8  D7FE               	goto	l254
  1294  0011FA                     l253:
  1295                           
  1296                           ;keyboard.c: 30: if (PORTAbits.RA6==1){key=15;lcd_putrs("#");while(PORTAbits.RA6==1){};}
  1297  0011FA  AC80               	btfss	3968,6,c	;volatile
  1298  0011FC  D00B               	goto	l257
  1299  0011FE  0E0F               	movlw	15
  1300  001200  6E38               	movwf	_key,c
  1301  001202  0E5D               	movlw	low STR_19
  1302  001204  6E09               	movwf	lcd_putrs@ptr,c
  1303  001206  0E0F               	movlw	high STR_19
  1304  001208  6E0A               	movwf	lcd_putrs@ptr+1,c
  1305  00120A  EC7B  F00D         	call	_lcd_putrs	;wreg free
  1306  00120E  D000               	goto	l258
  1307  001210                     l258:
  1308  001210  BC80               	btfsc	3968,6,c	;volatile
  1309  001212  D7FE               	goto	l258
  1310  001214                     l257:
  1311                           
  1312                           ;keyboard.c: 31: if (PORTCbits.RC2==1){key=16;lcd_putrs("D");while(PORTCbits.RC2==1){};}
  1313  001214  A482               	btfss	3970,2,c	;volatile
  1314  001216  D00D               	goto	l2601
  1315  001218  0E10               	movlw	16
  1316  00121A  6E38               	movwf	_key,c
  1317  00121C  0E67               	movlw	low STR_20
  1318  00121E  6E09               	movwf	lcd_putrs@ptr,c
  1319  001220  0E0F               	movlw	high STR_20
  1320  001222  6E0A               	movwf	lcd_putrs@ptr+1,c
  1321  001224  EC7B  F00D         	call	_lcd_putrs	;wreg free
  1322  001228  D000               	goto	l262
  1323  00122A                     l262:
  1324  00122A  A482               	btfss	3970,2,c	;volatile
  1325  00122C  D002               	goto	l2601
  1326  00122E  D7FD               	goto	l262
  1327  001230  D000               	goto	l2601
  1328  001232                     l2601:
  1329                           
  1330                           ;keyboard.c: 32: }
  1331                           ;keyboard.c: 33: _delay((unsigned long)((98)*(8000000/4000.0)));
  1332  001232  0EFF               	movlw	255
  1333  001234  6E20               	movwf	??_read_keyboard& (0+255),c
  1334  001236  0E8A               	movlw	138
  1335  001238                     u2407:
  1336  001238  2EE8               	decfsz	wreg,f,c
  1337  00123A  D7FE               	goto	u2407
  1338  00123C  2E20               	decfsz	??_read_keyboard& (0+255),f,c
  1339  00123E  D7FC               	goto	u2407
  1340  001240  D000               	nop2	
  1341                           
  1342                           ;keyboard.c: 36: return key;
  1343  001242  5038               	movf	_key,w,c
  1344  001244  0012               	return	
  1345  001246  0012               	return		;funcret
  1346  001248                     __end_of_read_keyboard:
  1347                           	opt stack 0
  1348                           tblptru	equ	0xFF8
  1349                           tblptrh	equ	0xFF7
  1350                           tblptrl	equ	0xFF6
  1351                           tablat	equ	0xFF5
  1352                           prodh	equ	0xFF4
  1353                           prodl	equ	0xFF3
  1354                           postinc0	equ	0xFEE
  1355                           wreg	equ	0xFE8
  1356                           postdec1	equ	0xFE5
  1357                           fsr1l	equ	0xFE1
  1358                           indf2	equ	0xFDF
  1359                           fsr2h	equ	0xFDA
  1360                           fsr2l	equ	0xFD9
  1361                           status	equ	0xFD8
  1362                           
  1363 ;; *************** function _sprintf *****************
  1364 ;; Defined at:
  1365 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\doprnt.c"
  1366 ;; Parameters:    Size  Location     Type
  1367 ;;  sp              2   12[COMRAM] PTR unsigned char 
  1368 ;;		 -> buffer2(20), 
  1369 ;;  f               2   14[COMRAM] PTR const unsigned char 
  1370 ;;		 -> STR_18(5), STR_15(5), STR_14(5), STR_13(5), 
  1371 ;;		 -> STR_11(5), STR_10(5), STR_9(5), STR_7(5), 
  1372 ;;		 -> STR_6(5), STR_5(5), 
  1373 ;; Auto vars:     Size  Location     Type
  1374 ;;  tmpval          4    0        struct .
  1375 ;;  cp              3    0        PTR const unsigned char 
  1376 ;;  width           2   28[COMRAM] int 
  1377 ;;  val             2   25[COMRAM] unsigned int 
  1378 ;;  ap              2   22[COMRAM] PTR void [1]
  1379 ;;		 -> ?_sprintf(2), 
  1380 ;;  len             2    0        unsigned int 
  1381 ;;  c               1   30[COMRAM] char 
  1382 ;;  prec            1   27[COMRAM] char 
  1383 ;;  flag            1   24[COMRAM] unsigned char 
  1384 ;; Return value:  Size  Location     Type
  1385 ;;                  2   12[COMRAM] int 
  1386 ;; Registers used:
  1387 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1388 ;; Tracked objects:
  1389 ;;		On entry : 0/0
  1390 ;;		On exit  : 0/0
  1391 ;;		Unchanged: 0/0
  1392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1393 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1394 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1395 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1396 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1397 ;;Total ram usage:       19 bytes
  1398 ;; Hardware stack levels used:    1
  1399 ;; Hardware stack levels required when called:    1
  1400 ;; This function calls:
  1401 ;;		___lwdiv
  1402 ;;		___lwmod
  1403 ;;		___wmul
  1404 ;;		_isdigit
  1405 ;; This function is called by:
  1406 ;;		_read_keyboard
  1407 ;; This function uses a non-reentrant model
  1408 ;;
  1409                           
  1410                           	psect	text2
  1411  001248                     __ptext2:
  1412                           	opt stack 0
  1413  001248                     _sprintf:
  1414                           	opt stack 28
  1415                           
  1416                           ;doprnt.c: 494: va_list ap;
  1417                           ;doprnt.c: 499: signed char c;
  1418                           ;doprnt.c: 501: int width;
  1419                           ;doprnt.c: 506: signed char prec;
  1420                           ;doprnt.c: 508: unsigned char flag;
  1421                           ;doprnt.c: 523: union {
  1422                           ;doprnt.c: 524: unsigned long vd;
  1423                           ;doprnt.c: 525: double integ;
  1424                           ;doprnt.c: 526: } tmpval;
  1425                           ;doprnt.c: 528: unsigned int val;
  1426                           ;doprnt.c: 529: unsigned len;
  1427                           ;doprnt.c: 530: const char * cp;
  1428                           ;doprnt.c: 533: *ap = __va_start();
  1429                           
  1430                           ;incstack = 0
  1431  001248  0E11               	movlw	low (?_sprintf+4)
  1432  00124A  6E17               	movwf	sprintf@ap,c
  1433  00124C  0E00               	movlw	high (?_sprintf+4)
  1434  00124E  6E18               	movwf	sprintf@ap+1,c
  1435                           
  1436                           ;doprnt.c: 536: while(c = *f++) {
  1437  001250  D117               	goto	l2479
  1438  001252                     l2397:
  1439                           
  1440                           ;doprnt.c: 538: if(c != '%')
  1441  001252  0E25               	movlw	37
  1442  001254  181F               	xorwf	sprintf@c,w,c
  1443  001256  B4D8               	btfsc	status,2,c
  1444  001258  D009               	goto	l2403
  1445                           
  1446                           ;doprnt.c: 540: {
  1447                           ;doprnt.c: 541: ((*sp++ = (c)));
  1448  00125A  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1449  00125E  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1450  001262  C01F  FFDF         	movff	sprintf@c,indf2
  1451  001266  4A0D               	infsnz	sprintf@sp,f,c
  1452  001268  2A0E               	incf	sprintf@sp+1,f,c
  1453                           
  1454                           ;doprnt.c: 542: continue;
  1455  00126A  D10A               	goto	l2479
  1456  00126C                     l2403:
  1457                           
  1458                           ;doprnt.c: 543: }
  1459                           ;doprnt.c: 546: width = 0;
  1460  00126C  0E00               	movlw	0
  1461  00126E  6E1E               	movwf	sprintf@width+1,c
  1462  001270  0E00               	movlw	0
  1463  001272  6E1D               	movwf	sprintf@width,c
  1464                           
  1465                           ;doprnt.c: 548: flag = 0;
  1466  001274  0E00               	movlw	0
  1467  001276  6E19               	movwf	sprintf@flag,c
  1468                           
  1469                           ;doprnt.c: 551: switch(*f) {
  1470                           
  1471                           ;doprnt.c: 550: for(;;) {
  1472  001278  D005               	goto	l2409
  1473  00127A                     l2405:
  1474                           
  1475                           ;doprnt.c: 580: flag |= 0x04;
  1476  00127A  8419               	bsf	sprintf@flag,2,c
  1477                           
  1478                           ;doprnt.c: 581: f++;
  1479  00127C  4A0F               	infsnz	sprintf@f,f,c
  1480  00127E  2A10               	incf	sprintf@f+1,f,c
  1481                           
  1482                           ;doprnt.c: 582: continue;
  1483  001280  D001               	goto	l2409
  1484                           
  1485                           ;doprnt.c: 584: }
  1486  001282  D00B               	goto	l2411
  1487  001284                     l2409:
  1488  001284  C00F  FFF6         	movff	sprintf@f,tblptrl
  1489  001288  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1490  00128C                     	if	0	;tblptru may be non-zero
  1491  00128C                     	endif
  1492  00128C                     	if	0	;tblptru may be non-zero
  1493  00128C                     	endif
  1494  00128C  0008               	tblrd		*
  1495  00128E  50F5               	movf	tablat,w,c
  1496                           
  1497                           ; Switch size 1, requested type "space"
  1498                           ; Number of cases is 1, Range of values is 48 to 48
  1499                           ; switch strategies available:
  1500                           ; Name         Instructions Cycles
  1501                           ; simple_byte            4     3 (average)
  1502                           ;	Chosen strategy is simple_byte
  1503  001290  0A30               	xorlw	48	; case 48
  1504  001292  B4D8               	btfsc	status,2,c
  1505  001294  D7F2               	goto	l2405
  1506                           
  1507                           ;doprnt.c: 585: break;
  1508  001296  D001               	goto	l2411
  1509                           
  1510                           ;doprnt.c: 586: }
  1511  001298  D7F5               	goto	l2409
  1512  00129A                     l2411:
  1513                           
  1514                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1515  00129A  C00F  FFF6         	movff	sprintf@f,tblptrl
  1516  00129E  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1517  0012A2                     	if	0	;tblptru may be non-zero
  1518  0012A2                     	endif
  1519  0012A2                     	if	0	;tblptru may be non-zero
  1520  0012A2                     	endif
  1521  0012A2  0008               	tblrd		*
  1522  0012A4  50F5               	movf	tablat,w,c
  1523  0012A6  EC8A  F00E         	call	_isdigit
  1524  0012AA  A0D8               	btfss	status,0,c
  1525  0012AC  D03A               	goto	l2427
  1526                           
  1527                           ;doprnt.c: 598: width = 0;
  1528  0012AE  0E00               	movlw	0
  1529  0012B0  6E1E               	movwf	sprintf@width+1,c
  1530  0012B2  0E00               	movlw	0
  1531  0012B4  6E1D               	movwf	sprintf@width,c
  1532  0012B6  D000               	goto	l2415
  1533  0012B8                     l2415:
  1534                           
  1535                           ;doprnt.c: 600: width *= 10;
  1536  0012B8  C01D  F001         	movff	sprintf@width,___wmul@multiplier
  1537  0012BC  C01E  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  1538  0012C0  0E00               	movlw	0
  1539  0012C2  6E04               	movwf	___wmul@multiplicand+1,c
  1540  0012C4  0E0A               	movlw	10
  1541  0012C6  6E03               	movwf	___wmul@multiplicand,c
  1542  0012C8  EC50  F00E         	call	___wmul	;wreg free
  1543  0012CC  C001  F01D         	movff	?___wmul,sprintf@width
  1544  0012D0  C002  F01E         	movff	?___wmul+1,sprintf@width+1
  1545                           
  1546                           ;doprnt.c: 601: width += *f++ - '0';
  1547  0012D4  0ED0               	movlw	208
  1548  0012D6  6E13               	movwf	??_sprintf& (0+255),c
  1549  0012D8  0EFF               	movlw	255
  1550  0012DA  6E14               	movwf	(??_sprintf+1)& (0+255),c
  1551  0012DC  C00F  FFF6         	movff	sprintf@f,tblptrl
  1552  0012E0  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1553  0012E4                     	if	0	;tblptru may be non-zero
  1554  0012E4                     	endif
  1555  0012E4                     	if	0	;tblptru may be non-zero
  1556  0012E4                     	endif
  1557  0012E4  0008               	tblrd		*
  1558  0012E6  50F5               	movf	tablat,w,c
  1559  0012E8  6E15               	movwf	(??_sprintf+2)& (0+255),c
  1560  0012EA  6A16               	clrf	(??_sprintf+3)& (0+255),c
  1561  0012EC  5013               	movf	??_sprintf,w,c
  1562  0012EE  2615               	addwf	??_sprintf+2,f,c
  1563  0012F0  5014               	movf	??_sprintf+1,w,c
  1564  0012F2  2216               	addwfc	??_sprintf+3,f,c
  1565  0012F4  5015               	movf	??_sprintf+2,w,c
  1566  0012F6  261D               	addwf	sprintf@width,f,c
  1567  0012F8  5016               	movf	??_sprintf+3,w,c
  1568  0012FA  221E               	addwfc	sprintf@width+1,f,c
  1569  0012FC  4A0F               	infsnz	sprintf@f,f,c
  1570  0012FE  2A10               	incf	sprintf@f+1,f,c
  1571                           
  1572                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1573  001300  C00F  FFF6         	movff	sprintf@f,tblptrl
  1574  001304  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1575  001308                     	if	0	;tblptru may be non-zero
  1576  001308                     	endif
  1577  001308                     	if	0	;tblptru may be non-zero
  1578  001308                     	endif
  1579  001308  0008               	tblrd		*
  1580  00130A  50F5               	movf	tablat,w,c
  1581  00130C  EC8A  F00E         	call	_isdigit
  1582  001310  A0D8               	btfss	status,0,c
  1583  001312  D007               	goto	l2427
  1584  001314  D7D1               	goto	l2415
  1585                           
  1586                           ;doprnt.c: 608: }
  1587                           ;doprnt.c: 635: switch(c = *f++) {
  1588  001316  D005               	goto	l2427
  1589                           
  1590                           ;doprnt.c: 638: goto alldone;
  1591                           
  1592                           ;doprnt.c: 637: case 0:
  1593  001318  D0C1               	goto	l2481
  1594                           
  1595                           ;doprnt.c: 813: continue;
  1596                           
  1597                           ;doprnt.c: 802: default:
  1598  00131A  D0B2               	goto	l2479
  1599  00131C                     l2423:
  1600                           
  1601                           ;doprnt.c: 818: flag |= 0xC0;
  1602  00131C  0EC0               	movlw	192
  1603  00131E  1219               	iorwf	sprintf@flag,f,c
  1604                           
  1605                           ;doprnt.c: 822: }
  1606                           
  1607                           ;doprnt.c: 819: break;
  1608  001320  D011               	goto	l2429
  1609  001322                     l2427:
  1610  001322  C00F  FFF6         	movff	sprintf@f,tblptrl
  1611  001326  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1612  00132A  4A0F               	infsnz	sprintf@f,f,c
  1613  00132C  2A10               	incf	sprintf@f+1,f,c
  1614  00132E                     	if	0	;tblptru may be non-zero
  1615  00132E                     	endif
  1616  00132E                     	if	0	;tblptru may be non-zero
  1617  00132E                     	endif
  1618  00132E  0008               	tblrd		*
  1619  001330  CFF5 F01F          	movff	tablat,sprintf@c
  1620  001334  501F               	movf	sprintf@c,w,c
  1621                           
  1622                           ; Switch size 1, requested type "space"
  1623                           ; Number of cases is 2, Range of values is 0 to 117
  1624                           ; switch strategies available:
  1625                           ; Name         Instructions Cycles
  1626                           ; simple_byte            7     4 (average)
  1627                           ;	Chosen strategy is simple_byte
  1628  001336  0A00               	xorlw	0	; case 0
  1629  001338  B4D8               	btfsc	status,2,c
  1630  00133A  D0B0               	goto	l2481
  1631  00133C  0A75               	xorlw	117	; case 117
  1632  00133E  B4D8               	btfsc	status,2,c
  1633  001340  D7ED               	goto	l2423
  1634  001342  D09E               	goto	l2479
  1635  001344                     l2429:
  1636                           
  1637                           ;doprnt.c: 1273: {
  1638                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1639  001344  C017  FFD9         	movff	sprintf@ap,fsr2l
  1640  001348  C018  FFDA         	movff	sprintf@ap+1,fsr2h
  1641  00134C  CFDE F01A          	movff	postinc2,sprintf@val
  1642  001350  CFDD F01B          	movff	postdec2,sprintf@val+1
  1643  001354  0E02               	movlw	2
  1644  001356  2617               	addwf	sprintf@ap,f,c
  1645  001358  0E00               	movlw	0
  1646  00135A  2218               	addwfc	sprintf@ap+1,f,c
  1647                           
  1648                           ;doprnt.c: 1287: }
  1649                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1650  00135C  0E01               	movlw	1
  1651  00135E  6E1F               	movwf	sprintf@c,c
  1652  001360                     l2435:
  1653  001360  0E05               	movlw	5
  1654  001362  181F               	xorwf	sprintf@c,w,c
  1655  001364  B4D8               	btfsc	status,2,c
  1656  001366  D016               	goto	l2447
  1657  001368  D001               	goto	l2439
  1658  00136A  D014               	goto	l2447
  1659  00136C                     l2439:
  1660                           
  1661                           ;doprnt.c: 1306: if(val < dpowers[c])
  1662  00136C  501F               	movf	sprintf@c,w,c
  1663  00136E  0D02               	mullw	2
  1664  001370  0E01               	movlw	low _dpowers
  1665  001372  24F3               	addwf	prodl,w,c
  1666  001374  6EF6               	movwf	tblptrl,c
  1667  001376  0E0F               	movlw	high _dpowers
  1668  001378  20F4               	addwfc	prodh,w,c
  1669  00137A  6EF7               	movwf	tblptrh,c
  1670  00137C                     	if	0	;There are less than 3 active tblptr bytes
  1671  00137C                     	endif
  1672  00137C  0009               	tblrd		*+
  1673  00137E  50F5               	movf	tablat,w,c
  1674  001380  5C1A               	subwf	sprintf@val,w,c
  1675  001382  0009               	tblrd		*+
  1676  001384  50F5               	movf	tablat,w,c
  1677  001386  581B               	subwfb	sprintf@val+1,w,c
  1678  001388  A0D8               	btfss	status,0,c
  1679  00138A  D004               	goto	l2447
  1680  00138C  D001               	goto	l2443
  1681                           
  1682                           ;doprnt.c: 1307: break;
  1683  00138E  D002               	goto	l2447
  1684  001390                     l2443:
  1685  001390  2A1F               	incf	sprintf@c,f,c
  1686  001392  D7E6               	goto	l2435
  1687  001394                     l2447:
  1688                           
  1689                           ;doprnt.c: 1381: if(width > c)
  1690  001394  0E80               	movlw	128
  1691  001396  BE1F               	btfsc	sprintf@c,7,c
  1692  001398  0E7F               	movlw	127
  1693  00139A  6E13               	movwf	??_sprintf& (0+255),c
  1694  00139C  501D               	movf	sprintf@width,w,c
  1695  00139E  5C1F               	subwf	sprintf@c,w,c
  1696  0013A0  501E               	movf	sprintf@width+1,w,c
  1697  0013A2  0A80               	xorlw	128
  1698  0013A4  5813               	subwfb	??_sprintf& (0+255),w,c
  1699  0013A6  B0D8               	btfsc	status,0,c
  1700  0013A8  D007               	goto	l2451
  1701                           
  1702                           ;doprnt.c: 1382: width -= c;
  1703  0013AA  501F               	movf	sprintf@c,w,c
  1704  0013AC  5E1D               	subwf	sprintf@width,f,c
  1705  0013AE  0E00               	movlw	0
  1706  0013B0  BE1F               	btfsc	sprintf@c,7,c
  1707  0013B2  0EFF               	movlw	255
  1708  0013B4  5A1E               	subwfb	sprintf@width+1,f,c
  1709  0013B6  D005               	goto	l2453
  1710  0013B8                     l2451:
  1711                           
  1712                           ;doprnt.c: 1383: else
  1713                           ;doprnt.c: 1384: width = 0;
  1714  0013B8  0E00               	movlw	0
  1715  0013BA  6E1E               	movwf	sprintf@width+1,c
  1716  0013BC  0E00               	movlw	0
  1717  0013BE  6E1D               	movwf	sprintf@width,c
  1718  0013C0  D000               	goto	l2453
  1719  0013C2                     l2453:
  1720                           
  1721                           ;doprnt.c: 1387: if(flag & 0x04) {
  1722  0013C2  A419               	btfss	sprintf@flag,2,c
  1723  0013C4  D015               	goto	l2463
  1724                           
  1725                           ;doprnt.c: 1415: if(width)
  1726  0013C6  501D               	movf	sprintf@width,w,c
  1727  0013C8  101E               	iorwf	sprintf@width+1,w,c
  1728  0013CA  B4D8               	btfsc	status,2,c
  1729  0013CC  D026               	goto	l512
  1730  0013CE                     l2457:
  1731                           
  1732                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  1733  0013CE  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1734  0013D2  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1735  0013D6  0E30               	movlw	48
  1736  0013D8  6EDF               	movwf	indf2,c
  1737  0013DA  4A0D               	infsnz	sprintf@sp,f,c
  1738  0013DC  2A0E               	incf	sprintf@sp+1,f,c
  1739                           
  1740                           ;doprnt.c: 1418: while(--width);
  1741  0013DE  061D               	decf	sprintf@width,f,c
  1742  0013E0  A0D8               	btfss	status,0,c
  1743  0013E2  061E               	decf	sprintf@width+1,f,c
  1744  0013E4  501D               	movf	sprintf@width,w,c
  1745  0013E6  101E               	iorwf	sprintf@width+1,w,c
  1746  0013E8  B4D8               	btfsc	status,2,c
  1747  0013EA  D017               	goto	l512
  1748  0013EC  D7F0               	goto	l2457
  1749                           
  1750                           ;doprnt.c: 1420: } else
  1751  0013EE  D015               	goto	l512
  1752  0013F0                     l2463:
  1753                           
  1754                           ;doprnt.c: 1422: {
  1755                           ;doprnt.c: 1424: if(width
  1756                           ;doprnt.c: 1428: )
  1757  0013F0  501D               	movf	sprintf@width,w,c
  1758  0013F2  101E               	iorwf	sprintf@width+1,w,c
  1759  0013F4  B4D8               	btfsc	status,2,c
  1760  0013F6  D011               	goto	l512
  1761  0013F8                     l2465:
  1762                           
  1763                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  1764  0013F8  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1765  0013FC  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1766  001400  0E20               	movlw	32
  1767  001402  6EDF               	movwf	indf2,c
  1768  001404  4A0D               	infsnz	sprintf@sp,f,c
  1769  001406  2A0E               	incf	sprintf@sp+1,f,c
  1770                           
  1771                           ;doprnt.c: 1431: while(--width);
  1772  001408  061D               	decf	sprintf@width,f,c
  1773  00140A  A0D8               	btfss	status,0,c
  1774  00140C  061E               	decf	sprintf@width+1,f,c
  1775  00140E  501D               	movf	sprintf@width,w,c
  1776  001410  101E               	iorwf	sprintf@width+1,w,c
  1777  001412  B4D8               	btfsc	status,2,c
  1778  001414  D002               	goto	l512
  1779  001416  D7F0               	goto	l2465
  1780  001418  D000               	goto	l512
  1781  00141A                     l512:
  1782                           
  1783                           ;doprnt.c: 1469: }
  1784                           ;doprnt.c: 1472: prec = c;
  1785  00141A  C01F  F01C         	movff	sprintf@c,sprintf@prec
  1786                           
  1787                           ;doprnt.c: 1474: while(prec--) {
  1788  00141E  D02A               	goto	l2477
  1789  001420                     l2471:
  1790                           
  1791                           ;doprnt.c: 1478: {
  1792                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1793  001420  501C               	movf	sprintf@prec,w,c
  1794  001422  0D02               	mullw	2
  1795  001424  0E01               	movlw	low _dpowers
  1796  001426  24F3               	addwf	prodl,w,c
  1797  001428  6EF6               	movwf	tblptrl,c
  1798  00142A  0E0F               	movlw	high _dpowers
  1799  00142C  20F4               	addwfc	prodh,w,c
  1800  00142E  6EF7               	movwf	tblptrh,c
  1801  001430                     	if	0	;There are less than 3 active tblptr bytes
  1802  001430                     	endif
  1803  001430  0009               	tblrd		*+
  1804  001432  CFF5 F003          	movff	tablat,___lwdiv@divisor
  1805  001436  000A               	tblrd		*-
  1806  001438  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  1807  00143C  C01A  F001         	movff	sprintf@val,___lwdiv@dividend
  1808  001440  C01B  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  1809  001444  EC4D  F00D         	call	___lwdiv	;wreg free
  1810  001448  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  1811  00144C  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  1812  001450  0E00               	movlw	0
  1813  001452  6E0B               	movwf	___lwmod@divisor+1,c
  1814  001454  0E0A               	movlw	10
  1815  001456  6E0A               	movwf	___lwmod@divisor,c
  1816  001458  ECA5  F00D         	call	___lwmod	;wreg free
  1817  00145C  5008               	movf	?___lwmod,w,c
  1818  00145E  0F30               	addlw	48
  1819  001460  6E1F               	movwf	sprintf@c,c
  1820                           
  1821                           ;doprnt.c: 1523: }
  1822                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1823  001462  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1824  001466  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1825  00146A  C01F  FFDF         	movff	sprintf@c,indf2
  1826  00146E  4A0D               	infsnz	sprintf@sp,f,c
  1827  001470  2A0E               	incf	sprintf@sp+1,f,c
  1828  001472  D000               	goto	l2477
  1829  001474                     l2477:
  1830  001474  061C               	decf	sprintf@prec,f,c
  1831  001476  281C               	incf	sprintf@prec,w,c
  1832  001478  B4D8               	btfsc	status,2,c
  1833  00147A  D002               	goto	l2479
  1834  00147C  D7D1               	goto	l2471
  1835  00147E  D000               	goto	l2479
  1836  001480                     l2479:
  1837  001480  C00F  FFF6         	movff	sprintf@f,tblptrl
  1838  001484  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1839  001488  4A0F               	infsnz	sprintf@f,f,c
  1840  00148A  2A10               	incf	sprintf@f+1,f,c
  1841  00148C                     	if	0	;tblptru may be non-zero
  1842  00148C                     	endif
  1843  00148C                     	if	0	;tblptru may be non-zero
  1844  00148C                     	endif
  1845  00148C  0008               	tblrd		*
  1846  00148E  CFF5 F01F          	movff	tablat,sprintf@c
  1847  001492  501F               	movf	sprintf@c,w,c
  1848  001494  B4D8               	btfsc	status,2,c
  1849  001496  D002               	goto	l2481
  1850  001498  D6DC               	goto	l2397
  1851  00149A  D000               	goto	l2481
  1852  00149C                     l2481:
  1853                           
  1854                           ;doprnt.c: 1538: *sp = 0;
  1855  00149C  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1856  0014A0  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1857  0014A4  0E00               	movlw	0
  1858  0014A6  6EDF               	movwf	indf2,c
  1859  0014A8  0012               	return	
  1860                           
  1861                           ;doprnt.c: 1540: return 0;
  1862                           ;	Return value of _sprintf is never used
  1863  0014AA  0012               	return		;funcret
  1864  0014AC                     __end_of_sprintf:
  1865                           	opt stack 0
  1866                           tblptru	equ	0xFF8
  1867                           tblptrh	equ	0xFF7
  1868                           tblptrl	equ	0xFF6
  1869                           tablat	equ	0xFF5
  1870                           prodh	equ	0xFF4
  1871                           prodl	equ	0xFF3
  1872                           postinc0	equ	0xFEE
  1873                           wreg	equ	0xFE8
  1874                           postdec1	equ	0xFE5
  1875                           fsr1l	equ	0xFE1
  1876                           indf2	equ	0xFDF
  1877                           postinc2	equ	0xFDE
  1878                           postdec2	equ	0xFDD
  1879                           fsr2h	equ	0xFDA
  1880                           fsr2l	equ	0xFD9
  1881                           status	equ	0xFD8
  1882                           
  1883 ;; *************** function _isdigit *****************
  1884 ;; Defined at:
  1885 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\isdigit.c"
  1886 ;; Parameters:    Size  Location     Type
  1887 ;;  c               1    wreg     unsigned char 
  1888 ;; Auto vars:     Size  Location     Type
  1889 ;;  c               1    2[COMRAM] unsigned char 
  1890 ;; Return value:  Size  Location     Type
  1891 ;;		None               void
  1892 ;; Registers used:
  1893 ;;		wreg, status,2, status,0
  1894 ;; Tracked objects:
  1895 ;;		On entry : 0/0
  1896 ;;		On exit  : 0/0
  1897 ;;		Unchanged: 0/0
  1898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1900 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1901 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1902 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1903 ;;Total ram usage:        3 bytes
  1904 ;; Hardware stack levels used:    1
  1905 ;; This function calls:
  1906 ;;		Nothing
  1907 ;; This function is called by:
  1908 ;;		_sprintf
  1909 ;; This function uses a non-reentrant model
  1910 ;;
  1911                           
  1912                           	psect	text3
  1913  001D14                     __ptext3:
  1914                           	opt stack 0
  1915  001D14                     _isdigit:
  1916                           	opt stack 28
  1917                           
  1918                           ;incstack = 0
  1919                           ;isdigit@c stored from wreg
  1920  001D14  6E03               	movwf	isdigit@c,c
  1921  001D16  0E00               	movlw	0
  1922  001D18  6E02               	movwf	_isdigit$2224,c
  1923  001D1A  0E3A               	movlw	58
  1924  001D1C  6003               	cpfslt	isdigit@c,c
  1925  001D1E  D006               	goto	l2211
  1926  001D20  0E2F               	movlw	47
  1927  001D22  6403               	cpfsgt	isdigit@c,c
  1928  001D24  D003               	goto	l2211
  1929  001D26  0E01               	movlw	1
  1930  001D28  6E02               	movwf	_isdigit$2224,c
  1931  001D2A  D000               	goto	l2211
  1932  001D2C                     l2211:
  1933  001D2C  C002  F001         	movff	_isdigit$2224,??_isdigit
  1934  001D30  3001               	rrcf	??_isdigit,w,c
  1935  001D32  0012               	return	
  1936  001D34  0012               	return		;funcret
  1937  001D36                     __end_of_isdigit:
  1938                           	opt stack 0
  1939                           tblptru	equ	0xFF8
  1940                           tblptrh	equ	0xFF7
  1941                           tblptrl	equ	0xFF6
  1942                           tablat	equ	0xFF5
  1943                           prodh	equ	0xFF4
  1944                           prodl	equ	0xFF3
  1945                           postinc0	equ	0xFEE
  1946                           wreg	equ	0xFE8
  1947                           postdec1	equ	0xFE5
  1948                           fsr1l	equ	0xFE1
  1949                           indf2	equ	0xFDF
  1950                           postinc2	equ	0xFDE
  1951                           postdec2	equ	0xFDD
  1952                           fsr2h	equ	0xFDA
  1953                           fsr2l	equ	0xFD9
  1954                           status	equ	0xFD8
  1955                           
  1956 ;; *************** function ___wmul *****************
  1957 ;; Defined at:
  1958 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\Umul16.c"
  1959 ;; Parameters:    Size  Location     Type
  1960 ;;  multiplier      2    0[COMRAM] unsigned int 
  1961 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1962 ;; Auto vars:     Size  Location     Type
  1963 ;;  product         2    4[COMRAM] unsigned int 
  1964 ;; Return value:  Size  Location     Type
  1965 ;;                  2    0[COMRAM] unsigned int 
  1966 ;; Registers used:
  1967 ;;		wreg, status,2, status,0, prodl, prodh
  1968 ;; Tracked objects:
  1969 ;;		On entry : 0/0
  1970 ;;		On exit  : 0/0
  1971 ;;		Unchanged: 0/0
  1972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1973 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1974 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1976 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1977 ;;Total ram usage:        6 bytes
  1978 ;; Hardware stack levels used:    1
  1979 ;; This function calls:
  1980 ;;		Nothing
  1981 ;; This function is called by:
  1982 ;;		_sprintf
  1983 ;; This function uses a non-reentrant model
  1984 ;;
  1985                           
  1986                           	psect	text4
  1987  001CA0                     __ptext4:
  1988                           	opt stack 0
  1989  001CA0                     ___wmul:
  1990                           	opt stack 28
  1991                           
  1992                           ;incstack = 0
  1993  001CA0  5001               	movf	___wmul@multiplier,w,c
  1994  001CA2  0203               	mulwf	___wmul@multiplicand,c
  1995  001CA4  CFF3 F005          	movff	prodl,___wmul@product
  1996  001CA8  CFF4 F006          	movff	prodh,___wmul@product+1
  1997  001CAC  5001               	movf	___wmul@multiplier,w,c
  1998  001CAE  0204               	mulwf	___wmul@multiplicand+1,c
  1999  001CB0  50F3               	movf	prodl,w,c
  2000  001CB2  2606               	addwf	___wmul@product+1,f,c
  2001  001CB4  5002               	movf	___wmul@multiplier+1,w,c
  2002  001CB6  0203               	mulwf	___wmul@multiplicand,c
  2003  001CB8  50F3               	movf	prodl,w,c
  2004  001CBA  2606               	addwf	___wmul@product+1,f,c
  2005  001CBC  C005  F001         	movff	___wmul@product,?___wmul
  2006  001CC0  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2007  001CC4  0012               	return	
  2008  001CC6  0012               	return		;funcret
  2009  001CC8                     __end_of___wmul:
  2010                           	opt stack 0
  2011                           tblptru	equ	0xFF8
  2012                           tblptrh	equ	0xFF7
  2013                           tblptrl	equ	0xFF6
  2014                           tablat	equ	0xFF5
  2015                           prodh	equ	0xFF4
  2016                           prodl	equ	0xFF3
  2017                           postinc0	equ	0xFEE
  2018                           wreg	equ	0xFE8
  2019                           postdec1	equ	0xFE5
  2020                           fsr1l	equ	0xFE1
  2021                           indf2	equ	0xFDF
  2022                           postinc2	equ	0xFDE
  2023                           postdec2	equ	0xFDD
  2024                           fsr2h	equ	0xFDA
  2025                           fsr2l	equ	0xFD9
  2026                           status	equ	0xFD8
  2027                           
  2028 ;; *************** function ___lwmod *****************
  2029 ;; Defined at:
  2030 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lwmod.c"
  2031 ;; Parameters:    Size  Location     Type
  2032 ;;  dividend        2    7[COMRAM] unsigned int 
  2033 ;;  divisor         2    9[COMRAM] unsigned int 
  2034 ;; Auto vars:     Size  Location     Type
  2035 ;;  counter         1   11[COMRAM] unsigned char 
  2036 ;; Return value:  Size  Location     Type
  2037 ;;                  2    7[COMRAM] unsigned int 
  2038 ;; Registers used:
  2039 ;;		wreg, status,2, status,0
  2040 ;; Tracked objects:
  2041 ;;		On entry : 0/0
  2042 ;;		On exit  : 0/0
  2043 ;;		Unchanged: 0/0
  2044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2045 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2046 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2048 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2049 ;;Total ram usage:        5 bytes
  2050 ;; Hardware stack levels used:    1
  2051 ;; This function calls:
  2052 ;;		Nothing
  2053 ;; This function is called by:
  2054 ;;		_sprintf
  2055 ;; This function uses a non-reentrant model
  2056 ;;
  2057                           
  2058                           	psect	text5
  2059  001B4A                     __ptext5:
  2060                           	opt stack 0
  2061  001B4A                     ___lwmod:
  2062                           	opt stack 28
  2063                           
  2064                           ;incstack = 0
  2065  001B4A  500A               	movf	___lwmod@divisor,w,c
  2066  001B4C  100B               	iorwf	___lwmod@divisor+1,w,c
  2067  001B4E  B4D8               	btfsc	status,2,c
  2068  001B50  D01D               	goto	l1166
  2069  001B52  0E01               	movlw	1
  2070  001B54  6E0C               	movwf	___lwmod@counter,c
  2071  001B56  D005               	goto	l2293
  2072  001B58                     l2291:
  2073  001B58  90D8               	bcf	status,0,c
  2074  001B5A  360A               	rlcf	___lwmod@divisor,f,c
  2075  001B5C  360B               	rlcf	___lwmod@divisor+1,f,c
  2076  001B5E  2A0C               	incf	___lwmod@counter,f,c
  2077  001B60  D000               	goto	l2293
  2078  001B62                     l2293:
  2079  001B62  BE0B               	btfsc	___lwmod@divisor+1,7,c
  2080  001B64  D002               	goto	l2295
  2081  001B66  D7F8               	goto	l2291
  2082  001B68  D000               	goto	l2295
  2083  001B6A                     l2295:
  2084  001B6A  500A               	movf	___lwmod@divisor,w,c
  2085  001B6C  5C08               	subwf	___lwmod@dividend,w,c
  2086  001B6E  500B               	movf	___lwmod@divisor+1,w,c
  2087  001B70  5809               	subwfb	___lwmod@dividend+1,w,c
  2088  001B72  A0D8               	btfss	status,0,c
  2089  001B74  D005               	goto	l2299
  2090  001B76  500A               	movf	___lwmod@divisor,w,c
  2091  001B78  5E08               	subwf	___lwmod@dividend,f,c
  2092  001B7A  500B               	movf	___lwmod@divisor+1,w,c
  2093  001B7C  5A09               	subwfb	___lwmod@dividend+1,f,c
  2094  001B7E  D000               	goto	l2299
  2095  001B80                     l2299:
  2096  001B80  90D8               	bcf	status,0,c
  2097  001B82  320B               	rrcf	___lwmod@divisor+1,f,c
  2098  001B84  320A               	rrcf	___lwmod@divisor,f,c
  2099  001B86  2E0C               	decfsz	___lwmod@counter,f,c
  2100  001B88  D7F0               	goto	l2295
  2101  001B8A  D000               	goto	l1166
  2102  001B8C                     l1166:
  2103  001B8C  C008  F008         	movff	___lwmod@dividend,?___lwmod
  2104  001B90  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  2105  001B94  0012               	return		;funcret
  2106  001B96                     __end_of___lwmod:
  2107                           	opt stack 0
  2108                           tblptru	equ	0xFF8
  2109                           tblptrh	equ	0xFF7
  2110                           tblptrl	equ	0xFF6
  2111                           tablat	equ	0xFF5
  2112                           prodh	equ	0xFF4
  2113                           prodl	equ	0xFF3
  2114                           postinc0	equ	0xFEE
  2115                           wreg	equ	0xFE8
  2116                           postdec1	equ	0xFE5
  2117                           fsr1l	equ	0xFE1
  2118                           indf2	equ	0xFDF
  2119                           postinc2	equ	0xFDE
  2120                           postdec2	equ	0xFDD
  2121                           fsr2h	equ	0xFDA
  2122                           fsr2l	equ	0xFD9
  2123                           status	equ	0xFD8
  2124                           
  2125 ;; *************** function ___lwdiv *****************
  2126 ;; Defined at:
  2127 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  2128 ;; Parameters:    Size  Location     Type
  2129 ;;  dividend        2    0[COMRAM] unsigned int 
  2130 ;;  divisor         2    2[COMRAM] unsigned int 
  2131 ;; Auto vars:     Size  Location     Type
  2132 ;;  quotient        2    4[COMRAM] unsigned int 
  2133 ;;  counter         1    6[COMRAM] unsigned char 
  2134 ;; Return value:  Size  Location     Type
  2135 ;;                  2    0[COMRAM] unsigned int 
  2136 ;; Registers used:
  2137 ;;		wreg, status,2, status,0
  2138 ;; Tracked objects:
  2139 ;;		On entry : 0/0
  2140 ;;		On exit  : 0/0
  2141 ;;		Unchanged: 0/0
  2142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2143 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2144 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2146 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2147 ;;Total ram usage:        7 bytes
  2148 ;; Hardware stack levels used:    1
  2149 ;; This function calls:
  2150 ;;		Nothing
  2151 ;; This function is called by:
  2152 ;;		_sprintf
  2153 ;; This function uses a non-reentrant model
  2154 ;;
  2155                           
  2156                           	psect	text6
  2157  001A9A                     __ptext6:
  2158                           	opt stack 0
  2159  001A9A                     ___lwdiv:
  2160                           	opt stack 28
  2161                           
  2162                           ;incstack = 0
  2163  001A9A  0E00               	movlw	0
  2164  001A9C  6E06               	movwf	___lwdiv@quotient+1,c
  2165  001A9E  0E00               	movlw	0
  2166  001AA0  6E05               	movwf	___lwdiv@quotient,c
  2167  001AA2  5003               	movf	___lwdiv@divisor,w,c
  2168  001AA4  1004               	iorwf	___lwdiv@divisor+1,w,c
  2169  001AA6  B4D8               	btfsc	status,2,c
  2170  001AA8  D021               	goto	l1156
  2171  001AAA  0E01               	movlw	1
  2172  001AAC  6E07               	movwf	___lwdiv@counter,c
  2173  001AAE  D005               	goto	l2273
  2174  001AB0                     l2271:
  2175  001AB0  90D8               	bcf	status,0,c
  2176  001AB2  3603               	rlcf	___lwdiv@divisor,f,c
  2177  001AB4  3604               	rlcf	___lwdiv@divisor+1,f,c
  2178  001AB6  2A07               	incf	___lwdiv@counter,f,c
  2179  001AB8  D000               	goto	l2273
  2180  001ABA                     l2273:
  2181  001ABA  BE04               	btfsc	___lwdiv@divisor+1,7,c
  2182  001ABC  D002               	goto	l2275
  2183  001ABE  D7F8               	goto	l2271
  2184  001AC0  D000               	goto	l2275
  2185  001AC2                     l2275:
  2186  001AC2  90D8               	bcf	status,0,c
  2187  001AC4  3605               	rlcf	___lwdiv@quotient,f,c
  2188  001AC6  3606               	rlcf	___lwdiv@quotient+1,f,c
  2189  001AC8  5003               	movf	___lwdiv@divisor,w,c
  2190  001ACA  5C01               	subwf	___lwdiv@dividend,w,c
  2191  001ACC  5004               	movf	___lwdiv@divisor+1,w,c
  2192  001ACE  5802               	subwfb	___lwdiv@dividend+1,w,c
  2193  001AD0  A0D8               	btfss	status,0,c
  2194  001AD2  D006               	goto	l2283
  2195  001AD4  5003               	movf	___lwdiv@divisor,w,c
  2196  001AD6  5E01               	subwf	___lwdiv@dividend,f,c
  2197  001AD8  5004               	movf	___lwdiv@divisor+1,w,c
  2198  001ADA  5A02               	subwfb	___lwdiv@dividend+1,f,c
  2199  001ADC  8005               	bsf	___lwdiv@quotient,0,c
  2200  001ADE  D000               	goto	l2283
  2201  001AE0                     l2283:
  2202  001AE0  90D8               	bcf	status,0,c
  2203  001AE2  3204               	rrcf	___lwdiv@divisor+1,f,c
  2204  001AE4  3203               	rrcf	___lwdiv@divisor,f,c
  2205  001AE6  2E07               	decfsz	___lwdiv@counter,f,c
  2206  001AE8  D7EC               	goto	l2275
  2207  001AEA  D000               	goto	l1156
  2208  001AEC                     l1156:
  2209  001AEC  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  2210  001AF0  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2211  001AF4  0012               	return		;funcret
  2212  001AF6                     __end_of___lwdiv:
  2213                           	opt stack 0
  2214                           tblptru	equ	0xFF8
  2215                           tblptrh	equ	0xFF7
  2216                           tblptrl	equ	0xFF6
  2217                           tablat	equ	0xFF5
  2218                           prodh	equ	0xFF4
  2219                           prodl	equ	0xFF3
  2220                           postinc0	equ	0xFEE
  2221                           wreg	equ	0xFE8
  2222                           postdec1	equ	0xFE5
  2223                           fsr1l	equ	0xFE1
  2224                           indf2	equ	0xFDF
  2225                           postinc2	equ	0xFDE
  2226                           postdec2	equ	0xFDD
  2227                           fsr2h	equ	0xFDA
  2228                           fsr2l	equ	0xFD9
  2229                           status	equ	0xFD8
  2230                           
  2231 ;; *************** function _caratula *****************
  2232 ;; Defined at:
  2233 ;;		line 39 in file "main.c"
  2234 ;; Parameters:    Size  Location     Type
  2235 ;;		None
  2236 ;; Auto vars:     Size  Location     Type
  2237 ;;		None
  2238 ;; Return value:  Size  Location     Type
  2239 ;;		None               void
  2240 ;; Registers used:
  2241 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2242 ;; Tracked objects:
  2243 ;;		On entry : 0/0
  2244 ;;		On exit  : 0/0
  2245 ;;		Unchanged: 0/0
  2246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2250 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2251 ;;Total ram usage:        0 bytes
  2252 ;; Hardware stack levels used:    1
  2253 ;; Hardware stack levels required when called:    5
  2254 ;; This function calls:
  2255 ;;		_lcd_comand
  2256 ;;		_lcd_gotoxy
  2257 ;;		_lcd_putrs
  2258 ;; This function is called by:
  2259 ;;		_main
  2260 ;; This function uses a non-reentrant model
  2261 ;;
  2262                           
  2263                           	psect	text7
  2264  001CC8                     __ptext7:
  2265                           	opt stack 0
  2266  001CC8                     _caratula:
  2267                           	opt stack 25
  2268                           
  2269                           ;main.c: 41: lcd_comand(0b00001100);
  2270                           
  2271                           ;incstack = 0
  2272  001CC8  0E0C               	movlw	12
  2273  001CCA  ECB6  F00E         	call	_lcd_comand
  2274                           
  2275                           ;main.c: 42: lcd_gotoxy(1,1);
  2276  001CCE  0E01               	movlw	1
  2277  001CD0  6E05               	movwf	lcd_gotoxy@y,c
  2278  001CD2  0E01               	movlw	1
  2279  001CD4  EC78  F00E         	call	_lcd_gotoxy
  2280                           
  2281                           ;main.c: 43: lcd_putrs("UNIMIC  TECLADO ");
  2282  001CD8  0E30               	movlw	low STR_1
  2283  001CDA  6E09               	movwf	lcd_putrs@ptr,c
  2284  001CDC  0E0F               	movlw	high STR_1
  2285  001CDE  6E0A               	movwf	lcd_putrs@ptr+1,c
  2286  001CE0  EC7B  F00D         	call	_lcd_putrs	;wreg free
  2287                           
  2288                           ;main.c: 48: lcd_gotoxy(1,2);
  2289  001CE4  0E02               	movlw	2
  2290  001CE6  6E05               	movwf	lcd_gotoxy@y,c
  2291  001CE8  0E01               	movlw	1
  2292  001CEA  EC78  F00E         	call	_lcd_gotoxy
  2293  001CEE  0012               	return		;funcret
  2294  001CF0                     __end_of_caratula:
  2295                           	opt stack 0
  2296                           tblptru	equ	0xFF8
  2297                           tblptrh	equ	0xFF7
  2298                           tblptrl	equ	0xFF6
  2299                           tablat	equ	0xFF5
  2300                           prodh	equ	0xFF4
  2301                           prodl	equ	0xFF3
  2302                           postinc0	equ	0xFEE
  2303                           wreg	equ	0xFE8
  2304                           postdec1	equ	0xFE5
  2305                           fsr1l	equ	0xFE1
  2306                           indf2	equ	0xFDF
  2307                           postinc2	equ	0xFDE
  2308                           postdec2	equ	0xFDD
  2309                           fsr2h	equ	0xFDA
  2310                           fsr2l	equ	0xFD9
  2311                           status	equ	0xFD8
  2312                           
  2313 ;; *************** function _lcd_putrs *****************
  2314 ;; Defined at:
  2315 ;;		line 221 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2316 ;; Parameters:    Size  Location     Type
  2317 ;;  ptr             2    8[COMRAM] PTR const unsigned char 
  2318 ;;		 -> STR_20(2), STR_19(2), STR_17(2), STR_16(2), 
  2319 ;;		 -> STR_12(2), STR_8(2), buffer2(20), STR_4(10), 
  2320 ;;		 -> STR_3(13), STR_2(33), STR_1(17), 
  2321 ;; Auto vars:     Size  Location     Type
  2322 ;;		None
  2323 ;; Return value:  Size  Location     Type
  2324 ;;		None               void
  2325 ;; Registers used:
  2326 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2327 ;; Tracked objects:
  2328 ;;		On entry : 0/0
  2329 ;;		On exit  : 0/0
  2330 ;;		Unchanged: 0/0
  2331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2332 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2335 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2336 ;;Total ram usage:        2 bytes
  2337 ;; Hardware stack levels used:    1
  2338 ;; Hardware stack levels required when called:    4
  2339 ;; This function calls:
  2340 ;;		_lcd_putc
  2341 ;; This function is called by:
  2342 ;;		_caratula
  2343 ;;		_main
  2344 ;;		_read_keyboard
  2345 ;; This function uses a non-reentrant model
  2346 ;;
  2347                           
  2348                           	psect	text8
  2349  001AF6                     __ptext8:
  2350                           	opt stack 0
  2351  001AF6                     _lcd_putrs:
  2352                           	opt stack 25
  2353                           
  2354                           ;unmc_lcd_216.c: 223: while(*ptr){
  2355                           
  2356                           ;incstack = 0
  2357  001AF6  D015               	goto	l2311
  2358  001AF8                     l2307:
  2359                           
  2360                           ;unmc_lcd_216.c: 224: lcd_putc(*ptr++);
  2361  001AF8  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  2362  001AFC  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  2363  001B00  6AF8               	clrf	tblptru,c
  2364  001B02  0E0E               	movlw	(high __ramtop+-1)
  2365  001B04  64F7               	cpfsgt	tblptrh,c
  2366  001B06  D003               	bra	u1687
  2367  001B08  0008               	tblrd		*
  2368  001B0A  50F5               	movf	tablat,w,c
  2369  001B0C  D005               	bra	u1680
  2370  001B0E                     u1687:
  2371  001B0E  CFF6 FFE9          	movff	tblptrl,fsr0l
  2372  001B12  CFF7 FFEA          	movff	tblptrh,fsr0h
  2373  001B16  50EF               	movf	indf0,w,c
  2374  001B18                     u1680:
  2375  001B18  ECCB  F00D         	call	_lcd_putc
  2376  001B1C  4A09               	infsnz	lcd_putrs@ptr,f,c
  2377  001B1E  2A0A               	incf	lcd_putrs@ptr+1,f,c
  2378  001B20  D000               	goto	l2311
  2379  001B22                     l2311:
  2380  001B22  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  2381  001B26  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  2382  001B2A  6AF8               	clrf	tblptru,c
  2383  001B2C  0E0E               	movlw	(high __ramtop+-1)
  2384  001B2E  64F7               	cpfsgt	tblptrh,c
  2385  001B30  D003               	bra	u1697
  2386  001B32  0008               	tblrd		*
  2387  001B34  50F5               	movf	tablat,w,c
  2388  001B36  D005               	bra	u1690
  2389  001B38                     u1697:
  2390  001B38  CFF6 FFE9          	movff	tblptrl,fsr0l
  2391  001B3C  CFF7 FFEA          	movff	tblptrh,fsr0h
  2392  001B40  50EF               	movf	indf0,w,c
  2393  001B42                     u1690:
  2394  001B42  0900               	iorlw	0
  2395  001B44  A4D8               	btfss	status,2,c
  2396  001B46  D7D8               	goto	l2307
  2397  001B48  0012               	return		;funcret
  2398  001B4A                     __end_of_lcd_putrs:
  2399                           	opt stack 0
  2400                           tblptru	equ	0xFF8
  2401                           tblptrh	equ	0xFF7
  2402                           tblptrl	equ	0xFF6
  2403                           tablat	equ	0xFF5
  2404                           prodh	equ	0xFF4
  2405                           prodl	equ	0xFF3
  2406                           indf0	equ	0xFEF
  2407                           postinc0	equ	0xFEE
  2408                           fsr0h	equ	0xFEA
  2409                           fsr0l	equ	0xFE9
  2410                           wreg	equ	0xFE8
  2411                           postdec1	equ	0xFE5
  2412                           fsr1l	equ	0xFE1
  2413                           indf2	equ	0xFDF
  2414                           postinc2	equ	0xFDE
  2415                           postdec2	equ	0xFDD
  2416                           fsr2h	equ	0xFDA
  2417                           fsr2l	equ	0xFD9
  2418                           status	equ	0xFD8
  2419                           
  2420 ;; *************** function _lcd_putc *****************
  2421 ;; Defined at:
  2422 ;;		line 172 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2423 ;; Parameters:    Size  Location     Type
  2424 ;;  c               1    wreg     unsigned char 
  2425 ;; Auto vars:     Size  Location     Type
  2426 ;;  c               1    7[COMRAM] unsigned char 
  2427 ;; Return value:  Size  Location     Type
  2428 ;;		None               void
  2429 ;; Registers used:
  2430 ;;		wreg, status,2, status,0, cstack
  2431 ;; Tracked objects:
  2432 ;;		On entry : 0/0
  2433 ;;		On exit  : 0/0
  2434 ;;		Unchanged: 0/0
  2435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2437 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2439 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2440 ;;Total ram usage:        1 bytes
  2441 ;; Hardware stack levels used:    1
  2442 ;; Hardware stack levels required when called:    3
  2443 ;; This function calls:
  2444 ;;		_lcd_gotoxy
  2445 ;;		_lcd_send_byte
  2446 ;; This function is called by:
  2447 ;;		_lcd_putrs
  2448 ;;		_lcd_puts
  2449 ;; This function uses a non-reentrant model
  2450 ;;
  2451                           
  2452                           	psect	text9
  2453  001B96                     __ptext9:
  2454                           	opt stack 0
  2455  001B96                     _lcd_putc:
  2456                           	opt stack 25
  2457                           
  2458                           ;incstack = 0
  2459                           ;lcd_putc@c stored from wreg
  2460  001B96  6E08               	movwf	lcd_putc@c,c
  2461                           
  2462                           ;unmc_lcd_216.c: 173: switch(c){
  2463  001B98  D018               	goto	l2065
  2464  001B9A                     l2055:
  2465                           
  2466                           ;unmc_lcd_216.c: 175: lcd_send_byte(0,1);
  2467  001B9A  0E01               	movlw	1
  2468  001B9C  6E03               	movwf	lcd_send_byte@n,c
  2469  001B9E  0E00               	movlw	0
  2470  001BA0  EC37  F00E         	call	_lcd_send_byte
  2471                           
  2472                           ;unmc_lcd_216.c: 176: break;
  2473  001BA4  0012               	return	
  2474  001BA6                     l2057:
  2475                           
  2476                           ;unmc_lcd_216.c: 178: lcd_gotoxy(1,2);
  2477  001BA6  0E02               	movlw	2
  2478  001BA8  6E05               	movwf	lcd_gotoxy@y,c
  2479  001BAA  0E01               	movlw	1
  2480  001BAC  EC78  F00E         	call	_lcd_gotoxy
  2481                           
  2482                           ;unmc_lcd_216.c: 179: break;
  2483  001BB0  0012               	return	
  2484  001BB2                     l2059:
  2485                           
  2486                           ;unmc_lcd_216.c: 181: lcd_send_byte(0,0x10);
  2487  001BB2  0E10               	movlw	16
  2488  001BB4  6E03               	movwf	lcd_send_byte@n,c
  2489  001BB6  0E00               	movlw	0
  2490  001BB8  EC37  F00E         	call	_lcd_send_byte
  2491                           
  2492                           ;unmc_lcd_216.c: 182: break;
  2493  001BBC  0012               	return	
  2494  001BBE                     l2061:
  2495                           
  2496                           ;unmc_lcd_216.c: 184: lcd_send_byte(1,c);
  2497  001BBE  C008  F003         	movff	lcd_putc@c,lcd_send_byte@n
  2498  001BC2  0E01               	movlw	1
  2499  001BC4  EC37  F00E         	call	_lcd_send_byte
  2500                           
  2501                           ;unmc_lcd_216.c: 186: }
  2502                           
  2503                           ;unmc_lcd_216.c: 185: break;
  2504  001BC8  0012               	return	
  2505  001BCA                     l2065:
  2506  001BCA  5008               	movf	lcd_putc@c,w,c
  2507                           
  2508                           ; Switch size 1, requested type "space"
  2509                           ; Number of cases is 3, Range of values is 8 to 12
  2510                           ; switch strategies available:
  2511                           ; Name         Instructions Cycles
  2512                           ; simple_byte           10     6 (average)
  2513                           ;	Chosen strategy is simple_byte
  2514  001BCC  0A08               	xorlw	8	; case 8
  2515  001BCE  B4D8               	btfsc	status,2,c
  2516  001BD0  D7F0               	goto	l2059
  2517  001BD2  0A02               	xorlw	2	; case 10
  2518  001BD4  B4D8               	btfsc	status,2,c
  2519  001BD6  D7E7               	goto	l2057
  2520  001BD8  0A06               	xorlw	6	; case 12
  2521  001BDA  B4D8               	btfsc	status,2,c
  2522  001BDC  D7DE               	goto	l2055
  2523  001BDE  D7EF               	goto	l2061
  2524  001BE0  0012               	return		;funcret
  2525  001BE2                     __end_of_lcd_putc:
  2526                           	opt stack 0
  2527                           tblptru	equ	0xFF8
  2528                           tblptrh	equ	0xFF7
  2529                           tblptrl	equ	0xFF6
  2530                           tablat	equ	0xFF5
  2531                           prodh	equ	0xFF4
  2532                           prodl	equ	0xFF3
  2533                           indf0	equ	0xFEF
  2534                           postinc0	equ	0xFEE
  2535                           fsr0h	equ	0xFEA
  2536                           fsr0l	equ	0xFE9
  2537                           wreg	equ	0xFE8
  2538                           postdec1	equ	0xFE5
  2539                           fsr1l	equ	0xFE1
  2540                           indf2	equ	0xFDF
  2541                           postinc2	equ	0xFDE
  2542                           postdec2	equ	0xFDD
  2543                           fsr2h	equ	0xFDA
  2544                           fsr2l	equ	0xFD9
  2545                           status	equ	0xFD8
  2546                           
  2547 ;; *************** function _lcd_gotoxy *****************
  2548 ;; Defined at:
  2549 ;;		line 158 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2550 ;; Parameters:    Size  Location     Type
  2551 ;;  x               1    wreg     unsigned char 
  2552 ;;  y               1    4[COMRAM] unsigned char 
  2553 ;; Auto vars:     Size  Location     Type
  2554 ;;  x               1    5[COMRAM] unsigned char 
  2555 ;;  address         1    6[COMRAM] unsigned char 
  2556 ;; Return value:  Size  Location     Type
  2557 ;;		None               void
  2558 ;; Registers used:
  2559 ;;		wreg, status,2, status,0, cstack
  2560 ;; Tracked objects:
  2561 ;;		On entry : 0/0
  2562 ;;		On exit  : 0/0
  2563 ;;		Unchanged: 0/0
  2564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2565 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2566 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2568 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2569 ;;Total ram usage:        3 bytes
  2570 ;; Hardware stack levels used:    1
  2571 ;; Hardware stack levels required when called:    2
  2572 ;; This function calls:
  2573 ;;		_lcd_send_byte
  2574 ;; This function is called by:
  2575 ;;		_caratula
  2576 ;;		_main
  2577 ;;		_lcd_putc
  2578 ;; This function uses a non-reentrant model
  2579 ;;
  2580                           
  2581                           	psect	text10
  2582  001CF0                     __ptext10:
  2583                           	opt stack 0
  2584  001CF0                     _lcd_gotoxy:
  2585                           	opt stack 25
  2586                           
  2587                           ;incstack = 0
  2588                           ;lcd_gotoxy@x stored from wreg
  2589  001CF0  6E06               	movwf	lcd_gotoxy@x,c
  2590                           
  2591                           ;unmc_lcd_216.c: 159: int8 address;
  2592                           ;unmc_lcd_216.c: 161: if(y != 1)
  2593  001CF2  0405               	decf	lcd_gotoxy@y,w,c
  2594  001CF4  B4D8               	btfsc	status,2,c
  2595  001CF6  D002               	goto	l2047
  2596                           
  2597                           ;unmc_lcd_216.c: 162: address = 0x40;
  2598  001CF8  0E40               	movlw	64
  2599  001CFA  D001               	goto	L1
  2600  001CFC                     l2047:
  2601                           
  2602                           ;unmc_lcd_216.c: 163: else
  2603                           ;unmc_lcd_216.c: 164: address=0;
  2604  001CFC  0E00               	movlw	0
  2605  001CFE                     L1:
  2606  001CFE  6E07               	movwf	lcd_gotoxy@address,c
  2607  001D00  D000               	goto	l2049
  2608  001D02                     l2049:
  2609                           
  2610                           ;unmc_lcd_216.c: 166: address += x-1;
  2611  001D02  0406               	decf	lcd_gotoxy@x,w,c
  2612  001D04  2607               	addwf	lcd_gotoxy@address,f,c
  2613                           
  2614                           ;unmc_lcd_216.c: 167: lcd_send_byte(0, 0x80 | address);
  2615  001D06  5007               	movf	lcd_gotoxy@address,w,c
  2616  001D08  0980               	iorlw	128
  2617  001D0A  6E03               	movwf	lcd_send_byte@n,c
  2618  001D0C  0E00               	movlw	0
  2619  001D0E  EC37  F00E         	call	_lcd_send_byte
  2620  001D12  0012               	return		;funcret
  2621  001D14                     __end_of_lcd_gotoxy:
  2622                           	opt stack 0
  2623                           tblptru	equ	0xFF8
  2624                           tblptrh	equ	0xFF7
  2625                           tblptrl	equ	0xFF6
  2626                           tablat	equ	0xFF5
  2627                           prodh	equ	0xFF4
  2628                           prodl	equ	0xFF3
  2629                           indf0	equ	0xFEF
  2630                           postinc0	equ	0xFEE
  2631                           fsr0h	equ	0xFEA
  2632                           fsr0l	equ	0xFE9
  2633                           wreg	equ	0xFE8
  2634                           postdec1	equ	0xFE5
  2635                           fsr1l	equ	0xFE1
  2636                           indf2	equ	0xFDF
  2637                           postinc2	equ	0xFDE
  2638                           postdec2	equ	0xFDD
  2639                           fsr2h	equ	0xFDA
  2640                           fsr2l	equ	0xFD9
  2641                           status	equ	0xFD8
  2642                           
  2643 ;; *************** function _Setup *****************
  2644 ;; Defined at:
  2645 ;;		line 59 in file "main.c"
  2646 ;; Parameters:    Size  Location     Type
  2647 ;;		None
  2648 ;; Auto vars:     Size  Location     Type
  2649 ;;		None
  2650 ;; Return value:  Size  Location     Type
  2651 ;;		None               void
  2652 ;; Registers used:
  2653 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2654 ;; Tracked objects:
  2655 ;;		On entry : 0/0
  2656 ;;		On exit  : 0/0
  2657 ;;		Unchanged: 0/0
  2658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2662 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2663 ;;Total ram usage:        0 bytes
  2664 ;; Hardware stack levels used:    1
  2665 ;; Hardware stack levels required when called:    3
  2666 ;; This function calls:
  2667 ;;		_Write_RTC
  2668 ;;		_lcd_comand
  2669 ;;		_lcd_init
  2670 ;; This function is called by:
  2671 ;;		_main
  2672 ;; This function uses a non-reentrant model
  2673 ;;
  2674                           
  2675                           	psect	text11
  2676  001BE2                     __ptext11:
  2677                           	opt stack 0
  2678  001BE2                     _Setup:
  2679                           	opt stack 27
  2680                           
  2681                           ;main.c: 61: OSCTUNEbits.INTSRC=1;
  2682                           
  2683                           ;incstack = 0
  2684  001BE2  8E9B               	bsf	3995,7,c	;volatile
  2685                           
  2686                           ;main.c: 62: OSCTUNEbits.PLLEN=0;
  2687  001BE4  9C9B               	bcf	3995,6,c	;volatile
  2688                           
  2689                           ;main.c: 63: OSCCONbits.IRCF0=1;
  2690  001BE6  88D3               	bsf	4051,4,c	;volatile
  2691                           
  2692                           ;main.c: 64: OSCCONbits.IRCF1=1;
  2693  001BE8  8AD3               	bsf	4051,5,c	;volatile
  2694                           
  2695                           ;main.c: 65: OSCCONbits.IRCF2=1;
  2696  001BEA  8CD3               	bsf	4051,6,c	;volatile
  2697                           
  2698                           ;main.c: 66: OSCCONbits.SCS0=0;
  2699  001BEC  90D3               	bcf	4051,0,c	;volatile
  2700                           
  2701                           ;main.c: 67: OSCCONbits.SCS1=0;
  2702  001BEE  92D3               	bcf	4051,1,c	;volatile
  2703                           
  2704                           ;main.c: 68: TRISA = 0b11110000;
  2705  001BF0  0EF0               	movlw	240
  2706  001BF2  6E92               	movwf	3986,c	;volatile
  2707                           
  2708                           ;main.c: 69: TRISB = 0;
  2709  001BF4  0E00               	movlw	0
  2710  001BF6  6E93               	movwf	3987,c	;volatile
  2711                           
  2712                           ;main.c: 70: TRISC = 0b00000111;
  2713  001BF8  0E07               	movlw	7
  2714  001BFA  6E94               	movwf	3988,c	;volatile
  2715                           
  2716                           ;main.c: 74: ANCON0=0b11111111;
  2717  001BFC  010F               	movlb	15	; () banked
  2718  001BFE  6948               	setf	72,b	;volatile
  2719                           
  2720                           ; BSR set to: 15
  2721                           ;main.c: 76: ANCON1=0b11111111;
  2722  001C00  010F               	movlb	15	; () banked
  2723  001C02  6949               	setf	73,b	;volatile
  2724                           
  2725                           ;main.c: 77: ADCON0=0b00101101;
  2726  001C04  0E2D               	movlw	45
  2727  001C06  6EC2               	movwf	4034,c	;volatile
  2728                           
  2729                           ;main.c: 78: ADCON1=0b00010000;
  2730  001C08  0E10               	movlw	16
  2731  001C0A  6EC1               	movwf	4033,c	;volatile
  2732                           
  2733                           ; BSR set to: 15
  2734                           ;main.c: 79: RTCCFGbits.RTCEN=1;
  2735  001C0C  010F               	movlb	15	; () banked
  2736  001C0E  8F3F               	bsf	63,7,b	;volatile
  2737                           
  2738                           ; BSR set to: 15
  2739                           ;main.c: 80: RTCCFGbits.RTCWREN=1;
  2740  001C10  010F               	movlb	15	; () banked
  2741  001C12  8B3F               	bsf	63,5,b	;volatile
  2742                           
  2743                           ; BSR set to: 15
  2744                           ;main.c: 81: T1CONbits.T1OSCEN=1;
  2745  001C14  86CD               	bsf	4045,3,c	;volatile
  2746                           
  2747                           ; BSR set to: 15
  2748                           ;main.c: 82: Write_RTC();
  2749  001C16  EC56  F00A         	call	_Write_RTC	;wreg free
  2750                           
  2751                           ;main.c: 83: lcd_init();
  2752  001C1A  ECD2  F00C         	call	_lcd_init	;wreg free
  2753                           
  2754                           ;main.c: 84: lcd_comand(0b00001100);
  2755  001C1E  0E0C               	movlw	12
  2756  001C20  ECB6  F00E         	call	_lcd_comand
  2757                           
  2758                           ;main.c: 85: LATBbits.LATB1 = 1;;
  2759  001C24  828A               	bsf	3978,1,c	;volatile
  2760                           
  2761                           ;main.c: 86: LATBbits.LATB0 = 1;;
  2762  001C26  808A               	bsf	3978,0,c	;volatile
  2763  001C28  0012               	return		;funcret
  2764  001C2A                     __end_of_Setup:
  2765                           	opt stack 0
  2766                           tblptru	equ	0xFF8
  2767                           tblptrh	equ	0xFF7
  2768                           tblptrl	equ	0xFF6
  2769                           tablat	equ	0xFF5
  2770                           prodh	equ	0xFF4
  2771                           prodl	equ	0xFF3
  2772                           indf0	equ	0xFEF
  2773                           postinc0	equ	0xFEE
  2774                           fsr0h	equ	0xFEA
  2775                           fsr0l	equ	0xFE9
  2776                           wreg	equ	0xFE8
  2777                           postdec1	equ	0xFE5
  2778                           fsr1l	equ	0xFE1
  2779                           indf2	equ	0xFDF
  2780                           postinc2	equ	0xFDE
  2781                           postdec2	equ	0xFDD
  2782                           fsr2h	equ	0xFDA
  2783                           fsr2l	equ	0xFD9
  2784                           status	equ	0xFD8
  2785                           
  2786 ;; *************** function _lcd_init *****************
  2787 ;; Defined at:
  2788 ;;		line 119 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2789 ;; Parameters:    Size  Location     Type
  2790 ;;		None
  2791 ;; Auto vars:     Size  Location     Type
  2792 ;;  i               1    4[COMRAM] unsigned char 
  2793 ;; Return value:  Size  Location     Type
  2794 ;;		None               void
  2795 ;; Registers used:
  2796 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2797 ;; Tracked objects:
  2798 ;;		On entry : 0/0
  2799 ;;		On exit  : 0/0
  2800 ;;		Unchanged: 0/0
  2801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2803 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2805 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2806 ;;Total ram usage:        1 bytes
  2807 ;; Hardware stack levels used:    1
  2808 ;; Hardware stack levels required when called:    2
  2809 ;; This function calls:
  2810 ;;		_Delay1KTCYx
  2811 ;;		_lcd_send_byte
  2812 ;;		_lcd_send_nibble
  2813 ;; This function is called by:
  2814 ;;		_Setup
  2815 ;; This function uses a non-reentrant model
  2816 ;;
  2817                           
  2818                           	psect	text12
  2819  0019A4                     __ptext12:
  2820                           	opt stack 0
  2821  0019A4                     _lcd_init:
  2822                           	opt stack 27
  2823                           
  2824                           ;unmc_lcd_216.c: 120: int8 i;
  2825                           ;unmc_lcd_216.c: 122: TRISBbits.TRISB3=0;
  2826                           
  2827                           ;incstack = 0
  2828  0019A4  9693               	bcf	3987,3,c	;volatile
  2829                           
  2830                           ;unmc_lcd_216.c: 123: TRISBbits.TRISB2=0;
  2831  0019A6  9493               	bcf	3987,2,c	;volatile
  2832                           
  2833                           ;unmc_lcd_216.c: 128: LATBbits.LATB3=0;
  2834  0019A8  968A               	bcf	3978,3,c	;volatile
  2835                           
  2836                           ;unmc_lcd_216.c: 129: LATBbits.LATB2=0;
  2837  0019AA  948A               	bcf	3978,2,c	;volatile
  2838                           
  2839                           ;unmc_lcd_216.c: 134: TRISBbits.TRISB4=0;
  2840  0019AC  9893               	bcf	3987,4,c	;volatile
  2841                           
  2842                           ;unmc_lcd_216.c: 135: TRISBbits.TRISB5=0;
  2843  0019AE  9A93               	bcf	3987,5,c	;volatile
  2844                           
  2845                           ;unmc_lcd_216.c: 136: TRISBbits.TRISB6=0;
  2846  0019B0  9C93               	bcf	3987,6,c	;volatile
  2847                           
  2848                           ;unmc_lcd_216.c: 137: TRISBbits.TRISB7=0;
  2849  0019B2  9E93               	bcf	3987,7,c	;volatile
  2850                           
  2851                           ;unmc_lcd_216.c: 139: Delay1KTCYx(8000000UL/800000UL);
  2852  0019B4  0E0A               	movlw	10
  2853  0019B6  EC9B  F00E         	call	_Delay1KTCYx
  2854                           
  2855                           ;unmc_lcd_216.c: 140: Delay1KTCYx(8000000UL/800000UL);
  2856  0019BA  0E0A               	movlw	10
  2857  0019BC  EC9B  F00E         	call	_Delay1KTCYx
  2858                           
  2859                           ;unmc_lcd_216.c: 141: Delay1KTCYx(8000000UL/800000UL);
  2860  0019C0  0E0A               	movlw	10
  2861  0019C2  EC9B  F00E         	call	_Delay1KTCYx
  2862                           
  2863                           ;unmc_lcd_216.c: 143: for(i=0 ;i < 3; i++){
  2864  0019C6  0E00               	movlw	0
  2865  0019C8  6E05               	movwf	lcd_init@i,c
  2866  0019CA                     l2369:
  2867  0019CA  0E02               	movlw	2
  2868  0019CC  6405               	cpfsgt	lcd_init@i,c
  2869  0019CE  D001               	goto	l2373
  2870  0019D0  D008               	goto	l2379
  2871  0019D2                     l2373:
  2872                           
  2873                           ;unmc_lcd_216.c: 144: lcd_send_nibble(0x03);
  2874  0019D2  0E03               	movlw	3
  2875  0019D4  EC12  F00D         	call	_lcd_send_nibble
  2876                           
  2877                           ;unmc_lcd_216.c: 145: Delay1KTCYx(8000000UL/800000UL);
  2878  0019D8  0E0A               	movlw	10
  2879  0019DA  EC9B  F00E         	call	_Delay1KTCYx
  2880  0019DE  2A05               	incf	lcd_init@i,f,c
  2881  0019E0  D7F4               	goto	l2369
  2882  0019E2                     l2379:
  2883                           
  2884                           ;unmc_lcd_216.c: 146: }
  2885                           ;unmc_lcd_216.c: 148: lcd_send_nibble(0x02);
  2886  0019E2  0E02               	movlw	2
  2887  0019E4  EC12  F00D         	call	_lcd_send_nibble
  2888                           
  2889                           ;unmc_lcd_216.c: 150: for(i=0; i < sizeof(LCD_INIT_STRING); i++){
  2890  0019E8  0E00               	movlw	0
  2891  0019EA  6E05               	movwf	lcd_init@i,c
  2892  0019EC  0E03               	movlw	3
  2893  0019EE  6405               	cpfsgt	lcd_init@i,c
  2894  0019F0  D002               	goto	l2387
  2895  0019F2  0012               	return	
  2896  0019F4  0012               	return	
  2897  0019F6                     l2387:
  2898                           
  2899                           ;unmc_lcd_216.c: 151: lcd_send_byte(0, LCD_INIT_STRING[i]);
  2900  0019F6  5005               	movf	lcd_init@i,w,c
  2901  0019F8  0D01               	mullw	1
  2902  0019FA  0E0B               	movlw	low _LCD_INIT_STRING
  2903  0019FC  24F3               	addwf	prodl,w,c
  2904  0019FE  6EF6               	movwf	tblptrl,c
  2905  001A00  0E0F               	movlw	high _LCD_INIT_STRING
  2906  001A02  20F4               	addwfc	prodh,w,c
  2907  001A04  6EF7               	movwf	tblptrh,c
  2908  001A06                     	if	0	;There are less than 3 active tblptr bytes
  2909  001A06                     	endif
  2910  001A06  0008               	tblrd		*
  2911  001A08  CFF5 F003          	movff	tablat,lcd_send_byte@n
  2912  001A0C  0E00               	movlw	0
  2913  001A0E  EC37  F00E         	call	_lcd_send_byte
  2914                           
  2915                           ;unmc_lcd_216.c: 153: Delay1KTCYx(8000000UL/800000UL);
  2916  001A12  0E0A               	movlw	10
  2917  001A14  EC9B  F00E         	call	_Delay1KTCYx
  2918  001A18  2A05               	incf	lcd_init@i,f,c
  2919  001A1A  0E03               	movlw	3
  2920  001A1C  6405               	cpfsgt	lcd_init@i,c
  2921  001A1E  D7EB               	goto	l2387
  2922  001A20  0012               	return	
  2923  001A22  0012               	return		;funcret
  2924  001A24                     __end_of_lcd_init:
  2925                           	opt stack 0
  2926                           tblptru	equ	0xFF8
  2927                           tblptrh	equ	0xFF7
  2928                           tblptrl	equ	0xFF6
  2929                           tablat	equ	0xFF5
  2930                           prodh	equ	0xFF4
  2931                           prodl	equ	0xFF3
  2932                           indf0	equ	0xFEF
  2933                           postinc0	equ	0xFEE
  2934                           fsr0h	equ	0xFEA
  2935                           fsr0l	equ	0xFE9
  2936                           wreg	equ	0xFE8
  2937                           postdec1	equ	0xFE5
  2938                           fsr1l	equ	0xFE1
  2939                           indf2	equ	0xFDF
  2940                           postinc2	equ	0xFDE
  2941                           postdec2	equ	0xFDD
  2942                           fsr2h	equ	0xFDA
  2943                           fsr2l	equ	0xFD9
  2944                           status	equ	0xFD8
  2945                           
  2946 ;; *************** function _Delay1KTCYx *****************
  2947 ;; Defined at:
  2948 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\d1ktcyx.c"
  2949 ;; Parameters:    Size  Location     Type
  2950 ;;  unit            1    wreg     unsigned char 
  2951 ;; Auto vars:     Size  Location     Type
  2952 ;;  unit            1    0[COMRAM] unsigned char 
  2953 ;; Return value:  Size  Location     Type
  2954 ;;		None               void
  2955 ;; Registers used:
  2956 ;;		wreg
  2957 ;; Tracked objects:
  2958 ;;		On entry : 0/0
  2959 ;;		On exit  : 0/0
  2960 ;;		Unchanged: 0/0
  2961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2963 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2965 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2966 ;;Total ram usage:        1 bytes
  2967 ;; Hardware stack levels used:    1
  2968 ;; This function calls:
  2969 ;;		Nothing
  2970 ;; This function is called by:
  2971 ;;		_lcd_init
  2972 ;;		_DelayPORXLCD
  2973 ;; This function uses a non-reentrant model
  2974 ;;
  2975                           
  2976                           	psect	text13
  2977  001D36                     __ptext13:
  2978                           	opt stack 0
  2979  001D36                     _Delay1KTCYx:
  2980                           	opt stack 28
  2981                           
  2982                           ;incstack = 0
  2983                           ;Delay1KTCYx@unit stored from wreg
  2984  001D36  6E01               	movwf	Delay1KTCYx@unit,c
  2985  001D38  0EFA               	movlw	250
  2986  001D3A                     u2417:
  2987  001D3A  F000               	nop	
  2988  001D3C  2EE8               	decfsz	wreg,f,c
  2989  001D3E  D7FD               	goto	u2417
  2990  001D40  2E01               	decfsz	Delay1KTCYx@unit,f,c
  2991  001D42  D7FA               	goto	l1285
  2992  001D44  0012               	return	
  2993  001D46  0012               	return		;funcret
  2994  001D48                     __end_of_Delay1KTCYx:
  2995                           	opt stack 0
  2996                           tblptru	equ	0xFF8
  2997                           tblptrh	equ	0xFF7
  2998                           tblptrl	equ	0xFF6
  2999                           tablat	equ	0xFF5
  3000                           prodh	equ	0xFF4
  3001                           prodl	equ	0xFF3
  3002                           indf0	equ	0xFEF
  3003                           postinc0	equ	0xFEE
  3004                           fsr0h	equ	0xFEA
  3005                           fsr0l	equ	0xFE9
  3006                           wreg	equ	0xFE8
  3007                           postdec1	equ	0xFE5
  3008                           fsr1l	equ	0xFE1
  3009                           indf2	equ	0xFDF
  3010                           postinc2	equ	0xFDE
  3011                           postdec2	equ	0xFDD
  3012                           fsr2h	equ	0xFDA
  3013                           fsr2l	equ	0xFD9
  3014                           status	equ	0xFD8
  3015                           
  3016 ;; *************** function _lcd_comand *****************
  3017 ;; Defined at:
  3018 ;;		line 189 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3019 ;; Parameters:    Size  Location     Type
  3020 ;;  d               1    wreg     unsigned char 
  3021 ;; Auto vars:     Size  Location     Type
  3022 ;;  d               1    4[COMRAM] unsigned char 
  3023 ;; Return value:  Size  Location     Type
  3024 ;;		None               void
  3025 ;; Registers used:
  3026 ;;		wreg, status,2, status,0, cstack
  3027 ;; Tracked objects:
  3028 ;;		On entry : 0/0
  3029 ;;		On exit  : 0/0
  3030 ;;		Unchanged: 0/0
  3031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3033 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3035 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3036 ;;Total ram usage:        1 bytes
  3037 ;; Hardware stack levels used:    1
  3038 ;; Hardware stack levels required when called:    2
  3039 ;; This function calls:
  3040 ;;		_lcd_send_byte
  3041 ;; This function is called by:
  3042 ;;		_caratula
  3043 ;;		_Setup
  3044 ;; This function uses a non-reentrant model
  3045 ;;
  3046                           
  3047                           	psect	text14
  3048  001D6C                     __ptext14:
  3049                           	opt stack 0
  3050  001D6C                     _lcd_comand:
  3051                           	opt stack 27
  3052                           
  3053                           ;incstack = 0
  3054                           ;lcd_comand@d stored from wreg
  3055  001D6C  6E05               	movwf	lcd_comand@d,c
  3056                           
  3057                           ;unmc_lcd_216.c: 190: lcd_send_byte(0,d);
  3058  001D6E  C005  F003         	movff	lcd_comand@d,lcd_send_byte@n
  3059  001D72  0E00               	movlw	0
  3060  001D74  EC37  F00E         	call	_lcd_send_byte
  3061  001D78  0012               	return		;funcret
  3062  001D7A                     __end_of_lcd_comand:
  3063                           	opt stack 0
  3064                           tblptru	equ	0xFF8
  3065                           tblptrh	equ	0xFF7
  3066                           tblptrl	equ	0xFF6
  3067                           tablat	equ	0xFF5
  3068                           prodh	equ	0xFF4
  3069                           prodl	equ	0xFF3
  3070                           indf0	equ	0xFEF
  3071                           postinc0	equ	0xFEE
  3072                           fsr0h	equ	0xFEA
  3073                           fsr0l	equ	0xFE9
  3074                           wreg	equ	0xFE8
  3075                           postdec1	equ	0xFE5
  3076                           fsr1l	equ	0xFE1
  3077                           indf2	equ	0xFDF
  3078                           postinc2	equ	0xFDE
  3079                           postdec2	equ	0xFDD
  3080                           fsr2h	equ	0xFDA
  3081                           fsr2l	equ	0xFD9
  3082                           status	equ	0xFD8
  3083                           
  3084 ;; *************** function _lcd_send_byte *****************
  3085 ;; Defined at:
  3086 ;;		line 86 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3087 ;; Parameters:    Size  Location     Type
  3088 ;;  address         1    wreg     unsigned char 
  3089 ;;  n               1    2[COMRAM] unsigned char 
  3090 ;; Auto vars:     Size  Location     Type
  3091 ;;  address         1    3[COMRAM] unsigned char 
  3092 ;; Return value:  Size  Location     Type
  3093 ;;		None               void
  3094 ;; Registers used:
  3095 ;;		wreg, status,2, status,0, cstack
  3096 ;; Tracked objects:
  3097 ;;		On entry : 0/0
  3098 ;;		On exit  : 0/0
  3099 ;;		Unchanged: 0/0
  3100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3101 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3102 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3104 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3105 ;;Total ram usage:        2 bytes
  3106 ;; Hardware stack levels used:    1
  3107 ;; Hardware stack levels required when called:    1
  3108 ;; This function calls:
  3109 ;;		_Delay100TCYx
  3110 ;;		_lcd_send_nibble
  3111 ;; This function is called by:
  3112 ;;		_lcd_init
  3113 ;;		_lcd_gotoxy
  3114 ;;		_lcd_putc
  3115 ;;		_lcd_comand
  3116 ;;		_lcd_setcursor_vb
  3117 ;; This function uses a non-reentrant model
  3118 ;;
  3119                           
  3120                           	psect	text15
  3121  001C6E                     __ptext15:
  3122                           	opt stack 0
  3123  001C6E                     _lcd_send_byte:
  3124                           	opt stack 26
  3125                           
  3126                           ;incstack = 0
  3127                           ;lcd_send_byte@address stored from wreg
  3128  001C6E  6E04               	movwf	lcd_send_byte@address,c
  3129                           
  3130                           ;unmc_lcd_216.c: 88: LATBbits.LATB3=0;
  3131  001C70  968A               	bcf	3978,3,c	;volatile
  3132                           
  3133                           ;unmc_lcd_216.c: 93: Delay100TCYx(8000000UL/4000000UL);
  3134  001C72  0E02               	movlw	2
  3135  001C74  ECA4  F00E         	call	_Delay100TCYx
  3136                           
  3137                           ;unmc_lcd_216.c: 96: TRISBbits.TRISB4=0;
  3138  001C78  9893               	bcf	3987,4,c	;volatile
  3139                           
  3140                           ;unmc_lcd_216.c: 97: TRISBbits.TRISB5=0;
  3141  001C7A  9A93               	bcf	3987,5,c	;volatile
  3142                           
  3143                           ;unmc_lcd_216.c: 98: TRISBbits.TRISB6=0;
  3144  001C7C  9C93               	bcf	3987,6,c	;volatile
  3145                           
  3146                           ;unmc_lcd_216.c: 99: TRISBbits.TRISB7=0;
  3147  001C7E  9E93               	bcf	3987,7,c	;volatile
  3148                           
  3149                           ;unmc_lcd_216.c: 101: if(address)
  3150  001C80  5004               	movf	lcd_send_byte@address,w,c
  3151  001C82  B4D8               	btfsc	status,2,c
  3152  001C84  D002               	goto	l75
  3153                           
  3154                           ;unmc_lcd_216.c: 102: LATBbits.LATB3=1;
  3155  001C86  868A               	bsf	3978,3,c	;volatile
  3156  001C88  D001               	goto	l76
  3157  001C8A                     l75:
  3158                           
  3159                           ;unmc_lcd_216.c: 103: else
  3160                           ;unmc_lcd_216.c: 104: LATBbits.LATB3=0;
  3161  001C8A  968A               	bcf	3978,3,c	;volatile
  3162  001C8C                     l76:
  3163                           
  3164                           ;unmc_lcd_216.c: 106: __nop();
  3165  001C8C  F000               	nop	
  3166                           
  3167                           ;unmc_lcd_216.c: 113: lcd_send_nibble(n >> 4);
  3168  001C8E  3803               	swapf	lcd_send_byte@n,w,c
  3169  001C90  0B0F               	andlw	15
  3170  001C92  EC12  F00D         	call	_lcd_send_nibble
  3171                           
  3172                           ;unmc_lcd_216.c: 114: lcd_send_nibble(n & 0xf);
  3173  001C96  5003               	movf	lcd_send_byte@n,w,c
  3174  001C98  0B0F               	andlw	15
  3175  001C9A  EC12  F00D         	call	_lcd_send_nibble
  3176  001C9E  0012               	return		;funcret
  3177  001CA0                     __end_of_lcd_send_byte:
  3178                           	opt stack 0
  3179                           tblptru	equ	0xFF8
  3180                           tblptrh	equ	0xFF7
  3181                           tblptrl	equ	0xFF6
  3182                           tablat	equ	0xFF5
  3183                           prodh	equ	0xFF4
  3184                           prodl	equ	0xFF3
  3185                           indf0	equ	0xFEF
  3186                           postinc0	equ	0xFEE
  3187                           fsr0h	equ	0xFEA
  3188                           fsr0l	equ	0xFE9
  3189                           wreg	equ	0xFE8
  3190                           postdec1	equ	0xFE5
  3191                           fsr1l	equ	0xFE1
  3192                           indf2	equ	0xFDF
  3193                           postinc2	equ	0xFDE
  3194                           postdec2	equ	0xFDD
  3195                           fsr2h	equ	0xFDA
  3196                           fsr2l	equ	0xFD9
  3197                           status	equ	0xFD8
  3198                           
  3199 ;; *************** function _lcd_send_nibble *****************
  3200 ;; Defined at:
  3201 ;;		line 25 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3202 ;; Parameters:    Size  Location     Type
  3203 ;;  nibble          1    wreg     unsigned char 
  3204 ;; Auto vars:     Size  Location     Type
  3205 ;;  nibble          1    1[COMRAM] unsigned char 
  3206 ;; Return value:  Size  Location     Type
  3207 ;;		None               void
  3208 ;; Registers used:
  3209 ;;		wreg, status,2, status,0
  3210 ;; Tracked objects:
  3211 ;;		On entry : 0/0
  3212 ;;		On exit  : 0/0
  3213 ;;		Unchanged: 0/0
  3214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3216 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3217 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3218 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3219 ;;Total ram usage:        2 bytes
  3220 ;; Hardware stack levels used:    1
  3221 ;; This function calls:
  3222 ;;		Nothing
  3223 ;; This function is called by:
  3224 ;;		_lcd_send_byte
  3225 ;;		_lcd_init
  3226 ;; This function uses a non-reentrant model
  3227 ;;
  3228                           
  3229                           	psect	text16
  3230  001A24                     __ptext16:
  3231                           	opt stack 0
  3232  001A24                     _lcd_send_nibble:
  3233                           	opt stack 26
  3234                           
  3235                           ;incstack = 0
  3236                           ;lcd_send_nibble@nibble stored from wreg
  3237  001A24  6E02               	movwf	lcd_send_nibble@nibble,c
  3238                           
  3239                           ;unmc_lcd_216.c: 27: LATBbits.LATB4=!!(nibble & 0x01);
  3240  001A26  A002               	btfss	lcd_send_nibble@nibble,0,c
  3241  001A28  D003               	goto	u1200
  3242  001A2A  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3243  001A2C  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  3244  001A2E  D001               	goto	u1218
  3245  001A30                     u1200:
  3246  001A30  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3247  001A32                     u1218:
  3248  001A32  3A01               	swapf	??_lcd_send_nibble,f,c
  3249  001A34  508A               	movf	3978,w,c	;volatile
  3250  001A36  1801               	xorwf	??_lcd_send_nibble,w,c
  3251  001A38  0BEF               	andlw	-17
  3252  001A3A  1801               	xorwf	??_lcd_send_nibble,w,c
  3253  001A3C  6E8A               	movwf	3978,c	;volatile
  3254                           
  3255                           ;unmc_lcd_216.c: 28: LATBbits.LATB5=!!(nibble & 0x02);
  3256  001A3E  A202               	btfss	lcd_send_nibble@nibble,1,c
  3257  001A40  D003               	goto	u1220
  3258  001A42  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3259  001A44  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  3260  001A46  D001               	goto	u1238
  3261  001A48                     u1220:
  3262  001A48  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3263  001A4A                     u1238:
  3264  001A4A  3A01               	swapf	??_lcd_send_nibble,f,c
  3265  001A4C  4601               	rlncf	??_lcd_send_nibble,f,c
  3266  001A4E  508A               	movf	3978,w,c	;volatile
  3267  001A50  1801               	xorwf	??_lcd_send_nibble,w,c
  3268  001A52  0BDF               	andlw	-33
  3269  001A54  1801               	xorwf	??_lcd_send_nibble,w,c
  3270  001A56  6E8A               	movwf	3978,c	;volatile
  3271                           
  3272                           ;unmc_lcd_216.c: 29: LATBbits.LATB6=!!(nibble & 0x04);
  3273  001A58  A402               	btfss	lcd_send_nibble@nibble,2,c
  3274  001A5A  D003               	goto	u1240
  3275  001A5C  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3276  001A5E  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  3277  001A60  D001               	goto	u1258
  3278  001A62                     u1240:
  3279  001A62  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3280  001A64                     u1258:
  3281  001A64  3A01               	swapf	??_lcd_send_nibble,f,c
  3282  001A66  4601               	rlncf	??_lcd_send_nibble,f,c
  3283  001A68  4601               	rlncf	??_lcd_send_nibble,f,c
  3284  001A6A  508A               	movf	3978,w,c	;volatile
  3285  001A6C  1801               	xorwf	??_lcd_send_nibble,w,c
  3286  001A6E  0BBF               	andlw	-65
  3287  001A70  1801               	xorwf	??_lcd_send_nibble,w,c
  3288  001A72  6E8A               	movwf	3978,c	;volatile
  3289                           
  3290                           ;unmc_lcd_216.c: 30: LATBbits.LATB7=!!(nibble & 0x08);
  3291  001A74  A602               	btfss	lcd_send_nibble@nibble,3,c
  3292  001A76  D003               	goto	u1260
  3293  001A78  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3294  001A7A  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  3295  001A7C  D001               	goto	u1278
  3296  001A7E                     u1260:
  3297  001A7E  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3298  001A80                     u1278:
  3299  001A80  3201               	rrcf	??_lcd_send_nibble,f,c
  3300  001A82  3201               	rrcf	??_lcd_send_nibble,f,c
  3301  001A84  508A               	movf	3978,w,c	;volatile
  3302  001A86  1801               	xorwf	??_lcd_send_nibble,w,c
  3303  001A88  0B7F               	andlw	-129
  3304  001A8A  1801               	xorwf	??_lcd_send_nibble,w,c
  3305  001A8C  6E8A               	movwf	3978,c	;volatile
  3306                           
  3307                           ;unmc_lcd_216.c: 32: __nop();
  3308  001A8E  F000               	nop	
  3309                           
  3310                           ;unmc_lcd_216.c: 33: LATBbits.LATB2=1;
  3311  001A90  848A               	bsf	3978,2,c	;volatile
  3312                           
  3313                           ;unmc_lcd_216.c: 34: __nop();__nop();
  3314  001A92  F000               	nop	
  3315  001A94  F000               	nop	
  3316                           
  3317                           ;unmc_lcd_216.c: 35: LATBbits.LATB2=0;
  3318  001A96  948A               	bcf	3978,2,c	;volatile
  3319  001A98  0012               	return		;funcret
  3320  001A9A                     __end_of_lcd_send_nibble:
  3321                           	opt stack 0
  3322                           tblptru	equ	0xFF8
  3323                           tblptrh	equ	0xFF7
  3324                           tblptrl	equ	0xFF6
  3325                           tablat	equ	0xFF5
  3326                           prodh	equ	0xFF4
  3327                           prodl	equ	0xFF3
  3328                           indf0	equ	0xFEF
  3329                           postinc0	equ	0xFEE
  3330                           fsr0h	equ	0xFEA
  3331                           fsr0l	equ	0xFE9
  3332                           wreg	equ	0xFE8
  3333                           postdec1	equ	0xFE5
  3334                           fsr1l	equ	0xFE1
  3335                           indf2	equ	0xFDF
  3336                           postinc2	equ	0xFDE
  3337                           postdec2	equ	0xFDD
  3338                           fsr2h	equ	0xFDA
  3339                           fsr2l	equ	0xFD9
  3340                           status	equ	0xFD8
  3341                           
  3342 ;; *************** function _Delay100TCYx *****************
  3343 ;; Defined at:
  3344 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\d100tcyx.c"
  3345 ;; Parameters:    Size  Location     Type
  3346 ;;  unit            1    wreg     unsigned char 
  3347 ;; Auto vars:     Size  Location     Type
  3348 ;;  unit            1    0[COMRAM] unsigned char 
  3349 ;; Return value:  Size  Location     Type
  3350 ;;		None               void
  3351 ;; Registers used:
  3352 ;;		wreg
  3353 ;; Tracked objects:
  3354 ;;		On entry : 0/0
  3355 ;;		On exit  : 0/0
  3356 ;;		Unchanged: 0/0
  3357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3359 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3361 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3362 ;;Total ram usage:        1 bytes
  3363 ;; Hardware stack levels used:    1
  3364 ;; This function calls:
  3365 ;;		Nothing
  3366 ;; This function is called by:
  3367 ;;		_lcd_send_byte
  3368 ;; This function uses a non-reentrant model
  3369 ;;
  3370                           
  3371                           	psect	text17
  3372  001D48                     __ptext17:
  3373                           	opt stack 0
  3374  001D48                     _Delay100TCYx:
  3375                           	opt stack 26
  3376                           
  3377                           ;incstack = 0
  3378                           ;Delay100TCYx@unit stored from wreg
  3379  001D48  6E01               	movwf	Delay100TCYx@unit,c
  3380  001D4A  0E21               	movlw	33
  3381  001D4C                     u2427:
  3382  001D4C  2EE8               	decfsz	wreg,f,c
  3383  001D4E  D7FE               	goto	u2427
  3384  001D50  F000               	nop	
  3385  001D52  2E01               	decfsz	Delay100TCYx@unit,f,c
  3386  001D54  D7FA               	goto	l2021
  3387  001D56  0012               	return	
  3388  001D58  0012               	return		;funcret
  3389  001D5A                     __end_of_Delay100TCYx:
  3390                           	opt stack 0
  3391                           tblptru	equ	0xFF8
  3392                           tblptrh	equ	0xFF7
  3393                           tblptrl	equ	0xFF6
  3394                           tablat	equ	0xFF5
  3395                           prodh	equ	0xFF4
  3396                           prodl	equ	0xFF3
  3397                           indf0	equ	0xFEF
  3398                           postinc0	equ	0xFEE
  3399                           fsr0h	equ	0xFEA
  3400                           fsr0l	equ	0xFE9
  3401                           wreg	equ	0xFE8
  3402                           postdec1	equ	0xFE5
  3403                           fsr1l	equ	0xFE1
  3404                           indf2	equ	0xFDF
  3405                           postinc2	equ	0xFDE
  3406                           postdec2	equ	0xFDD
  3407                           fsr2h	equ	0xFDA
  3408                           fsr2l	equ	0xFD9
  3409                           status	equ	0xFD8
  3410                           
  3411 ;; *************** function _Write_RTC *****************
  3412 ;; Defined at:
  3413 ;;		line 22 in file "../../Program Files/Unimic/unmc_01/sources/unmc_rtcc_01.c"
  3414 ;; Parameters:    Size  Location     Type
  3415 ;;		None
  3416 ;; Auto vars:     Size  Location     Type
  3417 ;;		None
  3418 ;; Return value:  Size  Location     Type
  3419 ;;                  2   30[None  ] int 
  3420 ;; Registers used:
  3421 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3422 ;; Tracked objects:
  3423 ;;		On entry : 0/0
  3424 ;;		On exit  : 0/0
  3425 ;;		Unchanged: 0/0
  3426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3430 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3431 ;;Total ram usage:        0 bytes
  3432 ;; Hardware stack levels used:    1
  3433 ;; Hardware stack levels required when called:    2
  3434 ;; This function calls:
  3435 ;;		_RtccWrOn
  3436 ;;		_RtccWriteDate
  3437 ;;		_RtccWriteTime
  3438 ;;		___awdiv
  3439 ;; This function is called by:
  3440 ;;		_Setup
  3441 ;;		_setClock
  3442 ;; This function uses a non-reentrant model
  3443 ;;
  3444                           
  3445                           	psect	text18
  3446  0014AC                     __ptext18:
  3447                           	opt stack 0
  3448  0014AC                     _Write_RTC:
  3449                           	opt stack 27
  3450                           
  3451                           ;unmc_rtcc_01.c: 24: RtccWrOn();
  3452                           
  3453                           ;incstack = 0
  3454  0014AC  ECAD  F00E         	call	_RtccWrOn	;wreg free
  3455                           
  3456                           ;unmc_rtcc_01.c: 26: PIE3bits.RTCCIE=1;
  3457  0014B0  80A3               	bsf	4003,0,c	;volatile
  3458                           
  3459                           ;unmc_rtcc_01.c: 27: segundo_d=segundo/10;
  3460  0014B2  C036  F001         	movff	_segundo,___awdiv@dividend
  3461  0014B6  C037  F002         	movff	_segundo+1,___awdiv@dividend+1
  3462  0014BA  0E00               	movlw	0
  3463  0014BC  6E04               	movwf	___awdiv@divisor+1,c
  3464  0014BE  0E0A               	movlw	10
  3465  0014C0  6E03               	movwf	___awdiv@divisor,c
  3466  0014C2  EC87  F00C         	call	___awdiv	;wreg free
  3467  0014C6  5001               	movf	?___awdiv,w,c
  3468  0014C8  6E4C               	movwf	_segundo_d,c
  3469                           
  3470                           ;unmc_rtcc_01.c: 28: segundo_u=segundo-segundo_d*10;
  3471  0014CA  504C               	movf	_segundo_d,w,c
  3472  0014CC  0D0A               	mullw	10
  3473  0014CE  50F3               	movf	prodl,w,c
  3474  0014D0  0800               	sublw	0
  3475  0014D2  2436               	addwf	_segundo,w,c
  3476  0014D4  6E4D               	movwf	_segundo_u,c
  3477                           
  3478                           ;unmc_rtcc_01.c: 29: RtccTime.f.sec =segundo_d*16+segundo_u;
  3479  0014D6  504C               	movf	_segundo_d,w,c
  3480  0014D8  0D10               	mullw	16
  3481  0014DA  50F3               	movf	prodl,w,c
  3482  0014DC  244D               	addwf	_segundo_u,w,c
  3483  0014DE  6E3E               	movwf	_RtccTime+1,c
  3484                           
  3485                           ;unmc_rtcc_01.c: 30: minuto_d=minuto/10;
  3486  0014E0  C058  F001         	movff	_minuto,___awdiv@dividend
  3487  0014E4  C059  F002         	movff	_minuto+1,___awdiv@dividend+1
  3488  0014E8  0E00               	movlw	0
  3489  0014EA  6E04               	movwf	___awdiv@divisor+1,c
  3490  0014EC  0E0A               	movlw	10
  3491  0014EE  6E03               	movwf	___awdiv@divisor,c
  3492  0014F0  EC87  F00C         	call	___awdiv	;wreg free
  3493  0014F4  5001               	movf	?___awdiv,w,c
  3494  0014F6  6E4A               	movwf	_minuto_d,c
  3495                           
  3496                           ;unmc_rtcc_01.c: 31: minuto_u=minuto-minuto_d*10;
  3497  0014F8  504A               	movf	_minuto_d,w,c
  3498  0014FA  0D0A               	mullw	10
  3499  0014FC  50F3               	movf	prodl,w,c
  3500  0014FE  0800               	sublw	0
  3501  001500  2458               	addwf	_minuto,w,c
  3502  001502  6E4B               	movwf	_minuto_u,c
  3503                           
  3504                           ;unmc_rtcc_01.c: 32: RtccTime.f.min =minuto_d*16+minuto_u;
  3505  001504  504A               	movf	_minuto_d,w,c
  3506  001506  0D10               	mullw	16
  3507  001508  50F3               	movf	prodl,w,c
  3508  00150A  244B               	addwf	_minuto_u,w,c
  3509  00150C  6E3F               	movwf	_RtccTime+2,c
  3510                           
  3511                           ;unmc_rtcc_01.c: 33: hora_d=hora/10;
  3512  00150E  C054  F001         	movff	_hora,___awdiv@dividend
  3513  001512  C055  F002         	movff	_hora+1,___awdiv@dividend+1
  3514  001516  0E00               	movlw	0
  3515  001518  6E04               	movwf	___awdiv@divisor+1,c
  3516  00151A  0E0A               	movlw	10
  3517  00151C  6E03               	movwf	___awdiv@divisor,c
  3518  00151E  EC87  F00C         	call	___awdiv	;wreg free
  3519  001522  5001               	movf	?___awdiv,w,c
  3520  001524  6E46               	movwf	_hora_d,c
  3521                           
  3522                           ;unmc_rtcc_01.c: 34: hora_u=hora-hora_d*10;
  3523  001526  5046               	movf	_hora_d,w,c
  3524  001528  0D0A               	mullw	10
  3525  00152A  50F3               	movf	prodl,w,c
  3526  00152C  0800               	sublw	0
  3527  00152E  2454               	addwf	_hora,w,c
  3528  001530  6E47               	movwf	_hora_u,c
  3529                           
  3530                           ;unmc_rtcc_01.c: 35: RtccTime.f.hour=hora_d*16+hora_u;
  3531  001532  5046               	movf	_hora_d,w,c
  3532  001534  0D10               	mullw	16
  3533  001536  50F3               	movf	prodl,w,c
  3534  001538  2447               	addwf	_hora_u,w,c
  3535  00153A  6E40               	movwf	_RtccTime+3,c
  3536                           
  3537                           ;unmc_rtcc_01.c: 36: anio_d=anio/10;
  3538  00153C  C04E  F001         	movff	_anio,___awdiv@dividend
  3539  001540  C04F  F002         	movff	_anio+1,___awdiv@dividend+1
  3540  001544  0E00               	movlw	0
  3541  001546  6E04               	movwf	___awdiv@divisor+1,c
  3542  001548  0E0A               	movlw	10
  3543  00154A  6E03               	movwf	___awdiv@divisor,c
  3544  00154C  EC87  F00C         	call	___awdiv	;wreg free
  3545  001550  5001               	movf	?___awdiv,w,c
  3546  001552  6E41               	movwf	_anio_d,c
  3547                           
  3548                           ;unmc_rtcc_01.c: 37: anio_u=anio-anio_d*10;
  3549  001554  5041               	movf	_anio_d,w,c
  3550  001556  0D0A               	mullw	10
  3551  001558  50F3               	movf	prodl,w,c
  3552  00155A  0800               	sublw	0
  3553  00155C  244E               	addwf	_anio,w,c
  3554  00155E  6E42               	movwf	_anio_u,c
  3555                           
  3556                           ;unmc_rtcc_01.c: 38: RtccDate.f.year=anio_d*16+anio_u;
  3557  001560  5041               	movf	_anio_d,w,c
  3558  001562  0D10               	mullw	16
  3559  001564  50F3               	movf	prodl,w,c
  3560  001566  2442               	addwf	_anio_u,w,c
  3561  001568  6E3C               	movwf	_RtccDate+3,c
  3562                           
  3563                           ;unmc_rtcc_01.c: 39: mes_d=mes/10;
  3564  00156A  C056  F001         	movff	_mes,___awdiv@dividend
  3565  00156E  C057  F002         	movff	_mes+1,___awdiv@dividend+1
  3566  001572  0E00               	movlw	0
  3567  001574  6E04               	movwf	___awdiv@divisor+1,c
  3568  001576  0E0A               	movlw	10
  3569  001578  6E03               	movwf	___awdiv@divisor,c
  3570  00157A  EC87  F00C         	call	___awdiv	;wreg free
  3571  00157E  5001               	movf	?___awdiv,w,c
  3572  001580  6E48               	movwf	_mes_d,c
  3573                           
  3574                           ;unmc_rtcc_01.c: 40: mes_u=mes-mes_d*10;
  3575  001582  5048               	movf	_mes_d,w,c
  3576  001584  0D0A               	mullw	10
  3577  001586  50F3               	movf	prodl,w,c
  3578  001588  0800               	sublw	0
  3579  00158A  2456               	addwf	_mes,w,c
  3580  00158C  6E49               	movwf	_mes_u,c
  3581                           
  3582                           ;unmc_rtcc_01.c: 41: RtccDate.f.mon=mes_d*16+mes_u;
  3583  00158E  5048               	movf	_mes_d,w,c
  3584  001590  0D10               	mullw	16
  3585  001592  50F3               	movf	prodl,w,c
  3586  001594  2449               	addwf	_mes_u,w,c
  3587  001596  6E3B               	movwf	_RtccDate+2,c
  3588                           
  3589                           ;unmc_rtcc_01.c: 42: fecha_d=dia/10;
  3590  001598  C050  F001         	movff	_dia,___awdiv@dividend
  3591  00159C  C051  F002         	movff	_dia+1,___awdiv@dividend+1
  3592  0015A0  0E00               	movlw	0
  3593  0015A2  6E04               	movwf	___awdiv@divisor+1,c
  3594  0015A4  0E0A               	movlw	10
  3595  0015A6  6E03               	movwf	___awdiv@divisor,c
  3596  0015A8  EC87  F00C         	call	___awdiv	;wreg free
  3597  0015AC  5001               	movf	?___awdiv,w,c
  3598  0015AE  6E44               	movwf	_fecha_d,c
  3599                           
  3600                           ;unmc_rtcc_01.c: 43: fecha_u=dia-fecha_d*10;
  3601  0015B0  5044               	movf	_fecha_d,w,c
  3602  0015B2  0D0A               	mullw	10
  3603  0015B4  50F3               	movf	prodl,w,c
  3604  0015B6  0800               	sublw	0
  3605  0015B8  2450               	addwf	_dia,w,c
  3606  0015BA  6E45               	movwf	_fecha_u,c
  3607                           
  3608                           ;unmc_rtcc_01.c: 44: RtccDate.f.mday=fecha_d*16+fecha_u;
  3609  0015BC  5044               	movf	_fecha_d,w,c
  3610  0015BE  0D10               	mullw	16
  3611  0015C0  50F3               	movf	prodl,w,c
  3612  0015C2  2445               	addwf	_fecha_u,w,c
  3613  0015C4  6E3A               	movwf	_RtccDate+1,c
  3614                           
  3615                           ;unmc_rtcc_01.c: 45: dia_semana=diasem;
  3616  0015C6  C052  F043         	movff	_diasem,_dia_semana
  3617                           
  3618                           ;unmc_rtcc_01.c: 46: RtccDate.f.wday =diasem;
  3619  0015CA  C052  F039         	movff	_diasem,_RtccDate
  3620                           
  3621                           ;unmc_rtcc_01.c: 47: RtccWriteTime(&RtccTime,1);
  3622  0015CE  0E3D               	movlw	low _RtccTime
  3623  0015D0  6E01               	movwf	RtccWriteTime@pTm,c
  3624  0015D2  0E00               	movlw	high _RtccTime
  3625  0015D4  6E02               	movwf	RtccWriteTime@pTm+1,c
  3626  0015D6  0E01               	movlw	1
  3627  0015D8  6E03               	movwf	RtccWriteTime@di,c
  3628  0015DA  EC9D  F00B         	call	_RtccWriteTime	;wreg free
  3629                           
  3630                           ;unmc_rtcc_01.c: 48: RtccWriteDate(&RtccDate,1);
  3631  0015DE  0E39               	movlw	low _RtccDate
  3632  0015E0  6E01               	movwf	RtccWriteDate@pDt,c
  3633  0015E2  0E00               	movlw	high _RtccDate
  3634  0015E4  6E02               	movwf	RtccWriteDate@pDt+1,c
  3635  0015E6  0E01               	movlw	1
  3636  0015E8  6E03               	movwf	RtccWriteDate@di,c
  3637  0015EA  ECFA  F00A         	call	_RtccWriteDate	;wreg free
  3638                           
  3639                           ;unmc_rtcc_01.c: 49: (RTCCFGbits.RTCEN=1);
  3640  0015EE  010F               	movlb	15	; () banked
  3641  0015F0  8F3F               	bsf	63,7,b	;volatile
  3642                           
  3643                           ; BSR set to: 15
  3644  0015F2  0012               	return		;funcret
  3645  0015F4                     __end_of_Write_RTC:
  3646                           	opt stack 0
  3647                           tblptru	equ	0xFF8
  3648                           tblptrh	equ	0xFF7
  3649                           tblptrl	equ	0xFF6
  3650                           tablat	equ	0xFF5
  3651                           prodh	equ	0xFF4
  3652                           prodl	equ	0xFF3
  3653                           indf0	equ	0xFEF
  3654                           postinc0	equ	0xFEE
  3655                           fsr0h	equ	0xFEA
  3656                           fsr0l	equ	0xFE9
  3657                           wreg	equ	0xFE8
  3658                           postdec1	equ	0xFE5
  3659                           fsr1l	equ	0xFE1
  3660                           indf2	equ	0xFDF
  3661                           postinc2	equ	0xFDE
  3662                           postdec2	equ	0xFDD
  3663                           fsr2h	equ	0xFDA
  3664                           fsr2l	equ	0xFD9
  3665                           status	equ	0xFD8
  3666                           
  3667 ;; *************** function ___awdiv *****************
  3668 ;; Defined at:
  3669 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\awdiv.c"
  3670 ;; Parameters:    Size  Location     Type
  3671 ;;  dividend        2    0[COMRAM] int 
  3672 ;;  divisor         2    2[COMRAM] int 
  3673 ;; Auto vars:     Size  Location     Type
  3674 ;;  quotient        2    6[COMRAM] int 
  3675 ;;  sign            1    5[COMRAM] unsigned char 
  3676 ;;  counter         1    4[COMRAM] unsigned char 
  3677 ;; Return value:  Size  Location     Type
  3678 ;;                  2    0[COMRAM] int 
  3679 ;; Registers used:
  3680 ;;		wreg, status,2, status,0
  3681 ;; Tracked objects:
  3682 ;;		On entry : 0/0
  3683 ;;		On exit  : 0/0
  3684 ;;		Unchanged: 0/0
  3685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3686 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3687 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3689 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3690 ;;Total ram usage:        8 bytes
  3691 ;; Hardware stack levels used:    1
  3692 ;; This function calls:
  3693 ;;		Nothing
  3694 ;; This function is called by:
  3695 ;;		_Write_RTC
  3696 ;; This function uses a non-reentrant model
  3697 ;;
  3698                           
  3699                           	psect	text19
  3700  00190E                     __ptext19:
  3701                           	opt stack 0
  3702  00190E                     ___awdiv:
  3703                           	opt stack 28
  3704                           
  3705                           ; BSR set to: 15
  3706                           ;incstack = 0
  3707  00190E  0E00               	movlw	0
  3708  001910  6E06               	movwf	___awdiv@sign,c
  3709  001912  AE04               	btfss	___awdiv@divisor+1,7,c
  3710  001914  D007               	goto	l2229
  3711  001916  6C03               	negf	___awdiv@divisor,c
  3712  001918  1E04               	comf	___awdiv@divisor+1,f,c
  3713  00191A  B0D8               	btfsc	status,0,c
  3714  00191C  2A04               	incf	___awdiv@divisor+1,f,c
  3715  00191E  0E01               	movlw	1
  3716  001920  6E06               	movwf	___awdiv@sign,c
  3717  001922  D000               	goto	l2229
  3718  001924                     l2229:
  3719  001924  AE02               	btfss	___awdiv@dividend+1,7,c
  3720  001926  D007               	goto	l2235
  3721  001928  6C01               	negf	___awdiv@dividend,c
  3722  00192A  1E02               	comf	___awdiv@dividend+1,f,c
  3723  00192C  B0D8               	btfsc	status,0,c
  3724  00192E  2A02               	incf	___awdiv@dividend+1,f,c
  3725  001930  0E01               	movlw	1
  3726  001932  1A06               	xorwf	___awdiv@sign,f,c
  3727  001934  D000               	goto	l2235
  3728  001936                     l2235:
  3729  001936  0E00               	movlw	0
  3730  001938  6E08               	movwf	___awdiv@quotient+1,c
  3731  00193A  0E00               	movlw	0
  3732  00193C  6E07               	movwf	___awdiv@quotient,c
  3733  00193E  5003               	movf	___awdiv@divisor,w,c
  3734  001940  1004               	iorwf	___awdiv@divisor+1,w,c
  3735  001942  B4D8               	btfsc	status,2,c
  3736  001944  D021               	goto	l2257
  3737  001946  0E01               	movlw	1
  3738  001948  6E05               	movwf	___awdiv@counter,c
  3739  00194A  D005               	goto	l2243
  3740  00194C                     l2241:
  3741  00194C  90D8               	bcf	status,0,c
  3742  00194E  3603               	rlcf	___awdiv@divisor,f,c
  3743  001950  3604               	rlcf	___awdiv@divisor+1,f,c
  3744  001952  2A05               	incf	___awdiv@counter,f,c
  3745  001954  D000               	goto	l2243
  3746  001956                     l2243:
  3747  001956  BE04               	btfsc	___awdiv@divisor+1,7,c
  3748  001958  D002               	goto	l2245
  3749  00195A  D7F8               	goto	l2241
  3750  00195C  D000               	goto	l2245
  3751  00195E                     l2245:
  3752  00195E  90D8               	bcf	status,0,c
  3753  001960  3607               	rlcf	___awdiv@quotient,f,c
  3754  001962  3608               	rlcf	___awdiv@quotient+1,f,c
  3755  001964  5003               	movf	___awdiv@divisor,w,c
  3756  001966  5C01               	subwf	___awdiv@dividend,w,c
  3757  001968  5004               	movf	___awdiv@divisor+1,w,c
  3758  00196A  5802               	subwfb	___awdiv@dividend+1,w,c
  3759  00196C  A0D8               	btfss	status,0,c
  3760  00196E  D006               	goto	l2253
  3761  001970  5003               	movf	___awdiv@divisor,w,c
  3762  001972  5E01               	subwf	___awdiv@dividend,f,c
  3763  001974  5004               	movf	___awdiv@divisor+1,w,c
  3764  001976  5A02               	subwfb	___awdiv@dividend+1,f,c
  3765  001978  8007               	bsf	___awdiv@quotient,0,c
  3766  00197A  D000               	goto	l2253
  3767  00197C                     l2253:
  3768  00197C  90D8               	bcf	status,0,c
  3769  00197E  3204               	rrcf	___awdiv@divisor+1,f,c
  3770  001980  3203               	rrcf	___awdiv@divisor,f,c
  3771  001982  2E05               	decfsz	___awdiv@counter,f,c
  3772  001984  D7EC               	goto	l2245
  3773  001986  D000               	goto	l2257
  3774  001988                     l2257:
  3775  001988  5006               	movf	___awdiv@sign,w,c
  3776  00198A  B4D8               	btfsc	status,2,c
  3777  00198C  D005               	goto	l2261
  3778  00198E  6C07               	negf	___awdiv@quotient,c
  3779  001990  1E08               	comf	___awdiv@quotient+1,f,c
  3780  001992  B0D8               	btfsc	status,0,c
  3781  001994  2A08               	incf	___awdiv@quotient+1,f,c
  3782  001996  D000               	goto	l2261
  3783  001998                     l2261:
  3784  001998  C007  F001         	movff	___awdiv@quotient,?___awdiv
  3785  00199C  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  3786  0019A0  0012               	return	
  3787  0019A2  0012               	return		;funcret
  3788  0019A4                     __end_of___awdiv:
  3789                           	opt stack 0
  3790                           tblptru	equ	0xFF8
  3791                           tblptrh	equ	0xFF7
  3792                           tblptrl	equ	0xFF6
  3793                           tablat	equ	0xFF5
  3794                           prodh	equ	0xFF4
  3795                           prodl	equ	0xFF3
  3796                           indf0	equ	0xFEF
  3797                           postinc0	equ	0xFEE
  3798                           fsr0h	equ	0xFEA
  3799                           fsr0l	equ	0xFE9
  3800                           wreg	equ	0xFE8
  3801                           postdec1	equ	0xFE5
  3802                           fsr1l	equ	0xFE1
  3803                           indf2	equ	0xFDF
  3804                           postinc2	equ	0xFDE
  3805                           postdec2	equ	0xFDD
  3806                           fsr2h	equ	0xFDA
  3807                           fsr2l	equ	0xFD9
  3808                           status	equ	0xFD8
  3809                           
  3810 ;; *************** function _RtccWriteTime *****************
  3811 ;; Defined at:
  3812 ;;		line 34 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteTime.c"
  3813 ;; Parameters:    Size  Location     Type
  3814 ;;  pTm             2    0[COMRAM] PTR const struct .
  3815 ;;		 -> RtccTime(4), 
  3816 ;;  di              1    2[COMRAM] enum E7121
  3817 ;; Auto vars:     Size  Location     Type
  3818 ;;  tempHourWDay    2    9[COMRAM] struct .
  3819 ;;  tempMinSec      2    7[COMRAM] struct .
  3820 ;;  wasWrEn         1    6[COMRAM] enum E7121
  3821 ;;  wasAlrm         1    5[COMRAM] enum E7121
  3822 ;;  wasOn           1    4[COMRAM] enum E7121
  3823 ;; Return value:  Size  Location     Type
  3824 ;;                  1    wreg      enum E7121
  3825 ;; Registers used:
  3826 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3827 ;; Tracked objects:
  3828 ;;		On entry : 0/0
  3829 ;;		On exit  : 0/0
  3830 ;;		Unchanged: 0/0
  3831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3832 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3833 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3834 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3835 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3836 ;;Total ram usage:       11 bytes
  3837 ;; Hardware stack levels used:    1
  3838 ;; Hardware stack levels required when called:    1
  3839 ;; This function calls:
  3840 ;;		_RtccWrOn
  3841 ;; This function is called by:
  3842 ;;		_Write_RTC
  3843 ;; This function uses a non-reentrant model
  3844 ;;
  3845                           
  3846                           	psect	text20
  3847  00173A                     __ptext20:
  3848                           	opt stack 0
  3849  00173A                     _RtccWriteTime:
  3850                           	opt stack 27
  3851                           
  3852                           ;incstack = 0
  3853  00173A  0E00               	movlw	0
  3854  00173C  6E06               	movwf	RtccWriteTime@wasAlrm,c
  3855  00173E  EE20 F002          	lfsr	2,2
  3856  001742  5001               	movf	RtccWriteTime@pTm,w,c
  3857  001744  26D9               	addwf	fsr2l,f,c
  3858  001746  5002               	movf	RtccWriteTime@pTm+1,w,c
  3859  001748  22DA               	addwfc	fsr2h,f,c
  3860  00174A  0E5A               	movlw	90
  3861  00174C  60DF               	cpfslt	indf2,c
  3862  00174E  0012               	return	
  3863  001750  EE20 F001          	lfsr	2,1
  3864  001754  5001               	movf	RtccWriteTime@pTm,w,c
  3865  001756  26D9               	addwf	fsr2l,f,c
  3866  001758  5002               	movf	RtccWriteTime@pTm+1,w,c
  3867  00175A  22DA               	addwfc	fsr2h,f,c
  3868  00175C  0E5A               	movlw	90
  3869  00175E  60DF               	cpfslt	indf2,c
  3870  001760  0012               	return	
  3871  001762  EE20 F003          	lfsr	2,3
  3872  001766  5001               	movf	RtccWriteTime@pTm,w,c
  3873  001768  26D9               	addwf	fsr2l,f,c
  3874  00176A  5002               	movf	RtccWriteTime@pTm+1,w,c
  3875  00176C  22DA               	addwfc	fsr2h,f,c
  3876  00176E  0E24               	movlw	36
  3877  001770  64DF               	cpfsgt	indf2,c
  3878  001772  D002               	goto	l2075
  3879  001774  0012               	return	
  3880                           
  3881                           ;	Return value of _RtccWriteTime is never used
  3882  001776  0012               	return	
  3883  001778                     l2075:
  3884  001778  EE20 F002          	lfsr	2,2
  3885  00177C  5001               	movf	RtccWriteTime@pTm,w,c
  3886  00177E  26D9               	addwf	fsr2l,f,c
  3887  001780  5002               	movf	RtccWriteTime@pTm+1,w,c
  3888  001782  22DA               	addwfc	fsr2h,f,c
  3889  001784  50DF               	movf	indf2,w,c
  3890  001786  6E09               	movwf	RtccWriteTime@tempMinSec+1,c
  3891  001788  EE20 F001          	lfsr	2,1
  3892  00178C  5001               	movf	RtccWriteTime@pTm,w,c
  3893  00178E  26D9               	addwf	fsr2l,f,c
  3894  001790  5002               	movf	RtccWriteTime@pTm+1,w,c
  3895  001792  22DA               	addwfc	fsr2h,f,c
  3896  001794  50DF               	movf	indf2,w,c
  3897  001796  6E08               	movwf	RtccWriteTime@tempMinSec,c
  3898  001798  5003               	movf	RtccWriteTime@di,w,c
  3899  00179A  B4D8               	btfsc	status,2,c
  3900  00179C  D002               	goto	l2081
  3901  00179E  9CF2               	bcf	intcon,6,c	;volatile
  3902  0017A0  D000               	goto	l2081
  3903  0017A2                     l2081:
  3904  0017A2  0E00               	movlw	0
  3905  0017A4  BB3F               	btfsc	63,5,b	;volatile
  3906  0017A6  0E01               	movlw	1
  3907  0017A8  6E07               	movwf	RtccWriteTime@wasWrEn,c
  3908  0017AA  5007               	movf	RtccWriteTime@wasWrEn,w,c
  3909  0017AC  A4D8               	btfss	status,2,c
  3910  0017AE  D003               	goto	l2085
  3911  0017B0  ECAD  F00E         	call	_RtccWrOn	;wreg free
  3912  0017B4  D000               	goto	l2085
  3913  0017B6                     l2085:
  3914  0017B6  0E00               	movlw	0
  3915  0017B8  BF3F               	btfsc	63,7,b	;volatile
  3916  0017BA  0E01               	movlw	1
  3917  0017BC  6E05               	movwf	RtccWriteTime@wasOn,c
  3918  0017BE  5005               	movf	RtccWriteTime@wasOn,w,c
  3919  0017C0  B4D8               	btfsc	status,2,c
  3920  0017C2  D007               	goto	l2091
  3921  0017C4  0E00               	movlw	0
  3922  0017C6  BE91               	btfsc	3985,7,c	;volatile
  3923  0017C8  0E01               	movlw	1
  3924  0017CA  6E06               	movwf	RtccWriteTime@wasAlrm,c
  3925  0017CC  010F               	movlb	15	; () banked
  3926  0017CE  9F3F               	bcf	63,7,b	;volatile
  3927  0017D0  D000               	goto	l2091
  3928  0017D2                     l2091:
  3929  0017D2  0EFC               	movlw	252
  3930  0017D4  010F               	movlb	15	; () banked
  3931  0017D6  173F               	andwf	63,f,b	;volatile
  3932  0017D8  010F               	movlb	15	; () banked
  3933  0017DA  813F               	bsf	63,0,b	;volatile
  3934                           
  3935                           ; BSR set to: 15
  3936  0017DC  CF98 F00A          	movff	3992,RtccWriteTime@tempHourWDay	;volatile
  3937                           
  3938                           ; BSR set to: 15
  3939  0017E0  CF99 F00B          	movff	3993,RtccWriteTime@tempHourWDay+1	;volatile
  3940                           
  3941                           ; BSR set to: 15
  3942  0017E4  EE20 F003          	lfsr	2,3
  3943  0017E8  5001               	movf	RtccWriteTime@pTm,w,c
  3944  0017EA  26D9               	addwf	fsr2l,f,c
  3945  0017EC  5002               	movf	RtccWriteTime@pTm+1,w,c
  3946  0017EE  22DA               	addwfc	fsr2h,f,c
  3947  0017F0  50DF               	movf	indf2,w,c
  3948  0017F2  6E0A               	movwf	RtccWriteTime@tempHourWDay,c
  3949                           
  3950                           ; BSR set to: 15
  3951  0017F4  0EFC               	movlw	252
  3952  0017F6  010F               	movlb	15	; () banked
  3953  0017F8  173F               	andwf	63,f,b	;volatile
  3954                           
  3955                           ; BSR set to: 15
  3956  0017FA  010F               	movlb	15	; () banked
  3957  0017FC  813F               	bsf	63,0,b	;volatile
  3958                           
  3959                           ; BSR set to: 15
  3960  0017FE  C00A  FF98         	movff	RtccWriteTime@tempHourWDay,3992	;volatile
  3961                           
  3962                           ; BSR set to: 15
  3963  001802  C00B  FF99         	movff	RtccWriteTime@tempHourWDay+1,3993	;volatile
  3964                           
  3965                           ; BSR set to: 15
  3966  001806  C008  FF98         	movff	RtccWriteTime@tempMinSec,3992	;volatile
  3967                           
  3968                           ; BSR set to: 15
  3969  00180A  C009  FF99         	movff	RtccWriteTime@tempMinSec+1,3993	;volatile
  3970                           
  3971                           ; BSR set to: 15
  3972  00180E  5005               	movf	RtccWriteTime@wasOn,w,c
  3973  001810  B4D8               	btfsc	status,2,c
  3974  001812  D00D               	goto	l2123
  3975                           
  3976                           ; BSR set to: 15
  3977  001814  010F               	movlb	15	; () banked
  3978  001816  8F3F               	bsf	63,7,b	;volatile
  3979                           
  3980                           ; BSR set to: 15
  3981  001818  5006               	movf	RtccWriteTime@wasAlrm,w,c
  3982  00181A  B4D8               	btfsc	status,2,c
  3983  00181C  D002               	goto	l2119
  3984                           
  3985                           ; BSR set to: 15
  3986  00181E  8E91               	bsf	3985,7,c	;volatile
  3987  001820  D000               	goto	l2119
  3988  001822                     l2119:
  3989                           
  3990                           ; BSR set to: 15
  3991  001822  5007               	movf	RtccWriteTime@wasWrEn,w,c
  3992  001824  B4D8               	btfsc	status,2,c
  3993  001826  D009               	goto	l2127
  3994                           
  3995                           ; BSR set to: 15
  3996  001828  ECAD  F00E         	call	_RtccWrOn	;wreg free
  3997  00182C  D006               	goto	l2127
  3998  00182E                     l2123:
  3999  00182E  5007               	movf	RtccWriteTime@wasWrEn,w,c
  4000  001830  A4D8               	btfss	status,2,c
  4001  001832  D003               	goto	l2127
  4002  001834  010F               	movlb	15	; () banked
  4003  001836  9B3F               	bcf	63,5,b	;volatile
  4004                           
  4005                           ; BSR set to: 15
  4006  001838  D000               	goto	l2127
  4007  00183A                     l2127:
  4008  00183A  5003               	movf	RtccWriteTime@di,w,c
  4009  00183C  B4D8               	btfsc	status,2,c
  4010  00183E  0012               	return	
  4011  001840  8CF2               	bsf	intcon,6,c	;volatile
  4012  001842  0012               	return	
  4013                           
  4014                           ;	Return value of _RtccWriteTime is never used
  4015  001844  0012               	return		;funcret
  4016  001846                     __end_of_RtccWriteTime:
  4017                           	opt stack 0
  4018                           tblptru	equ	0xFF8
  4019                           tblptrh	equ	0xFF7
  4020                           tblptrl	equ	0xFF6
  4021                           tablat	equ	0xFF5
  4022                           prodh	equ	0xFF4
  4023                           prodl	equ	0xFF3
  4024                           intcon	equ	0xFF2
  4025                           indf0	equ	0xFEF
  4026                           postinc0	equ	0xFEE
  4027                           fsr0h	equ	0xFEA
  4028                           fsr0l	equ	0xFE9
  4029                           wreg	equ	0xFE8
  4030                           postdec1	equ	0xFE5
  4031                           fsr1l	equ	0xFE1
  4032                           indf2	equ	0xFDF
  4033                           postinc2	equ	0xFDE
  4034                           postdec2	equ	0xFDD
  4035                           fsr2h	equ	0xFDA
  4036                           fsr2l	equ	0xFD9
  4037                           status	equ	0xFD8
  4038                           
  4039 ;; *************** function _RtccWriteDate *****************
  4040 ;; Defined at:
  4041 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteDate.c"
  4042 ;; Parameters:    Size  Location     Type
  4043 ;;  pDt             2    0[COMRAM] PTR const struct .
  4044 ;;		 -> RtccDate(4), 
  4045 ;;  di              1    2[COMRAM] enum E7121
  4046 ;; Auto vars:     Size  Location     Type
  4047 ;;  tempHourWDay    2   11[COMRAM] struct .
  4048 ;;  tempDayMonth    2    9[COMRAM] struct .
  4049 ;;  tempYear        2    6[COMRAM] struct .
  4050 ;;  wasWrEn         1    8[COMRAM] enum E7121
  4051 ;;  wasAlrm         1    5[COMRAM] enum E7121
  4052 ;;  wasOn           1    4[COMRAM] enum E7121
  4053 ;; Return value:  Size  Location     Type
  4054 ;;                  1    wreg      enum E7121
  4055 ;; Registers used:
  4056 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4057 ;; Tracked objects:
  4058 ;;		On entry : 0/0
  4059 ;;		On exit  : 0/0
  4060 ;;		Unchanged: 0/0
  4061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4062 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4063 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4064 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4065 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4066 ;;Total ram usage:       13 bytes
  4067 ;; Hardware stack levels used:    1
  4068 ;; Hardware stack levels required when called:    1
  4069 ;; This function calls:
  4070 ;;		_RtccWrOn
  4071 ;; This function is called by:
  4072 ;;		_Write_RTC
  4073 ;; This function uses a non-reentrant model
  4074 ;;
  4075                           
  4076                           	psect	text21
  4077  0015F4                     __ptext21:
  4078                           	opt stack 0
  4079  0015F4                     _RtccWriteDate:
  4080                           	opt stack 27
  4081                           
  4082                           ;incstack = 0
  4083  0015F4  0E00               	movlw	0
  4084  0015F6  6E06               	movwf	RtccWriteDate@wasAlrm,c
  4085  0015F8  EE20 F002          	lfsr	2,2
  4086  0015FC  5001               	movf	RtccWriteDate@pDt,w,c
  4087  0015FE  26D9               	addwf	fsr2l,f,c
  4088  001600  5002               	movf	RtccWriteDate@pDt+1,w,c
  4089  001602  22DA               	addwfc	fsr2h,f,c
  4090  001604  0E13               	movlw	19
  4091  001606  60DF               	cpfslt	indf2,c
  4092  001608  0012               	return	
  4093  00160A  EE20 F002          	lfsr	2,2
  4094  00160E  5001               	movf	RtccWriteDate@pDt,w,c
  4095  001610  26D9               	addwf	fsr2l,f,c
  4096  001612  5002               	movf	RtccWriteDate@pDt+1,w,c
  4097  001614  22DA               	addwfc	fsr2h,f,c
  4098  001616  50DF               	movf	indf2,w,c
  4099  001618  B4D8               	btfsc	status,2,c
  4100  00161A  0012               	return	
  4101  00161C  EE20 F001          	lfsr	2,1
  4102  001620  5001               	movf	RtccWriteDate@pDt,w,c
  4103  001622  26D9               	addwf	fsr2l,f,c
  4104  001624  5002               	movf	RtccWriteDate@pDt+1,w,c
  4105  001626  22DA               	addwfc	fsr2h,f,c
  4106  001628  0E32               	movlw	50
  4107  00162A  60DF               	cpfslt	indf2,c
  4108  00162C  0012               	return	
  4109  00162E  EE20 F001          	lfsr	2,1
  4110  001632  5001               	movf	RtccWriteDate@pDt,w,c
  4111  001634  26D9               	addwf	fsr2l,f,c
  4112  001636  5002               	movf	RtccWriteDate@pDt+1,w,c
  4113  001638  22DA               	addwfc	fsr2h,f,c
  4114  00163A  50DF               	movf	indf2,w,c
  4115  00163C  B4D8               	btfsc	status,2,c
  4116  00163E  0012               	return	
  4117  001640  EE20 F003          	lfsr	2,3
  4118  001644  5001               	movf	RtccWriteDate@pDt,w,c
  4119  001646  26D9               	addwf	fsr2l,f,c
  4120  001648  5002               	movf	RtccWriteDate@pDt+1,w,c
  4121  00164A  22DA               	addwfc	fsr2h,f,c
  4122  00164C  0E99               	movlw	153
  4123  00164E  64DF               	cpfsgt	indf2,c
  4124  001650  D002               	goto	l2143
  4125  001652  0012               	return	
  4126                           
  4127                           ;	Return value of _RtccWriteDate is never used
  4128  001654  0012               	return	
  4129  001656                     l2143:
  4130  001656  EE20 F003          	lfsr	2,3
  4131  00165A  5001               	movf	RtccWriteDate@pDt,w,c
  4132  00165C  26D9               	addwf	fsr2l,f,c
  4133  00165E  5002               	movf	RtccWriteDate@pDt+1,w,c
  4134  001660  22DA               	addwfc	fsr2h,f,c
  4135  001662  50DF               	movf	indf2,w,c
  4136  001664  6E07               	movwf	RtccWriteDate@tempYear,c
  4137  001666  EE20 F001          	lfsr	2,1
  4138  00166A  5001               	movf	RtccWriteDate@pDt,w,c
  4139  00166C  26D9               	addwf	fsr2l,f,c
  4140  00166E  5002               	movf	RtccWriteDate@pDt+1,w,c
  4141  001670  22DA               	addwfc	fsr2h,f,c
  4142  001672  50DF               	movf	indf2,w,c
  4143  001674  6E0A               	movwf	RtccWriteDate@tempDayMonth,c
  4144  001676  EE20 F002          	lfsr	2,2
  4145  00167A  5001               	movf	RtccWriteDate@pDt,w,c
  4146  00167C  26D9               	addwf	fsr2l,f,c
  4147  00167E  5002               	movf	RtccWriteDate@pDt+1,w,c
  4148  001680  22DA               	addwfc	fsr2h,f,c
  4149  001682  50DF               	movf	indf2,w,c
  4150  001684  6E0B               	movwf	RtccWriteDate@tempDayMonth+1,c
  4151  001686  5003               	movf	RtccWriteDate@di,w,c
  4152  001688  B4D8               	btfsc	status,2,c
  4153  00168A  D002               	goto	l2149
  4154  00168C  9CF2               	bcf	intcon,6,c	;volatile
  4155  00168E  D000               	goto	l2149
  4156  001690                     l2149:
  4157  001690  0E00               	movlw	0
  4158  001692  BB3F               	btfsc	63,5,b	;volatile
  4159  001694  0E01               	movlw	1
  4160  001696  6E09               	movwf	RtccWriteDate@wasWrEn,c
  4161  001698  5009               	movf	RtccWriteDate@wasWrEn,w,c
  4162  00169A  A4D8               	btfss	status,2,c
  4163  00169C  D003               	goto	l2153
  4164  00169E  ECAD  F00E         	call	_RtccWrOn	;wreg free
  4165  0016A2  D000               	goto	l2153
  4166  0016A4                     l2153:
  4167  0016A4  0E00               	movlw	0
  4168  0016A6  BF3F               	btfsc	63,7,b	;volatile
  4169  0016A8  0E01               	movlw	1
  4170  0016AA  6E05               	movwf	RtccWriteDate@wasOn,c
  4171  0016AC  5005               	movf	RtccWriteDate@wasOn,w,c
  4172  0016AE  B4D8               	btfsc	status,2,c
  4173  0016B0  D007               	goto	l2159
  4174  0016B2  0E00               	movlw	0
  4175  0016B4  BE91               	btfsc	3985,7,c	;volatile
  4176  0016B6  0E01               	movlw	1
  4177  0016B8  6E06               	movwf	RtccWriteDate@wasAlrm,c
  4178  0016BA  010F               	movlb	15	; () banked
  4179  0016BC  9F3F               	bcf	63,7,b	;volatile
  4180  0016BE  D000               	goto	l2159
  4181  0016C0                     l2159:
  4182  0016C0  0EFC               	movlw	252
  4183  0016C2  010F               	movlb	15	; () banked
  4184  0016C4  173F               	andwf	63,f,b	;volatile
  4185  0016C6  010F               	movlb	15	; () banked
  4186  0016C8  813F               	bsf	63,0,b	;volatile
  4187                           
  4188                           ; BSR set to: 15
  4189  0016CA  CF98 F00C          	movff	3992,RtccWriteDate@tempHourWDay	;volatile
  4190                           
  4191                           ; BSR set to: 15
  4192  0016CE  CF99 F00D          	movff	3993,RtccWriteDate@tempHourWDay+1	;volatile
  4193                           
  4194                           ; BSR set to: 15
  4195  0016D2  C001  FFD9         	movff	RtccWriteDate@pDt,fsr2l
  4196  0016D6  C002  FFDA         	movff	RtccWriteDate@pDt+1,fsr2h
  4197  0016DA  50DF               	movf	indf2,w,c
  4198  0016DC  6E0D               	movwf	RtccWriteDate@tempHourWDay+1,c
  4199                           
  4200                           ; BSR set to: 15
  4201  0016DE  0EFC               	movlw	252
  4202  0016E0  010F               	movlb	15	; () banked
  4203  0016E2  173F               	andwf	63,f,b	;volatile
  4204                           
  4205                           ; BSR set to: 15
  4206  0016E4  0E03               	movlw	3
  4207  0016E6  010F               	movlb	15	; () banked
  4208  0016E8  133F               	iorwf	63,f,b	;volatile
  4209                           
  4210                           ; BSR set to: 15
  4211  0016EA  C007  FF98         	movff	RtccWriteDate@tempYear,3992	;volatile
  4212                           
  4213                           ; BSR set to: 15
  4214  0016EE  C008  FF99         	movff	RtccWriteDate@tempYear+1,3993	;volatile
  4215                           
  4216                           ; BSR set to: 15
  4217  0016F2  C00A  FF98         	movff	RtccWriteDate@tempDayMonth,3992	;volatile
  4218                           
  4219                           ; BSR set to: 15
  4220  0016F6  C00B  FF99         	movff	RtccWriteDate@tempDayMonth+1,3993	;volatile
  4221                           
  4222                           ; BSR set to: 15
  4223  0016FA  C00C  FF98         	movff	RtccWriteDate@tempHourWDay,3992	;volatile
  4224                           
  4225                           ; BSR set to: 15
  4226  0016FE  C00D  FF99         	movff	RtccWriteDate@tempHourWDay+1,3993	;volatile
  4227                           
  4228                           ; BSR set to: 15
  4229  001702  5005               	movf	RtccWriteDate@wasOn,w,c
  4230  001704  B4D8               	btfsc	status,2,c
  4231  001706  D00D               	goto	l2195
  4232                           
  4233                           ; BSR set to: 15
  4234  001708  010F               	movlb	15	; () banked
  4235  00170A  8F3F               	bsf	63,7,b	;volatile
  4236                           
  4237                           ; BSR set to: 15
  4238  00170C  5006               	movf	RtccWriteDate@wasAlrm,w,c
  4239  00170E  B4D8               	btfsc	status,2,c
  4240  001710  D002               	goto	l2191
  4241                           
  4242                           ; BSR set to: 15
  4243  001712  8E91               	bsf	3985,7,c	;volatile
  4244  001714  D000               	goto	l2191
  4245  001716                     l2191:
  4246                           
  4247                           ; BSR set to: 15
  4248  001716  5009               	movf	RtccWriteDate@wasWrEn,w,c
  4249  001718  B4D8               	btfsc	status,2,c
  4250  00171A  D009               	goto	l2199
  4251                           
  4252                           ; BSR set to: 15
  4253  00171C  ECAD  F00E         	call	_RtccWrOn	;wreg free
  4254  001720  D006               	goto	l2199
  4255  001722                     l2195:
  4256  001722  5009               	movf	RtccWriteDate@wasWrEn,w,c
  4257  001724  A4D8               	btfss	status,2,c
  4258  001726  D003               	goto	l2199
  4259  001728  010F               	movlb	15	; () banked
  4260  00172A  9B3F               	bcf	63,5,b	;volatile
  4261                           
  4262                           ; BSR set to: 15
  4263  00172C  D000               	goto	l2199
  4264  00172E                     l2199:
  4265  00172E  5003               	movf	RtccWriteDate@di,w,c
  4266  001730  B4D8               	btfsc	status,2,c
  4267  001732  0012               	return	
  4268  001734  9CF2               	bcf	intcon,6,c	;volatile
  4269  001736  0012               	return	
  4270                           
  4271                           ;	Return value of _RtccWriteDate is never used
  4272  001738  0012               	return		;funcret
  4273  00173A                     __end_of_RtccWriteDate:
  4274                           	opt stack 0
  4275                           tblptru	equ	0xFF8
  4276                           tblptrh	equ	0xFF7
  4277                           tblptrl	equ	0xFF6
  4278                           tablat	equ	0xFF5
  4279                           prodh	equ	0xFF4
  4280                           prodl	equ	0xFF3
  4281                           intcon	equ	0xFF2
  4282                           indf0	equ	0xFEF
  4283                           postinc0	equ	0xFEE
  4284                           fsr0h	equ	0xFEA
  4285                           fsr0l	equ	0xFE9
  4286                           wreg	equ	0xFE8
  4287                           postdec1	equ	0xFE5
  4288                           fsr1l	equ	0xFE1
  4289                           indf2	equ	0xFDF
  4290                           postinc2	equ	0xFDE
  4291                           postdec2	equ	0xFDD
  4292                           fsr2h	equ	0xFDA
  4293                           fsr2l	equ	0xFD9
  4294                           status	equ	0xFD8
  4295                           
  4296 ;; *************** function _RtccWrOn *****************
  4297 ;; Defined at:
  4298 ;;		line 21 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWrOn.c"
  4299 ;; Parameters:    Size  Location     Type
  4300 ;;		None
  4301 ;; Auto vars:     Size  Location     Type
  4302 ;;  data            2    0        unsigned int 
  4303 ;; Return value:  Size  Location     Type
  4304 ;;		None               void
  4305 ;; Registers used:
  4306 ;;		wreg, status,2
  4307 ;; Tracked objects:
  4308 ;;		On entry : 0/0
  4309 ;;		On exit  : 0/0
  4310 ;;		Unchanged: 0/0
  4311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4315 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4316 ;;Total ram usage:        0 bytes
  4317 ;; Hardware stack levels used:    1
  4318 ;; This function calls:
  4319 ;;		Nothing
  4320 ;; This function is called by:
  4321 ;;		_Write_RTC
  4322 ;;		_RtccWriteDate
  4323 ;;		_RtccWriteTime
  4324 ;; This function uses a non-reentrant model
  4325 ;;
  4326                           
  4327                           	psect	text22
  4328  001D5A                     __ptext22:
  4329                           	opt stack 0
  4330  001D5A                     _RtccWrOn:
  4331                           	opt stack 27
  4332                           
  4333                           ;incstack = 0
  4334  001D5A  9CF2               	bcf	intcon,6,c	;volatile
  4335  001D5C  0E55               	movlw	85
  4336  001D5E  6EA7               	movwf	4007,c	;volatile
  4337  001D60  0EAA               	movlw	170
  4338  001D62  6EA7               	movwf	4007,c	;volatile
  4339  001D64  010F               	movlb	15	; () banked
  4340  001D66  8B3F               	bsf	63,5,b	;volatile
  4341                           
  4342                           ; BSR set to: 15
  4343  001D68  8CF2               	bsf	intcon,6,c	;volatile
  4344                           
  4345                           ; BSR set to: 15
  4346  001D6A  0012               	return		;funcret
  4347  001D6C                     __end_of_RtccWrOn:
  4348                           	opt stack 0
  4349                           tblptru	equ	0xFF8
  4350                           tblptrh	equ	0xFF7
  4351                           tblptrl	equ	0xFF6
  4352                           tablat	equ	0xFF5
  4353                           prodh	equ	0xFF4
  4354                           prodl	equ	0xFF3
  4355                           intcon	equ	0xFF2
  4356                           indf0	equ	0xFEF
  4357                           postinc0	equ	0xFEE
  4358                           fsr0h	equ	0xFEA
  4359                           fsr0l	equ	0xFE9
  4360                           wreg	equ	0xFE8
  4361                           postdec1	equ	0xFE5
  4362                           fsr1l	equ	0xFE1
  4363                           indf2	equ	0xFDF
  4364                           postinc2	equ	0xFDE
  4365                           postdec2	equ	0xFDD
  4366                           fsr2h	equ	0xFDA
  4367                           fsr2l	equ	0xFD9
  4368                           status	equ	0xFD8
  4369                           tblptru	equ	0xFF8
  4370                           tblptrh	equ	0xFF7
  4371                           tblptrl	equ	0xFF6
  4372                           tablat	equ	0xFF5
  4373                           prodh	equ	0xFF4
  4374                           prodl	equ	0xFF3
  4375                           intcon	equ	0xFF2
  4376                           indf0	equ	0xFEF
  4377                           postinc0	equ	0xFEE
  4378                           fsr0h	equ	0xFEA
  4379                           fsr0l	equ	0xFE9
  4380                           wreg	equ	0xFE8
  4381                           postdec1	equ	0xFE5
  4382                           fsr1l	equ	0xFE1
  4383                           indf2	equ	0xFDF
  4384                           postinc2	equ	0xFDE
  4385                           postdec2	equ	0xFDD
  4386                           fsr2h	equ	0xFDA
  4387                           fsr2l	equ	0xFD9
  4388                           status	equ	0xFD8
  4389                           
  4390                           	psect	rparam
  4391  0000                     tblptru	equ	0xFF8
  4392                           tblptrh	equ	0xFF7
  4393                           tblptrl	equ	0xFF6
  4394                           tablat	equ	0xFF5
  4395                           prodh	equ	0xFF4
  4396                           prodl	equ	0xFF3
  4397                           intcon	equ	0xFF2
  4398                           indf0	equ	0xFEF
  4399                           postinc0	equ	0xFEE
  4400                           fsr0h	equ	0xFEA
  4401                           fsr0l	equ	0xFE9
  4402                           wreg	equ	0xFE8
  4403                           postdec1	equ	0xFE5
  4404                           fsr1l	equ	0xFE1
  4405                           indf2	equ	0xFDF
  4406                           postinc2	equ	0xFDE
  4407                           postdec2	equ	0xFDD
  4408                           fsr2h	equ	0xFDA
  4409                           fsr2l	equ	0xFD9
  4410                           status	equ	0xFD8


Data Sizes:
    Strings     90
    Constant    14
    Data        12
    BSS         71
    Persistent  13
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     37      90
    BANK0           160      0      44
    BANK1           256    256     256
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    RtccWriteTime@pTm	PTR const struct . size(2) Largest target is 4
		 -> RtccTime(COMRAM[4]), 

    RtccWriteDate@pDt	PTR const struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_18(CODE[5]), STR_15(CODE[5]), STR_14(CODE[5]), STR_13(CODE[5]), 
		 -> STR_11(CODE[5]), STR_10(CODE[5]), STR_9(CODE[5]), STR_7(CODE[5]), 
		 -> STR_6(CODE[5]), STR_5(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> buffer2(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    lcd_putrs@ptr	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_20(CODE[2]), STR_19(CODE[2]), STR_17(CODE[2]), STR_16(CODE[2]), 
		 -> STR_12(CODE[2]), STR_8(CODE[2]), buffer2(BANK0[20]), STR_4(CODE[10]), 
		 -> STR_3(CODE[13]), STR_2(CODE[33]), STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_read_keyboard
    _read_keyboard->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _caratula->_lcd_putrs
    _lcd_putrs->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_init->_lcd_send_byte
    _lcd_comand->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _Write_RTC->_RtccWriteDate

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               261   261      0   18900
                                             32 COMRAM     5     5      0
                                              0 BANK1    256   256      0
                              _Setup
                           _caratula
                         _lcd_gotoxy
                          _lcd_putrs
                      _read_keyboard
 ---------------------------------------------------------------------------------
 (1) _read_keyboard                                        1     1      0    6010
                                             31 COMRAM     1     1      0
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             28    22      6    2940
                                             12 COMRAM    19    13      6
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     287
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _caratula                                             0     0      0    4793
                         _lcd_comand
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (2) _lcd_putrs                                            2     0      2    3070
                                              8 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (3) _lcd_putc                                             1     1      0    1745
                                              7 COMRAM     1     1      0
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (4) _lcd_gotoxy                                           3     2      1    1077
                                              4 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) _Setup                                                0     0      0    3764
                          _Write_RTC
                         _lcd_comand
                           _lcd_init
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             1     1      0     841
                                              4 COMRAM     1     1      0
                        _Delay1KTCYx
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _lcd_comand                                           1     1      0     646
                                              4 COMRAM     1     1      0
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (4) _lcd_send_byte                                        2     1      1     624
                                              2 COMRAM     2     1      1
                       _Delay100TCYx
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (5) _lcd_send_nibble                                      2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _Delay100TCYx                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Write_RTC                                            0     0      0    2277
                           _RtccWrOn
                      _RtccWriteDate
                      _RtccWriteTime
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1068
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _RtccWriteTime                                       11     8      3     537
                                              0 COMRAM    11     8      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (3) _RtccWriteDate                                       13    10      3     672
                                              0 COMRAM    13    10      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (4) _RtccWrOn                                             2     2      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Setup
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_init
       _Delay1KTCYx
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
       _lcd_send_nibble
   _caratula
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
   _lcd_gotoxy
     _lcd_send_byte
       _Delay100TCYx
       _lcd_send_nibble
   _lcd_putrs
     _lcd_putc
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
   _read_keyboard
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100    100     100       8      100.0%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      2C       5       27.5%
BITCOMRAM           5F      0       1       0        1.1%
COMRAM              5F     25      5A       1       94.7%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     186       6        0.0%
DATA                 0      0     186       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Sep 01 22:28:07 2016

                        _a 002A                          _b 002C                          _c 002E  
                        _i 0030                          _j 0032                          _k 0034  
                       l75 1C8A                         l76 1C8C             ?_lcd_send_byte 0003  
             ___awdiv@sign 0006        ___wmul@multiplicand 0003                lcd_comand@d 0005  
             __CFG_CP0$OFF 000000                        l201 0FA6                        l210 100A  
                      l202 0FA2                        l221 1098                        l213 1028  
                      l205 0FDA                        l230 10E2                        l222 1094  
                      l214 1024                        l206 0FD6                        l241 118A  
                      l233 1122                        l225 10CC                        l217 1064  
                      l209 100E                        l250 11C2                        l242 1186  
                      l234 111E                        l226 10C8                        l218 1060  
                      l253 11FA                        l245 11A4                        l237 1156  
                      l229 10E6                        l262 122A                        l254 11F6  
                      l246 11A0                        l238 1152                        l512 141A  
                      l257 1214                        l249 11C6                        l258 1210  
                      _dia 0050                        _key 0038                        _mes 0056  
                      wreg 000FE8                lcd_gotoxy@x 0006                lcd_gotoxy@y 0005  
                     l2021 1D4A                       l2123 182E                       l2211 1D2C  
                     l1156 1AEC                       l2061 1BBE                       l1166 1B8C  
                     l2143 1656                       l2127 183A                       l2119 1822  
                     l2047 1CFC                       l2055 1B9A                       l2311 1B22  
                     l2153 16A4                       l2081 17A2                       l2241 194C  
                     l2049 1D02                       l2057 1BA6                       l2065 1BCA  
                     l2091 17D2                       l2075 1778                       l2243 1956  
                     l2235 1936                       l2059 1BB2                       l2307 1AF8  
                     l2411 129A                       l2403 126C                       l2149 1690  
                     l2085 17B6                       l2261 1998                       l2253 197C  
                     l2245 195E                       l2229 1924                       l1285 1D38  
                     l2405 127A                       l2191 1716                       l2159 16C0  
                     l2271 1AB0                       l2423 131C                       l2415 12B8  
                     l2257 1988                       l2273 1ABA                       l2409 1284  
                     l2601 1232                       l2195 1722                       l2283 1AE0  
                     l2275 1AC2                       l2291 1B58                       l2451 13B8  
                     l2443 1390                       l2435 1360                       l2427 1322  
                     l2373 19D2                       l2293 1B62                       l2453 13C2  
                     l2429 1344                       l2613 1850                       l2199 172E  
                     l2295 1B6A                       l2471 1420                       l2463 13F0  
                     l2447 1394                       l2439 136C                       l2623 1864  
                     l2369 19CA                       l2465 13F8                       l2457 13CE  
                     l2481 149C                       l2625 1868                       l2387 19F6  
                     l2379 19E2                       l2299 1B80                       l2635 189C  
                     l2619 185C                       l2477 1474                       l2397 1252  
                     l2629 1870                       l2479 1480                       l2639 18A0  
                     STR_1 0F30                       STR_2 0F0F                       STR_3 0F41  
                     STR_4 0F4E                       STR_5 0F58                       STR_6 0F58  
                     STR_7 0F58                       STR_8 0F61                       STR_9 0F58  
                     u1200 1A30                       u1220 1A48                       u1240 1A62  
                     u1218 1A32                       u1260 1A7E                       u1238 1A4A  
                     u1258 1A64                       u1278 1A80                       u2407 1238  
                     u2417 1D3A                       u2427 1D4C                       u1680 1B18  
                     u1690 1B42                       u2397 18FE                       u1687 1B0E  
                     u1697 1B38           ?_lcd_send_nibble 0001                main@teclado 0100  
                     _anio 004E                       _flag 02D0                       _main 1846  
                     _hora 0054                       fsr0h 000FEA                       indf0 000FEF  
                     fsr0l 000FE9                       fsr2h 000FDA                       fsr1l 000FE1  
                     indf2 000FDF                       fsr2l 000FD9              __CFG_T1DIG$ON 000000  
                     prodh 000FF4                       prodl 000FF3                       start 0000  
            __CFG_IESO$OFF 000000               ___param_bank 000010                _Delay1KTCYx 1D36  
            __CFG_PLLDIV$1 000000                      ?_main 0001            __end_of___awdiv 19A4  
                    STR_10 0F58                      STR_11 0F58                      STR_20 0F67  
                    STR_12 0F63                      STR_13 0F58                      STR_14 0F58  
                    STR_15 0F58                      STR_16 0F65                      STR_17 0F5F  
                    STR_18 0F58                      STR_19 0F5D      __size_of_Delay100TCYx 0012  
          ___awdiv@divisor 0003            __end_of___lwdiv 1AF6            __end_of___lwmod 1B96  
          ___awdiv@counter 0005                      _TRISA 000F92                      _TRISB 000F93  
                    _TRISC 000F94             __CFG_FCMEN$OFF 000000                      _Setup 1BE2  
          __end_of_dpowers 0F0B                      _mes_d 0048                      _mes_u 0049  
          __end_of_isdigit 1D36                      main@i 0024                      main@j 0025  
           __pbitbssCOMRAM 02D0                      tablat 000FF5               lcd_putrs@ptr 0009  
                    status 000FD8            __end_of_sprintf 14AC    __CFG_DSWDTOSC$INTOSCREF 000000  
          __initialization 1C2A               _Delay100TCYx 1D48               __end_of_main 190E  
          ??_lcd_send_byte 0004                     ??_main 0021              __activetblptr 000002  
         __end_of_RtccWrOn 1D6C                     ?_Setup 0001                     _ADCON0 000FC2  
                   _ADCON1 000FC1                     _EECON2 000FA7                     _ANCON0 000F48  
                   _ANCON1 000F49           ___awdiv@dividend 0001             __CFG_WDTEN$OFF 000000  
         RtccWriteDate@pDt 0001                     _RTCCFG 000F3F             __CFG_WPCFG$OFF 000000  
         __end_of_caratula 1CF0             __CFG_WPDIS$OFF 000000             __CFG_XINST$OFF 000000  
         __end_of_lcd_init 1A24           __end_of_lcd_putc 1BE2                     ___wmul 1CA0  
                ??___awdiv 0005             __CFG_STVREN$ON 000000                     _diasem 0052  
                   _anio_d 0041                     _anio_u 0042                  ??___lwdiv 0005  
                ??___lwmod 000C                     _hora_d 0046                     _hora_u 0047  
                   clear_0 1C30                     clear_1 1C3E           ___awdiv@quotient 0007  
                   _minuto 0058      __end_of_RtccWriteDate 173A      __end_of_RtccWriteTime 1846  
         RtccWriteTime@pTm 0001               __pdataCOMRAM 004E                  ??_isdigit 0001  
             __mediumconst 0000                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8                  ??_sprintf 0013     __size_of_read_keyboard 02DE  
               __accesstop 0060    __end_of__initialization 1C64         __size_of_Write_RTC 0148  
            ___rparam_used 000001             __pcstackCOMRAM 0001              __end_of_Setup 1C2A  
          __CFG_DSWDTPS$G2 000000            __CFG_OSC$INTOSC 000000                    ??_Setup 000E  
        lcd_gotoxy@address 0007         __size_of_lcd_putrs 0054               sprintf@width 001D  
               __pbssBANK0 0060                 _dia_semana 0043  RtccWriteTime@tempHourWDay 000A  
               __pnvCOMRAM 0041                  ?_RtccWrOn 0001             lcd_send_byte@n 0003  
                  ?___wmul 0001              _read_keyboard 0F6A               ?_Delay1KTCYx 0001  
        __end_of_Write_RTC 15F4                 _lcd_comand 1D6C                  ?_caratula 0001  
               _lcd_gotoxy 1CF0                    _RTCVALH 000F99                    _RTCVALL 000F98  
                ?_lcd_init 0001                  ?_lcd_putc 0001                    __Hparam 0000  
                  __Lparam 0000   __size_of_lcd_send_nibble 0076                 ??_RtccWrOn 0001  
                  ___awdiv 190E          __end_of_lcd_putrs 1B4A             ?_read_keyboard 0001  
          __size_of___wmul 0028                    ___lwdiv 1A9A                    ___lwmod 1B4A  
             __psmallconst 0F00                _RtccTimeVal 0026                    __pcinit 1C2A  
                  _fecha_d 0044                    _fecha_u 0045                    __ramtop 0F00  
                  __ptext0 1846                    __ptext1 0F6A                    __ptext2 1248  
                  __ptext3 1D14                    __ptext4 1CA0                    __ptext5 1B4A  
                  __ptext6 1A9A                    __ptext7 1CC8                    __ptext8 1AF6  
                  __ptext9 1B96                    _buffer2 0078                  _T1CONbits 000FCD  
                  _dpowers 0F01                    _isdigit 1D14                 ??_caratula 000B  
                  _segundo 0036                    _sprintf 1248                 ??_lcd_init 0005  
               ??_lcd_putc 0008       end_of_initialization 1C64       lcd_send_byte@address 0004  
            __Lmediumconst 0000                    postdec1 000FE5                    postdec2 000FDD  
                  postinc0 000FEE                    postinc2 000FDE      __end_of_lcd_send_byte 1CA0  
                _PORTAbits 000F80                  _PORTCbits 000F82           __CFG_DSBOREN$OFF 000000  
              ?_lcd_comand 0001           __CFG_CPUDIV$OSC1 000000                  _TRISBbits 000F93  
              ?_lcd_gotoxy 0005            _LCD_INIT_STRING 0F0B           __CFG_IOL1WAY$OFF 000000  
RtccWriteDate@tempDayMonth 000A        __CFG_MSSP7B_EN$MSK7 000000            ??_read_keyboard 0020  
         Delay100TCYx@unit 0001             __end_of___wmul 1CC8              __pidataCOMRAM 1D7A  
RtccWriteDate@tempHourWDay 000C          ??_lcd_send_nibble 0001       __size_of_Delay1KTCYx 0012  
         __CFG_DSWDTEN$OFF 000000        start_initialization 1C2A       RtccWriteTime@wasAlrm 0006  
     RtccWriteTime@wasWrEn 0007     __size_of_RtccWriteDate 0146            RtccWriteDate@di 0003  
   __size_of_RtccWriteTime 010C        __size_of_lcd_comand 000E        __size_of_lcd_gotoxy 0024  
                 ??___wmul 0005          __size_of_RtccWrOn 0012            RtccWriteTime@di 0003  
         __CFG_LPT1OSC$OFF 000000                _ALRMCFGbits 000F91    __end_of_LCD_INIT_STRING 0F0F  
              __pbssCOMRAM 0026              __pcstackBANK1 0100                  _Write_RTC 14AC  
             _isdigit$2224 0002          __size_of_caratula 0028            Delay1KTCYx@unit 0001  
        __size_of_lcd_init 0080                sprintf@flag 0019          __size_of_lcd_putc 004C  
              sprintf@prec 001C           ___lwdiv@dividend 0001              ?_Delay100TCYx 0001  
                 ?___awdiv 0001                   ?___lwdiv 0001                   ?___lwmod 0008  
  RtccWriteTime@tempMinSec 0008                  _lcd_putrs 1AF6              _RtccWriteDate 15F4  
              __smallconst 0F00              _RtccWriteTime 173A                   ?_isdigit 0001  
     __CFG_RTCOSC$T1OSCREF 000000             __size_of_Setup 0048                 ?_Write_RTC 0001  
         ___lwdiv@quotient 0005                   ?_sprintf 000D           _RtccAlrmTimeDate 0060  
           ___wmul@product 0005                   _LATAbits 000F89                   _LATBbits 000F8A  
                 _PIE3bits 000FA3                  _segundo_d 004C             ??_Delay100TCYx 0001  
                _segundo_u 004D           __CFG_WDTPS$32768 000000         RtccWriteDate@wasOn 0005  
       _Rtcc_read_TimeDate 0070             ?_RtccWriteDate 0001                 ?_lcd_putrs 0009  
        ___wmul@multiplier 0001             ?_RtccWriteTime 0001                  lcd_init@i 0005  
             ??_lcd_comand 0005                  main@input 0023                  lcd_putc@c 0008  
             ??_lcd_gotoxy 0006                  copy_data0 1C58            _lcd_send_nibble 1A24  
                 __Hrparam 0000                   _RtccDate 0039                   __Lrparam 0000  
                 _RtccTime 003D                   _RtccWrOn 1D5A         __end_of_lcd_comand 1D7A  
       __end_of_lcd_gotoxy 1D14           __size_of___awdiv 0096           __size_of___lwdiv 005C  
         __size_of___lwmod 004C               _RtccTimeDate 0068                 sprintf@val 001A  
                 _caratula 1CC8           __size_of_isdigit 0022            ___lwdiv@divisor 0003  
              ??_Write_RTC 000E            ___lwdiv@counter 0007                   __ptext10 1CF0  
                 __ptext11 1BE2                   __ptext20 173A                   __ptext12 19A4  
                 __ptext21 15F4                   __ptext13 1D36                   __ptext22 1D5A  
                 __ptext14 1D6C                   __ptext15 1C6E                   __ptext16 1A24  
                 __ptext17 1D48                   __ptext18 14AC                   __ptext19 190E  
                 _lcd_init 19A4                   _lcd_putc 1B96           __size_of_sprintf 0264  
   __size_of_lcd_send_byte 0032              __size_of_main 00C8                   _minuto_d 004A  
                 _minuto_u 004B      __end_of_read_keyboard 1248              ??_Delay1KTCYx 0001  
          ??_RtccWriteDate 0004            ??_RtccWriteTime 0004                ??_lcd_putrs 000B  
              _OSCTUNEbits 000F9B                 _INTCONbits 000FF2         RtccWriteTime@wasOn 0005  
     __end_of_Delay100TCYx 1D5A                   isdigit@c 0003                  sprintf@ap 0017  
  __end_of_lcd_send_nibble 1A9A                  sprintf@sp 000D           ___lwmod@dividend 0008  
               _OSCCONbits 000FD3      RtccWriteDate@tempYear 0007              _lcd_send_byte 1C6E  
               _RTCCFGbits 000F3F                   sprintf@c 001F                   sprintf@f 000F  
          ___lwmod@divisor 000A        __end_of_Delay1KTCYx 1D48            ___lwmod@counter 000C  
     RtccWriteDate@wasAlrm 0006       RtccWriteDate@wasWrEn 0009      lcd_send_nibble@nibble 0002  
