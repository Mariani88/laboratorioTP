

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Sep 13 18:34:27 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	text64,global,reloc=2,class=CODE,delta=1
    79                           	psect	text65,global,reloc=2,class=CODE,delta=1
    80                           	psect	text66,global,reloc=2,class=CODE,delta=1
    81                           	psect	text67,global,reloc=2,class=CODE,delta=1
    82                           	psect	text68,global,reloc=2,class=CODE,delta=1
    83                           	psect	text69,global,reloc=2,class=CODE,delta=1
    84                           	psect	text70,global,reloc=2,class=CODE,delta=1
    85                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    86                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    87  0000                     
    88                           	psect	idataBANK0
    89  00387C                     __pidataBANK0:
    90                           	opt stack 0
    91                           
    92                           ;initializer for _anio
    93  00387C  000F               	dw	15
    94                           
    95                           ;initializer for _dia
    96  00387E  0008               	dw	8
    97                           
    98                           ;initializer for _diasem
    99  003880  0003               	dw	3
   100                           
   101                           ;initializer for _hora
   102  003882  0012               	dw	18
   103                           
   104                           ;initializer for _mes
   105  003884  0009               	dw	9
   106                           
   107                           ;initializer for _minuto
   108  003886  001E               	dw	30
   109                           
   110                           ;initializer for _password
   111  003888  04D2               	dw	1234
   112                           
   113                           ;initializer for _key
   114  00388A  12                 	db	18
   115                           
   116                           ;initializer for _menu
   117  00388B  01                 	db	1
   118                           
   119                           ;initializer for _state_alarm
   120  00388C  01                 	db	1
   121                           
   122                           	psect	smallconst
   123  000F00                     __psmallconst:
   124                           	opt stack 0
   125  000F00  00                 	db	0
   126  000F01                     _dpowers:
   127                           	opt stack 0
   128  000F01  0001               	dw	1
   129  000F03  000A               	dw	10
   130  000F05  0064               	dw	100
   131  000F07  03E8               	dw	1000
   132  000F09  2710               	dw	10000
   133  000F0B                     __end_of_dpowers:
   134                           	opt stack 0
   135  000F0B                     _LCD_INIT_STRING:
   136                           	opt stack 0
   137  000F0B  28                 	db	40
   138  000F0C  0C                 	db	12
   139  000F0D  01                 	db	1
   140  000F0E  06                 	db	6
   141  000F0F                     __end_of_LCD_INIT_STRING:
   142                           	opt stack 0
   143  000F0F                     exp@coeff:
   144                           	opt stack 0
   145  000F0F  00                 	db	0
   146  000F10  80                 	db	128
   147  000F11  3F                 	db	63
   148  000F12  72                 	db	114
   149  000F13  31                 	db	49
   150  000F14  3F                 	db	63
   151  000F15  FE                 	db	254
   152  000F16  75                 	db	117
   153  000F17  3E                 	db	62
   154  000F18  58                 	db	88
   155  000F19  63                 	db	99
   156  000F1A  3D                 	db	61
   157  000F1B  95                 	db	149
   158  000F1C  1D                 	db	29
   159  000F1D  3C                 	db	60
   160  000F1E  C5                 	db	197
   161  000F1F  AE                 	db	174
   162  000F20  3A                 	db	58
   163  000F21  79                 	db	121
   164  000F22  21                 	db	33
   165  000F23  39                 	db	57
   166  000F24  94                 	db	148
   167  000F25  80                 	db	128
   168  000F26  37                 	db	55
   169  000F27  93                 	db	147
   170  000F28  A7                 	db	167
   171  000F29  35                 	db	53
   172  000F2A  56                 	db	86
   173  000F2B  15                 	db	21
   174  000F2C  34                 	db	52
   175  000F2D                     __end_ofexp@coeff:
   176                           	opt stack 0
   177  000F2D                     log@coeff:
   178                           	opt stack 0
   179  000F2D  00                 	db	0
   180  000F2E  00                 	db	0
   181  000F2F  00                 	db	0
   182  000F30  00                 	db	0
   183  000F31  80                 	db	128
   184  000F32  3F                 	db	63
   185  000F33  F0                 	db	240
   186  000F34  FF                 	db	255
   187  000F35  BE                 	db	190
   188  000F36  E2                 	db	226
   189  000F37  A9                 	db	169
   190  000F38  3E                 	db	62
   191  000F39  83                 	db	131
   192  000F3A  76                 	db	118
   193  000F3B  BE                 	db	190
   194  000F3C  AE                 	db	174
   195  000F3D  2B                 	db	43
   196  000F3E  3E                 	db	62
   197  000F3F  3C                 	db	60
   198  000F40  C3                 	db	195
   199  000F41  BD                 	db	189
   200  000F42  D2                 	db	210
   201  000F43  13                 	db	19
   202  000F44  3D                 	db	61
   203  000F45  78                 	db	120
   204  000F46  D3                 	db	211
   205  000F47  BB                 	db	187
   206  000F48                     __end_oflog@coeff:
   207                           	opt stack 0
   208  000F48                     STR_22:
   209                           
   210                           ; BSR set to: 15
   211  000F48  6E                 	db	110	;'n'
   212  000F49  6F                 	db	111	;'o'
   213  000F4A  74                 	db	116	;'t'
   214  000F4B  68                 	db	104	;'h'
   215  000F4C  69                 	db	105	;'i'
   216  000F4D  6E                 	db	110	;'n'
   217  000F4E  67                 	db	103	;'g'
   218  000F4F  20                 	db	32
   219  000F50  63                 	db	99	;'c'
   220  000F51  68                 	db	104	;'h'
   221  000F52  61                 	db	97	;'a'
   222  000F53  6E                 	db	110	;'n'
   223  000F54  67                 	db	103	;'g'
   224  000F55  65                 	db	101	;'e'
   225  000F56  64                 	db	100	;'d'
   226  000F57  00                 	db	0
   227  000F58                     STR_21:
   228                           
   229                           ; BSR set to: 15
   230  000F58  6F                 	db	111	;'o'
   231  000F59  6C                 	db	108	;'l'
   232  000F5A  64                 	db	100	;'d'
   233  000F5B  20                 	db	32
   234  000F5C  70                 	db	112	;'p'
   235  000F5D  61                 	db	97	;'a'
   236  000F5E  73                 	db	115	;'s'
   237  000F5F  73                 	db	115	;'s'
   238  000F60  20                 	db	32
   239  000F61  77                 	db	119	;'w'
   240  000F62  72                 	db	114	;'r'
   241  000F63  6F                 	db	111	;'o'
   242  000F64  6E                 	db	110	;'n'
   243  000F65  67                 	db	103	;'g'
   244  000F66  00                 	db	0
   245  000F67                     STR_11:
   246                           
   247                           ; BSR set to: 15
   248  000F67  25                 	db	37
   249  000F68  30                 	db	48	;'0'
   250  000F69  32                 	db	50	;'2'
   251  000F6A  75                 	db	117	;'u'
   252  000F6B  2F                 	db	47
   253  000F6C  25                 	db	37
   254  000F6D  30                 	db	48	;'0'
   255  000F6E  32                 	db	50	;'2'
   256  000F6F  75                 	db	117	;'u'
   257  000F70  2F                 	db	47
   258  000F71  25                 	db	37
   259  000F72  30                 	db	48	;'0'
   260  000F73  32                 	db	50	;'2'
   261  000F74  75                 	db	117	;'u'
   262  000F75  00                 	db	0
   263  000F76                     STR_23:
   264                           
   265                           ; BSR set to: 15
   266  000F76  4F                 	db	79	;'O'
   267  000F77  6C                 	db	108	;'l'
   268  000F78  64                 	db	100	;'d'
   269  000F79  20                 	db	32
   270  000F7A  70                 	db	112	;'p'
   271  000F7B  61                 	db	97	;'a'
   272  000F7C  73                 	db	115	;'s'
   273  000F7D  73                 	db	115	;'s'
   274  000F7E  3A                 	db	58	;':'
   275  000F7F  5F                 	db	95	;'_'
   276  000F80  5F                 	db	95	;'_'
   277  000F81  5F                 	db	95	;'_'
   278  000F82  5F                 	db	95	;'_'
   279  000F83  00                 	db	0
   280  000F84                     STR_24:
   281                           
   282                           ; BSR set to: 15
   283  000F84  4E                 	db	78	;'N'
   284  000F85  65                 	db	101	;'e'
   285  000F86  77                 	db	119	;'w'
   286  000F87  20                 	db	32
   287  000F88  70                 	db	112	;'p'
   288  000F89  61                 	db	97	;'a'
   289  000F8A  73                 	db	115	;'s'
   290  000F8B  73                 	db	115	;'s'
   291  000F8C  3A                 	db	58	;':'
   292  000F8D  5F                 	db	95	;'_'
   293  000F8E  5F                 	db	95	;'_'
   294  000F8F  5F                 	db	95	;'_'
   295  000F90  5F                 	db	95	;'_'
   296  000F91  00                 	db	0
   297  000F92                     STR_19:
   298                           
   299                           ; BSR set to: 15
   300  000F92  70                 	db	112	;'p'
   301  000F93  61                 	db	97	;'a'
   302  000F94  73                 	db	115	;'s'
   303  000F95  73                 	db	115	;'s'
   304  000F96  20                 	db	32
   305  000F97  73                 	db	115	;'s'
   306  000F98  75                 	db	117	;'u'
   307  000F99  63                 	db	99	;'c'
   308  000F9A  63                 	db	99	;'c'
   309  000F9B  65                 	db	101	;'e'
   310  000F9C  73                 	db	115	;'s'
   311  000F9D  73                 	db	115	;'s'
   312  000F9E  00                 	db	0
   313  000F9F                     STR_14:
   314                           
   315                           ; BSR set to: 15
   316  000F9F  20                 	db	32
   317  000FA0  20                 	db	32
   318  000FA1  20                 	db	32
   319  000FA2  20                 	db	32
   320  000FA3  20                 	db	32
   321  000FA4  20                 	db	32
   322  000FA5  20                 	db	32
   323  000FA6  20                 	db	32
   324  000FA7  20                 	db	32
   325  000FA8  20                 	db	32
   326  000FA9  00                 	db	0
   327  000FAA                     STR_13:
   328                           
   329                           ; BSR set to: 15
   330  000FAA  57                 	db	87	;'W'
   331  000FAB  41                 	db	65	;'A'
   332  000FAC  52                 	db	82	;'R'
   333  000FAD  4E                 	db	78	;'N'
   334  000FAE  49                 	db	73	;'I'
   335  000FAF  4E                 	db	78	;'N'
   336  000FB0  47                 	db	71	;'G'
   337  000FB1  21                 	db	33
   338  000FB2  21                 	db	33
   339  000FB3  21                 	db	33
   340  000FB4  00                 	db	0
   341  000FB5                     STR_12:
   342                           
   343                           ; BSR set to: 15
   344  000FB5  25                 	db	37
   345  000FB6  30                 	db	48	;'0'
   346  000FB7  32                 	db	50	;'2'
   347  000FB8  75                 	db	117	;'u'
   348  000FB9  3A                 	db	58	;':'
   349  000FBA  25                 	db	37
   350  000FBB  30                 	db	48	;'0'
   351  000FBC  32                 	db	50	;'2'
   352  000FBD  75                 	db	117	;'u'
   353  000FBE  00                 	db	0
   354  000FBF                     STR_25:
   355                           
   356                           ; BSR set to: 15
   357  000FBF  53                 	db	83	;'S'
   358  000FC0  65                 	db	101	;'e'
   359  000FC1  6E                 	db	110	;'n'
   360  000FC2  73                 	db	115	;'s'
   361  000FC3  6F                 	db	111	;'o'
   362  000FC4  72                 	db	114	;'r'
   363  000FC5  3A                 	db	58	;':'
   364  000FC6  20                 	db	32
   365  000FC7  00                 	db	0
   366  000FC8                     STR_18:
   367                           
   368                           ; BSR set to: 15
   369  000FC8  54                 	db	84	;'T'
   370  000FC9  52                 	db	82	;'R'
   371  000FCA  49                 	db	73	;'I'
   372  000FCB  47                 	db	71	;'G'
   373  000FCC  47                 	db	71	;'G'
   374  000FCD  45                 	db	69	;'E'
   375  000FCE  44                 	db	68	;'D'
   376  000FCF  00                 	db	0
   377  000FD0                     STR_27:
   378                           
   379                           ; BSR set to: 15
   380  000FD0  44                 	db	68	;'D'
   381  000FD1  61                 	db	97	;'a'
   382  000FD2  74                 	db	116	;'t'
   383  000FD3  65                 	db	101	;'e'
   384  000FD4  3A                 	db	58	;':'
   385  000FD5  00                 	db	0
   386  000FD6                     STR_1:
   387                           
   388                           ; BSR set to: 15
   389  000FD6  25                 	db	37
   390  000FD7  30                 	db	48	;'0'
   391  000FD8  31                 	db	49	;'1'
   392  000FD9  75                 	db	117	;'u'
   393  000FDA  00                 	db	0
   394  000FDB                     STR_17:
   395                           
   396                           ; BSR set to: 15
   397  000FDB  4F                 	db	79	;'O'
   398  000FDC  46                 	db	70	;'F'
   399  000FDD  46                 	db	70	;'F'
   400  000FDE  00                 	db	0
   401  000FDF                     STR_16:
   402                           
   403                           ; BSR set to: 15
   404  000FDF  4F                 	db	79	;'O'
   405  000FE0  4E                 	db	78	;'N'
   406  000FE1  00                 	db	0
   407  0000                     
   408                           ; #config settings
   409  000FE2  00                 	db	0	; dummy byte at the end
   410  0000                     
   411                           	psect	nvBANK0
   412  0000DA                     __pnvBANK0:
   413                           	opt stack 0
   414  0000DA                     _anio_d:
   415                           	opt stack 0
   416  0000DA                     	ds	1
   417  0000DB                     _anio_u:
   418                           	opt stack 0
   419  0000DB                     	ds	1
   420  0000DC                     _dia_semana:
   421                           	opt stack 0
   422  0000DC                     	ds	1
   423  0000DD                     _fecha_d:
   424                           	opt stack 0
   425  0000DD                     	ds	1
   426  0000DE                     _fecha_u:
   427                           	opt stack 0
   428  0000DE                     	ds	1
   429  0000DF                     _hora_d:
   430                           	opt stack 0
   431  0000DF                     	ds	1
   432  0000E0                     _hora_u:
   433                           	opt stack 0
   434  0000E0                     	ds	1
   435  0000E1                     _mes_d:
   436                           	opt stack 0
   437  0000E1                     	ds	1
   438  0000E2                     _mes_u:
   439                           	opt stack 0
   440  0000E2                     	ds	1
   441  0000E3                     _minuto_d:
   442                           	opt stack 0
   443  0000E3                     	ds	1
   444  0000E4                     _minuto_u:
   445                           	opt stack 0
   446  0000E4                     	ds	1
   447  0000E5                     _segundo_d:
   448                           	opt stack 0
   449  0000E5                     	ds	1
   450  0000E6                     _segundo_u:
   451                           	opt stack 0
   452  0000E6                     	ds	1
   453  0000                     _ANCON0	set	3912
   454  0000                     _ANCON1	set	3913
   455  0000                     _RTCCFG	set	3903
   456  0000                     _RTCCFGbits	set	3903
   457  0000                     _ADCON0	set	4034
   458  0000                     _ADCON1	set	4033
   459  0000                     _ALRMCFGbits	set	3985
   460  0000                     _EECON2	set	4007
   461  0000                     _INTCONbits	set	4082
   462  0000                     _LATAbits	set	3977
   463  0000                     _LATBbits	set	3978
   464  0000                     _OSCCONbits	set	4051
   465  0000                     _OSCTUNEbits	set	3995
   466  0000                     _PIE3bits	set	4003
   467  0000                     _PORTAbits	set	3968
   468  0000                     _PORTCbits	set	3970
   469  0000                     _RTCVALH	set	3993
   470  0000                     _RTCVALL	set	3992
   471  0000                     _T1CONbits	set	4045
   472  0000                     _TRISA	set	3986
   473  0000                     _TRISB	set	3987
   474  0000                     _TRISBbits	set	3987
   475  0000                     _TRISC	set	3988
   476                           
   477                           	psect	cinit
   478  0035BA                     __pcinit:
   479                           	opt stack 0
   480  0035BA                     start_initialization:
   481                           	opt stack 0
   482  0035BA                     __initialization:
   483                           	opt stack 0
   484                           
   485                           ; Clear objects allocated to BITBANK0 (1 bytes)
   486  0035BA  0100               	movlb	0
   487  0035BC  6BE7               	clrf	(__pbitbssBANK0/(0+8))& (0+255),b
   488                           
   489                           ; Clear objects allocated to BANK0 (83 bytes)
   490  0035BE  EE00  F060         	lfsr	0,__pbssBANK0
   491  0035C2  0E53               	movlw	83
   492  0035C4                     clear_0:
   493  0035C4  6AEE               	clrf	postinc0,c
   494  0035C6  06E8               	decf	wreg,f,c
   495  0035C8  E1FD               	bnz	clear_0
   496                           
   497                           ; Initialize objects allocated to BANK0 (17 bytes)
   498                           ; load TBLPTR registers with __pidataBANK0
   499  0035CA  0E7C               	movlw	low __pidataBANK0
   500  0035CC  6EF6               	movwf	tblptrl,c
   501  0035CE  0E38               	movlw	high __pidataBANK0
   502  0035D0  6EF7               	movwf	tblptrh,c
   503  0035D2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   504  0035D4  6EF8               	movwf	tblptru,c
   505  0035D6  EE00  F0C9         	lfsr	0,__pdataBANK0
   506  0035DA  EE10 F011          	lfsr	1,17
   507  0035DE                     copy_data0:
   508  0035DE  0009               	tblrd		*+
   509  0035E0  CFF5 FFEE          	movff	tablat,postinc0
   510  0035E4  50E5               	movf	postdec1,w,c
   511  0035E6  50E1               	movf	fsr1l,w,c
   512  0035E8  E1FA               	bnz	copy_data0
   513  0035EA                     end_of_initialization:
   514                           	opt stack 0
   515  0035EA                     __end_of__initialization:
   516                           	opt stack 0
   517  0035EA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   518  0035EC  6EF8               	movwf	tblptru,c
   519  0035EE  0100               	movlb	0
   520  0035F0  EF13  F01B         	goto	_main	;jump to C main() function
   521                           tblptru	equ	0xFF8
   522                           tblptrh	equ	0xFF7
   523                           tblptrl	equ	0xFF6
   524                           tablat	equ	0xFF5
   525                           postinc0	equ	0xFEE
   526                           wreg	equ	0xFE8
   527                           postdec1	equ	0xFE5
   528                           fsr1l	equ	0xFE1
   529                           
   530                           	psect	bitbssBANK0
   531  000738                     __pbitbssBANK0:
   532                           	opt stack 0
   533  000738                     _flag:
   534                           	opt stack 0
   535  000738                     	ds	1
   536                           tblptru	equ	0xFF8
   537                           tblptrh	equ	0xFF7
   538                           tblptrl	equ	0xFF6
   539                           tablat	equ	0xFF5
   540                           postinc0	equ	0xFEE
   541                           wreg	equ	0xFE8
   542                           postdec1	equ	0xFE5
   543                           fsr1l	equ	0xFE1
   544                           
   545                           	psect	bssBANK0
   546  000060                     __pbssBANK0:
   547                           	opt stack 0
   548  000060                     _RtccAlrmTimeDate:
   549                           	opt stack 0
   550  000060                     	ds	8
   551  000068                     _RtccTimeDate:
   552                           	opt stack 0
   553  000068                     	ds	8
   554  000070                     _Rtcc_read_TimeDate:
   555                           	opt stack 0
   556  000070                     	ds	8
   557  000078                     _RtccTimeVal:
   558                           	opt stack 0
   559  000078                     	ds	4
   560  00007C                     _a:
   561                           	opt stack 0
   562  00007C                     	ds	2
   563  00007E                     _b:
   564                           	opt stack 0
   565  00007E                     	ds	2
   566  000080                     _c:
   567                           	opt stack 0
   568  000080                     	ds	2
   569  000082                     _diaDisparo:
   570                           	opt stack 0
   571  000082                     	ds	2
   572  000084                     _errno:
   573                           	opt stack 0
   574  000084                     	ds	2
   575  000086                     _horaDisparo:
   576                           	opt stack 0
   577  000086                     	ds	2
   578  000088                     _i:
   579                           	opt stack 0
   580  000088                     	ds	2
   581  00008A                     _j:
   582                           	opt stack 0
   583  00008A                     	ds	2
   584  00008C                     _k:
   585                           	opt stack 0
   586  00008C                     	ds	2
   587  00008E                     _mesDisparo:
   588                           	opt stack 0
   589  00008E                     	ds	2
   590  000090                     _minDisparo:
   591                           	opt stack 0
   592  000090                     	ds	2
   593  000092                     _newpass:
   594                           	opt stack 0
   595  000092                     	ds	2
   596  000094                     _segundo:
   597                           	opt stack 0
   598  000094                     	ds	2
   599  000096                     _sensorDisparado:
   600                           	opt stack 0
   601  000096                     	ds	1
   602  000097                     _buffer2:
   603                           	opt stack 0
   604  000097                     	ds	20
   605  0000AB                     _RtccDate:
   606                           	opt stack 0
   607  0000AB                     	ds	4
   608  0000AF                     _RtccTime:
   609                           	opt stack 0
   610  0000AF                     	ds	4
   611                           tblptru	equ	0xFF8
   612                           tblptrh	equ	0xFF7
   613                           tblptrl	equ	0xFF6
   614                           tablat	equ	0xFF5
   615                           postinc0	equ	0xFEE
   616                           wreg	equ	0xFE8
   617                           postdec1	equ	0xFE5
   618                           fsr1l	equ	0xFE1
   619                           
   620                           	psect	dataBANK0
   621  0000C9                     __pdataBANK0:
   622                           	opt stack 0
   623  0000C9                     _anio:
   624                           	opt stack 0
   625  0000C9                     	ds	2
   626  0000CB                     _dia:
   627                           	opt stack 0
   628  0000CB                     	ds	2
   629  0000CD                     _diasem:
   630                           	opt stack 0
   631  0000CD                     	ds	2
   632  0000CF                     _hora:
   633                           	opt stack 0
   634  0000CF                     	ds	2
   635  0000D1                     _mes:
   636                           	opt stack 0
   637  0000D1                     	ds	2
   638  0000D3                     _minuto:
   639                           	opt stack 0
   640  0000D3                     	ds	2
   641  0000D5                     _password:
   642                           	opt stack 0
   643  0000D5                     	ds	2
   644  0000D7                     _key:
   645                           	opt stack 0
   646  0000D7                     	ds	1
   647  0000D8                     _menu:
   648                           	opt stack 0
   649  0000D8                     	ds	1
   650  0000D9                     _state_alarm:
   651                           	opt stack 0
   652  0000D9                     	ds	1
   653                           tblptru	equ	0xFF8
   654                           tblptrh	equ	0xFF7
   655                           tblptrl	equ	0xFF6
   656                           tablat	equ	0xFF5
   657                           postinc0	equ	0xFEE
   658                           wreg	equ	0xFE8
   659                           postdec1	equ	0xFE5
   660                           fsr1l	equ	0xFE1
   661                           
   662                           	psect	cstackBANK0
   663  0000B3                     __pcstackBANK0:
   664                           	opt stack 0
   665  0000B3                     _pow$3044:
   666                           	opt stack 0
   667                           
   668                           ; 3 bytes @ 0x0
   669  0000B3                     	ds	3
   670  0000B6                     _pow$3045:
   671                           	opt stack 0
   672                           
   673                           ; 3 bytes @ 0x3
   674  0000B6                     	ds	3
   675  0000B9                     pow@sign:
   676                           	opt stack 0
   677                           
   678                           ; 1 bytes @ 0x6
   679  0000B9                     	ds	1
   680  0000BA                     pow@yi:
   681                           	opt stack 0
   682                           
   683                           ; 4 bytes @ 0x7
   684  0000BA                     	ds	4
   685  0000BE                     _obtain_pass$3038:
   686                           	opt stack 0
   687  0000BE                     _input_old_pass$3040:
   688                           	opt stack 0
   689  0000BE                     _input_new_pass$3042:
   690                           	opt stack 0
   691                           
   692                           ; 3 bytes @ 0xB
   693  0000BE                     	ds	3
   694  0000C1                     _obtain_pass$3039:
   695                           	opt stack 0
   696  0000C1                     _input_old_pass$3041:
   697                           	opt stack 0
   698  0000C1                     _input_new_pass$3043:
   699                           	opt stack 0
   700                           
   701                           ; 3 bytes @ 0xE
   702  0000C1                     	ds	3
   703  0000C4                     input_new_pass@input:
   704                           	opt stack 0
   705  0000C4                     input_password@pass:
   706                           	opt stack 0
   707  0000C4                     input_old_pass@pass:
   708                           	opt stack 0
   709                           
   710                           ; 2 bytes @ 0x11
   711  0000C4                     	ds	1
   712  0000C5                     input_new_pass@digit:
   713                           	opt stack 0
   714                           
   715                           ; 2 bytes @ 0x12
   716  0000C5                     	ds	1
   717  0000C6                     input_password@input:
   718                           	opt stack 0
   719  0000C6                     input_old_pass@input:
   720                           	opt stack 0
   721                           
   722                           ; 1 bytes @ 0x13
   723  0000C6                     	ds	1
   724  0000C7                     input_password@digit:
   725                           	opt stack 0
   726  0000C7                     input_old_pass@digit:
   727                           	opt stack 0
   728                           
   729                           ; 2 bytes @ 0x14
   730  0000C7                     	ds	2
   731                           tblptru	equ	0xFF8
   732                           tblptrh	equ	0xFF7
   733                           tblptrl	equ	0xFF6
   734                           tablat	equ	0xFF5
   735                           postinc0	equ	0xFEE
   736                           wreg	equ	0xFE8
   737                           postdec1	equ	0xFE5
   738                           fsr1l	equ	0xFE1
   739                           
   740                           	psect	cstackCOMRAM
   741  000001                     __pcstackCOMRAM:
   742                           	opt stack 0
   743  000001                     ??_isdigit:
   744  000001                     ??_lcd_send_nibble:
   745  000001                     ?___wmul:
   746                           	opt stack 0
   747  000001                     ?___awdiv:
   748                           	opt stack 0
   749  000001                     ?___lwdiv:
   750                           	opt stack 0
   751  000001                     ?___ftpack:
   752                           	opt stack 0
   753  000001                     ?_frexp:
   754                           	opt stack 0
   755  000001                     ?___ftneg:
   756                           	opt stack 0
   757  000001                     _is_not_letter$1260:
   758                           	opt stack 0
   759  000001                     Delay100TCYx@unit:
   760                           	opt stack 0
   761  000001                     Delay1KTCYx@unit:
   762                           	opt stack 0
   763  000001                     not_fill_pass@digit:
   764                           	opt stack 0
   765  000001                     checkPass@pass:
   766                           	opt stack 0
   767  000001                     changePass@pass:
   768                           	opt stack 0
   769  000001                     RtccReadDate@pDt:
   770                           	opt stack 0
   771  000001                     RtccReadTime@pTm:
   772                           	opt stack 0
   773  000001                     RtccWriteDate@pDt:
   774                           	opt stack 0
   775  000001                     RtccWriteTime@pTm:
   776                           	opt stack 0
   777  000001                     ___wmul@multiplier:
   778                           	opt stack 0
   779  000001                     ___awdiv@dividend:
   780                           	opt stack 0
   781  000001                     ___lwdiv@dividend:
   782                           	opt stack 0
   783  000001                     ___ftpack@arg:
   784                           	opt stack 0
   785  000001                     ___ftge@ff1:
   786                           	opt stack 0
   787  000001                     ___ftneg@f1:
   788                           	opt stack 0
   789  000001                     frexp@value:
   790                           	opt stack 0
   791                           
   792                           ; 3 bytes @ 0x0
   793  000001                     	ds	1
   794  000002                     lcd_send_nibble@nibble:
   795                           	opt stack 0
   796  000002                     is_not_letter@input:
   797                           	opt stack 0
   798  000002                     _isdigit$2643:
   799                           	opt stack 0
   800                           
   801                           ; 1 bytes @ 0x1
   802  000002                     	ds	1
   803  000003                     lcd_send_byte@n:
   804                           	opt stack 0
   805  000003                     RtccWriteDate@di:
   806                           	opt stack 0
   807  000003                     RtccWriteTime@di:
   808                           	opt stack 0
   809  000003                     isdigit@c:
   810                           	opt stack 0
   811  000003                     review_code@digit:
   812                           	opt stack 0
   813  000003                     ___wmul@multiplicand:
   814                           	opt stack 0
   815  000003                     ___awdiv@divisor:
   816                           	opt stack 0
   817  000003                     ___lwdiv@divisor:
   818                           	opt stack 0
   819  000003                     RtccReadDate@rTD1:
   820                           	opt stack 0
   821  000003                     RtccReadTime@rTD1:
   822                           	opt stack 0
   823                           
   824                           ; 8 bytes @ 0x2
   825  000003                     	ds	1
   826  000004                     lcd_send_byte@address:
   827                           	opt stack 0
   828  000004                     ___ftpack@exp:
   829                           	opt stack 0
   830  000004                     frexp@eptr:
   831                           	opt stack 0
   832  000004                     ___ftge@ff2:
   833                           	opt stack 0
   834                           
   835                           ; 3 bytes @ 0x3
   836  000004                     	ds	1
   837  000005                     lcd_init@i:
   838                           	opt stack 0
   839  000005                     lcd_gotoxy@y:
   840                           	opt stack 0
   841  000005                     lcd_comand@d:
   842                           	opt stack 0
   843  000005                     lcd_setcursor_vb@blink:
   844                           	opt stack 0
   845  000005                     RtccWriteDate@wasOn:
   846                           	opt stack 0
   847  000005                     RtccWriteTime@wasOn:
   848                           	opt stack 0
   849  000005                     ___awdiv@counter:
   850                           	opt stack 0
   851  000005                     ___ftpack@sign:
   852                           	opt stack 0
   853  000005                     review_code@pass:
   854                           	opt stack 0
   855  000005                     ___wmul@product:
   856                           	opt stack 0
   857  000005                     ___lwdiv@quotient:
   858                           	opt stack 0
   859                           
   860                           ; 2 bytes @ 0x4
   861  000005                     	ds	1
   862  000006                     ??___ftpack:
   863  000006                     ??_frexp:
   864  000006                     ??_clear:
   865  000006                     lcd_gotoxy@x:
   866                           	opt stack 0
   867  000006                     lcd_setcursor_vb@visible:
   868                           	opt stack 0
   869  000006                     RtccWriteDate@wasAlrm:
   870                           	opt stack 0
   871  000006                     RtccWriteTime@wasAlrm:
   872                           	opt stack 0
   873  000006                     ___awdiv@sign:
   874                           	opt stack 0
   875                           
   876                           ; 1 bytes @ 0x5
   877  000006                     	ds	1
   878  000007                     ??___ftge:
   879  000007                     lcd_gotoxy@address:
   880                           	opt stack 0
   881  000007                     RtccWriteTime@wasWrEn:
   882                           	opt stack 0
   883  000007                     ___lwdiv@counter:
   884                           	opt stack 0
   885  000007                     RtccWriteDate@tempYear:
   886                           	opt stack 0
   887  000007                     ___awdiv@quotient:
   888                           	opt stack 0
   889                           
   890                           ; 2 bytes @ 0x6
   891  000007                     	ds	1
   892  000008                     ?___lwmod:
   893                           	opt stack 0
   894  000008                     lcd_putc@c:
   895                           	opt stack 0
   896  000008                     next_code@digit:
   897                           	opt stack 0
   898  000008                     RtccWriteTime@tempMinSec:
   899                           	opt stack 0
   900  000008                     ___lwmod@dividend:
   901                           	opt stack 0
   902                           
   903                           ; 2 bytes @ 0x7
   904  000008                     	ds	1
   905  000009                     ?___ftdiv:
   906                           	opt stack 0
   907  000009                     ?___awtoft:
   908                           	opt stack 0
   909  000009                     ?___lbtoft:
   910                           	opt stack 0
   911  000009                     ?___lltoft:
   912                           	opt stack 0
   913  000009                     RtccWriteDate@wasWrEn:
   914                           	opt stack 0
   915  000009                     lcd_putrs@ptr:
   916                           	opt stack 0
   917  000009                     __delay_s@millis:
   918                           	opt stack 0
   919  000009                     ___awtoft@c:
   920                           	opt stack 0
   921  000009                     ___ftdiv@f1:
   922                           	opt stack 0
   923  000009                     ___lltoft@c:
   924                           	opt stack 0
   925                           
   926                           ; 4 bytes @ 0x8
   927  000009                     	ds	1
   928  00000A                     next_code@input:
   929                           	opt stack 0
   930  00000A                     RtccWriteDate@tempDayMonth:
   931                           	opt stack 0
   932  00000A                     RtccWriteTime@tempHourWDay:
   933                           	opt stack 0
   934  00000A                     ___lwmod@divisor:
   935                           	opt stack 0
   936                           
   937                           ; 2 bytes @ 0x9
   938  00000A                     	ds	1
   939  00000B                     ??__delay_s:
   940  00000B                     set_desactive_vision@digit:
   941                           	opt stack 0
   942  00000B                     RtccReadDate@rTD0:
   943                           	opt stack 0
   944  00000B                     RtccReadTime@rTD0:
   945                           	opt stack 0
   946                           
   947                           ; 8 bytes @ 0xA
   948  00000B                     	ds	1
   949  00000C                     ??_next_code:
   950  00000C                     ___awtoft@sign:
   951                           	opt stack 0
   952  00000C                     ___lbtoft@c:
   953                           	opt stack 0
   954  00000C                     ___lwmod@counter:
   955                           	opt stack 0
   956  00000C                     __delay_s@it:
   957                           	opt stack 0
   958  00000C                     RtccWriteDate@tempHourWDay:
   959                           	opt stack 0
   960  00000C                     ___ftdiv@f2:
   961                           	opt stack 0
   962                           
   963                           ; 3 bytes @ 0xB
   964  00000C                     	ds	1
   965  00000D                     ??___lltoft:
   966  00000D                     ?_sprintf:
   967                           	opt stack 0
   968  00000D                     ?___ftmul:
   969                           	opt stack 0
   970  00000D                     sprintf@sp:
   971                           	opt stack 0
   972  00000D                     ___ftmul@f1:
   973                           	opt stack 0
   974                           
   975                           ; 3 bytes @ 0xC
   976  00000D                     	ds	1
   977  00000E                     __delay_s@index:
   978                           	opt stack 0
   979                           
   980                           ; 2 bytes @ 0xD
   981  00000E                     	ds	1
   982  00000F                     ??___ftdiv:
   983  00000F                     sprintf@f:
   984                           	opt stack 0
   985                           
   986                           ; 2 bytes @ 0xE
   987  00000F                     	ds	1
   988  000010                     ___ftmul@f2:
   989                           	opt stack 0
   990                           
   991                           ; 3 bytes @ 0xF
   992  000010                     	ds	1
   993  000011                     ___lltoft@exp:
   994                           	opt stack 0
   995                           
   996                           ; 1 bytes @ 0x10
   997  000011                     	ds	1
   998  000012                     ___ftdiv@cntr:
   999                           	opt stack 0
  1000                           
  1001                           ; 1 bytes @ 0x11
  1002  000012                     	ds	1
  1003  000013                     ??___ftmul:
  1004  000013                     dispararSensor@sensor:
  1005                           	opt stack 0
  1006  000013                     ___ftdiv@f3:
  1007                           	opt stack 0
  1008                           
  1009                           ; 3 bytes @ 0x12
  1010  000013                     	ds	2
  1011  000015                     
  1012                           ; 0 bytes @ 0x14
  1013  000015                     	ds	1
  1014  000016                     ___ftdiv@exp:
  1015                           	opt stack 0
  1016  000016                     ___ftmul@exp:
  1017                           	opt stack 0
  1018                           
  1019                           ; 1 bytes @ 0x15
  1020  000016                     	ds	1
  1021  000017                     ??_sprintf:
  1022  000017                     ___ftdiv@sign:
  1023                           	opt stack 0
  1024  000017                     ___ftmul@f3_as_product:
  1025                           	opt stack 0
  1026                           
  1027                           ; 3 bytes @ 0x16
  1028  000017                     	ds	3
  1029  00001A                     ___ftmul@cntr:
  1030                           	opt stack 0
  1031                           
  1032                           ; 1 bytes @ 0x19
  1033  00001A                     	ds	1
  1034  00001B                     ___ftmul@sign:
  1035                           	opt stack 0
  1036  00001B                     sprintf@ap:
  1037                           	opt stack 0
  1038                           
  1039                           ; 2 bytes @ 0x1A
  1040  00001B                     	ds	1
  1041  00001C                     ?___ftadd:
  1042                           	opt stack 0
  1043  00001C                     ___ftadd@f1:
  1044                           	opt stack 0
  1045                           
  1046                           ; 3 bytes @ 0x1B
  1047  00001C                     	ds	1
  1048  00001D                     sprintf@flag:
  1049                           	opt stack 0
  1050                           
  1051                           ; 1 bytes @ 0x1C
  1052  00001D                     	ds	1
  1053  00001E                     sprintf@val:
  1054                           	opt stack 0
  1055                           
  1056                           ; 2 bytes @ 0x1D
  1057  00001E                     	ds	1
  1058  00001F                     ___ftadd@f2:
  1059                           	opt stack 0
  1060                           
  1061                           ; 3 bytes @ 0x1E
  1062  00001F                     	ds	1
  1063  000020                     sprintf@prec:
  1064                           	opt stack 0
  1065                           
  1066                           ; 1 bytes @ 0x1F
  1067  000020                     	ds	1
  1068  000021                     sprintf@width:
  1069                           	opt stack 0
  1070                           
  1071                           ; 2 bytes @ 0x20
  1072  000021                     	ds	1
  1073  000022                     ??___ftadd:
  1074                           
  1075                           ; 0 bytes @ 0x21
  1076  000022                     	ds	1
  1077  000023                     sprintf@c:
  1078                           	opt stack 0
  1079                           
  1080                           ; 1 bytes @ 0x22
  1081  000023                     	ds	1
  1082  000024                     ??_read_keyboard:
  1083  000024                     
  1084                           ; 0 bytes @ 0x23
  1085  000024                     	ds	1
  1086  000025                     twinkle@input:
  1087                           	opt stack 0
  1088  000025                     ver_info@input:
  1089                           	opt stack 0
  1090  000025                     ___ftadd@sign:
  1091                           	opt stack 0
  1092                           
  1093                           ; 1 bytes @ 0x24
  1094  000025                     	ds	1
  1095  000026                     ___ftadd@exp2:
  1096                           	opt stack 0
  1097                           
  1098                           ; 1 bytes @ 0x25
  1099  000026                     	ds	1
  1100  000027                     ___ftadd@exp1:
  1101                           	opt stack 0
  1102                           
  1103                           ; 1 bytes @ 0x26
  1104  000027                     	ds	1
  1105  000028                     ?___ftsub:
  1106                           	opt stack 0
  1107  000028                     ?_eval_poly:
  1108                           	opt stack 0
  1109  000028                     ?___fttol:
  1110                           	opt stack 0
  1111  000028                     ___ftsub@f1:
  1112                           	opt stack 0
  1113  000028                     ___fttol@f1:
  1114                           	opt stack 0
  1115  000028                     eval_poly@x:
  1116                           	opt stack 0
  1117                           
  1118                           ; 3 bytes @ 0x27
  1119  000028                     	ds	3
  1120  00002B                     eval_poly@d:
  1121                           	opt stack 0
  1122  00002B                     ___ftsub@f2:
  1123                           	opt stack 0
  1124                           
  1125                           ; 3 bytes @ 0x2A
  1126  00002B                     	ds	1
  1127  00002C                     ??___fttol:
  1128                           
  1129                           ; 0 bytes @ 0x2B
  1130  00002C                     	ds	1
  1131  00002D                     eval_poly@n:
  1132                           	opt stack 0
  1133                           
  1134                           ; 2 bytes @ 0x2C
  1135  00002D                     	ds	1
  1136  00002E                     
  1137                           ; 0 bytes @ 0x2D
  1138  00002E                     	ds	1
  1139  00002F                     ??_eval_poly:
  1140                           
  1141                           ; 0 bytes @ 0x2E
  1142  00002F                     	ds	2
  1143  000031                     ___fttol@sign1:
  1144                           	opt stack 0
  1145  000031                     eval_poly@res:
  1146                           	opt stack 0
  1147                           
  1148                           ; 3 bytes @ 0x30
  1149  000031                     	ds	1
  1150  000032                     ___fttol@lval:
  1151                           	opt stack 0
  1152                           
  1153                           ; 4 bytes @ 0x31
  1154  000032                     	ds	2
  1155  000034                     ?_log:
  1156                           	opt stack 0
  1157  000034                     ?_ldexp:
  1158                           	opt stack 0
  1159  000034                     ldexp@value:
  1160                           	opt stack 0
  1161  000034                     log@x:
  1162                           	opt stack 0
  1163                           
  1164                           ; 3 bytes @ 0x33
  1165  000034                     	ds	2
  1166  000036                     ___fttol@exp1:
  1167                           	opt stack 0
  1168                           
  1169                           ; 1 bytes @ 0x35
  1170  000036                     	ds	1
  1171  000037                     ?___altoft:
  1172                           	opt stack 0
  1173  000037                     ldexp@newexp:
  1174                           	opt stack 0
  1175  000037                     log@exponent:
  1176                           	opt stack 0
  1177  000037                     ___altoft@c:
  1178                           	opt stack 0
  1179                           
  1180                           ; 4 bytes @ 0x36
  1181  000037                     	ds	2
  1182  000039                     ??_ldexp:
  1183                           
  1184                           ; 0 bytes @ 0x38
  1185  000039                     	ds	2
  1186  00003B                     ??___altoft:
  1187                           
  1188                           ; 0 bytes @ 0x3A
  1189  00003B                     	ds	4
  1190  00003F                     ___altoft@exp:
  1191                           	opt stack 0
  1192                           
  1193                           ; 1 bytes @ 0x3E
  1194  00003F                     	ds	1
  1195  000040                     ___altoft@sign:
  1196                           	opt stack 0
  1197                           
  1198                           ; 1 bytes @ 0x3F
  1199  000040                     	ds	1
  1200  000041                     ?_floor:
  1201                           	opt stack 0
  1202  000041                     floor@x:
  1203                           	opt stack 0
  1204                           
  1205                           ; 3 bytes @ 0x40
  1206  000041                     	ds	3
  1207  000044                     floor@i:
  1208                           	opt stack 0
  1209                           
  1210                           ; 3 bytes @ 0x43
  1211  000044                     	ds	3
  1212  000047                     floor@expon:
  1213                           	opt stack 0
  1214                           
  1215                           ; 2 bytes @ 0x46
  1216  000047                     	ds	2
  1217  000049                     ?_exp:
  1218                           	opt stack 0
  1219  000049                     exp@x:
  1220                           	opt stack 0
  1221                           
  1222                           ; 3 bytes @ 0x48
  1223  000049                     	ds	3
  1224  00004C                     _exp$3046:
  1225                           	opt stack 0
  1226                           
  1227                           ; 3 bytes @ 0x4B
  1228  00004C                     	ds	3
  1229  00004F                     exp@exponent:
  1230                           	opt stack 0
  1231                           
  1232                           ; 2 bytes @ 0x4E
  1233  00004F                     	ds	2
  1234  000051                     exp@sign:
  1235                           	opt stack 0
  1236                           
  1237                           ; 1 bytes @ 0x50
  1238  000051                     	ds	1
  1239  000052                     ?_pow:
  1240                           	opt stack 0
  1241  000052                     pow@x:
  1242                           	opt stack 0
  1243                           
  1244                           ; 3 bytes @ 0x51
  1245  000052                     	ds	3
  1246  000055                     pow@y:
  1247                           	opt stack 0
  1248                           
  1249                           ; 3 bytes @ 0x54
  1250  000055                     	ds	3
  1251  000058                     ??_input_old_pass:
  1252  000058                     ??_input_new_pass:
  1253  000058                     ?_obtain_pass:
  1254                           	opt stack 0
  1255  000058                     obtain_pass@pass:
  1256                           	opt stack 0
  1257                           
  1258                           ; 2 bytes @ 0x57
  1259  000058                     	ds	2
  1260  00005A                     obtain_pass@input:
  1261                           	opt stack 0
  1262  00005A                     ver_opcion_cambio@old_correct:
  1263                           	opt stack 0
  1264                           
  1265                           ; 1 bytes @ 0x59
  1266  00005A                     	ds	1
  1267  00005B                     ver_opcion_cambio@input:
  1268                           	opt stack 0
  1269  00005B                     obtain_pass@digit:
  1270                           	opt stack 0
  1271                           
  1272                           ; 2 bytes @ 0x5A
  1273  00005B                     	ds	1
  1274  00005C                     
  1275                           ; 0 bytes @ 0x5B
  1276  00005C                     	ds	1
  1277  00005D                     ??_obtain_pass:
  1278                           
  1279                           ; 0 bytes @ 0x5C
  1280  00005D                     	ds	2
  1281  00005F                     ??_main:
  1282  00005F                     
  1283                           ; 0 bytes @ 0x5E
  1284  00005F                     	ds	1
  1285                           tblptru	equ	0xFF8
  1286                           tblptrh	equ	0xFF7
  1287                           tblptrl	equ	0xFF6
  1288                           tablat	equ	0xFF5
  1289                           postinc0	equ	0xFEE
  1290                           wreg	equ	0xFE8
  1291                           postdec1	equ	0xFE5
  1292                           fsr1l	equ	0xFE1
  1293                           
  1294 ;;
  1295 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1296 ;;
  1297 ;; *************** function _main *****************
  1298 ;; Defined at:
  1299 ;;		line 88 in file "main.c"
  1300 ;; Parameters:    Size  Location     Type
  1301 ;;		None
  1302 ;; Auto vars:     Size  Location     Type
  1303 ;;		None
  1304 ;; Return value:  Size  Location     Type
  1305 ;;                  2  130[None  ] int 
  1306 ;; Registers used:
  1307 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1308 ;; Tracked objects:
  1309 ;;		On entry : 0/0
  1310 ;;		On exit  : 0/0
  1311 ;;		Unchanged: 0/0
  1312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1315 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1316 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1317 ;;Total ram usage:        1 bytes
  1318 ;; Hardware stack levels required when called:    9
  1319 ;; This function calls:
  1320 ;;		_Read_RTC
  1321 ;;		_Setup
  1322 ;;		_caratula
  1323 ;;		_select_menu
  1324 ;;		_set_vision
  1325 ;; This function is called by:
  1326 ;;		Startup code after reset
  1327 ;; This function uses a non-reentrant model
  1328 ;;
  1329                           
  1330                           	psect	text0
  1331  003626                     __ptext0:
  1332                           	opt stack 0
  1333  003626                     _main:
  1334                           	opt stack 22
  1335                           
  1336                           ;main.c: 89: Setup();
  1337                           
  1338                           ; BSR set to: 15
  1339                           ;incstack = 0
  1340  003626  EC3C  F01A         	call	_Setup	;wreg free
  1341                           
  1342                           ;main.c: 90: caratula();
  1343  00362A  EC57  F01C         	call	_caratula	;wreg free
  1344  00362E  D000               	goto	l4961
  1345  003630                     l4961:
  1346                           
  1347                           ;main.c: 92: Read_RTC();
  1348  003630  EC89  F00E         	call	_Read_RTC	;wreg free
  1349                           
  1350                           ;main.c: 93: caratula();
  1351  003634  EC57  F01C         	call	_caratula	;wreg free
  1352                           
  1353                           ;main.c: 95: select_menu();
  1354  003638  EC85  F015         	call	_select_menu	;wreg free
  1355                           
  1356                           ;main.c: 96: set_vision();
  1357  00363C  ECB0  F018         	call	_set_vision	;wreg free
  1358                           
  1359                           ;main.c: 97: _delay((unsigned long)((98)*(8000000/4000.0)));
  1360  003640  0EFF               	movlw	255
  1361  003642  6E5F               	movwf	??_main& (0+255),c
  1362  003644  0E8A               	movlw	138
  1363  003646                     u4577:
  1364  003646  2EE8               	decfsz	wreg,f,c
  1365  003648  D7FE               	goto	u4577
  1366  00364A  2E5F               	decfsz	??_main& (0+255),f,c
  1367  00364C  D7FC               	goto	u4577
  1368  00364E  D000               	nop2	
  1369  003650  D7EF               	goto	l4961
  1370                           
  1371                           ;main.c: 98: }
  1372                           ;main.c: 100: return 0;
  1373                           ;	Return value of _main is never used
  1374  003652  EF00  F000         	goto	start
  1375  003656                     __end_of_main:
  1376                           	opt stack 0
  1377                           tblptru	equ	0xFF8
  1378                           tblptrh	equ	0xFF7
  1379                           tblptrl	equ	0xFF6
  1380                           tablat	equ	0xFF5
  1381                           postinc0	equ	0xFEE
  1382                           wreg	equ	0xFE8
  1383                           postdec1	equ	0xFE5
  1384                           fsr1l	equ	0xFE1
  1385                           
  1386 ;; *************** function _set_vision *****************
  1387 ;; Defined at:
  1388 ;;		line 115 in file "lcd_vision.c"
  1389 ;; Parameters:    Size  Location     Type
  1390 ;;		None
  1391 ;; Auto vars:     Size  Location     Type
  1392 ;;		None
  1393 ;; Return value:  Size  Location     Type
  1394 ;;		None               void
  1395 ;; Registers used:
  1396 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1397 ;; Tracked objects:
  1398 ;;		On entry : 0/0
  1399 ;;		On exit  : 0/0
  1400 ;;		Unchanged: 0/0
  1401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1405 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1406 ;;Total ram usage:        0 bytes
  1407 ;; Hardware stack levels used:    1
  1408 ;; Hardware stack levels required when called:    7
  1409 ;; This function calls:
  1410 ;;		_clear
  1411 ;;		_input_password
  1412 ;;		_lcd_gotoxy
  1413 ;;		_lcd_putrs
  1414 ;;		_twinkle
  1415 ;;		_write_Date
  1416 ;; This function is called by:
  1417 ;;		_main
  1418 ;; This function uses a non-reentrant model
  1419 ;;
  1420                           
  1421                           	psect	text1
  1422  003160                     __ptext1:
  1423                           	opt stack 0
  1424  003160                     _set_vision:
  1425                           	opt stack 23
  1426                           
  1427                           ;lcd_vision.c: 116: clear();
  1428                           
  1429                           ;incstack = 0
  1430  003160  EC04  F01C         	call	_clear	;wreg free
  1431                           
  1432                           ;lcd_vision.c: 117: write_Date();
  1433  003164  ECC1  F017         	call	_write_Date	;wreg free
  1434                           
  1435                           ;lcd_vision.c: 118: lcd_gotoxy(1,1);
  1436  003168  0E01               	movlw	1
  1437  00316A  6E05               	movwf	lcd_gotoxy@y,c
  1438  00316C  0E01               	movlw	1
  1439  00316E  ECD3  F01B         	call	_lcd_gotoxy
  1440                           
  1441                           ;lcd_vision.c: 120: switch (state_alarm){
  1442  003172  D01F               	goto	l4955
  1443  003174                     l4937:
  1444  003174  0EDF               	movlw	low STR_16
  1445  003176  6E09               	movwf	lcd_putrs@ptr,c
  1446  003178  0E0F               	movlw	high STR_16
  1447  00317A  6E0A               	movwf	lcd_putrs@ptr+1,c
  1448  00317C  ECA0  F019         	call	_lcd_putrs	;wreg free
  1449                           
  1450                           ;lcd_vision.c: 122: LATBbits.LATB0 = 1;;
  1451  003180  808A               	bsf	3978,0,c	;volatile
  1452                           
  1453                           ;lcd_vision.c: 123: input_password();
  1454  003182  ECB0  F016         	call	_input_password	;wreg free
  1455                           
  1456                           ;lcd_vision.c: 124: break;
  1457  003186  0012               	return	
  1458  003188                     l4943:
  1459  003188  0EDB               	movlw	low STR_17
  1460  00318A  6E09               	movwf	lcd_putrs@ptr,c
  1461  00318C  0E0F               	movlw	high STR_17
  1462  00318E  6E0A               	movwf	lcd_putrs@ptr+1,c
  1463  003190  ECA0  F019         	call	_lcd_putrs	;wreg free
  1464                           
  1465                           ;lcd_vision.c: 127: LATBbits.LATB0 = 0;;
  1466  003194  908A               	bcf	3978,0,c	;volatile
  1467                           
  1468                           ;lcd_vision.c: 128: input_password();
  1469  003196  ECB0  F016         	call	_input_password	;wreg free
  1470                           
  1471                           ;lcd_vision.c: 130: break;
  1472  00319A  0012               	return	
  1473  00319C                     l4949:
  1474  00319C  0EC8               	movlw	low STR_18
  1475  00319E  6E09               	movwf	lcd_putrs@ptr,c
  1476  0031A0  0E0F               	movlw	high STR_18
  1477  0031A2  6E0A               	movwf	lcd_putrs@ptr+1,c
  1478  0031A4  ECA0  F019         	call	_lcd_putrs	;wreg free
  1479                           
  1480                           ;lcd_vision.c: 132: twinkle();
  1481  0031A8  ECE3  F018         	call	_twinkle	;wreg free
  1482                           
  1483                           ;lcd_vision.c: 133: input_password();
  1484  0031AC  ECB0  F016         	call	_input_password	;wreg free
  1485                           
  1486                           ;lcd_vision.c: 134: }
  1487  0031B0  0012               	return	
  1488  0031B2                     l4955:
  1489  0031B2  0100               	movlb	0	; () banked
  1490  0031B4  51D9               	movf	_state_alarm& (0+255),w,b
  1491                           
  1492                           ; Switch size 1, requested type "space"
  1493                           ; Number of cases is 2, Range of values is 0 to 1
  1494                           ; switch strategies available:
  1495                           ; Name         Instructions Cycles
  1496                           ; simple_byte            7     4 (average)
  1497                           ;	Chosen strategy is simple_byte
  1498  0031B6  0A00               	xorlw	0	; case 0
  1499  0031B8  B4D8               	btfsc	status,2,c
  1500  0031BA  D7DC               	goto	l4937
  1501  0031BC  0A01               	xorlw	1	; case 1
  1502  0031BE  B4D8               	btfsc	status,2,c
  1503  0031C0  D7E3               	goto	l4943
  1504  0031C2  D7EC               	goto	l4949
  1505                           
  1506                           ; BSR set to: 0
  1507  0031C4  0012               	return		;funcret
  1508  0031C6                     __end_of_set_vision:
  1509                           	opt stack 0
  1510                           tblptru	equ	0xFF8
  1511                           tblptrh	equ	0xFF7
  1512                           tblptrl	equ	0xFF6
  1513                           tablat	equ	0xFF5
  1514                           postinc0	equ	0xFEE
  1515                           wreg	equ	0xFE8
  1516                           postdec1	equ	0xFE5
  1517                           fsr1l	equ	0xFE1
  1518                           status	equ	0xFD8
  1519                           
  1520 ;; *************** function _write_Date *****************
  1521 ;; Defined at:
  1522 ;;		line 12 in file "lcd_vision.c"
  1523 ;; Parameters:    Size  Location     Type
  1524 ;;		None
  1525 ;; Auto vars:     Size  Location     Type
  1526 ;;		None
  1527 ;; Return value:  Size  Location     Type
  1528 ;;		None               void
  1529 ;; Registers used:
  1530 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1531 ;; Tracked objects:
  1532 ;;		On entry : 0/0
  1533 ;;		On exit  : 0/0
  1534 ;;		Unchanged: 0/0
  1535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1539 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1540 ;;Total ram usage:        0 bytes
  1541 ;; Hardware stack levels used:    1
  1542 ;; Hardware stack levels required when called:    5
  1543 ;; This function calls:
  1544 ;;		_lcd_gotoxy
  1545 ;;		_lcd_putrs
  1546 ;;		_sprintf
  1547 ;; This function is called by:
  1548 ;;		_set_vision
  1549 ;; This function uses a non-reentrant model
  1550 ;;
  1551                           
  1552                           	psect	text2
  1553  002F82                     __ptext2:
  1554                           	opt stack 0
  1555  002F82                     _write_Date:
  1556                           	opt stack 24
  1557                           
  1558                           ;lcd_vision.c: 13: lcd_gotoxy(9,1);
  1559                           
  1560                           ;incstack = 0
  1561  002F82  0E01               	movlw	1
  1562  002F84  6E05               	movwf	lcd_gotoxy@y,c
  1563  002F86  0E09               	movlw	9
  1564  002F88  ECD3  F01B         	call	_lcd_gotoxy
  1565                           
  1566                           ;lcd_vision.c: 14: sprintf(buffer2,"%02u/%02u/%02u",dia,mes,anio);
  1567  002F8C  0E97               	movlw	low _buffer2
  1568  002F8E  6E0D               	movwf	sprintf@sp,c
  1569  002F90  0E00               	movlw	high _buffer2
  1570  002F92  6E0E               	movwf	sprintf@sp+1,c
  1571  002F94  0E67               	movlw	low STR_11
  1572  002F96  6E0F               	movwf	sprintf@f,c
  1573  002F98  0E0F               	movlw	high STR_11
  1574  002F9A  6E10               	movwf	sprintf@f+1,c
  1575  002F9C  C0CB  F011         	movff	_dia,?_sprintf+4
  1576  002FA0  C0CC  F012         	movff	_dia+1,?_sprintf+5
  1577  002FA4  C0D1  F013         	movff	_mes,?_sprintf+6
  1578  002FA8  C0D2  F014         	movff	_mes+1,?_sprintf+7
  1579  002FAC  C0C9  F015         	movff	_anio,?_sprintf+8
  1580  002FB0  C0CA  F016         	movff	_anio+1,?_sprintf+9
  1581  002FB4  EC4E  F009         	call	_sprintf	;wreg free
  1582                           
  1583                           ;lcd_vision.c: 15: lcd_putrs(buffer2);
  1584  002FB8  0E97               	movlw	low _buffer2
  1585  002FBA  6E09               	movwf	lcd_putrs@ptr,c
  1586  002FBC  0E00               	movlw	high _buffer2
  1587  002FBE  6E0A               	movwf	lcd_putrs@ptr+1,c
  1588  002FC0  ECA0  F019         	call	_lcd_putrs	;wreg free
  1589                           
  1590                           ;lcd_vision.c: 16: sprintf(buffer2,"%02u:%02u",hora,minuto);
  1591  002FC4  0E97               	movlw	low _buffer2
  1592  002FC6  6E0D               	movwf	sprintf@sp,c
  1593  002FC8  0E00               	movlw	high _buffer2
  1594  002FCA  6E0E               	movwf	sprintf@sp+1,c
  1595  002FCC  0EB5               	movlw	low STR_12
  1596  002FCE  6E0F               	movwf	sprintf@f,c
  1597  002FD0  0E0F               	movlw	high STR_12
  1598  002FD2  6E10               	movwf	sprintf@f+1,c
  1599  002FD4  C0CF  F011         	movff	_hora,?_sprintf+4
  1600  002FD8  C0D0  F012         	movff	_hora+1,?_sprintf+5
  1601  002FDC  C0D3  F013         	movff	_minuto,?_sprintf+6
  1602  002FE0  C0D4  F014         	movff	_minuto+1,?_sprintf+7
  1603  002FE4  EC4E  F009         	call	_sprintf	;wreg free
  1604                           
  1605                           ;lcd_vision.c: 17: lcd_gotoxy(1,2);
  1606  002FE8  0E02               	movlw	2
  1607  002FEA  6E05               	movwf	lcd_gotoxy@y,c
  1608  002FEC  0E01               	movlw	1
  1609  002FEE  ECD3  F01B         	call	_lcd_gotoxy
  1610                           
  1611                           ;lcd_vision.c: 18: lcd_putrs(buffer2);
  1612  002FF2  0E97               	movlw	low _buffer2
  1613  002FF4  6E09               	movwf	lcd_putrs@ptr,c
  1614  002FF6  0E00               	movlw	high _buffer2
  1615  002FF8  6E0A               	movwf	lcd_putrs@ptr+1,c
  1616  002FFA  ECA0  F019         	call	_lcd_putrs	;wreg free
  1617  002FFE  0012               	return		;funcret
  1618  003000                     __end_of_write_Date:
  1619                           	opt stack 0
  1620                           tblptru	equ	0xFF8
  1621                           tblptrh	equ	0xFF7
  1622                           tblptrl	equ	0xFF6
  1623                           tablat	equ	0xFF5
  1624                           postinc0	equ	0xFEE
  1625                           wreg	equ	0xFE8
  1626                           postdec1	equ	0xFE5
  1627                           fsr1l	equ	0xFE1
  1628                           status	equ	0xFD8
  1629                           
  1630 ;; *************** function _twinkle *****************
  1631 ;; Defined at:
  1632 ;;		line 74 in file "lcd_vision.c"
  1633 ;; Parameters:    Size  Location     Type
  1634 ;;		None
  1635 ;; Auto vars:     Size  Location     Type
  1636 ;;  input           1   36[COMRAM] unsigned char 
  1637 ;; Return value:  Size  Location     Type
  1638 ;;		None               void
  1639 ;; Registers used:
  1640 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1641 ;; Tracked objects:
  1642 ;;		On entry : 0/0
  1643 ;;		On exit  : 0/0
  1644 ;;		Unchanged: 0/0
  1645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1647 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1649 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1650 ;;Total ram usage:        1 bytes
  1651 ;; Hardware stack levels used:    1
  1652 ;; Hardware stack levels required when called:    6
  1653 ;; This function calls:
  1654 ;;		__delay_s
  1655 ;;		_clear_keyboard
  1656 ;;		_lcd_gotoxy
  1657 ;;		_lcd_putrs
  1658 ;;		_read_keyboard
  1659 ;; This function is called by:
  1660 ;;		_set_vision
  1661 ;; This function uses a non-reentrant model
  1662 ;;
  1663                           
  1664                           	psect	text3
  1665  0031C6                     __ptext3:
  1666                           	opt stack 0
  1667  0031C6                     _twinkle:
  1668                           	opt stack 23
  1669                           
  1670                           ;lcd_vision.c: 75: char input = 1;
  1671                           
  1672                           ;incstack = 0
  1673  0031C6  0E01               	movlw	1
  1674  0031C8  D028               	goto	L1
  1675  0031CA                     l4765:
  1676                           
  1677                           ;lcd_vision.c: 78: _delay_s(200);
  1678  0031CA  0E00               	movlw	0
  1679  0031CC  6E0A               	movwf	__delay_s@millis+1,c
  1680  0031CE  0EC8               	movlw	200
  1681  0031D0  6E09               	movwf	__delay_s@millis,c
  1682  0031D2  EC74  F019         	call	__delay_s	;wreg free
  1683                           
  1684                           ;lcd_vision.c: 79: lcd_gotoxy(7,2);
  1685  0031D6  0E02               	movlw	2
  1686  0031D8  6E05               	movwf	lcd_gotoxy@y,c
  1687  0031DA  0E07               	movlw	7
  1688  0031DC  ECD3  F01B         	call	_lcd_gotoxy
  1689                           
  1690                           ;lcd_vision.c: 80: LATBbits.LATB1 = 0;;
  1691  0031E0  928A               	bcf	3978,1,c	;volatile
  1692                           
  1693                           ;lcd_vision.c: 81: LATBbits.LATB0 = 1;;
  1694  0031E2  808A               	bsf	3978,0,c	;volatile
  1695                           
  1696                           ;lcd_vision.c: 82: lcd_putrs("WARNING!!!");
  1697  0031E4  0EAA               	movlw	low STR_13
  1698  0031E6  6E09               	movwf	lcd_putrs@ptr,c
  1699  0031E8  0E0F               	movlw	high STR_13
  1700  0031EA  6E0A               	movwf	lcd_putrs@ptr+1,c
  1701  0031EC  ECA0  F019         	call	_lcd_putrs	;wreg free
  1702                           
  1703                           ;lcd_vision.c: 83: _delay_s(200);
  1704  0031F0  0E00               	movlw	0
  1705  0031F2  6E0A               	movwf	__delay_s@millis+1,c
  1706  0031F4  0EC8               	movlw	200
  1707  0031F6  6E09               	movwf	__delay_s@millis,c
  1708  0031F8  EC74  F019         	call	__delay_s	;wreg free
  1709                           
  1710                           ;lcd_vision.c: 84: LATBbits.LATB0 = 0;;
  1711  0031FC  908A               	bcf	3978,0,c	;volatile
  1712                           
  1713                           ;lcd_vision.c: 85: LATBbits.LATB1 = 1;;
  1714  0031FE  828A               	bsf	3978,1,c	;volatile
  1715                           
  1716                           ;lcd_vision.c: 86: lcd_gotoxy(7,2);
  1717  003200  0E02               	movlw	2
  1718  003202  6E05               	movwf	lcd_gotoxy@y,c
  1719  003204  0E07               	movlw	7
  1720  003206  ECD3  F01B         	call	_lcd_gotoxy
  1721                           
  1722                           ;lcd_vision.c: 87: lcd_putrs("          ");
  1723  00320A  0E9F               	movlw	low STR_14
  1724  00320C  6E09               	movwf	lcd_putrs@ptr,c
  1725  00320E  0E0F               	movlw	high STR_14
  1726  003210  6E0A               	movwf	lcd_putrs@ptr+1,c
  1727  003212  ECA0  F019         	call	_lcd_putrs	;wreg free
  1728                           
  1729                           ;lcd_vision.c: 88: input = read_keyboard();
  1730  003216  ECF2  F007         	call	_read_keyboard	;wreg free
  1731  00321A                     L1:
  1732  00321A  6E25               	movwf	twinkle@input,c
  1733  00321C  D000               	goto	l4785
  1734  00321E                     l4785:
  1735  00321E  0E10               	movlw	16
  1736  003220  1825               	xorwf	twinkle@input,w,c
  1737  003222  A4D8               	btfss	status,2,c
  1738  003224  D7D2               	goto	l4765
  1739                           
  1740                           ;lcd_vision.c: 89: }
  1741                           ;lcd_vision.c: 90: clear_keyboard();
  1742  003226  EC53  F01C         	call	_clear_keyboard	;wreg free
  1743  00322A  0012               	return		;funcret
  1744  00322C                     __end_of_twinkle:
  1745                           	opt stack 0
  1746                           tblptru	equ	0xFF8
  1747                           tblptrh	equ	0xFF7
  1748                           tblptrl	equ	0xFF6
  1749                           tablat	equ	0xFF5
  1750                           postinc0	equ	0xFEE
  1751                           wreg	equ	0xFE8
  1752                           postdec1	equ	0xFE5
  1753                           fsr1l	equ	0xFE1
  1754                           status	equ	0xFD8
  1755                           
  1756 ;; *************** function _input_password *****************
  1757 ;; Defined at:
  1758 ;;		line 100 in file "lcd_vision.c"
  1759 ;; Parameters:    Size  Location     Type
  1760 ;;		None
  1761 ;; Auto vars:     Size  Location     Type
  1762 ;;  digit           2   20[BANK0 ] short 
  1763 ;;  pass            2   17[BANK0 ] int 
  1764 ;;  input           1   19[BANK0 ] unsigned char 
  1765 ;; Return value:  Size  Location     Type
  1766 ;;		None               void
  1767 ;; Registers used:
  1768 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1769 ;; Tracked objects:
  1770 ;;		On entry : 0/0
  1771 ;;		On exit  : 0/0
  1772 ;;		Unchanged: 0/0
  1773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1775 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1777 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1778 ;;Total ram usage:        5 bytes
  1779 ;; Hardware stack levels used:    1
  1780 ;; Hardware stack levels required when called:    6
  1781 ;; This function calls:
  1782 ;;		_is_not_letter
  1783 ;;		_not_fill_pass
  1784 ;;		_obtain_pass
  1785 ;;		_read_keyboard
  1786 ;;		_review_code
  1787 ;;		_set_desactive_vision
  1788 ;; This function is called by:
  1789 ;;		_set_vision
  1790 ;; This function uses a non-reentrant model
  1791 ;;
  1792                           
  1793                           	psect	text4
  1794  002D60                     __ptext4:
  1795                           	opt stack 0
  1796  002D60                     _input_password:
  1797                           	opt stack 23
  1798                           
  1799                           ;lcd_vision.c: 101: short digit = 12;
  1800                           
  1801                           ;incstack = 0
  1802  002D60  0E00               	movlw	0
  1803  002D62  0100               	movlb	0	; () banked
  1804  002D64  6FC8               	movwf	(input_password@digit+1)& (0+255),b
  1805  002D66  0E0C               	movlw	12
  1806  002D68  6FC7               	movwf	input_password@digit& (0+255),b
  1807                           
  1808                           ;lcd_vision.c: 102: int pass = 0;
  1809  002D6A  0E00               	movlw	0
  1810  002D6C  0100               	movlb	0	; () banked
  1811  002D6E  6FC5               	movwf	(input_password@pass+1)& (0+255),b
  1812  002D70  0E00               	movlw	0
  1813  002D72  6FC4               	movwf	input_password@pass& (0+255),b
  1814                           
  1815                           ; BSR set to: 0
  1816                           ;lcd_vision.c: 104: set_desactive_vision(digit);
  1817  002D74  C0C7  F00B         	movff	input_password@digit,set_desactive_vision@digit
  1818  002D78  C0C8  F00C         	movff	input_password@digit+1,set_desactive_vision@digit+1
  1819  002D7C  EC72  F01B         	call	_set_desactive_vision	;wreg free
  1820                           
  1821                           ;lcd_vision.c: 105: char input = read_keyboard();
  1822  002D80  ECF2  F007         	call	_read_keyboard	;wreg free
  1823  002D84  0100               	movlb	0	; () banked
  1824  002D86  6FC6               	movwf	input_password@input& (0+255),b
  1825                           
  1826                           ;lcd_vision.c: 107: while(is_not_letter(input) && not_fill_pass(digit)){
  1827  002D88  D01F               	goto	l4801
  1828  002D8A                     l4795:
  1829                           
  1830                           ;lcd_vision.c: 108: pass = obtain_pass(pass,input,&digit);
  1831  002D8A  C0C4  F058         	movff	input_password@pass,obtain_pass@pass
  1832  002D8E  C0C5  F059         	movff	input_password@pass+1,obtain_pass@pass+1
  1833  002D92  C0C6  F05A         	movff	input_password@input,obtain_pass@input
  1834  002D96  0EC7               	movlw	low input_password@digit
  1835  002D98  6E5B               	movwf	obtain_pass@digit,c
  1836  002D9A  0E00               	movlw	high input_password@digit
  1837  002D9C  6E5C               	movwf	obtain_pass@digit+1,c
  1838  002D9E  EC84  F012         	call	_obtain_pass	;wreg free
  1839  002DA2  C058  F0C4         	movff	?_obtain_pass,input_password@pass
  1840  002DA6  C059  F0C5         	movff	?_obtain_pass+1,input_password@pass+1
  1841                           
  1842                           ;lcd_vision.c: 109: input = read_keyboard();
  1843  002DAA  ECF2  F007         	call	_read_keyboard	;wreg free
  1844  002DAE  0100               	movlb	0	; () banked
  1845  002DB0  6FC6               	movwf	input_password@input& (0+255),b
  1846                           
  1847                           ; BSR set to: 0
  1848                           ;lcd_vision.c: 110: review_code(digit, pass);
  1849  002DB2  C0C7  F003         	movff	input_password@digit,review_code@digit
  1850  002DB6  C0C8  F004         	movff	input_password@digit+1,review_code@digit+1
  1851  002DBA  C0C4  F005         	movff	input_password@pass,review_code@pass
  1852  002DBE  C0C5  F006         	movff	input_password@pass+1,review_code@pass+1
  1853  002DC2  ECAF  F01B         	call	_review_code	;wreg free
  1854  002DC6  D000               	goto	l4801
  1855  002DC8                     l4801:
  1856  002DC8  0100               	movlb	0	; () banked
  1857  002DCA  51C6               	movf	input_password@input& (0+255),w,b
  1858  002DCC  EC2B  F01B         	call	_is_not_letter
  1859  002DD0  0900               	iorlw	0
  1860  002DD2  B4D8               	btfsc	status,2,c
  1861  002DD4  0012               	return	
  1862  002DD6  C0C7  F001         	movff	input_password@digit,not_fill_pass@digit
  1863  002DDA  C0C8  F002         	movff	input_password@digit+1,not_fill_pass@digit+1
  1864  002DDE  EC19  F01C         	call	_not_fill_pass	;wreg free
  1865  002DE2  0900               	iorlw	0
  1866  002DE4  B4D8               	btfsc	status,2,c
  1867  002DE6  0012               	return	
  1868  002DE8  D7D0               	goto	l4795
  1869  002DEA  0012               	return	
  1870  002DEC  0012               	return		;funcret
  1871  002DEE                     __end_of_input_password:
  1872                           	opt stack 0
  1873                           tblptru	equ	0xFF8
  1874                           tblptrh	equ	0xFF7
  1875                           tblptrl	equ	0xFF6
  1876                           tablat	equ	0xFF5
  1877                           postinc0	equ	0xFEE
  1878                           wreg	equ	0xFE8
  1879                           postdec1	equ	0xFE5
  1880                           fsr1l	equ	0xFE1
  1881                           status	equ	0xFD8
  1882                           
  1883 ;; *************** function _set_desactive_vision *****************
  1884 ;; Defined at:
  1885 ;;		line 93 in file "lcd_vision.c"
  1886 ;; Parameters:    Size  Location     Type
  1887 ;;  digit           2   10[COMRAM] short 
  1888 ;; Auto vars:     Size  Location     Type
  1889 ;;		None
  1890 ;; Return value:  Size  Location     Type
  1891 ;;		None               void
  1892 ;; Registers used:
  1893 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1894 ;; Tracked objects:
  1895 ;;		On entry : 0/0
  1896 ;;		On exit  : 0/0
  1897 ;;		Unchanged: 0/0
  1898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1899 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1902 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1903 ;;Total ram usage:        2 bytes
  1904 ;; Hardware stack levels used:    1
  1905 ;; Hardware stack levels required when called:    5
  1906 ;; This function calls:
  1907 ;;		_lcd_gotoxy
  1908 ;;		_lcd_putrs
  1909 ;;		_lcd_setcursor_vb
  1910 ;; This function is called by:
  1911 ;;		_input_password
  1912 ;; This function uses a non-reentrant model
  1913 ;;
  1914                           
  1915                           	psect	text5
  1916  0036E4                     __ptext5:
  1917                           	opt stack 0
  1918  0036E4                     _set_desactive_vision:
  1919                           	opt stack 23
  1920                           
  1921                           ;lcd_vision.c: 94: lcd_gotoxy(7,2);
  1922                           
  1923                           ;incstack = 0
  1924  0036E4  0E02               	movlw	2
  1925  0036E6  6E05               	movwf	lcd_gotoxy@y,c
  1926  0036E8  0E07               	movlw	7
  1927  0036EA  ECD3  F01B         	call	_lcd_gotoxy
  1928                           
  1929                           ;lcd_vision.c: 95: lcd_putrs("pass:____");
  1930  0036EE  0E7A               	movlw	low (STR_23+4)
  1931  0036F0  6E09               	movwf	lcd_putrs@ptr,c
  1932  0036F2  0E0F               	movlw	high (STR_23+4)
  1933  0036F4  6E0A               	movwf	lcd_putrs@ptr+1,c
  1934  0036F6  ECA0  F019         	call	_lcd_putrs	;wreg free
  1935                           
  1936                           ;lcd_vision.c: 96: lcd_gotoxy(digit,2);
  1937  0036FA  0E02               	movlw	2
  1938  0036FC  6E05               	movwf	lcd_gotoxy@y,c
  1939  0036FE  500B               	movf	set_desactive_vision@digit,w,c
  1940  003700  ECD3  F01B         	call	_lcd_gotoxy
  1941                           
  1942                           ;lcd_vision.c: 97: lcd_setcursor_vb(1,1);
  1943  003704  0E01               	movlw	1
  1944  003706  6E05               	movwf	lcd_setcursor_vb@blink,c
  1945  003708  0E01               	movlw	1
  1946  00370A  EC0F  F01C         	call	_lcd_setcursor_vb
  1947  00370E  0012               	return		;funcret
  1948  003710                     __end_of_set_desactive_vision:
  1949                           	opt stack 0
  1950                           tblptru	equ	0xFF8
  1951                           tblptrh	equ	0xFF7
  1952                           tblptrl	equ	0xFF6
  1953                           tablat	equ	0xFF5
  1954                           postinc0	equ	0xFEE
  1955                           wreg	equ	0xFE8
  1956                           postdec1	equ	0xFE5
  1957                           fsr1l	equ	0xFE1
  1958                           status	equ	0xFD8
  1959                           
  1960 ;; *************** function _lcd_setcursor_vb *****************
  1961 ;; Defined at:
  1962 ;;		line 210 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  1963 ;; Parameters:    Size  Location     Type
  1964 ;;  visible         1    wreg     unsigned char 
  1965 ;;  blink           1    4[COMRAM] unsigned char 
  1966 ;; Auto vars:     Size  Location     Type
  1967 ;;  visible         1    5[COMRAM] unsigned char 
  1968 ;; Return value:  Size  Location     Type
  1969 ;;		None               void
  1970 ;; Registers used:
  1971 ;;		wreg, status,2, status,0, cstack
  1972 ;; Tracked objects:
  1973 ;;		On entry : 0/0
  1974 ;;		On exit  : 0/0
  1975 ;;		Unchanged: 0/0
  1976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1977 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1978 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1980 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1981 ;;Total ram usage:        2 bytes
  1982 ;; Hardware stack levels used:    1
  1983 ;; Hardware stack levels required when called:    2
  1984 ;; This function calls:
  1985 ;;		_lcd_send_byte
  1986 ;; This function is called by:
  1987 ;;		_set_desactive_vision
  1988 ;;		_jumpIfNotNumber
  1989 ;; This function uses a non-reentrant model
  1990 ;;
  1991                           
  1992                           	psect	text6
  1993  00381E                     __ptext6:
  1994                           	opt stack 0
  1995  00381E                     _lcd_setcursor_vb:
  1996                           	opt stack 25
  1997                           
  1998                           ;incstack = 0
  1999                           ;lcd_setcursor_vb@visible stored from wreg
  2000  00381E  6E06               	movwf	lcd_setcursor_vb@visible,c
  2001                           
  2002                           ;unmc_lcd_216.c: 211: lcd_send_byte(0, 0xC|(visible<<1)|blink);
  2003  003820  5006               	movf	lcd_setcursor_vb@visible,w,c
  2004  003822  2406               	addwf	lcd_setcursor_vb@visible,w,c
  2005  003824  1005               	iorwf	lcd_setcursor_vb@blink,w,c
  2006  003826  090C               	iorlw	12
  2007  003828  6E03               	movwf	lcd_send_byte@n,c
  2008  00382A  0E00               	movlw	0
  2009  00382C  ECFA  F01A         	call	_lcd_send_byte
  2010  003830  0012               	return		;funcret
  2011  003832                     __end_of_lcd_setcursor_vb:
  2012                           	opt stack 0
  2013                           tblptru	equ	0xFF8
  2014                           tblptrh	equ	0xFF7
  2015                           tblptrl	equ	0xFF6
  2016                           tablat	equ	0xFF5
  2017                           postinc0	equ	0xFEE
  2018                           wreg	equ	0xFE8
  2019                           postdec1	equ	0xFE5
  2020                           fsr1l	equ	0xFE1
  2021                           status	equ	0xFD8
  2022                           
  2023 ;; *************** function _review_code *****************
  2024 ;; Defined at:
  2025 ;;		line 56 in file "lcd_vision.c"
  2026 ;; Parameters:    Size  Location     Type
  2027 ;;  digit           2    2[COMRAM] short 
  2028 ;;  pass            2    4[COMRAM] int 
  2029 ;; Auto vars:     Size  Location     Type
  2030 ;;		None
  2031 ;; Return value:  Size  Location     Type
  2032 ;;		None               void
  2033 ;; Registers used:
  2034 ;;		wreg, status,2, status,0, cstack
  2035 ;; Tracked objects:
  2036 ;;		On entry : 0/0
  2037 ;;		On exit  : 0/0
  2038 ;;		Unchanged: 0/0
  2039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2040 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2043 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2044 ;;Total ram usage:        4 bytes
  2045 ;; Hardware stack levels used:    1
  2046 ;; Hardware stack levels required when called:    1
  2047 ;; This function calls:
  2048 ;;		_change_state
  2049 ;;		_checkPass
  2050 ;; This function is called by:
  2051 ;;		_input_password
  2052 ;; This function uses a non-reentrant model
  2053 ;;
  2054                           
  2055                           	psect	text7
  2056  00375E                     __ptext7:
  2057                           	opt stack 0
  2058  00375E                     _review_code:
  2059                           	opt stack 27
  2060                           
  2061                           ;lcd_vision.c: 57: if(digit == 16){
  2062                           
  2063                           ;incstack = 0
  2064  00375E  0E10               	movlw	16
  2065  003760  1803               	xorwf	review_code@digit,w,c
  2066  003762  1004               	iorwf	review_code@digit+1,w,c
  2067  003764  A4D8               	btfss	status,2,c
  2068  003766  0012               	return	
  2069                           
  2070                           ;lcd_vision.c: 58: if(checkPass(pass)){
  2071  003768  C005  F001         	movff	review_code@pass,checkPass@pass
  2072  00376C  C006  F002         	movff	review_code@pass+1,checkPass@pass+1
  2073  003770  ECF6  F01B         	call	_checkPass	;wreg free
  2074  003774  0900               	iorlw	0
  2075  003776  B4D8               	btfsc	status,2,c
  2076  003778  0012               	return	
  2077                           
  2078                           ;lcd_vision.c: 59: change_state();
  2079  00377A  EC5B  F01B         	call	_change_state	;wreg free
  2080  00377E  0012               	return	
  2081  003780  0012               	return		;funcret
  2082  003782                     __end_of_review_code:
  2083                           	opt stack 0
  2084                           tblptru	equ	0xFF8
  2085                           tblptrh	equ	0xFF7
  2086                           tblptrl	equ	0xFF6
  2087                           tablat	equ	0xFF5
  2088                           postinc0	equ	0xFEE
  2089                           wreg	equ	0xFE8
  2090                           postdec1	equ	0xFE5
  2091                           fsr1l	equ	0xFE1
  2092                           status	equ	0xFD8
  2093                           
  2094 ;; *************** function _change_state *****************
  2095 ;; Defined at:
  2096 ;;		line 46 in file "lcd_vision.c"
  2097 ;; Parameters:    Size  Location     Type
  2098 ;;		None
  2099 ;; Auto vars:     Size  Location     Type
  2100 ;;		None
  2101 ;; Return value:  Size  Location     Type
  2102 ;;		None               void
  2103 ;; Registers used:
  2104 ;;		wreg, status,2, status,0
  2105 ;; Tracked objects:
  2106 ;;		On entry : 0/0
  2107 ;;		On exit  : 0/0
  2108 ;;		Unchanged: 0/0
  2109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2111 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2113 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2114 ;;Total ram usage:        0 bytes
  2115 ;; Hardware stack levels used:    1
  2116 ;; This function calls:
  2117 ;;		Nothing
  2118 ;; This function is called by:
  2119 ;;		_review_code
  2120 ;; This function uses a non-reentrant model
  2121 ;;
  2122                           
  2123                           	psect	text8
  2124  0036B6                     __ptext8:
  2125                           	opt stack 0
  2126  0036B6                     _change_state:
  2127                           	opt stack 27
  2128                           
  2129                           ;lcd_vision.c: 47: switch (state_alarm){
  2130                           
  2131                           ;incstack = 0
  2132  0036B6  D00C               	goto	l4255
  2133  0036B8                     l4249:
  2134  0036B8  0E00               	movlw	0
  2135  0036BA  0100               	movlb	0	; () banked
  2136  0036BC  6FD9               	movwf	_state_alarm& (0+255),b
  2137                           
  2138                           ;lcd_vision.c: 49: break;
  2139  0036BE  0012               	return	
  2140  0036C0                     l4251:
  2141                           
  2142                           ; BSR set to: 0
  2143  0036C0  0E01               	movlw	1
  2144  0036C2  0100               	movlb	0	; () banked
  2145  0036C4  6FD9               	movwf	_state_alarm& (0+255),b
  2146                           
  2147                           ;lcd_vision.c: 51: break;
  2148  0036C6  0012               	return	
  2149  0036C8                     l4253:
  2150                           
  2151                           ; BSR set to: 0
  2152  0036C8  0E01               	movlw	1
  2153  0036CA  0100               	movlb	0	; () banked
  2154  0036CC  6FD9               	movwf	_state_alarm& (0+255),b
  2155                           
  2156                           ;lcd_vision.c: 53: }
  2157  0036CE  0012               	return	
  2158  0036D0                     l4255:
  2159  0036D0  0100               	movlb	0	; () banked
  2160  0036D2  51D9               	movf	_state_alarm& (0+255),w,b
  2161                           
  2162                           ; Switch size 1, requested type "space"
  2163                           ; Number of cases is 2, Range of values is 0 to 1
  2164                           ; switch strategies available:
  2165                           ; Name         Instructions Cycles
  2166                           ; simple_byte            7     4 (average)
  2167                           ;	Chosen strategy is simple_byte
  2168  0036D4  0A00               	xorlw	0	; case 0
  2169  0036D6  B4D8               	btfsc	status,2,c
  2170  0036D8  D7F3               	goto	l4251
  2171  0036DA  0A01               	xorlw	1	; case 1
  2172  0036DC  B4D8               	btfsc	status,2,c
  2173  0036DE  D7EC               	goto	l4249
  2174  0036E0  D7F3               	goto	l4253
  2175                           
  2176                           ; BSR set to: 0
  2177                           
  2178                           ; BSR set to: 0
  2179  0036E2  0012               	return		;funcret
  2180  0036E4                     __end_of_change_state:
  2181                           	opt stack 0
  2182                           tblptru	equ	0xFF8
  2183                           tblptrh	equ	0xFF7
  2184                           tblptrl	equ	0xFF6
  2185                           tablat	equ	0xFF5
  2186                           postinc0	equ	0xFEE
  2187                           wreg	equ	0xFE8
  2188                           postdec1	equ	0xFE5
  2189                           fsr1l	equ	0xFE1
  2190                           status	equ	0xFD8
  2191                           
  2192 ;; *************** function _obtain_pass *****************
  2193 ;; Defined at:
  2194 ;;		line 64 in file "lcd_vision.c"
  2195 ;; Parameters:    Size  Location     Type
  2196 ;;  pass            2   87[COMRAM] int 
  2197 ;;  input           1   89[COMRAM] unsigned char 
  2198 ;;  digit           2   90[COMRAM] PTR short 
  2199 ;;		 -> input_password@digit(2), 
  2200 ;; Auto vars:     Size  Location     Type
  2201 ;;		None
  2202 ;; Return value:  Size  Location     Type
  2203 ;;                  2   87[COMRAM] int 
  2204 ;; Registers used:
  2205 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2206 ;; Tracked objects:
  2207 ;;		On entry : 0/0
  2208 ;;		On exit  : 0/0
  2209 ;;		Unchanged: 0/0
  2210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2211 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2212 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2213 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2214 ;;      Totals:         7       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2215 ;;Total ram usage:       13 bytes
  2216 ;; Hardware stack levels used:    1
  2217 ;; Hardware stack levels required when called:    5
  2218 ;; This function calls:
  2219 ;;		___awtoft
  2220 ;;		___ftadd
  2221 ;;		___ftmul
  2222 ;;		___fttol
  2223 ;;		___lbtoft
  2224 ;;		_next_code
  2225 ;;		_pow
  2226 ;; This function is called by:
  2227 ;;		_input_password
  2228 ;; This function uses a non-reentrant model
  2229 ;;
  2230                           
  2231                           	psect	text9
  2232  002508                     __ptext9:
  2233                           	opt stack 0
  2234  002508                     _obtain_pass:
  2235                           	opt stack 23
  2236                           
  2237                           ;lcd_vision.c: 66: if(0<input && input<10){
  2238                           
  2239                           ; BSR set to: 0
  2240                           ;incstack = 0
  2241  002508  505A               	movf	obtain_pass@input,w,c
  2242  00250A  B4D8               	btfsc	status,2,c
  2243  00250C  D06D               	goto	l4445
  2244  00250E  0E0A               	movlw	10
  2245  002510  605A               	cpfslt	obtain_pass@input,c
  2246  002512  D06A               	goto	l4445
  2247                           
  2248                           ;lcd_vision.c: 67: pass = pass + input * pow(10, 15 - *digit);
  2249  002514  C05B  FFD9         	movff	obtain_pass@digit,fsr2l
  2250  002518  C05C  FFDA         	movff	obtain_pass@digit+1,fsr2h
  2251  00251C  CFDE F05D          	movff	postinc2,??_obtain_pass
  2252  002520  CFDD F05E          	movff	postdec2,??_obtain_pass+1
  2253  002524  1E5D               	comf	??_obtain_pass,f,c
  2254  002526  1E5E               	comf	??_obtain_pass+1,f,c
  2255  002528  4A5D               	infsnz	??_obtain_pass,f,c
  2256  00252A  2A5E               	incf	??_obtain_pass+1,f,c
  2257  00252C  0E0F               	movlw	15
  2258  00252E  245D               	addwf	??_obtain_pass,w,c
  2259  002530  6E09               	movwf	___awtoft@c,c
  2260  002532  0E00               	movlw	0
  2261  002534  205E               	addwfc	??_obtain_pass+1,w,c
  2262  002536  6E0A               	movwf	___awtoft@c+1,c
  2263  002538  ECBF  F01A         	call	___awtoft	;wreg free
  2264  00253C  C009  F0BE         	movff	?___awtoft,_obtain_pass$3038
  2265  002540  C00A  F0BF         	movff	?___awtoft+1,_obtain_pass$3038+1
  2266  002544  C00B  F0C0         	movff	?___awtoft+2,_obtain_pass$3038+2
  2267                           
  2268                           ;lcd_vision.c: 67: pass = pass + input * pow(10, 15 - *digit);
  2269  002548  C0BE  F055         	movff	_obtain_pass$3038,pow@y
  2270  00254C  C0BF  F056         	movff	_obtain_pass$3038+1,pow@y+1
  2271  002550  C0C0  F057         	movff	_obtain_pass$3038+2,pow@y+2
  2272  002554  0E00               	movlw	0
  2273  002556  6E52               	movwf	pow@x,c
  2274  002558  0E20               	movlw	32
  2275  00255A  6E53               	movwf	pow@x+1,c
  2276  00255C  0E41               	movlw	65
  2277  00255E  6E54               	movwf	pow@x+2,c
  2278  002560  EC24  F00D         	call	_pow	;wreg free
  2279  002564  C052  F0C1         	movff	?_pow,_obtain_pass$3039
  2280  002568  C053  F0C2         	movff	?_pow+1,_obtain_pass$3039+1
  2281  00256C  C054  F0C3         	movff	?_pow+2,_obtain_pass$3039+2
  2282                           
  2283                           ;lcd_vision.c: 67: pass = pass + input * pow(10, 15 - *digit);
  2284  002570  C0C1  F010         	movff	_obtain_pass$3039,___ftmul@f2
  2285  002574  C0C2  F011         	movff	_obtain_pass$3039+1,___ftmul@f2+1
  2286  002578  C0C3  F012         	movff	_obtain_pass$3039+2,___ftmul@f2+2
  2287  00257C  505A               	movf	obtain_pass@input,w,c
  2288  00257E  EC9C  F01B         	call	___lbtoft
  2289  002582  C009  F00D         	movff	?___lbtoft,___ftmul@f1
  2290  002586  C00A  F00E         	movff	?___lbtoft+1,___ftmul@f1+1
  2291  00258A  C00B  F00F         	movff	?___lbtoft+2,___ftmul@f1+2
  2292  00258E  EC03  F012         	call	___ftmul	;wreg free
  2293  002592  C00D  F01F         	movff	?___ftmul,___ftadd@f2
  2294  002596  C00E  F020         	movff	?___ftmul+1,___ftadd@f2+1
  2295  00259A  C00F  F021         	movff	?___ftmul+2,___ftadd@f2+2
  2296  00259E  C058  F009         	movff	obtain_pass@pass,___awtoft@c
  2297  0025A2  C059  F00A         	movff	obtain_pass@pass+1,___awtoft@c+1
  2298  0025A6  ECBF  F01A         	call	___awtoft	;wreg free
  2299  0025AA  C009  F01C         	movff	?___awtoft,___ftadd@f1
  2300  0025AE  C00A  F01D         	movff	?___awtoft+1,___ftadd@f1+1
  2301  0025B2  C00B  F01E         	movff	?___awtoft+2,___ftadd@f1+2
  2302  0025B6  EC74  F00B         	call	___ftadd	;wreg free
  2303  0025BA  C01C  F028         	movff	?___ftadd,___fttol@f1
  2304  0025BE  C01D  F029         	movff	?___ftadd+1,___fttol@f1+1
  2305  0025C2  C01E  F02A         	movff	?___ftadd+2,___fttol@f1+2
  2306  0025C6  EC82  F011         	call	___fttol	;wreg free
  2307  0025CA  C028  F058         	movff	?___fttol,obtain_pass@pass
  2308  0025CE  C029  F059         	movff	?___fttol+1,obtain_pass@pass+1
  2309                           
  2310                           ;lcd_vision.c: 68: next_code(digit, &input);
  2311  0025D2  C05B  F008         	movff	obtain_pass@digit,next_code@digit
  2312  0025D6  C05C  F009         	movff	obtain_pass@digit+1,next_code@digit+1
  2313  0025DA  0E5A               	movlw	low obtain_pass@input
  2314  0025DC  6E0A               	movwf	next_code@input,c
  2315  0025DE  0E00               	movlw	high obtain_pass@input
  2316  0025E0  6E0B               	movwf	next_code@input+1,c
  2317  0025E2  ECCA  F019         	call	_next_code	;wreg free
  2318  0025E6  D000               	goto	l4445
  2319  0025E8                     l4445:
  2320                           
  2321                           ;lcd_vision.c: 69: }
  2322                           ;lcd_vision.c: 70: return pass;
  2323  0025E8  C058  F058         	movff	obtain_pass@pass,?_obtain_pass
  2324  0025EC  C059  F059         	movff	obtain_pass@pass+1,?_obtain_pass+1
  2325  0025F0  0012               	return	
  2326  0025F2  0012               	return		;funcret
  2327  0025F4                     __end_of_obtain_pass:
  2328                           	opt stack 0
  2329                           tblptru	equ	0xFF8
  2330                           tblptrh	equ	0xFF7
  2331                           tblptrl	equ	0xFF6
  2332                           tablat	equ	0xFF5
  2333                           postinc0	equ	0xFEE
  2334                           wreg	equ	0xFE8
  2335                           postdec1	equ	0xFE5
  2336                           fsr1l	equ	0xFE1
  2337                           postinc2	equ	0xFDE
  2338                           postdec2	equ	0xFDD
  2339                           fsr2h	equ	0xFDA
  2340                           fsr2l	equ	0xFD9
  2341                           status	equ	0xFD8
  2342                           
  2343 ;; *************** function _next_code *****************
  2344 ;; Defined at:
  2345 ;;		line 39 in file "lcd_vision.c"
  2346 ;; Parameters:    Size  Location     Type
  2347 ;;  digit           2    7[COMRAM] PTR short 
  2348 ;;		 -> input_password@digit(2), 
  2349 ;;  input           2    9[COMRAM] PTR unsigned char 
  2350 ;;		 -> obtain_pass@input(1), 
  2351 ;; Auto vars:     Size  Location     Type
  2352 ;;		None
  2353 ;; Return value:  Size  Location     Type
  2354 ;;		None               void
  2355 ;; Registers used:
  2356 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2357 ;; Tracked objects:
  2358 ;;		On entry : 0/0
  2359 ;;		On exit  : 0/0
  2360 ;;		Unchanged: 0/0
  2361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2362 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2363 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2364 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2365 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2366 ;;Total ram usage:        6 bytes
  2367 ;; Hardware stack levels used:    1
  2368 ;; Hardware stack levels required when called:    3
  2369 ;; This function calls:
  2370 ;;		_clear_keyboard
  2371 ;;		_lcd_gotoxy
  2372 ;; This function is called by:
  2373 ;;		_obtain_pass
  2374 ;; This function uses a non-reentrant model
  2375 ;;
  2376                           
  2377                           	psect	text10
  2378  003394                     __ptext10:
  2379                           	opt stack 0
  2380  003394                     _next_code:
  2381                           	opt stack 24
  2382                           
  2383                           ;lcd_vision.c: 40: clear_keyboard();
  2384                           
  2385                           ;incstack = 0
  2386  003394  EC53  F01C         	call	_clear_keyboard	;wreg free
  2387                           
  2388                           ;lcd_vision.c: 41: *digit = *digit + 1;
  2389  003398  C008  FFD9         	movff	next_code@digit,fsr2l
  2390  00339C  C009  FFDA         	movff	next_code@digit+1,fsr2h
  2391  0033A0  CFDE F00C          	movff	postinc2,??_next_code
  2392  0033A4  CFDD F00D          	movff	postdec2,??_next_code+1
  2393  0033A8  0E01               	movlw	1
  2394  0033AA  260C               	addwf	??_next_code,f,c
  2395  0033AC  0E00               	movlw	0
  2396  0033AE  220D               	addwfc	??_next_code+1,f,c
  2397  0033B0  C008  FFD9         	movff	next_code@digit,fsr2l
  2398  0033B4  C009  FFDA         	movff	next_code@digit+1,fsr2h
  2399  0033B8  C00C  FFDE         	movff	??_next_code,postinc2
  2400  0033BC  C00D  FFDD         	movff	??_next_code+1,postdec2
  2401                           
  2402                           ;lcd_vision.c: 42: lcd_gotoxy(*digit, 2);
  2403  0033C0  0E02               	movlw	2
  2404  0033C2  6E05               	movwf	lcd_gotoxy@y,c
  2405  0033C4  C008  FFD9         	movff	next_code@digit,fsr2l
  2406  0033C8  C009  FFDA         	movff	next_code@digit+1,fsr2h
  2407  0033CC  50DF               	movf	indf2,w,c
  2408  0033CE  ECD3  F01B         	call	_lcd_gotoxy
  2409                           
  2410                           ;lcd_vision.c: 43: *input = 18;
  2411  0033D2  C00A  FFD9         	movff	next_code@input,fsr2l
  2412  0033D6  C00B  FFDA         	movff	next_code@input+1,fsr2h
  2413  0033DA  0E12               	movlw	18
  2414  0033DC  6EDF               	movwf	indf2,c
  2415  0033DE  0012               	return		;funcret
  2416  0033E0                     __end_of_next_code:
  2417                           	opt stack 0
  2418                           tblptru	equ	0xFF8
  2419                           tblptrh	equ	0xFF7
  2420                           tblptrl	equ	0xFF6
  2421                           tablat	equ	0xFF5
  2422                           postinc0	equ	0xFEE
  2423                           wreg	equ	0xFE8
  2424                           postdec1	equ	0xFE5
  2425                           fsr1l	equ	0xFE1
  2426                           indf2	equ	0xFDF
  2427                           postinc2	equ	0xFDE
  2428                           postdec2	equ	0xFDD
  2429                           fsr2h	equ	0xFDA
  2430                           fsr2l	equ	0xFD9
  2431                           status	equ	0xFD8
  2432                           
  2433 ;; *************** function _is_not_letter *****************
  2434 ;; Defined at:
  2435 ;;		line 30 in file "lcd_vision.c"
  2436 ;; Parameters:    Size  Location     Type
  2437 ;;  input           1    wreg     unsigned char 
  2438 ;; Auto vars:     Size  Location     Type
  2439 ;;  input           1    1[COMRAM] unsigned char 
  2440 ;; Return value:  Size  Location     Type
  2441 ;;                  1    wreg      unsigned char 
  2442 ;; Registers used:
  2443 ;;		wreg, status,2, status,0
  2444 ;; Tracked objects:
  2445 ;;		On entry : 0/0
  2446 ;;		On exit  : 0/0
  2447 ;;		Unchanged: 0/0
  2448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2450 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2452 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2453 ;;Total ram usage:        2 bytes
  2454 ;; Hardware stack levels used:    1
  2455 ;; This function calls:
  2456 ;;		Nothing
  2457 ;; This function is called by:
  2458 ;;		_input_password
  2459 ;; This function uses a non-reentrant model
  2460 ;;
  2461                           
  2462                           	psect	text11
  2463  003656                     __ptext11:
  2464                           	opt stack 0
  2465  003656                     _is_not_letter:
  2466                           	opt stack 28
  2467                           
  2468                           ;incstack = 0
  2469                           ;is_not_letter@input stored from wreg
  2470  003656  6E02               	movwf	is_not_letter@input,c
  2471                           
  2472                           ;lcd_vision.c: 31: return input != 16 && input != 11 && input !=12 && input!=13;
  2473  003658  0E00               	movlw	0
  2474  00365A  6E01               	movwf	_is_not_letter$1260,c
  2475  00365C  0E10               	movlw	16
  2476  00365E  1802               	xorwf	is_not_letter@input,w,c
  2477  003660  B4D8               	btfsc	status,2,c
  2478  003662  D00E               	goto	l605
  2479  003664  0E0B               	movlw	11
  2480  003666  1802               	xorwf	is_not_letter@input,w,c
  2481  003668  B4D8               	btfsc	status,2,c
  2482  00366A  D00A               	goto	l605
  2483  00366C  0E0C               	movlw	12
  2484  00366E  1802               	xorwf	is_not_letter@input,w,c
  2485  003670  B4D8               	btfsc	status,2,c
  2486  003672  D006               	goto	l605
  2487  003674  0E0D               	movlw	13
  2488  003676  1802               	xorwf	is_not_letter@input,w,c
  2489  003678  B4D8               	btfsc	status,2,c
  2490  00367A  D002               	goto	l605
  2491  00367C  0E01               	movlw	1
  2492  00367E  6E01               	movwf	_is_not_letter$1260,c
  2493  003680                     l605:
  2494  003680  5001               	movf	_is_not_letter$1260,w,c
  2495  003682  0012               	return	
  2496  003684  0012               	return		;funcret
  2497  003686                     __end_of_is_not_letter:
  2498                           	opt stack 0
  2499                           tblptru	equ	0xFF8
  2500                           tblptrh	equ	0xFF7
  2501                           tblptrl	equ	0xFF6
  2502                           tablat	equ	0xFF5
  2503                           postinc0	equ	0xFEE
  2504                           wreg	equ	0xFE8
  2505                           postdec1	equ	0xFE5
  2506                           fsr1l	equ	0xFE1
  2507                           indf2	equ	0xFDF
  2508                           postinc2	equ	0xFDE
  2509                           postdec2	equ	0xFDD
  2510                           fsr2h	equ	0xFDA
  2511                           fsr2l	equ	0xFD9
  2512                           status	equ	0xFD8
  2513                           
  2514 ;; *************** function _select_menu *****************
  2515 ;; Defined at:
  2516 ;;		line 127 in file "menu.c"
  2517 ;; Parameters:    Size  Location     Type
  2518 ;;		None
  2519 ;; Auto vars:     Size  Location     Type
  2520 ;;		None
  2521 ;; Return value:  Size  Location     Type
  2522 ;;                  2   34[None  ] int 
  2523 ;; Registers used:
  2524 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2525 ;; Tracked objects:
  2526 ;;		On entry : 0/0
  2527 ;;		On exit  : 0/0
  2528 ;;		Unchanged: 0/0
  2529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2533 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2534 ;;Total ram usage:        0 bytes
  2535 ;; Hardware stack levels used:    1
  2536 ;; Hardware stack levels required when called:    8
  2537 ;; This function calls:
  2538 ;;		_configurar_reloj
  2539 ;;		_dispararSensor
  2540 ;;		_read_keyboard
  2541 ;;		_ver_info
  2542 ;;		_ver_opcion_cambio
  2543 ;; This function is called by:
  2544 ;;		_main
  2545 ;; This function uses a non-reentrant model
  2546 ;;
  2547                           
  2548                           	psect	text12
  2549  002B0A                     __ptext12:
  2550                           	opt stack 0
  2551  002B0A                     _select_menu:
  2552                           	opt stack 22
  2553                           
  2554                           ;menu.c: 128: if (state_alarm == DESACTIVE){
  2555                           
  2556                           ;incstack = 0
  2557  002B0A  0100               	movlb	0	; () banked
  2558  002B0C  05D9               	decf	_state_alarm& (0+255),w,b
  2559  002B0E  A4D8               	btfss	status,2,c
  2560  002B10  D01A               	goto	l4917
  2561                           
  2562                           ; BSR set to: 0
  2563                           ;menu.c: 129: menu = read_keyboard();
  2564  002B12  ECF2  F007         	call	_read_keyboard	;wreg free
  2565  002B16  0100               	movlb	0	; () banked
  2566  002B18  6FD8               	movwf	_menu& (0+255),b
  2567                           
  2568                           ;menu.c: 130: switch (menu){
  2569  002B1A  D009               	goto	l4915
  2570  002B1C                     l4909:
  2571                           
  2572                           ; BSR set to: 0
  2573  002B1C  EC3E  F017         	call	_ver_opcion_cambio	;wreg free
  2574                           
  2575                           ;menu.c: 132: break;
  2576  002B20  D03C               	goto	l4929
  2577  002B22                     l4911:
  2578  002B22  EC5B  F01C         	call	_configurar_reloj	;wreg free
  2579                           
  2580                           ;menu.c: 134: break;
  2581  002B26  D039               	goto	l4929
  2582  002B28                     l4913:
  2583  002B28  ECDF  F013         	call	_ver_info	;wreg free
  2584                           
  2585                           ;menu.c: 138: }
  2586                           
  2587                           ;menu.c: 137: default: ;
  2588                           
  2589                           ;menu.c: 136: break;
  2590  002B2C  D036               	goto	l4929
  2591  002B2E                     l4915:
  2592  002B2E  0100               	movlb	0	; () banked
  2593  002B30  51D8               	movf	_menu& (0+255),w,b
  2594                           
  2595                           ; Switch size 1, requested type "space"
  2596                           ; Number of cases is 3, Range of values is 11 to 13
  2597                           ; switch strategies available:
  2598                           ; Name         Instructions Cycles
  2599                           ; simple_byte           10     6 (average)
  2600                           ;	Chosen strategy is simple_byte
  2601  002B32  0A0B               	xorlw	11	; case 11
  2602  002B34  B4D8               	btfsc	status,2,c
  2603  002B36  D7F2               	goto	l4909
  2604  002B38  0A07               	xorlw	7	; case 12
  2605  002B3A  B4D8               	btfsc	status,2,c
  2606  002B3C  D7F2               	goto	l4911
  2607  002B3E  0A01               	xorlw	1	; case 13
  2608  002B40  B4D8               	btfsc	status,2,c
  2609  002B42  D7F2               	goto	l4913
  2610                           
  2611                           ; BSR set to: 0
  2612                           ;menu.c: 139: }else{
  2613  002B44  D02A               	goto	l4929
  2614  002B46                     l4917:
  2615                           
  2616                           ; BSR set to: 0
  2617                           ;menu.c: 140: if (state_alarm == ACTIVE){
  2618  002B46  0100               	movlb	0	; () banked
  2619  002B48  51D9               	movf	_state_alarm& (0+255),w,b
  2620  002B4A  A4D8               	btfss	status,2,c
  2621  002B4C  D026               	goto	l4929
  2622                           
  2623                           ; BSR set to: 0
  2624                           ;menu.c: 141: menu = read_keyboard();
  2625  002B4E  ECF2  F007         	call	_read_keyboard	;wreg free
  2626  002B52  0100               	movlb	0	; () banked
  2627  002B54  6FD8               	movwf	_menu& (0+255),b
  2628                           
  2629                           ;menu.c: 142: switch (menu){
  2630  002B56  D015               	goto	l4927
  2631  002B58                     l4921:
  2632                           
  2633                           ; BSR set to: 0
  2634  002B58  0E00               	movlw	0
  2635  002B5A  6E14               	movwf	dispararSensor@sensor+1,c
  2636  002B5C  0E01               	movlw	1
  2637  002B5E  6E13               	movwf	dispararSensor@sensor,c
  2638  002B60  EC43  F01B         	call	_dispararSensor	;wreg free
  2639                           
  2640                           ;menu.c: 144: break;
  2641  002B64  D01A               	goto	l4929
  2642  002B66                     l4923:
  2643  002B66  0E00               	movlw	0
  2644  002B68  6E14               	movwf	dispararSensor@sensor+1,c
  2645  002B6A  0E02               	movlw	2
  2646  002B6C  6E13               	movwf	dispararSensor@sensor,c
  2647  002B6E  EC43  F01B         	call	_dispararSensor	;wreg free
  2648                           
  2649                           ;menu.c: 146: break;
  2650  002B72  D013               	goto	l4929
  2651  002B74                     l4925:
  2652  002B74  0E00               	movlw	0
  2653  002B76  6E14               	movwf	dispararSensor@sensor+1,c
  2654  002B78  0E03               	movlw	3
  2655  002B7A  6E13               	movwf	dispararSensor@sensor,c
  2656  002B7C  EC43  F01B         	call	_dispararSensor	;wreg free
  2657                           
  2658                           ;menu.c: 150: }
  2659                           
  2660                           ;menu.c: 149: default: ;
  2661                           
  2662                           ;menu.c: 148: break;
  2663  002B80  D00C               	goto	l4929
  2664  002B82                     l4927:
  2665  002B82  0100               	movlb	0	; () banked
  2666  002B84  51D8               	movf	_menu& (0+255),w,b
  2667                           
  2668                           ; Switch size 1, requested type "space"
  2669                           ; Number of cases is 3, Range of values is 11 to 13
  2670                           ; switch strategies available:
  2671                           ; Name         Instructions Cycles
  2672                           ; simple_byte           10     6 (average)
  2673                           ;	Chosen strategy is simple_byte
  2674  002B86  0A0B               	xorlw	11	; case 11
  2675  002B88  B4D8               	btfsc	status,2,c
  2676  002B8A  D7E6               	goto	l4921
  2677  002B8C  0A07               	xorlw	7	; case 12
  2678  002B8E  B4D8               	btfsc	status,2,c
  2679  002B90  D7EA               	goto	l4923
  2680  002B92  0A01               	xorlw	1	; case 13
  2681  002B94  B4D8               	btfsc	status,2,c
  2682  002B96  D7EE               	goto	l4925
  2683                           
  2684                           ; BSR set to: 0
  2685                           
  2686                           ; BSR set to: 0
  2687  002B98  D000               	goto	l4929
  2688  002B9A                     l4929:
  2689                           
  2690                           ;menu.c: 151: }
  2691                           ;menu.c: 152: }
  2692                           ;menu.c: 153: menu = 18;
  2693  002B9A  0E12               	movlw	18
  2694  002B9C  0100               	movlb	0	; () banked
  2695  002B9E  6FD8               	movwf	_menu& (0+255),b
  2696                           
  2697                           ; BSR set to: 0
  2698  002BA0  0012               	return		;funcret
  2699  002BA2                     __end_of_select_menu:
  2700                           	opt stack 0
  2701                           tblptru	equ	0xFF8
  2702                           tblptrh	equ	0xFF7
  2703                           tblptrl	equ	0xFF6
  2704                           tablat	equ	0xFF5
  2705                           postinc0	equ	0xFEE
  2706                           wreg	equ	0xFE8
  2707                           postdec1	equ	0xFE5
  2708                           fsr1l	equ	0xFE1
  2709                           indf2	equ	0xFDF
  2710                           postinc2	equ	0xFDE
  2711                           postdec2	equ	0xFDD
  2712                           fsr2h	equ	0xFDA
  2713                           fsr2l	equ	0xFD9
  2714                           status	equ	0xFD8
  2715                           
  2716 ;; *************** function _ver_opcion_cambio *****************
  2717 ;; Defined at:
  2718 ;;		line 71 in file "menu.c"
  2719 ;; Parameters:    Size  Location     Type
  2720 ;;		None
  2721 ;; Auto vars:     Size  Location     Type
  2722 ;;  input           1   90[COMRAM] unsigned char 
  2723 ;;  old_correct     1   89[COMRAM] unsigned char 
  2724 ;; Return value:  Size  Location     Type
  2725 ;;		None               void
  2726 ;; Registers used:
  2727 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2728 ;; Tracked objects:
  2729 ;;		On entry : 0/0
  2730 ;;		On exit  : 0/0
  2731 ;;		Unchanged: 0/0
  2732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2734 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2736 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2737 ;;Total ram usage:        2 bytes
  2738 ;; Hardware stack levels used:    1
  2739 ;; Hardware stack levels required when called:    7
  2740 ;; This function calls:
  2741 ;;		_changePass
  2742 ;;		_clear
  2743 ;;		_input_new_pass
  2744 ;;		_input_old_pass
  2745 ;;		_lcd_gotoxy
  2746 ;;		_lcd_putrs
  2747 ;;		_read_keyboard
  2748 ;;		_show_error
  2749 ;;		_show_success
  2750 ;; This function is called by:
  2751 ;;		_select_menu
  2752 ;; This function uses a non-reentrant model
  2753 ;;
  2754                           
  2755                           	psect	text13
  2756  002E7C                     __ptext13:
  2757                           	opt stack 0
  2758  002E7C                     _ver_opcion_cambio:
  2759                           	opt stack 22
  2760                           
  2761                           ;menu.c: 72: clear();
  2762                           
  2763                           ; BSR set to: 0
  2764                           ;incstack = 0
  2765  002E7C  EC04  F01C         	call	_clear	;wreg free
  2766                           
  2767                           ;menu.c: 73: bool old_correct = 0;
  2768  002E80  0E00               	movlw	0
  2769  002E82  6E5A               	movwf	ver_opcion_cambio@old_correct,c
  2770                           
  2771                           ;menu.c: 74: lcd_gotoxy(2,1);
  2772  002E84  0E01               	movlw	1
  2773  002E86  6E05               	movwf	lcd_gotoxy@y,c
  2774  002E88  0E02               	movlw	2
  2775  002E8A  ECD3  F01B         	call	_lcd_gotoxy
  2776                           
  2777                           ;menu.c: 75: lcd_putrs("Old pass:____");
  2778  002E8E  0E76               	movlw	low STR_23
  2779  002E90  6E09               	movwf	lcd_putrs@ptr,c
  2780  002E92  0E0F               	movlw	high STR_23
  2781  002E94  6E0A               	movwf	lcd_putrs@ptr+1,c
  2782  002E96  ECA0  F019         	call	_lcd_putrs	;wreg free
  2783                           
  2784                           ;menu.c: 76: lcd_gotoxy(2,2);
  2785  002E9A  0E02               	movlw	2
  2786  002E9C  6E05               	movwf	lcd_gotoxy@y,c
  2787  002E9E  0E02               	movlw	2
  2788  002EA0  ECD3  F01B         	call	_lcd_gotoxy
  2789                           
  2790                           ;menu.c: 77: lcd_putrs("New pass:____");
  2791  002EA4  0E84               	movlw	low STR_24
  2792  002EA6  6E09               	movwf	lcd_putrs@ptr,c
  2793  002EA8  0E0F               	movlw	high STR_24
  2794  002EAA  6E0A               	movwf	lcd_putrs@ptr+1,c
  2795  002EAC  ECA0  F019         	call	_lcd_putrs	;wreg free
  2796                           
  2797                           ;menu.c: 78: lcd_gotoxy(11,1);
  2798  002EB0  0E01               	movlw	1
  2799  002EB2  6E05               	movwf	lcd_gotoxy@y,c
  2800  002EB4  0E0B               	movlw	11
  2801  002EB6  ECD3  F01B         	call	_lcd_gotoxy
  2802                           
  2803                           ;menu.c: 79: old_correct = input_old_pass();
  2804  002EBA  ECE5  F00D         	call	_input_old_pass	;wreg free
  2805  002EBE  6E5A               	movwf	ver_opcion_cambio@old_correct,c
  2806                           
  2807                           ;menu.c: 80: lcd_gotoxy(11,2);
  2808  002EC0  0E02               	movlw	2
  2809  002EC2  6E05               	movwf	lcd_gotoxy@y,c
  2810  002EC4  0E0B               	movlw	11
  2811  002EC6  ECD3  F01B         	call	_lcd_gotoxy
  2812                           
  2813                           ;menu.c: 81: input_new_pass();
  2814  002ECA  ECCF  F00F         	call	_input_new_pass	;wreg free
  2815                           
  2816                           ;menu.c: 82: char input = 0;
  2817  002ECE  0E00               	movlw	0
  2818  002ED0  D002               	goto	L2
  2819  002ED2                     l4827:
  2820                           
  2821                           ;menu.c: 84: input = read_keyboard();
  2822  002ED2  ECF2  F007         	call	_read_keyboard	;wreg free
  2823  002ED6                     L2:
  2824  002ED6  6E5B               	movwf	ver_opcion_cambio@input,c
  2825  002ED8  D000               	goto	l4829
  2826  002EDA                     l4829:
  2827  002EDA  0E10               	movlw	16
  2828  002EDC  185B               	xorwf	ver_opcion_cambio@input,w,c
  2829  002EDE  A4D8               	btfss	status,2,c
  2830  002EE0  D7F8               	goto	l4827
  2831                           
  2832                           ;menu.c: 85: }
  2833                           ;menu.c: 86: if (old_correct)
  2834  002EE2  505A               	movf	ver_opcion_cambio@old_correct,w,c
  2835  002EE4  B4D8               	btfsc	status,2,c
  2836  002EE6  D009               	goto	l4837
  2837                           
  2838                           ;menu.c: 87: {
  2839                           ;menu.c: 88: changePass(newpass);
  2840  002EE8  C092  F001         	movff	_newpass,changePass@pass
  2841  002EEC  C093  F002         	movff	_newpass+1,changePass@pass+1
  2842  002EF0  EC4E  F01C         	call	_changePass	;wreg free
  2843                           
  2844                           ;menu.c: 89: show_success();
  2845  002EF4  EC81  F01A         	call	_show_success	;wreg free
  2846                           
  2847                           ;menu.c: 90: }else{
  2848  002EF8  0012               	return	
  2849  002EFA                     l4837:
  2850                           
  2851                           ;menu.c: 91: show_error();
  2852  002EFA  ECA0  F01A         	call	_show_error	;wreg free
  2853  002EFE  0012               	return	
  2854  002F00  0012               	return		;funcret
  2855  002F02                     __end_of_ver_opcion_cambio:
  2856                           	opt stack 0
  2857                           tblptru	equ	0xFF8
  2858                           tblptrh	equ	0xFF7
  2859                           tblptrl	equ	0xFF6
  2860                           tablat	equ	0xFF5
  2861                           postinc0	equ	0xFEE
  2862                           wreg	equ	0xFE8
  2863                           postdec1	equ	0xFE5
  2864                           fsr1l	equ	0xFE1
  2865                           indf2	equ	0xFDF
  2866                           postinc2	equ	0xFDE
  2867                           postdec2	equ	0xFDD
  2868                           fsr2h	equ	0xFDA
  2869                           fsr2l	equ	0xFD9
  2870                           status	equ	0xFD8
  2871                           
  2872 ;; *************** function _show_success *****************
  2873 ;; Defined at:
  2874 ;;		line 36 in file "menu.c"
  2875 ;; Parameters:    Size  Location     Type
  2876 ;;		None
  2877 ;; Auto vars:     Size  Location     Type
  2878 ;;		None
  2879 ;; Return value:  Size  Location     Type
  2880 ;;		None               void
  2881 ;; Registers used:
  2882 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2883 ;; Tracked objects:
  2884 ;;		On entry : 0/0
  2885 ;;		On exit  : 0/0
  2886 ;;		Unchanged: 0/0
  2887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2891 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2892 ;;Total ram usage:        0 bytes
  2893 ;; Hardware stack levels used:    1
  2894 ;; Hardware stack levels required when called:    5
  2895 ;; This function calls:
  2896 ;;		__delay_s
  2897 ;;		_clear
  2898 ;;		_lcd_gotoxy
  2899 ;;		_lcd_putrs
  2900 ;; This function is called by:
  2901 ;;		_ver_opcion_cambio
  2902 ;; This function uses a non-reentrant model
  2903 ;;
  2904                           
  2905                           	psect	text14
  2906  003502                     __ptext14:
  2907                           	opt stack 0
  2908  003502                     _show_success:
  2909                           	opt stack 23
  2910                           
  2911                           ;menu.c: 37: clear();
  2912                           
  2913                           ;incstack = 0
  2914  003502  EC04  F01C         	call	_clear	;wreg free
  2915                           
  2916                           ;menu.c: 38: lcd_gotoxy(1,1);
  2917  003506  0E01               	movlw	1
  2918  003508  6E05               	movwf	lcd_gotoxy@y,c
  2919  00350A  0E01               	movlw	1
  2920  00350C  ECD3  F01B         	call	_lcd_gotoxy
  2921                           
  2922                           ;menu.c: 39: lcd_putrs("pass success");
  2923  003510  0E92               	movlw	low STR_19
  2924  003512  6E09               	movwf	lcd_putrs@ptr,c
  2925  003514  0E0F               	movlw	high STR_19
  2926  003516  6E0A               	movwf	lcd_putrs@ptr+1,c
  2927  003518  ECA0  F019         	call	_lcd_putrs	;wreg free
  2928                           
  2929                           ;menu.c: 40: lcd_gotoxy(1,2);
  2930  00351C  0E02               	movlw	2
  2931  00351E  6E05               	movwf	lcd_gotoxy@y,c
  2932  003520  0E01               	movlw	1
  2933  003522  ECD3  F01B         	call	_lcd_gotoxy
  2934                           
  2935                           ;menu.c: 41: lcd_putrs("changed");
  2936  003526  0E50               	movlw	low (STR_22+8)
  2937  003528  6E09               	movwf	lcd_putrs@ptr,c
  2938  00352A  0E0F               	movlw	high (STR_22+8)
  2939  00352C  6E0A               	movwf	lcd_putrs@ptr+1,c
  2940  00352E  ECA0  F019         	call	_lcd_putrs	;wreg free
  2941                           
  2942                           ;menu.c: 42: _delay_s(1000);
  2943  003532  0E03               	movlw	3
  2944  003534  6E0A               	movwf	__delay_s@millis+1,c
  2945  003536  0EE8               	movlw	232
  2946  003538  6E09               	movwf	__delay_s@millis,c
  2947  00353A  EC74  F019         	call	__delay_s	;wreg free
  2948  00353E  0012               	return		;funcret
  2949  003540                     __end_of_show_success:
  2950                           	opt stack 0
  2951                           tblptru	equ	0xFF8
  2952                           tblptrh	equ	0xFF7
  2953                           tblptrl	equ	0xFF6
  2954                           tablat	equ	0xFF5
  2955                           postinc0	equ	0xFEE
  2956                           wreg	equ	0xFE8
  2957                           postdec1	equ	0xFE5
  2958                           fsr1l	equ	0xFE1
  2959                           indf2	equ	0xFDF
  2960                           postinc2	equ	0xFDE
  2961                           postdec2	equ	0xFDD
  2962                           fsr2h	equ	0xFDA
  2963                           fsr2l	equ	0xFD9
  2964                           status	equ	0xFD8
  2965                           
  2966 ;; *************** function _show_error *****************
  2967 ;; Defined at:
  2968 ;;		line 45 in file "menu.c"
  2969 ;; Parameters:    Size  Location     Type
  2970 ;;		None
  2971 ;; Auto vars:     Size  Location     Type
  2972 ;;		None
  2973 ;; Return value:  Size  Location     Type
  2974 ;;		None               void
  2975 ;; Registers used:
  2976 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2977 ;; Tracked objects:
  2978 ;;		On entry : 0/0
  2979 ;;		On exit  : 0/0
  2980 ;;		Unchanged: 0/0
  2981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2985 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2986 ;;Total ram usage:        0 bytes
  2987 ;; Hardware stack levels used:    1
  2988 ;; Hardware stack levels required when called:    5
  2989 ;; This function calls:
  2990 ;;		__delay_s
  2991 ;;		_clear
  2992 ;;		_lcd_gotoxy
  2993 ;;		_lcd_putrs
  2994 ;; This function is called by:
  2995 ;;		_ver_opcion_cambio
  2996 ;; This function uses a non-reentrant model
  2997 ;;
  2998                           
  2999                           	psect	text15
  3000  003540                     __ptext15:
  3001                           	opt stack 0
  3002  003540                     _show_error:
  3003                           	opt stack 23
  3004                           
  3005                           ;menu.c: 46: clear();
  3006                           
  3007                           ;incstack = 0
  3008  003540  EC04  F01C         	call	_clear	;wreg free
  3009                           
  3010                           ;menu.c: 47: lcd_gotoxy(1,1);
  3011  003544  0E01               	movlw	1
  3012  003546  6E05               	movwf	lcd_gotoxy@y,c
  3013  003548  0E01               	movlw	1
  3014  00354A  ECD3  F01B         	call	_lcd_gotoxy
  3015                           
  3016                           ;menu.c: 48: lcd_putrs("old pass wrong");
  3017  00354E  0E58               	movlw	low STR_21
  3018  003550  6E09               	movwf	lcd_putrs@ptr,c
  3019  003552  0E0F               	movlw	high STR_21
  3020  003554  6E0A               	movwf	lcd_putrs@ptr+1,c
  3021  003556  ECA0  F019         	call	_lcd_putrs	;wreg free
  3022                           
  3023                           ;menu.c: 49: lcd_gotoxy(1,2);
  3024  00355A  0E02               	movlw	2
  3025  00355C  6E05               	movwf	lcd_gotoxy@y,c
  3026  00355E  0E01               	movlw	1
  3027  003560  ECD3  F01B         	call	_lcd_gotoxy
  3028                           
  3029                           ;menu.c: 50: lcd_putrs("nothing changed");
  3030  003564  0E48               	movlw	low STR_22
  3031  003566  6E09               	movwf	lcd_putrs@ptr,c
  3032  003568  0E0F               	movlw	high STR_22
  3033  00356A  6E0A               	movwf	lcd_putrs@ptr+1,c
  3034  00356C  ECA0  F019         	call	_lcd_putrs	;wreg free
  3035                           
  3036                           ;menu.c: 51: _delay_s(1000);
  3037  003570  0E03               	movlw	3
  3038  003572  6E0A               	movwf	__delay_s@millis+1,c
  3039  003574  0EE8               	movlw	232
  3040  003576  6E09               	movwf	__delay_s@millis,c
  3041  003578  EC74  F019         	call	__delay_s	;wreg free
  3042  00357C  0012               	return		;funcret
  3043  00357E                     __end_of_show_error:
  3044                           	opt stack 0
  3045                           tblptru	equ	0xFF8
  3046                           tblptrh	equ	0xFF7
  3047                           tblptrl	equ	0xFF6
  3048                           tablat	equ	0xFF5
  3049                           postinc0	equ	0xFEE
  3050                           wreg	equ	0xFE8
  3051                           postdec1	equ	0xFE5
  3052                           fsr1l	equ	0xFE1
  3053                           indf2	equ	0xFDF
  3054                           postinc2	equ	0xFDE
  3055                           postdec2	equ	0xFDD
  3056                           fsr2h	equ	0xFDA
  3057                           fsr2l	equ	0xFD9
  3058                           status	equ	0xFD8
  3059                           
  3060 ;; *************** function _input_old_pass *****************
  3061 ;; Defined at:
  3062 ;;		line 17 in file "menu.c"
  3063 ;; Parameters:    Size  Location     Type
  3064 ;;		None
  3065 ;; Auto vars:     Size  Location     Type
  3066 ;;  digit           2   20[BANK0 ] short 
  3067 ;;  pass            2   17[BANK0 ] int 
  3068 ;;  input           1   19[BANK0 ] unsigned char 
  3069 ;; Return value:  Size  Location     Type
  3070 ;;                  1    wreg      unsigned char 
  3071 ;; Registers used:
  3072 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3073 ;; Tracked objects:
  3074 ;;		On entry : 0/0
  3075 ;;		On exit  : 0/0
  3076 ;;		Unchanged: 0/0
  3077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3079 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3080 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3081 ;;      Totals:         2      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3082 ;;Total ram usage:       13 bytes
  3083 ;; Hardware stack levels used:    1
  3084 ;; Hardware stack levels required when called:    6
  3085 ;; This function calls:
  3086 ;;		___awtoft
  3087 ;;		___ftadd
  3088 ;;		___ftmul
  3089 ;;		___fttol
  3090 ;;		___lbtoft
  3091 ;;		__delay_s
  3092 ;;		_checkPass
  3093 ;;		_clear_keyboard
  3094 ;;		_lcd_gotoxy
  3095 ;;		_not_fill_pass
  3096 ;;		_pow
  3097 ;;		_read_keyboard
  3098 ;; This function is called by:
  3099 ;;		_ver_opcion_cambio
  3100 ;; This function uses a non-reentrant model
  3101 ;;
  3102                           
  3103                           	psect	text16
  3104  001BCA                     __ptext16:
  3105                           	opt stack 0
  3106  001BCA                     _input_old_pass:
  3107                           	opt stack 22
  3108                           
  3109                           ;menu.c: 18: short digit = 12;
  3110                           
  3111                           ;incstack = 0
  3112  001BCA  0E00               	movlw	0
  3113  001BCC  0100               	movlb	0	; () banked
  3114  001BCE  6FC8               	movwf	(input_old_pass@digit+1)& (0+255),b
  3115  001BD0  0E0C               	movlw	12
  3116  001BD2  6FC7               	movwf	input_old_pass@digit& (0+255),b
  3117                           
  3118                           ;menu.c: 19: int pass = 0;
  3119  001BD4  0E00               	movlw	0
  3120  001BD6  0100               	movlb	0	; () banked
  3121  001BD8  6FC5               	movwf	(input_old_pass@pass+1)& (0+255),b
  3122  001BDA  0E00               	movlw	0
  3123  001BDC  6FC4               	movwf	input_old_pass@pass& (0+255),b
  3124                           
  3125                           ; BSR set to: 0
  3126                           ;menu.c: 20: char input = read_keyboard();
  3127  001BDE  ECF2  F007         	call	_read_keyboard	;wreg free
  3128  001BE2  D083               	goto	L3
  3129  001BE4                     l4463:
  3130                           
  3131                           ;menu.c: 22: if(0<input && input<10){
  3132  001BE4  0100               	movlb	0	; () banked
  3133  001BE6  51C6               	movf	input_old_pass@input& (0+255),w,b
  3134  001BE8  0100               	movlb	0	; () banked
  3135  001BEA  B4D8               	btfsc	status,2,c
  3136  001BEC  D07C               	goto	l4483
  3137                           
  3138                           ; BSR set to: 0
  3139  001BEE  0E0A               	movlw	10
  3140  001BF0  0100               	movlb	0	; () banked
  3141  001BF2  61C6               	cpfslt	input_old_pass@input& (0+255),b
  3142  001BF4  D078               	goto	l4483
  3143                           
  3144                           ; BSR set to: 0
  3145                           ;menu.c: 23: pass = pass + input * pow(10, 15 - digit);
  3146  001BF6  C0C7  F058         	movff	input_old_pass@digit,??_input_old_pass
  3147  001BFA  C0C8  F059         	movff	input_old_pass@digit+1,??_input_old_pass+1
  3148  001BFE  1E58               	comf	??_input_old_pass,f,c
  3149  001C00  1E59               	comf	??_input_old_pass+1,f,c
  3150  001C02  4A58               	infsnz	??_input_old_pass,f,c
  3151  001C04  2A59               	incf	??_input_old_pass+1,f,c
  3152  001C06  0E0F               	movlw	15
  3153  001C08  2458               	addwf	??_input_old_pass,w,c
  3154  001C0A  6E09               	movwf	___awtoft@c,c
  3155  001C0C  0E00               	movlw	0
  3156  001C0E  2059               	addwfc	??_input_old_pass+1,w,c
  3157  001C10  6E0A               	movwf	___awtoft@c+1,c
  3158  001C12  ECBF  F01A         	call	___awtoft	;wreg free
  3159  001C16  C009  F0BE         	movff	?___awtoft,_input_old_pass$3040
  3160  001C1A  C00A  F0BF         	movff	?___awtoft+1,_input_old_pass$3040+1
  3161  001C1E  C00B  F0C0         	movff	?___awtoft+2,_input_old_pass$3040+2
  3162                           
  3163                           ;menu.c: 23: pass = pass + input * pow(10, 15 - digit);
  3164  001C22  C0BE  F055         	movff	_input_old_pass$3040,pow@y
  3165  001C26  C0BF  F056         	movff	_input_old_pass$3040+1,pow@y+1
  3166  001C2A  C0C0  F057         	movff	_input_old_pass$3040+2,pow@y+2
  3167  001C2E  0E00               	movlw	0
  3168  001C30  6E52               	movwf	pow@x,c
  3169  001C32  0E20               	movlw	32
  3170  001C34  6E53               	movwf	pow@x+1,c
  3171  001C36  0E41               	movlw	65
  3172  001C38  6E54               	movwf	pow@x+2,c
  3173  001C3A  EC24  F00D         	call	_pow	;wreg free
  3174  001C3E  C052  F0C1         	movff	?_pow,_input_old_pass$3041
  3175  001C42  C053  F0C2         	movff	?_pow+1,_input_old_pass$3041+1
  3176  001C46  C054  F0C3         	movff	?_pow+2,_input_old_pass$3041+2
  3177                           
  3178                           ;menu.c: 23: pass = pass + input * pow(10, 15 - digit);
  3179  001C4A  C0C1  F010         	movff	_input_old_pass$3041,___ftmul@f2
  3180  001C4E  C0C2  F011         	movff	_input_old_pass$3041+1,___ftmul@f2+1
  3181  001C52  C0C3  F012         	movff	_input_old_pass$3041+2,___ftmul@f2+2
  3182  001C56  0100               	movlb	0	; () banked
  3183  001C58  51C6               	movf	input_old_pass@input& (0+255),w,b
  3184  001C5A  EC9C  F01B         	call	___lbtoft
  3185  001C5E  C009  F00D         	movff	?___lbtoft,___ftmul@f1
  3186  001C62  C00A  F00E         	movff	?___lbtoft+1,___ftmul@f1+1
  3187  001C66  C00B  F00F         	movff	?___lbtoft+2,___ftmul@f1+2
  3188  001C6A  EC03  F012         	call	___ftmul	;wreg free
  3189  001C6E  C00D  F01F         	movff	?___ftmul,___ftadd@f2
  3190  001C72  C00E  F020         	movff	?___ftmul+1,___ftadd@f2+1
  3191  001C76  C00F  F021         	movff	?___ftmul+2,___ftadd@f2+2
  3192  001C7A  C0C4  F009         	movff	input_old_pass@pass,___awtoft@c
  3193  001C7E  C0C5  F00A         	movff	input_old_pass@pass+1,___awtoft@c+1
  3194  001C82  ECBF  F01A         	call	___awtoft	;wreg free
  3195  001C86  C009  F01C         	movff	?___awtoft,___ftadd@f1
  3196  001C8A  C00A  F01D         	movff	?___awtoft+1,___ftadd@f1+1
  3197  001C8E  C00B  F01E         	movff	?___awtoft+2,___ftadd@f1+2
  3198  001C92  EC74  F00B         	call	___ftadd	;wreg free
  3199  001C96  C01C  F028         	movff	?___ftadd,___fttol@f1
  3200  001C9A  C01D  F029         	movff	?___ftadd+1,___fttol@f1+1
  3201  001C9E  C01E  F02A         	movff	?___ftadd+2,___fttol@f1+2
  3202  001CA2  EC82  F011         	call	___fttol	;wreg free
  3203  001CA6  C028  F0C4         	movff	?___fttol,input_old_pass@pass
  3204  001CAA  C029  F0C5         	movff	?___fttol+1,input_old_pass@pass+1
  3205                           
  3206                           ;menu.c: 24: lcd_gotoxy(digit,1);
  3207  001CAE  0E01               	movlw	1
  3208  001CB0  6E05               	movwf	lcd_gotoxy@y,c
  3209  001CB2  0100               	movlb	0	; () banked
  3210  001CB4  51C7               	movf	input_old_pass@digit& (0+255),w,b
  3211  001CB6  ECD3  F01B         	call	_lcd_gotoxy
  3212                           
  3213                           ;menu.c: 25: _delay_s(50);
  3214  001CBA  0E00               	movlw	0
  3215  001CBC  6E0A               	movwf	__delay_s@millis+1,c
  3216  001CBE  0E32               	movlw	50
  3217  001CC0  6E09               	movwf	__delay_s@millis,c
  3218  001CC2  EC74  F019         	call	__delay_s	;wreg free
  3219                           
  3220                           ;menu.c: 26: clear_keyboard();
  3221  001CC6  EC53  F01C         	call	_clear_keyboard	;wreg free
  3222                           
  3223                           ;menu.c: 27: digit = digit +1;
  3224  001CCA  0E01               	movlw	1
  3225  001CCC  0100               	movlb	0	; () banked
  3226  001CCE  25C7               	addwf	input_old_pass@digit& (0+255),w,b
  3227  001CD0  0100               	movlb	0	; () banked
  3228  001CD2  6FC7               	movwf	input_old_pass@digit& (0+255),b
  3229  001CD4  0E00               	movlw	0
  3230  001CD6  0100               	movlb	0	; () banked
  3231  001CD8  21C8               	addwfc	(input_old_pass@digit+1)& (0+255),w,b
  3232  001CDA  0100               	movlb	0	; () banked
  3233  001CDC  6FC8               	movwf	(input_old_pass@digit+1)& (0+255),b
  3234                           
  3235                           ; BSR set to: 0
  3236                           ;menu.c: 28: input = 18;
  3237  001CDE  0E12               	movlw	18
  3238  001CE0  0100               	movlb	0	; () banked
  3239  001CE2  6FC6               	movwf	input_old_pass@input& (0+255),b
  3240  001CE4  D000               	goto	l4483
  3241  001CE6                     l4483:
  3242                           
  3243                           ; BSR set to: 0
  3244                           ;menu.c: 29: }
  3245                           ;menu.c: 31: input = read_keyboard();
  3246  001CE6  ECF2  F007         	call	_read_keyboard	;wreg free
  3247  001CEA                     L3:
  3248  001CEA  0100               	movlb	0	; () banked
  3249  001CEC  6FC6               	movwf	input_old_pass@input& (0+255),b
  3250  001CEE  D000               	goto	l4485
  3251  001CF0                     l4485:
  3252                           
  3253                           ; BSR set to: 0
  3254  001CF0  C0C7  F001         	movff	input_old_pass@digit,not_fill_pass@digit
  3255  001CF4  C0C8  F002         	movff	input_old_pass@digit+1,not_fill_pass@digit+1
  3256  001CF8  EC19  F01C         	call	_not_fill_pass	;wreg free
  3257  001CFC  0900               	iorlw	0
  3258  001CFE  A4D8               	btfss	status,2,c
  3259  001D00  D771               	goto	l4463
  3260                           
  3261                           ;menu.c: 32: }
  3262                           ;menu.c: 33: return checkPass(pass);
  3263  001D02  C0C4  F001         	movff	input_old_pass@pass,checkPass@pass
  3264  001D06  C0C5  F002         	movff	input_old_pass@pass+1,checkPass@pass+1
  3265  001D0A  ECF6  F01B         	call	_checkPass	;wreg free
  3266  001D0E  0012               	return	
  3267  001D10  0012               	return		;funcret
  3268  001D12                     __end_of_input_old_pass:
  3269                           	opt stack 0
  3270                           tblptru	equ	0xFF8
  3271                           tblptrh	equ	0xFF7
  3272                           tblptrl	equ	0xFF6
  3273                           tablat	equ	0xFF5
  3274                           postinc0	equ	0xFEE
  3275                           wreg	equ	0xFE8
  3276                           postdec1	equ	0xFE5
  3277                           fsr1l	equ	0xFE1
  3278                           indf2	equ	0xFDF
  3279                           postinc2	equ	0xFDE
  3280                           postdec2	equ	0xFDD
  3281                           fsr2h	equ	0xFDA
  3282                           fsr2l	equ	0xFD9
  3283                           status	equ	0xFD8
  3284                           
  3285 ;; *************** function _checkPass *****************
  3286 ;; Defined at:
  3287 ;;		line 3 in file "config.c"
  3288 ;; Parameters:    Size  Location     Type
  3289 ;;  pass            2    0[COMRAM] int 
  3290 ;; Auto vars:     Size  Location     Type
  3291 ;;		None
  3292 ;; Return value:  Size  Location     Type
  3293 ;;                  1    wreg      unsigned char 
  3294 ;; Registers used:
  3295 ;;		wreg, status,2, status,0
  3296 ;; Tracked objects:
  3297 ;;		On entry : 0/0
  3298 ;;		On exit  : 0/0
  3299 ;;		Unchanged: 0/0
  3300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3301 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3304 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3305 ;;Total ram usage:        2 bytes
  3306 ;; Hardware stack levels used:    1
  3307 ;; This function calls:
  3308 ;;		Nothing
  3309 ;; This function is called by:
  3310 ;;		_review_code
  3311 ;;		_input_old_pass
  3312 ;; This function uses a non-reentrant model
  3313 ;;
  3314                           
  3315                           	psect	text17
  3316  0037EC                     __ptext17:
  3317                           	opt stack 0
  3318  0037EC                     _checkPass:
  3319                           	opt stack 27
  3320                           
  3321                           ;config.c: 4: return password == pass;
  3322                           
  3323                           ;incstack = 0
  3324  0037EC  5001               	movf	checkPass@pass,w,c
  3325  0037EE  0100               	movlb	0	; () banked
  3326  0037F0  19D5               	xorwf	_password& (0+255),w,b
  3327  0037F2  E107               	bnz	u3840
  3328  0037F4  5002               	movf	checkPass@pass+1,w,c
  3329  0037F6  0100               	movlb	0	; () banked
  3330  0037F8  19D6               	xorwf	(_password+1)& (0+255),w,b
  3331  0037FA  A4D8               	btfss	status,2,c
  3332  0037FC  D002               	goto	u3840
  3333  0037FE  0E01               	movlw	1
  3334  003800  0012               	return	
  3335  003802                     u3840:
  3336  003802  0E00               	movlw	0
  3337  003804  0012               	return	
  3338                           
  3339                           ; BSR set to: 0
  3340                           
  3341                           ; BSR set to: 0
  3342  003806  0012               	return		;funcret
  3343  003808                     __end_of_checkPass:
  3344                           	opt stack 0
  3345                           tblptru	equ	0xFF8
  3346                           tblptrh	equ	0xFF7
  3347                           tblptrl	equ	0xFF6
  3348                           tablat	equ	0xFF5
  3349                           postinc0	equ	0xFEE
  3350                           wreg	equ	0xFE8
  3351                           postdec1	equ	0xFE5
  3352                           fsr1l	equ	0xFE1
  3353                           indf2	equ	0xFDF
  3354                           postinc2	equ	0xFDE
  3355                           postdec2	equ	0xFDD
  3356                           fsr2h	equ	0xFDA
  3357                           fsr2l	equ	0xFD9
  3358                           status	equ	0xFD8
  3359                           
  3360 ;; *************** function _input_new_pass *****************
  3361 ;; Defined at:
  3362 ;;		line 54 in file "menu.c"
  3363 ;; Parameters:    Size  Location     Type
  3364 ;;		None
  3365 ;; Auto vars:     Size  Location     Type
  3366 ;;  digit           2   18[BANK0 ] short 
  3367 ;;  input           1   17[BANK0 ] unsigned char 
  3368 ;; Return value:  Size  Location     Type
  3369 ;;		None               void
  3370 ;; Registers used:
  3371 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3372 ;; Tracked objects:
  3373 ;;		On entry : 0/0
  3374 ;;		On exit  : 0/0
  3375 ;;		Unchanged: 0/0
  3376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3378 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3379 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3380 ;;      Totals:         2       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3381 ;;Total ram usage:       11 bytes
  3382 ;; Hardware stack levels used:    1
  3383 ;; Hardware stack levels required when called:    6
  3384 ;; This function calls:
  3385 ;;		___awtoft
  3386 ;;		___ftadd
  3387 ;;		___ftmul
  3388 ;;		___fttol
  3389 ;;		___lbtoft
  3390 ;;		__delay_s
  3391 ;;		_clear_keyboard
  3392 ;;		_lcd_gotoxy
  3393 ;;		_not_fill_pass
  3394 ;;		_pow
  3395 ;;		_read_keyboard
  3396 ;; This function is called by:
  3397 ;;		_ver_opcion_cambio
  3398 ;; This function uses a non-reentrant model
  3399 ;;
  3400                           
  3401                           	psect	text18
  3402  001F9E                     __ptext18:
  3403                           	opt stack 0
  3404  001F9E                     _input_new_pass:
  3405                           	opt stack 22
  3406                           
  3407                           ;menu.c: 55: short digit = 12;
  3408                           
  3409                           ; BSR set to: 0
  3410                           ;incstack = 0
  3411  001F9E  0E00               	movlw	0
  3412  001FA0  0100               	movlb	0	; () banked
  3413  001FA2  6FC6               	movwf	(input_new_pass@digit+1)& (0+255),b
  3414  001FA4  0E0C               	movlw	12
  3415  001FA6  6FC5               	movwf	input_new_pass@digit& (0+255),b
  3416                           
  3417                           ;menu.c: 56: newpass = 0;
  3418  001FA8  0E00               	movlw	0
  3419  001FAA  0100               	movlb	0	; () banked
  3420  001FAC  6F93               	movwf	(_newpass+1)& (0+255),b
  3421  001FAE  0E00               	movlw	0
  3422  001FB0  6F92               	movwf	_newpass& (0+255),b
  3423                           
  3424                           ; BSR set to: 0
  3425                           ;menu.c: 57: char input = read_keyboard();
  3426  001FB2  ECF2  F007         	call	_read_keyboard	;wreg free
  3427  001FB6  D083               	goto	L4
  3428  001FB8                     l4511:
  3429                           
  3430                           ;menu.c: 59: if(0<input && input<10){
  3431  001FB8  0100               	movlb	0	; () banked
  3432  001FBA  51C4               	movf	input_new_pass@input& (0+255),w,b
  3433  001FBC  0100               	movlb	0	; () banked
  3434  001FBE  B4D8               	btfsc	status,2,c
  3435  001FC0  D07C               	goto	l4531
  3436                           
  3437                           ; BSR set to: 0
  3438  001FC2  0E0A               	movlw	10
  3439  001FC4  0100               	movlb	0	; () banked
  3440  001FC6  61C4               	cpfslt	input_new_pass@input& (0+255),b
  3441  001FC8  D078               	goto	l4531
  3442                           
  3443                           ; BSR set to: 0
  3444                           ;menu.c: 60: newpass = newpass + input * pow(10, 15 - digit);
  3445  001FCA  C0C5  F058         	movff	input_new_pass@digit,??_input_new_pass
  3446  001FCE  C0C6  F059         	movff	input_new_pass@digit+1,??_input_new_pass+1
  3447  001FD2  1E58               	comf	??_input_new_pass,f,c
  3448  001FD4  1E59               	comf	??_input_new_pass+1,f,c
  3449  001FD6  4A58               	infsnz	??_input_new_pass,f,c
  3450  001FD8  2A59               	incf	??_input_new_pass+1,f,c
  3451  001FDA  0E0F               	movlw	15
  3452  001FDC  2458               	addwf	??_input_new_pass,w,c
  3453  001FDE  6E09               	movwf	___awtoft@c,c
  3454  001FE0  0E00               	movlw	0
  3455  001FE2  2059               	addwfc	??_input_new_pass+1,w,c
  3456  001FE4  6E0A               	movwf	___awtoft@c+1,c
  3457  001FE6  ECBF  F01A         	call	___awtoft	;wreg free
  3458  001FEA  C009  F0BE         	movff	?___awtoft,_input_new_pass$3042
  3459  001FEE  C00A  F0BF         	movff	?___awtoft+1,_input_new_pass$3042+1
  3460  001FF2  C00B  F0C0         	movff	?___awtoft+2,_input_new_pass$3042+2
  3461                           
  3462                           ;menu.c: 60: newpass = newpass + input * pow(10, 15 - digit);
  3463  001FF6  C0BE  F055         	movff	_input_new_pass$3042,pow@y
  3464  001FFA  C0BF  F056         	movff	_input_new_pass$3042+1,pow@y+1
  3465  001FFE  C0C0  F057         	movff	_input_new_pass$3042+2,pow@y+2
  3466  002002  0E00               	movlw	0
  3467  002004  6E52               	movwf	pow@x,c
  3468  002006  0E20               	movlw	32
  3469  002008  6E53               	movwf	pow@x+1,c
  3470  00200A  0E41               	movlw	65
  3471  00200C  6E54               	movwf	pow@x+2,c
  3472  00200E  EC24  F00D         	call	_pow	;wreg free
  3473  002012  C052  F0C1         	movff	?_pow,_input_new_pass$3043
  3474  002016  C053  F0C2         	movff	?_pow+1,_input_new_pass$3043+1
  3475  00201A  C054  F0C3         	movff	?_pow+2,_input_new_pass$3043+2
  3476                           
  3477                           ;menu.c: 60: newpass = newpass + input * pow(10, 15 - digit);
  3478  00201E  C0C1  F010         	movff	_input_new_pass$3043,___ftmul@f2
  3479  002022  C0C2  F011         	movff	_input_new_pass$3043+1,___ftmul@f2+1
  3480  002026  C0C3  F012         	movff	_input_new_pass$3043+2,___ftmul@f2+2
  3481  00202A  0100               	movlb	0	; () banked
  3482  00202C  51C4               	movf	input_new_pass@input& (0+255),w,b
  3483  00202E  EC9C  F01B         	call	___lbtoft
  3484  002032  C009  F00D         	movff	?___lbtoft,___ftmul@f1
  3485  002036  C00A  F00E         	movff	?___lbtoft+1,___ftmul@f1+1
  3486  00203A  C00B  F00F         	movff	?___lbtoft+2,___ftmul@f1+2
  3487  00203E  EC03  F012         	call	___ftmul	;wreg free
  3488  002042  C00D  F01F         	movff	?___ftmul,___ftadd@f2
  3489  002046  C00E  F020         	movff	?___ftmul+1,___ftadd@f2+1
  3490  00204A  C00F  F021         	movff	?___ftmul+2,___ftadd@f2+2
  3491  00204E  C092  F009         	movff	_newpass,___awtoft@c
  3492  002052  C093  F00A         	movff	_newpass+1,___awtoft@c+1
  3493  002056  ECBF  F01A         	call	___awtoft	;wreg free
  3494  00205A  C009  F01C         	movff	?___awtoft,___ftadd@f1
  3495  00205E  C00A  F01D         	movff	?___awtoft+1,___ftadd@f1+1
  3496  002062  C00B  F01E         	movff	?___awtoft+2,___ftadd@f1+2
  3497  002066  EC74  F00B         	call	___ftadd	;wreg free
  3498  00206A  C01C  F028         	movff	?___ftadd,___fttol@f1
  3499  00206E  C01D  F029         	movff	?___ftadd+1,___fttol@f1+1
  3500  002072  C01E  F02A         	movff	?___ftadd+2,___fttol@f1+2
  3501  002076  EC82  F011         	call	___fttol	;wreg free
  3502  00207A  C028  F092         	movff	?___fttol,_newpass
  3503  00207E  C029  F093         	movff	?___fttol+1,_newpass+1
  3504                           
  3505                           ;menu.c: 61: lcd_gotoxy(digit,2);
  3506  002082  0E02               	movlw	2
  3507  002084  6E05               	movwf	lcd_gotoxy@y,c
  3508  002086  0100               	movlb	0	; () banked
  3509  002088  51C5               	movf	input_new_pass@digit& (0+255),w,b
  3510  00208A  ECD3  F01B         	call	_lcd_gotoxy
  3511                           
  3512                           ;menu.c: 62: _delay_s(50);
  3513  00208E  0E00               	movlw	0
  3514  002090  6E0A               	movwf	__delay_s@millis+1,c
  3515  002092  0E32               	movlw	50
  3516  002094  6E09               	movwf	__delay_s@millis,c
  3517  002096  EC74  F019         	call	__delay_s	;wreg free
  3518                           
  3519                           ;menu.c: 63: clear_keyboard();
  3520  00209A  EC53  F01C         	call	_clear_keyboard	;wreg free
  3521                           
  3522                           ;menu.c: 64: digit = digit +1;
  3523  00209E  0E01               	movlw	1
  3524  0020A0  0100               	movlb	0	; () banked
  3525  0020A2  25C5               	addwf	input_new_pass@digit& (0+255),w,b
  3526  0020A4  0100               	movlb	0	; () banked
  3527  0020A6  6FC5               	movwf	input_new_pass@digit& (0+255),b
  3528  0020A8  0E00               	movlw	0
  3529  0020AA  0100               	movlb	0	; () banked
  3530  0020AC  21C6               	addwfc	(input_new_pass@digit+1)& (0+255),w,b
  3531  0020AE  0100               	movlb	0	; () banked
  3532  0020B0  6FC6               	movwf	(input_new_pass@digit+1)& (0+255),b
  3533                           
  3534                           ; BSR set to: 0
  3535                           ;menu.c: 65: input = 18;
  3536  0020B2  0E12               	movlw	18
  3537  0020B4  0100               	movlb	0	; () banked
  3538  0020B6  6FC4               	movwf	input_new_pass@input& (0+255),b
  3539  0020B8  D000               	goto	l4531
  3540  0020BA                     l4531:
  3541                           
  3542                           ; BSR set to: 0
  3543                           ;menu.c: 66: }
  3544                           ;menu.c: 67: input = read_keyboard();
  3545  0020BA  ECF2  F007         	call	_read_keyboard	;wreg free
  3546  0020BE                     L4:
  3547  0020BE  0100               	movlb	0	; () banked
  3548  0020C0  6FC4               	movwf	input_new_pass@input& (0+255),b
  3549  0020C2  D000               	goto	l4533
  3550  0020C4                     l4533:
  3551                           
  3552                           ; BSR set to: 0
  3553  0020C4  C0C5  F001         	movff	input_new_pass@digit,not_fill_pass@digit
  3554  0020C8  C0C6  F002         	movff	input_new_pass@digit+1,not_fill_pass@digit+1
  3555  0020CC  EC19  F01C         	call	_not_fill_pass	;wreg free
  3556  0020D0  0900               	iorlw	0
  3557  0020D2  A4D8               	btfss	status,2,c
  3558  0020D4  D771               	goto	l4511
  3559  0020D6  0012               	return		;funcret
  3560  0020D8                     __end_of_input_new_pass:
  3561                           	opt stack 0
  3562                           tblptru	equ	0xFF8
  3563                           tblptrh	equ	0xFF7
  3564                           tblptrl	equ	0xFF6
  3565                           tablat	equ	0xFF5
  3566                           postinc0	equ	0xFEE
  3567                           wreg	equ	0xFE8
  3568                           postdec1	equ	0xFE5
  3569                           fsr1l	equ	0xFE1
  3570                           indf2	equ	0xFDF
  3571                           postinc2	equ	0xFDE
  3572                           postdec2	equ	0xFDD
  3573                           fsr2h	equ	0xFDA
  3574                           fsr2l	equ	0xFD9
  3575                           status	equ	0xFD8
  3576                           
  3577 ;; *************** function _pow *****************
  3578 ;; Defined at:
  3579 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\pow.c"
  3580 ;; Parameters:    Size  Location     Type
  3581 ;;  x               3   81[COMRAM] unsigned char 
  3582 ;;  y               3   84[COMRAM] unsigned char 
  3583 ;; Auto vars:     Size  Location     Type
  3584 ;;  yi              4    7[BANK0 ] unsigned long 
  3585 ;;  sign            1    6[BANK0 ] unsigned char 
  3586 ;; Return value:  Size  Location     Type
  3587 ;;                  3   81[COMRAM] unsigned char 
  3588 ;; Registers used:
  3589 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3590 ;; Tracked objects:
  3591 ;;		On entry : 0/0
  3592 ;;		On exit  : 0/0
  3593 ;;		Unchanged: 0/0
  3594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3595 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3596 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3598 ;;      Totals:         6      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3599 ;;Total ram usage:       17 bytes
  3600 ;; Hardware stack levels used:    1
  3601 ;; Hardware stack levels required when called:    4
  3602 ;; This function calls:
  3603 ;;		___ftge
  3604 ;;		___ftmul
  3605 ;;		___ftneg
  3606 ;;		___fttol
  3607 ;;		___lltoft
  3608 ;;		_exp
  3609 ;;		_log
  3610 ;; This function is called by:
  3611 ;;		_obtain_pass
  3612 ;;		_input_old_pass
  3613 ;;		_input_new_pass
  3614 ;; This function uses a non-reentrant model
  3615 ;;
  3616                           
  3617                           	psect	text19
  3618  001A48                     __ptext19:
  3619                           	opt stack 0
  3620  001A48                     _pow:
  3621                           	opt stack 23
  3622                           
  3623                           ;incstack = 0
  3624  001A48  0E00               	movlw	0
  3625  001A4A  0100               	movlb	0	; () banked
  3626  001A4C  6FB9               	movwf	pow@sign& (0+255),b
  3627                           
  3628                           ; BSR set to: 0
  3629  001A4E  5052               	movf	pow@x,w,c
  3630  001A50  1053               	iorwf	pow@x+1,w,c
  3631  001A52  1054               	iorwf	pow@x+2,w,c
  3632  001A54  A4D8               	btfss	status,2,c
  3633  001A56  D01C               	goto	l4271
  3634                           
  3635                           ; BSR set to: 0
  3636  001A58  0E00               	movlw	0
  3637  001A5A  6E01               	movwf	___ftge@ff1,c
  3638  001A5C  0E00               	movlw	0
  3639  001A5E  6E02               	movwf	___ftge@ff1+1,c
  3640  001A60  0E00               	movlw	0
  3641  001A62  6E03               	movwf	___ftge@ff1+2,c
  3642  001A64  C055  F004         	movff	pow@y,___ftge@ff2
  3643  001A68  C056  F005         	movff	pow@y+1,___ftge@ff2+1
  3644  001A6C  C057  F006         	movff	pow@y+2,___ftge@ff2+2
  3645  001A70  ECD1  F015         	call	___ftge	;wreg free
  3646  001A74  A0D8               	btfss	status,0,c
  3647  001A76  D005               	goto	l1648
  3648  001A78  0E00               	movlw	0
  3649  001A7A  0100               	movlb	0	; () banked
  3650  001A7C  6F85               	movwf	(_errno+1)& (0+255),b
  3651  001A7E  0E21               	movlw	33
  3652  001A80  6F84               	movwf	_errno& (0+255),b
  3653  001A82                     l1648:
  3654  001A82  0E00               	movlw	0
  3655  001A84  6E52               	movwf	?_pow,c
  3656  001A86  0E00               	movlw	0
  3657  001A88  6E53               	movwf	?_pow+1,c
  3658  001A8A  0E00               	movlw	0
  3659  001A8C  6E54               	movwf	?_pow+2,c
  3660  001A8E  0012               	return	
  3661  001A90                     l4271:
  3662  001A90  5055               	movf	pow@y,w,c
  3663  001A92  1056               	iorwf	pow@y+1,w,c
  3664  001A94  1057               	iorwf	pow@y+2,w,c
  3665  001A96  A4D8               	btfss	status,2,c
  3666  001A98  D007               	goto	l4277
  3667  001A9A  0E00               	movlw	0
  3668  001A9C  6E52               	movwf	?_pow,c
  3669  001A9E  0E80               	movlw	128
  3670  001AA0  6E53               	movwf	?_pow+1,c
  3671  001AA2  0E3F               	movlw	63
  3672  001AA4  6E54               	movwf	?_pow+2,c
  3673  001AA6  0012               	return	
  3674  001AA8                     l4277:
  3675  001AA8  AE54               	btfss	pow@x+2,7,c
  3676  001AAA  D044               	goto	l4289
  3677  001AAC  C055  F028         	movff	pow@y,___fttol@f1
  3678  001AB0  C056  F029         	movff	pow@y+1,___fttol@f1+1
  3679  001AB4  C057  F02A         	movff	pow@y+2,___fttol@f1+2
  3680  001AB8  EC82  F011         	call	___fttol	;wreg free
  3681  001ABC  C028  F0BA         	movff	?___fttol,pow@yi
  3682  001AC0  C029  F0BB         	movff	?___fttol+1,pow@yi+1
  3683  001AC4  C02A  F0BC         	movff	?___fttol+2,pow@yi+2
  3684  001AC8  C02B  F0BD         	movff	?___fttol+3,pow@yi+3
  3685  001ACC  C0BA  F009         	movff	pow@yi,___lltoft@c
  3686  001AD0  C0BB  F00A         	movff	pow@yi+1,___lltoft@c+1
  3687  001AD4  C0BC  F00B         	movff	pow@yi+2,___lltoft@c+2
  3688  001AD8  C0BD  F00C         	movff	pow@yi+3,___lltoft@c+3
  3689  001ADC  EC16  F019         	call	___lltoft	;wreg free
  3690  001AE0  5055               	movf	pow@y,w,c
  3691  001AE2  1809               	xorwf	?___lltoft,w,c
  3692  001AE4  E107               	bnz	u3900
  3693  001AE6  5056               	movf	pow@y+1,w,c
  3694  001AE8  180A               	xorwf	?___lltoft+1,w,c
  3695  001AEA  E104               	bnz	u3900
  3696  001AEC  5057               	movf	pow@y+2,w,c
  3697  001AEE  180B               	xorwf	?___lltoft+2,w,c
  3698  001AF0  B4D8               	btfsc	status,2,c
  3699  001AF2  D00C               	goto	l4285
  3700  001AF4                     u3900:
  3701  001AF4  0E00               	movlw	0
  3702  001AF6  0100               	movlb	0	; () banked
  3703  001AF8  6F85               	movwf	(_errno+1)& (0+255),b
  3704  001AFA  0E21               	movlw	33
  3705  001AFC  6F84               	movwf	_errno& (0+255),b
  3706  001AFE  0E00               	movlw	0
  3707  001B00  6E52               	movwf	?_pow,c
  3708  001B02  0E00               	movlw	0
  3709  001B04  6E53               	movwf	?_pow+1,c
  3710  001B06  0E00               	movlw	0
  3711  001B08  6E54               	movwf	?_pow+2,c
  3712                           
  3713                           ; BSR set to: 0
  3714  001B0A  0012               	return	
  3715  001B0C                     l4285:
  3716  001B0C  0100               	movlb	0	; () banked
  3717  001B0E  51BA               	movf	pow@yi& (0+255),w,b
  3718  001B10  0B01               	andlw	1
  3719  001B12  0100               	movlb	0	; () banked
  3720  001B14  6FB9               	movwf	pow@sign& (0+255),b
  3721                           
  3722                           ; BSR set to: 0
  3723  001B16  C052  F001         	movff	pow@x,___ftneg@f1
  3724  001B1A  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  3725  001B1E  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  3726  001B22  ECC1  F01B         	call	___ftneg	;wreg free
  3727  001B26  C001  F052         	movff	?___ftneg,pow@x
  3728  001B2A  C002  F053         	movff	?___ftneg+1,pow@x+1
  3729  001B2E  C003  F054         	movff	?___ftneg+2,pow@x+2
  3730  001B32  D000               	goto	l4289
  3731  001B34                     l4289:
  3732  001B34  C052  F034         	movff	pow@x,log@x
  3733  001B38  C053  F035         	movff	pow@x+1,log@x+1
  3734  001B3C  C054  F036         	movff	pow@x+2,log@x+2
  3735  001B40  EC6C  F010         	call	_log	;wreg free
  3736  001B44  C034  F0B3         	movff	?_log,_pow$3044
  3737  001B48  C035  F0B4         	movff	?_log+1,_pow$3044+1
  3738  001B4C  C036  F0B5         	movff	?_log+2,_pow$3044+2
  3739  001B50  C0B3  F00D         	movff	_pow$3044,___ftmul@f1
  3740  001B54  C0B4  F00E         	movff	_pow$3044+1,___ftmul@f1+1
  3741  001B58  C0B5  F00F         	movff	_pow$3044+2,___ftmul@f1+2
  3742  001B5C  C055  F010         	movff	pow@y,___ftmul@f2
  3743  001B60  C056  F011         	movff	pow@y+1,___ftmul@f2+1
  3744  001B64  C057  F012         	movff	pow@y+2,___ftmul@f2+2
  3745  001B68  EC03  F012         	call	___ftmul	;wreg free
  3746  001B6C  C00D  F0B6         	movff	?___ftmul,_pow$3045
  3747  001B70  C00E  F0B7         	movff	?___ftmul+1,_pow$3045+1
  3748  001B74  C00F  F0B8         	movff	?___ftmul+2,_pow$3045+2
  3749  001B78  C0B6  F049         	movff	_pow$3045,exp@x
  3750  001B7C  C0B7  F04A         	movff	_pow$3045+1,exp@x+1
  3751  001B80  C0B8  F04B         	movff	_pow$3045+2,exp@x+2
  3752  001B84  EC80  F00A         	call	_exp	;wreg free
  3753  001B88  C049  F052         	movff	?_exp,pow@x
  3754  001B8C  C04A  F053         	movff	?_exp+1,pow@x+1
  3755  001B90  C04B  F054         	movff	?_exp+2,pow@x+2
  3756  001B94  0100               	movlb	0	; () banked
  3757  001B96  51B9               	movf	pow@sign& (0+255),w,b
  3758  001B98  0100               	movlb	0	; () banked
  3759  001B9A  B4D8               	btfsc	status,2,c
  3760  001B9C  D00F               	goto	l1653
  3761                           
  3762                           ; BSR set to: 0
  3763  001B9E  C052  F001         	movff	pow@x,___ftneg@f1
  3764  001BA2  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  3765  001BA6  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  3766  001BAA  ECC1  F01B         	call	___ftneg	;wreg free
  3767  001BAE  C001  F052         	movff	?___ftneg,?_pow
  3768  001BB2  C002  F053         	movff	?___ftneg+1,?_pow+1
  3769  001BB6  C003  F054         	movff	?___ftneg+2,?_pow+2
  3770  001BBA  0012               	return	
  3771  001BBC                     l1653:
  3772                           
  3773                           ; BSR set to: 0
  3774  001BBC  C052  F052         	movff	pow@x,?_pow
  3775  001BC0  C053  F053         	movff	pow@x+1,?_pow+1
  3776  001BC4  C054  F054         	movff	pow@x+2,?_pow+2
  3777  001BC8  0012               	return		;funcret
  3778  001BCA                     __end_of_pow:
  3779                           	opt stack 0
  3780                           tblptru	equ	0xFF8
  3781                           tblptrh	equ	0xFF7
  3782                           tblptrl	equ	0xFF6
  3783                           tablat	equ	0xFF5
  3784                           postinc0	equ	0xFEE
  3785                           wreg	equ	0xFE8
  3786                           postdec1	equ	0xFE5
  3787                           fsr1l	equ	0xFE1
  3788                           indf2	equ	0xFDF
  3789                           postinc2	equ	0xFDE
  3790                           postdec2	equ	0xFDD
  3791                           fsr2h	equ	0xFDA
  3792                           fsr2l	equ	0xFD9
  3793                           status	equ	0xFD8
  3794                           
  3795 ;; *************** function _log *****************
  3796 ;; Defined at:
  3797 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\log.c"
  3798 ;; Parameters:    Size  Location     Type
  3799 ;;  x               3   51[COMRAM] unsigned char 
  3800 ;; Auto vars:     Size  Location     Type
  3801 ;;  exponent        2   54[COMRAM] int 
  3802 ;; Return value:  Size  Location     Type
  3803 ;;                  3   51[COMRAM] int 
  3804 ;; Registers used:
  3805 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3806 ;; Tracked objects:
  3807 ;;		On entry : 0/0
  3808 ;;		On exit  : 0/0
  3809 ;;		Unchanged: 0/0
  3810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3811 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3812 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3814 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3815 ;;Total ram usage:        5 bytes
  3816 ;; Hardware stack levels used:    1
  3817 ;; Hardware stack levels required when called:    3
  3818 ;; This function calls:
  3819 ;;		___awtoft
  3820 ;;		___ftadd
  3821 ;;		___ftmul
  3822 ;;		_eval_poly
  3823 ;;		_frexp
  3824 ;; This function is called by:
  3825 ;;		_pow
  3826 ;; This function uses a non-reentrant model
  3827 ;;
  3828                           
  3829                           	psect	text20
  3830  0020D8                     __ptext20:
  3831                           	opt stack 0
  3832  0020D8                     _log:
  3833                           	opt stack 23
  3834                           
  3835                           ;incstack = 0
  3836  0020D8  AE36               	btfss	log@x+2,7,c
  3837  0020DA  D00C               	goto	l4079
  3838  0020DC  0E00               	movlw	0
  3839  0020DE  0100               	movlb	0	; () banked
  3840  0020E0  6F85               	movwf	(_errno+1)& (0+255),b
  3841  0020E2  0E21               	movlw	33
  3842  0020E4  6F84               	movwf	_errno& (0+255),b
  3843  0020E6  0E00               	movlw	0
  3844  0020E8  6E34               	movwf	?_log,c
  3845  0020EA  0E00               	movlw	0
  3846  0020EC  6E35               	movwf	?_log+1,c
  3847  0020EE  0E00               	movlw	0
  3848  0020F0  6E36               	movwf	?_log+2,c
  3849                           
  3850                           ; BSR set to: 0
  3851  0020F2  0012               	return	
  3852  0020F4                     l4079:
  3853  0020F4  5034               	movf	log@x,w,c
  3854  0020F6  1035               	iorwf	log@x+1,w,c
  3855  0020F8  1036               	iorwf	log@x+2,w,c
  3856  0020FA  A4D8               	btfss	status,2,c
  3857  0020FC  D00C               	goto	l4085
  3858  0020FE  0E00               	movlw	0
  3859  002100  0100               	movlb	0	; () banked
  3860  002102  6F85               	movwf	(_errno+1)& (0+255),b
  3861  002104  0E22               	movlw	34
  3862  002106  6F84               	movwf	_errno& (0+255),b
  3863  002108  0E00               	movlw	0
  3864  00210A  6E34               	movwf	?_log,c
  3865  00210C  0E00               	movlw	0
  3866  00210E  6E35               	movwf	?_log+1,c
  3867  002110  0E00               	movlw	0
  3868  002112  6E36               	movwf	?_log+2,c
  3869                           
  3870                           ; BSR set to: 0
  3871  002114  0012               	return	
  3872  002116                     l4085:
  3873  002116  0E00               	movlw	0
  3874  002118  6E10               	movwf	___ftmul@f2,c
  3875  00211A  0E00               	movlw	0
  3876  00211C  6E11               	movwf	___ftmul@f2+1,c
  3877  00211E  0E40               	movlw	64
  3878  002120  6E12               	movwf	___ftmul@f2+2,c
  3879  002122  0E37               	movlw	low log@exponent
  3880  002124  6E04               	movwf	frexp@eptr,c
  3881  002126  0E00               	movlw	high log@exponent
  3882  002128  6E05               	movwf	frexp@eptr+1,c
  3883  00212A  C034  F001         	movff	log@x,frexp@value
  3884  00212E  C035  F002         	movff	log@x+1,frexp@value+1
  3885  002132  C036  F003         	movff	log@x+2,frexp@value+2
  3886  002136  EC67  F016         	call	_frexp	;wreg free
  3887  00213A  C001  F00D         	movff	?_frexp,___ftmul@f1
  3888  00213E  C002  F00E         	movff	?_frexp+1,___ftmul@f1+1
  3889  002142  C003  F00F         	movff	?_frexp+2,___ftmul@f1+2
  3890  002146  EC03  F012         	call	___ftmul	;wreg free
  3891  00214A  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  3892  00214E  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  3893  002152  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  3894  002156  0E00               	movlw	0
  3895  002158  6E1F               	movwf	___ftadd@f2,c
  3896  00215A  0E80               	movlw	128
  3897  00215C  6E20               	movwf	___ftadd@f2+1,c
  3898  00215E  0EBF               	movlw	191
  3899  002160  6E21               	movwf	___ftadd@f2+2,c
  3900  002162  EC74  F00B         	call	___ftadd	;wreg free
  3901  002166  C01C  F034         	movff	?___ftadd,log@x
  3902  00216A  C01D  F035         	movff	?___ftadd+1,log@x+1
  3903  00216E  C01E  F036         	movff	?___ftadd+2,log@x+2
  3904  002172  0637               	decf	log@exponent,f,c
  3905  002174  A0D8               	btfss	status,0,c
  3906  002176  0638               	decf	log@exponent+1,f,c
  3907  002178  C034  F028         	movff	log@x,eval_poly@x
  3908  00217C  C035  F029         	movff	log@x+1,eval_poly@x+1
  3909  002180  C036  F02A         	movff	log@x+2,eval_poly@x+2
  3910  002184  0E2D               	movlw	low log@coeff
  3911  002186  6E2B               	movwf	eval_poly@d,c
  3912  002188  0E0F               	movlw	high log@coeff
  3913  00218A  6E2C               	movwf	eval_poly@d+1,c
  3914  00218C  0E00               	movlw	0
  3915  00218E  6E2E               	movwf	eval_poly@n+1,c
  3916  002190  0E08               	movlw	8
  3917  002192  6E2D               	movwf	eval_poly@n,c
  3918  002194  ECB8  F014         	call	_eval_poly	;wreg free
  3919  002198  C028  F034         	movff	?_eval_poly,log@x
  3920  00219C  C029  F035         	movff	?_eval_poly+1,log@x+1
  3921  0021A0  C02A  F036         	movff	?_eval_poly+2,log@x+2
  3922  0021A4  0E72               	movlw	114
  3923  0021A6  6E10               	movwf	___ftmul@f2,c
  3924  0021A8  0E31               	movlw	49
  3925  0021AA  6E11               	movwf	___ftmul@f2+1,c
  3926  0021AC  0E3F               	movlw	63
  3927  0021AE  6E12               	movwf	___ftmul@f2+2,c
  3928  0021B0  C037  F009         	movff	log@exponent,___awtoft@c
  3929  0021B4  C038  F00A         	movff	log@exponent+1,___awtoft@c+1
  3930  0021B8  ECBF  F01A         	call	___awtoft	;wreg free
  3931  0021BC  C009  F00D         	movff	?___awtoft,___ftmul@f1
  3932  0021C0  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  3933  0021C4  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  3934  0021C8  EC03  F012         	call	___ftmul	;wreg free
  3935  0021CC  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  3936  0021D0  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  3937  0021D4  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  3938  0021D8  C034  F01F         	movff	log@x,___ftadd@f2
  3939  0021DC  C035  F020         	movff	log@x+1,___ftadd@f2+1
  3940  0021E0  C036  F021         	movff	log@x+2,___ftadd@f2+2
  3941  0021E4  EC74  F00B         	call	___ftadd	;wreg free
  3942  0021E8  C01C  F034         	movff	?___ftadd,?_log
  3943  0021EC  C01D  F035         	movff	?___ftadd+1,?_log+1
  3944  0021F0  C01E  F036         	movff	?___ftadd+2,?_log+2
  3945  0021F4  0012               	return	
  3946  0021F6  0012               	return		;funcret
  3947  0021F8                     __end_of_log:
  3948                           	opt stack 0
  3949                           tblptru	equ	0xFF8
  3950                           tblptrh	equ	0xFF7
  3951                           tblptrl	equ	0xFF6
  3952                           tablat	equ	0xFF5
  3953                           postinc0	equ	0xFEE
  3954                           wreg	equ	0xFE8
  3955                           postdec1	equ	0xFE5
  3956                           fsr1l	equ	0xFE1
  3957                           indf2	equ	0xFDF
  3958                           postinc2	equ	0xFDE
  3959                           postdec2	equ	0xFDD
  3960                           fsr2h	equ	0xFDA
  3961                           fsr2l	equ	0xFD9
  3962                           status	equ	0xFD8
  3963                           
  3964 ;; *************** function _exp *****************
  3965 ;; Defined at:
  3966 ;;		line 12 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\exp.c"
  3967 ;; Parameters:    Size  Location     Type
  3968 ;;  x               3   72[COMRAM] int 
  3969 ;; Auto vars:     Size  Location     Type
  3970 ;;  exponent        2   78[COMRAM] int 
  3971 ;;  sign            1   80[COMRAM] unsigned char 
  3972 ;; Return value:  Size  Location     Type
  3973 ;;                  3   72[COMRAM] unsigned char 
  3974 ;; Registers used:
  3975 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3976 ;; Tracked objects:
  3977 ;;		On entry : 0/0
  3978 ;;		On exit  : 0/0
  3979 ;;		Unchanged: 0/0
  3980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3981 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3982 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3984 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3985 ;;Total ram usage:        9 bytes
  3986 ;; Hardware stack levels used:    1
  3987 ;; Hardware stack levels required when called:    3
  3988 ;; This function calls:
  3989 ;;		___awtoft
  3990 ;;		___ftdiv
  3991 ;;		___ftge
  3992 ;;		___ftmul
  3993 ;;		___ftneg
  3994 ;;		___ftsub
  3995 ;;		___fttol
  3996 ;;		_eval_poly
  3997 ;;		_floor
  3998 ;;		_ldexp
  3999 ;; This function is called by:
  4000 ;;		_pow
  4001 ;; This function uses a non-reentrant model
  4002 ;;
  4003                           
  4004                           	psect	text21
  4005  001500                     __ptext21:
  4006                           	opt stack 0
  4007  001500                     _exp:
  4008                           	opt stack 23
  4009                           
  4010                           ;incstack = 0
  4011  001500  5049               	movf	exp@x,w,c
  4012  001502  104A               	iorwf	exp@x+1,w,c
  4013  001504  104B               	iorwf	exp@x+2,w,c
  4014  001506  A4D8               	btfss	status,2,c
  4015  001508  D007               	goto	l4101
  4016  00150A  0E00               	movlw	0
  4017  00150C  6E49               	movwf	?_exp,c
  4018  00150E  0E80               	movlw	128
  4019  001510  6E4A               	movwf	?_exp+1,c
  4020  001512  0E3F               	movlw	63
  4021  001514  6E4B               	movwf	?_exp+2,c
  4022  001516  0012               	return	
  4023  001518                     l4101:
  4024  001518  0E72               	movlw	114
  4025  00151A  6E01               	movwf	___ftge@ff1,c
  4026  00151C  0E31               	movlw	49
  4027  00151E  6E02               	movwf	___ftge@ff1+1,c
  4028  001520  0E44               	movlw	68
  4029  001522  6E03               	movwf	___ftge@ff1+2,c
  4030  001524  C049  F004         	movff	exp@x,___ftge@ff2
  4031  001528  C04A  F005         	movff	exp@x+1,___ftge@ff2+1
  4032  00152C  C04B  F006         	movff	exp@x+2,___ftge@ff2+2
  4033  001530  ECD1  F015         	call	___ftge	;wreg free
  4034  001534  B0D8               	btfsc	status,0,c
  4035  001536  D00C               	goto	l4107
  4036  001538  0E00               	movlw	0
  4037  00153A  0100               	movlb	0	; () banked
  4038  00153C  6F85               	movwf	(_errno+1)& (0+255),b
  4039  00153E  0E22               	movlw	34
  4040  001540  6F84               	movwf	_errno& (0+255),b
  4041  001542  0EFF               	movlw	255
  4042  001544  6E49               	movwf	?_exp,c
  4043  001546  0E7F               	movlw	127
  4044  001548  6E4A               	movwf	?_exp+1,c
  4045  00154A  0E7F               	movlw	127
  4046  00154C  6E4B               	movwf	?_exp+2,c
  4047                           
  4048                           ; BSR set to: 0
  4049  00154E  0012               	return	
  4050  001550                     l4107:
  4051  001550  C049  F001         	movff	exp@x,___ftge@ff1
  4052  001554  C04A  F002         	movff	exp@x+1,___ftge@ff1+1
  4053  001558  C04B  F003         	movff	exp@x+2,___ftge@ff1+2
  4054  00155C  0E49               	movlw	73
  4055  00155E  6E04               	movwf	___ftge@ff2,c
  4056  001560  0E3A               	movlw	58
  4057  001562  6E05               	movwf	___ftge@ff2+1,c
  4058  001564  0EC4               	movlw	196
  4059  001566  6E06               	movwf	___ftge@ff2+2,c
  4060  001568  ECD1  F015         	call	___ftge	;wreg free
  4061  00156C  B0D8               	btfsc	status,0,c
  4062  00156E  D00C               	goto	l4113
  4063  001570  0E00               	movlw	0
  4064  001572  0100               	movlb	0	; () banked
  4065  001574  6F85               	movwf	(_errno+1)& (0+255),b
  4066  001576  0E22               	movlw	34
  4067  001578  6F84               	movwf	_errno& (0+255),b
  4068  00157A  0E00               	movlw	0
  4069  00157C  6E49               	movwf	?_exp,c
  4070  00157E  0E00               	movlw	0
  4071  001580  6E4A               	movwf	?_exp+1,c
  4072  001582  0E00               	movlw	0
  4073  001584  6E4B               	movwf	?_exp+2,c
  4074                           
  4075                           ; BSR set to: 0
  4076  001586  0012               	return	
  4077  001588                     l4113:
  4078  001588  AE4B               	btfss	exp@x+2,7,c
  4079  00158A  D002               	goto	u3440
  4080  00158C  0E01               	movlw	1
  4081  00158E  D001               	goto	u3450
  4082  001590                     u3440:
  4083  001590  0E00               	movlw	0
  4084  001592                     u3450:
  4085  001592  6E51               	movwf	exp@sign,c
  4086  001594  5051               	movf	exp@sign,w,c
  4087  001596  B4D8               	btfsc	status,2,c
  4088  001598  D00E               	goto	l1672
  4089  00159A  C049  F001         	movff	exp@x,___ftneg@f1
  4090  00159E  C04A  F002         	movff	exp@x+1,___ftneg@f1+1
  4091  0015A2  C04B  F003         	movff	exp@x+2,___ftneg@f1+2
  4092  0015A6  ECC1  F01B         	call	___ftneg	;wreg free
  4093  0015AA  C001  F049         	movff	?___ftneg,exp@x
  4094  0015AE  C002  F04A         	movff	?___ftneg+1,exp@x+1
  4095  0015B2  C003  F04B         	movff	?___ftneg+2,exp@x+2
  4096  0015B6                     l1672:
  4097  0015B6  C049  F00D         	movff	exp@x,___ftmul@f1
  4098  0015BA  C04A  F00E         	movff	exp@x+1,___ftmul@f1+1
  4099  0015BE  C04B  F00F         	movff	exp@x+2,___ftmul@f1+2
  4100  0015C2  0EAA               	movlw	170
  4101  0015C4  6E10               	movwf	___ftmul@f2,c
  4102  0015C6  0EB8               	movlw	184
  4103  0015C8  6E11               	movwf	___ftmul@f2+1,c
  4104  0015CA  0E3F               	movlw	63
  4105  0015CC  6E12               	movwf	___ftmul@f2+2,c
  4106  0015CE  EC03  F012         	call	___ftmul	;wreg free
  4107  0015D2  C00D  F049         	movff	?___ftmul,exp@x
  4108  0015D6  C00E  F04A         	movff	?___ftmul+1,exp@x+1
  4109  0015DA  C00F  F04B         	movff	?___ftmul+2,exp@x+2
  4110  0015DE  C049  F041         	movff	exp@x,floor@x
  4111  0015E2  C04A  F042         	movff	exp@x+1,floor@x+1
  4112  0015E6  C04B  F043         	movff	exp@x+2,floor@x+2
  4113  0015EA  EC70  F013         	call	_floor	;wreg free
  4114  0015EE  C041  F04C         	movff	?_floor,_exp$3046
  4115  0015F2  C042  F04D         	movff	?_floor+1,_exp$3046+1
  4116  0015F6  C043  F04E         	movff	?_floor+2,_exp$3046+2
  4117  0015FA  C04C  F028         	movff	_exp$3046,___fttol@f1
  4118  0015FE  C04D  F029         	movff	_exp$3046+1,___fttol@f1+1
  4119  001602  C04E  F02A         	movff	_exp$3046+2,___fttol@f1+2
  4120  001606  EC82  F011         	call	___fttol	;wreg free
  4121  00160A  C028  F04F         	movff	?___fttol,exp@exponent
  4122  00160E  C029  F050         	movff	?___fttol+1,exp@exponent+1
  4123  001612  C049  F028         	movff	exp@x,___ftsub@f1
  4124  001616  C04A  F029         	movff	exp@x+1,___ftsub@f1+1
  4125  00161A  C04B  F02A         	movff	exp@x+2,___ftsub@f1+2
  4126  00161E  C04F  F009         	movff	exp@exponent,___awtoft@c
  4127  001622  C050  F00A         	movff	exp@exponent+1,___awtoft@c+1
  4128  001626  ECBF  F01A         	call	___awtoft	;wreg free
  4129  00162A  C009  F02B         	movff	?___awtoft,___ftsub@f2
  4130  00162E  C00A  F02C         	movff	?___awtoft+1,___ftsub@f2+1
  4131  001632  C00B  F02D         	movff	?___awtoft+2,___ftsub@f2+2
  4132  001636  EC5F  F01A         	call	___ftsub	;wreg free
  4133  00163A  C028  F049         	movff	?___ftsub,exp@x
  4134  00163E  C029  F04A         	movff	?___ftsub+1,exp@x+1
  4135  001642  C02A  F04B         	movff	?___ftsub+2,exp@x+2
  4136  001646  C049  F028         	movff	exp@x,eval_poly@x
  4137  00164A  C04A  F029         	movff	exp@x+1,eval_poly@x+1
  4138  00164E  C04B  F02A         	movff	exp@x+2,eval_poly@x+2
  4139  001652  0E0F               	movlw	low exp@coeff
  4140  001654  6E2B               	movwf	eval_poly@d,c
  4141  001656  0E0F               	movlw	high exp@coeff
  4142  001658  6E2C               	movwf	eval_poly@d+1,c
  4143  00165A  0E00               	movlw	0
  4144  00165C  6E2E               	movwf	eval_poly@n+1,c
  4145  00165E  0E09               	movlw	9
  4146  001660  6E2D               	movwf	eval_poly@n,c
  4147  001662  ECB8  F014         	call	_eval_poly	;wreg free
  4148  001666  C028  F034         	movff	?_eval_poly,ldexp@value
  4149  00166A  C029  F035         	movff	?_eval_poly+1,ldexp@value+1
  4150  00166E  C02A  F036         	movff	?_eval_poly+2,ldexp@value+2
  4151  001672  C04F  F037         	movff	exp@exponent,ldexp@newexp
  4152  001676  C050  F038         	movff	exp@exponent+1,ldexp@newexp+1
  4153  00167A  EC4E  F014         	call	_ldexp	;wreg free
  4154  00167E  C034  F049         	movff	?_ldexp,exp@x
  4155  001682  C035  F04A         	movff	?_ldexp+1,exp@x+1
  4156  001686  C036  F04B         	movff	?_ldexp+2,exp@x+2
  4157  00168A  5051               	movf	exp@sign,w,c
  4158  00168C  B4D8               	btfsc	status,2,c
  4159  00168E  D025               	goto	l1673
  4160  001690  2849               	incf	exp@x,w,c
  4161  001692  E10E               	bnz	l4135
  4162  001694  0E7F               	movlw	127
  4163  001696  184A               	xorwf	exp@x+1,w,c
  4164  001698  E10B               	bnz	l4135
  4165  00169A  0E7F               	movlw	127
  4166  00169C  184B               	xorwf	exp@x+2,w,c
  4167  00169E  A4D8               	btfss	status,2,c
  4168  0016A0  D007               	goto	l4135
  4169  0016A2  0E00               	movlw	0
  4170  0016A4  6E49               	movwf	?_exp,c
  4171  0016A6  0E00               	movlw	0
  4172  0016A8  6E4A               	movwf	?_exp+1,c
  4173  0016AA  0E00               	movlw	0
  4174  0016AC  6E4B               	movwf	?_exp+2,c
  4175  0016AE  0012               	return	
  4176  0016B0                     l4135:
  4177  0016B0  0E00               	movlw	0
  4178  0016B2  6E09               	movwf	___ftdiv@f1,c
  4179  0016B4  0E80               	movlw	128
  4180  0016B6  6E0A               	movwf	___ftdiv@f1+1,c
  4181  0016B8  0E3F               	movlw	63
  4182  0016BA  6E0B               	movwf	___ftdiv@f1+2,c
  4183  0016BC  C049  F00C         	movff	exp@x,___ftdiv@f2
  4184  0016C0  C04A  F00D         	movff	exp@x+1,___ftdiv@f2+1
  4185  0016C4  C04B  F00E         	movff	exp@x+2,___ftdiv@f2+2
  4186  0016C8  ECFA  F012         	call	___ftdiv	;wreg free
  4187  0016CC  C009  F049         	movff	?___ftdiv,?_exp
  4188  0016D0  C00A  F04A         	movff	?___ftdiv+1,?_exp+1
  4189  0016D4  C00B  F04B         	movff	?___ftdiv+2,?_exp+2
  4190  0016D8  0012               	return	
  4191  0016DA                     l1673:
  4192  0016DA  C049  F049         	movff	exp@x,?_exp
  4193  0016DE  C04A  F04A         	movff	exp@x+1,?_exp+1
  4194  0016E2  C04B  F04B         	movff	exp@x+2,?_exp+2
  4195  0016E6  0012               	return		;funcret
  4196  0016E8                     __end_of_exp:
  4197                           	opt stack 0
  4198                           tblptru	equ	0xFF8
  4199                           tblptrh	equ	0xFF7
  4200                           tblptrl	equ	0xFF6
  4201                           tablat	equ	0xFF5
  4202                           postinc0	equ	0xFEE
  4203                           wreg	equ	0xFE8
  4204                           postdec1	equ	0xFE5
  4205                           fsr1l	equ	0xFE1
  4206                           indf2	equ	0xFDF
  4207                           postinc2	equ	0xFDE
  4208                           postdec2	equ	0xFDD
  4209                           fsr2h	equ	0xFDA
  4210                           fsr2l	equ	0xFD9
  4211                           status	equ	0xFD8
  4212                           
  4213 ;; *************** function _ldexp *****************
  4214 ;; Defined at:
  4215 ;;		line 277 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\frexp.c"
  4216 ;; Parameters:    Size  Location     Type
  4217 ;;  value           3   51[COMRAM] unsigned char 
  4218 ;;  newexp          2   54[COMRAM] int 
  4219 ;; Auto vars:     Size  Location     Type
  4220 ;;		None
  4221 ;; Return value:  Size  Location     Type
  4222 ;;                  3   51[COMRAM] int 
  4223 ;; Registers used:
  4224 ;;		wreg, status,2, status,0
  4225 ;; Tracked objects:
  4226 ;;		On entry : 0/0
  4227 ;;		On exit  : 0/0
  4228 ;;		Unchanged: 0/0
  4229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4230 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4232 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4233 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4234 ;;Total ram usage:        7 bytes
  4235 ;; Hardware stack levels used:    1
  4236 ;; This function calls:
  4237 ;;		Nothing
  4238 ;; This function is called by:
  4239 ;;		_exp
  4240 ;; This function uses a non-reentrant model
  4241 ;;
  4242                           
  4243                           	psect	text22
  4244  00289C                     __ptext22:
  4245                           	opt stack 0
  4246  00289C                     _ldexp:
  4247                           	opt stack 25
  4248                           
  4249                           ;incstack = 0
  4250  00289C  5034               	movf	ldexp@value,w,c
  4251  00289E  1035               	iorwf	ldexp@value+1,w,c
  4252  0028A0  1036               	iorwf	ldexp@value+2,w,c
  4253  0028A2  A4D8               	btfss	status,2,c
  4254  0028A4  D007               	goto	l3887
  4255  0028A6  0E00               	movlw	0
  4256  0028A8  6E34               	movwf	?_ldexp,c
  4257  0028AA  0E00               	movlw	0
  4258  0028AC  6E35               	movwf	?_ldexp+1,c
  4259  0028AE  0E00               	movlw	0
  4260  0028B0  6E36               	movwf	?_ldexp+2,c
  4261  0028B2  0012               	return	
  4262  0028B4                     l3887:
  4263  0028B4  5036               	movf	ldexp@value+2,w,c
  4264  0028B6  0B7F               	andlw	127
  4265  0028B8  6E39               	movwf	??_ldexp& (0+255),c
  4266  0028BA  6A3A               	clrf	(??_ldexp+1)& (0+255),c
  4267  0028BC  90D8               	bcf	status,0,c
  4268  0028BE  3639               	rlcf	??_ldexp,f,c
  4269  0028C0  363A               	rlcf	??_ldexp+1,f,c
  4270  0028C2  5039               	movf	??_ldexp,w,c
  4271  0028C4  2637               	addwf	ldexp@newexp,f,c
  4272  0028C6  503A               	movf	??_ldexp+1,w,c
  4273  0028C8  2238               	addwfc	ldexp@newexp+1,f,c
  4274  0028CA  AE35               	btfss	ldexp@value+1,7,c
  4275  0028CC  D003               	goto	u3110
  4276  0028CE  6A39               	clrf	??_ldexp& (0+255),c
  4277  0028D0  2A39               	incf	??_ldexp& (0+255),f,c
  4278  0028D2  D001               	goto	u3118
  4279  0028D4                     u3110:
  4280  0028D4  6A39               	clrf	??_ldexp& (0+255),c
  4281  0028D6                     u3118:
  4282  0028D6  5039               	movf	??_ldexp,w,c
  4283  0028D8  2637               	addwf	ldexp@newexp,f,c
  4284  0028DA  0E00               	movlw	0
  4285  0028DC  2238               	addwfc	ldexp@newexp+1,f,c
  4286  0028DE  AE38               	btfss	ldexp@newexp+1,7,c
  4287  0028E0  D00D               	goto	l3895
  4288  0028E2  0E00               	movlw	0
  4289  0028E4  0100               	movlb	0	; () banked
  4290  0028E6  6F85               	movwf	(_errno+1)& (0+255),b
  4291  0028E8  0E22               	movlw	34
  4292  0028EA  6F84               	movwf	_errno& (0+255),b
  4293  0028EC  0E00               	movlw	0
  4294  0028EE  6E34               	movwf	?_ldexp,c
  4295  0028F0  0E00               	movlw	0
  4296  0028F2  6E35               	movwf	?_ldexp+1,c
  4297  0028F4  0E00               	movlw	0
  4298  0028F6                     L5:
  4299  0028F6  6E36               	movwf	?_ldexp+2,c
  4300                           
  4301                           ; BSR set to: 0
  4302  0028F8  0012               	return	
  4303                           
  4304                           ; BSR set to: 0
  4305  0028FA  D032               	goto	l3913
  4306  0028FC                     l3895:
  4307  0028FC  BE38               	btfsc	ldexp@newexp+1,7,c
  4308  0028FE  D01A               	goto	l3911
  4309  002900  0438               	decf	ldexp@newexp+1,w,c
  4310  002902  A0D8               	btfss	status,0,c
  4311  002904  D017               	goto	l3911
  4312  002906  0E00               	movlw	0
  4313  002908  0100               	movlb	0	; () banked
  4314  00290A  6F85               	movwf	(_errno+1)& (0+255),b
  4315  00290C  0E22               	movlw	34
  4316  00290E  6F84               	movwf	_errno& (0+255),b
  4317                           
  4318                           ; BSR set to: 0
  4319  002910  AE36               	btfss	ldexp@value+2,7,c
  4320  002912  D008               	goto	l3907
  4321                           
  4322                           ; BSR set to: 0
  4323  002914  0EFF               	movlw	255
  4324  002916  6E34               	movwf	?_ldexp,c
  4325  002918  0E7F               	movlw	127
  4326  00291A  6E35               	movwf	?_ldexp+1,c
  4327  00291C  0EFF               	movlw	255
  4328  00291E  D7EB               	goto	L5
  4329                           
  4330                           ; BSR set to: 0
  4331  002920  0012               	return	
  4332                           
  4333                           ; BSR set to: 0
  4334  002922  D01E               	goto	l3913
  4335  002924                     l3907:
  4336                           
  4337                           ; BSR set to: 0
  4338  002924  0EFF               	movlw	255
  4339  002926  6E34               	movwf	?_ldexp,c
  4340  002928  0E7F               	movlw	127
  4341  00292A  6E35               	movwf	?_ldexp+1,c
  4342  00292C  0E7F               	movlw	127
  4343  00292E  D7E3               	goto	L5
  4344                           
  4345                           ; BSR set to: 0
  4346  002930  0012               	return	
  4347                           
  4348                           ; BSR set to: 0
  4349  002932  D016               	goto	l3913
  4350  002934                     l3911:
  4351  002934  3438               	rlcf	ldexp@newexp+1,w,c
  4352  002936  3038               	rrcf	ldexp@newexp+1,w,c
  4353  002938  6E3A               	movwf	(??_ldexp+1)& (0+255),c
  4354  00293A  3037               	rrcf	ldexp@newexp,w,c
  4355  00293C  6E39               	movwf	??_ldexp& (0+255),c
  4356  00293E  5036               	movf	ldexp@value+2,w,c
  4357  002940  1839               	xorwf	??_ldexp,w,c
  4358  002942  0B80               	andlw	-128
  4359  002944  1839               	xorwf	??_ldexp,w,c
  4360  002946  6E36               	movwf	ldexp@value+2,c
  4361  002948  C037  F039         	movff	ldexp@newexp,??_ldexp
  4362  00294C  0E01               	movlw	1
  4363  00294E  1639               	andwf	??_ldexp,f,c
  4364  002950  3239               	rrcf	??_ldexp,f,c
  4365  002952  3239               	rrcf	??_ldexp,f,c
  4366  002954  5035               	movf	ldexp@value+1,w,c
  4367  002956  1839               	xorwf	??_ldexp,w,c
  4368  002958  0B7F               	andlw	-129
  4369  00295A  1839               	xorwf	??_ldexp,w,c
  4370  00295C  6E35               	movwf	ldexp@value+1,c
  4371  00295E  D000               	goto	l3913
  4372  002960                     l3913:
  4373  002960  C034  F034         	movff	ldexp@value,?_ldexp
  4374  002964  C035  F035         	movff	ldexp@value+1,?_ldexp+1
  4375  002968  C036  F036         	movff	ldexp@value+2,?_ldexp+2
  4376  00296C  0012               	return	
  4377  00296E  0012               	return		;funcret
  4378  002970                     __end_of_ldexp:
  4379                           	opt stack 0
  4380                           tblptru	equ	0xFF8
  4381                           tblptrh	equ	0xFF7
  4382                           tblptrl	equ	0xFF6
  4383                           tablat	equ	0xFF5
  4384                           postinc0	equ	0xFEE
  4385                           wreg	equ	0xFE8
  4386                           postdec1	equ	0xFE5
  4387                           fsr1l	equ	0xFE1
  4388                           indf2	equ	0xFDF
  4389                           postinc2	equ	0xFDE
  4390                           postdec2	equ	0xFDD
  4391                           fsr2h	equ	0xFDA
  4392                           fsr2l	equ	0xFD9
  4393                           status	equ	0xFD8
  4394                           
  4395 ;; *************** function _floor *****************
  4396 ;; Defined at:
  4397 ;;		line 13 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\floor.c"
  4398 ;; Parameters:    Size  Location     Type
  4399 ;;  x               3   64[COMRAM] int 
  4400 ;; Auto vars:     Size  Location     Type
  4401 ;;  i               3   67[COMRAM] int 
  4402 ;;  expon           2   70[COMRAM] int 
  4403 ;; Return value:  Size  Location     Type
  4404 ;;                  3   64[COMRAM] int 
  4405 ;; Registers used:
  4406 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4407 ;; Tracked objects:
  4408 ;;		On entry : 0/0
  4409 ;;		On exit  : 0/0
  4410 ;;		Unchanged: 0/0
  4411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4412 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4413 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4415 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4416 ;;Total ram usage:        8 bytes
  4417 ;; Hardware stack levels used:    1
  4418 ;; Hardware stack levels required when called:    2
  4419 ;; This function calls:
  4420 ;;		___altoft
  4421 ;;		___ftadd
  4422 ;;		___ftge
  4423 ;;		___fttol
  4424 ;;		_frexp
  4425 ;; This function is called by:
  4426 ;;		_exp
  4427 ;; This function uses a non-reentrant model
  4428 ;;
  4429                           
  4430                           	psect	text23
  4431  0026E0                     __ptext23:
  4432                           	opt stack 0
  4433  0026E0                     _floor:
  4434                           	opt stack 23
  4435                           
  4436                           ;incstack = 0
  4437  0026E0  C041  F001         	movff	floor@x,frexp@value
  4438  0026E4  C042  F002         	movff	floor@x+1,frexp@value+1
  4439  0026E8  C043  F003         	movff	floor@x+2,frexp@value+2
  4440  0026EC  0E47               	movlw	low floor@expon
  4441  0026EE  6E04               	movwf	frexp@eptr,c
  4442  0026F0  0E00               	movlw	high floor@expon
  4443  0026F2  6E05               	movwf	frexp@eptr+1,c
  4444  0026F4  EC67  F016         	call	_frexp	;wreg free
  4445  0026F8  AE48               	btfss	floor@expon+1,7,c
  4446  0026FA  D010               	goto	l3865
  4447  0026FC  AE43               	btfss	floor@x+2,7,c
  4448  0026FE  D007               	goto	l3861
  4449  002700  0E00               	movlw	0
  4450  002702  6E41               	movwf	?_floor,c
  4451  002704  0E80               	movlw	128
  4452  002706  6E42               	movwf	?_floor+1,c
  4453  002708  0EBF               	movlw	191
  4454  00270A  6E43               	movwf	?_floor+2,c
  4455  00270C  0012               	return	
  4456  00270E                     l3861:
  4457  00270E  0E00               	movlw	0
  4458  002710  6E41               	movwf	?_floor,c
  4459  002712  0E00               	movlw	0
  4460  002714  6E42               	movwf	?_floor+1,c
  4461  002716  0E00               	movlw	0
  4462  002718  6E43               	movwf	?_floor+2,c
  4463  00271A  0012               	return	
  4464  00271C                     l3865:
  4465  00271C  5048               	movf	floor@expon+1,w,c
  4466  00271E  E104               	bnz	u3070
  4467  002720  0E15               	movlw	21
  4468  002722  5C47               	subwf	floor@expon,w,c
  4469  002724  A0D8               	btfss	status,0,c
  4470  002726  D007               	goto	l3869
  4471  002728                     u3070:
  4472  002728  C041  F041         	movff	floor@x,?_floor
  4473  00272C  C042  F042         	movff	floor@x+1,?_floor+1
  4474  002730  C043  F043         	movff	floor@x+2,?_floor+2
  4475  002734  0012               	return	
  4476  002736                     l3869:
  4477  002736  C041  F028         	movff	floor@x,___fttol@f1
  4478  00273A  C042  F029         	movff	floor@x+1,___fttol@f1+1
  4479  00273E  C043  F02A         	movff	floor@x+2,___fttol@f1+2
  4480  002742  EC82  F011         	call	___fttol	;wreg free
  4481  002746  C028  F037         	movff	?___fttol,___altoft@c
  4482  00274A  C029  F038         	movff	?___fttol+1,___altoft@c+1
  4483  00274E  C02A  F039         	movff	?___fttol+2,___altoft@c+2
  4484  002752  C02B  F03A         	movff	?___fttol+3,___altoft@c+3
  4485  002756  EC00  F018         	call	___altoft	;wreg free
  4486  00275A  C037  F044         	movff	?___altoft,floor@i
  4487  00275E  C038  F045         	movff	?___altoft+1,floor@i+1
  4488  002762  C039  F046         	movff	?___altoft+2,floor@i+2
  4489  002766  C041  F001         	movff	floor@x,___ftge@ff1
  4490  00276A  C042  F002         	movff	floor@x+1,___ftge@ff1+1
  4491  00276E  C043  F003         	movff	floor@x+2,___ftge@ff1+2
  4492  002772  C044  F004         	movff	floor@i,___ftge@ff2
  4493  002776  C045  F005         	movff	floor@i+1,___ftge@ff2+1
  4494  00277A  C046  F006         	movff	floor@i+2,___ftge@ff2+2
  4495  00277E  ECD1  F015         	call	___ftge	;wreg free
  4496  002782  B0D8               	btfsc	status,0,c
  4497  002784  D015               	goto	l1683
  4498  002786  C044  F01C         	movff	floor@i,___ftadd@f1
  4499  00278A  C045  F01D         	movff	floor@i+1,___ftadd@f1+1
  4500  00278E  C046  F01E         	movff	floor@i+2,___ftadd@f1+2
  4501  002792  0E00               	movlw	0
  4502  002794  6E1F               	movwf	___ftadd@f2,c
  4503  002796  0E80               	movlw	128
  4504  002798  6E20               	movwf	___ftadd@f2+1,c
  4505  00279A  0EBF               	movlw	191
  4506  00279C  6E21               	movwf	___ftadd@f2+2,c
  4507  00279E  EC74  F00B         	call	___ftadd	;wreg free
  4508  0027A2  C01C  F041         	movff	?___ftadd,?_floor
  4509  0027A6  C01D  F042         	movff	?___ftadd+1,?_floor+1
  4510  0027AA  C01E  F043         	movff	?___ftadd+2,?_floor+2
  4511  0027AE  0012               	return	
  4512  0027B0                     l1683:
  4513  0027B0  C044  F041         	movff	floor@i,?_floor
  4514  0027B4  C045  F042         	movff	floor@i+1,?_floor+1
  4515  0027B8  C046  F043         	movff	floor@i+2,?_floor+2
  4516  0027BC  0012               	return		;funcret
  4517  0027BE                     __end_of_floor:
  4518                           	opt stack 0
  4519                           tblptru	equ	0xFF8
  4520                           tblptrh	equ	0xFF7
  4521                           tblptrl	equ	0xFF6
  4522                           tablat	equ	0xFF5
  4523                           postinc0	equ	0xFEE
  4524                           wreg	equ	0xFE8
  4525                           postdec1	equ	0xFE5
  4526                           fsr1l	equ	0xFE1
  4527                           indf2	equ	0xFDF
  4528                           postinc2	equ	0xFDE
  4529                           postdec2	equ	0xFDD
  4530                           fsr2h	equ	0xFDA
  4531                           fsr2l	equ	0xFD9
  4532                           status	equ	0xFD8
  4533                           
  4534 ;; *************** function _frexp *****************
  4535 ;; Defined at:
  4536 ;;		line 254 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\frexp.c"
  4537 ;; Parameters:    Size  Location     Type
  4538 ;;  value           3    0[COMRAM] int 
  4539 ;;  eptr            2    3[COMRAM] PTR int 
  4540 ;;		 -> log@exponent(2), floor@expon(2), 
  4541 ;; Auto vars:     Size  Location     Type
  4542 ;;		None
  4543 ;; Return value:  Size  Location     Type
  4544 ;;                  3    0[COMRAM] PTR int 
  4545 ;; Registers used:
  4546 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4547 ;; Tracked objects:
  4548 ;;		On entry : 0/0
  4549 ;;		On exit  : 0/0
  4550 ;;		Unchanged: 0/0
  4551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4552 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4553 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4554 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4555 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4556 ;;Total ram usage:        7 bytes
  4557 ;; Hardware stack levels used:    1
  4558 ;; This function calls:
  4559 ;;		Nothing
  4560 ;; This function is called by:
  4561 ;;		_floor
  4562 ;;		_log
  4563 ;; This function uses a non-reentrant model
  4564 ;;
  4565                           
  4566                           	psect	text24
  4567  002CCE                     __ptext24:
  4568                           	opt stack 0
  4569  002CCE                     _frexp:
  4570                           	opt stack 25
  4571                           
  4572                           ;incstack = 0
  4573  002CCE  5001               	movf	frexp@value,w,c
  4574  002CD0  1002               	iorwf	frexp@value+1,w,c
  4575  002CD2  1003               	iorwf	frexp@value+2,w,c
  4576  002CD4  A4D8               	btfss	status,2,c
  4577  002CD6  D00F               	goto	l3705
  4578  002CD8  C004  FFD9         	movff	frexp@eptr,fsr2l
  4579  002CDC  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  4580  002CE0  0E00               	movlw	0
  4581  002CE2  6EDE               	movwf	postinc2,c
  4582  002CE4  0E00               	movlw	0
  4583  002CE6  6EDD               	movwf	postdec2,c
  4584  002CE8  0E00               	movlw	0
  4585  002CEA  6E01               	movwf	?_frexp,c
  4586  002CEC  0E00               	movlw	0
  4587  002CEE  6E02               	movwf	?_frexp+1,c
  4588  002CF0  0E00               	movlw	0
  4589  002CF2  6E03               	movwf	?_frexp+2,c
  4590  002CF4  0012               	return	
  4591  002CF6                     l3705:
  4592  002CF6  5003               	movf	frexp@value+2,w,c
  4593  002CF8  0B7F               	andlw	127
  4594  002CFA  6E06               	movwf	??_frexp& (0+255),c
  4595  002CFC  6A07               	clrf	(??_frexp+1)& (0+255),c
  4596  002CFE  90D8               	bcf	status,0,c
  4597  002D00  3606               	rlcf	??_frexp,f,c
  4598  002D02  3607               	rlcf	??_frexp+1,f,c
  4599  002D04  C004  FFD9         	movff	frexp@eptr,fsr2l
  4600  002D08  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  4601  002D0C  C006  FFDE         	movff	??_frexp,postinc2
  4602  002D10  C007  FFDD         	movff	??_frexp+1,postdec2
  4603  002D14  AE02               	btfss	frexp@value+1,7,c
  4604  002D16  D003               	goto	u2880
  4605  002D18  6A06               	clrf	??_frexp& (0+255),c
  4606  002D1A  2A06               	incf	??_frexp& (0+255),f,c
  4607  002D1C  D001               	goto	u2888
  4608  002D1E                     u2880:
  4609  002D1E  6A06               	clrf	??_frexp& (0+255),c
  4610  002D20                     u2888:
  4611  002D20  5006               	movf	??_frexp,w,c
  4612  002D22  C004  FFD9         	movff	frexp@eptr,fsr2l
  4613  002D26  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  4614  002D2A  12DE               	iorwf	postinc2,f,c
  4615  002D2C  0E00               	movlw	0
  4616  002D2E  12DD               	iorwf	postdec2,f,c
  4617  002D30  C004  FFD9         	movff	frexp@eptr,fsr2l
  4618  002D34  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  4619  002D38  0E82               	movlw	130
  4620  002D3A  26DE               	addwf	postinc2,f,c
  4621  002D3C  0EFF               	movlw	255
  4622  002D3E  22DD               	addwfc	postdec2,f,c
  4623  002D40  8003               	bsf	frexp@value+2,0,c
  4624  002D42  8203               	bsf	frexp@value+2,1,c
  4625  002D44  8403               	bsf	frexp@value+2,2,c
  4626  002D46  8603               	bsf	frexp@value+2,3,c
  4627  002D48  8803               	bsf	frexp@value+2,4,c
  4628  002D4A  8A03               	bsf	frexp@value+2,5,c
  4629  002D4C  9C03               	bcf	frexp@value+2,6,c
  4630  002D4E  9E02               	bcf	frexp@value+1,7,c
  4631  002D50  C001  F001         	movff	frexp@value,?_frexp
  4632  002D54  C002  F002         	movff	frexp@value+1,?_frexp+1
  4633  002D58  C003  F003         	movff	frexp@value+2,?_frexp+2
  4634  002D5C  0012               	return	
  4635  002D5E  0012               	return		;funcret
  4636  002D60                     __end_of_frexp:
  4637                           	opt stack 0
  4638                           tblptru	equ	0xFF8
  4639                           tblptrh	equ	0xFF7
  4640                           tblptrl	equ	0xFF6
  4641                           tablat	equ	0xFF5
  4642                           postinc0	equ	0xFEE
  4643                           wreg	equ	0xFE8
  4644                           postdec1	equ	0xFE5
  4645                           fsr1l	equ	0xFE1
  4646                           indf2	equ	0xFDF
  4647                           postinc2	equ	0xFDE
  4648                           postdec2	equ	0xFDD
  4649                           fsr2h	equ	0xFDA
  4650                           fsr2l	equ	0xFD9
  4651                           status	equ	0xFD8
  4652                           
  4653 ;; *************** function ___fttol *****************
  4654 ;; Defined at:
  4655 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\fttol.c"
  4656 ;; Parameters:    Size  Location     Type
  4657 ;;  f1              3   39[COMRAM] float 
  4658 ;; Auto vars:     Size  Location     Type
  4659 ;;  lval            4   49[COMRAM] unsigned long 
  4660 ;;  exp1            1   53[COMRAM] unsigned char 
  4661 ;;  sign1           1   48[COMRAM] unsigned char 
  4662 ;; Return value:  Size  Location     Type
  4663 ;;                  4   39[COMRAM] long 
  4664 ;; Registers used:
  4665 ;;		wreg, status,2, status,0
  4666 ;; Tracked objects:
  4667 ;;		On entry : 0/0
  4668 ;;		On exit  : 0/0
  4669 ;;		Unchanged: 0/0
  4670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4671 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4672 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4673 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4674 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4675 ;;Total ram usage:       15 bytes
  4676 ;; Hardware stack levels used:    1
  4677 ;; This function calls:
  4678 ;;		Nothing
  4679 ;; This function is called by:
  4680 ;;		_obtain_pass
  4681 ;;		_input_old_pass
  4682 ;;		_input_new_pass
  4683 ;;		_pow
  4684 ;;		_exp
  4685 ;;		_floor
  4686 ;; This function uses a non-reentrant model
  4687 ;;
  4688                           
  4689                           	psect	text25
  4690  002304                     __ptext25:
  4691                           	opt stack 0
  4692  002304                     ___fttol:
  4693                           	opt stack 24
  4694                           
  4695                           ;incstack = 0
  4696  002304  C02A  F02C         	movff	___fttol@f1+2,??___fttol
  4697  002308  6A2D               	clrf	(??___fttol+1)& (0+255),c
  4698  00230A  6A2E               	clrf	(??___fttol+2)& (0+255),c
  4699  00230C  3429               	rlcf	___fttol@f1+1,w,c
  4700  00230E  362C               	rlcf	??___fttol& (0+255),f,c
  4701  002310  E301               	bnc	u2791
  4702  002312  802D               	bsf	(??___fttol+1)& (0+255),0,c
  4703  002314                     u2791:
  4704  002314  502C               	movf	??___fttol,w,c
  4705  002316  6E36               	movwf	___fttol@exp1,c
  4706  002318  5036               	movf	___fttol@exp1,w,c
  4707  00231A  A4D8               	btfss	status,2,c
  4708  00231C  D009               	goto	l3657
  4709  00231E  0E00               	movlw	0
  4710  002320  6E28               	movwf	?___fttol,c
  4711  002322  0E00               	movlw	0
  4712  002324  6E29               	movwf	?___fttol+1,c
  4713  002326  0E00               	movlw	0
  4714  002328  6E2A               	movwf	?___fttol+2,c
  4715  00232A  0E00               	movlw	0
  4716  00232C  6E2B               	movwf	?___fttol+3,c
  4717  00232E  0012               	return	
  4718  002330                     l3657:
  4719  002330  0E17               	movlw	23
  4720  002332  6E2C               	movwf	??___fttol& (0+255),c
  4721  002334  C028  F02D         	movff	___fttol@f1,??___fttol+1
  4722  002338  C029  F02E         	movff	___fttol@f1+1,??___fttol+2
  4723  00233C  C02A  F02F         	movff	___fttol@f1+2,??___fttol+3
  4724  002340  282C               	incf	??___fttol,w,c
  4725  002342  6E30               	movwf	(??___fttol+4)& (0+255),c
  4726  002344  D004               	goto	u2810
  4727  002346                     u2815:
  4728  002346  90D8               	bcf	status,0,c
  4729  002348  322F               	rrcf	??___fttol+3,f,c
  4730  00234A  322E               	rrcf	??___fttol+2,f,c
  4731  00234C  322D               	rrcf	??___fttol+1,f,c
  4732  00234E                     u2810:
  4733  00234E  2E30               	decfsz	(??___fttol+4)& (0+255),f,c
  4734  002350  D7FA               	goto	u2815
  4735  002352  502D               	movf	??___fttol+1,w,c
  4736  002354  6E31               	movwf	___fttol@sign1,c
  4737  002356  8E29               	bsf	___fttol@f1+1,7,c
  4738  002358  0EFF               	movlw	255
  4739  00235A  1628               	andwf	___fttol@f1,f,c
  4740  00235C  0EFF               	movlw	255
  4741  00235E  1629               	andwf	___fttol@f1+1,f,c
  4742  002360  0E00               	movlw	0
  4743  002362  162A               	andwf	___fttol@f1+2,f,c
  4744  002364  5028               	movf	___fttol@f1,w,c
  4745  002366  6E32               	movwf	___fttol@lval,c
  4746  002368  5029               	movf	___fttol@f1+1,w,c
  4747  00236A  6E33               	movwf	___fttol@lval+1,c
  4748  00236C  502A               	movf	___fttol@f1+2,w,c
  4749  00236E  6E34               	movwf	___fttol@lval+2,c
  4750  002370  6A35               	clrf	___fttol@lval+3,c
  4751  002372  0E8E               	movlw	142
  4752  002374  5E36               	subwf	___fttol@exp1,f,c
  4753  002376  AE36               	btfss	___fttol@exp1,7,c
  4754  002378  D017               	goto	l3679
  4755  00237A  5036               	movf	___fttol@exp1,w,c
  4756  00237C  0A80               	xorlw	128
  4757  00237E  0F8F               	addlw	143
  4758  002380  B0D8               	btfsc	status,0,c
  4759  002382  D00A               	goto	l3675
  4760  002384  0E00               	movlw	0
  4761  002386  6E28               	movwf	?___fttol,c
  4762  002388  0E00               	movlw	0
  4763  00238A  6E29               	movwf	?___fttol+1,c
  4764  00238C  0E00               	movlw	0
  4765  00238E  6E2A               	movwf	?___fttol+2,c
  4766  002390  0E00               	movlw	0
  4767  002392  6E2B               	movwf	?___fttol+3,c
  4768  002394  0012               	return	
  4769  002396  D000               	goto	l3675
  4770  002398                     l3675:
  4771  002398  90D8               	bcf	status,0,c
  4772  00239A  3235               	rrcf	___fttol@lval+3,f,c
  4773  00239C  3234               	rrcf	___fttol@lval+2,f,c
  4774  00239E  3233               	rrcf	___fttol@lval+1,f,c
  4775  0023A0  3232               	rrcf	___fttol@lval,f,c
  4776  0023A2  3E36               	incfsz	___fttol@exp1,f,c
  4777  0023A4  D7F9               	goto	l3675
  4778  0023A6  D019               	goto	l3689
  4779  0023A8                     l3679:
  4780  0023A8  0E17               	movlw	23
  4781  0023AA  6436               	cpfsgt	___fttol@exp1,c
  4782  0023AC  D011               	goto	l3687
  4783  0023AE  0E00               	movlw	0
  4784  0023B0  6E28               	movwf	?___fttol,c
  4785  0023B2  0E00               	movlw	0
  4786  0023B4  6E29               	movwf	?___fttol+1,c
  4787  0023B6  0E00               	movlw	0
  4788  0023B8  6E2A               	movwf	?___fttol+2,c
  4789  0023BA  0E00               	movlw	0
  4790  0023BC  6E2B               	movwf	?___fttol+3,c
  4791  0023BE  0012               	return	
  4792  0023C0  D007               	goto	l3687
  4793  0023C2                     l3685:
  4794  0023C2  90D8               	bcf	status,0,c
  4795  0023C4  3632               	rlcf	___fttol@lval,f,c
  4796  0023C6  3633               	rlcf	___fttol@lval+1,f,c
  4797  0023C8  3634               	rlcf	___fttol@lval+2,f,c
  4798  0023CA  3635               	rlcf	___fttol@lval+3,f,c
  4799  0023CC  0636               	decf	___fttol@exp1,f,c
  4800  0023CE  D000               	goto	l3687
  4801  0023D0                     l3687:
  4802  0023D0  5036               	movf	___fttol@exp1,w,c
  4803  0023D2  B4D8               	btfsc	status,2,c
  4804  0023D4  D002               	goto	l3689
  4805  0023D6  D7F5               	goto	l3685
  4806  0023D8  D000               	goto	l3689
  4807  0023DA                     l3689:
  4808  0023DA  5031               	movf	___fttol@sign1,w,c
  4809  0023DC  B4D8               	btfsc	status,2,c
  4810  0023DE  D009               	goto	l3693
  4811  0023E0  1E35               	comf	___fttol@lval+3,f,c
  4812  0023E2  1E34               	comf	___fttol@lval+2,f,c
  4813  0023E4  1E33               	comf	___fttol@lval+1,f,c
  4814  0023E6  6C32               	negf	___fttol@lval,c
  4815  0023E8  0E00               	movlw	0
  4816  0023EA  2233               	addwfc	___fttol@lval+1,f,c
  4817  0023EC  2234               	addwfc	___fttol@lval+2,f,c
  4818  0023EE  2235               	addwfc	___fttol@lval+3,f,c
  4819  0023F0  D000               	goto	l3693
  4820  0023F2                     l3693:
  4821  0023F2  C032  F028         	movff	___fttol@lval,?___fttol
  4822  0023F6  C033  F029         	movff	___fttol@lval+1,?___fttol+1
  4823  0023FA  C034  F02A         	movff	___fttol@lval+2,?___fttol+2
  4824  0023FE  C035  F02B         	movff	___fttol@lval+3,?___fttol+3
  4825  002402  0012               	return	
  4826  002404  0012               	return		;funcret
  4827  002406                     __end_of___fttol:
  4828                           	opt stack 0
  4829                           tblptru	equ	0xFF8
  4830                           tblptrh	equ	0xFF7
  4831                           tblptrl	equ	0xFF6
  4832                           tablat	equ	0xFF5
  4833                           postinc0	equ	0xFEE
  4834                           wreg	equ	0xFE8
  4835                           postdec1	equ	0xFE5
  4836                           fsr1l	equ	0xFE1
  4837                           indf2	equ	0xFDF
  4838                           postinc2	equ	0xFDE
  4839                           postdec2	equ	0xFDD
  4840                           fsr2h	equ	0xFDA
  4841                           fsr2l	equ	0xFD9
  4842                           status	equ	0xFD8
  4843                           
  4844 ;; *************** function ___ftge *****************
  4845 ;; Defined at:
  4846 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\ftge.c"
  4847 ;; Parameters:    Size  Location     Type
  4848 ;;  ff1             3    0[COMRAM] float 
  4849 ;;  ff2             3    3[COMRAM] float 
  4850 ;; Auto vars:     Size  Location     Type
  4851 ;;		None
  4852 ;; Return value:  Size  Location     Type
  4853 ;;		None               void
  4854 ;; Registers used:
  4855 ;;		wreg, status,2, status,0
  4856 ;; Tracked objects:
  4857 ;;		On entry : 0/0
  4858 ;;		On exit  : 0/0
  4859 ;;		Unchanged: 0/0
  4860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4861 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4863 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4864 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4865 ;;Total ram usage:        9 bytes
  4866 ;; Hardware stack levels used:    1
  4867 ;; This function calls:
  4868 ;;		Nothing
  4869 ;; This function is called by:
  4870 ;;		_pow
  4871 ;;		_exp
  4872 ;;		_floor
  4873 ;; This function uses a non-reentrant model
  4874 ;;
  4875                           
  4876                           	psect	text26
  4877  002BA2                     __ptext26:
  4878                           	opt stack 0
  4879  002BA2                     ___ftge:
  4880                           	opt stack 24
  4881                           
  4882                           ;incstack = 0
  4883  002BA2  AE03               	btfss	___ftge@ff1+2,7,c
  4884  002BA4  D017               	goto	l3637
  4885  002BA6  C001  F007         	movff	___ftge@ff1,??___ftge
  4886  002BAA  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  4887  002BAE  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  4888  002BB2  1E07               	comf	??___ftge,f,c
  4889  002BB4  1E08               	comf	??___ftge+1,f,c
  4890  002BB6  1E09               	comf	??___ftge+2,f,c
  4891  002BB8  2A07               	incf	??___ftge,f,c
  4892  002BBA  0E00               	movlw	0
  4893  002BBC  2208               	addwfc	??___ftge+1,f,c
  4894  002BBE  2209               	addwfc	??___ftge+2,f,c
  4895  002BC0  0E00               	movlw	0
  4896  002BC2  2407               	addwf	??___ftge,w,c
  4897  002BC4  6E01               	movwf	___ftge@ff1,c
  4898  002BC6  0E00               	movlw	0
  4899  002BC8  2008               	addwfc	??___ftge+1,w,c
  4900  002BCA  6E02               	movwf	___ftge@ff1+1,c
  4901  002BCC  0E80               	movlw	128
  4902  002BCE  2009               	addwfc	??___ftge+2,w,c
  4903  002BD0  6E03               	movwf	___ftge@ff1+2,c
  4904  002BD2  D000               	goto	l3637
  4905  002BD4                     l3637:
  4906  002BD4  AE06               	btfss	___ftge@ff2+2,7,c
  4907  002BD6  D017               	goto	l3641
  4908  002BD8  C004  F007         	movff	___ftge@ff2,??___ftge
  4909  002BDC  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  4910  002BE0  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  4911  002BE4  1E07               	comf	??___ftge,f,c
  4912  002BE6  1E08               	comf	??___ftge+1,f,c
  4913  002BE8  1E09               	comf	??___ftge+2,f,c
  4914  002BEA  2A07               	incf	??___ftge,f,c
  4915  002BEC  0E00               	movlw	0
  4916  002BEE  2208               	addwfc	??___ftge+1,f,c
  4917  002BF0  2209               	addwfc	??___ftge+2,f,c
  4918  002BF2  0E00               	movlw	0
  4919  002BF4  2407               	addwf	??___ftge,w,c
  4920  002BF6  6E04               	movwf	___ftge@ff2,c
  4921  002BF8  0E00               	movlw	0
  4922  002BFA  2008               	addwfc	??___ftge+1,w,c
  4923  002BFC  6E05               	movwf	___ftge@ff2+1,c
  4924  002BFE  0E80               	movlw	128
  4925  002C00  2009               	addwfc	??___ftge+2,w,c
  4926  002C02  6E06               	movwf	___ftge@ff2+2,c
  4927  002C04  D000               	goto	l3641
  4928  002C06                     l3641:
  4929  002C06  0E00               	movlw	0
  4930  002C08  1A01               	xorwf	___ftge@ff1,f,c
  4931  002C0A  0E00               	movlw	0
  4932  002C0C  1A02               	xorwf	___ftge@ff1+1,f,c
  4933  002C0E  0E80               	movlw	128
  4934  002C10  1A03               	xorwf	___ftge@ff1+2,f,c
  4935  002C12  0E00               	movlw	0
  4936  002C14  1A04               	xorwf	___ftge@ff2,f,c
  4937  002C16  0E00               	movlw	0
  4938  002C18  1A05               	xorwf	___ftge@ff2+1,f,c
  4939  002C1A  0E80               	movlw	128
  4940  002C1C  1A06               	xorwf	___ftge@ff2+2,f,c
  4941  002C1E  5004               	movf	___ftge@ff2,w,c
  4942  002C20  5C01               	subwf	___ftge@ff1,w,c
  4943  002C22  5005               	movf	___ftge@ff2+1,w,c
  4944  002C24  5802               	subwfb	___ftge@ff1+1,w,c
  4945  002C26  5006               	movf	___ftge@ff2+2,w,c
  4946  002C28  5803               	subwfb	___ftge@ff1+2,w,c
  4947  002C2A  B0D8               	btfsc	status,0,c
  4948  002C2C  D002               	goto	l3647
  4949  002C2E  90D8               	bcf	status,0,c
  4950  002C30  0012               	return	
  4951  002C32                     l3647:
  4952  002C32  80D8               	bsf	status,0,c
  4953  002C34  0012               	return	
  4954  002C36  0012               	return		;funcret
  4955  002C38                     __end_of___ftge:
  4956                           	opt stack 0
  4957                           tblptru	equ	0xFF8
  4958                           tblptrh	equ	0xFF7
  4959                           tblptrl	equ	0xFF6
  4960                           tablat	equ	0xFF5
  4961                           postinc0	equ	0xFEE
  4962                           wreg	equ	0xFE8
  4963                           postdec1	equ	0xFE5
  4964                           fsr1l	equ	0xFE1
  4965                           indf2	equ	0xFDF
  4966                           postinc2	equ	0xFDE
  4967                           postdec2	equ	0xFDD
  4968                           fsr2h	equ	0xFDA
  4969                           fsr2l	equ	0xFD9
  4970                           status	equ	0xFD8
  4971                           
  4972 ;; *************** function ___altoft *****************
  4973 ;; Defined at:
  4974 ;;		line 42 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\altoft.c"
  4975 ;; Parameters:    Size  Location     Type
  4976 ;;  c               4   54[COMRAM] long 
  4977 ;; Auto vars:     Size  Location     Type
  4978 ;;  sign            1   63[COMRAM] unsigned char 
  4979 ;;  exp             1   62[COMRAM] unsigned char 
  4980 ;; Return value:  Size  Location     Type
  4981 ;;                  3   54[COMRAM] float 
  4982 ;; Registers used:
  4983 ;;		wreg, status,2, status,0, cstack
  4984 ;; Tracked objects:
  4985 ;;		On entry : 0/0
  4986 ;;		On exit  : 0/0
  4987 ;;		Unchanged: 0/0
  4988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4989 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4990 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4991 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4992 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4993 ;;Total ram usage:       10 bytes
  4994 ;; Hardware stack levels used:    1
  4995 ;; Hardware stack levels required when called:    1
  4996 ;; This function calls:
  4997 ;;		___ftpack
  4998 ;; This function is called by:
  4999 ;;		_floor
  5000 ;; This function uses a non-reentrant model
  5001 ;;
  5002                           
  5003                           	psect	text27
  5004  003000                     __ptext27:
  5005                           	opt stack 0
  5006  003000                     ___altoft:
  5007                           	opt stack 23
  5008                           
  5009                           ;incstack = 0
  5010  003000  0E00               	movlw	0
  5011  003002  6E40               	movwf	___altoft@sign,c
  5012  003004  0E8E               	movlw	142
  5013  003006  6E3F               	movwf	___altoft@exp,c
  5014  003008  AE3A               	btfss	___altoft@c+3,7,c
  5015  00300A  D012               	goto	l3509
  5016  00300C  1E3A               	comf	___altoft@c+3,f,c
  5017  00300E  1E39               	comf	___altoft@c+2,f,c
  5018  003010  1E38               	comf	___altoft@c+1,f,c
  5019  003012  6C37               	negf	___altoft@c,c
  5020  003014  0E00               	movlw	0
  5021  003016  2238               	addwfc	___altoft@c+1,f,c
  5022  003018  2239               	addwfc	___altoft@c+2,f,c
  5023  00301A  223A               	addwfc	___altoft@c+3,f,c
  5024  00301C  0E01               	movlw	1
  5025  00301E  6E40               	movwf	___altoft@sign,c
  5026  003020  D007               	goto	l3509
  5027  003022                     l3507:
  5028  003022  90D8               	bcf	status,0,c
  5029  003024  323A               	rrcf	___altoft@c+3,f,c
  5030  003026  3239               	rrcf	___altoft@c+2,f,c
  5031  003028  3238               	rrcf	___altoft@c+1,f,c
  5032  00302A  3237               	rrcf	___altoft@c,f,c
  5033  00302C  2A3F               	incf	___altoft@exp,f,c
  5034  00302E  D000               	goto	l3509
  5035  003030                     l3509:
  5036  003030  0E00               	movlw	0
  5037  003032  1437               	andwf	___altoft@c,w,c
  5038  003034  6E3B               	movwf	??___altoft& (0+255),c
  5039  003036  0E00               	movlw	0
  5040  003038  1438               	andwf	___altoft@c+1,w,c
  5041  00303A  6E3C               	movwf	(??___altoft+1)& (0+255),c
  5042  00303C  0E00               	movlw	0
  5043  00303E  1439               	andwf	___altoft@c+2,w,c
  5044  003040  6E3D               	movwf	(??___altoft+2)& (0+255),c
  5045  003042  0EFF               	movlw	255
  5046  003044  143A               	andwf	___altoft@c+3,w,c
  5047  003046  6E3E               	movwf	(??___altoft+3)& (0+255),c
  5048  003048  503B               	movf	??___altoft,w,c
  5049  00304A  103C               	iorwf	??___altoft+1,w,c
  5050  00304C  103D               	iorwf	??___altoft+2,w,c
  5051  00304E  103E               	iorwf	??___altoft+3,w,c
  5052  003050  A4D8               	btfss	status,2,c
  5053  003052  D7E7               	goto	l3507
  5054  003054  C037  F001         	movff	___altoft@c,___ftpack@arg
  5055  003058  C038  F002         	movff	___altoft@c+1,___ftpack@arg+1
  5056  00305C  C039  F003         	movff	___altoft@c+2,___ftpack@arg+2
  5057  003060  C03F  F004         	movff	___altoft@exp,___ftpack@exp
  5058  003064  C040  F005         	movff	___altoft@sign,___ftpack@sign
  5059  003068  EC22  F015         	call	___ftpack	;wreg free
  5060  00306C  C001  F037         	movff	?___ftpack,?___altoft
  5061  003070  C002  F038         	movff	?___ftpack+1,?___altoft+1
  5062  003074  C003  F039         	movff	?___ftpack+2,?___altoft+2
  5063  003078  0012               	return	
  5064  00307A  0012               	return		;funcret
  5065  00307C                     __end_of___altoft:
  5066                           	opt stack 0
  5067                           tblptru	equ	0xFF8
  5068                           tblptrh	equ	0xFF7
  5069                           tblptrl	equ	0xFF6
  5070                           tablat	equ	0xFF5
  5071                           postinc0	equ	0xFEE
  5072                           wreg	equ	0xFE8
  5073                           postdec1	equ	0xFE5
  5074                           fsr1l	equ	0xFE1
  5075                           indf2	equ	0xFDF
  5076                           postinc2	equ	0xFDE
  5077                           postdec2	equ	0xFDD
  5078                           fsr2h	equ	0xFDA
  5079                           fsr2l	equ	0xFD9
  5080                           status	equ	0xFD8
  5081                           
  5082 ;; *************** function _eval_poly *****************
  5083 ;; Defined at:
  5084 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\evalpoly.c"
  5085 ;; Parameters:    Size  Location     Type
  5086 ;;  x               3   39[COMRAM] float 
  5087 ;;  d               2   42[COMRAM] PTR const 
  5088 ;;		 -> log@coeff(27), exp@coeff(30), 
  5089 ;;  n               2   44[COMRAM] int 
  5090 ;; Auto vars:     Size  Location     Type
  5091 ;;  res             3   48[COMRAM] int 
  5092 ;; Return value:  Size  Location     Type
  5093 ;;                  3   39[COMRAM] int 
  5094 ;; Registers used:
  5095 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5096 ;; Tracked objects:
  5097 ;;		On entry : 0/0
  5098 ;;		On exit  : 0/0
  5099 ;;		Unchanged: 0/0
  5100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5101 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5102 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5103 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5104 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5105 ;;Total ram usage:       12 bytes
  5106 ;; Hardware stack levels used:    1
  5107 ;; Hardware stack levels required when called:    2
  5108 ;; This function calls:
  5109 ;;		___ftadd
  5110 ;;		___ftmul
  5111 ;;		___wmul
  5112 ;; This function is called by:
  5113 ;;		_exp
  5114 ;;		_log
  5115 ;; This function uses a non-reentrant model
  5116 ;;
  5117                           
  5118                           	psect	text28
  5119  002970                     __ptext28:
  5120                           	opt stack 0
  5121  002970                     _eval_poly:
  5122                           	opt stack 23
  5123                           
  5124                           ;incstack = 0
  5125  002970  C02D  F001         	movff	eval_poly@n,___wmul@multiplier
  5126  002974  C02E  F002         	movff	eval_poly@n+1,___wmul@multiplier+1
  5127  002978  0E00               	movlw	0
  5128  00297A  6E04               	movwf	___wmul@multiplicand+1,c
  5129  00297C  0E03               	movlw	3
  5130  00297E  6E03               	movwf	___wmul@multiplicand,c
  5131  002980  EC88  F01B         	call	___wmul	;wreg free
  5132  002984  C02B  F02F         	movff	eval_poly@d,??_eval_poly
  5133  002988  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
  5134  00298C  5001               	movf	?___wmul,w,c
  5135  00298E  262F               	addwf	??_eval_poly,f,c
  5136  002990  5002               	movf	?___wmul+1,w,c
  5137  002992  2230               	addwfc	??_eval_poly+1,f,c
  5138  002994  C02F  FFF6         	movff	??_eval_poly,tblptrl
  5139  002998  C030  FFF7         	movff	??_eval_poly+1,tblptrh
  5140  00299C                     	if	0	;tblptru may be non-zero
  5141  00299C                     	endif
  5142  00299C                     	if	0	;tblptru may be non-zero
  5143  00299C                     	endif
  5144  00299C  0009               	tblrd		*+
  5145  00299E  CFF5 F031          	movff	tablat,eval_poly@res
  5146  0029A2  0009               	tblrd		*+
  5147  0029A4  CFF5 F032          	movff	tablat,eval_poly@res+1
  5148  0029A8  000A               	tblrd		*-
  5149  0029AA  CFF5 F033          	movff	tablat,eval_poly@res+2
  5150  0029AE  D03F               	goto	l3879
  5151  0029B0                     l3877:
  5152  0029B0  C031  F010         	movff	eval_poly@res,___ftmul@f2
  5153  0029B4  C032  F011         	movff	eval_poly@res+1,___ftmul@f2+1
  5154  0029B8  C033  F012         	movff	eval_poly@res+2,___ftmul@f2+2
  5155  0029BC  C028  F00D         	movff	eval_poly@x,___ftmul@f1
  5156  0029C0  C029  F00E         	movff	eval_poly@x+1,___ftmul@f1+1
  5157  0029C4  C02A  F00F         	movff	eval_poly@x+2,___ftmul@f1+2
  5158  0029C8  EC03  F012         	call	___ftmul	;wreg free
  5159  0029CC  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  5160  0029D0  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  5161  0029D4  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  5162  0029D8  0E00               	movlw	0
  5163  0029DA  6E04               	movwf	___wmul@multiplicand+1,c
  5164  0029DC  0E03               	movlw	3
  5165  0029DE  6E03               	movwf	___wmul@multiplicand,c
  5166  0029E0  062D               	decf	eval_poly@n,f,c
  5167  0029E2  A0D8               	btfss	status,0,c
  5168  0029E4  062E               	decf	eval_poly@n+1,f,c
  5169  0029E6  C02D  F001         	movff	eval_poly@n,___wmul@multiplier
  5170  0029EA  C02E  F002         	movff	eval_poly@n+1,___wmul@multiplier+1
  5171  0029EE  EC88  F01B         	call	___wmul	;wreg free
  5172  0029F2  C02B  F02F         	movff	eval_poly@d,??_eval_poly
  5173  0029F6  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
  5174  0029FA  5001               	movf	?___wmul,w,c
  5175  0029FC  262F               	addwf	??_eval_poly,f,c
  5176  0029FE  5002               	movf	?___wmul+1,w,c
  5177  002A00  2230               	addwfc	??_eval_poly+1,f,c
  5178  002A02  C02F  FFF6         	movff	??_eval_poly,tblptrl
  5179  002A06  C030  FFF7         	movff	??_eval_poly+1,tblptrh
  5180  002A0A                     	if	0	;tblptru may be non-zero
  5181  002A0A                     	endif
  5182  002A0A                     	if	0	;tblptru may be non-zero
  5183  002A0A                     	endif
  5184  002A0A  0009               	tblrd		*+
  5185  002A0C  CFF5 F01F          	movff	tablat,___ftadd@f2
  5186  002A10  0009               	tblrd		*+
  5187  002A12  CFF5 F020          	movff	tablat,___ftadd@f2+1
  5188  002A16  000A               	tblrd		*-
  5189  002A18  CFF5 F021          	movff	tablat,___ftadd@f2+2
  5190  002A1C  EC74  F00B         	call	___ftadd	;wreg free
  5191  002A20  C01C  F031         	movff	?___ftadd,eval_poly@res
  5192  002A24  C01D  F032         	movff	?___ftadd+1,eval_poly@res+1
  5193  002A28  C01E  F033         	movff	?___ftadd+2,eval_poly@res+2
  5194  002A2C  D000               	goto	l3879
  5195  002A2E                     l3879:
  5196  002A2E  502D               	movf	eval_poly@n,w,c
  5197  002A30  102E               	iorwf	eval_poly@n+1,w,c
  5198  002A32  A4D8               	btfss	status,2,c
  5199  002A34  D7BD               	goto	l3877
  5200  002A36  C031  F028         	movff	eval_poly@res,?_eval_poly
  5201  002A3A  C032  F029         	movff	eval_poly@res+1,?_eval_poly+1
  5202  002A3E  C033  F02A         	movff	eval_poly@res+2,?_eval_poly+2
  5203  002A42  0012               	return		;funcret
  5204  002A44                     __end_of_eval_poly:
  5205                           	opt stack 0
  5206                           tblptru	equ	0xFF8
  5207                           tblptrh	equ	0xFF7
  5208                           tblptrl	equ	0xFF6
  5209                           tablat	equ	0xFF5
  5210                           postinc0	equ	0xFEE
  5211                           wreg	equ	0xFE8
  5212                           postdec1	equ	0xFE5
  5213                           fsr1l	equ	0xFE1
  5214                           indf2	equ	0xFDF
  5215                           postinc2	equ	0xFDE
  5216                           postdec2	equ	0xFDD
  5217                           fsr2h	equ	0xFDA
  5218                           fsr2l	equ	0xFD9
  5219                           status	equ	0xFD8
  5220                           
  5221 ;; *************** function ___ftmul *****************
  5222 ;; Defined at:
  5223 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\ftmul.c"
  5224 ;; Parameters:    Size  Location     Type
  5225 ;;  f1              3   12[COMRAM] float 
  5226 ;;  f2              3   15[COMRAM] float 
  5227 ;; Auto vars:     Size  Location     Type
  5228 ;;  f3_as_produc    3   22[COMRAM] unsigned um
  5229 ;;  sign            1   26[COMRAM] unsigned char 
  5230 ;;  cntr            1   25[COMRAM] unsigned char 
  5231 ;;  exp             1   21[COMRAM] unsigned char 
  5232 ;; Return value:  Size  Location     Type
  5233 ;;                  3   12[COMRAM] float 
  5234 ;; Registers used:
  5235 ;;		wreg, status,2, status,0, cstack
  5236 ;; Tracked objects:
  5237 ;;		On entry : 0/0
  5238 ;;		On exit  : 0/0
  5239 ;;		Unchanged: 0/0
  5240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5241 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5242 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5243 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5244 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5245 ;;Total ram usage:       15 bytes
  5246 ;; Hardware stack levels used:    1
  5247 ;; Hardware stack levels required when called:    1
  5248 ;; This function calls:
  5249 ;;		___ftpack
  5250 ;; This function is called by:
  5251 ;;		_obtain_pass
  5252 ;;		_input_old_pass
  5253 ;;		_input_new_pass
  5254 ;;		_pow
  5255 ;;		_exp
  5256 ;;		_log
  5257 ;;		_eval_poly
  5258 ;; This function uses a non-reentrant model
  5259 ;;
  5260                           
  5261                           	psect	text29
  5262  002406                     __ptext29:
  5263                           	opt stack 0
  5264  002406                     ___ftmul:
  5265                           	opt stack 23
  5266                           
  5267                           ;incstack = 0
  5268  002406  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
  5269  00240A  6A14               	clrf	(??___ftmul+1)& (0+255),c
  5270  00240C  6A15               	clrf	(??___ftmul+2)& (0+255),c
  5271  00240E  340E               	rlcf	___ftmul@f1+1,w,c
  5272  002410  3613               	rlcf	??___ftmul& (0+255),f,c
  5273  002412  E301               	bnc	u2701
  5274  002414  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  5275  002416                     u2701:
  5276  002416  5013               	movf	??___ftmul,w,c
  5277  002418  6E16               	movwf	___ftmul@exp,c
  5278  00241A  5016               	movf	___ftmul@exp,w,c
  5279  00241C  A4D8               	btfss	status,2,c
  5280  00241E  D007               	goto	l3591
  5281  002420  0E00               	movlw	0
  5282  002422  6E0D               	movwf	?___ftmul,c
  5283  002424  0E00               	movlw	0
  5284  002426  6E0E               	movwf	?___ftmul+1,c
  5285  002428  0E00               	movlw	0
  5286  00242A  6E0F               	movwf	?___ftmul+2,c
  5287  00242C  0012               	return	
  5288  00242E                     l3591:
  5289  00242E  C012  F013         	movff	___ftmul@f2+2,??___ftmul
  5290  002432  6A14               	clrf	(??___ftmul+1)& (0+255),c
  5291  002434  6A15               	clrf	(??___ftmul+2)& (0+255),c
  5292  002436  3411               	rlcf	___ftmul@f2+1,w,c
  5293  002438  3613               	rlcf	??___ftmul& (0+255),f,c
  5294  00243A  E301               	bnc	u2721
  5295  00243C  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  5296  00243E                     u2721:
  5297  00243E  5013               	movf	??___ftmul,w,c
  5298  002440  6E1B               	movwf	___ftmul@sign,c
  5299  002442  501B               	movf	___ftmul@sign,w,c
  5300  002444  A4D8               	btfss	status,2,c
  5301  002446  D007               	goto	l3597
  5302  002448  0E00               	movlw	0
  5303  00244A  6E0D               	movwf	?___ftmul,c
  5304  00244C  0E00               	movlw	0
  5305  00244E  6E0E               	movwf	?___ftmul+1,c
  5306  002450  0E00               	movlw	0
  5307  002452  6E0F               	movwf	?___ftmul+2,c
  5308  002454  0012               	return	
  5309  002456                     l3597:
  5310  002456  501B               	movf	___ftmul@sign,w,c
  5311  002458  0F7B               	addlw	123
  5312  00245A  2616               	addwf	___ftmul@exp,f,c
  5313  00245C  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
  5314  002460  5012               	movf	___ftmul@f2+2,w,c
  5315  002462  1A1B               	xorwf	___ftmul@sign,f,c
  5316  002464  0E80               	movlw	128
  5317  002466  161B               	andwf	___ftmul@sign,f,c
  5318  002468  8E0E               	bsf	___ftmul@f1+1,7,c
  5319  00246A  8E11               	bsf	___ftmul@f2+1,7,c
  5320  00246C  0EFF               	movlw	255
  5321  00246E  1610               	andwf	___ftmul@f2,f,c
  5322  002470  0EFF               	movlw	255
  5323  002472  1611               	andwf	___ftmul@f2+1,f,c
  5324  002474  0E00               	movlw	0
  5325  002476  1612               	andwf	___ftmul@f2+2,f,c
  5326  002478  0E00               	movlw	0
  5327  00247A  6E17               	movwf	___ftmul@f3_as_product,c
  5328  00247C  0E00               	movlw	0
  5329  00247E  6E18               	movwf	___ftmul@f3_as_product+1,c
  5330  002480  0E00               	movlw	0
  5331  002482  6E19               	movwf	___ftmul@f3_as_product+2,c
  5332  002484  0E07               	movlw	7
  5333  002486  6E1A               	movwf	___ftmul@cntr,c
  5334  002488  D000               	goto	l3611
  5335  00248A                     l3611:
  5336  00248A  A00D               	btfss	___ftmul@f1,0,c
  5337  00248C  D007               	goto	l3615
  5338  00248E  5010               	movf	___ftmul@f2,w,c
  5339  002490  2617               	addwf	___ftmul@f3_as_product,f,c
  5340  002492  5011               	movf	___ftmul@f2+1,w,c
  5341  002494  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  5342  002496  5012               	movf	___ftmul@f2+2,w,c
  5343  002498  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  5344  00249A  D000               	goto	l3615
  5345  00249C                     l3615:
  5346  00249C  90D8               	bcf	status,0,c
  5347  00249E  320F               	rrcf	___ftmul@f1+2,f,c
  5348  0024A0  320E               	rrcf	___ftmul@f1+1,f,c
  5349  0024A2  320D               	rrcf	___ftmul@f1,f,c
  5350  0024A4  90D8               	bcf	status,0,c
  5351  0024A6  3610               	rlcf	___ftmul@f2,f,c
  5352  0024A8  3611               	rlcf	___ftmul@f2+1,f,c
  5353  0024AA  3612               	rlcf	___ftmul@f2+2,f,c
  5354  0024AC  2E1A               	decfsz	___ftmul@cntr,f,c
  5355  0024AE  D7ED               	goto	l3611
  5356  0024B0  D000               	goto	l3619
  5357  0024B2                     l3619:
  5358  0024B2  0E09               	movlw	9
  5359  0024B4  6E1A               	movwf	___ftmul@cntr,c
  5360  0024B6  D000               	goto	l3621
  5361  0024B8                     l3621:
  5362  0024B8  A00D               	btfss	___ftmul@f1,0,c
  5363  0024BA  D007               	goto	l3625
  5364  0024BC  5010               	movf	___ftmul@f2,w,c
  5365  0024BE  2617               	addwf	___ftmul@f3_as_product,f,c
  5366  0024C0  5011               	movf	___ftmul@f2+1,w,c
  5367  0024C2  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  5368  0024C4  5012               	movf	___ftmul@f2+2,w,c
  5369  0024C6  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  5370  0024C8  D000               	goto	l3625
  5371  0024CA                     l3625:
  5372  0024CA  90D8               	bcf	status,0,c
  5373  0024CC  320F               	rrcf	___ftmul@f1+2,f,c
  5374  0024CE  320E               	rrcf	___ftmul@f1+1,f,c
  5375  0024D0  320D               	rrcf	___ftmul@f1,f,c
  5376  0024D2  90D8               	bcf	status,0,c
  5377  0024D4  3219               	rrcf	___ftmul@f3_as_product+2,f,c
  5378  0024D6  3218               	rrcf	___ftmul@f3_as_product+1,f,c
  5379  0024D8  3217               	rrcf	___ftmul@f3_as_product,f,c
  5380  0024DA  2E1A               	decfsz	___ftmul@cntr,f,c
  5381  0024DC  D7ED               	goto	l3621
  5382  0024DE  D000               	goto	l3629
  5383  0024E0                     l3629:
  5384  0024E0  C017  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  5385  0024E4  C018  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5386  0024E8  C019  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5387  0024EC  C016  F004         	movff	___ftmul@exp,___ftpack@exp
  5388  0024F0  C01B  F005         	movff	___ftmul@sign,___ftpack@sign
  5389  0024F4  EC22  F015         	call	___ftpack	;wreg free
  5390  0024F8  C001  F00D         	movff	?___ftpack,?___ftmul
  5391  0024FC  C002  F00E         	movff	?___ftpack+1,?___ftmul+1
  5392  002500  C003  F00F         	movff	?___ftpack+2,?___ftmul+2
  5393  002504  0012               	return	
  5394  002506  0012               	return		;funcret
  5395  002508                     __end_of___ftmul:
  5396                           	opt stack 0
  5397                           tblptru	equ	0xFF8
  5398                           tblptrh	equ	0xFF7
  5399                           tblptrl	equ	0xFF6
  5400                           tablat	equ	0xFF5
  5401                           postinc0	equ	0xFEE
  5402                           wreg	equ	0xFE8
  5403                           postdec1	equ	0xFE5
  5404                           fsr1l	equ	0xFE1
  5405                           indf2	equ	0xFDF
  5406                           postinc2	equ	0xFDE
  5407                           postdec2	equ	0xFDD
  5408                           fsr2h	equ	0xFDA
  5409                           fsr2l	equ	0xFD9
  5410                           status	equ	0xFD8
  5411                           
  5412 ;; *************** function ___ftsub *****************
  5413 ;; Defined at:
  5414 ;;		line 20 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\ftsub.c"
  5415 ;; Parameters:    Size  Location     Type
  5416 ;;  f1              3   39[COMRAM] float 
  5417 ;;  f2              3   42[COMRAM] float 
  5418 ;; Auto vars:     Size  Location     Type
  5419 ;;		None
  5420 ;; Return value:  Size  Location     Type
  5421 ;;                  3   39[COMRAM] float 
  5422 ;; Registers used:
  5423 ;;		wreg, status,2, status,0, cstack
  5424 ;; Tracked objects:
  5425 ;;		On entry : 0/0
  5426 ;;		On exit  : 0/0
  5427 ;;		Unchanged: 0/0
  5428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5429 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5432 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5433 ;;Total ram usage:        6 bytes
  5434 ;; Hardware stack levels used:    1
  5435 ;; Hardware stack levels required when called:    2
  5436 ;; This function calls:
  5437 ;;		___ftadd
  5438 ;; This function is called by:
  5439 ;;		_exp
  5440 ;; This function uses a non-reentrant model
  5441 ;;
  5442                           
  5443                           	psect	text30
  5444  0034BE                     __ptext30:
  5445                           	opt stack 0
  5446  0034BE                     ___ftsub:
  5447                           	opt stack 23
  5448                           
  5449                           ;incstack = 0
  5450  0034BE  502B               	movf	___ftsub@f2,w,c
  5451  0034C0  102C               	iorwf	___ftsub@f2+1,w,c
  5452  0034C2  102D               	iorwf	___ftsub@f2+2,w,c
  5453  0034C4  B4D8               	btfsc	status,2,c
  5454  0034C6  D007               	goto	l3793
  5455  0034C8  0E00               	movlw	0
  5456  0034CA  1A2B               	xorwf	___ftsub@f2,f,c
  5457  0034CC  0E00               	movlw	0
  5458  0034CE  1A2C               	xorwf	___ftsub@f2+1,f,c
  5459  0034D0  0E80               	movlw	128
  5460  0034D2  1A2D               	xorwf	___ftsub@f2+2,f,c
  5461  0034D4  D000               	goto	l3793
  5462  0034D6                     l3793:
  5463  0034D6  C028  F01C         	movff	___ftsub@f1,___ftadd@f1
  5464  0034DA  C029  F01D         	movff	___ftsub@f1+1,___ftadd@f1+1
  5465  0034DE  C02A  F01E         	movff	___ftsub@f1+2,___ftadd@f1+2
  5466  0034E2  C02B  F01F         	movff	___ftsub@f2,___ftadd@f2
  5467  0034E6  C02C  F020         	movff	___ftsub@f2+1,___ftadd@f2+1
  5468  0034EA  C02D  F021         	movff	___ftsub@f2+2,___ftadd@f2+2
  5469  0034EE  EC74  F00B         	call	___ftadd	;wreg free
  5470  0034F2  C01C  F028         	movff	?___ftadd,?___ftsub
  5471  0034F6  C01D  F029         	movff	?___ftadd+1,?___ftsub+1
  5472  0034FA  C01E  F02A         	movff	?___ftadd+2,?___ftsub+2
  5473  0034FE  0012               	return	
  5474  003500  0012               	return		;funcret
  5475  003502                     __end_of___ftsub:
  5476                           	opt stack 0
  5477                           tblptru	equ	0xFF8
  5478                           tblptrh	equ	0xFF7
  5479                           tblptrl	equ	0xFF6
  5480                           tablat	equ	0xFF5
  5481                           postinc0	equ	0xFEE
  5482                           wreg	equ	0xFE8
  5483                           postdec1	equ	0xFE5
  5484                           fsr1l	equ	0xFE1
  5485                           indf2	equ	0xFDF
  5486                           postinc2	equ	0xFDE
  5487                           postdec2	equ	0xFDD
  5488                           fsr2h	equ	0xFDA
  5489                           fsr2l	equ	0xFD9
  5490                           status	equ	0xFD8
  5491                           
  5492 ;; *************** function ___ftadd *****************
  5493 ;; Defined at:
  5494 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\ftadd.c"
  5495 ;; Parameters:    Size  Location     Type
  5496 ;;  f1              3   27[COMRAM] float 
  5497 ;;  f2              3   30[COMRAM] float 
  5498 ;; Auto vars:     Size  Location     Type
  5499 ;;  exp1            1   38[COMRAM] unsigned char 
  5500 ;;  exp2            1   37[COMRAM] unsigned char 
  5501 ;;  sign            1   36[COMRAM] unsigned char 
  5502 ;; Return value:  Size  Location     Type
  5503 ;;                  3   27[COMRAM] float 
  5504 ;; Registers used:
  5505 ;;		wreg, status,2, status,0, cstack
  5506 ;; Tracked objects:
  5507 ;;		On entry : 0/0
  5508 ;;		On exit  : 0/0
  5509 ;;		Unchanged: 0/0
  5510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5511 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5512 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5513 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5514 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5515 ;;Total ram usage:       12 bytes
  5516 ;; Hardware stack levels used:    1
  5517 ;; Hardware stack levels required when called:    1
  5518 ;; This function calls:
  5519 ;;		___ftpack
  5520 ;; This function is called by:
  5521 ;;		_obtain_pass
  5522 ;;		_input_old_pass
  5523 ;;		_input_new_pass
  5524 ;;		___ftsub
  5525 ;;		_floor
  5526 ;;		_log
  5527 ;;		_eval_poly
  5528 ;; This function uses a non-reentrant model
  5529 ;;
  5530                           
  5531                           	psect	text31
  5532  0016E8                     __ptext31:
  5533                           	opt stack 0
  5534  0016E8                     ___ftadd:
  5535                           	opt stack 23
  5536                           
  5537                           ;incstack = 0
  5538  0016E8  C01E  F022         	movff	___ftadd@f1+2,??___ftadd
  5539  0016EC  6A23               	clrf	(??___ftadd+1)& (0+255),c
  5540  0016EE  6A24               	clrf	(??___ftadd+2)& (0+255),c
  5541  0016F0  341D               	rlcf	___ftadd@f1+1,w,c
  5542  0016F2  3622               	rlcf	??___ftadd& (0+255),f,c
  5543  0016F4  E301               	bnc	u2491
  5544  0016F6  8023               	bsf	(??___ftadd+1)& (0+255),0,c
  5545  0016F8                     u2491:
  5546  0016F8  5022               	movf	??___ftadd,w,c
  5547  0016FA  6E27               	movwf	___ftadd@exp1,c
  5548  0016FC  C021  F022         	movff	___ftadd@f2+2,??___ftadd
  5549  001700  6A23               	clrf	(??___ftadd+1)& (0+255),c
  5550  001702  6A24               	clrf	(??___ftadd+2)& (0+255),c
  5551  001704  3420               	rlcf	___ftadd@f2+1,w,c
  5552  001706  3622               	rlcf	??___ftadd& (0+255),f,c
  5553  001708  E301               	bnc	u2501
  5554  00170A  8023               	bsf	(??___ftadd+1)& (0+255),0,c
  5555  00170C                     u2501:
  5556  00170C  5022               	movf	??___ftadd,w,c
  5557  00170E  6E26               	movwf	___ftadd@exp2,c
  5558  001710  5027               	movf	___ftadd@exp1,w,c
  5559  001712  B4D8               	btfsc	status,2,c
  5560  001714  D00B               	goto	l1436
  5561  001716  5026               	movf	___ftadd@exp2,w,c
  5562  001718  5C27               	subwf	___ftadd@exp1,w,c
  5563  00171A  B0D8               	btfsc	status,0,c
  5564  00171C  D00E               	goto	l3523
  5565  00171E  5027               	movf	___ftadd@exp1,w,c
  5566  001720  0800               	sublw	0
  5567  001722  2426               	addwf	___ftadd@exp2,w,c
  5568  001724  6E22               	movwf	??___ftadd& (0+255),c
  5569  001726  0E18               	movlw	24
  5570  001728  6422               	cpfsgt	??___ftadd,c
  5571  00172A  D007               	goto	l3523
  5572  00172C                     l1436:
  5573  00172C  C01F  F01C         	movff	___ftadd@f2,?___ftadd
  5574  001730  C020  F01D         	movff	___ftadd@f2+1,?___ftadd+1
  5575  001734  C021  F01E         	movff	___ftadd@f2+2,?___ftadd+2
  5576  001738  0012               	return	
  5577  00173A                     l3523:
  5578  00173A  5026               	movf	___ftadd@exp2,w,c
  5579  00173C  B4D8               	btfsc	status,2,c
  5580  00173E  D00B               	goto	l1440
  5581  001740  5027               	movf	___ftadd@exp1,w,c
  5582  001742  5C26               	subwf	___ftadd@exp2,w,c
  5583  001744  B0D8               	btfsc	status,0,c
  5584  001746  D00E               	goto	l3529
  5585  001748  5026               	movf	___ftadd@exp2,w,c
  5586  00174A  0800               	sublw	0
  5587  00174C  2427               	addwf	___ftadd@exp1,w,c
  5588  00174E  6E22               	movwf	??___ftadd& (0+255),c
  5589  001750  0E18               	movlw	24
  5590  001752  6422               	cpfsgt	??___ftadd,c
  5591  001754  D007               	goto	l3529
  5592  001756                     l1440:
  5593  001756  C01C  F01C         	movff	___ftadd@f1,?___ftadd
  5594  00175A  C01D  F01D         	movff	___ftadd@f1+1,?___ftadd+1
  5595  00175E  C01E  F01E         	movff	___ftadd@f1+2,?___ftadd+2
  5596  001762  0012               	return	
  5597  001764                     l3529:
  5598  001764  0E06               	movlw	6
  5599  001766  6E25               	movwf	___ftadd@sign,c
  5600  001768  AE1E               	btfss	___ftadd@f1+2,7,c
  5601  00176A  D002               	goto	l3535
  5602  00176C  8E25               	bsf	___ftadd@sign,7,c
  5603  00176E  D000               	goto	l3535
  5604  001770                     l3535:
  5605  001770  BE21               	btfsc	___ftadd@f2+2,7,c
  5606  001772  8C25               	bsf	___ftadd@sign,6,c
  5607  001774  8E1D               	bsf	___ftadd@f1+1,7,c
  5608  001776  0EFF               	movlw	255
  5609  001778  161C               	andwf	___ftadd@f1,f,c
  5610  00177A  0EFF               	movlw	255
  5611  00177C  161D               	andwf	___ftadd@f1+1,f,c
  5612  00177E  0E00               	movlw	0
  5613  001780  161E               	andwf	___ftadd@f1+2,f,c
  5614  001782  8E20               	bsf	___ftadd@f2+1,7,c
  5615  001784  0EFF               	movlw	255
  5616  001786  161F               	andwf	___ftadd@f2,f,c
  5617  001788  0EFF               	movlw	255
  5618  00178A  1620               	andwf	___ftadd@f2+1,f,c
  5619  00178C  0E00               	movlw	0
  5620  00178E  1621               	andwf	___ftadd@f2+2,f,c
  5621  001790  5026               	movf	___ftadd@exp2,w,c
  5622  001792  5C27               	subwf	___ftadd@exp1,w,c
  5623  001794  B0D8               	btfsc	status,0,c
  5624  001796  D01E               	goto	l3555
  5625  001798                     l3545:
  5626  001798  90D8               	bcf	status,0,c
  5627  00179A  361F               	rlcf	___ftadd@f2,f,c
  5628  00179C  3620               	rlcf	___ftadd@f2+1,f,c
  5629  00179E  3621               	rlcf	___ftadd@f2+2,f,c
  5630  0017A0  0626               	decf	___ftadd@exp2,f,c
  5631  0017A2  5027               	movf	___ftadd@exp1,w,c
  5632  0017A4  1826               	xorwf	___ftadd@exp2,w,c
  5633  0017A6  B4D8               	btfsc	status,2,c
  5634  0017A8  D00F               	goto	l3553
  5635  0017AA  0625               	decf	___ftadd@sign,f,c
  5636  0017AC  C025  F022         	movff	___ftadd@sign,??___ftadd
  5637  0017B0  0E07               	movlw	7
  5638  0017B2  1622               	andwf	??___ftadd,f,c
  5639  0017B4  B4D8               	btfsc	status,2,c
  5640  0017B6  D008               	goto	l3553
  5641  0017B8  D7EF               	goto	l3545
  5642  0017BA  D006               	goto	l3553
  5643  0017BC                     l3551:
  5644  0017BC  90D8               	bcf	status,0,c
  5645  0017BE  321E               	rrcf	___ftadd@f1+2,f,c
  5646  0017C0  321D               	rrcf	___ftadd@f1+1,f,c
  5647  0017C2  321C               	rrcf	___ftadd@f1,f,c
  5648  0017C4  2A27               	incf	___ftadd@exp1,f,c
  5649  0017C6  D000               	goto	l3553
  5650  0017C8                     l3553:
  5651  0017C8  5026               	movf	___ftadd@exp2,w,c
  5652  0017CA  1827               	xorwf	___ftadd@exp1,w,c
  5653  0017CC  B4D8               	btfsc	status,2,c
  5654  0017CE  D024               	goto	l1451
  5655  0017D0  D7F5               	goto	l3551
  5656  0017D2  D022               	goto	l1451
  5657  0017D4                     l3555:
  5658  0017D4  5027               	movf	___ftadd@exp1,w,c
  5659  0017D6  5C26               	subwf	___ftadd@exp2,w,c
  5660  0017D8  B0D8               	btfsc	status,0,c
  5661  0017DA  D01E               	goto	l1451
  5662  0017DC                     l3557:
  5663  0017DC  90D8               	bcf	status,0,c
  5664  0017DE  361C               	rlcf	___ftadd@f1,f,c
  5665  0017E0  361D               	rlcf	___ftadd@f1+1,f,c
  5666  0017E2  361E               	rlcf	___ftadd@f1+2,f,c
  5667  0017E4  0627               	decf	___ftadd@exp1,f,c
  5668  0017E6  5027               	movf	___ftadd@exp1,w,c
  5669  0017E8  1826               	xorwf	___ftadd@exp2,w,c
  5670  0017EA  B4D8               	btfsc	status,2,c
  5671  0017EC  D00F               	goto	l3565
  5672  0017EE  0625               	decf	___ftadd@sign,f,c
  5673  0017F0  C025  F022         	movff	___ftadd@sign,??___ftadd
  5674  0017F4  0E07               	movlw	7
  5675  0017F6  1622               	andwf	??___ftadd,f,c
  5676  0017F8  B4D8               	btfsc	status,2,c
  5677  0017FA  D008               	goto	l3565
  5678  0017FC  D7EF               	goto	l3557
  5679  0017FE  D006               	goto	l3565
  5680  001800                     l3563:
  5681  001800  90D8               	bcf	status,0,c
  5682  001802  3221               	rrcf	___ftadd@f2+2,f,c
  5683  001804  3220               	rrcf	___ftadd@f2+1,f,c
  5684  001806  321F               	rrcf	___ftadd@f2,f,c
  5685  001808  2A26               	incf	___ftadd@exp2,f,c
  5686  00180A  D000               	goto	l3565
  5687  00180C                     l3565:
  5688  00180C  5026               	movf	___ftadd@exp2,w,c
  5689  00180E  1827               	xorwf	___ftadd@exp1,w,c
  5690  001810  B4D8               	btfsc	status,2,c
  5691  001812  D002               	goto	l1451
  5692  001814  D7F5               	goto	l3563
  5693  001816  D000               	goto	l1451
  5694  001818                     l1451:
  5695  001818  AE25               	btfss	___ftadd@sign,7,c
  5696  00181A  D00C               	goto	l1460
  5697  00181C  0EFF               	movlw	255
  5698  00181E  1A1C               	xorwf	___ftadd@f1,f,c
  5699  001820  0EFF               	movlw	255
  5700  001822  1A1D               	xorwf	___ftadd@f1+1,f,c
  5701  001824  0EFF               	movlw	255
  5702  001826  1A1E               	xorwf	___ftadd@f1+2,f,c
  5703  001828  0E01               	movlw	1
  5704  00182A  261C               	addwf	___ftadd@f1,f,c
  5705  00182C  0E00               	movlw	0
  5706  00182E  221D               	addwfc	___ftadd@f1+1,f,c
  5707  001830  0E00               	movlw	0
  5708  001832  221E               	addwfc	___ftadd@f1+2,f,c
  5709  001834                     l1460:
  5710  001834  AC25               	btfss	___ftadd@sign,6,c
  5711  001836  D00D               	goto	l3571
  5712  001838  0EFF               	movlw	255
  5713  00183A  1A1F               	xorwf	___ftadd@f2,f,c
  5714  00183C  0EFF               	movlw	255
  5715  00183E  1A20               	xorwf	___ftadd@f2+1,f,c
  5716  001840  0EFF               	movlw	255
  5717  001842  1A21               	xorwf	___ftadd@f2+2,f,c
  5718  001844  0E01               	movlw	1
  5719  001846  261F               	addwf	___ftadd@f2,f,c
  5720  001848  0E00               	movlw	0
  5721  00184A  2220               	addwfc	___ftadd@f2+1,f,c
  5722  00184C  0E00               	movlw	0
  5723  00184E  2221               	addwfc	___ftadd@f2+2,f,c
  5724  001850  D000               	goto	l3571
  5725  001852                     l3571:
  5726  001852  0E00               	movlw	0
  5727  001854  6E25               	movwf	___ftadd@sign,c
  5728  001856  501C               	movf	___ftadd@f1,w,c
  5729  001858  261F               	addwf	___ftadd@f2,f,c
  5730  00185A  501D               	movf	___ftadd@f1+1,w,c
  5731  00185C  2220               	addwfc	___ftadd@f2+1,f,c
  5732  00185E  501E               	movf	___ftadd@f1+2,w,c
  5733  001860  2221               	addwfc	___ftadd@f2+2,f,c
  5734  001862  AE21               	btfss	___ftadd@f2+2,7,c
  5735  001864  D00F               	goto	l3581
  5736  001866  0EFF               	movlw	255
  5737  001868  1A1F               	xorwf	___ftadd@f2,f,c
  5738  00186A  0EFF               	movlw	255
  5739  00186C  1A20               	xorwf	___ftadd@f2+1,f,c
  5740  00186E  0EFF               	movlw	255
  5741  001870  1A21               	xorwf	___ftadd@f2+2,f,c
  5742  001872  0E01               	movlw	1
  5743  001874  261F               	addwf	___ftadd@f2,f,c
  5744  001876  0E00               	movlw	0
  5745  001878  2220               	addwfc	___ftadd@f2+1,f,c
  5746  00187A  0E00               	movlw	0
  5747  00187C  2221               	addwfc	___ftadd@f2+2,f,c
  5748  00187E  0E01               	movlw	1
  5749  001880  6E25               	movwf	___ftadd@sign,c
  5750  001882  D000               	goto	l3581
  5751  001884                     l3581:
  5752  001884  C01F  F001         	movff	___ftadd@f2,___ftpack@arg
  5753  001888  C020  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  5754  00188C  C021  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  5755  001890  C027  F004         	movff	___ftadd@exp1,___ftpack@exp
  5756  001894  C025  F005         	movff	___ftadd@sign,___ftpack@sign
  5757  001898  EC22  F015         	call	___ftpack	;wreg free
  5758  00189C  C001  F01C         	movff	?___ftpack,?___ftadd
  5759  0018A0  C002  F01D         	movff	?___ftpack+1,?___ftadd+1
  5760  0018A4  C003  F01E         	movff	?___ftpack+2,?___ftadd+2
  5761  0018A8  0012               	return	
  5762  0018AA  0012               	return		;funcret
  5763  0018AC                     __end_of___ftadd:
  5764                           	opt stack 0
  5765                           tblptru	equ	0xFF8
  5766                           tblptrh	equ	0xFF7
  5767                           tblptrl	equ	0xFF6
  5768                           tablat	equ	0xFF5
  5769                           postinc0	equ	0xFEE
  5770                           wreg	equ	0xFE8
  5771                           postdec1	equ	0xFE5
  5772                           fsr1l	equ	0xFE1
  5773                           indf2	equ	0xFDF
  5774                           postinc2	equ	0xFDE
  5775                           postdec2	equ	0xFDD
  5776                           fsr2h	equ	0xFDA
  5777                           fsr2l	equ	0xFD9
  5778                           status	equ	0xFD8
  5779                           
  5780 ;; *************** function ___ftneg *****************
  5781 ;; Defined at:
  5782 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\ftneg.c"
  5783 ;; Parameters:    Size  Location     Type
  5784 ;;  f1              3    0[COMRAM] float 
  5785 ;; Auto vars:     Size  Location     Type
  5786 ;;		None
  5787 ;; Return value:  Size  Location     Type
  5788 ;;                  3    0[COMRAM] float 
  5789 ;; Registers used:
  5790 ;;		wreg, status,2, status,0
  5791 ;; Tracked objects:
  5792 ;;		On entry : 0/0
  5793 ;;		On exit  : 0/0
  5794 ;;		Unchanged: 0/0
  5795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5796 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5799 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5800 ;;Total ram usage:        3 bytes
  5801 ;; Hardware stack levels used:    1
  5802 ;; This function calls:
  5803 ;;		Nothing
  5804 ;; This function is called by:
  5805 ;;		_pow
  5806 ;;		_exp
  5807 ;; This function uses a non-reentrant model
  5808 ;;
  5809                           
  5810                           	psect	text32
  5811  003782                     __ptext32:
  5812                           	opt stack 0
  5813  003782                     ___ftneg:
  5814                           	opt stack 25
  5815                           
  5816                           ;incstack = 0
  5817  003782  5001               	movf	___ftneg@f1,w,c
  5818  003784  1002               	iorwf	___ftneg@f1+1,w,c
  5819  003786  1003               	iorwf	___ftneg@f1+2,w,c
  5820  003788  B4D8               	btfsc	status,2,c
  5821  00378A  D006               	goto	l1493
  5822  00378C  0E00               	movlw	0
  5823  00378E  1A01               	xorwf	___ftneg@f1,f,c
  5824  003790  0E00               	movlw	0
  5825  003792  1A02               	xorwf	___ftneg@f1+1,f,c
  5826  003794  0E80               	movlw	128
  5827  003796  1A03               	xorwf	___ftneg@f1+2,f,c
  5828  003798                     l1493:
  5829  003798  C001  F001         	movff	___ftneg@f1,?___ftneg
  5830  00379C  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  5831  0037A0  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  5832  0037A4  0012               	return		;funcret
  5833  0037A6                     __end_of___ftneg:
  5834                           	opt stack 0
  5835                           tblptru	equ	0xFF8
  5836                           tblptrh	equ	0xFF7
  5837                           tblptrl	equ	0xFF6
  5838                           tablat	equ	0xFF5
  5839                           postinc0	equ	0xFEE
  5840                           wreg	equ	0xFE8
  5841                           postdec1	equ	0xFE5
  5842                           fsr1l	equ	0xFE1
  5843                           indf2	equ	0xFDF
  5844                           postinc2	equ	0xFDE
  5845                           postdec2	equ	0xFDD
  5846                           fsr2h	equ	0xFDA
  5847                           fsr2l	equ	0xFD9
  5848                           status	equ	0xFD8
  5849                           
  5850 ;; *************** function ___ftdiv *****************
  5851 ;; Defined at:
  5852 ;;		line 54 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  5853 ;; Parameters:    Size  Location     Type
  5854 ;;  f1              3    8[COMRAM] float 
  5855 ;;  f2              3   11[COMRAM] float 
  5856 ;; Auto vars:     Size  Location     Type
  5857 ;;  f3              3   18[COMRAM] float 
  5858 ;;  sign            1   22[COMRAM] unsigned char 
  5859 ;;  exp             1   21[COMRAM] unsigned char 
  5860 ;;  cntr            1   17[COMRAM] unsigned char 
  5861 ;; Return value:  Size  Location     Type
  5862 ;;                  3    8[COMRAM] float 
  5863 ;; Registers used:
  5864 ;;		wreg, status,2, status,0, cstack
  5865 ;; Tracked objects:
  5866 ;;		On entry : 0/0
  5867 ;;		On exit  : 0/0
  5868 ;;		Unchanged: 0/0
  5869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5870 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5871 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5872 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5873 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5874 ;;Total ram usage:       15 bytes
  5875 ;; Hardware stack levels used:    1
  5876 ;; Hardware stack levels required when called:    1
  5877 ;; This function calls:
  5878 ;;		___ftpack
  5879 ;; This function is called by:
  5880 ;;		_exp
  5881 ;; This function uses a non-reentrant model
  5882 ;;
  5883                           
  5884                           	psect	text33
  5885  0025F4                     __ptext33:
  5886                           	opt stack 0
  5887  0025F4                     ___ftdiv:
  5888                           	opt stack 24
  5889                           
  5890                           ;incstack = 0
  5891  0025F4  C00B  F00F         	movff	___ftdiv@f1+2,??___ftdiv
  5892  0025F8  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  5893  0025FA  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  5894  0025FC  340A               	rlcf	___ftdiv@f1+1,w,c
  5895  0025FE  360F               	rlcf	??___ftdiv& (0+255),f,c
  5896  002600  E301               	bnc	u2911
  5897  002602  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  5898  002604                     u2911:
  5899  002604  500F               	movf	??___ftdiv,w,c
  5900  002606  6E16               	movwf	___ftdiv@exp,c
  5901  002608  5016               	movf	___ftdiv@exp,w,c
  5902  00260A  A4D8               	btfss	status,2,c
  5903  00260C  D007               	goto	l3749
  5904  00260E  0E00               	movlw	0
  5905  002610  6E09               	movwf	?___ftdiv,c
  5906  002612  0E00               	movlw	0
  5907  002614  6E0A               	movwf	?___ftdiv+1,c
  5908  002616  0E00               	movlw	0
  5909  002618  6E0B               	movwf	?___ftdiv+2,c
  5910  00261A  0012               	return	
  5911  00261C                     l3749:
  5912  00261C  C00E  F00F         	movff	___ftdiv@f2+2,??___ftdiv
  5913  002620  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  5914  002622  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  5915  002624  340D               	rlcf	___ftdiv@f2+1,w,c
  5916  002626  360F               	rlcf	??___ftdiv& (0+255),f,c
  5917  002628  E301               	bnc	u2931
  5918  00262A  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  5919  00262C                     u2931:
  5920  00262C  500F               	movf	??___ftdiv,w,c
  5921  00262E  6E17               	movwf	___ftdiv@sign,c
  5922  002630  5017               	movf	___ftdiv@sign,w,c
  5923  002632  A4D8               	btfss	status,2,c
  5924  002634  D007               	goto	l3755
  5925  002636  0E00               	movlw	0
  5926  002638  6E09               	movwf	?___ftdiv,c
  5927  00263A  0E00               	movlw	0
  5928  00263C  6E0A               	movwf	?___ftdiv+1,c
  5929  00263E  0E00               	movlw	0
  5930  002640  6E0B               	movwf	?___ftdiv+2,c
  5931  002642  0012               	return	
  5932  002644                     l3755:
  5933  002644  0E00               	movlw	0
  5934  002646  6E13               	movwf	___ftdiv@f3,c
  5935  002648  0E00               	movlw	0
  5936  00264A  6E14               	movwf	___ftdiv@f3+1,c
  5937  00264C  0E00               	movlw	0
  5938  00264E  6E15               	movwf	___ftdiv@f3+2,c
  5939  002650  5017               	movf	___ftdiv@sign,w,c
  5940  002652  0F89               	addlw	137
  5941  002654  5E16               	subwf	___ftdiv@exp,f,c
  5942  002656  C00B  F017         	movff	___ftdiv@f1+2,___ftdiv@sign
  5943  00265A  500E               	movf	___ftdiv@f2+2,w,c
  5944  00265C  1A17               	xorwf	___ftdiv@sign,f,c
  5945  00265E  0E80               	movlw	128
  5946  002660  1617               	andwf	___ftdiv@sign,f,c
  5947  002662  8E0A               	bsf	___ftdiv@f1+1,7,c
  5948  002664  0EFF               	movlw	255
  5949  002666  1609               	andwf	___ftdiv@f1,f,c
  5950  002668  0EFF               	movlw	255
  5951  00266A  160A               	andwf	___ftdiv@f1+1,f,c
  5952  00266C  0E00               	movlw	0
  5953  00266E  160B               	andwf	___ftdiv@f1+2,f,c
  5954  002670  8E0D               	bsf	___ftdiv@f2+1,7,c
  5955  002672  0EFF               	movlw	255
  5956  002674  160C               	andwf	___ftdiv@f2,f,c
  5957  002676  0EFF               	movlw	255
  5958  002678  160D               	andwf	___ftdiv@f2+1,f,c
  5959  00267A  0E00               	movlw	0
  5960  00267C  160E               	andwf	___ftdiv@f2+2,f,c
  5961  00267E  0E18               	movlw	24
  5962  002680  6E12               	movwf	___ftdiv@cntr,c
  5963  002682  D000               	goto	l3775
  5964  002684                     l3775:
  5965  002684  90D8               	bcf	status,0,c
  5966  002686  3613               	rlcf	___ftdiv@f3,f,c
  5967  002688  3614               	rlcf	___ftdiv@f3+1,f,c
  5968  00268A  3615               	rlcf	___ftdiv@f3+2,f,c
  5969  00268C  500C               	movf	___ftdiv@f2,w,c
  5970  00268E  5C09               	subwf	___ftdiv@f1,w,c
  5971  002690  500D               	movf	___ftdiv@f2+1,w,c
  5972  002692  580A               	subwfb	___ftdiv@f1+1,w,c
  5973  002694  500E               	movf	___ftdiv@f2+2,w,c
  5974  002696  580B               	subwfb	___ftdiv@f1+2,w,c
  5975  002698  A0D8               	btfss	status,0,c
  5976  00269A  D007               	goto	l1471
  5977  00269C  500C               	movf	___ftdiv@f2,w,c
  5978  00269E  5E09               	subwf	___ftdiv@f1,f,c
  5979  0026A0  500D               	movf	___ftdiv@f2+1,w,c
  5980  0026A2  5A0A               	subwfb	___ftdiv@f1+1,f,c
  5981  0026A4  500E               	movf	___ftdiv@f2+2,w,c
  5982  0026A6  5A0B               	subwfb	___ftdiv@f1+2,f,c
  5983  0026A8  8013               	bsf	___ftdiv@f3,0,c
  5984  0026AA                     l1471:
  5985  0026AA  90D8               	bcf	status,0,c
  5986  0026AC  3609               	rlcf	___ftdiv@f1,f,c
  5987  0026AE  360A               	rlcf	___ftdiv@f1+1,f,c
  5988  0026B0  360B               	rlcf	___ftdiv@f1+2,f,c
  5989  0026B2  2E12               	decfsz	___ftdiv@cntr,f,c
  5990  0026B4  D7E7               	goto	l3775
  5991  0026B6  D000               	goto	l3785
  5992  0026B8                     l3785:
  5993  0026B8  C013  F001         	movff	___ftdiv@f3,___ftpack@arg
  5994  0026BC  C014  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5995  0026C0  C015  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5996  0026C4  C016  F004         	movff	___ftdiv@exp,___ftpack@exp
  5997  0026C8  C017  F005         	movff	___ftdiv@sign,___ftpack@sign
  5998  0026CC  EC22  F015         	call	___ftpack	;wreg free
  5999  0026D0  C001  F009         	movff	?___ftpack,?___ftdiv
  6000  0026D4  C002  F00A         	movff	?___ftpack+1,?___ftdiv+1
  6001  0026D8  C003  F00B         	movff	?___ftpack+2,?___ftdiv+2
  6002  0026DC  0012               	return	
  6003  0026DE  0012               	return		;funcret
  6004  0026E0                     __end_of___ftdiv:
  6005                           	opt stack 0
  6006                           tblptru	equ	0xFF8
  6007                           tblptrh	equ	0xFF7
  6008                           tblptrl	equ	0xFF6
  6009                           tablat	equ	0xFF5
  6010                           postinc0	equ	0xFEE
  6011                           wreg	equ	0xFE8
  6012                           postdec1	equ	0xFE5
  6013                           fsr1l	equ	0xFE1
  6014                           indf2	equ	0xFDF
  6015                           postinc2	equ	0xFDE
  6016                           postdec2	equ	0xFDD
  6017                           fsr2h	equ	0xFDA
  6018                           fsr2l	equ	0xFD9
  6019                           status	equ	0xFD8
  6020                           
  6021 ;; *************** function ___awtoft *****************
  6022 ;; Defined at:
  6023 ;;		line 32 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\awtoft.c"
  6024 ;; Parameters:    Size  Location     Type
  6025 ;;  c               2    8[COMRAM] int 
  6026 ;; Auto vars:     Size  Location     Type
  6027 ;;  sign            1   11[COMRAM] unsigned char 
  6028 ;; Return value:  Size  Location     Type
  6029 ;;                  3    8[COMRAM] float 
  6030 ;; Registers used:
  6031 ;;		wreg, status,2, status,0, cstack
  6032 ;; Tracked objects:
  6033 ;;		On entry : 0/0
  6034 ;;		On exit  : 0/0
  6035 ;;		Unchanged: 0/0
  6036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6037 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6038 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6040 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6041 ;;Total ram usage:        4 bytes
  6042 ;; Hardware stack levels used:    1
  6043 ;; Hardware stack levels required when called:    1
  6044 ;; This function calls:
  6045 ;;		___ftpack
  6046 ;; This function is called by:
  6047 ;;		_obtain_pass
  6048 ;;		_input_old_pass
  6049 ;;		_input_new_pass
  6050 ;;		_exp
  6051 ;;		_log
  6052 ;; This function uses a non-reentrant model
  6053 ;;
  6054                           
  6055                           	psect	text34
  6056  00357E                     __ptext34:
  6057                           	opt stack 0
  6058  00357E                     ___awtoft:
  6059                           	opt stack 24
  6060                           
  6061                           ;incstack = 0
  6062  00357E  0E00               	movlw	0
  6063  003580  6E0C               	movwf	___awtoft@sign,c
  6064  003582  AE0A               	btfss	___awtoft@c+1,7,c
  6065  003584  D007               	goto	l3805
  6066  003586  6C09               	negf	___awtoft@c,c
  6067  003588  1E0A               	comf	___awtoft@c+1,f,c
  6068  00358A  B0D8               	btfsc	status,0,c
  6069  00358C  2A0A               	incf	___awtoft@c+1,f,c
  6070  00358E  0E01               	movlw	1
  6071  003590  6E0C               	movwf	___awtoft@sign,c
  6072  003592  D000               	goto	l3805
  6073  003594                     l3805:
  6074  003594  C009  F001         	movff	___awtoft@c,___ftpack@arg
  6075  003598  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  6076  00359C  6A03               	clrf	___ftpack@arg+2,c
  6077  00359E  0E8E               	movlw	142
  6078  0035A0  6E04               	movwf	___ftpack@exp,c
  6079  0035A2  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  6080  0035A6  EC22  F015         	call	___ftpack	;wreg free
  6081  0035AA  C001  F009         	movff	?___ftpack,?___awtoft
  6082  0035AE  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  6083  0035B2  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  6084  0035B6  0012               	return	
  6085  0035B8  0012               	return		;funcret
  6086  0035BA                     __end_of___awtoft:
  6087                           	opt stack 0
  6088                           tblptru	equ	0xFF8
  6089                           tblptrh	equ	0xFF7
  6090                           tblptrl	equ	0xFF6
  6091                           tablat	equ	0xFF5
  6092                           postinc0	equ	0xFEE
  6093                           wreg	equ	0xFE8
  6094                           postdec1	equ	0xFE5
  6095                           fsr1l	equ	0xFE1
  6096                           indf2	equ	0xFDF
  6097                           postinc2	equ	0xFDE
  6098                           postdec2	equ	0xFDD
  6099                           fsr2h	equ	0xFDA
  6100                           fsr2l	equ	0xFD9
  6101                           status	equ	0xFD8
  6102                           
  6103 ;; *************** function ___lltoft *****************
  6104 ;; Defined at:
  6105 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lltoft.c"
  6106 ;; Parameters:    Size  Location     Type
  6107 ;;  c               4    8[COMRAM] unsigned long 
  6108 ;; Auto vars:     Size  Location     Type
  6109 ;;  exp             1   16[COMRAM] unsigned char 
  6110 ;; Return value:  Size  Location     Type
  6111 ;;                  3    8[COMRAM] float 
  6112 ;; Registers used:
  6113 ;;		wreg, status,2, status,0, cstack
  6114 ;; Tracked objects:
  6115 ;;		On entry : 0/0
  6116 ;;		On exit  : 0/0
  6117 ;;		Unchanged: 0/0
  6118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6119 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6120 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6121 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6122 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6123 ;;Total ram usage:        9 bytes
  6124 ;; Hardware stack levels used:    1
  6125 ;; Hardware stack levels required when called:    1
  6126 ;; This function calls:
  6127 ;;		___ftpack
  6128 ;; This function is called by:
  6129 ;;		_pow
  6130 ;; This function uses a non-reentrant model
  6131 ;;
  6132                           
  6133                           	psect	text35
  6134  00322C                     __ptext35:
  6135                           	opt stack 0
  6136  00322C                     ___lltoft:
  6137                           	opt stack 25
  6138                           
  6139                           ;incstack = 0
  6140  00322C  0E8E               	movlw	142
  6141  00322E  6E11               	movwf	___lltoft@exp,c
  6142  003230  D007               	goto	l4067
  6143  003232                     l4065:
  6144  003232  90D8               	bcf	status,0,c
  6145  003234  320C               	rrcf	___lltoft@c+3,f,c
  6146  003236  320B               	rrcf	___lltoft@c+2,f,c
  6147  003238  320A               	rrcf	___lltoft@c+1,f,c
  6148  00323A  3209               	rrcf	___lltoft@c,f,c
  6149  00323C  2A11               	incf	___lltoft@exp,f,c
  6150  00323E  D000               	goto	l4067
  6151  003240                     l4067:
  6152  003240  0E00               	movlw	0
  6153  003242  1409               	andwf	___lltoft@c,w,c
  6154  003244  6E0D               	movwf	??___lltoft& (0+255),c
  6155  003246  0E00               	movlw	0
  6156  003248  140A               	andwf	___lltoft@c+1,w,c
  6157  00324A  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  6158  00324C  0E00               	movlw	0
  6159  00324E  140B               	andwf	___lltoft@c+2,w,c
  6160  003250  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  6161  003252  0EFF               	movlw	255
  6162  003254  140C               	andwf	___lltoft@c+3,w,c
  6163  003256  6E10               	movwf	(??___lltoft+3)& (0+255),c
  6164  003258  500D               	movf	??___lltoft,w,c
  6165  00325A  100E               	iorwf	??___lltoft+1,w,c
  6166  00325C  100F               	iorwf	??___lltoft+2,w,c
  6167  00325E  1010               	iorwf	??___lltoft+3,w,c
  6168  003260  A4D8               	btfss	status,2,c
  6169  003262  D7E7               	goto	l4065
  6170  003264  C009  F001         	movff	___lltoft@c,___ftpack@arg
  6171  003268  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  6172  00326C  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  6173  003270  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  6174  003274  0E00               	movlw	0
  6175  003276  6E05               	movwf	___ftpack@sign,c
  6176  003278  EC22  F015         	call	___ftpack	;wreg free
  6177  00327C  C001  F009         	movff	?___ftpack,?___lltoft
  6178  003280  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  6179  003284  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  6180  003288  0012               	return	
  6181  00328A  0012               	return		;funcret
  6182  00328C                     __end_of___lltoft:
  6183                           	opt stack 0
  6184                           tblptru	equ	0xFF8
  6185                           tblptrh	equ	0xFF7
  6186                           tblptrl	equ	0xFF6
  6187                           tablat	equ	0xFF5
  6188                           postinc0	equ	0xFEE
  6189                           wreg	equ	0xFE8
  6190                           postdec1	equ	0xFE5
  6191                           fsr1l	equ	0xFE1
  6192                           indf2	equ	0xFDF
  6193                           postinc2	equ	0xFDE
  6194                           postdec2	equ	0xFDD
  6195                           fsr2h	equ	0xFDA
  6196                           fsr2l	equ	0xFD9
  6197                           status	equ	0xFD8
  6198                           
  6199 ;; *************** function _not_fill_pass *****************
  6200 ;; Defined at:
  6201 ;;		line 34 in file "lcd_vision.c"
  6202 ;; Parameters:    Size  Location     Type
  6203 ;;  digit           2    0[COMRAM] short 
  6204 ;; Auto vars:     Size  Location     Type
  6205 ;;		None
  6206 ;; Return value:  Size  Location     Type
  6207 ;;                  1    wreg      unsigned char 
  6208 ;; Registers used:
  6209 ;;		wreg, status,2, status,0
  6210 ;; Tracked objects:
  6211 ;;		On entry : 0/0
  6212 ;;		On exit  : 0/0
  6213 ;;		Unchanged: 0/0
  6214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6215 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6218 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6219 ;;Total ram usage:        2 bytes
  6220 ;; Hardware stack levels used:    1
  6221 ;; This function calls:
  6222 ;;		Nothing
  6223 ;; This function is called by:
  6224 ;;		_input_password
  6225 ;;		_input_old_pass
  6226 ;;		_input_new_pass
  6227 ;; This function uses a non-reentrant model
  6228 ;;
  6229                           
  6230                           	psect	text36
  6231  003832                     __ptext36:
  6232                           	opt stack 0
  6233  003832                     _not_fill_pass:
  6234                           	opt stack 28
  6235                           
  6236                           ;lcd_vision.c: 35: return digit !=16;
  6237                           
  6238                           ;incstack = 0
  6239  003832  0E10               	movlw	16
  6240  003834  1801               	xorwf	not_fill_pass@digit,w,c
  6241  003836  1002               	iorwf	not_fill_pass@digit+1,w,c
  6242  003838  B4D8               	btfsc	status,2,c
  6243  00383A  D002               	goto	u3820
  6244  00383C  0E01               	movlw	1
  6245  00383E  0012               	return	
  6246  003840                     u3820:
  6247  003840  0E00               	movlw	0
  6248  003842  0012               	return	
  6249  003844  0012               	return		;funcret
  6250  003846                     __end_of_not_fill_pass:
  6251                           	opt stack 0
  6252                           tblptru	equ	0xFF8
  6253                           tblptrh	equ	0xFF7
  6254                           tblptrl	equ	0xFF6
  6255                           tablat	equ	0xFF5
  6256                           postinc0	equ	0xFEE
  6257                           wreg	equ	0xFE8
  6258                           postdec1	equ	0xFE5
  6259                           fsr1l	equ	0xFE1
  6260                           indf2	equ	0xFDF
  6261                           postinc2	equ	0xFDE
  6262                           postdec2	equ	0xFDD
  6263                           fsr2h	equ	0xFDA
  6264                           fsr2l	equ	0xFD9
  6265                           status	equ	0xFD8
  6266                           
  6267 ;; *************** function _clear_keyboard *****************
  6268 ;; Defined at:
  6269 ;;		line 4 in file "keyboard.c"
  6270 ;; Parameters:    Size  Location     Type
  6271 ;;		None
  6272 ;; Auto vars:     Size  Location     Type
  6273 ;;		None
  6274 ;; Return value:  Size  Location     Type
  6275 ;;		None               void
  6276 ;; Registers used:
  6277 ;;		wreg, status,2
  6278 ;; Tracked objects:
  6279 ;;		On entry : 0/0
  6280 ;;		On exit  : 0/0
  6281 ;;		Unchanged: 0/0
  6282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6286 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6287 ;;Total ram usage:        0 bytes
  6288 ;; Hardware stack levels used:    1
  6289 ;; This function calls:
  6290 ;;		Nothing
  6291 ;; This function is called by:
  6292 ;;		_next_code
  6293 ;;		_twinkle
  6294 ;;		_input_old_pass
  6295 ;;		_input_new_pass
  6296 ;; This function uses a non-reentrant model
  6297 ;;
  6298                           
  6299                           	psect	text37
  6300  0038A6                     __ptext37:
  6301                           	opt stack 0
  6302  0038A6                     _clear_keyboard:
  6303                           	opt stack 28
  6304                           
  6305                           ;keyboard.c: 5: key = 18;
  6306                           
  6307                           ;incstack = 0
  6308  0038A6  0E12               	movlw	18
  6309  0038A8  0100               	movlb	0	; () banked
  6310  0038AA  6FD7               	movwf	_key& (0+255),b
  6311                           
  6312                           ; BSR set to: 0
  6313  0038AC  0012               	return		;funcret
  6314  0038AE                     __end_of_clear_keyboard:
  6315                           	opt stack 0
  6316                           tblptru	equ	0xFF8
  6317                           tblptrh	equ	0xFF7
  6318                           tblptrl	equ	0xFF6
  6319                           tablat	equ	0xFF5
  6320                           postinc0	equ	0xFEE
  6321                           wreg	equ	0xFE8
  6322                           postdec1	equ	0xFE5
  6323                           fsr1l	equ	0xFE1
  6324                           indf2	equ	0xFDF
  6325                           postinc2	equ	0xFDE
  6326                           postdec2	equ	0xFDD
  6327                           fsr2h	equ	0xFDA
  6328                           fsr2l	equ	0xFD9
  6329                           status	equ	0xFD8
  6330                           
  6331 ;; *************** function __delay_s *****************
  6332 ;; Defined at:
  6333 ;;		line 21 in file "lcd_vision.c"
  6334 ;; Parameters:    Size  Location     Type
  6335 ;;  millis          2    8[COMRAM] int 
  6336 ;; Auto vars:     Size  Location     Type
  6337 ;;  index           2   13[COMRAM] short 
  6338 ;;  it              2   11[COMRAM] short 
  6339 ;; Return value:  Size  Location     Type
  6340 ;;		None               void
  6341 ;; Registers used:
  6342 ;;		wreg, status,2, status,0, cstack
  6343 ;; Tracked objects:
  6344 ;;		On entry : 0/0
  6345 ;;		On exit  : 0/0
  6346 ;;		Unchanged: 0/0
  6347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6348 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6349 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6350 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6351 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6352 ;;Total ram usage:        7 bytes
  6353 ;; Hardware stack levels used:    1
  6354 ;; Hardware stack levels required when called:    1
  6355 ;; This function calls:
  6356 ;;		___awdiv
  6357 ;; This function is called by:
  6358 ;;		_twinkle
  6359 ;;		_input_old_pass
  6360 ;;		_show_success
  6361 ;;		_show_error
  6362 ;;		_input_new_pass
  6363 ;; This function uses a non-reentrant model
  6364 ;;
  6365                           
  6366                           	psect	text38
  6367  0032E8                     __ptext38:
  6368                           	opt stack 0
  6369  0032E8                     __delay_s:
  6370                           	opt stack 27
  6371                           
  6372                           ;lcd_vision.c: 22: short it = millis/100;
  6373                           
  6374                           ; BSR set to: 0
  6375                           ;incstack = 0
  6376  0032E8  C009  F001         	movff	__delay_s@millis,___awdiv@dividend
  6377  0032EC  C00A  F002         	movff	__delay_s@millis+1,___awdiv@dividend+1
  6378  0032F0  0E00               	movlw	0
  6379  0032F2  6E04               	movwf	___awdiv@divisor+1,c
  6380  0032F4  0E64               	movlw	100
  6381  0032F6  6E03               	movwf	___awdiv@divisor,c
  6382  0032F8  EC1C  F016         	call	___awdiv	;wreg free
  6383  0032FC  C001  F00C         	movff	?___awdiv,__delay_s@it
  6384  003300  C002  F00D         	movff	?___awdiv+1,__delay_s@it+1
  6385                           
  6386                           ;lcd_vision.c: 23: short index = 1;
  6387  003304  0E00               	movlw	0
  6388  003306  6E0F               	movwf	__delay_s@index+1,c
  6389  003308  0E01               	movlw	1
  6390  00330A  6E0E               	movwf	__delay_s@index,c
  6391                           
  6392                           ;lcd_vision.c: 25: for(index = 1; index <= it; index++){
  6393  00330C  0E00               	movlw	0
  6394  00330E  6E0F               	movwf	__delay_s@index+1,c
  6395  003310  0E01               	movlw	1
  6396  003312  6E0E               	movwf	__delay_s@index,c
  6397  003314  D00A               	goto	l598
  6398  003316                     l4231:
  6399                           
  6400                           ;lcd_vision.c: 26: _delay((unsigned long)((98)*(8000000/4000.0)));
  6401  003316  0EFF               	movlw	255
  6402  003318  6E0B               	movwf	??__delay_s& (0+255),c
  6403  00331A  0E8A               	movlw	138
  6404  00331C                     u4587:
  6405  00331C  2EE8               	decfsz	wreg,f,c
  6406  00331E  D7FE               	goto	u4587
  6407  003320  2E0B               	decfsz	??__delay_s& (0+255),f,c
  6408  003322  D7FC               	goto	u4587
  6409  003324  D000               	nop2	
  6410  003326  4A0E               	infsnz	__delay_s@index,f,c
  6411  003328  2A0F               	incf	__delay_s@index+1,f,c
  6412  00332A                     l598:
  6413  00332A  500E               	movf	__delay_s@index,w,c
  6414  00332C  5C0C               	subwf	__delay_s@it,w,c
  6415  00332E  500D               	movf	__delay_s@it+1,w,c
  6416  003330  0A80               	xorlw	128
  6417  003332  6E0B               	movwf	??__delay_s& (0+255),c
  6418  003334  500F               	movf	__delay_s@index+1,w,c
  6419  003336  0A80               	xorlw	128
  6420  003338  580B               	subwfb	??__delay_s& (0+255),w,c
  6421  00333A  B0D8               	btfsc	status,0,c
  6422  00333C  D7EC               	goto	l4231
  6423  00333E  0012               	return		;funcret
  6424  003340                     __end_of__delay_s:
  6425                           	opt stack 0
  6426                           tblptru	equ	0xFF8
  6427                           tblptrh	equ	0xFF7
  6428                           tblptrl	equ	0xFF6
  6429                           tablat	equ	0xFF5
  6430                           postinc0	equ	0xFEE
  6431                           wreg	equ	0xFE8
  6432                           postdec1	equ	0xFE5
  6433                           fsr1l	equ	0xFE1
  6434                           indf2	equ	0xFDF
  6435                           postinc2	equ	0xFDE
  6436                           postdec2	equ	0xFDD
  6437                           fsr2h	equ	0xFDA
  6438                           fsr2l	equ	0xFD9
  6439                           status	equ	0xFD8
  6440                           
  6441 ;; *************** function ___lbtoft *****************
  6442 ;; Defined at:
  6443 ;;		line 27 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lbtoft.c"
  6444 ;; Parameters:    Size  Location     Type
  6445 ;;  c               1    wreg     unsigned char 
  6446 ;; Auto vars:     Size  Location     Type
  6447 ;;  c               1   11[COMRAM] unsigned char 
  6448 ;; Return value:  Size  Location     Type
  6449 ;;                  3    8[COMRAM] float 
  6450 ;; Registers used:
  6451 ;;		wreg, status,2, status,0, cstack
  6452 ;; Tracked objects:
  6453 ;;		On entry : 0/0
  6454 ;;		On exit  : 0/0
  6455 ;;		Unchanged: 0/0
  6456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6457 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6458 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6460 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6461 ;;Total ram usage:        4 bytes
  6462 ;; Hardware stack levels used:    1
  6463 ;; Hardware stack levels required when called:    1
  6464 ;; This function calls:
  6465 ;;		___ftpack
  6466 ;; This function is called by:
  6467 ;;		_obtain_pass
  6468 ;;		_input_old_pass
  6469 ;;		_input_new_pass
  6470 ;; This function uses a non-reentrant model
  6471 ;;
  6472                           
  6473                           	psect	text39
  6474  003738                     __ptext39:
  6475                           	opt stack 0
  6476  003738                     ___lbtoft:
  6477                           	opt stack 26
  6478                           
  6479                           ;incstack = 0
  6480                           ;___lbtoft@c stored from wreg
  6481  003738  6E0C               	movwf	___lbtoft@c,c
  6482  00373A  500C               	movf	___lbtoft@c,w,c
  6483  00373C  6E01               	movwf	___ftpack@arg,c
  6484  00373E  6A02               	clrf	___ftpack@arg+1,c
  6485  003740  6A03               	clrf	___ftpack@arg+2,c
  6486  003742  0E8E               	movlw	142
  6487  003744  6E04               	movwf	___ftpack@exp,c
  6488  003746  0E00               	movlw	0
  6489  003748  6E05               	movwf	___ftpack@sign,c
  6490  00374A  EC22  F015         	call	___ftpack	;wreg free
  6491  00374E  C001  F009         	movff	?___ftpack,?___lbtoft
  6492  003752  C002  F00A         	movff	?___ftpack+1,?___lbtoft+1
  6493  003756  C003  F00B         	movff	?___ftpack+2,?___lbtoft+2
  6494  00375A  0012               	return	
  6495  00375C  0012               	return		;funcret
  6496  00375E                     __end_of___lbtoft:
  6497                           	opt stack 0
  6498                           tblptru	equ	0xFF8
  6499                           tblptrh	equ	0xFF7
  6500                           tblptrl	equ	0xFF6
  6501                           tablat	equ	0xFF5
  6502                           postinc0	equ	0xFEE
  6503                           wreg	equ	0xFE8
  6504                           postdec1	equ	0xFE5
  6505                           fsr1l	equ	0xFE1
  6506                           indf2	equ	0xFDF
  6507                           postinc2	equ	0xFDE
  6508                           postdec2	equ	0xFDD
  6509                           fsr2h	equ	0xFDA
  6510                           fsr2l	equ	0xFD9
  6511                           status	equ	0xFD8
  6512                           
  6513 ;; *************** function ___ftpack *****************
  6514 ;; Defined at:
  6515 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\float.c"
  6516 ;; Parameters:    Size  Location     Type
  6517 ;;  arg             3    0[COMRAM] unsigned um
  6518 ;;  exp             1    3[COMRAM] unsigned char 
  6519 ;;  sign            1    4[COMRAM] unsigned char 
  6520 ;; Auto vars:     Size  Location     Type
  6521 ;;		None
  6522 ;; Return value:  Size  Location     Type
  6523 ;;                  3    0[COMRAM] float 
  6524 ;; Registers used:
  6525 ;;		wreg, status,2, status,0
  6526 ;; Tracked objects:
  6527 ;;		On entry : 0/0
  6528 ;;		On exit  : 0/0
  6529 ;;		Unchanged: 0/0
  6530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6531 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6533 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6534 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6535 ;;Total ram usage:        8 bytes
  6536 ;; Hardware stack levels used:    1
  6537 ;; This function calls:
  6538 ;;		Nothing
  6539 ;; This function is called by:
  6540 ;;		___altoft
  6541 ;;		___awtoft
  6542 ;;		___ftadd
  6543 ;;		___ftdiv
  6544 ;;		___ftmul
  6545 ;;		___lbtoft
  6546 ;;		___lltoft
  6547 ;; This function uses a non-reentrant model
  6548 ;;
  6549                           
  6550                           	psect	text40
  6551  002A44                     __ptext40:
  6552                           	opt stack 0
  6553  002A44                     ___ftpack:
  6554                           	opt stack 23
  6555                           
  6556                           ;incstack = 0
  6557  002A44  5004               	movf	___ftpack@exp,w,c
  6558  002A46  B4D8               	btfsc	status,2,c
  6559  002A48  D005               	goto	l3451
  6560  002A4A  5001               	movf	___ftpack@arg,w,c
  6561  002A4C  1002               	iorwf	___ftpack@arg+1,w,c
  6562  002A4E  1003               	iorwf	___ftpack@arg+2,w,c
  6563  002A50  A4D8               	btfss	status,2,c
  6564  002A52  D00E               	goto	l3457
  6565  002A54                     l3451:
  6566  002A54  0E00               	movlw	0
  6567  002A56  6E01               	movwf	?___ftpack,c
  6568  002A58  0E00               	movlw	0
  6569  002A5A  6E02               	movwf	?___ftpack+1,c
  6570  002A5C  0E00               	movlw	0
  6571  002A5E  6E03               	movwf	?___ftpack+2,c
  6572  002A60  0012               	return	
  6573  002A62  D006               	goto	l3457
  6574  002A64                     l3455:
  6575  002A64  2A04               	incf	___ftpack@exp,f,c
  6576  002A66  90D8               	bcf	status,0,c
  6577  002A68  3203               	rrcf	___ftpack@arg+2,f,c
  6578  002A6A  3202               	rrcf	___ftpack@arg+1,f,c
  6579  002A6C  3201               	rrcf	___ftpack@arg,f,c
  6580  002A6E  D000               	goto	l3457
  6581  002A70                     l3457:
  6582  002A70  0E00               	movlw	0
  6583  002A72  1401               	andwf	___ftpack@arg,w,c
  6584  002A74  6E06               	movwf	??___ftpack& (0+255),c
  6585  002A76  0E00               	movlw	0
  6586  002A78  1402               	andwf	___ftpack@arg+1,w,c
  6587  002A7A  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6588  002A7C  0EFE               	movlw	254
  6589  002A7E  1403               	andwf	___ftpack@arg+2,w,c
  6590  002A80  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6591  002A82  5006               	movf	??___ftpack,w,c
  6592  002A84  1007               	iorwf	??___ftpack+1,w,c
  6593  002A86  1008               	iorwf	??___ftpack+2,w,c
  6594  002A88  B4D8               	btfsc	status,2,c
  6595  002A8A  D00E               	goto	l3463
  6596  002A8C  D7EB               	goto	l3455
  6597  002A8E  D00C               	goto	l3463
  6598  002A90                     l3459:
  6599  002A90  2A04               	incf	___ftpack@exp,f,c
  6600  002A92  0E01               	movlw	1
  6601  002A94  2601               	addwf	___ftpack@arg,f,c
  6602  002A96  0E00               	movlw	0
  6603  002A98  2202               	addwfc	___ftpack@arg+1,f,c
  6604  002A9A  0E00               	movlw	0
  6605  002A9C  2203               	addwfc	___ftpack@arg+2,f,c
  6606  002A9E  90D8               	bcf	status,0,c
  6607  002AA0  3203               	rrcf	___ftpack@arg+2,f,c
  6608  002AA2  3202               	rrcf	___ftpack@arg+1,f,c
  6609  002AA4  3201               	rrcf	___ftpack@arg,f,c
  6610  002AA6  D000               	goto	l3463
  6611  002AA8                     l3463:
  6612  002AA8  0E00               	movlw	0
  6613  002AAA  1401               	andwf	___ftpack@arg,w,c
  6614  002AAC  6E06               	movwf	??___ftpack& (0+255),c
  6615  002AAE  0E00               	movlw	0
  6616  002AB0  1402               	andwf	___ftpack@arg+1,w,c
  6617  002AB2  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6618  002AB4  0EFF               	movlw	255
  6619  002AB6  1403               	andwf	___ftpack@arg+2,w,c
  6620  002AB8  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6621  002ABA  5006               	movf	??___ftpack,w,c
  6622  002ABC  1007               	iorwf	??___ftpack+1,w,c
  6623  002ABE  1008               	iorwf	??___ftpack+2,w,c
  6624  002AC0  B4D8               	btfsc	status,2,c
  6625  002AC2  D008               	goto	l3467
  6626  002AC4  D7E5               	goto	l3459
  6627  002AC6  D006               	goto	l3467
  6628  002AC8                     l3465:
  6629  002AC8  0604               	decf	___ftpack@exp,f,c
  6630  002ACA  90D8               	bcf	status,0,c
  6631  002ACC  3601               	rlcf	___ftpack@arg,f,c
  6632  002ACE  3602               	rlcf	___ftpack@arg+1,f,c
  6633  002AD0  3603               	rlcf	___ftpack@arg+2,f,c
  6634  002AD2  D000               	goto	l3467
  6635  002AD4                     l3467:
  6636  002AD4  BE02               	btfsc	___ftpack@arg+1,7,c
  6637  002AD6  D004               	goto	l1407
  6638  002AD8  0E02               	movlw	2
  6639  002ADA  6004               	cpfslt	___ftpack@exp,c
  6640  002ADC  D7F5               	goto	l3465
  6641  002ADE  D000               	goto	l1407
  6642  002AE0                     l1407:
  6643  002AE0  B004               	btfsc	___ftpack@exp,0,c
  6644  002AE2  D002               	goto	l3473
  6645  002AE4  9E02               	bcf	___ftpack@arg+1,7,c
  6646  002AE6  D000               	goto	l3473
  6647  002AE8                     l3473:
  6648  002AE8  90D8               	bcf	status,0,c
  6649  002AEA  3204               	rrcf	___ftpack@exp,f,c
  6650  002AEC  5004               	movf	___ftpack@exp,w,c
  6651  002AEE  1203               	iorwf	___ftpack@arg+2,f,c
  6652  002AF0  5005               	movf	___ftpack@sign,w,c
  6653  002AF2  B4D8               	btfsc	status,2,c
  6654  002AF4  D002               	goto	l3479
  6655  002AF6  8E03               	bsf	___ftpack@arg+2,7,c
  6656  002AF8  D000               	goto	l3479
  6657  002AFA                     l3479:
  6658  002AFA  C001  F001         	movff	___ftpack@arg,?___ftpack
  6659  002AFE  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6660  002B02  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6661  002B06  0012               	return	
  6662  002B08  0012               	return		;funcret
  6663  002B0A                     __end_of___ftpack:
  6664                           	opt stack 0
  6665                           tblptru	equ	0xFF8
  6666                           tblptrh	equ	0xFF7
  6667                           tblptrl	equ	0xFF6
  6668                           tablat	equ	0xFF5
  6669                           postinc0	equ	0xFEE
  6670                           wreg	equ	0xFE8
  6671                           postdec1	equ	0xFE5
  6672                           fsr1l	equ	0xFE1
  6673                           indf2	equ	0xFDF
  6674                           postinc2	equ	0xFDE
  6675                           postdec2	equ	0xFDD
  6676                           fsr2h	equ	0xFDA
  6677                           fsr2l	equ	0xFD9
  6678                           status	equ	0xFD8
  6679                           
  6680 ;; *************** function _changePass *****************
  6681 ;; Defined at:
  6682 ;;		line 7 in file "config.c"
  6683 ;; Parameters:    Size  Location     Type
  6684 ;;  pass            2    0[COMRAM] int 
  6685 ;; Auto vars:     Size  Location     Type
  6686 ;;		None
  6687 ;; Return value:  Size  Location     Type
  6688 ;;		None               void
  6689 ;; Registers used:
  6690 ;;		None
  6691 ;; Tracked objects:
  6692 ;;		On entry : 0/0
  6693 ;;		On exit  : 0/0
  6694 ;;		Unchanged: 0/0
  6695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6696 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6699 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6700 ;;Total ram usage:        2 bytes
  6701 ;; Hardware stack levels used:    1
  6702 ;; This function calls:
  6703 ;;		Nothing
  6704 ;; This function is called by:
  6705 ;;		_ver_opcion_cambio
  6706 ;; This function uses a non-reentrant model
  6707 ;;
  6708                           
  6709                           	psect	text41
  6710  00389C                     __ptext41:
  6711                           	opt stack 0
  6712  00389C                     _changePass:
  6713                           	opt stack 28
  6714                           
  6715                           ;config.c: 8: password = pass;
  6716                           
  6717                           ;incstack = 0
  6718  00389C  C001  F0D5         	movff	changePass@pass,_password
  6719  0038A0  C002  F0D6         	movff	changePass@pass+1,_password+1
  6720  0038A4  0012               	return		;funcret
  6721  0038A6                     __end_of_changePass:
  6722                           	opt stack 0
  6723                           tblptru	equ	0xFF8
  6724                           tblptrh	equ	0xFF7
  6725                           tblptrl	equ	0xFF6
  6726                           tablat	equ	0xFF5
  6727                           postinc0	equ	0xFEE
  6728                           wreg	equ	0xFE8
  6729                           postdec1	equ	0xFE5
  6730                           fsr1l	equ	0xFE1
  6731                           indf2	equ	0xFDF
  6732                           postinc2	equ	0xFDE
  6733                           postdec2	equ	0xFDD
  6734                           fsr2h	equ	0xFDA
  6735                           fsr2l	equ	0xFD9
  6736                           status	equ	0xFD8
  6737                           
  6738 ;; *************** function _ver_info *****************
  6739 ;; Defined at:
  6740 ;;		line 95 in file "menu.c"
  6741 ;; Parameters:    Size  Location     Type
  6742 ;;		None
  6743 ;; Auto vars:     Size  Location     Type
  6744 ;;  input           1   36[COMRAM] unsigned char 
  6745 ;; Return value:  Size  Location     Type
  6746 ;;		None               void
  6747 ;; Registers used:
  6748 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6749 ;; Tracked objects:
  6750 ;;		On entry : 0/0
  6751 ;;		On exit  : 0/0
  6752 ;;		Unchanged: 0/0
  6753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6755 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6757 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6758 ;;Total ram usage:        1 bytes
  6759 ;; Hardware stack levels used:    1
  6760 ;; Hardware stack levels required when called:    6
  6761 ;; This function calls:
  6762 ;;		_clear
  6763 ;;		_lcd_gotoxy
  6764 ;;		_lcd_putrs
  6765 ;;		_read_keyboard
  6766 ;;		_sprintf
  6767 ;; This function is called by:
  6768 ;;		_select_menu
  6769 ;; This function uses a non-reentrant model
  6770 ;;
  6771                           
  6772                           	psect	text42
  6773  0027BE                     __ptext42:
  6774                           	opt stack 0
  6775  0027BE                     _ver_info:
  6776                           	opt stack 23
  6777                           
  6778                           ;menu.c: 96: clear();
  6779                           
  6780                           ;incstack = 0
  6781  0027BE  EC04  F01C         	call	_clear	;wreg free
  6782                           
  6783                           ;menu.c: 97: char input = 18;
  6784  0027C2  0E12               	movlw	18
  6785  0027C4  D061               	goto	L6
  6786  0027C6                     l4843:
  6787                           
  6788                           ;menu.c: 99: lcd_gotoxy(1,1);
  6789  0027C6  0E01               	movlw	1
  6790  0027C8  6E05               	movwf	lcd_gotoxy@y,c
  6791  0027CA  0E01               	movlw	1
  6792  0027CC  ECD3  F01B         	call	_lcd_gotoxy
  6793                           
  6794                           ;menu.c: 100: lcd_putrs("Sensor: ");
  6795  0027D0  0EBF               	movlw	low STR_25
  6796  0027D2  6E09               	movwf	lcd_putrs@ptr,c
  6797  0027D4  0E0F               	movlw	high STR_25
  6798  0027D6  6E0A               	movwf	lcd_putrs@ptr+1,c
  6799  0027D8  ECA0  F019         	call	_lcd_putrs	;wreg free
  6800                           
  6801                           ;menu.c: 101: sprintf(buffer2,"%02u",sensorDisparado);
  6802  0027DC  0E97               	movlw	low _buffer2
  6803  0027DE  6E0D               	movwf	sprintf@sp,c
  6804  0027E0  0E00               	movlw	high _buffer2
  6805  0027E2  6E0E               	movwf	sprintf@sp+1,c
  6806  0027E4  0E71               	movlw	low (STR_11+10)
  6807  0027E6  6E0F               	movwf	sprintf@f,c
  6808  0027E8  0E0F               	movlw	high (STR_11+10)
  6809  0027EA  6E10               	movwf	sprintf@f+1,c
  6810  0027EC  C096  F011         	movff	_sensorDisparado,?_sprintf+4
  6811  0027F0  6A12               	clrf	?_sprintf+5,c
  6812  0027F2  EC4E  F009         	call	_sprintf	;wreg free
  6813                           
  6814                           ;menu.c: 102: lcd_putrs(buffer2);
  6815  0027F6  0E97               	movlw	low _buffer2
  6816  0027F8  6E09               	movwf	lcd_putrs@ptr,c
  6817  0027FA  0E00               	movlw	high _buffer2
  6818  0027FC  6E0A               	movwf	lcd_putrs@ptr+1,c
  6819  0027FE  ECA0  F019         	call	_lcd_putrs	;wreg free
  6820                           
  6821                           ;menu.c: 103: lcd_gotoxy(1,2);
  6822  002802  0E02               	movlw	2
  6823  002804  6E05               	movwf	lcd_gotoxy@y,c
  6824  002806  0E01               	movlw	1
  6825  002808  ECD3  F01B         	call	_lcd_gotoxy
  6826                           
  6827                           ;menu.c: 104: lcd_putrs("Date:");
  6828  00280C  0ED0               	movlw	low STR_27
  6829  00280E  6E09               	movwf	lcd_putrs@ptr,c
  6830  002810  0E0F               	movlw	high STR_27
  6831  002812  6E0A               	movwf	lcd_putrs@ptr+1,c
  6832  002814  ECA0  F019         	call	_lcd_putrs	;wreg free
  6833                           
  6834                           ;menu.c: 105: sprintf(buffer2,"%02u/%02u",diaDisparo,mesDisparo);
  6835  002818  0E97               	movlw	low _buffer2
  6836  00281A  6E0D               	movwf	sprintf@sp,c
  6837  00281C  0E00               	movlw	high _buffer2
  6838  00281E  6E0E               	movwf	sprintf@sp+1,c
  6839  002820  0E6C               	movlw	low (STR_11+5)
  6840  002822  6E0F               	movwf	sprintf@f,c
  6841  002824  0E0F               	movlw	high (STR_11+5)
  6842  002826  6E10               	movwf	sprintf@f+1,c
  6843  002828  C082  F011         	movff	_diaDisparo,?_sprintf+4
  6844  00282C  C083  F012         	movff	_diaDisparo+1,?_sprintf+5
  6845  002830  C08E  F013         	movff	_mesDisparo,?_sprintf+6
  6846  002834  C08F  F014         	movff	_mesDisparo+1,?_sprintf+7
  6847  002838  EC4E  F009         	call	_sprintf	;wreg free
  6848                           
  6849                           ;menu.c: 106: lcd_putrs(buffer2);
  6850  00283C  0E97               	movlw	low _buffer2
  6851  00283E  6E09               	movwf	lcd_putrs@ptr,c
  6852  002840  0E00               	movlw	high _buffer2
  6853  002842  6E0A               	movwf	lcd_putrs@ptr+1,c
  6854  002844  ECA0  F019         	call	_lcd_putrs	;wreg free
  6855                           
  6856                           ;menu.c: 107: lcd_putrs(" ");
  6857  002848  0EA8               	movlw	low (STR_14+9)
  6858  00284A  6E09               	movwf	lcd_putrs@ptr,c
  6859  00284C  0E0F               	movlw	high (STR_14+9)
  6860  00284E  6E0A               	movwf	lcd_putrs@ptr+1,c
  6861  002850  ECA0  F019         	call	_lcd_putrs	;wreg free
  6862                           
  6863                           ;menu.c: 108: sprintf(buffer2,"%02u:%02u",horaDisparo,minDisparo);
  6864  002854  0E97               	movlw	low _buffer2
  6865  002856  6E0D               	movwf	sprintf@sp,c
  6866  002858  0E00               	movlw	high _buffer2
  6867  00285A  6E0E               	movwf	sprintf@sp+1,c
  6868  00285C  0EB5               	movlw	low STR_12
  6869  00285E  6E0F               	movwf	sprintf@f,c
  6870  002860  0E0F               	movlw	high STR_12
  6871  002862  6E10               	movwf	sprintf@f+1,c
  6872  002864  C086  F011         	movff	_horaDisparo,?_sprintf+4
  6873  002868  C087  F012         	movff	_horaDisparo+1,?_sprintf+5
  6874  00286C  C090  F013         	movff	_minDisparo,?_sprintf+6
  6875  002870  C091  F014         	movff	_minDisparo+1,?_sprintf+7
  6876  002874  EC4E  F009         	call	_sprintf	;wreg free
  6877                           
  6878                           ;menu.c: 109: lcd_putrs(buffer2);
  6879  002878  0E97               	movlw	low _buffer2
  6880  00287A  6E09               	movwf	lcd_putrs@ptr,c
  6881  00287C  0E00               	movlw	high _buffer2
  6882  00287E  6E0A               	movwf	lcd_putrs@ptr+1,c
  6883  002880  ECA0  F019         	call	_lcd_putrs	;wreg free
  6884                           
  6885                           ;menu.c: 110: input = read_keyboard();
  6886  002884  ECF2  F007         	call	_read_keyboard	;wreg free
  6887  002888                     L6:
  6888  002888  6E25               	movwf	ver_info@input,c
  6889  00288A  D000               	goto	l4863
  6890  00288C                     l4863:
  6891  00288C  0E10               	movlw	16
  6892  00288E  1825               	xorwf	ver_info@input,w,c
  6893  002890  A4D8               	btfss	status,2,c
  6894  002892  D799               	goto	l4843
  6895                           
  6896                           ;menu.c: 111: }
  6897                           ;menu.c: 112: menu = 18;
  6898  002894  0E12               	movlw	18
  6899  002896  0100               	movlb	0	; () banked
  6900  002898  6FD8               	movwf	_menu& (0+255),b
  6901                           
  6902                           ; BSR set to: 0
  6903  00289A  0012               	return		;funcret
  6904  00289C                     __end_of_ver_info:
  6905                           	opt stack 0
  6906                           tblptru	equ	0xFF8
  6907                           tblptrh	equ	0xFF7
  6908                           tblptrl	equ	0xFF6
  6909                           tablat	equ	0xFF5
  6910                           postinc0	equ	0xFEE
  6911                           wreg	equ	0xFE8
  6912                           postdec1	equ	0xFE5
  6913                           fsr1l	equ	0xFE1
  6914                           indf2	equ	0xFDF
  6915                           postinc2	equ	0xFDE
  6916                           postdec2	equ	0xFDD
  6917                           fsr2h	equ	0xFDA
  6918                           fsr2l	equ	0xFD9
  6919                           status	equ	0xFD8
  6920                           
  6921 ;; *************** function _read_keyboard *****************
  6922 ;; Defined at:
  6923 ;;		line 8 in file "keyboard.c"
  6924 ;; Parameters:    Size  Location     Type
  6925 ;;		None
  6926 ;; Auto vars:     Size  Location     Type
  6927 ;;		None
  6928 ;; Return value:  Size  Location     Type
  6929 ;;                  1    wreg      unsigned char 
  6930 ;; Registers used:
  6931 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6932 ;; Tracked objects:
  6933 ;;		On entry : 0/0
  6934 ;;		On exit  : 0/0
  6935 ;;		Unchanged: 0/0
  6936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6938 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6939 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6940 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6941 ;;Total ram usage:        1 bytes
  6942 ;; Hardware stack levels used:    1
  6943 ;; Hardware stack levels required when called:    5
  6944 ;; This function calls:
  6945 ;;		_lcd_putrs
  6946 ;;		_sprintf
  6947 ;; This function is called by:
  6948 ;;		_twinkle
  6949 ;;		_input_password
  6950 ;;		_input_old_pass
  6951 ;;		_input_new_pass
  6952 ;;		_ver_opcion_cambio
  6953 ;;		_ver_info
  6954 ;;		_select_menu
  6955 ;; This function uses a non-reentrant model
  6956 ;;
  6957                           
  6958                           	psect	text43
  6959  000FE4                     __ptext43:
  6960                           	opt stack 0
  6961  000FE4                     _read_keyboard:
  6962                           	opt stack 23
  6963                           
  6964                           ;keyboard.c: 9: LATAbits.LATA0=1;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=0;
  6965                           
  6966                           ; BSR set to: 0
  6967                           ;incstack = 0
  6968  000FE4  8089               	bsf	3977,0,c	;volatile
  6969  000FE6  9289               	bcf	3977,1,c	;volatile
  6970  000FE8  9489               	bcf	3977,2,c	;volatile
  6971  000FEA  9689               	bcf	3977,3,c	;volatile
  6972                           
  6973                           ;keyboard.c: 10: {
  6974                           ;keyboard.c: 11: if (PORTAbits.RA5==1){key=1;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA5==1){};}
  6975  000FEC  AA80               	btfss	3968,5,c	;volatile
  6976  000FEE  D019               	goto	l293
  6977  000FF0  0E01               	movlw	1
  6978  000FF2  0100               	movlb	0	; () banked
  6979  000FF4  6FD7               	movwf	_key& (0+255),b
  6980                           
  6981                           ; BSR set to: 0
  6982  000FF6  0E97               	movlw	low _buffer2
  6983  000FF8  6E0D               	movwf	sprintf@sp,c
  6984  000FFA  0E00               	movlw	high _buffer2
  6985  000FFC  6E0E               	movwf	sprintf@sp+1,c
  6986  000FFE  0ED6               	movlw	low STR_1
  6987  001000  6E0F               	movwf	sprintf@f,c
  6988  001002  0E0F               	movlw	high STR_1
  6989  001004  6E10               	movwf	sprintf@f+1,c
  6990  001006  C0D7  F011         	movff	_key,?_sprintf+4
  6991  00100A  6A12               	clrf	?_sprintf+5,c
  6992  00100C  EC4E  F009         	call	_sprintf	;wreg free
  6993  001010  0E97               	movlw	low _buffer2
  6994  001012  6E09               	movwf	lcd_putrs@ptr,c
  6995  001014  0E00               	movlw	high _buffer2
  6996  001016  6E0A               	movwf	lcd_putrs@ptr+1,c
  6997  001018  ECA0  F019         	call	_lcd_putrs	;wreg free
  6998  00101C  D000               	goto	l294
  6999  00101E                     l294:
  7000  00101E  BA80               	btfsc	3968,5,c	;volatile
  7001  001020  D7FE               	goto	l294
  7002  001022                     l293:
  7003                           
  7004                           ;keyboard.c: 12: if (PORTAbits.RA7==1){key=2;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  7005  001022  AE80               	btfss	3968,7,c	;volatile
  7006  001024  D019               	goto	l297
  7007  001026  0E02               	movlw	2
  7008  001028  0100               	movlb	0	; () banked
  7009  00102A  6FD7               	movwf	_key& (0+255),b
  7010                           
  7011                           ; BSR set to: 0
  7012  00102C  0E97               	movlw	low _buffer2
  7013  00102E  6E0D               	movwf	sprintf@sp,c
  7014  001030  0E00               	movlw	high _buffer2
  7015  001032  6E0E               	movwf	sprintf@sp+1,c
  7016  001034  0ED6               	movlw	low STR_1
  7017  001036  6E0F               	movwf	sprintf@f,c
  7018  001038  0E0F               	movlw	high STR_1
  7019  00103A  6E10               	movwf	sprintf@f+1,c
  7020  00103C  C0D7  F011         	movff	_key,?_sprintf+4
  7021  001040  6A12               	clrf	?_sprintf+5,c
  7022  001042  EC4E  F009         	call	_sprintf	;wreg free
  7023  001046  0E97               	movlw	low _buffer2
  7024  001048  6E09               	movwf	lcd_putrs@ptr,c
  7025  00104A  0E00               	movlw	high _buffer2
  7026  00104C  6E0A               	movwf	lcd_putrs@ptr+1,c
  7027  00104E  ECA0  F019         	call	_lcd_putrs	;wreg free
  7028  001052  D000               	goto	l298
  7029  001054                     l298:
  7030  001054  BE80               	btfsc	3968,7,c	;volatile
  7031  001056  D7FE               	goto	l298
  7032  001058                     l297:
  7033                           
  7034                           ;keyboard.c: 13: if (PORTAbits.RA6==1){key=3;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA6==1){};}
  7035  001058  AC80               	btfss	3968,6,c	;volatile
  7036  00105A  D019               	goto	l301
  7037  00105C  0E03               	movlw	3
  7038  00105E  0100               	movlb	0	; () banked
  7039  001060  6FD7               	movwf	_key& (0+255),b
  7040                           
  7041                           ; BSR set to: 0
  7042  001062  0E97               	movlw	low _buffer2
  7043  001064  6E0D               	movwf	sprintf@sp,c
  7044  001066  0E00               	movlw	high _buffer2
  7045  001068  6E0E               	movwf	sprintf@sp+1,c
  7046  00106A  0ED6               	movlw	low STR_1
  7047  00106C  6E0F               	movwf	sprintf@f,c
  7048  00106E  0E0F               	movlw	high STR_1
  7049  001070  6E10               	movwf	sprintf@f+1,c
  7050  001072  C0D7  F011         	movff	_key,?_sprintf+4
  7051  001076  6A12               	clrf	?_sprintf+5,c
  7052  001078  EC4E  F009         	call	_sprintf	;wreg free
  7053  00107C  0E97               	movlw	low _buffer2
  7054  00107E  6E09               	movwf	lcd_putrs@ptr,c
  7055  001080  0E00               	movlw	high _buffer2
  7056  001082  6E0A               	movwf	lcd_putrs@ptr+1,c
  7057  001084  ECA0  F019         	call	_lcd_putrs	;wreg free
  7058  001088  D000               	goto	l302
  7059  00108A                     l302:
  7060  00108A  BC80               	btfsc	3968,6,c	;volatile
  7061  00108C  D7FE               	goto	l302
  7062  00108E                     l301:
  7063                           
  7064                           ;keyboard.c: 14: if (PORTCbits.RC2==1){key=11; while(PORTCbits.RC2==1){};}
  7065  00108E  A482               	btfss	3970,2,c	;volatile
  7066  001090  D006               	goto	l305
  7067  001092  0E0B               	movlw	11
  7068  001094  0100               	movlb	0	; () banked
  7069  001096  6FD7               	movwf	_key& (0+255),b
  7070  001098  D000               	goto	l306
  7071  00109A                     l306:
  7072  00109A  B482               	btfsc	3970,2,c	;volatile
  7073  00109C  D7FE               	goto	l306
  7074  00109E                     l305:
  7075                           
  7076                           ;keyboard.c: 15: }
  7077                           ;keyboard.c: 16: LATAbits.LATA0=0;LATAbits.LATA1=1;LATAbits.LATA2=0;LATAbits.LATA3=0;
  7078  00109E  9089               	bcf	3977,0,c	;volatile
  7079  0010A0  8289               	bsf	3977,1,c	;volatile
  7080  0010A2  9489               	bcf	3977,2,c	;volatile
  7081  0010A4  9689               	bcf	3977,3,c	;volatile
  7082                           
  7083                           ;keyboard.c: 17: {
  7084                           ;keyboard.c: 18: if (PORTAbits.RA5==1){key=4;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA5==1){};}
  7085  0010A6  AA80               	btfss	3968,5,c	;volatile
  7086  0010A8  D019               	goto	l309
  7087  0010AA  0E04               	movlw	4
  7088  0010AC  0100               	movlb	0	; () banked
  7089  0010AE  6FD7               	movwf	_key& (0+255),b
  7090                           
  7091                           ; BSR set to: 0
  7092  0010B0  0E97               	movlw	low _buffer2
  7093  0010B2  6E0D               	movwf	sprintf@sp,c
  7094  0010B4  0E00               	movlw	high _buffer2
  7095  0010B6  6E0E               	movwf	sprintf@sp+1,c
  7096  0010B8  0ED6               	movlw	low STR_1
  7097  0010BA  6E0F               	movwf	sprintf@f,c
  7098  0010BC  0E0F               	movlw	high STR_1
  7099  0010BE  6E10               	movwf	sprintf@f+1,c
  7100  0010C0  C0D7  F011         	movff	_key,?_sprintf+4
  7101  0010C4  6A12               	clrf	?_sprintf+5,c
  7102  0010C6  EC4E  F009         	call	_sprintf	;wreg free
  7103  0010CA  0E97               	movlw	low _buffer2
  7104  0010CC  6E09               	movwf	lcd_putrs@ptr,c
  7105  0010CE  0E00               	movlw	high _buffer2
  7106  0010D0  6E0A               	movwf	lcd_putrs@ptr+1,c
  7107  0010D2  ECA0  F019         	call	_lcd_putrs	;wreg free
  7108  0010D6  D000               	goto	l310
  7109  0010D8                     l310:
  7110  0010D8  BA80               	btfsc	3968,5,c	;volatile
  7111  0010DA  D7FE               	goto	l310
  7112  0010DC                     l309:
  7113                           
  7114                           ;keyboard.c: 19: if (PORTAbits.RA7==1){key=5;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  7115  0010DC  AE80               	btfss	3968,7,c	;volatile
  7116  0010DE  D019               	goto	l313
  7117  0010E0  0E05               	movlw	5
  7118  0010E2  0100               	movlb	0	; () banked
  7119  0010E4  6FD7               	movwf	_key& (0+255),b
  7120                           
  7121                           ; BSR set to: 0
  7122  0010E6  0E97               	movlw	low _buffer2
  7123  0010E8  6E0D               	movwf	sprintf@sp,c
  7124  0010EA  0E00               	movlw	high _buffer2
  7125  0010EC  6E0E               	movwf	sprintf@sp+1,c
  7126  0010EE  0ED6               	movlw	low STR_1
  7127  0010F0  6E0F               	movwf	sprintf@f,c
  7128  0010F2  0E0F               	movlw	high STR_1
  7129  0010F4  6E10               	movwf	sprintf@f+1,c
  7130  0010F6  C0D7  F011         	movff	_key,?_sprintf+4
  7131  0010FA  6A12               	clrf	?_sprintf+5,c
  7132  0010FC  EC4E  F009         	call	_sprintf	;wreg free
  7133  001100  0E97               	movlw	low _buffer2
  7134  001102  6E09               	movwf	lcd_putrs@ptr,c
  7135  001104  0E00               	movlw	high _buffer2
  7136  001106  6E0A               	movwf	lcd_putrs@ptr+1,c
  7137  001108  ECA0  F019         	call	_lcd_putrs	;wreg free
  7138  00110C  D000               	goto	l314
  7139  00110E                     l314:
  7140  00110E  BE80               	btfsc	3968,7,c	;volatile
  7141  001110  D7FE               	goto	l314
  7142  001112                     l313:
  7143                           
  7144                           ;keyboard.c: 20: if (PORTAbits.RA6==1){key=6;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA6==1){};}
  7145  001112  AC80               	btfss	3968,6,c	;volatile
  7146  001114  D019               	goto	l317
  7147  001116  0E06               	movlw	6
  7148  001118  0100               	movlb	0	; () banked
  7149  00111A  6FD7               	movwf	_key& (0+255),b
  7150                           
  7151                           ; BSR set to: 0
  7152  00111C  0E97               	movlw	low _buffer2
  7153  00111E  6E0D               	movwf	sprintf@sp,c
  7154  001120  0E00               	movlw	high _buffer2
  7155  001122  6E0E               	movwf	sprintf@sp+1,c
  7156  001124  0ED6               	movlw	low STR_1
  7157  001126  6E0F               	movwf	sprintf@f,c
  7158  001128  0E0F               	movlw	high STR_1
  7159  00112A  6E10               	movwf	sprintf@f+1,c
  7160  00112C  C0D7  F011         	movff	_key,?_sprintf+4
  7161  001130  6A12               	clrf	?_sprintf+5,c
  7162  001132  EC4E  F009         	call	_sprintf	;wreg free
  7163  001136  0E97               	movlw	low _buffer2
  7164  001138  6E09               	movwf	lcd_putrs@ptr,c
  7165  00113A  0E00               	movlw	high _buffer2
  7166  00113C  6E0A               	movwf	lcd_putrs@ptr+1,c
  7167  00113E  ECA0  F019         	call	_lcd_putrs	;wreg free
  7168  001142  D000               	goto	l318
  7169  001144                     l318:
  7170  001144  BC80               	btfsc	3968,6,c	;volatile
  7171  001146  D7FE               	goto	l318
  7172  001148                     l317:
  7173                           
  7174                           ;keyboard.c: 21: if (PORTCbits.RC2==1){key=12; while(PORTCbits.RC2==1){};}
  7175  001148  A482               	btfss	3970,2,c	;volatile
  7176  00114A  D006               	goto	l321
  7177  00114C  0E0C               	movlw	12
  7178  00114E  0100               	movlb	0	; () banked
  7179  001150  6FD7               	movwf	_key& (0+255),b
  7180  001152  D000               	goto	l322
  7181  001154                     l322:
  7182  001154  B482               	btfsc	3970,2,c	;volatile
  7183  001156  D7FE               	goto	l322
  7184  001158                     l321:
  7185                           
  7186                           ;keyboard.c: 22: }
  7187                           ;keyboard.c: 23: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=1;LATAbits.LATA3=0;
  7188  001158  9089               	bcf	3977,0,c	;volatile
  7189  00115A  9289               	bcf	3977,1,c	;volatile
  7190  00115C  8489               	bsf	3977,2,c	;volatile
  7191  00115E  9689               	bcf	3977,3,c	;volatile
  7192                           
  7193                           ;keyboard.c: 24: {
  7194                           ;keyboard.c: 25: if (PORTAbits.RA5==1){key=7;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA5==1){};}
  7195  001160  AA80               	btfss	3968,5,c	;volatile
  7196  001162  D019               	goto	l325
  7197  001164  0E07               	movlw	7
  7198  001166  0100               	movlb	0	; () banked
  7199  001168  6FD7               	movwf	_key& (0+255),b
  7200                           
  7201                           ; BSR set to: 0
  7202  00116A  0E97               	movlw	low _buffer2
  7203  00116C  6E0D               	movwf	sprintf@sp,c
  7204  00116E  0E00               	movlw	high _buffer2
  7205  001170  6E0E               	movwf	sprintf@sp+1,c
  7206  001172  0ED6               	movlw	low STR_1
  7207  001174  6E0F               	movwf	sprintf@f,c
  7208  001176  0E0F               	movlw	high STR_1
  7209  001178  6E10               	movwf	sprintf@f+1,c
  7210  00117A  C0D7  F011         	movff	_key,?_sprintf+4
  7211  00117E  6A12               	clrf	?_sprintf+5,c
  7212  001180  EC4E  F009         	call	_sprintf	;wreg free
  7213  001184  0E97               	movlw	low _buffer2
  7214  001186  6E09               	movwf	lcd_putrs@ptr,c
  7215  001188  0E00               	movlw	high _buffer2
  7216  00118A  6E0A               	movwf	lcd_putrs@ptr+1,c
  7217  00118C  ECA0  F019         	call	_lcd_putrs	;wreg free
  7218  001190  D000               	goto	l326
  7219  001192                     l326:
  7220  001192  BA80               	btfsc	3968,5,c	;volatile
  7221  001194  D7FE               	goto	l326
  7222  001196                     l325:
  7223                           
  7224                           ;keyboard.c: 26: if (PORTAbits.RA7==1){key=8;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  7225  001196  AE80               	btfss	3968,7,c	;volatile
  7226  001198  D019               	goto	l329
  7227  00119A  0E08               	movlw	8
  7228  00119C  0100               	movlb	0	; () banked
  7229  00119E  6FD7               	movwf	_key& (0+255),b
  7230                           
  7231                           ; BSR set to: 0
  7232  0011A0  0E97               	movlw	low _buffer2
  7233  0011A2  6E0D               	movwf	sprintf@sp,c
  7234  0011A4  0E00               	movlw	high _buffer2
  7235  0011A6  6E0E               	movwf	sprintf@sp+1,c
  7236  0011A8  0ED6               	movlw	low STR_1
  7237  0011AA  6E0F               	movwf	sprintf@f,c
  7238  0011AC  0E0F               	movlw	high STR_1
  7239  0011AE  6E10               	movwf	sprintf@f+1,c
  7240  0011B0  C0D7  F011         	movff	_key,?_sprintf+4
  7241  0011B4  6A12               	clrf	?_sprintf+5,c
  7242  0011B6  EC4E  F009         	call	_sprintf	;wreg free
  7243  0011BA  0E97               	movlw	low _buffer2
  7244  0011BC  6E09               	movwf	lcd_putrs@ptr,c
  7245  0011BE  0E00               	movlw	high _buffer2
  7246  0011C0  6E0A               	movwf	lcd_putrs@ptr+1,c
  7247  0011C2  ECA0  F019         	call	_lcd_putrs	;wreg free
  7248  0011C6  D000               	goto	l330
  7249  0011C8                     l330:
  7250  0011C8  BE80               	btfsc	3968,7,c	;volatile
  7251  0011CA  D7FE               	goto	l330
  7252  0011CC                     l329:
  7253                           
  7254                           ;keyboard.c: 27: if (PORTAbits.RA6==1){key=9;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA6==1){};}
  7255  0011CC  AC80               	btfss	3968,6,c	;volatile
  7256  0011CE  D019               	goto	l333
  7257  0011D0  0E09               	movlw	9
  7258  0011D2  0100               	movlb	0	; () banked
  7259  0011D4  6FD7               	movwf	_key& (0+255),b
  7260                           
  7261                           ; BSR set to: 0
  7262  0011D6  0E97               	movlw	low _buffer2
  7263  0011D8  6E0D               	movwf	sprintf@sp,c
  7264  0011DA  0E00               	movlw	high _buffer2
  7265  0011DC  6E0E               	movwf	sprintf@sp+1,c
  7266  0011DE  0ED6               	movlw	low STR_1
  7267  0011E0  6E0F               	movwf	sprintf@f,c
  7268  0011E2  0E0F               	movlw	high STR_1
  7269  0011E4  6E10               	movwf	sprintf@f+1,c
  7270  0011E6  C0D7  F011         	movff	_key,?_sprintf+4
  7271  0011EA  6A12               	clrf	?_sprintf+5,c
  7272  0011EC  EC4E  F009         	call	_sprintf	;wreg free
  7273  0011F0  0E97               	movlw	low _buffer2
  7274  0011F2  6E09               	movwf	lcd_putrs@ptr,c
  7275  0011F4  0E00               	movlw	high _buffer2
  7276  0011F6  6E0A               	movwf	lcd_putrs@ptr+1,c
  7277  0011F8  ECA0  F019         	call	_lcd_putrs	;wreg free
  7278  0011FC  D000               	goto	l334
  7279  0011FE                     l334:
  7280  0011FE  BC80               	btfsc	3968,6,c	;volatile
  7281  001200  D7FE               	goto	l334
  7282  001202                     l333:
  7283                           
  7284                           ;keyboard.c: 28: if (PORTCbits.RC2==1){key=13; while(PORTCbits.RC2==1){};}
  7285  001202  A482               	btfss	3970,2,c	;volatile
  7286  001204  D006               	goto	l337
  7287  001206  0E0D               	movlw	13
  7288  001208  0100               	movlb	0	; () banked
  7289  00120A  6FD7               	movwf	_key& (0+255),b
  7290  00120C  D000               	goto	l338
  7291  00120E                     l338:
  7292  00120E  B482               	btfsc	3970,2,c	;volatile
  7293  001210  D7FE               	goto	l338
  7294  001212                     l337:
  7295                           
  7296                           ;keyboard.c: 29: }
  7297                           ;keyboard.c: 30: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=1;
  7298  001212  9089               	bcf	3977,0,c	;volatile
  7299  001214  9289               	bcf	3977,1,c	;volatile
  7300  001216  9489               	bcf	3977,2,c	;volatile
  7301  001218  8689               	bsf	3977,3,c	;volatile
  7302                           
  7303                           ;keyboard.c: 31: {
  7304                           ;keyboard.c: 32: if (PORTAbits.RA5==1){key=14; while(PORTAbits.RA5==1){};}
  7305  00121A  AA80               	btfss	3968,5,c	;volatile
  7306  00121C  D006               	goto	l341
  7307  00121E  0E0E               	movlw	14
  7308  001220  0100               	movlb	0	; () banked
  7309  001222  6FD7               	movwf	_key& (0+255),b
  7310  001224  D000               	goto	l342
  7311  001226                     l342:
  7312  001226  BA80               	btfsc	3968,5,c	;volatile
  7313  001228  D7FE               	goto	l342
  7314  00122A                     l341:
  7315                           
  7316                           ;keyboard.c: 33: if (PORTAbits.RA7==1){key=0;sprintf(buffer2,"%01u",key);lcd_putrs(buffe
      +                          r2);while(PORTAbits.RA7==1){};}
  7317  00122A  AE80               	btfss	3968,7,c	;volatile
  7318  00122C  D019               	goto	l345
  7319  00122E  0E00               	movlw	0
  7320  001230  0100               	movlb	0	; () banked
  7321  001232  6FD7               	movwf	_key& (0+255),b
  7322                           
  7323                           ; BSR set to: 0
  7324  001234  0E97               	movlw	low _buffer2
  7325  001236  6E0D               	movwf	sprintf@sp,c
  7326  001238  0E00               	movlw	high _buffer2
  7327  00123A  6E0E               	movwf	sprintf@sp+1,c
  7328  00123C  0ED6               	movlw	low STR_1
  7329  00123E  6E0F               	movwf	sprintf@f,c
  7330  001240  0E0F               	movlw	high STR_1
  7331  001242  6E10               	movwf	sprintf@f+1,c
  7332  001244  C0D7  F011         	movff	_key,?_sprintf+4
  7333  001248  6A12               	clrf	?_sprintf+5,c
  7334  00124A  EC4E  F009         	call	_sprintf	;wreg free
  7335  00124E  0E97               	movlw	low _buffer2
  7336  001250  6E09               	movwf	lcd_putrs@ptr,c
  7337  001252  0E00               	movlw	high _buffer2
  7338  001254  6E0A               	movwf	lcd_putrs@ptr+1,c
  7339  001256  ECA0  F019         	call	_lcd_putrs	;wreg free
  7340  00125A  D000               	goto	l346
  7341  00125C                     l346:
  7342  00125C  BE80               	btfsc	3968,7,c	;volatile
  7343  00125E  D7FE               	goto	l346
  7344  001260                     l345:
  7345                           
  7346                           ;keyboard.c: 34: if (PORTAbits.RA6==1){key=15; while(PORTAbits.RA6==1){};}
  7347  001260  AC80               	btfss	3968,6,c	;volatile
  7348  001262  D006               	goto	l349
  7349  001264  0E0F               	movlw	15
  7350  001266  0100               	movlb	0	; () banked
  7351  001268  6FD7               	movwf	_key& (0+255),b
  7352  00126A  D000               	goto	l350
  7353  00126C                     l350:
  7354  00126C  BC80               	btfsc	3968,6,c	;volatile
  7355  00126E  D7FE               	goto	l350
  7356  001270                     l349:
  7357                           
  7358                           ;keyboard.c: 35: if (PORTCbits.RC2==1){key=16; while(PORTCbits.RC2==1){};}
  7359  001270  A482               	btfss	3970,2,c	;volatile
  7360  001272  D008               	goto	l4215
  7361  001274  0E10               	movlw	16
  7362  001276  0100               	movlb	0	; () banked
  7363  001278  6FD7               	movwf	_key& (0+255),b
  7364  00127A  D000               	goto	l354
  7365  00127C                     l354:
  7366  00127C  A482               	btfss	3970,2,c	;volatile
  7367  00127E  D002               	goto	l4215
  7368  001280  D7FD               	goto	l354
  7369  001282  D000               	goto	l4215
  7370  001284                     l4215:
  7371                           
  7372                           ;keyboard.c: 36: }
  7373                           ;keyboard.c: 37: _delay((unsigned long)((98)*(8000000/4000.0)));
  7374  001284  0EFF               	movlw	255
  7375  001286  6E24               	movwf	??_read_keyboard& (0+255),c
  7376  001288  0E8A               	movlw	138
  7377  00128A                     u4597:
  7378  00128A  2EE8               	decfsz	wreg,f,c
  7379  00128C  D7FE               	goto	u4597
  7380  00128E  2E24               	decfsz	??_read_keyboard& (0+255),f,c
  7381  001290  D7FC               	goto	u4597
  7382  001292  D000               	nop2	
  7383                           
  7384                           ;keyboard.c: 40: return key;
  7385  001294  0100               	movlb	0	; () banked
  7386  001296  51D7               	movf	_key& (0+255),w,b
  7387  001298  0012               	return	
  7388                           
  7389                           ; BSR set to: 0
  7390                           
  7391                           ; BSR set to: 0
  7392  00129A  0012               	return		;funcret
  7393  00129C                     __end_of_read_keyboard:
  7394                           	opt stack 0
  7395                           tblptru	equ	0xFF8
  7396                           tblptrh	equ	0xFF7
  7397                           tblptrl	equ	0xFF6
  7398                           tablat	equ	0xFF5
  7399                           postinc0	equ	0xFEE
  7400                           wreg	equ	0xFE8
  7401                           postdec1	equ	0xFE5
  7402                           fsr1l	equ	0xFE1
  7403                           indf2	equ	0xFDF
  7404                           postinc2	equ	0xFDE
  7405                           postdec2	equ	0xFDD
  7406                           fsr2h	equ	0xFDA
  7407                           fsr2l	equ	0xFD9
  7408                           status	equ	0xFD8
  7409                           
  7410 ;; *************** function _sprintf *****************
  7411 ;; Defined at:
  7412 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\doprnt.c"
  7413 ;; Parameters:    Size  Location     Type
  7414 ;;  sp              2   12[COMRAM] PTR unsigned char 
  7415 ;;		 -> buffer2(20), 
  7416 ;;  f               2   14[COMRAM] PTR const unsigned char 
  7417 ;;		 -> STR_30(10), STR_28(10), STR_26(5), STR_12(10), 
  7418 ;;		 -> STR_11(15), STR_10(5), STR_9(5), STR_8(5), 
  7419 ;;		 -> STR_7(5), STR_6(5), STR_5(5), STR_4(5), 
  7420 ;;		 -> STR_3(5), STR_2(5), STR_1(5), 
  7421 ;; Auto vars:     Size  Location     Type
  7422 ;;  tmpval          4    0        struct .
  7423 ;;  cp              3    0        PTR const unsigned char 
  7424 ;;  width           2   32[COMRAM] int 
  7425 ;;  val             2   29[COMRAM] unsigned int 
  7426 ;;  ap              2   26[COMRAM] PTR void [1]
  7427 ;;		 -> ?_sprintf(2), 
  7428 ;;  len             2    0        unsigned int 
  7429 ;;  c               1   34[COMRAM] char 
  7430 ;;  prec            1   31[COMRAM] char 
  7431 ;;  flag            1   28[COMRAM] unsigned char 
  7432 ;; Return value:  Size  Location     Type
  7433 ;;                  2   12[COMRAM] int 
  7434 ;; Registers used:
  7435 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7436 ;; Tracked objects:
  7437 ;;		On entry : 0/0
  7438 ;;		On exit  : 0/0
  7439 ;;		Unchanged: 0/0
  7440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7441 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7442 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7443 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7444 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7445 ;;Total ram usage:       23 bytes
  7446 ;; Hardware stack levels used:    1
  7447 ;; Hardware stack levels required when called:    1
  7448 ;; This function calls:
  7449 ;;		___lwdiv
  7450 ;;		___lwmod
  7451 ;;		___wmul
  7452 ;;		_isdigit
  7453 ;; This function is called by:
  7454 ;;		_read_keyboard
  7455 ;;		_write_Date
  7456 ;;		_ver_info
  7457 ;; This function uses a non-reentrant model
  7458 ;;
  7459                           
  7460                           	psect	text44
  7461  00129C                     __ptext44:
  7462                           	opt stack 0
  7463  00129C                     _sprintf:
  7464                           	opt stack 27
  7465                           
  7466                           ;doprnt.c: 494: va_list ap;
  7467                           ;doprnt.c: 499: signed char c;
  7468                           ;doprnt.c: 501: int width;
  7469                           ;doprnt.c: 506: signed char prec;
  7470                           ;doprnt.c: 508: unsigned char flag;
  7471                           ;doprnt.c: 523: union {
  7472                           ;doprnt.c: 524: unsigned long vd;
  7473                           ;doprnt.c: 525: double integ;
  7474                           ;doprnt.c: 526: } tmpval;
  7475                           ;doprnt.c: 528: unsigned int val;
  7476                           ;doprnt.c: 529: unsigned len;
  7477                           ;doprnt.c: 530: const char * cp;
  7478                           ;doprnt.c: 533: *ap = __va_start();
  7479                           
  7480                           ; BSR set to: 0
  7481                           ;incstack = 0
  7482  00129C  0E11               	movlw	low (?_sprintf+4)
  7483  00129E  6E1B               	movwf	sprintf@ap,c
  7484  0012A0  0E00               	movlw	high (?_sprintf+4)
  7485  0012A2  6E1C               	movwf	sprintf@ap+1,c
  7486                           
  7487                           ;doprnt.c: 536: while(c = *f++) {
  7488  0012A4  D117               	goto	l4013
  7489  0012A6                     l3931:
  7490                           
  7491                           ;doprnt.c: 538: if(c != '%')
  7492  0012A6  0E25               	movlw	37
  7493  0012A8  1823               	xorwf	sprintf@c,w,c
  7494  0012AA  B4D8               	btfsc	status,2,c
  7495  0012AC  D009               	goto	l3937
  7496                           
  7497                           ;doprnt.c: 540: {
  7498                           ;doprnt.c: 541: ((*sp++ = (c)));
  7499  0012AE  C00D  FFD9         	movff	sprintf@sp,fsr2l
  7500  0012B2  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  7501  0012B6  C023  FFDF         	movff	sprintf@c,indf2
  7502  0012BA  4A0D               	infsnz	sprintf@sp,f,c
  7503  0012BC  2A0E               	incf	sprintf@sp+1,f,c
  7504                           
  7505                           ;doprnt.c: 542: continue;
  7506  0012BE  D10A               	goto	l4013
  7507  0012C0                     l3937:
  7508                           
  7509                           ;doprnt.c: 543: }
  7510                           ;doprnt.c: 546: width = 0;
  7511  0012C0  0E00               	movlw	0
  7512  0012C2  6E22               	movwf	sprintf@width+1,c
  7513  0012C4  0E00               	movlw	0
  7514  0012C6  6E21               	movwf	sprintf@width,c
  7515                           
  7516                           ;doprnt.c: 548: flag = 0;
  7517  0012C8  0E00               	movlw	0
  7518  0012CA  6E1D               	movwf	sprintf@flag,c
  7519                           
  7520                           ;doprnt.c: 551: switch(*f) {
  7521                           
  7522                           ;doprnt.c: 550: for(;;) {
  7523  0012CC  D005               	goto	l3943
  7524  0012CE                     l3939:
  7525                           
  7526                           ;doprnt.c: 580: flag |= 0x04;
  7527  0012CE  841D               	bsf	sprintf@flag,2,c
  7528                           
  7529                           ;doprnt.c: 581: f++;
  7530  0012D0  4A0F               	infsnz	sprintf@f,f,c
  7531  0012D2  2A10               	incf	sprintf@f+1,f,c
  7532                           
  7533                           ;doprnt.c: 582: continue;
  7534  0012D4  D001               	goto	l3943
  7535                           
  7536                           ;doprnt.c: 584: }
  7537  0012D6  D00B               	goto	l3945
  7538  0012D8                     l3943:
  7539  0012D8  C00F  FFF6         	movff	sprintf@f,tblptrl
  7540  0012DC  C010  FFF7         	movff	sprintf@f+1,tblptrh
  7541  0012E0                     	if	0	;tblptru may be non-zero
  7542  0012E0                     	endif
  7543  0012E0                     	if	0	;tblptru may be non-zero
  7544  0012E0                     	endif
  7545  0012E0  0008               	tblrd		*
  7546  0012E2  50F5               	movf	tablat,w,c
  7547                           
  7548                           ; Switch size 1, requested type "space"
  7549                           ; Number of cases is 1, Range of values is 48 to 48
  7550                           ; switch strategies available:
  7551                           ; Name         Instructions Cycles
  7552                           ; simple_byte            4     3 (average)
  7553                           ;	Chosen strategy is simple_byte
  7554  0012E4  0A30               	xorlw	48	; case 48
  7555  0012E6  B4D8               	btfsc	status,2,c
  7556  0012E8  D7F2               	goto	l3939
  7557                           
  7558                           ;doprnt.c: 585: break;
  7559  0012EA  D001               	goto	l3945
  7560                           
  7561                           ;doprnt.c: 586: }
  7562  0012EC  D7F5               	goto	l3943
  7563  0012EE                     l3945:
  7564                           
  7565                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  7566  0012EE  C00F  FFF6         	movff	sprintf@f,tblptrl
  7567  0012F2  C010  FFF7         	movff	sprintf@f+1,tblptrh
  7568  0012F6                     	if	0	;tblptru may be non-zero
  7569  0012F6                     	endif
  7570  0012F6                     	if	0	;tblptru may be non-zero
  7571  0012F6                     	endif
  7572  0012F6  0008               	tblrd		*
  7573  0012F8  50F5               	movf	tablat,w,c
  7574  0012FA  ECE5  F01B         	call	_isdigit
  7575  0012FE  A0D8               	btfss	status,0,c
  7576  001300  D03A               	goto	l3961
  7577                           
  7578                           ;doprnt.c: 598: width = 0;
  7579  001302  0E00               	movlw	0
  7580  001304  6E22               	movwf	sprintf@width+1,c
  7581  001306  0E00               	movlw	0
  7582  001308  6E21               	movwf	sprintf@width,c
  7583  00130A  D000               	goto	l3949
  7584  00130C                     l3949:
  7585                           
  7586                           ;doprnt.c: 600: width *= 10;
  7587  00130C  C021  F001         	movff	sprintf@width,___wmul@multiplier
  7588  001310  C022  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  7589  001314  0E00               	movlw	0
  7590  001316  6E04               	movwf	___wmul@multiplicand+1,c
  7591  001318  0E0A               	movlw	10
  7592  00131A  6E03               	movwf	___wmul@multiplicand,c
  7593  00131C  EC88  F01B         	call	___wmul	;wreg free
  7594  001320  C001  F021         	movff	?___wmul,sprintf@width
  7595  001324  C002  F022         	movff	?___wmul+1,sprintf@width+1
  7596                           
  7597                           ;doprnt.c: 601: width += *f++ - '0';
  7598  001328  0ED0               	movlw	208
  7599  00132A  6E17               	movwf	??_sprintf& (0+255),c
  7600  00132C  0EFF               	movlw	255
  7601  00132E  6E18               	movwf	(??_sprintf+1)& (0+255),c
  7602  001330  C00F  FFF6         	movff	sprintf@f,tblptrl
  7603  001334  C010  FFF7         	movff	sprintf@f+1,tblptrh
  7604  001338                     	if	0	;tblptru may be non-zero
  7605  001338                     	endif
  7606  001338                     	if	0	;tblptru may be non-zero
  7607  001338                     	endif
  7608  001338  0008               	tblrd		*
  7609  00133A  50F5               	movf	tablat,w,c
  7610  00133C  6E19               	movwf	(??_sprintf+2)& (0+255),c
  7611  00133E  6A1A               	clrf	(??_sprintf+3)& (0+255),c
  7612  001340  5017               	movf	??_sprintf,w,c
  7613  001342  2619               	addwf	??_sprintf+2,f,c
  7614  001344  5018               	movf	??_sprintf+1,w,c
  7615  001346  221A               	addwfc	??_sprintf+3,f,c
  7616  001348  5019               	movf	??_sprintf+2,w,c
  7617  00134A  2621               	addwf	sprintf@width,f,c
  7618  00134C  501A               	movf	??_sprintf+3,w,c
  7619  00134E  2222               	addwfc	sprintf@width+1,f,c
  7620  001350  4A0F               	infsnz	sprintf@f,f,c
  7621  001352  2A10               	incf	sprintf@f+1,f,c
  7622                           
  7623                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  7624  001354  C00F  FFF6         	movff	sprintf@f,tblptrl
  7625  001358  C010  FFF7         	movff	sprintf@f+1,tblptrh
  7626  00135C                     	if	0	;tblptru may be non-zero
  7627  00135C                     	endif
  7628  00135C                     	if	0	;tblptru may be non-zero
  7629  00135C                     	endif
  7630  00135C  0008               	tblrd		*
  7631  00135E  50F5               	movf	tablat,w,c
  7632  001360  ECE5  F01B         	call	_isdigit
  7633  001364  A0D8               	btfss	status,0,c
  7634  001366  D007               	goto	l3961
  7635  001368  D7D1               	goto	l3949
  7636                           
  7637                           ;doprnt.c: 608: }
  7638                           ;doprnt.c: 635: switch(c = *f++) {
  7639  00136A  D005               	goto	l3961
  7640                           
  7641                           ;doprnt.c: 638: goto alldone;
  7642                           
  7643                           ;doprnt.c: 637: case 0:
  7644  00136C  D0C1               	goto	l4015
  7645                           
  7646                           ;doprnt.c: 813: continue;
  7647                           
  7648                           ;doprnt.c: 802: default:
  7649  00136E  D0B2               	goto	l4013
  7650  001370                     l3957:
  7651                           
  7652                           ;doprnt.c: 818: flag |= 0xC0;
  7653  001370  0EC0               	movlw	192
  7654  001372  121D               	iorwf	sprintf@flag,f,c
  7655                           
  7656                           ;doprnt.c: 822: }
  7657                           
  7658                           ;doprnt.c: 819: break;
  7659  001374  D011               	goto	l3963
  7660  001376                     l3961:
  7661  001376  C00F  FFF6         	movff	sprintf@f,tblptrl
  7662  00137A  C010  FFF7         	movff	sprintf@f+1,tblptrh
  7663  00137E  4A0F               	infsnz	sprintf@f,f,c
  7664  001380  2A10               	incf	sprintf@f+1,f,c
  7665  001382                     	if	0	;tblptru may be non-zero
  7666  001382                     	endif
  7667  001382                     	if	0	;tblptru may be non-zero
  7668  001382                     	endif
  7669  001382  0008               	tblrd		*
  7670  001384  CFF5 F023          	movff	tablat,sprintf@c
  7671  001388  5023               	movf	sprintf@c,w,c
  7672                           
  7673                           ; Switch size 1, requested type "space"
  7674                           ; Number of cases is 2, Range of values is 0 to 117
  7675                           ; switch strategies available:
  7676                           ; Name         Instructions Cycles
  7677                           ; simple_byte            7     4 (average)
  7678                           ;	Chosen strategy is simple_byte
  7679  00138A  0A00               	xorlw	0	; case 0
  7680  00138C  B4D8               	btfsc	status,2,c
  7681  00138E  D0B0               	goto	l4015
  7682  001390  0A75               	xorlw	117	; case 117
  7683  001392  B4D8               	btfsc	status,2,c
  7684  001394  D7ED               	goto	l3957
  7685  001396  D09E               	goto	l4013
  7686  001398                     l3963:
  7687                           
  7688                           ;doprnt.c: 1273: {
  7689                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7690  001398  C01B  FFD9         	movff	sprintf@ap,fsr2l
  7691  00139C  C01C  FFDA         	movff	sprintf@ap+1,fsr2h
  7692  0013A0  CFDE F01E          	movff	postinc2,sprintf@val
  7693  0013A4  CFDD F01F          	movff	postdec2,sprintf@val+1
  7694  0013A8  0E02               	movlw	2
  7695  0013AA  261B               	addwf	sprintf@ap,f,c
  7696  0013AC  0E00               	movlw	0
  7697  0013AE  221C               	addwfc	sprintf@ap+1,f,c
  7698                           
  7699                           ;doprnt.c: 1287: }
  7700                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7701  0013B0  0E01               	movlw	1
  7702  0013B2  6E23               	movwf	sprintf@c,c
  7703  0013B4                     l3969:
  7704  0013B4  0E05               	movlw	5
  7705  0013B6  1823               	xorwf	sprintf@c,w,c
  7706  0013B8  B4D8               	btfsc	status,2,c
  7707  0013BA  D016               	goto	l3981
  7708  0013BC  D001               	goto	l3973
  7709  0013BE  D014               	goto	l3981
  7710  0013C0                     l3973:
  7711                           
  7712                           ;doprnt.c: 1306: if(val < dpowers[c])
  7713  0013C0  5023               	movf	sprintf@c,w,c
  7714  0013C2  0D02               	mullw	2
  7715  0013C4  0E01               	movlw	low _dpowers
  7716  0013C6  24F3               	addwf	prodl,w,c
  7717  0013C8  6EF6               	movwf	tblptrl,c
  7718  0013CA  0E0F               	movlw	high _dpowers
  7719  0013CC  20F4               	addwfc	prodh,w,c
  7720  0013CE  6EF7               	movwf	tblptrh,c
  7721  0013D0                     	if	0	;There are less than 3 active tblptr bytes
  7722  0013D0                     	endif
  7723  0013D0  0009               	tblrd		*+
  7724  0013D2  50F5               	movf	tablat,w,c
  7725  0013D4  5C1E               	subwf	sprintf@val,w,c
  7726  0013D6  0009               	tblrd		*+
  7727  0013D8  50F5               	movf	tablat,w,c
  7728  0013DA  581F               	subwfb	sprintf@val+1,w,c
  7729  0013DC  A0D8               	btfss	status,0,c
  7730  0013DE  D004               	goto	l3981
  7731  0013E0  D001               	goto	l3977
  7732                           
  7733                           ;doprnt.c: 1307: break;
  7734  0013E2  D002               	goto	l3981
  7735  0013E4                     l3977:
  7736  0013E4  2A23               	incf	sprintf@c,f,c
  7737  0013E6  D7E6               	goto	l3969
  7738  0013E8                     l3981:
  7739                           
  7740                           ;doprnt.c: 1381: if(width > c)
  7741  0013E8  0E80               	movlw	128
  7742  0013EA  BE23               	btfsc	sprintf@c,7,c
  7743  0013EC  0E7F               	movlw	127
  7744  0013EE  6E17               	movwf	??_sprintf& (0+255),c
  7745  0013F0  5021               	movf	sprintf@width,w,c
  7746  0013F2  5C23               	subwf	sprintf@c,w,c
  7747  0013F4  5022               	movf	sprintf@width+1,w,c
  7748  0013F6  0A80               	xorlw	128
  7749  0013F8  5817               	subwfb	??_sprintf& (0+255),w,c
  7750  0013FA  B0D8               	btfsc	status,0,c
  7751  0013FC  D007               	goto	l3985
  7752                           
  7753                           ;doprnt.c: 1382: width -= c;
  7754  0013FE  5023               	movf	sprintf@c,w,c
  7755  001400  5E21               	subwf	sprintf@width,f,c
  7756  001402  0E00               	movlw	0
  7757  001404  BE23               	btfsc	sprintf@c,7,c
  7758  001406  0EFF               	movlw	255
  7759  001408  5A22               	subwfb	sprintf@width+1,f,c
  7760  00140A  D005               	goto	l3987
  7761  00140C                     l3985:
  7762                           
  7763                           ;doprnt.c: 1383: else
  7764                           ;doprnt.c: 1384: width = 0;
  7765  00140C  0E00               	movlw	0
  7766  00140E  6E22               	movwf	sprintf@width+1,c
  7767  001410  0E00               	movlw	0
  7768  001412  6E21               	movwf	sprintf@width,c
  7769  001414  D000               	goto	l3987
  7770  001416                     l3987:
  7771                           
  7772                           ;doprnt.c: 1387: if(flag & 0x04) {
  7773  001416  A41D               	btfss	sprintf@flag,2,c
  7774  001418  D015               	goto	l3997
  7775                           
  7776                           ;doprnt.c: 1415: if(width)
  7777  00141A  5021               	movf	sprintf@width,w,c
  7778  00141C  1022               	iorwf	sprintf@width+1,w,c
  7779  00141E  B4D8               	btfsc	status,2,c
  7780  001420  D026               	goto	l967
  7781  001422                     l3991:
  7782                           
  7783                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  7784  001422  C00D  FFD9         	movff	sprintf@sp,fsr2l
  7785  001426  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  7786  00142A  0E30               	movlw	48
  7787  00142C  6EDF               	movwf	indf2,c
  7788  00142E  4A0D               	infsnz	sprintf@sp,f,c
  7789  001430  2A0E               	incf	sprintf@sp+1,f,c
  7790                           
  7791                           ;doprnt.c: 1418: while(--width);
  7792  001432  0621               	decf	sprintf@width,f,c
  7793  001434  A0D8               	btfss	status,0,c
  7794  001436  0622               	decf	sprintf@width+1,f,c
  7795  001438  5021               	movf	sprintf@width,w,c
  7796  00143A  1022               	iorwf	sprintf@width+1,w,c
  7797  00143C  B4D8               	btfsc	status,2,c
  7798  00143E  D017               	goto	l967
  7799  001440  D7F0               	goto	l3991
  7800                           
  7801                           ;doprnt.c: 1420: } else
  7802  001442  D015               	goto	l967
  7803  001444                     l3997:
  7804                           
  7805                           ;doprnt.c: 1422: {
  7806                           ;doprnt.c: 1424: if(width
  7807                           ;doprnt.c: 1428: )
  7808  001444  5021               	movf	sprintf@width,w,c
  7809  001446  1022               	iorwf	sprintf@width+1,w,c
  7810  001448  B4D8               	btfsc	status,2,c
  7811  00144A  D011               	goto	l967
  7812  00144C                     l3999:
  7813                           
  7814                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  7815  00144C  C00D  FFD9         	movff	sprintf@sp,fsr2l
  7816  001450  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  7817  001454  0E20               	movlw	32
  7818  001456  6EDF               	movwf	indf2,c
  7819  001458  4A0D               	infsnz	sprintf@sp,f,c
  7820  00145A  2A0E               	incf	sprintf@sp+1,f,c
  7821                           
  7822                           ;doprnt.c: 1431: while(--width);
  7823  00145C  0621               	decf	sprintf@width,f,c
  7824  00145E  A0D8               	btfss	status,0,c
  7825  001460  0622               	decf	sprintf@width+1,f,c
  7826  001462  5021               	movf	sprintf@width,w,c
  7827  001464  1022               	iorwf	sprintf@width+1,w,c
  7828  001466  B4D8               	btfsc	status,2,c
  7829  001468  D002               	goto	l967
  7830  00146A  D7F0               	goto	l3999
  7831  00146C  D000               	goto	l967
  7832  00146E                     l967:
  7833                           
  7834                           ;doprnt.c: 1469: }
  7835                           ;doprnt.c: 1472: prec = c;
  7836  00146E  C023  F020         	movff	sprintf@c,sprintf@prec
  7837                           
  7838                           ;doprnt.c: 1474: while(prec--) {
  7839  001472  D02A               	goto	l4011
  7840  001474                     l4005:
  7841                           
  7842                           ;doprnt.c: 1478: {
  7843                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7844  001474  5020               	movf	sprintf@prec,w,c
  7845  001476  0D02               	mullw	2
  7846  001478  0E01               	movlw	low _dpowers
  7847  00147A  24F3               	addwf	prodl,w,c
  7848  00147C  6EF6               	movwf	tblptrl,c
  7849  00147E  0E0F               	movlw	high _dpowers
  7850  001480  20F4               	addwfc	prodh,w,c
  7851  001482  6EF7               	movwf	tblptrh,c
  7852  001484                     	if	0	;There are less than 3 active tblptr bytes
  7853  001484                     	endif
  7854  001484  0009               	tblrd		*+
  7855  001486  CFF5 F003          	movff	tablat,___lwdiv@divisor
  7856  00148A  000A               	tblrd		*-
  7857  00148C  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  7858  001490  C01E  F001         	movff	sprintf@val,___lwdiv@dividend
  7859  001494  C01F  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  7860  001498  EC46  F019         	call	___lwdiv	;wreg free
  7861  00149C  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  7862  0014A0  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  7863  0014A4  0E00               	movlw	0
  7864  0014A6  6E0B               	movwf	___lwmod@divisor+1,c
  7865  0014A8  0E0A               	movlw	10
  7866  0014AA  6E0A               	movwf	___lwmod@divisor,c
  7867  0014AC  ECF0  F019         	call	___lwmod	;wreg free
  7868  0014B0  5008               	movf	?___lwmod,w,c
  7869  0014B2  0F30               	addlw	48
  7870  0014B4  6E23               	movwf	sprintf@c,c
  7871                           
  7872                           ;doprnt.c: 1523: }
  7873                           ;doprnt.c: 1524: ((*sp++ = (c)));
  7874  0014B6  C00D  FFD9         	movff	sprintf@sp,fsr2l
  7875  0014BA  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  7876  0014BE  C023  FFDF         	movff	sprintf@c,indf2
  7877  0014C2  4A0D               	infsnz	sprintf@sp,f,c
  7878  0014C4  2A0E               	incf	sprintf@sp+1,f,c
  7879  0014C6  D000               	goto	l4011
  7880  0014C8                     l4011:
  7881  0014C8  0620               	decf	sprintf@prec,f,c
  7882  0014CA  2820               	incf	sprintf@prec,w,c
  7883  0014CC  B4D8               	btfsc	status,2,c
  7884  0014CE  D002               	goto	l4013
  7885  0014D0  D7D1               	goto	l4005
  7886  0014D2  D000               	goto	l4013
  7887  0014D4                     l4013:
  7888  0014D4  C00F  FFF6         	movff	sprintf@f,tblptrl
  7889  0014D8  C010  FFF7         	movff	sprintf@f+1,tblptrh
  7890  0014DC  4A0F               	infsnz	sprintf@f,f,c
  7891  0014DE  2A10               	incf	sprintf@f+1,f,c
  7892  0014E0                     	if	0	;tblptru may be non-zero
  7893  0014E0                     	endif
  7894  0014E0                     	if	0	;tblptru may be non-zero
  7895  0014E0                     	endif
  7896  0014E0  0008               	tblrd		*
  7897  0014E2  CFF5 F023          	movff	tablat,sprintf@c
  7898  0014E6  5023               	movf	sprintf@c,w,c
  7899  0014E8  B4D8               	btfsc	status,2,c
  7900  0014EA  D002               	goto	l4015
  7901  0014EC  D6DC               	goto	l3931
  7902  0014EE  D000               	goto	l4015
  7903  0014F0                     l4015:
  7904                           
  7905                           ;doprnt.c: 1538: *sp = 0;
  7906  0014F0  C00D  FFD9         	movff	sprintf@sp,fsr2l
  7907  0014F4  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  7908  0014F8  0E00               	movlw	0
  7909  0014FA  6EDF               	movwf	indf2,c
  7910  0014FC  0012               	return	
  7911                           
  7912                           ;doprnt.c: 1540: return 0;
  7913                           ;	Return value of _sprintf is never used
  7914  0014FE  0012               	return		;funcret
  7915  001500                     __end_of_sprintf:
  7916                           	opt stack 0
  7917                           tblptru	equ	0xFF8
  7918                           tblptrh	equ	0xFF7
  7919                           tblptrl	equ	0xFF6
  7920                           tablat	equ	0xFF5
  7921                           prodh	equ	0xFF4
  7922                           prodl	equ	0xFF3
  7923                           postinc0	equ	0xFEE
  7924                           wreg	equ	0xFE8
  7925                           postdec1	equ	0xFE5
  7926                           fsr1l	equ	0xFE1
  7927                           indf2	equ	0xFDF
  7928                           postinc2	equ	0xFDE
  7929                           postdec2	equ	0xFDD
  7930                           fsr2h	equ	0xFDA
  7931                           fsr2l	equ	0xFD9
  7932                           status	equ	0xFD8
  7933                           
  7934 ;; *************** function _isdigit *****************
  7935 ;; Defined at:
  7936 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\isdigit.c"
  7937 ;; Parameters:    Size  Location     Type
  7938 ;;  c               1    wreg     unsigned char 
  7939 ;; Auto vars:     Size  Location     Type
  7940 ;;  c               1    2[COMRAM] unsigned char 
  7941 ;; Return value:  Size  Location     Type
  7942 ;;		None               void
  7943 ;; Registers used:
  7944 ;;		wreg, status,2, status,0
  7945 ;; Tracked objects:
  7946 ;;		On entry : 0/0
  7947 ;;		On exit  : 0/0
  7948 ;;		Unchanged: 0/0
  7949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7951 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7952 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7953 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7954 ;;Total ram usage:        3 bytes
  7955 ;; Hardware stack levels used:    1
  7956 ;; This function calls:
  7957 ;;		Nothing
  7958 ;; This function is called by:
  7959 ;;		_sprintf
  7960 ;; This function uses a non-reentrant model
  7961 ;;
  7962                           
  7963                           	psect	text45
  7964  0037CA                     __ptext45:
  7965                           	opt stack 0
  7966  0037CA                     _isdigit:
  7967                           	opt stack 27
  7968                           
  7969                           ;incstack = 0
  7970                           ;isdigit@c stored from wreg
  7971  0037CA  6E03               	movwf	isdigit@c,c
  7972  0037CC  0E00               	movlw	0
  7973  0037CE  6E02               	movwf	_isdigit$2643,c
  7974  0037D0  0E3A               	movlw	58
  7975  0037D2  6003               	cpfslt	isdigit@c,c
  7976  0037D4  D006               	goto	l3739
  7977  0037D6  0E2F               	movlw	47
  7978  0037D8  6403               	cpfsgt	isdigit@c,c
  7979  0037DA  D003               	goto	l3739
  7980  0037DC  0E01               	movlw	1
  7981  0037DE  6E02               	movwf	_isdigit$2643,c
  7982  0037E0  D000               	goto	l3739
  7983  0037E2                     l3739:
  7984  0037E2  C002  F001         	movff	_isdigit$2643,??_isdigit
  7985  0037E6  3001               	rrcf	??_isdigit,w,c
  7986  0037E8  0012               	return	
  7987  0037EA  0012               	return		;funcret
  7988  0037EC                     __end_of_isdigit:
  7989                           	opt stack 0
  7990                           tblptru	equ	0xFF8
  7991                           tblptrh	equ	0xFF7
  7992                           tblptrl	equ	0xFF6
  7993                           tablat	equ	0xFF5
  7994                           prodh	equ	0xFF4
  7995                           prodl	equ	0xFF3
  7996                           postinc0	equ	0xFEE
  7997                           wreg	equ	0xFE8
  7998                           postdec1	equ	0xFE5
  7999                           fsr1l	equ	0xFE1
  8000                           indf2	equ	0xFDF
  8001                           postinc2	equ	0xFDE
  8002                           postdec2	equ	0xFDD
  8003                           fsr2h	equ	0xFDA
  8004                           fsr2l	equ	0xFD9
  8005                           status	equ	0xFD8
  8006                           
  8007 ;; *************** function ___wmul *****************
  8008 ;; Defined at:
  8009 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\Umul16.c"
  8010 ;; Parameters:    Size  Location     Type
  8011 ;;  multiplier      2    0[COMRAM] unsigned int 
  8012 ;;  multiplicand    2    2[COMRAM] unsigned int 
  8013 ;; Auto vars:     Size  Location     Type
  8014 ;;  product         2    4[COMRAM] unsigned int 
  8015 ;; Return value:  Size  Location     Type
  8016 ;;                  2    0[COMRAM] unsigned int 
  8017 ;; Registers used:
  8018 ;;		wreg, status,2, status,0, prodl, prodh
  8019 ;; Tracked objects:
  8020 ;;		On entry : 0/0
  8021 ;;		On exit  : 0/0
  8022 ;;		Unchanged: 0/0
  8023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8024 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8025 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8027 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8028 ;;Total ram usage:        6 bytes
  8029 ;; Hardware stack levels used:    1
  8030 ;; This function calls:
  8031 ;;		Nothing
  8032 ;; This function is called by:
  8033 ;;		_sprintf
  8034 ;;		_eval_poly
  8035 ;; This function uses a non-reentrant model
  8036 ;;
  8037                           
  8038                           	psect	text46
  8039  003710                     __ptext46:
  8040                           	opt stack 0
  8041  003710                     ___wmul:
  8042                           	opt stack 27
  8043                           
  8044                           ;incstack = 0
  8045  003710  5001               	movf	___wmul@multiplier,w,c
  8046  003712  0203               	mulwf	___wmul@multiplicand,c
  8047  003714  CFF3 F005          	movff	prodl,___wmul@product
  8048  003718  CFF4 F006          	movff	prodh,___wmul@product+1
  8049  00371C  5001               	movf	___wmul@multiplier,w,c
  8050  00371E  0204               	mulwf	___wmul@multiplicand+1,c
  8051  003720  50F3               	movf	prodl,w,c
  8052  003722  2606               	addwf	___wmul@product+1,f,c
  8053  003724  5002               	movf	___wmul@multiplier+1,w,c
  8054  003726  0203               	mulwf	___wmul@multiplicand,c
  8055  003728  50F3               	movf	prodl,w,c
  8056  00372A  2606               	addwf	___wmul@product+1,f,c
  8057  00372C  C005  F001         	movff	___wmul@product,?___wmul
  8058  003730  C006  F002         	movff	___wmul@product+1,?___wmul+1
  8059  003734  0012               	return	
  8060  003736  0012               	return		;funcret
  8061  003738                     __end_of___wmul:
  8062                           	opt stack 0
  8063                           tblptru	equ	0xFF8
  8064                           tblptrh	equ	0xFF7
  8065                           tblptrl	equ	0xFF6
  8066                           tablat	equ	0xFF5
  8067                           prodh	equ	0xFF4
  8068                           prodl	equ	0xFF3
  8069                           postinc0	equ	0xFEE
  8070                           wreg	equ	0xFE8
  8071                           postdec1	equ	0xFE5
  8072                           fsr1l	equ	0xFE1
  8073                           indf2	equ	0xFDF
  8074                           postinc2	equ	0xFDE
  8075                           postdec2	equ	0xFDD
  8076                           fsr2h	equ	0xFDA
  8077                           fsr2l	equ	0xFD9
  8078                           status	equ	0xFD8
  8079                           
  8080 ;; *************** function ___lwmod *****************
  8081 ;; Defined at:
  8082 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lwmod.c"
  8083 ;; Parameters:    Size  Location     Type
  8084 ;;  dividend        2    7[COMRAM] unsigned int 
  8085 ;;  divisor         2    9[COMRAM] unsigned int 
  8086 ;; Auto vars:     Size  Location     Type
  8087 ;;  counter         1   11[COMRAM] unsigned char 
  8088 ;; Return value:  Size  Location     Type
  8089 ;;                  2    7[COMRAM] unsigned int 
  8090 ;; Registers used:
  8091 ;;		wreg, status,2, status,0
  8092 ;; Tracked objects:
  8093 ;;		On entry : 0/0
  8094 ;;		On exit  : 0/0
  8095 ;;		Unchanged: 0/0
  8096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8097 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8098 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8100 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8101 ;;Total ram usage:        5 bytes
  8102 ;; Hardware stack levels used:    1
  8103 ;; This function calls:
  8104 ;;		Nothing
  8105 ;; This function is called by:
  8106 ;;		_sprintf
  8107 ;; This function uses a non-reentrant model
  8108 ;;
  8109                           
  8110                           	psect	text47
  8111  0033E0                     __ptext47:
  8112                           	opt stack 0
  8113  0033E0                     ___lwmod:
  8114                           	opt stack 27
  8115                           
  8116                           ;incstack = 0
  8117  0033E0  500A               	movf	___lwmod@divisor,w,c
  8118  0033E2  100B               	iorwf	___lwmod@divisor+1,w,c
  8119  0033E4  B4D8               	btfsc	status,2,c
  8120  0033E6  D01D               	goto	l1621
  8121  0033E8  0E01               	movlw	1
  8122  0033EA  6E0C               	movwf	___lwmod@counter,c
  8123  0033EC  D005               	goto	l3841
  8124  0033EE                     l3839:
  8125  0033EE  90D8               	bcf	status,0,c
  8126  0033F0  360A               	rlcf	___lwmod@divisor,f,c
  8127  0033F2  360B               	rlcf	___lwmod@divisor+1,f,c
  8128  0033F4  2A0C               	incf	___lwmod@counter,f,c
  8129  0033F6  D000               	goto	l3841
  8130  0033F8                     l3841:
  8131  0033F8  BE0B               	btfsc	___lwmod@divisor+1,7,c
  8132  0033FA  D002               	goto	l3843
  8133  0033FC  D7F8               	goto	l3839
  8134  0033FE  D000               	goto	l3843
  8135  003400                     l3843:
  8136  003400  500A               	movf	___lwmod@divisor,w,c
  8137  003402  5C08               	subwf	___lwmod@dividend,w,c
  8138  003404  500B               	movf	___lwmod@divisor+1,w,c
  8139  003406  5809               	subwfb	___lwmod@dividend+1,w,c
  8140  003408  A0D8               	btfss	status,0,c
  8141  00340A  D005               	goto	l3847
  8142  00340C  500A               	movf	___lwmod@divisor,w,c
  8143  00340E  5E08               	subwf	___lwmod@dividend,f,c
  8144  003410  500B               	movf	___lwmod@divisor+1,w,c
  8145  003412  5A09               	subwfb	___lwmod@dividend+1,f,c
  8146  003414  D000               	goto	l3847
  8147  003416                     l3847:
  8148  003416  90D8               	bcf	status,0,c
  8149  003418  320B               	rrcf	___lwmod@divisor+1,f,c
  8150  00341A  320A               	rrcf	___lwmod@divisor,f,c
  8151  00341C  2E0C               	decfsz	___lwmod@counter,f,c
  8152  00341E  D7F0               	goto	l3843
  8153  003420  D000               	goto	l1621
  8154  003422                     l1621:
  8155  003422  C008  F008         	movff	___lwmod@dividend,?___lwmod
  8156  003426  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  8157  00342A  0012               	return		;funcret
  8158  00342C                     __end_of___lwmod:
  8159                           	opt stack 0
  8160                           tblptru	equ	0xFF8
  8161                           tblptrh	equ	0xFF7
  8162                           tblptrl	equ	0xFF6
  8163                           tablat	equ	0xFF5
  8164                           prodh	equ	0xFF4
  8165                           prodl	equ	0xFF3
  8166                           postinc0	equ	0xFEE
  8167                           wreg	equ	0xFE8
  8168                           postdec1	equ	0xFE5
  8169                           fsr1l	equ	0xFE1
  8170                           indf2	equ	0xFDF
  8171                           postinc2	equ	0xFDE
  8172                           postdec2	equ	0xFDD
  8173                           fsr2h	equ	0xFDA
  8174                           fsr2l	equ	0xFD9
  8175                           status	equ	0xFD8
  8176                           
  8177 ;; *************** function ___lwdiv *****************
  8178 ;; Defined at:
  8179 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  8180 ;; Parameters:    Size  Location     Type
  8181 ;;  dividend        2    0[COMRAM] unsigned int 
  8182 ;;  divisor         2    2[COMRAM] unsigned int 
  8183 ;; Auto vars:     Size  Location     Type
  8184 ;;  quotient        2    4[COMRAM] unsigned int 
  8185 ;;  counter         1    6[COMRAM] unsigned char 
  8186 ;; Return value:  Size  Location     Type
  8187 ;;                  2    0[COMRAM] unsigned int 
  8188 ;; Registers used:
  8189 ;;		wreg, status,2, status,0
  8190 ;; Tracked objects:
  8191 ;;		On entry : 0/0
  8192 ;;		On exit  : 0/0
  8193 ;;		Unchanged: 0/0
  8194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8195 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8196 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8198 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8199 ;;Total ram usage:        7 bytes
  8200 ;; Hardware stack levels used:    1
  8201 ;; This function calls:
  8202 ;;		Nothing
  8203 ;; This function is called by:
  8204 ;;		_sprintf
  8205 ;; This function uses a non-reentrant model
  8206 ;;
  8207                           
  8208                           	psect	text48
  8209  00328C                     __ptext48:
  8210                           	opt stack 0
  8211  00328C                     ___lwdiv:
  8212                           	opt stack 27
  8213                           
  8214                           ;incstack = 0
  8215  00328C  0E00               	movlw	0
  8216  00328E  6E06               	movwf	___lwdiv@quotient+1,c
  8217  003290  0E00               	movlw	0
  8218  003292  6E05               	movwf	___lwdiv@quotient,c
  8219  003294  5003               	movf	___lwdiv@divisor,w,c
  8220  003296  1004               	iorwf	___lwdiv@divisor+1,w,c
  8221  003298  B4D8               	btfsc	status,2,c
  8222  00329A  D021               	goto	l1611
  8223  00329C  0E01               	movlw	1
  8224  00329E  6E07               	movwf	___lwdiv@counter,c
  8225  0032A0  D005               	goto	l3821
  8226  0032A2                     l3819:
  8227  0032A2  90D8               	bcf	status,0,c
  8228  0032A4  3603               	rlcf	___lwdiv@divisor,f,c
  8229  0032A6  3604               	rlcf	___lwdiv@divisor+1,f,c
  8230  0032A8  2A07               	incf	___lwdiv@counter,f,c
  8231  0032AA  D000               	goto	l3821
  8232  0032AC                     l3821:
  8233  0032AC  BE04               	btfsc	___lwdiv@divisor+1,7,c
  8234  0032AE  D002               	goto	l3823
  8235  0032B0  D7F8               	goto	l3819
  8236  0032B2  D000               	goto	l3823
  8237  0032B4                     l3823:
  8238  0032B4  90D8               	bcf	status,0,c
  8239  0032B6  3605               	rlcf	___lwdiv@quotient,f,c
  8240  0032B8  3606               	rlcf	___lwdiv@quotient+1,f,c
  8241  0032BA  5003               	movf	___lwdiv@divisor,w,c
  8242  0032BC  5C01               	subwf	___lwdiv@dividend,w,c
  8243  0032BE  5004               	movf	___lwdiv@divisor+1,w,c
  8244  0032C0  5802               	subwfb	___lwdiv@dividend+1,w,c
  8245  0032C2  A0D8               	btfss	status,0,c
  8246  0032C4  D006               	goto	l3831
  8247  0032C6  5003               	movf	___lwdiv@divisor,w,c
  8248  0032C8  5E01               	subwf	___lwdiv@dividend,f,c
  8249  0032CA  5004               	movf	___lwdiv@divisor+1,w,c
  8250  0032CC  5A02               	subwfb	___lwdiv@dividend+1,f,c
  8251  0032CE  8005               	bsf	___lwdiv@quotient,0,c
  8252  0032D0  D000               	goto	l3831
  8253  0032D2                     l3831:
  8254  0032D2  90D8               	bcf	status,0,c
  8255  0032D4  3204               	rrcf	___lwdiv@divisor+1,f,c
  8256  0032D6  3203               	rrcf	___lwdiv@divisor,f,c
  8257  0032D8  2E07               	decfsz	___lwdiv@counter,f,c
  8258  0032DA  D7EC               	goto	l3823
  8259  0032DC  D000               	goto	l1611
  8260  0032DE                     l1611:
  8261  0032DE  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  8262  0032E2  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8263  0032E6  0012               	return		;funcret
  8264  0032E8                     __end_of___lwdiv:
  8265                           	opt stack 0
  8266                           tblptru	equ	0xFF8
  8267                           tblptrh	equ	0xFF7
  8268                           tblptrl	equ	0xFF6
  8269                           tablat	equ	0xFF5
  8270                           prodh	equ	0xFF4
  8271                           prodl	equ	0xFF3
  8272                           postinc0	equ	0xFEE
  8273                           wreg	equ	0xFE8
  8274                           postdec1	equ	0xFE5
  8275                           fsr1l	equ	0xFE1
  8276                           indf2	equ	0xFDF
  8277                           postinc2	equ	0xFDE
  8278                           postdec2	equ	0xFDD
  8279                           fsr2h	equ	0xFDA
  8280                           fsr2l	equ	0xFD9
  8281                           status	equ	0xFD8
  8282                           
  8283 ;; *************** function _lcd_putrs *****************
  8284 ;; Defined at:
  8285 ;;		line 221 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  8286 ;; Parameters:    Size  Location     Type
  8287 ;;  ptr             2    8[COMRAM] PTR const unsigned char 
  8288 ;;		 -> STR_29(2), STR_27(6), STR_25(9), STR_24(14), 
  8289 ;;		 -> STR_23(14), STR_22(16), STR_21(15), STR_20(8), 
  8290 ;;		 -> STR_19(13), STR_18(8), STR_17(4), STR_16(3), 
  8291 ;;		 -> STR_15(10), STR_14(11), STR_13(11), buffer2(20), 
  8292 ;; Auto vars:     Size  Location     Type
  8293 ;;		None
  8294 ;; Return value:  Size  Location     Type
  8295 ;;		None               void
  8296 ;; Registers used:
  8297 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8298 ;; Tracked objects:
  8299 ;;		On entry : 0/0
  8300 ;;		On exit  : 0/0
  8301 ;;		Unchanged: 0/0
  8302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8303 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8306 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8307 ;;Total ram usage:        2 bytes
  8308 ;; Hardware stack levels used:    1
  8309 ;; Hardware stack levels required when called:    4
  8310 ;; This function calls:
  8311 ;;		_lcd_putc
  8312 ;; This function is called by:
  8313 ;;		_read_keyboard
  8314 ;;		_write_Date
  8315 ;;		_twinkle
  8316 ;;		_set_desactive_vision
  8317 ;;		_set_vision
  8318 ;;		_show_success
  8319 ;;		_show_error
  8320 ;;		_ver_opcion_cambio
  8321 ;;		_ver_info
  8322 ;; This function uses a non-reentrant model
  8323 ;;
  8324                           
  8325                           	psect	text49
  8326  003340                     __ptext49:
  8327                           	opt stack 0
  8328  003340                     _lcd_putrs:
  8329                           	opt stack 24
  8330                           
  8331                           ;unmc_lcd_216.c: 223: while(*ptr){
  8332                           
  8333                           ;incstack = 0
  8334  003340  D015               	goto	l3925
  8335  003342                     l3921:
  8336                           
  8337                           ;unmc_lcd_216.c: 224: lcd_putc(*ptr++);
  8338  003342  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  8339  003346  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  8340  00334A  6AF8               	clrf	tblptru,c
  8341  00334C  0E0E               	movlw	(high __ramtop+-1)
  8342  00334E  64F7               	cpfsgt	tblptrh,c
  8343  003350  D003               	bra	u3157
  8344  003352  0008               	tblrd		*
  8345  003354  50F5               	movf	tablat,w,c
  8346  003356  D005               	bra	u3150
  8347  003358                     u3157:
  8348  003358  CFF6 FFE9          	movff	tblptrl,fsr0l
  8349  00335C  CFF7 FFEA          	movff	tblptrh,fsr0h
  8350  003360  50EF               	movf	indf0,w,c
  8351  003362                     u3150:
  8352  003362  EC16  F01A         	call	_lcd_putc
  8353  003366  4A09               	infsnz	lcd_putrs@ptr,f,c
  8354  003368  2A0A               	incf	lcd_putrs@ptr+1,f,c
  8355  00336A  D000               	goto	l3925
  8356  00336C                     l3925:
  8357  00336C  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  8358  003370  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  8359  003374  6AF8               	clrf	tblptru,c
  8360  003376  0E0E               	movlw	(high __ramtop+-1)
  8361  003378  64F7               	cpfsgt	tblptrh,c
  8362  00337A  D003               	bra	u3167
  8363  00337C  0008               	tblrd		*
  8364  00337E  50F5               	movf	tablat,w,c
  8365  003380  D005               	bra	u3160
  8366  003382                     u3167:
  8367  003382  CFF6 FFE9          	movff	tblptrl,fsr0l
  8368  003386  CFF7 FFEA          	movff	tblptrh,fsr0h
  8369  00338A  50EF               	movf	indf0,w,c
  8370  00338C                     u3160:
  8371  00338C  0900               	iorlw	0
  8372  00338E  A4D8               	btfss	status,2,c
  8373  003390  D7D8               	goto	l3921
  8374  003392  0012               	return		;funcret
  8375  003394                     __end_of_lcd_putrs:
  8376                           	opt stack 0
  8377                           tblptru	equ	0xFF8
  8378                           tblptrh	equ	0xFF7
  8379                           tblptrl	equ	0xFF6
  8380                           tablat	equ	0xFF5
  8381                           prodh	equ	0xFF4
  8382                           prodl	equ	0xFF3
  8383                           indf0	equ	0xFEF
  8384                           postinc0	equ	0xFEE
  8385                           fsr0h	equ	0xFEA
  8386                           fsr0l	equ	0xFE9
  8387                           wreg	equ	0xFE8
  8388                           postdec1	equ	0xFE5
  8389                           fsr1l	equ	0xFE1
  8390                           indf2	equ	0xFDF
  8391                           postinc2	equ	0xFDE
  8392                           postdec2	equ	0xFDD
  8393                           fsr2h	equ	0xFDA
  8394                           fsr2l	equ	0xFD9
  8395                           status	equ	0xFD8
  8396                           
  8397 ;; *************** function _lcd_putc *****************
  8398 ;; Defined at:
  8399 ;;		line 172 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  8400 ;; Parameters:    Size  Location     Type
  8401 ;;  c               1    wreg     unsigned char 
  8402 ;; Auto vars:     Size  Location     Type
  8403 ;;  c               1    7[COMRAM] unsigned char 
  8404 ;; Return value:  Size  Location     Type
  8405 ;;		None               void
  8406 ;; Registers used:
  8407 ;;		wreg, status,2, status,0, cstack
  8408 ;; Tracked objects:
  8409 ;;		On entry : 0/0
  8410 ;;		On exit  : 0/0
  8411 ;;		Unchanged: 0/0
  8412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8414 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8416 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8417 ;;Total ram usage:        1 bytes
  8418 ;; Hardware stack levels used:    1
  8419 ;; Hardware stack levels required when called:    3
  8420 ;; This function calls:
  8421 ;;		_lcd_gotoxy
  8422 ;;		_lcd_send_byte
  8423 ;; This function is called by:
  8424 ;;		_lcd_putrs
  8425 ;;		_lcd_puts
  8426 ;; This function uses a non-reentrant model
  8427 ;;
  8428                           
  8429                           	psect	text50
  8430  00342C                     __ptext50:
  8431                           	opt stack 0
  8432  00342C                     _lcd_putc:
  8433                           	opt stack 24
  8434                           
  8435                           ;incstack = 0
  8436                           ;lcd_putc@c stored from wreg
  8437  00342C  6E08               	movwf	lcd_putc@c,c
  8438                           
  8439                           ;unmc_lcd_216.c: 173: switch(c){
  8440  00342E  D018               	goto	l3729
  8441  003430                     l3719:
  8442                           
  8443                           ;unmc_lcd_216.c: 175: lcd_send_byte(0,1);
  8444  003430  0E01               	movlw	1
  8445  003432  6E03               	movwf	lcd_send_byte@n,c
  8446  003434  0E00               	movlw	0
  8447  003436  ECFA  F01A         	call	_lcd_send_byte
  8448                           
  8449                           ;unmc_lcd_216.c: 176: break;
  8450  00343A  0012               	return	
  8451  00343C                     l3721:
  8452                           
  8453                           ;unmc_lcd_216.c: 178: lcd_gotoxy(1,2);
  8454  00343C  0E02               	movlw	2
  8455  00343E  6E05               	movwf	lcd_gotoxy@y,c
  8456  003440  0E01               	movlw	1
  8457  003442  ECD3  F01B         	call	_lcd_gotoxy
  8458                           
  8459                           ;unmc_lcd_216.c: 179: break;
  8460  003446  0012               	return	
  8461  003448                     l3723:
  8462                           
  8463                           ;unmc_lcd_216.c: 181: lcd_send_byte(0,0x10);
  8464  003448  0E10               	movlw	16
  8465  00344A  6E03               	movwf	lcd_send_byte@n,c
  8466  00344C  0E00               	movlw	0
  8467  00344E  ECFA  F01A         	call	_lcd_send_byte
  8468                           
  8469                           ;unmc_lcd_216.c: 182: break;
  8470  003452  0012               	return	
  8471  003454                     l3725:
  8472                           
  8473                           ;unmc_lcd_216.c: 184: lcd_send_byte(1,c);
  8474  003454  C008  F003         	movff	lcd_putc@c,lcd_send_byte@n
  8475  003458  0E01               	movlw	1
  8476  00345A  ECFA  F01A         	call	_lcd_send_byte
  8477                           
  8478                           ;unmc_lcd_216.c: 186: }
  8479                           
  8480                           ;unmc_lcd_216.c: 185: break;
  8481  00345E  0012               	return	
  8482  003460                     l3729:
  8483  003460  5008               	movf	lcd_putc@c,w,c
  8484                           
  8485                           ; Switch size 1, requested type "space"
  8486                           ; Number of cases is 3, Range of values is 8 to 12
  8487                           ; switch strategies available:
  8488                           ; Name         Instructions Cycles
  8489                           ; simple_byte           10     6 (average)
  8490                           ;	Chosen strategy is simple_byte
  8491  003462  0A08               	xorlw	8	; case 8
  8492  003464  B4D8               	btfsc	status,2,c
  8493  003466  D7F0               	goto	l3723
  8494  003468  0A02               	xorlw	2	; case 10
  8495  00346A  B4D8               	btfsc	status,2,c
  8496  00346C  D7E7               	goto	l3721
  8497  00346E  0A06               	xorlw	6	; case 12
  8498  003470  B4D8               	btfsc	status,2,c
  8499  003472  D7DE               	goto	l3719
  8500  003474  D7EF               	goto	l3725
  8501  003476  0012               	return		;funcret
  8502  003478                     __end_of_lcd_putc:
  8503                           	opt stack 0
  8504                           tblptru	equ	0xFF8
  8505                           tblptrh	equ	0xFF7
  8506                           tblptrl	equ	0xFF6
  8507                           tablat	equ	0xFF5
  8508                           prodh	equ	0xFF4
  8509                           prodl	equ	0xFF3
  8510                           indf0	equ	0xFEF
  8511                           postinc0	equ	0xFEE
  8512                           fsr0h	equ	0xFEA
  8513                           fsr0l	equ	0xFE9
  8514                           wreg	equ	0xFE8
  8515                           postdec1	equ	0xFE5
  8516                           fsr1l	equ	0xFE1
  8517                           indf2	equ	0xFDF
  8518                           postinc2	equ	0xFDE
  8519                           postdec2	equ	0xFDD
  8520                           fsr2h	equ	0xFDA
  8521                           fsr2l	equ	0xFD9
  8522                           status	equ	0xFD8
  8523                           
  8524 ;; *************** function _lcd_gotoxy *****************
  8525 ;; Defined at:
  8526 ;;		line 158 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  8527 ;; Parameters:    Size  Location     Type
  8528 ;;  x               1    wreg     unsigned char 
  8529 ;;  y               1    4[COMRAM] unsigned char 
  8530 ;; Auto vars:     Size  Location     Type
  8531 ;;  x               1    5[COMRAM] unsigned char 
  8532 ;;  address         1    6[COMRAM] unsigned char 
  8533 ;; Return value:  Size  Location     Type
  8534 ;;		None               void
  8535 ;; Registers used:
  8536 ;;		wreg, status,2, status,0, cstack
  8537 ;; Tracked objects:
  8538 ;;		On entry : 0/0
  8539 ;;		On exit  : 0/0
  8540 ;;		Unchanged: 0/0
  8541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8542 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8543 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8545 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8546 ;;Total ram usage:        3 bytes
  8547 ;; Hardware stack levels used:    1
  8548 ;; Hardware stack levels required when called:    2
  8549 ;; This function calls:
  8550 ;;		_lcd_send_byte
  8551 ;; This function is called by:
  8552 ;;		_lcd_putc
  8553 ;;		_write_Date
  8554 ;;		_next_code
  8555 ;;		_twinkle
  8556 ;;		_set_desactive_vision
  8557 ;;		_set_vision
  8558 ;;		_input_old_pass
  8559 ;;		_show_success
  8560 ;;		_show_error
  8561 ;;		_input_new_pass
  8562 ;;		_ver_opcion_cambio
  8563 ;;		_ver_info
  8564 ;; This function uses a non-reentrant model
  8565 ;;
  8566                           
  8567                           	psect	text51
  8568  0037A6                     __ptext51:
  8569                           	opt stack 0
  8570  0037A6                     _lcd_gotoxy:
  8571                           	opt stack 24
  8572                           
  8573                           ;incstack = 0
  8574                           ;lcd_gotoxy@x stored from wreg
  8575  0037A6  6E06               	movwf	lcd_gotoxy@x,c
  8576                           
  8577                           ;unmc_lcd_216.c: 159: int8 address;
  8578                           ;unmc_lcd_216.c: 161: if(y != 1)
  8579  0037A8  0405               	decf	lcd_gotoxy@y,w,c
  8580  0037AA  B4D8               	btfsc	status,2,c
  8581  0037AC  D002               	goto	l3487
  8582                           
  8583                           ;unmc_lcd_216.c: 162: address = 0x40;
  8584  0037AE  0E40               	movlw	64
  8585  0037B0  D001               	goto	L7
  8586  0037B2                     l3487:
  8587                           
  8588                           ;unmc_lcd_216.c: 163: else
  8589                           ;unmc_lcd_216.c: 164: address=0;
  8590  0037B2  0E00               	movlw	0
  8591  0037B4                     L7:
  8592  0037B4  6E07               	movwf	lcd_gotoxy@address,c
  8593  0037B6  D000               	goto	l3489
  8594  0037B8                     l3489:
  8595                           
  8596                           ;unmc_lcd_216.c: 166: address += x-1;
  8597  0037B8  0406               	decf	lcd_gotoxy@x,w,c
  8598  0037BA  2607               	addwf	lcd_gotoxy@address,f,c
  8599                           
  8600                           ;unmc_lcd_216.c: 167: lcd_send_byte(0, 0x80 | address);
  8601  0037BC  5007               	movf	lcd_gotoxy@address,w,c
  8602  0037BE  0980               	iorlw	128
  8603  0037C0  6E03               	movwf	lcd_send_byte@n,c
  8604  0037C2  0E00               	movlw	0
  8605  0037C4  ECFA  F01A         	call	_lcd_send_byte
  8606  0037C8  0012               	return		;funcret
  8607  0037CA                     __end_of_lcd_gotoxy:
  8608                           	opt stack 0
  8609                           tblptru	equ	0xFF8
  8610                           tblptrh	equ	0xFF7
  8611                           tblptrl	equ	0xFF6
  8612                           tablat	equ	0xFF5
  8613                           prodh	equ	0xFF4
  8614                           prodl	equ	0xFF3
  8615                           indf0	equ	0xFEF
  8616                           postinc0	equ	0xFEE
  8617                           fsr0h	equ	0xFEA
  8618                           fsr0l	equ	0xFE9
  8619                           wreg	equ	0xFE8
  8620                           postdec1	equ	0xFE5
  8621                           fsr1l	equ	0xFE1
  8622                           indf2	equ	0xFDF
  8623                           postinc2	equ	0xFDE
  8624                           postdec2	equ	0xFDD
  8625                           fsr2h	equ	0xFDA
  8626                           fsr2l	equ	0xFD9
  8627                           status	equ	0xFD8
  8628                           
  8629 ;; *************** function _clear *****************
  8630 ;; Defined at:
  8631 ;;		line 7 in file "lcd_vision.c"
  8632 ;; Parameters:    Size  Location     Type
  8633 ;;		None
  8634 ;; Auto vars:     Size  Location     Type
  8635 ;;		None
  8636 ;; Return value:  Size  Location     Type
  8637 ;;		None               void
  8638 ;; Registers used:
  8639 ;;		wreg, status,2, status,0, cstack
  8640 ;; Tracked objects:
  8641 ;;		On entry : 0/0
  8642 ;;		On exit  : 0/0
  8643 ;;		Unchanged: 0/0
  8644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8647 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8648 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8649 ;;Total ram usage:        1 bytes
  8650 ;; Hardware stack levels used:    1
  8651 ;; Hardware stack levels required when called:    3
  8652 ;; This function calls:
  8653 ;;		_lcd_comand
  8654 ;; This function is called by:
  8655 ;;		_set_vision
  8656 ;;		_show_success
  8657 ;;		_show_error
  8658 ;;		_ver_opcion_cambio
  8659 ;;		_ver_info
  8660 ;; This function uses a non-reentrant model
  8661 ;;
  8662                           
  8663                           	psect	text52
  8664  003808                     __ptext52:
  8665                           	opt stack 0
  8666  003808                     _clear:
  8667                           	opt stack 26
  8668                           
  8669                           ;lcd_vision.c: 8: lcd_comand(0b00000001);
  8670                           
  8671                           ;incstack = 0
  8672  003808  0E01               	movlw	1
  8673  00380A  EC47  F01C         	call	_lcd_comand
  8674                           
  8675                           ;lcd_vision.c: 9: _delay((unsigned long)((5)*(8000000/4000.0)));
  8676  00380E  0E0D               	movlw	13
  8677  003810  6E06               	movwf	??_clear& (0+255),c
  8678  003812  0EFC               	movlw	252
  8679  003814                     u4607:
  8680  003814  2EE8               	decfsz	wreg,f,c
  8681  003816  D7FE               	goto	u4607
  8682  003818  2E06               	decfsz	??_clear& (0+255),f,c
  8683  00381A  D7FC               	goto	u4607
  8684  00381C  0012               	return		;funcret
  8685  00381E                     __end_of_clear:
  8686                           	opt stack 0
  8687                           tblptru	equ	0xFF8
  8688                           tblptrh	equ	0xFF7
  8689                           tblptrl	equ	0xFF6
  8690                           tablat	equ	0xFF5
  8691                           prodh	equ	0xFF4
  8692                           prodl	equ	0xFF3
  8693                           indf0	equ	0xFEF
  8694                           postinc0	equ	0xFEE
  8695                           fsr0h	equ	0xFEA
  8696                           fsr0l	equ	0xFE9
  8697                           wreg	equ	0xFE8
  8698                           postdec1	equ	0xFE5
  8699                           fsr1l	equ	0xFE1
  8700                           indf2	equ	0xFDF
  8701                           postinc2	equ	0xFDE
  8702                           postdec2	equ	0xFDD
  8703                           fsr2h	equ	0xFDA
  8704                           fsr2l	equ	0xFD9
  8705                           status	equ	0xFD8
  8706                           
  8707 ;; *************** function _dispararSensor *****************
  8708 ;; Defined at:
  8709 ;;		line 116 in file "menu.c"
  8710 ;; Parameters:    Size  Location     Type
  8711 ;;  sensor          2   18[COMRAM] int 
  8712 ;; Auto vars:     Size  Location     Type
  8713 ;;		None
  8714 ;; Return value:  Size  Location     Type
  8715 ;;		None               void
  8716 ;; Registers used:
  8717 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8718 ;; Tracked objects:
  8719 ;;		On entry : 0/0
  8720 ;;		On exit  : 0/0
  8721 ;;		Unchanged: 0/0
  8722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8723 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8726 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8727 ;;Total ram usage:        2 bytes
  8728 ;; Hardware stack levels used:    1
  8729 ;; Hardware stack levels required when called:    2
  8730 ;; This function calls:
  8731 ;;		_Read_RTC
  8732 ;; This function is called by:
  8733 ;;		_select_menu
  8734 ;; This function uses a non-reentrant model
  8735 ;;
  8736                           
  8737                           	psect	text53
  8738  003686                     __ptext53:
  8739                           	opt stack 0
  8740  003686                     _dispararSensor:
  8741                           	opt stack 27
  8742                           
  8743                           ;menu.c: 117: Read_RTC();
  8744                           
  8745                           ;incstack = 0
  8746  003686  EC89  F00E         	call	_Read_RTC	;wreg free
  8747                           
  8748                           ;menu.c: 118: state_alarm = TRIGGED;
  8749  00368A  0E02               	movlw	2
  8750  00368C  0100               	movlb	0	; () banked
  8751  00368E  6FD9               	movwf	_state_alarm& (0+255),b
  8752                           
  8753                           ; BSR set to: 0
  8754                           ;menu.c: 119: sensorDisparado = sensor;
  8755  003690  C013  F096         	movff	dispararSensor@sensor,_sensorDisparado
  8756                           
  8757                           ; BSR set to: 0
  8758                           ;menu.c: 120: diaDisparo = dia;
  8759  003694  C0CB  F082         	movff	_dia,_diaDisparo
  8760  003698  C0CC  F083         	movff	_dia+1,_diaDisparo+1
  8761                           
  8762                           ; BSR set to: 0
  8763                           ;menu.c: 121: mesDisparo = mes;
  8764  00369C  C0D1  F08E         	movff	_mes,_mesDisparo
  8765  0036A0  C0D2  F08F         	movff	_mes+1,_mesDisparo+1
  8766                           
  8767                           ; BSR set to: 0
  8768                           ;menu.c: 122: horaDisparo = hora;
  8769  0036A4  C0CF  F086         	movff	_hora,_horaDisparo
  8770  0036A8  C0D0  F087         	movff	_hora+1,_horaDisparo+1
  8771                           
  8772                           ; BSR set to: 0
  8773                           ;menu.c: 123: minDisparo = minuto;
  8774  0036AC  C0D3  F090         	movff	_minuto,_minDisparo
  8775  0036B0  C0D4  F091         	movff	_minuto+1,_minDisparo+1
  8776                           
  8777                           ; BSR set to: 0
  8778  0036B4  0012               	return		;funcret
  8779  0036B6                     __end_of_dispararSensor:
  8780                           	opt stack 0
  8781                           tblptru	equ	0xFF8
  8782                           tblptrh	equ	0xFF7
  8783                           tblptrl	equ	0xFF6
  8784                           tablat	equ	0xFF5
  8785                           prodh	equ	0xFF4
  8786                           prodl	equ	0xFF3
  8787                           indf0	equ	0xFEF
  8788                           postinc0	equ	0xFEE
  8789                           fsr0h	equ	0xFEA
  8790                           fsr0l	equ	0xFE9
  8791                           wreg	equ	0xFE8
  8792                           postdec1	equ	0xFE5
  8793                           fsr1l	equ	0xFE1
  8794                           indf2	equ	0xFDF
  8795                           postinc2	equ	0xFDE
  8796                           postdec2	equ	0xFDD
  8797                           fsr2h	equ	0xFDA
  8798                           fsr2l	equ	0xFD9
  8799                           status	equ	0xFD8
  8800                           
  8801 ;; *************** function _Read_RTC *****************
  8802 ;; Defined at:
  8803 ;;		line 59 in file "Unimic/sources/unmc_rtcc_01.c"
  8804 ;; Parameters:    Size  Location     Type
  8805 ;;		None
  8806 ;; Auto vars:     Size  Location     Type
  8807 ;;		None
  8808 ;; Return value:  Size  Location     Type
  8809 ;;		None               void
  8810 ;; Registers used:
  8811 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8812 ;; Tracked objects:
  8813 ;;		On entry : 0/0
  8814 ;;		On exit  : 0/0
  8815 ;;		Unchanged: 0/0
  8816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8820 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8821 ;;Total ram usage:        0 bytes
  8822 ;; Hardware stack levels used:    1
  8823 ;; Hardware stack levels required when called:    1
  8824 ;; This function calls:
  8825 ;;		_RtccReadDate
  8826 ;;		_RtccReadTime
  8827 ;; This function is called by:
  8828 ;;		_main
  8829 ;;		_dispararSensor
  8830 ;; This function uses a non-reentrant model
  8831 ;;
  8832                           
  8833                           	psect	text54
  8834  001D12                     __ptext54:
  8835                           	opt stack 0
  8836  001D12                     _Read_RTC:
  8837                           	opt stack 27
  8838                           
  8839                           ;unmc_rtcc_01.c: 62: RtccReadTime(&RtccTime);
  8840                           
  8841                           ; BSR set to: 0
  8842                           ;incstack = 0
  8843  001D12  0EAF               	movlw	low _RtccTime
  8844  001D14  6E01               	movwf	RtccReadTime@pTm,c
  8845  001D16  0E00               	movlw	high _RtccTime
  8846  001D18  6E02               	movwf	RtccReadTime@pTm+1,c
  8847  001D1A  EC79  F018         	call	_RtccReadTime	;wreg free
  8848                           
  8849                           ;unmc_rtcc_01.c: 63: segundo_u=(RtccTime.f.sec & 0x0F);
  8850  001D1E  0100               	movlb	0	; () banked
  8851  001D20  51B0               	movf	(_RtccTime+1)& (0+255),w,b
  8852  001D22  0B0F               	andlw	15
  8853  001D24  0100               	movlb	0	; () banked
  8854  001D26  6FE6               	movwf	_segundo_u& (0+255),b
  8855                           
  8856                           ; BSR set to: 0
  8857                           ;unmc_rtcc_01.c: 64: segundo_d=((RtccTime.f.sec & 0xF0)>>4);
  8858  001D28  0100               	movlb	0	; () banked
  8859  001D2A  39B0               	swapf	(_RtccTime+1)& (0+255),w,b
  8860  001D2C  0B0F               	andlw	15
  8861  001D2E  0B0F               	andlw	15
  8862  001D30  0100               	movlb	0	; () banked
  8863  001D32  6FE5               	movwf	_segundo_d& (0+255),b
  8864                           
  8865                           ; BSR set to: 0
  8866                           ;unmc_rtcc_01.c: 65: minuto_u=(RtccTime.f.min & 0x0F);
  8867  001D34  0100               	movlb	0	; () banked
  8868  001D36  51B1               	movf	(_RtccTime+2)& (0+255),w,b
  8869  001D38  0B0F               	andlw	15
  8870  001D3A  0100               	movlb	0	; () banked
  8871  001D3C  6FE4               	movwf	_minuto_u& (0+255),b
  8872                           
  8873                           ; BSR set to: 0
  8874                           ;unmc_rtcc_01.c: 66: minuto_d=((RtccTime.f.min & 0xF0)>>4);
  8875  001D3E  0100               	movlb	0	; () banked
  8876  001D40  39B1               	swapf	(_RtccTime+2)& (0+255),w,b
  8877  001D42  0B0F               	andlw	15
  8878  001D44  0B0F               	andlw	15
  8879  001D46  0100               	movlb	0	; () banked
  8880  001D48  6FE3               	movwf	_minuto_d& (0+255),b
  8881                           
  8882                           ; BSR set to: 0
  8883                           ;unmc_rtcc_01.c: 67: hora_u=(RtccTime.f.hour & 0x0F);
  8884  001D4A  0100               	movlb	0	; () banked
  8885  001D4C  51B2               	movf	(_RtccTime+3)& (0+255),w,b
  8886  001D4E  0B0F               	andlw	15
  8887  001D50  0100               	movlb	0	; () banked
  8888  001D52  6FE0               	movwf	_hora_u& (0+255),b
  8889                           
  8890                           ; BSR set to: 0
  8891                           ;unmc_rtcc_01.c: 68: hora_d=((RtccTime.f.hour & 0xF0)>>4);
  8892  001D54  0100               	movlb	0	; () banked
  8893  001D56  39B2               	swapf	(_RtccTime+3)& (0+255),w,b
  8894  001D58  0B0F               	andlw	15
  8895  001D5A  0B0F               	andlw	15
  8896  001D5C  0100               	movlb	0	; () banked
  8897  001D5E  6FDF               	movwf	_hora_d& (0+255),b
  8898                           
  8899                           ;unmc_rtcc_01.c: 69: RtccReadDate(&RtccDate);
  8900  001D60  0EAB               	movlw	low _RtccDate
  8901  001D62  6E01               	movwf	RtccReadDate@pDt,c
  8902  001D64  0E00               	movlw	high _RtccDate
  8903  001D66  6E02               	movwf	RtccReadDate@pDt+1,c
  8904  001D68  ECF7  F016         	call	_RtccReadDate	;wreg free
  8905                           
  8906                           ;unmc_rtcc_01.c: 70: fecha_u=(RtccDate.f.mday & 0x0F);
  8907  001D6C  0100               	movlb	0	; () banked
  8908  001D6E  51AC               	movf	(_RtccDate+1)& (0+255),w,b
  8909  001D70  0B0F               	andlw	15
  8910  001D72  0100               	movlb	0	; () banked
  8911  001D74  6FDE               	movwf	_fecha_u& (0+255),b
  8912                           
  8913                           ; BSR set to: 0
  8914                           ;unmc_rtcc_01.c: 71: fecha_d=((RtccDate.f.mday & 0xF0)>>4);
  8915  001D76  0100               	movlb	0	; () banked
  8916  001D78  39AC               	swapf	(_RtccDate+1)& (0+255),w,b
  8917  001D7A  0B0F               	andlw	15
  8918  001D7C  0B0F               	andlw	15
  8919  001D7E  0100               	movlb	0	; () banked
  8920  001D80  6FDD               	movwf	_fecha_d& (0+255),b
  8921                           
  8922                           ; BSR set to: 0
  8923                           ;unmc_rtcc_01.c: 72: mes_u=(RtccDate.f.mon & 0x0F);
  8924  001D82  0100               	movlb	0	; () banked
  8925  001D84  51AD               	movf	(_RtccDate+2)& (0+255),w,b
  8926  001D86  0B0F               	andlw	15
  8927  001D88  0100               	movlb	0	; () banked
  8928  001D8A  6FE2               	movwf	_mes_u& (0+255),b
  8929                           
  8930                           ; BSR set to: 0
  8931                           ;unmc_rtcc_01.c: 73: mes_d=((RtccDate.f.mon & 0xF0)>>4);
  8932  001D8C  0100               	movlb	0	; () banked
  8933  001D8E  39AD               	swapf	(_RtccDate+2)& (0+255),w,b
  8934  001D90  0B0F               	andlw	15
  8935  001D92  0B0F               	andlw	15
  8936  001D94  0100               	movlb	0	; () banked
  8937  001D96  6FE1               	movwf	_mes_d& (0+255),b
  8938                           
  8939                           ; BSR set to: 0
  8940                           ;unmc_rtcc_01.c: 74: dia_semana=RtccDate.f.wday;
  8941  001D98  C0AB  F0DC         	movff	_RtccDate,_dia_semana
  8942                           
  8943                           ; BSR set to: 0
  8944                           ;unmc_rtcc_01.c: 75: anio_u=(RtccDate.f.year & 0x0F);
  8945  001D9C  0100               	movlb	0	; () banked
  8946  001D9E  51AE               	movf	(_RtccDate+3)& (0+255),w,b
  8947  001DA0  0B0F               	andlw	15
  8948  001DA2  0100               	movlb	0	; () banked
  8949  001DA4  6FDB               	movwf	_anio_u& (0+255),b
  8950                           
  8951                           ; BSR set to: 0
  8952                           ;unmc_rtcc_01.c: 76: anio_d=((RtccDate.f.year & 0xF0)>>4);
  8953  001DA6  0100               	movlb	0	; () banked
  8954  001DA8  39AE               	swapf	(_RtccDate+3)& (0+255),w,b
  8955  001DAA  0B0F               	andlw	15
  8956  001DAC  0B0F               	andlw	15
  8957  001DAE  0100               	movlb	0	; () banked
  8958  001DB0  6FDA               	movwf	_anio_d& (0+255),b
  8959                           
  8960                           ; BSR set to: 0
  8961                           ;unmc_rtcc_01.c: 78: segundo=segundo_d*10+segundo_u;
  8962  001DB2  0100               	movlb	0	; () banked
  8963  001DB4  51E5               	movf	_segundo_d& (0+255),w,b
  8964  001DB6  0D0A               	mullw	10
  8965  001DB8  0100               	movlb	0	; () banked
  8966  001DBA  51E6               	movf	_segundo_u& (0+255),w,b
  8967  001DBC  24F3               	addwf	prodl,w,c
  8968  001DBE  0100               	movlb	0	; () banked
  8969  001DC0  6F94               	movwf	_segundo& (0+255),b
  8970  001DC2  0100               	movlb	0	; () banked
  8971  001DC4  0E00               	movlw	0
  8972  001DC6  20F4               	addwfc	prodh,w,c
  8973  001DC8  0100               	movlb	0	; () banked
  8974  001DCA  6F95               	movwf	(_segundo+1)& (0+255),b
  8975                           
  8976                           ; BSR set to: 0
  8977                           ;unmc_rtcc_01.c: 79: minuto=minuto_d*10+minuto_u;
  8978  001DCC  0100               	movlb	0	; () banked
  8979  001DCE  51E3               	movf	_minuto_d& (0+255),w,b
  8980  001DD0  0D0A               	mullw	10
  8981  001DD2  0100               	movlb	0	; () banked
  8982  001DD4  51E4               	movf	_minuto_u& (0+255),w,b
  8983  001DD6  24F3               	addwf	prodl,w,c
  8984  001DD8  0100               	movlb	0	; () banked
  8985  001DDA  6FD3               	movwf	_minuto& (0+255),b
  8986  001DDC  0100               	movlb	0	; () banked
  8987  001DDE  0E00               	movlw	0
  8988  001DE0  20F4               	addwfc	prodh,w,c
  8989  001DE2  0100               	movlb	0	; () banked
  8990  001DE4  6FD4               	movwf	(_minuto+1)& (0+255),b
  8991                           
  8992                           ; BSR set to: 0
  8993                           ;unmc_rtcc_01.c: 80: hora=hora_d*10+hora_u;
  8994  001DE6  0100               	movlb	0	; () banked
  8995  001DE8  51DF               	movf	_hora_d& (0+255),w,b
  8996  001DEA  0D0A               	mullw	10
  8997  001DEC  0100               	movlb	0	; () banked
  8998  001DEE  51E0               	movf	_hora_u& (0+255),w,b
  8999  001DF0  24F3               	addwf	prodl,w,c
  9000  001DF2  0100               	movlb	0	; () banked
  9001  001DF4  6FCF               	movwf	_hora& (0+255),b
  9002  001DF6  0100               	movlb	0	; () banked
  9003  001DF8  0E00               	movlw	0
  9004  001DFA  20F4               	addwfc	prodh,w,c
  9005  001DFC  0100               	movlb	0	; () banked
  9006  001DFE  6FD0               	movwf	(_hora+1)& (0+255),b
  9007                           
  9008                           ; BSR set to: 0
  9009                           ;unmc_rtcc_01.c: 81: dia=fecha_d*10+fecha_u;
  9010  001E00  0100               	movlb	0	; () banked
  9011  001E02  51DD               	movf	_fecha_d& (0+255),w,b
  9012  001E04  0D0A               	mullw	10
  9013  001E06  0100               	movlb	0	; () banked
  9014  001E08  51DE               	movf	_fecha_u& (0+255),w,b
  9015  001E0A  24F3               	addwf	prodl,w,c
  9016  001E0C  0100               	movlb	0	; () banked
  9017  001E0E  6FCB               	movwf	_dia& (0+255),b
  9018  001E10  0100               	movlb	0	; () banked
  9019  001E12  0E00               	movlw	0
  9020  001E14  20F4               	addwfc	prodh,w,c
  9021  001E16  0100               	movlb	0	; () banked
  9022  001E18  6FCC               	movwf	(_dia+1)& (0+255),b
  9023                           
  9024                           ; BSR set to: 0
  9025                           ;unmc_rtcc_01.c: 82: diasem=dia_semana;
  9026  001E1A  C0DC  F0CD         	movff	_dia_semana,_diasem
  9027  001E1E  0100               	movlb	0	; () banked
  9028  001E20  6BCE               	clrf	(_diasem+1)& (0+255),b
  9029                           
  9030                           ; BSR set to: 0
  9031                           ;unmc_rtcc_01.c: 83: mes=mes_d*10+mes_u;
  9032  001E22  0100               	movlb	0	; () banked
  9033  001E24  51E1               	movf	_mes_d& (0+255),w,b
  9034  001E26  0D0A               	mullw	10
  9035  001E28  0100               	movlb	0	; () banked
  9036  001E2A  51E2               	movf	_mes_u& (0+255),w,b
  9037  001E2C  24F3               	addwf	prodl,w,c
  9038  001E2E  0100               	movlb	0	; () banked
  9039  001E30  6FD1               	movwf	_mes& (0+255),b
  9040  001E32  0100               	movlb	0	; () banked
  9041  001E34  0E00               	movlw	0
  9042  001E36  20F4               	addwfc	prodh,w,c
  9043  001E38  0100               	movlb	0	; () banked
  9044  001E3A  6FD2               	movwf	(_mes+1)& (0+255),b
  9045                           
  9046                           ; BSR set to: 0
  9047                           ;unmc_rtcc_01.c: 84: anio=anio_d*10+anio_u;
  9048  001E3C  0100               	movlb	0	; () banked
  9049  001E3E  51DA               	movf	_anio_d& (0+255),w,b
  9050  001E40  0D0A               	mullw	10
  9051  001E42  0100               	movlb	0	; () banked
  9052  001E44  51DB               	movf	_anio_u& (0+255),w,b
  9053  001E46  24F3               	addwf	prodl,w,c
  9054  001E48  0100               	movlb	0	; () banked
  9055  001E4A  6FC9               	movwf	_anio& (0+255),b
  9056  001E4C  0100               	movlb	0	; () banked
  9057  001E4E  0E00               	movlw	0
  9058  001E50  20F4               	addwfc	prodh,w,c
  9059  001E52  0100               	movlb	0	; () banked
  9060  001E54  6FCA               	movwf	(_anio+1)& (0+255),b
  9061                           
  9062                           ; BSR set to: 0
  9063  001E56  0012               	return		;funcret
  9064  001E58                     __end_of_Read_RTC:
  9065                           	opt stack 0
  9066                           tblptru	equ	0xFF8
  9067                           tblptrh	equ	0xFF7
  9068                           tblptrl	equ	0xFF6
  9069                           tablat	equ	0xFF5
  9070                           prodh	equ	0xFF4
  9071                           prodl	equ	0xFF3
  9072                           indf0	equ	0xFEF
  9073                           postinc0	equ	0xFEE
  9074                           fsr0h	equ	0xFEA
  9075                           fsr0l	equ	0xFE9
  9076                           wreg	equ	0xFE8
  9077                           postdec1	equ	0xFE5
  9078                           fsr1l	equ	0xFE1
  9079                           indf2	equ	0xFDF
  9080                           postinc2	equ	0xFDE
  9081                           postdec2	equ	0xFDD
  9082                           fsr2h	equ	0xFDA
  9083                           fsr2l	equ	0xFD9
  9084                           status	equ	0xFD8
  9085                           
  9086 ;; *************** function _RtccReadTime *****************
  9087 ;; Defined at:
  9088 ;;		line 23 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadTime.c"
  9089 ;; Parameters:    Size  Location     Type
  9090 ;;  pTm             2    0[COMRAM] PTR struct .
  9091 ;;		 -> RtccTime(4), 
  9092 ;; Auto vars:     Size  Location     Type
  9093 ;;  rTD0            8   10[COMRAM] struct .
  9094 ;;  rTD1            8    2[COMRAM] struct .
  9095 ;; Return value:  Size  Location     Type
  9096 ;;		None               void
  9097 ;; Registers used:
  9098 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9099 ;; Tracked objects:
  9100 ;;		On entry : 0/0
  9101 ;;		On exit  : 0/0
  9102 ;;		Unchanged: 0/0
  9103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9104 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9105 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9107 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9108 ;;Total ram usage:       18 bytes
  9109 ;; Hardware stack levels used:    1
  9110 ;; This function calls:
  9111 ;;		Nothing
  9112 ;; This function is called by:
  9113 ;;		_Read_RTC
  9114 ;; This function uses a non-reentrant model
  9115 ;;
  9116                           
  9117                           	psect	text55
  9118  0030F2                     __ptext55:
  9119                           	opt stack 0
  9120  0030F2                     _RtccReadTime:
  9121                           	opt stack 27
  9122  0030F2  0EFC               	movlw	252
  9123  0030F4  010F               	movlb	15	; () banked
  9124  0030F6  173F               	andwf	63,f,b	;volatile
  9125                           
  9126                           ; BSR set to: 15
  9127  0030F8  010F               	movlb	15	; () banked
  9128  0030FA  813F               	bsf	63,0,b	;volatile
  9129                           
  9130                           ; BSR set to: 15
  9131  0030FC  CF98 F00F          	movff	3992,RtccReadTime@rTD0+4	;volatile
  9132                           
  9133                           ; BSR set to: 15
  9134  003100  CF99 F010          	movff	3993,RtccReadTime@rTD0+5	;volatile
  9135                           
  9136                           ; BSR set to: 15
  9137  003104  CF98 F011          	movff	3992,RtccReadTime@rTD0+6	;volatile
  9138                           
  9139                           ; BSR set to: 15
  9140  003108  CF99 F012          	movff	3993,RtccReadTime@rTD0+7	;volatile
  9141                           
  9142                           ; BSR set to: 15
  9143  00310C  0EFC               	movlw	252
  9144  00310E  010F               	movlb	15	; () banked
  9145  003110  173F               	andwf	63,f,b	;volatile
  9146  003112  010F               	movlb	15	; () banked
  9147  003114  813F               	bsf	63,0,b	;volatile
  9148                           
  9149                           ; BSR set to: 15
  9150  003116  CF98 F007          	movff	3992,RtccReadTime@rTD1+4	;volatile
  9151                           
  9152                           ; BSR set to: 15
  9153  00311A  CF99 F008          	movff	3993,RtccReadTime@rTD1+5	;volatile
  9154                           
  9155                           ; BSR set to: 15
  9156  00311E  CF98 F009          	movff	3992,RtccReadTime@rTD1+6	;volatile
  9157                           
  9158                           ; BSR set to: 15
  9159  003122  CF99 F00A          	movff	3993,RtccReadTime@rTD1+7	;volatile
  9160                           
  9161                           ; BSR set to: 15
  9162  003126  5009               	movf	RtccReadTime@rTD1+6,w,c
  9163  003128  1811               	xorwf	RtccReadTime@rTD0+6,w,c
  9164  00312A  A4D8               	btfss	status,2,c
  9165  00312C  D7E2               	goto	l4309
  9166                           
  9167                           ; BSR set to: 15
  9168                           
  9169                           ; BSR set to: 15
  9170  00312E  EE20 F003          	lfsr	2,3
  9171  003132  5001               	movf	RtccReadTime@pTm,w,c
  9172  003134  26D9               	addwf	fsr2l,f,c
  9173  003136  5002               	movf	RtccReadTime@pTm+1,w,c
  9174  003138  22DA               	addwfc	fsr2h,f,c
  9175  00313A  C00F  FFDF         	movff	RtccReadTime@rTD0+4,indf2
  9176  00313E  EE20 F002          	lfsr	2,2
  9177  003142  5001               	movf	RtccReadTime@pTm,w,c
  9178  003144  26D9               	addwf	fsr2l,f,c
  9179  003146  5002               	movf	RtccReadTime@pTm+1,w,c
  9180  003148  22DA               	addwfc	fsr2h,f,c
  9181  00314A  C012  FFDF         	movff	RtccReadTime@rTD0+7,indf2
  9182  00314E  EE20 F001          	lfsr	2,1
  9183  003152  5001               	movf	RtccReadTime@pTm,w,c
  9184  003154  26D9               	addwf	fsr2l,f,c
  9185  003156  5002               	movf	RtccReadTime@pTm+1,w,c
  9186  003158  22DA               	addwfc	fsr2h,f,c
  9187  00315A  C011  FFDF         	movff	RtccReadTime@rTD0+6,indf2
  9188                           
  9189                           ; BSR set to: 15
  9190  00315E  0012               	return		;funcret
  9191  003160                     __end_of_RtccReadTime:
  9192                           	opt stack 0
  9193                           tblptru	equ	0xFF8
  9194                           tblptrh	equ	0xFF7
  9195                           tblptrl	equ	0xFF6
  9196                           tablat	equ	0xFF5
  9197                           prodh	equ	0xFF4
  9198                           prodl	equ	0xFF3
  9199                           indf0	equ	0xFEF
  9200                           postinc0	equ	0xFEE
  9201                           fsr0h	equ	0xFEA
  9202                           fsr0l	equ	0xFE9
  9203                           wreg	equ	0xFE8
  9204                           postdec1	equ	0xFE5
  9205                           fsr1l	equ	0xFE1
  9206                           indf2	equ	0xFDF
  9207                           postinc2	equ	0xFDE
  9208                           postdec2	equ	0xFDD
  9209                           fsr2h	equ	0xFDA
  9210                           fsr2l	equ	0xFD9
  9211                           status	equ	0xFD8
  9212                           
  9213 ;; *************** function _RtccReadDate *****************
  9214 ;; Defined at:
  9215 ;;		line 23 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadDate.c"
  9216 ;; Parameters:    Size  Location     Type
  9217 ;;  pDt             2    0[COMRAM] PTR struct .
  9218 ;;		 -> RtccDate(4), 
  9219 ;; Auto vars:     Size  Location     Type
  9220 ;;  rTD0            8   10[COMRAM] struct .
  9221 ;;  rTD1            8    2[COMRAM] struct .
  9222 ;; Return value:  Size  Location     Type
  9223 ;;		None               void
  9224 ;; Registers used:
  9225 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9226 ;; Tracked objects:
  9227 ;;		On entry : 0/0
  9228 ;;		On exit  : 0/0
  9229 ;;		Unchanged: 0/0
  9230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9231 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9232 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9234 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9235 ;;Total ram usage:       18 bytes
  9236 ;; Hardware stack levels used:    1
  9237 ;; This function calls:
  9238 ;;		Nothing
  9239 ;; This function is called by:
  9240 ;;		_Read_RTC
  9241 ;; This function uses a non-reentrant model
  9242 ;;
  9243                           
  9244                           	psect	text56
  9245  002DEE                     __ptext56:
  9246                           	opt stack 0
  9247  002DEE                     _RtccReadDate:
  9248                           	opt stack 27
  9249  002DEE  0EFC               	movlw	252
  9250  002DF0  010F               	movlb	15	; () banked
  9251  002DF2  173F               	andwf	63,f,b	;volatile
  9252  002DF4  0E03               	movlw	3
  9253  002DF6  010F               	movlb	15	; () banked
  9254  002DF8  133F               	iorwf	63,f,b	;volatile
  9255                           
  9256                           ; BSR set to: 15
  9257  002DFA  CF98 F00B          	movff	3992,RtccReadDate@rTD0	;volatile
  9258                           
  9259                           ; BSR set to: 15
  9260  002DFE  CF99 F00C          	movff	3993,RtccReadDate@rTD0+1	;volatile
  9261                           
  9262                           ; BSR set to: 15
  9263  002E02  CF98 F00D          	movff	3992,RtccReadDate@rTD0+2	;volatile
  9264                           
  9265                           ; BSR set to: 15
  9266  002E06  CF99 F00E          	movff	3993,RtccReadDate@rTD0+3	;volatile
  9267                           
  9268                           ; BSR set to: 15
  9269  002E0A  CF98 F00F          	movff	3992,RtccReadDate@rTD0+4	;volatile
  9270                           
  9271                           ; BSR set to: 15
  9272  002E0E  CF99 F010          	movff	3993,RtccReadDate@rTD0+5	;volatile
  9273  002E12  0EFC               	movlw	252
  9274  002E14  010F               	movlb	15	; () banked
  9275  002E16  173F               	andwf	63,f,b	;volatile
  9276  002E18  0E03               	movlw	3
  9277  002E1A  010F               	movlb	15	; () banked
  9278  002E1C  133F               	iorwf	63,f,b	;volatile
  9279                           
  9280                           ; BSR set to: 15
  9281  002E1E  CF98 F003          	movff	3992,RtccReadDate@rTD1	;volatile
  9282                           
  9283                           ; BSR set to: 15
  9284  002E22  CF99 F004          	movff	3993,RtccReadDate@rTD1+1	;volatile
  9285                           
  9286                           ; BSR set to: 15
  9287  002E26  CF98 F005          	movff	3992,RtccReadDate@rTD1+2	;volatile
  9288                           
  9289                           ; BSR set to: 15
  9290  002E2A  CF99 F006          	movff	3993,RtccReadDate@rTD1+3	;volatile
  9291                           
  9292                           ; BSR set to: 15
  9293  002E2E  CF98 F007          	movff	3992,RtccReadDate@rTD1+4	;volatile
  9294                           
  9295                           ; BSR set to: 15
  9296  002E32  CF99 F008          	movff	3993,RtccReadDate@rTD1+5	;volatile
  9297  002E36  5005               	movf	RtccReadDate@rTD1+2,w,c
  9298  002E38  180D               	xorwf	RtccReadDate@rTD0+2,w,c
  9299  002E3A  A4D8               	btfss	status,2,c
  9300  002E3C  D7D8               	goto	l4335
  9301                           
  9302                           ; BSR set to: 15
  9303                           
  9304                           ; BSR set to: 15
  9305  002E3E  EE20 F001          	lfsr	2,1
  9306  002E42  5001               	movf	RtccReadDate@pDt,w,c
  9307  002E44  26D9               	addwf	fsr2l,f,c
  9308  002E46  5002               	movf	RtccReadDate@pDt+1,w,c
  9309  002E48  22DA               	addwfc	fsr2h,f,c
  9310  002E4A  C00D  FFDF         	movff	RtccReadDate@rTD0+2,indf2
  9311  002E4E  EE20 F002          	lfsr	2,2
  9312  002E52  5001               	movf	RtccReadDate@pDt,w,c
  9313  002E54  26D9               	addwf	fsr2l,f,c
  9314  002E56  5002               	movf	RtccReadDate@pDt+1,w,c
  9315  002E58  22DA               	addwfc	fsr2h,f,c
  9316  002E5A  C00E  FFDF         	movff	RtccReadDate@rTD0+3,indf2
  9317                           
  9318                           ; BSR set to: 15
  9319  002E5E  C001  FFD9         	movff	RtccReadDate@pDt,fsr2l
  9320  002E62  C002  FFDA         	movff	RtccReadDate@pDt+1,fsr2h
  9321  002E66  C010  FFDF         	movff	RtccReadDate@rTD0+5,indf2
  9322                           
  9323                           ; BSR set to: 15
  9324  002E6A  EE20 F003          	lfsr	2,3
  9325  002E6E  5001               	movf	RtccReadDate@pDt,w,c
  9326  002E70  26D9               	addwf	fsr2l,f,c
  9327  002E72  5002               	movf	RtccReadDate@pDt+1,w,c
  9328  002E74  22DA               	addwfc	fsr2h,f,c
  9329  002E76  C00B  FFDF         	movff	RtccReadDate@rTD0,indf2
  9330                           
  9331                           ; BSR set to: 15
  9332  002E7A  0012               	return		;funcret
  9333  002E7C                     __end_of_RtccReadDate:
  9334                           	opt stack 0
  9335                           tblptru	equ	0xFF8
  9336                           tblptrh	equ	0xFF7
  9337                           tblptrl	equ	0xFF6
  9338                           tablat	equ	0xFF5
  9339                           prodh	equ	0xFF4
  9340                           prodl	equ	0xFF3
  9341                           indf0	equ	0xFEF
  9342                           postinc0	equ	0xFEE
  9343                           fsr0h	equ	0xFEA
  9344                           fsr0l	equ	0xFE9
  9345                           wreg	equ	0xFE8
  9346                           postdec1	equ	0xFE5
  9347                           fsr1l	equ	0xFE1
  9348                           indf2	equ	0xFDF
  9349                           postinc2	equ	0xFDE
  9350                           postdec2	equ	0xFDD
  9351                           fsr2h	equ	0xFDA
  9352                           fsr2l	equ	0xFD9
  9353                           status	equ	0xFD8
  9354                           
  9355 ;; *************** function _configurar_reloj *****************
  9356 ;; Defined at:
  9357 ;;		line 4 in file "reloj.c"
  9358 ;; Parameters:    Size  Location     Type
  9359 ;;		None
  9360 ;; Auto vars:     Size  Location     Type
  9361 ;;		None
  9362 ;; Return value:  Size  Location     Type
  9363 ;;		None               void
  9364 ;; Registers used:
  9365 ;;		None
  9366 ;; Tracked objects:
  9367 ;;		On entry : 0/0
  9368 ;;		On exit  : 0/0
  9369 ;;		Unchanged: 0/0
  9370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9374 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9375 ;;Total ram usage:        0 bytes
  9376 ;; Hardware stack levels used:    1
  9377 ;; This function calls:
  9378 ;;		Nothing
  9379 ;; This function is called by:
  9380 ;;		_select_menu
  9381 ;; This function uses a non-reentrant model
  9382 ;;
  9383                           
  9384                           	psect	text57
  9385  0038B6                     __ptext57:
  9386                           	opt stack 0
  9387  0038B6                     _configurar_reloj:
  9388                           	opt stack 29
  9389                           
  9390                           ; BSR set to: 15
  9391                           ;incstack = 0
  9392  0038B6  0012               	return		;funcret
  9393  0038B8                     __end_of_configurar_reloj:
  9394                           	opt stack 0
  9395                           tblptru	equ	0xFF8
  9396                           tblptrh	equ	0xFF7
  9397                           tblptrl	equ	0xFF6
  9398                           tablat	equ	0xFF5
  9399                           prodh	equ	0xFF4
  9400                           prodl	equ	0xFF3
  9401                           indf0	equ	0xFEF
  9402                           postinc0	equ	0xFEE
  9403                           fsr0h	equ	0xFEA
  9404                           fsr0l	equ	0xFE9
  9405                           wreg	equ	0xFE8
  9406                           postdec1	equ	0xFE5
  9407                           fsr1l	equ	0xFE1
  9408                           indf2	equ	0xFDF
  9409                           postinc2	equ	0xFDE
  9410                           postdec2	equ	0xFDD
  9411                           fsr2h	equ	0xFDA
  9412                           fsr2l	equ	0xFD9
  9413                           status	equ	0xFD8
  9414                           
  9415 ;; *************** function _caratula *****************
  9416 ;; Defined at:
  9417 ;;		line 32 in file "main.c"
  9418 ;; Parameters:    Size  Location     Type
  9419 ;;		None
  9420 ;; Auto vars:     Size  Location     Type
  9421 ;;		None
  9422 ;; Return value:  Size  Location     Type
  9423 ;;		None               void
  9424 ;; Registers used:
  9425 ;;		wreg, status,2, status,0, cstack
  9426 ;; Tracked objects:
  9427 ;;		On entry : 0/0
  9428 ;;		On exit  : 0/0
  9429 ;;		Unchanged: 0/0
  9430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9434 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9435 ;;Total ram usage:        0 bytes
  9436 ;; Hardware stack levels used:    1
  9437 ;; Hardware stack levels required when called:    3
  9438 ;; This function calls:
  9439 ;;		_lcd_comand
  9440 ;; This function is called by:
  9441 ;;		_main
  9442 ;; This function uses a non-reentrant model
  9443 ;;
  9444                           
  9445                           	psect	text58
  9446  0038AE                     __ptext58:
  9447                           	opt stack 0
  9448  0038AE                     _caratula:
  9449                           	opt stack 27
  9450                           
  9451                           ;main.c: 34: lcd_comand(0b00001100);
  9452                           
  9453                           ;incstack = 0
  9454  0038AE  0E0C               	movlw	12
  9455  0038B0  EC47  F01C         	call	_lcd_comand
  9456  0038B4  0012               	return		;funcret
  9457  0038B6                     __end_of_caratula:
  9458                           	opt stack 0
  9459                           tblptru	equ	0xFF8
  9460                           tblptrh	equ	0xFF7
  9461                           tblptrl	equ	0xFF6
  9462                           tablat	equ	0xFF5
  9463                           prodh	equ	0xFF4
  9464                           prodl	equ	0xFF3
  9465                           indf0	equ	0xFEF
  9466                           postinc0	equ	0xFEE
  9467                           fsr0h	equ	0xFEA
  9468                           fsr0l	equ	0xFE9
  9469                           wreg	equ	0xFE8
  9470                           postdec1	equ	0xFE5
  9471                           fsr1l	equ	0xFE1
  9472                           indf2	equ	0xFDF
  9473                           postinc2	equ	0xFDE
  9474                           postdec2	equ	0xFDD
  9475                           fsr2h	equ	0xFDA
  9476                           fsr2l	equ	0xFD9
  9477                           status	equ	0xFD8
  9478                           
  9479 ;; *************** function _Setup *****************
  9480 ;; Defined at:
  9481 ;;		line 52 in file "main.c"
  9482 ;; Parameters:    Size  Location     Type
  9483 ;;		None
  9484 ;; Auto vars:     Size  Location     Type
  9485 ;;		None
  9486 ;; Return value:  Size  Location     Type
  9487 ;;		None               void
  9488 ;; Registers used:
  9489 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9490 ;; Tracked objects:
  9491 ;;		On entry : 0/0
  9492 ;;		On exit  : 0/0
  9493 ;;		Unchanged: 0/0
  9494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9498 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9499 ;;Total ram usage:        0 bytes
  9500 ;; Hardware stack levels used:    1
  9501 ;; Hardware stack levels required when called:    3
  9502 ;; This function calls:
  9503 ;;		_Write_RTC
  9504 ;;		_lcd_comand
  9505 ;;		_lcd_init
  9506 ;; This function is called by:
  9507 ;;		_main
  9508 ;; This function uses a non-reentrant model
  9509 ;;
  9510                           
  9511                           	psect	text59
  9512  003478                     __ptext59:
  9513                           	opt stack 0
  9514  003478                     _Setup:
  9515                           	opt stack 27
  9516                           
  9517                           ;main.c: 54: OSCTUNEbits.INTSRC=1;
  9518                           
  9519                           ;incstack = 0
  9520  003478  8E9B               	bsf	3995,7,c	;volatile
  9521                           
  9522                           ;main.c: 55: OSCTUNEbits.PLLEN=0;
  9523  00347A  9C9B               	bcf	3995,6,c	;volatile
  9524                           
  9525                           ;main.c: 56: OSCCONbits.IRCF0=1;
  9526  00347C  88D3               	bsf	4051,4,c	;volatile
  9527                           
  9528                           ;main.c: 57: OSCCONbits.IRCF1=1;
  9529  00347E  8AD3               	bsf	4051,5,c	;volatile
  9530                           
  9531                           ;main.c: 58: OSCCONbits.IRCF2=1;
  9532  003480  8CD3               	bsf	4051,6,c	;volatile
  9533                           
  9534                           ;main.c: 59: OSCCONbits.SCS0=0;
  9535  003482  90D3               	bcf	4051,0,c	;volatile
  9536                           
  9537                           ;main.c: 60: OSCCONbits.SCS1=0;
  9538  003484  92D3               	bcf	4051,1,c	;volatile
  9539                           
  9540                           ;main.c: 61: TRISA = 0b11110000;
  9541  003486  0EF0               	movlw	240
  9542  003488  6E92               	movwf	3986,c	;volatile
  9543                           
  9544                           ;main.c: 62: TRISB = 0;
  9545  00348A  0E00               	movlw	0
  9546  00348C  6E93               	movwf	3987,c	;volatile
  9547                           
  9548                           ;main.c: 63: TRISC = 0b0110111;
  9549  00348E  0E37               	movlw	55
  9550  003490  6E94               	movwf	3988,c	;volatile
  9551                           
  9552                           ;main.c: 67: ANCON0=0b11111111;
  9553  003492  010F               	movlb	15	; () banked
  9554  003494  6948               	setf	72,b	;volatile
  9555                           
  9556                           ; BSR set to: 15
  9557                           ;main.c: 69: ANCON1=0b11111111;
  9558  003496  010F               	movlb	15	; () banked
  9559  003498  6949               	setf	73,b	;volatile
  9560                           
  9561                           ;main.c: 70: ADCON0=0b00101101;
  9562  00349A  0E2D               	movlw	45
  9563  00349C  6EC2               	movwf	4034,c	;volatile
  9564                           
  9565                           ;main.c: 71: ADCON1=0b00010000;
  9566  00349E  0E10               	movlw	16
  9567  0034A0  6EC1               	movwf	4033,c	;volatile
  9568                           
  9569                           ; BSR set to: 15
  9570                           ;main.c: 72: RTCCFGbits.RTCEN=1;
  9571  0034A2  010F               	movlb	15	; () banked
  9572  0034A4  8F3F               	bsf	63,7,b	;volatile
  9573                           
  9574                           ; BSR set to: 15
  9575                           ;main.c: 73: RTCCFGbits.RTCWREN=1;
  9576  0034A6  010F               	movlb	15	; () banked
  9577  0034A8  8B3F               	bsf	63,5,b	;volatile
  9578                           
  9579                           ; BSR set to: 15
  9580                           ;main.c: 74: T1CONbits.T1OSCEN=1;
  9581  0034AA  86CD               	bsf	4045,3,c	;volatile
  9582                           
  9583                           ; BSR set to: 15
  9584                           ;main.c: 75: Write_RTC();
  9585  0034AC  EC56  F00C         	call	_Write_RTC	;wreg free
  9586                           
  9587                           ;main.c: 76: lcd_init();
  9588  0034B0  EC81  F017         	call	_lcd_init	;wreg free
  9589                           
  9590                           ;main.c: 77: lcd_comand(0b00001100);
  9591  0034B4  0E0C               	movlw	12
  9592  0034B6  EC47  F01C         	call	_lcd_comand
  9593                           
  9594                           ;main.c: 78: LATBbits.LATB1 = 1;;
  9595  0034BA  828A               	bsf	3978,1,c	;volatile
  9596  0034BC  0012               	return		;funcret
  9597  0034BE                     __end_of_Setup:
  9598                           	opt stack 0
  9599                           tblptru	equ	0xFF8
  9600                           tblptrh	equ	0xFF7
  9601                           tblptrl	equ	0xFF6
  9602                           tablat	equ	0xFF5
  9603                           prodh	equ	0xFF4
  9604                           prodl	equ	0xFF3
  9605                           indf0	equ	0xFEF
  9606                           postinc0	equ	0xFEE
  9607                           fsr0h	equ	0xFEA
  9608                           fsr0l	equ	0xFE9
  9609                           wreg	equ	0xFE8
  9610                           postdec1	equ	0xFE5
  9611                           fsr1l	equ	0xFE1
  9612                           indf2	equ	0xFDF
  9613                           postinc2	equ	0xFDE
  9614                           postdec2	equ	0xFDD
  9615                           fsr2h	equ	0xFDA
  9616                           fsr2l	equ	0xFD9
  9617                           status	equ	0xFD8
  9618                           
  9619 ;; *************** function _lcd_init *****************
  9620 ;; Defined at:
  9621 ;;		line 119 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  9622 ;; Parameters:    Size  Location     Type
  9623 ;;		None
  9624 ;; Auto vars:     Size  Location     Type
  9625 ;;  i               1    4[COMRAM] unsigned char 
  9626 ;; Return value:  Size  Location     Type
  9627 ;;		None               void
  9628 ;; Registers used:
  9629 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9630 ;; Tracked objects:
  9631 ;;		On entry : 0/0
  9632 ;;		On exit  : 0/0
  9633 ;;		Unchanged: 0/0
  9634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9636 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9638 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9639 ;;Total ram usage:        1 bytes
  9640 ;; Hardware stack levels used:    1
  9641 ;; Hardware stack levels required when called:    2
  9642 ;; This function calls:
  9643 ;;		_Delay1KTCYx
  9644 ;;		_lcd_send_byte
  9645 ;;		_lcd_send_nibble
  9646 ;; This function is called by:
  9647 ;;		_Setup
  9648 ;; This function uses a non-reentrant model
  9649 ;;
  9650                           
  9651                           	psect	text60
  9652  002F02                     __ptext60:
  9653                           	opt stack 0
  9654  002F02                     _lcd_init:
  9655                           	opt stack 27
  9656                           
  9657                           ;unmc_lcd_216.c: 120: int8 i;
  9658                           ;unmc_lcd_216.c: 122: TRISBbits.TRISB3=0;
  9659                           
  9660                           ;incstack = 0
  9661  002F02  9693               	bcf	3987,3,c	;volatile
  9662                           
  9663                           ;unmc_lcd_216.c: 123: TRISBbits.TRISB2=0;
  9664  002F04  9493               	bcf	3987,2,c	;volatile
  9665                           
  9666                           ;unmc_lcd_216.c: 128: LATBbits.LATB3=0;
  9667  002F06  968A               	bcf	3978,3,c	;volatile
  9668                           
  9669                           ;unmc_lcd_216.c: 129: LATBbits.LATB2=0;
  9670  002F08  948A               	bcf	3978,2,c	;volatile
  9671                           
  9672                           ;unmc_lcd_216.c: 134: TRISBbits.TRISB4=0;
  9673  002F0A  9893               	bcf	3987,4,c	;volatile
  9674                           
  9675                           ;unmc_lcd_216.c: 135: TRISBbits.TRISB5=0;
  9676  002F0C  9A93               	bcf	3987,5,c	;volatile
  9677                           
  9678                           ;unmc_lcd_216.c: 136: TRISBbits.TRISB6=0;
  9679  002F0E  9C93               	bcf	3987,6,c	;volatile
  9680                           
  9681                           ;unmc_lcd_216.c: 137: TRISBbits.TRISB7=0;
  9682  002F10  9E93               	bcf	3987,7,c	;volatile
  9683                           
  9684                           ;unmc_lcd_216.c: 139: Delay1KTCYx(8000000UL/800000UL);
  9685  002F12  0E0A               	movlw	10
  9686  002F14  EC23  F01C         	call	_Delay1KTCYx
  9687                           
  9688                           ;unmc_lcd_216.c: 140: Delay1KTCYx(8000000UL/800000UL);
  9689  002F18  0E0A               	movlw	10
  9690  002F1A  EC23  F01C         	call	_Delay1KTCYx
  9691                           
  9692                           ;unmc_lcd_216.c: 141: Delay1KTCYx(8000000UL/800000UL);
  9693  002F1E  0E0A               	movlw	10
  9694  002F20  EC23  F01C         	call	_Delay1KTCYx
  9695                           
  9696                           ;unmc_lcd_216.c: 143: for(i=0 ;i < 3; i++){
  9697  002F24  0E00               	movlw	0
  9698  002F26  6E05               	movwf	lcd_init@i,c
  9699  002F28                     l4727:
  9700  002F28  0E02               	movlw	2
  9701  002F2A  6405               	cpfsgt	lcd_init@i,c
  9702  002F2C  D001               	goto	l4731
  9703  002F2E  D008               	goto	l4737
  9704  002F30                     l4731:
  9705                           
  9706                           ;unmc_lcd_216.c: 144: lcd_send_nibble(0x03);
  9707  002F30  0E03               	movlw	3
  9708  002F32  EC3E  F018         	call	_lcd_send_nibble
  9709                           
  9710                           ;unmc_lcd_216.c: 145: Delay1KTCYx(8000000UL/800000UL);
  9711  002F36  0E0A               	movlw	10
  9712  002F38  EC23  F01C         	call	_Delay1KTCYx
  9713  002F3C  2A05               	incf	lcd_init@i,f,c
  9714  002F3E  D7F4               	goto	l4727
  9715  002F40                     l4737:
  9716                           
  9717                           ;unmc_lcd_216.c: 146: }
  9718                           ;unmc_lcd_216.c: 148: lcd_send_nibble(0x02);
  9719  002F40  0E02               	movlw	2
  9720  002F42  EC3E  F018         	call	_lcd_send_nibble
  9721                           
  9722                           ;unmc_lcd_216.c: 150: for(i=0; i < sizeof(LCD_INIT_STRING); i++){
  9723  002F46  0E00               	movlw	0
  9724  002F48  6E05               	movwf	lcd_init@i,c
  9725  002F4A  0E03               	movlw	3
  9726  002F4C  6405               	cpfsgt	lcd_init@i,c
  9727  002F4E  D002               	goto	l4745
  9728  002F50  0012               	return	
  9729  002F52  0012               	return	
  9730  002F54                     l4745:
  9731                           
  9732                           ;unmc_lcd_216.c: 151: lcd_send_byte(0, LCD_INIT_STRING[i]);
  9733  002F54  5005               	movf	lcd_init@i,w,c
  9734  002F56  0D01               	mullw	1
  9735  002F58  0E0B               	movlw	low _LCD_INIT_STRING
  9736  002F5A  24F3               	addwf	prodl,w,c
  9737  002F5C  6EF6               	movwf	tblptrl,c
  9738  002F5E  0E0F               	movlw	high _LCD_INIT_STRING
  9739  002F60  20F4               	addwfc	prodh,w,c
  9740  002F62  6EF7               	movwf	tblptrh,c
  9741  002F64                     	if	0	;There are less than 3 active tblptr bytes
  9742  002F64                     	endif
  9743  002F64  0008               	tblrd		*
  9744  002F66  CFF5 F003          	movff	tablat,lcd_send_byte@n
  9745  002F6A  0E00               	movlw	0
  9746  002F6C  ECFA  F01A         	call	_lcd_send_byte
  9747                           
  9748                           ;unmc_lcd_216.c: 153: Delay1KTCYx(8000000UL/800000UL);
  9749  002F70  0E0A               	movlw	10
  9750  002F72  EC23  F01C         	call	_Delay1KTCYx
  9751  002F76  2A05               	incf	lcd_init@i,f,c
  9752  002F78  0E03               	movlw	3
  9753  002F7A  6405               	cpfsgt	lcd_init@i,c
  9754  002F7C  D7EB               	goto	l4745
  9755  002F7E  0012               	return	
  9756  002F80  0012               	return		;funcret
  9757  002F82                     __end_of_lcd_init:
  9758                           	opt stack 0
  9759                           tblptru	equ	0xFF8
  9760                           tblptrh	equ	0xFF7
  9761                           tblptrl	equ	0xFF6
  9762                           tablat	equ	0xFF5
  9763                           prodh	equ	0xFF4
  9764                           prodl	equ	0xFF3
  9765                           indf0	equ	0xFEF
  9766                           postinc0	equ	0xFEE
  9767                           fsr0h	equ	0xFEA
  9768                           fsr0l	equ	0xFE9
  9769                           wreg	equ	0xFE8
  9770                           postdec1	equ	0xFE5
  9771                           fsr1l	equ	0xFE1
  9772                           indf2	equ	0xFDF
  9773                           postinc2	equ	0xFDE
  9774                           postdec2	equ	0xFDD
  9775                           fsr2h	equ	0xFDA
  9776                           fsr2l	equ	0xFD9
  9777                           status	equ	0xFD8
  9778                           
  9779 ;; *************** function _Delay1KTCYx *****************
  9780 ;; Defined at:
  9781 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\d1ktcyx.c"
  9782 ;; Parameters:    Size  Location     Type
  9783 ;;  unit            1    wreg     unsigned char 
  9784 ;; Auto vars:     Size  Location     Type
  9785 ;;  unit            1    0[COMRAM] unsigned char 
  9786 ;; Return value:  Size  Location     Type
  9787 ;;		None               void
  9788 ;; Registers used:
  9789 ;;		wreg
  9790 ;; Tracked objects:
  9791 ;;		On entry : 0/0
  9792 ;;		On exit  : 0/0
  9793 ;;		Unchanged: 0/0
  9794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9796 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9798 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9799 ;;Total ram usage:        1 bytes
  9800 ;; Hardware stack levels used:    1
  9801 ;; This function calls:
  9802 ;;		Nothing
  9803 ;; This function is called by:
  9804 ;;		_lcd_init
  9805 ;;		_DelayPORXLCD
  9806 ;; This function uses a non-reentrant model
  9807 ;;
  9808                           
  9809                           	psect	text61
  9810  003846                     __ptext61:
  9811                           	opt stack 0
  9812  003846                     _Delay1KTCYx:
  9813                           	opt stack 28
  9814                           
  9815                           ;incstack = 0
  9816                           ;Delay1KTCYx@unit stored from wreg
  9817  003846  6E01               	movwf	Delay1KTCYx@unit,c
  9818  003848  0EFA               	movlw	250
  9819  00384A                     u4617:
  9820  00384A  F000               	nop	
  9821  00384C  2EE8               	decfsz	wreg,f,c
  9822  00384E  D7FD               	goto	u4617
  9823  003850  2E01               	decfsz	Delay1KTCYx@unit,f,c
  9824  003852  D7FA               	goto	l2783
  9825  003854  0012               	return	
  9826  003856  0012               	return		;funcret
  9827  003858                     __end_of_Delay1KTCYx:
  9828                           	opt stack 0
  9829                           tblptru	equ	0xFF8
  9830                           tblptrh	equ	0xFF7
  9831                           tblptrl	equ	0xFF6
  9832                           tablat	equ	0xFF5
  9833                           prodh	equ	0xFF4
  9834                           prodl	equ	0xFF3
  9835                           indf0	equ	0xFEF
  9836                           postinc0	equ	0xFEE
  9837                           fsr0h	equ	0xFEA
  9838                           fsr0l	equ	0xFE9
  9839                           wreg	equ	0xFE8
  9840                           postdec1	equ	0xFE5
  9841                           fsr1l	equ	0xFE1
  9842                           indf2	equ	0xFDF
  9843                           postinc2	equ	0xFDE
  9844                           postdec2	equ	0xFDD
  9845                           fsr2h	equ	0xFDA
  9846                           fsr2l	equ	0xFD9
  9847                           status	equ	0xFD8
  9848                           
  9849 ;; *************** function _lcd_comand *****************
  9850 ;; Defined at:
  9851 ;;		line 189 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  9852 ;; Parameters:    Size  Location     Type
  9853 ;;  d               1    wreg     unsigned char 
  9854 ;; Auto vars:     Size  Location     Type
  9855 ;;  d               1    4[COMRAM] unsigned char 
  9856 ;; Return value:  Size  Location     Type
  9857 ;;		None               void
  9858 ;; Registers used:
  9859 ;;		wreg, status,2, status,0, cstack
  9860 ;; Tracked objects:
  9861 ;;		On entry : 0/0
  9862 ;;		On exit  : 0/0
  9863 ;;		Unchanged: 0/0
  9864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9866 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9868 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9869 ;;Total ram usage:        1 bytes
  9870 ;; Hardware stack levels used:    1
  9871 ;; Hardware stack levels required when called:    2
  9872 ;; This function calls:
  9873 ;;		_lcd_send_byte
  9874 ;; This function is called by:
  9875 ;;		_caratula
  9876 ;;		_Setup
  9877 ;;		_clear
  9878 ;; This function uses a non-reentrant model
  9879 ;;
  9880                           
  9881                           	psect	text62
  9882  00388E                     __ptext62:
  9883                           	opt stack 0
  9884  00388E                     _lcd_comand:
  9885                           	opt stack 26
  9886                           
  9887                           ;incstack = 0
  9888                           ;lcd_comand@d stored from wreg
  9889  00388E  6E05               	movwf	lcd_comand@d,c
  9890                           
  9891                           ;unmc_lcd_216.c: 190: lcd_send_byte(0,d);
  9892  003890  C005  F003         	movff	lcd_comand@d,lcd_send_byte@n
  9893  003894  0E00               	movlw	0
  9894  003896  ECFA  F01A         	call	_lcd_send_byte
  9895  00389A  0012               	return		;funcret
  9896  00389C                     __end_of_lcd_comand:
  9897                           	opt stack 0
  9898                           tblptru	equ	0xFF8
  9899                           tblptrh	equ	0xFF7
  9900                           tblptrl	equ	0xFF6
  9901                           tablat	equ	0xFF5
  9902                           prodh	equ	0xFF4
  9903                           prodl	equ	0xFF3
  9904                           indf0	equ	0xFEF
  9905                           postinc0	equ	0xFEE
  9906                           fsr0h	equ	0xFEA
  9907                           fsr0l	equ	0xFE9
  9908                           wreg	equ	0xFE8
  9909                           postdec1	equ	0xFE5
  9910                           fsr1l	equ	0xFE1
  9911                           indf2	equ	0xFDF
  9912                           postinc2	equ	0xFDE
  9913                           postdec2	equ	0xFDD
  9914                           fsr2h	equ	0xFDA
  9915                           fsr2l	equ	0xFD9
  9916                           status	equ	0xFD8
  9917                           
  9918 ;; *************** function _lcd_send_byte *****************
  9919 ;; Defined at:
  9920 ;;		line 86 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  9921 ;; Parameters:    Size  Location     Type
  9922 ;;  address         1    wreg     unsigned char 
  9923 ;;  n               1    2[COMRAM] unsigned char 
  9924 ;; Auto vars:     Size  Location     Type
  9925 ;;  address         1    3[COMRAM] unsigned char 
  9926 ;; Return value:  Size  Location     Type
  9927 ;;		None               void
  9928 ;; Registers used:
  9929 ;;		wreg, status,2, status,0, cstack
  9930 ;; Tracked objects:
  9931 ;;		On entry : 0/0
  9932 ;;		On exit  : 0/0
  9933 ;;		Unchanged: 0/0
  9934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9935 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9936 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9938 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9939 ;;Total ram usage:        2 bytes
  9940 ;; Hardware stack levels used:    1
  9941 ;; Hardware stack levels required when called:    1
  9942 ;; This function calls:
  9943 ;;		_Delay100TCYx
  9944 ;;		_lcd_send_nibble
  9945 ;; This function is called by:
  9946 ;;		_lcd_init
  9947 ;;		_lcd_gotoxy
  9948 ;;		_lcd_putc
  9949 ;;		_lcd_comand
  9950 ;;		_lcd_setcursor_vb
  9951 ;; This function uses a non-reentrant model
  9952 ;;
  9953                           
  9954                           	psect	text63
  9955  0035F4                     __ptext63:
  9956                           	opt stack 0
  9957  0035F4                     _lcd_send_byte:
  9958                           	opt stack 25
  9959                           
  9960                           ;incstack = 0
  9961                           ;lcd_send_byte@address stored from wreg
  9962  0035F4  6E04               	movwf	lcd_send_byte@address,c
  9963                           
  9964                           ;unmc_lcd_216.c: 88: LATBbits.LATB3=0;
  9965  0035F6  968A               	bcf	3978,3,c	;volatile
  9966                           
  9967                           ;unmc_lcd_216.c: 93: Delay100TCYx(8000000UL/4000000UL);
  9968  0035F8  0E02               	movlw	2
  9969  0035FA  EC2C  F01C         	call	_Delay100TCYx
  9970                           
  9971                           ;unmc_lcd_216.c: 96: TRISBbits.TRISB4=0;
  9972  0035FE  9893               	bcf	3987,4,c	;volatile
  9973                           
  9974                           ;unmc_lcd_216.c: 97: TRISBbits.TRISB5=0;
  9975  003600  9A93               	bcf	3987,5,c	;volatile
  9976                           
  9977                           ;unmc_lcd_216.c: 98: TRISBbits.TRISB6=0;
  9978  003602  9C93               	bcf	3987,6,c	;volatile
  9979                           
  9980                           ;unmc_lcd_216.c: 99: TRISBbits.TRISB7=0;
  9981  003604  9E93               	bcf	3987,7,c	;volatile
  9982                           
  9983                           ;unmc_lcd_216.c: 101: if(address)
  9984  003606  5004               	movf	lcd_send_byte@address,w,c
  9985  003608  B4D8               	btfsc	status,2,c
  9986  00360A  D002               	goto	l152
  9987                           
  9988                           ;unmc_lcd_216.c: 102: LATBbits.LATB3=1;
  9989  00360C  868A               	bsf	3978,3,c	;volatile
  9990  00360E  D001               	goto	l153
  9991  003610                     l152:
  9992                           
  9993                           ;unmc_lcd_216.c: 103: else
  9994                           ;unmc_lcd_216.c: 104: LATBbits.LATB3=0;
  9995  003610  968A               	bcf	3978,3,c	;volatile
  9996  003612                     l153:
  9997                           
  9998                           ;unmc_lcd_216.c: 106: __nop();
  9999  003612  F000               	nop	
 10000                           
 10001                           ;unmc_lcd_216.c: 113: lcd_send_nibble(n >> 4);
 10002  003614  3803               	swapf	lcd_send_byte@n,w,c
 10003  003616  0B0F               	andlw	15
 10004  003618  EC3E  F018         	call	_lcd_send_nibble
 10005                           
 10006                           ;unmc_lcd_216.c: 114: lcd_send_nibble(n & 0xf);
 10007  00361C  5003               	movf	lcd_send_byte@n,w,c
 10008  00361E  0B0F               	andlw	15
 10009  003620  EC3E  F018         	call	_lcd_send_nibble
 10010  003624  0012               	return		;funcret
 10011  003626                     __end_of_lcd_send_byte:
 10012                           	opt stack 0
 10013                           tblptru	equ	0xFF8
 10014                           tblptrh	equ	0xFF7
 10015                           tblptrl	equ	0xFF6
 10016                           tablat	equ	0xFF5
 10017                           prodh	equ	0xFF4
 10018                           prodl	equ	0xFF3
 10019                           indf0	equ	0xFEF
 10020                           postinc0	equ	0xFEE
 10021                           fsr0h	equ	0xFEA
 10022                           fsr0l	equ	0xFE9
 10023                           wreg	equ	0xFE8
 10024                           postdec1	equ	0xFE5
 10025                           fsr1l	equ	0xFE1
 10026                           indf2	equ	0xFDF
 10027                           postinc2	equ	0xFDE
 10028                           postdec2	equ	0xFDD
 10029                           fsr2h	equ	0xFDA
 10030                           fsr2l	equ	0xFD9
 10031                           status	equ	0xFD8
 10032                           
 10033 ;; *************** function _lcd_send_nibble *****************
 10034 ;; Defined at:
 10035 ;;		line 25 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
 10036 ;; Parameters:    Size  Location     Type
 10037 ;;  nibble          1    wreg     unsigned char 
 10038 ;; Auto vars:     Size  Location     Type
 10039 ;;  nibble          1    1[COMRAM] unsigned char 
 10040 ;; Return value:  Size  Location     Type
 10041 ;;		None               void
 10042 ;; Registers used:
 10043 ;;		wreg, status,2, status,0
 10044 ;; Tracked objects:
 10045 ;;		On entry : 0/0
 10046 ;;		On exit  : 0/0
 10047 ;;		Unchanged: 0/0
 10048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10050 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10051 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10052 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10053 ;;Total ram usage:        2 bytes
 10054 ;; Hardware stack levels used:    1
 10055 ;; This function calls:
 10056 ;;		Nothing
 10057 ;; This function is called by:
 10058 ;;		_lcd_send_byte
 10059 ;;		_lcd_init
 10060 ;; This function uses a non-reentrant model
 10061 ;;
 10062                           
 10063                           	psect	text64
 10064  00307C                     __ptext64:
 10065                           	opt stack 0
 10066  00307C                     _lcd_send_nibble:
 10067                           	opt stack 25
 10068                           
 10069                           ;incstack = 0
 10070                           ;lcd_send_nibble@nibble stored from wreg
 10071  00307C  6E02               	movwf	lcd_send_nibble@nibble,c
 10072                           
 10073                           ;unmc_lcd_216.c: 27: LATBbits.LATB4=!!(nibble & 0x01);
 10074  00307E  A002               	btfss	lcd_send_nibble@nibble,0,c
 10075  003080  D003               	goto	u2290
 10076  003082  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10077  003084  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
 10078  003086  D001               	goto	u2308
 10079  003088                     u2290:
 10080  003088  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10081  00308A                     u2308:
 10082  00308A  3A01               	swapf	??_lcd_send_nibble,f,c
 10083  00308C  508A               	movf	3978,w,c	;volatile
 10084  00308E  1801               	xorwf	??_lcd_send_nibble,w,c
 10085  003090  0BEF               	andlw	-17
 10086  003092  1801               	xorwf	??_lcd_send_nibble,w,c
 10087  003094  6E8A               	movwf	3978,c	;volatile
 10088                           
 10089                           ;unmc_lcd_216.c: 28: LATBbits.LATB5=!!(nibble & 0x02);
 10090  003096  A202               	btfss	lcd_send_nibble@nibble,1,c
 10091  003098  D003               	goto	u2310
 10092  00309A  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10093  00309C  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
 10094  00309E  D001               	goto	u2328
 10095  0030A0                     u2310:
 10096  0030A0  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10097  0030A2                     u2328:
 10098  0030A2  3A01               	swapf	??_lcd_send_nibble,f,c
 10099  0030A4  4601               	rlncf	??_lcd_send_nibble,f,c
 10100  0030A6  508A               	movf	3978,w,c	;volatile
 10101  0030A8  1801               	xorwf	??_lcd_send_nibble,w,c
 10102  0030AA  0BDF               	andlw	-33
 10103  0030AC  1801               	xorwf	??_lcd_send_nibble,w,c
 10104  0030AE  6E8A               	movwf	3978,c	;volatile
 10105                           
 10106                           ;unmc_lcd_216.c: 29: LATBbits.LATB6=!!(nibble & 0x04);
 10107  0030B0  A402               	btfss	lcd_send_nibble@nibble,2,c
 10108  0030B2  D003               	goto	u2330
 10109  0030B4  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10110  0030B6  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
 10111  0030B8  D001               	goto	u2348
 10112  0030BA                     u2330:
 10113  0030BA  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10114  0030BC                     u2348:
 10115  0030BC  3A01               	swapf	??_lcd_send_nibble,f,c
 10116  0030BE  4601               	rlncf	??_lcd_send_nibble,f,c
 10117  0030C0  4601               	rlncf	??_lcd_send_nibble,f,c
 10118  0030C2  508A               	movf	3978,w,c	;volatile
 10119  0030C4  1801               	xorwf	??_lcd_send_nibble,w,c
 10120  0030C6  0BBF               	andlw	-65
 10121  0030C8  1801               	xorwf	??_lcd_send_nibble,w,c
 10122  0030CA  6E8A               	movwf	3978,c	;volatile
 10123                           
 10124                           ;unmc_lcd_216.c: 30: LATBbits.LATB7=!!(nibble & 0x08);
 10125  0030CC  A602               	btfss	lcd_send_nibble@nibble,3,c
 10126  0030CE  D003               	goto	u2350
 10127  0030D0  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10128  0030D2  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
 10129  0030D4  D001               	goto	u2368
 10130  0030D6                     u2350:
 10131  0030D6  6A01               	clrf	??_lcd_send_nibble& (0+255),c
 10132  0030D8                     u2368:
 10133  0030D8  3201               	rrcf	??_lcd_send_nibble,f,c
 10134  0030DA  3201               	rrcf	??_lcd_send_nibble,f,c
 10135  0030DC  508A               	movf	3978,w,c	;volatile
 10136  0030DE  1801               	xorwf	??_lcd_send_nibble,w,c
 10137  0030E0  0B7F               	andlw	-129
 10138  0030E2  1801               	xorwf	??_lcd_send_nibble,w,c
 10139  0030E4  6E8A               	movwf	3978,c	;volatile
 10140                           
 10141                           ;unmc_lcd_216.c: 32: __nop();
 10142  0030E6  F000               	nop	
 10143                           
 10144                           ;unmc_lcd_216.c: 33: LATBbits.LATB2=1;
 10145  0030E8  848A               	bsf	3978,2,c	;volatile
 10146                           
 10147                           ;unmc_lcd_216.c: 34: __nop();__nop();
 10148  0030EA  F000               	nop	
 10149  0030EC  F000               	nop	
 10150                           
 10151                           ;unmc_lcd_216.c: 35: LATBbits.LATB2=0;
 10152  0030EE  948A               	bcf	3978,2,c	;volatile
 10153  0030F0  0012               	return		;funcret
 10154  0030F2                     __end_of_lcd_send_nibble:
 10155                           	opt stack 0
 10156                           tblptru	equ	0xFF8
 10157                           tblptrh	equ	0xFF7
 10158                           tblptrl	equ	0xFF6
 10159                           tablat	equ	0xFF5
 10160                           prodh	equ	0xFF4
 10161                           prodl	equ	0xFF3
 10162                           indf0	equ	0xFEF
 10163                           postinc0	equ	0xFEE
 10164                           fsr0h	equ	0xFEA
 10165                           fsr0l	equ	0xFE9
 10166                           wreg	equ	0xFE8
 10167                           postdec1	equ	0xFE5
 10168                           fsr1l	equ	0xFE1
 10169                           indf2	equ	0xFDF
 10170                           postinc2	equ	0xFDE
 10171                           postdec2	equ	0xFDD
 10172                           fsr2h	equ	0xFDA
 10173                           fsr2l	equ	0xFD9
 10174                           status	equ	0xFD8
 10175                           
 10176 ;; *************** function _Delay100TCYx *****************
 10177 ;; Defined at:
 10178 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\d100tcyx.c"
 10179 ;; Parameters:    Size  Location     Type
 10180 ;;  unit            1    wreg     unsigned char 
 10181 ;; Auto vars:     Size  Location     Type
 10182 ;;  unit            1    0[COMRAM] unsigned char 
 10183 ;; Return value:  Size  Location     Type
 10184 ;;		None               void
 10185 ;; Registers used:
 10186 ;;		wreg
 10187 ;; Tracked objects:
 10188 ;;		On entry : 0/0
 10189 ;;		On exit  : 0/0
 10190 ;;		Unchanged: 0/0
 10191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10193 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10195 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10196 ;;Total ram usage:        1 bytes
 10197 ;; Hardware stack levels used:    1
 10198 ;; This function calls:
 10199 ;;		Nothing
 10200 ;; This function is called by:
 10201 ;;		_lcd_send_byte
 10202 ;; This function uses a non-reentrant model
 10203 ;;
 10204                           
 10205                           	psect	text65
 10206  003858                     __ptext65:
 10207                           	opt stack 0
 10208  003858                     _Delay100TCYx:
 10209                           	opt stack 25
 10210                           
 10211                           ;incstack = 0
 10212                           ;Delay100TCYx@unit stored from wreg
 10213  003858  6E01               	movwf	Delay100TCYx@unit,c
 10214  00385A  0E21               	movlw	33
 10215  00385C                     u4627:
 10216  00385C  2EE8               	decfsz	wreg,f,c
 10217  00385E  D7FE               	goto	u4627
 10218  003860  F000               	nop	
 10219  003862  2E01               	decfsz	Delay100TCYx@unit,f,c
 10220  003864  D7FA               	goto	l3425
 10221  003866  0012               	return	
 10222  003868  0012               	return		;funcret
 10223  00386A                     __end_of_Delay100TCYx:
 10224                           	opt stack 0
 10225                           tblptru	equ	0xFF8
 10226                           tblptrh	equ	0xFF7
 10227                           tblptrl	equ	0xFF6
 10228                           tablat	equ	0xFF5
 10229                           prodh	equ	0xFF4
 10230                           prodl	equ	0xFF3
 10231                           indf0	equ	0xFEF
 10232                           postinc0	equ	0xFEE
 10233                           fsr0h	equ	0xFEA
 10234                           fsr0l	equ	0xFE9
 10235                           wreg	equ	0xFE8
 10236                           postdec1	equ	0xFE5
 10237                           fsr1l	equ	0xFE1
 10238                           indf2	equ	0xFDF
 10239                           postinc2	equ	0xFDE
 10240                           postdec2	equ	0xFDD
 10241                           fsr2h	equ	0xFDA
 10242                           fsr2l	equ	0xFD9
 10243                           status	equ	0xFD8
 10244                           
 10245 ;; *************** function _Write_RTC *****************
 10246 ;; Defined at:
 10247 ;;		line 22 in file "Unimic/sources/unmc_rtcc_01.c"
 10248 ;; Parameters:    Size  Location     Type
 10249 ;;		None
 10250 ;; Auto vars:     Size  Location     Type
 10251 ;;		None
 10252 ;; Return value:  Size  Location     Type
 10253 ;;		None               void
 10254 ;; Registers used:
 10255 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10256 ;; Tracked objects:
 10257 ;;		On entry : 0/0
 10258 ;;		On exit  : 0/0
 10259 ;;		Unchanged: 0/0
 10260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10264 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10265 ;;Total ram usage:        0 bytes
 10266 ;; Hardware stack levels used:    1
 10267 ;; Hardware stack levels required when called:    2
 10268 ;; This function calls:
 10269 ;;		_RtccWrOn
 10270 ;;		_RtccWriteDate
 10271 ;;		_RtccWriteTime
 10272 ;;		___awdiv
 10273 ;; This function is called by:
 10274 ;;		_Setup
 10275 ;;		_setClock
 10276 ;; This function uses a non-reentrant model
 10277 ;;
 10278                           
 10279                           	psect	text66
 10280  0018AC                     __ptext66:
 10281                           	opt stack 0
 10282  0018AC                     _Write_RTC:
 10283                           	opt stack 27
 10284                           
 10285                           ;unmc_rtcc_01.c: 24: RtccWrOn();
 10286                           
 10287                           ;incstack = 0
 10288  0018AC  EC35  F01C         	call	_RtccWrOn	;wreg free
 10289                           
 10290                           ;unmc_rtcc_01.c: 26: PIE3bits.RTCCIE=1;
 10291  0018B0  80A3               	bsf	4003,0,c	;volatile
 10292                           
 10293                           ;unmc_rtcc_01.c: 27: segundo_d=segundo/10;
 10294  0018B2  C094  F001         	movff	_segundo,___awdiv@dividend
 10295  0018B6  C095  F002         	movff	_segundo+1,___awdiv@dividend+1
 10296  0018BA  0E00               	movlw	0
 10297  0018BC  6E04               	movwf	___awdiv@divisor+1,c
 10298  0018BE  0E0A               	movlw	10
 10299  0018C0  6E03               	movwf	___awdiv@divisor,c
 10300  0018C2  EC1C  F016         	call	___awdiv	;wreg free
 10301  0018C6  5001               	movf	?___awdiv,w,c
 10302  0018C8  0100               	movlb	0	; () banked
 10303  0018CA  6FE5               	movwf	_segundo_d& (0+255),b
 10304                           
 10305                           ; BSR set to: 0
 10306                           ;unmc_rtcc_01.c: 28: segundo_u=segundo-segundo_d*10;
 10307  0018CC  0100               	movlb	0	; () banked
 10308  0018CE  51E5               	movf	_segundo_d& (0+255),w,b
 10309  0018D0  0D0A               	mullw	10
 10310  0018D2  50F3               	movf	prodl,w,c
 10311  0018D4  0800               	sublw	0
 10312  0018D6  0100               	movlb	0	; () banked
 10313  0018D8  2594               	addwf	_segundo& (0+255),w,b
 10314  0018DA  0100               	movlb	0	; () banked
 10315  0018DC  6FE6               	movwf	_segundo_u& (0+255),b
 10316                           
 10317                           ; BSR set to: 0
 10318                           ;unmc_rtcc_01.c: 29: RtccTime.f.sec =segundo_d*16+segundo_u;
 10319  0018DE  0100               	movlb	0	; () banked
 10320  0018E0  51E5               	movf	_segundo_d& (0+255),w,b
 10321  0018E2  0D10               	mullw	16
 10322  0018E4  50F3               	movf	prodl,w,c
 10323  0018E6  0100               	movlb	0	; () banked
 10324  0018E8  25E6               	addwf	_segundo_u& (0+255),w,b
 10325  0018EA  0100               	movlb	0	; () banked
 10326  0018EC  6FB0               	movwf	(_RtccTime+1)& (0+255),b
 10327                           
 10328                           ; BSR set to: 0
 10329                           ;unmc_rtcc_01.c: 30: minuto_d=minuto/10;
 10330  0018EE  C0D3  F001         	movff	_minuto,___awdiv@dividend
 10331  0018F2  C0D4  F002         	movff	_minuto+1,___awdiv@dividend+1
 10332  0018F6  0E00               	movlw	0
 10333  0018F8  6E04               	movwf	___awdiv@divisor+1,c
 10334  0018FA  0E0A               	movlw	10
 10335  0018FC  6E03               	movwf	___awdiv@divisor,c
 10336  0018FE  EC1C  F016         	call	___awdiv	;wreg free
 10337  001902  5001               	movf	?___awdiv,w,c
 10338  001904  0100               	movlb	0	; () banked
 10339  001906  6FE3               	movwf	_minuto_d& (0+255),b
 10340                           
 10341                           ; BSR set to: 0
 10342                           ;unmc_rtcc_01.c: 31: minuto_u=minuto-minuto_d*10;
 10343  001908  0100               	movlb	0	; () banked
 10344  00190A  51E3               	movf	_minuto_d& (0+255),w,b
 10345  00190C  0D0A               	mullw	10
 10346  00190E  50F3               	movf	prodl,w,c
 10347  001910  0800               	sublw	0
 10348  001912  0100               	movlb	0	; () banked
 10349  001914  25D3               	addwf	_minuto& (0+255),w,b
 10350  001916  0100               	movlb	0	; () banked
 10351  001918  6FE4               	movwf	_minuto_u& (0+255),b
 10352                           
 10353                           ; BSR set to: 0
 10354                           ;unmc_rtcc_01.c: 32: RtccTime.f.min =minuto_d*16+minuto_u;
 10355  00191A  0100               	movlb	0	; () banked
 10356  00191C  51E3               	movf	_minuto_d& (0+255),w,b
 10357  00191E  0D10               	mullw	16
 10358  001920  50F3               	movf	prodl,w,c
 10359  001922  0100               	movlb	0	; () banked
 10360  001924  25E4               	addwf	_minuto_u& (0+255),w,b
 10361  001926  0100               	movlb	0	; () banked
 10362  001928  6FB1               	movwf	(_RtccTime+2)& (0+255),b
 10363                           
 10364                           ; BSR set to: 0
 10365                           ;unmc_rtcc_01.c: 33: hora_d=hora/10;
 10366  00192A  C0CF  F001         	movff	_hora,___awdiv@dividend
 10367  00192E  C0D0  F002         	movff	_hora+1,___awdiv@dividend+1
 10368  001932  0E00               	movlw	0
 10369  001934  6E04               	movwf	___awdiv@divisor+1,c
 10370  001936  0E0A               	movlw	10
 10371  001938  6E03               	movwf	___awdiv@divisor,c
 10372  00193A  EC1C  F016         	call	___awdiv	;wreg free
 10373  00193E  5001               	movf	?___awdiv,w,c
 10374  001940  0100               	movlb	0	; () banked
 10375  001942  6FDF               	movwf	_hora_d& (0+255),b
 10376                           
 10377                           ; BSR set to: 0
 10378                           ;unmc_rtcc_01.c: 34: hora_u=hora-hora_d*10;
 10379  001944  0100               	movlb	0	; () banked
 10380  001946  51DF               	movf	_hora_d& (0+255),w,b
 10381  001948  0D0A               	mullw	10
 10382  00194A  50F3               	movf	prodl,w,c
 10383  00194C  0800               	sublw	0
 10384  00194E  0100               	movlb	0	; () banked
 10385  001950  25CF               	addwf	_hora& (0+255),w,b
 10386  001952  0100               	movlb	0	; () banked
 10387  001954  6FE0               	movwf	_hora_u& (0+255),b
 10388                           
 10389                           ; BSR set to: 0
 10390                           ;unmc_rtcc_01.c: 35: RtccTime.f.hour=hora_d*16+hora_u;
 10391  001956  0100               	movlb	0	; () banked
 10392  001958  51DF               	movf	_hora_d& (0+255),w,b
 10393  00195A  0D10               	mullw	16
 10394  00195C  50F3               	movf	prodl,w,c
 10395  00195E  0100               	movlb	0	; () banked
 10396  001960  25E0               	addwf	_hora_u& (0+255),w,b
 10397  001962  0100               	movlb	0	; () banked
 10398  001964  6FB2               	movwf	(_RtccTime+3)& (0+255),b
 10399                           
 10400                           ; BSR set to: 0
 10401                           ;unmc_rtcc_01.c: 36: anio_d=anio/10;
 10402  001966  C0C9  F001         	movff	_anio,___awdiv@dividend
 10403  00196A  C0CA  F002         	movff	_anio+1,___awdiv@dividend+1
 10404  00196E  0E00               	movlw	0
 10405  001970  6E04               	movwf	___awdiv@divisor+1,c
 10406  001972  0E0A               	movlw	10
 10407  001974  6E03               	movwf	___awdiv@divisor,c
 10408  001976  EC1C  F016         	call	___awdiv	;wreg free
 10409  00197A  5001               	movf	?___awdiv,w,c
 10410  00197C  0100               	movlb	0	; () banked
 10411  00197E  6FDA               	movwf	_anio_d& (0+255),b
 10412                           
 10413                           ; BSR set to: 0
 10414                           ;unmc_rtcc_01.c: 37: anio_u=anio-anio_d*10;
 10415  001980  0100               	movlb	0	; () banked
 10416  001982  51DA               	movf	_anio_d& (0+255),w,b
 10417  001984  0D0A               	mullw	10
 10418  001986  50F3               	movf	prodl,w,c
 10419  001988  0800               	sublw	0
 10420  00198A  0100               	movlb	0	; () banked
 10421  00198C  25C9               	addwf	_anio& (0+255),w,b
 10422  00198E  0100               	movlb	0	; () banked
 10423  001990  6FDB               	movwf	_anio_u& (0+255),b
 10424                           
 10425                           ; BSR set to: 0
 10426                           ;unmc_rtcc_01.c: 38: RtccDate.f.year=anio_d*16+anio_u;
 10427  001992  0100               	movlb	0	; () banked
 10428  001994  51DA               	movf	_anio_d& (0+255),w,b
 10429  001996  0D10               	mullw	16
 10430  001998  50F3               	movf	prodl,w,c
 10431  00199A  0100               	movlb	0	; () banked
 10432  00199C  25DB               	addwf	_anio_u& (0+255),w,b
 10433  00199E  0100               	movlb	0	; () banked
 10434  0019A0  6FAE               	movwf	(_RtccDate+3)& (0+255),b
 10435                           
 10436                           ; BSR set to: 0
 10437                           ;unmc_rtcc_01.c: 39: mes_d=mes/10;
 10438  0019A2  C0D1  F001         	movff	_mes,___awdiv@dividend
 10439  0019A6  C0D2  F002         	movff	_mes+1,___awdiv@dividend+1
 10440  0019AA  0E00               	movlw	0
 10441  0019AC  6E04               	movwf	___awdiv@divisor+1,c
 10442  0019AE  0E0A               	movlw	10
 10443  0019B0  6E03               	movwf	___awdiv@divisor,c
 10444  0019B2  EC1C  F016         	call	___awdiv	;wreg free
 10445  0019B6  5001               	movf	?___awdiv,w,c
 10446  0019B8  0100               	movlb	0	; () banked
 10447  0019BA  6FE1               	movwf	_mes_d& (0+255),b
 10448                           
 10449                           ; BSR set to: 0
 10450                           ;unmc_rtcc_01.c: 40: mes_u=mes-mes_d*10;
 10451  0019BC  0100               	movlb	0	; () banked
 10452  0019BE  51E1               	movf	_mes_d& (0+255),w,b
 10453  0019C0  0D0A               	mullw	10
 10454  0019C2  50F3               	movf	prodl,w,c
 10455  0019C4  0800               	sublw	0
 10456  0019C6  0100               	movlb	0	; () banked
 10457  0019C8  25D1               	addwf	_mes& (0+255),w,b
 10458  0019CA  0100               	movlb	0	; () banked
 10459  0019CC  6FE2               	movwf	_mes_u& (0+255),b
 10460                           
 10461                           ; BSR set to: 0
 10462                           ;unmc_rtcc_01.c: 41: RtccDate.f.mon=mes_d*16+mes_u;
 10463  0019CE  0100               	movlb	0	; () banked
 10464  0019D0  51E1               	movf	_mes_d& (0+255),w,b
 10465  0019D2  0D10               	mullw	16
 10466  0019D4  50F3               	movf	prodl,w,c
 10467  0019D6  0100               	movlb	0	; () banked
 10468  0019D8  25E2               	addwf	_mes_u& (0+255),w,b
 10469  0019DA  0100               	movlb	0	; () banked
 10470  0019DC  6FAD               	movwf	(_RtccDate+2)& (0+255),b
 10471                           
 10472                           ; BSR set to: 0
 10473                           ;unmc_rtcc_01.c: 42: fecha_d=dia/10;
 10474  0019DE  C0CB  F001         	movff	_dia,___awdiv@dividend
 10475  0019E2  C0CC  F002         	movff	_dia+1,___awdiv@dividend+1
 10476  0019E6  0E00               	movlw	0
 10477  0019E8  6E04               	movwf	___awdiv@divisor+1,c
 10478  0019EA  0E0A               	movlw	10
 10479  0019EC  6E03               	movwf	___awdiv@divisor,c
 10480  0019EE  EC1C  F016         	call	___awdiv	;wreg free
 10481  0019F2  5001               	movf	?___awdiv,w,c
 10482  0019F4  0100               	movlb	0	; () banked
 10483  0019F6  6FDD               	movwf	_fecha_d& (0+255),b
 10484                           
 10485                           ; BSR set to: 0
 10486                           ;unmc_rtcc_01.c: 43: fecha_u=dia-fecha_d*10;
 10487  0019F8  0100               	movlb	0	; () banked
 10488  0019FA  51DD               	movf	_fecha_d& (0+255),w,b
 10489  0019FC  0D0A               	mullw	10
 10490  0019FE  50F3               	movf	prodl,w,c
 10491  001A00  0800               	sublw	0
 10492  001A02  0100               	movlb	0	; () banked
 10493  001A04  25CB               	addwf	_dia& (0+255),w,b
 10494  001A06  0100               	movlb	0	; () banked
 10495  001A08  6FDE               	movwf	_fecha_u& (0+255),b
 10496                           
 10497                           ; BSR set to: 0
 10498                           ;unmc_rtcc_01.c: 44: RtccDate.f.mday=fecha_d*16+fecha_u;
 10499  001A0A  0100               	movlb	0	; () banked
 10500  001A0C  51DD               	movf	_fecha_d& (0+255),w,b
 10501  001A0E  0D10               	mullw	16
 10502  001A10  50F3               	movf	prodl,w,c
 10503  001A12  0100               	movlb	0	; () banked
 10504  001A14  25DE               	addwf	_fecha_u& (0+255),w,b
 10505  001A16  0100               	movlb	0	; () banked
 10506  001A18  6FAC               	movwf	(_RtccDate+1)& (0+255),b
 10507                           
 10508                           ; BSR set to: 0
 10509                           ;unmc_rtcc_01.c: 45: dia_semana=diasem;
 10510  001A1A  C0CD  F0DC         	movff	_diasem,_dia_semana
 10511                           
 10512                           ; BSR set to: 0
 10513                           ;unmc_rtcc_01.c: 46: RtccDate.f.wday =diasem;
 10514  001A1E  C0CD  F0AB         	movff	_diasem,_RtccDate
 10515                           
 10516                           ; BSR set to: 0
 10517                           ;unmc_rtcc_01.c: 47: RtccWriteTime(&RtccTime,1);
 10518  001A22  0EAF               	movlw	low _RtccTime
 10519  001A24  6E01               	movwf	RtccWriteTime@pTm,c
 10520  001A26  0E00               	movlw	high _RtccTime
 10521  001A28  6E02               	movwf	RtccWriteTime@pTm+1,c
 10522  001A2A  0E01               	movlw	1
 10523  001A2C  6E03               	movwf	RtccWriteTime@di,c
 10524  001A2E  ECFC  F010         	call	_RtccWriteTime	;wreg free
 10525                           
 10526                           ;unmc_rtcc_01.c: 48: RtccWriteDate(&RtccDate,1);
 10527  001A32  0EAB               	movlw	low _RtccDate
 10528  001A34  6E01               	movwf	RtccWriteDate@pDt,c
 10529  001A36  0E00               	movlw	high _RtccDate
 10530  001A38  6E02               	movwf	RtccWriteDate@pDt+1,c
 10531  001A3A  0E01               	movlw	1
 10532  001A3C  6E03               	movwf	RtccWriteDate@di,c
 10533  001A3E  EC2C  F00F         	call	_RtccWriteDate	;wreg free
 10534                           
 10535                           ;unmc_rtcc_01.c: 49: (RTCCFGbits.RTCEN=1);
 10536  001A42  010F               	movlb	15	; () banked
 10537  001A44  8F3F               	bsf	63,7,b	;volatile
 10538                           
 10539                           ; BSR set to: 15
 10540  001A46  0012               	return		;funcret
 10541  001A48                     __end_of_Write_RTC:
 10542                           	opt stack 0
 10543                           tblptru	equ	0xFF8
 10544                           tblptrh	equ	0xFF7
 10545                           tblptrl	equ	0xFF6
 10546                           tablat	equ	0xFF5
 10547                           prodh	equ	0xFF4
 10548                           prodl	equ	0xFF3
 10549                           indf0	equ	0xFEF
 10550                           postinc0	equ	0xFEE
 10551                           fsr0h	equ	0xFEA
 10552                           fsr0l	equ	0xFE9
 10553                           wreg	equ	0xFE8
 10554                           postdec1	equ	0xFE5
 10555                           fsr1l	equ	0xFE1
 10556                           indf2	equ	0xFDF
 10557                           postinc2	equ	0xFDE
 10558                           postdec2	equ	0xFDD
 10559                           fsr2h	equ	0xFDA
 10560                           fsr2l	equ	0xFD9
 10561                           status	equ	0xFD8
 10562                           
 10563 ;; *************** function ___awdiv *****************
 10564 ;; Defined at:
 10565 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\awdiv.c"
 10566 ;; Parameters:    Size  Location     Type
 10567 ;;  dividend        2    0[COMRAM] int 
 10568 ;;  divisor         2    2[COMRAM] int 
 10569 ;; Auto vars:     Size  Location     Type
 10570 ;;  quotient        2    6[COMRAM] int 
 10571 ;;  sign            1    5[COMRAM] unsigned char 
 10572 ;;  counter         1    4[COMRAM] unsigned char 
 10573 ;; Return value:  Size  Location     Type
 10574 ;;                  2    0[COMRAM] int 
 10575 ;; Registers used:
 10576 ;;		wreg, status,2, status,0
 10577 ;; Tracked objects:
 10578 ;;		On entry : 0/0
 10579 ;;		On exit  : 0/0
 10580 ;;		Unchanged: 0/0
 10581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10582 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10583 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10585 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10586 ;;Total ram usage:        8 bytes
 10587 ;; Hardware stack levels used:    1
 10588 ;; This function calls:
 10589 ;;		Nothing
 10590 ;; This function is called by:
 10591 ;;		__delay_s
 10592 ;;		_Write_RTC
 10593 ;; This function uses a non-reentrant model
 10594 ;;
 10595                           
 10596                           	psect	text67
 10597  002C38                     __ptext67:
 10598                           	opt stack 0
 10599  002C38                     ___awdiv:
 10600                           	opt stack 27
 10601                           
 10602                           ; BSR set to: 15
 10603                           ;incstack = 0
 10604  002C38  0E00               	movlw	0
 10605  002C3A  6E06               	movwf	___awdiv@sign,c
 10606  002C3C  AE04               	btfss	___awdiv@divisor+1,7,c
 10607  002C3E  D007               	goto	l4027
 10608  002C40  6C03               	negf	___awdiv@divisor,c
 10609  002C42  1E04               	comf	___awdiv@divisor+1,f,c
 10610  002C44  B0D8               	btfsc	status,0,c
 10611  002C46  2A04               	incf	___awdiv@divisor+1,f,c
 10612  002C48  0E01               	movlw	1
 10613  002C4A  6E06               	movwf	___awdiv@sign,c
 10614  002C4C  D000               	goto	l4027
 10615  002C4E                     l4027:
 10616  002C4E  AE02               	btfss	___awdiv@dividend+1,7,c
 10617  002C50  D007               	goto	l4033
 10618  002C52  6C01               	negf	___awdiv@dividend,c
 10619  002C54  1E02               	comf	___awdiv@dividend+1,f,c
 10620  002C56  B0D8               	btfsc	status,0,c
 10621  002C58  2A02               	incf	___awdiv@dividend+1,f,c
 10622  002C5A  0E01               	movlw	1
 10623  002C5C  1A06               	xorwf	___awdiv@sign,f,c
 10624  002C5E  D000               	goto	l4033
 10625  002C60                     l4033:
 10626  002C60  0E00               	movlw	0
 10627  002C62  6E08               	movwf	___awdiv@quotient+1,c
 10628  002C64  0E00               	movlw	0
 10629  002C66  6E07               	movwf	___awdiv@quotient,c
 10630  002C68  5003               	movf	___awdiv@divisor,w,c
 10631  002C6A  1004               	iorwf	___awdiv@divisor+1,w,c
 10632  002C6C  B4D8               	btfsc	status,2,c
 10633  002C6E  D021               	goto	l4055
 10634  002C70  0E01               	movlw	1
 10635  002C72  6E05               	movwf	___awdiv@counter,c
 10636  002C74  D005               	goto	l4041
 10637  002C76                     l4039:
 10638  002C76  90D8               	bcf	status,0,c
 10639  002C78  3603               	rlcf	___awdiv@divisor,f,c
 10640  002C7A  3604               	rlcf	___awdiv@divisor+1,f,c
 10641  002C7C  2A05               	incf	___awdiv@counter,f,c
 10642  002C7E  D000               	goto	l4041
 10643  002C80                     l4041:
 10644  002C80  BE04               	btfsc	___awdiv@divisor+1,7,c
 10645  002C82  D002               	goto	l4043
 10646  002C84  D7F8               	goto	l4039
 10647  002C86  D000               	goto	l4043
 10648  002C88                     l4043:
 10649  002C88  90D8               	bcf	status,0,c
 10650  002C8A  3607               	rlcf	___awdiv@quotient,f,c
 10651  002C8C  3608               	rlcf	___awdiv@quotient+1,f,c
 10652  002C8E  5003               	movf	___awdiv@divisor,w,c
 10653  002C90  5C01               	subwf	___awdiv@dividend,w,c
 10654  002C92  5004               	movf	___awdiv@divisor+1,w,c
 10655  002C94  5802               	subwfb	___awdiv@dividend+1,w,c
 10656  002C96  A0D8               	btfss	status,0,c
 10657  002C98  D006               	goto	l4051
 10658  002C9A  5003               	movf	___awdiv@divisor,w,c
 10659  002C9C  5E01               	subwf	___awdiv@dividend,f,c
 10660  002C9E  5004               	movf	___awdiv@divisor+1,w,c
 10661  002CA0  5A02               	subwfb	___awdiv@dividend+1,f,c
 10662  002CA2  8007               	bsf	___awdiv@quotient,0,c
 10663  002CA4  D000               	goto	l4051
 10664  002CA6                     l4051:
 10665  002CA6  90D8               	bcf	status,0,c
 10666  002CA8  3204               	rrcf	___awdiv@divisor+1,f,c
 10667  002CAA  3203               	rrcf	___awdiv@divisor,f,c
 10668  002CAC  2E05               	decfsz	___awdiv@counter,f,c
 10669  002CAE  D7EC               	goto	l4043
 10670  002CB0  D000               	goto	l4055
 10671  002CB2                     l4055:
 10672  002CB2  5006               	movf	___awdiv@sign,w,c
 10673  002CB4  B4D8               	btfsc	status,2,c
 10674  002CB6  D005               	goto	l4059
 10675  002CB8  6C07               	negf	___awdiv@quotient,c
 10676  002CBA  1E08               	comf	___awdiv@quotient+1,f,c
 10677  002CBC  B0D8               	btfsc	status,0,c
 10678  002CBE  2A08               	incf	___awdiv@quotient+1,f,c
 10679  002CC0  D000               	goto	l4059
 10680  002CC2                     l4059:
 10681  002CC2  C007  F001         	movff	___awdiv@quotient,?___awdiv
 10682  002CC6  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
 10683  002CCA  0012               	return	
 10684  002CCC  0012               	return		;funcret
 10685  002CCE                     __end_of___awdiv:
 10686                           	opt stack 0
 10687                           tblptru	equ	0xFF8
 10688                           tblptrh	equ	0xFF7
 10689                           tblptrl	equ	0xFF6
 10690                           tablat	equ	0xFF5
 10691                           prodh	equ	0xFF4
 10692                           prodl	equ	0xFF3
 10693                           indf0	equ	0xFEF
 10694                           postinc0	equ	0xFEE
 10695                           fsr0h	equ	0xFEA
 10696                           fsr0l	equ	0xFE9
 10697                           wreg	equ	0xFE8
 10698                           postdec1	equ	0xFE5
 10699                           fsr1l	equ	0xFE1
 10700                           indf2	equ	0xFDF
 10701                           postinc2	equ	0xFDE
 10702                           postdec2	equ	0xFDD
 10703                           fsr2h	equ	0xFDA
 10704                           fsr2l	equ	0xFD9
 10705                           status	equ	0xFD8
 10706                           
 10707 ;; *************** function _RtccWriteTime *****************
 10708 ;; Defined at:
 10709 ;;		line 34 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteTime.c"
 10710 ;; Parameters:    Size  Location     Type
 10711 ;;  pTm             2    0[COMRAM] PTR const struct .
 10712 ;;		 -> RtccTime(4), 
 10713 ;;  di              1    2[COMRAM] enum E7121
 10714 ;; Auto vars:     Size  Location     Type
 10715 ;;  tempHourWDay    2    9[COMRAM] struct .
 10716 ;;  tempMinSec      2    7[COMRAM] struct .
 10717 ;;  wasWrEn         1    6[COMRAM] enum E7121
 10718 ;;  wasAlrm         1    5[COMRAM] enum E7121
 10719 ;;  wasOn           1    4[COMRAM] enum E7121
 10720 ;; Return value:  Size  Location     Type
 10721 ;;                  1    wreg      enum E7121
 10722 ;; Registers used:
 10723 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10724 ;; Tracked objects:
 10725 ;;		On entry : 0/0
 10726 ;;		On exit  : 0/0
 10727 ;;		Unchanged: 0/0
 10728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10729 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10730 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10731 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10732 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10733 ;;Total ram usage:       11 bytes
 10734 ;; Hardware stack levels used:    1
 10735 ;; Hardware stack levels required when called:    1
 10736 ;; This function calls:
 10737 ;;		_RtccWrOn
 10738 ;; This function is called by:
 10739 ;;		_Write_RTC
 10740 ;; This function uses a non-reentrant model
 10741 ;;
 10742                           
 10743                           	psect	text68
 10744  0021F8                     __ptext68:
 10745                           	opt stack 0
 10746  0021F8                     _RtccWriteTime:
 10747                           	opt stack 27
 10748                           
 10749                           ;incstack = 0
 10750  0021F8  0E00               	movlw	0
 10751  0021FA  6E06               	movwf	RtccWriteTime@wasAlrm,c
 10752  0021FC  EE20 F002          	lfsr	2,2
 10753  002200  5001               	movf	RtccWriteTime@pTm,w,c
 10754  002202  26D9               	addwf	fsr2l,f,c
 10755  002204  5002               	movf	RtccWriteTime@pTm+1,w,c
 10756  002206  22DA               	addwfc	fsr2h,f,c
 10757  002208  0E5A               	movlw	90
 10758  00220A  60DF               	cpfslt	indf2,c
 10759  00220C  0012               	return	
 10760  00220E  EE20 F001          	lfsr	2,1
 10761  002212  5001               	movf	RtccWriteTime@pTm,w,c
 10762  002214  26D9               	addwf	fsr2l,f,c
 10763  002216  5002               	movf	RtccWriteTime@pTm+1,w,c
 10764  002218  22DA               	addwfc	fsr2h,f,c
 10765  00221A  0E5A               	movlw	90
 10766  00221C  60DF               	cpfslt	indf2,c
 10767  00221E  0012               	return	
 10768  002220  EE20 F003          	lfsr	2,3
 10769  002224  5001               	movf	RtccWriteTime@pTm,w,c
 10770  002226  26D9               	addwf	fsr2l,f,c
 10771  002228  5002               	movf	RtccWriteTime@pTm+1,w,c
 10772  00222A  22DA               	addwfc	fsr2h,f,c
 10773  00222C  0E24               	movlw	36
 10774  00222E  64DF               	cpfsgt	indf2,c
 10775  002230  D002               	goto	l4543
 10776  002232  0012               	return	
 10777                           
 10778                           ;	Return value of _RtccWriteTime is never used
 10779  002234  0012               	return	
 10780  002236                     l4543:
 10781  002236  EE20 F002          	lfsr	2,2
 10782  00223A  5001               	movf	RtccWriteTime@pTm,w,c
 10783  00223C  26D9               	addwf	fsr2l,f,c
 10784  00223E  5002               	movf	RtccWriteTime@pTm+1,w,c
 10785  002240  22DA               	addwfc	fsr2h,f,c
 10786  002242  50DF               	movf	indf2,w,c
 10787  002244  6E09               	movwf	RtccWriteTime@tempMinSec+1,c
 10788  002246  EE20 F001          	lfsr	2,1
 10789  00224A  5001               	movf	RtccWriteTime@pTm,w,c
 10790  00224C  26D9               	addwf	fsr2l,f,c
 10791  00224E  5002               	movf	RtccWriteTime@pTm+1,w,c
 10792  002250  22DA               	addwfc	fsr2h,f,c
 10793  002252  50DF               	movf	indf2,w,c
 10794  002254  6E08               	movwf	RtccWriteTime@tempMinSec,c
 10795  002256  5003               	movf	RtccWriteTime@di,w,c
 10796  002258  B4D8               	btfsc	status,2,c
 10797  00225A  D002               	goto	l4549
 10798  00225C  9CF2               	bcf	intcon,6,c	;volatile
 10799  00225E  D000               	goto	l4549
 10800  002260                     l4549:
 10801  002260  0E00               	movlw	0
 10802  002262  BB3F               	btfsc	63,5,b	;volatile
 10803  002264  0E01               	movlw	1
 10804  002266  6E07               	movwf	RtccWriteTime@wasWrEn,c
 10805  002268  5007               	movf	RtccWriteTime@wasWrEn,w,c
 10806  00226A  A4D8               	btfss	status,2,c
 10807  00226C  D003               	goto	l4553
 10808  00226E  EC35  F01C         	call	_RtccWrOn	;wreg free
 10809  002272  D000               	goto	l4553
 10810  002274                     l4553:
 10811  002274  0E00               	movlw	0
 10812  002276  BF3F               	btfsc	63,7,b	;volatile
 10813  002278  0E01               	movlw	1
 10814  00227A  6E05               	movwf	RtccWriteTime@wasOn,c
 10815  00227C  5005               	movf	RtccWriteTime@wasOn,w,c
 10816  00227E  B4D8               	btfsc	status,2,c
 10817  002280  D007               	goto	l4559
 10818  002282  0E00               	movlw	0
 10819  002284  BE91               	btfsc	3985,7,c	;volatile
 10820  002286  0E01               	movlw	1
 10821  002288  6E06               	movwf	RtccWriteTime@wasAlrm,c
 10822  00228A  010F               	movlb	15	; () banked
 10823  00228C  9F3F               	bcf	63,7,b	;volatile
 10824  00228E  D000               	goto	l4559
 10825  002290                     l4559:
 10826  002290  0EFC               	movlw	252
 10827  002292  010F               	movlb	15	; () banked
 10828  002294  173F               	andwf	63,f,b	;volatile
 10829  002296  010F               	movlb	15	; () banked
 10830  002298  813F               	bsf	63,0,b	;volatile
 10831                           
 10832                           ; BSR set to: 15
 10833  00229A  CF98 F00A          	movff	3992,RtccWriteTime@tempHourWDay	;volatile
 10834                           
 10835                           ; BSR set to: 15
 10836  00229E  CF99 F00B          	movff	3993,RtccWriteTime@tempHourWDay+1	;volatile
 10837                           
 10838                           ; BSR set to: 15
 10839  0022A2  EE20 F003          	lfsr	2,3
 10840  0022A6  5001               	movf	RtccWriteTime@pTm,w,c
 10841  0022A8  26D9               	addwf	fsr2l,f,c
 10842  0022AA  5002               	movf	RtccWriteTime@pTm+1,w,c
 10843  0022AC  22DA               	addwfc	fsr2h,f,c
 10844  0022AE  50DF               	movf	indf2,w,c
 10845  0022B0  6E0A               	movwf	RtccWriteTime@tempHourWDay,c
 10846                           
 10847                           ; BSR set to: 15
 10848  0022B2  0EFC               	movlw	252
 10849  0022B4  010F               	movlb	15	; () banked
 10850  0022B6  173F               	andwf	63,f,b	;volatile
 10851                           
 10852                           ; BSR set to: 15
 10853  0022B8  010F               	movlb	15	; () banked
 10854  0022BA  813F               	bsf	63,0,b	;volatile
 10855                           
 10856                           ; BSR set to: 15
 10857  0022BC  C00A  FF98         	movff	RtccWriteTime@tempHourWDay,3992	;volatile
 10858                           
 10859                           ; BSR set to: 15
 10860  0022C0  C00B  FF99         	movff	RtccWriteTime@tempHourWDay+1,3993	;volatile
 10861                           
 10862                           ; BSR set to: 15
 10863  0022C4  C008  FF98         	movff	RtccWriteTime@tempMinSec,3992	;volatile
 10864                           
 10865                           ; BSR set to: 15
 10866  0022C8  C009  FF99         	movff	RtccWriteTime@tempMinSec+1,3993	;volatile
 10867                           
 10868                           ; BSR set to: 15
 10869  0022CC  5005               	movf	RtccWriteTime@wasOn,w,c
 10870  0022CE  B4D8               	btfsc	status,2,c
 10871  0022D0  D00D               	goto	l4591
 10872                           
 10873                           ; BSR set to: 15
 10874  0022D2  010F               	movlb	15	; () banked
 10875  0022D4  8F3F               	bsf	63,7,b	;volatile
 10876                           
 10877                           ; BSR set to: 15
 10878  0022D6  5006               	movf	RtccWriteTime@wasAlrm,w,c
 10879  0022D8  B4D8               	btfsc	status,2,c
 10880  0022DA  D002               	goto	l4587
 10881                           
 10882                           ; BSR set to: 15
 10883  0022DC  8E91               	bsf	3985,7,c	;volatile
 10884  0022DE  D000               	goto	l4587
 10885  0022E0                     l4587:
 10886                           
 10887                           ; BSR set to: 15
 10888  0022E0  5007               	movf	RtccWriteTime@wasWrEn,w,c
 10889  0022E2  B4D8               	btfsc	status,2,c
 10890  0022E4  D009               	goto	l4595
 10891                           
 10892                           ; BSR set to: 15
 10893  0022E6  EC35  F01C         	call	_RtccWrOn	;wreg free
 10894  0022EA  D006               	goto	l4595
 10895  0022EC                     l4591:
 10896  0022EC  5007               	movf	RtccWriteTime@wasWrEn,w,c
 10897  0022EE  A4D8               	btfss	status,2,c
 10898  0022F0  D003               	goto	l4595
 10899  0022F2  010F               	movlb	15	; () banked
 10900  0022F4  9B3F               	bcf	63,5,b	;volatile
 10901                           
 10902                           ; BSR set to: 15
 10903  0022F6  D000               	goto	l4595
 10904  0022F8                     l4595:
 10905  0022F8  5003               	movf	RtccWriteTime@di,w,c
 10906  0022FA  B4D8               	btfsc	status,2,c
 10907  0022FC  0012               	return	
 10908  0022FE  8CF2               	bsf	intcon,6,c	;volatile
 10909  002300  0012               	return	
 10910                           
 10911                           ;	Return value of _RtccWriteTime is never used
 10912  002302  0012               	return		;funcret
 10913  002304                     __end_of_RtccWriteTime:
 10914                           	opt stack 0
 10915                           tblptru	equ	0xFF8
 10916                           tblptrh	equ	0xFF7
 10917                           tblptrl	equ	0xFF6
 10918                           tablat	equ	0xFF5
 10919                           prodh	equ	0xFF4
 10920                           prodl	equ	0xFF3
 10921                           intcon	equ	0xFF2
 10922                           indf0	equ	0xFEF
 10923                           postinc0	equ	0xFEE
 10924                           fsr0h	equ	0xFEA
 10925                           fsr0l	equ	0xFE9
 10926                           wreg	equ	0xFE8
 10927                           postdec1	equ	0xFE5
 10928                           fsr1l	equ	0xFE1
 10929                           indf2	equ	0xFDF
 10930                           postinc2	equ	0xFDE
 10931                           postdec2	equ	0xFDD
 10932                           fsr2h	equ	0xFDA
 10933                           fsr2l	equ	0xFD9
 10934                           status	equ	0xFD8
 10935                           
 10936 ;; *************** function _RtccWriteDate *****************
 10937 ;; Defined at:
 10938 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteDate.c"
 10939 ;; Parameters:    Size  Location     Type
 10940 ;;  pDt             2    0[COMRAM] PTR const struct .
 10941 ;;		 -> RtccDate(4), 
 10942 ;;  di              1    2[COMRAM] enum E7121
 10943 ;; Auto vars:     Size  Location     Type
 10944 ;;  tempHourWDay    2   11[COMRAM] struct .
 10945 ;;  tempDayMonth    2    9[COMRAM] struct .
 10946 ;;  tempYear        2    6[COMRAM] struct .
 10947 ;;  wasWrEn         1    8[COMRAM] enum E7121
 10948 ;;  wasAlrm         1    5[COMRAM] enum E7121
 10949 ;;  wasOn           1    4[COMRAM] enum E7121
 10950 ;; Return value:  Size  Location     Type
 10951 ;;                  1    wreg      enum E7121
 10952 ;; Registers used:
 10953 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10954 ;; Tracked objects:
 10955 ;;		On entry : 0/0
 10956 ;;		On exit  : 0/0
 10957 ;;		Unchanged: 0/0
 10958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10959 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10960 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10961 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10962 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10963 ;;Total ram usage:       13 bytes
 10964 ;; Hardware stack levels used:    1
 10965 ;; Hardware stack levels required when called:    1
 10966 ;; This function calls:
 10967 ;;		_RtccWrOn
 10968 ;; This function is called by:
 10969 ;;		_Write_RTC
 10970 ;; This function uses a non-reentrant model
 10971 ;;
 10972                           
 10973                           	psect	text69
 10974  001E58                     __ptext69:
 10975                           	opt stack 0
 10976  001E58                     _RtccWriteDate:
 10977                           	opt stack 27
 10978                           
 10979                           ;incstack = 0
 10980  001E58  0E00               	movlw	0
 10981  001E5A  6E06               	movwf	RtccWriteDate@wasAlrm,c
 10982  001E5C  EE20 F002          	lfsr	2,2
 10983  001E60  5001               	movf	RtccWriteDate@pDt,w,c
 10984  001E62  26D9               	addwf	fsr2l,f,c
 10985  001E64  5002               	movf	RtccWriteDate@pDt+1,w,c
 10986  001E66  22DA               	addwfc	fsr2h,f,c
 10987  001E68  0E13               	movlw	19
 10988  001E6A  60DF               	cpfslt	indf2,c
 10989  001E6C  0012               	return	
 10990  001E6E  EE20 F002          	lfsr	2,2
 10991  001E72  5001               	movf	RtccWriteDate@pDt,w,c
 10992  001E74  26D9               	addwf	fsr2l,f,c
 10993  001E76  5002               	movf	RtccWriteDate@pDt+1,w,c
 10994  001E78  22DA               	addwfc	fsr2h,f,c
 10995  001E7A  50DF               	movf	indf2,w,c
 10996  001E7C  B4D8               	btfsc	status,2,c
 10997  001E7E  0012               	return	
 10998  001E80  EE20 F001          	lfsr	2,1
 10999  001E84  5001               	movf	RtccWriteDate@pDt,w,c
 11000  001E86  26D9               	addwf	fsr2l,f,c
 11001  001E88  5002               	movf	RtccWriteDate@pDt+1,w,c
 11002  001E8A  22DA               	addwfc	fsr2h,f,c
 11003  001E8C  0E32               	movlw	50
 11004  001E8E  60DF               	cpfslt	indf2,c
 11005  001E90  0012               	return	
 11006  001E92  EE20 F001          	lfsr	2,1
 11007  001E96  5001               	movf	RtccWriteDate@pDt,w,c
 11008  001E98  26D9               	addwf	fsr2l,f,c
 11009  001E9A  5002               	movf	RtccWriteDate@pDt+1,w,c
 11010  001E9C  22DA               	addwfc	fsr2h,f,c
 11011  001E9E  50DF               	movf	indf2,w,c
 11012  001EA0  B4D8               	btfsc	status,2,c
 11013  001EA2  0012               	return	
 11014  001EA4  EE20 F003          	lfsr	2,3
 11015  001EA8  5001               	movf	RtccWriteDate@pDt,w,c
 11016  001EAA  26D9               	addwf	fsr2l,f,c
 11017  001EAC  5002               	movf	RtccWriteDate@pDt+1,w,c
 11018  001EAE  22DA               	addwfc	fsr2h,f,c
 11019  001EB0  0E99               	movlw	153
 11020  001EB2  64DF               	cpfsgt	indf2,c
 11021  001EB4  D002               	goto	l4611
 11022  001EB6  0012               	return	
 11023                           
 11024                           ;	Return value of _RtccWriteDate is never used
 11025  001EB8  0012               	return	
 11026  001EBA                     l4611:
 11027  001EBA  EE20 F003          	lfsr	2,3
 11028  001EBE  5001               	movf	RtccWriteDate@pDt,w,c
 11029  001EC0  26D9               	addwf	fsr2l,f,c
 11030  001EC2  5002               	movf	RtccWriteDate@pDt+1,w,c
 11031  001EC4  22DA               	addwfc	fsr2h,f,c
 11032  001EC6  50DF               	movf	indf2,w,c
 11033  001EC8  6E07               	movwf	RtccWriteDate@tempYear,c
 11034  001ECA  EE20 F001          	lfsr	2,1
 11035  001ECE  5001               	movf	RtccWriteDate@pDt,w,c
 11036  001ED0  26D9               	addwf	fsr2l,f,c
 11037  001ED2  5002               	movf	RtccWriteDate@pDt+1,w,c
 11038  001ED4  22DA               	addwfc	fsr2h,f,c
 11039  001ED6  50DF               	movf	indf2,w,c
 11040  001ED8  6E0A               	movwf	RtccWriteDate@tempDayMonth,c
 11041  001EDA  EE20 F002          	lfsr	2,2
 11042  001EDE  5001               	movf	RtccWriteDate@pDt,w,c
 11043  001EE0  26D9               	addwf	fsr2l,f,c
 11044  001EE2  5002               	movf	RtccWriteDate@pDt+1,w,c
 11045  001EE4  22DA               	addwfc	fsr2h,f,c
 11046  001EE6  50DF               	movf	indf2,w,c
 11047  001EE8  6E0B               	movwf	RtccWriteDate@tempDayMonth+1,c
 11048  001EEA  5003               	movf	RtccWriteDate@di,w,c
 11049  001EEC  B4D8               	btfsc	status,2,c
 11050  001EEE  D002               	goto	l4617
 11051  001EF0  9CF2               	bcf	intcon,6,c	;volatile
 11052  001EF2  D000               	goto	l4617
 11053  001EF4                     l4617:
 11054  001EF4  0E00               	movlw	0
 11055  001EF6  BB3F               	btfsc	63,5,b	;volatile
 11056  001EF8  0E01               	movlw	1
 11057  001EFA  6E09               	movwf	RtccWriteDate@wasWrEn,c
 11058  001EFC  5009               	movf	RtccWriteDate@wasWrEn,w,c
 11059  001EFE  A4D8               	btfss	status,2,c
 11060  001F00  D003               	goto	l4621
 11061  001F02  EC35  F01C         	call	_RtccWrOn	;wreg free
 11062  001F06  D000               	goto	l4621
 11063  001F08                     l4621:
 11064  001F08  0E00               	movlw	0
 11065  001F0A  BF3F               	btfsc	63,7,b	;volatile
 11066  001F0C  0E01               	movlw	1
 11067  001F0E  6E05               	movwf	RtccWriteDate@wasOn,c
 11068  001F10  5005               	movf	RtccWriteDate@wasOn,w,c
 11069  001F12  B4D8               	btfsc	status,2,c
 11070  001F14  D007               	goto	l4627
 11071  001F16  0E00               	movlw	0
 11072  001F18  BE91               	btfsc	3985,7,c	;volatile
 11073  001F1A  0E01               	movlw	1
 11074  001F1C  6E06               	movwf	RtccWriteDate@wasAlrm,c
 11075  001F1E  010F               	movlb	15	; () banked
 11076  001F20  9F3F               	bcf	63,7,b	;volatile
 11077  001F22  D000               	goto	l4627
 11078  001F24                     l4627:
 11079  001F24  0EFC               	movlw	252
 11080  001F26  010F               	movlb	15	; () banked
 11081  001F28  173F               	andwf	63,f,b	;volatile
 11082  001F2A  010F               	movlb	15	; () banked
 11083  001F2C  813F               	bsf	63,0,b	;volatile
 11084                           
 11085                           ; BSR set to: 15
 11086  001F2E  CF98 F00C          	movff	3992,RtccWriteDate@tempHourWDay	;volatile
 11087                           
 11088                           ; BSR set to: 15
 11089  001F32  CF99 F00D          	movff	3993,RtccWriteDate@tempHourWDay+1	;volatile
 11090                           
 11091                           ; BSR set to: 15
 11092  001F36  C001  FFD9         	movff	RtccWriteDate@pDt,fsr2l
 11093  001F3A  C002  FFDA         	movff	RtccWriteDate@pDt+1,fsr2h
 11094  001F3E  50DF               	movf	indf2,w,c
 11095  001F40  6E0D               	movwf	RtccWriteDate@tempHourWDay+1,c
 11096                           
 11097                           ; BSR set to: 15
 11098  001F42  0EFC               	movlw	252
 11099  001F44  010F               	movlb	15	; () banked
 11100  001F46  173F               	andwf	63,f,b	;volatile
 11101                           
 11102                           ; BSR set to: 15
 11103  001F48  0E03               	movlw	3
 11104  001F4A  010F               	movlb	15	; () banked
 11105  001F4C  133F               	iorwf	63,f,b	;volatile
 11106                           
 11107                           ; BSR set to: 15
 11108  001F4E  C007  FF98         	movff	RtccWriteDate@tempYear,3992	;volatile
 11109                           
 11110                           ; BSR set to: 15
 11111  001F52  C008  FF99         	movff	RtccWriteDate@tempYear+1,3993	;volatile
 11112                           
 11113                           ; BSR set to: 15
 11114  001F56  C00A  FF98         	movff	RtccWriteDate@tempDayMonth,3992	;volatile
 11115                           
 11116                           ; BSR set to: 15
 11117  001F5A  C00B  FF99         	movff	RtccWriteDate@tempDayMonth+1,3993	;volatile
 11118                           
 11119                           ; BSR set to: 15
 11120  001F5E  C00C  FF98         	movff	RtccWriteDate@tempHourWDay,3992	;volatile
 11121                           
 11122                           ; BSR set to: 15
 11123  001F62  C00D  FF99         	movff	RtccWriteDate@tempHourWDay+1,3993	;volatile
 11124                           
 11125                           ; BSR set to: 15
 11126  001F66  5005               	movf	RtccWriteDate@wasOn,w,c
 11127  001F68  B4D8               	btfsc	status,2,c
 11128  001F6A  D00D               	goto	l4663
 11129                           
 11130                           ; BSR set to: 15
 11131  001F6C  010F               	movlb	15	; () banked
 11132  001F6E  8F3F               	bsf	63,7,b	;volatile
 11133                           
 11134                           ; BSR set to: 15
 11135  001F70  5006               	movf	RtccWriteDate@wasAlrm,w,c
 11136  001F72  B4D8               	btfsc	status,2,c
 11137  001F74  D002               	goto	l4659
 11138                           
 11139                           ; BSR set to: 15
 11140  001F76  8E91               	bsf	3985,7,c	;volatile
 11141  001F78  D000               	goto	l4659
 11142  001F7A                     l4659:
 11143                           
 11144                           ; BSR set to: 15
 11145  001F7A  5009               	movf	RtccWriteDate@wasWrEn,w,c
 11146  001F7C  B4D8               	btfsc	status,2,c
 11147  001F7E  D009               	goto	l4667
 11148                           
 11149                           ; BSR set to: 15
 11150  001F80  EC35  F01C         	call	_RtccWrOn	;wreg free
 11151  001F84  D006               	goto	l4667
 11152  001F86                     l4663:
 11153  001F86  5009               	movf	RtccWriteDate@wasWrEn,w,c
 11154  001F88  A4D8               	btfss	status,2,c
 11155  001F8A  D003               	goto	l4667
 11156  001F8C  010F               	movlb	15	; () banked
 11157  001F8E  9B3F               	bcf	63,5,b	;volatile
 11158                           
 11159                           ; BSR set to: 15
 11160  001F90  D000               	goto	l4667
 11161  001F92                     l4667:
 11162  001F92  5003               	movf	RtccWriteDate@di,w,c
 11163  001F94  B4D8               	btfsc	status,2,c
 11164  001F96  0012               	return	
 11165  001F98  9CF2               	bcf	intcon,6,c	;volatile
 11166  001F9A  0012               	return	
 11167                           
 11168                           ;	Return value of _RtccWriteDate is never used
 11169  001F9C  0012               	return		;funcret
 11170  001F9E                     __end_of_RtccWriteDate:
 11171                           	opt stack 0
 11172                           tblptru	equ	0xFF8
 11173                           tblptrh	equ	0xFF7
 11174                           tblptrl	equ	0xFF6
 11175                           tablat	equ	0xFF5
 11176                           prodh	equ	0xFF4
 11177                           prodl	equ	0xFF3
 11178                           intcon	equ	0xFF2
 11179                           indf0	equ	0xFEF
 11180                           postinc0	equ	0xFEE
 11181                           fsr0h	equ	0xFEA
 11182                           fsr0l	equ	0xFE9
 11183                           wreg	equ	0xFE8
 11184                           postdec1	equ	0xFE5
 11185                           fsr1l	equ	0xFE1
 11186                           indf2	equ	0xFDF
 11187                           postinc2	equ	0xFDE
 11188                           postdec2	equ	0xFDD
 11189                           fsr2h	equ	0xFDA
 11190                           fsr2l	equ	0xFD9
 11191                           status	equ	0xFD8
 11192                           
 11193 ;; *************** function _RtccWrOn *****************
 11194 ;; Defined at:
 11195 ;;		line 21 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWrOn.c"
 11196 ;; Parameters:    Size  Location     Type
 11197 ;;		None
 11198 ;; Auto vars:     Size  Location     Type
 11199 ;;  data            2    0        unsigned int 
 11200 ;; Return value:  Size  Location     Type
 11201 ;;		None               void
 11202 ;; Registers used:
 11203 ;;		wreg, status,2
 11204 ;; Tracked objects:
 11205 ;;		On entry : 0/0
 11206 ;;		On exit  : 0/0
 11207 ;;		Unchanged: 0/0
 11208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11210 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11212 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11213 ;;Total ram usage:        0 bytes
 11214 ;; Hardware stack levels used:    1
 11215 ;; This function calls:
 11216 ;;		Nothing
 11217 ;; This function is called by:
 11218 ;;		_Write_RTC
 11219 ;;		_RtccWriteDate
 11220 ;;		_RtccWriteTime
 11221 ;; This function uses a non-reentrant model
 11222 ;;
 11223                           
 11224                           	psect	text70
 11225  00386A                     __ptext70:
 11226                           	opt stack 0
 11227  00386A                     _RtccWrOn:
 11228                           	opt stack 27
 11229                           
 11230                           ;incstack = 0
 11231  00386A  9CF2               	bcf	intcon,6,c	;volatile
 11232  00386C  0E55               	movlw	85
 11233  00386E  6EA7               	movwf	4007,c	;volatile
 11234  003870  0EAA               	movlw	170
 11235  003872  6EA7               	movwf	4007,c	;volatile
 11236  003874  010F               	movlb	15	; () banked
 11237  003876  8B3F               	bsf	63,5,b	;volatile
 11238                           
 11239                           ; BSR set to: 15
 11240  003878  8CF2               	bsf	intcon,6,c	;volatile
 11241                           
 11242                           ; BSR set to: 15
 11243  00387A  0012               	return		;funcret
 11244  00387C                     __end_of_RtccWrOn:
 11245                           	opt stack 0
 11246                           tblptru	equ	0xFF8
 11247                           tblptrh	equ	0xFF7
 11248                           tblptrl	equ	0xFF6
 11249                           tablat	equ	0xFF5
 11250                           prodh	equ	0xFF4
 11251                           prodl	equ	0xFF3
 11252                           intcon	equ	0xFF2
 11253                           indf0	equ	0xFEF
 11254                           postinc0	equ	0xFEE
 11255                           fsr0h	equ	0xFEA
 11256                           fsr0l	equ	0xFE9
 11257                           wreg	equ	0xFE8
 11258                           postdec1	equ	0xFE5
 11259                           fsr1l	equ	0xFE1
 11260                           indf2	equ	0xFDF
 11261                           postinc2	equ	0xFDE
 11262                           postdec2	equ	0xFDD
 11263                           fsr2h	equ	0xFDA
 11264                           fsr2l	equ	0xFD9
 11265                           status	equ	0xFD8
 11266                           tblptru	equ	0xFF8
 11267                           tblptrh	equ	0xFF7
 11268                           tblptrl	equ	0xFF6
 11269                           tablat	equ	0xFF5
 11270                           prodh	equ	0xFF4
 11271                           prodl	equ	0xFF3
 11272                           intcon	equ	0xFF2
 11273                           indf0	equ	0xFEF
 11274                           postinc0	equ	0xFEE
 11275                           fsr0h	equ	0xFEA
 11276                           fsr0l	equ	0xFE9
 11277                           wreg	equ	0xFE8
 11278                           postdec1	equ	0xFE5
 11279                           fsr1l	equ	0xFE1
 11280                           indf2	equ	0xFDF
 11281                           postinc2	equ	0xFDE
 11282                           postdec2	equ	0xFDD
 11283                           fsr2h	equ	0xFDA
 11284                           fsr2l	equ	0xFD9
 11285                           status	equ	0xFD8
 11286                           
 11287                           	psect	rparam
 11288  0000                     tblptru	equ	0xFF8
 11289                           tblptrh	equ	0xFF7
 11290                           tblptrl	equ	0xFF6
 11291                           tablat	equ	0xFF5
 11292                           prodh	equ	0xFF4
 11293                           prodl	equ	0xFF3
 11294                           intcon	equ	0xFF2
 11295                           indf0	equ	0xFEF
 11296                           postinc0	equ	0xFEE
 11297                           fsr0h	equ	0xFEA
 11298                           fsr0l	equ	0xFE9
 11299                           wreg	equ	0xFE8
 11300                           postdec1	equ	0xFE5
 11301                           fsr1l	equ	0xFE1
 11302                           indf2	equ	0xFDF
 11303                           postinc2	equ	0xFDE
 11304                           postdec2	equ	0xFDD
 11305                           fsr2h	equ	0xFDA
 11306                           fsr2l	equ	0xFD9
 11307                           status	equ	0xFD8


Data Sizes:
    Strings     154
    Constant    71
    Data        17
    BSS         83
    Persistent  13
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160     22     136
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    RtccWriteTime@pTm	PTR const struct . size(2) Largest target is 4
		 -> RtccTime(BANK0[4]), 

    RtccWriteDate@pDt	PTR const struct . size(2) Largest target is 4
		 -> RtccDate(BANK0[4]), 

    RtccReadTime@pTm	PTR struct . size(2) Largest target is 4
		 -> RtccTime(BANK0[4]), 

    RtccReadDate@pDt	PTR struct . size(2) Largest target is 4
		 -> RtccDate(BANK0[4]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_30(CODE[10]), STR_28(CODE[10]), STR_26(CODE[5]), STR_12(CODE[10]), 
		 -> STR_11(CODE[15]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), 
		 -> STR_7(CODE[5]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), 
		 -> STR_3(CODE[5]), STR_2(CODE[5]), STR_1(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> buffer2(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    obtain_pass@digit	PTR short  size(2) Largest target is 2
		 -> input_password@digit(BANK0[2]), 

    next_code@input	PTR unsigned char  size(2) Largest target is 1
		 -> obtain_pass@input(COMRAM[1]), 

    next_code@digit	PTR short  size(2) Largest target is 2
		 -> input_password@digit(BANK0[2]), 

    lcd_putrs@ptr	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_29(CODE[2]), STR_27(CODE[6]), STR_25(CODE[9]), STR_24(CODE[14]), 
		 -> STR_23(CODE[14]), STR_22(CODE[16]), STR_21(CODE[15]), STR_20(CODE[8]), 
		 -> STR_19(CODE[13]), STR_18(CODE[8]), STR_17(CODE[4]), STR_16(CODE[3]), 
		 -> STR_15(CODE[10]), STR_14(CODE[11]), STR_13(CODE[11]), buffer2(BANK0[20]), 


Critical Paths under _main in COMRAM

    _write_Date->_sprintf
    _twinkle->_read_keyboard
    _input_password->_obtain_pass
    _set_desactive_vision->_lcd_putrs
    _lcd_setcursor_vb->_lcd_send_byte
    _review_code->_checkPass
    _obtain_pass->_pow
    _next_code->_lcd_gotoxy
    _select_menu->_ver_opcion_cambio
    _ver_opcion_cambio->_input_new_pass
    _ver_opcion_cambio->_input_old_pass
    _show_success->__delay_s
    _show_error->__delay_s
    _input_old_pass->_pow
    _input_new_pass->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftadd
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___awtoft
    ___ftmul->___lbtoft
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    __delay_s->___awdiv
    ___lbtoft->___ftpack
    _ver_info->_read_keyboard
    _read_keyboard->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcd_putrs->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _clear->_lcd_comand
    _Read_RTC->_RtccReadDate
    _Read_RTC->_RtccReadTime
    _caratula->_lcd_comand
    _lcd_init->_lcd_send_byte
    _lcd_comand->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _Write_RTC->_RtccWriteDate

Critical Paths under _main in BANK0

    _set_vision->_input_password
    _input_password->_obtain_pass
    _obtain_pass->_pow
    _ver_opcion_cambio->_input_old_pass
    _input_old_pass->_pow
    _input_new_pass->_pow

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  376525
                                             94 COMRAM     1     1      0
                           _Read_RTC
                              _Setup
                           _caratula
                        _select_menu
                         _set_vision
 ---------------------------------------------------------------------------------
 (1) _set_vision                                           0     0      0  130319
                              _clear
                     _input_password
                         _lcd_gotoxy
                          _lcd_putrs
                            _twinkle
                         _write_Date
 ---------------------------------------------------------------------------------
 (2) _write_Date                                           0     0      0   10543
                         _lcd_gotoxy
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _twinkle                                              1     1      0   16887
                                             36 COMRAM     1     1      0
                           __delay_s
                     _clear_keyboard
                         _lcd_gotoxy
                          _lcd_putrs
                      _read_keyboard
 ---------------------------------------------------------------------------------
 (2) _input_password                                       5     5      0   95536
                                             17 BANK0      5     5      0
                      _is_not_letter
                      _not_fill_pass
                        _obtain_pass
                      _read_keyboard
                        _review_code
               _set_desactive_vision
 ---------------------------------------------------------------------------------
 (3) _set_desactive_vision                                 2     0      2    7589
                                             10 COMRAM     2     0      2
                         _lcd_gotoxy
                          _lcd_putrs
                   _lcd_setcursor_vb
 ---------------------------------------------------------------------------------
 (4) _lcd_setcursor_vb                                     2     1      1     796
                                              4 COMRAM     2     1      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (3) _review_code                                          4     0      4     322
                                              2 COMRAM     4     0      4
                       _change_state
                          _checkPass
 ---------------------------------------------------------------------------------
 (4) _change_state                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _obtain_pass                                         13     8      5   78607
                                             87 COMRAM     7     2      5
                                             11 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                           ___lbtoft
                          _next_code
                                _pow
 ---------------------------------------------------------------------------------
 (4) _next_code                                            6     2      4    2253
                                              7 COMRAM     6     2      4
                     _clear_keyboard
                         _lcd_gotoxy
 ---------------------------------------------------------------------------------
 (3) _is_not_letter                                        2     2      0     112
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _select_menu                                          0     0      0  240700
                   _configurar_reloj
                     _dispararSensor
                      _read_keyboard
                           _ver_info
                  _ver_opcion_cambio
 ---------------------------------------------------------------------------------
 (2) _ver_opcion_cambio                                    2     2      0  211293
                                             89 COMRAM     2     2      0
                         _changePass
                              _clear
                     _input_new_pass
                     _input_old_pass
                         _lcd_gotoxy
                          _lcd_putrs
                      _read_keyboard
                         _show_error
                       _show_success
 ---------------------------------------------------------------------------------
 (3) _show_success                                         0     0      0    9003
                           __delay_s
                              _clear
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (3) _show_error                                           0     0      0    9003
                           __delay_s
                              _clear
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (3) _input_old_pass                                      13    13      0   88745
                                             87 COMRAM     2     2      0
                                             11 BANK0     11    11      0
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                           ___lbtoft
                           __delay_s
                          _checkPass
                     _clear_keyboard
                         _lcd_gotoxy
                      _not_fill_pass
                                _pow
                      _read_keyboard
 ---------------------------------------------------------------------------------
 (4) _checkPass                                            2     0      2     150
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _input_new_pass                                      11    11      0   88549
                                             87 COMRAM     2     2      0
                                             11 BANK0      9     9      0
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                           ___lbtoft
                           __delay_s
                     _clear_keyboard
                         _lcd_gotoxy
                      _not_fill_pass
                                _pow
                      _read_keyboard
 ---------------------------------------------------------------------------------
 (4) _pow                                                 17    11      6   62408
                                             81 COMRAM     6     0      6
                                              0 BANK0     11    11      0
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (5) _log                                                  5     2      3   20443
                                             51 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _exp                                                  9     6      3   33640
                                             72 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (6) _ldexp                                                7     2      5     376
                                             51 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (6) _floor                                                8     5      3    8621
                                             64 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _frexp                                                7     2      5     480
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             15    11      4     636
                                             39 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftge                                               9     3      6     648
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (7) ___altoft                                            10     6      4    2389
                                             54 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (6) _eval_poly                                           12     5      7    8999
                                             39 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             15     9      6    3741
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftsub                                              6     0      6    4450
                                             39 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             12     6      6    4153
                                             27 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftneg                                              3     0      3     237
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             15     9      6    2697
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             4     1      3    2790
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___lltoft                                             9     5      4    2320
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _not_fill_pass                                        2     0      2     214
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _clear_keyboard                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) __delay_s                                             7     5      2    1650
                                              8 COMRAM     7     5      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___lbtoft                                             4     1      3    2209
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2187
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) _changePass                                           2     0      2      86
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ver_info                                             1     1      0   19719
                                             36 COMRAM     1     1      0
                              _clear
                         _lcd_gotoxy
                          _lcd_putrs
                      _read_keyboard
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _read_keyboard                                        1     1      0    8506
                                             35 COMRAM     1     1      0
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             32    22     10    3836
                                             12 COMRAM    23    13     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     543
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcd_putrs                                            2     0      2    4670
                                              8 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (4) _lcd_putc                                             1     1      0    2705
                                              7 COMRAM     1     1      0
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (5) _lcd_gotoxy                                           3     2      1    2037
                                              4 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (2) _clear                                                1     1      0     646
                                              5 COMRAM     1     1      0
                         _lcd_comand
 ---------------------------------------------------------------------------------
 (2) _dispararSensor                                       2     0      2    1182
                                             18 COMRAM     2     0      2
                           _Read_RTC
 ---------------------------------------------------------------------------------
 (3) _Read_RTC                                             0     0      0     968
                       _RtccReadDate
                       _RtccReadTime
 ---------------------------------------------------------------------------------
 (4) _RtccReadTime                                        18    16      2     437
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (4) _RtccReadDate                                        18    16      2     531
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (2) _configurar_reloj                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _caratula                                             0     0      0     646
                         _lcd_comand
 ---------------------------------------------------------------------------------
 (1) _Setup                                                0     0      0    3892
                          _Write_RTC
                         _lcd_comand
                           _lcd_init
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             1     1      0     841
                                              4 COMRAM     1     1      0
                        _Delay1KTCYx
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _lcd_comand                                           1     1      0     646
                                              4 COMRAM     1     1      0
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (5) _lcd_send_byte                                        2     1      1     624
                                              2 COMRAM     2     1      1
                       _Delay100TCYx
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (6) _lcd_send_nibble                                      2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _Delay100TCYx                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Write_RTC                                            0     0      0    2405
                           _RtccWrOn
                      _RtccWriteDate
                      _RtccWriteTime
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1196
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _RtccWriteTime                                       11     8      3     537
                                              0 COMRAM    11     8      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (3) _RtccWriteDate                                       13    10      3     672
                                              0 COMRAM    13    10      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (4) _RtccWrOn                                             2     2      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Read_RTC
     _RtccReadDate
     _RtccReadTime
   _Setup
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_init
       _Delay1KTCYx
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
       _lcd_send_nibble
   _caratula
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
   _select_menu
     _configurar_reloj
     _dispararSensor
       _Read_RTC
         _RtccReadDate
         _RtccReadTime
     _read_keyboard
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _ver_info
       _clear
         _lcd_comand
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _read_keyboard
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _ver_opcion_cambio
       _changePass
       _clear
         _lcd_comand
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _input_new_pass
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___lbtoft
           ___ftpack
         __delay_s
           ___awdiv
         _clear_keyboard
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _not_fill_pass
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
         _read_keyboard
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
       _input_old_pass
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___lbtoft
           ___ftpack
         __delay_s
           ___awdiv
         _checkPass
         _clear_keyboard
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _not_fill_pass
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
         _read_keyboard
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _read_keyboard
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _show_error
         __delay_s
           ___awdiv
         _clear
           _lcd_comand
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
       _show_success
         __delay_s
           ___awdiv
         _clear
           _lcd_comand
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
   _set_vision
     _clear
       _lcd_comand
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _input_password
       _is_not_letter
       _not_fill_pass
       _obtain_pass
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___lbtoft
           ___ftpack
         _next_code
           _clear_keyboard
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
       _read_keyboard
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _review_code
         _change_state
         _checkPass
       _set_desactive_vision
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _lcd_setcursor_vb
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _twinkle
       __delay_s
         ___awdiv
       _clear_keyboard
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _read_keyboard
         _lcd_putrs
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _write_Date
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       1       4        0.6%
BANK0               A0     16      88       5       85.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E7       6        0.0%
DATA                 0      0      E7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Sep 13 18:34:27 2016

                 ___altoft@exp 003F                              _a 007C                              _b 007E  
                            _c 0080                              _i 0088                              _j 008A  
                            _k 008C                 _input_old_pass 1BCA                 _input_new_pass 1F9E  
                ___altoft@sign 0040                    _state_alarm 00D9                 ?_lcd_send_byte 0003  
                 ___awdiv@sign 0006            ___wmul@multiplicand 0003                 _input_password 2D60  
                  lcd_comand@d 0005                   __CFG_CP0$OFF 000000                   ___ftadd@exp1 0027  
                 ___ftadd@exp2 0026                   ___ftadd@sign 0025                            l301 108E  
                          l310 10D8                            l302 108A                            l152 3610  
                          l153 3612                            l321 1158                            l313 1112  
                          l305 109E                            l330 11C8                            l322 1154  
                          l314 110E                            l306 109A                            l341 122A  
                          l333 1202                            l325 1196                            l317 1148  
                          l309 10DC                            l350 126C                            l342 1226  
                          l334 11FE                            l326 1192                            l318 1144  
                          l345 1260                            l337 1212                            l329 11CC  
                          l354 127C                            l346 125C                            l338 120E  
                          l349 1270                            l293 1022                            l605 3680  
                          l294 101E                            l297 1058                            l298 1054  
                          l598 332A                            l967 146E                            _dia 00CB  
              ?_dispararSensor 0013                            _key 00D7                            _mes 00D1  
                          _exp 1500                            _log 20D8                            _pow 1A48  
                          wreg 000FE8           __end_of_change_state 36E4                RtccReadDate@pDt 0001  
                  lcd_gotoxy@x 0006                    lcd_gotoxy@y 0005                   ___ftdiv@cntr 0012  
                 ___ftdiv@sign 0017                           l1407 2AE0                           l1440 1756  
                         l1611 32DE                           l4011 14C8                           l1451 1818  
                         l1460 1834                           l1436 172C                           l1621 3422  
                         l4005 1474                           l4013 14D4                           l4101 1518  
                         l4015 14F0                           l1471 26AA                           l4041 2C80  
                         l4033 2C60                           l4113 1588                           l4051 2CA6  
                         l4043 2C88                           l4027 2C4E                           l4107 1550  
                         l1493 3798                           l1653 1BBC                           l4039 2C76  
                         l4055 2CB2                           l4215 1284                           l4231 3316  
                         l4135 16B0                           l1672 15B6                           l1648 1A82  
                         l3425 385A                           l4065 3232                           l1673 16DA  
                         l4059 2CC2                           l3451 2A54                           l4067 3240  
                         l3523 173A                           l3611 248A                           l3507 3022  
                         l1683 27B0                           l4251 36C0                           l4309 30F2  
                         l3621 24B8                           l3509 3030                           l4085 2116  
                         l4253 36C8                           l4335 2DEE                           l3463 2AA8  
                         l3455 2A64                           l3551 17BC                           l3535 1770  
                         l3615 249C                           l4079 20F4                           l4271 1A90  
                         l4511 1FB8                           l4255 36D0                           l3721 343C  
                         l3473 2AE8                           l3465 2AC8                           l3457 2A70  
                         l3553 17C8                           l3545 1798                           l3529 1764  
                         l3625 24CA                           l3641 2C06                           l3705 2CF6  
                         l4249 36B8                           l4611 1EBA                           l3723 3448  
                         l3467 2AD4                           l3459 2A90                           l3571 1852  
                         l3563 1800                           l3555 17D4                           l3619 24B2  
                         l4531 20BA                           l4621 1F08                           l3725 3454  
                         l3821 32AC                           l3805 3594                           l3581 1884  
                         l3565 180C                           l3557 17DC                           l3629 24E0  
                         l3637 2BD4                           l4285 1B0C                           l4277 1AA8  
                         l4533 20C4                           l4445 25E8                           l4543 2236  
                         l2783 3848                           l3487 37B2                           l3719 3430  
                         l3831 32D2                           l3823 32B4                           l3479 2AFA  
                         l3591 242E                           l3647 2C32                           l3911 2934  
                         l4463 1BE4                           l4617 1EF4                           l4553 2274  
                         l3489 37B8                           l3729 3460                           l3921 3342  
                         l3841 33F8                           l3657 2330                           l3913 2960  
                         l4289 1B34                           l4801 2DC8                           l4627 1F24  
                         l4731 2F30                           l3819 32A2                           l3843 3400  
                         l3739 37E2                           l3931 12A6                           l3755 2644  
                         l3675 2398                           l3907 2924                           l4483 1CE6  
                         l4549 2260                           l3925 336C                           l3749 261C  
                         l3597 2456                           l3693 23F2                           l3685 23C2  
                         l3861 270E                           l4485 1CF0                           l4663 1F86  
                         l4591 22EC                           l4559 2290                           l4727 2F28  
                         l3847 3416                           l3839 33EE                           l3943 12D8  
                         l3775 2684                           l3687 23D0                           l3679 23A8  
                         l4911 2B22                           l4745 2F54                           l4737 2F40  
                         l3961 1376                           l3945 12EE                           l3937 12C0  
                         l3785 26B8                           l3793 34D6                           l3689 23DA  
                         l3865 271C                           l4921 2B58                           l4913 2B28  
                         l4667 1F92                           l4659 1F7A                           l4595 22F8  
                         l4587 22E0                           l3963 1398                           l3939 12CE  
                         l4843 27C6                           l4827 2ED2                           l4923 2B66  
                         l4915 2B2E                           ?_exp 0049                           l3981 13E8  
                         l3973 13C0                           l3957 1370                           l3949 130C  
                         l3877 29B0                           l3869 2736                           l4837 2EFA  
                         l4829 2EDA                           l4925 2B74                           l4909 2B1C  
                         l4917 2B46                           l4765 31CA                           ?_log 0034  
                         l3991 1422                           l4863 288C                           l3879 2A2E  
                         l3895 28FC                           l3887 28B4                           l4927 2B82  
                         l4943 3188                           l3985 140C                           l3977 13E4  
                         l3969 13B4                           l4929 2B9A                           l4785 321E  
                         l4937 3174                           l4961 3630                           l3987 1416  
                         l4795 2D8A                           l4955 31B2                           l3997 1444  
                         l4949 319C                           l3999 144C                           ?_pow 0052  
                         STR_1 0FD6                           STR_2 0FD6                           STR_3 0FD6  
                         STR_4 0FD6                           STR_5 0FD6                           STR_6 0FD6  
                         STR_7 0FD6                           STR_8 0FD6                           STR_9 0FD6  
                         u2310 30A0                           u3110 28D4                           u2330 30BA  
                         u2308 308A                           u2501 170C                           u2350 30D6  
                         u3150 3362                           u3070 2728                           u3118 28D6  
                         u2328 30A2                           u3160 338C                           u2290 3088  
                         u2348 30BC                           u3157 3358                           u2701 2416  
                         u3167 3382                           u2368 30D8                           u3440 1590  
                         u2721 243E                           u2810 234E                           u3450 1592  
                         u2491 16F8                           u2911 2604                           u2815 2346  
                         u2931 262C                           u3820 3840                           u3900 1AF4  
                         u4607 3814                           u2791 2314                           u2880 2D1E  
                         u3840 3802                           u4617 384A                           u4627 385C  
                         u2888 2D20                           u4577 3646                           u4587 331C  
                         u4597 128A               ?_lcd_send_nibble 0001                           _anio 00C9  
                         _flag 0738                           _main 3626                           _hora 00CF  
                 ___ftpack@arg 0001                           _menu 00D8                   ___ftpack@exp 0004  
                         fsr0h 000FEA                           indf0 000FEF                           fsr0l 000FE9  
                         fsr2h 000FDA                           fsr1l 000FE1                           indf2 000FDF  
                         fsr2l 000FD9                           exp@x 0049                           log@x 0034  
                __CFG_T1DIG$ON 000000                           pow@x 0052                           pow@y 0055  
                         prodh 000FF4                           prodl 000FF3                           start 0000  
                __CFG_IESO$OFF 000000               RtccReadDate@rTD0 000B               RtccReadDate@rTD1 0003  
                ver_info@input 0025                   ___ftmul@cntr 001A         __end_of_input_old_pass 1D12  
       __end_of_input_new_pass 20D8                   ___param_bank 000010                   ___ftmul@sign 001B  
              RtccReadTime@pTm 0001         __end_of_input_password 2DEE                obtain_pass@pass 0058  
                 ___fttol@exp1 0036                          ??_exp 004C                          ??_log 0037  
                 ___fttol@lval 0032                          ??_pow 0058                    _Delay1KTCYx 3846  
                __CFG_PLLDIV$1 000000                          ?_main 0001                __end_of___awdiv 2CCE  
              __end_of___ftadd 18AC                          STR_10 0FD6                          STR_11 0F67  
                        STR_20 0F50                          STR_12 0FB5                          STR_13 0FAA  
                        STR_21 0F58                          STR_30 0FB5                          STR_14 0F9F  
                        STR_22 0F48                          STR_15 0F7A                          STR_23 0F76  
                        STR_16 0FDF                          STR_24 0F84                          STR_17 0FDB  
                        STR_25 0FBF                          STR_26 0F71                          STR_18 0FC8  
                        STR_27 0FD0                          STR_19 0F92                          STR_28 0F6C  
                        STR_29 0FA8          __size_of_Delay100TCYx 0012                __end_of___ftdiv 26E0  
              __end_of___ftneg 37A6                __end_of___ftmul 2508                ___awdiv@divisor 0003  
              __end_of___ftsub 3502                __end_of___fttol 2406                __end_of___lwdiv 32E8  
              __end_of___lwmod 342C                ___awdiv@counter 0005                          _TRISA 000F92  
                        _TRISB 000F93                          _TRISC 000F94             input_password@pass 00C4  
                 ___lltoft@exp 0011                 __CFG_FCMEN$OFF 000000     __size_of_ver_opcion_cambio 0086  
                        _Setup 3478                  ___awtoft@sign 000C                          _clear 3808  
              __end_of_dpowers 0F0B                          _floor 26E0                          _ldexp 289C  
                        _frexp 2CCE                          _mes_d 00E1                          _errno 0084  
                        _mes_u 00E2                __end_of_isdigit 37EC                  ___ftpack@sign 0005  
                 ?_obtain_pass 0058                          tablat 000FF5                          pow@yi 00BA  
                 lcd_putrs@ptr 0009                          status 000FD8                __end_of_sprintf 1500  
            ?_configurar_reloj 0001                __end_of_twinkle 322C                    exp@exponent 004F  
           ??_configurar_reloj 0001        __CFG_DSWDTOSC$INTOSCREF 000000                    ldexp@newexp 0037  
      __size_of_clear_keyboard 0008                __initialization 35BA                ?_input_old_pass 0001  
              ?_input_new_pass 0001                    log@exponent 0037                   _Delay100TCYx 3858  
                 __end_of_main 3656                ??_lcd_send_byte 0004               RtccReadTime@rTD0 000B  
             RtccReadTime@rTD1 0003                ?_input_password 0001               __end_of_Read_RTC 1E58  
             obtain_pass@digit 005B               obtain_pass@input 005A           _set_desactive_vision 36E4  
                       ??_main 005F                  ___fttol@sign1 0031                  __activetblptr 000002  
           is_not_letter@input 0002               __end_of_RtccWrOn 387C                         ?_Setup 0001  
                       ?_clear 0001                         _ADCON0 000FC2                         _ADCON1 000FC1  
                       ?_floor 0041                         ?_ldexp 0034                         ?_frexp 0001  
             __end_of___altoft 307C                   ?_select_menu 0001                         _EECON2 000FA7  
                       _ANCON0 000F48                         _ANCON1 000F49               ___awdiv@dividend 0001  
             __end_of___awtoft 35BA               __end_of___ftpack 2B0A               __end_of___lbtoft 375E  
             __end_of__delay_s 3340               __end_of___lltoft 328C                 __CFG_WDTEN$OFF 000000  
             RtccWriteDate@pDt 0001                         _RTCCFG 000F3F                 __CFG_WPCFG$OFF 000000  
          input_password@digit 00C7            input_password@input 00C6               __end_of_caratula 38B6  
               __CFG_WPDIS$OFF 000000                 __CFG_XINST$OFF 000000               __end_of_lcd_init 2F82  
             __end_of_lcd_putc 3478                         ___ftge 2BA2              ?_lcd_setcursor_vb 0005  
                       ___wmul 3710                      ??___awdiv 0005                      ??___ftadd 0022  
               __CFG_STVREN$ON 000000                      ??___ftdiv 000F                      ??___ftneg 0004  
                       _diasem 00CD                      ??___ftmul 0013                         _anio_d 00DA  
                    ??___ftsub 002E                      ??___fttol 002C                         _anio_u 00DB  
                    ??___lwdiv 0005                      ??___lwmod 000C                   ?_review_code 0003  
           ??_lcd_setcursor_vb 0006                         _hora_d 00DF                         _hora_u 00E0  
              _sensorDisparado 0096                         clear_0 35C4               ___awdiv@quotient 0007  
                       _minuto 00D3          ?_set_desactive_vision 000B          __size_of_change_state 002E  
        __end_of_RtccWriteDate 1F9E          __end_of_RtccWriteTime 2304                  checkPass@pass 0001  
                       floor@i 0044                         floor@x 0041          ___ftmul@f3_as_product 0017  
             RtccWriteTime@pTm 0001                      ??_isdigit 0001                   __mediumconst 0000  
             __end_of_ver_info 289C                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8         __size_of_is_not_letter 0030                      ??_sprintf 0017  
                    ??_twinkle 0025         __size_of_read_keyboard 02B8          __end_of_not_fill_pass 3846  
             __end_ofexp@coeff 0F2D               __end_oflog@coeff 0F48                     __accesstop 0060  
      __end_of__initialization 35EA                     ___altoft@c 0037                     ___ftadd@f1 001C  
                   ___ftadd@f2 001F             __size_of_Write_RTC 019C                     ___ftge@ff1 0001  
                   ___ftge@ff2 0004                   eval_poly@res 0031                  ___rparam_used 000001  
                   ___ftdiv@f1 0009                     ___ftdiv@f2 000C                     ___ftdiv@f3 0013  
                   ___ftneg@f1 0001            _input_old_pass$3040 00BE            _input_old_pass$3041 00C1  
                   ___awtoft@c 0009                     ___lbtoft@c 000C                   _change_state 36B6  
                   ___ftmul@f1 000D                     ___ftmul@f2 0010                     ___ftsub@f1 0028  
                   ___ftsub@f2 002B                     ___fttol@f1 0028                 __pcstackCOMRAM 0001  
                __end_of_Setup 34BE                   __pidataBANK0 387C             __size_of_checkPass 001C  
                __end_of_clear 381E                     ___lltoft@c 0009                  __end_of_floor 27BE  
                __end_of_ldexp 2970                  __end_of_frexp 2D60               ??_dispararSensor 0015  
          _input_new_pass$3042 00BE            _input_new_pass$3043 00C1                __CFG_DSWDTPS$G2 000000  
                   _diaDisparo 0082                review_code@pass 0005                __CFG_OSC$INTOSC 000000  
                      ??_Setup 000E              lcd_gotoxy@address 0007                        ??_clear 0006  
           __size_of_lcd_putrs 0054                        ??_floor 0044                        ??_ldexp 0039  
                      ??_frexp 0006                   sprintf@width 0021                     __pbssBANK0 0060  
                   _changePass 389C             __size_of_eval_poly 00D4                      ?_Read_RTC 0001  
         __size_of_obtain_pass 00EC                     _dia_semana 00DC      RtccWriteTime@tempHourWDay 000A  
               _clear_keyboard 38A6                      ?_RtccWrOn 0001                 lcd_send_byte@n 0003  
                _is_not_letter 3656                        ?___ftge 0001                        ?___wmul 0001  
                ?_RtccReadDate 0001             __size_of_next_code 004C         ??_set_desactive_vision 000D  
                ?_RtccReadTime 0001                  _read_keyboard 0FE4                   ?_Delay1KTCYx 0001  
                    ?___altoft 0037                      ?___awtoft 0009                      ?___ftpack 0001  
                    ?___lbtoft 0009                      ?__delay_s 0009                      ?___lltoft 0009  
            __end_of_Write_RTC 1A48                 __delay_s@index 000E                     _lcd_comand 388E  
                    ?_caratula 0001                     _lcd_gotoxy 37A6                        _RTCVALH 000F99  
                      _RTCVALL 000F98                      ?_lcd_init 0001              __end_of_checkPass 3808  
                    ?_lcd_putc 0001                     ??_Read_RTC 0013           __size_of_select_menu 0098  
             ??_input_old_pass 0058         __end_of_clear_keyboard 38AE               ??_input_new_pass 0058  
                   _mesDisparo 008E               ??_input_password 005F                     _minDisparo 0090  
       ver_opcion_cambio@input 005B                        __Hparam 0000                        __Lparam 0000  
               ?_is_not_letter 0001       __size_of_lcd_send_nibble 0076                     ??_RtccWrOn 0001  
               ??_RtccReadDate 0003                      ?_ver_info 0001                __size_of___ftge 0096  
               ??_RtccReadTime 0003                        ___awdiv 2C38                        ___ftadd 16E8  
            __end_of_lcd_putrs 3394                        ___ftdiv 25F4                 ?_read_keyboard 0001  
                      ___ftneg 3782                __size_of___wmul 0028                        ___ftmul 2406  
                      ___ftsub 34BE                        ___fttol 2304                        ___lwdiv 328C  
                      ___lwmod 33E0                   __psmallconst 0F00                     ??___altoft 003B  
                  _RtccTimeVal 0078                        __pcinit 35BA                        _fecha_d 00DD  
                      _fecha_u 00DE                     ??___awtoft 000C                     ??___ftpack 0006  
                   ??___lbtoft 000C              __end_of_eval_poly 2A44                        __ramtop 0F00  
    __size_of_configurar_reloj 0002                     ??__delay_s 000B                     ??___lltoft 000D  
                      __ptext0 3626                        __ptext1 3160                        __ptext2 2F82  
                      __ptext3 31C6                        __ptext4 2D60                        __ptext5 36E4  
                      __ptext6 381E                        __ptext7 375E                        __ptext8 36B6  
                      __ptext9 2508           __size_of_review_code 0024                        _buffer2 0097  
                    _T1CONbits 000FCD                        _dpowers 0F01                   __size_of_exp 01E8  
                 __size_of_log 0120                        _isdigit 37CA                   __size_of_pow 0182  
                   ??_caratula 0006                        _newpass 0092                        _segundo 0094  
                      _sprintf 129C                     ??_lcd_init 0005                     ??_lcd_putc 0008  
                      _twinkle 31C6           end_of_initialization 35EA              __end_of_next_code 33E0  
                      exp@sign 0051                    ?_changePass 0001           lcd_send_byte@address 0004  
                __Lmediumconst 0000                ?_clear_keyboard 0001                        pow@sign 00B9  
                 twinkle@input 0025                        postdec1 000FE5                        postdec2 000FDD  
                   ??_ver_info 0025                        postinc0 000FEE                        postinc2 000FDE  
                   _set_vision 3160          __end_of_lcd_send_byte 3626                      _PORTAbits 000F80  
                    _PORTCbits 000F82               __CFG_DSBOREN$OFF 000000                     _show_error 3540  
                  ?_lcd_comand 0001               __CFG_CPUDIV$OSC1 000000                  ?_show_success 0001  
                    _TRISBbits 000F93                    ?_lcd_gotoxy 0005      __size_of_lcd_setcursor_vb 0014  
              _LCD_INIT_STRING 0F0B                    ___ftdiv@exp 0016               __CFG_IOL1WAY$OFF 000000  
    RtccWriteDate@tempDayMonth 000A                ??_is_not_letter 0001            __CFG_MSSP7B_EN$MSK7 000000  
                  ___ftmul@exp 0016                ??_read_keyboard 0024               Delay100TCYx@unit 0001  
                   _write_Date 2F82                 __end_of___ftge 2C38                    __delay_s@it 000C  
               __end_of___wmul 3738      RtccWriteDate@tempHourWDay 000C      set_desactive_vision@digit 000B  
          __size_of_changePass 000A             not_fill_pass@digit 0001              ??_lcd_send_nibble 0001  
                __pbitbssBANK0 0738           __size_of_Delay1KTCYx 0012               __CFG_DSWDTEN$OFF 000000  
                   floor@expon 0047                 changePass@pass 0001                 ??_show_success 0010  
          start_initialization 35BA                     eval_poly@d 002B                     eval_poly@n 002D  
                   eval_poly@x 0028                     ldexp@value 0034                    __end_of_exp 16E8  
                  __end_of_log 21F8                    __end_of_pow 1BCA           __end_of_RtccReadDate 2E7C  
         __end_of_RtccReadTime 3160               review_code@digit 0003                     frexp@value 0001  
         RtccWriteTime@wasAlrm 0006           RtccWriteTime@wasWrEn 0007         __size_of_RtccWriteDate 0146  
              RtccWriteDate@di 0003         __size_of_RtccWriteTime 010C              __size_of_Read_RTC 0146  
          __size_of_lcd_comand 000E                       ??___ftge 0007            __size_of_lcd_gotoxy 0024  
                     ??___wmul 0005                    ?_set_vision 0001                    __pdataBANK0 00C9  
            __size_of_RtccWrOn 0012                RtccWriteTime@di 0003               __CFG_LPT1OSC$OFF 000000  
             _configurar_reloj 38B6         __size_of_not_fill_pass 0014                    ?_show_error 0001  
            __size_of___altoft 007C                    _ALRMCFGbits 000F91        __end_of_LCD_INIT_STRING 0F0F  
            __size_of___awtoft 003C              __size_of___ftpack 00C6              __size_of___lbtoft 0026  
            __size_of__delay_s 0058              __size_of___lltoft 0060                  __pcstackBANK0 00B3  
                    _Write_RTC 18AC                   _isdigit$2643 0002              __size_of_caratula 0008  
                ??_obtain_pass 005D                Delay1KTCYx@unit 0001              __size_of_lcd_init 0080  
                  sprintf@flag 001D              __size_of_lcd_putc 004C                    sprintf@prec 0020  
                    _checkPass 37EC                      __pnvBANK0 00DA               ___lwdiv@dividend 0001  
                ?_Delay100TCYx 0001                       ?___awdiv 0001                       ?___ftadd 001C  
                     ?___ftdiv 0009                       ?___ftneg 0001                       ?___ftmul 000D  
                     ?___ftsub 0028                       ?___fttol 0028                       ?___lwdiv 0001  
                  ?_write_Date 0001                       ?___lwmod 0008              __size_of_ver_info 00DE  
      RtccWriteTime@tempMinSec 0008  __size_of_set_desactive_vision 002C                      _lcd_putrs 3340  
      lcd_setcursor_vb@visible 0006                  _RtccWriteDate 1E58                    __smallconst 0F00  
                _RtccWriteTime 21F8                       ?_isdigit 0001                      _eval_poly 2970  
         __CFG_RTCOSC$T1OSCREF 000000               _lcd_setcursor_vb 381E                 __size_of_Setup 0046  
                   ?_Write_RTC 0001        __size_of_dispararSensor 0030               ___lwdiv@quotient 0005  
                ??_select_menu 005C                 __size_of_clear 0016               ??_clear_keyboard 0001  
                     ?_sprintf 000D                 __size_of_floor 00DE                 __size_of_ldexp 00D4  
               __size_of_frexp 0092                       ?_twinkle 0001                   ??_changePass 0003  
          __size_of_set_vision 0066               _RtccAlrmTimeDate 0060                  _not_fill_pass 3832  
               ___wmul@product 0005                __delay_s@millis 0009                       _LATAbits 000F89  
                     _LATBbits 000F8A                     ?_checkPass 0001                      _next_code 3394  
                     _PIE3bits 000FA3            __end_of_obtain_pass 25F4            __size_of_show_error 003E  
                    _segundo_d 00E5                 ??_Delay100TCYx 0001                      _segundo_u 00E6  
         __end_of_show_success 3540               __CFG_WDTPS$32768 000000             _is_not_letter$1260 0001  
                ??_review_code 0007             RtccWriteDate@wasOn 0005             _Rtcc_read_TimeDate 0070  
         dispararSensor@sensor 0013                 ?_RtccWriteDate 0001                     ?_lcd_putrs 0009  
            ___wmul@multiplier 0001             __end_of_changePass 38A6                 ?_RtccWriteTime 0001  
                    lcd_init@i 0005          __size_of_RtccReadDate 008E                   ??_lcd_comand 0005  
                   ?_eval_poly 0028                      lcd_putc@c 0008          __size_of_RtccReadTime 006E  
                 ??_lcd_gotoxy 0006                      copy_data0 35DE                 ?_not_fill_pass 0001  
          __size_of_write_Date 007E                       _Read_RTC 1D12                     ?_next_code 0008  
                  _horaDisparo 0086            __end_of_select_menu 2BA2                      frexp@eptr 0004  
              _lcd_send_nibble 307C                       __Hrparam 0000                  ?_change_state 0001  
                     _RtccDate 00AB                       __Lrparam 0000                       _RtccTime 00AF  
                     _RtccWrOn 386A             __end_of_lcd_comand 389C             __end_of_lcd_gotoxy 37CA  
                 _RtccReadDate 2DEE               __size_of___awdiv 0096        __size_of_input_old_pass 0148  
             __size_of___ftadd 01C4                   _RtccReadTime 30F2        __size_of_input_new_pass 013A  
             __size_of___ftdiv 00EC               __size_of___ftneg 0024                       ___altoft 3000  
             __size_of___ftmul 0102               __size_of___ftsub 0044               __size_of___fttol 0102  
             __size_of___lwdiv 005C               __size_of___lwmod 004C                       ___awtoft 357E  
                     ___ftpack 2A44                       ___lbtoft 3738        __size_of_input_password 008E  
                     __delay_s 32E8                       ___lltoft 322C                   _RtccTimeDate 0068  
                     _exp$3046 004C            __end_of_review_code 3782                     sprintf@val 001E  
                     _caratula 38AE               __size_of_isdigit 0022                ___lwdiv@divisor 0003  
                  ??_Write_RTC 000E                ___lwdiv@counter 0007                       __ptext10 3394  
                     __ptext11 3656                       __ptext20 20D8                       __ptext12 2B0A  
                     __ptext21 1500                       __ptext13 2E7C                       __ptext30 34BE  
                     __ptext22 289C                       __ptext14 3502                       __ptext31 16E8  
                     __ptext23 26E0                       __ptext15 3540                       __ptext40 2A44  
                     __ptext32 3782                       __ptext24 2CCE                       __ptext16 1BCA  
                     __ptext41 389C                       __ptext33 25F4                       __ptext25 2304  
                     __ptext17 37EC                       __ptext50 342C                       __ptext42 27BE  
                     __ptext34 357E                       __ptext26 2BA2                       __ptext18 1F9E  
                     __ptext51 37A6                       __ptext43 0FE4                       __ptext35 322C  
                     __ptext27 3000                       __ptext19 1A48                       __ptext60 2F02  
                     __ptext52 3808                       __ptext44 129C                       __ptext36 3832  
                     __ptext28 2970                       __ptext61 3846                       __ptext53 3686  
                     __ptext45 37CA                       __ptext37 38A6                       __ptext29 2406  
                     __ptext70 386A                       __ptext62 388E                       __ptext54 1D12  
                     __ptext46 3710                       __ptext38 32E8                       __ptext63 35F4  
                     __ptext55 30F2                       __ptext47 33E0                       __ptext39 3738  
                     __ptext64 307C                       __ptext56 2DEE                       __ptext48 328C  
                     __ptext65 3858                       __ptext57 38B6                       __ptext49 3340  
                     __ptext66 18AC                       __ptext58 38AE                       __ptext67 2C38  
                     __ptext59 3478                       __ptext68 21F8                       __ptext69 1E58  
                     _lcd_init 2F02                       _lcd_putc 342C                       _pow$3044 00B3  
                     _pow$3045 00B6                    _obtain_pass 2508                 next_code@digit 0008  
             __size_of_sprintf 0264               __size_of_twinkle 0066                 next_code@input 000A  
          input_old_pass@digit 00C7         __size_of_lcd_send_byte 0032       __end_of_configurar_reloj 38B8  
          input_old_pass@input 00C6                  __size_of_main 0030                    ??_checkPass 0003  
               ??_change_state 0001                       _minuto_d 00E3                       _minuto_u 00E4  
                     _password 00D5          __end_of_is_not_letter 3686                       _ver_info 27BE  
                 ??_set_vision 005F          __end_of_read_keyboard 129C                  ??_Delay1KTCYx 0001  
              ??_RtccWriteDate 0004                ??_RtccWriteTime 0004            input_new_pass@digit 00C5  
                  ??_lcd_putrs 000B            input_new_pass@input 00C4                   ??_show_error 0010  
                     exp@coeff 0F0F                       log@coeff 0F2D                    _OSCTUNEbits 000F9B  
                   _INTCONbits 000FF2                    ??_eval_poly 002F             RtccWriteTime@wasOn 0005  
               _dispararSensor 3686           __end_of_Delay100TCYx 386A                       isdigit@c 0003  
              ??_not_fill_pass 0003                    _select_menu 2B0A              _ver_opcion_cambio 2E7C  
                    sprintf@ap 001B        __end_of_lcd_send_nibble 30F2                      sprintf@sp 000D  
           __end_of_set_vision 31C6             ?_ver_opcion_cambio 0001          lcd_setcursor_vb@blink 0005  
        __size_of_show_success 003E               ___lwmod@dividend 0008                    ??_next_code 000C  
 ver_opcion_cambio@old_correct 005A             input_old_pass@pass 00C4             __end_of_show_error 357E  
                   _OSCCONbits 000FD3            ??_ver_opcion_cambio 005A       __end_of_lcd_setcursor_vb 3832  
        RtccWriteDate@tempYear 0007                   ??_write_Date 0024                    _review_code 375E  
                _lcd_send_byte 35F4                     _RTCCFGbits 000F3F                       sprintf@c 0023  
                     sprintf@f 000F         __end_of_dispararSensor 36B6                ___lwmod@divisor 000A  
          __end_of_Delay1KTCYx 3858                ___lwmod@counter 000C           RtccWriteDate@wasAlrm 0006  
    __end_of_ver_opcion_cambio 2F02                   _show_success 3502           RtccWriteDate@wasWrEn 0009  
             _obtain_pass$3038 00BE               _obtain_pass$3039 00C1   __end_of_set_desactive_vision 3710  
           __end_of_write_Date 3000          lcd_send_nibble@nibble 0002  
